From a702ce22d623f5c18307f7d782fee81d5f2d8785 Mon Sep 17 00:00:00 2001
From: Roy Pledge <Roy.Pledge@freescale.com>
Date: Wed, 6 May 2015 16:21:17 -0400
Subject: [PATCH 0641/1429] fsl-dpio: Process frames in IRQ context

Stop using threaded IRQs and move back to hardirq top-halves.
This is the first patch of a small series adapting the DPIO and Ethernet
code to these changes.

Signed-off-by: Roy Pledge <roy.pledge@freescale.com>
Tested-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Tested-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Stuart: split out dpaa-eth part separately]
Signed-off-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/dpio-drv.c     |   22 ++++++----------------
 drivers/staging/fsl-mc/bus/dpio/dpio_service.c |   24 ++++++++----------------
 2 files changed, 14 insertions(+), 32 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c b/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
index f4e1d13..5b642e0 100644
--- a/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
+++ b/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
@@ -77,14 +77,6 @@ static int dpio_thread(void *data)
 	return 0;
 }
 
-static irqreturn_t dpio_irq_pre_handler(int irq_num, void *arg)
-{
-	struct device *dev = (struct device *)arg;
-	struct dpio_priv *priv = dev_get_drvdata(dev);
-
-	return dpaa_io_preirq(priv->io);
-}
-
 static irqreturn_t dpio_irq_handler(int irq_num, void *arg)
 {
 	struct device *dev = (struct device *)arg;
@@ -122,14 +114,12 @@ static int register_dpio_irq_handlers(struct fsl_mc_device *ls_dev, int cpu)
 
 	for (i = 0; i < irq_count; i++) {
 		irq = ls_dev->irqs[i];
-		error = devm_request_threaded_irq(&ls_dev->dev,
-						irq->irq_number,
-						dpio_irq_pre_handler,
-						dpio_irq_handler,
-						IRQF_NO_SUSPEND |
-							IRQF_ONESHOT,
-						priv->irq_name,
-						&ls_dev->dev);
+		error = devm_request_irq(&ls_dev->dev,
+					 irq->irq_number,
+					 dpio_irq_handler,
+					 0,
+					 priv->irq_name,
+					 &ls_dev->dev);
 		if (error < 0) {
 			dev_err(&ls_dev->dev,
 				"devm_request_threaded_irq() failed: %d\n",
diff --git a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
index d5ec22e..c4a995e 100644
--- a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
+++ b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
@@ -326,16 +326,19 @@ int dpaa_io_get_descriptor(struct dpaa_io *obj, struct dpaa_io_desc *desc)
 }
 EXPORT_SYMBOL(dpaa_io_get_descriptor);
 
+#define DPAA_POLL_MAX 32
+
 int dpaa_io_poll(struct dpaa_io *obj)
 {
 	const struct ldpaa_dq *dq;
 	struct qbman_swp *swp;
+	int max = 0;
 
 	if (obj->magic != MAGIC_OBJECT)
 		return -EINVAL;
 	swp = obj->object.swp;
 	dq = qbman_swp_dqrr_next(swp);
-	if (dq) {
+	while (dq) {
 		if (qbman_result_is_FQDAN(dq)) {
 			struct dpaa_io_notification_ctx *ctx;
 			uint64_t q64;
@@ -346,26 +349,15 @@ int dpaa_io_poll(struct dpaa_io *obj)
 		} else
 			pr_crit("Unrecognised/ignored DQRR entry\n");
 		qbman_swp_dqrr_consume(swp, dq);
+		++max;
+		if (max > DPAA_POLL_MAX)
+			return 0;
+		dq = qbman_swp_dqrr_next(swp);
 	}
 	return 0;
 }
 EXPORT_SYMBOL(dpaa_io_poll);
 
-int dpaa_io_preirq(struct dpaa_io *obj)
-{
-	struct qbman_swp *swp;
-	uint32_t status;
-
-	if (obj->magic != MAGIC_OBJECT)
-		return -EINVAL;
-	swp = obj->object.swp;
-	status = qbman_swp_interrupt_read_status(swp);
-	if (!status)
-		return IRQ_NONE;
-	qbman_swp_interrupt_set_inhibit(swp, 1);
-	return IRQ_WAKE_THREAD;
-}
-
 int dpaa_io_irq(struct dpaa_io *obj)
 {
 	struct qbman_swp *swp;
-- 
1.7.5.4

