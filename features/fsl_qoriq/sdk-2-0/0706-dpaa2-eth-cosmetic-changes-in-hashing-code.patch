From b86e77c6b0f777b4cbccf67c4e7809f41516ac80 Mon Sep 17 00:00:00 2001
From: Alex Marginean <alexandru.marginean@freescale.com>
Date: Tue, 2 Jun 2015 10:13:05 +0300
Subject: [PATCH 0706/1383] dpaa2-eth: cosmetic changes in hashing code

Signed-off-by: Alex Marginean <alexandru.marginean@freescale.com>
Change-Id: I79e21a69a6fb68cdbdb8d853c059661f8988dbf9
Reviewed-on: http://git.am.freescale.net:8181/37258
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c | 55 ++++++++++++----------
 1 file changed, 31 insertions(+), 24 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c
index d324034..f345aa2 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c
@@ -282,19 +282,17 @@ static const struct ldpaa_hash_fields {
 	int cls_field;
 } ldpaa_hash_fields[] = {
 	{
+		/* L2 header */
 		.rxnfc_field = RXH_L2DA,
 		.cls_prot = NET_PROT_ETH,
 		.cls_field = NH_FLD_ETH_DA,
 	}, {
+		/* VLAN header */
 		.rxnfc_field = RXH_VLAN,
 		.cls_prot = NET_PROT_VLAN,
 		.cls_field = NH_FLD_VLAN_TCI,
 	}, {
-		.rxnfc_field = RXH_L3_PROTO,
-		.cls_prot = NET_PROT_IP,
-		.cls_field = NH_FLD_IP_PROTO,
-	}, {
-		/* following fields apply both to IPv4 and IPv6 */
+		/* IP header */
 		.rxnfc_field = RXH_IP_SRC,
 		.cls_prot = NET_PROT_IP,
 		.cls_field = NH_FLD_IP_SRC,
@@ -303,6 +301,10 @@ static const struct ldpaa_hash_fields {
 		.cls_prot = NET_PROT_IP,
 		.cls_field = NH_FLD_IP_DST,
 	}, {
+		.rxnfc_field = RXH_L3_PROTO,
+		.cls_prot = NET_PROT_IP,
+		.cls_field = NH_FLD_IP_PROTO,
+	}, {
 		/* Using UDP ports, this is functionally equivalent to raw
 		 * byte pairs from L4 header.
 		 */
@@ -331,6 +333,10 @@ int ldpaa_set_hash(struct net_device *net_dev, u64 flags)
 		return -ENOTSUPP;
 	}
 
+	if (!(priv->dpni_attrs.options & DPNI_OPT_DIST_HASH))
+		/* dev doesn't support hashing */
+		return -EOPNOTSUPP;
+
 	if (flags & ~LDPAA_RXH_SUPPORTED) {
 		/* RXH_DISCARD is not supported */
 		netdev_err(net_dev,
@@ -341,26 +347,27 @@ int ldpaa_set_hash(struct net_device *net_dev, u64 flags)
 	memset(&cls_cfg, 0, sizeof(cls_cfg));
 
 	for (i = 0; i < ARRAY_SIZE(ldpaa_hash_fields); i++) {
-		if (flags & ldpaa_hash_fields[i].rxnfc_field) {
-			struct dpkg_extract *key =
-				&cls_cfg.extracts[cls_cfg.num_extracts];
-
-			if (cls_cfg.num_extracts >= DPKG_MAX_NUM_OF_EXTRACTS) {
-				netdev_err(net_dev,
-					"error adding key extraction rule, too many rules?\n");
-				return -E2BIG;
-			}
-
-			key->type = DPKG_EXTRACT_FROM_HDR;
-			key->extract.from_hdr.prot =
-				ldpaa_hash_fields[i].cls_prot;
-			key->extract.from_hdr.type = DPKG_FULL_FIELD;
-			key->extract.from_hdr.field =
-				ldpaa_hash_fields[i].cls_field;
-			cls_cfg.num_extracts++;
-
-			enabled_flags |= ldpaa_hash_fields[i].rxnfc_field;
+		struct dpkg_extract *key =
+			&cls_cfg.extracts[cls_cfg.num_extracts];
+
+		if (!(flags & ldpaa_hash_fields[i].rxnfc_field))
+			continue;
+
+		if (cls_cfg.num_extracts >= DPKG_MAX_NUM_OF_EXTRACTS) {
+			netdev_err(net_dev,
+				"error adding key extraction rule, too many rules?\n");
+			return -E2BIG;
 		}
+
+		key->type = DPKG_EXTRACT_FROM_HDR;
+		key->extract.from_hdr.prot =
+			ldpaa_hash_fields[i].cls_prot;
+		key->extract.from_hdr.type = DPKG_FULL_FIELD;
+		key->extract.from_hdr.field =
+			ldpaa_hash_fields[i].cls_field;
+		cls_cfg.num_extracts++;
+
+		enabled_flags |= ldpaa_hash_fields[i].rxnfc_field;
 	}
 
 	dma_mem =  kzalloc(LDPAA_CLASSIFIER_DMA_SIZE, GFP_DMA | GFP_KERNEL);
-- 
2.8.1

