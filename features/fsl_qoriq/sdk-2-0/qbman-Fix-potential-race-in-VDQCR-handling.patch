From befb6db383c925114d2f7ee1547daac4fae082f7 Mon Sep 17 00:00:00 2001
From: Roy Pledge <Roy.Pledge@freescale.com>
Date: Tue, 7 Apr 2015 19:35:06 -0400
Subject: [PATCH 0627/1429] qbman: Fix potential race in VDQCR handling

Remove atomic_read() check of the VDQCR busy marker.  These checks were racy
as the flag could be incorrectly cleared if checked while another thread was
starting a pull command.  The check is unneeded since we can determine the
owner of the outstanding pull command through other means.

Signed-off-by: Roy Pledge <Roy.Pledge@freescale.com>
Change-Id: Icc64577c0a4ce6dadef208975e980adfc6796c86
Reviewed-on: http://git.am.freescale.net:8181/34705
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Haiying Wang <Haiying.Wang@freescale.com>
Reviewed-by: Roy Pledge <roy.pledge@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/qbman_portal.c |   25 +++++++++++++----------
 1 files changed, 14 insertions(+), 11 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
index 28d6db7..fb780f0 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
@@ -632,6 +632,7 @@ const struct ldpaa_dq *qbman_swp_dqrr_next(struct qbman_swp *s)
 {
 	uint32_t verb;
 	uint32_t response_verb;
+	uint32_t flags;
 	const struct ldpaa_dq *dq;
 	const uint32_t *p;
 
@@ -692,16 +693,16 @@ const struct ldpaa_dq *qbman_swp_dqrr_next(struct qbman_swp *s)
 	 * later. */
 	if (!s->dqrr.next_idx)
 		s->dqrr.valid_bit ^= QB_VALID_BIT;
-	/* VDQCR "no longer busy" hook - if VDQCR shows "busy" and this is a
-	 * VDQCR result, mark it as non-busy. */
-	if (!atomic_read(&s->vdq.busy)) {
-		uint32_t flags = ldpaa_dq_flags(dq);
-
-		response_verb = qb_attr_code_decode(&code_dqrr_response, &verb);
-		if ((response_verb == QBMAN_DQRR_RESPONSE_DQ) &&
-				(flags & LDPAA_DQ_STAT_VOLATILE))
-			atomic_inc(&s->vdq.busy);
-	}
+
+	/* If this is the final response to a volatile dequeue command
+	   indicate that the vdq is no longer busy */
+	flags = ldpaa_dq_flags(dq);
+	response_verb = qb_attr_code_decode(&code_dqrr_response, &verb);
+	if ((response_verb == QBMAN_DQRR_RESPONSE_DQ) &&
+	    (flags & LDPAA_DQ_STAT_VOLATILE) &&
+	    (flags & LDPAA_DQ_STAT_EXPIRED))
+		atomic_inc(&s->vdq.busy);
+
 	qbman_cena_invalidate_prefetch(&s->sys,
 				       QBMAN_CENA_SWP_DQRR(s->dqrr.next_idx));
 	return dq;
@@ -764,8 +765,10 @@ int qbman_dq_entry_has_newtoken(struct qbman_swp *s,
 	 * reset "busy".  We instead base the decision on whether the current
 	 * result is sitting at the first 'storage' location of the busy
 	 * command. */
-	if (!atomic_read(&s->vdq.busy) && (s->vdq.storage == dq))
+	if (s->vdq.storage == dq) {
+		s->vdq.storage = NULL;
 		atomic_inc(&s->vdq.busy);
+	}
 	return 1;
 }
 EXPORT_SYMBOL(qbman_dq_entry_has_newtoken);
-- 
1.7.5.4

