From 18ccff740830897a70b79bc7f15d908f30b3050f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Horia=20Geant=C4=83?= <horia.geanta@nxp.com>
Date: Wed, 20 Jan 2016 12:06:07 +0200
Subject: [PATCH 0539/1383] crypto: caam: fix encryption with null assoc data

This is a fix for caam gcm offloading failure through cryptodev. If
assoc data is null, the driver crashes:

Modules linked in: cryptodev
CPU: 3 PID: 1930 Comm: openssl Not tainted
3.12.19-rt30-QorIQ-SDK-V1.7+gcebf692 #4
task: e9061070 ti: ebe72000 task.ti: ebe72000
NIP: c04ea360 LR: c04eed54 CTR: c04ef530
REGS: ebe73ba0 TRAP: 0300   Not tainted
(3.12.19-rt30-QorIQ-SDK-V1.7+gcebf692)
MSR: 00029002 <CE,EE,ME>  CR: 44242484  XER: 00000000
DEAR: 00000000, ESR: 00000000

GPR00: c04eed54 ebe73c50 e9061070 eb41ea10 00000000 00000001 00000001 00000000
GPR08: 00000020 00000000 00000000 00000002 44242482 10089738 10081750 100633f8
GPR16: 100813fc 00000000 000000d1 ebe73cd8 0000000c bfc8e9c4 bfc8de54 eb41ea10
GPR24: eb896a00 c087dbe0 00000001 00000000 eb41ea10 00000001 00000000 00000000
NIP [c04ea360] dma_map_sg_chained+0x50/0x180
LR [c04eed54] aead_edesc_alloc.constprop.19+0x164/0x940
Call Trace:
[ebe73c50] [84244482] 0x84244482 (unreliable)
[ebe73c80] [c04eed54] aead_edesc_alloc.constprop.19+0x164/0x940
[ebe73cd0] [c04ef55c] aead_encrypt+0x2c/0xd0
[ebe73d00] [f9523c2c] cryptodev_cipher_encrypt+0xcc/0x140 [cryptodev]
[ebe73d10] [f952561c] crypto_auth_run+0x2ec/0xbd0 [cryptodev]
[ebe73d80] [f95227a0] cryptodev_ioctl+0x500/0xa10 [cryptodev]
[ebe73eb0] [c0107a40] do_vfs_ioctl+0x4d0/0x780
[ebe73f10] [c0107d30] SyS_ioctl+0x40/0x80
[ebe73f40] [c000fbcc] ret_from_syscall+0x0/0x3c
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/caam/caamalg.c | 21 ++++++++++-----------
 1 file changed, 10 insertions(+), 11 deletions(-)

diff --git a/drivers/crypto/caam/caamalg.c b/drivers/crypto/caam/caamalg.c
index 8eb08e2..6108a4d 100644
--- a/drivers/crypto/caam/caamalg.c
+++ b/drivers/crypto/caam/caamalg.c
@@ -2510,7 +2510,7 @@ static void init_aead_job(u32 *sh_desc, dma_addr_t ptr,
 		in_options = 0;
 	} else {
 		src_dma = edesc->sec4_sg_dma;
-		sec4_sg_index += (edesc->assoc_nents ? : 1) + 1 +
+		sec4_sg_index += edesc->assoc_nents + 1 +
 				 (edesc->src_nents ? : 1);
 		in_options = LDST_SGF;
 	}
@@ -2523,7 +2523,7 @@ static void init_aead_job(u32 *sh_desc, dma_addr_t ptr,
 			dst_dma = sg_dma_address(req->src);
 		} else {
 			dst_dma = src_dma + sizeof(struct sec4_sg_entry) *
-				  ((edesc->assoc_nents ? : 1) + 1);
+				  (edesc->assoc_nents + 1);
 			out_options = LDST_SGF;
 		}
 	} else {
@@ -2748,7 +2748,7 @@ static struct aead_edesc *aead_edesc_alloc(struct aead_request *req,
 	unsigned int authsize = ctx->authsize;
 	bool is_gcm = false;
 
-	assoc_nents = sg_count(req->assoc, req->assoclen, &assoc_chained);
+	assoc_nents = __sg_count(req->assoc, req->assoclen, &assoc_chained);
 
 	if (unlikely(req->dst != req->src)) {
 		src_nents = sg_count(req->src, req->cryptlen, &src_chained);
@@ -2762,9 +2762,9 @@ static struct aead_edesc *aead_edesc_alloc(struct aead_request *req,
 					(encrypt ? authsize : 0),
 				     &src_chained);
 	}
-
-	sgc = dma_map_sg_chained(jrdev, req->assoc, assoc_nents ? : 1,
-				 DMA_TO_DEVICE, assoc_chained);
+	if (req->assoclen)
+		sgc = dma_map_sg_chained(jrdev, req->assoc, assoc_nents,
+					DMA_TO_DEVICE, assoc_chained);
 	if (likely(req->src == req->dst)) {
 		sgc = dma_map_sg_chained(jrdev, req->src, src_nents ? : 1,
 					 DMA_BIDIRECTIONAL, src_chained);
@@ -2792,16 +2792,15 @@ static struct aead_edesc *aead_edesc_alloc(struct aead_request *req,
 	 * All other - expected input sequence: AAD, IV, text
 	 */
 	if (is_gcm)
-		all_contig = (!assoc_nents &&
+		all_contig = ((assoc_nents == 1) &&
 			      iv_dma + ivsize == sg_dma_address(req->assoc) &&
 			      !src_nents && sg_dma_address(req->assoc) +
 			      req->assoclen == sg_dma_address(req->src));
 	else
-		all_contig = (!assoc_nents && sg_dma_address(req->assoc) +
+		all_contig = ((assoc_nents == 1) && sg_dma_address(req->assoc) +
 			      req->assoclen == iv_dma && !src_nents &&
 			      iv_dma + ivsize == sg_dma_address(req->src));
 	if (!all_contig) {
-		assoc_nents = assoc_nents ? : 1;
 		src_nents = src_nents ? : 1;
 		sec4_sg_len = assoc_nents + 1 + src_nents;
 	}
@@ -2832,7 +2831,7 @@ static struct aead_edesc *aead_edesc_alloc(struct aead_request *req,
 
 	sec4_sg_index = 0;
 	if (!all_contig) {
-		if (!is_gcm) {
+		if (!is_gcm && assoc_nents) {
 			sg_to_sec4_sg(req->assoc,
 				      assoc_nents,
 				      edesc->sec4_sg +
@@ -2844,7 +2843,7 @@ static struct aead_edesc *aead_edesc_alloc(struct aead_request *req,
 				   iv_dma, ivsize, 0);
 		sec4_sg_index += 1;
 
-		if (is_gcm) {
+		if (is_gcm && assoc_nents) {
 			sg_to_sec4_sg(req->assoc,
 				      assoc_nents,
 				      edesc->sec4_sg +
-- 
2.8.1

