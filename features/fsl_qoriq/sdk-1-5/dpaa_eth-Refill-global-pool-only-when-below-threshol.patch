From 283b25b68f96b15da797ba4c30216f603ea47631 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Wed, 31 Jul 2013 18:12:03 +0300
Subject: [PATCH 151/383] dpaa_eth: Refill global pool only when below
 threshold

Don't refill the Rx global pool every time it drops below its target
count, instead wait for the number of buffers to drop below a certain
threshold.

This was not so important until now, but is necessary in view of the
recycling mechanism.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Change-Id: I341f6bf7bd746465cf6d17644a4edbd1b3d20aba
Reviewed-on: http://git.am.freescale.net:8181/4189
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Bucur Madalin-Cristian-B32716 <madalin.bucur@freescale.com>
Reviewed-by: Rivera Jose-B46482 <German.Rivera@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/4464
Reviewed-by: Sovaiala Cristian-Constantin-B39531 <Cristian.Sovaiala@freescale.com>
[Original patch taken from QorIQ-SDK-V1.5-SOURCE-20131219-yocto.iso]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c |   31 +++++++++++----------
 1 files changed, 16 insertions(+), 15 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index afa08c7..9b96d3f 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -157,22 +157,23 @@ int dpaa_eth_refill_bpools(struct dpa_percpu_priv_s *percpu_priv)
 	int count = *countptr;
 	int new_bufs;
 
-	/* Add pages to the buffer pool */
-	while (count < CONFIG_FSL_DPAA_ETH_MAX_BUF_COUNT) {
-		new_bufs = _dpa_bp_add_8_bufs(dpa_bp);
-		if (unlikely(!new_bufs)) {
-			/* Avoid looping forever if we've temporarily
-			 * run out of memory. We'll try again at the next
-			 * NAPI cycle.
-			 */
-			break;
-		}
-		count += new_bufs;
-	}
-	*countptr = count;
+	if (unlikely(count < CONFIG_FSL_DPAA_ETH_REFILL_THRESHOLD)) {
+		do {
+			new_bufs = _dpa_bp_add_8_bufs(dpa_bp);
+			if (unlikely(!new_bufs)) {
+				/* Avoid looping forever if we've temporarily
+				 * run out of memory. We'll try again at the
+				 * next NAPI cycle.
+				 */
+				break;
+			}
+			count += new_bufs;
+		} while (count < CONFIG_FSL_DPAA_ETH_MAX_BUF_COUNT);
 
-	if (unlikely(*countptr < CONFIG_FSL_DPAA_ETH_MAX_BUF_COUNT))
-		return -ENOMEM;
+		*countptr = count;
+		if (unlikely(count < CONFIG_FSL_DPAA_ETH_MAX_BUF_COUNT))
+			return -ENOMEM;
+	}
 
 	return 0;
 }
-- 
1.7.5.4

