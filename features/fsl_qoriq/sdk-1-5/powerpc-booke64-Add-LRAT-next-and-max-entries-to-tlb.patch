From 67e203a35bffd90a1dcffb9c067f021e3b67a2ec Mon Sep 17 00:00:00 2001
From: Mihai Caraman <mihai.caraman@freescale.com>
Date: Sat, 2 Nov 2013 00:27:50 +0200
Subject: [PATCH 280/383] powerpc/booke64: Add LRAT next and max entries to
 tlb_per_core structure

LRAT (Logical to Real Address Translation) is shared between hw threads.
Add LRAT next and max entries to tlb_per_core data structure and initialize
them.

Signed-off-by: Mihai Caraman <mihai.caraman@freescale.com>
Change-Id: Ib2a994783548a78aaf0727bb45f4dbff32ac2864
Reviewed-on: http://git.am.freescale.net:8181/6224
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Scott Wood <scottwood@freescale.com>
Reviewed-by: Thomas Trefny <Tom.Trefny@freescale.com>
[Original patch taken from QorIQ-SDK-V1.5-SOURCE-20131219-yocto.iso]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 arch/powerpc/include/asm/mmu-book3e.h |    6 ++++++
 arch/powerpc/include/asm/paca.h       |    1 +
 arch/powerpc/include/asm/reg_booke.h  |    1 +
 arch/powerpc/mm/fsl_booke_mmu.c       |    9 +++++++++
 4 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/include/asm/mmu-book3e.h b/arch/powerpc/include/asm/mmu-book3e.h
index 936db36..f282348 100644
--- a/arch/powerpc/include/asm/mmu-book3e.h
+++ b/arch/powerpc/include/asm/mmu-book3e.h
@@ -214,6 +214,12 @@
 #define TLBILX_T_CLASS2			6
 #define TLBILX_T_CLASS3			7
 
+/* LRATCFG bits */
+#define LRATCFG_ASSOC		0xFF000000
+#define LRATCFG_LASIZE		0x00FE0000
+#define LRATCFG_LPID		0x00002000
+#define LRATCFG_NENTRY 		0x00000FFF
+
 #ifndef __ASSEMBLY__
 #include <asm/bug.h>
 
diff --git a/arch/powerpc/include/asm/paca.h b/arch/powerpc/include/asm/paca.h
index 7b6d603..8ebfb81 100644
--- a/arch/powerpc/include/asm/paca.h
+++ b/arch/powerpc/include/asm/paca.h
@@ -113,6 +113,7 @@ struct paca_struct {
 	struct tlb_per_core {
 		/* For software way selection, as on Freescale TLB1 */
 		u8 esel_next, esel_max, esel_first;
+		u8 lrat_next, lrat_max;
 
 		/* Per-core spinlock for e6500 TLB handlers (no tlbsrx.) */
 		u8 lock;
diff --git a/arch/powerpc/include/asm/reg_booke.h b/arch/powerpc/include/asm/reg_booke.h
index 435f7ce..78f2c3c 100644
--- a/arch/powerpc/include/asm/reg_booke.h
+++ b/arch/powerpc/include/asm/reg_booke.h
@@ -68,6 +68,7 @@
 #define SPRN_DVC2	0x13F	/* Data Value Compare Register 2 */
 #define SPRN_LPID	0x152	/* Logical Partition ID */
 #define SPRN_MAS8	0x155	/* MMU Assist Register 8 */
+#define SPRN_LRATCFG	0x156	/* LRAT Configuration Register */
 #define SPRN_TLB0PS	0x158	/* TLB 0 Page Size Register */
 #define SPRN_TLB1PS	0x159	/* TLB 1 Page Size Register */
 #define SPRN_MAS5_MAS6	0x15c	/* MMU Assist Register 5 || 6 */
diff --git a/arch/powerpc/mm/fsl_booke_mmu.c b/arch/powerpc/mm/fsl_booke_mmu.c
index bf06d36b..abf7d47 100644
--- a/arch/powerpc/mm/fsl_booke_mmu.c
+++ b/arch/powerpc/mm/fsl_booke_mmu.c
@@ -198,6 +198,15 @@ unsigned long map_mem_in_cams(unsigned long ram, int max_cam_idx)
 	get_paca()->tlb_per_core.esel_max =
 		mfspr(SPRN_TLB1CFG) & TLBnCFG_N_ENTRY;
 	get_paca()->tlb_per_core.esel_first = i;
+
+	get_paca()->tlb_per_core.lrat_next = 0;
+	if (((mfspr(SPRN_MMUCFG) & MMUCFG_MAVN) == MMUCFG_MAVN_V2) &&
+	    (mfspr(SPRN_MMUCFG) & MMUCFG_LRAT)) {
+		get_paca()->tlb_per_core.lrat_max =
+			mfspr(SPRN_LRATCFG) & LRATCFG_NENTRY;
+	} else {
+		get_paca()->tlb_per_core.lrat_max = 0;
+	}
 #endif
 
 	return amount_mapped;
-- 
1.7.5.4

