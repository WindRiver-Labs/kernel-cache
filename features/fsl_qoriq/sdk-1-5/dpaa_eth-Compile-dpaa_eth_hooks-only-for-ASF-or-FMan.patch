From d95631b1a96a82d572836aea78f35705b0931df8 Mon Sep 17 00:00:00 2001
From: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Date: Fri, 29 Nov 2013 10:10:39 +0200
Subject: [PATCH 387/429] dpaa_eth: Compile dpaa_eth_hooks only for ASF or
 FMan Test

ASF and FMan Test are using the dpaa_eth_hooks therefore we
compile the hooks if one of the two are defined.

Signed-off-by: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Change-Id: I620d030fa5131fee7f3854be1eb64c24fab4bc9e
Reviewed-on: http://git.am.freescale.net:8181/6928
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Reviewed-by: Ruxandra Ioana Radulescu <ruxandra.radulescu@freescale.com>
Reviewed-by: Zhenhua Luo <zhenhua.luo@freescale.com>
[origin patch is from QorIQ-SDK-V1.5-20131219-yocto]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |   12 ++++++------
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    4 ++--
 .../net/ethernet/freescale/dpa/dpaa_eth_common.h   |    4 ++--
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c   |    6 ++++--
 4 files changed, 14 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index cc1746c..1bd3915 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -164,12 +164,12 @@ static void _dpa_rx_error(struct net_device *net_dev,
 		if (netif_msg_hw(priv) && net_ratelimit())
 			netdev_err(net_dev, "Err FD status = 0x%08x\n",
 					fd->status & FM_FD_STAT_RX_ERRORS);
-
+#if defined(CONFIG_AS_FASTPATH) || defined(CONFIG_FSL_FMAN_TEST)
 	if (dpaa_eth_hooks.rx_error &&
 		dpaa_eth_hooks.rx_error(net_dev, fd, fqid) == DPAA_ETH_STOLEN)
 		/* it's up to the hook to perform resource cleanup */
 		return;
-
+#endif
 	percpu_priv->stats.rx_errors++;
 
 	if (fd->status & FM_PORT_FRM_ERR_DMA)
@@ -197,12 +197,12 @@ static void _dpa_tx_error(struct net_device		*net_dev,
 	if (netif_msg_hw(priv) && net_ratelimit())
 		netdev_warn(net_dev, "FD status = 0x%08x\n",
 				fd->status & FM_FD_STAT_TX_ERRORS);
-
+#if defined(CONFIG_AS_FASTPATH) || defined(CONFIG_FSL_FMAN_TEST)
 	if (dpaa_eth_hooks.tx_error &&
 		dpaa_eth_hooks.tx_error(net_dev, fd, fqid) == DPAA_ETH_STOLEN)
 		/* now the hook must ensure proper cleanup */
 		return;
-
+#endif
 	percpu_priv->stats.tx_errors++;
 
 	/* If we intended the buffers from this frame to go into the bpools
@@ -310,12 +310,12 @@ static void __hot _dpa_tx_conf(struct net_device	*net_dev,
 
 
 	/* hopefully we need not get the timestamp before the hook */
-
+#if defined(CONFIG_AS_FASTPATH) || defined(CONFIG_FSL_FMAN_TEST)
 	if (dpaa_eth_hooks.tx_confirm && dpaa_eth_hooks.tx_confirm(net_dev,
 		fd, fqid) == DPAA_ETH_STOLEN)
 		/* it's the hook that must now perform cleanup */
 		return;
-
+#endif
 	/* This might not perfectly reflect the reality, if the core dequeuing
 	 * the Tx confirmation is different from the one that did the enqueue,
 	 * but at least it'll show up in the total count.
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index da6a980..4325785 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -71,7 +71,7 @@ static const char fsl_qman_frame_queues[][25] = {
 	[RX] = "fsl,qman-frame-queues-rx",
 	[TX] = "fsl,qman-frame-queues-tx"
 };
-
+#if defined(CONFIG_AS_FASTPATH) || defined(CONFIG_FSL_FMAN_TEST)
 /* A set of callbacks for hooking into the fastpath at different points. */
 struct dpaa_eth_hooks_s dpaa_eth_hooks;
 /*
@@ -86,7 +86,7 @@ void fsl_dpaa_eth_set_hooks(struct dpaa_eth_hooks_s *hooks)
 		pr_err("NULL pointer to hooks!\n");
 }
 EXPORT_SYMBOL(fsl_dpaa_eth_set_hooks);
-
+#endif
 extern const struct ethtool_ops dpa_ethtool_ops;
 
 int dpa_netdev_init(struct device_node *dpa_node,
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h
index fc86434..61879d2 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h
@@ -82,7 +82,7 @@ typedef enum dpaa_eth_hook_result (*dpaa_eth_egress_hook_t)(
 		struct sk_buff *skb, struct net_device *net_dev);
 typedef enum dpaa_eth_hook_result (*dpaa_eth_confirm_hook_t)(
 		struct net_device *net_dev, const struct qm_fd *fd, u32 fqid);
-
+#if defined(CONFIG_AS_FASTPATH) || defined(CONFIG_FSL_FMAN_TEST)
 /* Various hooks used for unit-testing and/or fastpath optimizations.
  * Currently only one set of such hooks is supported.
  */
@@ -113,7 +113,7 @@ struct dpaa_eth_hooks_s {
 void fsl_dpaa_eth_set_hooks(struct dpaa_eth_hooks_s *hooks);
 
 extern struct dpaa_eth_hooks_s dpaa_eth_hooks;
-
+#endif
 
 int dpa_netdev_init(struct device_node *dpa_node,
 		struct net_device *net_dev,
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index 6f47a56..db09603 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -563,12 +563,14 @@ void __hot _dpa_rx(struct net_device *net_dev,
 
 	dma_unmap_single(dpa_bp->dev, addr, dpa_bp->size, DMA_BIDIRECTIONAL);
 	if (likely(fd->format == qm_fd_contig)) {
+#if defined(CONFIG_AS_FASTPATH) || defined(CONFIG_FSL_FMAN_TEST)
 		/* Execute the Rx processing hook, if it exists. */
 		if (dpaa_eth_hooks.rx_default &&
 			dpaa_eth_hooks.rx_default((void *)fd, net_dev, fqid)
 						== DPAA_ETH_STOLEN)
 			/* won't count the rx bytes in */
 			return;
+#endif
 		skb = contig_fd_to_skb(priv, fd, &use_gro);
 	} else
 		skb = sg_fd_to_skb(priv, fd, &use_gro);
@@ -831,13 +833,13 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 	const int queue_mapping = dpa_get_queue_mapping(skb);
 	const bool nonlinear = skb_is_nonlinear(skb);
 	int *countptr;
-
+#if defined(CONFIG_AS_FASTPATH) || defined(CONFIG_FSL_FMAN_TEST)
 	/* If there is a Tx hook, run it. */
 	if (dpaa_eth_hooks.tx &&
 		dpaa_eth_hooks.tx(skb, net_dev) == DPAA_ETH_STOLEN)
 		/* won't update any Tx stats */
 		return NETDEV_TX_OK;
-
+#endif
 	priv = netdev_priv(net_dev);
 	/* Non-migratable context, safe to use __this_cpu_ptr */
 	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
-- 
1.7.5.4

