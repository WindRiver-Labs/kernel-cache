From 0a0fbf6d68bcd0e55248fc9c16e40e5cc4a3dd2b Mon Sep 17 00:00:00 2001
From: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
Date: Tue, 5 Nov 2013 11:52:11 +0200
Subject: [PATCH 328/429] dpa_offload: Fix fragmentation stats per flow

Fix initialization value for a counter of type Classification Table
that provides the fragmentation statistics per flow: during creation,
the selection was not properly used and during modification phase
the validity of a key was not taken in account.

Signed-off-by: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
Change-Id: If5d6f5ae9dae5812c6f8f8ba6dc0d3b24c16b6e5
Reviewed-on: http://git.am.freescale.net:8181/6276
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Aurelian Zanoschi <Aurelian.Zanoschi@freescale.com>
Reviewed-by: Marian-Cornel Chereji <marian.chereji@freescale.com>
Reviewed-by: Thomas Trefny <Tom.Trefny@freescale.com>
[origin patch is from QorIQ-SDK-V1.5-20131219-yocto]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_stats.c |   84 +++++++++++++--------------
 1 files changed, 40 insertions(+), 44 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_stats.c b/drivers/staging/fsl_dpa_offload/dpa_stats.c
index 2afa734..faeee24 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_stats.c
@@ -1778,11 +1778,6 @@ static int set_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 	/* Determine if counter is for 'miss' entry or for a valid key */
 	if (!prm.key) {
 		cnt_tbl_cb->keys[0].miss_key = TRUE;
-
-		/* Retrieve Classifier Table counter statistics for 'miss' */
-		err = get_classif_tbl_miss_stats(cnt_cb, 0);
-		if (err != 0)
-			return -EINVAL;
 	} else {
 		/* Copy the key descriptor */
 		err = copy_key_descriptor(prm.key, &cnt_tbl_cb->keys[0].key);
@@ -1791,14 +1786,21 @@ static int set_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 				"parameters\n");
 			return -EINVAL;
 		}
-
-		/* Retrieve Classifier Table counter statistics for a key */
-		err = get_classif_tbl_key_stats(cnt_cb, 0);
-		if (err != 0)
-			return err;
 	}
 
-	if (frag_stats) {
+	if (!frag_stats) {
+		if (cnt_tbl_cb->keys[0].miss_key) {
+			/* Retrieve Classifier Table counter statistics for 'miss' */
+			err = get_classif_tbl_miss_stats(cnt_cb, 0);
+			if (err != 0)
+				return -EINVAL;
+		} else {
+			/* Retrieve Classifier Table counter statistics for a key */
+			err = get_classif_tbl_key_stats(cnt_cb, 0);
+			if (err != 0)
+				return err;
+		}
+	} else {
 		err = set_frag_manip(prm.td, &cnt_tbl_cb->keys[0]);
 		if (err < 0) {
 			log_err("Invalid Fragmentation manip handle for counter"
@@ -2317,9 +2319,6 @@ static int set_cls_cnt_classif_tbl_pair(
 	if (!pair || (pair && !pair->second_key)) {
 		/* Set as the key as "for miss" */
 		lookup_key->miss_key = TRUE;
-
-		/* Retrieve Classifier Table counter statistics for 'miss' */
-		err = get_classif_tbl_miss_stats(cnt_cb, idx);
 	} else {
 		lookup_key->miss_key = FALSE;
 
@@ -2330,9 +2329,6 @@ static int set_cls_cnt_classif_tbl_pair(
 				"the user pair\n");
 			return -EINVAL;
 		}
-
-		/* Retrieve Classifier Table counter statistics for a key */
-		err = get_classif_tbl_key_stats(cnt_cb, idx);
 	}
 
 	return err;
@@ -2438,20 +2434,13 @@ static int set_cls_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 			if (!prm.keys[i]) {
 				tbl_cb->keys[i].miss_key = TRUE;
 				tbl_cb->keys[i].valid = TRUE;
-
-				/* Get Classif Table counter stats for 'miss' */
-				err = get_classif_tbl_miss_stats(cnt_cb, i);
-				if (err != 0)
-					return -EINVAL;
 				continue;
 			}
-
+			/* Key is not valid for now */
 			if (!prm.keys[i]->byte) {
-				/* Key is not valid for now */
 				tbl_cb->keys[i].valid = FALSE;
 				continue;
 			}
-
 			/* Copy the key descriptor */
 			err = copy_key_descriptor(prm.keys[i],
 						  &tbl_cb->keys[i].key);
@@ -2460,12 +2449,6 @@ static int set_cls_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 					"parameters\n");
 				return -EINVAL;
 			}
-
-			/* Get Classifier Table counter statistics for a key */
-			err = get_classif_tbl_key_stats(cnt_cb, i);
-			if (err != 0)
-				return -EINVAL;
-
 			tbl_cb->keys[i].valid = TRUE;
 		}
 		break;
@@ -2505,7 +2488,24 @@ static int set_cls_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 		return -EINVAL;
 	}
 
-	if (frag_stats) {
+	if (!frag_stats) {
+		for (i = 0; i < params->class_members; i++) {
+			if (!tbl_cb->keys[i].valid)
+				continue;
+
+			/* Get Classif Table counter stats for 'miss' */
+			if (tbl_cb->keys[i].miss_key) {
+				err = get_classif_tbl_miss_stats(cnt_cb, i);
+				if (err != 0)
+					return -EINVAL;
+			} else {
+				/* Get Classifier Table counter statistics for a key */
+				err = get_classif_tbl_key_stats(cnt_cb, i);
+				if (err != 0)
+					return -EINVAL;
+			}
+		}
+	} else {
 		/* For every valid key, retrieve the hmcd */
 		for (i = 0; i < params->class_members; i++) {
 			if (!tbl_cb->keys[i].valid)
@@ -2518,7 +2518,7 @@ static int set_cls_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 				return -EINVAL;
 			}
 		}
-		/* Change the retrieve routine */
+		/* Set the retrieve routine */
 		cnt_cb->f_get_cnt_stats = get_cnt_cls_tbl_frag_stats;
 	}
 
@@ -2788,9 +2788,6 @@ int set_classif_tbl_member(const struct dpa_stats_cls_member_params *prm,
 			/* Mark the key as 'miss' entry */
 			tbl_cb->keys[mbr_idx].miss_key = TRUE;
 			tbl_cb->keys[mbr_idx].valid = TRUE;
-
-			/* Get Classifier Table counter statistics for 'miss' */
-			return get_classif_tbl_miss_stats(cnt_cb, mbr_idx);
 		} else if (!prm->key->byte) {
 			/* Mark the key as invalid */
 			tbl_cb->keys[mbr_idx].valid = FALSE;
@@ -2810,11 +2807,8 @@ int set_classif_tbl_member(const struct dpa_stats_cls_member_params *prm,
 					"parameters\n");
 				return -EINVAL;
 			}
-
-			/* Get Classifier Table counter statistics for a key */
-			err = get_classif_tbl_key_stats(cnt_cb, mbr_idx);
-			if (err < 0)
-				return err;
+			tbl_cb->keys[mbr_idx].miss_key = FALSE;
+			tbl_cb->keys[mbr_idx].valid = TRUE;
 		}
 	} else {
 		if (prm->pair)
@@ -2840,12 +2834,14 @@ int set_classif_tbl_member(const struct dpa_stats_cls_member_params *prm,
 		}
 	}
 
-	tbl_cb->keys[mbr_idx].valid = TRUE;
-
 	if (cnt_cb->f_get_cnt_stats != get_cnt_cls_tbl_frag_stats) {
-		if (!tbl_cb->keys[mbr_idx].miss_key)
+		if (tbl_cb->keys[mbr_idx].miss_key) {
+			/* Get Classifier Table counter statistics for 'miss' */
+			return get_classif_tbl_miss_stats(cnt_cb, mbr_idx);
+		} else {
 			/* Get Classifier Table counter statistics for a key */
 			return get_classif_tbl_key_stats(cnt_cb, mbr_idx);
+		}
 	} else{
 		err = set_frag_manip(tbl_cb->td, &tbl_cb->keys[mbr_idx]);
 		if (err < 0) {
-- 
1.7.5.4

