From db7e5614a034b4fda2f340ea33d283fdb267d69e Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Fri, 23 Aug 2013 12:01:27 +0300
Subject: [PATCH 195/429] dpaa_eth: Fix draining of buffer pools

When draining buffers in batches of eight, we must take into account
the fact that BMan will return an error code if there are less than
eight buffers left in the pool; when this happens, drain the remaining
buffers one by one.

And since we're at buffer pool cleanup, make sure allocated bpools get
freed in case of errors inside the probe function.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Change-Id: I9b2516ea76a19487a2f75412722ea21e67247ed2
Reviewed-on: http://git.am.freescale.net:8181/4191
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Bucur Madalin-Cristian-B32716 <madalin.bucur@freescale.com>
Reviewed-by: Rivera Jose-B46482 <German.Rivera@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/4471
Reviewed-by: Sovaiala Cristian-Constantin-B39531 <Cristian.Sovaiala@freescale.com>
[origin patch is from QorIQ-SDK-V1.5-20131219-yocto]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |    4 +++-
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |   20 +++++++++++++++++---
 2 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index c0a5910..a2c1b3e 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -727,7 +727,7 @@ dpaa_eth_priv_probe(struct platform_device *_of_dev)
 	net_dev = alloc_etherdev_mq(sizeof(*priv), DPAA_ETH_TX_QUEUES);
 	if (!net_dev) {
 		dev_err(dev, "alloc_etherdev_mq() failed\n");
-		return -ENOMEM;
+		goto alloc_etherdev_mq_failed;
 	}
 
 	/* Do this here, so we can be verbose early */
@@ -885,6 +885,8 @@ mac_probe_failed:
 	dev_set_drvdata(dev, NULL);
 	if (net_dev)
 		free_netdev(net_dev);
+alloc_etherdev_mq_failed:
+	devm_kfree(dev, dpa_bp);
 
 	return err;
 }
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index edf6fad..8899035 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -470,6 +470,8 @@ int __cold dpa_remove(struct platform_device *of_dev)
 	free_percpu(priv->percpu_priv);
 
 	dpa_bp_free(priv, priv->dpa_bp);
+	devm_kfree(dev, priv->dpa_bp);
+
 	if (priv->buf_layout)
 		devm_kfree(dev, priv->buf_layout);
 
@@ -706,13 +708,25 @@ pdev_register_failed:
 
 void dpa_bp_drain(struct dpa_bp *bp)
 {
-	int num;
+	int ret, num = 8;
 
 	do {
 		struct bm_buffer bmb[8];
 		int i;
 
-		num = bman_acquire(bp->pool, bmb, 8, 0);
+		ret = bman_acquire(bp->pool, bmb, 8, 0);
+		if (ret < 0) {
+			if (num == 8) {
+				/* we have less than 8 buffers left;
+				 * drain them one by one
+				 */
+				num = 1;
+				continue;
+			} else {
+				/* Pool is fully drained */
+				break;
+			}
+		}
 
 		for (i = 0; i < num; i++) {
 			dma_addr_t addr = bm_buf_addr(&bmb[i]);
@@ -722,7 +736,7 @@ void dpa_bp_drain(struct dpa_bp *bp)
 
 			bp->free_buf_cb(phys_to_virt(addr));
 		}
-	} while (num == 8);
+	} while (ret > 0);
 }
 
 static void __cold __attribute__((nonnull))
-- 
1.7.5.4

