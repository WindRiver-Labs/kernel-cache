From a59208718176b0fc5b00a840575e28c423200caf Mon Sep 17 00:00:00 2001
From: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Date: Fri, 5 Jul 2013 16:28:37 -0400
Subject: [PATCH 117/429] qman: remove eqcr_cmode

It was unused, and confusing efforts to implement support for
EQCR_CI-stashing.

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Change-Id: Ia390a4b4b54efba60b4e9b12a73b7d1ec88bf530
Reviewed-on: http://git.am.freescale.net:8181/3697
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Wang Haiying-R54964 <Haiying.Wang@freescale.com>
Reviewed-by: Schmitt Richard-B43082 <B43082@freescale.com>
[origin patch is from QorIQ-SDK-V1.5-20131219-yocto]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c |    2 +-
 drivers/staging/fsl_qbman/qman_low.h  |   12 +-----------
 2 files changed, 2 insertions(+), 12 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 4f920a4..0b5d874 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -410,7 +410,7 @@ struct qman_portal *qman_create_portal(
 	 * for (de)reference... */
 	__p->addr.addr_ce = config->addr_virt[DPA_PORTAL_CE];
 	__p->addr.addr_ci = config->addr_virt[DPA_PORTAL_CI];
-	if (qm_eqcr_init(__p, qm_eqcr_pvb, qm_eqcr_cce)) {
+	if (qm_eqcr_init(__p, qm_eqcr_pvb)) {
 		pr_err("Qman EQCR initialisation failed\n");
 		goto fail_eqcr;
 	}
diff --git a/drivers/staging/fsl_qbman/qman_low.h b/drivers/staging/fsl_qbman/qman_low.h
index 63cf800..b492259 100644
--- a/drivers/staging/fsl_qbman/qman_low.h
+++ b/drivers/staging/fsl_qbman/qman_low.h
@@ -131,10 +131,6 @@ enum qm_eqcr_pmode {		/* matches QCSP_CFG::EPM */
 	qm_eqcr_pce = 1,	/* PI index, cache-enabled */
 	qm_eqcr_pvb = 2		/* valid-bit */
 };
-enum qm_eqcr_cmode {		/* s/w-only */
-	qm_eqcr_cci,		/* CI index, cache-inhibited */
-	qm_eqcr_cce		/* CI index, cache-enabled */
-};
 enum qm_dqrr_dmode {		/* matches QCSP_CFG::DP */
 	qm_dqrr_dpush = 0,	/* SDQCR  + VDQCR */
 	qm_dqrr_dpull = 1	/* PDQCR */
@@ -173,7 +169,6 @@ struct qm_eqcr {
 #ifdef CONFIG_FSL_DPA_CHECKING
 	u32 busy;
 	enum qm_eqcr_pmode pmode;
-	enum qm_eqcr_cmode cmode;
 #endif
 };
 
@@ -282,8 +277,7 @@ static inline void EQCR_INC(struct qm_eqcr *eqcr)
 }
 
 static inline int qm_eqcr_init(struct qm_portal *portal,
-				enum qm_eqcr_pmode pmode,
-				__maybe_unused enum qm_eqcr_cmode cmode)
+				enum qm_eqcr_pmode pmode)
 {
 	/* This use of 'register', as well as all other occurances, is because
 	 * it has been observed to generate much faster code with gcc than is
@@ -305,7 +299,6 @@ static inline int qm_eqcr_init(struct qm_portal *portal,
 #ifdef CONFIG_FSL_DPA_CHECKING
 	eqcr->busy = 0;
 	eqcr->pmode = pmode;
-	eqcr->cmode = cmode;
 #endif
 	cfg = (qm_in(CFG) & 0x00ffffff) |
 		((pmode & 0x3) << 24);	/* QCSP_CFG::EPM */
@@ -436,7 +429,6 @@ static inline u8 qm_eqcr_cci_update(struct qm_portal *portal)
 {
 	register struct qm_eqcr *eqcr = &portal->eqcr;
 	u8 diff, old_ci = eqcr->ci;
-	DPA_ASSERT(eqcr->cmode == qm_eqcr_cci);
 	eqcr->ci = qm_in(EQCR_CI_CINH) & (QM_EQCR_SIZE - 1);
 	diff = qm_cyc_diff(QM_EQCR_SIZE, old_ci, eqcr->ci);
 	eqcr->available += diff;
@@ -446,7 +438,6 @@ static inline u8 qm_eqcr_cci_update(struct qm_portal *portal)
 static inline void qm_eqcr_cce_prefetch(struct qm_portal *portal)
 {
 	__maybe_unused register struct qm_eqcr *eqcr = &portal->eqcr;
-	DPA_ASSERT(eqcr->cmode == qm_eqcr_cce);
 	qm_cl_touch_ro(EQCR_CI);
 }
 
@@ -454,7 +445,6 @@ static inline u8 qm_eqcr_cce_update(struct qm_portal *portal)
 {
 	register struct qm_eqcr *eqcr = &portal->eqcr;
 	u8 diff, old_ci = eqcr->ci;
-	DPA_ASSERT(eqcr->cmode == qm_eqcr_cce);
 	eqcr->ci = qm_cl_in(EQCR_CI) & (QM_EQCR_SIZE - 1);
 	qm_cl_invalidate(EQCR_CI);
 	diff = qm_cyc_diff(QM_EQCR_SIZE, old_ci, eqcr->ci);
-- 
1.7.5.4

