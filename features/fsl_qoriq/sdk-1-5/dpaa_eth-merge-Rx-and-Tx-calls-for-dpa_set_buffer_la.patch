From 22ba204c8ee60dbfaf50efadf58c7beb623410f2 Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@freescale.com>
Date: Mon, 3 Jun 2013 18:52:59 +0300
Subject: [PATCH 038/383] dpaa_eth: merge Rx and Tx calls for
 dpa_set_buffer_layout()

Use a single function call to set both Rx and Tx buffers layout.

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
Change-Id: I693ae89c058f418e4dc4f4c5a3a813badf9cab7e
Reviewed-on: http://git.am.freescale.net:8181/3077
Reviewed-by: Sovaiala Cristian-Constantin-B39531 <Cristian.Sovaiala@freescale.com>
Reviewed-by: Radulescu Ruxandra Ioana-B05472 <ruxandra.radulescu@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
[Original patch taken from QorIQ-SDK-V1.5-SOURCE-20131219-yocto.iso]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c |   47 ++++++++++++-------------
 1 files changed, 23 insertions(+), 24 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index c4a6f0d..d3b1e36 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -1625,21 +1625,32 @@ static struct dpa_bp *dpa_size2pool(struct dpa_priv_s *priv, size_t size)
 	return ERR_PTR(-ENODEV);
 }
 
-static void dpa_set_buffer_layout(struct fm_port *port,
-				  struct dpa_buffer_layout_s *layout, int type)
+static void dpa_set_buffers_layout(struct mac_device *mac_dev,
+				  struct dpa_buffer_layout_s *layout)
 {
 	struct fm_port_params params;
 
-	layout->priv_data_size = (type == RX ?
-			DPA_RX_PRIV_DATA_SIZE : DPA_TX_PRIV_DATA_SIZE);
-	layout->parse_results = true;
-	layout->hash_results = true;
+	/* Rx */
+	layout[RX].priv_data_size = DPA_RX_PRIV_DATA_SIZE;
+	layout[RX].parse_results = true;
+	layout[RX].hash_results = true;
 #if defined(CONFIG_FSL_DPAA_1588) || defined(CONFIG_FSL_DPAA_TS)
-	layout->time_stamp = true;
+	layout[RX].time_stamp = true;
 #endif
-	fm_port_get_buff_layout_ext_params(port, &params);
-	layout->manip_extra_space = params.manip_extra_space;
-	layout->data_align = params.data_align;
+	fm_port_get_buff_layout_ext_params(mac_dev->port_dev[RX], &params);
+	layout[RX].manip_extra_space = params.manip_extra_space;
+	layout[RX].data_align = params.data_align;
+
+	/* Tx */
+	layout[TX].priv_data_size = DPA_TX_PRIV_DATA_SIZE;
+	layout[TX].parse_results = true;
+	layout[TX].hash_results = true;
+#if defined(CONFIG_FSL_DPAA_1588) || defined(CONFIG_FSL_DPAA_TS)
+	layout[TX].time_stamp = true;
+#endif
+	fm_port_get_buff_layout_ext_params(mac_dev->port_dev[TX], &params);
+	layout[TX].manip_extra_space = params.manip_extra_space;
+	layout[TX].data_align = params.data_align;
 }
 
 /**
@@ -3915,8 +3926,6 @@ dpaa_eth_probe(struct platform_device *_of_dev)
 	struct dpa_priv_s *priv = NULL;
 	struct dpa_percpu_priv_s *percpu_priv;
 	struct fm_port_fqs port_fqs;
-	struct fm_port *rxport = NULL;
-	struct fm_port *txport = NULL;
 	struct dpa_buffer_layout_s *buf_layout = NULL;
 	struct mac_device *mac_dev;
 	struct task_struct *kth;
@@ -3969,9 +3978,6 @@ dpaa_eth_probe(struct platform_device *_of_dev)
 	/* Now the interface type is known */
 
 	if (!is_macless) {
-		rxport = mac_dev->port_dev[RX];
-		txport = mac_dev->port_dev[TX];
-
 		/* We have physical ports, so we need to establish
 		 * the buffer layout.
 		 */
@@ -3981,8 +3987,7 @@ dpaa_eth_probe(struct platform_device *_of_dev)
 			dev_err(dev, "devm_kzalloc() failed\n");
 			goto alloc_failed;
 		}
-		dpa_set_buffer_layout(rxport, &buf_layout[RX], RX);
-		dpa_set_buffer_layout(txport, &buf_layout[TX], TX);
+		dpa_set_buffers_layout(mac_dev, buf_layout);
 	}
 
 	if (is_private) {
@@ -4161,8 +4166,6 @@ dpaa_eth_proxy_probe(struct platform_device *_of_dev)
 	struct list_head proxy_fq_list;
 	size_t count;
 	struct fm_port_fqs port_fqs;
-	struct fm_port *rxport = NULL;
-	struct fm_port *txport = NULL;
 	struct dpa_buffer_layout_s *buf_layout = NULL;
 	struct mac_device *mac_dev;
 
@@ -4182,9 +4185,6 @@ dpaa_eth_proxy_probe(struct platform_device *_of_dev)
 	if (IS_ERR(mac_dev))
 		return PTR_ERR(mac_dev);
 
-	rxport = mac_dev->port_dev[RX];
-	txport = mac_dev->port_dev[TX];
-
 	/* We have physical ports, so we need to establish
 	 * the buffer layout.
 	 */
@@ -4194,8 +4194,7 @@ dpaa_eth_proxy_probe(struct platform_device *_of_dev)
 		dev_err(dev, "devm_kzalloc() failed\n");
 		return -ENOMEM;
 	}
-	dpa_set_buffer_layout(rxport, &buf_layout[RX], RX);
-	dpa_set_buffer_layout(txport, &buf_layout[TX], TX);
+	dpa_set_buffers_layout(mac_dev, buf_layout);
 
 	INIT_LIST_HEAD(&proxy_fq_list);
 
-- 
1.7.5.4

