From 68be4efad4912f873a922d8fe7b1f2b35e7a6637 Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@freescale.com>
Date: Tue, 30 Jul 2013 16:32:47 +0300
Subject: [PATCH 107/429] dpaa_eth: reuse dpa_bp_alloc() for private
 interfaces

Make use of the common dpa_bp_alloc() function in the private
interface code.

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
Change-Id: I1645bd36c37b807aa9c2da462579bd2907df7c8e
Reviewed-on: http://git.am.freescale.net:8181/3660
Reviewed-by: Hamciuc Bogdan-BHAMCIU1 <bogdan.hamciuc@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
[origin patch is from QorIQ-SDK-V1.5-20131219-yocto]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |   65 +-------------------
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    2 +-
 .../net/ethernet/freescale/dpa/dpaa_eth_common.h   |    2 +
 3 files changed, 6 insertions(+), 63 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 130f653..b6c9327 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -649,66 +649,6 @@ dpa_priv_bp_probe(struct device *dev)
 	return dpa_bp;
 }
 
-static int
-dpa_priv_bp_alloc(struct dpa_bp *dpa_bp)
-{
-	int err;
-	struct bman_pool_params	 bp_params;
-	struct platform_device *pdev;
-
-	BUG_ON(dpa_bp->size == 0);
-	BUG_ON(dpa_bp->config_count == 0);
-
-	bp_params.flags = 0;
-
-	if (default_pool) {
-		atomic_inc(&default_pool->refs);
-		return 0;
-	}
-
-	if (dpa_bp->bpid == 0)
-		bp_params.flags |= BMAN_POOL_FLAG_DYNAMIC_BPID;
-	else
-		bp_params.bpid = dpa_bp->bpid;
-
-	dpa_bp->pool = bman_new_pool(&bp_params);
-	if (unlikely(dpa_bp->pool == NULL)) {
-		pr_err("bman_new_pool() failed\n");
-		return -ENODEV;
-	}
-
-	dpa_bp->bpid = bman_get_params(dpa_bp->pool)->bpid;
-
-	pdev = platform_device_register_simple("dpaa_eth_bpool",
-			dpa_bp->bpid, NULL, 0);
-	if (IS_ERR(pdev)) {
-		err = PTR_ERR(pdev);
-		goto pdev_register_failed;
-	}
-
-	err = dma_set_mask(&pdev->dev, DMA_BIT_MASK(40));
-	if (err)
-		goto pdev_mask_failed;
-
-	dpa_bp->dev = &pdev->dev;
-
-	if (dpa_bp->seed_cb)
-		dpa_bp->seed_cb(dpa_bp);
-
-	default_pool = dpa_bp;
-
-	dpa_bpid2pool_map(dpa_bp->bpid, dpa_bp);
-
-	return 0;
-
-pdev_mask_failed:
-	platform_device_unregister(pdev);
-pdev_register_failed:
-	bman_free_pool(dpa_bp->pool);
-
-	return err;
-}
-
 static int dpa_priv_bp_create(struct net_device *net_dev, struct dpa_bp *dpa_bp,
 		size_t count)
 {
@@ -724,14 +664,15 @@ static int dpa_priv_bp_create(struct net_device *net_dev, struct dpa_bp *dpa_bp,
 
 	for (i = 0; i < count; i++) {
 		int err;
-		err = dpa_priv_bp_alloc(&dpa_bp[i]);
+		err = dpa_bp_alloc(&dpa_bp[i]);
+		default_pool = &dpa_bp[i];
 		if (err < 0) {
 			dpa_bp_free(priv, dpa_bp);
 			priv->dpa_bp = NULL;
 			return err;
 		}
 
-		priv->dpa_bp = default_pool;
+		priv->dpa_bp = &dpa_bp[i];
 	}
 
 	return 0;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index 2e34e20..1e6569d 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -796,7 +796,7 @@ int dpa_bp_shared_port_seed(struct dpa_bp *bp)
 	return 0;
 }
 
-static int __must_check /* __attribute__((nonnull)) */
+int __attribute__((nonnull))
 dpa_bp_alloc(struct dpa_bp *dpa_bp)
 {
 	int err;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h
index 524fe40..8d11fe9 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h
@@ -89,6 +89,8 @@ dpa_bp_probe(struct platform_device *_of_dev, size_t *count);
 int dpa_bp_create(struct net_device *net_dev, struct dpa_bp *dpa_bp,
 		size_t count);
 int dpa_bp_shared_port_seed(struct dpa_bp *bp);
+int __attribute__((nonnull))
+dpa_bp_alloc(struct dpa_bp *dpa_bp);
 void __cold __attribute__((nonnull))
 dpa_bp_free(struct dpa_priv_s *priv, struct dpa_bp *dpa_bp);
 struct dpa_bp *dpa_bpid2pool(int bpid);
-- 
1.7.5.4

