From d7959b68544b48aab183d67bcdf7c7ccc3ba0f6a Mon Sep 17 00:00:00 2001
From: Bharat Bhushan <Bharat.Bhushan@freescale.com>
Date: Thu, 28 Nov 2013 09:32:20 +0530
Subject: [PATCH 338/383] fsl_pci: Align PCICSRBAR to not include BAR0
 attribute

BAR0 is a 32 bit register which maps to CCSR memory.
Lower bits of BARs are attributes associated with that BAR and
have following meaning:
 - bit-0: 0-IO space; 1-Memory Space
 - bit-1: if IO-space it is reserved;
   bit-2: if memory space then bit2-bit1 defines Locatable type
 - bit-3: if memory space then it is Prefetchable attribute

So when reading BAR0 (in fact all bars) for base address then we should
mask out these attribute bits. IO space mask is defined as
PCI_BASE_ADDRESS_IO_MASK and memory space mask is defined as
PCI_BASE_ADDRESS_MEM_MASK.

Now for BAR0, we always treat this as memory space (PCI_BASE_ADDRESS_SPACE_MEMORY)
because this seems to broken on some FSL SOCs(T4240-rev2 etc).
T4240-Rev2 reports attributes as
 - Bit0 == 1 : IO space; I think it is incorrect
 - Bit1 == 1 : Looks like incorrect again as it is IO space and bit1 is reserved
                and I think it should be 0.
 - bit2 == 1 : Should not set;

So far everything seems to working fine and it looks like h/w ignores these bits
for some reason. But this is not correct from programming perspective because
specification says (for example bank0) MSIIR address offset is 0x041740 but what
we were programming in device is 0x041747.

This also solves vfio-pci issue we were seeing on t4240.

Signed-off-by: Bharat Bhushan <Bharat.Bhushan@freescale.com>
Change-Id: Ibe4314f3149d6910608205b9d19f4dee334d8fc0
Reviewed-on: http://git.am.freescale.net:8181/6872
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Tiefei Zang <roy.zang@freescale.com>
Reviewed-by: Thomas Trefny <Tom.Trefny@freescale.com>
[Original patch taken from QorIQ-SDK-V1.5-SOURCE-20131219-yocto.iso]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 arch/powerpc/sysdev/fsl_pci.c |    9 +++++++++
 1 files changed, 9 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/sysdev/fsl_pci.c b/arch/powerpc/sysdev/fsl_pci.c
index 2f6be09..46bb6b4 100644
--- a/arch/powerpc/sysdev/fsl_pci.c
+++ b/arch/powerpc/sysdev/fsl_pci.c
@@ -293,6 +293,13 @@ static void setup_pci_atmu(struct pci_controller *hose)
 	/* setup PCSRBAR/PEXCSRBAR */
 	early_write_config_dword(hose, 0, 0, PCI_BASE_ADDRESS_0, 0xffffffff);
 	early_read_config_dword(hose, 0, 0, PCI_BASE_ADDRESS_0, &pcicsrbar_sz);
+	/*
+	 * Always treat this as memory space (PCI_BASE_ADDRESS_SPACE_MEMORY).
+	 * Ideally we should mask out lower bits based on IO/MEM space (bit-0
+	 * of BAR0) but that seems to broken on some SOCs(T4240-rev2 etc)
+	 * where bit-0 is found to be wrongly set.
+	 */
+	pcicsrbar_sz &= PCI_BASE_ADDRESS_MEM_MASK;
 	pcicsrbar_sz = ~pcicsrbar_sz + 1;
 
 	if (paddr_hi < (0x100000000ull - pcicsrbar_sz) ||
@@ -934,6 +941,8 @@ u64 fsl_pci_immrbar_base(struct pci_controller *hose)
 
 		pci_bus_read_config_dword(hose->bus,
 			PCI_DEVFN(0, 0), PCI_BASE_ADDRESS_0, &base);
+		/* Always treat this as memory space */
+		base &= PCI_BASE_ADDRESS_MEM_MASK;
 		return base;
 	}
 #endif
-- 
1.7.5.4

