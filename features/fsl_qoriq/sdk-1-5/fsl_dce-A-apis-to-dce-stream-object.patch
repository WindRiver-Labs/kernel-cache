From 65315e20c2c69c328d67679d21400416e1336081 Mon Sep 17 00:00:00 2001
From: Jeffrey Ladouceur <Jeffrey.Ladouceur@freescale.com>
Date: Fri, 4 Oct 2013 14:04:19 -0400
Subject: [PATCH 241/429] fsl_dce: A apis to dce stream object

Add an API to get the length of the internal objects fifo.
Add invalidate stream context record api.
Missing flags parameter to process API.
Add checking for REV1 limitations.
Set default object fifo depth to 256.
Add private header file.

Signed-off-by: Jeffrey Ladouceur <Jeffrey.Ladouceur@freescale.com>
Change-Id: I2842d5c2bd67f599c89b8487bce2887798a7b4d6
Reviewed-on: http://git.am.freescale.net:8181/5208
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Wang Haiying-R54964 <Haiying.Wang@freescale.com>
Reviewed-by: Rivera Jose-B46482 <German.Rivera@freescale.com>
[origin patch is from QorIQ-SDK-V1.5-20131219-yocto]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/staging/fsl_dce/dce_private.h    |   40 +++++++++++++++++++++
 drivers/staging/fsl_dce/fsl_dce_stream.c |   55 +++++++++++++++++++++++++++---
 drivers/staging/fsl_dce/fsl_dce_stream.h |    7 ++++
 3 files changed, 97 insertions(+), 5 deletions(-)
 create mode 100644 drivers/staging/fsl_dce/dce_private.h

diff --git a/drivers/staging/fsl_dce/dce_private.h b/drivers/staging/fsl_dce/dce_private.h
new file mode 100644
index 0000000..d5c62f0
--- /dev/null
+++ b/drivers/staging/fsl_dce/dce_private.h
@@ -0,0 +1,40 @@
+/* Copyright 2013 Freescale Semiconductor, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * This software is provided by Freescale Semiconductor "as is" and any
+ * express or implied warranties, including, but not limited to, the implied
+ * warranties of merchantability and fitness for a particular purpose are
+ * disclaimed. In no event shall Freescale Semiconductor be liable for any
+ * direct, indirect, incidental, special, exemplary, or consequential damages
+ * (including, but not limited to, procurement of substitute goods or services;
+ * loss of use, data, or profits; or business interruption) however caused and
+ * on any theory of liability, whether in contract, strict liability, or tort
+ * (including negligence or otherwise) arising in any way out of the use of
+ * this software, even if advised of the possibility of such damage.
+ */
+
+#ifndef DCE_PRIVATE_H
+#define DCE_PRIVATE_H
+
+#include "fsl_dce.h"
+#include "dce_sys.h"
+
+extern u16 dce_ip_rev; /* 0 if uninitialised, otherwise DCE_REVx */
+
+#endif /* DCE_PRIVATE_H */
diff --git a/drivers/staging/fsl_dce/fsl_dce_stream.c b/drivers/staging/fsl_dce/fsl_dce_stream.c
index c49ef2f..cb3fc24 100644
--- a/drivers/staging/fsl_dce/fsl_dce_stream.c
+++ b/drivers/staging/fsl_dce/fsl_dce_stream.c
@@ -35,8 +35,10 @@
 #include <linux/cpumask.h>
 #include <linux/rbtree.h>
 #include <linux/export.h>
+#include "dce_private.h"
 #include "fsl_dce_stream.h"
-#include "dce_sys.h"
+
+#define DCE_FIFO_DEPTH	256
 
 static void stream_base_cb(struct fsl_dce_flow *flow, const struct qm_fd *fd,
 			void *callback_tag)
@@ -187,6 +189,14 @@ int fsl_dce_stream_setup2(struct fsl_dce_stream *stream,
 	int ret = 0;
 	struct fsl_dce_flow_init_params flow_params;
 
+	if (dce_ip_rev == DCE_REV10) {
+		/* only truncation mode supported */
+		if (pmode == DCE_RECYCLING) {
+			pr_debug("dce: recyle mode unsupported dce rev 1.0\n");
+			return -EINVAL;
+		}
+	}
+
 	memset(&flow_params, 0, sizeof(flow_params));
 
 	if (!stream)
@@ -194,6 +204,7 @@ int fsl_dce_stream_setup2(struct fsl_dce_stream *stream,
 	memset(stream, 0, sizeof(*stream));
 
 	stream->pmode = pmode;
+	stream->cf = cf;
 
 	ret = allocate_stateful_dma_resources(stream, mode, pmode);
 	if (ret) {
@@ -205,7 +216,7 @@ int fsl_dce_stream_setup2(struct fsl_dce_stream *stream,
 	if (bcfg)
 		fsl_dce_flow_setopt_bcfg(&stream->flow, *bcfg);
 	flow_params.mode = mode;
-	flow_params.fifo_depth = 1;
+	flow_params.fifo_depth = DCE_FIFO_DEPTH;
 	flow_params.state_config = DCE_STATEFUL;
 	flow_params.base_cb = stream_base_cb;
 	flow_params.process_cb = process_cb;
@@ -226,6 +237,12 @@ int fsl_dce_stream_setup2(struct fsl_dce_stream *stream,
 }
 EXPORT_SYMBOL(fsl_dce_stream_setup2);
 
+int fsl_dce_stream_fifo_len(struct fsl_dce_stream *stream)
+{
+	return fsl_dce_flow_fifo_len(&stream->flow);
+}
+EXPORT_SYMBOL(fsl_dce_stream_fifo_len);
+
 int fsl_dce_stream_destroy(struct fsl_dce_stream *stream, uint32_t flags,
 			void *callback_tag)
 {
@@ -248,9 +265,14 @@ int fsl_dce_stream_init_scr(struct fsl_dce_stream *stream, struct qm_fd *fd,
 }
 EXPORT_SYMBOL(fsl_dce_stream_init_scr);
 
-int fsl_dce_stream_process(struct fsl_dce_stream *stream, struct qm_fd *fd,
-	bool initial_frame, int z_flush, void *callback_tag)
+int fsl_dce_stream_process(struct fsl_dce_stream *stream, uint32_t flags,
+	struct qm_fd *fd, bool initial_frame, int z_flush, void *callback_tag)
 {
+	if (stream->cf == DCE_CF_ZLIB)
+		SET_BF32_TK(fd->cmd, DCE_PROCESS_CF, ZLIB);
+	else if (stream->cf == DCE_CF_GZIP)
+		SET_BF32_TK(fd->cmd, DCE_PROCESS_CF, GZIP);
+
 	switch (z_flush) {
 	case DCE_PROCESS_Z_FLUSH_NO_FLUSH:
 	case DCE_PROCESS_Z_FLUSH_PARTIAL_FLUSH:
@@ -267,7 +289,7 @@ int fsl_dce_stream_process(struct fsl_dce_stream *stream, struct qm_fd *fd,
 
 	if (initial_frame)
 		SET_BF32_TK(fd->cmd, DCE_PROCESS_INITIAL, SET);
-	return fsl_dce_process(&stream->flow, 0, fd, callback_tag);
+	return fsl_dce_process(&stream->flow, flags, fd, callback_tag);
 }
 EXPORT_SYMBOL(fsl_dce_stream_process);
 
@@ -278,12 +300,27 @@ int fsl_dce_stream_nop(struct fsl_dce_stream *stream, uint32_t flags,
 }
 EXPORT_SYMBOL(fsl_dce_stream_nop);
 
+int fsl_dce_stream_scr_invalidate(struct fsl_dce_stream *stream, uint32_t flags,
+	void *callback_tag)
+{
+	return fsl_dce_scr_invalidate(&stream->flow, flags, callback_tag);
+}
+EXPORT_SYMBOL(fsl_dce_stream_scr_invalidate);
+
 int fsl_dce_stream_deflate_params(struct fsl_dce_stream *stream,
 	uint32_t bman_output_offset,
 	bool bman_release_input,
 	bool base64,
 	uint32_t ce)
 {
+	if (dce_ip_rev == DCE_REV10) {
+		/* B64 unsupported */
+		if (base64) {
+			pr_debug("dce: base64 unsupported in dce rev 1.0\n");
+			return -EINVAL;
+		}
+	}
+
 	fsl_dce_flow_setopt_outputoffset(&stream->flow, bman_output_offset);
 	fsl_dce_flow_setopt_release_input(&stream->flow, bman_release_input);
 	fsl_dce_flow_setopt_base64(&stream->flow, base64);
@@ -297,6 +334,14 @@ int fsl_dce_stream_inflate_params(struct fsl_dce_stream *stream,
 	bool bman_release_input,
 	bool base64)
 {
+	if (dce_ip_rev == DCE_REV10) {
+		/* B64 unsupported */
+		if (base64) {
+			pr_debug("dce: base64 unsupported in dce rev 1.0\n");
+			return -EINVAL;
+		}
+	}
+
 	fsl_dce_flow_setopt_outputoffset(&stream->flow, bman_output_offset);
 	fsl_dce_flow_setopt_release_input(&stream->flow, bman_release_input);
 	fsl_dce_flow_setopt_base64(&stream->flow, base64);
diff --git a/drivers/staging/fsl_dce/fsl_dce_stream.h b/drivers/staging/fsl_dce/fsl_dce_stream.h
index 09713d9..fde8e6f 100644
--- a/drivers/staging/fsl_dce/fsl_dce_stream.h
+++ b/drivers/staging/fsl_dce/fsl_dce_stream.h
@@ -147,6 +147,8 @@ int fsl_dce_stream_setup2(struct fsl_dce_stream *stream,
 	fsl_dce_nop_cb nop_cb,
 	fsl_dce_scr_invalidate_cb scr_invalidate_cb);
 
+int fsl_dce_stream_fifo_len(struct fsl_dce_stream *stream);
+
 int fsl_dce_stream_destroy(struct fsl_dce_stream *stream, uint32_t flags,
 			void *callback_tag);
 
@@ -165,6 +167,7 @@ int fsl_dce_stream_inflate_params(struct fsl_dce_stream *stream,
  * This is the mission mode api.
  */
 int fsl_dce_stream_process(struct fsl_dce_stream *stream,
+	uint32_t flags,
 	struct qm_fd *fd,
 	bool initial_frame, /* if initial frame, sets I bit */
 	int z_flush, /* one of DCE_PROCESS_Z_* values */
@@ -173,6 +176,10 @@ int fsl_dce_stream_process(struct fsl_dce_stream *stream,
 int fsl_dce_stream_nop(struct fsl_dce_stream *stream, uint32_t flags,
 	void *callback_tag); /* optional callback tag */
 
+int fsl_dce_stream_scr_invalidate(struct fsl_dce_stream *stream,
+	uint32_t flags, void *callback_tag);
+
+
 /* helper apis */
 int fsl_dce_stream_init_scr(struct fsl_dce_stream *stream, struct qm_fd *fd,
 	void *callback_tag);
-- 
1.7.5.4

