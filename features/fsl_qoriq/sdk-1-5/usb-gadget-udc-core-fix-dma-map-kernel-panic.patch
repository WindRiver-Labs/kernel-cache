From 67823609a2f1f443bf9cd5e30a3d7cfde64d1228 Mon Sep 17 00:00:00 2001
From: Bin Jiang <bin.jiang@windriver.com>
Date: Mon, 20 Jan 2014 18:54:01 +0800
Subject: [PATCH 382/383] usb: gadget: udc-core: fix dma map kernel panic

Run usb gadget and there are following call trace:
Unable to handle kernel paging request for data at address 0x00000010
<snip>
NIP [c060f19c] usb_gadget_map_request+0xec/0x240
LR [c06120a4] fsl_ep_queue+0xd4/0x1c0
Call Trace:
[effd3e60] [c086e120] _raw_spin_unlock_irqrestore+0x30/0x60 (unreliable)
[effd3e90] [c06120a4] fsl_ep_queue+0xd4/0x1c0
[effd3eb0] [f9392508] composite_setup+0x3b8/0xe20 [libcomposite]
[effd3f00] [c0612e5c] fsl_udc_irq+0x7bc/0xce0
[effd3f70] [c00d4240] handle_irq_event_percpu+0x90/0x2d0
[effd3fc0] [c00d44d4] handle_irq_event+0x54/0x90
[effd3fe0] [c00d8320] handle_fasteoi_irq+0xe0/0x1a0
[effd3ff0] [c000e2fc] call_handle_irq+0x18/0x28
[c0b7fe70] [c0004fbc] do_IRQ+0xec/0x260
[c0b7feb0] [c00108d8] ret_from_except+0x0/0x18
- Exception: 501 at arch_cpu_idle+0x30/0x80
    LR = arch_cpu_idle+0x30/0x80
[c0b7ff70] [c00ddf68] rcu_idle_enter+0xb8/0x100 (unreliable)
[c0b7ff80] [c009984c] cpu_startup_entry+0x16c/0x2a0
[c0b7ffc0] [c0ab4848] start_kernel+0x398/0x3ac
[c0b7fff0] [c00003d8] skpinv+0x2c4/0x300

The gadget dev's dma_ops is NULL, so induce the above error.
According to "usb: gadget: fsl_udc_core: switch over to
usb_gadget_map/unmap_request()" commit, use gadget dev's
parent to do dma map.

Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/usb/gadget/udc-core.c |   12 ++++++------
 1 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/usb/gadget/udc-core.c b/drivers/usb/gadget/udc-core.c
index 5514822..f358eb4 100644
--- a/drivers/usb/gadget/udc-core.c
+++ b/drivers/usb/gadget/udc-core.c
@@ -59,19 +59,19 @@ int usb_gadget_map_request(struct usb_gadget *gadget,
 	if (req->num_sgs) {
 		int     mapped;
 
-		mapped = dma_map_sg(&gadget->dev, req->sg, req->num_sgs,
+		mapped = dma_map_sg(gadget->dev.parent, req->sg, req->num_sgs,
 				is_in ? DMA_TO_DEVICE : DMA_FROM_DEVICE);
 		if (mapped == 0) {
-			dev_err(&gadget->dev, "failed to map SGs\n");
+			dev_err(gadget->dev.parent, "failed to map SGs\n");
 			return -EFAULT;
 		}
 
 		req->num_mapped_sgs = mapped;
 	} else {
-		req->dma = dma_map_single(&gadget->dev, req->buf, req->length,
+		req->dma = dma_map_single(gadget->dev.parent, req->buf, req->length,
 				is_in ? DMA_TO_DEVICE : DMA_FROM_DEVICE);
 
-		if (dma_mapping_error(&gadget->dev, req->dma)) {
+		if (dma_mapping_error(gadget->dev.parent, req->dma)) {
 			dev_err(&gadget->dev, "failed to map buffer\n");
 			return -EFAULT;
 		}
@@ -88,12 +88,12 @@ void usb_gadget_unmap_request(struct usb_gadget *gadget,
 		return;
 
 	if (req->num_mapped_sgs) {
-		dma_unmap_sg(&gadget->dev, req->sg, req->num_mapped_sgs,
+		dma_unmap_sg(gadget->dev.parent, req->sg, req->num_mapped_sgs,
 				is_in ? DMA_TO_DEVICE : DMA_FROM_DEVICE);
 
 		req->num_mapped_sgs = 0;
 	} else {
-		dma_unmap_single(&gadget->dev, req->dma, req->length,
+		dma_unmap_single(gadget->dev.parent, req->dma, req->length,
 				is_in ? DMA_TO_DEVICE : DMA_FROM_DEVICE);
 	}
 }
-- 
1.7.5.4

