From 6c3427ba3ee99e1cf3190a9ea5b22be935c4a713 Mon Sep 17 00:00:00 2001
From: Bin Jiang <bin.jiang@windriver.com>
Date: Fri, 27 Dec 2013 17:49:18 +0800
Subject: [PATCH 1/2] dpaa_eth: fix freeing bpool causes call trace

When remove dpa and free bpool, there are following call trace:
the allocated dpa_bp would share with several net devices,
it is not appropriate to invoke devm_kzalloc to allocate it
we should still use kzalloc API to do this.

WARNING: at drivers/base/devres.c:800
<snip>
Call Trace:
[c0000000eaa57930] [c00000000059fd6c] .devm_kfree+0x3c/0x60 (unreliable)
[c0000000eaa579c0] [c0000000009f5218] .dpa_remove+0x15c/0x200
[c0000000eaa57a70] [c00000000059d12c] .platform_drv_shutdown+0x3c/0x60
[c0000000eaa57af0] [c0000000005977cc] .device_shutdown+0x12c/0x240
[c0000000eaa57b90] [c0000000000877d4] .kernel_restart_prepare+0x54/0x70
[c0000000eaa57c10] [c0000000000e5ba4] .kernel_kexec+0x94/0xd0
[c0000000eaa57c90] [c000000000087b24] .SyS_reboot+0x244/0x2d0
[c0000000eaa57e30] [c000000000000724] syscall_exit+0x0/0xc0

The bpool runs only once allocation, so it should be freed once.

Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |    6 +++---
 drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c |    4 ++--
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    3 ++-
 .../net/ethernet/freescale/dpa/dpaa_eth_proxy.c    |    2 +-
 4 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index b0cf7a5..34f0ee7 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -680,9 +680,9 @@ dpa_priv_bp_probe(struct device *dev)
 {
 	struct dpa_bp *dpa_bp;
 
-	dpa_bp = devm_kzalloc(dev, sizeof(*dpa_bp), GFP_KERNEL);
+	dpa_bp = kzalloc(sizeof(*dpa_bp), GFP_KERNEL);
 	if (unlikely(dpa_bp == NULL)) {
-		dev_err(dev, "devm_kzalloc() failed\n");
+		dev_err(dev, "kzalloc() failed\n");
 		return ERR_PTR(-ENOMEM);
 	}
 
@@ -987,7 +987,7 @@ mac_probe_failed:
 	free_netdev(net_dev);
 alloc_etherdev_mq_failed:
 	if (atomic_read(&dpa_bp->refs) == 0)
-		devm_kfree(dev, dpa_bp);
+		kfree(dpa_bp);
 
 	return err;
 }
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c
index 95da2a3..278e0c3 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c
@@ -76,9 +76,9 @@ dpa_bp_probe(struct platform_device *_of_dev, size_t *count)
 		return ERR_PTR(-EINVAL);
 	}
 
-	dpa_bp = devm_kzalloc(dev, *count * sizeof(*dpa_bp), GFP_KERNEL);
+	dpa_bp = kzalloc(*count * sizeof(*dpa_bp), GFP_KERNEL);
 	if (unlikely(dpa_bp == NULL)) {
-		dev_err(dev, "devm_kzalloc() failed\n");
+		dev_err(dev, "kzalloc() failed\n");
 		return ERR_PTR(-ENOMEM);
 	}
 
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index 8cf1ab9..6300fa1 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -495,7 +495,8 @@ int __cold dpa_remove(struct platform_device *of_dev)
 	free_percpu(priv->percpu_priv);
 
 	dpa_bp_free(priv, priv->dpa_bp);
-	devm_kfree(dev, priv->dpa_bp);
+	if(atomic_read(&priv->dpa_bp->refs) == 0)
+		kfree(priv->dpa_bp);
 
 	if (priv->buf_layout)
 		devm_kfree(dev, priv->buf_layout);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_proxy.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_proxy.c
index 83be87d..13e1905 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_proxy.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_proxy.c
@@ -147,7 +147,7 @@ static int dpaa_eth_proxy_probe(struct platform_device *_of_dev)
 	 * memory freed
 	 */
 	devm_kfree(dev, buf_layout);
-	devm_kfree(dev, dpa_bp);
+	kfree(dpa_bp);
 
 	/* Free FQ structures */
 	devm_kfree(dev, port_fqs.rx_defq);
-- 
1.7.5.4

