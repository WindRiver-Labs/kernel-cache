From 23cd3ec0221110fcecdce24d0774c60180130e00 Mon Sep 17 00:00:00 2001
From: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
Date: Mon, 14 Oct 2013 18:38:50 +0300
Subject: [PATCH 223/383] dpa_offload: Remove unnecessary label

The resources allocated when copying user-space memory into
kernel-space memory need to be released before the error code
is returned to the user.

Signed-off-by: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
Change-Id: Iebf46184ef8b6d53321e40eaa2ba7620e07f8e68
Reviewed-on: http://git.am.freescale.net:8181/5528
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Aurelian Zanoschi <Aurelian.Zanoschi@freescale.com>
Reviewed-by: Rivera Jose-B46482 <German.Rivera@freescale.com>
[Original patch taken from QorIQ-SDK-V1.5-SOURCE-20131219-yocto.iso]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c |   54 ++++++++++-------------
 1 files changed, 23 insertions(+), 31 deletions(-)
 mode change 100755 => 100644 drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c

diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
old mode 100755
new mode 100644
index 4a65b0e..3f7366b
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
@@ -785,17 +785,7 @@ static int do_ioctl_stats_compat_create_counter(void *args)
 
 	ret = dpa_stats_create_counter(kprm.stats_id,
 				       &kprm.cnt_params, &kprm.cnt_id);
-	if (ret < 0)
-		goto compat_create_counter_cleanup;
-
-	uprm.cnt_id = kprm.cnt_id;
 
-	if (copy_to_user(args, &uprm, sizeof(uprm))) {
-		log_err("Cannot copy to user counter parameters\n");
-		ret = -EINVAL;
-	}
-
-compat_create_counter_cleanup:
 	if (kprm.cnt_params.type == DPA_STATS_CNT_CLASSIF_NODE &&
 	    compat_ptr(uprm.cnt_params.classif_node_params.key)) {
 		kfree(kprm.cnt_params.classif_node_params.key->byte);
@@ -809,6 +799,14 @@ compat_create_counter_cleanup:
 		kfree(kprm.cnt_params.classif_tbl_params.key->mask);
 		kfree(kprm.cnt_params.classif_tbl_params.key);
 	}
+
+	uprm.cnt_id = kprm.cnt_id;
+
+	if (copy_to_user(args, &uprm, sizeof(uprm))) {
+		log_err("Cannot copy to user counter parameters\n");
+		ret = -EINVAL;
+	}
+
 	return ret;
 }
 #endif
@@ -1157,16 +1155,6 @@ static int do_ioctl_stats_compat_create_class_counter(void *args)
 
 	ret = dpa_stats_create_class_counter(kprm.stats_id,
 					     kprm_cls, &kprm.cnt_id);
-	if (ret < 0)
-		goto compat_create_cls_counter_cleanup;
-
-	uprm.cnt_id = kprm.cnt_id;
-
-	if (copy_to_user(args, &uprm, sizeof(uprm))) {
-		log_err("Cannot copy to user the counter id\n");
-		ret = -EINVAL;
-	}
-
 compat_create_cls_counter_cleanup:
 	switch (uprm.cnt_params.type) {
 	case DPA_STATS_CNT_ETH:
@@ -1241,6 +1229,13 @@ compat_create_cls_counter_cleanup:
 		break;
 	}
 
+	uprm.cnt_id = kprm.cnt_id;
+
+	if (copy_to_user(args, &uprm, sizeof(uprm))) {
+		log_err("Cannot copy to user the counter id\n");
+		ret = -EINVAL;
+	}
+
 	return ret;
 }
 #endif
@@ -1400,17 +1395,7 @@ static int do_ioctl_stats_compat_modify_class_counter(void *args)
 
 	ret = dpa_stats_modify_class_counter(kprm.cnt_id,
 					&kprm.params, kprm.member_index);
-	if (ret < 0)
-		goto compat_modify_counter_cleanup;
-
-	uprm.cnt_id = kprm.cnt_id;
 
-	if (copy_to_user(args, &uprm, sizeof(uprm))) {
-		log_err("Cannot copy to user class counter result\n");
-		return -EBUSY;
-	}
-
-compat_modify_counter_cleanup:
 	switch (kprm.params.type) {
 	case DPA_STATS_CLS_MEMBER_SINGLE_KEY:
 		if (!kprm.params.key)
@@ -1438,7 +1423,14 @@ compat_modify_counter_cleanup:
 	default:
 		break;
 	}
-	return 0;
+	uprm.cnt_id = kprm.cnt_id;
+
+	if (copy_to_user(args, &uprm, sizeof(uprm))) {
+		log_err("Cannot copy to user class counter result\n");
+		ret = -EBUSY;
+	}
+
+	return ret;
 }
 #endif
 
-- 
1.7.5.4

