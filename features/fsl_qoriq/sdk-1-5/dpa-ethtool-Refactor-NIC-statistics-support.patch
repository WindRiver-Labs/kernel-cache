From 92a1551606ea6c493e0a4a43026511b3099322ac Mon Sep 17 00:00:00 2001
From: Yang Wei <Wei.Yang@windriver.com>
Date: Fri, 3 Jan 2014 17:11:43 +0800
Subject: [PATCH 034/429] dpa/ethtool: Refactor NIC statistics support

Since SDK refactor some mac-api FMD calls, accordingly,
we also need to Refactor NIC statistics support.

Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpa-ethtool.c |   20 +++++++++++----
 drivers/net/ethernet/freescale/dpa/mac-api.c     |   29 ++++++++++-----------
 drivers/net/ethernet/freescale/dpa/mac.h         |    2 +-
 3 files changed, 30 insertions(+), 21 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c b/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
index b7dcc07..26a0202 100644
--- a/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
+++ b/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
@@ -37,6 +37,10 @@
 
 #include "dpaa_eth.h"
 
+/*
+ * The arrary should be consistent with t_FmMacStatistics structure defined
+ * in drivers/net/ethernet/freescale/fman/inc/Peripherals/fm_mac_ext.h
+ */
 static char stat_gstrings[][ETH_GSTRING_LEN] = {
 	"tx-rx-64-frames",
 	"tx-rx-65-127-frames",
@@ -55,6 +59,7 @@ static char stat_gstrings[][ETH_GSTRING_LEN] = {
 	"rx-pause-frame-packets",
 	"rx-bytes",
 	"rx-packets",
+	"receive-ucast-frames",
 	"receive-multicast-frames",
 	"receive-broadcast-frames",
 	"rx-dropped-frames",
@@ -147,16 +152,22 @@ void __cold dpa_set_msglevel(struct net_device *net_dev, uint32_t msg_enable)
 	((struct dpa_priv_s *)netdev_priv(net_dev))->msg_enable = msg_enable;
 }
 
-static void dpa_get_ethtool_stats(struct net_device *netdev,
+static void dpa_get_ethtool_stats(struct net_device *net_dev,
 				struct ethtool_stats *stats, u64 *data)
 {
-	struct dpa_priv_s       *priv = netdev_priv(netdev);
+	struct dpa_priv_s       *priv = netdev_priv(net_dev);
 	int			_errno;
 
-	_errno = priv->mac_dev->get_stats(priv->mac_dev, data);
+	if (priv->mac_dev == NULL) {
+		netdev_info(net_dev, "This is a MAC-less interface\n");
+		return;
+	}
+	_errno = priv->mac_dev->get_stats(
+			priv->mac_dev->get_mac_handle(priv->mac_dev), data,
+				DPA_STATS_LEN);
 	if (_errno < 0) {
 		if (netif_msg_drv(priv))
-			netdev_err(netdev,
+			netdev_err(net_dev,
 				"mac_dev->get_stats = %d\n",
 				_errno);
 	}
@@ -288,7 +299,6 @@ const struct ethtool_ops dpa_ethtool_ops = {
 	.get_pauseparam = dpa_get_pauseparam,
 	.set_pauseparam = dpa_set_pauseparam,
 	.self_test = NULL, /* TODO invoke the cold-boot unit-test? */
-	.get_ethtool_stats = NULL, /* TODO other stats, currently in debugfs */
 	.get_link = ethtool_op_get_link,
 	.get_strings		= dpa_get_strings,
 	.get_sset_count		= dpa_sset_count,
diff --git a/drivers/net/ethernet/freescale/dpa/mac-api.c b/drivers/net/ethernet/freescale/dpa/mac-api.c
index ed04606..efeb1b7 100644
--- a/drivers/net/ethernet/freescale/dpa/mac-api.c
+++ b/drivers/net/ethernet/freescale/dpa/mac-api.c
@@ -874,31 +874,30 @@ void fm_mac_dump_regs(struct fm_mac_dev *fm_mac_dev)
 	FM_MAC_DumpRegs(fm_mac_dev);
 }
 
-static int __cold mac_get_statistics(struct mac_device *mac_dev, u64 *data)
+static int __cold fm_mac_get_statistics(struct fm_mac_dev *fm_mac_dev, u64 *data, int len)
 {
 	int	_errno = 0;
-	t_Error err;
 	t_FmMacStatistics *p_Statistics;
+	t_Error err;
 	int i;
 	u64 *buf;
 
 	p_Statistics = kmalloc(sizeof(t_FmMacStatistics), GFP_ATOMIC);
-	if (!p_Statistics) {
-		dev_err(mac_dev->dev, "Out of memory\n");
+	if (unlikely(!p_Statistics)) {
+		pr_err("Out of memory\n");
 		return -ENOMEM;
 	}
 
-	err = FM_MAC_GetStatistics(
-		((struct mac_priv_s *)macdev_priv(mac_dev))->mac, p_Statistics);
-	_errno = -GET_ERROR_TYPE(err);
-	if (_errno < 0) {
-		dev_err(mac_dev->dev,
-			"FM_MAC_GetStatistics() = 0x%08x\n", err);
+	 err = FM_MAC_GetStatistics(fm_mac_dev, p_Statistics);
+	 _errno = -GET_ERROR_TYPE(err);
+
+	 if (unlikely(_errno < 0)) {
+		pr_err("FM_MAC_GetStatistics = 0x%08x\n", err);
 		goto out;
-	}
+	 }
 
 	buf = (u64 *) p_Statistics;
-	for (i = 0; i < sizeof(t_FmMacStatistics)/sizeof(u64); i++)
+	for (i = 0; i < len; i++)
 		data[i] = buf[i];
 
 out:
@@ -929,7 +928,7 @@ static void __devinit __cold setup_dtsec(struct mac_device *mac_dev)
 	mac_dev->fm_rtc_set_drift	= fm_rtc_set_drift;
 	mac_dev->fm_rtc_set_alarm	= fm_rtc_set_alarm;
 	mac_dev->fm_rtc_set_fiper	= fm_rtc_set_fiper;
-	mac_dev->get_stats		= mac_get_statistics;
+	mac_dev->get_stats		= fm_mac_get_statistics;
 }
 
 static void __devinit __cold setup_xgmac(struct mac_device *mac_dev)
@@ -945,7 +944,7 @@ static void __devinit __cold setup_xgmac(struct mac_device *mac_dev)
 	mac_dev->get_mac_handle	= get_mac_handle;
 	mac_dev->set_tx_pause	= fm_mac_set_tx_pause_frames;
 	mac_dev->set_rx_pause	= fm_mac_set_rx_ignore_pause_frames;
-	mac_dev->get_stats	= mac_get_statistics;
+	mac_dev->get_stats	= fm_mac_get_statistics;
 }
 
 static void __devinit __cold setup_memac(struct mac_device *mac_dev)
@@ -969,7 +968,7 @@ static void __devinit __cold setup_memac(struct mac_device *mac_dev)
 	mac_dev->fm_rtc_set_drift	= fm_rtc_set_drift;
 	mac_dev->fm_rtc_set_alarm	= fm_rtc_set_alarm;
 	mac_dev->fm_rtc_set_fiper	= fm_rtc_set_fiper;
-	mac_dev->get_stats		= mac_get_statistics;
+	mac_dev->get_stats		= fm_mac_get_statistics;
 }
 
 void (*const mac_setup[])(struct mac_device *mac_dev) __devinitconst = {
diff --git a/drivers/net/ethernet/freescale/dpa/mac.h b/drivers/net/ethernet/freescale/dpa/mac.h
index 28df1c1..3799c89 100644
--- a/drivers/net/ethernet/freescale/dpa/mac.h
+++ b/drivers/net/ethernet/freescale/dpa/mac.h
@@ -96,7 +96,7 @@ struct mac_device {
 	int (*fm_rtc_set_alarm)(struct fm *fm_dev, uint32_t id, uint64_t time);
 	int (*fm_rtc_set_fiper)(struct fm *fm_dev, uint32_t id,
 				uint64_t fiper);
-	int (*get_stats)(struct mac_device *mac_dev, uint64_t *p_Statistics);
+	int (*get_stats)(struct fm_mac_dev *fm_mac_dev, uint64_t *p_Statistics,int len);
 };
 
 struct mac_address {
-- 
1.7.5.4

