From d10eb74646d8731aa34dadfbdb5f76da9c0c1f2c Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Wed, 21 Aug 2013 16:23:25 +0300
Subject: [PATCH 191/429] dpaa_eth: Replace per_cpu_ptr with __this_cpu_ptr

We randomly used either __this_cpu_ptr() or per_cpu_ptr() on current
processor.
Use only __this_cpu_ptr() in ordr to make the code more uniform.
No functional or performance impact.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/4193
Reviewed-by: Bucur Madalin-Cristian-B32716 <madalin.bucur@freescale.com>
Change-Id: Ifd63f277fe35b3a44f7b7dc7beacf6b86765e900
Reviewed-on: http://git.am.freescale.net:8181/4654
Reviewed-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Rivera Jose-B46482 <German.Rivera@freescale.com>
[origin patch is from QorIQ-SDK-V1.5-20131219-yocto]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |    6 +++---
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    2 +-
 .../net/ethernet/freescale/dpa/dpaa_eth_non_sg.c   |    2 +-
 .../net/ethernet/freescale/dpa/dpaa_eth_shared.c   |   10 +++++-----
 4 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index efbb9c3..7ff9665 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -344,7 +344,7 @@ priv_rx_error_dqrr(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
 
-	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
+	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
 
 	if (dpaa_eth_napi_schedule(percpu_priv))
 		return qman_cb_dqrr_stop;
@@ -408,7 +408,7 @@ priv_tx_conf_error_dqrr(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
 
-	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
+	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
 
 	if (dpaa_eth_napi_schedule(percpu_priv))
 		return qman_cb_dqrr_stop;
@@ -550,7 +550,7 @@ static void dpaa_eth_poll_controller(struct net_device *net_dev)
 {
 	struct dpa_priv_s *priv = netdev_priv(net_dev);
 	struct dpa_percpu_priv_s *percpu_priv =
-		this_cpu_ptr(priv->percpu_priv);
+		__this_cpu_ptr(priv->percpu_priv);
 	struct napi_struct napi = percpu_priv->napi;
 
 	qman_irqsource_remove(QM_PIRQ_DQRI);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index 35046fd..9550157 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -186,7 +186,7 @@ void __cold dpa_timeout(struct net_device *net_dev)
 	struct dpa_percpu_priv_s *percpu_priv;
 
 	priv = netdev_priv(net_dev);
-	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
+	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
 
 	if (netif_msg_timer(priv))
 		netdev_crit(net_dev, "Transmit timeout latency: %u ms\n",
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c
index 94964c6..8ea7693 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c
@@ -619,7 +619,7 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 		goto done;
 
 	priv = netdev_priv(net_dev);
-	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
+	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
 	percpu_stats = &percpu_priv->stats;
 	countptr = __this_cpu_ptr(priv->dpa_bp->percpu_count);
 
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
index 0280088..5c4aa93 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
@@ -237,7 +237,7 @@ shared_rx_dqrr(struct qman_portal *portal, struct qman_fq *fq,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
 
-	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
+	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
 
 	dpa_bp = dpa_bpid2pool(fd->bpid);
 	BUG_ON(IS_ERR(dpa_bp));
@@ -371,7 +371,7 @@ shared_tx_error_dqrr(struct qman_portal                *portal,
 	dpa_bp = dpa_bpid2pool(fd->bpid);
 	BUG_ON(IS_ERR(dpa_bp));
 
-	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
+	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
 
 	if (netif_msg_hw(priv) && net_ratelimit())
 		netdev_warn(net_dev, "FD status = 0x%08x\n",
@@ -404,7 +404,7 @@ shared_tx_default_dqrr(struct qman_portal              *portal,
 	dpa_bp = dpa_bpid2pool(fd->bpid);
 	BUG_ON(IS_ERR(dpa_bp));
 
-	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
+	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
 
 	if (unlikely(fd->status & FM_FD_STAT_ERRORS) != 0) {
 		if (netif_msg_hw(priv) && net_ratelimit())
@@ -435,7 +435,7 @@ static void shared_ern(struct qman_portal	*portal,
 
 	net_dev = dpa_fq->net_dev;
 	priv = netdev_priv(net_dev);
-	percpu_priv = per_cpu_ptr(priv->percpu_priv,  smp_processor_id());
+	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
 
 	dpa_fd_release(net_dev, &msg->ern.fd);
 
@@ -457,7 +457,7 @@ int __hot dpa_shared_tx(struct sk_buff *skb, struct net_device *net_dev)
 	t_FmPrsResult parse_results;
 
 	priv = netdev_priv(net_dev);
-	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
+	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
 
 	memset(&fd, 0, sizeof(fd));
 	fd.format = qm_fd_contig;
-- 
1.7.5.4

