From c2fee546b0391700cd76a8308a786c2f793f7c87 Mon Sep 17 00:00:00 2001
From: Yang Wei <Wei.Yang@windriver.com>
Date: Mon, 6 Jan 2014 16:30:52 +0800
Subject: [PATCH 194/429] dpaa_eth: solve several code style issues

Fix a series of checkpatch complaints in the dpaa_eth code.

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
Change-Id: I341d5835bb0a4491456947b8e1ae714e095cd580
Reviewed-on: http://git.am.freescale.net:8181/3811
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Rivera Jose-B46482 <Jose.G.Rivera@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/4460
Reviewed-by: Sovaiala Cristian-Constantin-B39531 <Cristian.Sovaiala@freescale.com>
Reviewed-by: Rivera Jose-B46482 <German.Rivera@freescale.com>
[origin patch is from QorIQ-SDK-V1.5-20131219-yocto]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/Makefile        |    4 ++--
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |    6 +++---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h      |    4 ++--
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    4 ++--
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c   |    9 +++++----
 .../net/ethernet/freescale/dpa/dpaa_eth_shared.c   |    2 +-
 drivers/net/ethernet/freescale/dpa/mac-api.c       |   12 +++++-------
 drivers/net/ethernet/freescale/dpa/mac.c           |   19 ++++++++++---------
 .../ethernet/freescale/fman/inc/flib/fsl_fman.h    |    4 ++++
 9 files changed, 34 insertions(+), 30 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/Makefile b/drivers/net/ethernet/freescale/dpa/Makefile
index b088046..c6ca17e 100644
--- a/drivers/net/ethernet/freescale/dpa/Makefile
+++ b/drivers/net/ethernet/freescale/dpa/Makefile
@@ -1,12 +1,12 @@
 #
 # Makefile for the Freescale Ethernet controllers
 #
-EXTRA_CFLAGS           += -DVERSION=\"\"
+ccflags-y += -DVERSION=\"\"
 #
 #Include netcomm SW specific definitions
 include $(srctree)/drivers/net/ethernet/freescale/fman/ncsw_config.mk
 
-EXTRA_CFLAGS += -I$(NET_DPA)
+ccflags-y += -I$(NET_DPA)
 
 obj-$(CONFIG_FSL_DPAA_1588) += dpaa_1588.o
 obj-$(CONFIG_FSL_DPAA_ETH_SG_SUPPORT) += fsl-dpa-sg.o
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 2b6c4d9..c0a5910 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -151,14 +151,14 @@ dpa_csum_validation(const struct dpa_priv_s	*priv,
 	dma_addr_t addr = qm_fd_addr(fd);
 	struct dpa_bp *dpa_bp = priv->dpa_bp;
 	void *frm = phys_to_virt(addr);
-	t_FmPrsResult *parse_result;
+	fm_prs_result_t *parse_result;
 
 	if (unlikely(!frm))
 		return;
 
 	dma_unmap_single(dpa_bp->dev, addr, dpa_bp->size, DMA_BIDIRECTIONAL);
 
-	parse_result = (t_FmPrsResult *)(frm + DPA_RX_PRIV_DATA_SIZE);
+	parse_result = (fm_prs_result_t *)(frm + DPA_RX_PRIV_DATA_SIZE);
 	if (parse_result->cksum != DPA_CSUM_VALID)
 		percpu_priv->rx_errors.cse++;
 }
@@ -248,7 +248,7 @@ static void _dpa_tx_error(struct net_device		*net_dev,
  * @hdr_size	will be written with a safe value, at least the size of the
  *		headers' length.
  */
-void __hot _dpa_process_parse_results(const t_FmPrsResult *parse_results,
+void __hot _dpa_process_parse_results(const fm_prs_result_t *parse_results,
 				      const struct qm_fd *fd,
 				      struct sk_buff *skb, int *use_gro)
 {
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index 3e3102e..1d18364 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -85,7 +85,7 @@ struct dpa_buffer_layout_s {
 };
 
 #define DPA_TX_PRIV_DATA_SIZE	16
-#define DPA_PARSE_RESULTS_SIZE sizeof(t_FmPrsResult)
+#define DPA_PARSE_RESULTS_SIZE sizeof(fm_prs_result_t)
 #define DPA_TIME_STAMP_SIZE 8
 #define DPA_HASH_RESULTS_SIZE 8
 #define DPA_RX_PRIV_DATA_SIZE   (DPA_TX_PRIV_DATA_SIZE + \
@@ -486,7 +486,7 @@ void __hot _dpa_rx(struct net_device *net_dev,
 int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev);
 struct sk_buff *_dpa_cleanup_tx_fd(const struct dpa_priv_s *priv,
 				   const struct qm_fd *fd);
-void __hot _dpa_process_parse_results(const t_FmPrsResult *parse_results,
+void __hot _dpa_process_parse_results(const fm_prs_result_t *parse_results,
 				      const struct qm_fd *fd,
 				      struct sk_buff *skb,
 				      int *use_gro);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index 9550157..edf6fad 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -1505,7 +1505,7 @@ void count_ern(struct dpa_percpu_priv_s *percpu_priv,
 int dpa_enable_tx_csum(struct dpa_priv_s *priv,
 	struct sk_buff *skb, struct qm_fd *fd, char *parse_results)
 {
-	t_FmPrsResult *parse_result;
+	fm_prs_result_t *parse_result;
 	struct iphdr *iph;
 	struct ipv6hdr *ipv6h = NULL;
 	int l4_proto;
@@ -1522,7 +1522,7 @@ int dpa_enable_tx_csum(struct dpa_priv_s *priv,
 	/* Fill in some fields of the Parse Results array, so the FMan
 	 * can find them as if they came from the FMan Parser.
 	 */
-	parse_result = (t_FmPrsResult *)parse_results;
+	parse_result = (fm_prs_result_t *)parse_results;
 
 	/* If we're dealing with VLAN, get the real Ethernet type */
 	if (ethertype == ETH_P_8021Q) {
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index 06bf6ae..d4f2337 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -338,7 +338,7 @@ static struct sk_buff *__hot contig_fd_to_skb(const struct dpa_priv_s *priv,
 	ssize_t fd_off = dpa_fd_offset(fd);
 	void *vaddr;
 	struct dpa_bp *dpa_bp = priv->dpa_bp;
-	const t_FmPrsResult *parse_results;
+	const fm_prs_result_t *parse_results;
 	struct sk_buff *skb = NULL;
 
 	vaddr = phys_to_virt(addr);
@@ -368,7 +368,8 @@ static struct sk_buff *__hot contig_fd_to_skb(const struct dpa_priv_s *priv,
 	skb_put(skb, dpa_fd_length(fd));
 
 	/* Peek at the parse results for csum validation */
-	parse_results = (const t_FmPrsResult *)(vaddr + DPA_RX_PRIV_DATA_SIZE);
+	parse_results = (const fm_prs_result_t *)(vaddr +
+				DPA_RX_PRIV_DATA_SIZE);
 	_dpa_process_parse_results(parse_results, fd, skb, use_gro);
 
 #ifdef CONFIG_FSL_DPAA_TS
@@ -399,7 +400,7 @@ static struct sk_buff *__hot sg_fd_to_skb(const struct dpa_priv_s *priv,
 	int frag_offset, frag_len;
 	int page_offset;
 	int i;
-	const t_FmPrsResult *parse_results;
+	const fm_prs_result_t *parse_results;
 	struct sk_buff *skb = NULL;
 	int *count_ptr;
 
@@ -455,7 +456,7 @@ static struct sk_buff *__hot sg_fd_to_skb(const struct dpa_priv_s *priv,
 			 * Context in the buffer containing the sgt.
 			 * Inspect the parse results before anything else.
 			 */
-			parse_results = (const t_FmPrsResult *)(vaddr +
+			parse_results = (const fm_prs_result_t *)(vaddr +
 						DPA_RX_PRIV_DATA_SIZE);
 			_dpa_process_parse_results(parse_results, fd, skb,
 						   use_gro);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
index 5c4aa93..3513222 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
@@ -454,7 +454,7 @@ int __hot dpa_shared_tx(struct sk_buff *skb, struct net_device *net_dev)
 	int queue_mapping;
 	int err;
 	void *dpa_bp_vaddr;
-	t_FmPrsResult parse_results;
+	fm_prs_result_t parse_results;
 
 	priv = netdev_priv(net_dev);
 	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
diff --git a/drivers/net/ethernet/freescale/dpa/mac-api.c b/drivers/net/ethernet/freescale/dpa/mac-api.c
index 3896192..842a996 100644
--- a/drivers/net/ethernet/freescale/dpa/mac-api.c
+++ b/drivers/net/ethernet/freescale/dpa/mac-api.c
@@ -65,14 +65,12 @@ const size_t	 mac_sizeof_priv[] __devinitconst = {
 	[MEMAC] = sizeof(struct mac_priv_s)
 };
 
-static const e_EnetMode _100[] __devinitconst =
-{
+static const enet_mode_t _100[] __devinitconst = {
 	[PHY_INTERFACE_MODE_MII]	= e_ENET_MODE_MII_100,
 	[PHY_INTERFACE_MODE_RMII]	= e_ENET_MODE_RMII_100
 };
 
-static const e_EnetMode _1000[] __devinitconst =
-{
+static const enet_mode_t _1000[] __devinitconst = {
 	[PHY_INTERFACE_MODE_GMII]	= e_ENET_MODE_GMII_1000,
 	[PHY_INTERFACE_MODE_SGMII]	= e_ENET_MODE_SGMII_1000,
 	[PHY_INTERFACE_MODE_TBI]	= e_ENET_MODE_TBI_1000,
@@ -83,7 +81,7 @@ static const e_EnetMode _1000[] __devinitconst =
 	[PHY_INTERFACE_MODE_RTBI]	= e_ENET_MODE_RTBI_1000
 };
 
-static e_EnetMode __devinit __cold __attribute__((nonnull))
+static enet_mode_t __devinit __cold __attribute__((nonnull))
 macdev2enetinterface(const struct mac_device *mac_dev)
 {
 	switch (mac_dev->max_speed) {
@@ -130,7 +128,7 @@ static int __devinit __cold init(struct mac_device *mac_dev)
 	memcpy(&param.addr, mac_dev->addr, min(sizeof(param.addr),
 		sizeof(mac_dev->addr)));
 	param.macId		= mac_dev->cell_index;
-	param.h_Fm		= (t_Handle)mac_dev->fm;
+	param.h_Fm		= (handle_t)mac_dev->fm;
 	param.mdioIrq		= NO_IRQ;
 	param.f_Exception	= mac_exception;
 	param.f_Event		= mac_exception;
@@ -221,7 +219,7 @@ static int __devinit __cold memac_init(struct mac_device *mac_dev)
 	param.enetMode	= macdev2enetinterface(mac_dev);
 	memcpy(&param.addr, mac_dev->addr, sizeof(mac_dev->addr));
 	param.macId		= mac_dev->cell_index;
-	param.h_Fm		= (t_Handle)mac_dev->fm;
+	param.h_Fm		= (handle_t)mac_dev->fm;
 	param.mdioIrq		= NO_IRQ;
 	param.f_Exception	= mac_exception;
 	param.f_Event		= mac_exception;
diff --git a/drivers/net/ethernet/freescale/dpa/mac.c b/drivers/net/ethernet/freescale/dpa/mac.c
index c17392c..0e51ca9 100644
--- a/drivers/net/ethernet/freescale/dpa/mac.c
+++ b/drivers/net/ethernet/freescale/dpa/mac.c
@@ -52,8 +52,7 @@
 	| SUPPORTED_Autoneg \
 	| SUPPORTED_MII)
 
-static const char phy_str[][11] __devinitconst =
-{
+static const char phy_str[][11] __devinitconst = {
 	[PHY_INTERFACE_MODE_MII]	= "mii",
 	[PHY_INTERFACE_MODE_GMII]	= "gmii",
 	[PHY_INTERFACE_MODE_SGMII]	= "sgmii",
@@ -78,8 +77,7 @@ static phy_interface_t __devinit __pure __attribute__((nonnull)) str2phy(const c
 	return PHY_INTERFACE_MODE_MII;
 }
 
-static const uint16_t phy2speed[] __devinitconst =
-{
+static const uint16_t phy2speed[] __devinitconst = {
 	[PHY_INTERFACE_MODE_MII]	= SPEED_100,
 	[PHY_INTERFACE_MODE_GMII]	= SPEED_1000,
 	[PHY_INTERFACE_MODE_SGMII]	= SPEED_1000,
@@ -143,16 +141,19 @@ static int __devinit __cold mac_probe(struct platform_device *_of_dev)
 	const char		*char_prop;
 	const phandle		*phandle_prop;
 	const uint32_t		*uint32_prop;
-        const struct of_device_id *match;
+    const struct of_device_id *match;
 
 	dev = &_of_dev->dev;
 	mac_node = dev->of_node;
 
-        match = of_match_device(mac_match, dev);
-        if (!match)
-                return -EINVAL;
+    match = of_match_device(mac_match, dev);
+    if (!match)
+        return -EINVAL;
+
+	for (i = 0; i < ARRAY_SIZE(mac_match) - 1 && match != mac_match + i;
+				i++)
+	  ;
 
-	for (i = 0; i < ARRAY_SIZE(mac_match) - 1 && match != mac_match + i; i++);
 	BUG_ON(i >= ARRAY_SIZE(mac_match) - 1);
 
 	mac_dev = alloc_macdev(dev, mac_sizeof_priv[i], mac_setup[i]);
diff --git a/drivers/net/ethernet/freescale/fman/inc/flib/fsl_fman.h b/drivers/net/ethernet/freescale/fman/inc/flib/fsl_fman.h
index 795f6b2..2933f75 100755
--- a/drivers/net/ethernet/freescale/fman/inc/flib/fsl_fman.h
+++ b/drivers/net/ethernet/freescale/fman/inc/flib/fsl_fman.h
@@ -105,6 +105,10 @@ enum fman_dma_cache_option {
 	FMAN_DMA_STASH = 1         /**< Cacheable and Allocate (Stashing on) */
 };
 
+typedef struct t_FmPrsResult fm_prs_result_t;
+typedef enum e_EnetMode enet_mode_t;
+typedef t_Handle handle_t;
+
 /* sizes */
 #define CAPWAP_FRAG_EXTRA_SPACE                 32
 #define OFFSET_UNITS                            16
-- 
1.7.5.4

