From 285e02185ed945b643e6f141dd7e9a7e0b04314c Mon Sep 17 00:00:00 2001
From: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Date: Mon, 23 Sep 2013 16:28:59 +0300
Subject: [PATCH 232/429] dpaa_eth: Replace for_each_online_cpu with
 for_each_possible_cpu

At bootime, we currently initialize a NAPI instance per each
online core, per interface. Booting with a subset of cores and
bringing up more cores afterwards means that no NAPI instances
are created for the newly added cores.
Therefore we create a NAPI instance for each possible core in
the system such that there will always be <total_no_of_cores>
NAPI instances for each interface.

This also gurantees that we do enable/disable NAPI on all possible
cores at ifconfig up/down thus eliminating the need to keep track
of the cores that were online at the previous ifconfig operation.

Even though we do create a NAPI instance and enable it for all
possible cores (including offline cores), the scheduler ensures
that NAPI will not be scheduled on offline cores.

Signed-off-by: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Change-Id: I666bbb870fb8645495a80343cdbefb047c086f4c
Reviewed-on: http://git.am.freescale.net:8181/5118
Reviewed-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Rivera Jose-B46482 <German.Rivera@freescale.com>
[origin patch is from QorIQ-SDK-V1.5-20131219-yocto]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |    8 ++++----
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    2 +-
 .../net/ethernet/freescale/dpa/dpaa_eth_macless.c  |    2 +-
 .../net/ethernet/freescale/dpa/dpaa_eth_non_sg.c   |    2 +-
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c   |    2 +-
 .../net/ethernet/freescale/dpa/dpaa_eth_shared.c   |    2 +-
 6 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 8c3c89f..937ed9a 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -496,7 +496,7 @@ static void dpaa_eth_napi_enable(struct dpa_priv_s *priv)
 	struct dpa_percpu_priv_s *percpu_priv;
 	int i;
 
-	for_each_online_cpu(i) {
+	for_each_possible_cpu(i) {
 		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
 		napi_enable(&percpu_priv->napi);
 	}
@@ -507,7 +507,7 @@ static void dpaa_eth_napi_disable(struct dpa_priv_s *priv)
 	struct dpa_percpu_priv_s *percpu_priv;
 	int i;
 
-	for_each_online_cpu(i) {
+	for_each_possible_cpu(i) {
 		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
 		napi_disable(&percpu_priv->napi);
 	}
@@ -598,7 +598,7 @@ static int dpa_private_netdev_init(struct device_node *dpa_node,
 	 * Although we access another CPU's private data here
 	 * we do it at initialization so it is safe
 	 */
-	for_each_online_cpu(i) {
+	for_each_possible_cpu(i) {
 		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
 		percpu_priv->net_dev = net_dev;
 
@@ -838,7 +838,7 @@ dpaa_eth_priv_probe(struct platform_device *_of_dev)
 		err = -ENOMEM;
 		goto alloc_percpu_failed;
 	}
-	for_each_online_cpu(i) {
+	for_each_possible_cpu(i) {
 		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
 		memset(percpu_priv, 0, sizeof(*percpu_priv));
 	}
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index 78a07e7..6be9053 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -216,7 +216,7 @@ dpa_get_stats64(struct net_device *net_dev,
 	struct dpa_percpu_priv_s	*percpu_priv;
 	int numstats = sizeof(struct rtnl_link_stats64) / sizeof(u64);
 
-	for_each_online_cpu(i) {
+	for_each_possible_cpu(i) {
 		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
 
 		cpustats = (u64 *)&percpu_priv->stats;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_macless.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_macless.c
index b3736cb..11ff497 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_macless.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_macless.c
@@ -335,7 +335,7 @@ static int dpaa_eth_macless_probe(struct platform_device *_of_dev)
 		err = -ENOMEM;
 		goto alloc_percpu_failed;
 	}
-	for_each_online_cpu(i) {
+	for_each_possible_cpu(i) {
 		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
 		memset(percpu_priv, 0, sizeof(*percpu_priv));
 	}
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c
index d0bd7f3..a77f68c 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c
@@ -138,7 +138,7 @@ int dpa_bp_priv_seed(struct dpa_bp *dpa_bp)
 	dpa_bp->size = default_buf_size;
 
 	/* Give each cpu an allotment of "count" buffers */
-	for_each_online_cpu(i) {
+	for_each_possible_cpu(i) {
 		int j;
 
 		for (j = 0; j < dpa_bp->target_count; j += 8)
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index 007f3e9..9c3ca60 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -137,7 +137,7 @@ int dpa_bp_priv_seed(struct dpa_bp *dpa_bp)
 	int i;
 
 	/* Give each CPU an allotment of "config_count" buffers */
-	for_each_online_cpu(i) {
+	for_each_possible_cpu(i) {
 		int j;
 
 		/*
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
index f1985b1..328f729 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
@@ -693,7 +693,7 @@ dpaa_eth_shared_probe(struct platform_device *_of_dev)
 		err = -ENOMEM;
 		goto alloc_percpu_failed;
 	}
-	for_each_online_cpu(i) {
+	for_each_possible_cpu(i) {
 		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
 		memset(percpu_priv, 0, sizeof(*percpu_priv));
 	}
-- 
1.7.5.4

