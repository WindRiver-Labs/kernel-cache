From 9d642e99d008a25336f0ae0a4909da5841eda695 Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@freescale.com>
Date: Thu, 4 Apr 2013 15:35:31 +0300
Subject: [PATCH 377/547] gianfar: Add support for nfc rx-flow hashing based on
 SPI

Program the filer to perform hashing based on SPI (Secutity Parameter
Index) for the AH/ESP incoming packets. The aim is to speed up processing
of IPSEC flows on eTSEC platforms, by distributing them to separate Rx
queues which gives the possibility to process the flows on separate CPUs.

Signed-off-by: Pankaj Chauhan <pankaj.chauhan@freescale.com>
Signed-off-by: Claudiu Manoil <claudiu.manoil@freescale.com>
Change-Id: I9c7525b18589e28bb819a8bff7310c4f0ce08765
Reviewed-on: http://git.am.freescale.net:8181/1009
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
[Original patch taken from QorIQ-SDK-V1.4-SOURCE-20130625-yocto.iso]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/net/ethernet/freescale/gianfar.h         |  8 +++++
 drivers/net/ethernet/freescale/gianfar_ethtool.c | 46 ++++++++++++++++++++++++
 2 files changed, 54 insertions(+)

diff --git a/drivers/net/ethernet/freescale/gianfar.h b/drivers/net/ethernet/freescale/gianfar.h
index 2ce5654..475f88e 100644
--- a/drivers/net/ethernet/freescale/gianfar.h
+++ b/drivers/net/ethernet/freescale/gianfar.h
@@ -467,6 +467,14 @@ extern const char gfar_driver_version[];
 #define RQFPR_PER		0x00000002
 #define RQFPR_EER		0x00000001
 
+/* RBIFX B[x]CTL field values */
+#define RBIFX_B_NONE		0x0
+#define RBIFX_B_BEFORE_L2	0x1
+#define RBIFX_B_AFTER_L2	0x2
+#define RBIFX_B_AFTER_L3	0x3
+/* BCTL field offset */
+#define RBIFX_BCTL_OFF		6
+
 /* TxBD status field bits */
 #define TXBD_READY		0x8000
 #define TXBD_PADCRC		0x4000
diff --git a/drivers/net/ethernet/freescale/gianfar_ethtool.c b/drivers/net/ethernet/freescale/gianfar_ethtool.c
index f84e78c..ef12ece 100644
--- a/drivers/net/ethernet/freescale/gianfar_ethtool.c
+++ b/drivers/net/ethernet/freescale/gianfar_ethtool.c
@@ -42,6 +42,7 @@
 #include <linux/phy.h>
 #include <linux/sort.h>
 #include <linux/if_vlan.h>
+#include <linux/in.h>
 
 #include "gianfar.h"
 
@@ -631,6 +632,7 @@ static int gfar_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
 static void ethflow_to_filer_rules (struct gfar_private *priv, u64 ethflow)
 {
 	u32 fcr = 0x0, fpr = FPR_FILER_MASK;
+	u32 class = upper_32_bits(ethflow);
 
 	if (ethflow & RXH_L2DA) {
 		fcr = RQFCR_PID_DAH |RQFCR_CMP_NOMATCH |
@@ -701,6 +703,45 @@ static void ethflow_to_filer_rules (struct gfar_private *priv, u64 ethflow)
 		gfar_write_filer(priv, priv->cur_filer_idx, fcr, fpr);
 		priv->cur_filer_idx = priv->cur_filer_idx - 1;
 	}
+
+	if (((class == AH_V4_FLOW) || (class == ESP_V4_FLOW)) &&
+	   (ethflow & RXH_AH_ESP_SPI)) {
+		struct gfar __iomem *regs = priv->gfargrp[0].regs;
+		u8 rbifx_bx, spi_off;
+		u32 rbifx;
+		int i;
+
+		fcr = RQFCR_PID_ARB | RQFCR_HASH | RQFCR_HASHTBL_0 |
+		      RQFCR_CMP_NOMATCH | RQFCR_AND;
+		priv->ftp_rqfpr[priv->cur_filer_idx] = fpr;
+		priv->ftp_rqfcr[priv->cur_filer_idx] = fcr;
+		gfar_write_filer(priv, priv->cur_filer_idx, fcr, fpr);
+		priv->cur_filer_idx = priv->cur_filer_idx - 1;
+
+		fcr = RQFCR_PID_L4P | RQFCR_CMP_EXACT | RQFCR_AND;
+		fpr = (class == AH_V4_FLOW) ? IPPROTO_AH : IPPROTO_ESP;
+		priv->ftp_rqfpr[priv->cur_filer_idx] = fpr;
+		priv->ftp_rqfcr[priv->cur_filer_idx] = fcr;
+		gfar_write_filer(priv, priv->cur_filer_idx, fcr, fpr);
+		priv->cur_filer_idx = priv->cur_filer_idx - 1;
+
+		/* SPI field to be extracted starting from offset 4 for AH,
+		 * or offset 0 for ESP, just after the L3 header
+		 */
+		spi_off = (class == AH_V4_FLOW) ? 4 : 0;
+		/* configure RBIFX's B0 field */
+		rbifx_bx = RBIFX_B_AFTER_L3 << RBIFX_BCTL_OFF;
+		rbifx_bx |= spi_off;
+		rbifx = rbifx_bx;
+		/* configure the next 3 bytes (B1, B2, B3) */
+		for (i = 1; i < 4; i++) {
+			rbifx_bx++; /* next SPI byte offset */
+			rbifx <<= 8;
+			rbifx |= rbifx_bx;
+		}
+
+		gfar_write(&regs->rbifx, rbifx);
+	}
 }
 
 static int gfar_ethflow_to_filer_table(struct gfar_private *priv, u64 ethflow,
@@ -736,6 +777,11 @@ static int gfar_ethflow_to_filer_table(struct gfar_private *priv, u64 ethflow,
 	case UDP_V6_FLOW:
 		cmp_rqfpr = RQFPR_IPV6 |RQFPR_UDP;
 		break;
+	case AH_V4_FLOW:
+	case ESP_V4_FLOW:
+		cmp_rqfpr = RQFPR_IPV4;
+		ethflow |= (class << 32);
+		break;
 	default:
 		netdev_err(priv->ndev,
 			   "Right now this class is not supported\n");
-- 
1.8.4.93.g57e4c17

