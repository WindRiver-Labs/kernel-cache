From d690ee6fc553bfcd97ca5faa20368581850c1533 Mon Sep 17 00:00:00 2001
From: Yang Wei <Wei.Yang@windriver.com>
Date: Tue, 10 Sep 2013 12:27:42 +0800
Subject: [PATCH] powerpc/exeception-64e: Using LOAD_REG_ADDR to get the
 address of variable

kgdbts runs into the following calltrace with a relocatable kernel
Entering kdb (current=0xc00000017960a040, pid 1) on processor 13 due to
Keyboard Entry
[13]kdb> kgdbts:RUN sw breakpoint test
kgdbts:RUN bad memory access test
kgdbts:RUN singlestep test 1000 iterations
Unable to handle kernel paging request for data at address 0x00000068
Faulting instruction address: 0xc00000000001f614
Oops: Kernel access of bad area, sig: 11 [#1]
PREEMPT SMP NR_CPUS=24 LTT NESTING LEVEL : 0
T4240 QDS
Modules linked in:
NIP: c00000000001f614 LR: c0000000004dd548 CTR: c0000000004b31d0
REGS: c00000017960f9b0 TRAP: 0300   Not tainted
(3.4.43-rt56-WR5.0.1.0_preempt-rt)
MSR: 0000000080001000 <ME>  CR: 28044084  XER: 20000000
SOFTE: 1
DEAR: 0000000000000068, ESR: 0000000000000000
TASK = c00000017960a040[1] 'swapper/0' THREAD: c00000017960c000
CPU: 13
GPR00: c0000000004dd548 c00000017960fc30 c000000001481c68 0000000000000031
GPR04: 0000000000000000 0000000000000000 c000000001436cf0 000000000001ffff
GPR08: c0000000014a6100 c0000000014d3c48 0000000000000068 0000000080029200
GPR12: 0000000024044082 c00000000fffd400 0000000000000068 000000007ffb0b08
GPR16: 0000000000000000 0000000000000000 000000007fb32880 0000000000000000
GPR20: 0000000000000000 0000000000000000 c000000001336c70 c000000001337338
GPR24: c000000000b68008 0000000051eb851f 00000000000003e8 0000000000000000
GPR28: c000000001555d68 0000000000000000 c0000000013ca758 c000000001336c68
NIP [c00000000001f614] exc_debug_debug_book3e+0x50/0x130
LR [c0000000004dd548] .configure_kgdbts+0x2a8/0x5a0
Call Trace:
[c00000017960fc30] [c0000000004dd540]
.configure_kgdbts+0x2a0/0x5a0 (unreliable)
[c00000017960fd10] [c000000000c46b38] .init_kgdbts+0x2c/0x40
[c00000017960fd90] [c0000000000015e8] .do_one_initcall+0x68/0x1f0
[c00000017960fe50] [c000000000c1bc50] .kernel_init+0x1e8/0x2c4
[c00000017960ff90] [c00000000001981c] .original_kernel_thread+0x54/0x70
Instruction dump:
914d02c8 7d7f8aa6 716a4000 40820030 7dde42a6 55ce1838 3d400000 614a0000
794a07c6 654a0000 614a0000 7d4a7214 <e94a0000> 394a4000 f94d0310e82d0310

In order to get the content of a global variable, we should use
LOAD_REG_ADDR instead of LOAD_REG_IMMEDIATE.

Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 arch/powerpc/kernel/exceptions-64e.S |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/arch/powerpc/kernel/exceptions-64e.S b/arch/powerpc/kernel/exceptions-64e.S
index cffa66d..b65f931 100644
--- a/arch/powerpc/kernel/exceptions-64e.S
+++ b/arch/powerpc/kernel/exceptions-64e.S
@@ -46,7 +46,7 @@
 	bne	1f;					\
 	mfspr	r14,SPRN_PIR;				\
 	slwi	r14,r14,3;				\
-	LOAD_REG_IMMEDIATE(r10, level##_STACK_BASE);	\
+	LOAD_REG_ADDR(r10, level##_STACK_BASE);	\
 	add	r10,r10,r14;				\
 	ld	r10,0(r10);				\
 	addi	r10,r10,THREAD_SIZE;			\
@@ -56,7 +56,7 @@
 #define BOOK3E_LOAD_EXC_LEVEL_STACK(level)		\
 	andi.	r10,r11,MSR_PR;				\
 	bne	1f;					\
-	LOAD_REG_IMMEDIATE(r10, level##_STACK_BASE);	\
+	LOAD_REG_ADDR(r10, level##_STACK_BASE);	\
 	ld	r10,0(r10);				\
 	addi	r10,r10,THREAD_SIZE;			\
 	std	r10,PACA_##level##_STACK(r13);
-- 
1.7.5.4

