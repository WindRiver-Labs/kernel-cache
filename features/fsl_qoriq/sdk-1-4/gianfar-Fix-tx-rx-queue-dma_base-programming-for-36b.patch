From eb85e1a7f6b118665876361375a7bc2375d73a07 Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@freescale.com>
Date: Fri, 24 May 2013 17:59:31 +0300
Subject: [PATCH 393/547] gianfar: Fix tx/rx queue dma_base programming for
 36bit mode

For 36 bit mode, TBASEH/RBASEH eTSEC regs need to be programmed
with the upper 32-bit part of the DMA base addr of the BD region.
This is needed when the BDs are allocated in L2 SRAM above the 4G
boundary.
For addresses below 4G, which is the default use case, these
registers just maintain their default reset value of 0.

Signed-off-by: Claudiu Manoil <claudiu.manoil@freescale.com>
Change-Id: I69e3b86c09ad11780d7124031dd582dc8cd697f0
Reviewed-on: http://git.am.freescale.net:8181/2696
Reviewed-by: Gupta Rajan-B15745 <rajan.gupta@freescale.com>
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
[Original patch taken from QorIQ-SDK-V1.4-SOURCE-20130625-yocto.iso]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/net/ethernet/freescale/gianfar.c | 16 +++++++++++++++-
 drivers/net/ethernet/freescale/gianfar.h |  1 +
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index f0cf599..34c578c 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -364,6 +364,19 @@ static void gfar_init_tx_rx_base(struct gfar_private *priv)
 	struct gfar __iomem *regs = priv->gfargrp[0].regs;
 	u32 __iomem *baddr;
 	int i;
+	dma_addr_t addr;
+
+	/* eTSEC supports 36-bit physical addressing.
+	 * Should the BD rings be located at adresses above 4GB,
+	 * initialize tbaseh/rbaseh with the upper 32 bits. This
+	 * may happen when the BD rings are allocated in SRAM.
+	 */
+	if (priv->device_flags & FSL_GIANFAR_DEV_HAS_36BIT_ADDR) {
+		addr = priv->tx_queue[0]->tx_bd_dma_base;
+		gfar_write(&regs->tbaseh, upper_32_bits(addr) & 0xf);
+		addr = priv->rx_queue[0]->rx_bd_dma_base;
+		gfar_write(&regs->rbaseh, upper_32_bits(addr) & 0xf);
+	}
 
 	baddr = &regs->tbase0;
 	for (i = 0; i < priv->num_tx_queues; i++) {
@@ -871,7 +884,8 @@ static int gfar_of_init(struct platform_device *ofdev, struct net_device **pdev)
 				     FSL_GIANFAR_DEV_HAS_CSUM |
 				     FSL_GIANFAR_DEV_HAS_VLAN |
 				     FSL_GIANFAR_DEV_HAS_MAGIC_PACKET |
-				     FSL_GIANFAR_DEV_HAS_EXTENDED_HASH;
+				     FSL_GIANFAR_DEV_HAS_EXTENDED_HASH |
+				     FSL_GIANFAR_DEV_HAS_36BIT_ADDR;
 
 	ctype = of_get_property(np, "phy-connection-type", NULL);
 
diff --git a/drivers/net/ethernet/freescale/gianfar.h b/drivers/net/ethernet/freescale/gianfar.h
index 9ec96cd..6dd03bf 100644
--- a/drivers/net/ethernet/freescale/gianfar.h
+++ b/drivers/net/ethernet/freescale/gianfar.h
@@ -1057,6 +1057,7 @@ struct gfar {
 #define FSL_GIANFAR_DEV_HAS_BUF_STASHING	0x00000400
 #define FSL_GIANFAR_DEV_HAS_TIMER		0x00000800
 #define FSL_GIANFAR_DEV_HAS_TS_TO_BUFFER	0x00001000
+#define FSL_GIANFAR_DEV_HAS_36BIT_ADDR		0x00002000
 
 #if (MAXGROUPS == 2)
 #define DEFAULT_MAPPING 	0xAA
-- 
1.8.4.93.g57e4c17

