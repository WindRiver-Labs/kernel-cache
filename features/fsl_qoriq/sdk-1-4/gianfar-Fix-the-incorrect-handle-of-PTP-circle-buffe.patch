From 8bb9c1f7096239d817443e879a2f5e055bd1b168 Mon Sep 17 00:00:00 2001
From: Xie Xiaobo <X.Xie@freescale.com>
Date: Fri, 9 Aug 2013 11:17:03 +0800
Subject: [PATCH 425/430] gianfar: Fix the incorrect handle of PTP circle
 buffer

When didn't find the timestamp for a ptp message, the current driver will
empty the whole timestamp buffer. It will discard some timestamps that are
still in effect. Apply this patch, It only discard these overdue timestamp.

Signed-off-by: Xie Xiaobo <X.Xie@freescale.com>
Change-Id: Ifce09e4148de02a7afad25bbfce3e2fb8faa2a98
Reviewed-on: http://git.am.freescale.net:8181/1530
Reviewed-by: Manoil Claudiu-B08782 <claudiu.manoil@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
[Original patch is from QorIQ-SDK-V1.4-20130625-yocto]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/gianfar.h      |    2 ++
 drivers/net/ethernet/freescale/gianfar_1588.c |   23 ++++++++++++++++++-----
 2 files changed, 20 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/freescale/gianfar.h b/drivers/net/ethernet/freescale/gianfar.h
index bd72cd7..ec898c7 100644
--- a/drivers/net/ethernet/freescale/gianfar.h
+++ b/drivers/net/ethernet/freescale/gianfar.h
@@ -173,6 +173,8 @@ extern const char gfar_driver_version[];
 
 #define DEFAULT_PTP_TX_BUF_SZ		1024
 #define DEFAULT_PTP_RX_BUF_SZ		2048
+/* The threshold between the current found one and the oldest one */
+#define TS_ACCUMULATION_THRESHOLD	50
 
 #define GFAR_PTP_SOURCE_PORT_LENGTH	10
 #define	GFAR_PTP_HEADER_SEQ_OFFS	30
diff --git a/drivers/net/ethernet/freescale/gianfar_1588.c b/drivers/net/ethernet/freescale/gianfar_1588.c
index bd6f2b1..a92c5ce 100644
--- a/drivers/net/ethernet/freescale/gianfar_1588.c
+++ b/drivers/net/ethernet/freescale/gianfar_1588.c
@@ -114,8 +114,8 @@ static bool gfar_ptp_find_and_remove(struct gfar_ptp_circular *buf,
 {
 	struct circ_buf *circ_buf = &buf->circ_buf;
 	unsigned int size = buf->size;
-	unsigned int head, idx;
-	struct gfar_ptp_data *tmp;
+	unsigned int head, tail, idx;
+	struct gfar_ptp_data *tmp, *tmp2;
 	struct gfar_ptp_ident *tmp_ident;
 	unsigned long flags;
 
@@ -126,7 +126,7 @@ static bool gfar_ptp_find_and_remove(struct gfar_ptp_circular *buf,
 	}
 
 	head = circ_buf->head;
-	idx = circ_buf->tail;
+	tail = idx = circ_buf->tail;
 
 	while (idx != head) {
 		tmp = (struct gfar_ptp_data *)(circ_buf->buf) + idx;
@@ -140,15 +140,28 @@ static bool gfar_ptp_find_and_remove(struct gfar_ptp_circular *buf,
 
 	/* not found ? */
 	if (idx == head) {
-		circ_buf->tail = head;
 		spin_unlock_irqrestore(&buf->ptp_lock, flags);
 		return 1;
 	}
 
 	*ts = tmp->ts;
 
+	if (idx != tail) {
+		if (CIRC_CNT(idx, tail, size) > TS_ACCUMULATION_THRESHOLD) {
+			tail = circ_buf->tail =
+				(idx - TS_ACCUMULATION_THRESHOLD) & (size - 1);
+		}
+
+		while (CIRC_CNT(idx, tail, size) > 0) {
+			tmp = (struct gfar_ptp_data *)(circ_buf->buf) + idx;
+			idx = (idx - 1) & (size - 1);
+			tmp2 = (struct gfar_ptp_data *)(circ_buf->buf) + idx;
+			*tmp = *tmp2;
+		}
+	}
+
 	/* set tail pointer to postion after found */
-	circ_buf->tail = (idx + 1) & (size - 1);
+	circ_buf->tail = (tail + 1) & (size - 1);
 
 	spin_unlock_irqrestore(&buf->ptp_lock, flags);
 
-- 
1.7.5.4

