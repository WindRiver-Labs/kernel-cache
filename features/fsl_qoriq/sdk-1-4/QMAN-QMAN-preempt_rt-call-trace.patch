From 4a47efd2c8e50012df8381c21fbe1d4dcb290276 Mon Sep 17 00:00:00 2001
From: Yongli He <yongli.he@windriver.com>
Date: Thu, 16 Aug 2012 14:52:23 +0800
Subject: [PATCH 1/3] QMAN: QMAN preempt_rt call trace

On preempt-rt kernel, during qman-self testing, sleepable spinlocks
introduce call trace:

BUG: sleeping function called from invalid context at kernel/rtmutex.c:707
pcnt: 1 0 in_atomic(): 1, irqs_disabled(): 1, pid: 0, name: swapper
Call Trace:
[c000000000ae7540] [c00000000000a4a8] .show_stack+0x68/0x1b0 (unreliable)
[c000000000ae75f0] [c000000000039030] .__might_sleep+0x130/0x170
[c000000000ae7680] [c0000000007aec3c] .rt_spin_lock+0x3c/0xd0
[c000000000ae7700] [c0000000006a299c] .qman_create_fq+0xcc/0x830
[c000000000ae7800] [80000000002a90d4] .init_handler+0x84/0x180 [qman_tester]
[c000000000ae78d0] [c0000000000912c8] .generic_smp_call_function_single_interrupt+0x138/0x1d0
[c000000000ae7990] [c000000000023d94] .smp_message_recv+0x84/0x1b0
[c000000000ae7a20] [c00000000001bd64] .doorbell_exception+0x1a4/0x1c0
[c000000000ae7ad0] [c000000000017410] exc_doorbell_book3e+0x134/0x138
 --- Exception: 2071 at .book3e_idle+0x28/0x6c
    LR = .book3e_idle+0x28/0x6c
[c000000000ae7dc0] [c00000000000cb8c] .cpu_idle+0x10c/0x220 (unreliable)
[c000000000ae7e70] [c000000000001494] .rest_init+0xd4/0xc40
[c000000000ae7ef0] [c00000000095fcec] .start_kernel+0x460/0x480
[c000000000ae7f90] [c000000000000468] .start_here_common+0x1c/0x34

This is caused by lock fq_hash_table_lock in atomic context. atomic
context should be preserved so change spin lock to raw type.

Signed-off-by: Yongli He <yongli.he@windriver.com>
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 15567de..daac20f 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -250,33 +250,33 @@ int qman_setup_fq_lookup_table(size_t num_entries)
 }
 
 /* global structure that maintains fq object mapping */
-static DEFINE_SPINLOCK(fq_hash_table_lock);
+static DEFINE_RAW_SPINLOCK(fq_hash_table_lock);
 
 static int find_empty_fq_table_entry(u32 *entry, struct qman_fq *fq)
 {
 	u32 i;
 
-	spin_lock(&fq_hash_table_lock);
+	raw_spin_lock(&fq_hash_table_lock);
 	/* Can't use index zero because this has special meaning
 	 * in context_b field. */
 	for (i = 1; i < qman_fq_lookup_table_size; i++) {
 		if (qman_fq_lookup_table[i] == NULL) {
 			*entry = i;
 			qman_fq_lookup_table[i] = fq;
-			spin_unlock(&fq_hash_table_lock);
+			raw_spin_unlock(&fq_hash_table_lock);
 			return 0;
 		}
 	}
-	spin_unlock(&fq_hash_table_lock);
+	raw_spin_unlock(&fq_hash_table_lock);
 	return -ENOMEM;
 }
 
 static void clear_fq_table_entry(u32 entry)
 {
-	spin_lock(&fq_hash_table_lock);
+	raw_spin_lock(&fq_hash_table_lock);
 	BUG_ON(entry >= qman_fq_lookup_table_size);
 	qman_fq_lookup_table[entry] = NULL;
-	spin_unlock(&fq_hash_table_lock);
+	raw_spin_unlock(&fq_hash_table_lock);
 }
 
 static inline struct qman_fq *get_fq_table_entry(u32 entry)
-- 
1.8.4.93.g57e4c17

