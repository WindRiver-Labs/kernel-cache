From 9f8d7b5bec07a0b12ffa80babe1ea09d22cb727e Mon Sep 17 00:00:00 2001
From: Wu Jiajun-B06378 <B06378@freescale.com>
Date: Fri, 9 Aug 2013 11:16:40 +0800
Subject: [PATCH 402/430] gianfar: add GRO support

commit cd754a574596ecc321b9a14fda24a82cce4b0d1d upstream

Replace netif_receive_skb with napi_gro_receive.

Signed-off-by: Jiajun Wu <b06378@freescale.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
[Just a minior modification to port 3.4 kernel]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/gianfar.c |   18 ++++++++++--------
 1 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index 3ec5087..7474a33 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -171,7 +171,7 @@ static int gfar_clean_tx_ring(struct gfar_priv_tx_q *tx_queue,
 		int tx_work_limit);
 
 static int gfar_process_frame(struct net_device *dev, struct sk_buff *skb,
-			      int amount_pull);
+			      int amount_pull, struct napi_struct *napi);
 void gfar_halt(struct net_device *dev);
 static void gfar_halt_nodisable(struct net_device *dev);
 void gfar_start(struct net_device *dev);
@@ -3660,12 +3660,12 @@ static inline void gfar_rx_checksum(struct sk_buff *skb, struct rxfcb *fcb)
 /* gfar_process_frame() -- handle one incoming packet if skb
  * isn't NULL.  */
 static int gfar_process_frame(struct net_device *dev, struct sk_buff *skb,
-			      int amount_pull)
+			      int amount_pull, struct napi_struct *napi)
 {
 	struct gfar_private *priv = netdev_priv(dev);
 	struct rxfcb *fcb = NULL;
 
-	int ret;
+	gro_result_t ret;
 
 	/* fcb is at the beginning if exists */
 	fcb = (struct rxfcb *)skb->data;
@@ -3718,9 +3718,9 @@ static int gfar_process_frame(struct net_device *dev, struct sk_buff *skb,
 		__vlan_hwaccel_put_tag(skb, fcb->vlctl);
 
 	/* Send the packet up the stack */
-	ret = netif_receive_skb(skb);
+	ret = napi_gro_receive(napi, skb);
 
-	if (NET_RX_DROP == ret)
+	if (GRO_DROP == ret)
 		priv->extra_stats.kernel_dropped++;
 
 	return 0;
@@ -3745,7 +3745,8 @@ static inline void gfar_hwaccel_tcp4_receive(struct gfar_private *priv,
 	 */
 	skb->gfar_dev = priv->ndev;
 	if ((tcp_chan_idx < 0) || !priv->hw_tcp.chan[tcp_chan_idx]) {
-		gfar_process_frame(priv->ndev, skb, GMAC_FCB_LEN);
+		gfar_process_frame(priv->ndev, skb, GMAC_FCB_LEN,
+					rx_queue->grp->napi_rx);
 		return;
 	}
 
@@ -3762,7 +3763,7 @@ static inline void gfar_hwaccel_tcp4_receive(struct gfar_private *priv,
 
 	if (iph->ihl > 5 || (iph->frag_off & htons(IP_MF | IP_OFFSET)) ||
 		(gfar_sk->sk_state != TCP_ESTABLISHED)) {
-		gfar_process_frame(priv->ndev, skb, GMAC_FCB_LEN);
+		gfar_process_frame(priv->ndev, skb, GMAC_FCB_LEN, rx_queue->grp->napi_rx);
 		return;
 	}
 
@@ -3874,7 +3875,8 @@ int gfar_clean_rx_ring(struct gfar_priv_rx_q *rx_queue, int rx_work_limit)
 							(priv, rx_queue, skb);
 				else
 #endif
-				gfar_process_frame(dev, skb, amount_pull);
+				gfar_process_frame(dev, skb, amount_pull,
+							&rx_queue->grp->napi_rx);
 #ifdef CONFIG_RX_TX_BUFF_XCHG
 				newskb = skb->new_skb;
 				skb->owner = 0;
-- 
1.7.5.4

