From 5b346b0de8775963fb9a2d2ce61f954798429451 Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Mon, 11 Feb 2013 17:49:14 +0200
Subject: [PATCH 188/547] dpaa_eth: Remove __devinit, __devexit macros

They are no longer supported in the latest kernel.

Change-Id: I08b7a5bbe8738d22330d4a175e941627ce1b5172
Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/1062
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
[Original patch taken from QorIQ-SDK-V1.4-SOURCE-20130625-yocto.iso]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 .../net/ethernet/freescale/dpa/dpaa_eth-common.h   | 20 ------
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      | 74 +++++++++++-----------
 drivers/net/ethernet/freescale/dpa/mac-api.c       | 20 +++---
 drivers/net/ethernet/freescale/dpa/mac.c           | 18 +++---
 drivers/net/ethernet/freescale/dpa/offline_port.c  | 12 ++--
 5 files changed, 62 insertions(+), 82 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h
index a6648e2..f8493ae 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h
@@ -39,26 +39,6 @@
 
 #define __hot
 
-/*
- * TODO Remove these altogether. They have been removed form kernel 3.8
- * and are still here for compatibility while we're rebasing the code.
- */
-#ifndef __devinit
-#define __devinit
-#endif
-#ifndef __devexit_p
-#define __devexit_p
-#endif
-#ifndef __devinitdata
-#define __devinitdata
-#endif
-#ifndef __devinitconst
-#define __devinitconst
-#endif
-#ifndef __devexit
-#define __devexit
-#endif
-
 /* Simple enum of FQ types - used for array indexing */
 enum {RX, TX};
 
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index dabf25c..663be86 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -137,7 +137,7 @@ module_param(debug, byte, S_IRUGO);
 MODULE_PARM_DESC(debug, "Module/Driver verbosity level");
 
 /* This has to work in tandem with the DPA_CS_THRESHOLD_xxx values. */
-static uint16_t __devinitdata tx_timeout = 1000;
+static uint16_t tx_timeout = 1000;
 module_param(tx_timeout, ushort, S_IRUGO);
 MODULE_PARM_DESC(tx_timeout, "The Tx timeout in ms");
 
@@ -430,7 +430,7 @@ static int dpa_make_shared_port_pool(struct dpa_bp *bp)
 	return 0;
 }
 
-static int __devinit __must_check __attribute__((nonnull))
+static int __must_check __attribute__((nonnull))
 dpa_bp_alloc(struct dpa_bp *dpa_bp)
 {
 	int err;
@@ -579,7 +579,7 @@ static struct qman_fq *_dpa_get_tx_conf_queue(const struct dpa_priv_s *priv,
 	return NULL;
 }
 
-static int __devinit __must_check __attribute__((nonnull))
+static int __must_check __attribute__((nonnull))
 _dpa_fq_alloc(struct list_head *list, struct dpa_fq *dpa_fq)
 {
 	int			 _errno;
@@ -2375,38 +2375,38 @@ static void egress_ern(struct qman_portal	*portal,
 	dev_kfree_skb_any(skb);
 }
 
-static const struct qman_fq rx_shared_fq __devinitconst = {
+static const struct qman_fq rx_shared_fq = {
 	.cb = { .dqrr = shared_rx_dqrr }
 };
-static const struct qman_fq rx_private_defq __devinitconst = {
+static const struct qman_fq rx_private_defq = {
 	.cb = { .dqrr = ingress_rx_default_dqrr }
 };
-static const struct qman_fq rx_private_errq __devinitconst = {
+static const struct qman_fq rx_private_errq = {
 	.cb = { .dqrr = ingress_rx_error_dqrr }
 };
-static const struct qman_fq tx_private_defq __devinitconst = {
+static const struct qman_fq tx_private_defq = {
 	.cb = { .dqrr = ingress_tx_default_dqrr }
 };
-static const struct qman_fq tx_private_errq __devinitconst = {
+static const struct qman_fq tx_private_errq = {
 	.cb = { .dqrr = ingress_tx_error_dqrr }
 };
-static const struct qman_fq tx_shared_defq __devinitconst = {
+static const struct qman_fq tx_shared_defq = {
 	.cb = { .dqrr = shared_tx_default_dqrr }
 };
-static const struct qman_fq tx_shared_errq __devinitconst = {
+static const struct qman_fq tx_shared_errq = {
 	.cb = { .dqrr = shared_tx_error_dqrr }
 };
-static const struct qman_fq private_egress_fq __devinitconst = {
+static const struct qman_fq private_egress_fq = {
 	.cb = { .ern = egress_ern }
 };
-static const struct qman_fq shared_egress_fq __devinitconst = {
+static const struct qman_fq shared_egress_fq = {
 	.cb = { .ern = shared_ern }
 };
 
 #ifdef CONFIG_DPAA_ETH_UNIT_TESTS
-static bool __devinitdata tx_unit_test_passed = true;
+static bool tx_unit_test_passed = true;
 
-static void __devinit tx_unit_test_ern(struct qman_portal	*portal,
+static void tx_unit_test_ern(struct qman_portal	*portal,
 		       struct qman_fq		*fq,
 		       const struct qm_mr_entry	*msg)
 {
@@ -2435,11 +2435,11 @@ static void __devinit tx_unit_test_ern(struct qman_portal	*portal,
 	kfree_skb(skb);
 }
 
-static unsigned char __devinitdata *tx_unit_skb_head;
-static unsigned char __devinitdata *tx_unit_skb_end;
-static int __devinitdata tx_unit_tested;
+static unsigned char *tx_unit_skb_head;
+static unsigned char *tx_unit_skb_end;
+static int tx_unit_tested;
 
-static enum qman_cb_dqrr_result __devinit tx_unit_test_dqrr(
+static enum qman_cb_dqrr_result tx_unit_test_dqrr(
 		struct qman_portal *portal,
 		struct qman_fq *fq,
 		const struct qm_dqrr_entry *dq)
@@ -2509,17 +2509,17 @@ out:
 	return qman_cb_dqrr_consume;
 }
 
-static const struct qman_fq tx_unit_test_fq __devinitconst = {
+static const struct qman_fq tx_unit_test_fq = {
 	.cb = { .dqrr = tx_unit_test_dqrr, .ern = tx_unit_test_ern }
 };
 
-static struct __devinitdata dpa_fq unit_fq;
+static struct dpa_fq unit_fq;
 #ifdef CONFIG_DPA_TX_RECYCLE
 static struct dpa_fq unit_recycle_fq;
 #endif
-static bool __devinitdata tx_unit_test_ran; /* Starts as false */
+static bool tx_unit_test_ran; /* Starts as false */
 
-static int __devinit dpa_tx_unit_test(struct net_device *net_dev)
+static int dpa_tx_unit_test(struct net_device *net_dev)
 {
 	/* Create a new FQ */
 	struct dpa_priv_s *priv = netdev_priv(net_dev);
@@ -2802,13 +2802,13 @@ static void __cold dpa_timeout(struct net_device *net_dev)
 	percpu_priv->stats.tx_errors++;
 }
 
-static int __devinit dpa_bp_cmp(const void *dpa_bp0, const void *dpa_bp1)
+static int dpa_bp_cmp(const void *dpa_bp0, const void *dpa_bp1)
 {
 	return ((struct dpa_bp *)dpa_bp0)->size -
 			((struct dpa_bp *)dpa_bp1)->size;
 }
 
-static struct dpa_bp * __devinit __cold __must_check __attribute__((nonnull))
+static struct dpa_bp * __cold __must_check __attribute__((nonnull))
 dpa_bp_probe(struct platform_device *_of_dev, size_t *count)
 {
 	int			 i, lenp, na, ns;
@@ -2977,7 +2977,7 @@ static int dpa_bp_create(struct net_device *net_dev, struct dpa_bp *dpa_bp,
 	return 0;
 }
 
-static struct mac_device * __devinit __cold __must_check
+static struct mac_device * __cold __must_check
 __attribute__((nonnull))
 dpa_mac_probe(struct platform_device *_of_dev)
 {
@@ -3044,7 +3044,7 @@ dpa_mac_probe(struct platform_device *_of_dev)
 	return mac_dev;
 }
 
-static const char fsl_qman_frame_queues[][25] __devinitconst = {
+static const char fsl_qman_frame_queues[][25] = {
 	[RX] = "fsl,qman-frame-queues-rx",
 	[TX] = "fsl,qman-frame-queues-tx"
 };
@@ -3294,7 +3294,7 @@ static const struct net_device_ops dpa_shared_ops = {
 static u32 rx_pool_channel;
 static DEFINE_SPINLOCK(rx_pool_channel_init);
 
-static int __devinit dpa_get_channel(struct device *dev,
+static int dpa_get_channel(struct device *dev,
 					struct device_node *dpa_node)
 {
 	spin_lock(&rx_pool_channel_init);
@@ -3315,12 +3315,12 @@ struct fqid_cell {
 	uint32_t count;
 };
 
-static const struct fqid_cell default_fqids[][3] __devinitconst = {
+static const struct fqid_cell default_fqids[][3] = {
 	[RX] = { {0, 1}, {0, 1}, {0, DPAA_ETH_RX_QUEUES} },
 	[TX] = { {0, 1}, {0, 1}, {0, DPAA_ETH_TX_QUEUES} }
 };
 
-static const struct fqid_cell tx_confirm_fqids[] __devinitconst = {
+static const struct fqid_cell tx_confirm_fqids[] = {
 	{0, DPAA_ETH_TX_QUEUES}
 };
 
@@ -3330,7 +3330,7 @@ static const struct fqid_cell tx_recycle_fqids[] = {
 };
 #endif
 
-static int __devinit
+static int
 dpa_fq_probe(struct platform_device *_of_dev, struct list_head *list,
 		struct dpa_fq **defq, struct dpa_fq **errq,
 		struct dpa_fq **fqs, struct dpa_fq **txconfq,
@@ -3587,7 +3587,7 @@ static void dpa_setup_ingress_queues(struct dpa_priv_s *priv,
 	}
 }
 
-static void __devinit
+static void
 dpaa_eth_init_tx_port(struct fm_port *port, struct dpa_fq *errq,
 		struct dpa_fq *defq, bool has_timer)
 {
@@ -3597,7 +3597,7 @@ dpaa_eth_init_tx_port(struct fm_port *port, struct dpa_fq *errq,
 			DPA_TX_PRIV_DATA_SIZE, has_timer);
 }
 
-static void __devinit
+static void
 dpaa_eth_init_rx_port(struct fm_port *port, struct dpa_bp *bp, size_t count,
 		struct dpa_fq *errq, struct dpa_fq *defq, bool has_timer)
 {
@@ -3872,8 +3872,8 @@ out_error:
 	return err;
 }
 
-static const struct of_device_id dpa_match[] __devinitconst ;
-static int __devinit
+static const struct of_device_id dpa_match[];
+static int
 dpaa_eth_probe(struct platform_device *_of_dev)
 {
 	int err, i;
@@ -4153,7 +4153,7 @@ bp_probe_failed:
 	return err;
 }
 
-static const struct of_device_id dpa_match[] __devinitconst = {
+static const struct of_device_id dpa_match[] = {
 	{
 		.compatible	= "fsl,dpa-ethernet"
 	},
@@ -4164,7 +4164,7 @@ static const struct of_device_id dpa_match[] __devinitconst = {
 };
 MODULE_DEVICE_TABLE(of, dpa_match);
 
-static int __devexit __cold dpa_remove(struct platform_device *of_dev)
+static int __cold dpa_remove(struct platform_device *of_dev)
 {
 	int			err;
 	struct device		*dev;
@@ -4207,7 +4207,7 @@ static struct platform_driver dpa_driver = {
 		.owner		= THIS_MODULE,
 	},
 	.probe		= dpaa_eth_probe,
-	.remove		= __devexit_p(dpa_remove)
+	.remove		= dpa_remove
 };
 
 static int __init __cold dpa_load(void)
diff --git a/drivers/net/ethernet/freescale/dpa/mac-api.c b/drivers/net/ethernet/freescale/dpa/mac-api.c
index c6fe574..f28a9ec 100644
--- a/drivers/net/ethernet/freescale/dpa/mac-api.c
+++ b/drivers/net/ethernet/freescale/dpa/mac-api.c
@@ -61,19 +61,19 @@ struct mac_priv_s {
 };
 
 const char	*mac_driver_description __initconst = MAC_DESCRIPTION;
-const size_t	 mac_sizeof_priv[] __devinitconst = {
+const size_t	 mac_sizeof_priv[] = {
 	[DTSEC] = sizeof(struct mac_priv_s),
 	[XGMAC] = sizeof(struct mac_priv_s),
 	[MEMAC] = sizeof(struct mac_priv_s)
 };
 
-static const e_EnetMode _100[] __devinitconst =
+static const e_EnetMode _100[] =
 {
 	[PHY_INTERFACE_MODE_MII]	= e_ENET_MODE_MII_100,
 	[PHY_INTERFACE_MODE_RMII]	= e_ENET_MODE_RMII_100
 };
 
-static const e_EnetMode _1000[] __devinitconst =
+static const e_EnetMode _1000[] =
 {
 	[PHY_INTERFACE_MODE_GMII]	= e_ENET_MODE_GMII_1000,
 	[PHY_INTERFACE_MODE_SGMII]	= e_ENET_MODE_SGMII_1000,
@@ -85,7 +85,7 @@ static const e_EnetMode _1000[] __devinitconst =
 	[PHY_INTERFACE_MODE_RTBI]	= e_ENET_MODE_RTBI_1000
 };
 
-static e_EnetMode __devinit __cold __attribute__((nonnull))
+static e_EnetMode __cold __attribute__((nonnull))
 macdev2enetinterface(const struct mac_device *mac_dev)
 {
 	switch (mac_dev->max_speed) {
@@ -118,7 +118,7 @@ static void mac_exception(t_Handle _mac_dev, e_FmMacExceptions exception)
 		exception);
 }
 
-static int __devinit __cold init(struct mac_device *mac_dev)
+static int __cold init(struct mac_device *mac_dev)
 {
 	int					_errno;
 	t_Error				err;
@@ -243,7 +243,7 @@ _return:
 	return _errno;
 }
 
-static int __devinit __cold memac_init(struct mac_device *mac_dev)
+static int __cold memac_init(struct mac_device *mac_dev)
 {
 	int			_errno;
 	t_Error			err;
@@ -781,7 +781,7 @@ void fm_mac_dump_regs(struct mac_device *mac_dev)
 	FM_MAC_DumpRegs(mac_priv->mac);
 }
 
-static void __devinit __cold setup_dtsec(struct mac_device *mac_dev)
+static void __cold setup_dtsec(struct mac_device *mac_dev)
 {
 	mac_dev->init_phy	= dtsec_init_phy;
 	mac_dev->init		= init;
@@ -804,7 +804,7 @@ static void __devinit __cold setup_dtsec(struct mac_device *mac_dev)
 	mac_dev->fm_rtc_set_fiper	= fm_rtc_set_fiper;
 }
 
-static void __devinit __cold setup_xgmac(struct mac_device *mac_dev)
+static void __cold setup_xgmac(struct mac_device *mac_dev)
 {
 	mac_dev->init_phy	= xgmac_init_phy;
 	mac_dev->init		= init;
@@ -816,7 +816,7 @@ static void __devinit __cold setup_xgmac(struct mac_device *mac_dev)
 	mac_dev->uninit		= uninit;
 }
 
-static void __devinit __cold setup_memac(struct mac_device *mac_dev)
+static void __cold setup_memac(struct mac_device *mac_dev)
 {
 	mac_dev->init_phy	= memac_init_phy;
 	mac_dev->init		= memac_init;
@@ -836,7 +836,7 @@ static void __devinit __cold setup_memac(struct mac_device *mac_dev)
 	mac_dev->fm_rtc_set_fiper	= fm_rtc_set_fiper;
 }
 
-void (*const mac_setup[])(struct mac_device *mac_dev) __devinitconst = {
+void (*const mac_setup[])(struct mac_device *mac_dev) = {
 	[DTSEC] = setup_dtsec,
 	[XGMAC] = setup_xgmac,
 	[MEMAC] = setup_memac
diff --git a/drivers/net/ethernet/freescale/dpa/mac.c b/drivers/net/ethernet/freescale/dpa/mac.c
index 8915cf4..310b2a8 100644
--- a/drivers/net/ethernet/freescale/dpa/mac.c
+++ b/drivers/net/ethernet/freescale/dpa/mac.c
@@ -54,7 +54,7 @@
 	| SUPPORTED_Autoneg \
 	| SUPPORTED_MII)
 
-static const char phy_str[][11] __devinitconst =
+static const char phy_str[][11] =
 {
 	[PHY_INTERFACE_MODE_MII]	= "mii",
 	[PHY_INTERFACE_MODE_GMII]	= "gmii",
@@ -69,7 +69,7 @@ static const char phy_str[][11] __devinitconst =
 	[PHY_INTERFACE_MODE_XGMII]	= "xgmii"
 };
 
-static phy_interface_t __devinit __pure __attribute__((nonnull)) str2phy(const char *str)
+static phy_interface_t __pure __attribute__((nonnull)) str2phy(const char *str)
 {
 	int i;
 
@@ -80,7 +80,7 @@ static phy_interface_t __devinit __pure __attribute__((nonnull)) str2phy(const c
 	return PHY_INTERFACE_MODE_MII;
 }
 
-static const uint16_t phy2speed[] __devinitconst =
+static const uint16_t phy2speed[] =
 {
 	[PHY_INTERFACE_MODE_MII]	= SPEED_100,
 	[PHY_INTERFACE_MODE_GMII]	= SPEED_1000,
@@ -95,7 +95,7 @@ static const uint16_t phy2speed[] __devinitconst =
 	[PHY_INTERFACE_MODE_XGMII]	= SPEED_10000
 };
 
-static struct mac_device * __devinit __cold
+static struct mac_device * __cold
 alloc_macdev(struct device *dev, size_t sizeof_priv, void (*setup)(struct mac_device *mac_dev))
 {
 	struct mac_device	*mac_dev;
@@ -112,14 +112,14 @@ alloc_macdev(struct device *dev, size_t sizeof_priv, void (*setup)(struct mac_de
 	return mac_dev;
 }
 
-static int __devexit __cold free_macdev(struct mac_device *mac_dev)
+static int __cold free_macdev(struct mac_device *mac_dev)
 {
 	dev_set_drvdata(mac_dev->dev, NULL);
 
 	return mac_dev->uninit(mac_dev);
 }
 
-static const struct of_device_id mac_match[] __devinitconst = {
+static const struct of_device_id mac_match[] = {
 	[DTSEC] = {
 		.compatible	= "fsl,fman-1g-mac"
 	},
@@ -133,7 +133,7 @@ static const struct of_device_id mac_match[] __devinitconst = {
 };
 MODULE_DEVICE_TABLE(of, mac_match);
 
-static int __devinit __cold mac_probe(struct platform_device *_of_dev)
+static int __cold mac_probe(struct platform_device *_of_dev)
 {
 	int			 _errno, i, lenp;
 	struct device		*dev;
@@ -370,7 +370,7 @@ _return:
 	return _errno;
 }
 
-static int __devexit __cold mac_remove(struct platform_device *of_dev)
+static int __cold mac_remove(struct platform_device *of_dev)
 {
 	int			 i, _errno;
 	struct device		*dev;
@@ -396,7 +396,7 @@ static struct platform_driver mac_driver = {
 		.owner		= THIS_MODULE,
 	},
 	.probe		= mac_probe,
-	.remove		= __devexit_p(mac_remove)
+	.remove		= mac_remove
 };
 
 static int __init __cold mac_load(void)
diff --git a/drivers/net/ethernet/freescale/dpa/offline_port.c b/drivers/net/ethernet/freescale/dpa/offline_port.c
index 691cd48..434d9cf 100644
--- a/drivers/net/ethernet/freescale/dpa/offline_port.c
+++ b/drivers/net/ethernet/freescale/dpa/offline_port.c
@@ -53,7 +53,7 @@ MODULE_AUTHOR("Bogdan Hamciuc <bogdan.hamciuc@freescale.com>");
 MODULE_DESCRIPTION(OH_MOD_DESCRIPTION);
 
 
-static const struct of_device_id oh_port_match_table[] __devinitconst = {
+static const struct of_device_id oh_port_match_table[] = {
 	{
 		.compatible	= "fsl,dpa-oh"
 	},
@@ -74,11 +74,11 @@ static struct platform_driver oh_port_driver = {
 		.owner		= THIS_MODULE,
 	},
 	.probe		= oh_port_probe,
-	.remove		= __devexit_p(oh_port_remove)
+	.remove		= oh_port_remove
 };
 
 /* Allocation code for the OH port's PCD frame queues */
-static int __devinit __cold oh_alloc_pcd_fqids(struct device *dev,
+static int __cold oh_alloc_pcd_fqids(struct device *dev,
 	uint32_t num,
 	uint8_t alignment,
 	uint32_t *base_fqid)
@@ -89,7 +89,7 @@ static int __devinit __cold oh_alloc_pcd_fqids(struct device *dev,
 	return 0;
 }
 
-static int __devinit __cold oh_free_pcd_fqids(struct device *dev, uint32_t base_fqid)
+static int __cold oh_free_pcd_fqids(struct device *dev, uint32_t base_fqid)
 {
 	dev_crit(dev, "callback not implemented!\n");
 	BUG();
@@ -97,7 +97,7 @@ static int __devinit __cold oh_free_pcd_fqids(struct device *dev, uint32_t base_
 	return 0;
 }
 
-static int __devinit
+static int
 oh_port_probe(struct platform_device *_of_dev)
 {
 	struct device		*dpa_oh_dev;
@@ -286,7 +286,7 @@ return_kfree:
 	return _errno;
 }
 
-static int __devexit __cold oh_port_remove(struct platform_device *_of_dev)
+static int __cold oh_port_remove(struct platform_device *_of_dev)
 {
 	int _errno = 0;
 	struct dpa_oh_config_s *oh_config;
-- 
1.8.4.93.g57e4c17

