From 2a029012001d80924eaef59ad4466e38520892f6 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Fri, 8 Mar 2013 09:16:38 +0800
Subject: [PATCH 530/547] powerpc/e6500: fix the relocatable bug in the
 workaround for erratum A-006198

When building a relocatable kernel, the LOAD_REG_IMMEDIATE can't be
used to load a function address. And these macros are also invoked
before relocation. That means we also can't use LOAD_REG_ADDR here.
So replace them with position-independent code.

Since we always set the MCSRR0 to the address of function
fsl_erratum_a006198_return, there is no need to restore it.
So just drop it.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 arch/powerpc/include/asm/ppc_asm.h | 44 ++++++++++++++++++++++----------------
 1 file changed, 26 insertions(+), 18 deletions(-)

diff --git a/arch/powerpc/include/asm/ppc_asm.h b/arch/powerpc/include/asm/ppc_asm.h
index c8200e6..b6c71f7 100644
--- a/arch/powerpc/include/asm/ppc_asm.h
+++ b/arch/powerpc/include/asm/ppc_asm.h
@@ -844,17 +844,24 @@ END_FTR_SECTION_NESTED(CPU_FTR_HAS_PPR,CPU_FTR_HAS_PPR,946)
 #define N_SLINE	68
 #define N_SO	100
 
+/*
+ * In 'addi' instruction, the r0 means the value 0 instread of register r0.
+ * So please don't use r0 as the scratch2.
+ */
 .macro fsl_erratum_a006198_mtmsr newmsr scratch1 scratch2
 #ifdef CONFIG_FSL_ERRATUM_A_006198
-	mflr	\scratch2
-	LOAD_REG_IMMEDIATE(\scratch1, 237f)
-	mtlr	\scratch1
-	LOAD_REG_IMMEDIATE(\scratch1, .fsl_erratum_a006198_return)
+	mflr	\scratch1
+	bl	236f
+236:	mflr	\scratch2
+	addi	\scratch2, \scratch2, (237f - 236b)
+	mtlr	\scratch2
+	addis	\scratch2, \scratch2, (.fsl_erratum_a006198_return - 237f)@ha
+	addi	\scratch2, \scratch2, (.fsl_erratum_a006198_return - 237f)@l
 	mtspr	SPRN_MCSRR1, \newmsr
-	mtspr	SPRN_MCSRR0, \scratch1
+	mtspr	SPRN_MCSRR0, \scratch2
 	rfmci
 237:	mtmsr	\newmsr
-	mtlr	\scratch2
+	mtlr	\scratch1
 #else
 	mtmsr	\newmsr
 #endif
@@ -862,17 +869,20 @@ END_FTR_SECTION_NESTED(CPU_FTR_HAS_PPR,CPU_FTR_HAS_PPR,946)
 
 .macro fsl_erratum_a006198_wrteei0 scratch1 scratch2
 #ifdef CONFIG_FSL_ERRATUM_A_006198
-	mflr	\scratch2
-	LOAD_REG_IMMEDIATE(\scratch1, 237f)
-	mtlr	\scratch1
-	LOAD_REG_IMMEDIATE(\scratch1, .fsl_erratum_a006198_return)
-	mtspr	SPRN_MCSRR0, \scratch1
-	mfmsr	\scratch1
-	rlwinm	\scratch1, \scratch1, 0, ~MSR_EE
-	mtspr	SPRN_MCSRR1, \scratch1
-	rfmci
-237:	mtmsr	\scratch1
+	mflr	\scratch1
+	bl	236f
+236:	mflr	\scratch2
+	addi	\scratch2, \scratch2, (237f - 236b)
 	mtlr	\scratch2
+	addis	\scratch2, \scratch2, (.fsl_erratum_a006198_return - 237f)@ha
+	addi	\scratch2, \scratch2, (.fsl_erratum_a006198_return - 237f)@l
+	mtspr	SPRN_MCSRR0, \scratch2
+	mfmsr	\scratch2
+	rlwinm	\scratch2, \scratch2, 0, ~MSR_EE
+	mtspr	SPRN_MCSRR1, \scratch2
+	rfmci
+237:	mtmsr	\scratch2
+	mtlr	\scratch1
 #else
 	wrteei	0
 #endif
@@ -880,8 +890,6 @@ END_FTR_SECTION_NESTED(CPU_FTR_HAS_PPR,CPU_FTR_HAS_PPR,946)
 
 .macro fsl_erratum_a006198_restore_srr scratch
 #ifdef CONFIG_FSL_ERRATUM_A_006198
-	LOAD_REG_IMMEDIATE(\scratch, .fsl_erratum_a006198_return)
-	mtspr	SPRN_MCSRR0, \scratch
 	lis	\scratch, MSR_CM@h
 	mtspr	SPRN_MCSRR1, \scratch
 #endif
-- 
1.8.4.93.g57e4c17

