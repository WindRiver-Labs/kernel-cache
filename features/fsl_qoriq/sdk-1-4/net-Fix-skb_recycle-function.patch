From 11a2f80ccb61caf8da317faa8145da576946dc90 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Tue, 23 Apr 2013 17:31:34 +0000
Subject: [PATCH 101/430] net: Fix skb_recycle function

skb_recycle memsets to zero a large part of the sk_buff structure,
including the head_frag field. This is an information that needs to
be kept even after the skb is recycled, otherwise a subseqent kfree
on the recycled skb may fail.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Change-Id: Ieca806d86ff1e1f30712cc7caf9b72f152081e4f
Reviewed-on: http://git.am.freescale.net:8181/1744
Reviewed-by: Hamciuc Bogdan-BHAMCIU1 <bogdan.hamciuc@freescale.com>
Reviewed-by: Bucur Madalin-Cristian-B32716 <madalin.bucur@freescale.com>
Reviewed-by: Sovaiala Cristian-Constantin-B39531 <Cristian.Sovaiala@freescale.com>
Reviewed-by: Manoil Claudiu-B08782 <claudiu.manoil@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
[original patch is from QorIQ-SDK-V1.4-20130625-yocto]
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c |    6 +++++-
 net/core/skbuff.c                             |    2 ++
 2 files changed, 7 insertions(+), 1 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index c5d52b3..c1deb47 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -2145,7 +2145,11 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 
 	if (fd.cmd & FM_FD_CMD_FCO) {
 		/* This skb is recycleable, and the fd generated from it
-		 * has been filled in accordingly */
+		 * has been filled in accordingly.
+		 * NOTE: The recycling mechanism is fragile and dependant on
+		 * upstream changes. It will be maintained for now, but plans
+		 * are to remove it altoghether from the driver.
+		 */
 		skb_recycle(skb);
 		skb = NULL;
 		(*percpu_priv->dpa_bp_count)++;
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 881f3fc..072b3e2 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -554,6 +554,7 @@ EXPORT_SYMBOL(consume_skb);
 void skb_recycle(struct sk_buff *skb)
 {
 	struct skb_shared_info *shinfo;
+	u8 head_frag = skb->head_frag;
 
 	skb_release_head_state(skb);
 
@@ -563,6 +564,7 @@ void skb_recycle(struct sk_buff *skb)
 
 	memset(skb, 0, offsetof(struct sk_buff, tail));
 	skb->data = skb->head + NET_SKB_PAD;
+	skb->head_frag = head_frag;
 	skb_reset_tail_pointer(skb);
 }
 EXPORT_SYMBOL(skb_recycle);
-- 
1.7.5.4

