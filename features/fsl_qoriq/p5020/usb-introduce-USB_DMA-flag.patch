From 0c1864437de7d1bc5668f8575bca2e3ac5329328 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Mon, 16 Jul 2012 14:32:53 +0800
Subject: [PATCH 17/19] usb: introduce USB_DMA flag

On some platforms such as ppc64 some devices can't perform dma
using all the system memory. So we should add the GFP_DMA flag for
all the memory allocations which will be used for DMA in usb core
for these platforms. Introduce USB_DMA flag to fix this issue.
Currently only PPC64 is involved, and have no effect for other
architectures.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/usb/core/config.c      |    4 ++--
 drivers/usb/core/hub.c         |    4 ++--
 drivers/usb/core/message.c     |    8 ++++----
 drivers/usb/gadget/composite.c |    2 +-
 include/linux/usb/ch9.h        |   10 ++++++++++
 5 files changed, 19 insertions(+), 9 deletions(-)

diff --git a/drivers/usb/core/config.c b/drivers/usb/core/config.c
index f4bdd0c..222e76e 100644
--- a/drivers/usb/core/config.c
+++ b/drivers/usb/core/config.c
@@ -689,7 +689,7 @@ int usb_get_configuration(struct usb_device *dev)
 	if (!dev->rawdescriptors)
 		goto err2;
 
-	desc = kmalloc(USB_DT_CONFIG_SIZE, GFP_KERNEL);
+	desc = kmalloc(USB_DT_CONFIG_SIZE, GFP_KERNEL | USB_DMA);
 	if (!desc)
 		goto err2;
 
@@ -716,7 +716,7 @@ int usb_get_configuration(struct usb_device *dev)
 		    USB_DT_CONFIG_SIZE);
 
 		/* Now that we know the length, get the whole thing */
-		bigbuffer = kmalloc(length, GFP_KERNEL);
+		bigbuffer = kmalloc(length, GFP_KERNEL | USB_DMA);
 		if (!bigbuffer) {
 			result = -ENOMEM;
 			goto err;
diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index e727b87..799141c 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -3071,7 +3071,7 @@ hub_port_init (struct usb_hub *hub, struct usb_device *udev, int port1,
 			int r = 0;
 
 #define GET_DESCRIPTOR_BUFSIZE	64
-			buf = kmalloc(GET_DESCRIPTOR_BUFSIZE, GFP_NOIO);
+			buf = kmalloc(GET_DESCRIPTOR_BUFSIZE, GFP_NOIO| USB_DMA);
 			if (!buf) {
 				retval = -ENOMEM;
 				continue;
@@ -3933,7 +3933,7 @@ static int descriptors_changed(struct usb_device *udev,
 		len = max(len, old_length);
 	}
 
-	buf = kmalloc(len, GFP_NOIO);
+	buf = kmalloc(len, GFP_NOIO | USB_DMA);
 	if (buf == NULL) {
 		dev_err(&udev->dev, "no mem to re-read configs after reset\n");
 		/* assume the worst */
diff --git a/drivers/usb/core/message.c b/drivers/usb/core/message.c
index ef116a5..35a46ba 100644
--- a/drivers/usb/core/message.c
+++ b/drivers/usb/core/message.c
@@ -136,7 +136,7 @@ int usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request,
 	struct usb_ctrlrequest *dr;
 	int ret;
 
-	dr = kmalloc(sizeof(struct usb_ctrlrequest), GFP_NOIO);
+	dr = kmalloc(sizeof(struct usb_ctrlrequest), GFP_NOIO | USB_DMA);
 	if (!dr)
 		return -ENOMEM;
 
@@ -819,7 +819,7 @@ int usb_string(struct usb_device *dev, int index, char *buf, size_t size)
 	if (size <= 0 || !buf || !index)
 		return -EINVAL;
 	buf[0] = 0;
-	tbuf = kmalloc(256, GFP_NOIO);
+	tbuf = kmalloc(256, GFP_NOIO | USB_DMA);
 	if (!tbuf)
 		return -ENOMEM;
 
@@ -867,7 +867,7 @@ char *usb_cache_string(struct usb_device *udev, int index)
 	if (index <= 0)
 		return NULL;
 
-	buf = kmalloc(MAX_USB_STRING_SIZE, GFP_NOIO);
+	buf = kmalloc(MAX_USB_STRING_SIZE, GFP_NOIO | USB_DMA);
 	if (buf) {
 		len = usb_string(udev, index, buf, MAX_USB_STRING_SIZE);
 		if (len > 0) {
@@ -906,7 +906,7 @@ int usb_get_device_descriptor(struct usb_device *dev, unsigned int size)
 
 	if (size > sizeof(*desc))
 		return -EINVAL;
-	desc = kmalloc(sizeof(*desc), GFP_NOIO);
+	desc = kmalloc(sizeof(*desc), GFP_NOIO | USB_DMA);
 	if (!desc)
 		return -ENOMEM;
 
diff --git a/drivers/usb/gadget/composite.c b/drivers/usb/gadget/composite.c
index baaebf2..9336569 100644
--- a/drivers/usb/gadget/composite.c
+++ b/drivers/usb/gadget/composite.c
@@ -1395,7 +1395,7 @@ static int composite_bind(struct usb_gadget *gadget)
 	cdev->req = usb_ep_alloc_request(gadget->ep0, GFP_KERNEL);
 	if (!cdev->req)
 		goto fail;
-	cdev->req->buf = kmalloc(USB_BUFSIZ, GFP_KERNEL);
+	cdev->req->buf = kmalloc(USB_BUFSIZ, GFP_KERNEL | USB_DMA);
 	if (!cdev->req->buf)
 		goto fail;
 	cdev->req->complete = composite_setup_complete;
diff --git a/include/linux/usb/ch9.h b/include/linux/usb/ch9.h
index af21f31..310a6b3 100644
--- a/include/linux/usb/ch9.h
+++ b/include/linux/usb/ch9.h
@@ -36,6 +36,16 @@
 #include <linux/types.h>	/* __u8 etc */
 #include <asm/byteorder.h>	/* le16_to_cpu */
 
+/*
+ * For some platforms, we do need to set the GFP_DMA for the memory
+ * allocation which will be used for DMA operation.
+ */
+#ifdef CONFIG_PPC64
+#define USB_DMA	GFP_DMA
+#else
+#define USB_DMA	0
+#endif
+
 /*-------------------------------------------------------------------------*/
 
 /* CONTROL REQUEST SUPPORT */
-- 
1.7.9.7

