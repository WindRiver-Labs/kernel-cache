From 3c647b8cccec5966459c58b48b81b907df682723 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Thu, 21 Mar 2013 15:17:46 +0800
Subject: [PATCH 1/3] powerpc/fsl_book3e: add the support to online/offline a secondary thread separately

In the currently implementation we can only offline all the threads
in a core completely and then online them sequentially. We can't do
as the following:
  offline cpu3(thread1 on core1)
  online cpu3

We can fix this limitation easily by invoking fsl_enable_threads
on the thread0 of the same core.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/powerpc/platforms/85xx/smp.c |   38 ++++++++++++++++++++++++++++--------
 1 files changed, 29 insertions(+), 9 deletions(-)

diff --git a/arch/powerpc/platforms/85xx/smp.c b/arch/powerpc/platforms/85xx/smp.c
index 01b842b..ca9953b 100644
--- a/arch/powerpc/platforms/85xx/smp.c
+++ b/arch/powerpc/platforms/85xx/smp.c
@@ -266,6 +266,32 @@ static inline u32 read_spin_table_addr_l(void *spin_table)
 	return in_be32(&((struct epapr_spin_table *)spin_table)->addr_l);
 }
 
+static int __cpuinit smp_85xx_kick_secondary_thread(int nr)
+{
+	cpumask_var_t saved_mask;
+
+	/*
+	 * In cpu hotplug case, Thread 1 must start by calling
+	 * fsl_enable_threads() by the thread0 on the same core.
+	 */
+	if (system_state == SYSTEM_BOOTING)
+		return 0;
+
+	if (!alloc_cpumask_var(&saved_mask, GFP_KERNEL))
+		return -ENOMEM;
+
+	cpumask_copy(saved_mask, &current->cpus_allowed);
+	if (set_cpus_allowed_ptr(current,
+		cpumask_of(cpu_first_thread_sibling(nr)))) {
+		free_cpumask_var(saved_mask);
+		return -ENOENT;
+	}
+	fsl_enable_threads();
+	set_cpus_allowed_ptr(current, saved_mask);
+	free_cpumask_var(saved_mask);
+	return 0;
+}
+
 static int __cpuinit smp_85xx_kick_cpu(int nr)
 
 {
@@ -300,16 +326,10 @@ static int __cpuinit smp_85xx_kick_cpu(int nr)
 		 */
 		if (cpu_online(cpu_first_thread_sibling(nr))) {
 
-			local_irq_save(flags);
-			/*
-			 * In cpu hotplug case, Thread 1 of Core 0 must
-			 * start by calling fsl_enable_threads(). Thread 1
-			 * of other cores can be started by Thread 0
-			 * after reset.
-			 */
-			if (nr == 1 && system_state == SYSTEM_RUNNING)
-				fsl_enable_threads();
+			if (smp_85xx_kick_secondary_thread(nr))
+				return -ENOENT;
 
+			local_irq_save(flags);
 			smp_generic_kick_cpu(nr);
 
 			generic_set_cpu_up(nr);
-- 
1.7.0

