From f844ee9ac1a19205538d4c22168ba7bc81f03947 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@nxp.com>
Date: Mon, 4 Jul 2016 18:57:22 +0300
Subject: [PATCH 258/388] staging: fsl-dpaa2/eth: Enable Tx timestamp per-frame

Only instruct the hardware to update timestamp for the Tx frames
marked accordingly by the stack. Until now all transmitted frames
were hardware-timestamped, which had a ~5% impact on performance
in some scenarios.

Starting with MC version 9.0.8, the setting is no longer enabled
per-IFP, leaving the driver responsible for enabling Tx timestamping
when necessary. Rx timestamping is unchanged by this patch.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c | 35 +++++++++++++++++++++++---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h | 12 +++++++++
 2 files changed, 44 insertions(+), 3 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 27d1a91..7f7cc33 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -362,6 +362,25 @@ static int consume_frames(struct dpaa2_eth_channel *ch)
 	return cleaned;
 }
 
+/* Configure the egress frame annotation for timestamp update */
+static void enable_tx_tstamp(struct dpaa2_fd *fd, void *hwa_start)
+{
+	struct dpaa2_faead *faead;
+	u32 ctrl;
+	u32 frc;
+
+	/* Mark the egress frame annotation area as valid */
+	frc = dpaa2_fd_get_frc(fd);
+	dpaa2_fd_set_frc(fd, frc | DPAA2_FD_FRC_FAEADV);
+
+	/* enable UPD (update prepanded data) bit in FAEAD field of
+	 * hardware frame annotation area
+	 */
+	ctrl = DPAA2_FAEAD_A2V | DPAA2_FAEAD_UPDV | DPAA2_FAEAD_UPD;
+	faead = hwa_start + DPAA2_FAEAD_OFFSET;
+	faead->ctrl = cpu_to_le32(ctrl);
+}
+
 /* Create a frame descriptor based on a fragmented skb */
 static int build_sg_fd(struct dpaa2_eth_priv *priv,
 		       struct sk_buff *skb,
@@ -369,6 +388,7 @@ static int build_sg_fd(struct dpaa2_eth_priv *priv,
 {
 	struct device *dev = priv->net_dev->dev.parent;
 	void *sgt_buf = NULL;
+	void *hwa;
 	dma_addr_t addr;
 	int nr_frags = skb_shinfo(skb)->nr_frags;
 	struct dpaa2_sg_entry *sgt;
@@ -414,7 +434,8 @@ static int build_sg_fd(struct dpaa2_eth_priv *priv,
 	 * on TX confirmation. We are clearing FAS (Frame Annotation Status)
 	 * field here.
 	 */
-	memset(sgt_buf + priv->buf_layout.private_data_size, 0, 8);
+	hwa = sgt_buf + priv->buf_layout.private_data_size;
+	memset(hwa, 0, 8);
 
 	sgt = (struct dpaa2_sg_entry *)(sgt_buf + priv->tx_data_offset);
 
@@ -459,6 +480,9 @@ static int build_sg_fd(struct dpaa2_eth_priv *priv,
 	fd->simple.ctrl = DPAA2_FD_CTRL_ASAL | DPAA2_FD_CTRL_PTA |
 			  DPAA2_FD_CTRL_PTV1;
 
+	if (priv->ts_tx_en && skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP)
+		enable_tx_tstamp(fd, hwa);
+
 	return 0;
 
 dma_map_single_failed:
@@ -479,6 +503,7 @@ static int build_single_fd(struct dpaa2_eth_priv *priv,
 	u8 *buffer_start;
 	struct sk_buff **skbh;
 	dma_addr_t addr;
+	void *hwa;
 
 	buffer_start = PTR_ALIGN(skb->data - priv->tx_data_offset -
 				 DPAA2_ETH_TX_BUF_ALIGN,
@@ -487,9 +512,10 @@ static int build_single_fd(struct dpaa2_eth_priv *priv,
 	/* PTA from egress side is passed as is to the confirmation side so
 	 * we need to clear some fields here in order to find consistent values
 	 * on TX confirmation. We are clearing FAS (Frame Annotation Status)
-	 * field here.
+	 * field here
 	 */
-	memset(buffer_start + priv->buf_layout.private_data_size, 0, 8);
+	hwa = buffer_start + priv->buf_layout.private_data_size;
+	memset(hwa, 0, 8);
 
 	/* Store a backpointer to the skb at the beginning of the buffer
 	 * (in the private data area) such that we can release it
@@ -512,6 +538,9 @@ static int build_single_fd(struct dpaa2_eth_priv *priv,
 	fd->simple.ctrl = DPAA2_FD_CTRL_ASAL | DPAA2_FD_CTRL_PTA |
 			  DPAA2_FD_CTRL_PTV1;
 
+	if (priv->ts_tx_en && skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP)
+		enable_tx_tstamp(fd, hwa);
+
 	return 0;
 }
 
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index ea8d65d..04c066e 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -138,6 +138,18 @@ struct dpaa2_fas {
 	__le32 status;
 } __packed;
 
+/* Frame annotation egress action descriptor */
+#define DPAA2_FAEAD_OFFSET		0x58
+
+struct dpaa2_faead {
+	__le32 conf_fqid;
+	__le32 ctrl;
+};
+
+#define DPAA2_FAEAD_A2V			0x20000000
+#define DPAA2_FAEAD_UPDV		0x00001000
+#define DPAA2_FAEAD_UPD			0x00000010
+
 /* Error and status bits in the frame annotation status word */
 /* Debug frame, otherwise supposed to be discarded */
 #define DPAA2_FAS_DISC			0x80000000
-- 
2.9.3

