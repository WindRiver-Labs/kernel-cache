From 8f2f2934825304c3db4b951783e39fa652d3b4b3 Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@nxp.com>
Date: Tue, 23 Aug 2016 18:12:44 +0300
Subject: [PATCH 122/388] fsl_qman: use original dq in
 qm_dqrr_cdc_consume_1ptr()

Signed-off-by: Madalin Bucur <madalin.bucur@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 3ffb431..06b8e35 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -1163,6 +1163,7 @@ static inline unsigned int __poll_portal_fast(struct qman_portal *p,
 	unsigned int limit = 0;
 #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	struct qm_dqrr_entry *shadow;
+	const struct qm_dqrr_entry *orig_dq;
 #endif
 loop:
 	qm_dqrr_pvb_update(&p->p);
@@ -1176,6 +1177,7 @@ loop:
 	   copied and the index stored within the copy */
 	shadow = &p->shadow_dqrr[DQRR_PTR2IDX(dq)];
 	*shadow = *dq;
+	orig_dq = dq;
 	dq = shadow;
 	shadow->fqid = be32_to_cpu(shadow->fqid);
 	shadow->contextB = be32_to_cpu(shadow->contextB);
@@ -1222,9 +1224,15 @@ loop:
 	 * check for HELDACTIVE to cover both. */
 	DPA_ASSERT((dq->stat & QM_DQRR_STAT_FQ_HELDACTIVE) ||
 		(res != qman_cb_dqrr_park));
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+	if (res != qman_cb_dqrr_defer)
+		qm_dqrr_cdc_consume_1ptr(&p->p, orig_dq,
+					 (res == qman_cb_dqrr_park));
+#else
 	/* Defer just means "skip it, I'll consume it myself later on" */
 	if (res != qman_cb_dqrr_defer)
 		qm_dqrr_cdc_consume_1ptr(&p->p, dq, (res == qman_cb_dqrr_park));
+#endif
 	/* Move forward */
 	qm_dqrr_next(&p->p);
 	/* Entry processed and consumed, increment our counter. The callback can
-- 
2.9.3

