From 459f5c66dbd816e65f81698c930e4fd97b01d4f1 Mon Sep 17 00:00:00 2001
From: Ahmed Mansour <Ahmed.Mansour@nxp.com>
Date: Tue, 7 Jun 2016 12:59:13 -0400
Subject: [PATCH 025/388] dpio/qbman: fix discrete consumption

Corrected discrete consumption code so that it accommodate the new
larger DQRR size in QMan 4.1.x

JIRA issue#: QLINUX-5645

Signed-off-by: Ahmed Mansour <Ahmed.Mansour@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/qbman_portal.c | 12 +++++++++---
 drivers/staging/fsl-mc/bus/dpio/qbman_portal.h |  3 +--
 2 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
index 6c5638b..e77bbd2 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
@@ -79,6 +79,7 @@ struct qb_attr_code code_generic_rslt = QB_CODE(0, 8, 8);
 struct qb_attr_code code_sdqcr_dct = QB_CODE(0, 24, 2);
 struct qb_attr_code code_sdqcr_fc = QB_CODE(0, 29, 1);
 struct qb_attr_code code_sdqcr_tok = QB_CODE(0, 16, 8);
+static struct qb_attr_code code_eq_dca_idx;
 #define CODE_SDQCR_DQSRC(n) QB_CODE(0, n, 1)
 enum qbman_sdqcr_dct {
 	qbman_sdqcr_dct_null = 0,
@@ -137,10 +138,15 @@ struct qbman_swp *qbman_swp_init(const struct qbman_swp_desc *d)
 #ifdef WORKAROUND_DQRR_RESET_BUG
 	p->dqrr.reset_bug = 1;
 #endif
-	if ((p->desc->qman_version & 0xFFFF0000) < QMAN_REV_4100)
+	if ((p->desc->qman_version & 0xFFFF0000) < QMAN_REV_4100) {
 		p->dqrr.dqrr_size = 4;
-	else
+		/* Set size of DQRR to 4, encoded in 2 bits */
+		code_eq_dca_idx = (struct qb_attr_code)QB_CODE(0, 8, 2);
+	} else {
 		p->dqrr.dqrr_size = 8;
+		/* Set size of DQRR to 8, encoded in 3 bits */
+		code_eq_dca_idx = (struct qb_attr_code)QB_CODE(0, 8, 3);
+	}
 	ret = qbman_swp_sys_init(&p->sys, d, p->dqrr.dqrr_size);
 	if (ret) {
 		kfree(p);
@@ -282,8 +288,8 @@ static struct qb_attr_code code_eq_cmd = QB_CODE(0, 0, 2);
 static struct qb_attr_code code_eq_eqdi = QB_CODE(0, 3, 1);
 static struct qb_attr_code code_eq_dca_en = QB_CODE(0, 15, 1);
 static struct qb_attr_code code_eq_dca_pk = QB_CODE(0, 14, 1);
-static struct qb_attr_code code_eq_dca_idx = QB_CODE(0, 8, 2);
 static struct qb_attr_code code_eq_orp_en = QB_CODE(0, 2, 1);
+/* Can't set code_eq_dca_idx width. Need qman version. Read at runtime */
 static struct qb_attr_code code_eq_orp_is_nesn = QB_CODE(0, 31, 1);
 static struct qb_attr_code code_eq_orp_nlis = QB_CODE(0, 30, 1);
 static struct qb_attr_code code_eq_orp_seqnum = QB_CODE(0, 16, 14);
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h
index 65ebf3f..2db2b05 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h
@@ -39,8 +39,7 @@
 /* Management command result codes */
 #define QBMAN_MC_RSLT_OK      0xf0
 
-/* TBD: as of QBMan 4.1, DQRR will be 8 rather than 4! */
-#define QBMAN_DQRR_SIZE 4
+/* QBMan DQRR size is set at runtime in qbman_portal.c */
 
 /* DQRR valid-bit reset bug. See qbman_portal.c::qbman_swp_init(). */
 #define WORKAROUND_DQRR_RESET_BUG
-- 
2.9.3

