From 2a5da37bc0c562520715ab081eb8ccb3f7387afa Mon Sep 17 00:00:00 2001
From: Roy Pledge <roy.pledge@nxp.com>
Date: Mon, 26 Sep 2016 12:03:37 -0400
Subject: [PATCH 127/388] fsl_qbman: Don't use cacheline zero operation on ARM

Using the 'dc zva' operation on ARM causes a read from the
backing store even though the reult is discarded. This has
a negative effect on the performance of QBMan when running
on an ARM core.

Signed-off-by: Roy Pledge <roy.pledge@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_qbman/bman_low.h | 6 ++++++
 drivers/staging/fsl_qbman/qman_low.h | 8 ++++++++
 2 files changed, 14 insertions(+)

diff --git a/drivers/staging/fsl_qbman/bman_low.h b/drivers/staging/fsl_qbman/bman_low.h
index 94132a0..3da7057 100644
--- a/drivers/staging/fsl_qbman/bman_low.h
+++ b/drivers/staging/fsl_qbman/bman_low.h
@@ -262,7 +262,9 @@ static inline struct bm_rcr_entry *bm_rcr_start(struct bm_portal *portal)
 #ifdef CONFIG_FSL_DPA_CHECKING
 	rcr->busy = 1;
 #endif
+#if defined(CONFIG_PPC32) || defined(CONFIG_PPC64)
 	dcbz_64(rcr->cursor);
+#endif
 	return rcr->cursor;
 }
 
@@ -287,7 +289,9 @@ static inline struct bm_rcr_entry *bm_rcr_pend_and_next(
 	dcbf_64(rcr->cursor);
 	RCR_INC(rcr);
 	rcr->available--;
+#if defined(CONFIG_PPC32) || defined(CONFIG_PPC64)
 	dcbz_64(rcr->cursor);
+#endif
 	return rcr->cursor;
 }
 
@@ -436,7 +440,9 @@ static inline struct bm_mc_command *bm_mc_start(struct bm_portal *portal)
 #ifdef CONFIG_FSL_DPA_CHECKING
 	mc->state = mc_user;
 #endif
+#if defined(CONFIG_PPC32) || defined(CONFIG_PPC64)
 	dcbz_64(mc->cr);
+#endif
 	return mc->cr;
 }
 
diff --git a/drivers/staging/fsl_qbman/qman_low.h b/drivers/staging/fsl_qbman/qman_low.h
index 8b1ac37..135ff87 100644
--- a/drivers/staging/fsl_qbman/qman_low.h
+++ b/drivers/staging/fsl_qbman/qman_low.h
@@ -381,7 +381,9 @@ static inline struct qm_eqcr_entry *qm_eqcr_start_no_stash(struct qm_portal
 #ifdef CONFIG_FSL_DPA_CHECKING
 	eqcr->busy = 1;
 #endif
+#if defined(CONFIG_PPC32) || defined(CONFIG_PPC64)
 	dcbz_64(eqcr->cursor);
+#endif
 	return eqcr->cursor;
 }
 
@@ -403,7 +405,9 @@ static inline struct qm_eqcr_entry *qm_eqcr_start_stash(struct qm_portal
 #ifdef CONFIG_FSL_DPA_CHECKING
 	eqcr->busy = 1;
 #endif
+#if defined(CONFIG_PPC32) || defined(CONFIG_PPC64)
 	dcbz_64(eqcr->cursor);
+#endif
 	return eqcr->cursor;
 }
 
@@ -428,7 +432,9 @@ static inline struct qm_eqcr_entry *qm_eqcr_pend_and_next(
 	dcbf(eqcr->cursor);
 	EQCR_INC(eqcr);
 	eqcr->available--;
+#if defined(CONFIG_PPC32) || defined(CONFIG_PPC64)
 	dcbz_64(eqcr->cursor);
+#endif
 	return eqcr->cursor;
 }
 
@@ -1116,7 +1122,9 @@ static inline struct qm_mc_command *qm_mc_start(struct qm_portal *portal)
 #ifdef CONFIG_FSL_DPA_CHECKING
 	mc->state = qman_mc_user;
 #endif
+#if defined(CONFIG_PPC32) || defined(CONFIG_PPC64)
 	dcbz_64(mc->cr);
+#endif
 	return mc->cr;
 }
 
-- 
2.9.3

