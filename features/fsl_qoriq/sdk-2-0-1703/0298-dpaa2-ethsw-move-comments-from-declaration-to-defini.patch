From a0cb69f91799c8b07cb740a128158f1f35203953 Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@nxp.com>
Date: Tue, 1 Nov 2016 11:16:29 +0200
Subject: [PATCH 298/388] dpaa2-ethsw: move comments from declaration to
 definition

Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethsw/dpsw.c | 934 ++++++++++++++++++++++++++++++++-
 drivers/staging/fsl-dpaa2/ethsw/dpsw.h | 897 -------------------------------
 2 files changed, 916 insertions(+), 915 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
index 69e35c4..f182f6f 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
@@ -74,7 +74,23 @@ static int read_if_id_bitmap(u16 *if_id,
 	return 0;
 }
 
-/* DPSW APIs */
+/**
+ * dpsw_open() - Open a control session for the specified object
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @dpsw_id:	DPSW unique ID
+ * @token:	Returned token; use in subsequent API calls
+ *
+ * This function can be used to open a control session for an
+ * already created object; an object may have been declared in
+ * the DPL or by calling the dpsw_create() function.
+ * This function returns a unique authentication token,
+ * associated with the specific object ID and the specific MC
+ * portal; this token must be used in all subsequent commands for
+ * this specific object
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_open(struct fsl_mc_io *mc_io,
 	      u32 cmd_flags,
 	      int dpsw_id,
@@ -100,6 +116,17 @@ int dpsw_open(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_close() - Close the control session of the object
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ *
+ * After this function is called, no further operations are
+ * allowed on the object without opening a new control session.
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_close(struct fsl_mc_io *mc_io,
 	       u32 cmd_flags,
 	u16 token)
@@ -115,11 +142,33 @@ int dpsw_close(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpsw_create(struct fsl_mc_io *mc_io,
-		u16 dprc_token,
-		u32 cmd_flags,
-		const struct dpsw_cfg *cfg,
-		u32 *obj_id)
+/**
+ * dpsw_create() - Create the DPSW object.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token:	Parent container token; '0' for default container
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @cfg:	Configuration structure
+ * @obj_id: returned object id
+ *
+ * Create the DPSW object, allocate required resources and
+ * perform required initialization.
+ *
+ * The object can be created either by declaring it in the
+ * DPL file, or by calling this function.
+ *
+ * The function accepts an authentication token of a parent
+ * container that this object should be assigned to. The token
+ * can be '0' so the object will be assigned to the default container.
+ * The newly created object can be opened with the returned
+ * object id and using the container's associated tokens and MC portals.
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
+int dpsw_create(struct fsl_mc_io	*mc_io,
+		u16	dprc_token,
+		u32	cmd_flags,
+		const struct dpsw_cfg	*cfg,
+		u32	*obj_id)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -141,10 +190,25 @@ int dpsw_create(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
-int dpsw_destroy(struct fsl_mc_io *mc_io,
-		 u16 dprc_token
-		 u32 cmd_flags,
-		 u32 obj_id)
+/**
+ * dpsw_destroy() - Destroy the DPSW object and release all its resources.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token: Parent container token; '0' for default container
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @object_id:	The object id; it must be a valid id within the container that
+ * created this object;
+ *
+ * The function accepts the authentication token of the parent container that
+ * created the object (not the one that currently owns the object). The object
+ * is searched within parent using the provided 'object_id'.
+ * All tokens to the object must be closed before calling destroy.
+ *
+ * Return:	'0' on Success; error code otherwise.
+ */
+int dpsw_destroy(struct fsl_mc_io	*mc_io,
+		 u16	dprc_token,
+		u32	cmd_flags,
+		u32	object_id)
 {
 	struct mc_command cmd = { 0 };
 
@@ -159,6 +223,14 @@ int dpsw_destroy(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_enable() - Enable DPSW functionality
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_enable(struct fsl_mc_io *mc_io,
 		u32 cmd_flags,
 		u16 token)
@@ -174,6 +246,14 @@ int dpsw_enable(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_disable() - Disable DPSW functionality
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_disable(struct fsl_mc_io *mc_io,
 		 u32 cmd_flags,
 		 u16 token)
@@ -189,6 +269,16 @@ int dpsw_disable(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_is_enabled() - Check if the DPSW is enabled
+ *
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @en:		Returns '1' if object is enabled; '0' otherwise
+ *
+ * Return:	'0' on Success; Error code otherwise
+ */
 int dpsw_is_enabled(struct fsl_mc_io *mc_io,
 		    u32 cmd_flags,
 		    u16 token,
@@ -212,6 +302,14 @@ int dpsw_is_enabled(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_reset() - Reset the DPSW, returns the object to initial state.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_reset(struct fsl_mc_io *mc_io,
 	       u32 cmd_flags,
 	       u16 token)
@@ -227,6 +325,16 @@ int dpsw_reset(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_set_irq() - Set IRQ information for the DPSW to trigger an interrupt.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @irq_index:	Identifies the interrupt index to configure
+ * @irq_cfg:	IRQ configuration
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_set_irq(struct fsl_mc_io *mc_io,
 		 u32 cmd_flags,
 		 u16 token,
@@ -245,6 +353,19 @@ int dpsw_set_irq(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_get_irq() - Get IRQ information from the DPSW
+ *
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @irq_index:	The interrupt index to configure
+ * @type:	Interrupt type: 0 represents message interrupt
+ *		type (both irq_addr and irq_val are valid)
+ * @irq_cfg:	IRQ attributes
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_get_irq(struct fsl_mc_io *mc_io,
 		 u32 cmd_flags,
 		 u16 token,
@@ -272,6 +393,21 @@ int dpsw_get_irq(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_set_irq_enable() - Set overall interrupt state.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPCI object
+ * @irq_index:	The interrupt index to configure
+ * @en:			Interrupt state - enable = 1, disable = 0
+ *
+ * Allows GPP software to control when interrupts are generated.
+ * Each interrupt can have up to 32 causes.  The enable/disable control's the
+ * overall interrupt state. if the interrupt is disabled no causes will cause
+ * an interrupt
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_set_irq_enable(struct fsl_mc_io *mc_io,
 			u32 cmd_flags,
 			u16 token,
@@ -290,6 +426,16 @@ int dpsw_set_irq_enable(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_get_irq_enable() - Get overall interrupt state
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @irq_index:	The interrupt index to configure
+ * @en:			Returned Interrupt state - enable = 1, disable = 0
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_get_irq_enable(struct fsl_mc_io *mc_io,
 			u32 cmd_flags,
 			u16 token,
@@ -316,6 +462,22 @@ int dpsw_get_irq_enable(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_set_irq_mask() - Set interrupt mask.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPCI object
+ * @irq_index:	The interrupt index to configure
+ * @mask:		event mask to trigger interrupt;
+ *				each bit:
+ *					0 = ignore event
+ *					1 = consider event for asserting IRQ
+ *
+ * Every interrupt can have up to 32 causes and the interrupt model supports
+ * masking/unmasking each cause independently
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_set_irq_mask(struct fsl_mc_io *mc_io,
 		      u32 cmd_flags,
 		      u16 token,
@@ -334,6 +496,19 @@ int dpsw_set_irq_mask(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_get_irq_mask() - Get interrupt mask.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @irq_index:	The interrupt index to configure
+ * @mask:		Returned event mask to trigger interrupt
+ *
+ * Every interrupt can have up to 32 causes and the interrupt model supports
+ * masking/unmasking each cause independently
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_get_irq_mask(struct fsl_mc_io *mc_io,
 		      u32 cmd_flags,
 		      u16 token,
@@ -360,6 +535,18 @@ int dpsw_get_irq_mask(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_get_irq_status() - Get the current status of any pending interrupts
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @irq_index:	The interrupt index to configure
+ * @status:		Returned interrupts status - one bit per cause:
+ *					0 = no interrupt pending
+ *					1 = interrupt pending
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_get_irq_status(struct fsl_mc_io *mc_io,
 			u32 cmd_flags,
 			u16 token,
@@ -386,6 +573,18 @@ int dpsw_get_irq_status(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_clear_irq_status() - Clear a pending interrupt's status
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPCI object
+ * @irq_index:	The interrupt index to configure
+ * @status:		bits to clear (W1C) - one bit per cause:
+ *					0 = don't change
+ *					1 = clear status bit
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_clear_irq_status(struct fsl_mc_io *mc_io,
 			  u32 cmd_flags,
 			  u16 token,
@@ -404,6 +603,15 @@ int dpsw_clear_irq_status(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_get_attributes() - Retrieve DPSW attributes
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @attr:		Returned DPSW attributes
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_get_attributes(struct fsl_mc_io *mc_io,
 			u32 cmd_flags,
 			u16 token,
@@ -428,6 +636,17 @@ int dpsw_get_attributes(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_set_reflection_if() - Set target interface for reflected interfaces.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Id
+ *
+ *	Only one reflection receive interface is allowed per switch
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_set_reflection_if(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
 			   u16 token,
@@ -445,6 +664,16 @@ int dpsw_set_reflection_if(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_set_link_cfg() - set the link configuration.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token: Token of DPSW object
+ * @if_id: interface id
+ * @cfg: Link configuration
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_link_cfg(struct fsl_mc_io *mc_io,
 			 u32 cmd_flags,
 			 u16 token,
@@ -463,6 +692,16 @@ int dpsw_if_set_link_cfg(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_get_link_state - Return the link state
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token: Token of DPSW object
+ * @if_id: interface id
+ * @state: link state	1 - linkup, 0 - link down or disconnected
+ *
+ * @returns	'0' on Success; Error code otherwise.
+ */
 int dpsw_if_get_link_state(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
 			   u16 token,
@@ -489,6 +728,16 @@ int dpsw_if_get_link_state(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_if_set_flooding() - Enable Disable flooding for particular interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @en:			1 - enable, 0 - disable
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_flooding(struct fsl_mc_io *mc_io,
 			 u32 cmd_flags,
 			 u16 token,
@@ -507,6 +756,16 @@ int dpsw_if_set_flooding(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_set_broadcast() - Enable/disable broadcast for particular interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @en:			1 - enable, 0 - disable
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_broadcast(struct fsl_mc_io *mc_io,
 			  u32 cmd_flags,
 			  u16 token,
@@ -525,6 +784,16 @@ int dpsw_if_set_broadcast(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_set_multicast() - Enable/disable multicast for particular interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @en:			1 - enable, 0 - disable
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_multicast(struct fsl_mc_io *mc_io,
 			  u32 cmd_flags,
 			  u16 token,
@@ -543,6 +812,16 @@ int dpsw_if_set_multicast(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_set_tci() - Set default VLAN Tag Control Information (TCI)
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @cfg:		Tag Control Information Configuration
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_tci(struct fsl_mc_io *mc_io,
 		    u32 cmd_flags,
 		    u16 token,
@@ -561,6 +840,16 @@ int dpsw_if_set_tci(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_get_tci() - Get default VLAN Tag Control Information (TCI)
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @cfg:		Tag Control Information Configuration
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_get_tci(struct fsl_mc_io *mc_io,
 		    u32 cmd_flags,
 		    u16 token,
@@ -587,6 +876,19 @@ int dpsw_if_get_tci(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_if_set_stp() - Function sets Spanning Tree Protocol (STP) state.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @cfg:		STP State configuration parameters
+ *
+ * The following STP states are supported -
+ * blocking, listening, learning, forwarding and disabled.
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_stp(struct fsl_mc_io *mc_io,
 		    u32 cmd_flags,
 		    u16 token,
@@ -605,6 +907,25 @@ int dpsw_if_set_stp(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_set_accepted_frames()
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @cfg:		Frame types configuration
+ *
+ * When is admit_only_vlan_tagged- the device will discard untagged
+ * frames or Priority-Tagged frames received on this interface.
+ * When admit_only_untagged- untagged frames or Priority-Tagged
+ * frames received on this interface will be accepted and assigned
+ * to a VID based on the PVID and VID Set for this interface.
+ * When admit_all - the device will accept VLAN tagged, untagged
+ * and priority tagged frames.
+ * The default is admit_all
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_accepted_frames(struct fsl_mc_io *mc_io,
 				u32 cmd_flags,
 				u16 token,
@@ -623,6 +944,20 @@ int dpsw_if_set_accepted_frames(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_set_accept_all_vlan()
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @accept_all:	Accept or drop frames having different VLAN
+ *
+ * When this is accept (FALSE), the device will discard incoming
+ * frames for VLANs that do not include this interface in its
+ * Member set. When accept (TRUE), the interface will accept all incoming frames
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_accept_all_vlan(struct fsl_mc_io *mc_io,
 				u32 cmd_flags,
 				u16 token,
@@ -641,6 +976,17 @@ int dpsw_if_set_accept_all_vlan(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_get_counter() - Get specific counter of particular interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @type:		Counter type
+ * @counter:	return value
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_get_counter(struct fsl_mc_io *mc_io,
 			u32 cmd_flags,
 			u16 token,
@@ -668,6 +1014,17 @@ int dpsw_if_get_counter(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_if_set_counter() - Set specific counter of particular interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @type:		Counter type
+ * @counter:	New counter value
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_counter(struct fsl_mc_io *mc_io,
 			u32 cmd_flags,
 			u16 token,
@@ -687,6 +1044,21 @@ int dpsw_if_set_counter(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_set_tx_selection() - Function is used for mapping variety
+ *				of frame fields
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @cfg:		Traffic class mapping configuration
+ *
+ * Function is used for mapping variety of frame fields (DSCP, PCP)
+ * to Traffic Class. Traffic class is a number
+ * in the range from 0 to 7
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_tx_selection(struct fsl_mc_io *mc_io,
 			     u32 cmd_flags,
 			     u16 token,
@@ -705,6 +1077,16 @@ int dpsw_if_set_tx_selection(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_add_reflection() - Identify interface to be reflected or mirrored
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @cfg:		Reflection configuration
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_add_reflection(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
 			   u16 token,
@@ -723,6 +1105,16 @@ int dpsw_if_add_reflection(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_remove_reflection() - Remove interface to be reflected or mirrored
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @cfg:		Reflection configuration
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_remove_reflection(struct fsl_mc_io *mc_io,
 			      u32 cmd_flags,
 			      u16 token,
@@ -741,6 +1133,16 @@ int dpsw_if_remove_reflection(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_set_flooding_metering() - Set flooding metering
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @cfg:	Metering parameters
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_flooding_metering(struct fsl_mc_io *mc_io,
 				  u32 cmd_flags,
 				  u16 token,
@@ -759,6 +1161,17 @@ int dpsw_if_set_flooding_metering(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_set_metering() - Set interface metering for flooding
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @tc_id:	Traffic class ID
+ * @cfg:	Metering parameters
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_metering(struct fsl_mc_io *mc_io,
 			 u32 cmd_flags,
 			 u16 token,
@@ -778,6 +1191,14 @@ int dpsw_if_set_metering(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_prepare_early_drop() - Prepare an early drop for setting in to interface
+ * @cfg:	Early-drop configuration
+ * @early_drop_buf: Zeroed 256 bytes of memory before mapping it to DMA
+ *
+ * This function has to be called before dpsw_if_tc_set_early_drop
+ *
+ */
 void dpsw_prepare_early_drop(const struct dpsw_early_drop_cfg *cfg,
 			     u8 *early_drop_buf)
 {
@@ -786,6 +1207,22 @@ void dpsw_prepare_early_drop(const struct dpsw_early_drop_cfg *cfg,
 	DPSW_PREP_EARLY_DROP(ext_params, cfg);
 }
 
+/**
+ * dpsw_if_set_early_drop() - Set interface traffic class early-drop
+ *				configuration
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @tc_id:	Traffic class selection (0-7)
+ * @early_drop_iova:  I/O virtual address of 64 bytes;
+ * Must be cacheline-aligned and DMA-able memory
+ *
+ * warning: Before calling this function, call dpsw_prepare_if_tc_early_drop()
+ *		to prepare the early_drop_iova parameter
+ *
+ * Return:	'0' on Success; error code otherwise.
+ */
 int dpsw_if_set_early_drop(struct fsl_mc_io	*mc_io,
 			   u32		cmd_flags,
 			   u16		token,
@@ -805,6 +1242,20 @@ int dpsw_if_set_early_drop(struct fsl_mc_io	*mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_add_custom_tpid() - API Configures a distinct Ethernet type value
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @cfg:		Tag Protocol identifier
+ *
+ * API Configures a distinct Ethernet type value (or TPID value)
+ * to indicate a VLAN tag in addition to the common
+ * TPID values 0x8100 and 0x88A8.
+ * Two additional TPID's are supported
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_add_custom_tpid(struct fsl_mc_io *mc_io,
 			 u32 cmd_flags,
 			 u16 token,
@@ -822,6 +1273,15 @@ int dpsw_add_custom_tpid(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_remove_custom_tpid - API removes a distinct Ethernet type value
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @cfg:		Tag Protocol identifier
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_remove_custom_tpid(struct fsl_mc_io *mc_io,
 			    u32 cmd_flags,
 			    u16 token,
@@ -839,6 +1299,15 @@ int dpsw_remove_custom_tpid(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_enable() - Enable Interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_enable(struct fsl_mc_io *mc_io,
 		   u32 cmd_flags,
 		   u16 token,
@@ -856,6 +1325,15 @@ int dpsw_if_enable(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_disable() - Disable Interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_disable(struct fsl_mc_io *mc_io,
 		    u32 cmd_flags,
 		    u16 token,
@@ -873,6 +1351,16 @@ int dpsw_if_disable(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_get_attributes() - Function obtains attributes of interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @attr:	Returned interface attributes
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_get_attributes(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
 			   u16 token,
@@ -899,6 +1387,16 @@ int dpsw_if_get_attributes(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_if_set_max_frame_length() - Set Maximum Receive frame length.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @frame_length: Maximum Frame Length
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_set_max_frame_length(struct fsl_mc_io *mc_io,
 				 u32 cmd_flags,
 				 u16 token,
@@ -917,6 +1415,16 @@ int dpsw_if_set_max_frame_length(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_if_get_max_frame_length() - Get Maximum Receive frame length.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @frame_length: Returned maximum Frame Length
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_if_get_max_frame_length(struct fsl_mc_io *mc_io,
 				 u32 cmd_flags,
 				 u16 token,
@@ -942,6 +1450,23 @@ int dpsw_if_get_max_frame_length(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_vlan_add() - Adding new VLAN to DPSW.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @cfg:	VLAN configuration
+ *
+ * Only VLAN ID and FDB ID are required parameters here.
+ * 12 bit VLAN ID is defined in IEEE802.1Q.
+ * Adding a duplicate VLAN ID is not allowed.
+ * FDB ID can be shared across multiple VLANs. Shared learning
+ * is obtained by calling dpsw_vlan_add for multiple VLAN IDs
+ * with same fdb_id
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_add(struct fsl_mc_io *mc_io,
 		  u32 cmd_flags,
 		  u16 token,
@@ -960,6 +1485,21 @@ int dpsw_vlan_add(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_vlan_add_if() - Adding a set of interfaces to an existing VLAN.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @cfg:	Set of interfaces to add
+ *
+ * It adds only interfaces not belonging to this VLAN yet,
+ * otherwise an error is generated and an entire command is
+ * ignored. This function can be called numerous times always
+ * providing required interfaces delta.
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_add_if(struct fsl_mc_io *mc_io,
 		     u32 cmd_flags,
 		     u16 token,
@@ -979,6 +1519,23 @@ int dpsw_vlan_add_if(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_vlan_add_if_untagged() - Defining a set of interfaces that should be
+ *				transmitted as untagged.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @cfg:	set of interfaces that should be transmitted as untagged
+ *
+ * These interfaces should already belong to this VLAN.
+ * By default all interfaces are transmitted as tagged.
+ * Providing un-existing interface or untagged interface that is
+ * configured untagged already generates an error and the entire
+ * command is ignored.
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_add_if_untagged(struct fsl_mc_io *mc_io,
 			      u32 cmd_flags,
 			      u16 token,
@@ -998,6 +1555,24 @@ int dpsw_vlan_add_if_untagged(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_vlan_add_if_flooding() - Define a set of interfaces that should be
+ *			included in flooding when frame with unknown destination
+ *			unicast MAC arrived.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @cfg:	Set of interfaces that should be used for flooding
+ *
+ * These interfaces should belong to this VLAN. By default all
+ * interfaces are included into flooding list. Providing
+ * un-existing interface or an interface that already in the
+ * flooding list generates an error and the entire command is
+ * ignored.
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_add_if_flooding(struct fsl_mc_io *mc_io,
 			      u32 cmd_flags,
 			      u16 token,
@@ -1017,6 +1592,19 @@ int dpsw_vlan_add_if_flooding(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_vlan_remove_if() - Remove interfaces from an existing VLAN.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @cfg:	Set of interfaces that should be removed
+ *
+ * Interfaces must belong to this VLAN, otherwise an error
+ * is returned and an the command is ignored
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_remove_if(struct fsl_mc_io *mc_io,
 			u32 cmd_flags,
 			u16 token,
@@ -1036,6 +1624,21 @@ int dpsw_vlan_remove_if(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_vlan_remove_if_untagged() - Define a set of interfaces that should be
+ *		converted from transmitted as untagged to transmit as tagged.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @cfg:	set of interfaces that should be removed
+ *
+ * Interfaces provided by API have to belong to this VLAN and
+ * configured untagged, otherwise an error is returned and the
+ * command is ignored
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_remove_if_untagged(struct fsl_mc_io *mc_io,
 				 u32 cmd_flags,
 				 u16 token,
@@ -1055,6 +1658,17 @@ int dpsw_vlan_remove_if_untagged(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_vlan_remove_if_flooding() - Define a set of interfaces that should be
+ *			removed from the flooding list.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @cfg:	set of interfaces used for flooding
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_remove_if_flooding(struct fsl_mc_io *mc_io,
 				 u32 cmd_flags,
 				 u16 token,
@@ -1074,6 +1688,15 @@ int dpsw_vlan_remove_if_flooding(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_vlan_remove() - Remove an entire VLAN
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_remove(struct fsl_mc_io *mc_io,
 		     u32 cmd_flags,
 		     u16 token,
@@ -1091,6 +1714,16 @@ int dpsw_vlan_remove(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_vlan_get_attributes() - Get VLAN attributes
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @attr:	Returned DPSW attributes
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_get_attributes(struct fsl_mc_io *mc_io,
 			     u32 cmd_flags,
 			     u16 token,
@@ -1117,6 +1750,16 @@ int dpsw_vlan_get_attributes(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_vlan_get_if() - Get interfaces belong to this VLAN
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @cfg:	Returned set of interfaces belong to this VLAN
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_get_if(struct fsl_mc_io *mc_io,
 		     u32 cmd_flags,
 		     u16 token,
@@ -1144,6 +1787,17 @@ int dpsw_vlan_get_if(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_vlan_get_if_flooding() - Get interfaces used in flooding for this VLAN
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @cfg:	Returned set of flooding interfaces
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
+
 int dpsw_vlan_get_if_flooding(struct fsl_mc_io *mc_io,
 			      u32 cmd_flags,
 			      u16 token,
@@ -1171,6 +1825,17 @@ int dpsw_vlan_get_if_flooding(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_vlan_get_if_untagged() - Get interfaces that should be transmitted as
+ *				untagged
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @vlan_id:	VLAN Identifier
+ * @cfg:	Returned set of untagged interfaces
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_vlan_get_if_untagged(struct fsl_mc_io *mc_io,
 			      u32 cmd_flags,
 			      u16 token,
@@ -1198,6 +1863,17 @@ int dpsw_vlan_get_if_untagged(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_fdb_add() - Add FDB to switch and Returns handle to FDB table for
+ *		the reference
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @fdb_id:	Returned Forwarding Database Identifier
+ * @cfg:	FDB Configuration
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_fdb_add(struct fsl_mc_io *mc_io,
 		 u32 cmd_flags,
 		 u16 token,
@@ -1224,6 +1900,15 @@ int dpsw_fdb_add(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_fdb_remove() - Remove FDB from switch
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @fdb_id:	Forwarding Database Identifier
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_fdb_remove(struct fsl_mc_io *mc_io,
 		    u32 cmd_flags,
 		    u16 token,
@@ -1241,6 +1926,16 @@ int dpsw_fdb_remove(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_fdb_add_unicast() - Function adds an unicast entry into MAC lookup table
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @fdb_id:	Forwarding Database Identifier
+ * @cfg:	Unicast entry configuration
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_fdb_add_unicast(struct fsl_mc_io *mc_io,
 			 u32 cmd_flags,
 			 u16 token,
@@ -1259,6 +1954,17 @@ int dpsw_fdb_add_unicast(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_fdb_get_unicast() - Get unicast entry from MAC lookup table by
+ *		unicast Ethernet address
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @fdb_id:	Forwarding Database Identifier
+ * @cfg:	Returned unicast entry configuration
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_fdb_get_unicast(struct fsl_mc_io *mc_io,
 			 u32 cmd_flags,
 			 u16 token,
@@ -1285,6 +1991,16 @@ int dpsw_fdb_get_unicast(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_fdb_remove_unicast() - removes an entry from MAC lookup table
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @fdb_id:	Forwarding Database Identifier
+ * @cfg:	Unicast entry configuration
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_fdb_remove_unicast(struct fsl_mc_io *mc_io,
 			    u32 cmd_flags,
 			    u16 token,
@@ -1303,6 +2019,23 @@ int dpsw_fdb_remove_unicast(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_fdb_add_multicast() - Add a set of egress interfaces to multi-cast group
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @fdb_id:	Forwarding Database Identifier
+ * @cfg:	Multicast entry configuration
+ *
+ * If group doesn't exist, it will be created.
+ * It adds only interfaces not belonging to this multicast group
+ * yet, otherwise error will be generated and the command is
+ * ignored.
+ * This function may be called numerous times always providing
+ * required interfaces delta.
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_fdb_add_multicast(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
 			   u16 token,
@@ -1322,6 +2055,17 @@ int dpsw_fdb_add_multicast(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_fdb_get_multicast() - Reading multi-cast group by multi-cast Ethernet
+ *				address.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @fdb_id:	Forwarding Database Identifier
+ * @cfg:	Returned multicast entry configuration
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_fdb_get_multicast(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
 			   u16 token,
@@ -1349,6 +2093,22 @@ int dpsw_fdb_get_multicast(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_fdb_remove_multicast() - Removing interfaces from an existing multicast
+ *				group.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @fdb_id:	Forwarding Database Identifier
+ * @cfg:	Multicast entry configuration
+ *
+ * Interfaces provided by this API have to exist in the group,
+ * otherwise an error will be returned and an entire command
+ * ignored. If there is no interface left in the group,
+ * an entire group is deleted
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_fdb_remove_multicast(struct fsl_mc_io *mc_io,
 			      u32 cmd_flags,
 			      u16 token,
@@ -1368,6 +2128,16 @@ int dpsw_fdb_remove_multicast(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_fdb_set_learning_mode() - Define FDB learning mode
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @fdb_id:	Forwarding Database Identifier
+ * @mode:	learning mode
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_fdb_set_learning_mode(struct fsl_mc_io *mc_io,
 			       u32 cmd_flags,
 			       u16 token,
@@ -1386,6 +2156,16 @@ int dpsw_fdb_set_learning_mode(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_fdb_get_attributes() - Get FDB attributes
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @fdb_id:	Forwarding Database Identifier
+ * @attr:	Returned FDB attributes
+ *
+ * Return:	Completion status. '0' on Success; Error code otherwise.
+ */
 int dpsw_fdb_get_attributes(struct fsl_mc_io *mc_io,
 			    u32 cmd_flags,
 			    u16 token,
@@ -1412,6 +2192,19 @@ int dpsw_fdb_get_attributes(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_acl_add() - Adds ACL to L2 switch.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @acl_id:	Returned ACL ID, for the future reference
+ * @cfg:	ACL configuration
+ *
+ * Create Access Control List. Multiple ACLs can be created and
+ * co-exist in L2 switch
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_acl_add(struct fsl_mc_io *mc_io,
 		 u32 cmd_flags,
 		 u16 token,
@@ -1438,6 +2231,15 @@ int dpsw_acl_add(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_acl_remove() - Removes ACL from L2 switch.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @acl_id:	ACL ID
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_acl_remove(struct fsl_mc_io *mc_io,
 		    u32 cmd_flags,
 		    u16 token,
@@ -1455,6 +2257,14 @@ int dpsw_acl_remove(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_acl_prepare_entry_cfg() - Set an entry to ACL.
+ * @key:	key
+ * @entry_cfg_buf: Zeroed 256 bytes of memory before mapping it to DMA
+ *
+ * This function has to be called before adding or removing acl_entry
+ *
+ */
 void dpsw_acl_prepare_entry_cfg(const struct dpsw_acl_key *key,
 				u8 *entry_cfg_buf)
 {
@@ -1463,6 +2273,18 @@ void dpsw_acl_prepare_entry_cfg(const struct dpsw_acl_key *key,
 	DPSW_PREP_ACL_ENTRY(ext_params, key);
 }
 
+/**
+ * dpsw_acl_add_entry() - Adds an entry to ACL.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @acl_id:	ACL ID
+ * @cfg:	entry configuration
+ *
+ * warning: This function has to be called after dpsw_acl_set_entry_cfg()
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_acl_add_entry(struct fsl_mc_io *mc_io,
 		       u32 cmd_flags,
 		       u16 token,
@@ -1481,6 +2303,18 @@ int dpsw_acl_add_entry(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_acl_remove_entry() - Removes an entry from ACL.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @acl_id:	ACL ID
+ * @cfg:	entry configuration
+ *
+ * warning: This function has to be called after dpsw_acl_set_entry_cfg()
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_acl_remove_entry(struct fsl_mc_io *mc_io,
 			  u32 cmd_flags,
 			  u16 token,
@@ -1499,6 +2333,16 @@ int dpsw_acl_remove_entry(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_acl_add_if() - Associate interface/interfaces with ACL.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @acl_id:	ACL ID
+ * @cfg:	interfaces list
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_acl_add_if(struct fsl_mc_io *mc_io,
 		    u32 cmd_flags,
 		    u16 token,
@@ -1518,6 +2362,16 @@ int dpsw_acl_add_if(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_acl_remove_if() - De-associate interface/interfaces from ACL.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @acl_id:	ACL ID
+ * @cfg:	interfaces list
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_acl_remove_if(struct fsl_mc_io *mc_io,
 		       u32 cmd_flags,
 		       u16 token,
@@ -1537,6 +2391,16 @@ int dpsw_acl_remove_if(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_acl_get_attributes() - Get specific counter of particular interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @acl_id:      ACL Identifier
+ * @attr:        Returned ACL attributes
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_acl_get_attributes(struct fsl_mc_io		*mc_io,
 			    u32			cmd_flags,
 			    u16			token,
@@ -1563,6 +2427,15 @@ int dpsw_acl_get_attributes(struct fsl_mc_io		*mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_ctrl_if_get_attributes() - Obtain control interface attributes
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @attr:	Returned control interface attributes
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_ctrl_if_get_attributes(struct fsl_mc_io		*mc_io,
 				u32			cmd_flags,
 				u16			token,
@@ -1587,6 +2460,15 @@ int dpsw_ctrl_if_get_attributes(struct fsl_mc_io		*mc_io,
 	return 0;
 }
 
+/**
+ * dpsw_ctrl_if_set_pools() - Set control interface buffer pools
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ * @cfg:		buffer pools configuration
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_ctrl_if_set_pools(struct fsl_mc_io			*mc_io,
 			   u32				cmd_flags,
 			   u16				token,
@@ -1604,6 +2486,14 @@ int dpsw_ctrl_if_set_pools(struct fsl_mc_io			*mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpsw_ctrl_if_enable() - Enable control interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_ctrl_if_enable(struct fsl_mc_io	*mc_io,
 			u32		cmd_flags,
 			u16		token)
@@ -1620,13 +2510,13 @@ int dpsw_ctrl_if_enable(struct fsl_mc_io	*mc_io,
 }
 
 /**
-* @brief    Function disables control interface
-* @mc_io:	Pointer to MC portal's I/O object
-* @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
-* @token:	Token of DPSW object
-*
-* Return:	'0' on Success; Error code otherwise.
-*/
+ * dpsw_ctrl_if_disable() - Function disables control interface
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSW object
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpsw_ctrl_if_disable(struct fsl_mc_io	*mc_io,
 			 u32		cmd_flags,
 			 u16		token)
@@ -1641,7 +2531,15 @@ int dpsw_ctrl_if_disable(struct fsl_mc_io	*mc_io,
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
-
+/**
+ * dpsw_get_api_version() - Get Data Path Switch API version
+ * @mc_io:  Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @major_ver:	Major version of data path switch API
+ * @minor_ver:	Minor version of data path switch API
+ *
+ * Return:  '0' on Success; Error code otherwise.
+ */
 int dpsw_get_api_version(struct fsl_mc_io *mc_io,
 			 u32 cmd_flags,
 			 u16 *major_ver,
diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw.h b/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
index 59c6fff..a00175e 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
@@ -53,39 +53,11 @@ struct fsl_mc_io;
  */
 #define DPSW_MAX_IF		64
 
-/**
- * dpsw_open() - Open a control session for the specified object
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @dpsw_id:	DPSW unique ID
- * @token:	Returned token; use in subsequent API calls
- *
- * This function can be used to open a control session for an
- * already created object; an object may have been declared in
- * the DPL or by calling the dpsw_create() function.
- * This function returns a unique authentication token,
- * associated with the specific object ID and the specific MC
- * portal; this token must be used in all subsequent commands for
- * this specific object
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_open(struct fsl_mc_io	*mc_io,
 	      u32		cmd_flags,
 	      int		dpsw_id,
 	      u16		*token);
 
-/**
- * dpsw_close() - Close the control session of the object
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- *
- * After this function is called, no further operations are
- * allowed on the object without opening a new control session.
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_close(struct fsl_mc_io *mc_io,
 	       u32	cmd_flags,
 	       u16	token);
@@ -163,101 +135,30 @@ struct dpsw_cfg {
 	} adv;
 };
 
-/**
- * dpsw_create() - Create the DPSW object.
- * @mc_io:	Pointer to MC portal's I/O object
- * @dprc_token:	Parent container token; '0' for default container
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @cfg:	Configuration structure
- * @obj_id: returned object id
- *
- * Create the DPSW object, allocate required resources and
- * perform required initialization.
- *
- * The object can be created either by declaring it in the
- * DPL file, or by calling this function.
- *
- * The function accepts an authentication token of a parent
- * container that this object should be assigned to. The token
- * can be '0' so the object will be assigned to the default container.
- * The newly created object can be opened with the returned
- * object id and using the container's associated tokens and MC portals.
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_create(struct fsl_mc_io	*mc_io,
 		u16 dprc_token,
 		u32		cmd_flags,
 		const struct dpsw_cfg	*cfg,
 		u32		*obj_id);
 
-/**
- * dpsw_destroy() - Destroy the DPSW object and release all its resources.
- * @mc_io:	Pointer to MC portal's I/O object
- * @dprc_token: Parent container token; '0' for default container
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @object_id:	The object id; it must be a valid id within the container that
- * created this object;
- *
- * The function accepts the authentication token of the parent container that
- * created the object (not the one that currently owns the object). The object
- * is searched within parent using the provided 'object_id'.
- * All tokens to the object must be closed before calling destroy.
- *
- * Return:	'0' on Success; error code otherwise.
- */
 int dpsw_destroy(struct fsl_mc_io	*mc_io,
 		 u16		dprc_token,
 		 u32		cmd_flags,
 		 u32		object_id);
 
-/**
- * dpsw_enable() - Enable DPSW functionality
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_enable(struct fsl_mc_io	*mc_io,
 		u32		cmd_flags,
 		u16		token);
 
-/**
- * dpsw_disable() - Disable DPSW functionality
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_disable(struct fsl_mc_io	*mc_io,
 		 u32		cmd_flags,
 		 u16		token);
 
-/**
- * dpsw_is_enabled() - Check if the DPSW is enabled
- *
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @en:		Returns '1' if object is enabled; '0' otherwise
- *
- * Return:	'0' on Success; Error code otherwise
- */
 int dpsw_is_enabled(struct fsl_mc_io	*mc_io,
 		    u32		cmd_flags,
 		    u16		token,
 		    int		*en);
 
-/**
- * dpsw_reset() - Reset the DPSW, returns the object to initial state.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_reset(struct fsl_mc_io *mc_io,
 	       u32	cmd_flags,
 	       u16	token);
@@ -286,35 +187,12 @@ struct dpsw_irq_cfg {
 	     int		irq_num;
 };
 
-/**
- * dpsw_set_irq() - Set IRQ information for the DPSW to trigger an interrupt.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @irq_index:	Identifies the interrupt index to configure
- * @irq_cfg:	IRQ configuration
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_set_irq(struct fsl_mc_io	*mc_io,
 		 u32		cmd_flags,
 		 u16		token,
 		 u8		irq_index,
 		 struct dpsw_irq_cfg	*irq_cfg);
 
-/**
- * dpsw_get_irq() - Get IRQ information from the DPSW
- *
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @irq_index:	The interrupt index to configure
- * @type:	Interrupt type: 0 represents message interrupt
- *		type (both irq_addr and irq_val are valid)
- * @irq_cfg:	IRQ attributes
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_get_irq(struct fsl_mc_io	*mc_io,
 		 u32		cmd_flags,
 		 u16		token,
@@ -322,114 +200,36 @@ int dpsw_get_irq(struct fsl_mc_io	*mc_io,
 		 int			*type,
 		 struct dpsw_irq_cfg	*irq_cfg);
 
-/**
- * dpsw_set_irq_enable() - Set overall interrupt state.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPCI object
- * @irq_index:	The interrupt index to configure
- * @en:			Interrupt state - enable = 1, disable = 0
- *
- * Allows GPP software to control when interrupts are generated.
- * Each interrupt can have up to 32 causes.  The enable/disable control's the
- * overall interrupt state. if the interrupt is disabled no causes will cause
- * an interrupt
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_set_irq_enable(struct fsl_mc_io	*mc_io,
 			u32		cmd_flags,
 			u16		token,
 			u8		irq_index,
 			u8		en);
 
-/**
- * dpsw_get_irq_enable() - Get overall interrupt state
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @irq_index:	The interrupt index to configure
- * @en:			Returned Interrupt state - enable = 1, disable = 0
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_get_irq_enable(struct fsl_mc_io	*mc_io,
 			u32		cmd_flags,
 			u16		token,
 			u8		irq_index,
 			u8		*en);
 
-/**
- * dpsw_set_irq_mask() - Set interrupt mask.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPCI object
- * @irq_index:	The interrupt index to configure
- * @mask:		event mask to trigger interrupt;
- *				each bit:
- *					0 = ignore event
- *					1 = consider event for asserting IRQ
- *
- * Every interrupt can have up to 32 causes and the interrupt model supports
- * masking/unmasking each cause independently
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_set_irq_mask(struct fsl_mc_io	*mc_io,
 		      u32		cmd_flags,
 		      u16		token,
 		      u8		irq_index,
 		      u32		mask);
 
-/**
- * dpsw_get_irq_mask() - Get interrupt mask.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @irq_index:	The interrupt index to configure
- * @mask:		Returned event mask to trigger interrupt
- *
- * Every interrupt can have up to 32 causes and the interrupt model supports
- * masking/unmasking each cause independently
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_get_irq_mask(struct fsl_mc_io	*mc_io,
 		      u32		cmd_flags,
 		      u16		token,
 		      u8		irq_index,
 		      u32		*mask);
 
-/**
- * dpsw_get_irq_status() - Get the current status of any pending interrupts
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @irq_index:	The interrupt index to configure
- * @status:		Returned interrupts status - one bit per cause:
- *					0 = no interrupt pending
- *					1 = interrupt pending
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_get_irq_status(struct fsl_mc_io	*mc_io,
 			u32		cmd_flags,
 			u16		token,
 			u8		irq_index,
 			u32		*status);
 
-/**
- * dpsw_clear_irq_status() - Clear a pending interrupt's status
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPCI object
- * @irq_index:	The interrupt index to configure
- * @status:		bits to clear (W1C) - one bit per cause:
- *					0 = don't change
- *					1 = clear status bit
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_clear_irq_status(struct fsl_mc_io	*mc_io,
 			  u32		cmd_flags,
 			  u16		token,
@@ -470,31 +270,11 @@ struct dpsw_attr {
 	enum dpsw_component_type component_type;
 };
 
-/**
- * dpsw_get_attributes() - Retrieve DPSW attributes
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @attr:		Returned DPSW attributes
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_get_attributes(struct fsl_mc_io	*mc_io,
 			u32		cmd_flags,
 			u16		token,
 			struct dpsw_attr	*attr);
 
-/**
- * dpsw_set_reflection_if() - Set target interface for reflected interfaces.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Id
- *
- *	Only one reflection receive interface is allowed per switch
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_set_reflection_if(struct fsl_mc_io	*mc_io,
 			   u32		cmd_flags,
 			   u16		token,
@@ -537,16 +317,6 @@ struct dpsw_link_cfg {
 	u64 options;
 };
 
-/**
- * dpsw_if_set_link_cfg() - set the link configuration.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token: Token of DPSW object
- * @if_id: interface id
- * @cfg: Link configuration
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_if_set_link_cfg(struct fsl_mc_io	*mc_io,
 			 u32		cmd_flags,
 			 u16		token,
@@ -564,64 +334,24 @@ struct dpsw_link_state {
 	int      up;
 };
 
-/**
- * dpsw_if_get_link_state - Return the link state
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token: Token of DPSW object
- * @if_id: interface id
- * @state: link state	1 - linkup, 0 - link down or disconnected
- *
- * @returns	'0' on Success; Error code otherwise.
- */
 int dpsw_if_get_link_state(struct fsl_mc_io		*mc_io,
 			   u32			cmd_flags,
 			   u16			token,
 			   u16			if_id,
 			   struct dpsw_link_state	*state);
 
-/**
- * dpsw_if_set_flooding() - Enable Disable flooding for particular interface
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @en:			1 - enable, 0 - disable
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_flooding(struct fsl_mc_io	*mc_io,
 			 u32		cmd_flags,
 			 u16		token,
 			 u16		if_id,
 			 int			en);
 
-/**
- * dpsw_if_set_broadcast() - Enable/disable broadcast for particular interface
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @en:			1 - enable, 0 - disable
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_broadcast(struct fsl_mc_io	*mc_io,
 			  u32		cmd_flags,
 			  u16		token,
 			  u16		if_id,
 			  int			en);
 
-/**
- * dpsw_if_set_multicast() - Enable/disable multicast for particular interface
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @en:			1 - enable, 0 - disable
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_multicast(struct fsl_mc_io	*mc_io,
 			  u32		cmd_flags,
 			  u16		token,
@@ -647,32 +377,12 @@ struct dpsw_tci_cfg {
 	u16	vlan_id;
 };
 
-/**
- * dpsw_if_set_tci() - Set default VLAN Tag Control Information (TCI)
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Tag Control Information Configuration
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_tci(struct fsl_mc_io		*mc_io,
 		    u32			cmd_flags,
 		    u16			token,
 		    u16			if_id,
 		    const struct dpsw_tci_cfg	*cfg);
 
-/**
- * dpsw_if_get_tci() - Get default VLAN Tag Control Information (TCI)
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Tag Control Information Configuration
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_get_tci(struct fsl_mc_io	*mc_io,
 		    u32		cmd_flags,
 		    u16		token,
@@ -704,19 +414,6 @@ struct dpsw_stp_cfg {
 	enum dpsw_stp_state	state;
 };
 
-/**
- * dpsw_if_set_stp() - Function sets Spanning Tree Protocol (STP) state.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		STP State configuration parameters
- *
- * The following STP states are supported -
- * blocking, listening, learning, forwarding and disabled.
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_stp(struct fsl_mc_io		*mc_io,
 		    u32			cmd_flags,
 		    u16			token,
@@ -747,45 +444,12 @@ struct dpsw_accepted_frames_cfg {
 	enum dpsw_action		unaccept_act;
 };
 
-/**
- * dpsw_if_set_accepted_frames()
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Frame types configuration
- *
- * When is admit_only_vlan_tagged- the device will discard untagged
- * frames or Priority-Tagged frames received on this interface.
- * When admit_only_untagged- untagged frames or Priority-Tagged
- * frames received on this interface will be accepted and assigned
- * to a VID based on the PVID and VID Set for this interface.
- * When admit_all - the device will accept VLAN tagged, untagged
- * and priority tagged frames.
- * The default is admit_all
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_accepted_frames(struct fsl_mc_io		*mc_io,
 				u32			cmd_flags,
 				u16			token,
 				u16			if_id,
 				const struct dpsw_accepted_frames_cfg *cfg);
 
-/**
- * dpsw_if_set_accept_all_vlan()
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @accept_all:	Accept or drop frames having different VLAN
- *
- * When this is accept (FALSE), the device will discard incoming
- * frames for VLANs that do not include this interface in its
- * Member set. When accept (TRUE), the interface will accept all incoming frames
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_accept_all_vlan(struct fsl_mc_io	*mc_io,
 				u32		cmd_flags,
 				u16		token,
@@ -822,17 +486,6 @@ enum dpsw_counter {
 	DPSW_CNT_EGR_STP_FRAME_DISCARD = 0xb
 };
 
-/**
- * dpsw_if_get_counter() - Get specific counter of particular interface
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @type:		Counter type
- * @counter:	return value
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_get_counter(struct fsl_mc_io	*mc_io,
 			u32		cmd_flags,
 			u16		token,
@@ -840,17 +493,6 @@ int dpsw_if_get_counter(struct fsl_mc_io	*mc_io,
 			enum dpsw_counter	type,
 			u64		*counter);
 
-/**
- * dpsw_if_set_counter() - Set specific counter of particular interface
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @type:		Counter type
- * @counter:	New counter value
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_counter(struct fsl_mc_io	*mc_io,
 			u32		cmd_flags,
 			u16		token,
@@ -910,21 +552,6 @@ struct dpsw_tx_selection_cfg {
 	struct dpsw_tx_schedule_cfg	tc_sched[DPSW_MAX_TC];
 };
 
-/**
- * dpsw_if_set_tx_selection() - Function is used for mapping variety
- *				of frame fields
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Traffic class mapping configuration
- *
- * Function is used for mapping variety of frame fields (DSCP, PCP)
- * to Traffic Class. Traffic class is a number
- * in the range from 0 to 7
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_tx_selection(struct fsl_mc_io			*mc_io,
 			     u32				cmd_flags,
 			     u16				token,
@@ -954,32 +581,12 @@ struct dpsw_reflection_cfg {
 	u16			vlan_id;
 };
 
-/**
- * dpsw_if_add_reflection() - Identify interface to be reflected or mirrored
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Reflection configuration
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_add_reflection(struct fsl_mc_io			*mc_io,
 			   u32				cmd_flags,
 			   u16				token,
 			   u16				if_id,
 			   const struct dpsw_reflection_cfg	*cfg);
 
-/**
- * dpsw_if_remove_reflection() - Remove interface to be reflected or mirrored
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Reflection configuration
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_remove_reflection(struct fsl_mc_io			*mc_io,
 			      u32				cmd_flags,
 			      u16				token,
@@ -1029,33 +636,12 @@ struct dpsw_metering_cfg {
 	u32		ebs;
 };
 
-/**
- * dpsw_if_set_flooding_metering() - Set flooding metering
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @if_id:	Interface Identifier
- * @cfg:	Metering parameters
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_flooding_metering(struct fsl_mc_io		*mc_io,
 				  u32			cmd_flags,
 				  u16			token,
 				  u16			if_id,
 				  const struct dpsw_metering_cfg *cfg);
 
-/**
- * dpsw_if_set_metering() - Set interface metering for flooding
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @if_id:	Interface Identifier
- * @tc_id:	Traffic class ID
- * @cfg:	Metering parameters
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_metering(struct fsl_mc_io			*mc_io,
 			 u32				cmd_flags,
 			 u16				token,
@@ -1117,33 +703,9 @@ struct dpsw_early_drop_cfg {
 	u32			tail_drop_threshold;
 };
 
-/**
- * dpsw_prepare_early_drop() - Prepare an early drop for setting in to interface
- * @cfg:	Early-drop configuration
- * @early_drop_buf: Zeroed 256 bytes of memory before mapping it to DMA
- *
- * This function has to be called before dpsw_if_tc_set_early_drop
- *
- */
 void dpsw_prepare_early_drop(const struct dpsw_early_drop_cfg *cfg,
 			     u8			*early_drop_buf);
 
-/**
- * dpsw_if_set_early_drop() - Set interface traffic class early-drop
- *				configuration
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @if_id:		Interface Identifier
- * @tc_id:	Traffic class selection (0-7)
- * @early_drop_iova:  I/O virtual address of 64 bytes;
- * Must be cacheline-aligned and DMA-able memory
- *
- * warning: Before calling this function, call dpsw_prepare_if_tc_early_drop()
- *		to prepare the early_drop_iova parameter
- *
- * Return:	'0' on Success; error code otherwise.
- */
 int dpsw_if_set_early_drop(struct fsl_mc_io	*mc_io,
 			   u32		cmd_flags,
 			   u16		token,
@@ -1159,62 +721,21 @@ struct dpsw_custom_tpid_cfg {
 	u16 tpid;
 };
 
-/**
- * dpsw_add_custom_tpid() - API Configures a distinct Ethernet type value
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @cfg:		Tag Protocol identifier
- *
- * API Configures a distinct Ethernet type value (or TPID value)
- * to indicate a VLAN tag in addition to the common
- * TPID values 0x8100 and 0x88A8.
- * Two additional TPID's are supported
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_add_custom_tpid(struct fsl_mc_io			*mc_io,
 			 u32				cmd_flags,
 			 u16				token,
 			 const struct dpsw_custom_tpid_cfg	*cfg);
 
-/**
- * dpsw_remove_custom_tpid - API removes a distinct Ethernet type value
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @cfg:		Tag Protocol identifier
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_remove_custom_tpid(struct fsl_mc_io			*mc_io,
 			    u32				cmd_flags,
 			    u16				token,
 			    const struct dpsw_custom_tpid_cfg	*cfg);
 
-/**
- * dpsw_if_enable() - Enable Interface
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_enable(struct fsl_mc_io	*mc_io,
 		   u32		cmd_flags,
 		   u16		token,
 		   u16		if_id);
 
-/**
- * dpsw_if_disable() - Disable Interface
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_disable(struct fsl_mc_io	*mc_io,
 		    u32		cmd_flags,
 		    u16		token,
@@ -1245,48 +766,18 @@ struct dpsw_if_attr {
 	u16			qdid;
 };
 
-/**
- * dpsw_if_get_attributes() - Function obtains attributes of interface
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @if_id:	Interface Identifier
- * @attr:	Returned interface attributes
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_get_attributes(struct fsl_mc_io	*mc_io,
 			   u32		cmd_flags,
 			   u16		token,
 			   u16		if_id,
 			   struct dpsw_if_attr	*attr);
 
-/**
- * dpsw_if_set_max_frame_length() - Set Maximum Receive frame length.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @if_id:	Interface Identifier
- * @frame_length: Maximum Frame Length
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_set_max_frame_length(struct fsl_mc_io	*mc_io,
 				 u32		cmd_flags,
 				 u16		token,
 				 u16		if_id,
 				 u16		frame_length);
 
-/**
- * dpsw_if_get_max_frame_length() - Get Maximum Receive frame length.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @if_id:	Interface Identifier
- * @frame_length: Returned maximum Frame Length
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_if_get_max_frame_length(struct fsl_mc_io	*mc_io,
 				 u32		cmd_flags,
 				 u16		token,
@@ -1301,23 +792,6 @@ struct dpsw_vlan_cfg {
 	u16 fdb_id;
 };
 
-/**
- * dpsw_vlan_add() - Adding new VLAN to DPSW.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @cfg:	VLAN configuration
- *
- * Only VLAN ID and FDB ID are required parameters here.
- * 12 bit VLAN ID is defined in IEEE802.1Q.
- * Adding a duplicate VLAN ID is not allowed.
- * FDB ID can be shared across multiple VLANs. Shared learning
- * is obtained by calling dpsw_vlan_add for multiple VLAN IDs
- * with same fdb_id
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_add(struct fsl_mc_io		*mc_io,
 		  u32			cmd_flags,
 		  u16			token,
@@ -1336,140 +810,42 @@ struct dpsw_vlan_if_cfg {
 	u16 if_id[DPSW_MAX_IF];
 };
 
-/**
- * dpsw_vlan_add_if() - Adding a set of interfaces to an existing VLAN.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @cfg:	Set of interfaces to add
- *
- * It adds only interfaces not belonging to this VLAN yet,
- * otherwise an error is generated and an entire command is
- * ignored. This function can be called numerous times always
- * providing required interfaces delta.
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_add_if(struct fsl_mc_io			*mc_io,
 		     u32				cmd_flags,
 		     u16				token,
 		     u16				vlan_id,
 		     const struct dpsw_vlan_if_cfg	*cfg);
 
-/**
- * dpsw_vlan_add_if_untagged() - Defining a set of interfaces that should be
- *				transmitted as untagged.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @cfg:	set of interfaces that should be transmitted as untagged
- *
- * These interfaces should already belong to this VLAN.
- * By default all interfaces are transmitted as tagged.
- * Providing un-existing interface or untagged interface that is
- * configured untagged already generates an error and the entire
- * command is ignored.
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_add_if_untagged(struct fsl_mc_io			*mc_io,
 			      u32				cmd_flags,
 			      u16				token,
 			      u16				vlan_id,
 			      const struct dpsw_vlan_if_cfg	*cfg);
 
-/**
- * dpsw_vlan_add_if_flooding() - Define a set of interfaces that should be
- *			included in flooding when frame with unknown destination
- *			unicast MAC arrived.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @cfg:	Set of interfaces that should be used for flooding
- *
- * These interfaces should belong to this VLAN. By default all
- * interfaces are included into flooding list. Providing
- * un-existing interface or an interface that already in the
- * flooding list generates an error and the entire command is
- * ignored.
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_add_if_flooding(struct fsl_mc_io			*mc_io,
 			      u32				cmd_flags,
 			      u16				token,
 			      u16				vlan_id,
 			      const struct dpsw_vlan_if_cfg	*cfg);
 
-/**
- * dpsw_vlan_remove_if() - Remove interfaces from an existing VLAN.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @cfg:	Set of interfaces that should be removed
- *
- * Interfaces must belong to this VLAN, otherwise an error
- * is returned and an the command is ignored
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_remove_if(struct fsl_mc_io		*mc_io,
 			u32			cmd_flags,
 			u16			token,
 			u16			vlan_id,
 			const struct dpsw_vlan_if_cfg	*cfg);
 
-/**
- * dpsw_vlan_remove_if_untagged() - Define a set of interfaces that should be
- *		converted from transmitted as untagged to transmit as tagged.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @cfg:	set of interfaces that should be removed
- *
- * Interfaces provided by API have to belong to this VLAN and
- * configured untagged, otherwise an error is returned and the
- * command is ignored
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_remove_if_untagged(struct fsl_mc_io		*mc_io,
 				 u32			cmd_flags,
 				 u16			token,
 				 u16			vlan_id,
 				 const struct dpsw_vlan_if_cfg	*cfg);
 
-/**
- * dpsw_vlan_remove_if_flooding() - Define a set of interfaces that should be
- *			removed from the flooding list.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @cfg:	set of interfaces used for flooding
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_remove_if_flooding(struct fsl_mc_io		*mc_io,
 				 u32			cmd_flags,
 				 u16			token,
 				 u16			vlan_id,
 				 const struct dpsw_vlan_if_cfg	*cfg);
 
-/**
- * dpsw_vlan_remove() - Remove an entire VLAN
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_remove(struct fsl_mc_io	*mc_io,
 		     u32		cmd_flags,
 		     u16		token,
@@ -1489,65 +865,24 @@ struct dpsw_vlan_attr {
 	u16 num_flooding_ifs;
 };
 
-/**
- * dpsw_vlan_get_attributes() - Get VLAN attributes
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @attr:	Returned DPSW attributes
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_get_attributes(struct fsl_mc_io		*mc_io,
 			     u32			cmd_flags,
 			     u16			token,
 			     u16			vlan_id,
 			     struct dpsw_vlan_attr	*attr);
 
-/**
- * dpsw_vlan_get_if() - Get interfaces belong to this VLAN
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @cfg:	Returned set of interfaces belong to this VLAN
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_get_if(struct fsl_mc_io		*mc_io,
 		     u32			cmd_flags,
 		     u16			token,
 		     u16			vlan_id,
 		     struct dpsw_vlan_if_cfg	*cfg);
 
-/**
- * dpsw_vlan_get_if_flooding() - Get interfaces used in flooding for this VLAN
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @cfg:	Returned set of flooding interfaces
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_get_if_flooding(struct fsl_mc_io		*mc_io,
 			      u32			cmd_flags,
 			      u16			token,
 			      u16			vlan_id,
 			      struct dpsw_vlan_if_cfg	*cfg);
 
-/**
- * dpsw_vlan_get_if_untagged() - Get interfaces that should be transmitted as
- *				untagged
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @vlan_id:	VLAN Identifier
- * @cfg:	Returned set of untagged interfaces
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_vlan_get_if_untagged(struct fsl_mc_io		*mc_io,
 			      u32			cmd_flags,
 			      u16			token,
@@ -1564,32 +899,12 @@ struct dpsw_fdb_cfg {
 	u16 fdb_aging_time;
 };
 
-/**
- * dpsw_fdb_add() - Add FDB to switch and Returns handle to FDB table for
- *		the reference
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @fdb_id:	Returned Forwarding Database Identifier
- * @cfg:	FDB Configuration
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_fdb_add(struct fsl_mc_io		*mc_io,
 		 u32			cmd_flags,
 		 u16			token,
 		 u16			*fdb_id,
 		 const struct dpsw_fdb_cfg	*cfg);
 
-/**
- * dpsw_fdb_remove() - Remove FDB from switch
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @fdb_id:	Forwarding Database Identifier
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_fdb_remove(struct fsl_mc_io	*mc_io,
 		    u32		cmd_flags,
 		    u16		token,
@@ -1617,49 +932,18 @@ struct dpsw_fdb_unicast_cfg {
 	u16			if_egress;
 };
 
-/**
- * dpsw_fdb_add_unicast() - Function adds an unicast entry into MAC lookup table
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @fdb_id:	Forwarding Database Identifier
- * @cfg:	Unicast entry configuration
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_fdb_add_unicast(struct fsl_mc_io			*mc_io,
 			 u32				cmd_flags,
 			 u16				token,
 			 u16				fdb_id,
 			 const struct dpsw_fdb_unicast_cfg	*cfg);
 
-/**
- * dpsw_fdb_get_unicast() - Get unicast entry from MAC lookup table by
- *		unicast Ethernet address
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @fdb_id:	Forwarding Database Identifier
- * @cfg:	Returned unicast entry configuration
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_fdb_get_unicast(struct fsl_mc_io		*mc_io,
 			 u32			cmd_flags,
 			 u16			token,
 			 u16			fdb_id,
 			 struct dpsw_fdb_unicast_cfg	*cfg);
 
-/**
- * dpsw_fdb_remove_unicast() - removes an entry from MAC lookup table
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @fdb_id:	Forwarding Database Identifier
- * @cfg:	Unicast entry configuration
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_fdb_remove_unicast(struct fsl_mc_io			*mc_io,
 			    u32				cmd_flags,
 			    u16				token,
@@ -1680,62 +964,18 @@ struct dpsw_fdb_multicast_cfg {
 	u16			if_id[DPSW_MAX_IF];
 };
 
-/**
- * dpsw_fdb_add_multicast() - Add a set of egress interfaces to multi-cast group
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @fdb_id:	Forwarding Database Identifier
- * @cfg:	Multicast entry configuration
- *
- * If group doesn't exist, it will be created.
- * It adds only interfaces not belonging to this multicast group
- * yet, otherwise error will be generated and the command is
- * ignored.
- * This function may be called numerous times always providing
- * required interfaces delta.
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_fdb_add_multicast(struct fsl_mc_io			*mc_io,
 			   u32				cmd_flags,
 			   u16				token,
 			   u16				fdb_id,
 			   const struct dpsw_fdb_multicast_cfg	*cfg);
 
-/**
- * dpsw_fdb_get_multicast() - Reading multi-cast group by multi-cast Ethernet
- *				address.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @fdb_id:	Forwarding Database Identifier
- * @cfg:	Returned multicast entry configuration
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_fdb_get_multicast(struct fsl_mc_io			*mc_io,
 			   u32				cmd_flags,
 			   u16				token,
 			   u16				fdb_id,
 			   struct dpsw_fdb_multicast_cfg	*cfg);
 
-/**
- * dpsw_fdb_remove_multicast() - Removing interfaces from an existing multicast
- *				group.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @fdb_id:	Forwarding Database Identifier
- * @cfg:	Multicast entry configuration
- *
- * Interfaces provided by this API have to exist in the group,
- * otherwise an error will be returned and an entire command
- * ignored. If there is no interface left in the group,
- * an entire group is deleted
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_fdb_remove_multicast(struct fsl_mc_io			*mc_io,
 			      u32				cmd_flags,
 			      u16				token,
@@ -1811,16 +1051,6 @@ struct dpsw_fdb_attr {
 	u16			max_fdb_mc_groups;
 };
 
-/**
- * dpsw_fdb_get_attributes() - Get FDB attributes
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @fdb_id:	Forwarding Database Identifier
- * @attr:	Returned FDB attributes
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
 int dpsw_fdb_get_attributes(struct fsl_mc_io		*mc_io,
 			    u32			cmd_flags,
 			    u16			token,
@@ -1921,80 +1151,26 @@ struct dpsw_acl_entry_cfg {
 	int                     precedence;
 };
 
-/**
- * dpsw_acl_add() - Adds ACL to L2 switch.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @acl_id:	Returned ACL ID, for the future reference
- * @cfg:	ACL configuration
- *
- * Create Access Control List. Multiple ACLs can be created and
- * co-exist in L2 switch
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_acl_add(struct fsl_mc_io		*mc_io,
 		 u32			cmd_flags,
 		 u16			token,
 		 u16			*acl_id,
 		 const struct dpsw_acl_cfg	*cfg);
 
-/**
- * dpsw_acl_remove() - Removes ACL from L2 switch.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @acl_id:	ACL ID
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_acl_remove(struct fsl_mc_io	*mc_io,
 		    u32		cmd_flags,
 		    u16		token,
 		    u16		acl_id);
 
-/**
- * dpsw_acl_prepare_entry_cfg() - Set an entry to ACL.
- * @key:	key
- * @entry_cfg_buf: Zeroed 256 bytes of memory before mapping it to DMA
- *
- * This function has to be called before adding or removing acl_entry
- *
- */
 void dpsw_acl_prepare_entry_cfg(const struct dpsw_acl_key	*key,
 				u8			*entry_cfg_buf);
 
-/**
- * dpsw_acl_add_entry() - Adds an entry to ACL.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @acl_id:	ACL ID
- * @cfg:	entry configuration
- *
- * warning: This function has to be called after dpsw_acl_set_entry_cfg()
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_acl_add_entry(struct fsl_mc_io		*mc_io,
 		       u32			cmd_flags,
 		       u16			token,
 		       u16			acl_id,
 		       const struct dpsw_acl_entry_cfg	*cfg);
 
-/**
- * dpsw_acl_remove_entry() - Removes an entry from ACL.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @acl_id:	ACL ID
- * @cfg:	entry configuration
- *
- * warning: This function has to be called after dpsw_acl_set_entry_cfg()
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_acl_remove_entry(struct fsl_mc_io			*mc_io,
 			  u32				cmd_flags,
 			  u16				token,
@@ -2011,32 +1187,12 @@ struct dpsw_acl_if_cfg {
 	u16	if_id[DPSW_MAX_IF];
 };
 
-/**
- * dpsw_acl_add_if() - Associate interface/interfaces with ACL.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @acl_id:	ACL ID
- * @cfg:	interfaces list
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_acl_add_if(struct fsl_mc_io			*mc_io,
 		    u32				cmd_flags,
 		    u16				token,
 		    u16				acl_id,
 		    const struct dpsw_acl_if_cfg	*cfg);
 
-/**
- * dpsw_acl_remove_if() - De-associate interface/interfaces from ACL.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @acl_id:	ACL ID
- * @cfg:	interfaces list
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpsw_acl_remove_if(struct fsl_mc_io		*mc_io,
 		       u32			cmd_flags,
 		       u16			token,
@@ -2055,16 +1211,6 @@ struct dpsw_acl_attr {
 	u16 num_ifs;
 };
 
-/**
-* dpsw_acl_get_attributes() - Get specific counter of particular interface
-* @mc_io:	Pointer to MC portal's I/O object
-* @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
-* @token:	Token of DPSW object
-* @acl_id:      ACL Identifier
-* @attr:        Returned ACL attributes
-*
-* Return:	'0' on Success; Error code otherwise.
-*/
 int dpsw_acl_get_attributes(struct fsl_mc_io		*mc_io,
 			    u32			cmd_flags,
 			    u16			token,
@@ -2082,15 +1228,6 @@ struct dpsw_ctrl_if_attr {
 	u32	tx_err_conf_fqid;
 };
 
-/**
-* dpsw_ctrl_if_get_attributes() - Obtain control interface attributes
-* @mc_io:	Pointer to MC portal's I/O object
-* @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
-* @token:	Token of DPSW object
-* @attr:        Returned control interface attributes
-*
-* Return:	'0' on Success; Error code otherwise.
-*/
 int dpsw_ctrl_if_get_attributes(struct fsl_mc_io		*mc_io,
 				u32			cmd_flags,
 				u16			token,
@@ -2122,53 +1259,19 @@ struct dpsw_ctrl_if_pools_cfg {
 	} pools[DPSW_MAX_DPBP];
 };
 
-/**
-* dpsw_ctrl_if_set_pools() - Set control interface buffer pools
-* @mc_io:	Pointer to MC portal's I/O object
-* @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
-* @token:	Token of DPSW object
-* @cfg:         buffer pools configuration
-*
-* Return:	'0' on Success; Error code otherwise.
-*/
 int dpsw_ctrl_if_set_pools(struct fsl_mc_io			*mc_io,
 			   u32				cmd_flags,
 			   u16				token,
 			   const struct dpsw_ctrl_if_pools_cfg *cfg);
 
-/**
-* dpsw_ctrl_if_enable() - Enable control interface
-* @mc_io:	Pointer to MC portal's I/O object
-* @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
-* @token:	Token of DPSW object
-*
-* Return:	'0' on Success; Error code otherwise.
-*/
 int dpsw_ctrl_if_enable(struct fsl_mc_io	*mc_io,
 			u32		cmd_flags,
 			u16		token);
 
-/**
-* dpsw_ctrl_if_disable() - Function disables control interface
-* @mc_io:	Pointer to MC portal's I/O object
-* @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
-* @token:	Token of DPSW object
-*
-* Return:	'0' on Success; Error code otherwise.
-*/
 int dpsw_ctrl_if_disable(struct fsl_mc_io	*mc_io,
 			 u32		cmd_flags,
 			 u16		token);
 
-/**
- * dpsw_get_api_version() - Get Data Path Switch API version
- * @mc_io:  Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @major_ver:	Major version of data path switch API
- * @minor_ver:	Minor version of data path switch API
- *
- * Return:  '0' on Success; Error code otherwise.
- */
 int dpsw_get_api_version(struct fsl_mc_io *mc_io,
 			 u32 cmd_flags,
 			 u16 *major_ver,
-- 
2.9.3

