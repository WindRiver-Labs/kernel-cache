From 56ed580206987c9618640baa233d4505a8b7151f Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@nxp.com>
Date: Fri, 4 Mar 2016 16:37:01 +0200
Subject: [PATCH 266/388] staging: fsl-dpaa2/eth: Make hashing configuration
 static

No longer allow the user to modify (through ethtool) the hash key
fields. Instead, the key is static and includes all supported flow
steering fields.

This will help implementing proper flow steering, now that MC
supports FS masking. Given that both hashing and flow steering must
share a single key, leaving the hash key configurable would make
implementation difficult without adding significant value for the
user.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c     |  2 +-
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h     |  9 +---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c | 62 +++-------------------
 3 files changed, 10 insertions(+), 63 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index f034db3..6d803a1 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -2174,7 +2174,7 @@ static int bind_dpni(struct dpaa2_eth_priv *priv)
 	 * header fields
 	 */
 	if (dpaa2_eth_hash_enabled(priv)) {
-		err = dpaa2_eth_set_hash(net_dev, DPAA2_RXH_SUPPORTED);
+		err = dpaa2_eth_set_hash(net_dev);
 		if (err)
 			return err;
 	}
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index f29b283..cb7dd7c 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -330,7 +330,7 @@ struct dpaa2_eth_priv {
 	struct task_struct *poll_thread;
 
 	/* enabled ethtool hashing bits */
-	u64 rx_hash_fields;
+	u64 rx_flow_hash;
 
 #ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
 	struct dpaa2_debugfs dbg;
@@ -345,11 +345,6 @@ struct dpaa2_eth_priv {
 	bool ts_rx_en; /* Rx timestamping enabled */
 };
 
-/* default Rx hash options, set during probing */
-#define DPAA2_RXH_SUPPORTED	(RXH_L2DA | RXH_VLAN | RXH_L3_PROTO \
-				| RXH_IP_SRC | RXH_IP_DST | RXH_L4_B_0_1 \
-				| RXH_L4_B_2_3)
-
 #define dpaa2_eth_hash_enabled(priv)	\
 	((priv)->dpni_attrs.options & DPNI_OPT_DIST_HASH)
 
@@ -363,7 +358,7 @@ struct dpaa2_eth_priv {
 
 extern const struct ethtool_ops dpaa2_ethtool_ops;
 
-int dpaa2_eth_set_hash(struct net_device *net_dev, u64 flags);
+int dpaa2_eth_set_hash(struct net_device *net_dev);
 
 static int dpaa2_eth_queue_count(struct dpaa2_eth_priv *priv)
 {
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
index 6cadb0b..4d0274c 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
@@ -331,7 +331,7 @@ static int cls_is_enabled(struct net_device *net_dev, u64 flag)
 {
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
 
-	return !!(priv->rx_hash_fields & flag);
+	return !!(priv->rx_flow_hash & flag);
 }
 
 static int cls_key_off(struct net_device *net_dev, u64 flag)
@@ -386,40 +386,23 @@ void check_fs_support(struct net_device *net_dev)
 	}
 }
 
-/* Set RX hash options
- * flags is a combination of RXH_ bits
- */
-int dpaa2_eth_set_hash(struct net_device *net_dev, u64 flags)
+/* Set RX hash options */
+int dpaa2_eth_set_hash(struct net_device *net_dev)
 {
 	struct device *dev = net_dev->dev.parent;
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
 	struct dpkg_profile_cfg cls_cfg;
 	struct dpni_rx_tc_dist_cfg dist_cfg;
 	u8 *dma_mem;
-	u64 enabled_flags = 0;
 	int i;
 	int err = 0;
 
-	if (!dpaa2_eth_hash_enabled(priv)) {
-		dev_err(dev, "Hashing support is not enabled\n");
-		return -EOPNOTSUPP;
-	}
-
-	if (flags & ~DPAA2_RXH_SUPPORTED) {
-		/* RXH_DISCARD is not supported */
-		dev_err(dev, "unsupported option selected, supported options are: mvtsdfn\n");
-		return -EOPNOTSUPP;
-	}
-
 	memset(&cls_cfg, 0, sizeof(cls_cfg));
 
 	for (i = 0; i < ARRAY_SIZE(hash_fields); i++) {
 		struct dpkg_extract *key =
 			&cls_cfg.extracts[cls_cfg.num_extracts];
 
-		if (!(flags & hash_fields[i].rxnfc_field))
-			continue;
-
 		if (cls_cfg.num_extracts >= DPKG_MAX_NUM_OF_EXTRACTS) {
 			dev_err(dev, "error adding key extraction rule, too many rules?\n");
 			return -E2BIG;
@@ -431,7 +414,7 @@ int dpaa2_eth_set_hash(struct net_device *net_dev, u64 flags)
 		key->extract.from_hdr.field = hash_fields[i].cls_field;
 		cls_cfg.num_extracts++;
 
-		enabled_flags |= hash_fields[i].rxnfc_field;
+		priv->rx_flow_hash |= hash_fields[i].rxnfc_field;
 	}
 
 	dma_mem = kzalloc(DPAA2_CLASSIFIER_DMA_SIZE, GFP_DMA | GFP_KERNEL);
@@ -473,8 +456,6 @@ int dpaa2_eth_set_hash(struct net_device *net_dev, u64 flags)
 		return err;
 	}
 
-	priv->rx_hash_fields = enabled_flags;
-
 	return 0;
 }
 
@@ -727,40 +708,12 @@ static int del_cls(struct net_device *net_dev, int location)
 	return 0;
 }
 
-static void clear_cls(struct net_device *net_dev)
-{
-	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
-	int i, err;
-
-	for (i = 0; i < DPAA2_CLASSIFIER_ENTRY_COUNT; i++) {
-		if (!priv->cls_rule[i].in_use)
-			continue;
-
-		err = del_cls(net_dev, i);
-		if (err)
-			netdev_warn(net_dev,
-				    "err trying to delete classification entry %d\n",
-				    i);
-	}
-}
-
 static int dpaa2_eth_set_rxnfc(struct net_device *net_dev,
 			       struct ethtool_rxnfc *rxnfc)
 {
 	int err = 0;
 
 	switch (rxnfc->cmd) {
-	case ETHTOOL_SRXFH:
-		/* first off clear ALL classification rules, chaging key
-		 * composition will break them anyway
-		 */
-		clear_cls(net_dev);
-		/* we purposely ignore cmd->flow_type for now, because the
-		 * classifier only supports a single set of fields for all
-		 * protocols
-		 */
-		err = dpaa2_eth_set_hash(net_dev, rxnfc->data);
-		break;
 	case ETHTOOL_SRXCLSRLINS:
 		err = add_cls(net_dev, &rxnfc->fs);
 		break;
@@ -785,11 +738,10 @@ static int dpaa2_eth_get_rxnfc(struct net_device *net_dev,
 
 	switch (rxnfc->cmd) {
 	case ETHTOOL_GRXFH:
-		/* we purposely ignore cmd->flow_type for now, because the
-		 * classifier only supports a single set of fields for all
-		 * protocols
+		/* we purposely ignore cmd->flow_type, because the hashing key
+		 * is the same (and fixed) for all protocols
 		 */
-		rxnfc->data = priv->rx_hash_fields;
+		rxnfc->data = priv->rx_flow_hash;
 		break;
 
 	case ETHTOOL_GRXRINGS:
-- 
2.9.3

