From f3f458f13c7d1260ff8745c833881e70974619e1 Mon Sep 17 00:00:00 2001
From: Ahmed Mansour <ahmed.mansour@nxp.com>
Date: Tue, 12 Jul 2016 13:46:02 -0400
Subject: [PATCH 159/388] qbman: Clear interrupt in status register

Ported patch from userspace

When an IRQ source is added, the corresponding interrupt condition
should be cleared in interrupt status register. Not doing so leads to
a previously asserted stale interrupt condition in status register
generate a false interrupt as soon as interrupt condition is enabled

Signed-off-by: Vakul Garg <vakul@freescale.com>

JIRA issue#: QLINUX-5730

Signed-off-by: Ahmed Mansour <ahmed.mansour@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 0f33a74..b5f6da4 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -1286,8 +1286,15 @@ int qman_p_irqsource_add(struct qman_portal *p, u32 bits __maybe_unused)
 	else
 #endif
 	{
+		bits = bits & QM_PIRQ_VISIBLE;
 		PORTAL_IRQ_LOCK(p, irqflags);
-		set_bits(bits & QM_PIRQ_VISIBLE, &p->irq_sources);
+
+		/* Clear any previously remaining interrupt conditions in
+		 * QCSP_ISR. This prevents raising a false interrupt when
+		 * interrupt conditions are enabled in QCSP_IER.
+		 */
+		qm_isr_status_clear(&p->p, bits);
+		set_bits(bits, &p->irq_sources);
 		qm_isr_enable_write(&p->p, p->irq_sources);
 		PORTAL_IRQ_UNLOCK(p, irqflags);
 	}
-- 
2.9.3

