From 653a39cfb140abc8b613aef7dcefe58266024254 Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@nxp.com>
Date: Mon, 21 Nov 2016 12:29:25 +0200
Subject: [PATCH 312/388] dpaa2-ethsw: properly align function comments

Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethsw/dpsw.c | 218 ++++++++++++++++-----------------
 1 file changed, 109 insertions(+), 109 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
index eab649d..e9cf54d 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
@@ -143,7 +143,7 @@ int dpsw_close(struct fsl_mc_io *mc_io,
  * @dprc_token:	Parent container token; '0' for default container
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @cfg:	Configuration structure
- * @obj_id: returned object id
+ * @obj_id:	Returned object id
  *
  * Create the DPSW object, allocate required resources and
  * perform required initialization.
@@ -233,7 +233,7 @@ int dpsw_destroy(struct fsl_mc_io *mc_io,
  * dpsw_enable() - Enable DPSW functionality
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
+ * @token:	Token of DPSW object
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -256,7 +256,7 @@ int dpsw_enable(struct fsl_mc_io *mc_io,
  * dpsw_disable() - Disable DPSW functionality
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
+ * @token:	Token of DPSW object
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -417,9 +417,9 @@ int dpsw_get_irq(struct fsl_mc_io *mc_io,
  * dpsw_set_irq_enable() - Set overall interrupt state.
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPCI object
+ * @token:	Token of DPCI object
  * @irq_index:	The interrupt index to configure
- * @en:			Interrupt state - enable = 1, disable = 0
+ * @en:		Interrupt state - enable = 1, disable = 0
  *
  * Allows GPP software to control when interrupts are generated.
  * Each interrupt can have up to 32 causes.  The enable/disable control's the
@@ -453,9 +453,9 @@ int dpsw_set_irq_enable(struct fsl_mc_io *mc_io,
  * dpsw_get_irq_enable() - Get overall interrupt state
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
+ * @token:	Token of DPSW object
  * @irq_index:	The interrupt index to configure
- * @en:			Returned Interrupt state - enable = 1, disable = 0
+ * @en:		Returned Interrupt state - enable = 1, disable = 0
  *
  * Return:	'0' on Success; Error code otherwise.
  */
@@ -493,12 +493,12 @@ int dpsw_get_irq_enable(struct fsl_mc_io *mc_io,
  * dpsw_set_irq_mask() - Set interrupt mask.
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPCI object
+ * @token:	Token of DPCI object
  * @irq_index:	The interrupt index to configure
- * @mask:		event mask to trigger interrupt;
- *				each bit:
- *					0 = ignore event
- *					1 = consider event for asserting IRQ
+ * @mask:	Event mask to trigger interrupt;
+ *		each bit:
+ *			0 = ignore event
+ *			1 = consider event for asserting IRQ
  *
  * Every interrupt can have up to 32 causes and the interrupt model supports
  * masking/unmasking each cause independently
@@ -530,9 +530,9 @@ int dpsw_set_irq_mask(struct fsl_mc_io *mc_io,
  * dpsw_get_irq_mask() - Get interrupt mask.
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
+ * @token:	Token of DPSW object
  * @irq_index:	The interrupt index to configure
- * @mask:		Returned event mask to trigger interrupt
+ * @mask:	Returned event mask to trigger interrupt
  *
  * Every interrupt can have up to 32 causes and the interrupt model supports
  * masking/unmasking each cause independently
@@ -573,11 +573,11 @@ int dpsw_get_irq_mask(struct fsl_mc_io *mc_io,
  * dpsw_get_irq_status() - Get the current status of any pending interrupts
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
+ * @token:	Token of DPSW object
  * @irq_index:	The interrupt index to configure
- * @status:		Returned interrupts status - one bit per cause:
- *					0 = no interrupt pending
- *					1 = interrupt pending
+ * @status:	Returned interrupts status - one bit per cause:
+ *			0 = no interrupt pending
+ *			1 = interrupt pending
  *
  * Return:	'0' on Success; Error code otherwise.
  */
@@ -616,11 +616,11 @@ int dpsw_get_irq_status(struct fsl_mc_io *mc_io,
  * dpsw_clear_irq_status() - Clear a pending interrupt's status
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPCI object
+ * @token:	Token of DPCI object
  * @irq_index:	The interrupt index to configure
- * @status:		bits to clear (W1C) - one bit per cause:
- *					0 = don't change
- *					1 = clear status bit
+ * @status:	bits to clear (W1C) - one bit per cause:
+ *			0 = don't change
+ *			1 = clear status bit
  *
  * Return:	'0' on Success; Error code otherwise.
  */
@@ -649,8 +649,8 @@ int dpsw_clear_irq_status(struct fsl_mc_io *mc_io,
  * dpsw_get_attributes() - Retrieve DPSW attributes
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @attr:		Returned DPSW attributes
+ * @token:	Token of DPSW object
+ * @attr:	Returned DPSW attributes
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -696,10 +696,10 @@ int dpsw_get_attributes(struct fsl_mc_io *mc_io,
  * dpsw_set_reflection_if() - Set target interface for reflected interfaces.
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Id
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Id
  *
- *	Only one reflection receive interface is allowed per switch
+ * Only one reflection receive interface is allowed per switch
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -723,12 +723,12 @@ int dpsw_set_reflection_if(struct fsl_mc_io *mc_io,
 }
 
 /**
- * dpsw_if_set_link_cfg() - set the link configuration.
+ * dpsw_if_set_link_cfg() - Set the link configuration.
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token: Token of DPSW object
- * @if_id: interface id
- * @cfg: Link configuration
+ * @token:	Token of DPSW object
+ * @if_id:	Interface id
+ * @cfg:	Link configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
@@ -758,11 +758,11 @@ int dpsw_if_set_link_cfg(struct fsl_mc_io *mc_io,
  * dpsw_if_get_link_state - Return the link state
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token: Token of DPSW object
- * @if_id: interface id
- * @state: link state	1 - linkup, 0 - link down or disconnected
+ * @token:	Token of DPSW object
+ * @if_id:	Interface id
+ * @state:	Link state	1 - linkup, 0 - link down or disconnected
  *
- * @returns	'0' on Success; Error code otherwise.
+ * @Return	'0' on Success; Error code otherwise.
  */
 int dpsw_if_get_link_state(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
@@ -800,9 +800,9 @@ int dpsw_if_get_link_state(struct fsl_mc_io *mc_io,
  * dpsw_if_set_flooding() - Enable Disable flooding for particular interface
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @en:			1 - enable, 0 - disable
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @en:		1 - enable, 0 - disable
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -831,9 +831,9 @@ int dpsw_if_set_flooding(struct fsl_mc_io *mc_io,
  * dpsw_if_set_broadcast() - Enable/disable broadcast for particular interface
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @en:			1 - enable, 0 - disable
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @en:		1 - enable, 0 - disable
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -862,9 +862,9 @@ int dpsw_if_set_broadcast(struct fsl_mc_io *mc_io,
  * dpsw_if_set_multicast() - Enable/disable multicast for particular interface
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @en:			1 - enable, 0 - disable
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @en:		1 - enable, 0 - disable
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -893,9 +893,9 @@ int dpsw_if_set_multicast(struct fsl_mc_io *mc_io,
  * dpsw_if_set_tci() - Set default VLAN Tag Control Information (TCI)
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Tag Control Information Configuration
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @cfg:	Tag Control Information Configuration
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -927,9 +927,9 @@ int dpsw_if_set_tci(struct fsl_mc_io *mc_io,
  * dpsw_if_get_tci() - Get default VLAN Tag Control Information (TCI)
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Tag Control Information Configuration
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @cfg:	Tag Control Information Configuration
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -969,9 +969,9 @@ int dpsw_if_get_tci(struct fsl_mc_io *mc_io,
  * dpsw_if_set_stp() - Function sets Spanning Tree Protocol (STP) state.
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		STP State configuration parameters
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @cfg:	STP State configuration parameters
  *
  * The following STP states are supported -
  * blocking, listening, learning, forwarding and disabled.
@@ -1004,9 +1004,9 @@ int dpsw_if_set_stp(struct fsl_mc_io *mc_io,
  * dpsw_if_set_accepted_frames()
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Frame types configuration
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @cfg:	Frame types configuration
  *
  * When is admit_only_vlan_tagged- the device will discard untagged
  * frames or Priority-Tagged frames received on this interface.
@@ -1045,8 +1045,8 @@ int dpsw_if_set_accepted_frames(struct fsl_mc_io *mc_io,
  * dpsw_if_set_accept_all_vlan()
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
  * @accept_all:	Accept or drop frames having different VLAN
  *
  * When this is accept (FALSE), the device will discard incoming
@@ -1080,9 +1080,9 @@ int dpsw_if_set_accept_all_vlan(struct fsl_mc_io *mc_io,
  * dpsw_if_get_counter() - Get specific counter of particular interface
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @type:		Counter type
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @type:	Counter type
  * @counter:	return value
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
@@ -1123,9 +1123,9 @@ int dpsw_if_get_counter(struct fsl_mc_io *mc_io,
  * dpsw_if_set_counter() - Set specific counter of particular interface
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @type:		Counter type
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @type:	Counter type
  * @counter:	New counter value
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
@@ -1158,9 +1158,9 @@ int dpsw_if_set_counter(struct fsl_mc_io *mc_io,
  *				of frame fields
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Traffic class mapping configuration
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @cfg:	Traffic class mapping configuration
  *
  * Function is used for mapping variety of frame fields (DSCP, PCP)
  * to Traffic Class. Traffic class is a number
@@ -1232,9 +1232,9 @@ int dpsw_if_add_reflection(struct fsl_mc_io *mc_io,
  * dpsw_if_remove_reflection() - Remove interface to be reflected or mirrored
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
- * @cfg:		Reflection configuration
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
+ * @cfg:	Reflection configuration
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -1337,8 +1337,8 @@ int dpsw_if_set_metering(struct fsl_mc_io *mc_io,
 
 /**
  * dpsw_prepare_early_drop() - Prepare an early drop for setting in to interface
- * @cfg:	Early-drop configuration
- * @early_drop_buf: Zeroed 256 bytes of memory before mapping it to DMA
+ * @cfg:		Early-drop configuration
+ * @early_drop_buf:	Zeroed 256 bytes of memory before mapping it to DMA
  *
  * This function has to be called before dpsw_if_tc_set_early_drop
  *
@@ -1363,12 +1363,12 @@ void dpsw_prepare_early_drop(const struct dpsw_early_drop_cfg *cfg,
 /**
  * dpsw_if_set_early_drop() - Set interface traffic class early-drop
  *				configuration
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
+ * @mc_io:		Pointer to MC portal's I/O object
+ * @cmd_flags:		Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
  * @if_id:		Interface Identifier
- * @tc_id:	Traffic class selection (0-7)
- * @early_drop_iova:  I/O virtual address of 64 bytes;
+ * @tc_id:		Traffic class selection (0-7)
+ * @early_drop_iova:	I/O virtual address of 64 bytes;
  * Must be cacheline-aligned and DMA-able memory
  *
  * warning: Before calling this function, call dpsw_prepare_if_tc_early_drop()
@@ -1403,8 +1403,8 @@ int dpsw_if_set_early_drop(struct fsl_mc_io *mc_io,
  * dpsw_add_custom_tpid() - API Configures a distinct Ethernet type value
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @cfg:		Tag Protocol identifier
+ * @token:	Token of DPSW object
+ * @cfg:	Tag Protocol identifier
  *
  * API Configures a distinct Ethernet type value (or TPID value)
  * to indicate a VLAN tag in addition to the common
@@ -1436,8 +1436,8 @@ int dpsw_add_custom_tpid(struct fsl_mc_io *mc_io,
  * dpsw_remove_custom_tpid - API removes a distinct Ethernet type value
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @cfg:		Tag Protocol identifier
+ * @token:	Token of DPSW object
+ * @cfg:	Tag Protocol identifier
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -1464,8 +1464,8 @@ int dpsw_remove_custom_tpid(struct fsl_mc_io *mc_io,
  * dpsw_if_enable() - Enable Interface
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -1492,8 +1492,8 @@ int dpsw_if_enable(struct fsl_mc_io *mc_io,
  * dpsw_if_disable() - Disable Interface
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPSW object
- * @if_id:		Interface Identifier
+ * @token:	Token of DPSW object
+ * @if_id:	Interface Identifier
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -1564,11 +1564,11 @@ int dpsw_if_get_attributes(struct fsl_mc_io *mc_io,
 
 /**
  * dpsw_if_set_max_frame_length() - Set Maximum Receive frame length.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @if_id:	Interface Identifier
- * @frame_length: Maximum Frame Length
+ * @mc_io:		Pointer to MC portal's I/O object
+ * @cmd_flags:		Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @frame_length:	Maximum Frame Length
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -1595,11 +1595,11 @@ int dpsw_if_set_max_frame_length(struct fsl_mc_io *mc_io,
 
 /**
  * dpsw_if_get_max_frame_length() - Get Maximum Receive frame length.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @if_id:	Interface Identifier
- * @frame_length: Returned maximum Frame Length
+ * @mc_io:		Pointer to MC portal's I/O object
+ * @cmd_flags:		Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSW object
+ * @if_id:		Interface Identifier
+ * @frame_length:	Returned maximum Frame Length
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -1713,7 +1713,7 @@ int dpsw_vlan_add_if(struct fsl_mc_io *mc_io,
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSW object
  * @vlan_id:	VLAN Identifier
- * @cfg:	set of interfaces that should be transmitted as untagged
+ * @cfg:	Set of interfaces that should be transmitted as untagged
  *
  * These interfaces should already belong to this VLAN.
  * By default all interfaces are transmitted as tagged.
@@ -1824,7 +1824,7 @@ int dpsw_vlan_remove_if(struct fsl_mc_io *mc_io,
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSW object
  * @vlan_id:	VLAN Identifier
- * @cfg:	set of interfaces that should be removed
+ * @cfg:	Set of interfaces that should be removed
  *
  * Interfaces provided by API have to belong to this VLAN and
  * configured untagged, otherwise an error is returned and the
@@ -1860,7 +1860,7 @@ int dpsw_vlan_remove_if_untagged(struct fsl_mc_io *mc_io,
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSW object
  * @vlan_id:	VLAN Identifier
- * @cfg:	set of interfaces used for flooding
+ * @cfg:	Set of interfaces used for flooding
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -2401,7 +2401,7 @@ int dpsw_fdb_remove_multicast(struct fsl_mc_io *mc_io,
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSW object
  * @fdb_id:	Forwarding Database Identifier
- * @mode:	learning mode
+ * @mode:	Learning mode
  *
  * Return:	Completion status. '0' on Success; Error code otherwise.
  */
@@ -2543,8 +2543,8 @@ int dpsw_acl_remove(struct fsl_mc_io *mc_io,
 
 /**
  * dpsw_acl_prepare_entry_cfg() - Set an entry to ACL.
- * @key:	key
- * @entry_cfg_buf: Zeroed 256 bytes of memory before mapping it to DMA
+ * @key:		Key
+ * @entry_cfg_buf:	Zeroed 256 bytes of memory before mapping it to DMA
  *
  * This function has to be called before adding or removing acl_entry
  *
@@ -2593,7 +2593,7 @@ void dpsw_acl_prepare_entry_cfg(const struct dpsw_acl_key *key,
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSW object
  * @acl_id:	ACL ID
- * @cfg:	entry configuration
+ * @cfg:	Entry configuration
  *
  * warning: This function has to be called after dpsw_acl_set_entry_cfg()
  *
@@ -2629,7 +2629,7 @@ int dpsw_acl_add_entry(struct fsl_mc_io *mc_io,
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSW object
  * @acl_id:	ACL ID
- * @cfg:	entry configuration
+ * @cfg:	Entry configuration
  *
  * warning: This function has to be called after dpsw_acl_set_entry_cfg()
  *
@@ -2665,7 +2665,7 @@ int dpsw_acl_remove_entry(struct fsl_mc_io *mc_io,
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSW object
  * @acl_id:	ACL ID
- * @cfg:	interfaces list
+ * @cfg:	Interfaces list
  *
  * Return:	'0' on Success; Error code otherwise.
  */
@@ -2697,7 +2697,7 @@ int dpsw_acl_add_if(struct fsl_mc_io *mc_io,
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSW object
  * @acl_id:	ACL ID
- * @cfg:	interfaces list
+ * @cfg:	Interfaces list
  *
  * Return:	'0' on Success; Error code otherwise.
  */
@@ -2728,8 +2728,8 @@ int dpsw_acl_remove_if(struct fsl_mc_io *mc_io,
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSW object
- * @acl_id:      ACL Identifier
- * @attr:        Returned ACL attributes
+ * @acl_id:	ACL Identifier
+ * @attr:	Returned ACL attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
@@ -2807,7 +2807,7 @@ int dpsw_ctrl_if_get_attributes(struct fsl_mc_io *mc_io,
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSW object
- * @cfg:		buffer pools configuration
+ * @cfg:	Buffer pools configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
@@ -2883,7 +2883,7 @@ int dpsw_ctrl_if_disable(struct fsl_mc_io *mc_io,
 }
 /**
  * dpsw_get_api_version() - Get Data Path Switch API version
- * @mc_io:  Pointer to MC portal's I/O object
+ * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @major_ver:	Major version of data path switch API
  * @minor_ver:	Minor version of data path switch API
-- 
2.9.3

