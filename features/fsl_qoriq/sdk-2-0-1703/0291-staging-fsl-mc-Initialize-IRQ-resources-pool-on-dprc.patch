From d0cb42d8f7c5e96e1bd39cdac829379c6555b800 Mon Sep 17 00:00:00 2001
From: Catalin Horghidan <catalin.horghidan@nxp.com>
Date: Fri, 28 Oct 2016 18:35:04 +0300
Subject: [PATCH 291/388] staging: fsl-mc: Initialize IRQ resources pool on
 dprc objects scan

Provide the option on dprc objects scan to initialize
the IRQ resources pool before adding the found objects.
This ensures that there are enough IRQs\MSIs allocated
for all dicovered object that require IRQs from the
scanned container. The option is ignored if the IRQ pool
was already initialized.

Signed-off-by: Catalin Horghidan <catalin.horghidan@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dprc-driver.c    | 38 +++++++++++++++++++++++++----
 drivers/staging/fsl-mc/bus/mc-bus.c         |  4 +--
 drivers/staging/fsl-mc/include/mc-private.h |  9 ++++++-
 3 files changed, 43 insertions(+), 8 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dprc-driver.c b/drivers/staging/fsl-mc/bus/dprc-driver.c
index 66b1581..0b97ce6 100644
--- a/drivers/staging/fsl-mc/bus/dprc-driver.c
+++ b/drivers/staging/fsl-mc/bus/dprc-driver.c
@@ -254,6 +254,9 @@ void dprc_cleanup_all_resource_pools(struct fsl_mc_device *mc_bus_dev)
  * @driver_override: driver override to apply to new objects found in the DPRC,
  * or NULL, if none.
  * @total_irq_count: total number of IRQs needed by objects in the DPRC.
+ * @scan_options: options regarding object discovery. Current options include:
+ *  - FSL_MC_SCAN_DPRC_POPULATE_IRQ_POOL: initialize IRQ pool before adding
+ *  new objects; the option is ignored if the IRQ pool was already initialized.
  *
  * Detects objects added and removed from a DPRC and synchronizes the
  * state of the Linux bus driver, MC by adding and removing
@@ -269,13 +272,20 @@ void dprc_cleanup_all_resource_pools(struct fsl_mc_device *mc_bus_dev)
  */
 int dprc_scan_objects(struct fsl_mc_device *mc_bus_dev,
 		      const char *driver_override,
-		      unsigned int *total_irq_count)
+		      unsigned int *total_irq_count,
+		      unsigned int scan_options)
 {
 	int num_child_objects;
 	int dprc_get_obj_failures;
 	int error;
 	unsigned int irq_count = mc_bus_dev->obj_desc.irq_count;
 	struct dprc_obj_desc *child_obj_desc_array = NULL;
+	struct fsl_mc_bus *mc_bus;
+
+	if (WARN_ON(!total_irq_count)) {
+		dev_err(&mc_bus_dev->dev, "invalid input parameter: irq count\n");
+		return -EINVAL;
+	}
 
 	error = dprc_get_obj_count(mc_bus_dev->mc_io,
 				   0,
@@ -317,7 +327,7 @@ int dprc_scan_objects(struct fsl_mc_device *mc_bus_dev,
 			 *  abort the current scan.
 			 */
 			if (error == -ENXIO)
-				return error;
+				goto error;
 
 			if (error < 0) {
 				dev_err(&mc_bus_dev->dev,
@@ -359,7 +369,21 @@ int dprc_scan_objects(struct fsl_mc_device *mc_bus_dev,
 	*total_irq_count = irq_count;
 	dprc_remove_devices(mc_bus_dev, child_obj_desc_array,
 			    num_child_objects);
-
+	/* populate the irq pool before adding new devices */
+	if ((scan_options & FSL_MC_SCAN_DPRC_POPULATE_IRQ_POOL) != 0 &&
+		fsl_mc_interrupts_supported()) {
+		mc_bus = to_fsl_mc_bus(mc_bus_dev);
+		/* check if the irq resources were not already initialized */
+		if (!mc_bus->irq_resources) {
+			error = fsl_mc_populate_irq_pool(mc_bus, irq_count);
+			if (error < 0) {
+				dev_err(&mc_bus_dev->dev,
+						"%s: Failed to populate irq-pool\n",
+						__func__);
+				goto error;
+			}
+		}
+	}
 	dprc_add_new_devices(mc_bus_dev, driver_override, child_obj_desc_array,
 			     num_child_objects);
 
@@ -367,6 +391,10 @@ int dprc_scan_objects(struct fsl_mc_device *mc_bus_dev,
 		devm_kfree(&mc_bus_dev->dev, child_obj_desc_array);
 
 	return 0;
+error:
+	if (child_obj_desc_array)
+		devm_kfree(&mc_bus_dev->dev, child_obj_desc_array);
+	return error;
 }
 EXPORT_SYMBOL_GPL(dprc_scan_objects);
 
@@ -391,7 +419,7 @@ static int dprc_scan_container(struct fsl_mc_device *mc_bus_dev)
 	 * Discover objects in the DPRC:
 	 */
 	mutex_lock(&mc_bus->scan_mutex);
-	error = dprc_scan_objects(mc_bus_dev, NULL, &irq_count);
+	error = dprc_scan_objects(mc_bus_dev, NULL, &irq_count, 0);
 	mutex_unlock(&mc_bus->scan_mutex);
 	if (error < 0)
 		goto error;
@@ -470,7 +498,7 @@ static irqreturn_t dprc_irq0_handler_thread(int irq_num, void *arg)
 		      DPRC_IRQ_EVENT_OBJ_CREATED)) {
 		unsigned int irq_count;
 
-		error = dprc_scan_objects(mc_dev, NULL, &irq_count);
+		error = dprc_scan_objects(mc_dev, NULL, &irq_count, 0);
 		if (error < 0) {
 			if (error != -ENXIO) /* don't need to report aborted scan */
 				dev_err(dev, "dprc_scan_objects() failed: %d\n", error);
diff --git a/drivers/staging/fsl-mc/bus/mc-bus.c b/drivers/staging/fsl-mc/bus/mc-bus.c
index 188e0c0..5403e9b 100644
--- a/drivers/staging/fsl-mc/bus/mc-bus.c
+++ b/drivers/staging/fsl-mc/bus/mc-bus.c
@@ -166,7 +166,7 @@ static ssize_t rescan_store(struct device *dev,
 
 	if (val) {
 		mutex_lock(&root_mc_bus->scan_mutex);
-		dprc_scan_objects(root_mc_dev, NULL, &irq_count);
+		dprc_scan_objects(root_mc_dev, NULL, &irq_count, 0);
 		mutex_unlock(&root_mc_bus->scan_mutex);
 	}
 
@@ -200,7 +200,7 @@ static int scan_fsl_mc_bus(struct device *dev, void *data)
 		root_mc_dev = to_fsl_mc_device(dev);
 		root_mc_bus = to_fsl_mc_bus(root_mc_dev);
 		mutex_lock(&root_mc_bus->scan_mutex);
-		dprc_scan_objects(root_mc_dev, NULL, &irq_count);
+		dprc_scan_objects(root_mc_dev, NULL, &irq_count, 0);
 		mutex_unlock(&root_mc_bus->scan_mutex);
 	}
 
diff --git a/drivers/staging/fsl-mc/include/mc-private.h b/drivers/staging/fsl-mc/include/mc-private.h
index 58ed441..e4b12b5 100644
--- a/drivers/staging/fsl-mc/include/mc-private.h
+++ b/drivers/staging/fsl-mc/include/mc-private.h
@@ -39,6 +39,12 @@
 #define FSL_MC_IRQ_POOL_MAX_EXTRA_IRQS	64
 
 /**
+ * dprc_scan_objects option to populate the mc bus IRQ resource pool before
+ * adding new devices
+ */
+#define FSL_MC_SCAN_DPRC_POPULATE_IRQ_POOL 1
+
+/**
  * struct fsl_mc - Private data of a "fsl,qoriq-mc" platform device
  * @root_mc_bus_dev: MC object device representing the root DPRC
  * @irq_domain: IRQ domain for the fsl-mc bus type
@@ -139,7 +145,8 @@ void fsl_mc_device_remove(struct fsl_mc_device *mc_dev);
 
 int dprc_scan_objects(struct fsl_mc_device *mc_bus_dev,
 		      const char *driver_override,
-		      unsigned int *total_irq_count);
+		      unsigned int *total_irq_count,
+		      unsigned int scan_options);
 
 int __init dprc_driver_init(void);
 
-- 
2.9.3

