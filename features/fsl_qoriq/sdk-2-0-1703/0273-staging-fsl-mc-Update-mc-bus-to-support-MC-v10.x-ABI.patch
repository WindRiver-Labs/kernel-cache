From 2f485e9badfaa48a046181f77ed3022b3a5dc809 Mon Sep 17 00:00:00 2001
From: Catalin Horghidan <catalin.horghidan@nxp.com>
Date: Tue, 20 Sep 2016 11:48:55 +0300
Subject: [PATCH 273/388] staging: fsl-mc: Update mc-bus to support MC v10.x
 ABI

- update DPRC, DPMNG and DPMCP FLIBs to support the new command
versioning scheme
- update the dprc driver to use the object get version, create
and destroy commands
- the MC v9.x ABI will be no longer supported; the mc bus will
fail to probe for this MC version or older
- support DRPC version 6 or later

Signed-off-by: Catalin Horghidan <catalin.horghidan@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpmcp-cmd.h   | 29 +++++++------
 drivers/staging/fsl-mc/bus/dpmcp.c       | 42 ++++++++++++++-----
 drivers/staging/fsl-mc/bus/dpmcp.h       | 61 +++++++++++++++++----------
 drivers/staging/fsl-mc/bus/dpmng-cmd.h   |  6 ++-
 drivers/staging/fsl-mc/bus/dpmng.c       | 22 ----------
 drivers/staging/fsl-mc/bus/dprc-cmd.h    | 72 +++++++++++++++++---------------
 drivers/staging/fsl-mc/bus/dprc-driver.c | 68 +++++++++++++-----------------
 drivers/staging/fsl-mc/bus/dprc.c        | 47 ++++++++++++++++++++-
 drivers/staging/fsl-mc/bus/mc-bus.c      | 24 +++++++----
 drivers/staging/fsl-mc/include/dpmng.h   | 11 -----
 drivers/staging/fsl-mc/include/dprc.h    | 35 +++++++++++-----
 drivers/staging/fsl-mc/include/mc-cmd.h  | 33 +++++++++++++--
 12 files changed, 271 insertions(+), 179 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpmcp-cmd.h b/drivers/staging/fsl-mc/bus/dpmcp-cmd.h
index c9b52dd..1ad43bb 100644
--- a/drivers/staging/fsl-mc/bus/dpmcp-cmd.h
+++ b/drivers/staging/fsl-mc/bus/dpmcp-cmd.h
@@ -35,22 +35,25 @@
 /* Minimal supported DPMCP Version */
 #define DPMCP_MIN_VER_MAJOR				3
 #define DPMCP_MIN_VER_MINOR				0
+#define DPMCP_CMD_BASE_VERSION				1
+#define DPMCP_CMD_ID_OFFSET				4
 
 /* Command IDs */
-#define DPMCP_CMDID_CLOSE				0x800
-#define DPMCP_CMDID_OPEN				0x80b
-#define DPMCP_CMDID_CREATE				0x90b
-#define DPMCP_CMDID_DESTROY				0x900
+#define DPMCP_CMDID_CLOSE                               ((0x800 << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_OPEN                                ((0x80b << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_CREATE                              ((0x90b << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_DESTROY                             ((0x98b << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_GET_API_VERSION                     ((0xa0b << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
 
-#define DPMCP_CMDID_GET_ATTR				0x004
-#define DPMCP_CMDID_RESET				0x005
+#define DPMCP_CMDID_GET_ATTR                            ((0x004 << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_RESET                               ((0x005 << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
 
-#define DPMCP_CMDID_SET_IRQ				0x010
-#define DPMCP_CMDID_GET_IRQ				0x011
-#define DPMCP_CMDID_SET_IRQ_ENABLE			0x012
-#define DPMCP_CMDID_GET_IRQ_ENABLE			0x013
-#define DPMCP_CMDID_SET_IRQ_MASK			0x014
-#define DPMCP_CMDID_GET_IRQ_MASK			0x015
-#define DPMCP_CMDID_GET_IRQ_STATUS			0x016
+#define DPMCP_CMDID_SET_IRQ                             ((0x010 << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_GET_IRQ                             ((0x011 << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_SET_IRQ_ENABLE                      ((0x012 << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_GET_IRQ_ENABLE                      ((0x013 << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_SET_IRQ_MASK                        ((0x014 << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_GET_IRQ_MASK                        ((0x015 << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
+#define DPMCP_CMDID_GET_IRQ_STATUS                      ((0x016 << DPMCP_CMD_ID_OFFSET) | DPMCP_CMD_BASE_VERSION)
 
 #endif /* _FSL_DPMCP_CMD_H */
diff --git a/drivers/staging/fsl-mc/bus/dpmcp.c b/drivers/staging/fsl-mc/bus/dpmcp.c
index e23592a..ecbb108 100644
--- a/drivers/staging/fsl-mc/bus/dpmcp.c
+++ b/drivers/staging/fsl-mc/bus/dpmcp.c
@@ -75,17 +75,17 @@ int dpmcp_close(struct fsl_mc_io *mc_io,
 }
 
 int dpmcp_create(struct fsl_mc_io *mc_io,
+		 uint16_t dprc_token,
 		 uint32_t cmd_flags,
 		 const struct dpmcp_cfg *cfg,
-		 uint16_t *token)
+		 uint32_t *object_id)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_CREATE,
-					  cmd_flags,
-					  0);
+					cmd_flags, dprc_token);
 	cmd.params[0] |= mc_enc(0, 32, cfg->portal_id);
 
 	/* send command to mc*/
@@ -94,22 +94,24 @@ int dpmcp_create(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	*token = MC_CMD_HDR_READ_TOKEN(cmd.header);
+	*object_id = get_mc_cmd_create_object_id(&cmd);
 
 	return 0;
 }
 
 int dpmcp_destroy(struct fsl_mc_io *mc_io,
+		  uint16_t dprc_token,
 		  uint32_t cmd_flags,
-		  uint16_t token)
+		  uint32_t object_id)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_DESTROY,
-					  cmd_flags,
-					  token);
-
+					cmd_flags,
+					dprc_token);
+	/* set object id to destroy */
+	cmd.params[0] = mc_enc(0, sizeof object_id, object_id);
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
@@ -312,7 +314,27 @@ int dpmcp_get_attributes(struct fsl_mc_io *mc_io,
 
 	/* retrieve response parameters */
 	attr->id = (int)mc_dec(cmd.params[0], 32, 32);
-	attr->version.major = (uint16_t)mc_dec(cmd.params[1], 0, 16);
-	attr->version.minor = (uint16_t)mc_dec(cmd.params[1], 16, 16);
+
+	return 0;
+}
+
+int dpmcp_get_api_version(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
+			   uint16_t *major_ver,
+			   uint16_t *minor_ver)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_GET_API_VERSION,
+					cmd_flags,
+					0);
+
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	get_mc_cmd_object_api_ver(&cmd, major_ver, minor_ver);
+
 	return 0;
 }
diff --git a/drivers/staging/fsl-mc/bus/dpmcp.h b/drivers/staging/fsl-mc/bus/dpmcp.h
index e434a24..f8c701f 100644
--- a/drivers/staging/fsl-mc/bus/dpmcp.h
+++ b/drivers/staging/fsl-mc/bus/dpmcp.h
@@ -89,41 +89,53 @@ struct dpmcp_cfg {
 
 /**
  * dpmcp_create() - Create the DPMCP object.
+ *
  * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token: parent container token; '0' for default container
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @cfg:	Configuration structure
- * @token:	Returned token; use in subsequent API calls
+ * @obj_id: returns the object id or portal id.
  *
  * Create the DPMCP object, allocate required resources and
  * perform required initialization.
  *
  * The object can be created either by declaring it in the
  * DPL file, or by calling this function.
- * This function returns a unique authentication token,
- * associated with the specific object ID and the specific MC
- * portal; this token must be used in all subsequent calls to
- * this specific object. For objects that are created using the
- * DPL file, call dpmcp_open function to get an authentication
- * token first.
+ *
+ * The function accepts an authentication token of a parent
+ * container that this object should be assigned to. The token
+ * can be '0' so the object will be assigned to the default container.
+ * The newly created object can be opened with the returned
+ * object id and using the container's associated tokens and MC portals.
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmcp_create(struct fsl_mc_io	*mc_io,
-		 uint32_t		cmd_flags,
-		 const struct dpmcp_cfg	*cfg,
-		 uint16_t		*token);
+		uint16_t	dprc_token,
+		uint32_t	cmd_flags,
+		const struct dpmcp_cfg	*cfg,
+		uint32_t	*obj_id);
 
 /**
  * dpmcp_destroy() - Destroy the DPMCP object and release all its resources.
+ *
  * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token: MC v10.x - parent container token; '0' for default container
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPMCP object
+ * @object_id:  Object id or portal id; it must be a valid id
+ *              within the container that created this object.
+ *
+ * The function accepts the authentication token of the parent
+ * container that created the object (not the one that currently owns
+ * the object). The object is searched within parent using the provided
+ * object_id. All tokens to the object must be closed before calling destroy.
  *
  * Return:	'0' on Success; error code otherwise.
  */
 int dpmcp_destroy(struct fsl_mc_io	*mc_io,
-		  uint32_t		cmd_flags,
-		  uint16_t		token);
+		uint16_t	dprc_token,
+		uint32_t	cmd_flags,
+		uint32_t	object_id);
 
 /**
  * dpmcp_reset() - Reset the DPMCP, returns the object to initial state.
@@ -290,19 +302,9 @@ int dpmcp_get_irq_status(struct fsl_mc_io	*mc_io,
 /**
  * struct dpmcp_attr - Structure representing DPMCP attributes
  * @id:		DPMCP object ID
- * @version:	DPMCP version
  */
 struct dpmcp_attr {
 	int id;
-	/**
-	 * struct version - Structure representing DPMCP version
-	 * @major:	DPMCP major version
-	 * @minor:	DPMCP minor version
-	 */
-	struct {
-		uint16_t major;
-		uint16_t minor;
-	} version;
 };
 
 /**
@@ -320,4 +322,17 @@ int dpmcp_get_attributes(struct fsl_mc_io	*mc_io,
 			 uint16_t		token,
 			 struct dpmcp_attr	*attr);
 
+/**
+ * dpmcp_get_api_version() - Get Data Path Management Command Portal API version
+ * @mc_io:  Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @majorVer: 	Major version of data path management command portal API
+ * @minorVer: 	Minor version of data path management command portal API
+ *
+ * Return:  '0' on Success; Error code otherwise.
+ */
+int dpmcp_get_api_version(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
+			   uint16_t *major_ver,
+			   uint16_t *minor_ver);
 #endif /* __FSL_DPMCP_H */
diff --git a/drivers/staging/fsl-mc/bus/dpmng-cmd.h b/drivers/staging/fsl-mc/bus/dpmng-cmd.h
index ba8cfa9..78103d7 100644
--- a/drivers/staging/fsl-mc/bus/dpmng-cmd.h
+++ b/drivers/staging/fsl-mc/bus/dpmng-cmd.h
@@ -40,8 +40,10 @@
 #ifndef __FSL_DPMNG_CMD_H
 #define __FSL_DPMNG_CMD_H
 
+#define DPMNG_CMD_BASE_VERSION		1
+#define DPMNG_CMD_ID_OFFSET		4
+
 /* Command IDs */
-#define DPMNG_CMDID_GET_CONT_ID			0x830
-#define DPMNG_CMDID_GET_VERSION			0x831
+#define DPMNG_CMDID_GET_VERSION			((0x831 << DPMNG_CMD_ID_OFFSET) | DPMNG_CMD_BASE_VERSION)
 
 #endif /* __FSL_DPMNG_CMD_H */
diff --git a/drivers/staging/fsl-mc/bus/dpmng.c b/drivers/staging/fsl-mc/bus/dpmng.c
index 387390b..1b373fe 100644
--- a/drivers/staging/fsl-mc/bus/dpmng.c
+++ b/drivers/staging/fsl-mc/bus/dpmng.c
@@ -60,26 +60,4 @@ int mc_get_version(struct fsl_mc_io *mc_io,
 }
 EXPORT_SYMBOL(mc_get_version);
 
-int dpmng_get_container_id(struct fsl_mc_io *mc_io,
-			   uint32_t cmd_flags,
-			   int *container_id)
-{
-	struct mc_command cmd = { 0 };
-	int err;
-
-	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPMNG_CMDID_GET_CONT_ID,
-					  cmd_flags,
-					  0);
-
-	/* send command to mc*/
-	err = mc_send_command(mc_io, &cmd);
-	if (err)
-		return err;
-
-	/* retrieve response parameters */
-	*container_id = mc_dec(cmd.params[0], 0, 32);
-
-	return 0;
-}
 
diff --git a/drivers/staging/fsl-mc/bus/dprc-cmd.h b/drivers/staging/fsl-mc/bus/dprc-cmd.h
index 9b854fa..dff2ca5 100644
--- a/drivers/staging/fsl-mc/bus/dprc-cmd.h
+++ b/drivers/staging/fsl-mc/bus/dprc-cmd.h
@@ -41,47 +41,51 @@
 #define _FSL_DPRC_CMD_H
 
 /* Minimal supported DPRC Version */
-#define DPRC_MIN_VER_MAJOR			5
+#define DPRC_MIN_VER_MAJOR			6
 #define DPRC_MIN_VER_MINOR			0
+#define DPRC_CMD_BASE_VERSION			1
+#define DPRC_CMD_ID_OFFSET			4
 
 /* Command IDs */
-#define DPRC_CMDID_CLOSE			0x800
-#define DPRC_CMDID_OPEN				0x805
-#define DPRC_CMDID_CREATE			0x905
+#define DPRC_CMDID_CLOSE                        ((0x800 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_OPEN                         ((0x805 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_CREATE                       ((0x905 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_VERSION                  ((0xa05 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
 
-#define DPRC_CMDID_GET_ATTR			0x004
-#define DPRC_CMDID_RESET_CONT			0x005
+#define DPRC_CMDID_GET_ATTR                     ((0x004 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_RESET_CONT                   ((0x005 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
 
-#define DPRC_CMDID_SET_IRQ			0x010
-#define DPRC_CMDID_GET_IRQ			0x011
-#define DPRC_CMDID_SET_IRQ_ENABLE		0x012
-#define DPRC_CMDID_GET_IRQ_ENABLE		0x013
-#define DPRC_CMDID_SET_IRQ_MASK			0x014
-#define DPRC_CMDID_GET_IRQ_MASK			0x015
-#define DPRC_CMDID_GET_IRQ_STATUS		0x016
-#define DPRC_CMDID_CLEAR_IRQ_STATUS		0x017
+#define DPRC_CMDID_SET_IRQ                      ((0x010 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_IRQ                      ((0x011 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_SET_IRQ_ENABLE               ((0x012 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_IRQ_ENABLE               ((0x013 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_SET_IRQ_MASK                 ((0x014 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_IRQ_MASK                 ((0x015 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_IRQ_STATUS               ((0x016 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_CLEAR_IRQ_STATUS             ((0x017 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
 
-#define DPRC_CMDID_CREATE_CONT			0x151
-#define DPRC_CMDID_DESTROY_CONT			0x152
-#define DPRC_CMDID_SET_RES_QUOTA		0x155
-#define DPRC_CMDID_GET_RES_QUOTA		0x156
-#define DPRC_CMDID_ASSIGN			0x157
-#define DPRC_CMDID_UNASSIGN			0x158
-#define DPRC_CMDID_GET_OBJ_COUNT		0x159
-#define DPRC_CMDID_GET_OBJ			0x15A
-#define DPRC_CMDID_GET_RES_COUNT		0x15B
-#define DPRC_CMDID_GET_RES_IDS			0x15C
-#define DPRC_CMDID_GET_OBJ_REG			0x15E
-#define DPRC_CMDID_SET_OBJ_IRQ			0x15F
-#define DPRC_CMDID_GET_OBJ_IRQ			0x160
-#define DPRC_CMDID_SET_OBJ_LABEL		0x161
-#define DPRC_CMDID_GET_OBJ_DESC			0x162
+#define DPRC_CMDID_CREATE_CONT                  ((0x151 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_DESTROY_CONT                 ((0x152 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_CONT_ID                  ((0x830 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_SET_RES_QUOTA                ((0x155 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_RES_QUOTA                ((0x156 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_ASSIGN                       ((0x157 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_UNASSIGN                     ((0x158 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_OBJ_COUNT                ((0x159 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_OBJ                      ((0x15A << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_RES_COUNT                ((0x15B << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_RES_IDS                  ((0x15C << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_OBJ_REG                  ((0x15E << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_SET_OBJ_IRQ                  ((0x15F << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_OBJ_IRQ                  ((0x160 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_SET_OBJ_LABEL                ((0x161 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_OBJ_DESC                 ((0x162 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
 
-#define DPRC_CMDID_CONNECT			0x167
-#define DPRC_CMDID_DISCONNECT			0x168
-#define DPRC_CMDID_GET_POOL			0x169
-#define DPRC_CMDID_GET_POOL_COUNT		0x16A
+#define DPRC_CMDID_CONNECT                      ((0x167 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_DISCONNECT                   ((0x168 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_POOL                     ((0x169 << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
+#define DPRC_CMDID_GET_POOL_COUNT               ((0x16A << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
 
-#define DPRC_CMDID_GET_CONNECTION		0x16C
+#define DPRC_CMDID_GET_CONNECTION               ((0x16C << DPRC_CMD_ID_OFFSET) | DPRC_CMD_BASE_VERSION)
 
 #endif /* _FSL_DPRC_CMD_H */
diff --git a/drivers/staging/fsl-mc/bus/dprc-driver.c b/drivers/staging/fsl-mc/bus/dprc-driver.c
index 5b6fa1c..1e5c06d 100644
--- a/drivers/staging/fsl-mc/bus/dprc-driver.c
+++ b/drivers/staging/fsl-mc/bus/dprc-driver.c
@@ -705,16 +705,16 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 {
 	int error;
 	struct dpmcp_cfg dpmcp_cfg;
-	uint16_t dpmcp_handle;
+	uint32_t dpmcp_obj_id;
 	struct dprc_res_req res_req;
-	struct dpmcp_attr dpmcp_attr;
 	struct fsl_mc_bus *mc_bus = to_fsl_mc_bus(dprc_dev);
 
 	dpmcp_cfg.portal_id = mc_bus->dprc_attr.portal_id;
 	error = dpmcp_create(dprc_dev->mc_io,
+			     dprc_dev->mc_handle,
 			     MC_CMD_FLAG_INTR_DIS,
 			     &dpmcp_cfg,
-			     &dpmcp_handle);
+			     &dpmcp_obj_id);
 	if (error < 0) {
 		dev_err(&dprc_dev->dev, "dpmcp_create() failed: %d\n",
 			error);
@@ -725,17 +725,7 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 	 * Set the state of the newly created DPMCP object to be "plugged":
 	 */
 
-	error = dpmcp_get_attributes(dprc_dev->mc_io,
-				     MC_CMD_FLAG_INTR_DIS,
-				     dpmcp_handle,
-				     &dpmcp_attr);
-	if (error < 0) {
-		dev_err(&dprc_dev->dev, "dpmcp_get_attributes() failed: %d\n",
-			error);
-		goto error_destroy_dpmcp;
-	}
-
-	if (WARN_ON(dpmcp_attr.id != mc_bus->dprc_attr.portal_id)) {
+	if (WARN_ON(dpmcp_obj_id != mc_bus->dprc_attr.portal_id)) {
 		error = -EINVAL;
 		goto error_destroy_dpmcp;
 	}
@@ -744,7 +734,7 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 	res_req.num = 1;
 	res_req.options =
 			(DPRC_RES_REQ_OPT_EXPLICIT | DPRC_RES_REQ_OPT_PLUGGED);
-	res_req.id_base_align = dpmcp_attr.id;
+	res_req.id_base_align = dpmcp_obj_id;
 
 	error = dprc_assign(dprc_dev->mc_io,
 			    MC_CMD_FLAG_INTR_DIS,
@@ -757,15 +747,13 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 		goto error_destroy_dpmcp;
 	}
 
-	(void)dpmcp_close(dprc_dev->mc_io,
-			  MC_CMD_FLAG_INTR_DIS,
-			  dpmcp_handle);
 	return 0;
 
 error_destroy_dpmcp:
 	(void)dpmcp_destroy(dprc_dev->mc_io,
+			    dprc_dev->mc_handle,
 			    MC_CMD_FLAG_INTR_DIS,
-			    dpmcp_handle);
+				dpmcp_obj_id);
 	return error;
 }
 
@@ -775,25 +763,15 @@ error_destroy_dpmcp:
 static void dprc_destroy_dpmcp(struct fsl_mc_device *dprc_dev)
 {
 	int error;
-	uint16_t dpmcp_handle;
 	struct fsl_mc_bus *mc_bus = to_fsl_mc_bus(dprc_dev);
 
 	if (WARN_ON(!dprc_dev->mc_io || dprc_dev->mc_io->dpmcp_dev))
 		return;
 
-	error = dpmcp_open(dprc_dev->mc_io,
-			   MC_CMD_FLAG_INTR_DIS,
-			   mc_bus->dprc_attr.portal_id,
-			   &dpmcp_handle);
-	if (error < 0) {
-		dev_err(&dprc_dev->dev, "dpmcp_open() failed: %d\n",
-			error);
-		return;
-	}
-
 	error = dpmcp_destroy(dprc_dev->mc_io,
+			      dprc_dev->mc_handle,
 			      MC_CMD_FLAG_INTR_DIS,
-			      dpmcp_handle);
+				  mc_bus->dprc_attr.portal_id);
 	if (error < 0) {
 		dev_err(&dprc_dev->dev, "dpmcp_destroy() failed: %d\n",
 			error);
@@ -818,6 +796,8 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 	struct fsl_mc_bus *mc_bus = to_fsl_mc_bus(mc_dev);
 	bool mc_io_created = false;
 	bool dev_root_set = false;
+	uint16_t dprc_version_major;
+	uint16_t dprc_version_minor;
 
 	if (WARN_ON(strcmp(mc_dev->obj_desc.type, "dprc") != 0))
 		return -EINVAL;
@@ -861,25 +841,35 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 		goto error_cleanup_mc_io;
 	}
 
-	error = dprc_get_attributes(mc_dev->mc_io, 0, mc_dev->mc_handle,
-				    &mc_bus->dprc_attr);
+	/* check if MC supports compatible DPRC type version */
+	error = dprc_get_api_version(mc_dev->mc_io, 0,
+			&dprc_version_major, &dprc_version_minor);
 	if (error < 0) {
-		dev_err(&mc_dev->dev, "dprc_get_attributes() failed: %d\n",
+		dev_err(&mc_dev->dev, "dprc_get_api_version() failed: %d\n",
 			error);
 		goto error_cleanup_open;
 	}
 
-	if (mc_bus->dprc_attr.version.major < DPRC_MIN_VER_MAJOR ||
-	   (mc_bus->dprc_attr.version.major == DPRC_MIN_VER_MAJOR &&
-	    mc_bus->dprc_attr.version.minor < DPRC_MIN_VER_MINOR)) {
+	if (dprc_version_major < DPRC_MIN_VER_MAJOR ||
+	   (dprc_version_major == DPRC_MIN_VER_MAJOR &&
+		dprc_version_minor < DPRC_MIN_VER_MINOR)) {
 		dev_err(&mc_dev->dev,
 			"ERROR: DPRC version %d.%d not supported\n",
-			mc_bus->dprc_attr.version.major,
-			mc_bus->dprc_attr.version.minor);
+			dprc_version_major,
+			dprc_version_minor);
 		error = -ENOTSUPP;
 		goto error_cleanup_open;
 	}
 
+	/* get container portal id */
+	error = dprc_get_attributes(mc_dev->mc_io, 0, mc_dev->mc_handle,
+				    &mc_bus->dprc_attr);
+	if (error < 0) {
+		dev_err(&mc_dev->dev, "dprc_get_attributes() failed: %d\n",
+			error);
+		goto error_cleanup_open;
+	}
+
 	if (fsl_mc_interrupts_supported()) {
 		/*
 		 * Create DPMCP for the DPRC's built-in portal:
diff --git a/drivers/staging/fsl-mc/bus/dprc.c b/drivers/staging/fsl-mc/bus/dprc.c
index 4d86438..c659193 100644
--- a/drivers/staging/fsl-mc/bus/dprc.c
+++ b/drivers/staging/fsl-mc/bus/dprc.c
@@ -34,6 +34,29 @@
 #include "../include/dprc.h"
 #include "dprc-cmd.h"
 
+int dprc_get_container_id(struct fsl_mc_io *mc_io,
+			  uint32_t cmd_flags,
+			  int *container_id)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_CONT_ID,
+					  cmd_flags,
+					  0);
+
+	/* send command to mc*/
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	/* retrieve response parameters */
+	*container_id = (int)get_mc_cmd_create_object_id(&cmd);
+
+	return 0;
+}
+EXPORT_SYMBOL(dprc_get_container_id);
 int dprc_open(struct fsl_mc_io *mc_io,
 	      uint32_t cmd_flags,
 	      int container_id,
@@ -376,8 +399,6 @@ int dprc_get_attributes(struct fsl_mc_io *mc_io,
 	attr->icid = mc_dec(cmd.params[0], 32, 16);
 	attr->options = mc_dec(cmd.params[1], 0, 32);
 	attr->portal_id = mc_dec(cmd.params[1], 32, 32);
-	attr->version.major = mc_dec(cmd.params[2], 0, 16);
-	attr->version.minor = mc_dec(cmd.params[2], 16, 16);
 
 	return 0;
 }
@@ -1216,3 +1237,25 @@ int dprc_get_connection(struct fsl_mc_io *mc_io,
 	return 0;
 }
 EXPORT_SYMBOL(dprc_get_connection);
+
+int dprc_get_api_version(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
+			   uint16_t *major_ver,
+			   uint16_t *minor_ver)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_VERSION,
+					cmd_flags,
+					0);
+
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	get_mc_cmd_object_api_ver(&cmd, major_ver, minor_ver);
+
+	return 0;
+}
+EXPORT_SYMBOL(dprc_get_api_version);
diff --git a/drivers/staging/fsl-mc/bus/mc-bus.c b/drivers/staging/fsl-mc/bus/mc-bus.c
index f173b35..37565b7 100644
--- a/drivers/staging/fsl-mc/bus/mc-bus.c
+++ b/drivers/staging/fsl-mc/bus/mc-bus.c
@@ -36,6 +36,8 @@
 
 #define MAX_STREAM_ID_ICID  STREAM_ID_ICID_MASK
 
+/* Minimal supported MC Firmware version */
+#define MC_FW_MIN_VER_MAJOR 10
 static struct kmem_cache *mc_dev_cache;
 
 /**
@@ -392,13 +394,9 @@ static int get_dprc_icid(struct fsl_mc_io *mc_io,
 static int get_dprc_version(struct fsl_mc_io *mc_io,
 			    int container_id, uint16_t *major, uint16_t *minor)
 {
-	struct dprc_attributes attr;
-	int error;
-
-	error = get_dprc_attr(mc_io, container_id, &attr);
-	if (error == 0) {
-		*major = attr.version.major;
-		*minor = attr.version.minor;
+	int error = dprc_get_api_version(mc_io, 0, major, minor);
+	if (error < 0) {
+		pr_err("dprc_get_api_version() failed: %d\n", error);
 	}
 
 	return error;
@@ -1192,16 +1190,24 @@ static int fsl_mc_bus_probe(struct platform_device *pdev)
 		 "Freescale Management Complex Firmware version: %u.%u.%u\n",
 		 mc_version.major, mc_version.minor, mc_version.revision);
 
+	if (MC_FW_MIN_VER_MAJOR > mc_version.major) {
+		dev_err(&pdev->dev,
+				"ERROR: Expected MC firmware version %u or later",
+				MC_FW_MIN_VER_MAJOR);
+		error = -ENOTSUPP;
+		goto error_cleanup_mc_io;
+	}
+
 	error = get_mc_addr_translation_ranges(&pdev->dev,
 					       &mc->translation_ranges,
 					       &mc->num_translation_ranges);
 	if (error < 0)
 		goto error_cleanup_mc_io;
 
-	error = dpmng_get_container_id(mc_io, 0, &container_id);
+	error = dprc_get_container_id(mc_io, 0, &container_id);
 	if (error < 0) {
 		dev_err(&pdev->dev,
-			"dpmng_get_container_id() failed: %d\n", error);
+			"get container id failed: %d\n", error);
 		goto error_cleanup_mc_io;
 	}
 
diff --git a/drivers/staging/fsl-mc/include/dpmng.h b/drivers/staging/fsl-mc/include/dpmng.h
index d1c4588..9541743 100644
--- a/drivers/staging/fsl-mc/include/dpmng.h
+++ b/drivers/staging/fsl-mc/include/dpmng.h
@@ -65,16 +65,5 @@ int mc_get_version(struct fsl_mc_io	*mc_io,
 		   uint32_t		cmd_flags,
 		   struct mc_version	*mc_ver_info);
 
-/**
- * dpmng_get_container_id() - Get container ID associated with a given portal.
- * @mc_io:		Pointer to MC portal's I/O object
- * @cmd_flags:		Command flags; one or more of 'MC_CMD_FLAG_'
- * @container_id:	Requested container ID
- *
- * Return:	'0' on Success; Error code otherwise.
- */
-int dpmng_get_container_id(struct fsl_mc_io	*mc_io,
-			   uint32_t		cmd_flags,
-			   int			*container_id);
 
 #endif /* __FSL_DPMNG_H */
diff --git a/drivers/staging/fsl-mc/include/dprc.h b/drivers/staging/fsl-mc/include/dprc.h
index 810ded0..6a9500e 100644
--- a/drivers/staging/fsl-mc/include/dprc.h
+++ b/drivers/staging/fsl-mc/include/dprc.h
@@ -55,6 +55,18 @@ struct fsl_mc_io;
 #define DPRC_GET_PORTAL_ID_FROM_POOL	(int)(~(0))
 
 /**
+ * dprc_get_container_id() - Get container ID associated with a given portal.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @container_id:	Requested container ID
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
+int dprc_get_container_id(struct fsl_mc_io	*mc_io,
+			  uint32_t		cmd_flags,
+			  int			*container_id);
+
+/**
  * dprc_open() - Open DPRC object for use
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
@@ -412,22 +424,12 @@ int dprc_clear_irq_status(struct fsl_mc_io	*mc_io,
  * @icid: Container's ICID
  * @portal_id: Container's portal ID
  * @options: Container's options as set at container's creation
- * @version: DPRC version
  */
 struct dprc_attributes {
 	int container_id;
 	uint16_t icid;
 	int portal_id;
 	uint64_t options;
-	/**
-	 * struct version - DPRC version
-	 * @major: DPRC major version
-	 * @minor: DPRC minor version
-	 */
-	struct {
-		uint16_t major;
-		uint16_t minor;
-	} version;
 };
 
 /**
@@ -986,5 +988,18 @@ int dprc_get_connection(struct fsl_mc_io		*mc_io,
 			struct dprc_endpoint		*endpoint2,
 			int				*state);
 
+/**
+ * dprc_get_api_version() - Get Data Path Resource Container API version
+ * @mc_io:  Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @major_ver: 	Major version of data path resource container API
+ * @minor_ver: 	Minor version of data path resource container API
+ *
+ * Return:  '0' on Success; Error code otherwise.
+ */
+int dprc_get_api_version(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
+			   uint16_t *major_ver,
+			   uint16_t *minor_ver);
 #endif /* _FSL_DPRC_H */
 
diff --git a/drivers/staging/fsl-mc/include/mc-cmd.h b/drivers/staging/fsl-mc/include/mc-cmd.h
index 00f0b74..0592b1f 100644
--- a/drivers/staging/fsl-mc/include/mc-cmd.h
+++ b/drivers/staging/fsl-mc/include/mc-cmd.h
@@ -82,16 +82,23 @@ integration */
 #define MC_CMD_PRI_LOW		0 /*!< Low Priority command indication */
 #define MC_CMD_PRI_HIGH		1 /*!< High Priority command indication */
 
-#define MC_CMD_HDR_CMDID_O	52	/* Command ID field offset */
-#define MC_CMD_HDR_CMDID_S	12	/* Command ID field size */
-#define MC_CMD_HDR_TOKEN_O	38	/* Token field offset */
-#define MC_CMD_HDR_TOKEN_S	10	/* Token field size */
+#define MC_CMD_HDR_CMDID_O	48	/* Command ID field offset */
+#define MC_CMD_HDR_CMDID_S	16	/* Command ID field size */
+#define MC_CMD_HDR_TOKEN_O	32	/* Token field offset */
+#define MC_CMD_HDR_TOKEN_S	16	/* Token field size */
 #define MC_CMD_HDR_STATUS_O	16	/* Status field offset */
 #define MC_CMD_HDR_STATUS_S	8	/* Status field size*/
 #define MC_CMD_HDR_FLAGS_O	0	/* Flags field offset */
 #define MC_CMD_HDR_FLAGS_S	32	/* Flags field size*/
 #define MC_CMD_HDR_FLAGS_MASK	0xFF00FF00 /* Command flags mask */
 
+#define MC_CMD_CREATE_OBJ_ID_O	0 	/* Object id field offset */
+#define MC_CMD_CREATE_OBJ_ID_S	32 	/* Object id field size */
+
+#define MC_CMD_OBJ_VERSION_MAJ_O	0 	/* Object major version offset */
+#define MC_CMD_OBJ_VERSION_MIN_O	16 	/* Object minor version offset */
+#define MC_CMD_OBJ_VERSION_S		16 	/* Object version field size */
+
 #define MC_CMD_HDR_READ_STATUS(_hdr) \
 	((enum mc_cmd_status)mc_dec((_hdr), \
 		MC_CMD_HDR_STATUS_O, MC_CMD_HDR_STATUS_S))
@@ -114,6 +121,24 @@ integration */
 #define MC_RSP_OP(_cmd, _param, _offset, _width, _type, _arg) \
 	(_arg = (_type)mc_dec(_cmd.params[_param], (_offset), (_width)))
 
+static inline void get_mc_cmd_object_api_ver(struct mc_command *mc_cmd,
+		uint16_t *major_ver, uint16_t *minor_ver)
+{
+	*major_ver = (uint16_t)mc_dec(mc_cmd->params[0],
+			MC_CMD_OBJ_VERSION_MAJ_O,
+			MC_CMD_OBJ_VERSION_S);
+	*minor_ver = (uint16_t)mc_dec(mc_cmd->params[0],
+			MC_CMD_OBJ_VERSION_MIN_O,
+			MC_CMD_OBJ_VERSION_S);
+}
+
+static inline uint32_t get_mc_cmd_create_object_id(struct mc_command *cmd)
+{
+	return (uint32_t) mc_dec(cmd->params[0],
+			MC_CMD_CREATE_OBJ_ID_O,
+			MC_CMD_CREATE_OBJ_ID_S);
+}
+
 static inline uint64_t mc_encode_cmd_header(uint16_t cmd_id,
 					    uint32_t cmd_flags,
 					    uint16_t token)
-- 
2.9.3

