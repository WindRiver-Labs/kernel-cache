From 069e2653d94aa3d4d05ff669044ce4fbbcb4551f Mon Sep 17 00:00:00 2001
From: Chenhui Zhao <chenhui.zhao@nxp.com>
Date: Tue, 13 Dec 2016 17:01:18 +0800
Subject: [PATCH 220/388] soc: rcpm: change by upstream comments

Signed-off-by: Chenhui Zhao <chenhui.zhao@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/soc/fsl/layerscape/rcpm.c | 92 +++++++++++++++++++--------------------
 1 file changed, 45 insertions(+), 47 deletions(-)

diff --git a/drivers/soc/fsl/layerscape/rcpm.c b/drivers/soc/fsl/layerscape/rcpm.c
index a6a31c8..3273a7e 100644
--- a/drivers/soc/fsl/layerscape/rcpm.c
+++ b/drivers/soc/fsl/layerscape/rcpm.c
@@ -22,72 +22,63 @@
 #include <linux/of_address.h>
 #include <linux/suspend.h>
 
-/* RCPM register offset */
+/* So far there are not more than two registers */
 #define RCPM_IPPDEXPCR0			0x140
+#define RCPM_IPPDEXPCR(x)		(RCPM_IPPDEXPCR0 + 4 * x)
+#define RCPM_WAKEUP_CELL_MAX_SIZE	2
 
-#define RCPM_WAKEUP_CELL_SIZE	2
-
-struct rcpm_config {
-	int ipp_num;
-	int ippdexpcr_offset;
-	u32 ippdexpcr[2];
-	void *rcpm_reg_base;
-};
-
-static struct rcpm_config *rcpm;
+/* it reprents the number of the registers RCPM_IPPDEXPCR */
+static unsigned int rcpm_wakeup_cells;
+static void __iomem *rcpm_reg_base;
+static u32 ippdexpcr[RCPM_WAKEUP_CELL_MAX_SIZE];
 
 static inline void rcpm_reg_write(u32 offset, u32 value)
 {
-	iowrite32be(value, rcpm->rcpm_reg_base + offset);
+	iowrite32be(value, rcpm_reg_base + offset);
 }
 
 static inline u32 rcpm_reg_read(u32 offset)
 {
-	return ioread32be(rcpm->rcpm_reg_base + offset);
+	return ioread32be(rcpm_reg_base + offset);
 }
 
 static void rcpm_wakeup_fixup(struct device *dev, void *data)
 {
 	struct device_node *node = dev ? dev->of_node : NULL;
-	u32 value[RCPM_WAKEUP_CELL_SIZE];
-	int ret, i;
+	u32 value[RCPM_WAKEUP_CELL_MAX_SIZE + 1];
+	int ret;
+	int i;
 
 	if (!dev || !node || !device_may_wakeup(dev))
 		return;
 
 	/*
-	 * Get the values in the "rcpm-wakeup" property.
-	 * Three values are:
-	 * The first is a pointer to the RCPM node.
-	 * The second is the value of the ippdexpcr0 register.
-	 * The third is the value of the ippdexpcr1 register.
+	 * Get the values in the "fsl,rcpm-wakeup" property.
+	 * Refer to Documentation/devicetree/bindings/soc/fsl/rcpm.txt
 	 */
 	ret = of_property_read_u32_array(node, "fsl,rcpm-wakeup",
-					 value, RCPM_WAKEUP_CELL_SIZE);
+					 value, rcpm_wakeup_cells + 1);
 	if (ret)
 		return;
 
 	pr_debug("wakeup source: the device %s\n", node->full_name);
 
-	for (i = 0; i < rcpm->ipp_num; i++)
-		rcpm->ippdexpcr[i] |= value[i + 1];
+	for (i = 0; i < rcpm_wakeup_cells; i++)
+		ippdexpcr[i] |= value[i + 1];
 }
 
 static int rcpm_suspend_prepare(void)
 {
 	int i;
 
-	BUG_ON(!rcpm);
-
-	for (i = 0; i < rcpm->ipp_num; i++)
-		rcpm->ippdexpcr[i] = 0;
+	for (i = 0; i < rcpm_wakeup_cells; i++)
+		ippdexpcr[i] = 0;
 
 	dpm_for_each_dev(NULL, rcpm_wakeup_fixup);
 
-	for (i = 0; i < rcpm->ipp_num; i++) {
-		rcpm_reg_write(rcpm->ippdexpcr_offset + 4 * i,
-			       rcpm->ippdexpcr[i]);
-		pr_debug("ippdexpcr%d = 0x%x\n", i, rcpm->ippdexpcr[i]);
+	for (i = 0; i < rcpm_wakeup_cells; i++) {
+		rcpm_reg_write(RCPM_IPPDEXPCR(i), ippdexpcr[i]);
+		pr_debug("ippdexpcr%d = 0x%x\n", i, ippdexpcr[i]);
 	}
 
 	return 0;
@@ -106,15 +97,18 @@ static int rcpm_suspend_notifier_call(struct notifier_block *bl,
 	return NOTIFY_DONE;
 }
 
-static struct rcpm_config rcpm_default_config = {
-	.ipp_num = 1,
-	.ippdexpcr_offset = RCPM_IPPDEXPCR0,
-};
-
 static const struct of_device_id rcpm_matches[] = {
 	{
 		.compatible = "fsl,qoriq-rcpm-2.1",
-		.data = &rcpm_default_config,
+	},
+	{
+		.compatible = "fsl,ls1012a-rcpm",
+	},
+	{
+		.compatible = "fsl,ls1043a-rcpm",
+	},
+	{
+		.compatible = "fsl,ls1046a-rcpm",
 	},
 	{}
 };
@@ -125,23 +119,27 @@ static struct notifier_block rcpm_suspend_notifier = {
 
 static int __init layerscape_rcpm_init(void)
 {
-	const struct of_device_id *match;
 	struct device_node *np;
+	int ret;
+
+	np = of_find_matching_node_and_match(NULL, rcpm_matches, NULL);
+	if (!np)
+		return -ENODEV;
 
-	np = of_find_matching_node_and_match(NULL, rcpm_matches, &match);
-	if (!np) {
-		pr_err("Can't find the RCPM node.\n");
+	ret = of_property_read_u32_index(np, "fsl,#rcpm-wakeup-cells", 0,
+					 &rcpm_wakeup_cells);
+	if (ret) {
+		pr_err("Fail to get \"fsl,#rcpm-wakeup-cells\".\n");
 		return -EINVAL;
 	}
 
-	if (match->data)
-		rcpm = (struct rcpm_config *)match->data;
-	else
+	if (rcpm_wakeup_cells > RCPM_WAKEUP_CELL_MAX_SIZE) {
+		pr_err("The value of \"fsl,#rcpm-wakeup-cells\" is wrong.\n");
 		return -EINVAL;
+	}
 
-	rcpm->rcpm_reg_base = of_iomap(np, 0);
-	of_node_put(np);
-	if (!rcpm->rcpm_reg_base)
+	rcpm_reg_base = of_iomap(np, 0);
+	if (!rcpm_reg_base)
 		return -ENOMEM;
 
 	register_pm_notifier(&rcpm_suspend_notifier);
-- 
2.9.3

