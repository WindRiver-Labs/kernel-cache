From c04efc1fce9f03e399ff1f51e52462fd1ecc6bf1 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@nxp.com>
Date: Fri, 4 Mar 2016 18:43:27 +0200
Subject: [PATCH 267/388] staging: fsl-dpaa2/eth: Don't check if key fields are
 enabled

Since we have now a static key that can't be modified by the
user, there's no need to check if each field is enabled or not.
Also the key size never changes.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c | 65 +++-------------------
 1 file changed, 8 insertions(+), 57 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
index 4d0274c..2130e70 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
@@ -327,13 +327,6 @@ static const struct dpaa2_eth_hash_fields {
 	},
 };
 
-static int cls_is_enabled(struct net_device *net_dev, u64 flag)
-{
-	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
-
-	return !!(priv->rx_flow_hash & flag);
-}
-
 static int cls_key_off(struct net_device *net_dev, u64 flag)
 {
 	int i, off = 0;
@@ -341,8 +334,7 @@ static int cls_key_off(struct net_device *net_dev, u64 flag)
 	for (i = 0; i < ARRAY_SIZE(hash_fields); i++) {
 		if (hash_fields[i].rxnfc_field & flag)
 			return off;
-		if (cls_is_enabled(net_dev, hash_fields[i].rxnfc_field))
-			off += hash_fields[i].size;
+		off += hash_fields[i].size;
 	}
 
 	return -1;
@@ -352,19 +344,6 @@ static u8 cls_key_size(struct net_device *net_dev)
 {
 	u8 i, size = 0;
 
-	for (i = 0; i < ARRAY_SIZE(hash_fields); i++) {
-		if (!cls_is_enabled(net_dev, hash_fields[i].rxnfc_field))
-			continue;
-		size += hash_fields[i].size;
-	}
-
-	return size;
-}
-
-static u8 cls_max_key_size(struct net_device *net_dev)
-{
-	u8 i, size = 0;
-
 	for (i = 0; i < ARRAY_SIZE(hash_fields); i++)
 		size += hash_fields[i].size;
 
@@ -373,7 +352,7 @@ static u8 cls_max_key_size(struct net_device *net_dev)
 
 void check_fs_support(struct net_device *net_dev)
 {
-	u8 key_size = cls_max_key_size(net_dev);
+	u8 key_size = cls_key_size(net_dev);
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
 
 	if (priv->dpni_attrs.options & DPNI_OPT_DIST_FS &&
@@ -497,44 +476,28 @@ l4ip4:
 				   "ToS is not supported for IPv4 L4\n");
 			return -EOPNOTSUPP;
 		}
-		if (l4ip4_m->ip4src && !cls_is_enabled(net_dev, RXH_IP_SRC)) {
-			netdev_err(net_dev, "IP SRC not supported!\n");
-			return -EOPNOTSUPP;
-		}
-		if (l4ip4_m->ip4dst && !cls_is_enabled(net_dev, RXH_IP_DST)) {
-			netdev_err(net_dev, "IP DST not supported!\n");
-			return -EOPNOTSUPP;
-		}
-		if (l4ip4_m->psrc && !cls_is_enabled(net_dev, RXH_L4_B_0_1)) {
-			netdev_err(net_dev, "PSRC not supported, ignored\n");
-			return -EOPNOTSUPP;
-		}
-		if (l4ip4_m->pdst && !cls_is_enabled(net_dev, RXH_L4_B_2_3)) {
-			netdev_err(net_dev, "PDST not supported, ignored\n");
-			return -EOPNOTSUPP;
-		}
 
-		if (cls_is_enabled(net_dev, RXH_IP_SRC)) {
+		if (l4ip4_m->ip4src) {
 			*(u32 *)(key + cls_key_off(net_dev, RXH_IP_SRC))
 				= l4ip4_h->ip4src;
 			*(u32 *)(msk + cls_key_off(net_dev, RXH_IP_SRC))
 				= l4ip4_m->ip4src;
 		}
-		if (cls_is_enabled(net_dev, RXH_IP_DST)) {
+		if (l4ip4_m->ip4dst) {
 			*(u32 *)(key + cls_key_off(net_dev, RXH_IP_DST))
 				= l4ip4_h->ip4dst;
 			*(u32 *)(msk + cls_key_off(net_dev, RXH_IP_DST))
 				= l4ip4_m->ip4dst;
 		}
 
-		if (cls_is_enabled(net_dev, RXH_L4_B_0_1)) {
+		if (l4ip4_m->psrc) {
 			*(u32 *)(key + cls_key_off(net_dev, RXH_L4_B_0_1))
 				= l4ip4_h->psrc;
 			*(u32 *)(msk + cls_key_off(net_dev, RXH_L4_B_0_1))
 				= l4ip4_m->psrc;
 		}
 
-		if (cls_is_enabled(net_dev, RXH_L4_B_2_3)) {
+		if (l4ip4_m->pdst) {
 			*(u32 *)(key + cls_key_off(net_dev, RXH_L4_B_2_3))
 				= l4ip4_h->pdst;
 			*(u32 *)(msk + cls_key_off(net_dev, RXH_L4_B_2_3))
@@ -556,17 +519,11 @@ l4ip4:
 			return -EOPNOTSUPP;
 		}
 
-		if (cls_is_enabled(net_dev, RXH_L2DA)) {
+		if (!is_zero_ether_addr(eth_m->h_dest)) {
 			ether_addr_copy(key + cls_key_off(net_dev, RXH_L2DA),
 					eth_h->h_dest);
 			ether_addr_copy(msk + cls_key_off(net_dev, RXH_L2DA),
 					eth_m->h_dest);
-		} else {
-			if (!is_zero_ether_addr(eth_m->h_dest)) {
-				netdev_err(net_dev,
-					   "ETH DST is not supported!\n");
-				return -EOPNOTSUPP;
-			}
 		}
 		break;
 
@@ -584,17 +541,11 @@ l4ip4:
 		ext_h = &fs->h_ext;
 		ext_m = &fs->m_ext;
 
-		if (cls_is_enabled(net_dev, RXH_L2DA)) {
+		if (!is_zero_ether_addr(ext_m->h_dest)) {
 			ether_addr_copy(key + cls_key_off(net_dev, RXH_L2DA),
 					ext_h->h_dest);
 			ether_addr_copy(msk + cls_key_off(net_dev, RXH_L2DA),
 					ext_m->h_dest);
-		} else {
-			if (!is_zero_ether_addr(ext_m->h_dest)) {
-				netdev_err(net_dev,
-					   "ETH DST is not supported!\n");
-				return -EOPNOTSUPP;
-			}
 		}
 	}
 	return 0;
-- 
2.9.3

