From 09995e54ea7fae1eb6e9721a3e03a61c923d2fda Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@nxp.com>
Date: Wed, 21 Sep 2016 09:56:53 +0300
Subject: [PATCH 096/388] dpa_offload: Add support for offloading PPPoE flows

The driver and its API were updated to allow offloading of
Ethernet-to-PPPoE data flows. Some restrictions needed to
be removed and some FMD driver calls were updated to sync
up with the implementation in the FMan driver.

Signed-off-by: Marian Chereji <marian.chereji@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c   | 218 ++++++++++++---------
 drivers/staging/fsl_dpa_offload/dpa_classifier.h   |   7 +-
 .../staging/fsl_dpa_offload/dpa_classifier_ioctl.h |   2 +-
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |   5 +-
 include/linux/fsl_dpa_classifier.h                 |  51 +++--
 5 files changed, 167 insertions(+), 116 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index 690124e..1f6584b 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -59,6 +59,8 @@
 #define ETHERTYPE_OFFSET					12
 #define ETHERTYPE_SIZE						2 /* bytes */
 
+#define ETYPE_PPPoE_SESSION					0x8864
+
 #define CRC8_WCDMA_POLY						0x9b
 
 #ifdef DPA_CLASSIFIER_DEBUG
@@ -3535,15 +3537,6 @@ static int remove_hm_check_params(const struct dpa_cls_hm_remove_params
 {
 	BUG_ON(!remove_params);
 
-	switch (remove_params->type) {
-	case DPA_CLS_HM_REMOVE_PPPoE:
-		log_err("Unsupported HM: remove PPPoE.\n");
-		return -ENOSYS;
-		break;
-	default:
-		break;
-	}
-
 	return 0;
 }
 
@@ -3553,10 +3546,6 @@ static int insert_hm_check_params(const struct dpa_cls_hm_insert_params
 	BUG_ON(!insert_params);
 
 	switch (insert_params->type) {
-	case DPA_CLS_HM_INSERT_PPPoE:
-		log_err("Unsupported HM: insert PPPoE.\n");
-		return -ENOSYS;
-		break;
 	case DPA_CLS_HM_INSERT_ETHERNET:
 		if (insert_params->eth.num_tags >
 			DPA_CLS_HM_MAX_VLANs) {
@@ -4243,30 +4232,36 @@ int remove_hm_chain(struct list_head *chain_head, struct list_head *item)
 
 	list_del(item);
 
-	remove_hm_node(pcurrent);
+	release_hm_node_params(pcurrent);
+
+	/* Remove the node */
+	kfree(pcurrent);
 
 	index--;
 
 	return err;
 }
 
-static void remove_hm_node(struct dpa_cls_hm_node *node)
+static void release_hm_node_params(struct dpa_cls_hm_node *node)
 {
 	/* Check and remove all allocated buffers from the HM params: */
-	switch (node->params.type) {
-	case e_FM_PCD_MANIP_HDR:
-		if ((node->params.u.hdr.insrt) &&
-				(node->params.u.hdr.insrtParams.type ==
-				e_FM_PCD_MANIP_INSRT_GENERIC))
-			kfree(node->params.u.hdr.insrtParams.u.generic.p_Data);
-
-		break;
-	default:
-		break;
+	if ((node->params.type == e_FM_PCD_MANIP_HDR) &&
+						(node->params.u.hdr.insrt)) {
+		switch (node->params.u.hdr.insrtParams.type) {
+		case e_FM_PCD_MANIP_INSRT_GENERIC:
+			kfree(node->params.u.hdr.insrtParams.u.generic.
+				p_Data);
+			node->params.u.hdr.insrtParams.u.generic.p_Data =
+				NULL;
+			break;
+		case e_FM_PCD_MANIP_INSRT_BY_HDR:
+			kfree(node->params.u.hdr.insrtParams.u.byHdr.u.
+				specificL2Params.p_Data);
+			node->params.u.hdr.insrtParams.u.byHdr.u.
+				specificL2Params.p_Data = NULL;
+			break;
+		}
 	}
-
-	/* Remove the node */
-	kfree(node);
 }
 
 static int create_new_hm_op(int *hmd, int next_hmd)
@@ -5500,6 +5495,14 @@ static int remove_hm_update_params(struct dpa_cls_hm *premove_hm)
 		hm_node->params.u.hdr.rmvParams.u.byHdr.u.specificL2 =
 					e_FM_PCD_MANIP_HDR_RMV_ETHERNET;
 		break;
+	case DPA_CLS_HM_REMOVE_PPPoE:
+		hm_node->params.u.hdr.rmvParams.type =
+					e_FM_PCD_MANIP_RMV_BY_HDR;
+		hm_node->params.u.hdr.rmvParams.u.byHdr.type =
+					e_FM_PCD_MANIP_RMV_BY_HDR_SPECIFIC_L2;
+		hm_node->params.u.hdr.rmvParams.u.byHdr.u.specificL2 =
+					e_FM_PCD_MANIP_HDR_RMV_PPPOE;
+		break;
 	case DPA_CLS_HM_REMOVE_PPP:
 		hm_node->params.u.hdr.rmvParams.type =
 						e_FM_PCD_MANIP_RMV_GENERIC;
@@ -5789,84 +5792,117 @@ static int insert_hm_update_params(struct dpa_cls_hm *pinsert_hm)
 
 	hm_node = pinsert_hm->hm_node[0];
 
-	hm_node->params.type			= e_FM_PCD_MANIP_HDR;
-	hm_node->params.u.hdr.insrt		= TRUE;
-	hm_node->params.u.hdr.insrtParams.type	= e_FM_PCD_MANIP_INSRT_GENERIC;
+	/* Release resources used by old parameters (if any): */
+	release_hm_node_params(hm_node);
+
+	hm_node->params.type		= e_FM_PCD_MANIP_HDR;
+	hm_node->params.u.hdr.insrt	= TRUE;
 
 	hm_node->params.u.hdr.dontParseAfterManip &=
 			(pinsert_hm->insert_params.reparse) ? FALSE : TRUE;
 
-	switch (pinsert_hm->insert_params.type) {
-	case DPA_CLS_HM_INSERT_ETHERNET:
-		size = (uint8_t) (sizeof(struct ethhdr) +
-			(pinsert_hm->insert_params.eth.num_tags *
-			sizeof(struct vlan_header)));
+	if (pinsert_hm->insert_params.type == DPA_CLS_HM_INSERT_PPPoE) {
+		uint16_t *ether_type;
+
+		size = (uint8_t) (sizeof(struct pppoe_header) +
+			ETHERTYPE_SIZE + PPP_HEADER_SIZE);
 		pdata = kzalloc(size, GFP_KERNEL);
 		if (!pdata) {
 			log_err("Not enough memory for insert HM.\n");
 			return -ENOMEM;
 		}
+		hm_node->params.u.hdr.insrtParams.type =
+				e_FM_PCD_MANIP_INSRT_BY_HDR;
+		hm_node->params.u.hdr.insrtParams.u.byHdr.type =
+				e_FM_PCD_MANIP_INSRT_BY_HDR_SPECIFIC_L2;
+		hm_node->params.u.hdr.insrtParams.u.byHdr.u.specificL2Params.
+				specificL2 = e_FM_PCD_MANIP_HDR_INSRT_PPPOE;
+		hm_node->params.u.hdr.insrtParams.u.byHdr.u.specificL2Params.
+				update = FALSE;
+		hm_node->params.u.hdr.insrtParams.u.byHdr.u.specificL2Params.
+				size = size;
+		hm_node->params.u.hdr.insrtParams.u.byHdr.u.specificL2Params.
+				p_Data = pdata;
+
+		ether_type = (uint16_t *)pdata;
+		*ether_type = htons(ETYPE_PPPoE_SESSION);
+		/* Copy the PPPoE header data */
+		memcpy(&pdata[ETHERTYPE_SIZE],
+			&pinsert_hm->insert_params.pppoe_header,
+			sizeof(struct pppoe_header));
+	} else {
+		hm_node->params.u.hdr.insrtParams.type =
+				e_FM_PCD_MANIP_INSRT_GENERIC;
 
-		if (pinsert_hm->insert_params.eth.num_tags) {
-			/* Copy Ethernet header data except the EtherType */
-			memcpy(pdata,
-				&pinsert_hm->insert_params.eth.eth_header,
-				sizeof(struct ethhdr) - ETHERTYPE_SIZE);
-			offset += (uint8_t)(sizeof(struct ethhdr) -
+		switch (pinsert_hm->insert_params.type) {
+		case DPA_CLS_HM_INSERT_ETHERNET:
+			size = (uint8_t) (sizeof(struct ethhdr) +
+				(pinsert_hm->insert_params.eth.num_tags *
+				sizeof(struct vlan_header)));
+			pdata = kzalloc(size, GFP_KERNEL);
+			if (!pdata) {
+				log_err("Not enough memory for insert HM.\n");
+				return -ENOMEM;
+			}
+
+			if (pinsert_hm->insert_params.eth.num_tags) {
+				/* Copy Ethernet header data except the EtherType */
+				memcpy(pdata,
+					&pinsert_hm->insert_params.eth.eth_header,
+					sizeof(struct ethhdr) - ETHERTYPE_SIZE);
+				offset += (uint8_t)(sizeof(struct ethhdr) -
 								ETHERTYPE_SIZE);
-			/* Copy the VLAN tags */
-			memcpy(&pdata[offset],
-				&pinsert_hm->insert_params.eth.qtag,
-				pinsert_hm->insert_params.eth.num_tags *
-				sizeof(struct vlan_header));
-			offset += (uint8_t) (pinsert_hm->insert_params.eth.
-				num_tags * sizeof(struct vlan_header));
-			/* Copy the EtherType */
-			memcpy(&pdata[offset],
-		&pinsert_hm->insert_params.eth.eth_header.h_proto,
-				ETHERTYPE_SIZE);
-			offset = 0;
-		} else
-			/* Copy the entire Ethernet header */
-			memcpy(pdata,
-				&pinsert_hm->insert_params.eth.eth_header,
-				sizeof(struct ethhdr));
-		break;
-	case DPA_CLS_HM_INSERT_PPP:
-		size	= PPP_HEADER_SIZE;
-		pdata	= kzalloc(size, GFP_KERNEL);
-		if (!pdata) {
-			log_err("Not enough memory for insert HM.\n");
-			return -ENOMEM;
-		}
+				/* Copy the VLAN tags */
+				memcpy(&pdata[offset],
+					&pinsert_hm->insert_params.eth.qtag,
+					pinsert_hm->insert_params.eth.num_tags *
+					sizeof(struct vlan_header));
+				offset += (uint8_t) (pinsert_hm->insert_params.eth.
+					num_tags * sizeof(struct vlan_header));
+				/* Copy the EtherType */
+				memcpy(&pdata[offset],
+			&pinsert_hm->insert_params.eth.eth_header.h_proto,
+					ETHERTYPE_SIZE);
+				offset = 0;
+			} else
+				/* Copy the entire Ethernet header */
+				memcpy(pdata,
+					&pinsert_hm->insert_params.eth.eth_header,
+					sizeof(struct ethhdr));
+			break;
+		case DPA_CLS_HM_INSERT_PPP:
+			size	= PPP_HEADER_SIZE;
+			pdata	= kzalloc(size, GFP_KERNEL);
+			if (!pdata) {
+				log_err("Not enough memory for insert HM.\n");
+				return -ENOMEM;
+			}
 
-		/* Copy the PPP PID */
-		memcpy(pdata, &pinsert_hm->insert_params.ppp_pid,
-			PPP_HEADER_SIZE);
-		break;
-	case DPA_CLS_HM_INSERT_CUSTOM:
-		size	= pinsert_hm->insert_params.custom.size;
-		pdata	= kzalloc(size, GFP_KERNEL);
-		if (!pdata) {
-			log_err("Not enough memory for insert HM.\n");
-			return -ENOMEM;
+			/* Copy the PPP PID */
+			memcpy(pdata, &pinsert_hm->insert_params.ppp_pid,
+				PPP_HEADER_SIZE);
+			break;
+		case DPA_CLS_HM_INSERT_CUSTOM:
+			size	= pinsert_hm->insert_params.custom.size;
+			pdata	= kzalloc(size, GFP_KERNEL);
+			if (!pdata) {
+				log_err("Not enough memory for insert HM.\n");
+				return -ENOMEM;
+			}
+			memcpy(pdata, pinsert_hm->insert_params.custom.data, size);
+			offset	= pinsert_hm->insert_params.custom.offset;
+			break;
+		default:
+			/* Should never get here */
+			BUG_ON(1);
+			break;
 		}
-		memcpy(pdata, pinsert_hm->insert_params.custom.data, size);
-		offset	= pinsert_hm->insert_params.custom.offset;
-		break;
-	default:
-		/* Should never get here */
-		BUG_ON(1);
-		break;
+		hm_node->params.u.hdr.insrtParams.u.generic.offset	= offset;
+		hm_node->params.u.hdr.insrtParams.u.generic.size	= size;
+		hm_node->params.u.hdr.insrtParams.u.generic.p_Data	= pdata;
+		hm_node->params.u.hdr.insrtParams.u.generic.replace	= FALSE;
 	}
 
-	kfree(hm_node->params.u.hdr.insrtParams.u.generic.p_Data);
-
-	hm_node->params.u.hdr.insrtParams.u.generic.offset	= offset;
-	hm_node->params.u.hdr.insrtParams.u.generic.size	= size;
-	hm_node->params.u.hdr.insrtParams.u.generic.p_Data	= pdata;
-	hm_node->params.u.hdr.insrtParams.u.generic.replace	= FALSE;
-
 	dpa_cls_hm_dbg(("DEBUG: dpa_hm %s (%d) <--\n", __func__,
 		__LINE__));
 
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index 538dc52..e5cb055 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -522,8 +522,11 @@ static int init_hm_chain(void *fm_pcd, struct list_head *chain_head,
 static int remove_hm_chain(struct list_head	*chain_head,
 			struct list_head	*item);
 
-/* Removes a low level (FMD) header manipulation node */
-static void remove_hm_node(struct dpa_cls_hm_node *node);
+/*
+ * Releases the resources used by a low level (FMD) header manipulation node
+ * parameters.
+ */
+static void release_hm_node_params(struct dpa_cls_hm_node *node);
 
 /*
  * Creates a new classifier header manipulation object and links it to an
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h b/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
index da2e608..c98079d 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
@@ -327,7 +327,7 @@ struct dpa_cls_compat_hm_insert_params {
 	enum dpa_cls_hm_insert_type type;
 	union {
 		struct dpa_cls_hm_eth_ins_params eth;
-		struct dpa_cls_hm_pppoe_ins_params pppoe;
+		struct pppoe_header pppoe_header;
 		uint16_t ppp_pid;
 		struct dpa_cls_compat_hm_custom_ins_params custom;
 	};
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index 3f90717..b346cff 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -2698,8 +2698,9 @@ int dpa_cls_hm_insert_params_compatcpy(
 			sizeof(struct dpa_cls_hm_eth_ins_params));
 		break;
 	case DPA_CLS_HM_INSERT_PPPoE:
-		memcpy(&kparam->ins_params.pppoe, &uparam->ins_params.pppoe,
-			sizeof(struct dpa_cls_hm_pppoe_ins_params));
+		memcpy(&kparam->ins_params.pppoe_header,
+			&uparam->ins_params.pppoe_header,
+			sizeof(struct pppoe_header));
 		break;
 	case DPA_CLS_HM_INSERT_PPP:
 		kparam->ins_params.ppp_pid = uparam->ins_params.ppp_pid;
diff --git a/include/linux/fsl_dpa_classifier.h b/include/linux/fsl_dpa_classifier.h
index ad2ca0e..3aca336 100644
--- a/include/linux/fsl_dpa_classifier.h
+++ b/include/linux/fsl_dpa_classifier.h
@@ -781,10 +781,21 @@ struct dpa_cls_hm_fwd_params {
 
 /* Types of the remove header manipulation operations */
 enum dpa_cls_hm_remove_type {
-	DPA_CLS_HM_REMOVE_ETHERNET,	/* removes ETH and all QTags */
-	DPA_CLS_HM_REMOVE_PPPoE,	/* removes ETH, all QTags and PPPoE */
+	/* Removes ETH and all QTags */
+	DPA_CLS_HM_REMOVE_ETHERNET,
+
+	/*
+	 * Removes PPPoE and the following PPP header. Ethertype is
+	 * automatically updated according to the original data packet's
+	 * PPP type field.
+	 */
+	DPA_CLS_HM_REMOVE_PPPoE,
+
 	DPA_CLS_HM_REMOVE_PPP,
-	DPA_CLS_HM_REMOVE_CUSTOM,	/* General remove */
+
+	/* General remove */
+	DPA_CLS_HM_REMOVE_CUSTOM,
+
 	DPA_CLS_HM_REMOVE_LAST_ENTRY
 };
 
@@ -851,10 +862,22 @@ struct dpa_cls_hm_remove_params {
 
 /* Types of insert header manipulation operations */
 enum dpa_cls_hm_insert_type {
-	DPA_CLS_HM_INSERT_ETHERNET,	/* Insert Ethernet + QTags */
-	DPA_CLS_HM_INSERT_PPPoE,	/* Insert PPPoE, ETH and QTags */
+	/* Insert Ethernet + QTags */
+	DPA_CLS_HM_INSERT_ETHERNET,
+
+	/*
+	 * Inserts PPPoE and PPP header. Ethertype is automatically updated
+	 * to 0x8864 (PPPoE session packet). PPP content type is automatically
+	 * detected and set by the u-code based on the original data packet's
+	 * payload.
+	 */
+	DPA_CLS_HM_INSERT_PPPoE,
+
 	DPA_CLS_HM_INSERT_PPP,
-	DPA_CLS_HM_INSERT_CUSTOM,	/* General insert */
+
+	/* General insert at an exact offset (in frame) */
+	DPA_CLS_HM_INSERT_CUSTOM,
+
 	DPA_CLS_HM_INSERT_LAST_ENTRY
 };
 
@@ -923,18 +946,6 @@ struct dpa_cls_hm_eth_ins_params {
 	struct vlan_header			qtag[DPA_CLS_HM_MAX_VLANs];
 };
 
-/* PPPoE header insert params */
-struct dpa_cls_hm_pppoe_ins_params {
-	/*
-	 * Parameters of the Ethernet header to insert together with PPPoE
-	 * header
-	 */
-	struct dpa_cls_hm_eth_ins_params	eth;
-
-	/* PPPoE header to insert */
-	struct pppoe_header			pppoe_header;
-};
-
 /* Ethernet header insert params */
 struct dpa_cls_hm_insert_params {
 	/* Specifies the type of insert header manipulation */
@@ -947,8 +958,8 @@ struct dpa_cls_hm_insert_params {
 		 */
 		struct dpa_cls_hm_eth_ins_params	eth;
 
-		/* PPPoE header insert parameters if type is "insert PPPoE" */
-		struct dpa_cls_hm_pppoe_ins_params	pppoe;
+		/* PPPoE header to insert if type is "insert PPPoE" */
+		struct pppoe_header			pppoe_header;
 
 		/*
 		 * PPP PID value to use in the PPP header if type is "insert
-- 
2.9.3

