From 36d6a65b00bc68cceed2f40780423c1aa0d36791 Mon Sep 17 00:00:00 2001
From: Camelia Groza <camelia.groza@nxp.com>
Date: Tue, 6 Sep 2016 10:06:52 +0300
Subject: [PATCH 037/388] ceetm: configure the congestion state thresholds

Set the upper threshold according to the link speed, and the lower
threshold at 7/8 of the superior one.

Signed-off-by: Camelia Groza <camelia.groza@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_ceetm.c   | 34 +++++++++++++---------
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_ceetm.h   |  6 +++-
 2 files changed, 26 insertions(+), 14 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_ceetm.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_ceetm.c
index 4c2fcc6..dee54e0 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_ceetm.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_ceetm.c
@@ -154,7 +154,7 @@ static int ceetm_alloc_fq(struct ceetm_fq **fq, struct net_device *dev,
 /* Configure a ceetm Class Congestion Group */
 static int ceetm_config_ccg(struct qm_ceetm_ccg **ccg,
 			    struct qm_ceetm_channel *channel, unsigned int id,
-			    struct ceetm_fq *fq, u32 if_support)
+			    struct ceetm_fq *fq, struct dpa_priv_s *dpa_priv)
 {
 	int err;
 	u32 cs_th;
@@ -165,25 +165,33 @@ static int ceetm_config_ccg(struct qm_ceetm_ccg **ccg,
 	if (err)
 		return err;
 
-	/* Configure the count mode (frames/bytes), enable
-	 * notifications, enable tail-drop, and configure the tail-drop
-	 * mode and threshold */
-	ccg_mask = QM_CCGR_WE_MODE | QM_CCGR_WE_CSCN_EN |
+	/* Configure the count mode (frames/bytes), enable congestion state
+	 * notifications, configure the congestion entry and exit thresholds,
+	 * enable tail-drop, configure the tail-drop mode, and set the
+	 * overhead accounting limit
+	 */
+	ccg_mask = QM_CCGR_WE_MODE |
+		   QM_CCGR_WE_CSCN_EN |
+		   QM_CCGR_WE_CS_THRES_IN | QM_CCGR_WE_CS_THRES_OUT |
 		   QM_CCGR_WE_TD_EN | QM_CCGR_WE_TD_MODE |
-		   QM_CCGR_WE_TD_THRES;
+		   QM_CCGR_WE_OAL;
 
 	ccg_params.mode = 0; /* count bytes */
 	ccg_params.cscn_en = 1; /* generate notifications */
 	ccg_params.td_en = 1; /* enable tail-drop */
-	ccg_params.td_mode = 1; /* tail-drop on threshold */
+	ccg_params.td_mode = 0; /* tail-drop on congestion state */
+	ccg_params.oal = (signed char)(min(sizeof(struct sk_buff) +
+			  dpa_priv->tx_headroom, (size_t)FSL_QMAN_MAX_OAL));
 
-	/* Configure the tail-drop threshold according to the link
-	 * speed */
-	if (if_support & SUPPORTED_10000baseT_Full)
+	/* Set the congestion state thresholds according to the link speed */
+	if (dpa_priv->mac_dev->if_support & SUPPORTED_10000baseT_Full)
 		cs_th = CONFIG_FSL_DPAA_CS_THRESHOLD_10G;
 	else
 		cs_th = CONFIG_FSL_DPAA_CS_THRESHOLD_1G;
-	qm_cgr_cs_thres_set64(&ccg_params.td_thres, cs_th, 1);
+
+	qm_cgr_cs_thres_set64(&ccg_params.cs_thres_in, cs_th, 1);
+	qm_cgr_cs_thres_set64(&ccg_params.cs_thres_out,
+			      cs_th * CEETM_CCGR_RATIO, 1);
 
 	err = qman_ceetm_ccg_set(*ccg, ccg_mask, &ccg_params);
 	if (err)
@@ -238,7 +246,7 @@ static int ceetm_config_prio_cls(struct ceetm_class *cls,
 
 	/* Claim and configure the CCG */
 	err = ceetm_config_ccg(&cls->prio.ccg, channel, id, cls->prio.fq,
-			       dpa_priv->mac_dev->if_support);
+			       dpa_priv);
 	if (err)
 		return err;
 
@@ -280,7 +288,7 @@ static int ceetm_config_wbfs_cls(struct ceetm_class *cls,
 
 	/* Claim and configure the CCG */
 	err = ceetm_config_ccg(&cls->wbfs.ccg, channel, id, cls->wbfs.fq,
-			       dpa_priv->mac_dev->if_support);
+			       dpa_priv);
 	if (err)
 		return err;
 
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_ceetm.h b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_ceetm.h
index cf9af04..8f15118 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_ceetm.h
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_ceetm.h
@@ -52,7 +52,11 @@
  * NL=0 - the BMI releases all the internal buffers
  */
 #define CEETM_CONTEXT_A		0x1a00000080000000
-
+/* The ratio between the superior and inferior congestion state thresholds. The
+ * lower threshold is set to 7/8 of the superior one (as the default for WQ
+ * scheduling).
+ */
+#define CEETM_CCGR_RATIO	0.875
 /* For functional purposes, there are num_tx_queues pfifo qdiscs through which
  * frames reach the driver. Their handles start from 1:21. Handles 1:1 to 1:20
  * are reserved for the maximum 32 CEETM channels (majors and minors are in
-- 
2.9.3

