From d6c6a7dc22813e59768677c86889211aad52002d Mon Sep 17 00:00:00 2001
From: Bogdan Purcareata <bogdan.purcareata@nxp.com>
Date: Thu, 13 Oct 2016 15:30:39 +0000
Subject: [PATCH 290/388] staging: fsl-dpaa2: Account extra headroom in skb
 buffer

Seeding the buffer pools is done with an extra headroom, to prevent
reallocations on the IP forwarding path. This extra space is further
used to be a part of the skb buffer headroom, but the current code
does not make it a part of the total skb alloc'd size. In scenarios
with MTU size close to the Rx buffer size, the few bytes eaten by
the extra skb headroom might trigger a skb_panic.

Account the extra headroom when allocating the skb.

Signed-off-by: Bogdan Purcareata <bogdan.purcareata@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c |  5 +++--
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h | 12 ++++++------
 2 files changed, 9 insertions(+), 8 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index ab47152..e569ad5 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -123,7 +123,8 @@ static struct sk_buff *build_linear_skb(struct dpaa2_eth_priv *priv,
 	 * not realloc'd in forwarding scenarios. This has been previously
 	 * allocated when seeding the buffer pools.
 	 */
-	skb = build_skb(fd_vaddr - priv->rx_extra_head, DPAA2_ETH_SKB_SIZE);
+	skb = build_skb(fd_vaddr - priv->rx_extra_head,
+			DPAA2_ETH_SKB_SIZE(priv));
 	if (unlikely(!skb))
 		return NULL;
 
@@ -169,7 +170,7 @@ static struct sk_buff *build_frag_skb(struct dpaa2_eth_priv *priv,
 
 		if (i == 0) {
 			/* We build the skb around the first data buffer */
-			skb = build_skb(sg_vaddr, DPAA2_ETH_SKB_SIZE);
+			skb = build_skb(sg_vaddr, DPAA2_ETH_SKB_SIZE(priv));
 			if (unlikely(!skb))
 				return NULL;
 
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index 3344344..633e8c2 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -90,19 +90,19 @@
 #define DPAA2_ETH_NEEDED_HEADROOM(p_priv) \
 	((p_priv)->tx_data_offset + DPAA2_ETH_TX_BUF_ALIGN)
 
-#define DPAA2_ETH_SKB_SIZE	\
+/* rx_extra_head prevents reallocations in L3 processing. */
+#define DPAA2_ETH_SKB_SIZE(p_priv) \
 	(DPAA2_ETH_RX_BUF_SIZE + \
+	 (p_priv)->rx_extra_head + \
 	 SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
 
 /* Hardware only sees DPAA2_ETH_RX_BUF_SIZE, but we need to allocate ingress
  * buffers large enough to allow building an skb around them and also account
- * for alignment restrictions. rx_extra_head prevents reallocations in
- * L3 processing.
+ * for alignment restrictions.
  */
 #define DPAA2_ETH_BUF_RAW_SIZE(p_priv) \
-	(DPAA2_ETH_SKB_SIZE + \
-	DPAA2_ETH_RX_BUF_ALIGN + \
-	(p_priv)->rx_extra_head)
+	(DPAA2_ETH_SKB_SIZE(p_priv) + \
+	DPAA2_ETH_RX_BUF_ALIGN)
 
 /* PTP nominal frequency 1GHz */
 #define DPAA2_PTP_NOMINAL_FREQ_PERIOD_NS 1
-- 
2.9.3

