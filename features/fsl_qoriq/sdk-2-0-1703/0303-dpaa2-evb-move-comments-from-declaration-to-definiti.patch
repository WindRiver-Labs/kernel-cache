From a29f6e967e56b8516c221a94e00b2b9b2dfbcb98 Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@nxp.com>
Date: Tue, 8 Nov 2016 11:22:03 +0200
Subject: [PATCH 303/388] dpaa2-evb: move comments from declaration to
 definition

Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/evb/dpdmux.c | 322 +++++++++++++++++++++++++++++++++
 drivers/staging/fsl-dpaa2/evb/dpdmux.h | 322 ---------------------------------
 2 files changed, 322 insertions(+), 322 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux.c b/drivers/staging/fsl-dpaa2/evb/dpdmux.c
index 9fbd7d7..a1ba8cc 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux.c
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux.c
@@ -34,6 +34,23 @@
 #include "dpdmux.h"
 #include "dpdmux-cmd.h"
 
+/**
+ * dpdmux_open() - Open a control session for the specified object
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @dpdmux_id:		DPDMUX unique ID
+ * @token:		Returned token; use in subsequent API calls
+ *
+ * This function can be used to open a control session for an
+ * already created object; an object may have been declared in
+ * the DPL or by calling the dpdmux_create() function.
+ * This function returns a unique authentication token,
+ * associated with the specific object ID and the specific MC
+ * portal; this token must be used in all subsequent commands for
+ * this specific object.
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_open(struct fsl_mc_io *mc_io,
 		u32 cmd_flags,
 		int dpdmux_id,
@@ -59,6 +76,17 @@ int dpdmux_open(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_close() - Close the control session of the object
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPDMUX object
+ *
+ * After this function is called, no further operations are
+ * allowed on the object without opening a new control session.
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_close(struct fsl_mc_io *mc_io,
 		 u32 cmd_flags,
 		 u16 token)
@@ -74,6 +102,28 @@ int dpdmux_close(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_create() - Create the DPDMUX object
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token:	Parent container token; '0' for default container
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @cfg:	Configuration structure
+ * @obj_id: returned object id
+ *
+ * Create the DPDMUX object, allocate required resources and
+ * perform required initialization.
+ *
+ * The object can be created either by declaring it in the
+ * DPL file, or by calling this function.
+ *
+ * The function accepts an authentication token of a parent
+ * container that this object should be assigned to. The token
+ * can be '0' so the object will be assigned to the default container.
+ * The newly created object can be opened with the returned
+ * object id and using the container's associated tokens and MC portals.
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_create(struct fsl_mc_io	*mc_io,
 		  u16	dprc_token,
 		u32	cmd_flags,
@@ -100,6 +150,21 @@ int dpdmux_create(struct fsl_mc_io	*mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_destroy() - Destroy the DPDMUX object and release all its resources.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token: Parent container token; '0' for default container
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @object_id:	The object id; it must be a valid id within the container that
+ * created this object;
+ *
+ * The function accepts the authentication token of the parent container that
+ * created the object (not the one that currently owns the object). The object
+ * is searched within parent using the provided 'object_id'.
+ * All tokens to the object must be closed before calling destroy.
+ *
+ * Return:	'0' on Success; error code otherwise.
+ */
 int dpdmux_destroy(struct fsl_mc_io *mc_io,
 		   u16 dprc_token,
 		u32 cmd_flags,
@@ -118,6 +183,14 @@ int dpdmux_destroy(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_enable() - Enable DPDMUX functionality
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_enable(struct fsl_mc_io *mc_io,
 		  u32 cmd_flags,
 		  u16 token)
@@ -133,6 +206,14 @@ int dpdmux_enable(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_disable() - Disable DPDMUX functionality
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_disable(struct fsl_mc_io *mc_io,
 		   u32 cmd_flags,
 		   u16 token)
@@ -148,6 +229,15 @@ int dpdmux_disable(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_is_enabled() - Check if the DPDMUX is enabled.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @en:		Returns '1' if object is enabled; '0' otherwise
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_is_enabled(struct fsl_mc_io *mc_io,
 		      u32 cmd_flags,
 		      u16 token,
@@ -171,6 +261,14 @@ int dpdmux_is_enabled(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_reset() - Reset the DPDMUX, returns the object to initial state.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_reset(struct fsl_mc_io *mc_io,
 		 u32 cmd_flags,
 		 u16 token)
@@ -186,6 +284,16 @@ int dpdmux_reset(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_set_irq() - Set IRQ information for the DPDMUX to trigger an interrupt
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @irq_index:	Identifies the interrupt index to configure
+ * @irq_cfg:	IRQ configuration
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_set_irq(struct fsl_mc_io	*mc_io,
 		   u32		cmd_flags,
 		   u16		token,
@@ -204,6 +312,18 @@ int dpdmux_set_irq(struct fsl_mc_io	*mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_get_irq() - Get IRQ information from the DPDMUX.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @irq_index:	The interrupt index to configure
+ * @type:	Interrupt type: 0 represents message interrupt
+ *		type (both irq_addr and irq_val are valid)
+ * @irq_cfg:	IRQ attributes
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_get_irq(struct fsl_mc_io *mc_io,
 		   u32 cmd_flags,
 		   u16		token,
@@ -231,6 +351,21 @@ int dpdmux_get_irq(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_set_irq_enable() - Set overall interrupt state.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @irq_index:	The interrupt index to configure
+ * @en:		Interrupt state - enable = 1, disable = 0
+ *
+ * Allows GPP software to control when interrupts are generated.
+ * Each interrupt can have up to 32 causes.  The enable/disable control's the
+ * overall interrupt state. if the interrupt is disabled no causes will cause
+ * an interrupt.
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_set_irq_enable(struct fsl_mc_io *mc_io,
 			  u32 cmd_flags,
 			  u16 token,
@@ -249,6 +384,16 @@ int dpdmux_set_irq_enable(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_get_irq_enable() - Get overall interrupt state.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @irq_index:	The interrupt index to configure
+ * @en:		Returned interrupt state - enable = 1, disable = 0
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_get_irq_enable(struct fsl_mc_io *mc_io,
 			  u32 cmd_flags,
 			  u16 token,
@@ -275,6 +420,22 @@ int dpdmux_get_irq_enable(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_set_irq_mask() - Set interrupt mask.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @irq_index:	The interrupt index to configure
+ * @mask:	event mask to trigger interrupt;
+ *		each bit:
+ *			0 = ignore event
+ *			1 = consider event for asserting IRQ
+ *
+ * Every interrupt can have up to 32 causes and the interrupt model supports
+ * masking/unmasking each cause independently
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_set_irq_mask(struct fsl_mc_io *mc_io,
 			u32 cmd_flags,
 			u16 token,
@@ -293,6 +454,19 @@ int dpdmux_set_irq_mask(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_get_irq_mask() - Get interrupt mask.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @irq_index:	The interrupt index to configure
+ * @mask:	Returned event mask to trigger interrupt
+ *
+ * Every interrupt can have up to 32 causes and the interrupt model supports
+ * masking/unmasking each cause independently
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_get_irq_mask(struct fsl_mc_io *mc_io,
 			u32 cmd_flags,
 			u16 token,
@@ -319,6 +493,18 @@ int dpdmux_get_irq_mask(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_get_irq_status() - Get the current status of any pending interrupts.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @irq_index:	The interrupt index to configure
+ * @status:	Returned interrupts status - one bit per cause:
+ *			0 = no interrupt pending
+ *			1 = interrupt pending
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_get_irq_status(struct fsl_mc_io *mc_io,
 			  u32 cmd_flags,
 			  u16 token,
@@ -345,6 +531,18 @@ int dpdmux_get_irq_status(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_clear_irq_status() - Clear a pending interrupt's status
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @irq_index:	The interrupt index to configure
+ * @status:	bits to clear (W1C) - one bit per cause:
+ *			0 = don't change
+ *			1 = clear status bit
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_clear_irq_status(struct fsl_mc_io *mc_io,
 			    u32 cmd_flags,
 			    u16 token,
@@ -363,6 +561,15 @@ int dpdmux_clear_irq_status(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_get_attributes() - Retrieve DPDMUX attributes
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @attr:	Returned object's attributes
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_get_attributes(struct fsl_mc_io *mc_io,
 			  u32 cmd_flags,
 			  u16 token,
@@ -387,6 +594,20 @@ int dpdmux_get_attributes(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_set_max_frame_length() - Set the maximum frame length in DPDMUX
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPDMUX object
+ * @max_frame_length:	The required maximum frame length
+ *
+ * Update the maximum frame length on all DMUX interfaces.
+ * In case of VEPA, the maximum frame length on all dmux interfaces
+ * will be updated with the minimum value of the mfls of the connected
+ * dpnis and the actual value of dmux mfl.
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_set_max_frame_length(struct fsl_mc_io *mc_io,
 				u32 cmd_flags,
 				   u16 token,
@@ -404,6 +625,14 @@ int dpdmux_set_max_frame_length(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+* dpdmux_ul_reset_counters() - Function resets the uplink counter
+* @mc_io:	Pointer to MC portal's I/O object
+* @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+* @token:	Token of DPDMUX object
+*
+* Return:	'0' on Success; Error code otherwise.
+*/
 int dpdmux_ul_reset_counters(struct fsl_mc_io *mc_io,
 			     u32 cmd_flags,
 			     u16 token)
@@ -419,6 +648,23 @@ int dpdmux_ul_reset_counters(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_if_set_accepted_frames() - Set the accepted frame types
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @if_id:	Interface ID (0 for uplink, or 1-num_ifs);
+ * @cfg:	Frame types configuration
+ *
+ * if 'DPDMUX_ADMIT_ONLY_VLAN_TAGGED' is set - untagged frames or
+ * priority-tagged frames are discarded.
+ * if 'DPDMUX_ADMIT_ONLY_UNTAGGED' is set - untagged frames or
+ * priority-tagged frames are accepted.
+ * if 'DPDMUX_ADMIT_ALL' is set (default mode) - all VLAN tagged,
+ * untagged and priority-tagged frame are accepted;
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_if_set_accepted_frames(struct fsl_mc_io *mc_io,
 				  u32 cmd_flags,
 				  u16 token,
@@ -437,6 +683,16 @@ int dpdmux_if_set_accepted_frames(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_if_get_attributes() - Obtain DPDMUX interface attributes
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @if_id:	Interface ID (0 for uplink, or 1-num_ifs);
+ * @attr:	Interface attributes
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_if_get_attributes(struct fsl_mc_io *mc_io,
 			     u32 cmd_flags,
 			     u16 token,
@@ -463,6 +719,19 @@ int dpdmux_if_get_attributes(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_if_remove_l2_rule() - Remove L2 rule from DPDMUX table
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @if_id:	Destination interface ID
+ * @rule:	L2 rule
+ *
+ * Function removes a L2 rule from DPDMUX table
+ * or adds an interface to an existing multicast address
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_if_remove_l2_rule(struct fsl_mc_io *mc_io,
 			     u32 cmd_flags,
 			     u16 token,
@@ -481,6 +750,19 @@ int dpdmux_if_remove_l2_rule(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_if_add_l2_rule() - Add L2 rule into DPDMUX table
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPDMUX object
+ * @if_id:	Destination interface ID
+ * @rule:	L2 rule
+ *
+ * Function adds a L2 rule into DPDMUX table
+ * or adds an interface to an existing multicast address
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_if_add_l2_rule(struct fsl_mc_io *mc_io,
 			  u32 cmd_flags,
 			  u16 token,
@@ -499,6 +781,17 @@ int dpdmux_if_add_l2_rule(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+* dpdmux_if_get_counter() - Functions obtains specific counter of an interface
+* @mc_io: Pointer to MC portal's I/O object
+* @cmd_flags: Command flags; one or more of 'MC_CMD_FLAG_'
+* @token: Token of DPDMUX object
+* @if_id:  Interface Id
+* @counter_type: counter type
+* @counter: Returned specific counter information
+*
+* Return:	'0' on Success; Error code otherwise.
+*/
 int dpdmux_if_get_counter(struct fsl_mc_io		*mc_io,
 			  u32			cmd_flags,
 			  u16			token,
@@ -526,6 +819,16 @@ int dpdmux_if_get_counter(struct fsl_mc_io		*mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_if_set_link_cfg() - set the link configuration.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token: Token of DPSW object
+ * @if_id: interface id
+ * @cfg: Link configuration
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
 int dpdmux_if_set_link_cfg(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
 			   u16 token,
@@ -544,6 +847,16 @@ int dpdmux_if_set_link_cfg(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+/**
+ * dpdmux_if_get_link_state - Return the link state
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token: Token of DPSW object
+ * @if_id: interface id
+ * @state: link state
+ *
+ * @returns	'0' on Success; Error code otherwise.
+ */
 int dpdmux_if_get_link_state(struct fsl_mc_io *mc_io,
 			     u32 cmd_flags,
 			     u16 token,
@@ -570,6 +883,15 @@ int dpdmux_if_get_link_state(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
+/**
+ * dpdmux_get_api_version() - Get Data Path Demux API version
+ * @mc_io:  Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @major_ver:	Major version of data path demux API
+ * @minor_ver:	Minor version of data path demux API
+ *
+ * Return:  '0' on Success; Error code otherwise.
+ */
 int dpdmux_get_api_version(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
 			   u16 *major_ver,
diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux.h b/drivers/staging/fsl-dpaa2/evb/dpdmux.h
index ef1b587..0f71142 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux.h
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux.h
@@ -40,39 +40,11 @@ struct fsl_mc_io;
  * Contains API for handling DPDMUX topology and functionality
  */
 
-/**
- * dpdmux_open() - Open a control session for the specified object
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @dpdmux_id:		DPDMUX unique ID
- * @token:		Returned token; use in subsequent API calls
- *
- * This function can be used to open a control session for an
- * already created object; an object may have been declared in
- * the DPL or by calling the dpdmux_create() function.
- * This function returns a unique authentication token,
- * associated with the specific object ID and the specific MC
- * portal; this token must be used in all subsequent commands for
- * this specific object.
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_open(struct fsl_mc_io	 *mc_io,
 		u32		 cmd_flags,
 		int			 dpdmux_id,
 		u16		 *token);
 
-/**
- * dpdmux_close() - Close the control session of the object
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPDMUX object
- *
- * After this function is called, no further operations are
- * allowed on the object without opening a new control session.
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_close(struct fsl_mc_io	*mc_io,
 		 u32		cmd_flags,
 		 u16		token);
@@ -151,100 +123,30 @@ struct dpdmux_cfg {
 	} adv;
 };
 
-/**
- * dpdmux_create() - Create the DPDMUX object
- * @mc_io:	Pointer to MC portal's I/O object
- * @dprc_token:	Parent container token; '0' for default container
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @cfg:	Configuration structure
- * @obj_id: returned object id
- *
- * Create the DPDMUX object, allocate required resources and
- * perform required initialization.
- *
- * The object can be created either by declaring it in the
- * DPL file, or by calling this function.
- *
- * The function accepts an authentication token of a parent
- * container that this object should be assigned to. The token
- * can be '0' so the object will be assigned to the default container.
- * The newly created object can be opened with the returned
- * object id and using the container's associated tokens and MC portals.
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_create(struct fsl_mc_io		*mc_io,
 		  u16			dprc_token,
 		  u32			cmd_flags,
 		  const struct dpdmux_cfg	*cfg,
 		  u32			*obj_id);
 
-/**
- * dpdmux_destroy() - Destroy the DPDMUX object and release all its resources.
- * @mc_io:	Pointer to MC portal's I/O object
- * @dprc_token: Parent container token; '0' for default container
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @object_id:	The object id; it must be a valid id within the container that
- * created this object;
- *
- * The function accepts the authentication token of the parent container that
- * created the object (not the one that currently owns the object). The object
- * is searched within parent using the provided 'object_id'.
- * All tokens to the object must be closed before calling destroy.
- *
- * Return:	'0' on Success; error code otherwise.
- */
 int dpdmux_destroy(struct fsl_mc_io	*mc_io,
 		   u16		dprc_token,
 		   u32		cmd_flags,
 		   u32		object_id);
 
-/**
- * dpdmux_enable() - Enable DPDMUX functionality
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_enable(struct fsl_mc_io	*mc_io,
 		  u32		cmd_flags,
 		  u16		token);
 
-/**
- * dpdmux_disable() - Disable DPDMUX functionality
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_disable(struct fsl_mc_io	*mc_io,
 		   u32		cmd_flags,
 		   u16		token);
 
-/**
- * dpdmux_is_enabled() - Check if the DPDMUX is enabled.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @en:		Returns '1' if object is enabled; '0' otherwise
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_is_enabled(struct fsl_mc_io	*mc_io,
 		      u32		cmd_flags,
 		      u16		token,
 		      int		*en);
 
-/**
- * dpdmux_reset() - Reset the DPDMUX, returns the object to initial state.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_reset(struct fsl_mc_io	*mc_io,
 		 u32		cmd_flags,
 		 u16		token);
@@ -261,34 +163,12 @@ struct dpdmux_irq_cfg {
 	     int		irq_num;
 };
 
-/**
- * dpdmux_set_irq() - Set IRQ information for the DPDMUX to trigger an interrupt
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @irq_index:	Identifies the interrupt index to configure
- * @irq_cfg:	IRQ configuration
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_set_irq(struct fsl_mc_io		*mc_io,
 		   u32			cmd_flags,
 		   u16			token,
 		   u8			irq_index,
 		   struct dpdmux_irq_cfg	*irq_cfg);
 
-/**
- * dpdmux_get_irq() - Get IRQ information from the DPDMUX.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @irq_index:	The interrupt index to configure
- * @type:	Interrupt type: 0 represents message interrupt
- *		type (both irq_addr and irq_val are valid)
- * @irq_cfg:	IRQ attributes
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_get_irq(struct fsl_mc_io		*mc_io,
 		   u32			cmd_flags,
 		   u16			token,
@@ -296,114 +176,36 @@ int dpdmux_get_irq(struct fsl_mc_io		*mc_io,
 		   int				*type,
 		   struct dpdmux_irq_cfg	*irq_cfg);
 
-/**
- * dpdmux_set_irq_enable() - Set overall interrupt state.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @irq_index:	The interrupt index to configure
- * @en:		Interrupt state - enable = 1, disable = 0
- *
- * Allows GPP software to control when interrupts are generated.
- * Each interrupt can have up to 32 causes.  The enable/disable control's the
- * overall interrupt state. if the interrupt is disabled no causes will cause
- * an interrupt.
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_set_irq_enable(struct fsl_mc_io	*mc_io,
 			  u32		cmd_flags,
 			  u16		token,
 			  u8		irq_index,
 			  u8		en);
 
-/**
- * dpdmux_get_irq_enable() - Get overall interrupt state.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @irq_index:	The interrupt index to configure
- * @en:		Returned interrupt state - enable = 1, disable = 0
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_get_irq_enable(struct fsl_mc_io	*mc_io,
 			  u32		cmd_flags,
 			  u16		token,
 			  u8		irq_index,
 			  u8		*en);
 
-/**
- * dpdmux_set_irq_mask() - Set interrupt mask.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @irq_index:	The interrupt index to configure
- * @mask:	event mask to trigger interrupt;
- *		each bit:
- *			0 = ignore event
- *			1 = consider event for asserting IRQ
- *
- * Every interrupt can have up to 32 causes and the interrupt model supports
- * masking/unmasking each cause independently
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_set_irq_mask(struct fsl_mc_io	*mc_io,
 			u32		cmd_flags,
 			u16		token,
 			u8			irq_index,
 			u32		mask);
 
-/**
- * dpdmux_get_irq_mask() - Get interrupt mask.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @irq_index:	The interrupt index to configure
- * @mask:	Returned event mask to trigger interrupt
- *
- * Every interrupt can have up to 32 causes and the interrupt model supports
- * masking/unmasking each cause independently
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_get_irq_mask(struct fsl_mc_io	*mc_io,
 			u32		cmd_flags,
 			u16		token,
 			u8			irq_index,
 			u32		*mask);
 
-/**
- * dpdmux_get_irq_status() - Get the current status of any pending interrupts.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @irq_index:	The interrupt index to configure
- * @status:	Returned interrupts status - one bit per cause:
- *			0 = no interrupt pending
- *			1 = interrupt pending
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_get_irq_status(struct fsl_mc_io	*mc_io,
 			  u32		cmd_flags,
 			  u16		token,
 			  u8		irq_index,
 			  u32		*status);
 
-/**
- * dpdmux_clear_irq_status() - Clear a pending interrupt's status
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @irq_index:	The interrupt index to configure
- * @status:	bits to clear (W1C) - one bit per cause:
- *			0 = don't change
- *			1 = clear status bit
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_clear_irq_status(struct fsl_mc_io	*mc_io,
 			    u32		cmd_flags,
 			    u16		token,
@@ -428,34 +230,11 @@ struct dpdmux_attr {
 	u16		mem_size;
 };
 
-/**
- * dpdmux_get_attributes() - Retrieve DPDMUX attributes
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @attr:	Returned object's attributes
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_get_attributes(struct fsl_mc_io	*mc_io,
 			  u32		cmd_flags,
 			  u16		token,
 			  struct dpdmux_attr	*attr);
 
-/**
- * dpdmux_set_max_frame_length() - Set the maximum frame length in DPDMUX
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:		Token of DPDMUX object
- * @max_frame_length:	The required maximum frame length
- *
- * Update the maximum frame length on all DMUX interfaces.
- * In case of VEPA, the maximum frame length on all dmux interfaces
- * will be updated with the minimum value of the mfls of the connected
- * dpnis and the actual value of dmux mfl.
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_set_max_frame_length(struct fsl_mc_io	*mc_io,
 				u32		cmd_flags,
 				u16		token,
@@ -526,23 +305,6 @@ struct dpdmux_accepted_frames {
 	enum dpdmux_action			unaccept_act;
 };
 
-/**
- * dpdmux_if_set_accepted_frames() - Set the accepted frame types
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @if_id:	Interface ID (0 for uplink, or 1-num_ifs);
- * @cfg:	Frame types configuration
- *
- * if 'DPDMUX_ADMIT_ONLY_VLAN_TAGGED' is set - untagged frames or
- * priority-tagged frames are discarded.
- * if 'DPDMUX_ADMIT_ONLY_UNTAGGED' is set - untagged frames or
- * priority-tagged frames are accepted.
- * if 'DPDMUX_ADMIT_ALL' is set (default mode) - all VLAN tagged,
- * untagged and priority-tagged frame are accepted;
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_if_set_accepted_frames(struct fsl_mc_io		*mc_io,
 				  u32			cmd_flags,
 				  u16			token,
@@ -561,16 +323,6 @@ struct dpdmux_if_attr {
 	enum dpdmux_accepted_frames_type	accept_frame_type;
 };
 
-/**
- * dpdmux_if_get_attributes() - Obtain DPDMUX interface attributes
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @if_id:	Interface ID (0 for uplink, or 1-num_ifs);
- * @attr:	Interface attributes
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_if_get_attributes(struct fsl_mc_io		*mc_io,
 			     u32			cmd_flags,
 			     u16			token,
@@ -587,55 +339,18 @@ struct dpdmux_l2_rule {
 	u16	vlan_id;
 };
 
-/**
- * dpdmux_if_remove_l2_rule() - Remove L2 rule from DPDMUX table
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @if_id:	Destination interface ID
- * @rule:	L2 rule
- *
- * Function removes a L2 rule from DPDMUX table
- * or adds an interface to an existing multicast address
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_if_remove_l2_rule(struct fsl_mc_io			*mc_io,
 			     u32				cmd_flags,
 			     u16				token,
 			     u16				if_id,
 			     const struct dpdmux_l2_rule	*rule);
 
-/**
- * dpdmux_if_add_l2_rule() - Add L2 rule into DPDMUX table
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @if_id:	Destination interface ID
- * @rule:	L2 rule
- *
- * Function adds a L2 rule into DPDMUX table
- * or adds an interface to an existing multicast address
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_if_add_l2_rule(struct fsl_mc_io		*mc_io,
 			  u32			cmd_flags,
 			  u16			token,
 			  u16			if_id,
 			  const struct dpdmux_l2_rule	*rule);
 
-/**
-* dpdmux_if_get_counter() - Functions obtains specific counter of an interface
-* @mc_io: Pointer to MC portal's I/O object
-* @cmd_flags: Command flags; one or more of 'MC_CMD_FLAG_'
-* @token: Token of DPDMUX object
-* @if_id:  Interface Id
-* @counter_type: counter type
-* @counter: Returned specific counter information
-*
-* Return:	'0' on Success; Error code otherwise.
-*/
 int dpdmux_if_get_counter(struct fsl_mc_io		*mc_io,
 			  u32			cmd_flags,
 			  u16			token,
@@ -643,14 +358,6 @@ int dpdmux_if_get_counter(struct fsl_mc_io		*mc_io,
 			  enum dpdmux_counter_type	counter_type,
 			  u64			*counter);
 
-/**
-* dpdmux_ul_reset_counters() - Function resets the uplink counter
-* @mc_io:	Pointer to MC portal's I/O object
-* @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
-* @token:	Token of DPDMUX object
-*
-* Return:	'0' on Success; Error code otherwise.
-*/
 int dpdmux_ul_reset_counters(struct fsl_mc_io	*mc_io,
 			     u32		cmd_flags,
 			     u16		token);
@@ -682,16 +389,6 @@ struct dpdmux_link_cfg {
 	u64 options;
 };
 
-/**
- * dpdmux_if_set_link_cfg() - set the link configuration.
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token: Token of DPSW object
- * @if_id: interface id
- * @cfg: Link configuration
- *
- * Return:	'0' on Success; Error code otherwise.
- */
 int dpdmux_if_set_link_cfg(struct fsl_mc_io		*mc_io,
 			   u32			cmd_flags,
 			   u16			token,
@@ -709,31 +406,12 @@ struct dpdmux_link_state {
 	int      up;
 };
 
-/**
- * dpdmux_if_get_link_state - Return the link state
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token: Token of DPSW object
- * @if_id: interface id
- * @state: link state
- *
- * @returns	'0' on Success; Error code otherwise.
- */
 int dpdmux_if_get_link_state(struct fsl_mc_io		*mc_io,
 			     u32			cmd_flags,
 			     u16			token,
 			     u16			if_id,
 			     struct dpdmux_link_state	*state);
 
-/**
- * dpaiop_get_api_version() - Get Data Path Demux API version
- * @mc_io:  Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @major_ver:	Major version of data path demux API
- * @minor_ver:	Minor version of data path demux API
- *
- * Return:  '0' on Success; Error code otherwise.
- */
 int dpdmux_get_api_version(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
 			   u16 *major_ver,
-- 
2.9.3

