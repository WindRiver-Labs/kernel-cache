From 5f870fc350da8d550223c60d4ae8ed58aee0f1ec Mon Sep 17 00:00:00 2001
From: Yangbo Lu <yangbo.lu@nxp.com>
Date: Thu, 1 Sep 2016 11:46:09 +0800
Subject: [PATCH 129/388] soc: fsl: rewrite GUTS driver

This patch rewrites GUTS driver and registering soc device are supported.

Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
Signed-off-by: Mingkai Hu <mingkai.hu@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/mmc/host/sdhci-of-esdhc.c |   2 +-
 drivers/soc/fsl/Kconfig           |   6 +-
 drivers/soc/fsl/guts.c            | 204 +++++++++++++++++++++++++++++++-------
 include/linux/fsl/guts.h          |   4 +-
 4 files changed, 173 insertions(+), 43 deletions(-)

diff --git a/drivers/mmc/host/sdhci-of-esdhc.c b/drivers/mmc/host/sdhci-of-esdhc.c
index 2c703c9..3afd829 100644
--- a/drivers/mmc/host/sdhci-of-esdhc.c
+++ b/drivers/mmc/host/sdhci-of-esdhc.c
@@ -961,7 +961,7 @@ static void esdhc_init(struct platform_device *pdev, struct sdhci_host *host)
 			     GFP_KERNEL);
 	pltfm_host->priv = esdhc;
 
-	svr = guts_get_svr();
+	svr = fsl_guts_get_svr();
 	esdhc->soc_ver = SVR_SOC_VER(svr);
 	esdhc->soc_rev = SVR_REV(svr);
 
diff --git a/drivers/soc/fsl/Kconfig b/drivers/soc/fsl/Kconfig
index 92a085e..67f5a6a 100644
--- a/drivers/soc/fsl/Kconfig
+++ b/drivers/soc/fsl/Kconfig
@@ -1,5 +1,9 @@
+#
+# Freescale SOC drivers
+#
 config FSL_GUTS
-	bool
+       bool "Freescale QorIQ GUTS driver"
+       select SOC_BUS
 
 if ARM || ARM64
 source "drivers/soc/fsl/Kconfig.arm"
diff --git a/drivers/soc/fsl/guts.c b/drivers/soc/fsl/guts.c
index 11065c2..7928731 100644
--- a/drivers/soc/fsl/guts.c
+++ b/drivers/soc/fsl/guts.c
@@ -10,29 +10,122 @@
  */
 
 #include <linux/io.h>
-#include <linux/module.h>
 #include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/of_fdt.h>
+#include <linux/sys_soc.h>
 #include <linux/of_address.h>
-#include <linux/of_platform.h>
+#include <linux/platform_device.h>
 #include <linux/fsl/guts.h>
+#include <linux/fsl/svr.h>
 
 struct guts {
 	struct ccsr_guts __iomem *regs;
 	bool little_endian;
 };
 
+struct fsl_soc_die_attr {
+	char	*die;
+	u32	svr;
+	u32	mask;
+};
+
 static struct guts *guts;
+static struct soc_device_attribute soc_dev_attr;
+static struct soc_device *soc_dev;
+
+
+/* SoC die attribute definition for QorIQ platform */
+static const struct fsl_soc_die_attr fsl_soc_die[] = {
+#ifdef CONFIG_PPC
+	/*
+	 * Power Architecture-based SoCs T Series
+	 */
+
+	/* Die: T4240, SoC: T4240/T4160/T4080 */
+	{ .die		= "T4240",
+	  .svr		= 0x82400000,
+	  .mask		= 0xfff00000,
+	},
+	/* Die: T1040, SoC: T1040/T1020/T1042/T1022 */
+	{ .die		= "T1040",
+	  .svr		= 0x85200000,
+	  .mask		= 0xfff00000,
+	},
+	/* Die: T2080, SoC: T2080/T2081 */
+	{ .die		= "T2080",
+	  .svr		= 0x85300000,
+	  .mask		= 0xfff00000,
+	},
+	/* Die: T1024, SoC: T1024/T1014/T1023/T1013 */
+	{ .die		= "T1024",
+	  .svr		= 0x85400000,
+	  .mask		= 0xfff00000,
+	},
+#endif /* CONFIG_PPC */
+#if defined(CONFIG_ARCH_MXC) || defined(CONFIG_ARCH_LAYERSCAPE)
+	/*
+	 * ARM-based SoCs LS Series
+	 */
+
+	/* Die: LS1043A, SoC: LS1043A/LS1023A */
+	{ .die		= "LS1043A",
+	  .svr		= 0x87920000,
+	  .mask		= 0xffff0000,
+	},
+	/* Die: LS2080A, SoC: LS2080A/LS2040A/LS2085A */
+	{ .die		= "LS2080A",
+	  .svr		= 0x87010000,
+	  .mask		= 0xff3f0000,
+	},
+	/* Die: LS1088A, SoC: LS1088A/LS1048A/LS1084A/LS1044A */
+	{ .die		= "LS1088A",
+	  .svr		= 0x87030000,
+	  .mask		= 0xff3f0000,
+	},
+	/* Die: LS1012A, SoC: LS1012A */
+	{ .die		= "LS1012A",
+	  .svr		= 0x87040000,
+	  .mask		= 0xffff0000,
+	},
+	/* Die: LS1046A, SoC: LS1046A/LS1026A */
+	{ .die		= "LS1046A",
+	  .svr		= 0x87070000,
+	  .mask		= 0xffff0000,
+	},
+	/* Die: LS2088A, SoC: LS2088A/LS2048A/LS2084A/LS2044A */
+	{ .die		= "LS2088A",
+	  .svr		= 0x87090000,
+	  .mask		= 0xff3f0000,
+	},
+	/* Die: LS1021A, SoC: LS1021A/LS1020A/LS1022A
+	 * Note: Put this die at the end in cause of incorrect identification
+	 */
+	{ .die		= "LS1021A",
+	  .svr		= 0x87000000,
+	  .mask		= 0xfff00000,
+	},
+#endif /* CONFIG_ARCH_MXC || CONFIG_ARCH_LAYERSCAPE */
+	{ },
+};
+
+static const struct fsl_soc_die_attr *fsl_soc_die_match(
+	u32 svr, const struct fsl_soc_die_attr *matches)
+{
+	while (matches->svr) {
+		if (matches->svr == (svr & matches->mask))
+			return matches;
+		matches++;
+	};
+	return NULL;
+}
 
-u32 guts_get_svr(void)
+u32 fsl_guts_get_svr(void)
 {
 	u32 svr = 0;
 
-	if ((!guts) || (!(guts->regs))) {
-#ifdef CONFIG_PPC
-		svr =  mfspr(SPRN_SVR);
-#endif
+	if (!guts || !guts->regs)
 		return svr;
-	}
 
 	if (guts->little_endian)
 		svr = ioread32(&guts->regs->svr);
@@ -41,31 +134,74 @@ u32 guts_get_svr(void)
 
 	return svr;
 }
-EXPORT_SYMBOL_GPL(guts_get_svr);
+EXPORT_SYMBOL(fsl_guts_get_svr);
 
-static int guts_probe(struct platform_device *pdev)
+static int fsl_guts_probe(struct platform_device *pdev)
 {
 	struct device_node *np = pdev->dev.of_node;
+	const struct fsl_soc_die_attr *soc_die;
+	const char *machine;
+	u32 svr;
+	int ret = 0;
 
+	/* Initialize guts */
 	guts = kzalloc(sizeof(*guts), GFP_KERNEL);
 	if (!guts)
 		return -ENOMEM;
 
-	if (of_property_read_bool(np, "little-endian"))
-		guts->little_endian = true;
-	else
-		guts->little_endian = false;
+	guts->little_endian = of_property_read_bool(np, "little-endian");
 
 	guts->regs = of_iomap(np, 0);
-	if (!(guts->regs))
-		return -ENOMEM;
+	if (!guts->regs) {
+		ret = -ENOMEM;
+		goto out_free;
+	}
 
-	of_node_put(np);
+	/* Register soc device */
+	machine = of_flat_dt_get_machine_name();
+	if (machine)
+		soc_dev_attr.machine = kstrdup(machine, GFP_KERNEL);
+
+	svr = fsl_guts_get_svr();
+	soc_die = fsl_soc_die_match(svr, fsl_soc_die);
+	if (soc_die) {
+		soc_dev_attr.family = kasprintf(GFP_KERNEL, "QorIQ %s",
+						soc_die->die);
+	} else {
+		soc_dev_attr.family = kasprintf(GFP_KERNEL, "QorIQ");
+	}
+	soc_dev_attr.soc_id = kasprintf(GFP_KERNEL, "svr:0x%08x", svr);
+	soc_dev_attr.revision = kasprintf(GFP_KERNEL, "%d.%d",
+					   SVR_MAJ(svr), SVR_MIN(svr));
+
+	soc_dev = soc_device_register(&soc_dev_attr);
+	if (IS_ERR(soc_dev)) {
+		ret = PTR_ERR(soc_dev);
+		goto out;
+	}
+	pr_info("Machine: %s\n", soc_dev_attr.machine);
+	pr_info("SoC family: %s\n", soc_dev_attr.family);
+	pr_info("SoC ID: %s, Revision: %s\n",
+		soc_dev_attr.soc_id, soc_dev_attr.revision);
 	return 0;
+out:
+	kfree(soc_dev_attr.machine);
+	kfree(soc_dev_attr.family);
+	kfree(soc_dev_attr.soc_id);
+	kfree(soc_dev_attr.revision);
+	iounmap(guts->regs);
+out_free:
+	kfree(guts);
+	return ret;
 }
 
-static int guts_remove(struct platform_device *pdev)
+static int fsl_guts_remove(struct platform_device *dev)
 {
+	soc_device_unregister(soc_dev);
+	kfree(soc_dev_attr.machine);
+	kfree(soc_dev_attr.family);
+	kfree(soc_dev_attr.soc_id);
+	kfree(soc_dev_attr.revision);
 	iounmap(guts->regs);
 	kfree(guts);
 	return 0;
@@ -75,10 +211,8 @@ static int guts_remove(struct platform_device *pdev)
  * Table for matching compatible strings, for device tree
  * guts node, for Freescale QorIQ SOCs.
  */
-static const struct of_device_id guts_of_match[] = {
-	/* For T4 & B4 SOCs */
+static const struct of_device_id fsl_guts_of_match[] = {
 	{ .compatible = "fsl,qoriq-device-config-1.0", },
-	/* For P Series SOCs */
 	{ .compatible = "fsl,qoriq-device-config-2.0", },
 	{ .compatible = "fsl,p1010-guts", },
 	{ .compatible = "fsl,p1020-guts", },
@@ -86,38 +220,32 @@ static const struct of_device_id guts_of_match[] = {
 	{ .compatible = "fsl,p1022-guts", },
 	{ .compatible = "fsl,p1023-guts", },
 	{ .compatible = "fsl,p2020-guts", },
-	/* For BSC Series SOCs */
 	{ .compatible = "fsl,bsc9131-guts", },
 	{ .compatible = "fsl,bsc9132-guts", },
-	/* For Layerscape Series SOCs */
 	{ .compatible = "fsl,ls1021a-dcfg", },
 	{ .compatible = "fsl,ls1043a-dcfg", },
 	{ .compatible = "fsl,ls2080a-dcfg", },
 	{}
 };
-MODULE_DEVICE_TABLE(of, guts_of_match);
+MODULE_DEVICE_TABLE(of, fsl_guts_of_match);
 
-static struct platform_driver guts_driver = {
+static struct platform_driver fsl_guts_driver = {
 	.driver = {
 		.name = "fsl-guts",
-		.of_match_table = guts_of_match,
+		.of_match_table = fsl_guts_of_match,
 	},
-	.probe = guts_probe,
-	.remove = guts_remove,
+	.probe = fsl_guts_probe,
+	.remove = fsl_guts_remove,
 };
 
-static int __init guts_drv_init(void)
+static int __init fsl_guts_init(void)
 {
-	return platform_driver_register(&guts_driver);
+	return platform_driver_register(&fsl_guts_driver);
 }
-subsys_initcall(guts_drv_init);
+core_initcall(fsl_guts_init);
 
-static void __exit guts_drv_exit(void)
+static void __exit fsl_guts_exit(void)
 {
-	platform_driver_unregister(&guts_driver);
+	platform_driver_unregister(&fsl_guts_driver);
 }
-module_exit(guts_drv_exit);
-
-MODULE_AUTHOR("Freescale Semiconductor, Inc.");
-MODULE_DESCRIPTION("Freescale QorIQ Platforms GUTS Driver");
-MODULE_LICENSE("GPL");
+module_exit(fsl_guts_exit);
diff --git a/include/linux/fsl/guts.h b/include/linux/fsl/guts.h
index bcbdd4f..c1ca8cd 100644
--- a/include/linux/fsl/guts.h
+++ b/include/linux/fsl/guts.h
@@ -106,9 +106,7 @@ struct ccsr_guts {
 	u32	srds2cr1;	/* 0x.0f44 - SerDes2 Control Register 0 */
 } __attribute__ ((packed));
 
-#ifdef CONFIG_FSL_GUTS
-extern u32 guts_get_svr(void);
-#endif
+u32 fsl_guts_get_svr(void);
 
 /* Alternate function signal multiplex control */
 #define MPC85xx_PMUXCR_QE(x) (0x8000 >> (x))
-- 
2.9.3

