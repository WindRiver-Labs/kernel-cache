From 67a7de06e6805dca71c1199252446e16dd88ef90 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Fri, 9 Jun 2017 12:45:37 +0800
Subject: [PATCH 388/388] fsl: qbfman: fix some compile errors

Fix some compile errors to suit new SDK version QorIQSDKV2.01703.

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 .../freescale/sdk_fman/Peripherals/FM/fm.c         | 50 ++++------------------
 .../freescale/sdk_fman/src/wrapper/lnxwrp_fm.c     |  4 ++
 drivers/staging/fsl_qbman/qman_driver.c            |  4 ++
 3 files changed, 16 insertions(+), 42 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_fman/Peripherals/FM/fm.c b/drivers/net/ethernet/freescale/sdk_fman/Peripherals/FM/fm.c
index d8e1433..a870b47 100644
--- a/drivers/net/ethernet/freescale/sdk_fman/Peripherals/FM/fm.c
+++ b/drivers/net/ethernet/freescale/sdk_fman/Peripherals/FM/fm.c
@@ -36,8 +36,6 @@
 
  @Description   FM driver routines implementation.
 *//***************************************************************************/
-#include <linux/of.h>
-#include <linux/of_address.h>
 #include "std_ext.h"
 #include "error_ext.h"
 #include "xx_ext.h"
@@ -53,7 +51,6 @@
 #ifndef CONFIG_FMAN_ARM
 #include <linux/fsl/svr.h>
 #endif
-#include <linux/fsl/guts.h>
 #include "fsl_fman.h"
 
 
@@ -62,37 +59,6 @@
 /****************************************/
 
 static volatile bool blockingFlag = FALSE;
-
-#ifdef FM_SOFT_REST_IS_NOT_FINISHED_PROPERLY_A007273
-
-static const struct of_device_id A007273_of_match[] = {
-    { .compatible = "fsl,t1024-device-config"},
-    { .compatible = "fsl,t2080-device-config"},
-    { .compatible = "fsl,t4240-device-config"},
-    {},
-};
-
-static struct ccsr_guts __iomem *Fm_GetCcsrGutsReg(void)
-{
-	struct device_node *np;
-	struct ccsr_guts __iomem *guts_regs = NULL;
-
-	np = of_find_matching_node_and_match(NULL, A007273_of_match, NULL);
-
-	if (np) {
-		guts_regs = of_iomap(np, 0);
-		of_node_put(np);
-		if (!guts_regs) {
-			pr_err("%s: Could not map ccsr guts regs node address\n",
-					__func__);
-			return NULL;
-		}
-		return guts_regs;
-	}
-	return NULL;
-}
-#endif /* FM_SOFT_REST_IS_NOT_FINISHED_PROPERLY_A007273 */
-
 static void IpcMsgCompletionCB(t_Handle   h_Fm,
                                uint8_t    *p_Msg,
                                uint8_t    *p_Reply,
@@ -3584,14 +3550,14 @@ t_Error FM_Init(t_Handle h_Fm)
 
         if (p_Fm->f_ResetOnInitOverride)
         {
-
-		if (ccsr_guts_regs) {
-			/* Get the origin value of devdisr2. */
-			disr2 = ioread32be(&ccsr_guts_regs->devdisr2);
-			/* Set the devsir2 to enable all fmans */
-			iowrite32be(0, &ccsr_guts_regs->devdisr2);
-		}
-	}
+        	/* Perform user specific FMan reset */
+        	p_Fm->f_ResetOnInitOverride(h_Fm);
+        }
+        else
+        {
+        	/* Perform FMan reset */
+        	FmReset(h_Fm);
+        }
 
         if (fman_is_qmi_halt_not_busy_state(p_Fm->p_FmQmiRegs))
         {
diff --git a/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_fm.c b/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_fm.c
index 2940a2f..7ecfdb3 100644
--- a/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_fm.c
+++ b/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_fm.c
@@ -69,7 +69,11 @@
 #include <linux/skbuff.h>
 #include <linux/proc_fs.h>
 #include <linux/device.h>
+#ifndef CONFIG_ARM64
 #include <asm/kexec.h>
+#else
+#include <linux/kexec.h>
+#endif
 
 /* NetCommSw Headers --------------- */
 #include "std_ext.h"
diff --git a/drivers/staging/fsl_qbman/qman_driver.c b/drivers/staging/fsl_qbman/qman_driver.c
index 7f90ddf..d2c80fe 100644
--- a/drivers/staging/fsl_qbman/qman_driver.c
+++ b/drivers/staging/fsl_qbman/qman_driver.c
@@ -608,8 +608,12 @@ struct qm_portal_config *qm_get_unused_portal_idx(u32 idx)
 	 * opening the device file, and if that isn't the cpu they subsequently
 	 * bind to and do their polling on, tough. */
 	if (ret)
+#ifndef CONFIG_ARM64
 		portal_set_cpu(ret,
 			get_hard_smp_processor_id(raw_smp_processor_id()));
+#else
+		portal_set_cpu(ret, hard_smp_processor_id());
+#endif
 	return ret;
 }
 
-- 
2.9.3

