From d8200cf79b21f091115bc8d49e48444e12a16c1f Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@nxp.com>
Date: Mon, 7 Nov 2016 14:07:30 +0200
Subject: [PATCH 311/388] dpaa2-ethsw: convert mc command build/parse to use C
 structs

Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h | 1513 +++++++++++++---------------
 drivers/staging/fsl-dpaa2/ethsw/dpsw.c     |  613 ++++++++---
 2 files changed, 1202 insertions(+), 924 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h b/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h
index 6b13aa1..b86f3b6 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h
@@ -33,12 +33,13 @@
 #define __FSL_DPSW_CMD_H
 
 /* DPSW Version */
-#define DPSW_VER_MAJOR				8
-#define DPSW_VER_MINOR				0
+#define DPSW_VER_MAJOR		8
+#define DPSW_VER_MINOR		0
 
-#define DPSW_CMD_BASE_VER			1
-#define DPSW_CMD_ID_OFF				4
-#define DPSW_CMD_ID(id) (((id) << DPSW_CMD_ID_OFF) | DPSW_CMD_BASE_VER)
+#define DPSW_CMD_BASE_VERSION	1
+#define DPSW_CMD_ID_OFFSET	4
+
+#define DPSW_CMD_ID(id)	((id << DPSW_CMD_ID_OFFSET) | DPSW_CMD_BASE_VERSION)
 
 /* Command IDs */
 #define DPSW_CMDID_CLOSE                    DPSW_CMD_ID(0x800)
@@ -133,794 +134,718 @@
 #define DPSW_CMDID_CTRL_IF_ENABLE           DPSW_CMD_ID(0x0A2)
 #define DPSW_CMDID_CTRL_IF_DISABLE          DPSW_CMD_ID(0x0A3)
 
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_OPEN(cmd, dpsw_id) \
-	MC_CMD_OP(cmd, 0, 0,  32, int,	 dpsw_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_CREATE(cmd, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, cfg->num_ifs);\
-	MC_CMD_OP(cmd, 0, 16,  8, uint8_t,  cfg->adv.max_fdbs);\
-	MC_CMD_OP(cmd, 0, 24,  8, uint8_t,  cfg->adv.max_meters_per_if);\
-	MC_CMD_OP(cmd, 0, 32,  4, enum dpsw_component_type,  \
-			cfg->adv.component_type);\
-	MC_CMD_OP(cmd, 1, 0,  16, uint16_t, cfg->adv.max_vlans);\
-	MC_CMD_OP(cmd, 1, 16, 16, uint16_t, cfg->adv.max_fdb_entries);\
-	MC_CMD_OP(cmd, 1, 32, 16, uint16_t, cfg->adv.fdb_aging_time);\
-	MC_CMD_OP(cmd, 1, 48, 16, uint16_t, cfg->adv.max_fdb_mc_groups);\
-	MC_CMD_OP(cmd, 2, 0,  64, uint64_t, cfg->adv.options);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_IS_ENABLED(cmd, en) \
-	MC_RSP_OP(cmd, 0, 0,  1,  int,	    en)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_SET_IRQ(cmd, irq_index, irq_cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  8,  uint8_t,  irq_index);\
-	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, irq_cfg->val);\
-	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr);\
-	MC_CMD_OP(cmd, 2, 0,  32, int,	    irq_cfg->irq_num); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_GET_IRQ(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_GET_IRQ(cmd, type, irq_cfg) \
-do { \
-	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_cfg->val); \
-	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr);\
-	MC_RSP_OP(cmd, 2, 0,  32, int,	    irq_cfg->irq_num); \
-	MC_RSP_OP(cmd, 2, 32, 32, int,	    type); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_SET_IRQ_ENABLE(cmd, irq_index, enable_state) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  8, uint8_t, enable_state); \
-	MC_CMD_OP(cmd, 0, 32, 8, uint8_t, irq_index);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_GET_IRQ_ENABLE(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_GET_IRQ_ENABLE(cmd, enable_state) \
-	MC_RSP_OP(cmd, 0, 0,  8,  uint8_t,  enable_state)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_SET_IRQ_MASK(cmd, irq_index, mask) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, mask); \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_GET_IRQ_MASK(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_GET_IRQ_MASK(cmd, mask) \
-	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, mask)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_GET_IRQ_STATUS(cmd, irq_index, status) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, status);\
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_GET_IRQ_STATUS(cmd, status) \
-	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, status)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_CLEAR_IRQ_STATUS(cmd, irq_index, status) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, status); \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_GET_ATTR(cmd, attr) \
-do { \
-	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, attr->num_ifs);\
-	MC_RSP_OP(cmd, 0, 16, 8,  uint8_t,  attr->max_fdbs);\
-	MC_RSP_OP(cmd, 0, 24, 8,  uint8_t,  attr->num_fdbs);\
-	MC_RSP_OP(cmd, 0, 32, 16, uint16_t, attr->max_vlans);\
-	MC_RSP_OP(cmd, 0, 48, 16, uint16_t, attr->num_vlans);\
-	MC_RSP_OP(cmd, 1, 0, 16, uint16_t, attr->max_fdb_entries);\
-	MC_RSP_OP(cmd, 1, 16, 16, uint16_t, attr->fdb_aging_time);\
-	MC_RSP_OP(cmd, 1, 32,  32, int,	 attr->id);\
-	MC_RSP_OP(cmd, 2, 0, 16, uint16_t, attr->mem_size);\
-	MC_RSP_OP(cmd, 2, 16, 16, uint16_t, attr->max_fdb_mc_groups);\
-	MC_RSP_OP(cmd, 2, 32,  8,  uint8_t, attr->max_meters_per_if);\
-	MC_RSP_OP(cmd, 2, 40,  4,  enum dpsw_component_type, \
-			attr->component_type);\
-	MC_RSP_OP(cmd, 3, 0,  64, uint64_t, attr->options);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_SET_REFLECTION_IF(cmd, if_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_FLOODING(cmd, if_id, en) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 1,  int,	 en);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_BROADCAST(cmd, if_id, en) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 1,  int,	 en);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_MULTICAST(cmd, if_id, en) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 1,  int,	 en);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_TCI(cmd, if_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 12, uint16_t, cfg->vlan_id);\
-	MC_CMD_OP(cmd, 0, 28, 1,  uint8_t,  cfg->dei);\
-	MC_CMD_OP(cmd, 0, 29, 3,  uint8_t,  cfg->pcp);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_GET_TCI(cmd, if_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_IF_GET_TCI(cmd, cfg) \
-do { \
-	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, cfg->vlan_id);\
-	MC_RSP_OP(cmd, 0, 32, 8,  uint8_t,  cfg->dei);\
-	MC_RSP_OP(cmd, 0, 40, 8,  uint8_t,  cfg->pcp);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_STP(cmd, if_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->vlan_id);\
-	MC_CMD_OP(cmd, 0, 32, 4,  enum dpsw_stp_state, cfg->state);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_ACCEPTED_FRAMES(cmd, if_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 4,  enum dpsw_accepted_frames, cfg->type);\
-	MC_CMD_OP(cmd, 0, 20, 4,  enum dpsw_action, cfg->unaccept_act);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_ACCEPT_ALL_VLAN(cmd, if_id, accept_all) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 1,  int,	 accept_all);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_GET_COUNTER(cmd, if_id, type) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 5,  enum dpsw_counter, type);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_IF_GET_COUNTER(cmd, counter) \
-	MC_RSP_OP(cmd, 1, 0, 64, uint64_t, counter)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_COUNTER(cmd, if_id, type, counter) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t,	  if_id);\
-	MC_CMD_OP(cmd, 0, 16, 5,  enum dpsw_counter, type);\
-	MC_CMD_OP(cmd, 1, 0,  64, uint64_t,	  counter);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_TX_SELECTION(cmd, if_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 3,  enum dpsw_priority_selector, \
-						  cfg->priority_selector);\
-	MC_CMD_OP(cmd, 1, 0,  8,  uint8_t,  cfg->tc_id[0]);\
-	MC_CMD_OP(cmd, 1, 8,  8,  uint8_t,  cfg->tc_id[1]);\
-	MC_CMD_OP(cmd, 1, 16, 8,  uint8_t,  cfg->tc_id[2]);\
-	MC_CMD_OP(cmd, 1, 24, 8,  uint8_t,  cfg->tc_id[3]);\
-	MC_CMD_OP(cmd, 1, 32, 8,  uint8_t,  cfg->tc_id[4]);\
-	MC_CMD_OP(cmd, 1, 40, 8,  uint8_t,  cfg->tc_id[5]);\
-	MC_CMD_OP(cmd, 1, 48, 8,  uint8_t,  cfg->tc_id[6]);\
-	MC_CMD_OP(cmd, 1, 56, 8,  uint8_t,  cfg->tc_id[7]);\
-	MC_CMD_OP(cmd, 2, 0,  16, uint16_t, cfg->tc_sched[0].delta_bandwidth);\
-	MC_CMD_OP(cmd, 2, 16, 4,  enum dpsw_schedule_mode,  \
-					    cfg->tc_sched[0].mode);\
-	MC_CMD_OP(cmd, 2, 32, 16, uint16_t, cfg->tc_sched[1].delta_bandwidth);\
-	MC_CMD_OP(cmd, 2, 48, 4,  enum dpsw_schedule_mode, \
-					    cfg->tc_sched[1].mode);\
-	MC_CMD_OP(cmd, 3, 0,  16, uint16_t, cfg->tc_sched[2].delta_bandwidth);\
-	MC_CMD_OP(cmd, 3, 16, 4,  enum dpsw_schedule_mode,  \
-					    cfg->tc_sched[2].mode);\
-	MC_CMD_OP(cmd, 3, 32, 16, uint16_t, cfg->tc_sched[3].delta_bandwidth);\
-	MC_CMD_OP(cmd, 3, 48, 4,  enum dpsw_schedule_mode, \
-					    cfg->tc_sched[3].mode);\
-	MC_CMD_OP(cmd, 4, 0,  16, uint16_t, cfg->tc_sched[4].delta_bandwidth);\
-	MC_CMD_OP(cmd, 4, 16,  4,  enum dpsw_schedule_mode,  \
-					    cfg->tc_sched[4].mode);\
-	MC_CMD_OP(cmd, 4, 32, 16, uint16_t, cfg->tc_sched[5].delta_bandwidth);\
-	MC_CMD_OP(cmd, 4, 48, 4,  enum dpsw_schedule_mode,  \
-					    cfg->tc_sched[5].mode);\
-	MC_CMD_OP(cmd, 5, 0,  16, uint16_t, cfg->tc_sched[6].delta_bandwidth);\
-	MC_CMD_OP(cmd, 5, 16, 4,  enum dpsw_schedule_mode,  \
-					    cfg->tc_sched[6].mode);\
-	MC_CMD_OP(cmd, 5, 32, 16, uint16_t, cfg->tc_sched[7].delta_bandwidth);\
-	MC_CMD_OP(cmd, 5, 48, 4,  enum dpsw_schedule_mode,  \
-					    cfg->tc_sched[7].mode);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_ADD_REFLECTION(cmd, if_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->vlan_id);\
-	MC_CMD_OP(cmd, 0, 32, 2,  enum dpsw_reflection_filter, cfg->filter);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_REMOVE_REFLECTION(cmd, if_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->vlan_id);\
-	MC_CMD_OP(cmd, 0, 32, 2,  enum dpsw_reflection_filter, cfg->filter);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_FLOODING_METERING(cmd, if_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 24, 4,  enum dpsw_metering_mode, cfg->mode);\
-	MC_CMD_OP(cmd, 0, 28, 4,  enum dpsw_metering_unit, cfg->units);\
-	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, cfg->cir);\
-	MC_CMD_OP(cmd, 1, 0,  32, uint32_t, cfg->eir);\
-	MC_CMD_OP(cmd, 1, 32, 32, uint32_t, cfg->cbs);\
-	MC_CMD_OP(cmd, 2, 0,  32, uint32_t, cfg->ebs);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_METERING(cmd, if_id, tc_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 8,  uint8_t,  tc_id);\
-	MC_CMD_OP(cmd, 0, 24, 4,  enum dpsw_metering_mode, cfg->mode);\
-	MC_CMD_OP(cmd, 0, 28, 4,  enum dpsw_metering_unit, cfg->units);\
-	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, cfg->cir);\
-	MC_CMD_OP(cmd, 1, 0,  32, uint32_t, cfg->eir);\
-	MC_CMD_OP(cmd, 1, 32, 32, uint32_t, cfg->cbs);\
-	MC_CMD_OP(cmd, 2, 0,  32, uint32_t, cfg->ebs);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_PREP_EARLY_DROP(ext, cfg) \
-do { \
-	MC_PREP_OP(ext, 0, 0,  2, enum dpsw_early_drop_mode, cfg->drop_mode); \
-	MC_PREP_OP(ext, 0, 2,  2, \
-		  enum dpsw_early_drop_unit, cfg->units); \
-	MC_PREP_OP(ext, 0, 32, 32, uint32_t, cfg->tail_drop_threshold); \
-	MC_PREP_OP(ext, 1, 0,  8,  uint8_t,  cfg->green.drop_probability); \
-	MC_PREP_OP(ext, 2, 0,  64, uint64_t, cfg->green.max_threshold); \
-	MC_PREP_OP(ext, 3, 0,  64, uint64_t, cfg->green.min_threshold); \
-	MC_PREP_OP(ext, 5, 0,  8,  uint8_t,  cfg->yellow.drop_probability);\
-	MC_PREP_OP(ext, 6, 0,  64, uint64_t, cfg->yellow.max_threshold); \
-	MC_PREP_OP(ext, 7, 0,  64, uint64_t, cfg->yellow.min_threshold); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_EXT_EARLY_DROP(ext, cfg) \
-do { \
-	MC_EXT_OP(ext, 0, 0,  2, enum dpsw_early_drop_mode, cfg->drop_mode); \
-	MC_EXT_OP(ext, 0, 2,  2, \
-		  enum dpsw_early_drop_unit, cfg->units); \
-	MC_EXT_OP(ext, 0, 32, 32, uint32_t, cfg->tail_drop_threshold); \
-	MC_EXT_OP(ext, 1, 0,  8,  uint8_t,  cfg->green.drop_probability); \
-	MC_EXT_OP(ext, 2, 0,  64, uint64_t, cfg->green.max_threshold); \
-	MC_EXT_OP(ext, 3, 0,  64, uint64_t, cfg->green.min_threshold); \
-	MC_EXT_OP(ext, 5, 0,  8,  uint8_t,  cfg->yellow.drop_probability);\
-	MC_EXT_OP(ext, 6, 0,  64, uint64_t, cfg->yellow.max_threshold); \
-	MC_EXT_OP(ext, 7, 0,  64, uint64_t, cfg->yellow.min_threshold); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_EARLY_DROP(cmd, if_id, tc_id, early_drop_iova) \
-do { \
-	MC_CMD_OP(cmd, 0, 8,  8,  uint8_t,  tc_id); \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, if_id); \
-	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, early_drop_iova); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_ADD_CUSTOM_TPID(cmd, cfg) \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->tpid)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_REMOVE_CUSTOM_TPID(cmd, cfg) \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->tpid)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_ENABLE(cmd, if_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_DISABLE(cmd, if_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_GET_ATTR(cmd, if_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_IF_GET_ATTR(cmd, attr) \
-do { \
-	MC_RSP_OP(cmd, 0, 0,  4,  enum dpsw_accepted_frames, \
-							attr->admit_untagged);\
-	MC_RSP_OP(cmd, 0, 5,  1,  int,      attr->enabled);\
-	MC_RSP_OP(cmd, 0, 6,  1,  int,      attr->accept_all_vlan);\
-	MC_RSP_OP(cmd, 0, 16, 8,  uint8_t,  attr->num_tcs);\
-	MC_RSP_OP(cmd, 0, 32, 16, uint16_t,	attr->qdid);\
-	MC_RSP_OP(cmd, 1, 0,  32, uint32_t, attr->options);\
-	MC_RSP_OP(cmd, 2, 0,  32, uint32_t, attr->rate);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_MAX_FRAME_LENGTH(cmd, if_id, frame_length) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, frame_length);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_GET_MAX_FRAME_LENGTH(cmd, if_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_IF_GET_MAX_FRAME_LENGTH(cmd, frame_length) \
-	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, frame_length)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_SET_LINK_CFG(cmd, if_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 1, 0,  32, uint32_t, cfg->rate);\
-	MC_CMD_OP(cmd, 2, 0,  64, uint64_t, cfg->options);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_GET_LINK_STATE(cmd, if_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_IF_GET_LINK_STATE(cmd, state) \
-do { \
-	MC_RSP_OP(cmd, 0, 32, 1,  int,      state->up);\
-	MC_RSP_OP(cmd, 1, 0,  32, uint32_t, state->rate);\
-	MC_RSP_OP(cmd, 2, 0,  64, uint64_t, state->options);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_ADD(cmd, vlan_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, cfg->fdb_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, vlan_id);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_ADD_IF(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, vlan_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_ADD_IF_UNTAGGED(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, vlan_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_ADD_IF_FLOODING(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, vlan_id)
-
-#define DPSW_CMD_VLAN_REMOVE_IF(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, vlan_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_REMOVE_IF_UNTAGGED(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, vlan_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_REMOVE_IF_FLOODING(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, vlan_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_REMOVE(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, vlan_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_GET_ATTR(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, vlan_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_VLAN_GET_ATTR(cmd, attr) \
-do { \
-	MC_RSP_OP(cmd, 1, 0,  16, uint16_t, attr->fdb_id); \
-	MC_RSP_OP(cmd, 1, 16, 16, uint16_t, attr->num_ifs); \
-	MC_RSP_OP(cmd, 1, 32, 16, uint16_t, attr->num_untagged_ifs); \
-	MC_RSP_OP(cmd, 1, 48, 16, uint16_t, attr->num_flooding_ifs); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_GET_IF(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, vlan_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_VLAN_GET_IF(cmd, cfg) \
-	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, cfg->num_ifs)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_GET_IF_FLOODING(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, vlan_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_VLAN_GET_IF_FLOODING(cmd, cfg) \
-	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, cfg->num_ifs)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_VLAN_GET_IF_UNTAGGED(cmd, vlan_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, vlan_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_VLAN_GET_IF_UNTAGGED(cmd, cfg) \
-	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, cfg->num_ifs)
-
-/*	param, offset, width,	type,		arg_name */
-#define DPSW_CMD_FDB_ADD(cmd, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 32, 16, uint16_t, cfg->fdb_aging_time);\
-	MC_CMD_OP(cmd, 0, 48, 16, uint16_t, cfg->num_fdb_entries);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_FDB_ADD(cmd, fdb_id) \
-	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, fdb_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_FDB_REMOVE(cmd, fdb_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, fdb_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_FDB_ADD_UNICAST(cmd, fdb_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, fdb_id);\
-	MC_CMD_OP(cmd, 0, 16, 8,  uint8_t,  cfg->mac_addr[5]);\
-	MC_CMD_OP(cmd, 0, 24, 8,  uint8_t,  cfg->mac_addr[4]);\
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  cfg->mac_addr[3]);\
-	MC_CMD_OP(cmd, 0, 40, 8,  uint8_t,  cfg->mac_addr[2]);\
-	MC_CMD_OP(cmd, 0, 48, 8,  uint8_t,  cfg->mac_addr[1]);\
-	MC_CMD_OP(cmd, 0, 56, 8,  uint8_t,  cfg->mac_addr[0]);\
-	MC_CMD_OP(cmd, 1, 0,  8,  uint16_t, cfg->if_egress);\
-	MC_CMD_OP(cmd, 1, 16, 4,  enum dpsw_fdb_entry_type, cfg->type);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_FDB_GET_UNICAST(cmd, fdb_id) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, fdb_id);\
-	MC_CMD_OP(cmd, 0, 16, 8,  uint8_t,  cfg->mac_addr[5]);\
-	MC_CMD_OP(cmd, 0, 24, 8,  uint8_t,  cfg->mac_addr[4]);\
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  cfg->mac_addr[3]);\
-	MC_CMD_OP(cmd, 0, 40, 8,  uint8_t,  cfg->mac_addr[2]);\
-	MC_CMD_OP(cmd, 0, 48, 8,  uint8_t,  cfg->mac_addr[1]);\
-	MC_CMD_OP(cmd, 0, 56, 8,  uint8_t,  cfg->mac_addr[0]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_FDB_GET_UNICAST(cmd, cfg) \
-do { \
-	MC_RSP_OP(cmd, 1, 0,  16, uint16_t, cfg->if_egress);\
-	MC_RSP_OP(cmd, 1, 16, 4,  enum dpsw_fdb_entry_type, cfg->type);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_FDB_REMOVE_UNICAST(cmd, fdb_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, fdb_id);\
-	MC_CMD_OP(cmd, 0, 16, 8,  uint8_t,  cfg->mac_addr[5]);\
-	MC_CMD_OP(cmd, 0, 24, 8,  uint8_t,  cfg->mac_addr[4]);\
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  cfg->mac_addr[3]);\
-	MC_CMD_OP(cmd, 0, 40, 8,  uint8_t,  cfg->mac_addr[2]);\
-	MC_CMD_OP(cmd, 0, 48, 8,  uint8_t,  cfg->mac_addr[1]);\
-	MC_CMD_OP(cmd, 0, 56, 8,  uint8_t,  cfg->mac_addr[0]);\
-	MC_CMD_OP(cmd, 1, 0,  16, uint16_t, cfg->if_egress);\
-	MC_CMD_OP(cmd, 1, 16, 4,  enum dpsw_fdb_entry_type, cfg->type);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_FDB_ADD_MULTICAST(cmd, fdb_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, fdb_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->num_ifs);\
-	MC_CMD_OP(cmd, 0, 32, 4,  enum dpsw_fdb_entry_type, cfg->type);\
-	MC_CMD_OP(cmd, 1, 0,  8,  uint8_t,  cfg->mac_addr[5]);\
-	MC_CMD_OP(cmd, 1, 8,  8,  uint8_t,  cfg->mac_addr[4]);\
-	MC_CMD_OP(cmd, 1, 16, 8,  uint8_t,  cfg->mac_addr[3]);\
-	MC_CMD_OP(cmd, 1, 24, 8,  uint8_t,  cfg->mac_addr[2]);\
-	MC_CMD_OP(cmd, 1, 32, 8,  uint8_t,  cfg->mac_addr[1]);\
-	MC_CMD_OP(cmd, 1, 40, 8,  uint8_t,  cfg->mac_addr[0]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_FDB_GET_MULTICAST(cmd, fdb_id) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, fdb_id);\
-	MC_CMD_OP(cmd, 0, 16, 8,  uint8_t,  cfg->mac_addr[5]);\
-	MC_CMD_OP(cmd, 0, 24, 8,  uint8_t,  cfg->mac_addr[4]);\
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  cfg->mac_addr[3]);\
-	MC_CMD_OP(cmd, 0, 40, 8,  uint8_t,  cfg->mac_addr[2]);\
-	MC_CMD_OP(cmd, 0, 48, 8,  uint8_t,  cfg->mac_addr[1]);\
-	MC_CMD_OP(cmd, 0, 56, 8,  uint8_t,  cfg->mac_addr[0]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_FDB_GET_MULTICAST(cmd, cfg) \
-do { \
-	MC_RSP_OP(cmd, 1, 0,  16, uint16_t, cfg->num_ifs);\
-	MC_RSP_OP(cmd, 1, 16, 4,  enum dpsw_fdb_entry_type, cfg->type);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_FDB_REMOVE_MULTICAST(cmd, fdb_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, fdb_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->num_ifs);\
-	MC_CMD_OP(cmd, 0, 32, 4,  enum dpsw_fdb_entry_type, cfg->type);\
-	MC_CMD_OP(cmd, 1, 0,  8,  uint8_t,  cfg->mac_addr[5]);\
-	MC_CMD_OP(cmd, 1, 8,  8,  uint8_t,  cfg->mac_addr[4]);\
-	MC_CMD_OP(cmd, 1, 16, 8,  uint8_t,  cfg->mac_addr[3]);\
-	MC_CMD_OP(cmd, 1, 24, 8,  uint8_t,  cfg->mac_addr[2]);\
-	MC_CMD_OP(cmd, 1, 32, 8,  uint8_t,  cfg->mac_addr[1]);\
-	MC_CMD_OP(cmd, 1, 40, 8,  uint8_t,  cfg->mac_addr[0]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_FDB_SET_LEARNING_MODE(cmd, fdb_id, mode) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, fdb_id);\
-	MC_CMD_OP(cmd, 0, 16, 4,  enum dpsw_fdb_learning_mode, mode);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_FDB_GET_ATTR(cmd, fdb_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, fdb_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_FDB_GET_ATTR(cmd, attr) \
-do { \
-	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, attr->max_fdb_entries);\
-	MC_RSP_OP(cmd, 0, 32, 16, uint16_t, attr->fdb_aging_time);\
-	MC_RSP_OP(cmd, 0, 48, 16, uint16_t, attr->num_fdb_mc_groups);\
-	MC_RSP_OP(cmd, 1, 0,  16, uint16_t, attr->max_fdb_mc_groups);\
-	MC_RSP_OP(cmd, 1, 16, 4,  enum dpsw_fdb_learning_mode, \
-							  attr->learning_mode);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_ACL_ADD(cmd, cfg) \
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->max_entries)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_ACL_ADD(cmd, acl_id) \
-	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, acl_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_ACL_REMOVE(cmd, acl_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, acl_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_PREP_ACL_ENTRY(ext, key) \
-do { \
-	MC_PREP_OP(ext, 0, 0,  8,  uint8_t,  key->match.l2_dest_mac[5]);\
-	MC_PREP_OP(ext, 0, 8,  8,  uint8_t,  key->match.l2_dest_mac[4]);\
-	MC_PREP_OP(ext, 0, 16, 8,  uint8_t,  key->match.l2_dest_mac[3]);\
-	MC_PREP_OP(ext, 0, 24, 8,  uint8_t,  key->match.l2_dest_mac[2]);\
-	MC_PREP_OP(ext, 0, 32, 8,  uint8_t,  key->match.l2_dest_mac[1]);\
-	MC_PREP_OP(ext, 0, 40, 8,  uint8_t,  key->match.l2_dest_mac[0]);\
-	MC_PREP_OP(ext, 0, 48, 16, uint16_t, key->match.l2_tpid);\
-	MC_PREP_OP(ext, 1, 0,  8,  uint8_t,  key->match.l2_source_mac[5]);\
-	MC_PREP_OP(ext, 1, 8,  8,  uint8_t,  key->match.l2_source_mac[4]);\
-	MC_PREP_OP(ext, 1, 16, 8,  uint8_t,  key->match.l2_source_mac[3]);\
-	MC_PREP_OP(ext, 1, 24, 8,  uint8_t,  key->match.l2_source_mac[2]);\
-	MC_PREP_OP(ext, 1, 32, 8,  uint8_t,  key->match.l2_source_mac[1]);\
-	MC_PREP_OP(ext, 1, 40, 8,  uint8_t,  key->match.l2_source_mac[0]);\
-	MC_PREP_OP(ext, 1, 48, 16, uint16_t, key->match.l2_vlan_id);\
-	MC_PREP_OP(ext, 2, 0,  32, uint32_t, key->match.l3_dest_ip);\
-	MC_PREP_OP(ext, 2, 32, 32, uint32_t, key->match.l3_source_ip);\
-	MC_PREP_OP(ext, 3, 0,  16, uint16_t, key->match.l4_dest_port);\
-	MC_PREP_OP(ext, 3, 16, 16, uint16_t, key->match.l4_source_port);\
-	MC_PREP_OP(ext, 3, 32, 16, uint16_t, key->match.l2_ether_type);\
-	MC_PREP_OP(ext, 3, 48, 8,  uint8_t,  key->match.l2_pcp_dei);\
-	MC_PREP_OP(ext, 3, 56, 8,  uint8_t,  key->match.l3_dscp);\
-	MC_PREP_OP(ext, 4, 0,  8,  uint8_t,  key->mask.l2_dest_mac[5]);\
-	MC_PREP_OP(ext, 4, 8,  8,  uint8_t,  key->mask.l2_dest_mac[4]);\
-	MC_PREP_OP(ext, 4, 16, 8,  uint8_t,  key->mask.l2_dest_mac[3]);\
-	MC_PREP_OP(ext, 4, 24, 8,  uint8_t,  key->mask.l2_dest_mac[2]);\
-	MC_PREP_OP(ext, 4, 32, 8,  uint8_t,  key->mask.l2_dest_mac[1]);\
-	MC_PREP_OP(ext, 4, 40, 8,  uint8_t,  key->mask.l2_dest_mac[0]);\
-	MC_PREP_OP(ext, 4, 48, 16, uint16_t, key->mask.l2_tpid);\
-	MC_PREP_OP(ext, 5, 0,  8,  uint8_t,  key->mask.l2_source_mac[5]);\
-	MC_PREP_OP(ext, 5, 8,  8,  uint8_t,  key->mask.l2_source_mac[4]);\
-	MC_PREP_OP(ext, 5, 16, 8,  uint8_t,  key->mask.l2_source_mac[3]);\
-	MC_PREP_OP(ext, 5, 24, 8,  uint8_t,  key->mask.l2_source_mac[2]);\
-	MC_PREP_OP(ext, 5, 32, 8,  uint8_t,  key->mask.l2_source_mac[1]);\
-	MC_PREP_OP(ext, 5, 40, 8,  uint8_t,  key->mask.l2_source_mac[0]);\
-	MC_PREP_OP(ext, 5, 48, 16, uint16_t, key->mask.l2_vlan_id);\
-	MC_PREP_OP(ext, 6, 0,  32, uint32_t, key->mask.l3_dest_ip);\
-	MC_PREP_OP(ext, 6, 32, 32, uint32_t, key->mask.l3_source_ip);\
-	MC_PREP_OP(ext, 7, 0,  16, uint16_t, key->mask.l4_dest_port);\
-	MC_PREP_OP(ext, 7, 16, 16, uint16_t, key->mask.l4_source_port);\
-	MC_PREP_OP(ext, 7, 32, 16, uint16_t, key->mask.l2_ether_type);\
-	MC_PREP_OP(ext, 7, 48, 8,  uint8_t,  key->mask.l2_pcp_dei);\
-	MC_PREP_OP(ext, 7, 56, 8,  uint8_t,  key->mask.l3_dscp);\
-	MC_PREP_OP(ext, 8, 0,  8,  uint8_t,  key->match.l3_protocol);\
-	MC_PREP_OP(ext, 8, 8,  8,  uint8_t,  key->mask.l3_protocol);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_EXT_ACL_ENTRY(ext, key) \
-do { \
-	MC_EXT_OP(ext, 0, 0,  8,  uint8_t,  key->match.l2_dest_mac[5]);\
-	MC_EXT_OP(ext, 0, 8,  8,  uint8_t,  key->match.l2_dest_mac[4]);\
-	MC_EXT_OP(ext, 0, 16, 8,  uint8_t,  key->match.l2_dest_mac[3]);\
-	MC_EXT_OP(ext, 0, 24, 8,  uint8_t,  key->match.l2_dest_mac[2]);\
-	MC_EXT_OP(ext, 0, 32, 8,  uint8_t,  key->match.l2_dest_mac[1]);\
-	MC_EXT_OP(ext, 0, 40, 8,  uint8_t,  key->match.l2_dest_mac[0]);\
-	MC_EXT_OP(ext, 0, 48, 16, uint16_t, key->match.l2_tpid);\
-	MC_EXT_OP(ext, 1, 0,  8,  uint8_t,  key->match.l2_source_mac[5]);\
-	MC_EXT_OP(ext, 1, 8,  8,  uint8_t,  key->match.l2_source_mac[4]);\
-	MC_EXT_OP(ext, 1, 16, 8,  uint8_t,  key->match.l2_source_mac[3]);\
-	MC_EXT_OP(ext, 1, 24, 8,  uint8_t,  key->match.l2_source_mac[2]);\
-	MC_EXT_OP(ext, 1, 32, 8,  uint8_t,  key->match.l2_source_mac[1]);\
-	MC_EXT_OP(ext, 1, 40, 8,  uint8_t,  key->match.l2_source_mac[0]);\
-	MC_EXT_OP(ext, 1, 48, 16, uint16_t, key->match.l2_vlan_id);\
-	MC_EXT_OP(ext, 2, 0,  32, uint32_t, key->match.l3_dest_ip);\
-	MC_EXT_OP(ext, 2, 32, 32, uint32_t, key->match.l3_source_ip);\
-	MC_EXT_OP(ext, 3, 0,  16, uint16_t, key->match.l4_dest_port);\
-	MC_EXT_OP(ext, 3, 16, 16, uint16_t, key->match.l4_source_port);\
-	MC_EXT_OP(ext, 3, 32, 16, uint16_t, key->match.l2_ether_type);\
-	MC_EXT_OP(ext, 3, 48, 8,  uint8_t,  key->match.l2_pcp_dei);\
-	MC_EXT_OP(ext, 3, 56, 8,  uint8_t,  key->match.l3_dscp);\
-	MC_EXT_OP(ext, 4, 0,  8,  uint8_t,  key->mask.l2_dest_mac[5]);\
-	MC_EXT_OP(ext, 4, 8,  8,  uint8_t,  key->mask.l2_dest_mac[4]);\
-	MC_EXT_OP(ext, 4, 16, 8,  uint8_t,  key->mask.l2_dest_mac[3]);\
-	MC_EXT_OP(ext, 4, 24, 8,  uint8_t,  key->mask.l2_dest_mac[2]);\
-	MC_EXT_OP(ext, 4, 32, 8,  uint8_t,  key->mask.l2_dest_mac[1]);\
-	MC_EXT_OP(ext, 4, 40, 8,  uint8_t,  key->mask.l2_dest_mac[0]);\
-	MC_EXT_OP(ext, 4, 48, 16, uint16_t, key->mask.l2_tpid);\
-	MC_EXT_OP(ext, 5, 0,  8,  uint8_t,  key->mask.l2_source_mac[5]);\
-	MC_EXT_OP(ext, 5, 8,  8,  uint8_t,  key->mask.l2_source_mac[4]);\
-	MC_EXT_OP(ext, 5, 16, 8,  uint8_t,  key->mask.l2_source_mac[3]);\
-	MC_EXT_OP(ext, 5, 24, 8,  uint8_t,  key->mask.l2_source_mac[2]);\
-	MC_EXT_OP(ext, 5, 32, 8,  uint8_t,  key->mask.l2_source_mac[1]);\
-	MC_EXT_OP(ext, 5, 40, 8,  uint8_t,  key->mask.l2_source_mac[0]);\
-	MC_EXT_OP(ext, 5, 48, 16, uint16_t, key->mask.l2_vlan_id);\
-	MC_EXT_OP(ext, 6, 0,  32, uint32_t, key->mask.l3_dest_ip);\
-	MC_EXT_OP(ext, 6, 32, 32, uint32_t, key->mask.l3_source_ip);\
-	MC_EXT_OP(ext, 7, 0,  16, uint16_t, key->mask.l4_dest_port);\
-	MC_EXT_OP(ext, 7, 16, 16, uint16_t, key->mask.l4_source_port);\
-	MC_EXT_OP(ext, 7, 32, 16, uint16_t, key->mask.l2_ether_type);\
-	MC_EXT_OP(ext, 7, 48, 8,  uint8_t,  key->mask.l2_pcp_dei);\
-	MC_EXT_OP(ext, 7, 56, 8,  uint8_t,  key->mask.l3_dscp);\
-	MC_EXT_OP(ext, 8, 0,  8,  uint8_t,  key->match.l3_protocol);\
-	MC_EXT_OP(ext, 8, 8,  8,  uint8_t,  key->mask.l3_protocol);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_ACL_ADD_ENTRY(cmd, acl_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, acl_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->result.if_id);\
-	MC_CMD_OP(cmd, 0, 32, 32, int,      cfg->precedence);\
-	MC_CMD_OP(cmd, 1, 0,  4,  enum dpsw_acl_action, cfg->result.action);\
-	MC_CMD_OP(cmd, 6, 0,  64, uint64_t, cfg->key_iova); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_ACL_REMOVE_ENTRY(cmd, acl_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, acl_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->result.if_id);\
-	MC_CMD_OP(cmd, 0, 32, 32, int,      cfg->precedence);\
-	MC_CMD_OP(cmd, 1, 0,  4,  enum dpsw_acl_action, cfg->result.action);\
-	MC_CMD_OP(cmd, 6, 0,  64, uint64_t, cfg->key_iova); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_ACL_ADD_IF(cmd, acl_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, acl_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->num_ifs); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_ACL_REMOVE_IF(cmd, acl_id, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, acl_id);\
-	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->num_ifs); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_ACL_GET_ATTR(cmd, acl_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, acl_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_ACL_GET_ATTR(cmd, attr) \
-do { \
-	MC_RSP_OP(cmd, 1, 0,  16, uint16_t, attr->max_entries);\
-	MC_RSP_OP(cmd, 1, 16, 16, uint16_t, attr->num_entries);\
-	MC_RSP_OP(cmd, 1, 32, 16, uint16_t, attr->num_ifs);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_CTRL_IF_GET_ATTR(cmd, attr) \
-do { \
-	MC_RSP_OP(cmd, 1, 0,  32, uint32_t, attr->rx_fqid);\
-	MC_RSP_OP(cmd, 1, 32, 32, uint32_t, attr->rx_err_fqid);\
-	MC_RSP_OP(cmd, 2, 0,  32, uint32_t, attr->tx_err_conf_fqid);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_CTRL_IF_SET_POOLS(cmd, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  8,  uint8_t,  cfg->num_dpbp); \
-	MC_CMD_OP(cmd, 0, 8,  1,  int,      cfg->pools[0].backup_pool); \
-	MC_CMD_OP(cmd, 0, 9,  1,  int,      cfg->pools[1].backup_pool); \
-	MC_CMD_OP(cmd, 0, 10, 1,  int,      cfg->pools[2].backup_pool); \
-	MC_CMD_OP(cmd, 0, 11, 1,  int,      cfg->pools[3].backup_pool); \
-	MC_CMD_OP(cmd, 0, 12, 1,  int,      cfg->pools[4].backup_pool); \
-	MC_CMD_OP(cmd, 0, 13, 1,  int,      cfg->pools[5].backup_pool); \
-	MC_CMD_OP(cmd, 0, 14, 1,  int,      cfg->pools[6].backup_pool); \
-	MC_CMD_OP(cmd, 0, 15, 1,  int,      cfg->pools[7].backup_pool); \
-	MC_CMD_OP(cmd, 0, 32, 32, int,      cfg->pools[0].dpbp_id); \
-	MC_CMD_OP(cmd, 4, 32, 16, uint16_t, cfg->pools[0].buffer_size);\
-	MC_CMD_OP(cmd, 1, 0,  32, int,      cfg->pools[1].dpbp_id); \
-	MC_CMD_OP(cmd, 4, 48, 16, uint16_t, cfg->pools[1].buffer_size);\
-	MC_CMD_OP(cmd, 1, 32, 32, int,      cfg->pools[2].dpbp_id); \
-	MC_CMD_OP(cmd, 5, 0,  16, uint16_t, cfg->pools[2].buffer_size);\
-	MC_CMD_OP(cmd, 2, 0,  32, int,      cfg->pools[3].dpbp_id); \
-	MC_CMD_OP(cmd, 5, 16, 16, uint16_t, cfg->pools[3].buffer_size);\
-	MC_CMD_OP(cmd, 2, 32, 32, int,      cfg->pools[4].dpbp_id); \
-	MC_CMD_OP(cmd, 5, 32, 16, uint16_t, cfg->pools[4].buffer_size);\
-	MC_CMD_OP(cmd, 3, 0,  32, int,      cfg->pools[5].dpbp_id); \
-	MC_CMD_OP(cmd, 5, 48, 16, uint16_t, cfg->pools[5].buffer_size);\
-	MC_CMD_OP(cmd, 3, 32, 32, int,      cfg->pools[6].dpbp_id); \
-	MC_CMD_OP(cmd, 6, 0,  16, uint16_t, cfg->pools[6].buffer_size);\
-	MC_CMD_OP(cmd, 4, 0,  32, int,      cfg->pools[7].dpbp_id); \
-	MC_CMD_OP(cmd, 6, 16, 16, uint16_t, cfg->pools[7].buffer_size);\
-} while (0)
-
-/*                cmd, param, offset, width, type,      arg_name */
-#define DPSW_RSP_GET_API_VERSION(cmd, major, minor) \
-do { \
-	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, major);\
-	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, minor);\
-} while (0)
+/* Macros for accessing command fields smaller than 1byte */
+#define DPSW_MASK(field)        \
+	GENMASK(DPSW_##field##_SHIFT + DPSW_##field##_SIZE - 1, \
+		DPSW_##field##_SHIFT)
+#define dpsw_set_field(var, field, val) \
+	((var) |= (((val) << DPSW_##field##_SHIFT) & DPSW_MASK(field)))
+#define dpsw_get_field(var, field)      \
+	(((var) & DPSW_MASK(field)) >> DPSW_##field##_SHIFT)
+#define dpsw_set_bit(var, bit, val) \
+	((var) |= (((u64)(val) << (bit)) & GENMASK((bit), (bit))))
+#define dpsw_get_bit(var, bit) \
+	(((var)  >> bit) & GENMASK(0, 0))
+
+struct dpsw_cmd_open {
+	__le32 dpsw_id;
+};
+
+#define DPSW_COMPONENT_TYPE_SHIFT	0
+#define DPSW_COMPONENT_TYPE_SIZE	4
+
+struct dpsw_cmd_create {
+	/* cmd word 0 */
+	__le16 num_ifs;
+	u8 max_fdbs;
+	u8 max_meters_per_if;
+	/* from LSB: only the first 4 bits */
+	u8 component_type;
+	u8 pad[3];
+	/* cmd word 1 */
+	__le16 max_vlans;
+	__le16 max_fdb_entries;
+	__le16 fdb_aging_time;
+	__le16 max_fdb_mc_groups;
+	/* cmd word 2 */
+	__le64 options;
+};
+
+struct dpsw_cmd_destroy {
+	__le32 dpsw_id;
+};
+
+#define DPSW_ENABLE_SHIFT 0
+#define DPSW_ENABLE_SIZE  1
+
+struct dpsw_rsp_is_enabled {
+	/* from LSB: enable:1 */
+	u8 enabled;
+};
+
+struct dpsw_cmd_set_irq {
+	/* cmd word 0 */
+	u8 irq_index;
+	u8 pad[3];
+	__le32 irq_val;
+	/* cmd word 1 */
+	__le64 irq_addr;
+	/* cmd word 2 */
+	__le32 irq_num;
+};
+
+struct dpsw_cmd_get_irq {
+	__le32 pad;
+	u8 irq_index;
+};
+
+struct dpsw_rsp_get_irq {
+	/* cmd word 0 */
+	__le32 irq_val;
+	__le32 pad;
+	/* cmd word 1 */
+	__le64 irq_addr;
+	/* cmd word 2 */
+	__le32 irq_num;
+	__le32 irq_type;
+};
+
+struct dpsw_cmd_set_irq_enable {
+	u8 enable_state;
+	u8 pad[3];
+	u8 irq_index;
+};
+
+struct dpsw_cmd_get_irq_enable {
+	__le32 pad;
+	u8 irq_index;
+};
+
+struct dpsw_rsp_get_irq_enable {
+	u8 enable_state;
+};
+
+struct dpsw_cmd_set_irq_mask {
+	__le32 mask;
+	u8 irq_index;
+};
+
+struct dpsw_cmd_get_irq_mask {
+	__le32 pad;
+	u8 irq_index;
+};
+
+struct dpsw_rsp_get_irq_mask {
+	__le32 mask;
+};
+
+struct dpsw_cmd_get_irq_status {
+	__le32 status;
+	u8 irq_index;
+};
+
+struct dpsw_rsp_get_irq_status {
+	__le32 status;
+};
+
+struct dpsw_cmd_clear_irq_status {
+	__le32 status;
+	u8 irq_index;
+};
+
+#define DPSW_COMPONENT_TYPE_SHIFT	0
+#define DPSW_COMPONENT_TYPE_SIZE	4
+
+struct dpsw_rsp_get_attr {
+	/* cmd word 0 */
+	__le16 num_ifs;
+	u8 max_fdbs;
+	u8 num_fdbs;
+	__le16 max_vlans;
+	__le16 num_vlans;
+	/* cmd word 1 */
+	__le16 max_fdb_entries;
+	__le16 fdb_aging_time;
+	__le32 dpsw_id;
+	/* cmd word 2 */
+	__le16 mem_size;
+	__le16 max_fdb_mc_groups;
+	u8 max_meters_per_if;
+	/* from LSB only the ffirst 4 bits */
+	u8 component_type;
+	__le16 pad;
+	/* cmd word 3 */
+	__le64 options;
+};
+
+struct dpsw_cmd_set_reflection_if {
+	__le16 if_id;
+};
+
+struct dpsw_cmd_if_set_flooding {
+	__le16 if_id;
+	/* from LSB: enable:1 */
+	u8 enable;
+};
+
+struct dpsw_cmd_if_set_broadcast {
+	__le16 if_id;
+	/* from LSB: enable:1 */
+	u8 enable;
+};
+
+struct dpsw_cmd_if_set_multicast {
+	__le16 if_id;
+	/* from LSB: enable:1 */
+	u8 enable;
+};
+
+#define DPSW_VLAN_ID_SHIFT	0
+#define DPSW_VLAN_ID_SIZE	12
+#define DPSW_DEI_SHIFT		12
+#define DPSW_DEI_SIZE		1
+#define DPSW_PCP_SHIFT		13
+#define DPSW_PCP_SIZE		3
+
+struct dpsw_cmd_if_set_tci {
+	__le16 if_id;
+	/* from LSB: VLAN_ID:12 DEI:1 PCP:3 */
+	__le16 conf;
+};
+
+struct dpsw_cmd_if_get_tci {
+	__le16 if_id;
+};
+
+struct dpsw_rsp_if_get_tci {
+	__le16 pad;
+	__le16 vlan_id;
+	u8 dei;
+	u8 pcp;
+};
+
+#define DPSW_STATE_SHIFT	0
+#define DPSW_STATE_SIZE		4
+
+struct dpsw_cmd_if_set_stp {
+	__le16 if_id;
+	__le16 vlan_id;
+	/* only the first LSB 4 bits */
+	u8 state;
+};
+
+#define DPSW_FRAME_TYPE_SHIFT		0
+#define DPSW_FRAME_TYPE_SIZE		4
+#define DPSW_UNACCEPTED_ACT_SHIFT	4
+#define DPSW_UNACCEPTED_ACT_SIZE	4
+
+struct dpsw_cmd_if_set_accepted_frames {
+	__le16 if_id;
+	/* from LSB: type:4 unaccepted_act:4 */
+	u8 unaccepted;
+};
+
+#define DPSW_ACCEPT_ALL_SHIFT	0
+#define DPSW_ACCEPT_ALL_SIZE	1
+
+struct dpsw_cmd_if_set_accept_all_vlan {
+	__le16 if_id;
+	/* only the least significant bit */
+	u8 accept_all;
+};
+
+#define DPSW_COUNTER_TYPE_SHIFT		0
+#define DPSW_COUNTER_TYPE_SIZE		5
+
+struct dpsw_cmd_if_get_counter {
+	__le16 if_id;
+	/* from LSB: type:5 */
+	u8 type;
+};
+
+struct dpsw_rsp_if_get_counter {
+	__le64 pad;
+	__le64 counter;
+};
+
+
+struct dpsw_cmd_if_set_counter {
+	/* cmd word 0 */
+	__le16 if_id;
+	/* from LSB: type:5 */
+	u8 type;
+	/* cmd word 1 */
+	__le64 counter;
+};
+
+#define DPSW_PRIORITY_SELECTOR_SHIFT	0
+#define DPSW_PRIORITY_SELECTOR_SIZE	3
+#define DPSW_SCHED_MODE_SHIFT		0
+#define DPSW_SCHED_MODE_SIZE		4
+
+struct dpsw_cmd_if_set_tx_selection {
+	__le16 if_id;
+	/* from LSB: priority_selector:3 */
+	u8 priority_selector;
+	u8 pad[5];
+	u8 tc_id[8];
+
+	struct dpsw_tc_sched {
+		__le16 delta_bandwidth;
+		u8 mode;
+		u8 pad;
+	} tc_sched[8];
+};
+
+#define DPSW_FILTER_SHIFT	0
+#define DPSW_FILTER_SIZE	2
+
+struct dpsw_cmd_if_reflection {
+	__le16 if_id;
+	__le16 vlan_id;
+	/* only 2 bits from the LSB */
+	u8 filter;
+};
+
+#define DPSW_MODE_SHIFT		0
+#define DPSW_MODE_SIZE		4
+#define DPSW_UNITS_SHIFT	4
+#define DPSW_UNITS_SIZE		4
+
+struct dpsw_cmd_if_set_flooding_metering {
+	/* cmd word 0 */
+	__le16 if_id;
+	u8 pad;
+	/* from LSB: mode:4 units:4 */
+	u8 mode_units;
+	__le32 cir;
+	/* cmd word 1 */
+	__le32 eir;
+	__le32 cbs;
+	/* cmd word 2 */
+	__le32 ebs;
+};
+
+struct dpsw_cmd_if_set_metering {
+	/* cmd word 0 */
+	__le16 if_id;
+	u8 tc_id;
+	/* from LSB: mode:4 units:4 */
+	u8 mode_units;
+	__le32 cir;
+	/* cmd word 1 */
+	__le32 eir;
+	__le32 cbs;
+	/* cmd word 2 */
+	__le32 ebs;
+};
+
+#define DPSW_EARLY_DROP_MODE_SHIFT	0
+#define DPSW_EARLY_DROP_MODE_SIZE	2
+#define DPSW_EARLY_DROP_UNIT_SHIFT	2
+#define DPSW_EARLY_DROP_UNIT_SIZE	2
+
+struct dpsw_prep_early_drop {
+	/* from LSB: mode:2 units:2 */
+	u8 conf;
+	u8 pad0[3];
+	__le32 tail_drop_threshold;
+	u8 green_drop_probability;
+	u8 pad1[7];
+	__le64 green_max_threshold;
+	__le64 green_min_threshold;
+	__le64 pad2;
+	u8 yellow_drop_probability;
+	u8 pad3[7];
+	__le64 yellow_max_threshold;
+	__le64 yellow_min_threshold;
+};
+
+struct dpsw_cmd_if_set_early_drop {
+	/* cmd word 0 */
+	u8 pad0;
+	u8 tc_id;
+	__le16 if_id;
+	__le32 pad1;
+	/* cmd word 1 */
+	__le64 early_drop_iova;
+};
+
+struct dpsw_cmd_custom_tpid {
+	__le16 pad;
+	__le16 tpid;
+};
+
+struct dpsw_cmd_if {
+	__le16 if_id;
+};
+
+#define DPSW_ADMIT_UNTAGGED_SHIFT	0
+#define DPSW_ADMIT_UNTAGGED_SIZE	4
+#define DPSW_ENABLED_SHIFT		5
+#define DPSW_ENABLED_SIZE		1
+#define DPSW_ACCEPT_ALL_VLAN_SHIFT	6
+#define DPSW_ACCEPT_ALL_VLAN_SIZE	1
+
+struct dpsw_rsp_if_get_attr {
+	/* cmd word 0 */
+	/* from LSB: admit_untagged:4 enabled:1 accept_all_vlan:1 */
+	u8 conf;
+	u8 pad1;
+	u8 num_tcs;
+	u8 pad2;
+	__le16 qdid;
+	/* cmd word 1 */
+	__le32 options;
+	__le32 pad3;
+	/* cmd word 2 */
+	__le32 rate;
+};
+
+struct dpsw_cmd_if_set_max_frame_length {
+	__le16 if_id;
+	__le16 frame_length;
+};
+
+struct dpsw_cmd_if_get_max_frame_length {
+	__le16 if_id;
+};
+
+struct dpsw_rsp_if_get_max_frame_length {
+	__le16 pad;
+	__le16 frame_length;
+};
+
+struct dpsw_cmd_if_set_link_cfg {
+	/* cmd word 0 */
+	__le16 if_id;
+	u8 pad[6];
+	/* cmd word 1 */
+	__le32 rate;
+	__le32 pad1;
+	/* cmd word 2 */
+	__le64 options;
+};
+
+struct dpsw_cmd_if_get_link_state {
+	__le16 if_id;
+};
+
+#define DPSW_UP_SHIFT	0
+#define DPSW_UP_SIZE	1
+
+struct dpsw_rsp_if_get_link_state {
+	/* cmd word 0 */
+	__le32 pad0;
+	u8 up;
+	u8 pad1[3];
+	/* cmd word 1 */
+	__le32 rate;
+	__le32 pad2;
+	/* cmd word 2 */
+	__le64 options;
+};
+
+struct dpsw_vlan_add {
+	__le16 fdb_id;
+	__le16 vlan_id;
+};
+
+struct dpsw_cmd_vlan_manage_if {
+	/* cmd word 0 */
+	__le16 pad0;
+	__le16 vlan_id;
+	__le32 pad1;
+	/* cmd word 1 */
+	__le64 if_id[4];
+};
+
+struct dpsw_cmd_vlan_remove {
+	__le16 pad;
+	__le16 vlan_id;
+};
+
+struct dpsw_cmd_vlan_get_attr {
+	__le16 vlan_id;
+};
+
+struct dpsw_rsp_vlan_get_attr {
+	/* cmd word 0 */
+	__le64 pad;
+	/* cmd word 1 */
+	__le16 fdb_id;
+	__le16 num_ifs;
+	__le16 num_untagged_ifs;
+	__le16 num_flooding_ifs;
+};
+
+struct dpsw_cmd_vlan_get_if {
+	__le16 vlan_id;
+};
+
+struct dpsw_rsp_vlan_get_if {
+	/* cmd word 0 */
+	__le16 pad0;
+	__le16 num_ifs;
+	u8 pad1[4];
+	/* cmd word 1 */
+	__le64 if_id[4];
+};
+
+
+struct dpsw_cmd_vlan_get_if_untagged {
+	__le16 vlan_id;
+};
+
+struct dpsw_rsp_vlan_get_if_untagged {
+	/* cmd word 0 */
+	__le16 pad0;
+	__le16 num_ifs;
+	u8 pad1[4];
+	/* cmd word 1 */
+	__le64 if_id[4];
+};
+
+
+struct dpsw_cmd_vlan_get_if_flooding {
+	__le16 vlan_id;
+};
+
+struct dpsw_rsp_vlan_get_if_flooding {
+	/* cmd word 0 */
+	__le16 pad0;
+	__le16 num_ifs;
+	u8 pad1[4];
+	/* cmd word 1 */
+	__le64 if_id[4];
+};
+
+struct dpsw_cmd_fdb_add {
+	__le32 pad;
+	__le16 fdb_aging_time;
+	__le16 num_fdb_entries;
+};
+
+struct dpsw_rsp_fdb_add {
+	__le16 fdb_id;
+};
+
+struct dpsw_cmd_fdb_remove {
+	__le16 fdb_id;
+};
+
+#define DPSW_ENTRY_TYPE_SHIFT	0
+#define DPSW_ENTRY_TYPE_SIZE	4
+
+struct dpsw_cmd_fdb_add_unicast {
+	/* cmd word 0 */
+	__le16 fdb_id;
+	u8 mac_addr[6];
+	/* cmd word 1 */
+	u8 if_egress;
+	u8 pad;
+	/* only the first 4 bits from LSB */
+	u8 type;
+};
+
+struct dpsw_cmd_fdb_get_unicast {
+	__le16 fdb_id;
+	u8 mac_addr[6];
+};
+
+struct dpsw_rsp_fdb_get_unicast {
+	__le64 pad;
+	__le16 if_egress;
+	/* only first 4 bits from LSB */
+	u8 type;
+};
+
+struct dpsw_cmd_fdb_remove_unicast {
+	/* cmd word 0 */
+	__le16 fdb_id;
+	u8 mac_addr[6];
+	/* cmd word 1 */
+	__le16 if_egress;
+	/* only the first 4 bits from LSB */
+	u8 type;
+};
+
+struct dpsw_cmd_fdb_add_multicast {
+	/* cmd word 0 */
+	__le16 fdb_id;
+	__le16 num_ifs;
+	/* only the first 4 bits from LSB */
+	u8 type;
+	u8 pad[3];
+	/* cmd word 1 */
+	u8 mac_addr[6];
+	__le16 pad2;
+	/* cmd word 2 */
+	__le64 if_id[4];
+};
+
+struct dpsw_cmd_fdb_get_multicast {
+	__le16 fdb_id;
+	u8 mac_addr[6];
+};
+
+struct dpsw_rsp_fdb_get_multicast {
+	/* cmd word 0 */
+	__le64 pad0;
+	/* cmd word 1 */
+	__le16 num_ifs;
+	/* only the first 4 bits from LSB */
+	u8 type;
+	u8 pad1[5];
+	/* cmd word 2 */
+	__le64 if_id[4];
+};
+
+struct dpsw_cmd_fdb_remove_multicast {
+	/* cmd word 0 */
+	__le16 fdb_id;
+	__le16 num_ifs;
+	/* only the first 4 bits from LSB */
+	u8 type;
+	u8 pad[3];
+	/* cmd word 1 */
+	u8 mac_addr[6];
+	__le16 pad2;
+	/* cmd word 2 */
+	__le64 if_id[4];
+};
+
+#define DPSW_LEARNING_MODE_SHIFT	0
+#define DPSW_LEARNING_MODE_SIZE		4
+
+struct dpsw_cmd_fdb_set_learning_mode {
+	__le16 fdb_id;
+	/* only the first 4 bits from LSB */
+	u8 mode;
+};
+
+struct dpsw_cmd_fdb_get_attr {
+	__le16 fdb_id;
+};
+
+struct dpsw_rsp_fdb_get_attr {
+	/* cmd word 0 */
+	__le16 pad;
+	__le16 max_fdb_entries;
+	__le16 fdb_aging_time;
+	__le16 num_fdb_mc_groups;
+	/* cmd word 1 */
+	__le16 max_fdb_mc_groups;
+	/* only the first 4 bits from LSB */
+	u8 learning_mode;
+};
+
+struct dpsw_cmd_acl_add {
+	__le16 pad;
+	__le16 max_entries;
+};
+
+struct dpsw_rsp_acl_add {
+	__le16 acl_id;
+};
+
+struct dpsw_cmd_acl_remove {
+	__le16 acl_id;
+};
+
+struct dpsw_prep_acl_entry {
+	u8 match_l2_dest_mac[6];
+	__le16 match_l2_tpid;
+
+	u8 match_l2_source_mac[6];
+	__le16 match_l2_vlan_id;
+
+	__le32 match_l3_dest_ip;
+	__le32 match_l3_source_ip;
+
+	__le16 match_l4_dest_port;
+	__le16 match_l4_source_port;
+	__le16 match_l2_ether_type;
+	u8 match_l2_pcp_dei;
+	u8 match_l3_dscp;
+
+	u8 mask_l2_dest_mac[6];
+	__le16 mask_l2_tpid;
+
+	u8 mask_l2_source_mac[6];
+	__le16 mask_l2_vlan_id;
+
+	__le32 mask_l3_dest_ip;
+	__le32 mask_l3_source_ip;
+
+	__le16 mask_l4_dest_port;
+	__le16 mask_l4_source_port;
+	__le16 mask_l2_ether_type;
+	u8 mask_l2_pcp_dei;
+	u8 mask_l3_dscp;
+
+	u8 match_l3_protocol;
+	u8 mask_l3_protocol;
+};
+
+#define DPSW_RESULT_ACTION_SHIFT	0
+#define DPSW_RESULT_ACTION_SIZE		4
+
+struct dpsw_cmd_acl_entry {
+	__le16 acl_id;
+	__le16 result_if_id;
+	__le32 precedence;
+	/* from LSB only the first 4 bits */
+	u8 result_action;
+	u8 pad[7];
+	__le64 pad2[4];
+	__le64 key_iova;
+};
+
+struct dpsw_cmd_acl_if {
+	/* cmd word 0 */
+	__le16 acl_id;
+	__le16 num_ifs;
+	__le32 pad;
+	/* cmd word 1 */
+	__le64 if_id[4];
+};
+
+struct dpsw_cmd_acl_get_attr {
+	__le16 acl_id;
+};
+
+struct dpsw_rsp_acl_get_attr {
+	/* cmd word 0 */
+	__le64 pad;
+	/* cmd word 1 */
+	__le16 max_entries;
+	__le16 num_entries;
+	__le16 num_ifs;
+};
+
+struct dpsw_rsp_ctrl_if_get_attr {
+	/* cmd word 0 */
+	__le64 pad;
+	/* cmd word 1 */
+	__le32 rx_fqid;
+	__le32 rx_err_fqid;
+	/* cmd word 2 */
+	__le32 tx_err_conf_fqid;
+};
+
+struct dpsw_cmd_ctrl_if_set_pools {
+	u8 num_dpbp;
+	/* from LSB: POOL0_BACKUP_POOL:1 ... POOL7_BACKUP_POOL */
+	u8 backup_pool;
+	__le16 pad;
+	__le32 dpbp_id[8];
+	__le16 buffer_size[8];
+};
+
+struct dpsw_rsp_get_api_version {
+	__le16 version_major;
+	__le16 version_minor;
+};
 
 #endif /* __FSL_DPSW_CMD_H */
diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
index 7971bfd..eab649d 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
@@ -34,31 +34,26 @@
 #include "dpsw.h"
 #include "dpsw-cmd.h"
 
-/* internal functions */
-static void build_if_id_bitmap(const u16 *if_id,
-			       const u16 num_ifs,
-			       struct mc_command *cmd,
-			       int start_param)
-{
+static void build_if_id_bitmap(__le64 *if_id_bitmap,
+			       const u16 *if_id,
+			       const u16 num_ifs) {
 	int i;
 
 	for (i = 0; (i < num_ifs) && (i < DPSW_MAX_IF); i++)
-		cmd->params[start_param + (if_id[i] / 64)] |= mc_enc(
-			(if_id[i] % 64), 1, 1);
+		dpsw_set_bit(if_id_bitmap[if_id[i] / 64], (if_id[i] % 64), 1);
 }
 
-static int read_if_id_bitmap(u16 *if_id,
-			     u16 *num_ifs,
-			     struct mc_command *cmd,
-			     int start_param)
-{
+static void read_if_id_bitmap(u16 *if_id,
+			      u16 *num_ifs,
+			      __le64 *if_id_bitmap) {
+
 	int bitmap[DPSW_MAX_IF] = { 0 };
 	int i, j = 0;
 	int count = 0;
 
 	for (i = 0; i < DPSW_MAX_IF; i++) {
-		bitmap[i] = (int)mc_dec(cmd->params[start_param + i / 64],
-					 i % 64, 1);
+		bitmap[i] = dpsw_get_bit(le64_to_cpu(if_id_bitmap[i / 64]),
+					 i % 64);
 		count += bitmap[i];
 	}
 
@@ -70,8 +65,6 @@ static int read_if_id_bitmap(u16 *if_id,
 			j++;
 		}
 	}
-
-	return 0;
 }
 
 /**
@@ -97,13 +90,15 @@ int dpsw_open(struct fsl_mc_io *mc_io,
 	      u16 *token)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_open *cmd_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_OPEN,
 					  cmd_flags,
 					  0);
-	DPSW_CMD_OPEN(cmd, dpsw_id);
+	cmd_params = (struct dpsw_cmd_open *)cmd.params;
+	cmd_params->dpsw_id = cpu_to_le32(dpsw_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -111,7 +106,7 @@ int dpsw_open(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	*token = MC_CMD_HDR_READ_TOKEN(cmd.header);
+	*token = get_mc_cmd_hdr_token(cmd.header);
 
 	return 0;
 }
@@ -171,13 +166,23 @@ int dpsw_create(struct fsl_mc_io *mc_io,
 		u32 *obj_id)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_create *cmd_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_CREATE,
 					  cmd_flags,
 					  dprc_token);
-	DPSW_CMD_CREATE(cmd, cfg);
+	cmd_params = (struct dpsw_cmd_create *)cmd.params;
+	cmd_params->num_ifs = cpu_to_le16(cfg->num_ifs);
+	cmd_params->max_fdbs = cfg->adv.max_fdbs;
+	cmd_params->max_meters_per_if = cfg->adv.max_meters_per_if;
+	cmd_params->max_vlans = cpu_to_le16(cfg->adv.max_vlans);
+	cmd_params->max_fdb_entries = cpu_to_le16(cfg->adv.max_fdb_entries);
+	cmd_params->fdb_aging_time = cpu_to_le16(cfg->adv.fdb_aging_time);
+	cmd_params->max_fdb_mc_groups = cpu_to_le16(cfg->adv.max_fdb_mc_groups);
+	cmd_params->options = cpu_to_le64(cfg->adv.options);
+	dpsw_set_field(cmd_params->component_type, COMPONENT_TYPE, cfg->adv.component_type);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -211,13 +216,14 @@ int dpsw_destroy(struct fsl_mc_io *mc_io,
 		 u32 object_id)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_destroy *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_DESTROY,
 					  cmd_flags,
 					  dprc_token);
-	/* set object id to destroy */
-	cmd.params[0] = mc_enc(0, sizeof(object_id), object_id);
+	cmd_params = (struct dpsw_cmd_destroy *)cmd.params;
+	cmd_params->dpsw_id = cpu_to_le32(object_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -285,6 +291,7 @@ int dpsw_is_enabled(struct fsl_mc_io *mc_io,
 		    int *en)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_rsp_is_enabled *cmd_rsp;
 	int err;
 
 	/* prepare command */
@@ -297,7 +304,8 @@ int dpsw_is_enabled(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_IS_ENABLED(cmd, *en);
+	cmd_rsp = (struct dpsw_rsp_is_enabled *)cmd.params;
+	*en = dpsw_get_field(cmd_rsp->enabled, ENABLE);
 
 	return 0;
 }
@@ -342,12 +350,17 @@ int dpsw_set_irq(struct fsl_mc_io *mc_io,
 		 struct dpsw_irq_cfg *irq_cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_set_irq *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_SET_IRQ,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_SET_IRQ(cmd, irq_index, irq_cfg);
+	cmd_params = (struct dpsw_cmd_set_irq *)cmd.params;
+	cmd_params->irq_index = irq_index;
+	cmd_params->irq_val = cpu_to_le32(irq_cfg->val);
+	cmd_params->irq_addr = cpu_to_le64(irq_cfg->addr);
+	cmd_params->irq_num = cpu_to_le32(irq_cfg->irq_num);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -374,13 +387,16 @@ int dpsw_get_irq(struct fsl_mc_io *mc_io,
 		 struct dpsw_irq_cfg *irq_cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_get_irq *cmd_params;
+	struct dpsw_rsp_get_irq *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_GET_IRQ,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_GET_IRQ(cmd, irq_index);
+	cmd_params = (struct dpsw_cmd_get_irq *)cmd.params;
+	cmd_params->irq_index = irq_index;
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -388,7 +404,11 @@ int dpsw_get_irq(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_GET_IRQ(cmd, *type, irq_cfg);
+	rsp_params = (struct dpsw_rsp_get_irq *)cmd.params;
+	irq_cfg->addr = le64_to_cpu(rsp_params->irq_addr);
+	irq_cfg->val = le32_to_cpu(rsp_params->irq_val);
+	irq_cfg->irq_num = le32_to_cpu(rsp_params->irq_num);
+	*type = le32_to_cpu(rsp_params->irq_type);
 
 	return 0;
 }
@@ -415,12 +435,15 @@ int dpsw_set_irq_enable(struct fsl_mc_io *mc_io,
 			u8 en)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_set_irq_enable *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_SET_IRQ_ENABLE,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_SET_IRQ_ENABLE(cmd, irq_index, en);
+	cmd_params = (struct dpsw_cmd_set_irq_enable *)cmd.params;
+	dpsw_set_field(cmd_params->enable_state, ENABLE, en);
+	cmd_params->irq_index = irq_index;
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -443,13 +466,16 @@ int dpsw_get_irq_enable(struct fsl_mc_io *mc_io,
 			u8 *en)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_get_irq_enable *cmd_params;
+	struct dpsw_rsp_get_irq_enable *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_GET_IRQ_ENABLE,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_GET_IRQ_ENABLE(cmd, irq_index);
+	cmd_params = (struct dpsw_cmd_get_irq_enable *)cmd.params;
+	cmd_params->irq_index = irq_index;
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -457,7 +483,8 @@ int dpsw_get_irq_enable(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_GET_IRQ_ENABLE(cmd, *en);
+	rsp_params = (struct dpsw_rsp_get_irq_enable *)cmd.params;
+	*en = dpsw_get_field(rsp_params->enable_state, ENABLE);
 
 	return 0;
 }
@@ -485,12 +512,15 @@ int dpsw_set_irq_mask(struct fsl_mc_io *mc_io,
 		      u32 mask)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_set_irq_mask *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_SET_IRQ_MASK,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_SET_IRQ_MASK(cmd, irq_index, mask);
+	cmd_params = (struct dpsw_cmd_set_irq_mask *)cmd.params;
+	cmd_params->mask = cpu_to_le32(mask);
+	cmd_params->irq_index = irq_index;
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -516,13 +546,16 @@ int dpsw_get_irq_mask(struct fsl_mc_io *mc_io,
 		      u32 *mask)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_get_irq_mask *cmd_params;
+	struct dpsw_rsp_get_irq_mask *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_GET_IRQ_MASK,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_GET_IRQ_MASK(cmd, irq_index);
+	cmd_params = (struct dpsw_cmd_get_irq_mask *)cmd.params;
+	cmd_params->irq_index = irq_index;
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -530,7 +563,8 @@ int dpsw_get_irq_mask(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_GET_IRQ_MASK(cmd, *mask);
+	rsp_params = (struct dpsw_rsp_get_irq_mask *)cmd.params;
+	*mask = le32_to_cpu(rsp_params->mask);
 
 	return 0;
 }
@@ -554,13 +588,17 @@ int dpsw_get_irq_status(struct fsl_mc_io *mc_io,
 			u32 *status)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_get_irq_status *cmd_params;
+	struct dpsw_rsp_get_irq_status *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_GET_IRQ_STATUS,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_GET_IRQ_STATUS(cmd, irq_index, *status);
+	cmd_params = (struct dpsw_cmd_get_irq_status *)cmd.params;
+	cmd_params->status = cpu_to_le32(*status);
+	cmd_params->irq_index = irq_index;
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -568,7 +606,8 @@ int dpsw_get_irq_status(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_GET_IRQ_STATUS(cmd, *status);
+	rsp_params = (struct dpsw_rsp_get_irq_status *)cmd.params;
+	*status = le32_to_cpu(rsp_params->status);
 
 	return 0;
 }
@@ -592,12 +631,15 @@ int dpsw_clear_irq_status(struct fsl_mc_io *mc_io,
 			  u32 status)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_clear_irq_status *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_CLEAR_IRQ_STATUS,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_CLEAR_IRQ_STATUS(cmd, irq_index, status);
+	cmd_params = (struct dpsw_cmd_clear_irq_status *)cmd.params;
+	cmd_params->status = cpu_to_le32(status);
+	cmd_params->irq_index = irq_index;
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -618,6 +660,7 @@ int dpsw_get_attributes(struct fsl_mc_io *mc_io,
 			struct dpsw_attr *attr)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_rsp_get_attr *rsp_params;
 	int err;
 
 	/* prepare command */
@@ -631,7 +674,20 @@ int dpsw_get_attributes(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_GET_ATTR(cmd, attr);
+	rsp_params = (struct dpsw_rsp_get_attr *)cmd.params;
+	attr->num_ifs = le16_to_cpu(rsp_params->num_ifs);
+	attr->max_fdbs = rsp_params->max_fdbs;
+	attr->num_fdbs = rsp_params->num_fdbs;
+	attr->max_vlans = le16_to_cpu(rsp_params->max_vlans);
+	attr->num_vlans = le16_to_cpu(rsp_params->num_vlans);
+	attr->max_fdb_entries = le16_to_cpu(rsp_params->max_fdb_entries);
+	attr->fdb_aging_time = le16_to_cpu(rsp_params->fdb_aging_time);
+	attr->id = le32_to_cpu(rsp_params->dpsw_id);
+	attr->mem_size = le16_to_cpu(rsp_params->mem_size);
+	attr->max_fdb_mc_groups = le16_to_cpu(rsp_params->max_fdb_mc_groups);
+	attr->max_meters_per_if = rsp_params->max_meters_per_if;
+	attr->options = le64_to_cpu(rsp_params->options);
+	attr->component_type = dpsw_get_field(rsp_params->component_type, COMPONENT_TYPE);
 
 	return 0;
 }
@@ -653,12 +709,14 @@ int dpsw_set_reflection_if(struct fsl_mc_io *mc_io,
 			   u16 if_id)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_set_reflection_if *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_SET_REFLECTION_IF,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_SET_REFLECTION_IF(cmd, if_id);
+	cmd_params = (struct dpsw_cmd_set_reflection_if *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -681,12 +739,16 @@ int dpsw_if_set_link_cfg(struct fsl_mc_io *mc_io,
 			 struct dpsw_link_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_link_cfg *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_LINK_CFG,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_LINK_CFG(cmd, if_id, cfg);
+	cmd_params = (struct dpsw_cmd_if_set_link_cfg *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	cmd_params->rate = cpu_to_le32(cfg->rate);
+	cmd_params->options = cpu_to_le64(cfg->options);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -709,13 +771,16 @@ int dpsw_if_get_link_state(struct fsl_mc_io *mc_io,
 			   struct dpsw_link_state *state)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_get_link_state *cmd_params;
+	struct dpsw_rsp_if_get_link_state *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_GET_LINK_STATE,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_GET_LINK_STATE(cmd, if_id);
+	cmd_params = (struct dpsw_cmd_if_get_link_state *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -723,7 +788,10 @@ int dpsw_if_get_link_state(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_IF_GET_LINK_STATE(cmd, state);
+	rsp_params = (struct dpsw_rsp_if_get_link_state *)cmd.params;
+	state->rate = le32_to_cpu(rsp_params->rate);
+	state->options = le64_to_cpu(rsp_params->options);
+	state->up = dpsw_get_field(rsp_params->up, UP);
 
 	return 0;
 }
@@ -745,12 +813,15 @@ int dpsw_if_set_flooding(struct fsl_mc_io *mc_io,
 			 int en)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_flooding *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_FLOODING,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_FLOODING(cmd, if_id, en);
+	cmd_params = (struct dpsw_cmd_if_set_flooding *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	dpsw_set_field(cmd_params->enable, ENABLE, en);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -773,12 +844,15 @@ int dpsw_if_set_broadcast(struct fsl_mc_io *mc_io,
 			  int en)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_broadcast *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_BROADCAST,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_FLOODING(cmd, if_id, en);
+	cmd_params = (struct dpsw_cmd_if_set_broadcast *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	dpsw_set_field(cmd_params->enable, ENABLE, en);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -801,12 +875,15 @@ int dpsw_if_set_multicast(struct fsl_mc_io *mc_io,
 			  int en)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_multicast *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_MULTICAST,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_FLOODING(cmd, if_id, en);
+	cmd_params = (struct dpsw_cmd_if_set_multicast *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	dpsw_set_field(cmd_params->enable, ENABLE, en);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -829,12 +906,18 @@ int dpsw_if_set_tci(struct fsl_mc_io *mc_io,
 		    const struct dpsw_tci_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_tci *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_TCI,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_TCI(cmd, if_id, cfg);
+	cmd_params = (struct dpsw_cmd_if_set_tci *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	dpsw_set_field(cmd_params->conf, VLAN_ID, cfg->vlan_id);
+	dpsw_set_field(cmd_params->conf, DEI, cfg->dei);
+	dpsw_set_field(cmd_params->conf, PCP, cfg->pcp);
+	cmd_params->conf = cpu_to_le16(cmd_params->conf);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -857,13 +940,16 @@ int dpsw_if_get_tci(struct fsl_mc_io *mc_io,
 		    struct dpsw_tci_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
-	int err = 0;
+	struct dpsw_cmd_if_get_tci *cmd_params;
+	struct dpsw_rsp_if_get_tci *rsp_params;
+	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_GET_TCI,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_GET_TCI(cmd, if_id);
+	cmd_params = (struct dpsw_cmd_if_get_tci *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -871,7 +957,10 @@ int dpsw_if_get_tci(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_IF_GET_TCI(cmd, cfg);
+	rsp_params = (struct dpsw_rsp_if_get_tci *)cmd.params;
+	cfg->pcp = rsp_params->pcp;
+	cfg->dei = rsp_params->dei;
+	cfg->vlan_id = le16_to_cpu(rsp_params->vlan_id);
 
 	return 0;
 }
@@ -896,12 +985,16 @@ int dpsw_if_set_stp(struct fsl_mc_io *mc_io,
 		    const struct dpsw_stp_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_stp *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_STP,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_STP(cmd, if_id, cfg);
+	cmd_params = (struct dpsw_cmd_if_set_stp *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	cmd_params->vlan_id = cpu_to_le16(cfg->vlan_id);
+	dpsw_set_field(cmd_params->state, STATE, cfg->state);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -933,12 +1026,16 @@ int dpsw_if_set_accepted_frames(struct fsl_mc_io *mc_io,
 				const struct dpsw_accepted_frames_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_accepted_frames *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_ACCEPTED_FRAMES,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_ACCEPTED_FRAMES(cmd, if_id, cfg);
+	cmd_params = (struct dpsw_cmd_if_set_accepted_frames *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	dpsw_set_field(cmd_params->unaccepted, FRAME_TYPE, cfg->type);
+	dpsw_set_field(cmd_params->unaccepted, UNACCEPTED_ACT, cfg->unaccept_act);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -965,12 +1062,15 @@ int dpsw_if_set_accept_all_vlan(struct fsl_mc_io *mc_io,
 				int accept_all)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_accept_all_vlan *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_SET_IF_ACCEPT_ALL_VLAN,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_ACCEPT_ALL_VLAN(cmd, if_id, accept_all);
+	cmd_params = (struct dpsw_cmd_if_set_accept_all_vlan *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	dpsw_set_field(cmd_params->accept_all, ACCEPT_ALL, accept_all);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -995,13 +1095,17 @@ int dpsw_if_get_counter(struct fsl_mc_io *mc_io,
 			u64 *counter)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_get_counter *cmd_params;
+	struct dpsw_rsp_if_get_counter *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_GET_COUNTER,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_GET_COUNTER(cmd, if_id, type);
+	cmd_params = (struct dpsw_cmd_if_get_counter *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	dpsw_set_field(cmd_params->type, COUNTER_TYPE, type);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -1009,7 +1113,8 @@ int dpsw_if_get_counter(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_IF_GET_COUNTER(cmd, *counter);
+	rsp_params = (struct dpsw_rsp_if_get_counter *)cmd.params;
+	*counter = le64_to_cpu(rsp_params->counter);
 
 	return 0;
 }
@@ -1033,12 +1138,16 @@ int dpsw_if_set_counter(struct fsl_mc_io *mc_io,
 			u64 counter)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_counter *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_COUNTER,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_COUNTER(cmd, if_id, type, counter);
+	cmd_params = (struct dpsw_cmd_if_set_counter *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	cmd_params->counter = cpu_to_le64(counter);
+	dpsw_set_field(cmd_params->type, COUNTER_TYPE, type);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1065,13 +1174,23 @@ int dpsw_if_set_tx_selection(struct fsl_mc_io *mc_io,
 			     u16 if_id,
 			     const struct dpsw_tx_selection_cfg *cfg)
 {
+	struct dpsw_cmd_if_set_tx_selection *cmd_params;
 	struct mc_command cmd = { 0 };
+	int i;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_TX_SELECTION,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_TX_SELECTION(cmd, if_id, cfg);
+	cmd_params = (struct dpsw_cmd_if_set_tx_selection *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	dpsw_set_field(cmd_params->priority_selector, PRIORITY_SELECTOR, cfg->priority_selector);
+
+	for (i = 0; i < 8; i++) {
+		cmd_params->tc_sched[i].delta_bandwidth = cpu_to_le16(cfg->tc_sched[i].delta_bandwidth);
+		dpsw_set_field(cmd_params->tc_sched[i].mode, SCHED_MODE, cfg->tc_sched[i].mode);
+		cmd_params->tc_id[i] = cfg->tc_id[i];
+	}
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1094,12 +1213,16 @@ int dpsw_if_add_reflection(struct fsl_mc_io *mc_io,
 			   const struct dpsw_reflection_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_reflection *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_ADD_REFLECTION,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_ADD_REFLECTION(cmd, if_id, cfg);
+	cmd_params = (struct dpsw_cmd_if_reflection *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	cmd_params->vlan_id = cpu_to_le16(cfg->vlan_id);
+	dpsw_set_field(cmd_params->filter, FILTER, cfg->filter);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1122,12 +1245,16 @@ int dpsw_if_remove_reflection(struct fsl_mc_io *mc_io,
 			      const struct dpsw_reflection_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_reflection *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_REMOVE_REFLECTION,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_REMOVE_REFLECTION(cmd, if_id, cfg);
+	cmd_params = (struct dpsw_cmd_if_reflection *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	cmd_params->vlan_id = cpu_to_le16(cfg->vlan_id);
+	dpsw_set_field(cmd_params->filter, FILTER, cfg->filter);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1150,12 +1277,20 @@ int dpsw_if_set_flooding_metering(struct fsl_mc_io *mc_io,
 				  const struct dpsw_metering_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_flooding_metering *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_FLOODING_METERING,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_FLOODING_METERING(cmd, if_id, cfg);
+	cmd_params = (struct dpsw_cmd_if_set_flooding_metering *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	dpsw_set_field(cmd_params->mode_units, MODE, cfg->mode);
+	dpsw_set_field(cmd_params->mode_units, UNITS, cfg->units);
+	cmd_params->cir = cpu_to_le32(cfg->cir);
+	cmd_params->eir = cpu_to_le32(cfg->eir);
+	cmd_params->cbs = cpu_to_le32(cfg->cbs);
+	cmd_params->ebs = cpu_to_le32(cfg->ebs);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1180,12 +1315,21 @@ int dpsw_if_set_metering(struct fsl_mc_io *mc_io,
 			 const struct dpsw_metering_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_metering *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_METERING,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_METERING(cmd, if_id, tc_id, cfg);
+	cmd_params = (struct dpsw_cmd_if_set_metering *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	cmd_params->tc_id = tc_id;
+	dpsw_set_field(cmd_params->mode_units, MODE, cfg->mode);
+	dpsw_set_field(cmd_params->mode_units, UNITS, cfg->units);
+	cmd_params->cir = cpu_to_le32(cfg->cir);
+	cmd_params->eir = cpu_to_le32(cfg->eir);
+	cmd_params->cbs = cpu_to_le32(cfg->cbs);
+	cmd_params->ebs = cpu_to_le32(cfg->ebs);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1202,9 +1346,18 @@ int dpsw_if_set_metering(struct fsl_mc_io *mc_io,
 void dpsw_prepare_early_drop(const struct dpsw_early_drop_cfg *cfg,
 			     u8 *early_drop_buf)
 {
-	u64 *ext_params = (u64 *)early_drop_buf;
+	struct dpsw_prep_early_drop *ext_params;
 
-	DPSW_PREP_EARLY_DROP(ext_params, cfg);
+	ext_params = (struct dpsw_prep_early_drop *)early_drop_buf;
+	dpsw_set_field(ext_params->conf, EARLY_DROP_MODE, cfg->drop_mode);
+	dpsw_set_field(ext_params->conf, EARLY_DROP_UNIT, cfg->units);
+	ext_params->tail_drop_threshold = cpu_to_le32(cfg->tail_drop_threshold);
+	ext_params->green_drop_probability = cfg->green.drop_probability;
+	ext_params->green_max_threshold =  cpu_to_le64(cfg->green.max_threshold);
+	ext_params->green_min_threshold =  cpu_to_le64(cfg->green.min_threshold);
+	ext_params->yellow_drop_probability = cfg->yellow.drop_probability;
+	ext_params->yellow_max_threshold =  cpu_to_le64(cfg->yellow.max_threshold);
+	ext_params->yellow_min_threshold =  cpu_to_le64(cfg->yellow.min_threshold);
 }
 
 /**
@@ -1231,12 +1384,16 @@ int dpsw_if_set_early_drop(struct fsl_mc_io *mc_io,
 			   u64 early_drop_iova)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_early_drop *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_EARLY_DROP,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_EARLY_DROP(cmd, if_id, tc_id, early_drop_iova);
+	cmd_params = (struct dpsw_cmd_if_set_early_drop *)cmd.params;
+	cmd_params->tc_id = tc_id;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	cmd_params->early_drop_iova = cpu_to_le64(early_drop_iova);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1262,12 +1419,14 @@ int dpsw_add_custom_tpid(struct fsl_mc_io *mc_io,
 			 const struct dpsw_custom_tpid_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_custom_tpid *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_ADD_CUSTOM_TPID,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_ADD_CUSTOM_TPID(cmd, cfg);
+	cmd_params = (struct dpsw_cmd_custom_tpid *)cmd.params;
+	cmd_params->tpid = cpu_to_le16(cfg->tpid);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1288,12 +1447,14 @@ int dpsw_remove_custom_tpid(struct fsl_mc_io *mc_io,
 			    const struct dpsw_custom_tpid_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_custom_tpid *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_REMOVE_CUSTOM_TPID,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_REMOVE_CUSTOM_TPID(cmd, cfg);
+	cmd_params = (struct dpsw_cmd_custom_tpid *)cmd.params;
+	cmd_params->tpid = cpu_to_le16(cfg->tpid);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1314,12 +1475,14 @@ int dpsw_if_enable(struct fsl_mc_io *mc_io,
 		   u16 if_id)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_ENABLE,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_ENABLE(cmd, if_id);
+	cmd_params = (struct dpsw_cmd_if *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1340,12 +1503,14 @@ int dpsw_if_disable(struct fsl_mc_io *mc_io,
 		    u16 if_id)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_DISABLE,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_DISABLE(cmd, if_id);
+	cmd_params = (struct dpsw_cmd_if *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1367,6 +1532,8 @@ int dpsw_if_get_attributes(struct fsl_mc_io *mc_io,
 			   u16 if_id,
 			   struct dpsw_if_attr *attr)
 {
+	struct dpsw_rsp_if_get_attr *rsp_params;
+	struct dpsw_cmd_if *cmd_params;
 	struct mc_command cmd = { 0 };
 	int err;
 
@@ -1374,7 +1541,8 @@ int dpsw_if_get_attributes(struct fsl_mc_io *mc_io,
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_GET_ATTR,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_GET_ATTR(cmd, if_id);
+	cmd_params = (struct dpsw_cmd_if *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -1382,7 +1550,14 @@ int dpsw_if_get_attributes(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_IF_GET_ATTR(cmd, attr);
+	rsp_params = (struct dpsw_rsp_if_get_attr *)cmd.params;
+	attr->num_tcs = rsp_params->num_tcs;
+	attr->rate = le32_to_cpu(rsp_params->rate);
+	attr->options = le32_to_cpu(rsp_params->options);
+	attr->enabled = dpsw_get_field(rsp_params->conf, ENABLED);
+	attr->accept_all_vlan = dpsw_get_field(rsp_params->conf, ACCEPT_ALL_VLAN);
+	attr->admit_untagged = dpsw_get_field(rsp_params->conf, ADMIT_UNTAGGED);
+	attr->qdid = le16_to_cpu(rsp_params->qdid);
 
 	return 0;
 }
@@ -1404,12 +1579,15 @@ int dpsw_if_set_max_frame_length(struct fsl_mc_io *mc_io,
 				 u16 frame_length)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_set_max_frame_length *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_SET_MAX_FRAME_LENGTH,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_SET_MAX_FRAME_LENGTH(cmd, if_id, frame_length);
+	cmd_params = (struct dpsw_cmd_if_set_max_frame_length *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
+	cmd_params->frame_length = cpu_to_le16(frame_length);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1432,20 +1610,24 @@ int dpsw_if_get_max_frame_length(struct fsl_mc_io *mc_io,
 				 u16 *frame_length)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_if_get_max_frame_length *cmd_params;
+	struct dpsw_rsp_if_get_max_frame_length *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_GET_MAX_FRAME_LENGTH,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_IF_GET_MAX_FRAME_LENGTH(cmd, if_id);
+	cmd_params = (struct dpsw_cmd_if_get_max_frame_length *)cmd.params;
+	cmd_params->if_id = cpu_to_le16(if_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
 	if (err)
 		return err;
 
-	DPSW_RSP_IF_GET_MAX_FRAME_LENGTH(cmd, *frame_length);
+	rsp_params = (struct dpsw_rsp_if_get_max_frame_length *)cmd.params;
+	*frame_length = le16_to_cpu(rsp_params->frame_length);
 
 	return 0;
 }
@@ -1474,12 +1656,15 @@ int dpsw_vlan_add(struct fsl_mc_io *mc_io,
 		  const struct dpsw_vlan_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_vlan_add *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_ADD,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_ADD(cmd, vlan_id, cfg);
+	cmd_params = (struct dpsw_vlan_add *)cmd.params;
+	cmd_params->fdb_id = cpu_to_le16(cfg->fdb_id);
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1507,13 +1692,15 @@ int dpsw_vlan_add_if(struct fsl_mc_io *mc_io,
 		     const struct dpsw_vlan_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_manage_if *cmd_params;
 
 	/* prepare command */
-	build_if_id_bitmap(cfg->if_id, cfg->num_ifs, &cmd, 1);
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_ADD_IF,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_ADD_IF(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_manage_if *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
+	build_if_id_bitmap(cmd_params->if_id, cfg->if_id, cfg->num_ifs);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1543,13 +1730,15 @@ int dpsw_vlan_add_if_untagged(struct fsl_mc_io *mc_io,
 			      const struct dpsw_vlan_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_manage_if *cmd_params;
 
 	/* prepare command */
-	build_if_id_bitmap(cfg->if_id, cfg->num_ifs, &cmd, 1);
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_ADD_IF_UNTAGGED,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_ADD_IF_UNTAGGED(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_manage_if *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
+	build_if_id_bitmap(cmd_params->if_id, cfg->if_id, cfg->num_ifs);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1580,13 +1769,15 @@ int dpsw_vlan_add_if_flooding(struct fsl_mc_io *mc_io,
 			      const struct dpsw_vlan_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_manage_if *cmd_params;
 
 	/* prepare command */
-	build_if_id_bitmap(cfg->if_id, cfg->num_ifs, &cmd, 1);
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_ADD_IF_FLOODING,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_ADD_IF_FLOODING(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_manage_if *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
+	build_if_id_bitmap(cmd_params->if_id, cfg->if_id, cfg->num_ifs);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1612,13 +1803,15 @@ int dpsw_vlan_remove_if(struct fsl_mc_io *mc_io,
 			const struct dpsw_vlan_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_manage_if *cmd_params;
 
 	/* prepare command */
-	build_if_id_bitmap(cfg->if_id, cfg->num_ifs, &cmd, 1);
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_REMOVE_IF,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_REMOVE_IF(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_manage_if *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
+	build_if_id_bitmap(cmd_params->if_id, cfg->if_id, cfg->num_ifs);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1646,13 +1839,15 @@ int dpsw_vlan_remove_if_untagged(struct fsl_mc_io *mc_io,
 				 const struct dpsw_vlan_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_manage_if *cmd_params;
 
 	/* prepare command */
-	build_if_id_bitmap(cfg->if_id, cfg->num_ifs, &cmd, 1);
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_REMOVE_IF_UNTAGGED,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_REMOVE_IF_UNTAGGED(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_manage_if *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
+	build_if_id_bitmap(cmd_params->if_id, cfg->if_id, cfg->num_ifs);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1676,13 +1871,15 @@ int dpsw_vlan_remove_if_flooding(struct fsl_mc_io *mc_io,
 				 const struct dpsw_vlan_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_manage_if *cmd_params;
 
 	/* prepare command */
-	build_if_id_bitmap(cfg->if_id, cfg->num_ifs, &cmd, 1);
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_REMOVE_IF_FLOODING,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_REMOVE_IF_FLOODING(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_manage_if *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
+	build_if_id_bitmap(cmd_params->if_id, cfg->if_id, cfg->num_ifs);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1703,12 +1900,14 @@ int dpsw_vlan_remove(struct fsl_mc_io *mc_io,
 		     u16 vlan_id)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_remove *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_REMOVE,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_REMOVE(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_remove *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1731,13 +1930,16 @@ int dpsw_vlan_get_attributes(struct fsl_mc_io *mc_io,
 			     struct dpsw_vlan_attr *attr)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_get_attr *cmd_params;
+	struct dpsw_rsp_vlan_get_attr *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_GET_ATTRIBUTES,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_GET_ATTR(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_get_attr *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -1745,7 +1947,11 @@ int dpsw_vlan_get_attributes(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_VLAN_GET_ATTR(cmd, attr);
+	rsp_params = (struct dpsw_rsp_vlan_get_attr *)cmd.params;
+	attr->fdb_id = le16_to_cpu(rsp_params->fdb_id);
+	attr->num_ifs = le16_to_cpu(rsp_params->num_ifs);
+	attr->num_untagged_ifs = le16_to_cpu(rsp_params->num_untagged_ifs);
+	attr->num_flooding_ifs = le16_to_cpu(rsp_params->num_flooding_ifs);
 
 	return 0;
 }
@@ -1767,13 +1973,16 @@ int dpsw_vlan_get_if(struct fsl_mc_io *mc_io,
 		     struct dpsw_vlan_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_get_if *cmd_params;
+	struct dpsw_rsp_vlan_get_if *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_GET_IF,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_GET_IF(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_get_if *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -1781,8 +1990,9 @@ int dpsw_vlan_get_if(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_VLAN_GET_IF(cmd, cfg);
-	read_if_id_bitmap(cfg->if_id, &cfg->num_ifs, &cmd, 1);
+	rsp_params = (struct dpsw_rsp_vlan_get_if *)cmd.params;
+	cfg->num_ifs = le16_to_cpu(rsp_params->num_ifs);
+	read_if_id_bitmap(cfg->if_id, &cfg->num_ifs, rsp_params->if_id);
 
 	return 0;
 }
@@ -1805,13 +2015,16 @@ int dpsw_vlan_get_if_flooding(struct fsl_mc_io *mc_io,
 			      struct dpsw_vlan_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_get_if_flooding *cmd_params;
+	struct dpsw_rsp_vlan_get_if_flooding *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_GET_IF_FLOODING,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_GET_IF_FLOODING(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_get_if_flooding *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -1819,8 +2032,9 @@ int dpsw_vlan_get_if_flooding(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_VLAN_GET_IF_FLOODING(cmd, cfg);
-	read_if_id_bitmap(cfg->if_id, &cfg->num_ifs, &cmd, 1);
+	rsp_params = (struct dpsw_rsp_vlan_get_if_flooding *)cmd.params;
+	cfg->num_ifs = le16_to_cpu(rsp_params->num_ifs);
+	read_if_id_bitmap(cfg->if_id, &cfg->num_ifs, rsp_params->if_id);
 
 	return 0;
 }
@@ -1843,13 +2057,16 @@ int dpsw_vlan_get_if_untagged(struct fsl_mc_io *mc_io,
 			      struct dpsw_vlan_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_vlan_get_if_untagged *cmd_params;
+	struct dpsw_rsp_vlan_get_if_untagged *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_VLAN_GET_IF_UNTAGGED,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_VLAN_GET_IF_UNTAGGED(cmd, vlan_id);
+	cmd_params = (struct dpsw_cmd_vlan_get_if_untagged *)cmd.params;
+	cmd_params->vlan_id = cpu_to_le16(vlan_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -1857,8 +2074,9 @@ int dpsw_vlan_get_if_untagged(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_VLAN_GET_IF(cmd, cfg);
-	read_if_id_bitmap(cfg->if_id, &cfg->num_ifs, &cmd, 1);
+	rsp_params = (struct dpsw_rsp_vlan_get_if_untagged *)cmd.params;
+	cfg->num_ifs = le16_to_cpu(rsp_params->num_ifs);
+	read_if_id_bitmap(cfg->if_id, &cfg->num_ifs, rsp_params->if_id);
 
 	return 0;
 }
@@ -1881,13 +2099,17 @@ int dpsw_fdb_add(struct fsl_mc_io *mc_io,
 		 const struct dpsw_fdb_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_fdb_add *cmd_params;
+	struct dpsw_rsp_fdb_add *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_FDB_ADD,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_FDB_ADD(cmd, cfg);
+	cmd_params = (struct dpsw_cmd_fdb_add *)cmd.params;
+	cmd_params->fdb_aging_time = cpu_to_le16(cfg->fdb_aging_time);
+	cmd_params->num_fdb_entries = cpu_to_le16(cfg->num_fdb_entries);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -1895,7 +2117,8 @@ int dpsw_fdb_add(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_FDB_ADD(cmd, *fdb_id);
+	rsp_params = (struct dpsw_rsp_fdb_add *)cmd.params;
+	*fdb_id = le16_to_cpu(rsp_params->fdb_id);
 
 	return 0;
 }
@@ -1915,12 +2138,14 @@ int dpsw_fdb_remove(struct fsl_mc_io *mc_io,
 		    u16 fdb_id)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_fdb_remove *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_FDB_REMOVE,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_FDB_REMOVE(cmd, fdb_id);
+	cmd_params = (struct dpsw_cmd_fdb_remove *)cmd.params;
+	cmd_params->fdb_id = cpu_to_le16(fdb_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1943,12 +2168,19 @@ int dpsw_fdb_add_unicast(struct fsl_mc_io *mc_io,
 			 const struct dpsw_fdb_unicast_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_fdb_add_unicast *cmd_params;
+	int i;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_FDB_ADD_UNICAST,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_FDB_ADD_UNICAST(cmd, fdb_id, cfg);
+	cmd_params = (struct dpsw_cmd_fdb_add_unicast *)cmd.params;
+	cmd_params->fdb_id = cpu_to_le16(fdb_id);
+	cmd_params->if_egress = cpu_to_le16(cfg->if_egress);
+	for (i = 0; i < 6; i++)
+		cmd_params->mac_addr[i] = cfg->mac_addr[5 - i];
+	dpsw_set_field(cmd_params->type, ENTRY_TYPE, cfg->type);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1972,13 +2204,18 @@ int dpsw_fdb_get_unicast(struct fsl_mc_io *mc_io,
 			 struct dpsw_fdb_unicast_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
-	int err;
+	struct dpsw_cmd_fdb_get_unicast *cmd_params;
+	struct dpsw_rsp_fdb_get_unicast *rsp_params;
+	int err, i;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_FDB_GET_UNICAST,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_FDB_GET_UNICAST(cmd, fdb_id);
+	cmd_params = (struct dpsw_cmd_fdb_get_unicast *)cmd.params;
+	cmd_params->fdb_id = cpu_to_le16(fdb_id);
+	for (i = 0; i < 6; i++)
+		cmd_params->mac_addr[i] = cfg->mac_addr[5 - i];
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -1986,7 +2223,9 @@ int dpsw_fdb_get_unicast(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_FDB_GET_UNICAST(cmd, cfg);
+	rsp_params = (struct dpsw_rsp_fdb_get_unicast *)cmd.params;
+	cfg->if_egress = le16_to_cpu(rsp_params->if_egress);
+	cfg->type = dpsw_get_field(rsp_params->type, ENTRY_TYPE);
 
 	return 0;
 }
@@ -2008,12 +2247,19 @@ int dpsw_fdb_remove_unicast(struct fsl_mc_io *mc_io,
 			    const struct dpsw_fdb_unicast_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_fdb_remove_unicast *cmd_params;
+	int i;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_FDB_REMOVE_UNICAST,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_FDB_REMOVE_UNICAST(cmd, fdb_id, cfg);
+	cmd_params = (struct dpsw_cmd_fdb_remove_unicast *)cmd.params;
+	cmd_params->fdb_id = cpu_to_le16(fdb_id);
+	for (i = 0; i < 6; i++)
+		cmd_params->mac_addr[i] = cfg->mac_addr[5 - i];
+	cmd_params->if_egress = cpu_to_le16(cfg->if_egress);
+	dpsw_set_field(cmd_params->type, ENTRY_TYPE, cfg->type);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -2043,13 +2289,20 @@ int dpsw_fdb_add_multicast(struct fsl_mc_io *mc_io,
 			   const struct dpsw_fdb_multicast_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_fdb_add_multicast *cmd_params;
+	int i;
 
 	/* prepare command */
-	build_if_id_bitmap(cfg->if_id, cfg->num_ifs, &cmd, 2);
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_FDB_ADD_MULTICAST,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_FDB_ADD_MULTICAST(cmd, fdb_id, cfg);
+	cmd_params = (struct dpsw_cmd_fdb_add_multicast *)cmd.params;
+	cmd_params->fdb_id = cpu_to_le16(fdb_id);
+	cmd_params->num_ifs = cpu_to_le16(cfg->num_ifs);
+	dpsw_set_field(cmd_params->type, ENTRY_TYPE, cfg->type);
+	build_if_id_bitmap(cmd_params->if_id, cfg->if_id, cfg->num_ifs);
+	for (i = 0; i < 6; i++)
+		cmd_params->mac_addr[i] = cfg->mac_addr[5 - i];
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -2073,13 +2326,18 @@ int dpsw_fdb_get_multicast(struct fsl_mc_io *mc_io,
 			   struct dpsw_fdb_multicast_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
-	int err;
+	struct dpsw_cmd_fdb_get_multicast *cmd_params;
+	struct dpsw_rsp_fdb_get_multicast *rsp_params;
+	int err, i;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_FDB_GET_MULTICAST,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_FDB_GET_MULTICAST(cmd, fdb_id);
+	cmd_params = (struct dpsw_cmd_fdb_get_multicast *)cmd.params;
+	cmd_params->fdb_id = cpu_to_le16(fdb_id);
+	for (i = 0; i < 6; i++)
+		cmd_params->mac_addr[i] = cfg->mac_addr[5 - i];
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -2087,8 +2345,10 @@ int dpsw_fdb_get_multicast(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_FDB_GET_MULTICAST(cmd, cfg);
-	read_if_id_bitmap(cfg->if_id, &cfg->num_ifs, &cmd, 2);
+	rsp_params = (struct dpsw_rsp_fdb_get_multicast *)cmd.params;
+	cfg->num_ifs = le16_to_cpu(rsp_params->num_ifs);
+	cfg->type = dpsw_get_field(rsp_params->type, ENTRY_TYPE);
+	read_if_id_bitmap(cfg->if_id, &cfg->num_ifs, rsp_params->if_id);
 
 	return 0;
 }
@@ -2116,13 +2376,20 @@ int dpsw_fdb_remove_multicast(struct fsl_mc_io *mc_io,
 			      const struct dpsw_fdb_multicast_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_fdb_remove_multicast *cmd_params;
+	int i;
 
 	/* prepare command */
-	build_if_id_bitmap(cfg->if_id, cfg->num_ifs, &cmd, 2);
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_FDB_REMOVE_MULTICAST,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_FDB_REMOVE_MULTICAST(cmd, fdb_id, cfg);
+	cmd_params = (struct dpsw_cmd_fdb_remove_multicast *)cmd.params;
+	cmd_params->fdb_id = cpu_to_le16(fdb_id);
+	cmd_params->num_ifs = cpu_to_le16(cfg->num_ifs);
+	dpsw_set_field(cmd_params->type, ENTRY_TYPE, cfg->type);
+	build_if_id_bitmap(cmd_params->if_id, cfg->if_id, cfg->num_ifs);
+	for (i = 0; i < 6; i++)
+		cmd_params->mac_addr[i] = cfg->mac_addr[5 - i];
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -2145,12 +2412,15 @@ int dpsw_fdb_set_learning_mode(struct fsl_mc_io *mc_io,
 			       enum dpsw_fdb_learning_mode mode)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_fdb_set_learning_mode *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_FDB_SET_LEARNING_MODE,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_FDB_SET_LEARNING_MODE(cmd, fdb_id, mode);
+	cmd_params = (struct dpsw_cmd_fdb_set_learning_mode *)cmd.params;
+	cmd_params->fdb_id = cpu_to_le16(fdb_id);
+	dpsw_set_field(cmd_params->mode, LEARNING_MODE, mode);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -2173,13 +2443,16 @@ int dpsw_fdb_get_attributes(struct fsl_mc_io *mc_io,
 			    struct dpsw_fdb_attr *attr)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_fdb_get_attr *cmd_params;
+	struct dpsw_rsp_fdb_get_attr *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_FDB_GET_ATTR,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_FDB_GET_ATTR(cmd, fdb_id);
+	cmd_params = (struct dpsw_cmd_fdb_get_attr *)cmd.params;
+	cmd_params->fdb_id = cpu_to_le16(fdb_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -2187,7 +2460,12 @@ int dpsw_fdb_get_attributes(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_FDB_GET_ATTR(cmd, attr);
+	rsp_params = (struct dpsw_rsp_fdb_get_attr *)cmd.params;
+	attr->max_fdb_entries = le16_to_cpu(rsp_params->max_fdb_entries);
+	attr->fdb_aging_time = le16_to_cpu(rsp_params->fdb_aging_time);
+	attr->learning_mode = dpsw_get_field(rsp_params->learning_mode, LEARNING_MODE);
+	attr->num_fdb_mc_groups = le16_to_cpu(rsp_params->num_fdb_mc_groups);
+	attr->max_fdb_mc_groups = le16_to_cpu(rsp_params->max_fdb_mc_groups);
 
 	return 0;
 }
@@ -2212,13 +2490,16 @@ int dpsw_acl_add(struct fsl_mc_io *mc_io,
 		 const struct dpsw_acl_cfg  *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_acl_add *cmd_params;
+	struct dpsw_rsp_acl_add *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_ACL_ADD,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_ACL_ADD(cmd, cfg);
+	cmd_params = (struct dpsw_cmd_acl_add *)cmd.params;
+	cmd_params->max_entries = cpu_to_le16(cfg->max_entries);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -2226,7 +2507,8 @@ int dpsw_acl_add(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_ACL_ADD(cmd, *acl_id);
+	rsp_params = (struct dpsw_rsp_acl_add *)cmd.params;
+	*acl_id = le16_to_cpu(rsp_params->acl_id);
 
 	return 0;
 }
@@ -2246,12 +2528,14 @@ int dpsw_acl_remove(struct fsl_mc_io *mc_io,
 		    u16 acl_id)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_acl_remove *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_ACL_REMOVE,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_ACL_REMOVE(cmd, acl_id);
+	cmd_params = (struct dpsw_cmd_acl_remove *)cmd.params;
+	cmd_params->acl_id = cpu_to_le16(acl_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -2268,9 +2552,39 @@ int dpsw_acl_remove(struct fsl_mc_io *mc_io,
 void dpsw_acl_prepare_entry_cfg(const struct dpsw_acl_key *key,
 				u8 *entry_cfg_buf)
 {
-	u64 *ext_params = (u64 *)entry_cfg_buf;
+	struct dpsw_prep_acl_entry *ext_params;
+	int i;
 
-	DPSW_PREP_ACL_ENTRY(ext_params, key);
+	ext_params = (struct dpsw_prep_acl_entry *)entry_cfg_buf;
+
+	for (i = 0; i < 6; i++) {
+		ext_params->match_l2_dest_mac[i] = key->match.l2_dest_mac[5 - i];
+		ext_params->match_l2_source_mac[i] = key->match.l2_source_mac[5 - i];
+		ext_params->mask_l2_dest_mac[i] = key->mask.l2_dest_mac[5 - i];
+		ext_params->mask_l2_source_mac[i] = key->mask.l2_source_mac[5 - i];
+	}
+
+	ext_params->match_l2_tpid = cpu_to_le16(key->match.l2_tpid);
+	ext_params->match_l2_vlan_id = cpu_to_le16(key->match.l2_vlan_id);
+	ext_params->match_l3_dest_ip = cpu_to_le32(key->match.l3_dest_ip);
+	ext_params->match_l3_source_ip = cpu_to_le32(key->match.l3_source_ip);
+	ext_params->match_l4_dest_port = cpu_to_le16(key->match.l4_dest_port);
+	ext_params->match_l4_source_port = cpu_to_le16(key->match.l4_source_port);
+	ext_params->match_l2_ether_type = cpu_to_le16(key->match.l2_ether_type);
+	ext_params->match_l2_pcp_dei = key->match.l2_pcp_dei;
+	ext_params->match_l3_dscp = key->match.l3_dscp;
+
+	ext_params->mask_l2_tpid = cpu_to_le16(key->mask.l2_tpid);
+	ext_params->mask_l2_vlan_id = cpu_to_le16(key->mask.l2_vlan_id);
+	ext_params->mask_l3_dest_ip = cpu_to_le32(key->mask.l3_dest_ip);
+	ext_params->mask_l3_source_ip = cpu_to_le32(key->mask.l3_source_ip);
+	ext_params->mask_l4_dest_port = cpu_to_le16(key->mask.l4_dest_port);
+	ext_params->mask_l4_source_port = cpu_to_le16(key->mask.l4_source_port);
+	ext_params->mask_l2_ether_type = cpu_to_le16(key->mask.l2_ether_type);
+	ext_params->mask_l2_pcp_dei = key->mask.l2_pcp_dei;
+	ext_params->mask_l3_dscp = key->mask.l3_dscp;
+	ext_params->match_l3_protocol = key->match.l3_protocol;
+	ext_params->mask_l3_protocol = key->mask.l3_protocol;
 }
 
 /**
@@ -2292,12 +2606,18 @@ int dpsw_acl_add_entry(struct fsl_mc_io *mc_io,
 		       const struct dpsw_acl_entry_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_acl_entry *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_ACL_ADD_ENTRY,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_ACL_ADD_ENTRY(cmd, acl_id, cfg);
+	cmd_params = (struct dpsw_cmd_acl_entry *)cmd.params;
+	cmd_params->acl_id = cpu_to_le16(acl_id);
+	cmd_params->result_if_id = cpu_to_le16(cfg->result.if_id);
+	cmd_params->precedence = cpu_to_le32(cfg->precedence);
+	dpsw_set_field(cmd_params->result_action, RESULT_ACTION, cfg->result.action);
+	cmd_params->key_iova = cpu_to_le64(cfg->key_iova);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -2322,12 +2642,18 @@ int dpsw_acl_remove_entry(struct fsl_mc_io *mc_io,
 			  const struct dpsw_acl_entry_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_acl_entry *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_ACL_REMOVE_ENTRY,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_ACL_REMOVE_ENTRY(cmd, acl_id, cfg);
+	cmd_params = (struct dpsw_cmd_acl_entry *)cmd.params;
+	cmd_params->acl_id = cpu_to_le16(acl_id);
+	cmd_params->result_if_id = cpu_to_le16(cfg->result.if_id);
+	cmd_params->precedence = cpu_to_le32(cfg->precedence);
+	dpsw_set_field(cmd_params->result_action, RESULT_ACTION, cfg->result.action);
+	cmd_params->key_iova = cpu_to_le64(cfg->key_iova);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -2350,13 +2676,16 @@ int dpsw_acl_add_if(struct fsl_mc_io *mc_io,
 		    const struct dpsw_acl_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_acl_if *cmd_params;
 
 	/* prepare command */
-	build_if_id_bitmap(cfg->if_id, cfg->num_ifs, &cmd, 1);
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_ACL_ADD_IF,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_ACL_ADD_IF(cmd, acl_id, cfg);
+	cmd_params = (struct dpsw_cmd_acl_if *)cmd.params;
+	cmd_params->acl_id = cpu_to_le16(acl_id);
+	cmd_params->num_ifs = cpu_to_le16(cfg->num_ifs);
+	build_if_id_bitmap(cmd_params->if_id, cfg->if_id, cfg->num_ifs);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -2379,13 +2708,16 @@ int dpsw_acl_remove_if(struct fsl_mc_io *mc_io,
 		       const struct dpsw_acl_if_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_acl_if *cmd_params;
 
 	/* prepare command */
-	build_if_id_bitmap(cfg->if_id, cfg->num_ifs, &cmd, 1);
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_ACL_REMOVE_IF,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_ACL_REMOVE_IF(cmd, acl_id, cfg);
+	cmd_params = (struct dpsw_cmd_acl_if *)cmd.params;
+	cmd_params->acl_id = cpu_to_le16(acl_id);
+	cmd_params->num_ifs = cpu_to_le16(cfg->num_ifs);
+	build_if_id_bitmap(cmd_params->if_id, cfg->if_id, cfg->num_ifs);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -2408,13 +2740,16 @@ int dpsw_acl_get_attributes(struct fsl_mc_io *mc_io,
 			    struct dpsw_acl_attr *attr)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_acl_get_attr *cmd_params;
+	struct dpsw_rsp_acl_get_attr *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_ACL_GET_ATTR,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_ACL_GET_ATTR(cmd, acl_id);
+	cmd_params = (struct dpsw_cmd_acl_get_attr *)cmd.params;
+	cmd_params->acl_id = cpu_to_le16(acl_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -2422,7 +2757,10 @@ int dpsw_acl_get_attributes(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_ACL_GET_ATTR(cmd, attr);
+	rsp_params = (struct dpsw_rsp_acl_get_attr *)cmd.params;
+	attr->max_entries = le16_to_cpu(rsp_params->max_entries);
+	attr->num_entries = le16_to_cpu(rsp_params->num_entries);
+	attr->num_ifs = le16_to_cpu(rsp_params->num_ifs);
 
 	return 0;
 }
@@ -2442,6 +2780,7 @@ int dpsw_ctrl_if_get_attributes(struct fsl_mc_io *mc_io,
 				struct dpsw_ctrl_if_attr *attr)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_rsp_ctrl_if_get_attr *rsp_params;
 	int err;
 
 	/* prepare command */
@@ -2455,7 +2794,10 @@ int dpsw_ctrl_if_get_attributes(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSW_RSP_CTRL_IF_GET_ATTR(cmd, attr);
+	rsp_params = (struct dpsw_rsp_ctrl_if_get_attr *)cmd.params;
+	attr->rx_fqid = le32_to_cpu(rsp_params->rx_fqid);
+	attr->rx_err_fqid = le32_to_cpu(rsp_params->rx_err_fqid);
+	attr->tx_err_conf_fqid = le32_to_cpu(rsp_params->tx_err_conf_fqid);
 
 	return 0;
 }
@@ -2475,12 +2817,20 @@ int dpsw_ctrl_if_set_pools(struct fsl_mc_io *mc_io,
 			   const struct dpsw_ctrl_if_pools_cfg *pools)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_cmd_ctrl_if_set_pools *cmd_params;
+	int i;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_CTRL_IF_SET_POOLS,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_CTRL_IF_SET_POOLS(cmd, pools);
+	cmd_params = (struct dpsw_cmd_ctrl_if_set_pools *)cmd.params;
+	cmd_params->num_dpbp = pools->num_dpbp;
+	for (i = 0; i < 8; i++) {
+		dpsw_set_bit(cmd_params->backup_pool, i, pools->pools[i].backup_pool);
+		cmd_params->buffer_size[i] = cpu_to_le16(pools->pools[i].buffer_size);
+		cmd_params->dpbp_id[i] = cpu_to_le32(pools->pools[i].dpbp_id);
+	}
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -2546,6 +2896,7 @@ int dpsw_get_api_version(struct fsl_mc_io *mc_io,
 			 u16 *minor_ver)
 {
 	struct mc_command cmd = { 0 };
+	struct dpsw_rsp_get_api_version *rsp_params;
 	int err;
 
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_GET_API_VERSION,
@@ -2556,7 +2907,9 @@ int dpsw_get_api_version(struct fsl_mc_io *mc_io,
 	if (err)
 		return err;
 
-	DPSW_RSP_GET_API_VERSION(cmd, *major_ver, *minor_ver);
+	rsp_params = (struct dpsw_rsp_get_api_version *)cmd.params;
+	*major_ver = le16_to_cpu(rsp_params->version_major);
+	*minor_ver = le16_to_cpu(rsp_params->version_minor);
 
 	return 0;
 }
-- 
2.9.3

