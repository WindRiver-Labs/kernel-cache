From 55584ca1b35bbed6989db8fe4cc834daddef58bd Mon Sep 17 00:00:00 2001
From: Bogdan Purcareata <bogdan.purcareata@nxp.com>
Date: Thu, 9 Mar 2017 10:17:04 +0000
Subject: [PATCH 372/388] staging: fsl-dpaa2: Allocate extra headroom in frame
 descriptor

Instead of keeping an extra headroom in front of the allocated buffers,
make it a part of the frame descriptor layout. This cleans up the code
and prevents tricky memory operations. It also fixes memory corruption
issues in large MTU termination scenarios.

However, keep the check pertaining to the required headroom in
forwarding scenarios. This will print a warning if reallocations are
expected on the forwarding path, giving a heads up on an alleged
performance degradation.

Signed-off-by: Bogdan Purcareata <bogdan.purcareata@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c | 30 +++++++++++---------------
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h | 12 ++++++-----
 2 files changed, 20 insertions(+), 22 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 2bb17d1..fe30d58 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -125,16 +125,11 @@ static struct sk_buff *build_linear_skb(struct dpaa2_eth_priv *priv,
 	u16 fd_offset = dpaa2_fd_get_offset(fd);
 	u32 fd_length = dpaa2_fd_get_len(fd);
 
-	/* Leave enough extra space in the headroom to make sure the skb is
-	 * not realloc'd in forwarding scenarios. This has been previously
-	 * allocated when seeding the buffer pools.
-	 */
-	skb = build_skb(fd_vaddr - priv->rx_extra_head,
-			DPAA2_ETH_SKB_SIZE(priv));
+	skb = build_skb(fd_vaddr, DPAA2_ETH_SKB_SIZE);
 	if (unlikely(!skb))
 		return NULL;
 
-	skb_reserve(skb, fd_offset + priv->rx_extra_head);
+	skb_reserve(skb, fd_offset);
 	skb_put(skb, fd_length);
 
 	ch->buf_count--;
@@ -176,7 +171,7 @@ static struct sk_buff *build_frag_skb(struct dpaa2_eth_priv *priv,
 
 		if (i == 0) {
 			/* We build the skb around the first data buffer */
-			skb = build_skb(sg_vaddr, DPAA2_ETH_SKB_SIZE(priv));
+			skb = build_skb(sg_vaddr, DPAA2_ETH_SKB_SIZE);
 			if (unlikely(!skb))
 				return NULL;
 
@@ -903,11 +898,7 @@ static int add_bufs(struct dpaa2_eth_priv *priv, u16 bpid)
 		if (unlikely(!buf))
 			goto err_alloc;
 
-		/* Leave extra IP headroom in front of the actual
-		 * area the device is using.
-		 */
-		buf = PTR_ALIGN(buf + priv->rx_extra_head,
-				      priv->rx_buf_align);
+		buf = PTR_ALIGN(buf, priv->rx_buf_align);
 
 		addr = dma_map_single(dev, buf, DPAA2_ETH_RX_BUF_SIZE,
 				      DMA_FROM_DEVICE);
@@ -2139,10 +2130,12 @@ static int setup_dpni(struct fsl_mc_device *ls_dev)
 	buf_layout.pass_frame_status = true;
 	buf_layout.private_data_size = DPAA2_ETH_SWA_SIZE;
 	buf_layout.data_align = priv->rx_buf_align;
+	buf_layout.data_head_room = DPAA2_ETH_RX_HEAD_ROOM;
 	buf_layout.options = DPNI_BUF_LAYOUT_OPT_PARSER_RESULT |
 			     DPNI_BUF_LAYOUT_OPT_FRAME_STATUS |
 			     DPNI_BUF_LAYOUT_OPT_PRIVATE_DATA_SIZE |
-			     DPNI_BUF_LAYOUT_OPT_DATA_ALIGN;
+			     DPNI_BUF_LAYOUT_OPT_DATA_ALIGN |
+			     DPNI_BUF_LAYOUT_OPT_DATA_HEAD_ROOM;
 	err = dpni_set_buffer_layout(priv->mc_io, 0, priv->mc_token,
 				     DPNI_QUEUE_RX, &buf_layout);
 	if (err) {
@@ -2720,10 +2713,13 @@ static int netdev_init(struct net_device *net_dev)
 	 * forwarding path.
 	 */
 	rx_req_headroom = LL_RESERVED_SPACE(net_dev) - ETH_HLEN;
-	rx_headroom = ALIGN(DPAA2_ETH_RX_HWA_SIZE + DPAA2_ETH_SWA_SIZE,
-			priv->rx_buf_align);
+	rx_headroom = ALIGN(DPAA2_ETH_RX_HWA_SIZE + DPAA2_ETH_SWA_SIZE +
+			DPAA2_ETH_RX_HEAD_ROOM, priv->rx_buf_align);
 	if (rx_req_headroom > rx_headroom)
-		priv->rx_extra_head = ALIGN(rx_req_headroom - rx_headroom, 4);
+		dev_info_once(dev,
+			"Required headroom (%d) greater than available (%d).\n"
+			"This will impact performance due to reallocations.\n",
+			rx_req_headroom, rx_headroom);
 
 	/* Our .ndo_init will be called herein */
 	err = register_netdev(net_dev);
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index c5b3f01..83b976f 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -102,9 +102,8 @@
 	((p_priv)->tx_data_offset + DPAA2_ETH_TX_BUF_ALIGN)
 
 /* rx_extra_head prevents reallocations in L3 processing. */
-#define DPAA2_ETH_SKB_SIZE(p_priv) \
+#define DPAA2_ETH_SKB_SIZE \
 	(DPAA2_ETH_RX_BUF_SIZE + \
-	 (p_priv)->rx_extra_head + \
 	 SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
 
 /* Hardware only sees DPAA2_ETH_RX_BUF_SIZE, but we need to allocate ingress
@@ -112,12 +111,17 @@
  * for alignment restrictions.
  */
 #define DPAA2_ETH_BUF_RAW_SIZE(p_priv) \
-	(DPAA2_ETH_SKB_SIZE(p_priv) + \
+	(DPAA2_ETH_SKB_SIZE + \
 	p_priv->rx_buf_align)
 
 /* PTP nominal frequency 1GHz */
 #define DPAA2_PTP_NOMINAL_FREQ_PERIOD_NS 1
 
+/* Leave enough extra space in the headroom to make sure the skb is
+ * not realloc'd in forwarding scenarios.
+ */
+#define DPAA2_ETH_RX_HEAD_ROOM		192
+
 /* We are accommodating a skb backpointer and some S/G info
  * in the frame's software annotation. The hardware
  * options are either 0 or 64, so we choose the latter.
@@ -484,8 +488,6 @@ struct dpaa2_eth_priv {
 
 	u16 tx_data_offset;
 	u16 rx_buf_align;
-	/* Rx extra headroom space */
-	u16 rx_extra_head;
 
 	u16 bpid;
 	u16 tx_qdid;
-- 
2.9.3

