From 61b6a12001afa3a881df68555e40a4951e5debae Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@nxp.com>
Date: Thu, 18 Aug 2016 14:32:14 +0300
Subject: [PATCH 118/388] fsl/qman: endianness changes

Signed-off-by: Madalin Bucur <madalin.bucur@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c |  4 ++--
 include/linux/fsl_qman.h              | 22 +++++++++++-----------
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index e1794b2..3ffb431 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -399,14 +399,14 @@ static inline u64 be48_to_cpu(u64 in)
 }
 static inline void cpu_to_hw_fd(struct qm_fd *fd)
 {
-	fd->addr = cpu_to_be40(fd->addr);
+	fd->opaque_addr = cpu_to_be64(fd->opaque_addr);
 	fd->status = cpu_to_be32(fd->status);
 	fd->opaque = cpu_to_be32(fd->opaque);
 }
 
 static inline void hw_fd_to_cpu(struct qm_fd *fd)
 {
-	fd->addr = be40_to_cpu(fd->addr);
+	fd->opaque_addr = be64_to_cpu(fd->opaque_addr);
 	fd->status = be32_to_cpu(fd->status);
 	fd->opaque = be32_to_cpu(fd->opaque);
 }
diff --git a/include/linux/fsl_qman.h b/include/linux/fsl_qman.h
index d507db7..f9278d2 100644
--- a/include/linux/fsl_qman.h
+++ b/include/linux/fsl_qman.h
@@ -159,19 +159,23 @@ struct qm_fd {
 			u8 addr_hi;	/* high 8-bits of 40-bit address */
 			u32 addr_lo;	/* low 32-bits of 40-bit address */
 #else
-			u8 liodn_offset:6;
-			u8 dd:2;	/* dynamic debug */
-			u8 bpid:8;	/* Buffer Pool ID */
+			u32 addr_lo;    /* low 32-bits of 40-bit address */
+			u8 addr_hi;     /* high 8-bits of 40-bit address */
 			u8 __reserved:4;
 			u8 eliodn_offset:4;
-			u8 addr_hi;	/* high 8-bits of 40-bit address */
-			u32 addr_lo;	/* low 32-bits of 40-bit address */
+			u8 bpid:8;      /* Buffer Pool ID */
+			u8 liodn_offset:6;
+			u8 dd:2;        /* dynamic debug */
 #endif
 		};
 		struct {
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 			u64 __notaddress:24;
-			/* More efficient address accessor */
 			u64 addr:40;
+#else
+			u64 addr:40;
+			u64 __notaddress:24;
+#endif
 		};
 		u64 opaque_addr;
 	};
@@ -324,13 +328,9 @@ union qm_sg_efl {
 	};
 	u32 efl;
 };
-static inline u64 qm_sg_entry_get64(const struct qm_sg_entry *sg)
-{
-	return be64_to_cpu(sg->opaque);
-}
 static inline dma_addr_t qm_sg_addr(const struct qm_sg_entry *sg)
 {
-	return (dma_addr_t)be64_to_cpu(sg->opaque);
+	return (dma_addr_t)be64_to_cpu(sg->opaque) & 0xffffffffffULL;
 }
 static inline u8 qm_sg_entry_get_ext(const struct qm_sg_entry *sg)
 {
-- 
2.9.3

