From 1b0586ebe04bb310770dcf15a33ec56b41161ad4 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@nxp.com>
Date: Wed, 21 Sep 2016 09:52:48 +0300
Subject: [PATCH 095/388] dpa_offload/dpa_classifier: Improve support for
 "return-to-keygen" table entries

The dpa_classifier tables support entries with a special type of
action called "return-to-keygen". This type of entries allow the
user to send selected network packets back to KeyGen for further
processing, such as extracting a new type of classification key.
The packets are directed to a special type of FMan distribution
called "direct scheme".

Up until now the dpa_classifier API only allowed the user to add
ONE single type of entries - either all the entries in the table
were of type "return-to-keygen", or all the entries in the table
were simple action entries. This upgrade allows the user to fill a
dpa_classifier table with MIXED (both) "return-to-keygen" AND
simple action entries.

Signed-off-by: Marian Chereji <marian.chereji@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c   | 180 +++------------------
 drivers/staging/fsl_dpa_offload/dpa_classifier.h   |   3 +-
 .../staging/fsl_dpa_offload/dpa_classifier_ioctl.h |   5 +-
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |  60 +++----
 include/linux/fsl_dpa_classifier.h                 |  35 ++--
 5 files changed, 60 insertions(+), 223 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index afb713f..690124e 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -48,7 +48,6 @@
 /* FMD includes */
 #include "error_ext.h"
 #include "fm_pcd_ext.h"
-#include "fm_cc.h"
 #include "crc64.h"
 
 
@@ -459,8 +458,7 @@ int dpa_classif_table_modify_miss_action(int			td,
 
 	/* Fill the [miss_engine_params] structure w/ data */
 	errno = action_to_next_engine_params(miss_action, &miss_engine_params,
-					&hmd, ptable->params.distribution,
-					ptable->params.classification);
+					&hmd);
 	if (errno < 0) {
 		/* Lock back the old HM chain. */
 		dpa_classif_hm_lock_chain(old_hmd);
@@ -671,11 +669,7 @@ int dpa_classif_table_modify_entry_by_key(int			td,
 				ret = action_to_next_engine_params(
 					mod_params->action,
 					&key_params.ccNextEngineParams,
-					NULL,
-					(t_Handle)ptable->params.
-							distribution,
-					(t_Handle)ptable->params.
-							classification);
+					NULL);
 				if (ret < 0) {
 					RELEASE_OBJECT(ptable);
 					log_err("Failed verification of new "
@@ -743,11 +737,7 @@ int dpa_classif_table_modify_entry_by_key(int			td,
 				ret = action_to_next_engine_params(
 						mod_params->action,
 						&key_params.ccNextEngineParams,
-						NULL,
-						(t_Handle)ptable->params.
-						distribution,
-						(t_Handle)ptable->params.
-						classification);
+						NULL);
 				if (ret < 0) {
 					RELEASE_OBJECT(ptable);
 					log_err("Failed verification of new action params while modifying entry by KEY in table td=%d.\n",
@@ -973,9 +963,7 @@ static int hash_table_modify_entry(
 			errno = action_to_next_engine_params(
 				local_action,
 				&key_params.ccNextEngineParams,
-				&hmd,
-				(t_Handle)ptable->params.distribution,
-				(t_Handle)ptable->params.classification);
+				&hmd);
 			if (errno < 0)
 				return errno;
 		} else {
@@ -996,9 +984,7 @@ static int hash_table_modify_entry(
 		errno = action_to_next_engine_params(
 				action,
 				&key_params.ccNextEngineParams,
-				&hmd,
-				(t_Handle)ptable->params.distribution,
-				(t_Handle)ptable->params.classification);
+				&hmd);
 		if (errno < 0)
 			return errno;
 	}
@@ -1179,9 +1165,7 @@ static int table_modify_entry_by_ref(struct dpa_cls_table	*ptable,
 		dpa_classif_hm_release_chain(ptable->entry[entry_id].hmd);
 		errno = action_to_next_engine_params(mod_params->action,
 				&next_engine_params,
-				&ptable->entry[entry_id].hmd,
-				(t_Handle)ptable->params.distribution,
-				(t_Handle)ptable->params.classification);
+				&ptable->entry[entry_id].hmd);
 		if (errno < 0)
 			return errno;
 
@@ -1302,11 +1286,7 @@ static int table_modify_entry_by_ref(struct dpa_cls_table	*ptable,
 					errno = action_to_next_engine_params(
 						mod_params->action,
 						&key_params.ccNextEngineParams,
-						&ptable->entry[entry_id].hmd,
-						(t_Handle)ptable->
-						params.distribution,
-						(t_Handle)ptable->
-						params.classification);
+						&ptable->entry[entry_id].hmd);
 					if (errno < 0)
 						return errno;
 					err =
@@ -2657,9 +2637,7 @@ static int table_insert_entry_exact_match(struct dpa_cls_table	*cls_table,
 
 	errno = action_to_next_engine_params(action,
 				&key_params.ccNextEngineParams,
-				&hmd,
-				(t_Handle)cls_table->params.distribution,
-				(t_Handle)cls_table->params.classification);
+				&hmd);
 	if (errno < 0)
 		return errno;
 
@@ -2874,11 +2852,7 @@ static int table_insert_entry_hash(struct dpa_cls_table		*cls_table,
 	if (cls_table->params.prefilled_entries) {
 		errno = action_to_next_engine_params(action,
 					&key_params.ccNextEngineParams,
-					NULL,
-					(t_Handle)cls_table->params.
-						distribution,
-					(t_Handle)cls_table->params.
-						classification);
+					NULL);
 		if (errno < 0)
 			return errno;
 
@@ -2902,9 +2876,7 @@ static int table_insert_entry_hash(struct dpa_cls_table		*cls_table,
 
 	errno = action_to_next_engine_params(action,
 				&key_params.ccNextEngineParams,
-				&hmd,
-				(t_Handle)cls_table->params.distribution,
-				(t_Handle)cls_table->params.classification);
+				&hmd);
 	if (errno < 0)
 		return errno;
 
@@ -3027,9 +2999,7 @@ static int table_insert_entry_hash(struct dpa_cls_table		*cls_table,
 
 static int action_to_next_engine_params(const struct dpa_cls_tbl_action *action,
 				t_FmPcdCcNextEngineParams *next_engine_params,
-				int *hmd,
-				t_Handle distribution,
-				t_Handle classification)
+				int *hmd)
 {
 	struct dpa_cls_table *next_table;
 #if (DPAA_VERSION >= 11)
@@ -3054,44 +3024,11 @@ static int action_to_next_engine_params(const struct dpa_cls_tbl_action *action,
 			e_FM_PCD_DROP_FRAME;
 		break;
 	case DPA_CLS_TBL_ACTION_ENQ:
-		if (distribution && classification) {
-			t_FmPcdKgSchemeParams *scheme_params =
-				kzalloc(sizeof(t_FmPcdKgSchemeParams),
-					GFP_KERNEL);
-			if (!scheme_params) {
-				log_err("Failed to alocate direct scheme "
-					"params.\n");
-				return -ENOMEM;
-			}
-			memset(scheme_params, 0, sizeof(*scheme_params));
-			scheme_params->modify = true;
-			scheme_params->alwaysDirect = true;
-#if (DPAA_VERSION >= 11)
-			scheme_params->bypassFqidGeneration = true;
-#else
-			scheme_params->bypassFqidGeneration = false;
-#endif
-			scheme_params->id.h_Scheme = distribution;
-			scheme_params->nextEngine = e_FM_PCD_CC;
-			scheme_params->kgNextEngineParams.cc.h_CcTree =
-					classification;
-			scheme_params->kgNextEngineParams.cc.grpId = 0;
-			scheme_params->keyExtractAndHashParams.
-					hashDistributionNumOfFqids = 1;
-
-			distribution = FM_PCD_KgSchemeSet(
-				((t_FmPcdCcTree *)classification)->h_FmPcd,
-				scheme_params);
-			kfree(scheme_params);
-			if (!distribution) {
-				log_err("Failed to set direct scheme.\n");
-				return -EINVAL;
-			}
-
+		if (action->enq_params.distribution) {
 			/* Redirect frames to KeyGen direct scheme */
 			next_engine_params->nextEngine = e_FM_PCD_KG;
 			next_engine_params->params.kgParams.h_DirectScheme =
-				distribution;
+				action->enq_params.distribution;
 			next_engine_params->params.kgParams.newFqid =
 				action->enq_params.new_fqid;
 			if (action->enq_params.override_fqid)
@@ -7886,52 +7823,16 @@ int dpa_classif_mcast_create_group(
 		replic_grp_params->numOfEntries = pgroup->num_members + 1;
 		next_engine_params = &replic_grp_params->nextEngineParams[0];
 
-		if (group_params->distribution &&
-		    group_params->classification) {
-			t_Handle classification, distribution;
-			t_FmPcdKgSchemeParams *scheme_params =
-					  kzalloc(sizeof(t_FmPcdKgSchemeParams),
-							GFP_KERNEL);
-			if (!scheme_params) {
-				log_err("Failed to alocate direct scheme "
-					"params.\n");
-				err = -ENOMEM;
-				goto dpa_classif_mcast_create_group_error;
-			}
-
-			classification = group_params->classification;
-			distribution = group_params->distribution;
-
-			memset(scheme_params, 0, sizeof(*scheme_params));
-			scheme_params->modify = true;
-			scheme_params->alwaysDirect = true;
-			scheme_params->bypassFqidGeneration = true;
-			scheme_params->id.h_Scheme = distribution;
-			scheme_params->nextEngine = e_FM_PCD_CC;
-			scheme_params->kgNextEngineParams.cc.h_CcTree =
-								 classification;
-			scheme_params->kgNextEngineParams.cc.grpId = 0;
-			scheme_params->keyExtractAndHashParams.
-					hashDistributionNumOfFqids = 1;
-
-			distribution = FM_PCD_KgSchemeSet(
-				((t_FmPcdCcTree *)classification)->h_FmPcd,
-				scheme_params);
-			kfree(scheme_params);
-			if (!distribution) {
-				log_err("Failed to set direct scheme.\n");
-				err = -EINVAL;
-				goto dpa_classif_mcast_create_group_error;
-			}
-
+		if (member_params->distribution) {
 			/* Redirect frames to KeyGen direct scheme */
 			next_engine_params->nextEngine = e_FM_PCD_KG;
 			next_engine_params->params.kgParams.h_DirectScheme =
-								   distribution;
+						member_params->distribution;
 			next_engine_params->params.kgParams.newFqid =
 						member_params->new_fqid;
-			next_engine_params->params.kgParams.overrideFqid =
-						member_params->override_fqid;
+			if (member_params->override_fqid)
+				next_engine_params->params.kgParams.
+							overrideFqid = TRUE;
 		} else {
 			if (member_params->policer_params) {
 				next_engine_params->nextEngine = e_FM_PCD_PLCR;
@@ -8106,51 +8007,16 @@ int dpa_classif_mcast_add_member(int grpd,
 	replic_grp_params->maxNumOfEntries = max_members;
 	replic_grp_params->numOfEntries = pgroup->num_members;
 	next_engine_params = &replic_grp_params->nextEngineParams[0];
-	if (pgroup->group_params.distribution &&
-	    pgroup->group_params.classification) {
-		t_Handle classification, distribution;
-		t_FmPcdKgSchemeParams *scheme_params =
-					  kzalloc(sizeof(t_FmPcdKgSchemeParams),
-							GFP_KERNEL);
-		if (!scheme_params) {
-			log_err("Failed to alocate direct scheme params.\n");
-			err = -ENOMEM;
-			goto dpa_classif_mcast_add_member_error;
-
-		}
-
-		classification = pgroup->group_params.classification;
-		distribution = pgroup->group_params.distribution;
-
-		memset(scheme_params, 0, sizeof(*scheme_params));
-		scheme_params->modify = true;
-		scheme_params->alwaysDirect = true;
-		scheme_params->bypassFqidGeneration = true;
-		scheme_params->id.h_Scheme = distribution;
-		scheme_params->nextEngine = e_FM_PCD_CC;
-		scheme_params->kgNextEngineParams.cc.h_CcTree = classification;
-		scheme_params->kgNextEngineParams.cc.grpId = 0;
-		scheme_params->keyExtractAndHashParams.
-				hashDistributionNumOfFqids = 1;
-
-		distribution = FM_PCD_KgSchemeSet(
-			((t_FmPcdCcTree *)classification)->h_FmPcd,
-			scheme_params);
-		kfree(scheme_params);
-		if (!distribution) {
-			log_err("Failed to set direct scheme.\n");
-			err = -EINVAL;
-			goto dpa_classif_mcast_add_member_error;
-		}
-
+	if (member_params->distribution) {
 		/* Redirect frames to KeyGen direct scheme */
 		next_engine_params->nextEngine = e_FM_PCD_KG;
 		next_engine_params->params.kgParams.h_DirectScheme =
-								   distribution;
+						member_params->distribution;
 		next_engine_params->params.kgParams.newFqid =
 					member_params->new_fqid;
-		next_engine_params->params.kgParams.overrideFqid =
-					member_params->override_fqid;
+		if (member_params->override_fqid)
+			next_engine_params->params.kgParams.
+							overrideFqid = TRUE;
 	} else {
 		if (member_params->policer_params) {
 			next_engine_params->nextEngine = e_FM_PCD_PLCR;
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index 59ae335..538dc52 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -452,8 +452,7 @@ static int table_insert_entry_hash(struct dpa_cls_table		*cls_table,
  * low level driver (FMD).
  */
 static int	action_to_next_engine_params(const struct dpa_cls_tbl_action
-	*action, t_FmPcdCcNextEngineParams *next_engine_params, int *hmd,
-	t_Handle distribution, t_Handle classification);
+	*action, t_FmPcdCcNextEngineParams *next_engine_params, int *hmd);
 
 /*
  * Translates next engine parameters (from FMD) into action parameters for use
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h b/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
index 9595c1a..da2e608 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
@@ -199,8 +199,6 @@ struct ioc_dpa_cls_mcast_remove_params {
 
 struct dpa_cls_compat_tbl_params {
 	compat_uptr_t			cc_node;
-	compat_uptr_t			distribution;
-	compat_uptr_t                   classification;
 	enum dpa_cls_tbl_type		type;
 	enum dpa_cls_tbl_entry_mgmt	entry_mgmt;
 	union {
@@ -222,6 +220,7 @@ struct dpa_cls_compat_tbl_enq_action_desc {
 	compat_uptr_t	policer_params;
 	int		hmd;
 	uint8_t		new_rel_vsp_id;
+	compat_uptr_t	distribution;
 };
 
 struct dpa_cls_compat_tbl_action {
@@ -494,8 +493,6 @@ struct dpa_cls_compat_mcast_group_params {
 	compat_uptr_t	fm_pcd;
 	struct	dpa_cls_compat_tbl_enq_action_desc first_member_params;
 	unsigned int prefilled_members;
-	compat_uptr_t distribution;
-	compat_uptr_t classification;
 };
 
 struct dpa_cls_compat_mcast_group_resources {
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index 9c15dba..3f90717 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -2408,6 +2408,12 @@ int dpa_cls_tbl_action_params_compatcpy(
 			}
 		} else
 			kparam->enq_params.policer_params = NULL;
+		if (compat_ptr(uparam->enq_params.distribution))
+			kparam->enq_params.distribution = compat_get_id2ptr(
+					uparam->enq_params.distribution,
+					FM_MAP_TYPE_PCD_NODE);
+		else
+			kparam->enq_params.distribution = NULL;
 		break;
 	case DPA_CLS_TBL_ACTION_NEXT_TABLE:
 		kparam->next_table_params.next_td =
@@ -2452,6 +2458,10 @@ int dpa_cls_tbl_action_params_rcompatcpy(
 			}
 		} else
 			uparam->enq_params.policer_params = 0;
+		if (kparam->enq_params.distribution)
+			uparam->enq_params.distribution = compat_get_ptr2id(
+					kparam->enq_params.distribution,
+					FM_MAP_TYPE_PCD_NODE);
 		break;
 	case DPA_CLS_TBL_ACTION_NEXT_TABLE:
 		uparam->next_table_params.next_td =
@@ -2473,18 +2483,9 @@ int dpa_cls_tbl_params_compatcpy(
 		struct ioc_dpa_cls_tbl_params			*kparam,
 		const struct compat_ioc_dpa_cls_tbl_params	*uparam)
 {
-	kparam->table_params.cc_node = compat_get_id2ptr(
+	kparam->table_params.cc_node	= compat_get_id2ptr(
 					uparam->table_params.cc_node,
 					FM_MAP_TYPE_PCD_NODE);
-	if (compat_ptr(uparam->table_params.distribution))
-		kparam->table_params.distribution = compat_get_id2ptr(
-					uparam->table_params.distribution,
-					FM_MAP_TYPE_PCD_NODE);
-	if (compat_ptr(uparam->table_params.classification))
-		kparam->table_params.classification = compat_get_id2ptr(
-					uparam->table_params.classification,
-					FM_MAP_TYPE_PCD_NODE);
-
 	kparam->table_params.type	= uparam->table_params.type;
 	kparam->table_params.entry_mgmt	= uparam->table_params.entry_mgmt;
 	kparam->table_params.prefilled_entries =
@@ -2517,18 +2518,9 @@ int dpa_cls_tbl_params_rcompatcpy(
 		struct compat_ioc_dpa_cls_tbl_params	*uparam,
 		const struct ioc_dpa_cls_tbl_params	*kparam)
 {
-	uparam->table_params.cc_node = compat_get_ptr2id(
+	uparam->table_params.cc_node	= compat_get_ptr2id(
 					kparam->table_params.cc_node,
 					FM_MAP_TYPE_PCD_NODE);
-	if (kparam->table_params.distribution)
-		uparam->table_params.distribution = compat_get_ptr2id(
-					kparam->table_params.distribution,
-					FM_MAP_TYPE_PCD_NODE);
-	if (kparam->table_params.classification)
-		uparam->table_params.classification = compat_get_ptr2id(
-					kparam->table_params.classification,
-					FM_MAP_TYPE_PCD_NODE);
-
 	uparam->table_params.type	= kparam->table_params.type;
 	uparam->table_params.entry_mgmt	= kparam->table_params.entry_mgmt;
 	uparam->table_params.prefilled_entries =
@@ -3010,6 +3002,14 @@ int dpa_cls_mcast_group_params_compatcpy(
 	} else
 		kparam->mcast_grp_params.first_member_params.policer_params =
 									NULL;
+	if (compat_ptr(uparam->mcast_grp_params.first_member_params.distribution))
+		kparam->mcast_grp_params.first_member_params.distribution =
+			compat_get_id2ptr(uparam->mcast_grp_params.
+				first_member_params.distribution,
+				FM_MAP_TYPE_PCD_NODE);
+	else
+		kparam->mcast_grp_params.first_member_params.distribution =
+									NULL;
 
 	kparam->mcast_grp_params.first_member_params.hmd =
 			uparam->mcast_grp_params.first_member_params.hmd;
@@ -3023,20 +3023,6 @@ int dpa_cls_mcast_group_params_compatcpy(
 	else
 		kparam->res.group_node = NULL;
 
-	if (compat_ptr(uparam->mcast_grp_params.distribution))
-		kparam->mcast_grp_params.distribution = compat_get_id2ptr(
-					uparam->mcast_grp_params.distribution,
-					FM_MAP_TYPE_PCD_NODE);
-	else
-		kparam->mcast_grp_params.distribution = NULL;
-
-	if (compat_ptr(uparam->mcast_grp_params.classification))
-		kparam->mcast_grp_params.classification = compat_get_id2ptr(
-					uparam->mcast_grp_params.classification,
-					FM_MAP_TYPE_PCD_NODE);
-	else
-		kparam->mcast_grp_params.classification = NULL;
-
 	return 0;
 }
 
@@ -3060,6 +3046,12 @@ int dpa_cls_mcast_member_params_compatcpy(
 		}
 	} else
 		kparam->member_params.policer_params = NULL;
+	if (compat_ptr(uparam->member_params.distribution))
+		kparam->member_params.distribution = compat_get_id2ptr(
+				uparam->member_params.distribution,
+				FM_MAP_TYPE_PCD_NODE);
+	else
+		kparam->member_params.distribution = NULL;
 
 	return 0;
 }
diff --git a/include/linux/fsl_dpa_classifier.h b/include/linux/fsl_dpa_classifier.h
index 22d5f6e..ad2ca0e 100644
--- a/include/linux/fsl_dpa_classifier.h
+++ b/include/linux/fsl_dpa_classifier.h
@@ -166,20 +166,6 @@ struct dpa_cls_tbl_params {
 	 */
 	void					*cc_node;
 
-	/*
-	 * Handle to a FMan distribution to send frames to instead of
-	 * enqueuing frames. If this handle is provided (not NULL) the enqueue
-	 * action will only select the frame queue, but it will NOT actually
-	 * enqueue the frame to the selected frame queue. Instead it will send
-	 * the frame to the indicated distribution for further processing.
-	 */
-	void					*distribution;
-
-	/*
-	 * Handle to a FMan classification to send frames after distribution
-	 */
-	void                                    *classification;
-
 	/* The type of the DPA Classifier table */
 	enum dpa_cls_tbl_type			type;
 
@@ -256,6 +242,15 @@ struct dpa_cls_tbl_enq_action_desc {
 	 * profiles defined. Otherwise it is not used.
 	 */
 	uint8_t					new_rel_vsp_id;
+
+	/*
+	 * Handle to a FMan distribution to send frames to instead of
+	 * enqueuing frames. If this handle is provided (not NULL) the enqueue
+	 * action will only select the frame queue, but it will NOT actually
+	 * enqueue the frame to the selected frame queue. Instead it will send
+	 * the frame to the indicated distribution for further processing.
+	 */
+	void					*distribution;
 };
 
 /* Action parameters to route to a new classifier table */
@@ -1549,18 +1544,6 @@ struct dpa_cls_mcast_group_params {
 	 * Number of members that already exist in the imported group
 	 */
 	unsigned int prefilled_members;
-
-	/*
-	 * External distribution handle. When provided, replicated frames
-	 * are not enqueued to members' frame queues. They are sent to this
-	 * distribution.
-	 */
-	void		*distribution;
-
-	/*
-	 * Handle to a FMan classification to send frames after distribution
-	 */
-	void		*classification;
 };
 
 /* Multicast group external resource */
-- 
2.9.3

