From 71d0d6a08cec2c22a594e91835c9ae357680ddf2 Mon Sep 17 00:00:00 2001
From: Radu Bulie <radu.bulie@freescale.com>
Date: Wed, 17 Sep 2014 07:54:37 +0000
Subject: [PATCH 816/987] dpa_offload: Add fix for number of policies check

This patch adds an extra check for the number of
policies defined per SA, limiting it to the maximum
possible values from a ccnode

Change-Id: I7ff1e9400e2357a53ee01d9f8d8ac5f15d3f8c40
Signed-off-by: Radu Bulie <radu.bulie@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/19120
Reviewed-by: Marian-Cornel Chereji <marian.chereji@freescale.com>
Tested-by: Marian-Cornel Chereji <marian.chereji@freescale.com>
[Lu:Original patch taken from
QorIQ-SDK-V1.7-SOURCE-20141218-yocto.iso]
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c     | 2 +-
 drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c | 4 ++--
 include/linux/fsl_dpa_ipsec.h                   | 6 ++++--
 3 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index 6570f9f..5171df4 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -518,7 +518,7 @@ static int create_inpol_cls_tbl(struct dpa_ipsec *dpa_ipsec,
 	memset(&params, 0, sizeof(params));
 	params.entry_mgmt = DPA_CLS_TBL_MANAGE_BY_REF;
 	params.type = DPA_CLS_TBL_EXACT_MATCH;
-	params.exact_match_params.entries_cnt = DPA_IPSEC_MAX_IN_POL_PER_SA;
+	params.exact_match_params.entries_cnt = DPA_IPSEC_MAX_POL_PER_SA;
 	params.exact_match_params.key_size = dpa_ipsec->sa_mng.inpol_key_size;
 	params.exact_match_params.use_priorities = true;
 	params.cc_node = cc_node;
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c
index d157f95..34747d6 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c
@@ -807,7 +807,7 @@ static int do_sa_get_policies_ioctl(void *args)
 	}
 
 	num_pol = prm.num_pol;
-	if (num_pol <= 0) {
+	if (num_pol <= 0 || num_pol > DPA_IPSEC_MAX_POL_PER_SA) {
 		log_err("Invalid number of policies for SA ID# %d\n", sa_id);
 		return -EINVAL;
 	}
@@ -927,7 +927,7 @@ static int do_sa_get_policies_compat_ioctl(void *args)
 	}
 
 	num_pol = prm.num_pol;
-	if (num_pol <= 0) {
+	if (num_pol <= 0 || num_pol > DPA_IPSEC_MAX_POL_PER_SA) {
 		log_err("Invalid number of policies for SA ID# %d\n", sa_id);
 		return -EINVAL;
 	}
diff --git a/include/linux/fsl_dpa_ipsec.h b/include/linux/fsl_dpa_ipsec.h
index 89b8e62..41e22d3 100644
--- a/include/linux/fsl_dpa_ipsec.h
+++ b/include/linux/fsl_dpa_ipsec.h
@@ -72,8 +72,9 @@
 		IP_PROTO_FIELD_LEN + \
 		2 * PORT_FIELD_LEN)
 
-#define DPA_IPSEC_MAX_IN_POL_PER_SA  255  /* Maximum supported number of
-					   * inbound policies per SA	      */
+
+#define DPA_IPSEC_MAX_POL_PER_SA     255  /* Maximum supported number of
+					   * policies per  SA              */
 
 /*
  * IPSec Special Operations
@@ -497,6 +498,7 @@ int dpa_ipsec_sa_remove_policy(int sa_id,
  * to determine the size of the policy_params array, the function
  * must first be called with policy_params = NULL. In this case it
  * will only return the number of policy entries linked to the SA.
+ * num_pol must not be greater than DPA_IPSEC_MAX_POL_PER_SA
  */
 int dpa_ipsec_sa_get_policies(int sa_id,
 			      struct dpa_ipsec_policy_params *policy_params,
-- 
1.9.1

