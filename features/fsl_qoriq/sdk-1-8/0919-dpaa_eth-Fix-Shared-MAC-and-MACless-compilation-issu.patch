From 2fb1d8fe388c341e2d74d0a23a0f1b110c76afe2 Mon Sep 17 00:00:00 2001
From: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Date: Mon, 23 Mar 2015 17:42:40 +0200
Subject: [PATCH 919/987] dpaa_eth: Fix Shared-MAC and MACless compilation
 issue

Signed-off-by: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Change-Id: Icdfb39e75fd1c7268b26209f1bcd9b0755e6192f
Reviewed-on: http://git.am.freescale.net:8181/33299
Reviewed-by: Madalin-Cristian Bucur <madalin.bucur@freescale.com>
Tested-by: Cristian-Constantin Sovaiala <Cristian.Sovaiala@freescale.com>
[Yang: Original patch taken from
QorIQ-SDK-V1.8-SOURCE-20150619-yocto.iso]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/Makefile          | 7 +++++--
 drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c   | 4 ++++
 drivers/net/ethernet/freescale/dpa/dpaa_eth_base.h   | 6 ------
 drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c | 1 +
 drivers/net/ethernet/freescale/dpa/dpaa_eth_proxy.c  | 4 ++++
 drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c | 2 ++
 6 files changed, 16 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/Makefile b/drivers/net/ethernet/freescale/dpa/Makefile
index 1d1b506..e611377 100644
--- a/drivers/net/ethernet/freescale/dpa/Makefile
+++ b/drivers/net/ethernet/freescale/dpa/Makefile
@@ -24,13 +24,16 @@ fsl_mac-objs += mac.o mac-api.o
 # Advanced drivers
 ifeq ($(CONFIG_FSL_DPAA_ADVANCED_DRIVERS),y)
 obj-$(CONFIG_FSL_DPAA_ETH) += fsl_advanced.o
+obj-$(CONFIG_FSL_DPAA_ETH) += fsl_proxy.o
+obj-$(CONFIG_FSL_DPAA_ETH) += fsl_dpa_shared.o
+obj-$(CONFIG_FSL_DPAA_ETH) += fsl_dpa_macless.o
 
 fsl_advanced-objs += dpaa_eth_base.o
 # suport for multiple drivers per kernel module comes in kernel 3.14
 # so we are forced to generate several modules for the advanced drivers
 fsl_proxy-objs += dpaa_eth_proxy.o
-fsl_shared-objs += dpaa_eth_shared.o
-fsl_macless-objs += dpaa_eth_macless.o
+fsl_dpa_shared-objs += dpaa_eth_shared.o
+fsl_dpa_macless-objs += dpaa_eth_macless.o
 
 ifeq ($(CONFIG_FSL_DPAA_OFFLINE_PORTS),y)
 obj-$(CONFIG_FSL_DPAA_ETH) += fsl_oh.o
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c
index 89c443c..a9b5dd0 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c
@@ -59,6 +59,7 @@ MODULE_LICENSE("Dual BSD/GPL");
 uint8_t advanced_debug = -1;
 module_param(advanced_debug, byte, S_IRUGO);
 MODULE_PARM_DESC(advanced_debug, "Module/Driver verbosity level");
+EXPORT_SYMBOL(advanced_debug);
 
 static int dpa_bp_cmp(const void *dpa_bp0, const void *dpa_bp1)
 {
@@ -161,6 +162,7 @@ _return_of_node_put:
 
 	return dpa_bp;
 }
+EXPORT_SYMBOL(dpa_bp_probe);
 
 int dpa_bp_shared_port_seed(struct dpa_bp *bp)
 {
@@ -206,6 +208,7 @@ int dpa_bp_shared_port_seed(struct dpa_bp *bp)
 
 	return 0;
 }
+EXPORT_SYMBOL(dpa_bp_shared_port_seed);
 
 int dpa_bp_create(struct net_device *net_dev, struct dpa_bp *dpa_bp,
 		size_t count)
@@ -228,6 +231,7 @@ int dpa_bp_create(struct net_device *net_dev, struct dpa_bp *dpa_bp,
 
 	return 0;
 }
+EXPORT_SYMBOL(dpa_bp_create);
 
 static int __init __cold dpa_advanced_load(void)
 {
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.h
index a75e270..6f57041 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.h
@@ -46,11 +46,5 @@ dpa_bp_probe(struct platform_device *_of_dev, size_t *count);
 int dpa_bp_create(struct net_device *net_dev, struct dpa_bp *dpa_bp,
 		size_t count);
 int dpa_bp_shared_port_seed(struct dpa_bp *bp);
-int __init __cold dpa_proxy_load(void);
-int __init __cold dpa_shared_load(void);
-int __init __cold dpa_macless_load(void);
-void __exit __cold dpa_proxy_unload(void);
-void __exit __cold dpa_shared_unload(void);
-void __exit __cold dpa_macless_unload(void);
 
 #endif /* __DPAA_ETH_BASE_H */
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index 8aecb20..f53c050 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -1245,6 +1245,7 @@ void dpa_fq_setup(struct dpa_priv_s *priv, const struct dpa_fq_cbs_t *fq_cbs,
 		}
 	}
 }
+EXPORT_SYMBOL(dpa_fq_setup);
 
 int dpa_fq_init(struct dpa_fq *dpa_fq, bool td_enable)
 {
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_proxy.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_proxy.c
index 0fded8a..180bb4c 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_proxy.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_proxy.c
@@ -220,6 +220,7 @@ int dpa_proxy_set_mac_address(struct proxy_device *proxy_dev,
 
 	return 0;
 }
+EXPORT_SYMBOL(dpa_proxy_set_mac_address);
 
 int dpa_proxy_set_rx_mode(struct proxy_device *proxy_dev,
 		       struct net_device *net_dev)
@@ -233,6 +234,7 @@ int dpa_proxy_set_rx_mode(struct proxy_device *proxy_dev,
 
 	return 0;
 }
+EXPORT_SYMBOL(dpa_proxy_set_rx_mode);
 
 int dpa_proxy_start(struct net_device *net_dev)
 {
@@ -276,6 +278,7 @@ port_enable_fail:
 
 	return _errno;
 }
+EXPORT_SYMBOL(dpa_proxy_start);
 
 int dpa_proxy_stop(struct proxy_device *proxy_dev, struct net_device *net_dev)
 {
@@ -302,6 +305,7 @@ int dpa_proxy_stop(struct proxy_device *proxy_dev, struct net_device *net_dev)
 
 	return _errno;
 }
+EXPORT_SYMBOL(dpa_proxy_stop);
 
 static int __cold dpa_eth_proxy_remove(struct platform_device *of_dev)
 {
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
index db62cbe..8f26f7b 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
@@ -107,6 +107,7 @@ const struct dpa_fq_cbs_t shared_fq_cbs = {
 	.tx_errq = { .cb = { .dqrr = shared_tx_error_dqrr } },
 	.egress_ern = { .cb = { .ern = shared_ern } }
 };
+EXPORT_SYMBOL(shared_fq_cbs);
 
 static inline void * __must_check __attribute__((nonnull))
 dpa_phys2virt(const struct dpa_bp *dpa_bp, dma_addr_t addr)
@@ -580,6 +581,7 @@ buf_acquire_failed:
 	/* err remains unused, NETDEV_TX_OK must be returned here */
 	return NETDEV_TX_OK;
 }
+EXPORT_SYMBOL(dpa_shared_tx);
 
 static int dpa_shared_netdev_init(struct device_node *dpa_node,
 				struct net_device *net_dev)
-- 
1.9.1

