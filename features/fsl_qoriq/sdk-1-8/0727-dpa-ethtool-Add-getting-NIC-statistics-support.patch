From d3599457f3529809077527e5cd85b5377db40b85 Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Wed, 7 Aug 2013 15:51:51 +0800
Subject: [PATCH 727/987] dpa/ethtool: Add getting NIC statistics support

dpa NIC driver can't support dump statistics by ethtool,
"ethtool -S ethX" always return "no stats available" error.

Since NetCommSw has provided interfaces to dump statistics
from registers, so we only need to implement ethtool's
interfaces by call NetCommSw's interfaces to support this
feature.

Signed-off-by: Xufeng Zhang <xufeng.zhang@windriver.com>
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_ethtool.c | 67 +++++++++++++++++++++++
 drivers/net/ethernet/freescale/dpa/mac-api.c      | 35 ++++++++++++
 drivers/net/ethernet/freescale/dpa/mac.h          |  1 +
 3 files changed, 103 insertions(+)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_ethtool.c b/drivers/net/ethernet/freescale/dpa/dpaa_ethtool.c
index d36930e..84538f0 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_ethtool.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_ethtool.c
@@ -44,6 +44,38 @@
 #include "mac.h"                /* struct mac_device */
 #include "dpaa_eth_common.h"
 
+static char stat_gstrings[][ETH_GSTRING_LEN] = {
+	"tx-rx-64-frames",
+	"tx-rx-65-127-frames",
+	"tx-rx-128-255-frames",
+	"tx-rx-256-511-frames",
+	"tx-rx-512-1023-frames",
+	"tx-rx-1024-1518-frames",
+	"tx-rx-1519-1522-good-vlan",
+	"rx-64-invalid-fcs",
+	"rx-jabber-invalid-fcs",
+	"rx-dropped-by-lack-resource",
+	"rx-alignment-error",
+	"rx-undersize-packets",
+	"rx-oversize-packets",
+	"tx-pause-frame-packets",
+	"rx-pause-frame-packets",
+	"rx-bytes",
+	"rx-packets",
+	"receive-multicast-frames",
+	"receive-broadcast-frames",
+	"rx-dropped-frames",
+	"rx-error-frames",
+	"tx-bytes",
+	"tx-packets",
+	"tx-multicast-frames",
+	"tx-broadcast-frames",
+	"tx-dropped-frames",
+	"tx-error-frames",
+};
+
+#define DPA_STATS_LEN ARRAY_SIZE(stat_gstrings)
+
 static int __cold dpa_get_settings(struct net_device *net_dev,
 		struct ethtool_cmd *et_cmd)
 {
@@ -113,6 +145,8 @@ static void __cold dpa_get_drvinfo(struct net_device *net_dev,
 	}
 	strncpy(drvinfo->bus_info, dev_name(net_dev->dev.parent->parent),
 		sizeof(drvinfo->bus_info)-1)[sizeof(drvinfo->bus_info)-1] = 0;
+
+	drvinfo->n_stats = DPA_STATS_LEN;
 }
 
 static uint32_t __cold dpa_get_msglevel(struct net_device *net_dev)
@@ -126,6 +160,36 @@ static void __cold dpa_set_msglevel(struct net_device *net_dev,
 	((struct dpa_priv_s *)netdev_priv(net_dev))->msg_enable = msg_enable;
 }
 
+static void dpa_get_ethtool_stats(struct net_device *netdev,
+				struct ethtool_stats *stats, u64 *data)
+{
+	struct dpa_priv_s       *priv = netdev_priv(netdev);
+	int			_errno;
+
+	_errno = priv->mac_dev->get_stats(priv->mac_dev, data);
+	if (_errno < 0) {
+		if (netif_msg_drv(priv))
+			netdev_err(netdev,
+				"mac_dev->get_stats = %d\n",
+				_errno);
+	}
+}
+
+static void dpa_get_strings(struct net_device *netdev, u32 stringset, u8 *buf)
+{
+	memcpy(buf, stat_gstrings, DPA_STATS_LEN * ETH_GSTRING_LEN);
+}
+
+static int dpa_sset_count(struct net_device *netdev, int sset)
+{
+	switch (sset) {
+	case ETH_SS_STATS:
+		return DPA_STATS_LEN;
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
 static int __cold dpa_nway_reset(struct net_device *net_dev)
 {
 	int			 _errno;
@@ -336,6 +400,9 @@ const struct ethtool_ops dpa_ethtool_ops = {
 	.self_test = NULL, /* TODO invoke the cold-boot unit-test? */
 	.get_ethtool_stats = NULL, /* TODO other stats, currently in debugfs */
 	.get_link = ethtool_op_get_link,
+	.get_strings		= dpa_get_strings,
+	.get_sset_count		= dpa_sset_count,
+	.get_ethtool_stats	= dpa_get_ethtool_stats,
 #ifdef CONFIG_PM
 	.get_wol = dpa_get_wol,
 	.set_wol = dpa_set_wol,
diff --git a/drivers/net/ethernet/freescale/dpa/mac-api.c b/drivers/net/ethernet/freescale/dpa/mac-api.c
index a8b4704..8620405 100644
--- a/drivers/net/ethernet/freescale/dpa/mac-api.c
+++ b/drivers/net/ethernet/freescale/dpa/mac-api.c
@@ -699,6 +699,38 @@ int fm_mac_dump_regs(struct mac_device *h_mac, char *buf, int nn)
 }
 
 
+static int __cold mac_get_statistics(struct mac_device *mac_dev, u64 *data)
+{
+	int	_errno = 0;
+	t_Error err;
+	t_FmMacStatistics *p_Statistics;
+	int i;
+	u64 *buf;
+
+	p_Statistics = kmalloc(sizeof(t_FmMacStatistics), GFP_ATOMIC);
+	if (!p_Statistics) {
+		dev_err(mac_dev->dev, "Out of memory\n");
+		return -ENOMEM;
+	}
+
+	err = FM_MAC_GetStatistics(
+		((struct mac_priv_s *)macdev_priv(mac_dev))->fm_mac, p_Statistics);
+	_errno = -GET_ERROR_TYPE(err);
+	if (_errno < 0) {
+		dev_err(mac_dev->dev,
+			"FM_MAC_GetStatistics() = 0x%08x\n", err);
+		goto out;
+	}
+
+	buf = (u64 *) p_Statistics;
+	for (i = 0; i < sizeof(t_FmMacStatistics)/sizeof(u64); i++)
+		data[i] = buf[i];
+
+out:
+	kfree(p_Statistics);
+	return _errno;
+}
+
 static void __cold setup_dtsec(struct mac_device *mac_dev)
 {
 	mac_dev->init_phy	= dtsec_init_phy;
@@ -722,6 +754,7 @@ static void __cold setup_dtsec(struct mac_device *mac_dev)
 	mac_dev->fm_rtc_set_drift	= fm_rtc_set_drift;
 	mac_dev->fm_rtc_set_alarm	= fm_rtc_set_alarm;
 	mac_dev->fm_rtc_set_fiper	= fm_rtc_set_fiper;
+	mac_dev->get_stats		= mac_get_statistics;
 	mac_dev->set_wol		= fm_mac_set_wol;
 	mac_dev->dump_mac_regs		= dtsec_dump_regs;
 }
@@ -741,6 +774,7 @@ static void __cold setup_xgmac(struct mac_device *mac_dev)
 	mac_dev->set_rx_pause	= fm_mac_set_rx_pause_frames;
 	mac_dev->set_wol	= fm_mac_set_wol;
 	mac_dev->dump_mac_regs	= xgmac_dump_regs;
+	mac_dev->get_stats	= mac_get_statistics;
 }
 
 static void __cold setup_memac(struct mac_device *mac_dev)
@@ -766,6 +800,7 @@ static void __cold setup_memac(struct mac_device *mac_dev)
 	mac_dev->fm_rtc_set_fiper	= fm_rtc_set_fiper;
 	mac_dev->set_wol		= fm_mac_set_wol;
 	mac_dev->dump_mac_regs		= memac_dump_regs;
+	mac_dev->get_stats		= mac_get_statistics;
 }
 
 void (*const mac_setup[])(struct mac_device *mac_dev) = {
diff --git a/drivers/net/ethernet/freescale/dpa/mac.h b/drivers/net/ethernet/freescale/dpa/mac.h
index 785877f..28f0301 100644
--- a/drivers/net/ethernet/freescale/dpa/mac.h
+++ b/drivers/net/ethernet/freescale/dpa/mac.h
@@ -96,6 +96,7 @@ struct mac_device {
 				uint64_t fiper);
 	int (*set_wol)(struct fm_port *port, struct fm_mac_dev *fm_mac_dev,
 			bool en);
+	int (*get_stats)(struct mac_device *mac_dev, uint64_t *p_Statistics);
 	int (*dump_mac_regs)(struct mac_device *h_mac, char *buf, int nn);
 
 };
-- 
1.9.1

