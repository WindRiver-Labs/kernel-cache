From 3e32bc54afec73314192306cebce08ecb7799294 Mon Sep 17 00:00:00 2001
From: "Lu.Jiang" <lu.jiang@windriver.com>
Date: Tue, 2 Sep 2014 18:00:18 +0800
Subject: [PATCH 1118/1207] Add support for hardware threads on e6500.

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

The general idea is that each core will release all of its
threads into the secondary thread startup code, which will
eventually wait in the secondary core holding area, for the
appropriate bit in the PACA to be set. The kick_cpu function
pointer will set that bit in the PACA, and thus "release"
the core/thread to boot. We also need to do a few things that
U-Boot normally does for CPUs (like enable branch prediction).

Signed-off-by: Andy Fleming <afleming@freescale.com>

Signed-off-by: Zhao Chenhui <chenhui.zhao@freescale.com>
Signed-off-by: Li Yang <leoli@freescale.com>
[some bug fixes for hotplug support]

Signed-off-by: Scott Wood <scottwood@freescale.com>
[Fixed feature section placement]
Signed-off-by: Lu.Jiang <lu.jiang@windriver.com>
[Yang: add missing part for upstream commit e16c8765533a]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/powerpc/kernel/exceptions-64e.S | 55 ++++++++++++++++++++++++++++--------
 arch/powerpc/kernel/head_64.S        |  6 ++++
 arch/powerpc/mm/tlb_low_64e.S        | 24 ++++++++--------
 3 files changed, 61 insertions(+), 24 deletions(-)

diff --git a/arch/powerpc/kernel/exceptions-64e.S b/arch/powerpc/kernel/exceptions-64e.S
index 3e68d1c..36989cc 100644
--- a/arch/powerpc/kernel/exceptions-64e.S
+++ b/arch/powerpc/kernel/exceptions-64e.S
@@ -1552,6 +1552,11 @@ _GLOBAL(book3e_secondary_core_init)
 	/* Init global core bits */
 2:	bl	init_core_book3e
 
+BEGIN_FTR_SECTION
+	/* Start threads */
+	bl      .fsl_enable_threads
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
+
 	/* Init per-thread bits */
 3:	bl	init_thread_book3e
 
@@ -1587,6 +1592,34 @@ init_core_book3e:
 	sync
 	blr
 
+_GLOBAL(fsl_enable_threads)
+BEGIN_FTR_SECTION
+	/* Disable the other thread */
+	li	r3,2
+	mtspr	SPRN_TENC,r3
+
+1:	mfspr	r3,SPRN_TENSR
+	andi.	r3,r3,2
+	bne	1b
+
+	/* Configure the MSR per the default */
+	LOAD_REG_IMMEDIATE(r3, MSR_KERNEL);
+	MTTMR(TMRN_IMSR1, 3);
+
+	/*
+	 * Set the NIA for the secondary thread to
+	 * generic_secondary_thread_init
+	 */
+	LOAD_REG_IMMEDIATE(r3, .fsl_secondary_thread_init);
+	MTTMR(TMRN_INIA1, 3);
+
+	/* Release the other thread. It will spin until kick_cpu is called */
+	li	r3, 2
+	mtspr	SPRN_TENS, r3
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
+
+	blr
+
 init_thread_book3e:
 	lis	r3,(SPRN_EPCR_ICM | SPRN_EPCR_GICM)@h
 	mtspr	SPRN_EPCR,r3
@@ -1605,18 +1638,18 @@ init_thread_book3e:
 _GLOBAL(__setup_base_ivors)
 	SET_IVOR(0, 0x020) /* Critical Input */
 	SET_IVOR(1, 0x000) /* Machine Check */
-	SET_IVOR(2, 0x060) /* Data Storage */ 
+	SET_IVOR(2, 0x060) /* Data Storage */
 	SET_IVOR(3, 0x080) /* Instruction Storage */
-	SET_IVOR(4, 0x0a0) /* External Input */ 
-	SET_IVOR(5, 0x0c0) /* Alignment */ 
-	SET_IVOR(6, 0x0e0) /* Program */ 
-	SET_IVOR(7, 0x100) /* FP Unavailable */ 
-	SET_IVOR(8, 0x120) /* System Call */ 
-	SET_IVOR(9, 0x140) /* Auxiliary Processor Unavailable */ 
-	SET_IVOR(10, 0x160) /* Decrementer */ 
-	SET_IVOR(11, 0x180) /* Fixed Interval Timer */ 
-	SET_IVOR(12, 0x1a0) /* Watchdog Timer */ 
-	SET_IVOR(13, 0x1c0) /* Data TLB Error */ 
+	SET_IVOR(4, 0x0a0) /* External Input */
+	SET_IVOR(5, 0x0c0) /* Alignment */
+	SET_IVOR(6, 0x0e0) /* Program */
+	SET_IVOR(7, 0x100) /* FP Unavailable */
+	SET_IVOR(8, 0x120) /* System Call */
+	SET_IVOR(9, 0x140) /* Auxiliary Processor Unavailable */
+	SET_IVOR(10, 0x160) /* Decrementer */
+	SET_IVOR(11, 0x180) /* Fixed Interval Timer */
+	SET_IVOR(12, 0x1a0) /* Watchdog Timer */
+	SET_IVOR(13, 0x1c0) /* Data TLB Error */
 	SET_IVOR(14, 0x1e0) /* Instruction TLB Error */
 	SET_IVOR(15, 0x040) /* Debug */
 
diff --git a/arch/powerpc/kernel/head_64.S b/arch/powerpc/kernel/head_64.S
index d48125d..87fdf4d 100644
--- a/arch/powerpc/kernel/head_64.S
+++ b/arch/powerpc/kernel/head_64.S
@@ -821,6 +821,12 @@ start_here_common:
 	/* Do more system initializations in virtual mode */
 	bl	setup_system
 
+#ifdef CONFIG_PPC_BOOK3E
+BEGIN_FTR_SECTION
+	bl	.fsl_enable_threads
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
+#endif
+
 	/* Mark interrupts soft and hard disabled (they might be enabled
 	 * in the PACA when doing hotplug)
 	 */
diff --git a/arch/powerpc/mm/tlb_low_64e.S b/arch/powerpc/mm/tlb_low_64e.S
index 94d9fe6..38e07a5 100644
--- a/arch/powerpc/mm/tlb_low_64e.S
+++ b/arch/powerpc/mm/tlb_low_64e.S
@@ -122,9 +122,9 @@ END_FTR_SECTION_IFSET(CPU_FTR_EMB_HV)
 	ori	r10,r10,_PAGE_PRESENT
 	oris	r11,r10,_PAGE_ACCESSED@h
 
-#ifdef CONFIG_FSL_THREADS
+BEGIN_FTR_SECTION
 	ld	r10,PACA_TLB_PER_CORE_PTR(r13)
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 
 	TLB_MISS_STATS_SAVE_INFO_BOLTED
 	bne	tlb_miss_kernel_bolted
@@ -142,11 +142,11 @@ tlb_miss_common_bolted:
  * r10 = tlb_per_core ptr
  */
 
-#ifdef CONFIG_FSL_THREADS
 	/*
 	 * Search if we already have an entry for that virtual
 	 * address, and if we do, bail out.
 	 */
+BEGIN_FTR_SECTION
 	mtocrf	0x01,r10
 	addi	r10,r10,PACA_TLB_LOCK-1 /* -1 to compensate for low bit set */
 	bf	31,1f		/* no lock if TLB_PER_CORE_HAS_LOCK clear */
@@ -163,17 +163,17 @@ tlb_miss_common_bolted:
 	b	2b
 	.previous
 1:
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 
 	rldicl	r15,r16,64-PGDIR_SHIFT+3,64-PGD_INDEX_SIZE-3
 	cmpldi	cr0,r14,0
 	clrrdi	r15,r15,3
 	beq	tlb_miss_fault_bolted	/* No PGDIR, bail */
 
-#ifdef CONFIG_FSL_THREADS
+	ldx	r14,r14,r15		/* grab pgd entry */
+BEGIN_FTR_SECTION
 	mfspr	r10,SPRN_MAS2
 	tlbsx	0,r16
-	ldx	r14,r14,r15		/* grab pgd entry */
 	mfspr	r15,SPRN_MAS1
 	andis.	r15,r15,MAS1_VALID@h
 	bne	tlb_miss_done_bolted	/* tlb exists already, bail */
@@ -183,9 +183,7 @@ tlb_miss_common_bolted:
 	oris	r15,r15,MAS1_VALID@h
 	mtspr	SPRN_MAS1,r15
 	mtspr	SPRN_MAS2,r10
-#else
-	ldx	r14,r14,r15		/* grab pgd entry */
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 
 #ifndef CONFIG_PPC_64K_PAGES
 	rldicl	r15,r16,64-PUD_SHIFT+3,64-PUD_INDEX_SIZE-3
@@ -240,14 +238,14 @@ tlb_miss_common_bolted:
 
 tlb_miss_done_bolted:
 	.macro	tlb_unlock_bolted
-#ifdef CONFIG_FSL_THREADS
+BEGIN_FTR_SECTION
 	ld	r10,PACA_TLB_PER_CORE_PTR(r13)
 	bf	31,1f
 	li	r15,0
 	isync
 	stb	r15,PACA_TLB_LOCK-1(r10)
 1:
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 	.endm
 
 	tlb_unlock_bolted
@@ -290,9 +288,9 @@ itlb_miss_fault_bolted:
 	TLB_MISS_STATS_SAVE_INFO_BOLTED
 	bne-	itlb_miss_fault_bolted
 
-#ifdef CONFIG_FSL_THREADS
+BEGIN_FTR_SECTION
 	ld	r10,PACA_TLB_PER_CORE_PTR(r13)
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 	li	r11,_PAGE_PRESENT|_PAGE_EXEC	/* Base perm */
 
 	/* We do the user/kernel test for the PID here along with the RW test
-- 
2.0.2

