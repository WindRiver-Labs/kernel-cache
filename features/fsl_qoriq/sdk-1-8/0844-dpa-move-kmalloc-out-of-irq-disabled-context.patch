From 36f4639c09be48674a27a4b3daf31ec0887d5b4f Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Tue, 3 Mar 2015 15:46:55 +0800
Subject: [PATCH 844/987] dpa:move kmalloc out of irq disabled context

Invoking kmalloc(GFP_KERNEL) in irq disabled context leads following
calltrace:
[ 4.554998] DEBUG_LOCKS_WARN_ON(irqs_disabled_flags(flags))
[ 4.559127] ------------[ cut here ]------------
[ 4.562616] WARNING: at linux/kernel/locking/lockdep.c:2742
[ 4.588009] Modules linked in:
[ 4.589761] CPU: 1 PID: 1 Comm: swapper/0 Not tainted 3.14.23-WR7.0.0.0_cgl #1
[ 4.595681] task: c0000000f92e8000 ti: c0000000f92e4000 task.ti: c0000000f92e4000
[ 4.601861] NIP: c0000000000dd858 LR: c0000000000dd854 CTR: c0000000005c56e4
[ 4.607607] REGS: c0000000f92e6f80 TRAP: 0700 Not tainted (3.14.23-WR7.0.0.0_cgl)
[ 4.614047] MSR: 0000000080029000 <CE,EE,ME> CR: 24ad4e22 XER: 00000000
[ 4.619560] SOFTE: 0
GPR00: c0000000000dd854 c0000000f92e7200 c000000001208a70 000000000000002f
GPR04: c0000000000ecc1c c0000000000ec5a4 0000000000000000 0000000000000002
GPR08: 0000000000000000 0000000000000000 c0000000010a8a70 c000000001a38a70
GPR12: 0000000042ad4e82 c00000000fffc780 c0000000000023e4 0000000000000000
GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
GPR20: 0000000000000000 c0000000f7a1ce40 c0000000f7a1ce60 c00000000121b050
GPR24: c0000000f9003c00 0000000000000000 0000000000000020 c000000000901ce0
GPR28: c0000000f92e74e0 c0000000010abfe0 0000000000000000 00000000000000d0
[ 4.674290] NIP [c0000000000dd858] .lockdep_trace_alloc+0x12c/0x134
[ 4.679253] LR [c0000000000dd854] .lockdep_trace_alloc+0x128/0x134
[ 4.684129] Call Trace:
[ 4.685268] [c0000000f92e7200] [c0000000000dd854] .lockdep_trace_alloc+0x128/0x134 (unreliable)
[ 4.692679] [c0000000f92e7290] [c00000000020a71c] .kmem_cache_alloc_trace+0x64/0x448
[ 4.699133] [c0000000f92e7350] [c000000000901ce0] .dpa_alloc_new+0x204/0x2f0
[ 4.704888] [c0000000f92e7420] [c000000000911874] .qman_create_fq+0x58/0x500
[ 4.710642] [c0000000f92e74b0] [c00000000078f8b8] .FqAlloc.constprop.3+0x94/0x2d8
[ 4.716828] [c0000000f92e7580] [c000000000790400] .fm_port_probe+0x904/0x1210
[ 4.722668] [c0000000f92e7690] [c0000000005e6928] .platform_drv_probe+0x40/0x8c
[ 4.728679] [c0000000f92e7710] [c0000000005e3ed0] .really_probe+0xb0/0x2bc
[ 4.734256] [c0000000f92e77b0] [c0000000005e4298] .__driver_attach+0x118/0x11c
[ 4.740185] [c0000000f92e7840] [c0000000005e14d8] .bus_for_each_dev+0x98/0xfc
[ 4.746024] [c0000000f92e78e0] [c0000000005e380c] .driver_attach+0x34/0x4c
[ 4.751601] [c0000000f92e7960] [c0000000005e32c0] .bus_add_driver+0x1d4/0x2b8
[ 4.757438] [c0000000f92e7a00] [c0000000005e4cd4] .driver_register+0x94/0x160

This patch move the kmalloc code out of irq disabled context.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/staging/fsl_qbman/dpa_alloc.c | 24 ++++++++++++++----------
 1 file changed, 14 insertions(+), 10 deletions(-)

diff --git a/drivers/staging/fsl_qbman/dpa_alloc.c b/drivers/staging/fsl_qbman/dpa_alloc.c
index b62b502..4cc00e9 100644
--- a/drivers/staging/fsl_qbman/dpa_alloc.c
+++ b/drivers/staging/fsl_qbman/dpa_alloc.c
@@ -465,6 +465,12 @@ int dpa_alloc_new(struct dpa_alloc *alloc, u32 *result, u32 count, u32 align,
 		kfree(margin_left);
 		goto err;
 	}
+	used_node = kmalloc(sizeof(*used_node), GFP_KERNEL);
+	if (!used_node) {
+		kfree(margin_left);
+		kfree(margin_right);
+		goto err;
+	}
 	spin_lock_irq(&alloc->lock);
 	list_for_each_entry(i, &alloc->free, list) {
 		base = (i->base + align - 1) / align;
@@ -512,6 +518,7 @@ done:
 		spin_unlock_irq(&alloc->lock);
 		kfree(margin_left);
 		kfree(margin_right);
+		kfree(used_node);
 	}
 
 err:
@@ -521,11 +528,6 @@ err:
 		return -ENOMEM;
 
 	/* Add the allocation to the used list with a refcount of 1 */
-	used_node = kmalloc(sizeof(*used_node), GFP_KERNEL);
-	if (!used_node) {
-		spin_unlock_irq(&alloc->lock);
-		return -ENOMEM;
-	}
 	used_node->base = *result;
 	used_node->num = num;
 	used_node->refcount = 1;
@@ -626,6 +628,10 @@ int dpa_alloc_reserve(struct dpa_alloc *alloc, u32 base, u32 num)
 	DPRINT("alloc_reserve(%d,%d)\n", base, num);
 	DUMP(alloc);
 
+	used_node = kmalloc(sizeof(*used_node), GFP_KERNEL);
+	if (!used_node)
+		return -ENOMEM;
+
 	spin_lock_irq(&alloc->lock);
 
 	/* Check for the node in the used list.
@@ -634,6 +640,7 @@ int dpa_alloc_reserve(struct dpa_alloc *alloc, u32 base, u32 num)
 		if ((i->base == base) && (i->num == num)) {
 			++i->refcount;
 			spin_unlock_irq(&alloc->lock);
+			kfree(used_node);
 			return 0;
 		}
 		if ((base >= i->base) && (base < (i->base + i->num))) {
@@ -645,6 +652,7 @@ int dpa_alloc_reserve(struct dpa_alloc *alloc, u32 base, u32 num)
 			       base, base + num - 1, i->base,
 			       i->base + i->num - 1);
 			spin_unlock_irq(&alloc->lock);
+			kfree(used_node);
 			return -1;
 		}
 	}
@@ -657,16 +665,12 @@ int dpa_alloc_reserve(struct dpa_alloc *alloc, u32 base, u32 num)
 			       base, base + num - 1,
 			       i->base, i->base + i->num - 1);
 			spin_unlock_irq(&alloc->lock);
+			kfree(used_node);
 			return -1;
 		}
 	}
 	/* Add the allocation to the used list with a refcount of 1 */
-	used_node = kmalloc(sizeof(*used_node), GFP_KERNEL);
-	if (!used_node) {
-		spin_unlock_irq(&alloc->lock);
-		return -ENOMEM;
 
-	}
 	used_node->base = base;
 	used_node->num = num;
 	used_node->refcount = 1;
-- 
1.9.1

