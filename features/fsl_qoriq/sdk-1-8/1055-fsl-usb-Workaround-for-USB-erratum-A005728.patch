From ea30541943735950ad99e83a73b26af3af84f46a Mon Sep 17 00:00:00 2001
From: "Lu.Jiang" <lu.jiang@windriver.com>
Date: Wed, 10 Sep 2014 17:51:43 +0800
Subject: [PATCH 1055/1094] fsl/usb: Workaround for USB erratum-A005728

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

PHY_CLK_VALID bit for UTMI PHY in USBDR does not set even
if PHY is providing valid clock. Workaround for this
involves resetting of PHY and check PHY_CLK_VALID bit
multiple times. If PHY_CLK_VALID bit is still not set even
after 5 retries, it would be safe to deaclare that PHY
clock is not available.
This erratum is applicable for USBDR less then ver 2.4.

Signed-off-by: Suresh Gupta <B42813@freescale.com>
Change-Id: Ib2637f038020ec2429e4fbe196713fd66585ab17
Reviewed-on: http://git.am.freescale.net:8181/4209
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Wrobel Heinz-R39252 <Heinz.Wrobel@freescale.com>
Reviewed-by: Rivera Jose-B46482 <German.Rivera@freescale.com>

Signed-off-by: Lu.Jiang <lu.jiang@windriver.com>
---
 drivers/usb/host/ehci-fsl.c | 51 ++++++++++++++++++++++++++++++++++++++-------
 drivers/usb/host/ehci-fsl.h |  3 +++
 2 files changed, 46 insertions(+), 8 deletions(-)

diff --git a/drivers/usb/host/ehci-fsl.c b/drivers/usb/host/ehci-fsl.c
index c65266a..eadb36a 100644
--- a/drivers/usb/host/ehci-fsl.c
+++ b/drivers/usb/host/ehci-fsl.c
@@ -52,6 +52,46 @@ struct ehci_fsl {
 	unsigned hcd_add:1;
 };
 
+static bool usb_phy_clk_valid(struct usb_hcd *hcd,
+			enum fsl_usb2_phy_modes phy_mode)
+{
+	void __iomem *non_ehci = hcd->regs;
+	struct device *dev = hcd->self.controller;
+	struct fsl_usb2_platform_data *pdata = dev->platform_data;
+	bool ret = true;
+	int retry = UTMI_PHY_CLK_VALID_CHK_RETRY;
+
+	if (phy_mode == FSL_USB2_PHY_ULPI) {
+		/* check PHY_CLK_VALID to get phy clk valid */
+		if (!(spin_event_timeout(in_be32(non_ehci + FSL_SOC_USB_CTRL) &
+				PHY_CLK_VALID, FSL_USB_PHY_CLK_TIMEOUT, 0) ||
+				in_be32(non_ehci + FSL_SOC_USB_PRICTRL))) {
+			ret = false;
+		}
+	} else if (phy_mode == FSL_USB2_PHY_UTMI) {
+		if (!(in_be32(non_ehci + FSL_SOC_USB_CTRL) & PHY_CLK_VALID)) {
+			ret = false;
+			if (pdata->controller_ver < FSL_USB_VER_2_4) {
+				while (retry--) {
+					clrbits32(non_ehci + FSL_SOC_USB_CTRL,
+							      CTRL_UTMI_PHY_EN);
+					setbits32(non_ehci + FSL_SOC_USB_CTRL,
+							      CTRL_UTMI_PHY_EN);
+					/* delay required for Clk to appear */
+					mdelay(FSL_UTMI_PHY_DLY);
+					if ((in_be32(non_ehci +
+					   FSL_SOC_USB_CTRL) & PHY_CLK_VALID)) {
+						ret = true;
+						break;
+					}
+				}
+			}
+		}
+	}
+
+	return ret;
+}
+
 static struct ehci_fsl *hcd_to_ehci_fsl(struct usb_hcd *hcd)
 {
 	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
@@ -301,14 +341,9 @@ static int ehci_fsl_setup_phy(struct usb_hcd *hcd,
 
 	if (pdata->have_sysif_regs &&
 	    pdata->controller_ver > FSL_USB_VER_1_6 &&
-	    (phy_mode == FSL_USB2_PHY_ULPI)) {
-		/* check PHY_CLK_VALID to get phy clk valid */
-		if (!(spin_event_timeout(in_be32(non_ehci + FSL_SOC_USB_CTRL) &
-				PHY_CLK_VALID, FSL_USB_PHY_CLK_TIMEOUT, 0) ||
-				in_be32(non_ehci + FSL_SOC_USB_PRICTRL))) {
-			dev_warn(hcd->self.controller, "USB PHY clock invalid\n");
-			return -EINVAL;
-		}
+					!usb_phy_clk_valid(hcd, phy_mode)) {
+		printk(KERN_ERR "fsl-ehci: USB PHY clock invalid\n");
+		return -EINVAL;
 	}
 
 	ehci_writel(ehci, portsc, &ehci->regs->port_status[port_offset]);
diff --git a/drivers/usb/host/ehci-fsl.h b/drivers/usb/host/ehci-fsl.h
index dbd292e..a032358 100644
--- a/drivers/usb/host/ehci-fsl.h
+++ b/drivers/usb/host/ehci-fsl.h
@@ -62,4 +62,7 @@
 #define UTMI_PHY_EN             (1<<9)
 #define ULPI_PHY_CLK_SEL        (1<<10)
 #define PHY_CLK_VALID		(1<<17)
+
+/* Retry count for checking UTMI PHY CLK validity */
+#define UTMI_PHY_CLK_VALID_CHK_RETRY 5
 #endif				/* _EHCI_FSL_H */
-- 
2.0.2

