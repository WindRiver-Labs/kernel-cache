From 009ef1e14e952c85bbc9e529f5af49083f2d8da3 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Mon, 2 Mar 2015 13:27:46 +0800
Subject: [PATCH 846/987] usdpaa: acquire mmap_sem out of spin_lock

We can't acquire mmap_sem when we hold the mem_lock, else we would get the below warning:

BUG: sleeping function called from invalid context at kernel/rwsem.c:47
in_atomic(): 1, irqs_disabled(): 0, pid: 1001, name: sra
..
at: [<c000000000945b78>] .ioctl_dma_map+0xb8/0x790
CPU: 1 PID: 1001 Comm: sra Not tainted 3.10.62-ltsi-WR6.0.0.0_standard #2
Call Trace:
[c0000000f201f870] [c00000000000b150] .show_stack+0x170/0x290 (unreliable)
[c0000000f201f960] [c000000000b676f4] .dump_stack+0x28/0x3c
[c0000000f201f9d0] [c0000000000bb5d8] .__might_sleep+0x1a8/0x270
[c0000000f201fa60] [c000000000b4b574] .down_write+0x34/0xb8
[c0000000f201faf0] [c000000000945d2c] .ioctl_dma_map+0x26c/0x790
[c0000000f201fc00] [c000000000947934] .usdpaa_ioctl_compat+0x1d4/0x3e0
[c0000000f201fd00] [c000000000286810] .compat_sys_ioctl+0x4a0/0x1ef0
[c0000000f201fe30] [c000000000000724] syscall_exit+0x0/0x8c

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 drivers/staging/fsl_qbman/fsl_usdpaa.c | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/drivers/staging/fsl_qbman/fsl_usdpaa.c b/drivers/staging/fsl_qbman/fsl_usdpaa.c
index dc0fa69..56d6a0f 100644
--- a/drivers/staging/fsl_qbman/fsl_usdpaa.c
+++ b/drivers/staging/fsl_qbman/fsl_usdpaa.c
@@ -917,6 +917,7 @@ static long ioctl_dma_map(struct file *fp, struct ctx *ctx,
 	if (!map)
 		return -ENOMEM;
 
+	down_write(&current->mm->mmap_sem);
 	spin_lock(&mem_lock);
 	if (i->flags & USDPAA_DMA_FLAG_SHARE) {
 		list_for_each_entry(frag, &mem_list, list) {
@@ -943,6 +944,7 @@ static long ioctl_dma_map(struct file *fp, struct ctx *ctx,
 						i->phys_addr = frag->base;
 						i->ptr = tmp->virt_addr;
 						spin_unlock(&mem_lock);
+						up_write(&current->mm->mmap_sem);
 						return 0;
 					}
 				/* Matching entry - just need to map */
@@ -1017,9 +1019,7 @@ static long ioctl_dma_map(struct file *fp, struct ctx *ctx,
 	i->did_create = 1;
 do_map:
 	/* Verify there is sufficient space to do the mapping */
-	down_write(&current->mm->mmap_sem);
 	next_addr = usdpaa_get_unmapped_area(fp, next_addr, i->len, 0, 0);
-	up_write(&current->mm->mmap_sem);
 
 	if (next_addr & ~PAGE_MASK) {
 		ret = -ENOMEM;
@@ -1067,7 +1067,6 @@ out:
 
 	if (!ret) {
 		unsigned long longret;
-		down_write(&current->mm->mmap_sem);
 		longret = do_mmap_pgoff(fp, next_addr, map->total_size,
 					PROT_READ |
 					(i->flags &
@@ -1076,7 +1075,6 @@ out:
 					MAP_SHARED,
 					start_frag->pfn_base,
 					&populate);
-		up_write(&current->mm->mmap_sem);
 		if (longret & ~PAGE_MASK) {
 			ret = (int)longret;
 		} else {
@@ -1085,6 +1083,7 @@ out:
 		}
 	} else
 		kfree(map);
+	up_write(&current->mm->mmap_sem);
 	return ret;
 }
 
-- 
1.9.1

