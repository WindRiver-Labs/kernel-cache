From 3cd14763730db3dc8eaa856b9567e97b5c07c1cf Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Wed, 19 Mar 2014 16:26:03 +0800
Subject: [PATCH 723/987] FMAN: implement the workaround for Erratum A-007273

A-007273: FMAN soft reset is not finished properly if one of the Ethernet
MAC clocks is disabled.

Affects: FMAN
Impact: FMAN hangs if soft reset is done when at least one of the Ethernet MAC
clocks is disabled.

Workaround: Re-enable all disabled MAC clocks through the DCFG_CCSR_DEVDISR2
register prior to issuing an FMAN soft reset. Re-disable the MAC clocks after
the FMAN soft reset is done. Inactive MAC clocks can be re-enabled because
they are inactive. However, functional MACs cannot be re-enabled, as described
in the reference manual.

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
Signed-off-by: Lu.Jiang <lu.jiang@windriver.com>
---
 .../ethernet/freescale/fman/Peripherals/FM/fm.c    | 59 +++++++++++++++++++---
 .../inc/integrations/T4240/dpaa_integration_ext.h  |  1 +
 2 files changed, 54 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/freescale/fman/Peripherals/FM/fm.c b/drivers/net/ethernet/freescale/fman/Peripherals/FM/fm.c
index ccb6042..1cf2c9d 100644
--- a/drivers/net/ethernet/freescale/fman/Peripherals/FM/fm.c
+++ b/drivers/net/ethernet/freescale/fman/Peripherals/FM/fm.c
@@ -36,6 +36,9 @@
 
  @Description   FM driver routines implementation.
 *//***************************************************************************/
+#include <asm/mpc85xx.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
 #include "std_ext.h"
 #include "error_ext.h"
 #include "xx_ext.h"
@@ -47,8 +50,8 @@
 #include "fm_common.h"
 #include "fm_ipc.h"
 #include "fm.h"
-#include <asm/mpc85xx.h>
 #include "fsl_fman.h"
+#include <asm/fsl_guts.h>
 
 
 /****************************************/
@@ -56,6 +59,29 @@
 /****************************************/
 
 static volatile bool blockingFlag = FALSE;
+
+#ifdef FM_SOFT_REST_IS_NOT_FINISHED_PROPERLY_A007273
+static struct ccsr_guts __iomem *Fm_GetCcsrGutsReg(void)
+{
+	struct device_node *np;
+	struct ccsr_guts __iomem *guts_regs = NULL;
+
+	np = of_find_compatible_node(NULL, NULL, "fsl,t4240-device-config");
+
+	if (np) {
+		guts_regs = of_iomap(np, 0);
+		of_node_put(np);
+		if (!guts_regs) {
+			pr_err("%s: Could not map ccsr guts regs node address\n",
+					__func__);
+			return NULL;
+		}
+		return guts_regs;
+	}
+	return NULL;
+}
+#endif /* FM_SOFT_REST_IS_NOT_FINISHED_PROPERLY_A007273 */
+
 static void IpcMsgCompletionCB(t_Handle   h_Fm,
                                uint8_t    *p_Msg,
                                uint8_t    *p_Reply,
@@ -3513,19 +3539,40 @@ t_Error FM_Init(t_Handle h_Fm)
     /* Reset the FM if required. */
     if (p_Fm->resetOnInit)
     {
+#ifdef FM_SOFT_REST_IS_NOT_FINISHED_PROPERLY_A007273
 	u32 svr = mfspr(SPRN_SVR);
+	u32 disr2 = 0;
+	struct ccsr_guts __iomem *ccsr_guts_regs = NULL;
 
 	if (((SVR_SOC_VER(svr) == SVR_T4240 && SVR_REV(svr) > 0x10)) ||
 	    ((SVR_SOC_VER(svr) == SVR_T4160 && SVR_REV(svr) > 0x10)) ||
 	    ((SVR_SOC_VER(svr) == SVR_T4080 && SVR_REV(svr) > 0x10)) ||
 	    (SVR_SOC_VER(svr) == SVR_T2080) ||
 	    (SVR_SOC_VER(svr) == SVR_T2081)) {
-		DBG(WARNING, ("Hack: No FM reset!\n"));
-	} else {
-		WRITE_UINT32(p_Fm->p_FmFpmRegs->fm_rstc, FPM_RSTC_FM_RESET);
-		CORE_MemoryBarrier();
-		XX_UDelay(100);
+
+		ccsr_guts_regs = Fm_GetCcsrGutsReg();
+
+		if (ccsr_guts_regs) {
+			/* Get the origin value of devdisr2. */
+			disr2 = ioread32be(&ccsr_guts_regs->devdisr2);
+			/* Set the devsir2 to enable all fmans */
+			iowrite32be(0, &ccsr_guts_regs->devdisr2);
+		}
+	}
+#endif /* FM_SOFT_REST_IS_NOT_FINISHED_PROPERLY_A007273 */
+
+	WRITE_UINT32(p_Fm->p_FmFpmRegs->fm_rstc, FPM_RSTC_FM_RESET);
+	CORE_MemoryBarrier();
+	XX_UDelay(100);
+
+#ifdef FM_SOFT_REST_IS_NOT_FINISHED_PROPERLY_A007273
+	if (disr2 && ccsr_guts_regs) {
+		/* Restore the value of devdisr2. */
+		iowrite32be(disr2, &ccsr_guts_regs->devdisr2);
 	}
+	if (ccsr_guts_regs)
+		iounmap(ccsr_guts_regs);
+#endif/* FM_SOFT_REST_IS_NOT_FINISHED_PROPERLY_A007273 */
 
         if (fman_is_qmi_halt_not_busy_state(p_Fm->p_FmQmiRegs))
         {
diff --git a/drivers/net/ethernet/freescale/fman/inc/integrations/T4240/dpaa_integration_ext.h b/drivers/net/ethernet/freescale/fman/inc/integrations/T4240/dpaa_integration_ext.h
index dc3320f..8fd8dff 100644
--- a/drivers/net/ethernet/freescale/fman/inc/integrations/T4240/dpaa_integration_ext.h
+++ b/drivers/net/ethernet/freescale/fman/inc/integrations/T4240/dpaa_integration_ext.h
@@ -274,6 +274,7 @@ typedef enum
 #define FM_RX_FIFO_CORRUPT_ERRATA_10GMAC_A006320
 #define FM_OP_NO_VSP_NO_RELEASE_ERRATA_FMAN_A006675
 #define FM_HEAVY_TRAFFIC_SEQUENCER_HANG_ERRATA_FMAN_A006981
+#define FM_SOFT_REST_IS_NOT_FINISHED_PROPERLY_A007273
 
 #define FM_BCB_ERRATA_BMI_SW001
 #define FM_LEN_CHECK_ERRATA_FMAN_SW002
-- 
1.9.1

