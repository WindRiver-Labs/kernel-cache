From c55543ed0e98c7de76c457db90d464ed7bceaddb Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Fri, 5 Apr 2013 11:33:57 +0300
Subject: [PATCH 051/987] dpaa_eth: Optionally disable ndo_select_queue in
 favor of XPS

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

The existence of a ndo_select_queue() callback overrides the XPS
selection logic on the egress path. Provide a Kconfig choice of
disabling this callback, to allow the standard XPS selection logic and
user-controlled FQ-to-CPU mapping.

In addition, if XPS is chosen, use the queue from
skb->queue_mapping for transmission.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
(cherry picked from commit a6320761e50dab577d9668ac0c09bde67aa36585)

Conflicts:
	drivers/net/ethernet/freescale/dpa/dpaa_eth.c

Change-Id: Ib0e5919a957975cd9a33d1886b27789ff5abd71f
Reviewed-on: http://git.am.freescale.net:8181/1049
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c    |  7 +++++--
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h    | 10 ++++++++++
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c |  2 +-
 3 files changed, 16 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index a9c30d4..71c1316 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -1839,8 +1839,7 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
 
 	clear_fd(&fd);
-	/* Use the Tx queue of the current cpu */
-	queue_mapping = smp_processor_id();
+	queue_mapping = dpa_get_queue_mapping(skb);
 
 	if (unlikely(skb_headroom(skb) < DPA_BP_HEAD)) {
 		struct sk_buff *skb_new;
@@ -3134,10 +3133,12 @@ static const struct file_operations dpa_debugfs_fops = {
 };
 #endif
 
+#ifdef CONFIG_DPAA_ETH_USE_NDO_SELECT_QUEUE
 static u16 dpa_select_queue(struct net_device *net_dev, struct sk_buff *skb)
 {
 	return smp_processor_id();
 }
+#endif
 
 
 static int dpa_ndo_set_features(struct net_device *dev,
@@ -3163,7 +3164,9 @@ static const struct net_device_ops dpa_private_ops = {
 	.ndo_get_stats = dpa_get_stats,
 	.ndo_set_mac_address = dpa_set_mac_address,
 	.ndo_validate_addr = eth_validate_addr,
+#ifdef CONFIG_DPAA_ETH_USE_NDO_SELECT_QUEUE
 	.ndo_select_queue = dpa_select_queue,
+#endif
 	.ndo_change_mtu = dpa_change_mtu,
 	.ndo_set_rx_mode = dpa_set_rx_mode,
 	.ndo_init = dpa_ndo_init,
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index 7a3ff91..2085be1 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -572,4 +572,14 @@ static inline void _dpa_assign_wq(struct dpa_fq *fq)
 #endif /* CONFIG_DPA_ETH_WQ_ASSIGN_* */
 
 
+#ifdef CONFIG_DPAA_ETH_USE_NDO_SELECT_QUEUE
+/* Use in lieu of skb_get_queue_mapping() */
+#define dpa_get_queue_mapping(skb) \
+	smp_processor_id()
+#else
+/* Use the queue selected by XPS */
+#define dpa_get_queue_mapping(skb) \
+	skb_get_queue_mapping(skb)
+#endif
+
 #endif	/* __DPA_H */
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index cabf9dc..09b2928 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -717,7 +717,7 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 
 	clear_fd(&fd);
 
-	queue_mapping = smp_processor_id();
+	queue_mapping = dpa_get_queue_mapping(skb);
 
 
 #ifdef CONFIG_FSL_DPA_1588
-- 
1.9.1

