From c6bff997b55924b7862ea10bd7325ca69e7f13bb Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Tue, 21 May 2013 23:14:10 +0300
Subject: [PATCH 1240/1336] crypto: caam - Restore cpus allowed mask at driver
 load/unload

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

The CAAM code has to briefly alter the cpus allowed mask when
initializing/destroying CGRs. However, it would not restore the previous
mask, thus leaving the task scheduler with only one available CPU.

Restore the cpus allowed mask that the driver's initialization/tear-down
routines find before operating on CGRs.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Change-Id: Iabde013d232deda9fbced224a9edc34e8a09f32d
Reviewed-on: http://git.am.freescale.net:8181/2631
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
---
 drivers/crypto/caam/qi.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/drivers/crypto/caam/qi.c b/drivers/crypto/caam/qi.c
index c77f2a7..88c99bf 100644
--- a/drivers/crypto/caam/qi.c
+++ b/drivers/crypto/caam/qi.c
@@ -377,6 +377,7 @@ int caam_qi_shutdown(struct device *qidev)
 	int i, ret;
 
 	const cpumask_t *cpus = qman_affine_cpus();
+	struct cpumask old_cpumask = *tsk_cpus_allowed(current);
 
 	for_each_cpu(i, cpus) {
 		napi_disable(&per_cpu(pcpu_qipriv.irqtask, i));
@@ -404,6 +405,9 @@ int caam_qi_shutdown(struct device *qidev)
 	else
 		qman_release_cgrid(priv->rsp_cgr.cgrid);
 
+	/* Now that we're done with the CGRs, restore the cpus allowed mask */
+	set_cpus_allowed_ptr(current, &old_cpumask);
+
 	platform_device_unregister(priv->qi_pdev);
 	return ret;
 }
@@ -628,6 +632,7 @@ int caam_qi_init(struct platform_device *caam_pdev, struct device_node *np)
 	struct caam_drv_private *ctrlpriv;
 	int err, i;
 	const cpumask_t *cpus = qman_affine_cpus();
+	struct cpumask old_cpumask = *tsk_cpus_allowed(current);
 
 	/*
 	 * QMAN requires that CGR must be removed from same CPU+portal from
@@ -695,6 +700,9 @@ int caam_qi_init(struct platform_device *caam_pdev, struct device_node *np)
 	/* Hook up QI device to parent controlling caam device */
 	ctrlpriv->qidev = qidev;
 
+	/* Done with the CGRs; restore the cpus allowed mask */
+	set_cpus_allowed_ptr(current, &old_cpumask);
+
 	dev_info(qidev, "Linux CAAM Queue I/F driver initialised\n");
 
 	return 0;
-- 
2.0.2

