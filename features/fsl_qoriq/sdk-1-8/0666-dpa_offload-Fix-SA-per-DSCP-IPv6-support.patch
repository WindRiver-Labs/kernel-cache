From 001641d429d18d8e8e1cf06503b3b41ec5e8cee7 Mon Sep 17 00:00:00 2001
From: Aurelian Zanoschi <Aurelian.Zanoschi@freescale.com>
Date: Wed, 30 Apr 2014 12:32:28 +0300
Subject: [PATCH 666/987] dpa_offload: Fix SA per DSCP IPv6 support

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

In order to extract the Traffic Class in case of IPv6 flows, the keygen
will add two bytes to the key which hold: IPv6 version (4 bits), TC (8
bits) and 4 bits zero from Flow Label. At the time the feature was
developed this information wasn't available and the assumption that it
works as IPv4 case was made.

Change-Id: Iedfab5635ba8a8c1a15404dc830edfe60844ada6
Signed-off-by: Aurelian Zanoschi <Aurelian.Zanoschi@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/11712
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Marian-Cornel Chereji <marian.chereji@freescale.com>
Reviewed-by: Jose Rivera <German.Rivera@freescale.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c | 54 ++++++++++++++++++++++++-----
 include/linux/fsl_dpa_ipsec.h               |  7 +++-
 2 files changed, 51 insertions(+), 10 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index f6fcdbd..aba4710 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -441,7 +441,10 @@ static void calc_in_pol_key_size(struct dpa_ipsec *dpa_ipsec, uint8_t *key_size)
 			*key_size += PORT_FIELD_LEN;
 			break;
 		case DPA_IPSEC_KEY_FIELD_DSCP:
-			*key_size += DSCP_FIELD_LEN;
+			if (dpa_ipsec->config.post_sec_in_params.use_ipv6_pol)
+				*key_size += DSCP_FIELD_LEN_IPv4;
+			else
+				*key_size += DSCP_FIELD_LEN_IPv6;
 			break;
 		}
 	}
@@ -1347,6 +1350,45 @@ static int set_flow_id_action(struct dpa_ipsec_sa *sa,
 	return 0;
 }
 
+static inline void fill_dscp_field(struct dpa_ipsec_policy_params *pol_params,
+				  uint8_t *key, uint8_t *mask, uint8_t *offset,
+				  uint8_t dscp)
+{
+	uint16_t mask_val = 0xFC;
+	uint16_t dscp_val;
+	switch (pol_params->src_addr.version) {
+	case DPA_IPSEC_ADDR_T_IPv4:
+		if (pol_params->use_dscp) {
+			*(uint8_t *)(key + *offset) = dscp << 2;
+			SET_BYTE_VAL_IN_ARRAY(mask, *offset, mask_val);
+		} else {
+			*(uint8_t *)(key + *offset) = 0;
+			SET_BYTE_VAL_IN_ARRAY(mask, *offset, 0);
+		}
+		*offset += DSCP_FIELD_LEN_IPv4;
+		break;
+	case DPA_IPSEC_ADDR_T_IPv6:
+		/*
+		 * In order to extract Traffic Class in case of IPv6, the keygen
+		 * will add two bytes to the key, which hold: IPv6 version (4
+		 * bits), TC (8 bits) and 4 bits zero.
+		 */
+		dscp_val = dscp << 6;
+		mask_val = mask_val << 4;
+		if (pol_params->use_dscp) {
+			memcpy(key + *offset, &dscp_val, DSCP_FIELD_LEN_IPv6);
+			memcpy(mask + *offset, &mask_val, DSCP_FIELD_LEN_IPv6);
+		} else {
+			memset(key + *offset, 0, DSCP_FIELD_LEN_IPv6);
+			memset(mask + *offset, 0, DSCP_FIELD_LEN_IPv6);
+		}
+		*offset += DSCP_FIELD_LEN_IPv6;
+		break;
+	default:
+		break;
+	}
+}
+
 static int fill_policy_key(int td,
 			   struct dpa_ipsec_policy_params *pol_params,
 			   uint8_t key_fields,
@@ -1435,14 +1477,8 @@ static int fill_policy_key(int td,
 			break;
 
 		case DPA_IPSEC_KEY_FIELD_DSCP:
-			if (pol_params->use_dscp) {
-				*(uint8_t *)(key + offset) = dscp_value << 2;
-				SET_BYTE_VAL_IN_ARRAY(mask, offset, 0xFC);
-			} else {
-				*(uint8_t *)(key + offset) = 0;
-				SET_BYTE_VAL_IN_ARRAY(mask, offset, 0);
-			}
-			offset += DSCP_FIELD_LEN;
+			fill_dscp_field(pol_params, key, mask, &offset,
+					dscp_value);
 			break;
 		}
 	}
diff --git a/include/linux/fsl_dpa_ipsec.h b/include/linux/fsl_dpa_ipsec.h
index 445e6ce..89b8e62 100644
--- a/include/linux/fsl_dpa_ipsec.h
+++ b/include/linux/fsl_dpa_ipsec.h
@@ -43,7 +43,12 @@
 #define ESP_SPI_FIELD_LEN		4
 #define PORT_FIELD_LEN			2
 #define ICMP_HDR_FIELD_LEN		1
-#define DSCP_FIELD_LEN			1
+#define DSCP_FIELD_LEN_IPv4		1
+/*
+ * In order to extract Traffic Class in case of IPv6, the keygen will add two
+ * bytes to the key, which hold: IPv6 version(4bits), TC(8bits) and 4 bits zero.
+ */
+#define DSCP_FIELD_LEN_IPv6		2
 
 #define MAX_SIZE_IP_UDP_SPI_KEY	\
 		(1 * DPA_OFFLD_IPv6_ADDR_LEN_BYTES + \
-- 
1.9.1

