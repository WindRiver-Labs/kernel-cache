From 4376fc53700483cd417fb2c6e44a4de51d0a59c4 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Thu, 10 Dec 2015 16:26:27 +0800
Subject: [PATCH] powerpc: e6500: set the correct tcd_ptr when boot from
 non-primary thread

For e6500 core which have threads but no tlbsrx, we use a per-core
lock to avoid the conflicts when the two threads are writing to
the tlb. We have embedded the per-core data struct (tcd) in paca,
and make the tcd_ptr in each thread to point to the tcd in the
primary thread. This is good since the primary thread will be
the first thread to boot in general. But for kdump, the kernel
may boot from a non-primary thread. In this case, we should use
the tcd in the paca of the boot cpu instead of the one in the primary
thread since the tcd data in primary thread will not be initialized
in this case and is just full of rubbish.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/powerpc/kernel/setup_64.c |    7 ++++++-
 1 files changed, 6 insertions(+), 1 deletions(-)

diff --git a/arch/powerpc/kernel/setup_64.c b/arch/powerpc/kernel/setup_64.c
index 3f05f18..60a4b3a 100644
--- a/arch/powerpc/kernel/setup_64.c
+++ b/arch/powerpc/kernel/setup_64.c
@@ -108,7 +108,12 @@ static void setup_tlb_core_data(void)
 	for_each_possible_cpu(cpu) {
 		int first = cpu_first_thread_sibling(cpu);
 
-		paca[cpu].tcd_ptr = (uintptr_t)&paca[first].tcd;
+		/* For kdump, the boot cpu may be not the primary thread */
+		if (first == cpu_first_thread_sibling(boot_cpuid) &&
+		    first != boot_cpuid)
+			paca[cpu].tcd_ptr = (uintptr_t)&paca[boot_cpuid].tcd;
+		else
+			paca[cpu].tcd_ptr = (uintptr_t)&paca[first].tcd;
 
 		/* If we have threads but no tlbsrx., use a per-core lock */
 		if (smt_enabled_at_boot >= 2 &&
-- 
1.7.5.4

