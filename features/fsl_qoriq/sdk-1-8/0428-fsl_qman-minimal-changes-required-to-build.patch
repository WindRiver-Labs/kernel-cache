From 359a652ae98da8c56af659a7cc89e96380149f3b Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@freescale.com>
Date: Tue, 31 Dec 2013 12:49:20 +0200
Subject: [PATCH 428/987] fsl_qman: minimal changes required to build

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

Introduced the minimal changes required for the driver to build.

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
Change-Id: Id21e0ad56d0fa339d24c6cb5dc9b8c29b4e209a2
Reviewed-on: http://git.am.freescale.net:8181/7586
Reviewed-by: Haiying Wang <Haiying.Wang@freescale.com>
Reviewed-by: Scott Wood <scottwood@freescale.com>
---
 drivers/staging/fsl_qbman/fsl_usdpaa.c  | 9 +++++----
 drivers/staging/fsl_qbman/qman_driver.c | 8 +++++---
 2 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/fsl_qbman/fsl_usdpaa.c b/drivers/staging/fsl_qbman/fsl_usdpaa.c
index 3ac3fa0..87ddb2c 100644
--- a/drivers/staging/fsl_qbman/fsl_usdpaa.c
+++ b/drivers/staging/fsl_qbman/fsl_usdpaa.c
@@ -849,7 +849,7 @@ static long ioctl_dma_map(struct file *fp, struct ctx *ctx,
 	int ret = 0, k;
 	u32 largest_page, so_far = 0;
 	int frag_count = 0;
-	unsigned long next_addr = PAGE_SIZE;
+	unsigned long next_addr = PAGE_SIZE, populate;
 
 	if (i->len && i->len % PAGE_SIZE)
 		return -EINVAL;
@@ -1006,7 +1006,8 @@ out:
 					 USDPAA_DMA_FLAG_RDONLY ? 0
 					 : PROT_WRITE),
 					MAP_SHARED,
-					start_frag->pfn_base);
+					start_frag->pfn_base,
+					&populate);
 		up_write(&current->mm->mmap_sem);
 		if (longret & ~PAGE_MASK)
 			ret = (int)longret;
@@ -1143,12 +1144,12 @@ map_match:
 
 static int portal_mmap(struct file *fp, struct resource *res, void **ptr)
 {
-	unsigned long longret = 0;
+	unsigned long longret = 0, populate;
 
 	down_write(&current->mm->mmap_sem);
 	longret = do_mmap_pgoff(fp, PAGE_SIZE, resource_size(res),
 				PROT_READ | PROT_WRITE, MAP_SHARED,
-				res->start >> PAGE_SHIFT);
+				res->start >> PAGE_SHIFT, &populate);
 	up_write(&current->mm->mmap_sem);
 
 	if (longret & ~PAGE_MASK)
diff --git a/drivers/staging/fsl_qbman/qman_driver.c b/drivers/staging/fsl_qbman/qman_driver.c
index 5df2074..7768ca0 100644
--- a/drivers/staging/fsl_qbman/qman_driver.c
+++ b/drivers/staging/fsl_qbman/qman_driver.c
@@ -508,7 +508,8 @@ static void portal_set_cpu(struct qm_portal_config *pcfg, int cpu)
 	stash_attr.cpu = cpu;
 	stash_attr.cache = IOMMU_ATTR_CACHE_L1;
 	stash_attr.window = ~(u32)0;
-	ret = iommu_domain_set_attr(pcfg->iommu_domain, DOMAIN_ATTR_PAMU_STASH,
+	ret = iommu_domain_set_attr(pcfg->iommu_domain,
+				    DOMAIN_ATTR_FSL_PAMU_STASH,
 				    &stash_attr);
 	if (ret < 0) {
 		pr_err(KBUILD_MODNAME ":%s(): iommu_domain_set_attr() = %d",
@@ -528,7 +529,8 @@ static void portal_set_cpu(struct qm_portal_config *pcfg, int cpu)
 			   __func__, ret);
 		goto _iommu_domain_free;
 	}
-	ret = iommu_domain_set_attr(pcfg->iommu_domain, DOMAIN_ATTR_PAMU_ENABLE,
+	ret = iommu_domain_set_attr(pcfg->iommu_domain,
+				    DOMAIN_ATTR_FSL_PAMU_ENABLE,
 				    &window_count);
 	if (ret < 0) {
 		pr_err(KBUILD_MODNAME ":%s(): iommu_domain_set_attr() = %d",
@@ -650,7 +652,7 @@ static void qman_portal_update_sdest(const struct qm_portal_config *pcfg,
 		stash_attr.cache = IOMMU_ATTR_CACHE_L1;
 		stash_attr.window = ~(u32)0;
 		ret = iommu_domain_set_attr(pcfg->iommu_domain,
-				DOMAIN_ATTR_PAMU_STASH, &stash_attr);
+				DOMAIN_ATTR_FSL_PAMU_STASH, &stash_attr);
 		if (ret < 0) {
 			pr_err("Failed to update pamu stash setting\n");
 			return;
-- 
1.9.1

