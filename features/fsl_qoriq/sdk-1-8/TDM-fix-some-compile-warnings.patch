From 4b4eaae19c87875c8ed1e60a739242a274d985af Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Tue, 2 Feb 2016 13:07:57 +0800
Subject: [PATCH 4/7] TDM: fix some compile warnings

This is to avoid the below warnings:

drivers/tdm/device/tdm_fsl.c: In function 'tdm_fsl_reg_init':
drivers/tdm/device/tdm_fsl.c:416:14: warning:
unused variable 'base' [-Wunused-variable]
   phys_addr_t base = get_immrbase();
               ^

drivers/tdm/device/tdm_fsl.c:202:20: warning: 'tdm_err_isr'
defined but not used [-Wunused-function]
 static irqreturn_t tdm_err_isr(int irq, void *p)
                    ^

drivers/tdm/test/tdm_test.c:59:25: warning: 'tdmport'
defined but not used [-Wunused-variable]
 static struct tdm_port *tdmport;
				^

drivers/tdm/tdm-core.c: In function 'tdm_device_match':
drivers/tdm/tdm-core.c:74:11: warning: cast from pointer to
integer of different size [-Wpointer-to-int-cast]
    return (int)driver->id_table;
           ^

drivers/tdm/line_ctrl/slic_zarlink.c: In function 'configure_spi_pdata':
drivers/tdm/line_ctrl/slic_zarlink.c:573:22: warning:
 unused variable 'np' [-Wunused-variable]
  struct device_node *np = spi->dev.of_node;
                      ^
drivers/tdm/line_ctrl/slic_zarlink.c:572:13: warning:
 unused variable 'iprop' [-Wunused-variable]
  const u32 *iprop;
             ^

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/tdm/device/tdm_fsl.c         |   82 ----------------------------------
 drivers/tdm/line_ctrl/slic_zarlink.c |    2 -
 drivers/tdm/tdm-core.c               |    5 +-
 drivers/tdm/test/tdm_test.c          |    1 -
 4 files changed, 3 insertions(+), 87 deletions(-)

diff --git a/drivers/tdm/device/tdm_fsl.c b/drivers/tdm/device/tdm_fsl.c
index a4efccf..7694b93e 100644
--- a/drivers/tdm/device/tdm_fsl.c
+++ b/drivers/tdm/device/tdm_fsl.c
@@ -199,87 +199,6 @@ static void rx_tcd_init(struct tdm_priv *priv)
 	    ALIGN_SIZE(physaddr, ALIGNED_32_BYTES);
 }
 
-static irqreturn_t tdm_err_isr(int irq, void *p)
-{
-	int ret = IRQ_NONE;
-	u32 status, mask, val;
-	u32 dmac_err;
-	struct tdm_priv *priv;
-	u32 ch;
-	priv = p;
-
-	if (!priv) {
-		pr_err("%s: Invalid handle\n", __func__);
-		return -EINVAL;
-	}
-
-	/* transmit errors */
-	status = in_be32(&priv->tdm_regs->ter);
-	mask = in_be32(&priv->tdm_regs->tier);
-	val = status & mask;
-	out_be32(&priv->tdm_regs->ter, val);
-
-	/* Transmit under Run error */
-	if (val & TIER_TUEE)
-		dev_err(priv->device, "TDM::Transmit Under Run error\n");
-
-	/* Transmit Sync Error */
-	if (val & TIER_TSEEE)
-		dev_err(priv->device, "TDM::Transmit Sync error\n");
-
-	if (val)
-		ret = IRQ_HANDLED;
-
-	/* receive errors */
-	status = in_be32(&priv->tdm_regs->rer);
-	mask = in_be32(&priv->tdm_regs->rier);
-	val = status & mask;
-	out_be32(&priv->tdm_regs->rer, val);
-
-	/* Receiver Over run error */
-	if (val & RIER_ROEE)
-		dev_err(priv->device, "TDM::Receive  Over Run error\n");
-
-	/* Receive Sync Error  */
-	if (val & RIER_RSEEE)
-		dev_err(priv->device, "TDM::Receive Sync error\n");
-
-	if (val)
-		ret = IRQ_HANDLED;
-
-	/* Handling of DMA Errors */
-	dmac_err = in_be32(&priv->dmac_regs->dmaes);
-	if (!(dmac_err & DMAES_VLD))
-		return ret;
-
-	ch = DMAES_ERRCHN(dmac_err);
-
-	if (dmac_err & DMAES_CPE)
-		dev_err(priv->device, "TDM::Channel priority error\n");
-	if (dmac_err & DMAES_GPE)
-		dev_err(priv->device, "TDM::Group priority error\n");
-	if (dmac_err & DMAES_SAE)
-		dev_err(priv->device, "TDM::Source address error\n");
-	if (dmac_err & DMAES_SOE)
-		dev_err(priv->device, "TDM::Source offset error\n");
-	if (dmac_err & DMAES_DAE)
-		dev_err(priv->device, "TDM::Destination address error\n");
-	if (dmac_err & DMAES_DOE)
-		dev_err(priv->device, "TDM::Destination offset error\n");
-	if (dmac_err & DMAES_NCE)
-		dev_err(priv->device, "TDM::Nbytes citer error\n");
-	if (dmac_err & DMAES_SGE)
-		dev_err(priv->device, "TDM::Scatter gather error\n");
-	if (dmac_err & DMAES_DBE)
-		dev_err(priv->device, "TDM::Destination bus error\n");
-	if (dmac_err & DMAES_SBE)
-		dev_err(priv->device, "TDM::Source bus error\n");
-
-	/* Clear the error */
-	out_8(&priv->dmac_regs->dmacerr, (u8)ch);
-	return IRQ_HANDLED;
-}
-
 static irqreturn_t dmac_done_isr(int irq, void *p)
 {
 	u32 ch;
@@ -415,7 +334,6 @@ static int tdm_fsl_reg_init(struct tdm_priv *priv)
 {
 	int i;
 	int ch_size_type;
-	phys_addr_t base = get_immrbase();
 	struct tdm_adapter *adap;
 	if (!priv) {
 		pr_err("%s: Invalid handle\n", __func__);
diff --git a/drivers/tdm/line_ctrl/slic_zarlink.c b/drivers/tdm/line_ctrl/slic_zarlink.c
index 6aa562c0..a709174 100644
--- a/drivers/tdm/line_ctrl/slic_zarlink.c
+++ b/drivers/tdm/line_ctrl/slic_zarlink.c
@@ -569,8 +569,6 @@ static int slic_init_configure(unsigned char *device_handle,
 void configure_spi_pdata(struct spi_device *spi)
 {
 	struct slic_platform_data *spi_slic_pdata;
-	const u32 *iprop;
-	struct device_node *np = spi->dev.of_node;
 	static int num_slic;
 
 	spi_slic_pdata = kzalloc(sizeof(*spi_slic_pdata), GFP_KERNEL);
diff --git a/drivers/tdm/tdm-core.c b/drivers/tdm/tdm-core.c
index 5d55905..861e6f2 100644
--- a/drivers/tdm/tdm-core.c
+++ b/drivers/tdm/tdm-core.c
@@ -66,12 +66,13 @@ static int use_latest_tdm_data = 1;
 static void tdm_data_tasklet_fn(unsigned long);
 
 /* tries to match client driver with the adapter */
-static int tdm_device_match(struct tdm_driver *driver, struct tdm_adapter *adap)
+static long tdm_device_match(struct tdm_driver *driver,
+				struct tdm_adapter *adap)
 {
 	/* match on an id table if there is one */
 	if (driver->id_table && driver->id_table->name[0]) {
 		if (!(strcmp(driver->id_table->name, adap->name)))
-			return (int)driver->id_table;
+			return (long)driver->id_table;
 	}
 	return TDM_E_OK;
 }
diff --git a/drivers/tdm/test/tdm_test.c b/drivers/tdm/test/tdm_test.c
index fe7d6e4..18da0b3 100644
--- a/drivers/tdm/test/tdm_test.c
+++ b/drivers/tdm/test/tdm_test.c
@@ -56,7 +56,6 @@ MODULE_AUTHOR("Hemant Agrawal <hemant@freescale.com> and "
 MODULE_DESCRIPTION(DRV_DESC);
 
 static struct tdm_driver test_tdmdev_driver;
-static struct tdm_port *tdmport;
 static int tdm_thread_state;
 
 static int tdm_thread(void *ptr)
-- 
1.7.5.4

