From b2e8a55c66443ab9fda3d28459a034581fb4acf8 Mon Sep 17 00:00:00 2001
From: Jeffrey Ladouceur <Jeffrey.Ladouceur@freescale.com>
Date: Fri, 9 May 2014 13:45:32 -0400
Subject: [PATCH 1001/1008] fsl_dce: Fix broken dce tests

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

The dce test code was broken when focus was placed on bman usage.
Fixed test code when using pre-built buffers.
Added verbosity level to test cases.
Change kernel help api name to explicitly name output buffer as this is
consistent with bman api.

Signed-off-by: Jeffrey Ladouceur <Jeffrey.Ladouceur@freescale.com>
Change-Id: I62aae72b5075718180729fe49b62524eea9d28fa
Reviewed-on: http://git.am.freescale.net:8181/12099
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Reviewed-by: Richard Schmitt <richard.schmitt@freescale.com>
---
 .../chunk_comp_def_cf/dce_chunk_comp_def_cf_test.c |  89 +++++---
 .../fsl_dce/tests/common/test_frame_helpers.c      |  36 +++-
 .../fsl_dce/tests/common/test_frame_helpers.h      |  30 ++-
 .../tests/performance_simple/dce_perf_simple.c     | 225 +++++++++++----------
 .../tests/performance_simple/dce_sf_perf_simple.c  |  16 +-
 5 files changed, 238 insertions(+), 158 deletions(-)

diff --git a/drivers/staging/fsl_dce/tests/chunk_comp_def_cf/dce_chunk_comp_def_cf_test.c b/drivers/staging/fsl_dce/tests/chunk_comp_def_cf/dce_chunk_comp_def_cf_test.c
index 7bb2ff8..80e2ca1 100644
--- a/drivers/staging/fsl_dce/tests/chunk_comp_def_cf/dce_chunk_comp_def_cf_test.c
+++ b/drivers/staging/fsl_dce/tests/chunk_comp_def_cf/dce_chunk_comp_def_cf_test.c
@@ -50,8 +50,10 @@ MODULE_LICENSE("Dual BSD/GPL");
 MODULE_DESCRIPTION("FSL DCE test: stateless trunc deflate compoundframes");
 
 static int block_size = 4096;
+static int verbose_level; /* 0 low, 1 high */
 
 module_param(block_size, int, 0);
+module_param(verbose_level, int, 0);
 
 static void chunk_process_cb(struct fsl_dce_flow *flow,
 		const struct qm_fd *fd, void *callback_tag)
@@ -167,6 +169,9 @@ static int do_test(struct dce_test_ctx *ctx,
 	struct dce_process_cf_req *def_process_req, *inf_process_req;
 	struct dce_nop_req *nop_req;
 
+	pr_info("do_test: format %d input_len %zu\n", format, input_len);
+	pr_info("  block_len %zu, output_len %zu\n", block_len, output_len);
+
 	ret = init_test_ctx(ctx, format);
 	if (ret)
 		goto fail_init_test_ctx;
@@ -226,18 +231,22 @@ static int do_test(struct dce_test_ctx *ctx,
 		goto fail_alloc_dce_data_input;
 	}
 
-	pr_info("Printing input_list info\n");
-	print_dce_data_list(&def_process_req->input_data);
+	if (verbose_level == 1) {
+		pr_info("Printing input_list info\n");
+		print_dce_data_list(&def_process_req->input_data);
+	}
 
-	ret = alloc_dce_data(input_len, block_len,
+	ret = alloc_dce_data(output_len, block_len,
 		&def_process_req->output_data);
 	if (ret) {
 		BUG();
 		goto fail_alloc_dce_data_output;
 	}
 
-	pr_info("Printing output_list info\n");
-	print_dce_data_list(&def_process_req->output_data);
+	if (verbose_level == 1) {
+		pr_info("Printing output_list info\n");
+		print_dce_data_list(&def_process_req->output_data);
+	}
 
 	ret = copy_input_to_dce_data(input_data, input_len,
 					&def_process_req->input_data);
@@ -246,8 +255,10 @@ static int do_test(struct dce_test_ctx *ctx,
 		goto fail_alloc_dce_data_output;
 	}
 
-	pr_info("Printing input after copy info\n");
-	print_dce_data_list(&def_process_req->input_data);
+	if (verbose_level == 1) {
+		pr_info("Printing input after copy info\n");
+		print_dce_data_list(&def_process_req->input_data);
+	}
 
 	ret = dma_map_dce_data(&def_process_req->input_data, DMA_BIDIRECTIONAL);
 	if (ret) {
@@ -255,8 +266,10 @@ static int do_test(struct dce_test_ctx *ctx,
 		goto fail_alloc_dce_data_output;
 	}
 
-	pr_info("Printing input after dma_map info\n");
-	print_dce_data_list(&def_process_req->input_data);
+	if (verbose_level == 1) {
+		pr_info("Printing input after dma_map info\n");
+		print_dce_data_list(&def_process_req->input_data);
+	}
 
 	ret = dma_map_dce_data(&def_process_req->output_data,
 				DMA_BIDIRECTIONAL);
@@ -265,11 +278,13 @@ static int do_test(struct dce_test_ctx *ctx,
 		goto fail_dma_map_deflate_output_data;
 	}
 
-	pr_info("Printing output after dma_map info\n");
-	print_dce_data_list(&def_process_req->output_data);
+	if (verbose_level == 1) {
+		pr_info("Printing output after dma_map info\n");
+		print_dce_data_list(&def_process_req->output_data);
+	}
 
 	ret = attach_data_list_to_sg(&def_process_req->dce_cf[0],
-			&def_process_req->output_data,
+			&def_process_req->output_data, true,
 			DMA_BIDIRECTIONAL);
 	if (ret) {
 		BUG();
@@ -277,7 +292,7 @@ static int do_test(struct dce_test_ctx *ctx,
 	}
 
 	ret = attach_data_list_to_sg(&def_process_req->dce_cf[1],
-			&def_process_req->input_data,
+			&def_process_req->input_data, false,
 			DMA_BIDIRECTIONAL);
 	if (ret) {
 		BUG();
@@ -287,6 +302,7 @@ static int do_test(struct dce_test_ctx *ctx,
 	def_process_req->dce_cf[2].final = 1;
 
 	def_process_req->input_fd._format2 = qm_fd_compound;
+	def_process_req->input_fd.cong_weight = 1;
 	qm_fd_addr_set64(&def_process_req->input_fd,
 		fsl_dce_map(def_process_req->dce_cf));
 
@@ -349,9 +365,14 @@ static int do_test(struct dce_test_ctx *ctx,
 		def_process_req->dce_cf[0].length);
 
 	print_dce_sg(def_process_req->dce_cf[0]);
-	print_dce_data_list(&def_process_req->output_data);
+
+	if (verbose_level == 1)
+		print_dce_data_list(&def_process_req->output_data);
 
 	/* Save Output */
+	pr_info("Saving output\n");
+	pr_info("Output length is %u\n", def_process_req->dce_cf[0].length);
+
 	def_process_req->v_output = vmalloc(def_process_req->dce_cf[0].length);
 	if (!def_process_req->v_output) {
 		pr_err("Error %d\n", __LINE__);
@@ -359,7 +380,7 @@ static int do_test(struct dce_test_ctx *ctx,
 	}
 	def_process_req->v_output_size = def_process_req->dce_cf[0].length;
 
-	ret = copy_dce_data_to_buffer(&def_process_req->output_data,
+	ret = copy_output_dce_data_to_buffer(&def_process_req->output_data,
 		def_process_req->v_output_size,
 		def_process_req->v_output, def_process_req->v_output_size);
 
@@ -397,8 +418,10 @@ static int do_test(struct dce_test_ctx *ctx,
 		return ret;
 	}
 
-	pr_info("Printing input_list info\n");
-	print_dce_data_list(&inf_process_req->input_data);
+	if (verbose_level == 1) {
+		pr_info("Printing input_list info\n");
+		print_dce_data_list(&inf_process_req->input_data);
+	}
 
 	ret = alloc_dce_data(input_len, block_len,
 			&inf_process_req->output_data);
@@ -407,8 +430,10 @@ static int do_test(struct dce_test_ctx *ctx,
 		return ret;
 	}
 
-	pr_info("Printing output_list info\n");
-	print_dce_data_list(&inf_process_req->output_data);
+	if (verbose_level == 1) {
+		pr_info("Printing output_list info\n");
+		print_dce_data_list(&inf_process_req->output_data);
+	}
 
 	ret = copy_input_to_dce_data(def_process_req->v_output,
 		def_process_req->v_output_size, &inf_process_req->input_data);
@@ -417,8 +442,10 @@ static int do_test(struct dce_test_ctx *ctx,
 		return ret;
 	}
 
-	pr_info("Printing inflate input after copy info\n");
-	print_dce_data_list(&inf_process_req->input_data);
+	if (verbose_level == 1) {
+		pr_info("Printing inflate input after copy info\n");
+		print_dce_data_list(&inf_process_req->input_data);
+	}
 
 	ret = dma_map_dce_data(&inf_process_req->input_data, DMA_BIDIRECTIONAL);
 	if (ret) {
@@ -426,8 +453,10 @@ static int do_test(struct dce_test_ctx *ctx,
 		return ret;
 	}
 
-	pr_info("Printing input after dma_map info\n");
-	print_dce_data_list(&inf_process_req->input_data);
+	if (verbose_level == 1) {
+		pr_info("Printing input after dma_map info\n");
+		print_dce_data_list(&inf_process_req->input_data);
+	}
 
 	ret = dma_map_dce_data(&inf_process_req->output_data,
 				DMA_BIDIRECTIONAL);
@@ -436,18 +465,20 @@ static int do_test(struct dce_test_ctx *ctx,
 		return ret;
 	}
 
-	pr_info("Printing output after dma_map info\n");
-	print_dce_data_list(&inf_process_req->output_data);
+	if (verbose_level == 1) {
+		pr_info("Printing output after dma_map info\n");
+		print_dce_data_list(&inf_process_req->output_data);
+	}
 
 	ret = attach_data_list_to_sg(&inf_process_req->dce_cf[0],
-			&inf_process_req->output_data, DMA_BIDIRECTIONAL);
+			&inf_process_req->output_data, true, DMA_BIDIRECTIONAL);
 	if (ret) {
 		pr_err("Error %d\n", __LINE__);
 		return ret;
 	}
 
 	ret = attach_data_list_to_sg(&inf_process_req->dce_cf[1],
-			&inf_process_req->input_data, DMA_BIDIRECTIONAL);
+			&inf_process_req->input_data, false, DMA_BIDIRECTIONAL);
 	if (ret) {
 		pr_err("Error %d\n", __LINE__);
 		return ret;
@@ -500,7 +531,7 @@ static int do_test(struct dce_test_ctx *ctx,
 		return ret;
 	}
 
-	pr_info("Got chunk process, status = %d, sg_table[0].length = %d\n",
+	pr_info("Got chunk process, status = 0x%x, sg_table[0].length = %d\n",
 		inf_process_req->output_fd.status,
 		inf_process_req->dce_cf[0].length);
 
@@ -519,7 +550,7 @@ static int do_test(struct dce_test_ctx *ctx,
 	}
 	inf_process_req->v_output_size = inf_process_req->dce_cf[0].length;
 
-	ret = copy_dce_data_to_buffer(&inf_process_req->output_data,
+	ret = copy_output_dce_data_to_buffer(&inf_process_req->output_data,
 		inf_process_req->v_output_size, inf_process_req->v_output,
 		input_len);
 	if (ret) {
diff --git a/drivers/staging/fsl_dce/tests/common/test_frame_helpers.c b/drivers/staging/fsl_dce/tests/common/test_frame_helpers.c
index 319df36..2eb8f6a 100644
--- a/drivers/staging/fsl_dce/tests/common/test_frame_helpers.c
+++ b/drivers/staging/fsl_dce/tests/common/test_frame_helpers.c
@@ -495,38 +495,48 @@ int copy_input_to_dce_data(char *input, size_t ilen,
 EXPORT_SYMBOL(copy_input_to_dce_data);
 
 /*
- * @data_list is the source data. @cpylen is how much data from data_list to copy
- * @buffer is the destination. @buf_size is the size of the destination buffer
+ * @data_list is the source data.
+ * @cpylen is how much data from data_list to copy
+ * @buffer is the destination.
+ * @buf_size is the size of the destination buffer
  */
-int copy_dce_data_to_buffer(struct dce_data_list_t *data_list, size_t cpylen,
-			char *buffer, size_t buf_size)
+int copy_output_dce_data_to_buffer(struct dce_data_list_t *data_list,
+		size_t cpylen, char *buffer, size_t buf_size)
 {
 	int i = 0;
 
-	if (!buffer || !data_list || !data_list->data_item)
+	if (!buffer || !data_list || !data_list->data_item) {
+		pr_info("%d\n", __LINE__);
 		return -EINVAL;
+	}
 
-	if (cpylen > total_size_dce_data(data_list))
+	if (cpylen > total_allocated_dce_data(data_list)) {
+		pr_info("%d\n", __LINE__);
 		return -EINVAL;
+	}
 
-	if (cpylen > buf_size)
+	if (cpylen > buf_size) {
+		pr_info("%d\n", __LINE__);
 		return -EINVAL;
+	}
 
 	if (!is_multi_buffer(data_list)) {
 		memcpy(buffer, data_list->data_item->cpumem, cpylen);
+		 data_list->data_item->d_size = cpylen;
 		return 0;
 	}
 
 	while (cpylen) {
-		size_t to_copy = min(data_list->data_item[i].d_size, cpylen);
+		size_t to_copy = min(data_list->data_item[i].size, cpylen);
 		memcpy(buffer, data_list->data_item[i].cpumem, to_copy);
+		data_list->data_item[i].d_size = to_copy;
 		cpylen -= to_copy;
 		buffer += to_copy;
 		i++;
 	}
 	return 0;
 }
-EXPORT_SYMBOL(copy_dce_data_to_buffer);
+EXPORT_SYMBOL(copy_output_dce_data_to_buffer);
 
 int dma_map_dce_data(struct dce_data_list_t *data_list,
 		enum dma_data_direction dir)
@@ -589,6 +599,7 @@ EXPORT_SYMBOL(dma_unmap_dce_data);
 
 int attach_data_list_to_sg(struct qm_sg_entry *sg,
 			struct dce_data_list_t *data_list,
+			bool use_raw_size,
 			enum dma_data_direction dir)
 {
 	dma_addr_t addr;
@@ -608,7 +619,6 @@ int attach_data_list_to_sg(struct qm_sg_entry *sg,
 				return -ENOMEM;
 		}
 		qm_sg_entry_set64(sg, addr);
-		sg->length = total_size_dce_data(data_list);
 	} else {
 		sg->extension = 0;
 		addr = dma_map_single(dce_device,
@@ -620,8 +630,12 @@ int attach_data_list_to_sg(struct qm_sg_entry *sg,
 				return -ENOMEM;
 		}
 		qm_sg_entry_set64(sg, addr);
-		sg->length = total_size_dce_data(data_list);
 	}
+	if (use_raw_size)
+		sg->length = total_allocated_dce_data(data_list);
+	else
+		sg->length = total_size_dce_data(data_list);
+
 	return 0;
 }
 EXPORT_SYMBOL(attach_data_list_to_sg);
diff --git a/drivers/staging/fsl_dce/tests/common/test_frame_helpers.h b/drivers/staging/fsl_dce/tests/common/test_frame_helpers.h
index 792b38d..b9abc30 100644
--- a/drivers/staging/fsl_dce/tests/common/test_frame_helpers.h
+++ b/drivers/staging/fsl_dce/tests/common/test_frame_helpers.h
@@ -80,6 +80,12 @@ size_t total_size_dce_data(struct dce_data_list_t *dce_data);
 
 bool is_multi_buffer(struct dce_data_list_t *data);
 
+/**
+ * alloc_dce_data - allocate memory to use with dce
+ * @length: total bytes to allocates
+ * @block_size: contiguous blocks to allocate
+ * @dce_data: storage for allocated memory
+ */
 int alloc_dce_data(size_t length, size_t block_size,
 			struct dce_data_list_t *dce_data);
 
@@ -88,17 +94,37 @@ int free_dce_data(struct dce_data_list_t *dce_data);
 int copy_input_to_dce_data(char *input, size_t ilen,
 			struct dce_data_list_t *data_list);
 
-int copy_dce_data_to_buffer(struct dce_data_list_t *data_list, size_t cpylen,
-			char *buffer, size_t buf_size);
+int copy_output_dce_data_to_buffer(struct dce_data_list_t *data_list,
+		size_t cpylen, char *buffer, size_t buf_size);
 
+/**
+ * dma_map_dce_data - dma_map the data entries
+ * @data_list: list of data items
+ * @dir: direction of dma mapping
+ *
+ * Each data item will have a dma_map invoked and the resulting mapping
+ * will be added to the sg table.
+ */
 int dma_map_dce_data(struct dce_data_list_t *data_list,
 		enum dma_data_direction dir);
 
 int dma_unmap_dce_data(struct dce_data_list_t *data_list,
 		enum dma_data_direction dir);
 
+/**
+ * attach_data_list_to_sg - set the dma address of data list to sg
+ * @sg: the sg to attach data_list to. The dma_addr of the data_list
+ *	and the length field will be set.
+ * @data_list: this can be a single buffer or multi buffer data list.
+ * @use_raw_size: if true use the allocated size of data_list when setting
+ *	length in @sg. Otherwise calculate the data length in @data_list
+ *	and use that value. Typically an input frame will use a value of false
+ *	and an output frame will use a value of true.
+ * @dir: direction of dma mapping
+ */
 int attach_data_list_to_sg(struct qm_sg_entry *sg,
 			struct dce_data_list_t *data_list,
+			bool use_raw_size,
 			enum dma_data_direction dir);
 
 int detach_data_list_from_sg(struct qm_sg_entry *sg,
diff --git a/drivers/staging/fsl_dce/tests/performance_simple/dce_perf_simple.c b/drivers/staging/fsl_dce/tests/performance_simple/dce_perf_simple.c
index d14a6d7..39e3348 100644
--- a/drivers/staging/fsl_dce/tests/performance_simple/dce_perf_simple.c
+++ b/drivers/staging/fsl_dce/tests/performance_simple/dce_perf_simple.c
@@ -65,26 +65,28 @@ MODULE_AUTHOR("Freescale Semiconductor, Inc");
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("DCE loopback example");
 
-#define USE_BMAN_OUTPUT
-#undef VERBOSE
-
 static int test_mode;
 module_param(test_mode, int, S_IRUGO);
-MODULE_PARM_DESC(test_mode, "test_mode: 0 is compression, 1 is decompression"
-		 " (default=0)");
+MODULE_PARM_DESC(test_mode, "test_mode: 0 is compression, 1 is decompression (default=0)");
+
+static int verbose_level; /* 0 low, 1 high */
+module_param(verbose_level, int, 0);
+MODULE_PARM_DESC(verbose_level, "verbosity level: 0 low, 1 is high (default=0)");
+
+static int bman_output = 1;
+module_param(bman_output, int, S_IRUGO);
+MODULE_PARM_DESC(test_mode, "bman_output: 0 don't use Bman, 1 use Bman output (default=1)");
 
 static int b_sg_block_size_code = DCE_TSIZE_4096B;
 module_param(b_sg_block_size_code, int, S_IRUGO);
-MODULE_PARM_DESC(b_sg_block_size_code, "Size of bman buffers used to create"
-		 " s/g tables (default=4096)");
+MODULE_PARM_DESC(b_sg_block_size_code, "Size of bman buffers used to create s/g tables (default=4096)");
 
 /* This is used for actual kmalloc */
 static int b_sg_block_size = 4096;
 
 static int b_sg_block_count = 50;
 module_param(b_sg_block_count, int, S_IRUGO);
-MODULE_PARM_DESC(b_sg_block_count, "Number of s/g bman buffers to release"
-		 " (default=50)");
+MODULE_PARM_DESC(b_sg_block_count, "Number of s/g bman buffers to release (default=50)");
 
 static int b_dexp = 12;
 module_param(b_dexp, int, S_IRUGO);
@@ -98,14 +100,11 @@ static uint32_t bman_data_buff_size;
 
 static int block_size = 4096;
 module_param(block_size, int, S_IRUGO);
-MODULE_PARM_DESC(block_size, "Size of individual input data blocks in s/g"
-		"  (default=4096)");
+MODULE_PARM_DESC(block_size, "Size of individual input data blocks in s/g (default=4096)");
 
 static int use_local_file;
 module_param(use_local_file, int, S_IRUGO);
-MODULE_PARM_DESC(use_local_file, "Use the included local header file for"
-		 " (de)compression. The value specifies the input size."
-		 " Supported value are 0, 2, 4, 8, 12 (default=0)");
+MODULE_PARM_DESC(use_local_file, "Use the included local header file for (de)compression. The value specifies the input size. Supported value are 0, 2, 4, 8, 12 (default=0)");
 
 static int comp_effort = DCE_PROCESS_CE_STATIC_HUFF_STRMATCH;
 module_param(comp_effort, int, S_IRUGO);
@@ -121,8 +120,7 @@ MODULE_PARM_DESC(out_file, "Output file result of (de)compression");
 
 static int comp_ratio = 4;
 module_param(comp_ratio, int, S_IRUGO);
-MODULE_PARM_DESC(comp_ratio, "The compresstion ratio to be used for allocat"
-		 " output data buffer");
+MODULE_PARM_DESC(comp_ratio, "The compresstion ratio to be used for allocat output data buffer");
 
 static int output_size;
 module_param(output_size, int, S_IRUGO);
@@ -134,8 +132,6 @@ MODULE_PARM_DESC(bman_data_size, "The size of the data buffer pool");
 
 static int b_data_block_count;
 
-extern unsigned long ppc_proc_freq;
-
 /* Break up data used for each channel to avoid contention for the
  * cache lines */
 struct test_data_s {
@@ -189,11 +185,12 @@ static int setup_buffer_pools(void)
 		pr_err("can't get sg buffer pool\n");
 		return -EINVAL;
 	}
-#ifdef VERBOSE
-	pr_info("Allocated bpool data %d and bpool sg %d\n",
-		bman_get_params(pool_data)->bpid,
-		bman_get_params(pool_sg)->bpid);
-#endif
+
+	if (verbose_level) {
+		pr_info("Allocated bpool data %d and bpool sg %d\n",
+			bman_get_params(pool_data)->bpid,
+			bman_get_params(pool_sg)->bpid);
+	}
 	return 0;
 }
 
@@ -254,9 +251,10 @@ static int empty_bman_data_pool(void)
 			count++;
 		}
 	} while (ret > 0);
-#ifdef VERBOSE
-	pr_info("Freed %d data buffers\n", count);
-#endif
+
+	if (verbose_level)
+		pr_info("Freed %d data buffers\n", count);
+
 	return 0;
 }
 
@@ -267,7 +265,7 @@ static int populate_bman_sg_pool(void)
 	void *cpumem;
 	int ret;
 
-	for (i = 0; i < b_sg_block_count ; i++) {
+	for (i = 0; i < b_sg_block_count; i++) {
 		cpumem = kmalloc(b_sg_block_size, GFP_KERNEL);
 		if (!cpumem) {
 			pr_err("Can't allocate s/g buffers\n");
@@ -300,9 +298,10 @@ static int empty_bman_sg_pool(void)
 			count++;
 		}
 	} while (ret > 0);
-#ifdef VERBOSE
-	pr_info("Freed %d sg entries\n", count);
-#endif
+
+	if (verbose_level)
+		pr_info("Freed %d sg entries\n", count);
+
 	return 0;
 }
 
@@ -385,8 +384,8 @@ static int copy_bman_output_to_buffer(struct qm_sg_entry *sg, size_t cpylen,
 		} while (1);
 
 		if (cpylen != cal_total_lenght) {
-			pr_info("total frame length != calulated length (%zu)"
-				" (%llu)\n", cpylen, cal_total_lenght);
+			pr_info("total frame length != calulated length (%zu) (%llu)\n",
+				cpylen, cal_total_lenght);
 		}
 	} else {
 		pr_info("output is simple frame from bman pool %u\n",
@@ -547,8 +546,7 @@ static int validate_module_params(void)
 	b_sg_block_size = 1 << (6 + b_sg_block_size_code);
 
 	if (!bman_data_size) {
-		pr_err("bman_data_size is zero. This is the size of all the"
-			" data in the bman data pool.\n");
+		pr_err("bman_data_size is zero. This is the size of all the data in the bman data pool.\n");
 		return -EINVAL;
 	}
 
@@ -738,8 +736,7 @@ void dce_loopback_shutdown(void)
 		estimate_Mbps *= scaled_val;
 		do_div(estimate_Mbps, 1000);
 
-		pr_info("Compression thoughput:      %llu Mbps"
-			" (%llu Mbps for 400 Mhz DCE)\n",
+		pr_info("Compression thoughput:      %llu Mbps (%llu Mbps for 400 Mhz DCE)\n",
 			comp_Mbps, estimate_Mbps);
 
 	} else {
@@ -757,8 +754,7 @@ void dce_loopback_shutdown(void)
 		estimate_Mbps *= scaled_val;
 		do_div(estimate_Mbps, 1000);
 
-		pr_info("Decompression thoughput:    %llu Mbps"
-			" (%llu Mbps for 400 Mhz DCE)\n",
+		pr_info("Decompression thoughput:    %llu Mbps (%llu Mbps for 400 Mhz DCE)\n",
 			decomp_Mbps, estimate_Mbps);
 	} else {
 		pr_info("Decompression thoughput: None\n");
@@ -828,69 +824,76 @@ static int do_operation(void)
 		&def_process_req->input_data);
 	if (ret)
 		pr_err("Error Allocating input data Line %d\n", __LINE__);
-#if 0
-	pr_info("Printing input_list info\n");
-	print_dce_data_list(&def_process_req->input_data);
-#endif
-
-#ifndef USE_BMAN_OUTPUT
-	/* allocate output dma contiguous memory. If compression allocate
-	 * 512 bytes more. If decompression, allocate x times more. */
-	if (test_mode == COMP_ONLY) {
-		ret = alloc_dce_data(test_data->input_data_len + output_size,
-			block_size,
-			&def_process_req->output_data);
-	} else {
-		/* maximum decompression size is 20 MB */
-		ret = alloc_dce_data(test_data->input_data_len * comp_ratio,
-			block_size,
-			&def_process_req->output_data);
+
+	if (verbose_level == 3) {
+		pr_info("Printing input_list info\n");
+		print_dce_data_list(&def_process_req->input_data);
+	}
+
+	if (!bman_output) {
+		/* allocate output dma contiguous memory. If compression
+		 * allocate 512 bytes more. If decompression, allocate x times
+		 * more.
+		 */
+		if (test_mode == COMP_ONLY) {
+			ret = alloc_dce_data(
+				test_data->input_data_len + output_size,
+				block_size, &def_process_req->output_data);
+		} else {
+			/* maximum decompression size is 20 MB */
+			ret = alloc_dce_data(
+				test_data->input_data_len * comp_ratio,
+				block_size, &def_process_req->output_data);
+		}
+		if (ret)
+			pr_err("Error Allocating Output Mem Line %d\n",
+				__LINE__);
 	}
-	if (ret)
-		pr_err("Error Allocating Output Mem Line %d\n", __LINE__);
-#endif
 
-#if 0
-	pr_info("Printing output_list info\n");
-	print_dce_data_list(&def_process_req->output_data);
-#endif
+	if (verbose_level == 3) {
+		pr_info("Printing output_list info\n");
+		print_dce_data_list(&def_process_req->output_data);
+	}
 
 	ret = copy_input_to_dce_data(test_data->input_data,
 		test_data->input_data_len, &def_process_req->input_data);
 	if (ret)
 		pr_err("Line %d\n", __LINE__);
-#if 0
-	pr_info("Printing input after copy info\n");
-	print_dce_data_list(&def_process_req->input_data);
-#endif
+
+	if (verbose_level == 3) {
+		pr_info("Printing input after copy info\n");
+		print_dce_data_list(&def_process_req->input_data);
+	}
 
 	ret = dma_map_dce_data(&def_process_req->input_data, DMA_BIDIRECTIONAL);
 	if (ret)
 		pr_err("Line %d\n", __LINE__);
-#if 0
-	pr_info("Printing input after dma_map info\n");
-	print_dce_data_list(&def_process_req->input_data);
-#endif
 
-#ifndef USE_BMAN_OUTPUT
-	ret = dma_map_dce_data(&def_process_req->output_data,
+	if (verbose_level == 3) {
+		pr_info("Printing input after dma_map info\n");
+		print_dce_data_list(&def_process_req->input_data);
+	}
+
+	if (!bman_output) {
+		ret = dma_map_dce_data(&def_process_req->output_data,
 				DMA_BIDIRECTIONAL);
-	if (ret)
-		pr_err("Line %d\n", __LINE__);
+		if (ret)
+			pr_err("Line %d\n", __LINE__);
 
-#ifdef VERBOSE
-	pr_info("Printing output after dma_map info\n");
-	print_dce_data_list(&def_process_req->output_data);
-#endif
-	ret = attach_data_list_to_sg(&def_process_req->dce_cf[0],
-			&def_process_req->output_data,
+		if (verbose_level) {
+			pr_info("Printing output after dma_map info\n");
+			print_dce_data_list(&def_process_req->output_data);
+		}
+
+		ret = attach_data_list_to_sg(&def_process_req->dce_cf[0],
+			&def_process_req->output_data, true,
 			DMA_BIDIRECTIONAL);
-	if (ret)
-		pr_err("Line %d\n", __LINE__);
-#endif /* !USE_BMAN_OUTPUT */
+		if (ret)
+			pr_err("Line %d\n", __LINE__);
+	}
 
 	ret = attach_data_list_to_sg(&def_process_req->dce_cf[1],
-			&def_process_req->input_data,
+			&def_process_req->input_data, false,
 			DMA_BIDIRECTIONAL);
 	if (ret)
 		pr_err("Line %d\n", __LINE__);
@@ -906,12 +909,14 @@ static int do_operation(void)
 	def_process_req->input_fd.cong_weight = 1;
 	qm_fd_addr_set64(&def_process_req->input_fd,
 		fsl_dce_map(def_process_req->dce_cf));
-#if 0
-	print_dce_fd(def_process_req->input_fd);
-	print_dce_sg(def_process_req->dce_cf[0]);
-	print_dce_sg(def_process_req->dce_cf[1]);
-	print_dce_sg(def_process_req->dce_cf[2]);
-#endif
+
+	if (verbose_level == 3) {
+		print_dce_fd(def_process_req->input_fd);
+		print_dce_sg(def_process_req->dce_cf[0]);
+		print_dce_sg(def_process_req->dce_cf[1]);
+		print_dce_sg(def_process_req->dce_cf[2]);
+	}
+
 	start_time = mfatb();
 
 	ret = fsl_dce_chunk_process(&test_data->ctx, 0,
@@ -943,21 +948,22 @@ done:
 		pr_err("Unable to allocate output data\n");
 	test_data->out_data_len = def_process_req->dce_cf[0].length;
 
-#ifndef USE_BMAN_OUTPUT
-	ret = copy_dce_data_to_buffer(&def_process_req->output_data,
-		test_data->out_data_len,
-		test_data->out_data, test_data->out_data_len);
+	if (!bman_output) {
+		ret = copy_output_dce_data_to_buffer(
+			&def_process_req->output_data,
+			test_data->out_data_len,
+			test_data->out_data, test_data->out_data_len);
 
-	if (ret)
-		pr_err("Error %d\n", __LINE__);
-#else
-	ret = copy_bman_output_to_buffer(&def_process_req->dce_cf[0],
-		test_data->out_data_len,
-		test_data->out_data, test_data->out_data_len);
+		if (ret)
+			pr_err("Error %d\n", __LINE__);
+	} else {
+		ret = copy_bman_output_to_buffer(&def_process_req->dce_cf[0],
+			test_data->out_data_len,
+			test_data->out_data, test_data->out_data_len);
 
-	if (ret)
-		pr_err("Error %d\n", __LINE__);
-#endif
+		if (ret)
+			pr_err("Error %d\n", __LINE__);
+	}
 
 	ret = detach_scf64_from_sg(&def_process_req->dce_cf[2],
 			&def_process_req->scf,
@@ -965,19 +971,18 @@ done:
 	ret = detach_data_list_from_sg(&def_process_req->dce_cf[1],
 		&def_process_req->input_data, DMA_BIDIRECTIONAL);
 
-#ifndef USE_BMAN_OUTPUT
-	ret = detach_data_list_from_sg(&def_process_req->dce_cf[0],
+	if (!bman_output) {
+		ret = detach_data_list_from_sg(&def_process_req->dce_cf[0],
 			&def_process_req->output_data, DMA_BIDIRECTIONAL);
-	ret = dma_unmap_dce_data(&def_process_req->output_data,
+		ret = dma_unmap_dce_data(&def_process_req->output_data,
 				DMA_BIDIRECTIONAL);
-#endif
+	}
 
 	ret = dma_unmap_dce_data(&def_process_req->input_data,
 				DMA_BIDIRECTIONAL);
 
-#ifndef USE_BMAN_OUTPUT
-	free_dce_data(&def_process_req->output_data);
-#endif
+	if (!bman_output)
+		free_dce_data(&def_process_req->output_data);
 
 	free_dce_data(&def_process_req->input_data);
 	kfree(def_process_req);
diff --git a/drivers/staging/fsl_dce/tests/performance_simple/dce_sf_perf_simple.c b/drivers/staging/fsl_dce/tests/performance_simple/dce_sf_perf_simple.c
index 2d9c439..d0e5fe0 100644
--- a/drivers/staging/fsl_dce/tests/performance_simple/dce_sf_perf_simple.c
+++ b/drivers/staging/fsl_dce/tests/performance_simple/dce_sf_perf_simple.c
@@ -69,6 +69,10 @@ static int test_mode;
 module_param(test_mode, int, S_IRUGO);
 MODULE_PARM_DESC(test_mode, "test_mode: 0 is compression, 1 is decompression (default=0)");
 
+static int verbose_level; /* 0 low, 1 high */
+module_param(verbose_level, int, 0);
+MODULE_PARM_DESC(verbose_level, "verbosity level: 0 low, 1 is high (default=0)");
+
 static int bman_output = 1;
 module_param(bman_output, int, S_IRUGO);
 MODULE_PARM_DESC(test_mode, "bman_output: 0 don't use Bman, 1 use Bman output (default=1)");
@@ -86,10 +90,10 @@ MODULE_PARM_DESC(b_sg_block_count, "Number of s/g bman buffers to release (defau
 
 static int b_dexp = 12;
 module_param(b_dexp, int, S_IRUGO);
-MODULE_PARM_DESC(b_dexp, "Bman dexp value, default=");
+MODULE_PARM_DESC(b_dexp, "Bman dexp value, default=12");
 static int b_dmant = 1;
 module_param(b_dmant, int, S_IRUGO);
-MODULE_PARM_DESC(b_dmant, "Bman dmant value, default=");
+MODULE_PARM_DESC(b_dmant, "Bman dmant value, default=1");
 
 static uint32_t bman_data_buff_size;
 
@@ -127,7 +131,7 @@ MODULE_PARM_DESC(bman_data_size, "The size of the data buffer pool in bytes");
 
 static int chunking_size = 4096;
 module_param(chunking_size, int, S_IRUGO);
-MODULE_PARM_DESC(chunking_size, "How much input to send at a time");
+MODULE_PARM_DESC(chunking_size, "How much input bytes to send at a time");
 
 static int b_data_block_count;
 
@@ -1001,14 +1005,14 @@ static int do_operation(void)
 
 			ret = attach_data_list_to_sg(
 				&def_process_req->dce_cf[0],
-				&def_process_req->output_data,
+				&def_process_req->output_data, true,
 				DMA_BIDIRECTIONAL);
 			if (ret)
 				pr_err("Line %d\n", __LINE__);
 		}
 
 		ret = attach_data_list_to_sg(&def_process_req->dce_cf[1],
-				&def_process_req->input_data,
+				&def_process_req->input_data, false,
 				DMA_BIDIRECTIONAL);
 		if (ret)
 			pr_err("Line %d\n", __LINE__);
@@ -1101,7 +1105,7 @@ done:
 		/* Need to determine if this output is pre-built or Bman */
 		if (!def_process_req->dce_cf[0].bpid) {
 			if (def_process_req->dce_cf[0].length) {
-				ret = copy_dce_data_to_buffer(
+				ret = copy_output_dce_data_to_buffer(
 					&def_process_req->output_data,
 					def_process_req->dce_cf[0].length,
 					p_out,
-- 
2.0.2

