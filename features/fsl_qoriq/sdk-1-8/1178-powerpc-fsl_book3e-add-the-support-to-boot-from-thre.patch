From 1efebbde4790efdfcb6945ecc591450843c59586 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Mon, 11 Mar 2013 17:46:01 +0800
Subject: [PATCH 1178/1207] powerpc/fsl_book3e: add the support to boot from
 thread1 in kdump boot

In kdump boot, we can only boot from the cpu which get a panic.
That means we have to disable the thread0 if the panic occurs on
thread1. We also can't migrate the kdump boot sequence to a thread0
as what we do in kexec boot.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 arch/powerpc/kernel/exceptions-64e.S | 33 +++++++++++++++++++++++----------
 arch/powerpc/kernel/misc_64.S        | 23 ++++++++++++++++++++++-
 arch/powerpc/platforms/85xx/smp.c    |  4 ++--
 3 files changed, 47 insertions(+), 13 deletions(-)

diff --git a/arch/powerpc/kernel/exceptions-64e.S b/arch/powerpc/kernel/exceptions-64e.S
index 6490ea9..ac3c474 100644
--- a/arch/powerpc/kernel/exceptions-64e.S
+++ b/arch/powerpc/kernel/exceptions-64e.S
@@ -1624,29 +1624,42 @@ BEGIN_FTR_SECTION
 	cmpi 0,r3,2
 	blt 2f
 
-	/* Disable the other thread */
+	/* Disable the other thread. In kdump boot, we may need to enable
+	 * thread0 here if the thread1 is the boot cpu. */
+#ifdef CONFIG_CRASH_DUMP
+	mfspr	r3,SPRN_TIR
+	cmpwi	0,r3,0
+	li	r3,1
+	bne	10f
+#endif
 	li	r3,2
-	mtspr	SPRN_TENC,r3
+10:	mtspr	SPRN_TENC,r3
 
-1:	mfspr	r3,SPRN_TENSR
-	andi.	r3,r3,2
+1:	mfspr	r4,SPRN_TENSR
+	and.	r4,r4,r3
 	bne	1b
 
 #ifndef CONFIG_PPC_DISABLE_THREADS
 	/* Configure the MSR per the default */
-	LOAD_REG_IMMEDIATE(r3, MSR_KERNEL);
-	MTTMR(TMRN_IMSR1, 3);
+	LOAD_REG_IMMEDIATE(r4, MSR_KERNEL);
 
 	/*
 	 * Set the NIA for the secondary thread to
 	 * generic_secondary_thread_init
 	 */
-	LOAD_REG_ADDR(r3, .fsl_secondary_thread_init);
-	MTTMR(TMRN_INIA1, 3);
+	LOAD_REG_ADDR(r5, .fsl_secondary_thread_init);
+
+	cmpwi	0,r3,1
+	beq	20f
+	MTTMR(TMRN_IMSR1, 4);
+	MTTMR(TMRN_INIA1, 5);
+	b	30f
+
+20:	MTTMR(TMRN_IMSR0, 4);
+	MTTMR(TMRN_INIA0, 5);
 
 	/* Release the other thread. It will spin until kick_cpu is called */
-	li	r3, 2
-	mtspr	SPRN_TENS, r3
+30: mtspr	SPRN_TENS, r3
 #endif
 END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 2:	blr
diff --git a/arch/powerpc/kernel/misc_64.S b/arch/powerpc/kernel/misc_64.S
index 3dd2215..05b6247 100644
--- a/arch/powerpc/kernel/misc_64.S
+++ b/arch/powerpc/kernel/misc_64.S
@@ -469,7 +469,28 @@ _GLOBAL(scom970_write)
 _GLOBAL(kexec_wait)
 #ifdef CONFIG_PPC_BOOK3E
 BEGIN_FTR_SECTION
-	/* Disable all the secondary threads */
+	/* Disable all the secondary threads. In kdump boot, we will
+	 * disable the thread0 if there is a panic on thread1 */
+#ifdef CONFIG_KEXEC
+	LOAD_REG_ADDR(r4,crashing_cpu)
+	lwz	r4,0(r4)
+	cmpwi	0,r4,-1
+	beq	10f
+	lhz	r5,PACAPACAINDEX(r13)
+	LOAD_REG_ADDR(r6,threads_per_core)
+	lwz	r6,0(r6)
+	addi	r6,r6,-1
+	andc	r4,r4,r6
+	andc	r5,r5,r6
+	cmpw	r4,r5
+	bne	10f
+	mfspr	r4,SPRN_TIR
+	li	r5,1
+	sld	r4,r5,r4
+	mtspr	SPRN_TENC,r4
+	b	$
+10:
+#endif
 	andi.	r4,r3,1
 	beq	1f
 	li	r4,2
diff --git a/arch/powerpc/platforms/85xx/smp.c b/arch/powerpc/platforms/85xx/smp.c
index 6aac8fe..e5cbbe4 100644
--- a/arch/powerpc/platforms/85xx/smp.c
+++ b/arch/powerpc/platforms/85xx/smp.c
@@ -577,8 +577,8 @@ static void mpc85xx_smp_machine_kexec(struct kimage *image)
 	}
 #endif
 
-	if (cpu_has_feature(CPU_FTR_SMT))
-		set_cpus_allowed_ptr(current, cpumask_of(boot_cpuid));
+	if (cpu_has_feature(CPU_FTR_SMT) && (crashing_cpu == -1))
+			set_cpus_allowed_ptr(current, cpumask_of(boot_cpuid));
 
 	default_machine_kexec(image);
 }
-- 
2.0.2

