From e9ecfa26009cfa2a3a3e3a2ef364516ea1276fe8 Mon Sep 17 00:00:00 2001
From: Ramneek Mehresh <ramneek.mehresh@freescale.com>
Date: Tue, 2 Dec 2014 10:29:36 +0530
Subject: [PATCH 1087/1094] drivers:usb:pm: Fix sleep/deep-sleep issue for
 external ULPI phy

External ULPI phy registers are not to be restored
during normal sleep when phy power is not cut-off.
In addition, phy saving/restoration needs to happen only
during deep-sleep

Signed-off-by: Ramneek Mehresh <ramneek.mehresh@freescale.com>
Change-Id: I840724ff3cf4e85582e2e1c73b1ff9798dfd7304
Reviewed-on: http://git.am.freescale.net:8181/24849
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Nikhil Badola <nikhil.badola@freescale.com>
Reviewed-by: Matthew Weigel <Matthew.Weigel@freescale.com>
[Lu:Original patch taken from
QorIQ-SDK-V1.7-SOURCE-20141218-yocto.iso]
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/usb/host/ehci-fsl.c      | 27 ++++++++++++++++++++-------
 drivers/usb/host/fsl-mph-dr-of.c |  2 ++
 include/linux/fsl_devices.h      |  1 +
 3 files changed, 23 insertions(+), 7 deletions(-)

diff --git a/drivers/usb/host/ehci-fsl.c b/drivers/usb/host/ehci-fsl.c
index ba16846..b9c0c58 100644
--- a/drivers/usb/host/ehci-fsl.c
+++ b/drivers/usb/host/ehci-fsl.c
@@ -345,6 +345,7 @@ static int ehci_fsl_setup_phy(struct usb_hcd *hcd,
 		portsc |= PORT_PTS_PTW;
 		/* fall through */
 	case FSL_USB2_PHY_UTMI:
+	case FSL_USB2_PHY_UTMI_DUAL:
 		if (pdata->has_fsl_erratum_a006918) {
 			pr_warn("fsl-ehci: USB PHY clock invalid\n");
 			return -EINVAL;
@@ -514,10 +515,16 @@ static int ehci_fsl_save_context(struct usb_hcd *hcd)
 	struct ehci_fsl *ehci_fsl = hcd_to_ehci_fsl(hcd);
 	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
 	void __iomem *non_ehci = hcd->regs;
+	struct device *dev = hcd->self.controller;
+	struct fsl_usb2_platform_data *pdata = dev_get_platdata(dev);
 
-	phy_reg = ioremap(FSL_USB_PHY_ADDR, sizeof(struct ccsr_usb_phy));
-	_memcpy_fromio((void *)&ehci_fsl->saved_phy_regs, phy_reg,
+	if (pdata->phy_mode == FSL_USB2_PHY_UTMI_DUAL) {
+		phy_reg = ioremap(FSL_USB_PHY_ADDR,
+				sizeof(struct ccsr_usb_phy));
+		_memcpy_fromio((void *)&ehci_fsl->saved_phy_regs, phy_reg,
 				sizeof(struct ccsr_usb_phy));
+	}
+
 	_memcpy_fromio((void *)&ehci_fsl->saved_regs, ehci->regs,
 					sizeof(struct ehci_regs));
 	ehci_fsl->usb_ctrl = ioread32be(non_ehci + FSL_SOC_USB_CTRL);
@@ -531,10 +538,15 @@ static int ehci_fsl_restore_context(struct usb_hcd *hcd)
 	struct ehci_fsl *ehci_fsl = hcd_to_ehci_fsl(hcd);
 	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
 	void __iomem *non_ehci = hcd->regs;
+	struct device *dev = hcd->self.controller;
+	struct fsl_usb2_platform_data *pdata = dev_get_platdata(dev);
 
-	if (phy_reg)
-		_memcpy_toio(phy_reg, (void *)&ehci_fsl->saved_phy_regs,
+	if (pdata->phy_mode == FSL_USB2_PHY_UTMI_DUAL) {
+		if (phy_reg)
+			_memcpy_toio(phy_reg,
+				(void *)&ehci_fsl->saved_phy_regs,
 				sizeof(struct ccsr_usb_phy));
+	}
 
 	_memcpy_toio(ehci->regs, (void *)&ehci_fsl->saved_regs,
 					sizeof(struct ehci_regs));
@@ -719,11 +731,11 @@ static int ehci_fsl_drv_suspend(struct device *dev)
 	ehci_prepare_ports_for_controller_suspend(hcd_to_ehci(hcd),
 			device_may_wakeup(dev));
 
-	ehci_fsl_save_context(hcd);
-
 	if (!fsl_deep_sleep())
 		return 0;
 
+	ehci_fsl_save_context(hcd);
+
 	ehci_fsl->usb_ctrl = ioread32be(non_ehci + FSL_SOC_USB_CTRL);
 	return 0;
 }
@@ -735,7 +747,8 @@ static int ehci_fsl_drv_resume(struct device *dev)
 	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
 	void __iomem *non_ehci = hcd->regs;
 
-	ehci_fsl_restore_context(hcd);
+	if (fsl_deep_sleep())
+		ehci_fsl_restore_context(hcd);
 
 #if defined(CONFIG_FSL_USB2_OTG) || defined(CONFIG_FSL_USB2_OTG_MODULE)
 	struct usb_bus host = hcd->self;
diff --git a/drivers/usb/host/fsl-mph-dr-of.c b/drivers/usb/host/fsl-mph-dr-of.c
index 9fa31f6..a424a41 100644
--- a/drivers/usb/host/fsl-mph-dr-of.c
+++ b/drivers/usb/host/fsl-mph-dr-of.c
@@ -70,6 +70,8 @@ static enum fsl_usb2_phy_modes determine_usb_phy(const char *phy_type)
 		return FSL_USB2_PHY_UTMI;
 	if (!strcasecmp(phy_type, "utmi_wide"))
 		return FSL_USB2_PHY_UTMI_WIDE;
+	if (!strcasecmp(phy_type, "utmi_dual"))
+		return FSL_USB2_PHY_UTMI_DUAL;
 	if (!strcasecmp(phy_type, "serial"))
 		return FSL_USB2_PHY_SERIAL;
 
diff --git a/include/linux/fsl_devices.h b/include/linux/fsl_devices.h
index 8c87c37..7308073 100644
--- a/include/linux/fsl_devices.h
+++ b/include/linux/fsl_devices.h
@@ -65,6 +65,7 @@ enum fsl_usb2_phy_modes {
 	FSL_USB2_PHY_UTMI,
 	FSL_USB2_PHY_UTMI_WIDE,
 	FSL_USB2_PHY_SERIAL,
+	FSL_USB2_PHY_UTMI_DUAL,
 };
 
 struct clk;
-- 
2.0.2

