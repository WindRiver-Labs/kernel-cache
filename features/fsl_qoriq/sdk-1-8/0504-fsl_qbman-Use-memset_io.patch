From 343752ae4c3692b2b4877460d42a55696cc8675b Mon Sep 17 00:00:00 2001
From: Emil Medve <Emilian.Medve@Freescale.com>
Date: Fri, 17 Jan 2014 10:57:34 -0600
Subject: [PATCH 504/987] fsl_qbman: Use memset_io()

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

This fixes the following sparse warnings:

warning: incorrect type in initializer (different modifiers)
   expected void *tmpp
   got void [noderef] *
warning: incorrect type in argument 1 (different modifiers)
   expected void volatile [noderef] *addr
   got void *tmpp

Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
Change-Id: Ib3adc29b944c0dafe31d6796b9bae24466d4879d
Reviewed-on: http://git.am.freescale.net:8181/8099
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Haiying Wang <Haiying.Wang@freescale.com>
Reviewed-by: Emilian Medve <Emilian.Medve@freescale.com>
---
 drivers/staging/fsl_qbman/bman_config.c | 4 ++--
 drivers/staging/fsl_qbman/qman_config.c | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/staging/fsl_qbman/bman_config.c b/drivers/staging/fsl_qbman/bman_config.c
index d7e677b..a0dfb29 100644
--- a/drivers/staging/fsl_qbman/bman_config.c
+++ b/drivers/staging/fsl_qbman/bman_config.c
@@ -291,8 +291,8 @@ static __init int parse_mem_property(struct device_node *node, const char *name,
 		flush_dcache_range(vaddr, vaddr + *sz);
 	} else if (zero) {
 		/* map as cacheable, non-guarded */
-		void *tmpp = ioremap_prot(*addr, *sz, 0);
-		memset(tmpp, 0, *sz);
+		void __iomem *tmpp = ioremap_prot(*addr, *sz, 0);
+		memset_io(tmpp, 0, *sz);
 		vaddr = (unsigned long)tmpp;
 		flush_dcache_range(vaddr, vaddr + *sz);
 		iounmap(tmpp);
diff --git a/drivers/staging/fsl_qbman/qman_config.c b/drivers/staging/fsl_qbman/qman_config.c
index 968a46d..188d40b 100644
--- a/drivers/staging/fsl_qbman/qman_config.c
+++ b/drivers/staging/fsl_qbman/qman_config.c
@@ -490,8 +490,8 @@ static __init int parse_mem_property(struct device_node *node, const char *name,
 		flush_dcache_range(vaddr, vaddr + *sz);
 	} else if (zero) {
 		/* map as cacheable, non-guarded */
-		void *tmpp = ioremap_prot(*addr, *sz, 0);
-		memset(tmpp, 0, *sz);
+		void __iomem *tmpp = ioremap_prot(*addr, *sz, 0);
+		memset_io(tmpp, 0, *sz);
 		vaddr = (unsigned long)tmpp;
 		flush_dcache_range(vaddr, vaddr + *sz);
 		iounmap(tmpp);
-- 
1.9.1

