From 33bb00abf8ebffddf9dac2947bdbcf3735a7d753 Mon Sep 17 00:00:00 2001
From: Emil Medve <Emilian.Medve@Freescale.com>
Date: Wed, 8 Jan 2014 04:00:45 -0600
Subject: [PATCH 471/987] fsl_qbman: Fix the checkpatch error type
 RETURN_PARENTHESES

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required

Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
Change-Id: I10ad551ab9607994560dda64ca088f0c23190e1a
Reviewed-on: http://git.am.freescale.net:8181/7768
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Haiying Wang <Haiying.Wang@freescale.com>
Reviewed-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Reviewed-by: Emilian Medve <Emilian.Medve@freescale.com>
---
 drivers/staging/fsl_qbman/bman_config.c | 4 ++--
 drivers/staging/fsl_qbman/bman_high.c   | 2 +-
 drivers/staging/fsl_qbman/dpa_alloc.c   | 4 ++--
 drivers/staging/fsl_qbman/qman_high.c   | 2 +-
 drivers/staging/fsl_qbman/qman_low.h    | 2 +-
 5 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/fsl_qbman/bman_config.c b/drivers/staging/fsl_qbman/bman_config.c
index 850823a..2b07ec2 100644
--- a/drivers/staging/fsl_qbman/bman_config.c
+++ b/drivers/staging/fsl_qbman/bman_config.c
@@ -218,7 +218,7 @@ static u32 __generate_thresh(u32 val, int roundup)
 			val++;
 	}
 	DPA_ASSERT(e < 0x10);
-	return (val | (e << 8));
+	return val | (e << 8);
 }
 
 static void bm_set_pool(struct bman *bm, u8 pool, u32 swdet, u32 swdxt,
@@ -366,7 +366,7 @@ static int __init fsl_bman_init(struct device_node *node)
 
 int bman_have_ccsr(void)
 {
-	return (bm ? 1 : 0);
+	return bm ? 1 : 0;
 }
 
 int bm_pool_set(u32 bpid, const u32 *thresholds)
diff --git a/drivers/staging/fsl_qbman/bman_high.c b/drivers/staging/fsl_qbman/bman_high.c
index da46a5a..03ca52d 100644
--- a/drivers/staging/fsl_qbman/bman_high.c
+++ b/drivers/staging/fsl_qbman/bman_high.c
@@ -702,7 +702,7 @@ int bman_rcr_is_empty(void)
 	avail = bm_rcr_get_fill(&p->p);
 	PORTAL_IRQ_UNLOCK(p, irqflags);
 	put_affine_portal();
-	return (avail == 0);
+	return avail == 0;
 }
 EXPORT_SYMBOL(bman_rcr_is_empty);
 
diff --git a/drivers/staging/fsl_qbman/dpa_alloc.c b/drivers/staging/fsl_qbman/dpa_alloc.c
index 40b1cbf..62363ba 100644
--- a/drivers/staging/fsl_qbman/dpa_alloc.c
+++ b/drivers/staging/fsl_qbman/dpa_alloc.c
@@ -95,7 +95,7 @@ EXPORT_SYMBOL(bman_alloc_bpid_range);
 
 static int bp_cleanup(u32 bpid)
 {
-	return (bman_shutdown_pool(bpid) == 0);
+	return bman_shutdown_pool(bpid) == 0;
 }
 void bman_release_bpid_range(u32 bpid, u32 count)
 {
@@ -129,7 +129,7 @@ EXPORT_SYMBOL(qman_alloc_fqid_range);
 
 static int fq_cleanup(u32 fqid)
 {
-	return (qman_shutdown_fq(fqid) == 0);
+	return qman_shutdown_fq(fqid) == 0;
 }
 void qman_release_fqid_range(u32 fqid, u32 count)
 {
diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index edbdced..815e2a8 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -2088,7 +2088,7 @@ int qman_eqcr_is_empty(void)
 	avail = qm_eqcr_get_fill(&p->p);
 	PORTAL_IRQ_UNLOCK(p, irqflags);
 	put_affine_portal();
-	return (avail == 0);
+	return avail == 0;
 }
 EXPORT_SYMBOL(qman_eqcr_is_empty);
 
diff --git a/drivers/staging/fsl_qbman/qman_low.h b/drivers/staging/fsl_qbman/qman_low.h
index cbf47af..f306f9e 100644
--- a/drivers/staging/fsl_qbman/qman_low.h
+++ b/drivers/staging/fsl_qbman/qman_low.h
@@ -312,7 +312,7 @@ static inline int qm_eqcr_init(struct qm_portal *portal,
 
 static inline unsigned int qm_eqcr_get_ci_stashing(struct qm_portal *portal)
 {
-	return ((qm_in(CFG) >> 28) & 0x7);
+	return (qm_in(CFG) >> 28) & 0x7;
 }
 
 static inline void qm_eqcr_finish(struct qm_portal *portal)
-- 
1.9.1

