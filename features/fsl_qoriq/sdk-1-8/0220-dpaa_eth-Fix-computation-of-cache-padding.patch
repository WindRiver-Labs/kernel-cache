From 9576ffe5bfccaf0d61cec96d5e25cff7b2f06591 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Thu, 6 Jun 2013 11:30:20 +0300
Subject: [PATCH 220/987] dpaa_eth: Fix computation of cache padding

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

When computing the padding between the beginning of a FD buffer and
the head of the skb associated to it, we wrongly assume that this
padding is always lower than PAGE_SIZE.

In ip forward scenarios with jumbo frames support enabled and Rx
extra headroom not zero, the above assumption is proven incorrect.

Properly compute the padding size in order to avoid skb corruption.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Change-Id: I24f08e3cc782a73cbd12d99445c326c530e3d8f2
Reviewed-on: http://git.am.freescale.net:8181/2898
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Bucur Madalin-Cristian-B32716 <madalin.bucur@freescale.com>
Reviewed-by: Sovaiala Cristian-Constantin-B39531 <Cristian.Sovaiala@freescale.com>
Reviewed-by: Hamciuc Bogdan-BHAMCIU1 <bogdan.hamciuc@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 8c0631e..f8fd203 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -1267,10 +1267,9 @@ static int dpa_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 static int dpa_process_one(struct dpa_percpu_priv_s *percpu_priv,
 		struct sk_buff *skb, struct dpa_bp *bp, const struct qm_fd *fd)
 {
-	dma_addr_t addr = qm_fd_addr(fd);
-	u32 addrlo = lower_32_bits(addr);
-	u32 skblo = lower_32_bits((unsigned long)skb->head);
-	u32 pad = (addrlo - skblo) & (PAGE_SIZE - 1);
+	dma_addr_t fd_addr = qm_fd_addr(fd);
+	unsigned long skb_addr = virt_to_phys(skb->head);
+	u32 pad = fd_addr - skb_addr;
 	unsigned int data_start;
 
 	(*percpu_priv->dpa_bp_count)--;
-- 
1.9.1

