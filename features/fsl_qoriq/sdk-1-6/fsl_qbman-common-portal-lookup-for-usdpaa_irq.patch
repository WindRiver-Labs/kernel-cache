From bbc187e2d44e098e8b9da817c5afec6c37dcb2af Mon Sep 17 00:00:00 2001
From: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Date: Tue, 21 May 2013 17:31:36 -0400
Subject: [PATCH 0369/1089] fsl_qbman: common portal lookup for usdpaa_irq

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

The fsl_usdpaa.c code to find the portal that corresponds to a given
mapped region already has to differentiate between qman and bman, so
localise it there under a single function, rather than having
fsl_usdpaa_irq.c distinguish as well and call qman and bman specific
functions.

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Change-Id: Ib8ac94e04fcaff76240cf7835056538ce67d9701
Reviewed-on: http://git.am.freescale.net:8181/2634
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Pledge Roy-R01356 <roy.pledge@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
---
 drivers/staging/fsl_qbman/bman_private.h   |  5 ----
 drivers/staging/fsl_qbman/dpa_sys.h        |  5 ++++
 drivers/staging/fsl_qbman/fsl_usdpaa.c     | 47 ++++++++----------------------
 drivers/staging/fsl_qbman/fsl_usdpaa_irq.c | 31 +++++---------------
 drivers/staging/fsl_qbman/qman_private.h   |  5 ----
 5 files changed, 24 insertions(+), 69 deletions(-)

diff --git a/drivers/staging/fsl_qbman/bman_private.h b/drivers/staging/fsl_qbman/bman_private.h
index 53aa21b..e57ca68 100644
--- a/drivers/staging/fsl_qbman/bman_private.h
+++ b/drivers/staging/fsl_qbman/bman_private.h
@@ -83,11 +83,6 @@ struct bm_portal_config *bm_get_unused_portal(void);
 void bm_put_unused_portal(struct bm_portal_config *pcfg);
 void bm_set_liodns(struct bm_portal_config *pcfg);
 
-/* Lookup a BMan portal associated with an FD */
-struct bm_portal_config *usdpaa_get_bm_portal_config(struct file *filp,
-						     void *cinh);
-
-
 /* Pool logic in the portal driver, during initialisation, needs to know if
  * there's access to CCSR or not (if not, it'll cripple the pool allocator). */
 #ifdef CONFIG_FSL_BMAN_CONFIG
diff --git a/drivers/staging/fsl_qbman/dpa_sys.h b/drivers/staging/fsl_qbman/dpa_sys.h
index 9306d87..2f33351 100644
--- a/drivers/staging/fsl_qbman/dpa_sys.h
+++ b/drivers/staging/fsl_qbman/dpa_sys.h
@@ -321,4 +321,9 @@ err:
 	return -EINVAL;
 }
 
+/* Hooks from fsl_usdpaa_irq.c to fsl_usdpaa.c */
+int usdpaa_get_portal_config(struct file *filp, void *cinh,
+			     enum usdpaa_portal_type ptype, unsigned int *irq,
+			     void **iir_reg);
+
 #endif /* DPA_SYS_H */
diff --git a/drivers/staging/fsl_qbman/fsl_usdpaa.c b/drivers/staging/fsl_qbman/fsl_usdpaa.c
index 02bc9a9..7df18e1 100644
--- a/drivers/staging/fsl_qbman/fsl_usdpaa.c
+++ b/drivers/staging/fsl_qbman/fsl_usdpaa.c
@@ -1277,56 +1277,33 @@ static long usdpaa_ioctl_compat(struct file *fp, unsigned int cmd,
 	return -EINVAL;
 }
 
-struct qm_portal_config *usdpaa_get_qm_portal_config(struct file *filp,
-						     void *hint)
+int usdpaa_get_portal_config(struct file *filp, void *cinh,
+			     enum usdpaa_portal_type ptype, unsigned int *irq,
+			     void **iir_reg)
 {
 	/* Walk the list of portals for filp and return the config
 	   for the portal that matches the hint */
-
-	struct ctx *context;
-	struct portal_mapping *portal;
-
-	/* First sanitize the filp */
-	if (filp->f_op->open != usdpaa_open)
-		return NULL;
-	context = filp->private_data;
-	spin_lock(&context->lock);
-	list_for_each_entry(portal, &context->portals, list) {
-		if (portal->user.type == usdpaa_portal_qman &&
-		    portal->user.addr.cinh == hint) {
-			spin_unlock(&context->lock);
-			return portal->qportal;
-		}
-	}
-	spin_unlock(&context->lock);
-	return NULL;
-}
-
-struct bm_portal_config *usdpaa_get_bm_portal_config(struct file *filp,
-						     void *hint)
-{
-	/* Walk the list of portals for filp and return the config
-	   for the portal that matches the hint */
-
 	struct ctx *context;
 	struct portal_mapping *portal;
 
 	/* First sanitize the filp */
 	if (filp->f_op->open != usdpaa_open)
-		return NULL;
-
+		return -ENODEV;
 	context = filp->private_data;
-
 	spin_lock(&context->lock);
 	list_for_each_entry(portal, &context->portals, list) {
-		if (portal->user.type == usdpaa_portal_bman &&
-		    portal->user.addr.cinh == hint) {
+		if (portal->user.type == ptype &&
+		    portal->user.addr.cinh == cinh) {
 			spin_unlock(&context->lock);
-			return portal->bportal;
+			*irq = portal->qportal->public_cfg.irq;
+			*iir_reg = portal->qportal->addr_virt[1] +
+				((ptype == usdpaa_portal_qman) ? QM_REG_IIR :
+								 BM_REG_IIR);
+			return 0;
 		}
 	}
 	spin_unlock(&context->lock);
-	return NULL;
+	return -EINVAL;
 }
 
 static const struct file_operations usdpaa_fops = {
diff --git a/drivers/staging/fsl_qbman/fsl_usdpaa_irq.c b/drivers/staging/fsl_qbman/fsl_usdpaa_irq.c
index f36e8b2..54073fb 100644
--- a/drivers/staging/fsl_qbman/fsl_usdpaa_irq.c
+++ b/drivers/staging/fsl_qbman/fsl_usdpaa_irq.c
@@ -119,30 +119,13 @@ static int map_irq(struct file *fp, struct usdpaa_ioctl_irq_map *irq_map)
 		return -EINVAL;
 	}
 
-	if (irq_map->type == usdpaa_portal_qman) {
-		struct qm_portal_config *qportal;
-		qportal = usdpaa_get_qm_portal_config(ctx->usdpaa_filp,
-						   irq_map->portal_cinh);
-		if (!qportal) {
-			pr_debug("Couldn't locate QMan Portal\n");
-			fput(ctx->usdpaa_filp);
-			return -EINVAL;
-		}
-		/* Lookup IRQ number for portal */
-		ctx->irq_num = qportal->public_cfg.irq;
-		ctx->inhibit_addr = qportal->addr_virt[1] + QM_REG_IIR;
-	} else {
-		struct bm_portal_config *bportal;
-		bportal = usdpaa_get_bm_portal_config(ctx->usdpaa_filp,
-					      irq_map->portal_cinh);
-		if (!bportal) {
-			pr_debug("Couldn't locate BMan Portal\n");
-			fput(ctx->usdpaa_filp);
-			return -EINVAL;
-		}
-		/* Lookup IRQ number for portal */
-		ctx->irq_num = bportal->public_cfg.irq;
-		ctx->inhibit_addr = bportal->addr_virt[1] + BM_REG_IIR;
+	ret = usdpaa_get_portal_config(ctx->usdpaa_filp, irq_map->portal_cinh,
+				       irq_map->type, &ctx->irq_num,
+				       &ctx->inhibit_addr);
+	if (ret) {
+		pr_debug("USDPAA IRQ couldn't identify portal\n");
+		fput(ctx->usdpaa_filp);
+		return ret;
 	}
 
 	ctx->irq_set = 1;
diff --git a/drivers/staging/fsl_qbman/qman_private.h b/drivers/staging/fsl_qbman/qman_private.h
index 6179943..b21efe6 100644
--- a/drivers/staging/fsl_qbman/qman_private.h
+++ b/drivers/staging/fsl_qbman/qman_private.h
@@ -235,11 +235,6 @@ int qman_testwrite_cgr(struct qman_cgr *cgr, u64 i_bcnt,
 int qman_setup_fq_lookup_table(size_t num_entries);
 #endif
 
-/* Lookup a QMan portal associated with an FD */
-struct qm_portal_config *usdpaa_get_qm_portal_config(struct file *filp,
-						     void *cinh);
-
-
 
 /*************************************************/
 /*   QMan s/w corenet portal, low-level i/face   */
-- 
2.0.2

