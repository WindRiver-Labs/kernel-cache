From 8f3d710cc767207d61e8d3c3cbdda6f43b23dbbc Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Fri, 10 Apr 2015 14:23:58 +0800
Subject: [PATCH 3/3] fsl: tdm: fix some compile warnings

Fix the below warnings:

drivers/tdm/tdm-core.c: In function 'tdm_add_adapter':
drivers/tdm/tdm-core.c:204:2: warning: 'idr_pre_get' is deprecated (declared at include/linux/idr.h:155) [-Wdeprecated-declarations]
  if (idr_pre_get(&tdm_adapter_idr, GFP_KERNEL) == 0)
  ^
drivers/tdm/tdm-core.c:208:2: warning: 'idr_get_new' is deprecated (declared at include/linux/idr.h:185) [-Wdeprecated-declarations]
  res = idr_get_new(&tdm_adapter_idr, adapter, &id);
  ^

drivers/tdm/device/tdm_fsl.c: In function 'tdm_fsl_reg_init':
drivers/tdm/device/tdm_fsl.c:416:14: warning: unused variable 'base' [-Wunused-variable]
  phys_addr_t base = get_immrbase();
              ^
drivers/tdm/device/tdm_fsl.c: At top level:
drivers/tdm/device/tdm_fsl.c:200:20: warning: 'tdm_err_isr' defined but not used [-Wunused-function]
 static irqreturn_t tdm_err_isr(int irq, void *p)
                    ^
  CC [M]  drivers/staging/lttng2/lttng-ring-buffer-client-overwrite.o
  CC [M]  drivers/tdm/test/tdm_test.o
  CC [M]  drivers/staging/lttng2/lttng-ring-buffer-metadata-client.o
drivers/tdm/test/tdm_test.c:59:25: warning: 'tdmport' defined but not used [-Wunused-variable]
 static struct tdm_port *tdmport;
                         ^

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/tdm/device/tdm_fsl.c |   82 ------------------------------------------
 drivers/tdm/tdm-core.c       |   16 ++------
 drivers/tdm/test/tdm_test.c  |    1 -
 3 files changed, 4 insertions(+), 95 deletions(-)

diff --git a/drivers/tdm/device/tdm_fsl.c b/drivers/tdm/device/tdm_fsl.c
index ac6a431..99ae9d2 100644
--- a/drivers/tdm/device/tdm_fsl.c
+++ b/drivers/tdm/device/tdm_fsl.c
@@ -197,87 +197,6 @@ static void rx_tcd_init(struct tdm_priv *priv)
 	    ALIGN_SIZE(physaddr, ALIGNED_32_BYTES);
 }
 
-static irqreturn_t tdm_err_isr(int irq, void *p)
-{
-	int ret = IRQ_NONE;
-	u32 status, mask, val;
-	u32 dmac_err;
-	struct tdm_priv *priv;
-	u32 ch;
-	priv = p;
-
-	if (!priv) {
-		pr_err("%s: Invalid handle\n", __func__);
-		return -EINVAL;
-	}
-
-	/* transmit errors */
-	status = in_be32(&priv->tdm_regs->ter);
-	mask = in_be32(&priv->tdm_regs->tier);
-	val = status & mask;
-	out_be32(&priv->tdm_regs->ter, val);
-
-	/* Transmit under Run error */
-	if (val & TIER_TUEE)
-		dev_err(priv->device, "TDM::Transmit Under Run error\n");
-
-	/* Transmit Sync Error */
-	if (val & TIER_TSEEE)
-		dev_err(priv->device, "TDM::Transmit Sync error\n");
-
-	if (val)
-		ret = IRQ_HANDLED;
-
-	/* receive errors */
-	status = in_be32(&priv->tdm_regs->rer);
-	mask = in_be32(&priv->tdm_regs->rier);
-	val = status & mask;
-	out_be32(&priv->tdm_regs->rer, val);
-
-	/* Receiver Over run error */
-	if (val & RIER_ROEE)
-		dev_err(priv->device, "TDM::Receive  Over Run error\n");
-
-	/* Receive Sync Error  */
-	if (val & RIER_RSEEE)
-		dev_err(priv->device, "TDM::Receive Sync error\n");
-
-	if (val)
-		ret = IRQ_HANDLED;
-
-	/* Handling of DMA Errors */
-	dmac_err = in_be32(&priv->dmac_regs->dmaes);
-	if (!(dmac_err & DMAES_VLD))
-		return ret;
-
-	ch = DMAES_ERRCHN(dmac_err);
-
-	if (dmac_err & DMAES_CPE)
-		dev_err(priv->device, "TDM::Channel priority error\n");
-	if (dmac_err & DMAES_GPE)
-		dev_err(priv->device, "TDM::Group priority error\n");
-	if (dmac_err & DMAES_SAE)
-		dev_err(priv->device, "TDM::Source address error\n");
-	if (dmac_err & DMAES_SOE)
-		dev_err(priv->device, "TDM::Source offset error\n");
-	if (dmac_err & DMAES_DAE)
-		dev_err(priv->device, "TDM::Destination address error\n");
-	if (dmac_err & DMAES_DOE)
-		dev_err(priv->device, "TDM::Destination offset error\n");
-	if (dmac_err & DMAES_NCE)
-		dev_err(priv->device, "TDM::Nbytes citer error\n");
-	if (dmac_err & DMAES_SGE)
-		dev_err(priv->device, "TDM::Scatter gather error\n");
-	if (dmac_err & DMAES_DBE)
-		dev_err(priv->device, "TDM::Destination bus error\n");
-	if (dmac_err & DMAES_SBE)
-		dev_err(priv->device, "TDM::Source bus error\n");
-
-	/* Clear the error */
-	out_8(&priv->dmac_regs->dmacerr, (u8)ch);
-	return IRQ_HANDLED;
-}
-
 static irqreturn_t dmac_done_isr(int irq, void *p)
 {
 	u32 ch;
@@ -413,7 +332,6 @@ static int tdm_fsl_reg_init(struct tdm_priv *priv)
 {
 	int i;
 	int ch_size_type;
-	phys_addr_t base = get_immrbase();
 	struct tdm_adapter *adap;
 	if (!priv) {
 		pr_err("%s: Invalid handle\n", __func__);
diff --git a/drivers/tdm/tdm-core.c b/drivers/tdm/tdm-core.c
index 97bd338..49ddafd 100644
--- a/drivers/tdm/tdm-core.c
+++ b/drivers/tdm/tdm-core.c
@@ -194,25 +194,17 @@ static int tdm_register_adapter(struct tdm_adapter *adap)
  */
 int tdm_add_adapter(struct tdm_adapter *adapter)
 {
-	int id, res = TDM_E_OK;
+	int id;
 	if (!adapter) {
 		pr_err("%s:Invalid handle\n", __func__);
 		return -EINVAL;
 	}
 
-retry:
-	if (idr_pre_get(&tdm_adapter_idr, GFP_KERNEL) == 0)
-		return -ENOMEM;
-
 	mutex_lock(&tdm_core_lock);
-	res = idr_get_new(&tdm_adapter_idr, adapter, &id);
+	id = idr_alloc(&tdm_adapter_idr, adapter, 0, 0, GFP_KERNEL);
 	mutex_unlock(&tdm_core_lock);
-
-	if (res < 0) {
-		if (res == -EAGAIN)
-			goto retry;
-		return res;
-	}
+	if (id < 0)
+		return id;
 
 	adapter->id = id;
 	return tdm_register_adapter(adapter);
diff --git a/drivers/tdm/test/tdm_test.c b/drivers/tdm/test/tdm_test.c
index fe7d6e4..18da0b3 100644
--- a/drivers/tdm/test/tdm_test.c
+++ b/drivers/tdm/test/tdm_test.c
@@ -56,7 +56,6 @@ MODULE_AUTHOR("Hemant Agrawal <hemant@freescale.com> and "
 MODULE_DESCRIPTION(DRV_DESC);
 
 static struct tdm_driver test_tdmdev_driver;
-static struct tdm_port *tdmport;
 static int tdm_thread_state;
 
 static int tdm_thread(void *ptr)
-- 
1.7.5.4

