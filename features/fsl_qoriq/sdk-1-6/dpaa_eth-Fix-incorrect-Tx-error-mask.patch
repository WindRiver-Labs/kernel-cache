From eca1bcf0b524f56d51aadff6b0a71c4900beb66f Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Tue, 26 Nov 2013 16:47:22 +0200
Subject: [PATCH 0606/1089] dpaa_eth: Fix incorrect Tx error mask

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

The Tx FD status (received on Tx confirmation or Tx error queues)
has different error bits than the Rx FD status, but the driver code
incorrectly uses the same bitmask for both Rx and Tx error frames.

Fix the Tx bitmask such that an error FD status is identified and
printed correctly.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Change-Id: Id8f721800bdd51f7b0b62a34983f316420341861
Reviewed-on: http://git.am.freescale.net:8181/6877
Reviewed-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Thomas Trefny <Tom.Trefny@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/7680
Reviewed-by: Madalin-Cristian Bucur <madalin.bucur@freescale.com>
Tested-by: Madalin-Cristian Bucur <madalin.bucur@freescale.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c        |  8 ++++----
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h        |  6 +++++-
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c     |  4 ++--
 drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c | 10 +++++-----
 4 files changed, 16 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 8117d18..1abb677 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -157,7 +157,7 @@ static void _dpa_rx_error(struct net_device *net_dev,
 	else
 		if (netif_msg_hw(priv) && net_ratelimit())
 			netdev_err(net_dev, "Err FD status = 0x%08x\n",
-					fd->status & FM_FD_STAT_ERRORS);
+					fd->status & FM_FD_STAT_RX_ERRORS);
 
 	if (dpaa_eth_hooks.rx_error &&
 		dpaa_eth_hooks.rx_error(net_dev, fd, fqid) == DPAA_ETH_STOLEN)
@@ -190,7 +190,7 @@ static void _dpa_tx_error(struct net_device		*net_dev,
 
 	if (netif_msg_hw(priv) && net_ratelimit())
 		netdev_warn(net_dev, "FD status = 0x%08x\n",
-				fd->status & FM_FD_STAT_ERRORS);
+				fd->status & FM_FD_STAT_TX_ERRORS);
 
 	if (dpaa_eth_hooks.tx_error &&
 		dpaa_eth_hooks.tx_error(net_dev, fd, fqid) == DPAA_ETH_STOLEN)
@@ -287,10 +287,10 @@ static void __hot _dpa_tx_conf(struct net_device	*net_dev,
 
 	/* do we need the timestamp for the error frames? */
 
-	if (unlikely(fd->status & FM_FD_STAT_ERRORS) != 0) {
+	if (unlikely(fd->status & FM_FD_STAT_TX_ERRORS) != 0) {
 		if (netif_msg_hw(priv) && net_ratelimit())
 			netdev_warn(net_dev, "FD status = 0x%08x\n",
-					fd->status & FM_FD_STAT_ERRORS);
+					fd->status & FM_FD_STAT_TX_ERRORS);
 
 		percpu_priv->stats.tx_errors++;
 	}
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index 80ac5fb..64cee7f 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -99,13 +99,17 @@ struct dpa_buffer_layout_s {
 #define DPA_SGT_MAX_ENTRIES 16 /* maximum number of entries in SG Table */
 
 
-#define FM_FD_STAT_ERRORS						\
+#define FM_FD_STAT_RX_ERRORS						\
 	(FM_PORT_FRM_ERR_DMA | FM_PORT_FRM_ERR_PHYSICAL	| \
 	 FM_PORT_FRM_ERR_SIZE | FM_PORT_FRM_ERR_CLS_DISCARD | \
 	 FM_PORT_FRM_ERR_EXTRACTION | FM_PORT_FRM_ERR_NO_SCHEME	| \
 	 FM_PORT_FRM_ERR_ILL_PLCR | FM_PORT_FRM_ERR_PRS_TIMEOUT	| \
 	 FM_PORT_FRM_ERR_PRS_ILL_INSTRUCT | FM_PORT_FRM_ERR_PRS_HDR_ERR)
 
+#define FM_FD_STAT_TX_ERRORS \
+	(FM_PORT_FRM_ERR_UNSUPPORTED_FORMAT | \
+	 FM_PORT_FRM_ERR_LENGTH | FM_PORT_FRM_ERR_DMA)
+
 #ifndef CONFIG_FSL_DPAA_ETH_JUMBO_FRAME
 /* The raw buffer size must be cacheline aligned.
  * Normally we use 2K buffers.
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index 535a2cb..c423b04 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -530,10 +530,10 @@ void __hot _dpa_rx(struct net_device *net_dev,
 	int use_gro = net_dev->features & NETIF_F_GRO;
 	int *count_ptr;
 
-	if (unlikely(fd_status & FM_FD_STAT_ERRORS) != 0) {
+	if (unlikely(fd_status & FM_FD_STAT_RX_ERRORS) != 0) {
 		if (netif_msg_hw(priv) && net_ratelimit())
 			netdev_warn(net_dev, "FD status = 0x%08x\n",
-					fd_status & FM_FD_STAT_ERRORS);
+					fd_status & FM_FD_STAT_RX_ERRORS);
 
 		percpu_stats->rx_errors++;
 		goto _release_frame;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
index ef8164d..ab7b830 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
@@ -243,10 +243,10 @@ shared_rx_dqrr(struct qman_portal *portal, struct qman_fq *fq,
 	dpa_bp = dpa_bpid2pool(fd->bpid);
 	BUG_ON(!dpa_bp);
 
-	if (unlikely(fd->status & FM_FD_STAT_ERRORS) != 0) {
+	if (unlikely(fd->status & FM_FD_STAT_RX_ERRORS) != 0) {
 		if (netif_msg_hw(priv) && net_ratelimit())
 			netdev_warn(net_dev, "FD status = 0x%08x\n",
-					fd->status & FM_FD_STAT_ERRORS);
+					fd->status & FM_FD_STAT_RX_ERRORS);
 
 		percpu_priv->stats.rx_errors++;
 
@@ -376,7 +376,7 @@ shared_tx_error_dqrr(struct qman_portal                *portal,
 
 	if (netif_msg_hw(priv) && net_ratelimit())
 		netdev_warn(net_dev, "FD status = 0x%08x\n",
-				fd->status & FM_FD_STAT_ERRORS);
+				fd->status & FM_FD_STAT_TX_ERRORS);
 
 	if ((fd->format == qm_fd_sg) && (!dpa_bp->vaddr))
 		dpa_fd_release_sg(net_dev, fd);
@@ -407,10 +407,10 @@ shared_tx_default_dqrr(struct qman_portal              *portal,
 
 	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
 
-	if (unlikely(fd->status & FM_FD_STAT_ERRORS) != 0) {
+	if (unlikely(fd->status & FM_FD_STAT_TX_ERRORS) != 0) {
 		if (netif_msg_hw(priv) && net_ratelimit())
 			netdev_warn(net_dev, "FD status = 0x%08x\n",
-					fd->status & FM_FD_STAT_ERRORS);
+					fd->status & FM_FD_STAT_TX_ERRORS);
 
 		percpu_priv->stats.tx_errors++;
 	}
-- 
2.0.2

