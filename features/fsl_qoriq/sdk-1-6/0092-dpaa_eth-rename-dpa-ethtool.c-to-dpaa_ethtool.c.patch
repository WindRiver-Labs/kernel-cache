From 0a42fbe27343cab75b2b8edf789c5a891e68d773 Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@freescale.com>
Date: Mon, 20 Jan 2014 19:24:33 +0200
Subject: [PATCH 092/466] dpaa_eth: rename dpa-ethtool.c to dpaa_ethtool.c

Rename dpa-ethtool.c for file naming uniformity.

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
Change-Id: I8e1e3e36d8327d5e8f55562ffbd919971e3649c9
Reviewed-on: http://git.am.freescale.net:8181/8121
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Ruxandra Ioana Radulescu <ruxandra.radulescu@freescale.com>
(cherry picked from commit f24cc85c55242927f9f980f2a01394eb1950e9f8)
Reviewed-on: http://git.am.freescale.net:8181/8471
[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/Makefile       |    2 +-
 drivers/net/ethernet/freescale/dpa/dpa-ethtool.c  |  309 ---------------------
 drivers/net/ethernet/freescale/dpa/dpaa_ethtool.c |  309 +++++++++++++++++++++
 3 files changed, 310 insertions(+), 310 deletions(-)
 delete mode 100644 drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
 create mode 100644 drivers/net/ethernet/freescale/dpa/dpaa_ethtool.c

diff --git a/drivers/net/ethernet/freescale/dpa/Makefile b/drivers/net/ethernet/freescale/dpa/Makefile
index be8db25..e0196f7 100644
--- a/drivers/net/ethernet/freescale/dpa/Makefile
+++ b/drivers/net/ethernet/freescale/dpa/Makefile
@@ -15,7 +15,7 @@ obj-$(CONFIG_FSL_DPAA_ETH) += fsl-mac.o fsl-dpa.o fsl-dpa-common.o \
  fsl-dpa-base.o fsl-dpa-shared.o fsl-dpa-macless.o fsl-dpa-proxy.o
 obj-$(CONFIG_FSL_DPAA_OFFLINE_PORTS) += fsl-oh.o
 
-fsl-dpa-objs	:= dpa-ethtool.o dpaa_eth_sysfs.o \
+fsl-dpa-objs	:= dpaa_ethtool.o dpaa_eth_sysfs.o \
   dpaa_eth.o dpaa_eth_sg.o
 fsl-dpa-common-objs	:= dpaa_eth_common.o
 fsl-dpa-base-objs	:= dpaa_eth_base.o
diff --git a/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c b/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
deleted file mode 100644
index 2f65ed8..0000000
--- a/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
+++ /dev/null
@@ -1,309 +0,0 @@
-/* Copyright 2008-2012 Freescale Semiconductor, Inc.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *     * Redistributions of source code must retain the above copyright
- *	 notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *	 notice, this list of conditions and the following disclaimer in the
- *	 documentation and/or other materials provided with the distribution.
- *     * Neither the name of Freescale Semiconductor nor the
- *	 names of its contributors may be used to endorse or promote products
- *	 derived from this software without specific prior written permission.
- *
- *
- * ALTERNATIVELY, this software may be distributed under the terms of the
- * GNU General Public License ("GPL") as published by the Free Software
- * Foundation, either version 2 of that License or (at your option) any
- * later version.
- *
- * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
- * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifdef CONFIG_FSL_DPAA_ETH_DEBUG
-#define pr_fmt(fmt) \
-	KBUILD_MODNAME ": %s:%hu:%s() " fmt, \
-	KBUILD_BASENAME".c", __LINE__, __func__
-#else
-#define pr_fmt(fmt) \
-	KBUILD_MODNAME ": " fmt
-#endif
-
-#include <linux/string.h>
-
-#include "dpaa_eth.h"
-
-static char stat_gstrings[][ETH_GSTRING_LEN] = {
-	"tx-rx-64-frames",
-	"tx-rx-65-127-frames",
-	"tx-rx-128-255-frames",
-	"tx-rx-256-511-frames",
-	"tx-rx-512-1023-frames",
-	"tx-rx-1024-1518-frames",
-	"tx-rx-1519-1522-good-vlan",
-	"rx-64-invalid-fcs",
-	"rx-jabber-invalid-fcs",
-	"rx-dropped-by-lack-resource",
-	"rx-alignment-error",
-	"rx-undersize-packets",
-	"rx-oversize-packets",
-	"tx-pause-frame-packets",
-	"rx-pause-frame-packets",
-	"rx-bytes",
-	"rx-packets",
-	"receive-multicast-frames",
-	"receive-broadcast-frames",
-	"rx-dropped-frames",
-	"rx-error-frames",
-	"tx-bytes",
-	"tx-packets",
-	"tx-multicast-frames",
-	"tx-broadcast-frames",
-	"tx-dropped-frames",
-	"tx-error-frames",
-};
-
-#define DPA_STATS_LEN ARRAY_SIZE(stat_gstrings)
-
-static int __cold dpa_get_settings(struct net_device *net_dev,
-		struct ethtool_cmd *et_cmd)
-{
-	int			 _errno;
-	struct dpa_priv_s	*priv;
-
-	priv = netdev_priv(net_dev);
-
-	if (priv->mac_dev == NULL) {
-		netdev_info(net_dev, "This is a MAC-less interface\n");
-		return -ENODEV;
-	}
-	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
-		netdev_dbg(net_dev, "phy device not initialized\n");
-		return 0;
-	}
-
-	_errno = phy_ethtool_gset(priv->mac_dev->phy_dev, et_cmd);
-	if (unlikely(_errno < 0))
-		netdev_err(net_dev, "phy_ethtool_gset() = %d\n", _errno);
-
-	return _errno;
-}
-
-static int __cold dpa_set_settings(struct net_device *net_dev,
-		struct ethtool_cmd *et_cmd)
-{
-	int			 _errno;
-	struct dpa_priv_s	*priv;
-
-	priv = netdev_priv(net_dev);
-
-	if (priv->mac_dev == NULL) {
-		netdev_info(net_dev, "This is a MAC-less interface\n");
-		return -ENODEV;
-	}
-	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
-		netdev_err(net_dev, "phy device not initialized\n");
-		return -ENODEV;
-	}
-
-	_errno = phy_ethtool_sset(priv->mac_dev->phy_dev, et_cmd);
-	if (unlikely(_errno < 0))
-		netdev_err(net_dev, "phy_ethtool_sset() = %d\n", _errno);
-
-	return _errno;
-}
-
-static void __cold dpa_get_drvinfo(struct net_device *net_dev,
-		struct ethtool_drvinfo *drvinfo)
-{
-	int		 _errno;
-
-	strncpy(drvinfo->driver, KBUILD_MODNAME,
-		sizeof(drvinfo->driver) - 1)[sizeof(drvinfo->driver)-1] = 0;
-	strncpy(drvinfo->version, VERSION,
-		sizeof(drvinfo->driver) - 1)[sizeof(drvinfo->version)-1] = 0;
-	_errno = snprintf(drvinfo->fw_version, sizeof(drvinfo->fw_version),
-			  "%X", 0);
-
-	if (unlikely(_errno >= sizeof(drvinfo->fw_version))) {
-		/* Truncated output */
-		netdev_notice(net_dev, "snprintf() = %d\n", _errno);
-	} else if (unlikely(_errno < 0)) {
-		netdev_warn(net_dev, "snprintf() = %d\n", _errno);
-		memset(drvinfo->fw_version, 0, sizeof(drvinfo->fw_version));
-	}
-	strncpy(drvinfo->bus_info, dev_name(net_dev->dev.parent->parent),
-		sizeof(drvinfo->bus_info)-1)[sizeof(drvinfo->bus_info)-1] = 0;
-
-	drvinfo->n_stats = DPA_STATS_LEN;
-}
-
-uint32_t __cold dpa_get_msglevel(struct net_device *net_dev)
-{
-	return ((struct dpa_priv_s *)netdev_priv(net_dev))->msg_enable;
-}
-
-void __cold dpa_set_msglevel(struct net_device *net_dev, uint32_t msg_enable)
-{
-	((struct dpa_priv_s *)netdev_priv(net_dev))->msg_enable = msg_enable;
-}
-
-static void dpa_get_ethtool_stats(struct net_device *netdev,
-				struct ethtool_stats *stats, u64 *data)
-{
-	struct dpa_priv_s       *priv = netdev_priv(netdev);
-	int			_errno;
-
-	_errno = priv->mac_dev->get_stats(priv->mac_dev, data);
-	if (_errno < 0) {
-		if (netif_msg_drv(priv))
-			netdev_err(netdev,
-				"mac_dev->get_stats = %d\n",
-				_errno);
-	}
-}
-
-static void dpa_get_strings(struct net_device *netdev, u32 stringset, u8 *buf)
-{
-	memcpy(buf, stat_gstrings, DPA_STATS_LEN * ETH_GSTRING_LEN);
-}
-
-static int dpa_sset_count(struct net_device *netdev, int sset)
-{
-	switch (sset) {
-	case ETH_SS_STATS:
-		return DPA_STATS_LEN;
-	default:
-		return -EOPNOTSUPP;
-	}
-}
-
-int __cold dpa_nway_reset(struct net_device *net_dev)
-{
-	int			 _errno;
-	struct dpa_priv_s	*priv;
-
-	priv = netdev_priv(net_dev);
-
-	if (priv->mac_dev == NULL) {
-		netdev_info(net_dev, "This is a MAC-less interface\n");
-		return -ENODEV;
-	}
-	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
-		netdev_err(net_dev, "phy device not initialized\n");
-		return -ENODEV;
-	}
-
-	_errno = 0;
-	if (priv->mac_dev->phy_dev->autoneg) {
-		_errno = phy_start_aneg(priv->mac_dev->phy_dev);
-		if (unlikely(_errno < 0))
-			netdev_err(net_dev, "phy_start_aneg() = %d\n",
-					_errno);
-	}
-
-	return _errno;
-}
-
-void __cold dpa_get_ringparam(struct net_device *net_dev,
-		struct ethtool_ringparam *et_ringparam)
-{
-	et_ringparam->rx_max_pending	   = 0;
-	et_ringparam->rx_mini_max_pending  = 0;
-	et_ringparam->rx_jumbo_max_pending = 0;
-	et_ringparam->tx_max_pending	   = 0;
-
-	et_ringparam->rx_pending	   = 0;
-	et_ringparam->rx_mini_pending	   = 0;
-	et_ringparam->rx_jumbo_pending	   = 0;
-	et_ringparam->tx_pending	   = 0;
-}
-
-void __cold dpa_get_pauseparam(struct net_device *net_dev,
-		struct ethtool_pauseparam *et_pauseparam)
-{
-	struct dpa_priv_s	*priv;
-
-	priv = netdev_priv(net_dev);
-
-	if (priv->mac_dev == NULL) {
-		netdev_info(net_dev, "This is a MAC-less interface\n");
-		return;
-	}
-	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
-		netdev_err(net_dev, "phy device not initialized\n");
-		return;
-	}
-
-	et_pauseparam->autoneg	= priv->mac_dev->autoneg_pause;
-	et_pauseparam->rx_pause	= priv->mac_dev->rx_pause;
-	et_pauseparam->tx_pause	= priv->mac_dev->tx_pause;
-}
-
-int __cold dpa_set_pauseparam(struct net_device *net_dev,
-		struct ethtool_pauseparam *et_pauseparam)
-{
-	struct dpa_priv_s	*priv;
-	int _errno;
-	bool en;
-
-	priv = netdev_priv(net_dev);
-
-	if (priv->mac_dev == NULL) {
-		netdev_info(net_dev, "This is a MAC-less interface\n");
-		return -ENODEV;
-	}
-	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
-		netdev_err(net_dev, "phy device not initialized\n");
-		return -ENODEV;
-	}
-
-	en = et_pauseparam->rx_pause ? true : false;
-	_errno = priv->mac_dev->set_rx_pause(
-			priv->mac_dev->get_mac_handle(priv->mac_dev), en);
-	if (unlikely(_errno < 0)) {
-		netdev_err(net_dev, "set_rx_pause() = %d\n", _errno);
-		return _errno;
-	}
-
-	en = et_pauseparam->tx_pause ? true : false;
-	_errno = priv->mac_dev->set_tx_pause(
-			priv->mac_dev->get_mac_handle(priv->mac_dev), en);
-	if (unlikely(_errno < 0)) {
-		netdev_err(net_dev, "set_tx_pause() = %d\n", _errno);
-		return _errno;
-	}
-
-	priv->mac_dev->autoneg_pause = et_pauseparam->autoneg;
-	priv->mac_dev->rx_pause = et_pauseparam->rx_pause;
-	priv->mac_dev->tx_pause = et_pauseparam->tx_pause;
-
-	return 0;
-}
-
-const struct ethtool_ops dpa_ethtool_ops = {
-	.get_settings = dpa_get_settings,
-	.set_settings = dpa_set_settings,
-	.get_drvinfo = dpa_get_drvinfo,
-	.get_msglevel = dpa_get_msglevel,
-	.set_msglevel = dpa_set_msglevel,
-	.nway_reset = dpa_nway_reset,
-	.get_ringparam = dpa_get_ringparam,
-	.get_pauseparam = dpa_get_pauseparam,
-	.set_pauseparam = dpa_set_pauseparam,
-	.self_test = NULL, /* TODO invoke the cold-boot unit-test? */
-	.get_ethtool_stats = NULL, /* TODO other stats, currently in debugfs */
-	.get_link = ethtool_op_get_link,
-	.get_strings		= dpa_get_strings,
-	.get_sset_count		= dpa_sset_count,
-	.get_ethtool_stats	= dpa_get_ethtool_stats,
-};
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_ethtool.c b/drivers/net/ethernet/freescale/dpa/dpaa_ethtool.c
new file mode 100644
index 0000000..2f65ed8
--- /dev/null
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_ethtool.c
@@ -0,0 +1,309 @@
+/* Copyright 2008-2012 Freescale Semiconductor, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *	 notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *	 notice, this list of conditions and the following disclaimer in the
+ *	 documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *	 names of its contributors may be used to endorse or promote products
+ *	 derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifdef CONFIG_FSL_DPAA_ETH_DEBUG
+#define pr_fmt(fmt) \
+	KBUILD_MODNAME ": %s:%hu:%s() " fmt, \
+	KBUILD_BASENAME".c", __LINE__, __func__
+#else
+#define pr_fmt(fmt) \
+	KBUILD_MODNAME ": " fmt
+#endif
+
+#include <linux/string.h>
+
+#include "dpaa_eth.h"
+
+static char stat_gstrings[][ETH_GSTRING_LEN] = {
+	"tx-rx-64-frames",
+	"tx-rx-65-127-frames",
+	"tx-rx-128-255-frames",
+	"tx-rx-256-511-frames",
+	"tx-rx-512-1023-frames",
+	"tx-rx-1024-1518-frames",
+	"tx-rx-1519-1522-good-vlan",
+	"rx-64-invalid-fcs",
+	"rx-jabber-invalid-fcs",
+	"rx-dropped-by-lack-resource",
+	"rx-alignment-error",
+	"rx-undersize-packets",
+	"rx-oversize-packets",
+	"tx-pause-frame-packets",
+	"rx-pause-frame-packets",
+	"rx-bytes",
+	"rx-packets",
+	"receive-multicast-frames",
+	"receive-broadcast-frames",
+	"rx-dropped-frames",
+	"rx-error-frames",
+	"tx-bytes",
+	"tx-packets",
+	"tx-multicast-frames",
+	"tx-broadcast-frames",
+	"tx-dropped-frames",
+	"tx-error-frames",
+};
+
+#define DPA_STATS_LEN ARRAY_SIZE(stat_gstrings)
+
+static int __cold dpa_get_settings(struct net_device *net_dev,
+		struct ethtool_cmd *et_cmd)
+{
+	int			 _errno;
+	struct dpa_priv_s	*priv;
+
+	priv = netdev_priv(net_dev);
+
+	if (priv->mac_dev == NULL) {
+		netdev_info(net_dev, "This is a MAC-less interface\n");
+		return -ENODEV;
+	}
+	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
+		netdev_dbg(net_dev, "phy device not initialized\n");
+		return 0;
+	}
+
+	_errno = phy_ethtool_gset(priv->mac_dev->phy_dev, et_cmd);
+	if (unlikely(_errno < 0))
+		netdev_err(net_dev, "phy_ethtool_gset() = %d\n", _errno);
+
+	return _errno;
+}
+
+static int __cold dpa_set_settings(struct net_device *net_dev,
+		struct ethtool_cmd *et_cmd)
+{
+	int			 _errno;
+	struct dpa_priv_s	*priv;
+
+	priv = netdev_priv(net_dev);
+
+	if (priv->mac_dev == NULL) {
+		netdev_info(net_dev, "This is a MAC-less interface\n");
+		return -ENODEV;
+	}
+	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
+		netdev_err(net_dev, "phy device not initialized\n");
+		return -ENODEV;
+	}
+
+	_errno = phy_ethtool_sset(priv->mac_dev->phy_dev, et_cmd);
+	if (unlikely(_errno < 0))
+		netdev_err(net_dev, "phy_ethtool_sset() = %d\n", _errno);
+
+	return _errno;
+}
+
+static void __cold dpa_get_drvinfo(struct net_device *net_dev,
+		struct ethtool_drvinfo *drvinfo)
+{
+	int		 _errno;
+
+	strncpy(drvinfo->driver, KBUILD_MODNAME,
+		sizeof(drvinfo->driver) - 1)[sizeof(drvinfo->driver)-1] = 0;
+	strncpy(drvinfo->version, VERSION,
+		sizeof(drvinfo->driver) - 1)[sizeof(drvinfo->version)-1] = 0;
+	_errno = snprintf(drvinfo->fw_version, sizeof(drvinfo->fw_version),
+			  "%X", 0);
+
+	if (unlikely(_errno >= sizeof(drvinfo->fw_version))) {
+		/* Truncated output */
+		netdev_notice(net_dev, "snprintf() = %d\n", _errno);
+	} else if (unlikely(_errno < 0)) {
+		netdev_warn(net_dev, "snprintf() = %d\n", _errno);
+		memset(drvinfo->fw_version, 0, sizeof(drvinfo->fw_version));
+	}
+	strncpy(drvinfo->bus_info, dev_name(net_dev->dev.parent->parent),
+		sizeof(drvinfo->bus_info)-1)[sizeof(drvinfo->bus_info)-1] = 0;
+
+	drvinfo->n_stats = DPA_STATS_LEN;
+}
+
+uint32_t __cold dpa_get_msglevel(struct net_device *net_dev)
+{
+	return ((struct dpa_priv_s *)netdev_priv(net_dev))->msg_enable;
+}
+
+void __cold dpa_set_msglevel(struct net_device *net_dev, uint32_t msg_enable)
+{
+	((struct dpa_priv_s *)netdev_priv(net_dev))->msg_enable = msg_enable;
+}
+
+static void dpa_get_ethtool_stats(struct net_device *netdev,
+				struct ethtool_stats *stats, u64 *data)
+{
+	struct dpa_priv_s       *priv = netdev_priv(netdev);
+	int			_errno;
+
+	_errno = priv->mac_dev->get_stats(priv->mac_dev, data);
+	if (_errno < 0) {
+		if (netif_msg_drv(priv))
+			netdev_err(netdev,
+				"mac_dev->get_stats = %d\n",
+				_errno);
+	}
+}
+
+static void dpa_get_strings(struct net_device *netdev, u32 stringset, u8 *buf)
+{
+	memcpy(buf, stat_gstrings, DPA_STATS_LEN * ETH_GSTRING_LEN);
+}
+
+static int dpa_sset_count(struct net_device *netdev, int sset)
+{
+	switch (sset) {
+	case ETH_SS_STATS:
+		return DPA_STATS_LEN;
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
+int __cold dpa_nway_reset(struct net_device *net_dev)
+{
+	int			 _errno;
+	struct dpa_priv_s	*priv;
+
+	priv = netdev_priv(net_dev);
+
+	if (priv->mac_dev == NULL) {
+		netdev_info(net_dev, "This is a MAC-less interface\n");
+		return -ENODEV;
+	}
+	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
+		netdev_err(net_dev, "phy device not initialized\n");
+		return -ENODEV;
+	}
+
+	_errno = 0;
+	if (priv->mac_dev->phy_dev->autoneg) {
+		_errno = phy_start_aneg(priv->mac_dev->phy_dev);
+		if (unlikely(_errno < 0))
+			netdev_err(net_dev, "phy_start_aneg() = %d\n",
+					_errno);
+	}
+
+	return _errno;
+}
+
+void __cold dpa_get_ringparam(struct net_device *net_dev,
+		struct ethtool_ringparam *et_ringparam)
+{
+	et_ringparam->rx_max_pending	   = 0;
+	et_ringparam->rx_mini_max_pending  = 0;
+	et_ringparam->rx_jumbo_max_pending = 0;
+	et_ringparam->tx_max_pending	   = 0;
+
+	et_ringparam->rx_pending	   = 0;
+	et_ringparam->rx_mini_pending	   = 0;
+	et_ringparam->rx_jumbo_pending	   = 0;
+	et_ringparam->tx_pending	   = 0;
+}
+
+void __cold dpa_get_pauseparam(struct net_device *net_dev,
+		struct ethtool_pauseparam *et_pauseparam)
+{
+	struct dpa_priv_s	*priv;
+
+	priv = netdev_priv(net_dev);
+
+	if (priv->mac_dev == NULL) {
+		netdev_info(net_dev, "This is a MAC-less interface\n");
+		return;
+	}
+	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
+		netdev_err(net_dev, "phy device not initialized\n");
+		return;
+	}
+
+	et_pauseparam->autoneg	= priv->mac_dev->autoneg_pause;
+	et_pauseparam->rx_pause	= priv->mac_dev->rx_pause;
+	et_pauseparam->tx_pause	= priv->mac_dev->tx_pause;
+}
+
+int __cold dpa_set_pauseparam(struct net_device *net_dev,
+		struct ethtool_pauseparam *et_pauseparam)
+{
+	struct dpa_priv_s	*priv;
+	int _errno;
+	bool en;
+
+	priv = netdev_priv(net_dev);
+
+	if (priv->mac_dev == NULL) {
+		netdev_info(net_dev, "This is a MAC-less interface\n");
+		return -ENODEV;
+	}
+	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
+		netdev_err(net_dev, "phy device not initialized\n");
+		return -ENODEV;
+	}
+
+	en = et_pauseparam->rx_pause ? true : false;
+	_errno = priv->mac_dev->set_rx_pause(
+			priv->mac_dev->get_mac_handle(priv->mac_dev), en);
+	if (unlikely(_errno < 0)) {
+		netdev_err(net_dev, "set_rx_pause() = %d\n", _errno);
+		return _errno;
+	}
+
+	en = et_pauseparam->tx_pause ? true : false;
+	_errno = priv->mac_dev->set_tx_pause(
+			priv->mac_dev->get_mac_handle(priv->mac_dev), en);
+	if (unlikely(_errno < 0)) {
+		netdev_err(net_dev, "set_tx_pause() = %d\n", _errno);
+		return _errno;
+	}
+
+	priv->mac_dev->autoneg_pause = et_pauseparam->autoneg;
+	priv->mac_dev->rx_pause = et_pauseparam->rx_pause;
+	priv->mac_dev->tx_pause = et_pauseparam->tx_pause;
+
+	return 0;
+}
+
+const struct ethtool_ops dpa_ethtool_ops = {
+	.get_settings = dpa_get_settings,
+	.set_settings = dpa_set_settings,
+	.get_drvinfo = dpa_get_drvinfo,
+	.get_msglevel = dpa_get_msglevel,
+	.set_msglevel = dpa_set_msglevel,
+	.nway_reset = dpa_nway_reset,
+	.get_ringparam = dpa_get_ringparam,
+	.get_pauseparam = dpa_get_pauseparam,
+	.set_pauseparam = dpa_set_pauseparam,
+	.self_test = NULL, /* TODO invoke the cold-boot unit-test? */
+	.get_ethtool_stats = NULL, /* TODO other stats, currently in debugfs */
+	.get_link = ethtool_op_get_link,
+	.get_strings		= dpa_get_strings,
+	.get_sset_count		= dpa_sset_count,
+	.get_ethtool_stats	= dpa_get_ethtool_stats,
+};
-- 
1.7.10.4

