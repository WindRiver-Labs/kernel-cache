From a32826df529648b339e7547866749de5fd896251 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Mon, 28 Jul 2014 10:15:49 +0800
Subject: [PATCH 49/50] gianfar: remove some unnecessary skb recycling
 functions

SDK 1.4 committed a patch

e579109de34eada967c83a84168fd26405189183
(gianfar: Add basic skb recycling)

but SDK 1.6 has abandoned it.

[Based on QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/freescale/gianfar.c |   91 ------------------------------
 1 files changed, 0 insertions(+), 91 deletions(-)

diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index 96aa5f3..f04c9dc 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -166,13 +166,6 @@ static void gfar_set_mac_for_addr(struct net_device *dev, int num,
 static int gfar_ioctl(struct net_device *dev, struct ifreq *rq, int cmd);
 static void gfar_align_skb(struct sk_buff *skb);
 
-LIST_HEAD(gfar_recycle_queues);
-
-bool gfar_skb_recycling_en = true;
-module_param(gfar_skb_recycling_en, bool, 0444);
-MODULE_PARM_DESC(gfar_skb_recycling_en,
-	"Enable buffer recycling.");
-
 bool gfar_l2sram_en = true;
 module_param(gfar_l2sram_en, bool, 0444);
 MODULE_PARM_DESC(gfar_l2sram_en,
@@ -637,24 +630,13 @@ static void unmap_group_regs(struct gfar_private *priv)
 
 static void free_gfar_dev(struct gfar_private *priv)
 {
-	struct gfar_priv_recycle *rec = &priv->recycle;
 	int i, j;
 
 	for (i = 0; i < priv->num_grps; i++)
-		struct gfar_priv_grp *grp = &priv->gfargrp[i];
-
-		kfree(grp->napi_rx);
-		grp->napi_rx = NULL;
-		kfree(grp->napi_tx);
-		grp->napi_tx = NULL;
-
 		for (j = 0; j < GFAR_NUM_IRQS; j++) {
 			kfree(priv->gfargrp[i].irqinfo[j]);
 			priv->gfargrp[i].irqinfo[j] = NULL;
 		}
-	}
-
-	free_percpu(rec->local);
 
 	free_netdev(priv->ndev);
 }
@@ -1161,47 +1143,6 @@ static void gfar_detect_errata(struct gfar_private *priv)
 			 priv->errata);
 }
 
-static void gfar_init_recycle(struct gfar_private *priv)
-{
-	struct gfar_priv_recycle *rec = &priv->recycle;
-	int cpu;
-
-	rec->buff_size = priv->rx_buffer_size + RXBUF_ALIGNMENT;
-	skb_queue_head_init(&rec->recycle_q);
-	rec->local = NULL;
-
-	if (!gfar_skb_recycling_en)
-		goto disable_rec;
-
-	/* recycle skbs to the own queue by default */
-	priv->recycle_target = &priv->recycle;
-	priv->recycle_ndev = priv->ndev;
-
-	rec->local = alloc_percpu(struct gfar_priv_recycle_local);
-	if (!rec->local) {
-		netdev_err(priv->ndev, "Recycle queues init failed!\n");
-		goto disable_rec;
-	}
-
-	for_each_possible_cpu(cpu) {
-		struct gfar_priv_recycle_local *local;
-		local = per_cpu_ptr(rec->local, cpu);
-		skb_queue_head_init(&local->recycle_q);
-		local->recycle_cnt = 0;
-		local->reuse_cnt = 0;
-	}
-
-	list_add(&priv->recycle_node, &gfar_recycle_queues);
-
-	return;
-
-disable_rec:
-	netdev_info(priv->ndev, "skb recycling disabled\n");
-	priv->recycle_target = NULL;
-	priv->recycle_ndev = NULL;
-	return;
-}
-
 void gfar_mac_reset(struct gfar_private *priv)
 {
 	struct gfar __iomem *regs = priv->gfargrp[0].regs;
@@ -2159,27 +2100,6 @@ static void free_skb_rx_queue(struct gfar_priv_rx_q *rx_queue)
 	rx_queue->rx_skbuff = NULL;
 }
 
-static void free_skb_recycle_q(struct gfar_priv_recycle *rec)
-{
-	struct sk_buff *skb;
-	int cpu;
-
-	while ((skb = skb_dequeue(&rec->recycle_q)) != NULL)
-		dev_kfree_skb_any(skb);
-
-	if (!rec->local)
-		return;
-
-	for_each_possible_cpu(cpu) {
-		struct gfar_priv_recycle_local *local;
-
-		local = per_cpu_ptr(rec->local, cpu);
-		while ((skb = __skb_dequeue(&local->recycle_q)) != NULL)
-			dev_kfree_skb_any(skb);
-	}
-
-}
-
 /* If there are any tx skbs or rx skbs still around, free them.
  * Then free tx_skbuff and rx_skbuff
  */
@@ -2208,17 +2128,6 @@ static void free_skb_resources(struct gfar_private *priv)
 		dma_free_coherent(priv->dev, BD_RING_REG_SZ(priv),
 				  priv->tx_queue[0]->tx_bd_base,
 				  priv->tx_queue[0]->tx_bd_dma_base);
-
-	/* purge the skb recycle queue */
-	free_skb_recycle_q(&priv->recycle);
-}
-
-static void gfar_reset_recycle(struct gfar_private *priv)
-{
-	struct gfar_priv_recycle *rec = &priv->recycle;
-
-	rec->buff_size = priv->rx_buffer_size + RXBUF_ALIGNMENT;
-	free_skb_recycle_q(rec);
 }
 
 void gfar_start(struct gfar_private *priv)
-- 
1.7.5.4

