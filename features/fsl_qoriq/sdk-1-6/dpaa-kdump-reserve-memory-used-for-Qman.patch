From 750951b2ad36f6de3a1d064082dbf94b52a7a8bf Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Fri, 7 Dec 2012 15:02:53 +0800
Subject: [PATCH 21/43] dpaa/kdump: reserve memory used for Qman

Qman memory must be reserved to avoid it being reallocated, since
it cannot be cleaned from the boot kernel.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/staging/fsl_qbman/qman_config.c |   28 ++++++++++++++++++++++++++++
 1 files changed, 28 insertions(+), 0 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_config.c b/drivers/staging/fsl_qbman/qman_config.c
index 85a70f0..01d6ef7 100644
--- a/drivers/staging/fsl_qbman/qman_config.c
+++ b/drivers/staging/fsl_qbman/qman_config.c
@@ -357,11 +357,31 @@ static int qm_is_initalized(struct qman *qm, enum qm_memory memory)
 	u32 offset = (memory == qm_memory_fqd) ? REG_FQD_BARE : REG_PFDR_BARE;
 	return __qm_in(qm, offset + REG_offset_BAR);
 }
+static void qm_reserve_memory(struct qman *qm, enum qm_memory memory)
+{
+	u64 upper_ba = 0;
+	u32 lower_ba = 0;
+	u64 addr = 0;
+	u32 exp = 0;
+	u32 size = 0;
+	u32 unknown_hole_size = 0;
+	u32 offset = (memory == qm_memory_fqd) ? REG_FQD_BARE : REG_PFDR_BARE;
+
+	upper_ba = __qm_in(qm, offset);
+	lower_ba = __qm_in(qm, offset + REG_offset_BAR);
+	exp = (__qm_in(qm, offset + REG_offset_AR) & 0x3f);
+	size = 2 << exp;
+	addr = (u64)((upper_ba << 31) | lower_ba);
+	memblock_reserve(addr, size);
+}
 #else
 static int qm_is_initalized(struct qman *qm, enum qm_memory memory)
 {
 	return 0;
 }
+static void qm_reserve_memory(struct qman *qm, enum qm_memory memory)
+{
+}
 #endif
 
 static void qm_set_memory(struct qman *qm, enum qm_memory memory, u64 ba,
@@ -558,6 +578,14 @@ static int __init fsl_qman_init(struct device_node *node)
 		qman_ip_cfg = cfg;
 	}
 
+	/* Unfortunately we have to reserve those memory used for Qman
+	 * since currently we can't clean these usage from boot kernel.
+	 */
+	/* FQD memory */
+	qm_reserve_memory(qm, qm_memory_fqd);
+	/* PFDR memory */
+	qm_reserve_memory(qm, qm_memory_pfdr);
+
 	if (standby) {
 		pr_info("  -> in standby mode\n");
 		return 0;
-- 
1.7.5.4

