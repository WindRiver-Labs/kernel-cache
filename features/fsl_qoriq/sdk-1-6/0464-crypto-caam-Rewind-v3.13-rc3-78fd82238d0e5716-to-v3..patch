From 4a38c7256c3427b306a2ae9558f886c04a10012d Mon Sep 17 00:00:00 2001
From: Scott Wood <scottwood@freescale.com>
Date: Mon, 7 Apr 2014 18:49:35 -0500
Subject: [PATCH 464/466] crypto: caam: Rewind v3.13-rc3+ (78fd82238d0e5716)
 to v3.12

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/caam/ctrl.c       |    5 +----
 drivers/crypto/caam/fsl_jr_uio.c |    2 ++
 drivers/crypto/caam/intern.h     |    2 +-
 drivers/crypto/caam/jr.c         |    8 ++------
 4 files changed, 6 insertions(+), 11 deletions(-)

diff --git a/drivers/crypto/caam/ctrl.c b/drivers/crypto/caam/ctrl.c
index bff6fe3..5e9bf2b 100644
--- a/drivers/crypto/caam/ctrl.c
+++ b/drivers/crypto/caam/ctrl.c
@@ -5,9 +5,6 @@
  * Copyright 2008-2012 Freescale Semiconductor, Inc.
  */
 
-#include <linux/of_address.h>
-#include <linux/of_irq.h>
-
 #include "compat.h"
 #include "regs.h"
 #include "intern.h"
@@ -482,7 +479,7 @@ static int caam_probe(struct platform_device *pdev)
 	topregs = (struct caam_full __iomem *)ctrl;
 
 	/* Get the IRQ of the controller (for security violations only) */
-	ctrlpriv->secvio_irq = irq_of_parse_and_map(nprop, 0);
+	ctrlpriv->secvio_irq = of_irq_to_resource(nprop, 0, NULL);
 
 	/*
 	 * Enable DECO watchdogs and, if this is a PHYS_ADDR_T_64BIT kernel,
diff --git a/drivers/crypto/caam/fsl_jr_uio.c b/drivers/crypto/caam/fsl_jr_uio.c
index be2c2e4..ee640cf 100644
--- a/drivers/crypto/caam/fsl_jr_uio.c
+++ b/drivers/crypto/caam/fsl_jr_uio.c
@@ -5,6 +5,8 @@
 
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/of_address.h>
+#include <linux/of_irq.h>
 #include <linux/of_platform.h>
 #include <linux/io.h>
 #include <linux/uio_driver.h>
diff --git a/drivers/crypto/caam/intern.h b/drivers/crypto/caam/intern.h
index e9867bc..dce2a5e 100644
--- a/drivers/crypto/caam/intern.h
+++ b/drivers/crypto/caam/intern.h
@@ -39,7 +39,7 @@ struct caam_jrentry_info {
 
 /* Private sub-storage for a single JobR */
 struct caam_drv_private_jr {
-	struct list_head	list_node;
+	struct list_head	list_node;	/* Job Ring device list */
 	struct device		*dev;
 	int ridx;
 	struct caam_job_ring __iomem *rregs;	/* JobR's register space */
diff --git a/drivers/crypto/caam/jr.c b/drivers/crypto/caam/jr.c
index f3d1839..dbebac5 100644
--- a/drivers/crypto/caam/jr.c
+++ b/drivers/crypto/caam/jr.c
@@ -65,14 +65,12 @@ static int caam_reset_hw_jr(struct device *dev)
 /*
  * Shutdown JobR independent of platform property code
  */
-static int caam_jr_shutdown(struct device *dev)
+int caam_jr_shutdown(struct device *dev)
 {
 	struct caam_drv_private_jr *jrp = dev_get_drvdata(dev);
 	int i, ret;
 
 	ret = caam_reset_hw_jr(dev);
-	if (ret)
-		dev_err(dev, "failed to reset job ring\n");
 
 	for_each_possible_cpu(i) {
 		napi_disable(per_cpu_ptr(jrp->irqtask, i));
@@ -516,7 +514,6 @@ static int caam_jr_init(struct device *dev)
 	int i, error;
 
 	jrp = dev_get_drvdata(dev);
-
 	/* Connect job ring interrupt handler. */
 	jrp->irqtask = alloc_percpu(struct napi_struct);
 	if (!jrp->irqtask) {
@@ -640,7 +637,7 @@ static int caam_jr_probe(struct platform_device *pdev)
 		dma_set_mask(jrdev, DMA_BIT_MASK(32));
 
 	/* Identify the interrupt */
-	jrpriv->irq = irq_of_parse_and_map(nprop, 0);
+	jrpriv->irq = of_irq_to_resource(nprop, 0, NULL);
 
 	/* Now do the platform independent part */
 	error = caam_jr_init(jrdev); /* now turn on hardware */
@@ -701,4 +698,3 @@ module_exit(jr_driver_exit);
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("FSL CAAM JR request backend");
 MODULE_AUTHOR("Freescale Semiconductor - NMG/STC");
-
-- 
1.7.10.4

