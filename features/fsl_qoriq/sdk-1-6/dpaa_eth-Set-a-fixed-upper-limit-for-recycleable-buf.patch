From c03d771d84e7c686f3cc89b72b781d8fa5d0e28d Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Thu, 6 Jun 2013 19:15:08 +0300
Subject: [PATCH 0408/1089] dpaa_eth: Set a fixed upper limit for recycleable
 buffer size

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

Until now we considered a buffer recycleable if its size didn't
exceed the buffer pool size by more than a certain amount.

Recent changes in the stack however allow the allocation of skb
buffers much larger than the requested size, which impacts our
ability to recycle forwarded frames, especially when jumbo frame
support is enabled.

Make the recycling size upper limit a fixed and sufficiently large
value, regardless of the default size of the buffer pool, in order
to simplify recycling logic and guard against unfavourable cases.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Change-Id: I2fd9b6a057a4e54445233730805d5dc9c8188e5a
Reviewed-on: http://git.am.freescale.net:8181/3330
Reviewed-by: Hamciuc Bogdan-BHAMCIU1 <bogdan.hamciuc@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c
index 8b5e945..1d4d323 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_non_sg.c
@@ -42,13 +42,17 @@
 
 #ifndef CONFIG_FSL_DPAA_ETH_SG_SUPPORT
 
-/* Extra size of a buffer (beyond the size of the buffers that are seeded into
- * the global pool) for which recycling is allowed.
- * The value is arbitrary, but tries to reach a balance such that originating
- * frames may get recycled, while forwarded skbs that get reallocated on Tx
- * aren't allowed to grow unboundedly.
+/* Maximum size of a buffer for which recycling is allowed.
+ * We need an upper limit such that forwarded skbs that get reallocated on Tx
+ * aren't allowed to grow unboundedly. On the other hand, we need to make sure
+ * that skbs allocated by us will not fail to be recycled due to their size.
+ *
+ * For a requested size, the kernel allocator provides the next power of two
+ * sized block, which the stack will use as is, regardless of the actual size
+ * it required; since we must acommodate at most 9.6K buffers (L2 maximum
+ * supported frame size), set the recycling upper limit to 16K.
  */
-#define DPA_RECYCLE_EXTRA_SIZE	1024
+#define DPA_RECYCLE_MAX_SIZE	16384
 
 /* Maximum offset value for a contig or sg FD (represented on 9bits) */
 #define DPA_MAX_FD_OFFSET	((1 << 9) - 1)
@@ -498,7 +502,7 @@ static int skb_to_contig_fd(struct dpa_priv_s *priv,
 	 */
 	if (likely(skb_is_recycleable(skb, dpa_bp->size) &&
 		   (skb_end_pointer(skb) - skb->head <=
-			dpa_bp->size + DPA_RECYCLE_EXTRA_SIZE) &&
+			DPA_RECYCLE_MAX_SIZE) &&
 		   (*percpu_priv->dpa_bp_count < dpa_bp->target_count))) {
 		/* Compute the minimum necessary fd offset */
 		offset = dpa_bp->size - skb->len - skb_tailroom(skb);
-- 
2.0.2

