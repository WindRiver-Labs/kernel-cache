From dea08fbf02b38266b9a1fa2e79c6be3de93c8af0 Mon Sep 17 00:00:00 2001
From: Jeffrey Ladouceur <Jeffrey.Ladouceur@freescale.com>
Date: Tue, 13 May 2014 11:16:38 -0400
Subject: [PATCH 1021/1089] fsl_pme: limit time spent checking for pme activity
 bit

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

Exit from possible endless loops when checking for pme to go idle.

Signed-off-by: Jeffrey Ladouceur <Jeffrey.Ladouceur@freescale.com>
Change-Id: Ic8b9f8682fd9079c9d5a260918a7ee1d58be07b9
Reviewed-on: http://git.am.freescale.net:8181/12297
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Haiying Wang <Haiying.Wang@freescale.com>
Reviewed-by: Roy Pledge <roy.pledge@freescale.com>
Reviewed-by: Jose Rivera <German.Rivera@freescale.com>
---
 drivers/staging/fsl_pme2/pme2_suspend.c | 38 +++++++++++++++++++--------------
 1 file changed, 22 insertions(+), 16 deletions(-)

diff --git a/drivers/staging/fsl_pme2/pme2_suspend.c b/drivers/staging/fsl_pme2/pme2_suspend.c
index 99fc339..435d648 100644
--- a/drivers/staging/fsl_pme2/pme2_suspend.c
+++ b/drivers/staging/fsl_pme2/pme2_suspend.c
@@ -35,6 +35,8 @@
 #include "pme2_regs.h"
 #include <linux/vmalloc.h>
 
+#define LOOP_CNT 100000
+
 static dma_addr_t pme_suspend_map(struct platform_device *pdev, void *ptr)
 {
 	return dma_map_single(&pdev->dev, ptr, 1, DMA_BIDIRECTIONAL);
@@ -1006,6 +1008,22 @@ static int is_pme_active(void)
 	return val;
 }
 
+static inline int wait_pme_not_active(int loop_count)
+{
+	int ret;
+
+	do {
+		ret = is_pme_active();
+		if (ret <= 0)
+			return ret;
+		if (!loop_count--) {
+			pr_err("wait_pme_not_active: pme still active\n");
+			return -EBUSY;
+		}
+		cpu_relax();
+	} while (1);
+}
+
 static void reset_db_saved_state(struct portal_backup_info *db_info)
 {
 	db_info->backup_failed = 0;
@@ -1039,10 +1057,7 @@ int pme_suspend(struct pme2_private_data *priv_data)
 	pme_attr_set(pme_attr_cdcr, 0xffffffff);
 
 	/* wait until device is not active */
-	while (is_pme_active()) {
-		cpu_relax();
-		/* TODO: sanity check */
-	}
+	wait_pme_not_active(LOOP_CNT);
 #ifdef PME_SUSPEND_DEBUG
 	pr_info("PME is quiescent\n");
 #endif
@@ -1075,10 +1090,7 @@ int pme_suspend(struct pme2_private_data *priv_data)
 	pme_attr_set(pme_attr_iir, 1);
 
 	/* wait until device is not active */
-	while (is_pme_active()) {
-		cpu_relax();
-		/* TODO: sanity check */
-	}
+	wait_pme_not_active(LOOP_CNT);
 #ifdef PME_SUSPEND_DEBUG
 	pr_info("PME is quiescent\n");
 #endif
@@ -1090,10 +1102,7 @@ int pme_suspend(struct pme2_private_data *priv_data)
 		/* clear the PME reset bit */
 		pme_attr_set(pme_attr_faconf_rst, 0);
 		/* wait until device is not active */
-		while (is_pme_active()) {
-			cpu_relax();
-			/* TODO: sanity check */
-		}
+		wait_pme_not_active(LOOP_CNT);
 	}
 	return 0;
 }
@@ -1146,10 +1155,7 @@ int pme_resume(struct pme2_private_data *priv_data)
 	/* disable pme */
 	pme_attr_set(pme_attr_faconf_en, 0);
 	/* wait until device is not active */
-	while (is_pme_active()) {
-		cpu_relax();
-		/* TODO: sanity check */
-	}
+	wait_pme_not_active(LOOP_CNT);
 	if (db_restore_failed) {
 		/* set the PME reset bit */
 		pme_attr_set(pme_attr_faconf_rst, 1);
-- 
2.0.2

