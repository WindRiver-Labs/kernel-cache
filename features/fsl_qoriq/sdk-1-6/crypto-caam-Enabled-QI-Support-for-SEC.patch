From ebace492a9955a684b4a7fff92fc45511f234b76 Mon Sep 17 00:00:00 2001
From: "Lu.Jiang" <lu.jiang@windriver.com>
Date: Mon, 15 Sep 2014 10:40:20 +0800
Subject: [PATCH 0792/1089] crypto: caam - Enabled QI Support for SEC

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

At the time of merging few changes required for enabling QI support
were missed. This patch adds those missing changes and hence enables QI
support for SEC.

Signed-off-by: Nitesh Lal <NiteshNarayanLal@freescale.com>
Change-Id: I190ed1452317cb1f70faaf85f8a69be0a0c5a376
Reviewed-on: http://git.am.freescale.net:8181/9922
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Ruchika Gupta <ruchika.gupta@freescale.com>
Reviewed-by: Jose Rivera <German.Rivera@freescale.com>
Signed-off-by: Lu.Jiang <lu.jiang@windriver.com>
---
 drivers/crypto/caam/Kconfig | 19 +++++++++++++++++++
 drivers/crypto/caam/ctrl.c  | 15 +++++++--------
 2 files changed, 26 insertions(+), 8 deletions(-)

diff --git a/drivers/crypto/caam/Kconfig b/drivers/crypto/caam/Kconfig
index 729a038..29076cf 100644
--- a/drivers/crypto/caam/Kconfig
+++ b/drivers/crypto/caam/Kconfig
@@ -106,6 +106,25 @@ config CRYPTO_DEV_FSL_CAAM_CRYPTO_API_QI
 	  To compile this as a module, choose M here: the module
 	  will be called caamalg_qi.
 
+config CRYPTO_DEV_FSL_CAAM_CRYPTO_API_QI
+        tristate "Queue Interface as Crypto API backend"
+        depends on CRYPTO_DEV_FSL_CAAM_CRYPTO_API && FSL_QMAN
+        default y
+        help
+          Selecting this will use SEC Queue Interface for sending
+          & receiving crypto jobs to/from SEC. This gives better
+          performance than job ring interface when the number of
+          cores are more than the number of job rings assigned to
+          the kernel. The number of portals assigned to the kernel
+          should also be more than the number of job rings.
+
+          Currently, only AEAD algorithms have been implemented on
+          top of SEC-QI backend interface. The rest of the algorithms
+          use job ring interface.
+
+          To compile this as a module, choose M here: the module
+          will be called caamalg_qi.
+
 config CRYPTO_DEV_FSL_CAAM_AHASH_API
 	tristate "Register hash algorithm implementations with Crypto API"
 	depends on CRYPTO_DEV_FSL_CAAM && CRYPTO_DEV_FSL_CAAM_JR
diff --git a/drivers/crypto/caam/ctrl.c b/drivers/crypto/caam/ctrl.c
index 8a1d9c0..ef249a5 100644
--- a/drivers/crypto/caam/ctrl.c
+++ b/drivers/crypto/caam/ctrl.c
@@ -15,6 +15,10 @@
 #include "desc_constr.h"
 #include "error.h"
 
+#ifdef CONFIG_FSL_QMAN
+#include "qi.h"
+#endif
+
 /*
  * Descriptor to instantiate RNG State Handle 0 in normal mode and
  * load the JDKEK, TDKEK and TDSK registers
@@ -266,10 +270,6 @@ static int deinstantiate_rng(struct device *ctrldev, int state_handle_mask)
 	return ret;
 }
 
-#ifdef CONFIG_FSL_QMAN
-#include "qi.h"
-#endif
-
 static int caam_remove(struct platform_device *pdev)
 {
 	struct device *ctrldev;
@@ -287,14 +287,13 @@ static int caam_remove(struct platform_device *pdev)
 			of_device_unregister(ctrlpriv->jrpdev[ring]);
 	}
 
-	/* De-initialize RNG state handles initialized by this driver. */
-	if (ctrlpriv->rng4_sh_init)
-		deinstantiate_rng(ctrldev, ctrlpriv->rng4_sh_init);
-
 #ifdef CONFIG_FSL_QMAN
 	if (ctrlpriv->qidev)
 		caam_qi_shutdown(ctrlpriv->qidev);
 #endif
+	/* De-initialize RNG state handles initialized by this driver. */
+	if (ctrlpriv->rng4_sh_init)
+		deinstantiate_rng(ctrldev, ctrlpriv->rng4_sh_init);
 
 	/* Shut down debug views */
 #ifdef CONFIG_DEBUG_FS
-- 
2.0.2

