From cb1112bacec1ccb88667a3b2d4c0b3e23dc31c9a Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@freescale.com>
Date: Wed, 15 May 2013 16:04:52 +0300
Subject: [PATCH 0378/1089] dpaa_eth: internal refactoring in mac-api

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

Refactoring of mac-api FMD calls.

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>

Change-Id: I4b9f233d4c00d0dc3c03306e7adb7ca424330562
Reviewed-on: http://git.am.freescale.net:8181/2842
Reviewed-by: Hamciuc Bogdan-BHAMCIU1 <bogdan.hamciuc@freescale.com>
Reviewed-by: Sovaiala Cristian-Constantin-B39531 <Cristian.Sovaiala@freescale.com>
Reviewed-by: Radulescu Ruxandra Ioana-B05472 <ruxandra.radulescu@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
---
 drivers/net/ethernet/freescale/dpa/dpa-ethtool.c   |   6 +-
 drivers/net/ethernet/freescale/dpa/dpaa_1588.c     |  30 +-
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |  28 +-
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h      |   2 +-
 .../net/ethernet/freescale/dpa/dpaa_eth_sysfs.c    |   2 +-
 drivers/net/ethernet/freescale/dpa/mac-api.c       | 572 ++++++++++++---------
 drivers/net/ethernet/freescale/dpa/mac.c           |   4 +-
 drivers/net/ethernet/freescale/dpa/mac.h           |  44 +-
 8 files changed, 385 insertions(+), 303 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c b/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
index c5f6225..34681d1 100644
--- a/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
+++ b/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
@@ -191,14 +191,16 @@ int __cold dpa_set_pauseparam(struct net_device *net_dev, struct ethtool_pausepa
 	}
 
 	en = et_pauseparam->rx_pause ? true : false;
-	_errno = priv->mac_dev->set_rx_pause(priv->mac_dev, en);
+	_errno = priv->mac_dev->set_rx_pause(
+			priv->mac_dev->get_mac_handle(priv->mac_dev), en);
 	if (unlikely(_errno < 0)) {
 		netdev_err(net_dev, "set_rx_pause() = %d\n", _errno);
 		return _errno;
 	}
 
 	en = et_pauseparam->tx_pause ? true : false;
-	_errno = priv->mac_dev->set_tx_pause(priv->mac_dev, en);
+	_errno = priv->mac_dev->set_tx_pause(
+			priv->mac_dev->get_mac_handle(priv->mac_dev), en);
 	if (unlikely(_errno < 0)) {
 		netdev_err(net_dev, "set_tx_pause() = %d\n", _errno);
 		return _errno;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_1588.c b/drivers/net/ethernet/freescale/dpa/dpaa_1588.c
index bdc4caf..0af146b 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_1588.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_1588.c
@@ -390,18 +390,20 @@ static void dpa_set_fiper_alarm(struct dpa_ptp_tsu *tsu,
 	u64 tmp, fiper;
 
 	if (mac_dev->fm_rtc_disable)
-		mac_dev->fm_rtc_disable(tsu->dpa_priv->net_dev);
+		mac_dev->fm_rtc_disable(get_fm_handle(tsu->dpa_priv->net_dev));
 
 	/* TMR_FIPER1 will pulse every second after ALARM1 expired */
 	tmp = (u64)cnt_time->sec * NANOSEC_PER_SECOND + (u64)cnt_time->nsec;
 	fiper = NANOSEC_PER_SECOND - DPA_PTP_NOMINAL_FREQ_PERIOD_NS;
 	if (mac_dev->fm_rtc_set_alarm)
-		mac_dev->fm_rtc_set_alarm(tsu->dpa_priv->net_dev, 0, tmp);
+		mac_dev->fm_rtc_set_alarm(get_fm_handle(tsu->dpa_priv->net_dev),
+					  0, tmp);
 	if (mac_dev->fm_rtc_set_fiper)
-		mac_dev->fm_rtc_set_fiper(tsu->dpa_priv->net_dev, 0, fiper);
+		mac_dev->fm_rtc_set_fiper(get_fm_handle(tsu->dpa_priv->net_dev),
+					  0, fiper);
 
 	if (mac_dev->fm_rtc_enable)
-		mac_dev->fm_rtc_enable(tsu->dpa_priv->net_dev);
+		mac_dev->fm_rtc_enable(get_fm_handle(tsu->dpa_priv->net_dev));
 }
 
 static void dpa_get_curr_cnt(struct dpa_ptp_tsu *tsu,
@@ -412,7 +414,8 @@ static void dpa_get_curr_cnt(struct dpa_ptp_tsu *tsu,
 	u32 mod;
 
 	if (mac_dev->fm_rtc_get_cnt)
-		mac_dev->fm_rtc_get_cnt(tsu->dpa_priv->net_dev, &tmp);
+		mac_dev->fm_rtc_get_cnt(get_fm_handle(tsu->dpa_priv->net_dev),
+					&tmp);
 
 	mod = do_div(tmp, NANOSEC_PER_SECOND);
 	curr_time->sec = (u32)tmp;
@@ -428,7 +431,8 @@ static void dpa_set_1588cnt(struct dpa_ptp_tsu *tsu,
 	tmp = (u64)cnt_time->sec * NANOSEC_PER_SECOND + (u64)cnt_time->nsec;
 
 	if (mac_dev->fm_rtc_set_cnt)
-		mac_dev->fm_rtc_set_cnt(tsu->dpa_priv->net_dev, tmp);
+		mac_dev->fm_rtc_set_cnt(get_fm_handle(tsu->dpa_priv->net_dev),
+					tmp);
 
 	/* Restart fiper two seconds later */
 	cnt_time->sec += 2;
@@ -442,7 +446,8 @@ static void dpa_get_drift(struct dpa_ptp_tsu *tsu, u32 *addend)
 	u32 drift;
 
 	if (mac_dev->fm_rtc_get_drift)
-		mac_dev->fm_rtc_get_drift(tsu->dpa_priv->net_dev, &drift);
+		mac_dev->fm_rtc_get_drift(get_fm_handle(tsu->dpa_priv->net_dev),
+					  &drift);
 
 	*addend = drift;
 }
@@ -452,7 +457,8 @@ static void dpa_set_drift(struct dpa_ptp_tsu *tsu, u32 addend)
 	struct mac_device *mac_dev = tsu->dpa_priv->mac_dev;
 
 	if (mac_dev->fm_rtc_set_drift)
-		mac_dev->fm_rtc_set_drift(tsu->dpa_priv->net_dev, addend);
+		mac_dev->fm_rtc_set_drift(get_fm_handle(tsu->dpa_priv->net_dev),
+					  addend);
 }
 
 static void dpa_flush_timestamp(struct dpa_ptp_tsu *tsu)
@@ -479,16 +485,16 @@ int dpa_ioctl_1588(struct net_device *dev, struct ifreq *ifr, int cmd)
 	case PTP_ENBL_TXTS_IOCTL:
 		tsu->hwts_tx_en_ioctl = 1;
 		if (mac_dev->fm_rtc_enable)
-			mac_dev->fm_rtc_enable(dev);
+			mac_dev->fm_rtc_enable(get_fm_handle(dev));
 		if (mac_dev->ptp_enable)
-			mac_dev->ptp_enable(mac_dev);
+			mac_dev->ptp_enable(mac_dev->get_mac_handle(mac_dev));
 		break;
 	case PTP_DSBL_TXTS_IOCTL:
 		tsu->hwts_tx_en_ioctl = 0;
 		if (mac_dev->fm_rtc_disable)
-			mac_dev->fm_rtc_disable(dev);
+			mac_dev->fm_rtc_disable(get_fm_handle(dev));
 		if (mac_dev->ptp_disable)
-			mac_dev->ptp_disable(mac_dev);
+			mac_dev->ptp_disable(mac_dev->get_mac_handle(mac_dev));
 		break;
 	case PTP_ENBL_RXTS_IOCTL:
 		tsu->hwts_rx_en_ioctl = 1;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 759e46d..d280e66 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -1039,6 +1039,7 @@ static int dpa_set_mac_address(struct net_device *net_dev, void *addr)
 {
 	const struct dpa_priv_s	*priv;
 	int			 _errno;
+	struct mac_device	*mac_dev;
 
 	priv = netdev_priv(net_dev);
 
@@ -1054,8 +1055,10 @@ static int dpa_set_mac_address(struct net_device *net_dev, void *addr)
 	if (!priv->mac_dev)
 		/* MAC-less interface, so nothing more to do here */
 		return 0;
+	mac_dev = priv->mac_dev;
 
-	_errno = priv->mac_dev->change_addr(priv->mac_dev, net_dev->dev_addr);
+	_errno = mac_dev->change_addr(mac_dev->get_mac_handle(mac_dev),
+			net_dev->dev_addr);
 	if (_errno < 0) {
 		if (netif_msg_drv(priv))
 			netdev_err(net_dev,
@@ -1078,10 +1081,13 @@ static void dpa_set_rx_mode(struct net_device *net_dev)
 		return;
 
 	if (!!(net_dev->flags & IFF_PROMISC) != priv->mac_dev->promisc) {
-		_errno = priv->mac_dev->change_promisc(priv->mac_dev);
+		priv->mac_dev->promisc = !priv->mac_dev->promisc;
+		_errno = priv->mac_dev->set_promisc(
+				priv->mac_dev->get_mac_handle(priv->mac_dev),
+				priv->mac_dev->promisc);
 		if (unlikely(_errno < 0) && netif_msg_drv(priv))
 			netdev_err(net_dev,
-					   "mac_dev->change_promisc() = %d\n",
+					   "mac_dev->set_promisc() = %d\n",
 					   _errno);
 	}
 
@@ -1131,9 +1137,9 @@ static void dpa_ts_tx_enable(struct net_device *dev)
 	struct mac_device *mac_dev = priv->mac_dev;
 
 	if (mac_dev->fm_rtc_enable)
-		mac_dev->fm_rtc_enable(dev);
+		mac_dev->fm_rtc_enable(get_fm_handle(dev));
 	if (mac_dev->ptp_enable)
-		mac_dev->ptp_enable(mac_dev);
+		mac_dev->ptp_enable(mac_dev->get_mac_handle(mac_dev));
 
 	priv->ts_tx_en = TRUE;
 }
@@ -1150,10 +1156,10 @@ static void dpa_ts_tx_disable(struct net_device *dev)
 	struct mac_device *mac_dev = priv->mac_dev;
 
 	if (mac_dev->fm_rtc_disable)
-		mac_dev->fm_rtc_disable(dev);
+		mac_dev->fm_rtc_disable(get_fm_handle(dev));
 
 	if (mac_dev->ptp_disable)
-		mac_dev->ptp_disable(mac_dev);
+		mac_dev->ptp_disable(mac_dev->get_mac_handle(mac_dev));
 #endif
 
 	priv->ts_tx_en = FALSE;
@@ -1165,9 +1171,9 @@ static void dpa_ts_rx_enable(struct net_device *dev)
 	struct mac_device *mac_dev = priv->mac_dev;
 
 	if (mac_dev->fm_rtc_enable)
-		mac_dev->fm_rtc_enable(dev);
+		mac_dev->fm_rtc_enable(get_fm_handle(dev));
 	if (mac_dev->ptp_enable)
-		mac_dev->ptp_enable(mac_dev);
+		mac_dev->ptp_enable(mac_dev->get_mac_handle(mac_dev));
 
 	priv->ts_rx_en = TRUE;
 }
@@ -1184,10 +1190,10 @@ static void dpa_ts_rx_disable(struct net_device *dev)
 	struct mac_device *mac_dev = priv->mac_dev;
 
 	if (mac_dev->fm_rtc_disable)
-		mac_dev->fm_rtc_disable(dev);
+		mac_dev->fm_rtc_disable(get_fm_handle(dev));
 
 	if (mac_dev->ptp_disable)
-		mac_dev->ptp_disable(mac_dev);
+		mac_dev->ptp_disable(mac_dev->get_mac_handle(mac_dev));
 #endif
 
 	priv->ts_rx_en = FALSE;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index 9be51ce..7606c7a 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -517,7 +517,7 @@ static inline uint16_t dpa_get_buffer_size(struct dpa_buffer_layout_s *bl,
 	return dpa_get_headroom(bl) + data_size;
 }
 
-void fm_mac_dump_regs(struct mac_device *mac_dev);
+void fm_mac_dump_regs(struct fm_mac_dev *fm_mac_dev);
 
 void dpaa_eth_sysfs_remove(struct device *dev);
 void dpaa_eth_sysfs_init(struct device *dev);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sysfs.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sysfs.c
index 63bb153..05ae698 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sysfs.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sysfs.c
@@ -170,7 +170,7 @@ static ssize_t dpaa_eth_show_mac_regs(struct device *dev,
 	struct mac_device *mac_dev = priv->mac_dev;
 
 	if (mac_dev)
-		fm_mac_dump_regs(mac_dev);
+		fm_mac_dump_regs(mac_dev->get_mac_handle(mac_dev));
 	else
 		return sprintf(buf, "no mac registers\n");
 
diff --git a/drivers/net/ethernet/freescale/dpa/mac-api.c b/drivers/net/ethernet/freescale/dpa/mac-api.c
index 501b082..0f2524e 100644
--- a/drivers/net/ethernet/freescale/dpa/mac-api.c
+++ b/drivers/net/ethernet/freescale/dpa/mac-api.c
@@ -57,7 +57,7 @@ MODULE_AUTHOR("Emil Medve <Emilian.Medve@Freescale.com>");
 MODULE_DESCRIPTION(MAC_DESCRIPTION);
 
 struct mac_priv_s {
-	t_Handle	mac;
+	struct fm_mac_dev *fm_mac;
 };
 
 const char	*mac_driver_description __initconst = MAC_DESCRIPTION;
@@ -100,6 +100,21 @@ macdev2enetinterface(const struct mac_device *mac_dev)
 	}
 }
 
+static int fm_mac_set_exception(struct fm_mac_dev *fm_mac_dev,
+		e_FmMacExceptions exception, bool enable)
+{
+	int err;
+	int _errno;
+
+	err = FM_MAC_SetException(fm_mac_dev, exception, enable);
+
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0))
+		pr_err("FM_MAC_SetException() = 0x%08x\n", err);
+
+	return _errno;
+}
+
 static void mac_exception(t_Handle _mac_dev, e_FmMacExceptions exception)
 {
 	struct mac_device	*mac_dev;
@@ -108,8 +123,7 @@ static void mac_exception(t_Handle _mac_dev, e_FmMacExceptions exception)
 
 	if (e_FM_MAC_EX_10G_RX_FIFO_OVFL == exception) {
 		/* don't flag RX FIFO after the first */
-		FM_MAC_SetException(
-		    ((struct mac_priv_s *)macdev_priv(_mac_dev))->mac,
+		fm_mac_set_exception(mac_dev->get_mac_handle(mac_dev),
 		    e_FM_MAC_EX_10G_RX_FIFO_OVFL, false);
 		printk(KERN_ERR "10G MAC got RX FIFO Error = %x\n", exception);
 	}
@@ -118,10 +132,113 @@ static void mac_exception(t_Handle _mac_dev, e_FmMacExceptions exception)
 		exception);
 }
 
+static int fm_mac_free(struct fm_mac_dev *fm_mac_dev)
+{
+	int err;
+	int _error;
+
+	err = FM_MAC_Free(fm_mac_dev);
+	_error = -GET_ERROR_TYPE(err);
+
+	if (unlikely(_error < 0))
+		pr_err("FM_MAC_Free() = 0x%08x\n", err);
+
+	return _error;
+}
+
+struct fm_mac_dev *fm_mac_config(t_FmMacParams *params)
+{
+	struct fm_mac_dev *fm_mac_dev;
+
+	fm_mac_dev = FM_MAC_Config(params);
+	if (unlikely(fm_mac_dev == NULL))
+		pr_err("FM_MAC_Config() failed\n");
+
+	return fm_mac_dev;
+}
+
+int fm_mac_config_max_frame_length(struct fm_mac_dev *fm_mac_dev,
+		int len)
+{
+	int err;
+	int _errno;
+
+	err = FM_MAC_ConfigMaxFrameLength(fm_mac_dev, len);
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0))
+		pr_err("FM_MAC_ConfigMaxFrameLength() = 0x%08x\n", err);
+
+	return _errno;
+}
+
+int fm_mac_config_pad_and_crc(struct fm_mac_dev *fm_mac_dev, bool enable)
+{
+	int err;
+	int _errno;
+
+	err = FM_MAC_ConfigPadAndCrc(fm_mac_dev, enable);
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0))
+		pr_err("FM_MAC_ConfigPadAndCrc() = 0x%08x\n", err);
+
+	return _errno;
+}
+
+int fm_mac_config_half_duplex(struct fm_mac_dev *fm_mac_dev, bool enable)
+{
+	int err;
+	int _errno;
+
+	err = FM_MAC_ConfigHalfDuplex(fm_mac_dev, enable);
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0))
+		pr_err("FM_MAC_ConfigHalfDuplex() = 0x%08x\n", err);
+
+	return _errno;
+}
+
+int fm_mac_config_reset_on_init(struct fm_mac_dev *fm_mac_dev, bool enable)
+{
+	int err;
+	int _errno;
+
+	err = FM_MAC_ConfigResetOnInit(fm_mac_dev, enable);
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0))
+		pr_err("FM_MAC_ConfigResetOnInit() = 0x%08x\n", err);
+
+	return _errno;
+}
+
+int fm_mac_init(struct fm_mac_dev *fm_mac_dev)
+{
+	int err;
+	int _errno;
+
+	err = FM_MAC_Init(fm_mac_dev);
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0))
+		pr_err("FM_MAC_Init() = 0x%08x\n", err);
+
+	return _errno;
+}
+
+int fm_mac_get_version(struct fm_mac_dev *fm_mac_dev, uint32_t *version)
+{
+	int err;
+	int _errno;
+
+	err = FM_MAC_GetVesrion(fm_mac_dev, version);
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0))
+		pr_err("FM_MAC_GetVesrion() = 0x%08x\n", err);
+
+	return _errno;
+}
+
 static int __cold init(struct mac_device *mac_dev)
 {
 	int					_errno;
-	t_Error				err;
 	struct mac_priv_s	*priv;
 	t_FmMacParams		param;
 	uint32_t			version;
@@ -133,101 +250,71 @@ static int __cold init(struct mac_device *mac_dev)
 	param.enetMode	= macdev2enetinterface(mac_dev);
 	memcpy(&param.addr, mac_dev->addr, min(sizeof(param.addr),
 		sizeof(mac_dev->addr)));
-	param.macId			= mac_dev->cell_index;
-	param.h_Fm 			= (t_Handle)mac_dev->fm;
+	param.macId		= mac_dev->cell_index;
+	param.h_Fm		= (t_Handle)mac_dev->fm;
 	param.mdioIrq		= NO_IRQ;
 	param.f_Exception	= mac_exception;
 	param.f_Event		= mac_exception;
-	param.h_App			= mac_dev;
+	param.h_App		= mac_dev;
 
-	priv->mac = FM_MAC_Config(&param);
-	if (unlikely(priv->mac == NULL)) {
-		dev_err(mac_dev->dev, "FM_MAC_Config() failed\n");
+	priv->fm_mac = fm_mac_config(&param);
+	if (unlikely(priv->fm_mac == NULL)) {
 		_errno = -EINVAL;
 		goto _return;
 	}
 
-	fm_mac_set_handle(mac_dev->fm_dev, priv->mac,
+	fm_mac_set_handle(mac_dev->fm_dev, priv->fm_mac,
 		(macdev2enetinterface(mac_dev) != e_ENET_MODE_XGMII_10000) ?
 			param.macId : param.macId + FM_MAX_NUM_OF_1G_MACS);
 
-	err = FM_MAC_ConfigMaxFrameLength(priv->mac,
+	_errno = fm_mac_config_max_frame_length(priv->fm_mac,
 					  fm_get_max_frm());
-	_errno = -GET_ERROR_TYPE(err);
-	if (unlikely(_errno < 0)) {
-		dev_err(mac_dev->dev,
-			"FM_MAC_ConfigMaxFrameLength() = 0x%08x\n", err);
+	if (unlikely(_errno < 0))
 		goto _return_fm_mac_free;
-	}
 
 	if (macdev2enetinterface(mac_dev) != e_ENET_MODE_XGMII_10000) {
 		/* 10G always works with pad and CRC */
-		err = FM_MAC_ConfigPadAndCrc(priv->mac, true);
-		_errno = -GET_ERROR_TYPE(err);
-		if (unlikely(_errno < 0)) {
-			dev_err(mac_dev->dev,
-				"FM_MAC_ConfigPadAndCrc() = 0x%08x\n", err);
+		_errno = fm_mac_config_pad_and_crc(priv->fm_mac, true);
+		if (unlikely(_errno < 0))
 			goto _return_fm_mac_free;
-		}
 
-		err = FM_MAC_ConfigHalfDuplex(priv->mac, mac_dev->half_duplex);
-		_errno = -GET_ERROR_TYPE(err);
-		if (unlikely(_errno < 0)) {
-			dev_err(mac_dev->dev,
-				"FM_MAC_ConfigHalfDuplex() = 0x%08x\n", err);
+		_errno = fm_mac_config_half_duplex(priv->fm_mac,
+				mac_dev->half_duplex);
+		if (unlikely(_errno < 0))
 			goto _return_fm_mac_free;
-		}
 	}
 	else  {
-		err = FM_MAC_ConfigResetOnInit(priv->mac, true);
-		_errno = -GET_ERROR_TYPE(err);
-		if (unlikely(_errno < 0)) {
-			dev_err(mac_dev->dev,
-				"FM_MAC_ConfigResetOnInit() = 0x%08x\n", err);
+		_errno = fm_mac_config_reset_on_init(priv->fm_mac, true);
+		if (unlikely(_errno < 0))
 			goto _return_fm_mac_free;
-		}
 	}
 
-	err = FM_MAC_Init(priv->mac);
-	_errno = -GET_ERROR_TYPE(err);
-	if (unlikely(_errno < 0)) {
-		dev_err(mac_dev->dev, "FM_MAC_Init() = 0x%08x\n", err);
+	_errno = fm_mac_init(priv->fm_mac);
+	if (unlikely(_errno < 0))
 		goto _return_fm_mac_free;
-	}
 
 #ifndef CONFIG_FMAN_MIB_CNT_OVF_IRQ_EN
 	/* For 1G MAC, disable by default the MIB counters overflow interrupt */
 	if (macdev2enetinterface(mac_dev) != e_ENET_MODE_XGMII_10000) {
-		err = FM_MAC_SetException(priv->mac,
+		_errno = fm_mac_set_exception(mac_dev->get_mac_handle(mac_dev),
 				e_FM_MAC_EX_1G_RX_MIB_CNT_OVFL, FALSE);
-		_errno = -GET_ERROR_TYPE(err);
-		if (unlikely(_errno < 0)) {
-			dev_err(mac_dev->dev,
-				"FM_MAC_SetException() = 0x%08x\n", err);
+		if (unlikely(_errno < 0))
 			goto _return_fm_mac_free;
-		}
 	}
 #endif /* !CONFIG_FMAN_MIB_CNT_OVF_IRQ_EN */
 
 	/* For 10G MAC, disable Tx ECC exception */
 	if (macdev2enetinterface(mac_dev) == e_ENET_MODE_XGMII_10000) {
-		err = FM_MAC_SetException(priv->mac,
+		_errno = fm_mac_set_exception(mac_dev->get_mac_handle(mac_dev),
 					  e_FM_MAC_EX_10G_1TX_ECC_ER, FALSE);
-		_errno = -GET_ERROR_TYPE(err);
-		if (unlikely(_errno < 0)) {
-			dev_err(mac_dev->dev,
-				"FM_MAC_SetException() = 0x%08x\n", err);
+		if (unlikely(_errno < 0))
 			goto _return_fm_mac_free;
-		}
 	}
 
-	err = FM_MAC_GetVesrion(priv->mac, &version);
-	_errno = -GET_ERROR_TYPE(err);
-	if (unlikely(_errno < 0)) {
-		dev_err(mac_dev->dev, "FM_MAC_GetVesrion() = 0x%08x\n",
-				err);
+	_errno = fm_mac_get_version(priv->fm_mac, &version);
+	if (unlikely(_errno < 0))
 		goto _return_fm_mac_free;
-	}
+
 	dev_info(mac_dev->dev, "FMan %s version: 0x%08x\n",
 		((macdev2enetinterface(mac_dev) != e_ENET_MODE_XGMII_10000) ?
 			"dTSEC" : "XGEC"), version);
@@ -236,9 +323,8 @@ static int __cold init(struct mac_device *mac_dev)
 
 
 _return_fm_mac_free:
-	err = FM_MAC_Free(priv->mac);
-	if (unlikely(-GET_ERROR_TYPE(err) < 0))
-		dev_err(mac_dev->dev, "FM_MAC_Free() = 0x%08x\n", err);
+	fm_mac_free(mac_dev->get_mac_handle(mac_dev));
+
 _return:
 	return _errno;
 }
@@ -246,7 +332,6 @@ _return:
 static int __cold memac_init(struct mac_device *mac_dev)
 {
 	int			_errno;
-	t_Error			err;
 	struct mac_priv_s	*priv;
 	t_FmMacParams		param;
 
@@ -263,61 +348,69 @@ static int __cold memac_init(struct mac_device *mac_dev)
 	param.f_Event		= mac_exception;
 	param.h_App		= mac_dev;
 
-	priv->mac = FM_MAC_Config(&param);
-	if (unlikely(priv->mac == NULL)) {
-		dev_err(mac_dev->dev, "FM_MAC_Config() failed\n");
+	priv->fm_mac = fm_mac_config(&param);
+	if (unlikely(priv->fm_mac == NULL)) {
 		_errno = -EINVAL;
 		goto _return;
 	}
 
-	err = FM_MAC_ConfigMaxFrameLength(priv->mac, fm_get_max_frm());
-	_errno = -GET_ERROR_TYPE(err);
-	if (unlikely(_errno < 0)) {
-		dev_err(mac_dev->dev,
-			"FM_MAC_ConfigMaxFrameLength() = 0x%08x\n", err);
+	_errno = fm_mac_config_max_frame_length(priv->fm_mac, fm_get_max_frm());
+	if (unlikely(_errno < 0))
 		goto _return_fm_mac_free;
-	}
 
-	err = FM_MAC_ConfigResetOnInit(priv->mac, true);
-	_errno = -GET_ERROR_TYPE(err);
-	if (unlikely(_errno < 0)) {
-		dev_err(mac_dev->dev,
-			"FM_MAC_ConfigResetOnInit() = 0x%08x\n", err);
+	_errno = fm_mac_config_reset_on_init(priv->fm_mac, true);
+	if (unlikely(_errno < 0))
 		goto _return_fm_mac_free;
-	}
 
-	err = FM_MAC_Init(priv->mac);
-	_errno = -GET_ERROR_TYPE(err);
-	if (unlikely(_errno < 0)) {
-		dev_err(mac_dev->dev, "FM_MAC_Init() = 0x%08x\n", err);
+	_errno = fm_mac_init(priv->fm_mac);
+	if (unlikely(_errno < 0))
 		goto _return_fm_mac_free;
-	}
 
 	dev_info(mac_dev->dev, "FMan MEMAC\n");
 
 	goto _return;
 
 _return_fm_mac_free:
-	err = FM_MAC_Free(priv->mac);
-	if (unlikely(-GET_ERROR_TYPE(err) < 0))
-		dev_err(mac_dev->dev, "FM_MAC_Free() = 0x%08x\n", err);
+	fm_mac_free(priv->fm_mac);
+
 _return:
 	return _errno;
 }
 
-static int __cold start(struct mac_device *mac_dev)
+static int __cold fm_mac_enable(struct fm_mac_dev *fm_mac_dev)
 {
 	int	 _errno;
 	t_Error	 err;
-	struct phy_device *phy_dev = mac_dev->phy_dev;
 
-	err = FM_MAC_Enable(((struct mac_priv_s *)macdev_priv(mac_dev))->mac,
-			e_COMM_MODE_RX_AND_TX);
+	err = FM_MAC_Enable(fm_mac_dev, e_COMM_MODE_RX_AND_TX);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_MAC_Enable() = 0x%08x\n", err);
+		pr_err("FM_MAC_Enable() = 0x%08x\n", err);
 
-	if (phy_dev) {
+	return _errno;
+}
+
+static int __cold fm_mac_disable(struct fm_mac_dev *fm_mac_dev)
+{
+	int	 _errno;
+	t_Error	 err;
+
+	err = FM_MAC_Disable(fm_mac_dev, e_COMM_MODE_RX_AND_TX);
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0))
+		pr_err("FM_MAC_Disable() = 0x%08x\n", err);
+
+	return _errno;
+}
+
+static int __cold start(struct mac_device *mac_dev)
+{
+	int	 _errno;
+	struct phy_device *phy_dev = mac_dev->phy_dev;
+
+	_errno = fm_mac_enable(mac_dev->get_mac_handle(mac_dev));
+
+	if (!_errno && phy_dev) {
 		if (macdev2enetinterface(mac_dev) != e_ENET_MODE_XGMII_10000)
 			phy_start(phy_dev);
 		else if (phy_dev->drv->read_status)
@@ -329,36 +422,57 @@ static int __cold start(struct mac_device *mac_dev)
 
 static int __cold stop(struct mac_device *mac_dev)
 {
-	int	 _errno;
-	t_Error	 err;
-
 	if (mac_dev->phy_dev &&
 		(macdev2enetinterface(mac_dev) != e_ENET_MODE_XGMII_10000))
 		phy_stop(mac_dev->phy_dev);
 
-	err = FM_MAC_Disable(((struct mac_priv_s *)macdev_priv(mac_dev))->mac,
-				e_COMM_MODE_RX_AND_TX);
+	return fm_mac_disable(mac_dev->get_mac_handle(mac_dev));
+}
+
+static int __cold fm_mac_set_promiscuous(struct fm_mac_dev *fm_mac_dev,
+		bool enable)
+{
+	int	_errno;
+	t_Error	err;
+
+	err = FM_MAC_SetPromiscuous(fm_mac_dev, enable);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_MAC_Disable() = 0x%08x\n", err);
+		pr_err("FM_MAC_SetPromiscuous() = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static int __cold change_promisc(struct mac_device *mac_dev)
+static int __cold fm_mac_remove_hash_mac_addr(struct fm_mac_dev *fm_mac_dev,
+		t_EnetAddr *mac_addr)
 {
-	int	 _errno;
-	t_Error	 err;
+	int	_errno;
+	t_Error	err;
 
-	err = FM_MAC_SetPromiscuous(
-			((struct mac_priv_s *)macdev_priv(mac_dev))->mac,
-			mac_dev->promisc = !mac_dev->promisc);
+	err = FM_MAC_RemoveHashMacAddr(fm_mac_dev, mac_addr);
 	_errno = -GET_ERROR_TYPE(err);
-	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev,
-				"FM_MAC_SetPromiscuous() = 0x%08x\n", err);
+	if (_errno < 0) {
+		pr_err("FM_MAC_RemoveHashMacAddr() = 0x%08x\n", err);
+		return _errno;
+	}
 
-	return _errno;
+	return 0;
+}
+
+static int __cold fm_mac_add_hash_mac_addr(struct fm_mac_dev *fm_mac_dev,
+		t_EnetAddr *mac_addr)
+{
+	int	_errno;
+	t_Error	err;
+
+	err = FM_MAC_AddHashMacAddr(fm_mac_dev, mac_addr);
+	_errno = -GET_ERROR_TYPE(err);
+	if (_errno < 0) {
+		pr_err("FM_MAC_AddHashMacAddr() = 0x%08x\n", err);
+		return _errno;
+	}
+
+	return 0;
 }
 
 static int __cold set_multi(struct net_device *net_dev)
@@ -369,7 +483,6 @@ static int __cold set_multi(struct net_device *net_dev)
 	struct mac_address	*old_addr, *tmp;
 	struct netdev_hw_addr	*ha;
 	int 			 _errno;
-	t_Error 		 err;
 
 	priv = netdev_priv(net_dev);
 	mac_dev = priv->mac_dev;
@@ -377,28 +490,22 @@ static int __cold set_multi(struct net_device *net_dev)
 
 	/* Clear previous address list */
 	list_for_each_entry_safe(old_addr, tmp, &mac_dev->mc_addr_list, list) {
-		err = FM_MAC_RemoveHashMacAddr(mac_priv->mac,
-					       (t_EnetAddr  *)old_addr->addr);
-		_errno = -GET_ERROR_TYPE(err);
-		if (_errno < 0) {
-			dev_err(mac_dev->dev,
-				"FM_MAC_RemoveHashMacAddr() = 0x%08x\n", err);
+		_errno = fm_mac_remove_hash_mac_addr(mac_priv->fm_mac,
+				(t_EnetAddr *)old_addr->addr);
+		if (_errno < 0)
 			return _errno;
-		}
+
 		list_del(&old_addr->list);
 		kfree(old_addr);
 	}
 
 	/* Add all the addresses from the new list */
 	netdev_for_each_mc_addr(ha, net_dev) {
-		err = FM_MAC_AddHashMacAddr(mac_priv->mac,
+		_errno = fm_mac_add_hash_mac_addr(mac_priv->fm_mac,
 				(t_EnetAddr *)ha->addr);
-		_errno = -GET_ERROR_TYPE(err);
-		if (_errno < 0) {
-			dev_err(mac_dev->dev,
-				     "FM_MAC_AddHashMacAddr() = 0x%08x\n", err);
+		if (_errno < 0)
 			return _errno;
-		}
+
 		tmp = kmalloc(sizeof(struct mac_address), GFP_ATOMIC);
 		if (!tmp) {
 			dev_err(mac_dev->dev, "Out of memory\n");
@@ -410,50 +517,49 @@ static int __cold set_multi(struct net_device *net_dev)
 	return 0;
 }
 
-static int __cold change_addr(struct mac_device *mac_dev, uint8_t *addr)
+static int __cold fm_mac_modify_mac_addr(struct fm_mac_dev *fm_mac_dev,
+					 uint8_t *addr)
 {
 	int	_errno;
 	t_Error err;
 
-	err = FM_MAC_ModifyMacAddr(
-			((struct mac_priv_s *)macdev_priv(mac_dev))->mac,
-			(t_EnetAddr *)addr);
+	err = FM_MAC_ModifyMacAddr(fm_mac_dev, (t_EnetAddr *)addr);
 	_errno = -GET_ERROR_TYPE(err);
 	if (_errno < 0)
-		dev_err(mac_dev->dev,
-			     "FM_MAC_ModifyMacAddr() = 0x%08x\n", err);
+		pr_err("FM_MAC_ModifyMacAddr() = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static void adjust_link(struct net_device *net_dev)
+static int fm_mac_adjust_link(struct fm_mac_dev *fm_mac_dev,
+		bool link, int speed, bool duplex)
 {
-	struct dpa_priv_s *priv = netdev_priv(net_dev);
-	struct mac_device *mac_dev = priv->mac_dev;
-	struct phy_device *phy_dev = mac_dev->phy_dev;
-#if (DPAA_VERSION < 11)
-	struct mac_priv_s *mac_priv;
-#endif
 	int	 _errno;
 	t_Error	 err;
 
-	if (!phy_dev->link) {
+	if (!link) {
 #if (DPAA_VERSION < 11)
-		mac_priv = (struct mac_priv_s *)macdev_priv(mac_dev);
-		FM_MAC_RestartAutoneg(mac_priv->mac);
+		FM_MAC_RestartAutoneg(fm_mac_dev);
 #endif
-		return;
+		return 0;
 	}
 
-	err = FM_MAC_AdjustLink(
-			((struct mac_priv_s *)macdev_priv(mac_dev))->mac,
-			phy_dev->speed, phy_dev->duplex);
+	err = FM_MAC_AdjustLink(fm_mac_dev, speed, duplex);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_MAC_AdjustLink() = 0x%08x\n",
-				err);
+		pr_err("FM_MAC_AdjustLink() = 0x%08x\n", err);
+
+	return _errno;
+}
 
-	return;
+static void adjust_link(struct net_device *net_dev)
+{
+	struct dpa_priv_s *priv = netdev_priv(net_dev);
+	struct mac_device *mac_dev = priv->mac_dev;
+	struct phy_device *phy_dev = mac_dev->phy_dev;
+
+	fm_mac_adjust_link(mac_dev->get_mac_handle(mac_dev),
+			phy_dev->link, phy_dev->speed, phy_dev->duplex);
 }
 
 /* Initializes driver's PHY state, and attaches to the PHY.
@@ -561,213 +667,174 @@ static int memac_init_phy(struct net_device *net_dev)
 	return 0;
 }
 
-static int __cold uninit(struct mac_device *mac_dev)
+static int __cold uninit(struct fm_mac_dev *fm_mac_dev)
 {
 	int			 _errno, __errno;
-	t_Error			 err;
-	const struct mac_priv_s	*priv;
 
-	priv = macdev_priv(mac_dev);
+	_errno = fm_mac_disable(fm_mac_dev);
+	__errno = fm_mac_free(fm_mac_dev);
 
-	err = FM_MAC_Disable(priv->mac, e_COMM_MODE_RX_AND_TX);
-	_errno = -GET_ERROR_TYPE(err);
-	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_MAC_Disable() = 0x%08x\n", err);
-
-	err = FM_MAC_Free(priv->mac);
-	__errno = -GET_ERROR_TYPE(err);
 	if (unlikely(__errno < 0)) {
-		dev_err(mac_dev->dev, "FM_MAC_Free() = 0x%08x\n", err);
-		if (_errno < 0)
-			_errno = __errno;
+		_errno = __errno;
 	}
 
 	return _errno;
 }
 
-static int __cold ptp_enable(struct mac_device *mac_dev)
+static struct fm_mac_dev *get_mac_handle(struct mac_device *mac_dev)
 {
-	int			 _errno;
-	t_Error			 err;
 	const struct mac_priv_s	*priv;
-
 	priv = macdev_priv(mac_dev);
+	return priv->fm_mac;
+}
 
-	err = FM_MAC_Enable1588TimeStamp(priv->mac);
+static int __cold fm_mac_enable_1588_time_stamp(struct fm_mac_dev *fm_mac_dev)
+{
+	int			 _errno;
+	t_Error			 err;
+
+	err = FM_MAC_Enable1588TimeStamp(fm_mac_dev);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_MAC_Enable1588TimeStamp()"
-				"= 0x%08x\n", err);
+		pr_err("FM_MAC_Enable1588TimeStamp() = 0x%08x\n", err);
 	return _errno;
 }
 
-static int __cold ptp_disable(struct mac_device *mac_dev)
+static int __cold fm_mac_disable_1588_time_stamp(struct fm_mac_dev *fm_mac_dev)
 {
 	int			 _errno;
 	t_Error			 err;
-	const struct mac_priv_s	*priv;
-
-	priv = macdev_priv(mac_dev);
 
-	err = FM_MAC_Disable1588TimeStamp(priv->mac);
+	err = FM_MAC_Disable1588TimeStamp(fm_mac_dev);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_MAC_Disable1588TimeStamp()"
-				"= 0x%08x\n", err);
+		pr_err("FM_MAC_Disable1588TimeStamp() = 0x%08x\n", err);
 	return _errno;
 }
 
-static void *get_mac_handle(struct mac_device *mac_dev)
-{
-	const struct mac_priv_s	*priv;
-	priv = macdev_priv(mac_dev);
-	return (void*)priv->mac;
-}
-
-static int __cold set_rx_pause(struct mac_device *mac_dev, bool en)
+static int __cold fm_mac_set_rx_ignore_pause_frames(
+		struct fm_mac_dev *fm_mac_dev, bool en)
 {
 	int	_errno;
 	t_Error err;
 
 	/* if rx pause is enabled, do NOT ignore pause frames */
-	err = FM_MAC_SetRxIgnorePauseFrames(
-			((struct mac_priv_s *)macdev_priv(mac_dev))->mac, !en);
+	err = FM_MAC_SetRxIgnorePauseFrames(fm_mac_dev, !en);
 
 	_errno = -GET_ERROR_TYPE(err);
 	if (_errno < 0)
-		dev_err(mac_dev->dev,
-				 "FM_MAC_SetRxIgnorePauseFrames() = 0x%08x\n", err);
+		pr_err("FM_MAC_SetRxIgnorePauseFrames() = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static int __cold set_tx_pause(struct mac_device *mac_dev, bool en)
+static int __cold fm_mac_set_tx_pause_frames(struct fm_mac_dev *fm_mac_dev,
+					     bool en)
 {
 	int	_errno;
 	t_Error err;
 
 	if (en)
-		err = FM_MAC_SetTxPauseFrames(
-				((struct mac_priv_s *)macdev_priv(mac_dev))->mac,
+		err = FM_MAC_SetTxPauseFrames(fm_mac_dev,
 				TX_PAUSE_PRIO_DEFAULT,
 				TX_PAUSE_TIME_ENABLE,
 				TX_PAUSE_THRESH_DEFAULT);
 	else
-		err = FM_MAC_SetTxPauseFrames(
-				((struct mac_priv_s *)macdev_priv(mac_dev))->mac,
+		err = FM_MAC_SetTxPauseFrames(fm_mac_dev,
 				TX_PAUSE_PRIO_DEFAULT,
 				TX_PAUSE_TIME_DISABLE,
 				TX_PAUSE_THRESH_DEFAULT);
 
 	_errno = -GET_ERROR_TYPE(err);
 	if (_errno < 0)
-		dev_err(mac_dev->dev,
-				 "FM_MAC_SetTxPauseFrames() = 0x%08x\n", err);
+		pr_err("FM_MAC_SetTxPauseFrames() = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static int __cold fm_rtc_enable(struct net_device *net_dev)
+static int __cold fm_rtc_enable(struct fm *fm_dev)
 {
-	struct dpa_priv_s *priv = netdev_priv(net_dev);
-	struct mac_device *mac_dev = priv->mac_dev;
 	int			 _errno;
 	t_Error			 err;
 
-	err = FM_RTC_Enable(fm_get_rtc_handle(mac_dev->fm_dev), 0);
+	err = FM_RTC_Enable(fm_get_rtc_handle(fm_dev), 0);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_RTC_Enable = 0x%08x\n", err);
+		pr_err("FM_RTC_Enable = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static int __cold fm_rtc_disable(struct net_device *net_dev)
+static int __cold fm_rtc_disable(struct fm *fm_dev)
 {
-	struct dpa_priv_s *priv = netdev_priv(net_dev);
-	struct mac_device *mac_dev = priv->mac_dev;
 	int			 _errno;
 	t_Error			 err;
 
-	err = FM_RTC_Disable(fm_get_rtc_handle(mac_dev->fm_dev));
+	err = FM_RTC_Disable(fm_get_rtc_handle(fm_dev));
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_RTC_Disable = 0x%08x\n", err);
+		pr_err("FM_RTC_Disable = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static int __cold fm_rtc_get_cnt(struct net_device *net_dev, uint64_t *ts)
+static int __cold fm_rtc_get_cnt(struct fm *fm_dev, uint64_t *ts)
 {
-	struct dpa_priv_s *priv = netdev_priv(net_dev);
-	struct mac_device *mac_dev = priv->mac_dev;
 	int _errno;
 	t_Error	err;
 
-	err = FM_RTC_GetCurrentTime(fm_get_rtc_handle(mac_dev->fm_dev), ts);
+	err = FM_RTC_GetCurrentTime(fm_get_rtc_handle(fm_dev), ts);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_RTC_GetCurrentTime = 0x%08x\n",
-				err);
+		pr_err("FM_RTC_GetCurrentTime = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static int __cold fm_rtc_set_cnt(struct net_device *net_dev, uint64_t ts)
+static int __cold fm_rtc_set_cnt(struct fm *fm_dev, uint64_t ts)
 {
-	struct dpa_priv_s *priv = netdev_priv(net_dev);
-	struct mac_device *mac_dev = priv->mac_dev;
 	int _errno;
 	t_Error	err;
 
-	err = FM_RTC_SetCurrentTime(fm_get_rtc_handle(mac_dev->fm_dev), ts);
+	err = FM_RTC_SetCurrentTime(fm_get_rtc_handle(fm_dev), ts);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_RTC_SetCurrentTime = 0x%08x\n",
-				err);
+		pr_err("FM_RTC_SetCurrentTime = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static int __cold fm_rtc_get_drift(struct net_device *net_dev, uint32_t *drift)
+static int __cold fm_rtc_get_drift(struct fm *fm_dev, uint32_t *drift)
 {
-	struct dpa_priv_s *priv = netdev_priv(net_dev);
-	struct mac_device *mac_dev = priv->mac_dev;
 	int _errno;
 	t_Error	err;
 
-	err = FM_RTC_GetFreqCompensation(fm_get_rtc_handle(mac_dev->fm_dev),
+	err = FM_RTC_GetFreqCompensation(fm_get_rtc_handle(fm_dev),
 			drift);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_RTC_GetFreqCompensation ="
-				"0x%08x\n", err);
+		pr_err("FM_RTC_GetFreqCompensation = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static int __cold fm_rtc_set_drift(struct net_device *net_dev, uint32_t drift)
+static int __cold fm_rtc_set_drift(struct fm *fm_dev, uint32_t drift)
 {
-	struct dpa_priv_s *priv = netdev_priv(net_dev);
-	struct mac_device *mac_dev = priv->mac_dev;
 	int _errno;
 	t_Error	err;
 
-	err = FM_RTC_SetFreqCompensation(fm_get_rtc_handle(mac_dev->fm_dev),
+	err = FM_RTC_SetFreqCompensation(fm_get_rtc_handle(fm_dev),
 			drift);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_RTC_SetFreqCompensation ="
-				"0x%08x\n", err);
+		pr_err("FM_RTC_SetFreqCompensation = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static int __cold fm_rtc_set_alarm(struct net_device *net_dev, uint32_t id,
+static int __cold fm_rtc_set_alarm(struct fm *fm_dev, uint32_t id,
 		uint64_t time)
 {
-	struct dpa_priv_s *priv = netdev_priv(net_dev);
-	struct mac_device *mac_dev = priv->mac_dev;
 	t_FmRtcAlarmParams alarm;
 	int _errno;
 	t_Error	err;
@@ -775,21 +842,18 @@ static int __cold fm_rtc_set_alarm(struct net_device *net_dev, uint32_t id,
 	alarm.alarmId = id;
 	alarm.alarmTime = time;
 	alarm.f_AlarmCallback = NULL;
-	err = FM_RTC_SetAlarm(fm_get_rtc_handle(mac_dev->fm_dev),
+	err = FM_RTC_SetAlarm(fm_get_rtc_handle(fm_dev),
 			&alarm);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_RTC_SetAlarm ="
-				"0x%08x\n", err);
+		pr_err("FM_RTC_SetAlarm = 0x%08x\n", err);
 
 	return _errno;
 }
 
-static int __cold fm_rtc_set_fiper(struct net_device *net_dev, uint32_t id,
+static int __cold fm_rtc_set_fiper(struct fm *fm_dev, uint32_t id,
 		uint64_t fiper)
 {
-	struct dpa_priv_s *priv = netdev_priv(net_dev);
-	struct mac_device *mac_dev = priv->mac_dev;
 	t_FmRtcPeriodicPulseParams pp;
 	int _errno;
 	t_Error	err;
@@ -797,20 +861,17 @@ static int __cold fm_rtc_set_fiper(struct net_device *net_dev, uint32_t id,
 	pp.periodicPulseId = id;
 	pp.periodicPulsePeriod = fiper;
 	pp.f_PeriodicPulseCallback = NULL;
-	err = FM_RTC_SetPeriodicPulse(fm_get_rtc_handle(mac_dev->fm_dev), &pp);
+	err = FM_RTC_SetPeriodicPulse(fm_get_rtc_handle(fm_dev), &pp);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0))
-		dev_err(mac_dev->dev, "FM_RTC_SetPeriodicPulse ="
-				"0x%08x\n", err);
+		pr_err("FM_RTC_SetPeriodicPulse = 0x%08x\n", err);
 
 	return _errno;
 }
 
-void fm_mac_dump_regs(struct mac_device *mac_dev)
+void fm_mac_dump_regs(struct fm_mac_dev *fm_mac_dev)
 {
-	struct mac_priv_s *mac_priv = macdev_priv(mac_dev);
-
-	FM_MAC_DumpRegs(mac_priv->mac);
+	FM_MAC_DumpRegs(fm_mac_dev);
 }
 
 static void __cold setup_dtsec(struct mac_device *mac_dev)
@@ -819,15 +880,15 @@ static void __cold setup_dtsec(struct mac_device *mac_dev)
 	mac_dev->init		= init;
 	mac_dev->start		= start;
 	mac_dev->stop		= stop;
-	mac_dev->change_promisc	= change_promisc;
-	mac_dev->change_addr    = change_addr;
+	mac_dev->set_promisc	= fm_mac_set_promiscuous;
+	mac_dev->change_addr    = fm_mac_modify_mac_addr;
 	mac_dev->set_multi      = set_multi;
 	mac_dev->uninit		= uninit;
-	mac_dev->ptp_enable		= ptp_enable;
-	mac_dev->ptp_disable		= ptp_disable;
+	mac_dev->ptp_enable		= fm_mac_enable_1588_time_stamp;
+	mac_dev->ptp_disable		= fm_mac_disable_1588_time_stamp;
 	mac_dev->get_mac_handle		= get_mac_handle;
-	mac_dev->set_tx_pause		= set_tx_pause;
-	mac_dev->set_rx_pause		= set_rx_pause;
+	mac_dev->set_tx_pause		= fm_mac_set_tx_pause_frames;
+	mac_dev->set_rx_pause		= fm_mac_set_rx_ignore_pause_frames;
 	mac_dev->fm_rtc_enable		= fm_rtc_enable;
 	mac_dev->fm_rtc_disable		= fm_rtc_disable;
 	mac_dev->fm_rtc_get_cnt		= fm_rtc_get_cnt;
@@ -844,12 +905,13 @@ static void __cold setup_xgmac(struct mac_device *mac_dev)
 	mac_dev->init		= init;
 	mac_dev->start		= start;
 	mac_dev->stop		= stop;
-	mac_dev->change_promisc	= change_promisc;
-	mac_dev->change_addr    = change_addr;
+	mac_dev->set_promisc	= fm_mac_set_promiscuous;
+	mac_dev->change_addr    = fm_mac_modify_mac_addr;
 	mac_dev->set_multi      = set_multi;
 	mac_dev->uninit		= uninit;
-	mac_dev->set_tx_pause	= set_tx_pause;
-	mac_dev->set_rx_pause	= set_rx_pause;
+	mac_dev->get_mac_handle	= get_mac_handle;
+	mac_dev->set_tx_pause	= fm_mac_set_tx_pause_frames;
+	mac_dev->set_rx_pause	= fm_mac_set_rx_ignore_pause_frames;
 }
 
 static void __cold setup_memac(struct mac_device *mac_dev)
@@ -858,13 +920,13 @@ static void __cold setup_memac(struct mac_device *mac_dev)
 	mac_dev->init		= memac_init;
 	mac_dev->start		= start;
 	mac_dev->stop		= stop;
-	mac_dev->change_promisc	= change_promisc;
-	mac_dev->change_addr    = change_addr;
+	mac_dev->set_promisc	= fm_mac_set_promiscuous;
+	mac_dev->change_addr    = fm_mac_modify_mac_addr;
 	mac_dev->set_multi      = set_multi;
 	mac_dev->uninit		= uninit;
 	mac_dev->get_mac_handle		= get_mac_handle;
-	mac_dev->set_tx_pause		= set_tx_pause;
-	mac_dev->set_rx_pause		= set_rx_pause;
+	mac_dev->set_tx_pause		= fm_mac_set_tx_pause_frames;
+	mac_dev->set_rx_pause		= fm_mac_set_rx_ignore_pause_frames;
 	mac_dev->fm_rtc_enable		= fm_rtc_enable;
 	mac_dev->fm_rtc_disable		= fm_rtc_disable;
 	mac_dev->fm_rtc_get_cnt		= fm_rtc_get_cnt;
diff --git a/drivers/net/ethernet/freescale/dpa/mac.c b/drivers/net/ethernet/freescale/dpa/mac.c
index 19db061..7296451 100644
--- a/drivers/net/ethernet/freescale/dpa/mac.c
+++ b/drivers/net/ethernet/freescale/dpa/mac.c
@@ -117,7 +117,7 @@ static int __cold free_macdev(struct mac_device *mac_dev)
 {
 	dev_set_drvdata(mac_dev->dev, NULL);
 
-	return mac_dev->uninit(mac_dev);
+	return mac_dev->uninit(mac_dev->get_mac_handle(mac_dev));
 }
 
 static const struct of_device_id mac_match[] = {
@@ -198,7 +198,7 @@ static int __cold mac_probe(struct platform_device *_of_dev)
 		goto _return_of_node_put;
 	}
 
-    mac_dev->fm = (void *)fm_get_handle(mac_dev->fm_dev);
+	mac_dev->fm = (void *)fm_get_handle(mac_dev->fm_dev);
 	of_node_put(dev_node);
 
 	/* Get the address of the memory mapped registers */
diff --git a/drivers/net/ethernet/freescale/dpa/mac.h b/drivers/net/ethernet/freescale/dpa/mac.h
index 7025ea7..d1db149 100644
--- a/drivers/net/ethernet/freescale/dpa/mac.h
+++ b/drivers/net/ethernet/freescale/dpa/mac.h
@@ -41,6 +41,9 @@
 
 enum {DTSEC, XGMAC, MEMAC};
 
+struct fm_mac_dev;
+struct fm;
+
 struct mac_device {
 	struct device		*dev;
 	void			*priv;
@@ -71,29 +74,28 @@ struct mac_device {
 	u32	rx_pause;
 	u32	tx_pause;
 
+	struct fm_mac_dev *(*get_mac_handle)(struct mac_device *mac_dev);
 	int (*init_phy)(struct net_device *net_dev);
 	int (*init)(struct mac_device *mac_dev);
 	int (*start)(struct mac_device *mac_dev);
 	int (*stop)(struct mac_device *mac_dev);
-	int (*change_promisc)(struct mac_device *mac_dev);
-	int (*change_addr)(struct mac_device *mac_dev, uint8_t *addr);
+	int (*set_promisc)(struct fm_mac_dev *fm_mac_dev, bool enable);
+	int (*change_addr)(struct fm_mac_dev *fm_mac_dev, uint8_t *addr);
 	int (*set_multi)(struct net_device *net_dev);
-	int (*uninit)(struct mac_device *mac_dev);
-	int (*ptp_enable)(struct mac_device *mac_dev);
-	int (*ptp_disable)(struct mac_device *mac_dev);
-	void *(*get_mac_handle)(struct mac_device *mac_dev);
-	int (*set_rx_pause)(struct mac_device *mac_dev, bool en);
-	int (*set_tx_pause)(struct mac_device *mac_dev, bool en);
-	int (*fm_rtc_enable)(struct net_device *net_dev);
-	int (*fm_rtc_disable)(struct net_device *net_dev);
-	int (*fm_rtc_get_cnt)(struct net_device *net_dev, uint64_t *ts);
-	int (*fm_rtc_set_cnt)(struct net_device *net_dev, uint64_t ts);
-	int (*fm_rtc_get_drift)(struct net_device *net_dev, uint32_t *drift);
-	int (*fm_rtc_set_drift)(struct net_device *net_dev, uint32_t drift);
-	int (*fm_rtc_set_alarm)(struct net_device *net_dev, uint32_t id,
-			uint64_t time);
-	int (*fm_rtc_set_fiper)(struct net_device *net_dev, uint32_t id,
-			uint64_t fiper);
+	int (*uninit)(struct fm_mac_dev *fm_mac_dev);
+	int (*ptp_enable)(struct fm_mac_dev *fm_mac_dev);
+	int (*ptp_disable)(struct fm_mac_dev *fm_mac_dev);
+	int (*set_rx_pause)(struct fm_mac_dev *fm_mac_dev, bool en);
+	int (*set_tx_pause)(struct fm_mac_dev *fm_mac_dev, bool en);
+	int (*fm_rtc_enable)(struct fm *fm_dev);
+	int (*fm_rtc_disable)(struct fm *fm_dev);
+	int (*fm_rtc_get_cnt)(struct fm *fm_dev, uint64_t *ts);
+	int (*fm_rtc_set_cnt)(struct fm *fm_dev, uint64_t ts);
+	int (*fm_rtc_get_drift)(struct fm *fm_dev, uint32_t *drift);
+	int (*fm_rtc_set_drift)(struct fm *fm_dev, uint32_t drift);
+	int (*fm_rtc_set_alarm)(struct fm *fm_dev, uint32_t id, uint64_t time);
+	int (*fm_rtc_set_fiper)(struct fm *fm_dev, uint32_t id,
+				uint64_t fiper);
 };
 
 struct mac_address {
@@ -101,10 +103,14 @@ struct mac_address {
 	struct list_head list;
 };
 
+#define get_fm_handle(net_dev) \
+	(((struct dpa_priv_s *)netdev_priv(net_dev))->mac_dev->fm_dev)
+
 #define for_each_port_device(i, port_dev)	\
 	for (i = 0; i < ARRAY_SIZE(port_dev); i++)
 
-static inline void * __attribute((nonnull)) macdev_priv(const struct mac_device *mac_dev)
+static inline __attribute((nonnull)) void *macdev_priv(
+		const struct mac_device *mac_dev)
 {
 	return (void *)mac_dev + sizeof(*mac_dev);
 }
-- 
2.0.2

