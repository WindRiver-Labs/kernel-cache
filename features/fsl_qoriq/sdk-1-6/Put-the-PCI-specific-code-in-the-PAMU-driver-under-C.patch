From b91bad0a65c24bcaf533a82099249c8668c3cc66 Mon Sep 17 00:00:00 2001
From: "Lu.Jiang" <lu.jiang@windriver.com>
Date: Fri, 5 Sep 2014 18:13:00 +0800
Subject: [PATCH 0417/1089] Put the PCI specific code in the PAMU driver under
 CONFIG_PCI.

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

This fixes the problem where the kernel build breaks, when PCI
support is disabled.

Signed-off-by: Varun Sethi <Varun.Sethi@freescale.com>
Signed-off-by: Lu.Jiang <lu.jiang@windriver.com>
---
 drivers/iommu/fsl_pamu_domain.c | 22 ++++++++++++++++++++--
 1 file changed, 20 insertions(+), 2 deletions(-)

diff --git a/drivers/iommu/fsl_pamu_domain.c b/drivers/iommu/fsl_pamu_domain.c
index 1ffeb24..3c158ed 100644
--- a/drivers/iommu/fsl_pamu_domain.c
+++ b/drivers/iommu/fsl_pamu_domain.c
@@ -684,6 +684,7 @@ static int fsl_pamu_attach_device(struct iommu_domain *domain,
 	const u32 *liodn;
 	u32 liodn_cnt;
 	int len, ret = 0;
+#ifdef CONFIG_PCI
 	struct pci_dev *pdev = NULL;
 	struct pci_controller *pci_ctl;
 
@@ -701,6 +702,7 @@ static int fsl_pamu_attach_device(struct iommu_domain *domain,
 		 */
 		dev = pci_ctl->parent;
 	}
+#endif
 
 	liodn = of_get_property(dev->of_node, "fsl,liodn", &len);
 	if (liodn) {
@@ -722,6 +724,7 @@ static void fsl_pamu_detach_device(struct iommu_domain *domain,
 	struct fsl_dma_domain *dma_domain = domain->priv;
 	const u32 *prop;
 	int len;
+#ifdef CONFIG_PCI
 	struct pci_dev *pdev = NULL;
 	struct pci_controller *pci_ctl;
 
@@ -739,6 +742,7 @@ static void fsl_pamu_detach_device(struct iommu_domain *domain,
 		 */
 		dev = pci_ctl->parent;
 	}
+#endif
 
 	prop = of_get_property(dev->of_node, "fsl,liodn", &len);
 	if (prop)
@@ -905,6 +909,13 @@ static struct iommu_group *get_device_iommu_group(struct device *dev)
 	return group;
 }
 
+#ifdef CONFIG_PCI
+static void swap_pci_ref(struct pci_dev **from, struct pci_dev *to)
+{
+	pci_dev_put(*from);
+	*from = to;
+}
+
 static  bool check_pci_ctl_endpt_part(struct pci_controller *pci_ctl)
 {
 	u32 version;
@@ -1044,13 +1055,15 @@ root_bus:
 
 	return group;
 }
+#endif
 
 static int fsl_pamu_add_device(struct device *dev)
 {
 	struct iommu_group *group = NULL;
-	struct pci_dev *pdev;
 	const u32 *prop;
 	int ret, len;
+#ifdef CONFIG_PCI
+	struct pci_dev *pdev;
 
 	/*
 	 * For platform devices we allocate a separate group for
@@ -1065,6 +1078,7 @@ static int fsl_pamu_add_device(struct device *dev)
 		group = get_pci_device_group(pdev);
 
 	} else {
+#endif
 		prop = of_get_property(dev->of_node, "fsl,liodn", &len);
 		if (prop)
 			group = get_device_iommu_group(dev);
@@ -1142,8 +1156,9 @@ static u32 fsl_pamu_get_windows(struct iommu_domain *domain)
 
 static struct iommu_domain *fsl_get_dev_domain(struct device *dev)
 {
-	struct pci_controller *pci_ctl;
 	struct device_domain_info *info;
+#ifdef CONFIG_PCI
+	struct pci_controller *pci_ctl;
 	struct pci_dev *pdev;
 
 	/*
@@ -1161,6 +1176,7 @@ static struct iommu_domain *fsl_get_dev_domain(struct device *dev)
 		 */
 		dev = pci_ctl->parent;
 	}
+#endif
 
 	info = dev->archdata.iommu_domain;
 	if (info && info->domain)
@@ -1196,7 +1212,9 @@ int pamu_domain_init()
 		return ret;
 
 	bus_set_iommu(&platform_bus_type, &fsl_pamu_ops);
+#ifdef CONFIG_PCI
 	bus_set_iommu(&pci_bus_type, &fsl_pamu_ops);
+#endif
 
 	return ret;
 }
-- 
2.0.2

