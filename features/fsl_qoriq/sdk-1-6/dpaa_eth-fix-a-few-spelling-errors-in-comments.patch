From ebd0b83ae3aa73751fe6505c33800f1a81ee51a0 Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@freescale.com>
Date: Wed, 11 Dec 2013 17:11:35 +0200
Subject: [PATCH 0621/1089] dpaa_eth: fix a few spelling errors in comments

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

Fix some spelling errors reported by codespell.

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
Change-Id: If2f526929314ac2927e439144d2c48b905cadaa5
Reviewed-on: http://git.am.freescale.net:8181/7447
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Cristian-Constantin Sovaiala <Cristian.Sovaiala@freescale.com>
Reviewed-by: Marian Cristian Rotariu <marian.rotariu@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/7696
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h    | 6 +++---
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c | 6 +++---
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index 211288d..8fb60a3 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -116,7 +116,7 @@ struct dpa_buffer_layout_s {
  */
 #define DPA_BP_RAW_SIZE		2048
 #else
-/* For jumbo frame optimizations, use buffers large enough to accomodate
+/* For jumbo frame optimizations, use buffers large enough to accommodate
  * 9.6K frames, FD maximum offset, skb sh_info overhead and some extra
  * space to account for further alignments.
  */
@@ -145,7 +145,7 @@ struct dpa_buffer_layout_s {
  *
  * For a requested size, the kernel allocator provides the next power of two
  * sized block, which the stack will use as is, regardless of the actual size
- * it required; since we must acommodate at most 9.6K buffers (L2 maximum
+ * it required; since we must accommodate at most 9.6K buffers (L2 maximum
  * supported frame size), set the recycling upper limit to 16K.
  */
 #define DPA_RECYCLE_MAX_SIZE	16384
@@ -502,7 +502,7 @@ static inline int dpa_check_rx_mtu(struct sk_buff *skb, int mtu)
 static inline uint16_t dpa_get_headroom(struct dpa_buffer_layout_s *bl)
 {
 	uint16_t headroom;
-	/* The frame headroom must accomodate:
+	/* The frame headroom must accommodate:
 	 * - the driver private data area
 	 * - parse results, hash results, timestamp if selected
 	 * - manip extra space
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index b582937..a2e43b7 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -46,7 +46,7 @@
 #define DPA_SGT_MAX_ENTRIES 16 /* maximum number of entries in SG Table */
 
 /* Convenience macros for storing/retrieving the skb back-pointers. They must
- * accomodate both recycling and confirmation paths - i.e. cases when the buf
+ * accommodate both recycling and confirmation paths - i.e. cases when the buf
  * was allocated by ourselves, respectively by the stack. In the former case,
  * we could store the skb at negative offset; in the latter case, we can't,
  * so we'll use 0 as offset.
@@ -350,7 +350,7 @@ static bool dpa_buf_is_recyclable(struct sk_buff *skb,
 
 /* Build a linear skb around the received buffer.
  * We are guaranteed there is enough room at the end of the data buffer to
- * accomodate the shared info area of the skb.
+ * accommodate the shared info area of the skb.
  */
 static struct sk_buff *__hot contig_fd_to_skb(const struct dpa_priv_s *priv,
 	const struct qm_fd *fd, int *use_gro)
@@ -869,7 +869,7 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 		err = skb_to_sg_fd(priv, skb, &fd);
 		percpu_priv->tx_frag_skbuffs++;
 	} else {
-		/* Make sure we have enough headroom to accomodate private
+		/* Make sure we have enough headroom to accommodate private
 		 * data, parse results, etc. Normally this shouldn't happen if
 		 * we're here via the standard kernel stack.
 		 */
-- 
2.0.2

