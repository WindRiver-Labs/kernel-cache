From 1bb21e9e89520c20f4dcde85c0f73e1dbd000db6 Mon Sep 17 00:00:00 2001
From: Bin Jiang <bin.jiang@windriver.com>
Date: Thu, 23 Jan 2014 17:12:53 +0800
Subject: [PATCH 29/43] dpaa/kdump: reserve Bman memory overlapped with
 available physical memory

If try to reserve Bman memeory which is larger than available physical
memory, there are following call trace:

Oops: Exception in kernel mode, sig: 5 [#1]
PREEMPT SMP NR_CPUS=8 P4080 DS
Modules linked in:
CPU: 6 PID: 0 Comm: swapper Not tainted 3.10.19-rt11-WR6.0.0.2_preempt-rt #17
task: c0a73300 ti: c0aca000 task.ti: c0aca000
NIP: c0a17134 LR: c0a06480 CTR: c01460dc
REGS: c0acbe80 TRAP: 0700   Not tainted  (3.10.19-rt11-WR6.0.0.2_preempt-rt)
MSR: 00021002 <CE,ME>  CR: 22224482  XER: 20000000

GPR00: c0a06480 c0acbf30 c0a73300 0002c000 0002f000 00000001 00000000 ffffffff
GPR08: 7fffffff c0a47f54 00000090 00000000 22222488 100fe4c8 100f0000 04c20630
GPR16: c0000900 00000012 0fffffff c0adda74 c0ad8ae8 c0ad8b08 c0ad8b48 00000000
GPR24: 00000001 c0ad9424 c0ae0000 0002f000 c0a47f54 0002c000 0002c000 c0a47f40
NIP [c0a17134] mark_bootmem+0xe8/0x10c
LR [c0a06480] do_init_bootmem+0x100/0x12c
Call Trace:
[c0acbf30] [c0a170f0] mark_bootmem+0xa4/0x10c (unreliable)
[c0acbf60] [c0a06480] do_init_bootmem+0x100/0x12c
[c0acbf80] [c0a048e4] setup_arch+0x250/0x2cc
[c0acbfc0] [c09ff524] start_kernel+0x7c/0x398
[c0acbff0] [c00003d8] skpinv+0x2c4/0x300

Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/staging/fsl_qbman/bman_config.c |   10 +++++++++-
 drivers/staging/fsl_qbman/qman_config.c |   10 +++++++++-
 2 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/fsl_qbman/bman_config.c b/drivers/staging/fsl_qbman/bman_config.c
index d727894..4905f0b 100644
--- a/drivers/staging/fsl_qbman/bman_config.c
+++ b/drivers/staging/fsl_qbman/bman_config.c
@@ -232,6 +232,7 @@ static void bm_reserve_memory(struct bman *bm)
 	u64 upper_ba = 0;
 	u32 lower_ba = 0;
 	u64 addr = 0;
+	u64 end = 0;
 	u32 exp = 0;
 	u32 size = 0;
 	int ret;
@@ -241,7 +242,14 @@ static void bm_reserve_memory(struct bman *bm)
 	exp = (bm_in(FBPR_AR) & 0x3f);
 	size = 2 << exp;
 	addr = (u64)((upper_ba << 32) | lower_ba);
-	ret = memblock_reserve(addr, size);
+
+	if ((addr > memblock_end_of_DRAM()) ||
+	     ((addr + size) < memblock_start_of_DRAM()))
+		return;
+
+	addr = max(addr, memblock_start_of_DRAM());
+	end = min(addr + size, memblock_end_of_DRAM());
+	ret = memblock_reserve(addr, end - addr);
 	WARN_ON(ret);
 }
 #else
diff --git a/drivers/staging/fsl_qbman/qman_config.c b/drivers/staging/fsl_qbman/qman_config.c
index 544789f..1d222ff 100644
--- a/drivers/staging/fsl_qbman/qman_config.c
+++ b/drivers/staging/fsl_qbman/qman_config.c
@@ -362,6 +362,7 @@ static void qm_reserve_memory(struct qman *qm, enum qm_memory memory)
 	u64 upper_ba = 0;
 	u32 lower_ba = 0;
 	u64 addr = 0;
+	u64 end = 0;
 	u32 exp = 0;
 	u32 size = 0;
 	u32 unknown_hole_size = 0;
@@ -373,7 +374,14 @@ static void qm_reserve_memory(struct qman *qm, enum qm_memory memory)
 	exp = (__qm_in(qm, offset + REG_offset_AR) & 0x3f);
 	size = 2 << exp;
 	addr = (u64)((upper_ba << 32) | lower_ba);
-	ret = memblock_reserve(addr, size);
+
+	if ((addr > memblock_end_of_DRAM()) ||
+	     ((addr + size) < memblock_start_of_DRAM()))
+		return;
+
+	addr = max(addr, memblock_start_of_DRAM());
+	end = min(addr + size, memblock_end_of_DRAM());
+	ret = memblock_reserve(addr, end - addr);
 	WARN_ON(ret);
 }
 #else
-- 
1.7.5.4

