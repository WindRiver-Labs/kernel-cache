From bf5fd4cd2ad3e7ffc251e11c5cbfddd5997fda72 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Wed, 11 Feb 2015 12:52:56 +0800
Subject: [PATCH 6/6] fsl/driver: fix some warnings

Fix some compile warnings for CAAM, QMAN, FMAN, DPA.

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/caam/sg_sw_sec4.h                   |    8 ++++----
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |    2 +-
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    5 +++++
 .../net/ethernet/freescale/dpa/dpaa_eth_common.h   |    1 +
 .../freescale/fman/src/wrapper/lnxwrp_fm.c         |    7 ++++++-
 drivers/staging/fsl_qbman/qman_config.c            |    1 -
 drivers/staging/fsl_qbman/qman_driver.c            |    1 -
 drivers/staging/fsl_qbman/qman_high.c              |   11 ++++++-----
 8 files changed, 23 insertions(+), 13 deletions(-)

diff --git a/drivers/crypto/caam/sg_sw_sec4.h b/drivers/crypto/caam/sg_sw_sec4.h
index f1b30ec..93e27cd 100644
--- a/drivers/crypto/caam/sg_sw_sec4.h
+++ b/drivers/crypto/caam/sg_sw_sec4.h
@@ -85,7 +85,7 @@ static inline int sg_count(struct scatterlist *sg_list, int nbytes,
 	return sg_nents;
 }
 
-static int dma_map_sg_chained(struct device *dev, struct scatterlist *sg,
+static inline int dma_map_sg_chained(struct device *dev, struct scatterlist *sg,
 			      unsigned int nents, enum dma_data_direction dir,
 			      bool chained)
 {
@@ -101,9 +101,9 @@ static int dma_map_sg_chained(struct device *dev, struct scatterlist *sg,
 	return nents;
 }
 
-static int dma_unmap_sg_chained(struct device *dev, struct scatterlist *sg,
-				unsigned int nents, enum dma_data_direction dir,
-				bool chained)
+static inline int dma_unmap_sg_chained(struct device *dev,
+				struct scatterlist *sg, unsigned int nents,
+				enum dma_data_direction dir, bool chained)
 {
 	if (unlikely(chained)) {
 		int i;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 2f006d4..a387603 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -1125,7 +1125,7 @@ static struct platform_driver dpa_driver = {
 	},
 	.probe		= dpaa_eth_priv_probe,
 #if defined(CONFIG_KEXEC)
-	.shutdown       = dpa_remove,
+	.shutdown       = dpa_shutdown,
 #endif
 	.remove		= dpa_remove
 };
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index 64391d2..c1a3d5a 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -522,6 +522,11 @@ int __cold dpa_remove(struct platform_device *of_dev)
 	return err;
 }
 
+void __cold dpa_shutdown(struct platform_device *of_dev)
+{
+	dpa_remove(of_dev);
+}
+
 struct mac_device * __cold __must_check
 __attribute__((nonnull))
 dpa_mac_probe(struct platform_device *_of_dev)
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h
index 5a73c21..e1cec47 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.h
@@ -152,6 +152,7 @@ int dpa_get_ts(const struct dpa_priv_s *priv, enum port_type rx_tx,
 #endif /* CONFIG_FSL_DPAA_TS */
 int dpa_ioctl(struct net_device *dev, struct ifreq *rq, int cmd);
 int __cold dpa_remove(struct platform_device *of_dev);
+void __cold dpa_shutdown(struct platform_device *of_dev);
 struct mac_device * __cold __must_check
 __attribute__((nonnull)) dpa_mac_probe(struct platform_device *_of_dev);
 int dpa_set_mac_address(struct net_device *net_dev, void *addr);
diff --git a/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm.c b/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm.c
index 90c102a..b81fb9c 100755
--- a/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm.c
+++ b/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm.c
@@ -1102,6 +1102,11 @@ static int fm_remove(struct platform_device *of_dev)
     return 0;
 }
 
+static void fm_shutdown(struct platform_device *of_dev)
+{
+	fm_remove(of_dev);
+}
+
 static const struct of_device_id fm_match[] = {
     {
         .compatible    = "fsl,fman"
@@ -1168,7 +1173,7 @@ static struct platform_driver fm_driver = {
     },
     .probe          = fm_probe,
 #if defined(CONFIG_KEXEC)
-    .shutdown       = fm_remove,
+    .shutdown       = fm_shutdown,
 #endif
     .remove         = fm_remove
 
diff --git a/drivers/staging/fsl_qbman/qman_config.c b/drivers/staging/fsl_qbman/qman_config.c
index a6d3195..a6eae6e 100644
--- a/drivers/staging/fsl_qbman/qman_config.c
+++ b/drivers/staging/fsl_qbman/qman_config.c
@@ -365,7 +365,6 @@ static void qm_reserve_memory(struct qman *qm, enum qm_memory memory)
 	u64 end = 0;
 	u32 exp = 0;
 	u32 size = 0;
-	u32 unknown_hole_size = 0;
 	u32 offset = (memory == qm_memory_fqd) ? REG_FQD_BARE : REG_PFDR_BARE;
 	int ret;
 
diff --git a/drivers/staging/fsl_qbman/qman_driver.c b/drivers/staging/fsl_qbman/qman_driver.c
index 806a7d5..b5330c2 100644
--- a/drivers/staging/fsl_qbman/qman_driver.c
+++ b/drivers/staging/fsl_qbman/qman_driver.c
@@ -567,7 +567,6 @@ _iommu_domain_free:
 struct qm_portal_config *qm_get_unused_portal_idx(u32 idx)
 {
 	struct qm_portal_config *ret;
-	int cpuid;
 	spin_lock(&unused_pcfgs_lock);
 	if (idx == QBMAN_ANY_PORTAL_IDX)
 		ret = get_pcfg(&unused_pcfgs);
diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 30cf186..3896c89 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -2796,7 +2796,7 @@ static int qman_ceetm_configure_lfqmt(struct qm_mcc_ceetm_lfqmt_config *opts)
 	return 0;
 }
 
-static int qman_ceetm_query_lfqmt(int lfqid,
+static int __maybe_unused qman_ceetm_query_lfqmt(int lfqid,
 			struct qm_mcr_ceetm_lfqmt_query *lfqmt_query)
 {
 	struct qm_mc_command *mcc;
@@ -3142,8 +3142,8 @@ int qman_ceetm_query_ccgr(struct qm_mcc_ceetm_ccgr_query *ccgr_query,
 }
 EXPORT_SYMBOL(qman_ceetm_query_ccgr);
 
-static int qman_ceetm_cq_peek_pop_xsfdrread(struct qm_ceetm_cq *cq,
-			u8 command_type, u16 xsfdr,
+static int __maybe_unused qman_ceetm_cq_peek_pop_xsfdrread(
+			struct qm_ceetm_cq *cq, u8 command_type, u16 xsfdr,
 			struct qm_mcr_ceetm_cq_peek_pop_xsfdrread *cq_ppxr)
 {
 	struct qm_mc_command *mcc;
@@ -3224,8 +3224,9 @@ static int qman_ceetm_query_statistics(u16 cid,
 	return 0;
 }
 
-static int qman_ceetm_write_statistics(u16 cid, enum qm_dc_portal dcp_idx,
-			u16 command_type, u64 frame_count, u64 byte_count)
+static int __maybe_unused qman_ceetm_write_statistics(u16 cid,
+			enum qm_dc_portal dcp_idx, u16 command_type,
+			u64 frame_count, u64 byte_count)
 {
 	struct qm_mc_command *mcc;
 	struct qm_mc_result *mcr;
-- 
1.7.5.4

