From d3db1a95749f6c6613b0e458228c748055e58ade Mon Sep 17 00:00:00 2001
From: Emil Medve <Emilian.Medve@Freescale.com>
Date: Fri, 10 Jan 2014 15:27:05 -0600
Subject: [PATCH 061/466] fsl_qman: Remove commented-out code

Unused since before SDK v1.0

Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
Change-Id: I8a41de52a77ac1741cc0787e063b7bad22a30f00
Reviewed-on: http://git.am.freescale.net:8181/7927
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Reviewed-by: Emilian Medve <Emilian.Medve@freescale.com>
[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/staging/fsl_qbman/qman_config.c  |  105 ------------------------------
 drivers/staging/fsl_qbman/qman_private.h |   37 ++---------
 2 files changed, 6 insertions(+), 136 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_config.c b/drivers/staging/fsl_qbman/qman_config.c
index d57a45d..11cbf93 100644
--- a/drivers/staging/fsl_qbman/qman_config.c
+++ b/drivers/staging/fsl_qbman/qman_config.c
@@ -304,111 +304,6 @@ static void __qm_err_isr_write(struct qman *qm, enum qm_isr_reg n, u32 val)
 	__qm_out(qm, REG_ERR_ISR + (n << 2), val);
 }
 
-#if 0
-
-static void qm_set_portal(struct qman *qm, u8 swportalID,
-			u16 ec_tp_cfg, u16 ecd_tp_cfg)
-{
-	qm_out(QCSP_DD_CFG(swportalID),
-		((ec_tp_cfg & 0x1ff) << 16) | (ecd_tp_cfg & 0x1ff));
-}
-
-static void qm_set_ddebug(struct qman *qm, u8 mdd, u8 m_cfg)
-{
-	qm_out(DD_CFG, ((mdd & 0x3) << 4) | (m_cfg & 0xf));
-}
-
-static void qm_set_dc_ddebug(struct qman *qm, enum qm_dc_portal portal,
-			     u16 ecd_tp_cfg)
-{
-	qm_out(DCP_DD_CFG(portal), ecd_tp_cfg & 0x1ff);
-}
-
-static u32 qm_get_pfdr_free_pool_count(struct qman *qm)
-{
-	return qm_in(PFDR_FPC);
-}
-
-static void qm_get_pfdr_free_pool(struct qman *qm, u32 *head, u32 *tail)
-{
-	*head = qm_in(PFDR_FP_HEAD);
-	*tail = qm_in(PFDR_FP_TAIL);
-}
-
-static void qm_set_default_wq(struct qman *qm, u16 wqid)
-{
-	qm_out(WQ_DEF_ENC_WQID, wqid);
-}
-
-static void qm_set_channel_ddebug(struct qman *qm, u16 channel, u16 tp_cfg)
-{
-	u32 offset;
-	int upperhalf = 0;
-	if ((channel >= QM_CHANNEL_SWPORTAL0) &&
-				(channel <= qm_channel_swportal9)) {
-		offset = (channel - QM_CHANNEL_SWPORTAL0);
-		upperhalf = offset & 0x1;
-		offset = REG_WQ_SC_DD_CFG(offset / 2);
-	} else if ((channel >= qm_channel_pool1) &&
-				(channel <= qm_channel_pool15)) {
-		offset = (channel + 1 - qm_channel_pool1);
-		upperhalf = offset & 0x1;
-		offset = REG_WQ_PC_DD_CFG(offset / 2);
-	} else if ((channel >= qm_channel_fman0_sp0) &&
-				(channel <= qm_channel_fman0_sp11)) {
-		offset = (channel - qm_channel_fman0_sp0);
-		upperhalf = offset & 0x1;
-		offset = REG_WQ_DC0_DD_CFG(offset / 2);
-	} else if ((channel >= qm_channel_fman1_sp0) &&
-				(channel <= qm_channel_fman1_sp11)) {
-		offset = (channel - qm_channel_fman1_sp0);
-		upperhalf = offset & 0x1;
-		offset = REG_WQ_DC1_DD_CFG(offset / 2);
-	} else if (channel == qm_channel_caam)
-		offset = REG_WQ_DCn_DD_CFG(2);
-	else if (channel == qm_channel_pme)
-		offset = REG_WQ_DCn_DD_CFG(3);
-	else {
-		pr_crit("Illegal qm_channel type %d\n", channel);
-		return;
-	}
-	__qm_out(qm, offset, upperhalf ? ((u32)tp_cfg << 16) : tp_cfg);
-}
-
-static void qm_get_details(struct qman *qm, u8 *int_options, u8 *errata,
-			u8 *conf_options)
-{
-	u32 v = qm_in(IP_REV_1);
-	*int_options = (v >> 16) & 0xff;
-	*errata = (v >> 8) & 0xff;
-	*conf_options = v & 0xff;
-}
-
-static void qm_set_corenet_bar(struct qman *qm, u16 eba, u32 ba)
-{
-	/* choke if 'ba' isn't properly aligned */
-	DPA_ASSERT(!(ba & 0x001fffff));
-	qm_out(QCSP_BARE, eba);
-	qm_out(QCSP_BAR, ba);
-}
-
-static u8 qm_get_corenet_sourceid(struct qman *qm)
-{
-	return qm_in(SRCIDR);
-}
-
-static u16 qm_get_liodn(struct qman *qm)
-{
-	return qm_in(LIODNR);
-}
-
-static void qm_set_congestion_config(struct qman *qm, u16 pres)
-{
-	qm_out(CM_CFG, pres);
-}
-
-#endif
-
 static void qm_set_dc(struct qman *qm, enum qm_dc_portal portal,
 			int ed, u8 sernd)
 {
diff --git a/drivers/staging/fsl_qbman/qman_private.h b/drivers/staging/fsl_qbman/qman_private.h
index 4c50909..3227a37 100644
--- a/drivers/staging/fsl_qbman/qman_private.h
+++ b/drivers/staging/fsl_qbman/qman_private.h
@@ -274,27 +274,12 @@ int qman_setup_fq_lookup_table(size_t num_entries);
 #define QM_SDQCR_TOKEN_SET(v)		(((v) & 0xff) << 16)
 #define QM_SDQCR_TOKEN_GET(v)		(((v) >> 16) & 0xff)
 #define QM_SDQCR_CHANNELS_DEDICATED	0x00008000
-#if 0 /* These are defined in the external fsl_qman.h API */
-#define QM_SDQCR_CHANNELS_POOL_MASK	0x00007fff
-#define QM_SDQCR_CHANNELS_POOL(n)	(0x00008000 >> (n))
-#endif
 #define QM_SDQCR_SPECIFICWQ_MASK	0x000000f7
 #define QM_SDQCR_SPECIFICWQ_DEDICATED	0x00000000
 #define QM_SDQCR_SPECIFICWQ_POOL(n)	((n) << 4)
 #define QM_SDQCR_SPECIFICWQ_WQ(n)	(n)
 
-/* For qm_dqrr_vdqcr_set(); Choose one PRECEDENCE. EXACT is optional. Use
- * NUMFRAMES(n) (6-bit) or NUMFRAMES_TILLEMPTY to fill in the frame-count. Use
- * FQID(n) to fill in the frame queue ID. */
-#if 0 /* These are defined in the external fsl_qman.h API */
-#define QM_VDQCR_PRECEDENCE_VDQCR	0x0
-#define QM_VDQCR_PRECEDENCE_SDQCR	0x80000000
-#define QM_VDQCR_EXACT			0x40000000
-#define QM_VDQCR_NUMFRAMES_MASK		0x3f000000
-#define QM_VDQCR_NUMFRAMES_SET(n)	(((n) & 0x3f) << 24)
-#define QM_VDQCR_NUMFRAMES_GET(n)	(((n) >> 24) & 0x3f)
-#define QM_VDQCR_NUMFRAMES_TILLEMPTY	QM_VDQCR_NUMFRAMES_SET(0)
-#endif
+/* For qm_dqrr_vdqcr_set(): use FQID(n) to fill in the frame queue ID */
 #define QM_VDQCR_FQID_MASK		0x00ffffff
 #define QM_VDQCR_FQID(n)		((n) & QM_VDQCR_FQID_MASK)
 
@@ -333,21 +318,11 @@ int qman_setup_fq_lookup_table(size_t num_entries);
 #define QM_PDQCR_SPECIFICWQ_WQ(n)	(n)
 #define QM_PDQCR_FQID(n)		((n) & 0xffffff)
 
-/* Used by all portal interrupt registers except 'inhibit'. NB, some of these
- * definitions are exported for use by the qman_irqsource_***() APIs, so are
- * commented-out here. */
-#define QM_PIRQ_DQAVAIL	0x0000ffff	/* Channels with frame availability */
-#if 0
-#define QM_PIRQ_CSCI	0x00100000	/* Congestion State Change */
-#define QM_PIRQ_EQCI	0x00080000	/* Enqueue Command Committed */
-#define QM_PIRQ_EQRI	0x00040000	/* EQCR Ring (below threshold) */
-#define QM_PIRQ_DQRI	0x00020000	/* DQRR Ring (non-empty) */
-#define QM_PIRQ_MRI	0x00010000	/* MR Ring (non-empty) */
-/* This mask contains all the interrupt sources that need handling except DQRI,
- * ie. that if present should trigger slow-path processing. */
-#define QM_PIRQ_SLOW	(QM_PIRQ_CSCI | QM_PIRQ_EQCI | QM_PIRQ_EQRI | \
-			QM_PIRQ_MRI)
-#endif
+/* Used by all portal interrupt registers except 'inhibit'
+ * Channels with frame availability
+ */
+#define QM_PIRQ_DQAVAIL	0x0000ffff
+
 /* The DQAVAIL interrupt fields break down into these bits; */
 #define QM_DQAVAIL_PORTAL	0x8000		/* Portal channel */
 #define QM_DQAVAIL_POOL(n)	(0x8000 >> (n))	/* Pool channel, n==[1..15] */
-- 
1.7.10.4

