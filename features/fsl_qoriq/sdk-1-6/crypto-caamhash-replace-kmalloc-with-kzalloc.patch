From 002a029cc35549ea9761809aa7da8f0b7ae56d57 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Mon, 16 Feb 2015 16:50:29 +0800
Subject: [PATCH] crypto: caamhash: replace kmalloc with kzalloc

This can make sure we get a clean memory, else system would report
the below warning:

[    2.194423] caam_jr ffe301000.jr: DMA-API: device driver tries to free DMA memory it has not allocated [device address=0xdeadbeefdeadbeef] [size=18446744073150512879 bytes]
[    2.208617] ------------[ cut here ]------------
[    2.211921] WARNING: at lib/dma-debug.c:877
[    2.224424] Modules linked in:
[    2.226170] CPU: 1 PID: 98 Comm: cryptomgr_test Not tainted 3.10.62-ltsi-WR6.0.0.0_standard #175
[    2.233639] task: c0000000f74bc400 ti: c0000000fffd0000 task.ti: c0000000f775c000
[    2.239806] NIP: c0000000004f5ed8 LR: c0000000004f5ed4 CTR: c00000000055a160
[    2.245539] REGS: c0000000fffd3650 TRAP: 0700   Not tainted  (3.10.62-ltsi-WR6.0.0.0_standard)
[    2.252834] MSR: 0000000080029000 <CE,EE,ME>  CR: 24a48e84  XER: 00000000
[    2.258323] SOFTE: 1
[    2.259194]
GPR00: c0000000004f5ed4 c0000000fffd38d0 c0000000012af348 00000000000000a0
GPR04: 0000000024a48e84 0000000000000000 c00000000125f1c8 00000000000001eb
GPR08: 0000000000000060 0000000000000001 0000000010187373 0000000000000020
GPR12: 00000000000001eb c000000001fff780 c0000000011ac928 c00000007f003028
GPR16: 0000000000000097 0000000000000098 0000000000000098 c0000000f7758800
GPR20: c0000000f7098c00 0000000000000001 0000000000000001 000000000000003f
GPR24: c0000000f7098c00 0000000000000014 c00000007f003000 c0000000011b0e98
GPR28: 0000000000000000 c000000001565b80 c0000000fffd39e0 c0000000f72f2410
[    2.312964] NIP [c0000000004f5ed8] .check_unmap+0x848/0x9c0
[    2.317222] LR [c0000000004f5ed4] .check_unmap+0x844/0x9c0
[    2.321392] Call Trace:
[    2.322525] [c0000000fffd38d0] [c0000000004f5ed4] .check_unmap+0x844/0x9c0 (unreliable)
[    2.329221] [c0000000fffd3970] [c0000000004f60d4] .debug_dma_unmap_page+0x84/0xb0
[    2.335394] [c0000000fffd3aa0] [c0000000008295cc] .ahash_done+0x1dc/0x360
[    2.340870] [c0000000fffd3ca0] [c00000000081b7ec] .caam_jr_dequeue+0x26c/0x3a0
[    2.346782] [c0000000fffd3da0] [c0000000008be50c] .net_rx_action+0x1cc/0x330
[    2.352521] [c0000000fffd3e80] [c00000000007276c] .__do_softirq+0x19c/0x3d0
[    2.358175] [c0000000fffd3f90] [c000000000017054] .call_do_softirq+0x14/0x24
[    2.363913] [c0000000f775ef10] [c000000000005fe8] .do_softirq+0x118/0x150
[    2.373327]  sda: sda1 sda2 sda3
[    2.369389] [c0000000f775efa0] [c000000000072c54] .irq_exit+0x124/0x140
[    2.376604] [c0000000f775f020] [c000000000005ac4] .do_IRQ+0x184/0x370
[    2.381733] [c0000000f775f0d0] [c00000000001b93c] exc_0x500_common+0xfc/0x100
[    2.387564] --- Exception: 501 at .rcu_note_context_switch+0x0/0x370
    LR = .__schedule+0xbc/0x7f0
[    2.395467] [c0000000f775f3c0] [c000000000a29944] .__schedule+0xa4/0x7f0 (unreliable)
[    2.401987] [c0000000f775f620] [c000000000a277f4] .schedule_timeout+0x1b4/0x2e0
[    2.407984] [c0000000f775f700] [c000000000a29428] .wait_for_common+0xf8/0x1d0
[    2.413808] [c0000000f775f7c0] [c000000000a295ac] .wait_for_completion_interruptible+0x2c/0x50
[    2.421111] [c0000000f775f840] [c000000000494b64] .do_one_async_hash_op.isra.1.part.2+0x24/0x50
[    2.428496] [c0000000f775f8c0] [c0000000004951a8] .test_hash+0x618/0x7d0
[    2.433885] [c0000000f775fb30] [c000000000495424] .alg_test_hash+0xc4/0xf0
[    2.439448] [c0000000f775fbc0] [c000000000494928] .alg_test+0xa8/0x2c0
[    2.444664] [c0000000f775fcb0] [c000000000491164] .cryptomgr_test+0x64/0x80
[    2.450315] [c0000000f775fd30] [c00000000009a8d0] .kthread+0xf0/0x100
[    2.455444] [c0000000f775fe30] [c000000000000a08] .ret_from_kernel_thread+0x5c/0xd4
[    2.461786] Instruction dump:
[    2.463441] 7c641b78 419e0160 e8a90050 2fa50000 409e0008 e8a90010 e8de0028 e8fe0030
[    2.469892] 3c62ff90 38638320 48546b69 60000000 <0fe00000> 4bffff34 e87e0010 2fa30000
[    2.476525] ---[ end trace 52825d316d569f00 ]---

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>

diff --git a/drivers/crypto/caam/caamhash.c b/drivers/crypto/caam/caamhash.c
index 36b6ed9779f5..218f13e7165f 100644
--- a/drivers/crypto/caam/caamhash.c
+++ b/drivers/crypto/caam/caamhash.c
@@ -424,7 +424,7 @@ static int hash_digest_key(struct caam_hash_ctx *ctx, const u8 *key_in,
 	dma_addr_t src_dma, dst_dma;
 	int ret = 0;
 
-	desc = kmalloc(CAAM_CMD_SZ * 8 + CAAM_PTR_SZ * 2, GFP_KERNEL | GFP_DMA);
+	desc = kzalloc(CAAM_CMD_SZ * 8 + CAAM_PTR_SZ * 2, GFP_KERNEL | GFP_DMA);
 	if (!desc) {
 		dev_err(jrdev, "unable to allocate key input memory\n");
 		return -ENOMEM;
@@ -506,7 +506,7 @@ static int ahash_setkey(struct crypto_ahash *ahash,
 #endif
 
 	if (keylen > blocksize) {
-		hashed_key = kmalloc(sizeof(u8) * digestsize, GFP_KERNEL |
+		hashed_key = kzalloc(sizeof(u8) * digestsize, GFP_KERNEL |
 				     GFP_DMA);
 		if (!hashed_key)
 			return -ENOMEM;
@@ -787,7 +787,7 @@ static int ahash_update_ctx(struct ahash_request *req)
 		 * allocate space for base edesc and hw desc commands,
 		 * link tables
 		 */
-		edesc = kmalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
+		edesc = kzalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
 				sec4_sg_bytes, GFP_DMA | flags);
 		if (!edesc) {
 			dev_err(jrdev,
@@ -894,7 +894,7 @@ static int ahash_final_ctx(struct ahash_request *req)
 	sec4_sg_bytes = sec4_sg_src_index * sizeof(struct sec4_sg_entry);
 
 	/* allocate space for base edesc and hw desc commands, link tables */
-	edesc = kmalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
+	edesc = kzalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
 			sec4_sg_bytes, GFP_DMA | flags);
 	if (!edesc) {
 		dev_err(jrdev, "could not allocate extended descriptor\n");
@@ -974,7 +974,7 @@ static int ahash_finup_ctx(struct ahash_request *req)
 			 sizeof(struct sec4_sg_entry);
 
 	/* allocate space for base edesc and hw desc commands, link tables */
-	edesc = kmalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
+	edesc = kzalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
 			sec4_sg_bytes, GFP_DMA | flags);
 	if (!edesc) {
 		dev_err(jrdev, "could not allocate extended descriptor\n");
@@ -1053,7 +1053,7 @@ static int ahash_digest(struct ahash_request *req)
 	sec4_sg_bytes = src_nents * sizeof(struct sec4_sg_entry);
 
 	/* allocate space for base edesc and hw desc commands, link tables */
-	edesc = kmalloc(sizeof(struct ahash_edesc) + sec4_sg_bytes +
+	edesc = kzalloc(sizeof(struct ahash_edesc) + sec4_sg_bytes +
 			DESC_JOB_IO_LEN, GFP_DMA | flags);
 	if (!edesc) {
 		dev_err(jrdev, "could not allocate extended descriptor\n");
@@ -1122,7 +1122,7 @@ static int ahash_final_no_ctx(struct ahash_request *req)
 	int sh_len;
 
 	/* allocate space for base edesc and hw desc commands, link tables */
-	edesc = kmalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN,
+	edesc = kzalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN,
 			GFP_DMA | flags);
 	if (!edesc) {
 		dev_err(jrdev, "could not allocate extended descriptor\n");
@@ -1197,7 +1197,7 @@ static int ahash_update_no_ctx(struct ahash_request *req)
 		 * allocate space for base edesc and hw desc commands,
 		 * link tables
 		 */
-		edesc = kmalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
+		edesc = kzalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
 				sec4_sg_bytes, GFP_DMA | flags);
 		if (!edesc) {
 			dev_err(jrdev,
@@ -1298,7 +1298,7 @@ static int ahash_finup_no_ctx(struct ahash_request *req)
 			 sizeof(struct sec4_sg_entry);
 
 	/* allocate space for base edesc and hw desc commands, link tables */
-	edesc = kmalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
+	edesc = kzalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
 			sec4_sg_bytes, GFP_DMA | flags);
 	if (!edesc) {
 		dev_err(jrdev, "could not allocate extended descriptor\n");
@@ -1388,7 +1388,7 @@ static int ahash_update_first(struct ahash_request *req)
 		 * allocate space for base edesc and hw desc commands,
 		 * link tables
 		 */
-		edesc = kmalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
+		edesc = kzalloc(sizeof(struct ahash_edesc) + DESC_JOB_IO_LEN +
 				sec4_sg_bytes, GFP_DMA | flags);
 		if (!edesc) {
 			dev_err(jrdev,
-- 
2.4.3

