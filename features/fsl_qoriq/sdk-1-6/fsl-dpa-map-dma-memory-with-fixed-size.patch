From d272cc3b0e9b0bac4b8b06e2b630b09b36d977f4 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Tue, 20 Jan 2015 16:40:54 +0800
Subject: [PATCH] fsl-dpa: map dma memory with fixed size

For dma mapping on a platform which has coherent cache, such as FSL PPC,
the size argument we passed to dma map functions is not used at all.
But DMA_API_DEBUG function will check if device driver frees DMA memory
with different mapped size.
So map dma memory with fixed size to avoid the below warning:

[    4.706928] platform dpaa_eth_bpool.32: DMA-API: device driver frees DMA memory with different size [device address=0x00000001f342b002] [map size=1726 bytes] [unmap size=1664 bytes]
[    4.721910] ------------[ cut here ]------------
[    4.725214] WARNING: at lib/dma-debug.c:887
[    4.737458] Modules linked in:
[    4.739206] CPU: 1 PID: 46 Comm: irq/120-QMan po Tainted: G        W    3.10.62-ltsi-WR6.0.0.0_cgl #32
[    4.747197] task: c0000001fb8f4600 ti: c0000001fffcc000 task.ti: c0000001fb9a0000
[    4.753366] NIP: c0000000005aa818 LR: c0000000005aa814 CTR: c000000000719d50
[    4.759100] REGS: c0000001fffcf690 TRAP: 0700   Tainted: G        W     (3.10.62-ltsi-WR6.0.0.0_cgl)
[    4.766917] MSR: 0000000080029000 <CE,EE,ME>  CR: 28adbe82  XER: 00000000
[    4.772412] SOFTE: 0
[    4.773283]
GPR00: c0000000005aa814 c0000001fffcf910 c000000001293940 00000000000000a9
GPR04: c00000000006b900 c00000000006b288 0000000000000000 0000000000000002
GPR08: 0000000000000000 0000000000000000 c000000001133940 0000000000000020
GPR12: 0000000048adbe84 c00000000ffff780 c0000000000a8700 00000000fffedf3c
GPR16: c00000000129d080 c000000001101780 0000000000000000 0000000000000001
GPR20: c0000001fffcc000 ffffffffffffffff 00000000fffedf3d 0000000000000000
GPR24: ffffffffffffff80 c00000000b183d00 0000000000000001 0000000000000001
GPR28: c000000001baee10 c000000001bbe380 c0000001fffcfa20 c0000001fba44840
[    4.827083] NIP [c0000000005aa818] .check_unmap+0x538/0x9c0
[    4.831342] LR [c0000000005aa814] .check_unmap+0x534/0x9c0
[    4.835514] Call Trace:
[    4.836648] [c0000001fffcf910] [c0000000005aa814] .check_unmap+0x534/0x9c0 (unreliable)
[    4.843347] [c0000001fffcf9b0] [c0000000005aad24] .debug_dma_unmap_page+0x84/0xb0
[    4.849523] [c0000001fffcfae0] [c00000000081cfc8] ._dpa_cleanup_tx_fd+0xb8/0x350
[    4.855609] [c0000001fffcfba0] [c00000000081bbcc] .priv_tx_conf_default_dqrr+0x9c/0x300
[    4.862304] [c0000001fffcfc50] [c0000000009d1eb4] .qman_p_poll_dqrr+0x1d4/0x2e0
[    4.868304] [c0000001fffcfd10] [c00000000081b614] .dpaa_eth_poll+0x34/0x80
[    4.873871] [c0000001fffcfda0] [c000000000a3db5c] .net_rx_action+0x20c/0x450
[    4.879612] [c0000001fffcfe80] [c000000000075cbc] .__do_softirq+0x1ac/0x5b0
[    4.885268] [c0000001fffcff90] [c0000000000180b4] .call_do_softirq+0x14/0x24
[    4.891008] [c0000001fb9a3a70] [c000000000006748] .do_softirq+0x158/0x190
[    4.896485] [c0000001fb9a3b00] [c0000000000758ac] .local_bh_enable+0x13c/0x150
[    4.902400] [c0000001fb9a3b80] [c000000000144864] .irq_forced_thread_fn+0x74/0xa0
[    4.908572] [c0000001fb9a3c10] [c000000000144ca0] .irq_thread+0x1a0/0x1e0
[    4.914052] [c0000001fb9a3cd0] [c0000000000a87f0] .kthread+0xf0/0x100
[    4.919183] [c0000001fb9a3e30] [c000000000000914] .ret_from_kernel_thread+0x5c/0xc8
[    4.925528] Instruction dump:
[    4.927185] 7c641b78 41de0410 e8a90050 2fa50000 419e0484 e8de0028 e8ff0030 3c62ffc5
[    4.933638] e91e0030 3863b4a0 48662401 60000000 <0fe00000> 3c62ffc5 3863b0e0 486623ed
[    4.940266] ---[ end trace bde8ed0da5679ede ]---

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index c0d1287..9852aea 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -709,7 +709,7 @@ static int __hot skb_to_contig_fd(struct dpa_priv_s *priv,
 
 	/* Map the entire buffer size that may be seen by FMan, but no more */
 	addr = dma_map_single(dpa_bp->dev, skbh,
-			skb_end_pointer(skb) - buffer_start, dma_dir);
+			dpa_bp->size, dma_dir);
 	if (unlikely(dma_mapping_error(dpa_bp->dev, addr))) {
 		if (netif_msg_tx_err(priv) && net_ratelimit())
 			netdev_err(net_dev, "dma_map_single() failed\n");
@@ -813,7 +813,7 @@ static int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 	DPA_WRITE_SKB_PTR(skb, skbh, buffer_start, 0);
 
 	addr = dma_map_single(dpa_bp->dev, buffer_start,
-		skb_end_pointer(skb) - (unsigned char *)buffer_start, dma_dir);
+		dpa_bp->size, dma_dir);
 	if (unlikely(dma_mapping_error(dpa_bp->dev, addr))) {
 		dev_err(dpa_bp->dev, "DMA mapping failed");
 		err = -EINVAL;
-- 
1.7.5.4

