From 242ee5540e2d3636b67314bdc706ef0342feba11 Mon Sep 17 00:00:00 2001
From: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Date: Fri, 17 May 2013 18:20:25 -0400
Subject: [PATCH 0368/1089] fsl_usdpaa: some cleanups in the IRQ code

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

* do wake_up_all() outside the spinlock
* map_irq() had incomplete handling for the case where the ioctl cmd is
  called more than once on the same IRQ FD, and it isn't really needed
  anyway, so instead refuse this explicitly.
* kernel pr_err()s as a result of user errors is not a good idea, so
  changing the relevant ones to pr_debug().
* remove some redundand white-space
* removed some trailing ";"s from functions

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Change-Id: Ieb2f4be392233a0f83333375e0ec91c9d592e748
Reviewed-on: http://git.am.freescale.net:8181/2633
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Pledge Roy-R01356 <roy.pledge@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
---
 drivers/staging/fsl_qbman/fsl_usdpaa_irq.c | 53 ++++++++++++++----------------
 1 file changed, 25 insertions(+), 28 deletions(-)

diff --git a/drivers/staging/fsl_qbman/fsl_usdpaa_irq.c b/drivers/staging/fsl_qbman/fsl_usdpaa_irq.c
index e9e36de..f36e8b2 100644
--- a/drivers/staging/fsl_qbman/fsl_usdpaa_irq.c
+++ b/drivers/staging/fsl_qbman/fsl_usdpaa_irq.c
@@ -95,8 +95,8 @@ static irqreturn_t usdpaa_irq_handler(int irq, void *_ctx)
 	struct usdpaa_irq_ctx *ctx = _ctx;
 	spin_lock_irqsave(&ctx->lock, flags);
 	++ctx->irq_count;
-	wake_up_all(&ctx->wait_queue);
 	spin_unlock_irqrestore(&ctx->lock, flags);
+	wake_up_all(&ctx->wait_queue);
 	/* Set the inhibit register.  This will be reenabled
 	   once the USDPAA code handles the IRQ */
 	out_be32(ctx->inhibit_addr, 0x1);
@@ -106,60 +106,58 @@ static irqreturn_t usdpaa_irq_handler(int irq, void *_ctx)
 static int map_irq(struct file *fp, struct usdpaa_ioctl_irq_map *irq_map)
 {
 	struct usdpaa_irq_ctx *ctx = fp->private_data;
-	struct qm_portal_config *qportal = NULL;
-	struct bm_portal_config *bportal = NULL;
-	int irq, ret;
-	void *inhibit_reg;
-	struct file *old_filp = ctx->usdpaa_filp;
+	int ret;
+
+	if (ctx->irq_set) {
+		pr_debug("Setting USDPAA IRQ when it was already set!\n");
+		return -EBUSY;
+	}
 
 	ctx->usdpaa_filp = fget(irq_map->fd);
 	if (!ctx->usdpaa_filp) {
-		pr_err("fget() returned NULL for fd %d\n", irq_map->fd);
+		pr_debug("USDPAA fget(%d) returned NULL\n", irq_map->fd);
 		return -EINVAL;
 	}
 
 	if (irq_map->type == usdpaa_portal_qman) {
+		struct qm_portal_config *qportal;
 		qportal = usdpaa_get_qm_portal_config(ctx->usdpaa_filp,
 						   irq_map->portal_cinh);
 		if (!qportal) {
-			pr_err("Couldn't associate info to QMan Portal\n");
+			pr_debug("Couldn't locate QMan Portal\n");
 			fput(ctx->usdpaa_filp);
 			return -EINVAL;
 		}
 		/* Lookup IRQ number for portal */
-		irq = qportal->public_cfg.irq;
-		inhibit_reg = qportal->addr_virt[1] + QM_REG_IIR;
+		ctx->irq_num = qportal->public_cfg.irq;
+		ctx->inhibit_addr = qportal->addr_virt[1] + QM_REG_IIR;
 	} else {
+		struct bm_portal_config *bportal;
 		bportal = usdpaa_get_bm_portal_config(ctx->usdpaa_filp,
 					      irq_map->portal_cinh);
 		if (!bportal) {
-			pr_err("Couldn't associate info to BMan Portal\n");
+			pr_debug("Couldn't locate BMan Portal\n");
 			fput(ctx->usdpaa_filp);
 			return -EINVAL;
 		}
 		/* Lookup IRQ number for portal */
-		irq = bportal->public_cfg.irq;
-		inhibit_reg = bportal->addr_virt[1] + BM_REG_IIR;
-	}
-	if (ctx->irq_set) {
-		fput(old_filp);
-		free_irq(ctx->irq_num, ctx);
+		ctx->irq_num = bportal->public_cfg.irq;
+		ctx->inhibit_addr = bportal->addr_virt[1] + BM_REG_IIR;
 	}
 
 	ctx->irq_set = 1;
-	ctx->irq_num = irq;
-	ctx->inhibit_addr = inhibit_reg;
 
-	ret = request_irq(irq, usdpaa_irq_handler, 0,
+	ret = request_irq(ctx->irq_num, usdpaa_irq_handler, 0,
 			  "usdpaa_irq", ctx);
 	if (ret) {
-		pr_err("request_irq for irq %d failed, ret= %d\n", irq, ret);
+		pr_err("USDPAA request_irq(%d) failed, ret= %d\n",
+		       ctx->irq_num, ret);
 		ctx->irq_set = 0;
 		fput(ctx->usdpaa_filp);
 		return ret;
 	}
 	return 0;
-};
+}
 
 static long usdpaa_irq_ioctl(struct file *fp, unsigned int cmd,
 			     unsigned long arg)
@@ -168,7 +166,7 @@ static long usdpaa_irq_ioctl(struct file *fp, unsigned int cmd,
 	struct usdpaa_ioctl_irq_map irq_map;
 
 	if (cmd != USDPAA_IOCTL_PORTAL_IRQ_MAP) {
-		pr_err("Unknown command 0x%x\n", cmd);
+		pr_debug("USDPAA IRQ unknown command 0x%x\n", cmd);
 		return -EINVAL;
 	}
 
@@ -177,7 +175,7 @@ static long usdpaa_irq_ioctl(struct file *fp, unsigned int cmd,
 	if (ret)
 		return ret;
 	return map_irq(fp, &irq_map);
-};
+}
 
 static ssize_t usdpaa_irq_read(struct file *filp, char __user *buff,
 			       size_t count, loff_t *offp)
@@ -186,12 +184,12 @@ static ssize_t usdpaa_irq_read(struct file *filp, char __user *buff,
 	int ret;
 
 	if (!ctx->irq_set) {
-		pr_err("Reading USDPAA IRQ before it was set\n");
+		pr_debug("Reading USDPAA IRQ before it was set\n");
 		return -EINVAL;
 	}
 
 	if (count < sizeof(ctx->irq_count)) {
-		pr_err("USDPAA IRQ Read too small\n");
+		pr_debug("USDPAA IRQ Read too small\n");
 		return -EINVAL;
 	}
 	if (ctx->irq_count == ctx->last_irq_count) {
@@ -210,7 +208,6 @@ static ssize_t usdpaa_irq_read(struct file *filp, char __user *buff,
 			 sizeof(ctx->last_irq_count)))
 		return -EFAULT;
 	return sizeof(ctx->irq_count);
-
 }
 
 static unsigned int usdpaa_irq_poll(struct file *filp, poll_table *wait)
@@ -254,7 +251,7 @@ static long usdpaa_irq_ioctl_compat(struct file *fp, unsigned int cmd,
 	default:
 		return usdpaa_irq_ioctl(fp, cmd, arg);
 	}
-};
+}
 
 static const struct file_operations usdpaa_irq_fops = {
 	.open		   = usdpaa_irq_open,
-- 
2.0.2

