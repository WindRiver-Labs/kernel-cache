From cc7937b6a331a547499650148a3ae4fd7afba429 Mon Sep 17 00:00:00 2001
From: Nikhil Badola <nikhil.badola@freescale.com>
Date: Wed, 26 Mar 2014 08:47:42 +0530
Subject: [PATCH 0835/1089] fsl/usb : Workaround for USB Erratum A007792

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

USB controller version-2.5 requires to enable internal UTMI phy and program PTS field
in PORTSC register before asserting controller reset. This is must for successful
resetting of the controller and subsequent enumeration of usb devices

Signed-off-by: Suresh Gupta <suresh.gupta@freescale.com>
Signed-off-by: Nikhil Badola <nikhil.badola@freescale.com>
Change-Id: Ibebdc44bf75f5da69f2e9b6346bfecb442a784b0
Reviewed-on: http://git.am.freescale.net:8181/10301
Reviewed-by: Ramneek Mehresh <ramneek.mehresh@freescale.com>
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Jose Rivera <German.Rivera@freescale.com>
---
 drivers/usb/host/ehci-fsl.c      |  9 +++++++++
 drivers/usb/host/fsl-mph-dr-of.c | 13 +++++++++++++
 include/linux/fsl_devices.h      |  1 +
 3 files changed, 23 insertions(+)

diff --git a/drivers/usb/host/ehci-fsl.c b/drivers/usb/host/ehci-fsl.c
index 977f493..26836d6 100644
--- a/drivers/usb/host/ehci-fsl.c
+++ b/drivers/usb/host/ehci-fsl.c
@@ -185,6 +185,15 @@ static int usb_hcd_fsl_probe(const struct hc_driver *driver,
 	if (pdata->have_sysif_regs && pdata->controller_ver < FSL_USB_VER_1_6)
 		setbits32(hcd->regs + FSL_SOC_USB_CTRL, 0x4);
 
+	/*
+	 * Enable UTMI phy and program PTS field in UTMI mode before asserting
+	 * controller reset for USB Controller version 2.5
+	 */
+	if (pdata->has_fsl_erratum_a007792) {
+		writel_be(CTRL_UTMI_PHY_EN, hcd->regs + FSL_SOC_USB_CTRL);
+		writel(PORT_PTS_UTMI, hcd->regs + FSL_SOC_USB_PORTSC1);
+	}
+
 	/* Don't need to set host mode here. It will be done by tdi_reset() */
 
 	retval = usb_add_hcd(hcd, irq, IRQF_SHARED | IRQF_NO_SUSPEND);
diff --git a/drivers/usb/host/fsl-mph-dr-of.c b/drivers/usb/host/fsl-mph-dr-of.c
index 9df0aa2..a148bfa 100644
--- a/drivers/usb/host/fsl-mph-dr-of.c
+++ b/drivers/usb/host/fsl-mph-dr-of.c
@@ -190,6 +190,14 @@ static bool has_erratum_a005697(void)
 	return flag;
 }
 
+static bool has_erratum_a007792(int controller_ver)
+{
+	if (controller_ver == FSL_USB_VER_2_5)
+		return true;
+	else
+		return false;
+}
+
 static int usb_get_ver_info(struct device_node *np)
 {
 	int ver = -1;
@@ -298,6 +306,11 @@ static int fsl_usb2_mph_dr_of_probe(struct platform_device *ofdev)
 	else
 		pdata->has_fsl_erratum_a005697 = 0;
 
+	if (has_erratum_a007792(pdata->controller_ver))
+		pdata->has_fsl_erratum_a007792 = 1;
+	else
+		pdata->has_fsl_erratum_a007792 = 0;
+
 	if (of_get_property(np, "fsl,erratum_a006918", NULL))
 		pdata->has_fsl_erratum_a006918 = 1;
 	else
diff --git a/include/linux/fsl_devices.h b/include/linux/fsl_devices.h
index 20a53e1..2c4b7d3 100644
--- a/include/linux/fsl_devices.h
+++ b/include/linux/fsl_devices.h
@@ -96,6 +96,7 @@ struct fsl_usb2_platform_data {
 	unsigned	has_fsl_erratum_a005275:1;
 	unsigned	has_fsl_erratum_a006918:1;
 	unsigned	has_fsl_erratum_a005697:1;
+	unsigned	has_fsl_erratum_a007792:1;
 
 	/* register save area for suspend/resume */
 	u32		pm_command;
-- 
2.0.2

