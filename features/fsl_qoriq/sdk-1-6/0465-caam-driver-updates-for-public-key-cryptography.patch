From 9a5d6b30aecaa86d51d6d0245850936d4152bba5 Mon Sep 17 00:00:00 2001
From: Yashpal Dutta <yashpal.dutta@freescale.com>
Date: Sun, 23 Mar 2014 04:10:13 +0545
Subject: [PATCH 465/466] caam driver updates for public key cryptography

CAAM driver updates as per public key infrastructure changes in cryptoAPI
RSA, DSA, ECDSA are support as part of Public Key Crypto Operations

Signed-off-by: Yashpal Dutta <yashpal.dutta@freescale.com>
Change-Id: I3a6e4f71866a5ef157b9ea13e618c4d3d209f558
Reviewed-on: http://git.am.freescale.net:8181/5839
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Geanta Neag Horia Ioan-B05471 <horia.geanta@freescale.com>
Reviewed-by: Rivera Jose-B46482 <German.Rivera@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/9546
Reviewed-by: Ruchika Gupta <ruchika.gupta@freescale.com>
Reviewed-by: Jose Rivera <German.Rivera@freescale.com>
[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/caam/caampkc.c |   39 ++++++++++++++++++---------------------
 1 file changed, 18 insertions(+), 21 deletions(-)

diff --git a/drivers/crypto/caam/caampkc.c b/drivers/crypto/caam/caampkc.c
index a0f2c55..173fc41 100644
--- a/drivers/crypto/caam/caampkc.c
+++ b/drivers/crypto/caam/caampkc.c
@@ -920,7 +920,7 @@ static void *caam_rsa_desc_init(struct pkc_request *req)
 	case RSA_PUB:
 		{
 			edesc =
-			    kzalloc(sizeof(struct rsa_edesc) +
+			    kzalloc(sizeof(*edesc) +
 				    sizeof(struct rsa_pub_desc_s), GFP_DMA);
 
 			if (!edesc)
@@ -937,7 +937,7 @@ static void *caam_rsa_desc_init(struct pkc_request *req)
 	case RSA_PRIV_FORM1:
 		{
 			edesc =
-			    kzalloc(sizeof(struct rsa_edesc) +
+			    kzalloc(sizeof(*edesc) +
 				    sizeof(struct rsa_priv_frm1_desc_s),
 				    GFP_DMA);
 			if (!edesc)
@@ -954,7 +954,7 @@ static void *caam_rsa_desc_init(struct pkc_request *req)
 	case RSA_PRIV_FORM2:
 		{
 			edesc =
-			    kzalloc(sizeof(struct rsa_edesc) +
+			    kzalloc(sizeof(*edesc) +
 				    sizeof(struct rsa_priv_frm2_desc_s),
 				    GFP_DMA);
 			if (!edesc)
@@ -970,7 +970,7 @@ static void *caam_rsa_desc_init(struct pkc_request *req)
 		}
 	case RSA_PRIV_FORM3:
 		{
-			edesc = kzalloc(sizeof(struct rsa_edesc) +
+			edesc = kzalloc(sizeof(*edesc) +
 					sizeof(struct rsa_priv_frm3_desc_s),
 					GFP_DMA);
 			if (!edesc)
@@ -1002,7 +1002,7 @@ static void *caam_dsa_desc_init(struct pkc_request *req)
 	switch (req->type) {
 	case DSA_SIGN:
 		{
-			edesc = kzalloc(sizeof(struct dsa_edesc_s) +
+			edesc = kzalloc(sizeof(*edesc) +
 					sizeof(struct dsa_sign_desc_s),
 					GFP_DMA);
 			if (!edesc)
@@ -1018,7 +1018,7 @@ static void *caam_dsa_desc_init(struct pkc_request *req)
 		break;
 	case DSA_VERIFY:
 		{
-			edesc = kzalloc(sizeof(struct dsa_edesc_s) +
+			edesc = kzalloc(sizeof(*edesc) +
 					sizeof(struct dsa_verify_desc_s),
 					GFP_DMA);
 			if (!edesc)
@@ -1034,7 +1034,7 @@ static void *caam_dsa_desc_init(struct pkc_request *req)
 		break;
 	case DLC_KEYGEN:
 		{
-			edesc = kzalloc(sizeof(struct dsa_edesc_s) +
+			edesc = kzalloc(sizeof(*edesc) +
 					sizeof(struct dlc_keygen_desc_s),
 					GFP_DMA);
 			if (!edesc)
@@ -1050,7 +1050,7 @@ static void *caam_dsa_desc_init(struct pkc_request *req)
 		break;
 	case ECDSA_SIGN:
 		{
-			edesc = kzalloc(sizeof(struct dsa_edesc_s) +
+			edesc = kzalloc(sizeof(*edesc) +
 					sizeof(struct ecdsa_sign_desc_s),
 					GFP_DMA);
 			if (!edesc)
@@ -1066,7 +1066,7 @@ static void *caam_dsa_desc_init(struct pkc_request *req)
 		break;
 	case ECDSA_VERIFY:
 		{
-			edesc = kzalloc(sizeof(struct dsa_edesc_s) +
+			edesc = kzalloc(sizeof(*edesc) +
 					sizeof(struct ecdsa_verify_desc_s),
 					GFP_DMA);
 			if (!edesc)
@@ -1082,7 +1082,7 @@ static void *caam_dsa_desc_init(struct pkc_request *req)
 		break;
 	case ECC_KEYGEN:
 		{
-			edesc = kzalloc(sizeof(struct dsa_edesc_s) +
+			edesc = kzalloc(sizeof(*edesc) +
 					sizeof(struct ecc_keygen_desc_s),
 					GFP_DMA);
 			if (!edesc)
@@ -1195,7 +1195,7 @@ static void *caam_dh_desc_init(struct pkc_request *req)
 	case DH_COMPUTE_KEY:
 	case ECDH_COMPUTE_KEY:
 		{
-			edesc = kzalloc(sizeof(struct dh_edesc_s) +
+			edesc = kzalloc(sizeof(*edesc) +
 					sizeof(struct dh_key_desc_s),
 					GFP_DMA);
 			if (!edesc)
@@ -1339,14 +1339,14 @@ struct caam_pkc_alg {
 /* Per session pkc's driver context creation function */
 static int caam_pkc_cra_init(struct crypto_tfm *tfm)
 {
-	struct crypto_alg *alg = tfm->__crt_alg;
-	struct caam_pkc_alg *caam_alg =
-	    container_of(alg, struct caam_pkc_alg, crypto_alg);
 	struct caam_pkc_context_s *ctx = crypto_tfm_ctx(tfm);
-	struct caam_drv_private *priv = dev_get_drvdata(caam_alg->ctrldev);
-	int tgt_jr = atomic_inc_return(&priv->tfm_count);
 
-	ctx->dev = priv->jrdev[tgt_jr % priv->total_jobrs];
+	ctx->dev = caam_jr_alloc();
+
+	if (IS_ERR(ctx->dev)) {
+		pr_err("Job Ring Device allocation for transform failed\n");
+		return PTR_ERR(ctx->dev);
+	}
 	return 0;
 }
 
@@ -1363,7 +1363,7 @@ static struct caam_pkc_alg *caam_pkc_alloc(struct device *ctrldev,
 	struct caam_pkc_alg *t_alg;
 	struct crypto_alg *alg;
 
-	t_alg = kzalloc(sizeof(struct caam_pkc_alg), GFP_KERNEL);
+	t_alg = kzalloc(sizeof(*t_alg), GFP_KERNEL);
 	if (!t_alg) {
 		dev_err(ctrldev, "failed to allocate t_alg\n");
 		return NULL;
@@ -1412,9 +1412,6 @@ static int __init caam_pkc_init(void)
 			return -ENODEV;
 	}
 
-	if (of_device_is_compatible(dev_node,"fsl,sec-v6.0"))
-		return -ENODEV;
-
 	pdev = of_find_device_by_node(dev_node);
 	if (!pdev)
 		return -ENODEV;
-- 
1.7.10.4

