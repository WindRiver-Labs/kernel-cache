From 3296500c2fc7d716d3fa4f78f34eb33f87521029 Mon Sep 17 00:00:00 2001
From: Scott Wood <scottwood@freescale.com>
Date: Fri, 7 Mar 2014 14:48:35 -0600
Subject: [PATCH 209/466] powerpc/e6500: Make TLB lock recursive

commit 82d86de25b9c99db546e17c6f7ebf9a691da557e upstream

Once special level interrupts are supported, we may take nested TLB
misses -- so allow the same thread to acquire the lock recursively.

The lock will not be effective against the nested TLB miss handler
trying to write the same entry as the interrupted TLB miss handler, but
that's also a problem on non-threaded CPUs that lack TLB write
conditional.  This will be addressed in the patch that enables crit/mc
support by invalidating the TLB on return from level exceptions.

Signed-off-by: Scott Wood <scottwood@freescale.com>
[Just a minor modification to port 3.10 kernel]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 arch/powerpc/mm/tlb_low_64e.S |   19 ++++++++++++-------
 1 file changed, 12 insertions(+), 7 deletions(-)

diff --git a/arch/powerpc/mm/tlb_low_64e.S b/arch/powerpc/mm/tlb_low_64e.S
index fddc8b6..86845e1 100644
--- a/arch/powerpc/mm/tlb_low_64e.S
+++ b/arch/powerpc/mm/tlb_low_64e.S
@@ -333,7 +333,7 @@ END_FTR_SECTION_IFSET(CPU_FTR_SMT)
  * r14 = page table base
  * r13 = PACA
  * r11 = tlb_per_core ptr
- * r10 = crap (free to use)
+ * r10 = cpu number
  */
 tlb_miss_common_fsl_htw:
 	/*
@@ -343,21 +343,25 @@ tlb_miss_common_fsl_htw:
 	 * MAS6:IND should be already set based on MAS4
 	 */
 	mtocrf	0x01,r11
-	addi	r10,r11,PACA_TLB_LOCK-1 /* -1 to compensate for low bit set */
+	addi	r11,r11,PACA_TLB_LOCK-1 /* -1 to compensate for low bit set */
 	bf	31,1f		/* no lock if TLB_PER_CORE_HAS_LOCK clear */
-2:	lbarx	r15,0,r10
+2:	lbarx	r15,0,r11
+	lhz	r10,PACAPACAINDEX(r13)
 	cmpdi	r15,0
+	cmpdi	cr1,r15,1	/* set cr1.eq = 0 for non-recursive */
 	bne	3f
-	li	r15,1
-	stbcx.	r15,0,r10
+	stbcx.	r10,0,r11
 	bne	2b
+4:
 	.subsection 1
-3:	lbz	r15,0(r10)
+3:	cmpd	cr1,r15,r10	/* recursive lock due to mcheck/crit/etc? */
+	beq	cr1,4b		/* unlock will happen if cr1.eq = 0 */
+	lbz	r15,0(r11)
 	cmpdi	r15,0
 	bne	3b
 	b	2b
 	.previous
-1:
+1:	subi	r11,r11,PACA_TLB_LOCK-1
 
 	mfspr	r15,SPRN_MAS2
 
@@ -433,6 +437,7 @@ tlb_miss_common_fsl_htw:
 
 tlb_miss_done_fsl_htw:
 	.macro	tlb_unlock_fsl_htw
+	beq	cr1,1f		/* no unlock if lock was recursively grabbed */
 	mtocrf	0x01,r11
 	addi	r10,r11,PACA_TLB_LOCK-1
 	li	r15,0
-- 
1.7.10.4

