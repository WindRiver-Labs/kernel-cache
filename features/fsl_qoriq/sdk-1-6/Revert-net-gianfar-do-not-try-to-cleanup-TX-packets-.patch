From 80292c95f7f96eb1b11179278852c0a5887b6146 Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@freescale.com>
Date: Thu, 10 Apr 2014 16:59:33 +0300
Subject: [PATCH 38/50] Revert "net: gianfar: do not try to cleanup TX packets
 if they are not done"

This reverts commit 6a683415da2b82f8290dad067ebb649b19de77b3.

This workaround is not valid and introduces a
return-without-value bug for clean_tx_ring().

The buggy workaround is not valid because the
concurrency issue pointed out has beed fixed by:
"29c90ee gianfar: Separate out the Tx interrupt handling (Tx NAPI)"
(http://git.am.freescale.net:8181/9704)
upstream commit: aeb12c5ef7cb08d879af22fc0a56cab9e70689ea

With Tx NAPI in place, clean_tx_ring() can only
be called after the Tx DMA operations complete, so
there's no concurrecy issue.

[Original patch taken from QorIQ-SDK-V1.6-SOURCE-20140619-yocto.iso]

Change-Id: Icc26f9f974432792d8e71591b0fc7086eb4ace13
Signed-off-by: Claudiu Manoil <claudiu.manoil@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/10889
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Scott Wood <scottwood@freescale.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>

Conflicts:
	drivers/net/ethernet/freescale/gianfar.c
---
 drivers/net/ethernet/freescale/gianfar.c |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index d05ada9..cad7c86 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -151,6 +151,7 @@ static int gfar_poll_tx(struct napi_struct *napi, int budget);
 static void gfar_netpoll(struct net_device *dev);
 #endif
 int gfar_clean_rx_ring(struct gfar_priv_rx_q *rx_queue, int rx_work_limit);
+static void gfar_clean_tx_ring(struct gfar_priv_tx_q *tx_queue);
 static void gfar_process_frame(struct net_device *dev, struct sk_buff *skb,
 			       int amount_pull, struct napi_struct *napi);
 static void gfar_halt_nodisable(struct gfar_private *priv);
@@ -2982,7 +2983,7 @@ static void gfar_recycle_skb(struct sk_buff *skb)
 }
 
 /* Interrupt Handler for Transmit complete */
-static int gfar_clean_tx_ring(struct gfar_priv_tx_q *tx_queue)
+static void gfar_clean_tx_ring(struct gfar_priv_tx_q *tx_queue)
 {
 	struct net_device *dev = tx_queue->dev;
 	struct netdev_queue *txq;
-- 
1.7.5.4

