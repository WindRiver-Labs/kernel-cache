From 562504cc46c5e2a7a2c9910a08be779ac6a2d31b Mon Sep 17 00:00:00 2001
From: Timur Tabi <timur@freescale.com>
Date: Tue, 9 Oct 2012 03:01:32 +0000
Subject: [PATCH 138/162] powerpc/85xx: display PAMU data on access violation

Display the contents of some of the PAMU registers on an access violation.
This is necessary to help identify the source of the violation.

Signed-off-by: Timur Tabi <timur@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/powerpc/sysdev/fsl_pamu.c |   60 ++++++++++++++++++++++++++++++++++++----
 1 file changed, 55 insertions(+), 5 deletions(-)

diff --git a/arch/powerpc/sysdev/fsl_pamu.c b/arch/powerpc/sysdev/fsl_pamu.c
index 3d7f8d9..4eadfab 100644
--- a/arch/powerpc/sysdev/fsl_pamu.c
+++ b/arch/powerpc/sysdev/fsl_pamu.c
@@ -97,6 +97,7 @@ struct pamu_mmap_regs {
 #define PAMU_EEDHI	0X007C
 #define PAMU_EEDLO	0x0080
 #define PAMU_EECC	0x0084
+#define PAMU_UDAD	0x0090
 
 /* PAMU Revision Registers */
 #define PAMU_PR1	0x0BF8
@@ -782,9 +783,51 @@ static int __init setup_one_pamu(void *pamu_reg_base, struct ome *omt)
 	return 0;
 }
 
+#define make64(high, low) (((u64)(high) << 32) | (low))
+
+struct pamu_isr_data {
+	void __iomem *pamu_reg_base;	/* Base address of PAMU regs*/
+	unsigned int count;		/* The number of PAMUs */
+};
+
 static irqreturn_t pamu_av_isr(int irq, void *arg)
 {
-	panic("fsl-pamu: access violation interrupt\n");
+	struct pamu_isr_data *data = arg;
+	phys_addr_t phys;
+	unsigned int i, j;
+
+	pr_emerg("fsl-pamu: access violation interrupt\n");
+
+	for (i = 0; i < data->count; i++) {
+		void __iomem *p = data->pamu_reg_base + i * PAMU_OFFSET;
+		u32 pics = in_be32(p + PAMU_PICS);
+
+		if (pics & PAMU_ACCESS_VIOLATION_STAT) {
+			pr_emerg("POES1=%08x\n", in_be32(p + PAMU_POES1));
+			pr_emerg("POES2=%08x\n", in_be32(p + PAMU_POES2));
+			pr_emerg("AVS1=%08x\n", in_be32(p + PAMU_AVS1));
+			pr_emerg("AVS2=%08x\n", in_be32(p + PAMU_AVS2));
+			pr_emerg("AVA=%016llx\n", make64(in_be32(p + PAMU_AVAH),
+				in_be32(p + PAMU_AVAL)));
+			pr_emerg("UDAD=%08x\n", in_be32(p + PAMU_UDAD));
+			pr_emerg("POEA=%016llx\n", make64(in_be32(p + PAMU_POEAH),
+				in_be32(p + PAMU_POEAL)));
+
+			phys = make64(in_be32(p + PAMU_POEAH),
+				in_be32(p + PAMU_POEAL));
+
+			/* Assume that POEA points to a PAACE */
+			if (phys) {
+				u32 *paace = phys_to_virt(phys);
+
+				/* Only the first four words are relevant */
+				for (j = 0; j < 4; j++)
+					pr_emerg("PAACE[%u]=%08x\n", j, in_be32(paace + j));
+			}
+		}
+	}
+
+	panic("\n");
 
 	/* NOT REACHED */
 	return IRQ_HANDLED;
@@ -815,8 +858,6 @@ struct ccsr_law {
 	u32	reserved;
 };
 
-#define make64(high, low) (((u64)(high) << 32) | (low))
-
 /*
  * Create a coherence subdomain for a given memory block.
  */
@@ -987,6 +1028,7 @@ static int __init fsl_pamu_probe(struct platform_device *pdev)
 	u32 pamubypenr, pamu_counter;
 	unsigned long pamu_reg_off;
 	struct device_node *guts_node;
+	struct pamu_isr_data *data;
 	u64 size;
 	struct page *p;
 	int ret = 0;
@@ -1012,13 +1054,22 @@ static int __init fsl_pamu_probe(struct platform_device *pdev)
 	}
 	of_get_address(pdev->dev.of_node, 0, &size, NULL);
 
+	data = kzalloc(sizeof(struct pamu_isr_data), GFP_KERNEL);
+	if (!data) {
+		iounmap(pamu_regs);
+		return -ENOMEM;
+	}
+	data->pamu_reg_base = pamu_regs;
+	data->count = size / PAMU_OFFSET;
+
 	irq = irq_of_parse_and_map(pdev->dev.of_node, 0);
 	if (irq == NO_IRQ) {
 		dev_warn(&pdev->dev, "no interrupts listed in PAMU node\n");
 		goto error;
 	}
 
-	ret = request_irq(irq, pamu_av_isr, 0, "pamu", 0);
+	/* The ISR needs access to the regs, so we won't iounmap them */
+	ret = request_irq(irq, pamu_av_isr, 0, "pamu", data);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "error %i installing ISR for irq %i\n",
 			ret, irq);
@@ -1153,7 +1204,6 @@ static int __init fsl_pamu_probe(struct platform_device *pdev)
 	/* Enable all relevant PAMU(s) */
 	out_be32(&guts_regs->pamubypenr, pamubypenr);
 
-	iounmap(pamu_regs);
 	iounmap(guts_regs);
 
 	return 0;
-- 
1.7.9.7

