From e8050a7951c5be34e6cec934cf45e1e9ace317a6 Mon Sep 17 00:00:00 2001
From: Wei Yang <Wei.Yang@windriver.com>
Date: Thu, 13 Dec 2012 15:46:36 +0800
Subject: [PATCH] Revert "dpaa_eth: Fix Rx-stall issue in threaded ISR"

This reverts commit 9cb8bed0ae4fc88b28caa85b12b8c4bec5e1e8ed.
[
dpaa_eth: Fix Rx-stall issue in threaded ISR
Replace in_irq() with (in_irq() || !(in_serving_softirq()))
ingress_rx_default_dqrr() can be called in two contexts:

-interrupt context
-softirq context

Earlier in_irq() was used to distinguish.
But in case of RT, ISRs run in threaded mode & in_irq() can no longer be used.
So Rx traffic was getting stalled.
]

Note:  Do NOT drop the reverted patch from the kernel-cache

When we are validating PPC BSP(fsl-e500mc and fsl-p50xx),
we found two issue: the following call trace and the low
performance of ethernet card.

Reverting the patch is a workaround, its purpose is to make dpaa irq thread
proccess all networking packet.

drivers/staging/fsl_qbman/qman_high.c:939!
Oops: Exception in kernel mode, sig: 5 [#1]
PREEMPT SMP NR_CPUS=4 LTT NESTING LEVEL : 0
P5020 DS
Modules linked in:
NIP: c000000000708694 LR: c000000000708668 CTR: c0000000005d2620
REGS: c0000000fb277790 TRAP: 0700   Tainted: G        W
(3.4.20-rt29-WR5.0.1.0_preempt-rt)
MSR: 0000000080029000 <CE,EE,ME>  CR: 24048082  XER: 00000000 SOFTE: 1
TASK = c0000000fb2720c0[3] 'ksoftirqd/0' THREAD: c0000000fb274000 CPU: 0
GPR00: 0000000000020000 c0000000fb277a10 c000000000e3ba48 ffffffffffffffea
GPR04: 0000000000000040 0000000000000000 c0000000f60e7a00 0000000000000078
GPR08: 80000800800c9000 c000000000e498f8 0000000000000008 c0000000008bc7c8
GPR12: 0000000044044022 c00000000ffff000 0000000000000000 0000000000000000
GPR16: 0000000000000001 ffffffffffffffff 00000000fffeeb37 c000000000e40340
GPR20: c000000007908510 0000000000000040 0000000000000000 c0000000fb274000
GPR24: 0000000000000040 000000000000012c 0000000000000040 0000000000000000
GPR28: c00000000790b138 0000000000000000 c000000000d99248 c000000007905000
NIP [c000000000708694] .qman_poll_dqrr+0x74/0x2c0
LR [c000000000708668]  .qman_poll_dqrr+0x48/0x2c0
Call Trace:
[c0000000fb277a10] [c000000000708668] .qman_poll_dqrr+0x48/0x2c0(unreliable)
[c0000000fb277ad0] [c0000000005d2650] .dpaa_eth_poll+0x30/0x90
[c0000000fb277b60] [c0000000007410d4] .net_rx_action+0x1f4/0x4b0
[c0000000fb277c50] [c00000000004eee0] .__do_softirq_common+0x170/0x3c0
[c0000000fb277d40] [c00000000004f2c0] .__thread_do_softirq+0x190/0x220
[c0000000fb277de0] [c00000000004f424] .run_ksoftirqd+0xd4/0x260
[c0000000fb277ea0] [c000000000077b20] .kthread+0xc0/0xd0
[c0000000fb277f90] [c000000000018c3c] .original_kernel_thread+0x54/0x70
Instruction dump:
4bd2192d 60000000 e93e8008 78601f24 3860ffea 7c09002a 7fff0214 e81f1038
2fa00000 409e0218 e81f1008 5400039c <0b000000> 893f083a 3b800000 3b00ff80

Signed-off-by: Wei Yang <Wei.Yang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h |    7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index 39501f4..e9d743b 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -437,12 +437,7 @@ int dpa_enable_tx_csum(struct dpa_priv_s *priv,
 
 static inline int dpaa_eth_napi_schedule(struct dpa_percpu_priv_s *percpu_priv)
 {
-	/*
-	 * In case of threaded ISR for RT enable kernel,
-	 * in_irq() does not return appropriate value, so use
-	 * in_serving_softirq to distinguish softirq or irq context.
-	 */
-	if (unlikely(in_irq() || !in_serving_softirq())) {
+	if (unlikely(in_irq())) {
 		/* Disable QMan IRQ and invoke NAPI */
 		int ret = qman_irqsource_remove(QM_PIRQ_DQRI);
 		if (likely(!ret)) {
-- 
1.7.9.7

