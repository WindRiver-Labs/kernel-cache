From d1fe394d12fd8d746b6fac4b6ec266d178290261 Mon Sep 17 00:00:00 2001
From: Andrei Pistirica <sorin.pistirica@freescale.com>
Date: Fri, 10 Feb 2012 19:13:54 +0200
Subject: [PATCH 060/162] fmd: Add IP Fragmentation support

Signed-off-by: Andrei Pistirica <sorin.pistirica@freescale.com>
Signed-off-by: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../dpa/NetCommSw/src/inc/wrapper/fsl_fman.h       |    3 ++
 .../dpa/NetCommSw/src/inc/wrapper/lnxwrp_fm_ext.h  |    1 +
 .../dpa/NetCommSw/src/wrapper/lnxwrp_fm.h          |    3 ++
 .../dpa/NetCommSw/src/wrapper/lnxwrp_fm_port.c     |   35 +++++++++++++++++++-
 4 files changed, 41 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/fsl_fman.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/fsl_fman.h
index b4d3e00..5f5c808 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/fsl_fman.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/fsl_fman.h
@@ -43,6 +43,7 @@
 #include <linux/device.h>   /* struct device */
 #include <linux/fsl_qman.h> /* struct qman_fq */
 #include "dpaa_integration_ext.h"
+#include "fm_port_ext.h"
 
 /**************************************************************************//**
  @Group         FM_LnxKern_grp Frame Manager Linux wrapper API
@@ -125,6 +126,8 @@ struct fm_port_non_rx_params {
     bool                    parse_results;      /**< Whether to put the parser-results in the Transmitted buffer */
     bool                    hash_results;       /**< Whether to have the hash-results in the Received buffer */
     bool                    time_stamp;         /**< Whether to have the time-stamp in the Received buffer */
+    bool                    frag_enable;        /**< Whether to call extra config functions for OH, to enable fragmentation */
+    t_FmPortExtPools        op_ext_pools;       /**< External Buffer Pool params for OH port only */
 };
 
 
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/lnxwrp_fm_ext.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/lnxwrp_fm_ext.h
index 390eea4..39ea260 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/lnxwrp_fm_ext.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/lnxwrp_fm_ext.h
@@ -91,6 +91,7 @@ typedef struct t_WrpFmPcdDevSettings
 
 typedef struct t_WrpFmPortDevSettings
 {
+    bool                        frag_enabled;
     t_FmPortParams              param;
     t_SysObjectAdvConfigEntry   *advConfig;
 } t_WrpFmPortDevSettings;
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.h
index 571e27c..840ccd0 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.h
@@ -66,6 +66,9 @@
 #define FM_DEFAULT_TX10G_OPENDMA 8 /* default TX 10g open dmas */
 #define FM_DEFAULT_RX10G_OPENDMA 8 /* default RX 10g open dmas */
 
+#define FRAG_DATA_ALIGN 64
+#define FRAG_MANIP_SPACE 128
+
 #ifndef CONFIG_FSL_FM_MAX_FRAME_SIZE
 #define CONFIG_FSL_FM_MAX_FRAME_SIZE 0
 #endif
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm_port.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm_port.c
index 6b6fd3a..9c6d93b 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm_port.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm_port.c
@@ -691,7 +691,18 @@ static t_Error InitFmPortDev(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
 						(t_FmPortBufferPrefixContent
 						 *)))
 
-			MY_ADV_CONFIG_CHECK_END
+			if((p_LnxWrpFmPortDev->settings.param.portType ==
+				    e_FM_PORT_TYPE_OH_OFFLINE_PARSING) &&
+				   (p_LnxWrpFmPortDev->settings.
+						frag_enabled == TRUE)) {
+				ADV_CONFIG_CHECK(p_LnxWrpFmPortDev->h_Dev,
+					FM_PORT_ConfigExtBufPools,
+					NCSW_PARAMS(1, (t_FmPortExtPools *)))
+
+
+
+				MY_ADV_CONFIG_CHECK_END
+			}
 			/* Advance to next advanced configuration entry */
 			i++;
 	}
@@ -802,6 +813,8 @@ void fm_set_rx_port_params(struct fm_port *port,
 }
 EXPORT_SYMBOL(fm_set_rx_port_params);
 
+/* this function is called from oh_probe as well, thus it contains oh port
+ * specific parameters (make sure everything is checked) */
 void fm_set_tx_port_params(struct fm_port *port,
 			   struct fm_port_non_rx_params *params)
 {
@@ -820,6 +833,18 @@ void fm_set_tx_port_params(struct fm_port *port,
 		params->hash_results;
 	p_LnxWrpFmPortDev->buffPrefixContent.passTimeStamp =
 		params->time_stamp;
+	p_LnxWrpFmPortDev->settings.frag_enabled = FALSE;
+
+	if ((params->frag_enable == TRUE) &&
+		(p_LnxWrpFmPortDev->settings.param.portType ==
+			e_FM_PORT_TYPE_OH_OFFLINE_PARSING)) {
+
+		p_LnxWrpFmPortDev->settings.frag_enabled = TRUE;
+		p_LnxWrpFmPortDev->buffPrefixContent.dataAlign =
+			FRAG_DATA_ALIGN;
+		p_LnxWrpFmPortDev->buffPrefixContent.manipExtraSpace =
+			FRAG_MANIP_SPACE;
+	}
 
 	ADD_ADV_CONFIG_START(p_LnxWrpFmPortDev->settings.advConfig,
 			     FM_MAX_NUM_OF_ADV_SETTINGS)
@@ -829,6 +854,14 @@ void fm_set_tx_port_params(struct fm_port *port,
 					   (&p_LnxWrpFmPortDev->
 					    buffPrefixContent)));
 
+		/* oh port specific parameter (for fragmentation only) */
+		if ((params->frag_enable == TRUE) &&
+			(p_LnxWrpFmPortDev->settings.param.portType ==
+				e_FM_PORT_TYPE_OH_OFFLINE_PARSING)) {
+			ADD_ADV_CONFIG_NO_RET(FM_PORT_ConfigExtBufPools,
+					ARGS(1, (&params->op_ext_pools)));
+		}
+
 	ADD_ADV_CONFIG_END InitFmPortDev(p_LnxWrpFmPortDev);
 }
 EXPORT_SYMBOL(fm_set_tx_port_params);
-- 
1.7.9.7

