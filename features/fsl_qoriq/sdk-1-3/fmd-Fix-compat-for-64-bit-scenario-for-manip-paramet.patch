From 31bf41d551721623721749c4406529a954e33fed Mon Sep 17 00:00:00 2001
From: Radu-Andrei BULIE <radu.bulie@freescale.com>
Date: Wed, 13 Jun 2012 21:30:10 +0000
Subject: [PATCH 072/162] fmd: Fix compat for 64 bit scenario for manip
 parameters

Added fixes for ioc_compat_fm_pcd_manip_params_t structure when
transmitting p_data member to kernel.

Signed-off-by: Radu-Andrei BULIE <radu.bulie@freescale.com>
Signed-off-by: Stefan Szabo <szbs001@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm.c   |   20 ++++++++++
 .../src/wrapper/lnxwrp_ioctls_fm_compat.c          |   40 ++++++++++++++++----
 2 files changed, 53 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm.c
index e63c8851..846f31e 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm.c
@@ -2097,6 +2097,8 @@ invalid_port_id:
         case FM_PCD_IOC_MANIP_SET_NODE:
         {
             ioc_fm_pcd_manip_params_t *param;
+            uint8_t *p_data = NULL;
+            uint8_t size;
 
             param = (ioc_fm_pcd_manip_params_t *) XX_Malloc(
                         sizeof(ioc_fm_pcd_manip_params_t));
@@ -2144,6 +2146,22 @@ invalid_port_id:
                 }
             }
 
+            if (param->type == e_IOC_FM_PCD_MANIP_HDR) {
+                size = param->u.hdr.insrt_params.u.generic.size;
+                p_data = (uint8_t *) kmalloc(size, GFP_KERNEL);
+                if (!p_data )
+                    RETURN_ERROR(MINOR, err, NO_MSG);
+
+                if (param->u.hdr.insrt_params.u.generic.p_data &&
+                        copy_from_user(p_data,
+                            param->u.hdr.insrt_params.u.generic.p_data, size)) {
+                    XX_Free(p_data);
+                    RETURN_ERROR(MINOR, err, NO_MSG);
+                }
+
+                param->u.hdr.insrt_params.u.generic.p_data = p_data;
+            }
+
             param->id = FM_PCD_ManipNodeSet(p_LnxWrpFmDev->h_PcdDev,
                             (t_FmPcdManipParams *)param);
 
@@ -2179,6 +2197,8 @@ invalid_port_id:
                     err = E_OK;
             }
 
+            if (p_data)
+                kfree(p_data);
             XX_Free(param);
         }
         break;
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
index 48e48d9..de89318 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
@@ -954,13 +954,39 @@ void compat_fm_pcd_manip_set_node(
 {
     if (compat == COMPAT_US_TO_K) {
         param->type = compat_param->type;
-        memcpy(&param->u, &compat_param->u, sizeof(param->u));
-
-        /* user garbage - it could break the US application! */
-        if (compat_param->type == e_IOC_FM_PCD_MANIP_HDR &&
-            compat_param->u.hdr.insrt_params.type == e_IOC_FM_PCD_MANIP_INSRT_GENERIC)
-                param->u.hdr.insrt_params.u.generic.p_data =
-                    compat_ptr(compat_param->u.hdr.insrt_params.u.generic.p_data);
+        switch (param->type) {
+            case e_IOC_FM_PCD_MANIP_HDR:
+                param->u.hdr.rmv = compat_param->u.hdr.rmv;
+                memcpy(&param->u.hdr.rmv_params,
+                        &compat_param->u.hdr.rmv_params,
+                        sizeof(param->u.hdr.rmv_params));
+                param->u.hdr.insrt =
+                    compat_param->u.hdr.insrt;
+                param->u.hdr.insrt_params.type =
+                    compat_param->u.hdr.insrt_params.type;
+                param->u.hdr.insrt_params.u.generic.offset =
+                    compat_param->u.hdr.insrt_params.u.generic.offset;
+                param->u.hdr.insrt_params.u.generic.replace =
+                    compat_param->u.hdr.insrt_params.u.generic.replace;
+                param->u.hdr.insrt_params.u.generic.size =
+                    compat_param->u.hdr.insrt_params.u.generic.size;
+                /* user garbage - it could break the US application! */
+                if (compat_param->u.hdr.insrt_params.type == e_IOC_FM_PCD_MANIP_INSRT_GENERIC)
+                    param->u.hdr.insrt_params.u.generic.p_data =
+                        compat_ptr(compat_param->u.hdr.insrt_params.u.generic.p_data);
+                param->u.hdr.dont_parse_after_manip =
+                    compat_param->u.hdr.dont_parse_after_manip;
+                break;
+            case e_IOC_FM_PCD_MANIP_REASSEM:
+                memcpy(&param->u.reassem, &compat_param->u.reassem, sizeof(param->u.reassem));
+                break;
+            case e_IOC_FM_PCD_MANIP_FRAG:
+                memcpy(&param->u.frag, &compat_param->u.frag, sizeof(param->u.frag));
+                break;
+            case e_IOC_FM_PCD_MANIP_SPECIAL_OFFLOAD:
+                param->u.special_offload = compat_param->u.special_offload;
+                break;
+        }
 
         if (compat_param->p_next_manip)
             param->p_next_manip = compat_get_id2ptr(compat_param->id, PCD_NODE);
-- 
1.7.9.7

