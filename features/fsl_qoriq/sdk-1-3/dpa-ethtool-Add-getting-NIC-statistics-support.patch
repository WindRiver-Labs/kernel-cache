From 82752ade224e7fd56960d929b38ce004c7ce7bfa Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Mon, 14 Jan 2013 13:36:10 +0800
Subject: [PATCH] dpa/ethtool: Add getting NIC statistics support

dpa NIC driver can't support dump statistics by ethtool,
"ethtool -S ethX" always return "no stats available" error.

Since NetCommSw has provided interfaces to dump statistics
from registers, so we only need to implement ethtool's
interfaces by call NetCommSw's interfaces to support this
feature.

Signed-off-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpa-ethtool.c |   67 ++++++++++++++++++++++
 drivers/net/ethernet/freescale/dpa/mac-api.c     |   33 +++++++++++
 drivers/net/ethernet/freescale/dpa/mac.h         |    1 +
 3 files changed, 101 insertions(+)

diff --git a/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c b/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
index ccc97ab..63b810c 100644
--- a/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
+++ b/drivers/net/ethernet/freescale/dpa/dpa-ethtool.c
@@ -33,6 +33,38 @@
 
 #include "dpaa_eth.h"
 
+static char stat_gstrings[][ETH_GSTRING_LEN] = {
+	"tx-rx-64-frames",
+	"tx-rx-65-127-frames",
+	"tx-rx-128-255-frames",
+	"tx-rx-256-511-frames",
+	"tx-rx-512-1023-frames",
+	"tx-rx-1024-1518-frames",
+	"tx-rx-1519-1522-good-vlan",
+	"rx-64-invalid-fcs",
+	"rx-jabber-invalid-fcs",
+	"rx-dropped-by-lack-resource",
+	"rx-alignment-error",
+	"rx-undersize-packets",
+	"rx-oversize-packets",
+	"tx-pause-frame-packets",
+	"rx-pause-frame-packets",
+	"rx-bytes",
+	"rx-packets",
+	"receive-multicast-frames",
+	"receive-broadcast-frames",
+	"rx-dropped-frames",
+	"rx-error-frames",
+	"tx-bytes",
+	"tx-packets",
+	"tx-multicast-frames",
+	"tx-broadcast-frames",
+	"tx-dropped-frames",
+	"tx-error-frames",
+};
+
+#define DPA_STATS_LEN ARRAY_SIZE(stat_gstrings)
+
 static int __cold dpa_get_settings(struct net_device *net_dev, struct ethtool_cmd *et_cmd)
 {
 	int			 _errno;
@@ -97,6 +129,8 @@ static void __cold dpa_get_drvinfo(struct net_device *net_dev, struct ethtool_dr
 	}
 	strncpy(drvinfo->bus_info, dev_name(net_dev->dev.parent->parent),
 		sizeof(drvinfo->bus_info) - 1)[sizeof(drvinfo->bus_info)-1] = 0;
+
+	drvinfo->n_stats = DPA_STATS_LEN;
 }
 
 uint32_t __cold dpa_get_msglevel(struct net_device *net_dev)
@@ -109,6 +143,36 @@ void __cold dpa_set_msglevel(struct net_device *net_dev, uint32_t msg_enable)
 	((struct dpa_priv_s *)netdev_priv(net_dev))->msg_enable = msg_enable;
 }
 
+static void dpa_get_ethtool_stats(struct net_device *netdev,
+				struct ethtool_stats *stats, u64 *data)
+{
+	struct dpa_priv_s       *priv = netdev_priv(netdev);
+	int			_errno;
+
+	_errno = priv->mac_dev->get_stats(priv->mac_dev, data);
+	if (_errno < 0) {
+		if (netif_msg_drv(priv))
+			cpu_netdev_err(netdev,
+				"mac_dev->get_stats = %d\n",
+				_errno);
+	}
+}
+
+static void dpa_get_strings(struct net_device *netdev, u32 stringset, u8 *buf)
+{
+	memcpy(buf, stat_gstrings, DPA_STATS_LEN * ETH_GSTRING_LEN);
+}
+
+static int dpa_sset_count(struct net_device *netdev, int sset)
+{
+	switch (sset) {
+	case ETH_SS_STATS:
+		return DPA_STATS_LEN;
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
 int __cold dpa_nway_reset(struct net_device *net_dev)
 {
 	int			 _errno;
@@ -237,4 +301,7 @@ const struct ethtool_ops dpa_ethtool_ops __devinitconst = {
 	.get_flags		= ethtool_op_get_flags,
 	.set_flags		= dpa_eth_op_set_flags,
 #endif
+	.get_strings		= dpa_get_strings,
+	.get_sset_count		= dpa_sset_count,
+	.get_ethtool_stats	= dpa_get_ethtool_stats,
 };
diff --git a/drivers/net/ethernet/freescale/dpa/mac-api.c b/drivers/net/ethernet/freescale/dpa/mac-api.c
index 31c4c58..51734e2 100644
--- a/drivers/net/ethernet/freescale/dpa/mac-api.c
+++ b/drivers/net/ethernet/freescale/dpa/mac-api.c
@@ -681,6 +681,38 @@ static int __cold fm_rtc_set_fiper(struct net_device *net_dev, uint32_t id,
 	return _errno;
 }
 
+static int __cold mac_get_statistics(struct mac_device *mac_dev, u64 *data)
+{
+	int	_errno = 0;
+	t_Error err;
+	t_FmMacStatistics *p_Statistics;
+	int i;
+	u64 *buf;
+
+	p_Statistics = kmalloc(sizeof(t_FmMacStatistics), GFP_ATOMIC);
+	if (!p_Statistics) {
+		dpaa_eth_err(mac_dev->dev, "Out of memory\n");
+		return -ENOMEM;
+	}
+
+	err = FM_MAC_GetStatistics(
+		((struct mac_priv_s *)macdev_priv(mac_dev))->mac, p_Statistics);
+	_errno = -GET_ERROR_TYPE(err);
+	if (_errno < 0) {
+		dpaa_eth_err(mac_dev->dev,
+			"FM_MAC_GetStatistics() = 0x%08x\n", err);
+		goto out;
+	}
+
+	buf = (u64 *) p_Statistics;
+	for (i = 0; i < sizeof(t_FmMacStatistics)/sizeof(u64); i++)
+		data[i] = buf[i];
+
+out:
+	kfree(p_Statistics);
+	return _errno;
+}
+
 static void __devinit __cold setup_dtsec(struct mac_device *mac_dev)
 {
 	mac_dev->init_phy	= dtsec_init_phy;
@@ -703,6 +735,7 @@ static void __devinit __cold setup_dtsec(struct mac_device *mac_dev)
 	mac_dev->adjust_link		= dtsec_adjust_link;
 	mac_dev->fm_rtc_set_alarm	= fm_rtc_set_alarm;
 	mac_dev->fm_rtc_set_fiper	= fm_rtc_set_fiper;
+	mac_dev->get_stats		= mac_get_statistics;
 }
 
 static void __devinit __cold setup_xgmac(struct mac_device *mac_dev)
diff --git a/drivers/net/ethernet/freescale/dpa/mac.h b/drivers/net/ethernet/freescale/dpa/mac.h
index ace8185..5418005 100644
--- a/drivers/net/ethernet/freescale/dpa/mac.h
+++ b/drivers/net/ethernet/freescale/dpa/mac.h
@@ -89,6 +89,7 @@ struct mac_device {
 			uint64_t time);
 	int (*fm_rtc_set_fiper)(struct net_device *net_dev, uint32_t id,
 			uint64_t fiper);
+	int (*get_stats)(struct mac_device *mac_dev, uint64_t *p_Statistics);
 };
 
 struct mac_address {
-- 
1.7.9.7

