From d85ec5aaa1a6e3ff9075b1f09a3ac0c2358e2962 Mon Sep 17 00:00:00 2001
From: Stefan Szabo <szbs001@freescale.com>
Date: Wed, 8 Aug 2012 17:40:08 +0300
Subject: [PATCH 077/162] fmd: Added missing manip compat types and handling

Fixed certain changes to ip_manip-related types in the LLD
that have escaped being reflected in the FMD ioctl compat types.

Signed-off-by: Stefan Szabo <szbs001@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../src/wrapper/lnxwrp_ioctls_fm_compat.c          |   52 +++++++++++++++-----
 .../src/wrapper/lnxwrp_ioctls_fm_compat.h          |   26 ++++++++--
 2 files changed, 63 insertions(+), 15 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
index 0b3b2dc..8588765 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
@@ -945,20 +945,48 @@ void compat_fm_pcd_manip_set_node(
                 memcpy(&param->u.hdr.rmv_params,
                         &compat_param->u.hdr.rmv_params,
                         sizeof(param->u.hdr.rmv_params));
-                param->u.hdr.insrt =
-                    compat_param->u.hdr.insrt;
+
+                param->u.hdr.insrt = compat_param->u.hdr.insrt;
                 param->u.hdr.insrt_params.type =
                     compat_param->u.hdr.insrt_params.type;
-                param->u.hdr.insrt_params.u.generic.offset =
-                    compat_param->u.hdr.insrt_params.u.generic.offset;
-                param->u.hdr.insrt_params.u.generic.replace =
-                    compat_param->u.hdr.insrt_params.u.generic.replace;
-                param->u.hdr.insrt_params.u.generic.size =
-                    compat_param->u.hdr.insrt_params.u.generic.size;
-                /* user garbage - it could break the US application! */
-                if (compat_param->u.hdr.insrt_params.type == e_IOC_FM_PCD_MANIP_INSRT_GENERIC)
-                    param->u.hdr.insrt_params.u.generic.p_data =
-                        compat_ptr(compat_param->u.hdr.insrt_params.u.generic.p_data);
+                switch (compat_param->u.hdr.insrt_params.type)
+                {
+                    case e_IOC_FM_PCD_MANIP_INSRT_GENERIC:
+                        param->u.hdr.insrt_params.u.generic.offset =
+                            compat_param->u.hdr.insrt_params.u.generic.offset;
+                        param->u.hdr.insrt_params.u.generic.size =
+                            compat_param->u.hdr.insrt_params.u.generic.size;
+                        param->u.hdr.insrt_params.u.generic.replace =
+                            compat_param->u.hdr.insrt_params.u.generic.replace;
+                        param->u.hdr.insrt_params.u.generic.p_data =
+                            compat_ptr(compat_param->u.hdr.insrt_params.u.generic.p_data);
+                        break;
+                    case e_IOC_FM_PCD_MANIP_INSRT_BY_HDR:
+                        param->u.hdr.insrt_params.u.by_hdr.type =
+                            compat_param->u.hdr.insrt_params.u.by_hdr.type;
+                        param->u.hdr.insrt_params.u.by_hdr.u.specific_l2_params.specific_l2 =
+                            compat_param->u.hdr.insrt_params.u.by_hdr.u.specific_l2_params.specific_l2;
+                        param->u.hdr.insrt_params.u.by_hdr.u.specific_l2_params.update =
+                            compat_param->u.hdr.insrt_params.u.by_hdr.u.specific_l2_params.update;
+                        param->u.hdr.insrt_params.u.by_hdr.u.specific_l2_params.size =
+                            compat_param->u.hdr.insrt_params.u.by_hdr.u.specific_l2_params.size;
+                        param->u.hdr.insrt_params.u.by_hdr.u.specific_l2_params.p_data =
+                            compat_ptr(compat_param->u.hdr.insrt_params.u.by_hdr.u.specific_l2_params.p_data);
+                        break;
+                    default:
+                        _fm_cpt_err("Unsupported type: %d", compat_param->u.hdr.insrt_params.type);
+                }
+
+                param->u.hdr.field_update = compat_param->u.hdr.field_update;
+                memcpy(&param->u.hdr.field_update_params,
+                        &compat_param->u.hdr.field_update_params,
+                        sizeof(param->u.hdr.field_update_params));
+
+                param->u.hdr.custom = compat_param->u.hdr.custom;
+                memcpy(&param->u.hdr.custom_params,
+                        &compat_param->u.hdr.custom_params,
+                        sizeof(param->u.hdr.custom_params));
+
                 param->u.hdr.dont_parse_after_manip =
                     compat_param->u.hdr.dont_parse_after_manip;
                 break;
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
index 486fdcc..8b713c0 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
@@ -380,12 +380,28 @@ typedef struct ioc_compat_fm_pcd_manip_hdr_insrt_generic_params_t {
     compat_uptr_t                   p_data;
 } ioc_compat_fm_pcd_manip_hdr_insrt_generic_params_t;
 
+typedef struct ioc_compat_fm_pcd_manip_hdr_insrt_specific_l2_params_t {
+    ioc_fm_pcd_manip_hdr_insrt_specific_l2  specific_l2;
+    bool                                    update;
+    uint8_t                                 size;
+    compat_uptr_t                           p_data;
+} ioc_compat_fm_pcd_manip_hdr_insrt_specific_l2_params_t;
+
+typedef struct ioc_compat_fm_pcd_manip_hdr_insrt_by_hdr_params_t {
+    ioc_fm_pcd_manip_hdr_insrt_by_hdr_type                      type;
+    union {
+       ioc_compat_fm_pcd_manip_hdr_insrt_specific_l2_params_t   specific_l2_params;
+    } u;
+} ioc_compat_fm_pcd_manip_hdr_insrt_by_hdr_params_t;
+
 typedef struct ioc_compat_fm_pcd_manip_hdr_insrt_params_t {
-    ioc_fm_pcd_manip_hdr_insrt_type                     type;
+    ioc_fm_pcd_manip_hdr_insrt_type                         type;
     union {
-        ioc_compat_fm_pcd_manip_hdr_insrt_generic_params_t       generic;
+        ioc_compat_fm_pcd_manip_hdr_insrt_by_hdr_params_t   by_hdr;
+        ioc_compat_fm_pcd_manip_hdr_insrt_generic_params_t  generic;
 #ifdef FM_CAPWAP_SUPPORT
-TODO:
+#error CAPWAP not supported!
+        ioc_fm_pcd_manip_hdr_insrt_by_template_params_t     by_template;
 #endif /* FM_CAPWAP_SUPPORT */
     } u;
 } ioc_compat_fm_pcd_manip_hdr_insrt_params_t;
@@ -395,6 +411,10 @@ typedef struct ioc_compat_fm_pcd_manip_hdr_params_t {
     ioc_fm_pcd_manip_hdr_rmv_params_t           rmv_params;
     bool                                        insrt;
     ioc_compat_fm_pcd_manip_hdr_insrt_params_t  insrt_params;
+    bool                                        field_update;
+    ioc_fm_pcd_manip_hdr_field_update_params_t  field_update_params;
+    bool                                        custom;
+    ioc_fm_pcd_manip_hdr_custom_params_t        custom_params;
     bool                                        dont_parse_after_manip;
 } ioc_compat_fm_pcd_manip_hdr_params_t;
 
-- 
1.7.9.7

