From 7ec2f9c0242bd47ee8b425a1cca23e089c55b1ae Mon Sep 17 00:00:00 2001
From: Andrei Pistirica <sorin.pistirica@freescale.com>
Date: Mon, 21 May 2012 16:18:48 +0300
Subject: [PATCH 066/162] FMD mix support 64-32 bit updated.

Update the compat layer for FMD to match the FMD16 API.
Conflict edited.

Signed-off-by: Andrei Pistirica <sorin.pistirica@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm.c   |   58 +--
 .../src/wrapper/lnxwrp_ioctls_fm_compat.c          |  499 +++++++++++++-------
 .../src/wrapper/lnxwrp_ioctls_fm_compat.h          |  106 ++++-
 include/linux/fmd/Peripherals/fm_pcd_ioctls.h      |    8 +-
 4 files changed, 444 insertions(+), 227 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm.c
index 77e6cab..c47d8a4 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm.c
@@ -836,6 +836,7 @@ Status: feature not supported
 
                 memset(compat_param, 0, sizeof(ioc_compat_fm_pcd_net_env_params_t));
                 compat_copy_fm_pcd_net_env(compat_param, param, COMPAT_K_TO_US);
+
                 if (param->id && !copy_to_user((ioc_compat_fm_pcd_net_env_params_t *) compat_ptr(arg),
                             compat_param,
                             sizeof(ioc_compat_fm_pcd_net_env_params_t)))
@@ -871,7 +872,7 @@ Status: feature not supported
                 if (copy_from_user(&compat_id, (ioc_compat_fm_obj_t *) compat_ptr(arg), sizeof(ioc_compat_fm_obj_t)))
                     break;
 
-                id.obj = compat_ptr(compat_id.obj);
+                compat_copy_fm_net_env_delete(&compat_id, &id, COMPAT_US_TO_K);
             }
             else
 #endif
@@ -988,7 +989,7 @@ Status: feature not supported
                 if (copy_from_user(&compat_id, (ioc_compat_fm_obj_t *) compat_ptr(arg), sizeof(ioc_compat_fm_obj_t)))
                     break;
 
-                id.obj = compat_ptr(compat_id.obj);
+                compat_copy_fm_pcd_scheme_delete(&compat_id, &id, COMPAT_US_TO_K);
             }
             else
 #endif
@@ -1001,9 +1002,9 @@ Status: feature not supported
         }
 
 #if defined(CONFIG_COMPAT)
-        case FM_PCD_IOC_CC_SET_NODE_COMPAT:
+        case FM_PCD_IOC_MATCH_TABLE_SET_COMPAT:
 #endif
-        case FM_PCD_IOC_CC_SET_NODE:
+        case FM_PCD_IOC_MATCH_TABLE_SET:
         {
             ioc_fm_pcd_cc_node_params_t *param;
             uint8_t                     *keys;
@@ -1028,8 +1029,8 @@ Status: feature not supported
                 ioc_compat_fm_pcd_cc_node_params_t *compat_param;
 
                 compat_param = (ioc_compat_fm_pcd_cc_node_params_t *) XX_Malloc(
-                        sizeof(ioc_compat_fm_pcd_cc_node_params_t) +
-                        2 * IOC_FM_PCD_MAX_NUM_OF_KEYS * IOC_FM_PCD_MAX_SIZE_OF_KEY);
+                                    sizeof(ioc_compat_fm_pcd_cc_node_params_t) +
+                                    2 * IOC_FM_PCD_MAX_NUM_OF_KEYS * IOC_FM_PCD_MAX_SIZE_OF_KEY);
                 if (!compat_param)
                 {
                     XX_Free(param);
@@ -1087,9 +1088,6 @@ Status: feature not supported
 
                         param->keys_params.key_params[i].p_key = &keys[k];
                     }
-                    /* else
-                       param->keys_params.key_params[i].p_key = NULL;
-                       was taken care of by memset(0) above */
 
                     if (param->keys_params.key_params[i].p_mask)
                     {
@@ -1103,9 +1101,6 @@ Status: feature not supported
 
                         param->keys_params.key_params[i].p_mask = &masks[k];
                     }
-                    /* else
-                       param->keys_params.key_params[i].p_mask = NULL;
-                       was taken care of by memset(0) above */
                 }
             }
 
@@ -1116,19 +1111,17 @@ Status: feature not supported
             {
                 ioc_compat_fm_pcd_cc_node_params_t *compat_param;
                 compat_param = (ioc_compat_fm_pcd_cc_node_params_t *) XX_Malloc(
-                        sizeof(ioc_compat_fm_pcd_cc_node_params_t) +
-                        2 * IOC_FM_PCD_MAX_NUM_OF_KEYS * IOC_FM_PCD_MAX_SIZE_OF_KEY);
+                                            sizeof(ioc_compat_fm_pcd_cc_node_params_t) +
+                                            2 * IOC_FM_PCD_MAX_NUM_OF_KEYS * IOC_FM_PCD_MAX_SIZE_OF_KEY);
                 if (!compat_param)
                 {
                     XX_Free(param);
                     RETURN_ERROR(MINOR, E_NO_MEMORY, ("IOCTL FM PCD"));
                 }
 
-                /* setup user space structure */
                 memset(compat_param, 0, sizeof(ioc_compat_fm_pcd_cc_node_params_t) +
                         2 * IOC_FM_PCD_MAX_NUM_OF_KEYS * IOC_FM_PCD_MAX_SIZE_OF_KEY);
                 compat_copy_fm_pcd_cc_node(compat_param, param, COMPAT_K_TO_US);
-                compat_param->id = compat_add_ptr2id(param->id);
 
                 if (param->id && !copy_to_user((ioc_compat_fm_pcd_cc_node_params_t *)compat_ptr(arg),
                             compat_param,
@@ -1165,8 +1158,7 @@ Status: feature not supported
                 if (copy_from_user(&compat_id, (ioc_compat_fm_obj_t *) compat_ptr(arg), sizeof(ioc_compat_fm_obj_t)))
                     break;
 
-                id.obj = compat_get_id2ptr(compat_id.obj);
-                compat_del_ptr2id(id.obj);
+                compat_copy_fm_pcd_cc_delete_node(&compat_id, &id, COMPAT_US_TO_K);
             }
             else
 #endif
@@ -1244,8 +1236,7 @@ Status: feature not supported
                 }
 
                 memset(compat_param, 0, sizeof(ioc_compat_fm_pcd_cc_tree_params_t));
-                compat_add_ptr2id(param->id);
-                param->id = (void *)(uint64_t)compat_get_ptr2id(param->id);
+
                 compat_copy_fm_pcd_cc_tree(compat_param, param, COMPAT_K_TO_US);
 
                 if (param->id && !copy_to_user((ioc_compat_fm_pcd_cc_tree_params_t *)compat_ptr(arg),
@@ -1283,7 +1274,7 @@ Status: feature not supported
                 if (copy_from_user(&compat_id, (ioc_compat_fm_obj_t *) compat_ptr(arg), sizeof(ioc_compat_fm_obj_t)))
                     break;
 
-                id.obj = compat_get_id2ptr(compat_id.obj);
+                compat_copy_fm_pcd_cc_delete_tree(&compat_id, &id, COMPAT_US_TO_K);
             }
             else
 #endif
@@ -1454,7 +1445,7 @@ invalid_port_id:
                 if (copy_from_user(&compat_id, (ioc_compat_fm_obj_t *) compat_ptr(arg), sizeof(ioc_compat_fm_obj_t)))
                     break;
 
-                id.obj = compat_ptr(compat_id.obj);
+		compat_copy_fm_pcd_plcr_del_profile(&compat_id, &id, COMPAT_US_TO_K);
             }
             else
 #endif
@@ -2171,7 +2162,6 @@ invalid_port_id:
                 memset(compat_param, 0, sizeof(ioc_compat_fm_pcd_manip_params_t));
 
                 compat_fm_pcd_manip_set_node(compat_param, param, COMPAT_K_TO_US);
-                compat_param->id = compat_add_ptr2id(param->id);
 
                 if (param->id && !copy_to_user((ioc_compat_fm_pcd_manip_params_t *) compat_ptr(arg),
                             compat_param,
@@ -2209,7 +2199,7 @@ invalid_port_id:
                 if (copy_from_user(&compat_id, (ioc_compat_fm_obj_t *) compat_ptr(arg), sizeof(ioc_compat_fm_obj_t)))
                     break;
 
-                id.obj = compat_ptr(compat_id.obj);
+                compat_copy_fm_pcd_manip_delete_node(&compat_id, &id, COMPAT_US_TO_K);
             }
             else
 #endif
@@ -2669,12 +2659,15 @@ t_Error LnxwrpFmPortIOCTL(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev, unsigned int cmd
                 compat_port_pcd_kg_params   = (ioc_compat_fm_port_pcd_kg_params_t *) (compat_port_pcd_cc_params + 1);
                 compat_port_pcd_plcr_params = (ioc_compat_fm_port_pcd_plcr_params_t *) (compat_port_pcd_kg_params + 1);
 
-                /* Pseudo-while */
                 while (!(copy_fail = copy_from_user(compat_port_pcd_params,
                                         (ioc_compat_fm_port_pcd_params_t *)compat_ptr(arg),
                                         sizeof(ioc_compat_fm_port_pcd_params_t))))
                 {
-                    compat_copy_fm_port_pcd(compat_port_pcd_params, port_pcd_params, COMPAT_US_TO_K);
+                    /* set pointers from where to copy from: */
+                    port_pcd_params->p_prs_params = compat_ptr(compat_port_pcd_params->p_prs_params); /* same structure */
+                    port_pcd_params->p_cc_params = compat_ptr(compat_port_pcd_params->p_cc_params);
+                    port_pcd_params->p_kg_params = compat_ptr(compat_port_pcd_params->p_kg_params);
+                    port_pcd_params->p_plcr_params = compat_ptr(compat_port_pcd_params->p_plcr_params);
 
                     /* the prs member is the same, no compat structure...memcpy only */
                     if (port_pcd_params->p_prs_params && !copy_fail)
@@ -2695,10 +2688,7 @@ t_Error LnxwrpFmPortIOCTL(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev, unsigned int cmd
                         if(!(copy_fail = copy_from_user(compat_port_pcd_cc_params,
                                 port_pcd_params->p_cc_params,
                                 sizeof(ioc_compat_fm_port_pcd_cc_params_t))))
-                        {
                             port_pcd_params->p_cc_params = port_pcd_cc_params;
-                            port_pcd_params->p_cc_params->cc_tree_id = compat_get_id2ptr(compat_port_pcd_cc_params->cc_tree_id);
-                        }
                         else
                             break;
                     }
@@ -2708,10 +2698,7 @@ t_Error LnxwrpFmPortIOCTL(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev, unsigned int cmd
                         if(!(copy_fail = copy_from_user(compat_port_pcd_kg_params,
                                 port_pcd_params->p_kg_params,
                                 sizeof(ioc_compat_fm_port_pcd_kg_params_t))))
-                        {
-                            compat_copy_fm_port_pcd_kg(compat_port_pcd_kg_params, port_pcd_kg_params, COMPAT_US_TO_K);
                             port_pcd_params->p_kg_params = port_pcd_kg_params;
-                        }
                         else
                             break;
                     }
@@ -2721,16 +2708,15 @@ t_Error LnxwrpFmPortIOCTL(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev, unsigned int cmd
                         if(!(copy_fail = copy_from_user(compat_port_pcd_plcr_params,
                                 port_pcd_params->p_plcr_params,
                                 sizeof(ioc_compat_fm_port_pcd_plcr_params_t))))
-                        {
                             port_pcd_params->p_plcr_params = port_pcd_plcr_params;
-                            port_pcd_params->p_plcr_params->plcr_profile_id = compat_ptr(compat_port_pcd_plcr_params->plcr_profile_id);
-                        }
                     }
 
                     /* always run once! */
                     break;
                 }
 
+                compat_copy_fm_port_pcd(compat_port_pcd_params, port_pcd_params, COMPAT_US_TO_K);
+
                 XX_Free(compat_port_pcd_params);
             }
             else
@@ -3040,7 +3026,7 @@ t_Error LnxwrpFmPortIOCTL(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev, unsigned int cmd
                 if (copy_from_user(&compat_id, (ioc_compat_fm_obj_t *) compat_ptr(arg), sizeof(ioc_compat_fm_obj_t)))
                     break;
 
-                id.obj = compat_get_id2ptr(compat_id.obj);
+                compat_copy_fm_port_pcd_modify_tree(&compat_id, &id, COMPAT_US_TO_K);
             }
             else
 #endif
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
index b45e6d2..0b8f414 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
@@ -61,8 +61,7 @@
 #include "fm_port_ioctls.h"
 #include "lnxwrp_ioctls_fm_compat.h"
 
-/* debug dump */
-#if 0
+#if defined(FM_COMPAT_DBG)
 static void hex_dump(void * p_addr, unsigned int size)
 {
    int i;
@@ -80,72 +79,90 @@ static void hex_dump(void * p_addr, unsigned int size)
 #endif
 
 /* maping kernel pointers w/ UserSpace id's { */
-static void *compat_ptr2id_array[COMPAT_PTR2ID_ARRAY_MAX] = {0};
-/*  szbs001: we may need one set of these per FM device
-    to avoid using expensive synchronization! */
+const unsigned char map_node_name[][ID_MAP_NAME_SIZE] = {
+    "FM_NODE", /* 0 */
+    "FM_PORT_NODE", /* 1 */
+    "FM_PCD_NODE" /* 2 */
+};
+
+#define FM_NODE map_node_name[0]
+#define PORT_NODE map_node_name[1]
+#define PCD_NODE map_node_name[2]
+
+struct map_node {
+	void *ptr;
+	const unsigned char *name;
+};
+
+static struct map_node compat_ptr2id_array[COMPAT_PTR2ID_ARRAY_MAX];
 
-void compat_del_ptr2id(void *p)
+void compat_del_ptr2id(void *p, const unsigned char *name)
 {
     compat_uptr_t k;
 
-    /*printk("\ncompat_del_ptr2id(%p)\n", p);*/
+    _fm_cpt_dbg(COMPAT_GENERIC, "delete (%p)\n", p);
 
     for(k=1; k < COMPAT_PTR2ID_ARRAY_MAX; k++)
-        if(compat_ptr2id_array[k] == p)
-            compat_ptr2id_array[k] = NULL;
+        if(compat_ptr2id_array[k].ptr == p){
+            compat_ptr2id_array[k].ptr = NULL;
+			compat_ptr2id_array[k].name = NULL;
+		}
 }
 
-compat_uptr_t compat_add_ptr2id(void *p)
+compat_uptr_t compat_add_ptr2id(void *p, const unsigned char *name)
 {
     compat_uptr_t k;
 
-    /*printk("\ncompat_add_ptr2id(%p) -> ", p);*/
+    _fm_cpt_dbg(COMPAT_GENERIC, " (%p) do ->\n", p);
 
     if(!p)
         return 0;
 
     for(k=1; k < COMPAT_PTR2ID_ARRAY_MAX; k++)
-        if(compat_ptr2id_array[k] == NULL)
+        if(compat_ptr2id_array[k].ptr == NULL)
         {
-            compat_ptr2id_array[k] = p;
-            /*printk("0x%08x\n", k | COMPAT_PTR2ID_WATERMARK);*/
+            compat_ptr2id_array[k].ptr = p;
+			compat_ptr2id_array[k].name = name;
+            _fm_cpt_dbg(COMPAT_GENERIC, "0x%08x \n", k | COMPAT_PTR2ID_WATERMARK);
             return k | COMPAT_PTR2ID_WATERMARK;
         }
 
+	printk(KERN_WARNING "FMan map list full! No more PCD space on kernel!\n");
     return 0;
 }
 
-compat_uptr_t compat_get_ptr2id(void *p)
+compat_uptr_t compat_get_ptr2id(void *p, const unsigned char *name)
 {
     compat_uptr_t k;
 
-    /*printk("\ncompat_get_ptr2id(%p) -> ", p);*/
+    _fm_cpt_dbg(COMPAT_GENERIC, " (%p) get -> \n", p);
 
     for(k=1; k < COMPAT_PTR2ID_ARRAY_MAX; k++)
-        if(compat_ptr2id_array[k] == p) {
-            /*printk("0x%08x\n", k | COMPAT_PTR2ID_WATERMARK);*/
+        if(compat_ptr2id_array[k].ptr == p && compat_ptr2id_array[k].name == name) {
+            _fm_cpt_dbg(COMPAT_GENERIC, "0x%08x\n", k | COMPAT_PTR2ID_WATERMARK);
             return k | COMPAT_PTR2ID_WATERMARK;
         }
 
     return 0;
 }
 
-void *compat_get_id2ptr(compat_uptr_t comp)
+void *compat_get_id2ptr(compat_uptr_t comp, const unsigned char *name)
 {
 
-    /*printk("\ncompat_get_id2ptr(0x%08x) -> ", comp);*/
+    _fm_cpt_dbg(COMPAT_GENERIC, " (0x%08x) get -> \n", comp);
 
     if((COMPAT_PTR2ID_WM_MASK & comp) != COMPAT_PTR2ID_WATERMARK) {
-        /*printk("Error, invalid watermark!\n\n");
-        dump_stack();*/
+        _fm_cpt_dbg(COMPAT_GENERIC, "Error, invalid watermark!\n\n");
+        dump_stack();
         return compat_ptr(comp);
     }
 
     comp &= ~COMPAT_PTR2ID_WM_MASK;
 
-    if((0 < comp) && (comp < COMPAT_PTR2ID_ARRAY_MAX) && (compat_ptr2id_array[comp] != NULL)) {
-        /*printk("%p\n", compat_ptr2id_array[comp]);*/
-        return compat_ptr2id_array[comp];
+    if(((0 < comp) && (comp < COMPAT_PTR2ID_ARRAY_MAX) && (compat_ptr2id_array[comp].ptr != NULL)
+		&& compat_ptr2id_array[comp].name == name)) {
+        _fm_cpt_dbg(COMPAT_GENERIC, "%p\n", compat_ptr2id_array[comp].ptr);
+        return compat_ptr2id_array[comp].ptr;
     }
     return NULL;
 }
@@ -157,28 +174,31 @@ static inline void compat_copy_fm_pcd_plcr_next_engine(
         ioc_fm_pcd_engine                           next_engine,
         uint8_t                                     compat)
 {
+    _fm_cpt_dbg (compat, " Calling...\n");
+
     switch (next_engine)
     {
         case e_IOC_FM_PCD_PLCR:
-            if (compat)
-                param->p_profile = compat_ptr(compat_param->p_profile);
+            if (compat == COMPAT_US_TO_K)
+                param->p_profile = compat_get_id2ptr(compat_param->p_profile, PCD_NODE);
             else
-                compat_param->p_profile = ptr_to_compat(param->p_profile);
-            break;
-
+                compat_param->p_profile = compat_get_ptr2id(param->p_profile, PCD_NODE);
+        break;
         case e_IOC_FM_PCD_KG:
-            if (compat)
-                param->p_direct_scheme = compat_ptr(compat_param->p_direct_scheme);
+            if (compat == COMPAT_US_TO_K)
+                param->p_direct_scheme = compat_get_id2ptr(compat_param->p_direct_scheme, PCD_NODE);
             else
-                compat_param->p_direct_scheme = ptr_to_compat(param->p_direct_scheme);
-            break;
-
+                compat_param->p_direct_scheme = compat_get_ptr2id(param->p_direct_scheme, PCD_NODE);
+        break;
         default:
-            if (compat)
+            if (compat == COMPAT_US_TO_K)
                 param->action = compat_param->action;
             else
                 compat_param->action = param->action;
+        break;
     }
+
+    _fm_cpt_dbg (compat, " Called.\n");
 }
 
 void compat_copy_fm_pcd_plcr_profile(
@@ -186,7 +206,9 @@ void compat_copy_fm_pcd_plcr_profile(
         ioc_fm_pcd_plcr_profile_params_t        *param,
         uint8_t                                 compat)
 {
-    if (compat)
+    _fm_cpt_dbg (compat, " Calling...\n");
+
+    if (compat == COMPAT_US_TO_K)
     {
         param->modify = compat_param->modify;
 
@@ -210,7 +232,9 @@ void compat_copy_fm_pcd_plcr_profile(
         /* both parameters in the union has the same size, so memcpy works */
         memcpy(&param->color, &compat_param->color, sizeof(param->color));
 
-        memcpy(&param->non_passthrough_alg_param, &compat_param->non_passthrough_alg_param, sizeof(ioc_fm_pcd_plcr_non_passthrough_alg_param_t));
+        memcpy(&param->non_passthrough_alg_param,
+               &compat_param->non_passthrough_alg_param,
+               sizeof(ioc_fm_pcd_plcr_non_passthrough_alg_param_t));
 
         param->next_engine_on_green = compat_param->next_engine_on_green;
         param->next_engine_on_yellow = compat_param->next_engine_on_yellow;
@@ -219,8 +243,6 @@ void compat_copy_fm_pcd_plcr_profile(
         param->trap_profile_on_flow_A = compat_param->trap_profile_on_flow_A;
         param->trap_profile_on_flow_B = compat_param->trap_profile_on_flow_B;
         param->trap_profile_on_flow_C = compat_param->trap_profile_on_flow_C;
-
-        param->id = compat_ptr(compat_param->id);
     }
     else
     {
@@ -245,7 +267,9 @@ void compat_copy_fm_pcd_plcr_profile(
         /* both parameters in the union has the same size, so memcpy works */
         memcpy(&compat_param->color, &param->color, sizeof(compat_param->color));
 
-        memcpy(&compat_param->non_passthrough_alg_param, &param->non_passthrough_alg_param, sizeof(ioc_fm_pcd_plcr_non_passthrough_alg_param_t));
+        memcpy(&compat_param->non_passthrough_alg_param,
+               &param->non_passthrough_alg_param,
+               sizeof(ioc_fm_pcd_plcr_non_passthrough_alg_param_t));
 
         compat_param->next_engine_on_green = param->next_engine_on_green;
         compat_param->next_engine_on_yellow = param->next_engine_on_yellow;
@@ -255,7 +279,7 @@ void compat_copy_fm_pcd_plcr_profile(
         compat_param->trap_profile_on_flow_B = param->trap_profile_on_flow_B;
         compat_param->trap_profile_on_flow_C = param->trap_profile_on_flow_C;
 
-        compat_param->id = ptr_to_compat(param->id);
+        compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
     }
 
     compat_copy_fm_pcd_plcr_next_engine(&compat_param->params_on_green,
@@ -266,6 +290,20 @@ void compat_copy_fm_pcd_plcr_profile(
 
     compat_copy_fm_pcd_plcr_next_engine(&compat_param->params_on_red,
             &param->params_on_red, param->next_engine_on_red, compat);
+
+    _fm_cpt_dbg (compat, " Called.\n");
+}
+
+void compat_copy_fm_pcd_plcr_del_profile(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat)
+{
+    if (compat == COMPAT_US_TO_K)
+    {
+        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
+        compat_del_ptr2id(id->obj, PCD_NODE);
+    }
 }
 
 static inline void compat_copy_fm_pcd_cc_next_kg(
@@ -273,18 +311,22 @@ static inline void compat_copy_fm_pcd_cc_next_kg(
         ioc_fm_pcd_cc_next_kg_params_t          *param,
         uint8_t                                 compat)
 {
-    if (compat)
+    _fm_cpt_dbg (compat, " Calling...\n");
+
+    if (compat == COMPAT_US_TO_K)
     {
         param->new_fqid         = compat_param->new_fqid;
         param->override_fqid    = compat_param->override_fqid;
-        param->p_direct_scheme  = compat_ptr(compat_param->p_direct_scheme);
+        param->p_direct_scheme  = compat_get_id2ptr(compat_param->p_direct_scheme, PCD_NODE);
     }
     else
     {
         compat_param->new_fqid          = param->new_fqid;
         compat_param->override_fqid     = param->override_fqid;
-        compat_param->p_direct_scheme   = ptr_to_compat(param->p_direct_scheme);
+        compat_param->p_direct_scheme   = compat_get_ptr2id(param->p_direct_scheme, PCD_NODE);
     }
+
+    _fm_cpt_dbg (compat, " Called.\n");
 }
 
 static inline void compat_copy_fm_pcd_cc_next_cc(
@@ -292,10 +334,14 @@ static inline void compat_copy_fm_pcd_cc_next_cc(
         ioc_fm_pcd_cc_next_cc_params_t          *param,
         uint8_t                                 compat)
 {
-    if (compat)
-        param->cc_node_id = compat_get_id2ptr(compat_param->cc_node_id);
+    _fm_cpt_dbg (compat, " Calling...\n");
+
+    if (compat == COMPAT_US_TO_K)
+        param->cc_node_id = compat_get_id2ptr(compat_param->cc_node_id, PCD_NODE);
     else
-        compat_param->cc_node_id = compat_get_ptr2id(param->cc_node_id);
+        compat_param->cc_node_id = compat_get_ptr2id(param->cc_node_id, PCD_NODE);
+
+    _fm_cpt_dbg (compat, " Called.\n");
 }
 
 static inline void compat_copy_fm_pcd_cc_next_engine(
@@ -303,25 +349,26 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
         ioc_fm_pcd_cc_next_engine_params_t          *param,
         uint8_t                                     compat)
 {
-    if (compat)
+    /*_fm_cpt_dbg (compat, " Calling...\n");*/
+
+    if (compat == COMPAT_US_TO_K)
     {
         param->next_engine = compat_param->next_engine;
+        if (param->next_engine != e_IOC_FM_PCD_INVALID )
+            _fm_cpt_dbg(compat, " param->next_engine = %i \n", param->next_engine);
 
-        switch (compat_param->next_engine)
+        switch (param->next_engine)
         {
             case e_IOC_FM_PCD_KG:
-                compat_copy_fm_pcd_cc_next_kg(&compat_param->params.kg_params, &param->params.kg_params, compat);
-                break;
             case e_IOC_FM_PCD_CC:
-                compat_copy_fm_pcd_cc_next_cc(&compat_param->params.cc_params, &param->params.cc_params, compat);
                 break;
             default:
                 memcpy(&param->params, &compat_param->params, sizeof(param->params));
             break;
         }
-#if defined(FM_CAPWAP_SUPPORT) || defined(FM_IP_FRAG_N_REASSEM_SUPPORT)
-        param->manip = compat_ptr(compat_param->p_manip);
-#endif
+        if (compat_param->manip_id)
+            param->manip_id = compat_get_id2ptr(compat_param->manip_id, PCD_NODE);
+        param->statistics_en = compat_param->statistics_en;
     }
     else
     {
@@ -330,19 +377,30 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
         switch (compat_param->next_engine)
         {
             case e_IOC_FM_PCD_KG:
-                compat_copy_fm_pcd_cc_next_kg(&compat_param->params.kg_params, &param->params.kg_params, compat);
-                break;
             case e_IOC_FM_PCD_CC:
-                compat_copy_fm_pcd_cc_next_cc(&compat_param->params.cc_params, &param->params.cc_params, compat);
                 break;
             default:
                 memcpy(&compat_param->params, &param->params, sizeof(compat_param->params));
             break;
         }
-#if defined(FM_CAPWAP_SUPPORT) || defined(FM_IP_FRAG_N_REASSEM_SUPPORT)
-        compat_param->p_manip = ptr_to_compat(param->manip);
-#endif
+        if (param->manip_id)
+            compat_param->manip_id = compat_get_ptr2id(param->manip_id, PCD_NODE);
+        compat_param->statistics_en = param->statistics_en;
     }
+
+    switch (compat_param->next_engine)
+    {
+        case e_IOC_FM_PCD_KG:
+            compat_copy_fm_pcd_cc_next_kg(&compat_param->params.kg_params, &param->params.kg_params, compat);
+            break;
+        case e_IOC_FM_PCD_CC:
+            compat_copy_fm_pcd_cc_next_cc(&compat_param->params.cc_params, &param->params.cc_params, compat);
+            break;
+        default:
+        break;
+    }
+
+    /*_fm_cpt_dbg (compat, " Called.\n");*/
 }
 
 void compat_copy_fm_pcd_cc_key(
@@ -350,7 +408,7 @@ void compat_copy_fm_pcd_cc_key(
         ioc_fm_pcd_cc_key_params_t          *param,
         uint8_t                             compat)
 {
-    if (compat)
+    if (compat == COMPAT_US_TO_K)
     {
         param->p_key = compat_ptr(compat_param->p_key);
         param->p_mask = compat_ptr(compat_param->p_mask);
@@ -372,7 +430,7 @@ void compat_copy_fm_pcd_cc_node_modify_key_and_next_engine(
         ioc_fm_pcd_cc_node_modify_key_and_next_engine_params_t          *param,
         uint8_t                                                         compat)
 {
-    if (compat)
+    if (compat == COMPAT_US_TO_K)
     {
         param->id       = compat_ptr(compat_param->id);
         param->key_indx = compat_param->key_indx;
@@ -399,7 +457,7 @@ void compat_copy_fm_pcd_cc_node_modify_next_engine(
         ioc_fm_pcd_cc_node_modify_next_engine_params_t          *param,
         uint8_t                                                 compat)
 {
-    if (compat)
+    if (compat == COMPAT_US_TO_K)
     {
         param->id = compat_ptr(compat_param->id);
         param->key_indx = compat_param->key_indx;
@@ -423,7 +481,7 @@ void compat_fm_pcd_cc_tree_modify_next_engine(
         ioc_fm_pcd_cc_tree_modify_next_engine_params_t          *param,
         uint8_t                                                 compat)
 {
-    if (compat)
+    if (compat == COMPAT_US_TO_K)
     {
         param->id       = compat_ptr(compat_param->id);
         param->grp_indx = compat_param->grp_indx;
@@ -449,7 +507,9 @@ void compat_copy_fm_pcd_cc_grp(
 {
     int k;
 
-    if (compat)
+    _fm_cpt_dbg (compat, " Calling...\n");
+
+    if (compat == COMPAT_US_TO_K)
     {
         param->num_of_distinction_units = compat_param->num_of_distinction_units;
         memcpy(param->unit_ids, compat_param->unit_ids, IOC_FM_PCD_MAX_NUM_OF_CC_UNITS);
@@ -465,6 +525,8 @@ void compat_copy_fm_pcd_cc_grp(
                 &compat_param->next_engine_per_entries_in_grp[k],
                 &param->next_engine_per_entries_in_grp[k],
                 compat);
+
+    _fm_cpt_dbg (compat, " Called.\n");
 }
 
 void compat_copy_fm_pcd_cc_tree(
@@ -473,35 +535,39 @@ void compat_copy_fm_pcd_cc_tree(
         uint8_t compat)
 {
     int k;
+    _fm_cpt_dbg (compat, " Calling...\n");
 
-    if (compat)
+    if (compat == COMPAT_US_TO_K)
     {
-        param->net_env_id = compat_ptr(compat_param->net_env_id);
+        param->net_env_id = compat_get_id2ptr(compat_param->net_env_id, PCD_NODE);
         param->num_of_groups = compat_param->num_of_groups;
-
-        for (k=0; k < IOC_FM_PCD_MAX_NUM_OF_CC_GROUPS; k++)
-            compat_copy_fm_pcd_cc_grp(
-                    &compat_param->fm_pcd_cc_group_params[k],
-                    &param->fm_pcd_cc_group_params[k],
-                    compat);
-#ifdef FM_IP_FRAG_N_REASSEM_SUPPORT
-        param->ip_reassembly_manip = compat_ptr(compat_param->ip_reassembly_manip);
-#endif
-        param->id = compat_ptr(compat_param->id);
     }
     else
     {
-        compat_param->net_env_id = ptr_to_compat(param->net_env_id);
+        compat_param->net_env_id = compat_get_ptr2id(param->net_env_id, PCD_NODE);
         compat_param->num_of_groups = param->num_of_groups;
-        for (k=0; k < IOC_FM_PCD_MAX_NUM_OF_CC_GROUPS; k++)
-            compat_copy_fm_pcd_cc_grp(
-                    &compat_param->fm_pcd_cc_group_params[k],
-                    &param->fm_pcd_cc_group_params[k],
-                    compat);
-#ifdef FM_IP_FRAG_N_REASSEM_SUPPORT
-        compat_param->ip_reassembly_manip = ptr_to_compat(param->ip_reassembly_manip);
-#endif
-        compat_param->id = ptr_to_compat(param->id);
+
+        compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
+    }
+
+    for (k=0; k < IOC_FM_PCD_MAX_NUM_OF_CC_GROUPS; k++)
+        compat_copy_fm_pcd_cc_grp(
+                &compat_param->fm_pcd_cc_group_params[k],
+                &param->fm_pcd_cc_group_params[k],
+                compat);
+
+    _fm_cpt_dbg (compat, " Called.\n");
+}
+
+void compat_copy_fm_pcd_cc_delete_tree(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat)
+{
+    if (compat == COMPAT_US_TO_K)
+    {
+        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
+        compat_del_ptr2id(id->obj, PCD_NODE);
     }
 }
 
@@ -510,7 +576,7 @@ void compat_fm_pcd_prs_sw(
         ioc_fm_pcd_prs_sw_params_t *param,
         uint8_t compat)
 {
-    if (compat)
+    if (compat == COMPAT_US_TO_K)
     {
         param->override = compat_param->override;
         param->size = compat_param->size;
@@ -519,10 +585,7 @@ void compat_fm_pcd_prs_sw(
         memcpy(param->sw_prs_data_params,compat_param->sw_prs_data_params,IOC_FM_PCD_PRS_NUM_OF_HDRS*sizeof(uint32_t));
         param->num_of_labels = compat_param->num_of_labels;
         memcpy(param->labels_table,compat_param->labels_table,IOC_FM_PCD_PRS_NUM_OF_LABELS*sizeof(ioc_fm_pcd_prs_label_params_t));
-        return;
     }
-
-    WARN(1, "\n\nFMD: fatal error, feature not implemented!\n\n");    
 }
 
 void compat_copy_fm_pcd_kg_scheme(
@@ -530,22 +593,26 @@ void compat_copy_fm_pcd_kg_scheme(
         ioc_fm_pcd_kg_scheme_params_t           *param,
         uint8_t                                 compat)
 {
-    if (compat)
+    _fm_cpt_dbg(compat," Calling...\n");
+
+    if (compat == COMPAT_US_TO_K)
     {
         param->modify = compat_param->modify;
 
         /* scm_id */
-        if(compat_param->modify)
+        if(compat_param->modify){
             param->scm_id.scheme_id = compat_ptr(compat_param->scm_id.scheme_id);
+            _fm_cpt_dbg(compat," param->scm_id.scheme_id = %p \n", param->scm_id.scheme_id);
+        }
         else
             param->scm_id.relative_scheme_id = compat_param->scm_id.relative_scheme_id;
 
         param->always_direct = compat_param->always_direct;
-        /* netEnvParams */
-        param->netEnvParams.net_env_id = compat_ptr(compat_param->netEnvParams.net_env_id);
-        param->netEnvParams.num_of_distinction_units = compat_param->netEnvParams.num_of_distinction_units;
-        memcpy(param->netEnvParams.unit_ids,
-               compat_param->netEnvParams.unit_ids,
+        /* net_env_params */
+        param->net_env_params.net_env_id = compat_get_id2ptr(compat_param->net_env_params.net_env_id, PCD_NODE);
+        param->net_env_params.num_of_distinction_units = compat_param->net_env_params.num_of_distinction_units;
+        memcpy(param->net_env_params.unit_ids,
+               compat_param->net_env_params.unit_ids,
                IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
 
         param->use_hash = compat_param->use_hash;
@@ -555,12 +622,15 @@ void compat_copy_fm_pcd_kg_scheme(
         param->bypass_fqid_generation = compat_param->bypass_fqid_generation;
         param->base_fqid = compat_param->base_fqid;
         param->numOfUsedExtractedOrs = compat_param->numOfUsedExtractedOrs;
-		memcpy(param->extracted_ors, compat_param->extracted_ors, IOC_FM_PCD_KG_NUM_OF_GENERIC_REGS * sizeof(ioc_fm_pcd_kg_extracted_or_params_t));
+		memcpy(param->extracted_ors,
+               compat_param->extracted_ors,
+               IOC_FM_PCD_KG_NUM_OF_GENERIC_REGS * sizeof(ioc_fm_pcd_kg_extracted_or_params_t));
         param->next_engine = compat_param->next_engine;
 
     	/* kg_next_engine_params */
         if(param->next_engine == e_IOC_FM_PCD_CC){
-            param->kg_next_engine_params.cc.tree_id = compat_get_id2ptr(compat_param->kg_next_engine_params.cc.tree_id);
+            param->kg_next_engine_params.cc.tree_id = compat_get_id2ptr(compat_param->kg_next_engine_params.cc.tree_id, PCD_NODE);
+
             param->kg_next_engine_params.cc.grp_id = compat_param->kg_next_engine_params.cc.grp_id;
             param->kg_next_engine_params.cc.plcr_next = compat_param->kg_next_engine_params.cc.plcr_next;
             param->kg_next_engine_params.cc.bypass_plcr_profile_generation = compat_param->kg_next_engine_params.cc.bypass_plcr_profile_generation;
@@ -573,8 +643,9 @@ void compat_copy_fm_pcd_kg_scheme(
                    &compat_param->kg_next_engine_params,
                    sizeof(param->kg_next_engine_params));
 
-        memcpy(&param->scheme_counter, &compat_param->scheme_counter, sizeof(ioc_fm_pcd_kg_scheme_counter_t));
-        param->id = compat_ptr(compat_param->id);
+        memcpy(&param->scheme_counter,
+               &compat_param->scheme_counter,
+               sizeof(ioc_fm_pcd_kg_scheme_counter_t));
     }
     else
     {
@@ -588,10 +659,10 @@ void compat_copy_fm_pcd_kg_scheme(
 
         compat_param->always_direct = param->always_direct;
 
-        /* netEnvParams */
-        compat_param->netEnvParams.net_env_id = ptr_to_compat(param->netEnvParams.net_env_id);
-        compat_param->netEnvParams.num_of_distinction_units = param->netEnvParams.num_of_distinction_units;
-        memcpy(compat_param->netEnvParams.unit_ids, param->netEnvParams.unit_ids, IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
+        /* net_env_params */
+        compat_param->net_env_params.net_env_id = ptr_to_compat(param->net_env_params.net_env_id);
+        compat_param->net_env_params.num_of_distinction_units = param->net_env_params.num_of_distinction_units;
+        memcpy(compat_param->net_env_params.unit_ids, param->net_env_params.unit_ids, IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
 
         compat_param->use_hash = param->use_hash;
         memcpy(&compat_param->key_extract_and_hash_params, &param->key_extract_and_hash_params, sizeof(ioc_fm_pcd_kg_key_extract_and_hash_params_t));
@@ -603,17 +674,35 @@ void compat_copy_fm_pcd_kg_scheme(
 
         /* kg_next_engine_params */
         if(compat_param->next_engine == e_IOC_FM_PCD_CC){
-            compat_param->kg_next_engine_params.cc.tree_id = compat_get_ptr2id(param->kg_next_engine_params.cc.tree_id);
+            compat_param->kg_next_engine_params.cc.tree_id = compat_get_ptr2id(param->kg_next_engine_params.cc.tree_id, PCD_NODE);
+
             compat_param->kg_next_engine_params.cc.grp_id = param->kg_next_engine_params.cc.grp_id;
             compat_param->kg_next_engine_params.cc.plcr_next = param->kg_next_engine_params.cc.plcr_next;
             compat_param->kg_next_engine_params.cc.bypass_plcr_profile_generation = param->kg_next_engine_params.cc.bypass_plcr_profile_generation;
-            memcpy(&compat_param->kg_next_engine_params.cc.plcr_profile, &param->kg_next_engine_params.cc.plcr_profile, sizeof(ioc_fm_pcd_kg_plcr_profile_t));
+            memcpy(&compat_param->kg_next_engine_params.cc.plcr_profile,
+                   &param->kg_next_engine_params.cc.plcr_profile,
+                   sizeof(ioc_fm_pcd_kg_plcr_profile_t));
         }
         else
             memcpy(&param->kg_next_engine_params, &compat_param->kg_next_engine_params, sizeof(compat_param->kg_next_engine_params));
 
         memcpy(&compat_param->scheme_counter, &param->scheme_counter, sizeof(ioc_fm_pcd_kg_scheme_counter_t));
-        compat_param->id = ptr_to_compat(param->id);
+
+        compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
+    }
+
+    _fm_cpt_dbg(compat," Called.\n");
+}
+
+void compat_copy_fm_pcd_scheme_delete(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat)
+{
+    if (compat == COMPAT_US_TO_K)
+    {
+        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
+        compat_del_ptr2id(id->obj, PCD_NODE);
     }
 }
 
@@ -622,13 +711,10 @@ void compat_copy_fm_pcd_kg_scheme_select(
         ioc_fm_pcd_kg_scheme_select_t *param,
         uint8_t compat)
 {
-    if (compat){
+    if (compat == COMPAT_US_TO_K){
         param->direct = compat_param->direct;
         param->scheme_id = compat_ptr(compat_param->direct);
     }
-    else {
-        printk(" %s:%u feature not implemented... \n", __func__, __LINE__);
-    }
 }
 
 void compat_copy_fm_pcd_kg_schemes_params(
@@ -638,13 +724,20 @@ void compat_copy_fm_pcd_kg_schemes_params(
 {
     int k;
 
-    if (compat) {
+    if (compat == COMPAT_US_TO_K) {
         param->num_of_schemes = compat_param->num_of_schemes;
-        for(k=0; k < FM_PCD_KG_NUM_OF_SCHEMES; k++)
-            param->scheme_ids[k] = compat_ptr(compat_param->schemes_ids[k]);
+        for(k=0; k < compat_param->num_of_schemes; k++)
+            param->scheme_ids[k] = compat_get_id2ptr(compat_param->schemes_ids[k], PCD_NODE);
     }
-    else {
-        printk(" %s:%u feature not implemented... \n", __func__, __LINE__);
+}
+
+void compat_copy_fm_port_pcd_cc(
+    ioc_compat_fm_port_pcd_cc_params_t *compat_cc_params ,
+    ioc_fm_port_pcd_cc_params_t *p_cc_params,
+    uint8_t compat)
+{
+    if (compat == COMPAT_US_TO_K){
+        p_cc_params->cc_tree_id = compat_get_id2ptr(compat_cc_params->cc_tree_id, PCD_NODE);
     }
 }
 
@@ -653,16 +746,17 @@ void compat_copy_fm_port_pcd_kg(
         ioc_fm_port_pcd_kg_params_t *param,
         uint8_t compat)
 {
-    if (compat){
+    if (compat == COMPAT_US_TO_K){
         uint8_t k;
+
         param->num_of_schemes = compat_param->num_of_schemes;
-        for(k=0;k<FM_PCD_KG_NUM_OF_SCHEMES;k++)
-            param->schemes_ids[k] = compat_ptr(compat_param->schemes_ids[k]);
+        for(k=0; k<compat_param->num_of_schemes; k++)
+            if (compat_param->schemes_ids[k])
+                param->schemes_ids[k] = compat_get_id2ptr(compat_param->schemes_ids[k], PCD_NODE);
+
         param->direct_scheme = compat_param->direct_scheme;
-        param->direct_scheme_id = compat_ptr(compat_param->direct_scheme_id);
-    }
-    else {
-        printk(" %s:%u feature not implemented... \n", __func__, __LINE__);;
+        if (param->direct_scheme)
+            param->direct_scheme_id = compat_get_id2ptr(compat_param->direct_scheme_id, PCD_NODE);
     }
 }
 
@@ -671,40 +765,73 @@ void compat_copy_fm_port_pcd(
         ioc_fm_port_pcd_params_t *param,
         uint8_t compat)
 {
-    if (compat){
+    if (compat == COMPAT_US_TO_K){
+        ioc_fm_port_pcd_prs_params_t         *same_port_pcd_prs_params;
+        ioc_compat_fm_port_pcd_cc_params_t   *compat_port_pcd_cc_params;
+        ioc_compat_fm_port_pcd_kg_params_t   *compat_port_pcd_kg_params;
+        ioc_compat_fm_port_pcd_plcr_params_t *compat_port_pcd_plcr_params;
+
+        same_port_pcd_prs_params    = (ioc_fm_port_pcd_prs_params_t *) (compat_param + 1);
+        compat_port_pcd_cc_params   = (ioc_compat_fm_port_pcd_cc_params_t *) (same_port_pcd_prs_params + 1);
+        compat_port_pcd_kg_params   = (ioc_compat_fm_port_pcd_kg_params_t *) (compat_port_pcd_cc_params + 1);
+        compat_port_pcd_plcr_params = (ioc_compat_fm_port_pcd_plcr_params_t *) (compat_port_pcd_kg_params + 1);
+
+        _fm_cpt_dbg(compat,"\n param->p_prs_params=%p \n", param->p_prs_params);
+        _fm_cpt_dbg(compat," param->p_cc_params=%p  \n", param->p_cc_params);
+        _fm_cpt_dbg(compat," param->p_kg_params=%p  \n", param->p_kg_params);
+        _fm_cpt_dbg(compat," param->p_plcr_params=%p  \n", param->p_plcr_params);
+
         param->pcd_support = compat_param->pcd_support;
-        param->net_env_id = compat_ptr(compat_param->net_env_id);
-        param->p_prs_params = compat_ptr(compat_param->p_prs_params); /* same structure */
-        param->p_cc_params = compat_ptr(compat_param->p_cc_params);
-        param->p_kg_params = compat_ptr(compat_param->p_kg_params);
-        param->p_plcr_params = compat_ptr(compat_param->p_plcr_params);
-    }
-    else {
-        compat_param->pcd_support = param->pcd_support;
-        compat_param->net_env_id = ptr_to_compat(param->net_env_id);
-        compat_param->p_prs_params = ptr_to_compat(param->p_prs_params); /* same structure */
-        compat_param->p_cc_params = ptr_to_compat(param->p_cc_params);
-        compat_param->p_kg_params = ptr_to_compat(param->p_kg_params);
-        compat_param->p_plcr_params = ptr_to_compat(param->p_plcr_params);
+        param->net_env_id = compat_get_id2ptr(compat_param->net_env_id, PCD_NODE);
+
+        if (param->p_cc_params)
+            compat_copy_fm_port_pcd_cc(compat_port_pcd_cc_params, param->p_cc_params, COMPAT_US_TO_K);
+        if (param->p_kg_params)
+            compat_copy_fm_port_pcd_kg(compat_port_pcd_kg_params, param->p_kg_params, COMPAT_US_TO_K);
+        if (param->p_plcr_params)
+            param->p_plcr_params->plcr_profile_id = compat_ptr(compat_port_pcd_plcr_params->plcr_profile_id);
+        if (param->p_ip_reassembly_manip)
+            param->p_ip_reassembly_manip = compat_get_id2ptr(compat_param->p_ip_reassembly_manip, PCD_NODE);
     }
 }
 
+void compat_copy_fm_port_pcd_modify_tree(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat)
+{
+    if (compat == COMPAT_US_TO_K)
+        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
+}
+
 void compat_copy_fm_pcd_net_env(
         ioc_compat_fm_pcd_net_env_params_t *compat_param,
         ioc_fm_pcd_net_env_params_t *param,
         uint8_t compat)
 {
-    if (compat)
+    if (compat == COMPAT_US_TO_K)
     {
         param->num_of_distinction_units = compat_param->num_of_distinction_units;
         memcpy(param->units, compat_param->units, sizeof(ioc_fm_pcd_distinction_unit_t)*IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
-        param->id = compat_ptr(compat_param->id);
+        param->id = compat_ptr(compat_param->id); /* this should be null */
     }
     else
     {
         compat_param->num_of_distinction_units = param->num_of_distinction_units;
         memcpy(compat_param->units, param->units, sizeof(ioc_fm_pcd_distinction_unit_t)*IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
-        compat_param->id = ptr_to_compat(param->id);
+		compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
+    }
+}
+
+void compat_copy_fm_net_env_delete(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat)
+{
+    if (compat == COMPAT_US_TO_K)
+    {
+        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
+        compat_del_ptr2id(id->obj, PCD_NODE);
     }
 }
 
@@ -713,21 +840,24 @@ void compat_copy_fm_pcd_cc_node_modify_key(
         ioc_fm_pcd_cc_node_modify_key_params_t          *param,
         uint8_t                                         compat)
 {
-    if (compat)
+    if (compat == COMPAT_US_TO_K)
     {
         param->id       = compat_ptr(compat_param->id);
+        _fm_cpt_dbg(compat," param->id = %p \n", param->id);
         param->key_indx = compat_param->key_indx;
         param->key_size = compat_param->key_size;
         param->p_key    = (uint8_t *)compat_ptr(compat_param->p_key);
+        _fm_cpt_dbg(compat," param->p_key = %p \n", param->p_key);
         param->p_mask   = (uint8_t *)compat_ptr(compat_param->p_mask);
+        _fm_cpt_dbg(compat," param->p_mask = %p\n", param->p_mask);
     }
     else
     {
-        compat_param->id        = ptr_to_compat(param->id);
         compat_param->key_indx  = param->key_indx;
         compat_param->key_size  = param->key_size;
         compat_param->p_key     = ptr_to_compat((void *)param->p_key);
         compat_param->p_mask    = ptr_to_compat((void *)param->p_mask);
+        compat_param->id        = compat_add_ptr2id(param->id, PCD_NODE);
     }
 }
 
@@ -737,34 +867,37 @@ void compat_copy_keys(
         uint8_t compat)
 {
     int k = 0;
-    if (compat){
-        param->num_of_keys = compat_param->num_of_keys;
-        param->key_size = compat_param->key_size;
 
-        for(k=0;k<IOC_FM_PCD_MAX_NUM_OF_KEYS;k++)
-            compat_copy_fm_pcd_cc_key(
-                &compat_param->key_params[k],
-                &param->key_params[k],
-                compat);
+    _fm_cpt_dbg(compat," Calling...\n");
 
+    if (compat == COMPAT_US_TO_K){
+        param->max_num_of_keys = compat_param->max_num_of_keys;
+        param->mask_support = compat_param->mask_support;
+        param->statistics_mode = compat_param->statistics_mode;
+        param->num_of_keys = compat_param->num_of_keys;
+        param->key_size = compat_param->key_size;
     }
     else {
 
+        compat_param->max_num_of_keys = param->max_num_of_keys;
+        compat_param->mask_support = param->mask_support;
+        compat_param->statistics_mode = param->statistics_mode;
         compat_param->num_of_keys = param->num_of_keys;
         compat_param->key_size = param->key_size;
-
-        for(k=0;k<IOC_FM_PCD_MAX_NUM_OF_KEYS;k++)
-            compat_copy_fm_pcd_cc_key(
-                &compat_param->key_params[k],
-                &param->key_params[k],
-                compat);
     }
 
+    for(k=0;k<IOC_FM_PCD_MAX_NUM_OF_KEYS;k++)
+        compat_copy_fm_pcd_cc_key(
+            &compat_param->key_params[k],
+            &param->key_params[k],
+             compat);
+
     compat_copy_fm_pcd_cc_next_engine(
             &compat_param->cc_next_engine_params_for_miss,
             &param->cc_next_engine_params_for_miss,
             compat);
 
+    _fm_cpt_dbg(compat," Called.\n");
 }
 
 void compat_copy_fm_pcd_cc_node(
@@ -772,23 +905,33 @@ void compat_copy_fm_pcd_cc_node(
         ioc_fm_pcd_cc_node_params_t         *param,
         uint8_t                             compat)
 {
-    if (compat)
-    {
-        /* no pointer inside, so sizeof US and KS are the same - memcpy is ok */
+    _fm_cpt_dbg(compat," Calling...\n");
+
+    if (compat == COMPAT_US_TO_K)
         memcpy(&param->extract_cc_params, &compat_param->extract_cc_params, sizeof(ioc_fm_pcd_extract_entry_t));
 
+    else
+    {
         compat_copy_keys(&compat_param->keys_params, &param->keys_params, compat);
 
-        param->id = compat_get_id2ptr(compat_param->id);
+        compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
+        _fm_cpt_dbg(compat," param->id = %p \n", param->id);
     }
-    else
-    {
-        /* no pointer inside, so sizeof US and KS are the same - memcpy is ok */
-        memcpy(&compat_param->extract_cc_params, &param->extract_cc_params, sizeof(ioc_fm_pcd_extract_entry_t));
 
-        compat_copy_keys(&compat_param->keys_params, &param->keys_params, compat);
+    compat_copy_keys(&compat_param->keys_params, &param->keys_params, compat);
 
-        compat_param->id = ptr_to_compat(param->id);
+    _fm_cpt_dbg(compat," Called.\n");
+}
+
+void compat_copy_fm_pcd_cc_delete_node(
+    ioc_compat_fm_obj_t *compat_id,
+    ioc_fm_obj_t *id,
+    uint8_t compat)
+{
+    if (compat == COMPAT_US_TO_K)
+    {
+        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
+        compat_del_ptr2id(id->obj, PCD_NODE);
     }
 }
 
@@ -799,7 +942,7 @@ void compat_fm_pcd_manip_set_node(
 {
 #warning TODO compat manip node not implemented
 #if 0
-    if (compat) {
+    if (compat == COMPAT_US_TO_K) {
 	param->rmv = compat_param->rmv;
 	memcpy(&param->rmv_params, &compat_param->rmv_params, sizeof(ioc_fm_pcd_manip_rmv_params_t));
 
@@ -825,7 +968,19 @@ void compat_fm_pcd_manip_set_node(
 
 	compat_param->treat_fd_status_fields_as_errors = param->treat_fd_status_fields_as_errors;
 
-	compat_param->id = ptr_to_compat(param->id);
+    compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
     }
 #endif
 }
+
+void compat_copy_fm_pcd_manip_delete_node(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat)
+{
+    if (compat == COMPAT_US_TO_K)
+    {
+        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
+        compat_del_ptr2id(id->obj, PCD_NODE);
+    }
+}
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
index c65766a..e0a1761 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
@@ -44,6 +44,7 @@
 
 #define COMPAT_K_TO_US 0 /* copy from Kernel to User */
 #define COMPAT_US_TO_K 1 /* copy from User to Kernel */
+#define COMPAT_GENERIC 2
 
 #define COMPAT_COPY_K2US(dest, src, type)	compat_copy_##type(src, dest, 0)
 #define COMPAT_COPY_US2K(dest, src, type)	compat_copy_##type(dest, src, 1)
@@ -55,10 +56,43 @@
 #define COMPAT_PTR2ID_WATERMARK 0xface0000
 #define COMPAT_PTR2ID_WM_MASK   0xffff0000
 
-void compat_del_ptr2id(void *p);
-compat_uptr_t compat_add_ptr2id(void *p);
-compat_uptr_t compat_get_ptr2id(void *p);
-void *compat_get_id2ptr(compat_uptr_t comp);
+/* define it for debug trace */
+/*#define FM_COMPAT_DBG*/
+
+#define _fm_cpt_prk(stage, format, arg...)	\
+	printk(stage "fm_cpt (cpu:%u): " format, smp_processor_id(), ##arg)
+
+#define _fm_cpt_inf(format, arg...) _fm_cpt_prk(KERN_INFO, format, ##arg)
+#define _fm_cpt_wrn(format, arg...) _fm_cpt_prk(KERN_WARNING, format, ##arg)
+#define _fm_cpt_err(format, arg...) _fm_cpt_prk(KERN_ERR, format, ##arg)
+
+/* there are two macros for debugging: for runtime and generic.
+ * Helps when the runtime functions are not targeted for debugging,
+ * thus all the unnecessary information will be skipped.
+ */
+/* used for generic debugging */
+#if defined(FM_COMPAT_DBG)
+	#define _fm_cpt_dbg(from, format, arg...) \
+		do{ \
+			if (from == COMPAT_US_TO_K) \
+				printk("fm_cpt to KS [%s:%u](cpu:%u) - " format,	\
+					__func__, __LINE__, smp_processor_id(), ##arg); \
+			else if (from == COMPAT_K_TO_US) \
+				printk("fm_cpt to US [%s:%u](cpu:%u) - " format,	\
+					__func__, __LINE__, smp_processor_id(), ##arg); \
+            else \
+                printk("fm_cpt [%s:%u](cpu:%u) - " format,    \
+                    __func__, __LINE__, smp_processor_id(), ##arg); \
+		}while(0)
+#else
+#	define _fm_cpt_dbg(arg...)
+#endif
+
+#define ID_MAP_NAME_SIZE 16
+void compat_del_ptr2id(void *p, const unsigned char *);
+compat_uptr_t compat_add_ptr2id(void *p, const unsigned char *);
+compat_uptr_t compat_get_ptr2id(void *p, const unsigned char *);
+void *compat_get_id2ptr(compat_uptr_t comp, const unsigned char *);
 /* } maping kernel pointers w/ UserSpace id's  */
 
 /* pcd compat structures { */
@@ -142,6 +176,9 @@ typedef struct ioc_compat_fm_pcd_cc_next_kg_params_t {
     bool          override_fqid;
     uint32_t      new_fqid;
     compat_uptr_t p_direct_scheme;
+#if DPAA_VERSION >= 11
+    uint8_t       new_relative_storage_profile_id;
+#endif
 } ioc_compat_fm_pcd_cc_next_kg_params_t;
 
 typedef struct ioc_compat_fm_pcd_cc_next_cc_params_t {
@@ -156,28 +193,24 @@ typedef struct ioc_compat_fm_pcd_cc_next_engine_params_t {
             ioc_fm_pcd_cc_next_enqueue_params_t        enqueue_params; /**< same structure*/
             ioc_compat_fm_pcd_cc_next_kg_params_t      kg_params;      /**< compat structure*/
     } params;
-#if defined(FM_CAPWAP_SUPPORT) || defined(FM_IP_FRAG_N_REASSEM_SUPPORT)
-    compat_uptr_t                                      p_manip;
-#endif
+#if DPAA_VERSION >= 11
+    compat_uptr_t                                        p_frm_replic_id;
+#endif /* DPAA_VERSION >= 11 */
+    compat_uptr_t                               manip_id;
+    bool                                        statistics_en;
 } ioc_compat_fm_pcd_cc_next_engine_params_t;
 
 
 typedef struct ioc_compat_fm_pcd_cc_grp_params_t {
-    uint8_t                             num_of_distinction_units;   /**< up to 4 */
+    uint8_t                             num_of_distinction_units;
     uint8_t                             unit_ids [IOC_FM_PCD_MAX_NUM_OF_CC_UNITS];
-                                                                    /**< Indexes of the units as defined in
-                                                                         FM_PCD_SetNetEnvCharacteristics */
     ioc_compat_fm_pcd_cc_next_engine_params_t  next_engine_per_entries_in_grp[IOC_FM_PCD_MAX_NUM_OF_CC_ENTRIES_IN_GRP];
-                                                                    /**< Max size is 16 - if only one group used */
 } ioc_compat_fm_pcd_cc_grp_params_t;
 
 typedef struct ioc_compat_fm_pcd_cc_tree_params_t {
     compat_uptr_t                   net_env_id;
     uint8_t                         num_of_groups;
     ioc_compat_fm_pcd_cc_grp_params_t      fm_pcd_cc_group_params [IOC_FM_PCD_MAX_NUM_OF_CC_GROUPS];
-#ifdef FM_IP_FRAG_N_REASSEM_SUPPORT
-    compat_uptr_t                   ip_reassembly_manip;
-#endif
     compat_uptr_t                   id;
 } ioc_compat_fm_pcd_cc_tree_params_t;
 
@@ -195,6 +228,9 @@ typedef struct ioc_compat_fm_pcd_cc_key_params_t {
 } ioc_compat_fm_pcd_cc_key_params_t;
 
 typedef struct ioc_compat_keys_params_t {
+    uint16_t                                   max_num_of_keys;
+    bool                                       mask_support;
+    ioc_fm_pcd_cc_stats_mode                   statistics_mode;
     uint16_t                                   num_of_keys;
     uint8_t                                    key_size;
     ioc_compat_fm_pcd_cc_key_params_t          key_params[IOC_FM_PCD_MAX_NUM_OF_KEYS]; /**< compat structure*/
@@ -272,6 +308,7 @@ typedef struct ioc_compat_fm_port_pcd_params_t {
     compat_uptr_t                    p_cc_params;
     compat_uptr_t                    p_kg_params;
     compat_uptr_t                    p_plcr_params;
+    compat_uptr_t                    p_ip_reassembly_manip;
 } ioc_compat_fm_port_pcd_params_t;
 
 typedef struct ioc_compat_fm_pcd_kg_cc_t {
@@ -295,13 +332,17 @@ typedef struct ioc_compat_fm_pcd_kg_scheme_params_t {
         compat_uptr_t                   net_env_id;
         uint8_t                         num_of_distinction_units;
         uint8_t                         unit_ids[IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS];
-    } netEnvParams;
+    } net_env_params;
     bool                                use_hash;
     ioc_fm_pcd_kg_key_extract_and_hash_params_t key_extract_and_hash_params;
     bool                                bypass_fqid_generation;
     uint32_t                            base_fqid;
     uint8_t                             numOfUsedExtractedOrs;
     ioc_fm_pcd_kg_extracted_or_params_t extracted_ors[IOC_FM_PCD_KG_NUM_OF_GENERIC_REGS];
+#if DPAA_VERSION >= 11
+    bool                                override_storage_profile;
+    ioc_fm_pcd_kg_storage_profile       storage_profile;
+#endif /* DPAA_VERSION >= 11 */
     ioc_fm_pcd_engine                   next_engine;
     union{
         ioc_fm_pcd_done_action          done_action;
@@ -432,5 +473,40 @@ void compat_fm_pcd_manip_set_node(
         ioc_fm_pcd_manip_params_t *param,
         uint8_t compat);
 
+void compat_copy_fm_net_env_delete(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat);
+
+void compat_copy_fm_pcd_cc_delete_node(
+    ioc_compat_fm_obj_t *compat_id,
+    ioc_fm_obj_t *id,
+    uint8_t compat);
+
+void compat_copy_fm_pcd_cc_delete_tree(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat);
+
+void compat_copy_fm_port_pcd_modify_tree(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat);
+
+void compat_copy_fm_pcd_manip_delete_node(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat);
+
+void compat_copy_fm_pcd_scheme_delete(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat);
+
+void compat_copy_fm_pcd_plcr_del_profile(
+        ioc_compat_fm_obj_t *compat_id,
+        ioc_fm_obj_t *id,
+        uint8_t compat);
+
 /* } pcd compat functions */
 #endif
diff --git a/include/linux/fmd/Peripherals/fm_pcd_ioctls.h b/include/linux/fmd/Peripherals/fm_pcd_ioctls.h
index e9aa2b6..d87b543 100644
--- a/include/linux/fmd/Peripherals/fm_pcd_ioctls.h
+++ b/include/linux/fmd/Peripherals/fm_pcd_ioctls.h
@@ -1036,7 +1036,7 @@ typedef struct ioc_fm_pcd_kg_scheme_params_t {
                                                          /**< Number of netenv units listed in unit_ids array */
         uint8_t                         unit_ids[IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS];
                                                          /**< Indexes as passed to SetNetEnvCharacteristics array*/
-    } netEnvParams;
+    } net_env_params;
     bool                                use_hash;        /**< use the KG Hash functionality */
     ioc_fm_pcd_kg_key_extract_and_hash_params_t key_extract_and_hash_params;
                                                          /**< used only if useHash = TRUE */
@@ -1847,7 +1847,7 @@ typedef struct ioc_fm_pcd_frm_replic_group_params_t {
 #define FM_PCD_IOC_CC_DELETE_TREE    _IOW(FM_IOC_TYPE_BASE, FM_PCD_IOC_NUM(27), ioc_fm_obj_t)
 
 /**************************************************************************//**
- @Function      FM_PCD_IOC_CC_SET_NODE
+ @Function      FM_PCD_IOC_MATCH_TABLE_SET
 
  @Description   This routine should be called for each CC (coarse classification)
                 node. The whole CC tree should be built bottom up so that each
@@ -1862,9 +1862,9 @@ typedef struct ioc_fm_pcd_frm_replic_group_params_t {
  @Cautions      Allowed only following PCD_Init().
 *//***************************************************************************/
 #if defined(CONFIG_COMPAT)
-#define FM_PCD_IOC_CC_SET_NODE_COMPAT    _IOWR(FM_IOC_TYPE_BASE, FM_PCD_IOC_NUM(28), compat_uptr_t)
+#define FM_PCD_IOC_MATCH_TABLE_SET_COMPAT    _IOWR(FM_IOC_TYPE_BASE, FM_PCD_IOC_NUM(28), compat_uptr_t)
 #endif
-#define FM_PCD_IOC_CC_SET_NODE    _IOWR(FM_IOC_TYPE_BASE, FM_PCD_IOC_NUM(28), void *) /* workaround ...*/
+#define FM_PCD_IOC_MATCH_TABLE_SET    _IOWR(FM_IOC_TYPE_BASE, FM_PCD_IOC_NUM(28), void *) /* workaround ...*/
 
 /**************************************************************************//**
  @Function      FM_PCD_CcDeleteNode
-- 
1.7.9.7

