From 3528f71c3e73bb4a63a315b166357ec6ef5a87ad Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Wed, 18 Jul 2012 17:42:34 +0300
Subject: [PATCH 039/162] dpaa_eth: Add GRO support

Add GRO support to both the SG and non-SG variants of the driver, saving
some CPU load on the receiving cores.
The sending cores may also benefit from this, if the peer machine
coalesces packets and sends back fewer ACKs.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c    |   39 ++++++++++++++++------
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c |   18 +++++++---
 2 files changed, 43 insertions(+), 14 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index c78a8ca..f78610f 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -1125,13 +1125,23 @@ void __hot _dpa_rx(struct net_device *net_dev,
 
 	skb_len = skb->len;
 
-	if (unlikely(netif_receive_skb(skb) == NET_RX_DROP))
+	if (likely(net_dev->features & NETIF_F_GRO)) {
+		gro_result_t gro_result;
+
+		gro_result = napi_gro_receive(&percpu_priv->napi, skb);
+		if (unlikely(gro_result == GRO_DROP)) {
+			percpu_priv->stats.rx_dropped++;
+			goto packet_dropped;
+		}
+	} else if (unlikely(netif_receive_skb(skb) == NET_RX_DROP)) {
 		percpu_priv->stats.rx_dropped++;
-	else {
-		percpu_priv->stats.rx_packets++;
-		percpu_priv->stats.rx_bytes += skb_len;
+		goto packet_dropped;
 	}
 
+	percpu_priv->stats.rx_packets++;
+	percpu_priv->stats.rx_bytes += skb_len;
+
+packet_dropped:
 skb_stolen:
 	net_dev->last_rx = jiffies;
 
@@ -3213,18 +3223,27 @@ static int dpa_netdev_init(struct device_node *dpa_node,
 		mac_addr = priv->mac_dev->addr;
 		net_dev->features |= (NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM);
 		net_dev->vlan_features |= (NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM);
-#ifdef CONFIG_DPAA_ETH_SG_SUPPORT
+
 		/*
 		 * Advertise S/G and HIGHDMA support for MAC-ful,
 		 * private interfaces
 		 */
 		if (!priv->shared) {
-			net_dev->features |= NETIF_F_SG | NETIF_F_HIGHDMA |
-				NETIF_F_GSO;
-			net_dev->vlan_features |= NETIF_F_SG | NETIF_F_HIGHDMA |
-				NETIF_F_GSO;
-		}
+#ifdef CONFIG_DPAA_ETH_SG_SUPPORT
+			net_dev->features |= NETIF_F_SG | NETIF_F_HIGHDMA
+				/*
+				 * Recent kernels enable GSO automatically, if
+				 * we declare NETIF_F_SG. For conformity, we'll
+				 * still declare GSO explicitly.
+				 */
+				| NETIF_F_GSO;
+			net_dev->vlan_features |= NETIF_F_SG | NETIF_F_HIGHDMA
+				| NETIF_F_GSO;
 #endif
+			/* Advertise GRO support */
+			net_dev->features |= NETIF_F_GRO;
+			net_dev->vlan_features |= NETIF_F_GRO;
+		}
 	}
 
 	memcpy(net_dev->perm_addr, mac_addr, net_dev->addr_len);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index 7db537c..60b9db3 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -478,13 +478,23 @@ void __hot _dpa_rx(struct net_device *net_dev,
 
 	skb_len = skb->len;
 
-	if (unlikely(netif_receive_skb(skb) == NET_RX_DROP))
+	if (likely(net_dev->features & NETIF_F_GRO)) {
+		gro_result_t gro_result;
+
+		gro_result = napi_gro_receive(&percpu_priv->napi, skb);
+		if (unlikely(gro_result == GRO_DROP)) {
+			percpu_priv->stats.rx_dropped++;
+			goto packet_dropped;
+		}
+	} else if (unlikely(netif_receive_skb(skb) == NET_RX_DROP)) {
 		percpu_priv->stats.rx_dropped++;
-	else {
-		percpu_priv->stats.rx_packets++;
-		percpu_priv->stats.rx_bytes += skb_len;
+		goto packet_dropped;
 	}
 
+	percpu_priv->stats.rx_packets++;
+	percpu_priv->stats.rx_bytes += skb_len;
+
+packet_dropped:
 	net_dev->last_rx = jiffies;
 
 	return;
-- 
1.7.9.7

