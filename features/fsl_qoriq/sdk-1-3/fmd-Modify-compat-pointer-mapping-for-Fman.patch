From c664a69d7317c2bbdc3b12b9cbf8b579c9daf881 Mon Sep 17 00:00:00 2001
From: Sorin Andrei Pistirica <sorin.pistirica@freescale.com>
Date: Wed, 27 Jun 2012 13:50:30 +0000
Subject: [PATCH 075/162] fmd: Modify compat pointer mapping for Fman.

This change affects how the FMD maintains its internal mapping of
64-bit kernel space pointers to the 32-bit so-called "handles"
that are being returned to user space on behalf of those pointers,
in the 64-bit kernel space, 32-bit user space scenario. It does not
apply to 32bit/32bit and 64bit/64bit kernel space/user space scenarios.

The mappings are intended to be stored in pools, one pool per relevant
FMD resource, e.g.: PCD, policer, keygen, etc.; such a userspace handle
is thus irrelevant all by itself, outside of the context of the FMan
resource it pertains to. The context is inferred from the API that the
handle is used within, and userspace needs not be concerned with it.

Although currently only one such pool is implemented, the existing
code employed a char* to identify such mapping pools. That char*
argument to the compat_*_ptr2id() and compat_*_id2ptr() functions
was not interpreted as a string, but rather it was being compared
by value with existing mappings. That not only was misleading, but
was also causing visibility issues for other kernel-space entities
that required access to this API.

This patch fixes the issues created by the use of the char* argument
by replacing it with an enum.

Signed-off-by: Andrei Pistirica <sorin.pistirica@freescale.com>
Signed-off-by: Stefan Szabo <szbs001@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../src/wrapper/lnxwrp_ioctls_fm_compat.c          |  139 +++++++++-----------
 .../src/wrapper/lnxwrp_ioctls_fm_compat.h          |   26 +++-
 2 files changed, 83 insertions(+), 82 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
index 227ea37..0b3b2dc 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
@@ -79,31 +79,14 @@ static void hex_dump(void * p_addr, unsigned int size)
 #endif
 
 /* maping kernel pointers w/ UserSpace id's { */
-/*TODO: per FMan module:
- *
- *      Parser: FM_PARSER_NODE,
- *      Kg: FM_KG_NODE,
- *      Policer: FM_POLICER_NODE
- *      Manip: FM_MANIP_NODE
- **/
-const unsigned char map_node_name[][ID_MAP_NAME_SIZE] = {
-    "FM_NODE", /* 0 */
-    "FM_PORT_NODE", /* 1 */
-    "FM_PCD_NODE" /* 2 */
-};
-
-#define FM_NODE map_node_name[0]
-#define PORT_NODE map_node_name[1]
-#define PCD_NODE map_node_name[2]
-
 struct map_node {
-	void *ptr;
-	const unsigned char *name;
+    void *ptr;
+    u8 node_type;
 };
 
-static struct map_node compat_ptr2id_array[COMPAT_PTR2ID_ARRAY_MAX] = {{0},{0}};
+static struct map_node compat_ptr2id_array[COMPAT_PTR2ID_ARRAY_MAX] = {{NULL},{FM_MAP_TYPE_UNSPEC}};
 
-void compat_del_ptr2id(void *p, const unsigned char *name)
+void compat_del_ptr2id(void *p, enum fm_map_node_type node_type)
 {
     compat_uptr_t k;
 
@@ -112,12 +95,12 @@ void compat_del_ptr2id(void *p, const unsigned char *name)
     for(k=1; k < COMPAT_PTR2ID_ARRAY_MAX; k++)
         if(compat_ptr2id_array[k].ptr == p){
             compat_ptr2id_array[k].ptr = NULL;
-			compat_ptr2id_array[k].name = NULL;
-		}
+            compat_ptr2id_array[k].node_type = FM_MAP_TYPE_UNSPEC;
+        }
 }
 EXPORT_SYMBOL(compat_del_ptr2id);
 
-compat_uptr_t compat_add_ptr2id(void *p, const unsigned char *name)
+compat_uptr_t compat_add_ptr2id(void *p, enum fm_map_node_type node_type)
 {
     compat_uptr_t k;
 
@@ -130,24 +113,26 @@ compat_uptr_t compat_add_ptr2id(void *p, const unsigned char *name)
         if(compat_ptr2id_array[k].ptr == NULL)
         {
             compat_ptr2id_array[k].ptr = p;
-			compat_ptr2id_array[k].name = name;
+            compat_ptr2id_array[k].node_type = node_type;
             _fm_cpt_dbg(COMPAT_GENERIC, "0x%08x \n", k | COMPAT_PTR2ID_WATERMARK);
             return k | COMPAT_PTR2ID_WATERMARK;
         }
 
-	printk(KERN_WARNING "FMan map list full! No more PCD space on kernel!\n");
+    printk(KERN_WARNING "FMan map list full! No more PCD space on kernel!\n");
     return 0;
 }
 EXPORT_SYMBOL(compat_add_ptr2id);
 
-compat_uptr_t compat_get_ptr2id(void *p, const unsigned char *name)
+compat_uptr_t compat_get_ptr2id(void *p, enum fm_map_node_type node_type)
 {
     compat_uptr_t k;
 
     _fm_cpt_dbg(COMPAT_GENERIC, " (%p) get -> \n", p);
 
     for(k=1; k < COMPAT_PTR2ID_ARRAY_MAX; k++)
-        if(compat_ptr2id_array[k].ptr == p && compat_ptr2id_array[k].name == name) {
+        if(compat_ptr2id_array[k].ptr == p &&
+           compat_ptr2id_array[k].node_type == node_type) {
+
             _fm_cpt_dbg(COMPAT_GENERIC, "0x%08x\n", k | COMPAT_PTR2ID_WATERMARK);
             return k | COMPAT_PTR2ID_WATERMARK;
         }
@@ -156,7 +141,7 @@ compat_uptr_t compat_get_ptr2id(void *p, const unsigned char *name)
 }
 EXPORT_SYMBOL(compat_get_ptr2id);
 
-void *compat_get_id2ptr(compat_uptr_t comp, const unsigned char *name)
+void *compat_get_id2ptr(compat_uptr_t comp, enum fm_map_node_type node_type)
 {
 
     _fm_cpt_dbg(COMPAT_GENERIC, " (0x%08x) get -> \n", comp);
@@ -170,7 +155,7 @@ void *compat_get_id2ptr(compat_uptr_t comp, const unsigned char *name)
     comp &= ~COMPAT_PTR2ID_WM_MASK;
 
     if(((0 < comp) && (comp < COMPAT_PTR2ID_ARRAY_MAX) && (compat_ptr2id_array[comp].ptr != NULL)
-		&& compat_ptr2id_array[comp].name == name)) {
+                && compat_ptr2id_array[comp].node_type == node_type)) {
         _fm_cpt_dbg(COMPAT_GENERIC, "%p\n", compat_ptr2id_array[comp].ptr);
         return compat_ptr2id_array[comp].ptr;
     }
@@ -191,15 +176,15 @@ static inline void compat_copy_fm_pcd_plcr_next_engine(
     {
         case e_IOC_FM_PCD_PLCR:
             if (compat == COMPAT_US_TO_K)
-                param->p_profile = compat_get_id2ptr(compat_param->p_profile, PCD_NODE);
+                param->p_profile = compat_get_id2ptr(compat_param->p_profile, FM_MAP_TYPE_PCD_NODE);
             else
-                compat_param->p_profile = compat_get_ptr2id(param->p_profile, PCD_NODE);
+                compat_param->p_profile = compat_get_ptr2id(param->p_profile, FM_MAP_TYPE_PCD_NODE);
         break;
         case e_IOC_FM_PCD_KG:
             if (compat == COMPAT_US_TO_K)
-                param->p_direct_scheme = compat_get_id2ptr(compat_param->p_direct_scheme, PCD_NODE);
+                param->p_direct_scheme = compat_get_id2ptr(compat_param->p_direct_scheme, FM_MAP_TYPE_PCD_NODE);
             else
-                compat_param->p_direct_scheme = compat_get_ptr2id(param->p_direct_scheme, PCD_NODE);
+                compat_param->p_direct_scheme = compat_get_ptr2id(param->p_direct_scheme, FM_MAP_TYPE_PCD_NODE);
         break;
         default:
             if (compat == COMPAT_US_TO_K)
@@ -290,7 +275,7 @@ void compat_copy_fm_pcd_plcr_profile(
         compat_param->trap_profile_on_flow_B = param->trap_profile_on_flow_B;
         compat_param->trap_profile_on_flow_C = param->trap_profile_on_flow_C;
 
-        compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
+        compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 
     compat_copy_fm_pcd_plcr_next_engine(&compat_param->params_on_green,
@@ -312,8 +297,8 @@ void compat_copy_fm_pcd_plcr_del_profile(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
-        compat_del_ptr2id(id->obj, PCD_NODE);
+        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -328,13 +313,13 @@ static inline void compat_copy_fm_pcd_cc_next_kg(
     {
         param->new_fqid         = compat_param->new_fqid;
         param->override_fqid    = compat_param->override_fqid;
-        param->p_direct_scheme  = compat_get_id2ptr(compat_param->p_direct_scheme, PCD_NODE);
+        param->p_direct_scheme  = compat_get_id2ptr(compat_param->p_direct_scheme, FM_MAP_TYPE_PCD_NODE);
     }
     else
     {
         compat_param->new_fqid          = param->new_fqid;
         compat_param->override_fqid     = param->override_fqid;
-        compat_param->p_direct_scheme   = compat_get_ptr2id(param->p_direct_scheme, PCD_NODE);
+        compat_param->p_direct_scheme   = compat_get_ptr2id(param->p_direct_scheme, FM_MAP_TYPE_PCD_NODE);
     }
 
     _fm_cpt_dbg (compat, " Called.\n");
@@ -348,9 +333,9 @@ static inline void compat_copy_fm_pcd_cc_next_cc(
     _fm_cpt_dbg (compat, " Calling...\n");
 
     if (compat == COMPAT_US_TO_K)
-        param->cc_node_id = compat_get_id2ptr(compat_param->cc_node_id, PCD_NODE);
+        param->cc_node_id = compat_get_id2ptr(compat_param->cc_node_id, FM_MAP_TYPE_PCD_NODE);
     else
-        compat_param->cc_node_id = compat_get_ptr2id(param->cc_node_id, PCD_NODE);
+        compat_param->cc_node_id = compat_get_ptr2id(param->cc_node_id, FM_MAP_TYPE_PCD_NODE);
 
     _fm_cpt_dbg (compat, " Called.\n");
 }
@@ -378,7 +363,7 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
             break;
         }
         if (compat_param->manip_id)
-            param->manip_id = compat_get_id2ptr(compat_param->manip_id, PCD_NODE);
+            param->manip_id = compat_get_id2ptr(compat_param->manip_id, FM_MAP_TYPE_PCD_NODE);
         param->statistics_en = compat_param->statistics_en;
     }
     else
@@ -395,7 +380,7 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
             break;
         }
         if (param->manip_id)
-            compat_param->manip_id = compat_get_ptr2id(param->manip_id, PCD_NODE);
+            compat_param->manip_id = compat_get_ptr2id(param->manip_id, FM_MAP_TYPE_PCD_NODE);
         compat_param->statistics_en = param->statistics_en;
     }
 
@@ -550,15 +535,15 @@ void compat_copy_fm_pcd_cc_tree(
 
     if (compat == COMPAT_US_TO_K)
     {
-        param->net_env_id = compat_get_id2ptr(compat_param->net_env_id, PCD_NODE);
+        param->net_env_id = compat_get_id2ptr(compat_param->net_env_id, FM_MAP_TYPE_PCD_NODE);
         param->num_of_groups = compat_param->num_of_groups;
     }
     else
     {
-        compat_param->net_env_id = compat_get_ptr2id(param->net_env_id, PCD_NODE);
+        compat_param->net_env_id = compat_get_ptr2id(param->net_env_id, FM_MAP_TYPE_PCD_NODE);
         compat_param->num_of_groups = param->num_of_groups;
 
-        compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
+        compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 
     for (k=0; k < IOC_FM_PCD_MAX_NUM_OF_CC_GROUPS; k++)
@@ -577,8 +562,8 @@ void compat_copy_fm_pcd_cc_delete_tree(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
-        compat_del_ptr2id(id->obj, PCD_NODE);
+        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -620,7 +605,7 @@ void compat_copy_fm_pcd_kg_scheme(
 
         param->always_direct = compat_param->always_direct;
         /* net_env_params */
-        param->net_env_params.net_env_id = compat_get_id2ptr(compat_param->net_env_params.net_env_id, PCD_NODE);
+        param->net_env_params.net_env_id = compat_get_id2ptr(compat_param->net_env_params.net_env_id, FM_MAP_TYPE_PCD_NODE);
         param->net_env_params.num_of_distinction_units = compat_param->net_env_params.num_of_distinction_units;
         memcpy(param->net_env_params.unit_ids,
                compat_param->net_env_params.unit_ids,
@@ -633,14 +618,14 @@ void compat_copy_fm_pcd_kg_scheme(
         param->bypass_fqid_generation = compat_param->bypass_fqid_generation;
         param->base_fqid = compat_param->base_fqid;
         param->num_of_used_extracted_ors = compat_param->num_of_used_extracted_ors;
-		memcpy(param->extracted_ors,
+        memcpy(param->extracted_ors,
                compat_param->extracted_ors,
                IOC_FM_PCD_KG_NUM_OF_GENERIC_REGS * sizeof(ioc_fm_pcd_kg_extracted_or_params_t));
         param->next_engine = compat_param->next_engine;
 
-    	/* kg_next_engine_params */
+        /* kg_next_engine_params */
         if(param->next_engine == e_IOC_FM_PCD_CC){
-            param->kg_next_engine_params.cc.tree_id = compat_get_id2ptr(compat_param->kg_next_engine_params.cc.tree_id, PCD_NODE);
+            param->kg_next_engine_params.cc.tree_id = compat_get_id2ptr(compat_param->kg_next_engine_params.cc.tree_id, FM_MAP_TYPE_PCD_NODE);
 
             param->kg_next_engine_params.cc.grp_id = compat_param->kg_next_engine_params.cc.grp_id;
             param->kg_next_engine_params.cc.plcr_next = compat_param->kg_next_engine_params.cc.plcr_next;
@@ -650,7 +635,7 @@ void compat_copy_fm_pcd_kg_scheme(
                    sizeof(ioc_fm_pcd_kg_plcr_profile_t));
         }
         else
-			memcpy(&param->kg_next_engine_params,
+            memcpy(&param->kg_next_engine_params,
                    &compat_param->kg_next_engine_params,
                    sizeof(param->kg_next_engine_params));
 
@@ -680,12 +665,12 @@ void compat_copy_fm_pcd_kg_scheme(
         compat_param->bypass_fqid_generation = param->bypass_fqid_generation;
         compat_param->base_fqid = param->base_fqid;
         compat_param->num_of_used_extracted_ors = param->num_of_used_extracted_ors;
-		memcpy(compat_param->extracted_ors, param->extracted_ors, IOC_FM_PCD_KG_NUM_OF_GENERIC_REGS * sizeof(ioc_fm_pcd_kg_extracted_or_params_t));
+        memcpy(compat_param->extracted_ors, param->extracted_ors, IOC_FM_PCD_KG_NUM_OF_GENERIC_REGS * sizeof(ioc_fm_pcd_kg_extracted_or_params_t));
         compat_param->next_engine = param->next_engine;
 
         /* kg_next_engine_params */
         if(compat_param->next_engine == e_IOC_FM_PCD_CC){
-            compat_param->kg_next_engine_params.cc.tree_id = compat_get_ptr2id(param->kg_next_engine_params.cc.tree_id, PCD_NODE);
+            compat_param->kg_next_engine_params.cc.tree_id = compat_get_ptr2id(param->kg_next_engine_params.cc.tree_id, FM_MAP_TYPE_PCD_NODE);
 
             compat_param->kg_next_engine_params.cc.grp_id = param->kg_next_engine_params.cc.grp_id;
             compat_param->kg_next_engine_params.cc.plcr_next = param->kg_next_engine_params.cc.plcr_next;
@@ -699,7 +684,7 @@ void compat_copy_fm_pcd_kg_scheme(
 
         memcpy(&compat_param->scheme_counter, &param->scheme_counter, sizeof(ioc_fm_pcd_kg_scheme_counter_t));
 
-        compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
+        compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 
     _fm_cpt_dbg(compat," Called.\n");
@@ -712,8 +697,8 @@ void compat_copy_fm_pcd_scheme_delete(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
-        compat_del_ptr2id(id->obj, PCD_NODE);
+        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -738,7 +723,7 @@ void compat_copy_fm_pcd_kg_schemes_params(
     if (compat == COMPAT_US_TO_K) {
         param->num_of_schemes = compat_param->num_of_schemes;
         for(k=0; k < compat_param->num_of_schemes; k++)
-            param->scheme_ids[k] = compat_get_id2ptr(compat_param->scheme_ids[k], PCD_NODE);
+            param->scheme_ids[k] = compat_get_id2ptr(compat_param->scheme_ids[k], FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -748,7 +733,7 @@ void compat_copy_fm_port_pcd_cc(
     uint8_t compat)
 {
     if (compat == COMPAT_US_TO_K){
-        p_cc_params->cc_tree_id = compat_get_id2ptr(compat_cc_params->cc_tree_id, PCD_NODE);
+        p_cc_params->cc_tree_id = compat_get_id2ptr(compat_cc_params->cc_tree_id, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -763,11 +748,11 @@ void compat_copy_fm_port_pcd_kg(
         param->num_of_schemes = compat_param->num_of_schemes;
         for(k=0; k<compat_param->num_of_schemes; k++)
             if (compat_param->scheme_ids[k])
-                param->scheme_ids[k] = compat_get_id2ptr(compat_param->scheme_ids[k], PCD_NODE);
+                param->scheme_ids[k] = compat_get_id2ptr(compat_param->scheme_ids[k], FM_MAP_TYPE_PCD_NODE);
 
         param->direct_scheme = compat_param->direct_scheme;
         if (param->direct_scheme)
-            param->direct_scheme_id = compat_get_id2ptr(compat_param->direct_scheme_id, PCD_NODE);
+            param->direct_scheme_id = compat_get_id2ptr(compat_param->direct_scheme_id, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -794,7 +779,7 @@ void compat_copy_fm_port_pcd(
         _fm_cpt_dbg(compat," param->p_ip_reassembly_manip=%p  \n", param->p_ip_reassembly_manip);
 
         param->pcd_support = compat_param->pcd_support;
-        param->net_env_id = compat_get_id2ptr(compat_param->net_env_id, PCD_NODE);
+        param->net_env_id = compat_get_id2ptr(compat_param->net_env_id, FM_MAP_TYPE_PCD_NODE);
 
         if (param->p_cc_params)
             compat_copy_fm_port_pcd_cc(compat_port_pcd_cc_params, param->p_cc_params, COMPAT_US_TO_K);
@@ -803,7 +788,7 @@ void compat_copy_fm_port_pcd(
         if (param->p_plcr_params)
             param->p_plcr_params->plcr_profile_id = compat_ptr(compat_port_pcd_plcr_params->plcr_profile_id);
         if (param->p_ip_reassembly_manip)
-            param->p_ip_reassembly_manip = compat_get_id2ptr(compat_param->p_ip_reassembly_manip, PCD_NODE);
+            param->p_ip_reassembly_manip = compat_get_id2ptr(compat_param->p_ip_reassembly_manip, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -813,7 +798,7 @@ void compat_copy_fm_port_pcd_modify_tree(
         uint8_t compat)
 {
     if (compat == COMPAT_US_TO_K)
-        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
+        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
 }
 
 void compat_copy_fm_pcd_net_env(
@@ -831,7 +816,7 @@ void compat_copy_fm_pcd_net_env(
     {
         compat_param->num_of_distinction_units = param->num_of_distinction_units;
         memcpy(compat_param->units, param->units, sizeof(ioc_fm_pcd_distinction_unit_t)*IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
-		compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
+        compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -842,8 +827,8 @@ void compat_copy_fm_net_env_delete(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
-        compat_del_ptr2id(id->obj, PCD_NODE);
+        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -869,7 +854,7 @@ void compat_copy_fm_pcd_cc_node_modify_key(
         compat_param->key_size  = param->key_size;
         compat_param->p_key     = ptr_to_compat((void *)param->p_key);
         compat_param->p_mask    = ptr_to_compat((void *)param->p_mask);
-        compat_param->id        = compat_add_ptr2id(param->id, PCD_NODE);
+        compat_param->id        = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -926,7 +911,7 @@ void compat_copy_fm_pcd_cc_node(
     {
         compat_copy_keys(&compat_param->keys_params, &param->keys_params, compat);
 
-        compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
+        compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
         _fm_cpt_dbg(compat," param->id = %p \n", param->id);
     }
 
@@ -942,8 +927,8 @@ void compat_copy_fm_pcd_cc_delete_node(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
-        compat_del_ptr2id(id->obj, PCD_NODE);
+        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -989,7 +974,7 @@ void compat_fm_pcd_manip_set_node(
         }
 
         if (compat_param->p_next_manip)
-            param->p_next_manip = compat_get_id2ptr(compat_param->id, PCD_NODE);
+            param->p_next_manip = compat_get_id2ptr(compat_param->id, FM_MAP_TYPE_PCD_NODE);
     }
     else {
         compat_param->type = param->type;
@@ -1002,9 +987,9 @@ void compat_fm_pcd_manip_set_node(
                     ptr_to_compat(param->u.hdr.insrt_params.u.generic.p_data);
 
         if (param->p_next_manip)
-            compat_param->p_next_manip = compat_get_ptr2id(param->id, PCD_NODE);
+            compat_param->p_next_manip = compat_get_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
 
-        compat_param->id = compat_add_ptr2id(param->id, PCD_NODE);
+        compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -1015,7 +1000,7 @@ void compat_copy_fm_pcd_manip_delete_node(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, PCD_NODE);
-        compat_del_ptr2id(id->obj, PCD_NODE);
+        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
index 08656dc..486fdcc 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
@@ -84,11 +84,27 @@
 #	define _fm_cpt_dbg(arg...)
 #endif
 
-#define ID_MAP_NAME_SIZE 16
-void compat_del_ptr2id(void *p, const unsigned char *);
-compat_uptr_t compat_add_ptr2id(void *p, const unsigned char *);
-compat_uptr_t compat_get_ptr2id(void *p, const unsigned char *);
-void *compat_get_id2ptr(compat_uptr_t comp, const unsigned char *);
+/*TODO: per FMan module:
+ *
+ *      Parser:  FM_MAP_TYPE_PARSER_NODE,
+ *      Kg:      FM_MAP_TYPE_KG_NODE,
+ *      Policer: FM_MAP_TYPE_POLICER_NODE
+ *      Manip:   FM_MAP_TYPE_MANIP_NODE
+ **/
+enum fm_map_node_type {
+    FM_MAP_TYPE_UNSPEC = 0,
+    FM_MAP_TYPE_PCD_NODE,
+
+    /* add types here, update the policy */
+
+    __FM_MAP_TYPE_AFTER_LAST,
+    FM_MAP_TYPE_MAX = __FM_MAP_TYPE_AFTER_LAST - 1
+};
+
+void compat_del_ptr2id(void *p, enum fm_map_node_type);
+compat_uptr_t compat_add_ptr2id(void *p, enum fm_map_node_type);
+compat_uptr_t compat_get_ptr2id(void *p, enum fm_map_node_type);
+void *compat_get_id2ptr(compat_uptr_t comp, enum fm_map_node_type);
 /* } maping kernel pointers w/ UserSpace id's  */
 
 /* pcd compat structures { */
-- 
1.7.9.7

