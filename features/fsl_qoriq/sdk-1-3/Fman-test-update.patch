From a9e94659f2ddb72cf3699cd93eed653454d45893 Mon Sep 17 00:00:00 2001
From: Andrei Pistirica <sorin.pistirica@freescale.com>
Date: Thu, 17 May 2012 15:19:04 +0300
Subject: [PATCH 030/162] Fman test update.

Added runtime suport for comapat/non-compat tests.

Signed-off-by: Andrei Pistirica <sorin.pistirica@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../dpa/NetCommSw/src/wrapper/fman_test.c          |  139 +++++++++++---------
 1 file changed, 78 insertions(+), 61 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/fman_test.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/fman_test.c
index 9628eab..08dda01 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/fman_test.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/fman_test.c
@@ -67,12 +67,6 @@
 
 #define FMT_FRM_WATERMARK   0xdeadbeefdeadbeeaLL
 
-#ifdef CONFIG_COMPAT
-/* Define this for KS64b - US32b */
-#define FMAN_TEST_CONFIG_COMPAT
-#warning Please make sure you have the right value for FMAN_TEST_CONFIG_COMPAT
-#endif
-
 struct fmt_frame_s {
 	ioc_fmt_buff_desc_t	buff;
 	struct list_head	list;
@@ -96,6 +90,7 @@ struct fmt_port_s {
 	uint8_t             id;
 	ioc_fmt_port_type   port_type;
 	ioc_diag_mode       diag;
+	bool		    compat_test_type;
 
 	/* fm ports */
 	/* ! for oh ports p_tx_fm_port_dev == p_rx_fm_port_dev &&
@@ -1224,6 +1219,12 @@ static int fmt_ioctls(unsigned int minor,
 		return -ENODEV;
 	}
 
+	/* set test type properly */
+	if (compat)
+		fmt_port->compat_test_type = true;
+	else
+		fmt_port->compat_test_type = false;
+
 	switch (cmd) {
 	case FMT_PORT_IOC_INIT:
 	{
@@ -1233,7 +1234,7 @@ static int fmt_ioctls(unsigned int minor,
 			_fmt_wrn("port is already initialized.\n");
 			return -EFAULT;
 		}
-#if defined(FMAN_TEST_CONFIG_COMPAT)
+#if defined(CONFIG_COMPAT)
 		if (compat) {
 			if (copy_from_user(&param,
 				(ioc_fmt_port_param_t  *)compat_ptr(arg),
@@ -1275,7 +1276,7 @@ static int fmt_ioctls(unsigned int minor,
 	return 0;
 }
 
-#ifdef FMAN_TEST_CONFIG_COMPAT
+#ifdef CONFIG_COMPAT
 static long fmt_compat_ioctl(
 		struct file *file,
 		unsigned int cmd,
@@ -1307,7 +1308,7 @@ static long fmt_ioctl(
 	return res;
 }
 
-#ifdef FMAN_TEST_CONFIG_COMPAT
+#ifdef CONFIG_COMPAT
 void copy_compat_test_frame_buffer(
 		ioc_fmt_buff_desc_t *buff,
 		ioc_fmt_compat_buff_desc_t *compat_buff)
@@ -1350,11 +1351,16 @@ ssize_t fmt_read(
 
 	_fmt_dbgr("calling...\n");
 
-#ifdef FMAN_TEST_CONFIG_COMPAT
-	cnt = sizeof(ioc_fmt_compat_buff_desc_t);
-#else
-	cnt = sizeof(ioc_fmt_buff_desc_t);
+#ifdef CONFIG_COMPAT
+	if (fmt_port->compat_test_type){
+		cnt = sizeof(ioc_fmt_compat_buff_desc_t);
+	}
+	else
 #endif
+	{
+		cnt = sizeof(ioc_fmt_buff_desc_t);
+	}
+
 	if (size < cnt) {
 		_fmt_err("illegal buffer-size!\n");
 		cnt = 0;
@@ -1362,49 +1368,57 @@ ssize_t fmt_read(
 	}
 
         /* Copy structure */
-#ifdef FMAN_TEST_CONFIG_COMPAT
-	{
-		ioc_fmt_compat_buff_desc_t compat_buff;
-		copy_compat_test_frame_buffer(&p_fmt_frame->buff, &compat_buff);
+#ifdef CONFIG_COMPAT
+	if (fmt_port->compat_test_type) {
+		{
+			ioc_fmt_compat_buff_desc_t compat_buff;
+			copy_compat_test_frame_buffer(&p_fmt_frame->buff,
+								&compat_buff);
 
-		if (copy_to_user(buf, &compat_buff, cnt)) {
+			if (copy_to_user(buf, &compat_buff, cnt)) {
+				_fmt_err("copy_to_user failed!\n");
+				goto _fmt_read_return;
+			}
+		}
+
+		((ioc_fmt_compat_buff_desc_t  *)buf)->p_data =
+			ptr_to_compat(buf+sizeof(ioc_fmt_compat_buff_desc_t));
+		cnt += MIN(p_fmt_frame->buff.size, size-cnt);
+	} else
+#endif
+	{
+		if (copy_to_user(buf, &p_fmt_frame->buff, cnt)) {
 			_fmt_err("copy_to_user failed!\n");
 			goto _fmt_read_return;
 		}
-	}
 
-	((ioc_fmt_compat_buff_desc_t  *)buf)->p_data =
-			ptr_to_compat(buf+sizeof(ioc_fmt_compat_buff_desc_t));
-	cnt += MIN(p_fmt_frame->buff.size, size-cnt);
-#else
-	if (copy_to_user(buf, &p_fmt_frame->buff, cnt)) {
-		_fmt_err("copy_to_user failed!\n");
-		goto _fmt_read_return;
+		((ioc_fmt_buff_desc_t  *)buf)->p_data =
+				buf + sizeof(ioc_fmt_buff_desc_t);
+		cnt += MIN(p_fmt_frame->buff.size, size-cnt);
 	}
 
-	((ioc_fmt_buff_desc_t  *)buf)->p_data = buf+sizeof(ioc_fmt_buff_desc_t);
-	cnt += MIN(p_fmt_frame->buff.size, size-cnt);
-#endif
-
 	if (size < cnt) {
 		_fmt_err("illegal buffer-size!\n");
 		goto _fmt_read_return;
 	}
 
 	/* copy frame */
-#ifdef FMAN_TEST_CONFIG_COMPAT
-	if (copy_to_user(buf+sizeof(ioc_fmt_compat_buff_desc_t),
+#ifdef CONFIG_COMPAT
+	if (fmt_port->compat_test_type) {
+		if (copy_to_user(buf+sizeof(ioc_fmt_compat_buff_desc_t),
 					p_fmt_frame->buff.p_data, cnt)) {
-		_fmt_err("copy_to_user failed!\n");
-		goto _fmt_read_return;
-	}
-#else
-	if (copy_to_user(buf+sizeof(ioc_fmt_buff_desc_t),
+			_fmt_err("copy_to_user failed!\n");
+			goto _fmt_read_return;
+		}
+	} else
+#endif
+	{
+		if (copy_to_user(buf+sizeof(ioc_fmt_buff_desc_t),
 					p_fmt_frame->buff.p_data, cnt)) {
-		_fmt_err("copy_to_user failed!\n");
-		goto _fmt_read_return;
+			_fmt_err("copy_to_user failed!\n");
+			goto _fmt_read_return;
+		}
 	}
-#endif
 
 _fmt_read_return:
 	kfree(p_fmt_frame->buff.p_data);
@@ -1422,7 +1436,7 @@ ssize_t fmt_write(
 {
 	struct fmt_port_s *fmt_port = NULL;
 	ioc_fmt_buff_desc_t buff_desc;
-#ifdef FMAN_TEST_CONFIG_COMPAT
+#ifdef CONFIG_COMPAT
 	ioc_fmt_compat_buff_desc_t buff_desc_compat;
 #endif
 	uint8_t *p_data = NULL;
@@ -1439,29 +1453,32 @@ ssize_t fmt_write(
 	}
 
     /* If Compat (32B UserSpace - 64B KernelSpace)  */
-#ifdef FMAN_TEST_CONFIG_COMPAT
-	if (copy_from_user(&buff_desc_compat, buf,
-				sizeof(ioc_fmt_compat_buff_desc_t)))
-		return -EFAULT;
+#ifdef CONFIG_COMPAT
+	if (fmt_port->compat_test_type){
+		if (copy_from_user(&buff_desc_compat, buf,
+					sizeof(ioc_fmt_compat_buff_desc_t)))
+			return -EFAULT;
 
-	buff_desc.qid = buff_desc_compat.qid;
-	buff_desc.p_data = compat_ptr(buff_desc_compat.p_data);
-	buff_desc.size = buff_desc_compat.size;
-	buff_desc.status = buff_desc_compat.status;
+		buff_desc.qid = buff_desc_compat.qid;
+		buff_desc.p_data = compat_ptr(buff_desc_compat.p_data);
+		buff_desc.size = buff_desc_compat.size;
+		buff_desc.status = buff_desc_compat.status;
 
-	buff_desc.buff_context.p_user_priv =
+		buff_desc.buff_context.p_user_priv =
 			compat_ptr(buff_desc_compat.buff_context.p_user_priv);
-	memcpy(buff_desc.buff_context.fm_prs_res,
-			buff_desc_compat.buff_context.fm_prs_res,
-			FM_PRS_MAX * sizeof(uint8_t));
-	memcpy(buff_desc.buff_context.fm_time_stamp,
-			buff_desc_compat.buff_context.fm_time_stamp,
-			FM_TIME_STAMP_MAX * sizeof(uint8_t));
-#else
-	if (copy_from_user(&buff_desc, (ioc_fmt_buff_desc_t  *)buf,
-						sizeof(ioc_fmt_buff_desc_t)))
-		return -EFAULT;
+		memcpy(buff_desc.buff_context.fm_prs_res,
+				buff_desc_compat.buff_context.fm_prs_res,
+				FM_PRS_MAX * sizeof(uint8_t));
+		memcpy(buff_desc.buff_context.fm_time_stamp,
+				buff_desc_compat.buff_context.fm_time_stamp,
+				FM_TIME_STAMP_MAX * sizeof(uint8_t));
+	} else
 #endif
+	{
+		if (copy_from_user(&buff_desc, (ioc_fmt_buff_desc_t  *)buf,
+							sizeof(ioc_fmt_buff_desc_t)))
+			return -EFAULT;
+	}
 
 	data_offset = FM_PORT_GetBufferDataOffset(fmt_port->p_tx_fm_port_dev);
 	p_data = kmalloc(buff_desc.size+data_offset, GFP_KERNEL);
@@ -1507,7 +1524,7 @@ ssize_t fmt_write(
 static const struct file_operations fmt_fops =
 {
 	.owner			= THIS_MODULE,
-#ifdef FMAN_TEST_CONFIG_COMPAT
+#ifdef CONFIG_COMPAT
 	.compat_ioctl		= fmt_compat_ioctl,
 #endif
 	.unlocked_ioctl		= fmt_ioctl,
-- 
1.7.9.7

