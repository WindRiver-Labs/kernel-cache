From fbdb1d21f817bc63122bb00cc24c0a249ec4370b Mon Sep 17 00:00:00 2001
From: Andrei Pistirica <sorin.pistirica@freescale.com>
Date: Fri, 25 May 2012 11:05:28 +0300
Subject: [PATCH 069/162] FMD16 wrong compat manip node handling.

The structure passed from userspace contains p_data pointer
which must be converted into kernel pointer.
Exported functions for mapping kernel pointers to userspace
ids.

Signed-off-by: Andrei Pistirica <sorin.pistirica@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../src/wrapper/lnxwrp_ioctls_fm_compat.c          |   25 ++++++++++++-
 .../src/wrapper/lnxwrp_ioctls_fm_compat.h          |   39 ++++++++++++++++----
 include/linux/fmd/Peripherals/fm_pcd_ioctls.h      |    4 +-
 3 files changed, 56 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
index f0c8022..4a12b90 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
@@ -79,8 +79,13 @@ static void hex_dump(void * p_addr, unsigned int size)
 #endif
 
 /* maping kernel pointers w/ UserSpace id's { */
-/*TODO: per FMan module: Parser:FM_PARSER_NODE,
- * Kg:FM_KG_NODE, Policer:FM_POLICER_NODE */
+/*TODO: per FMan module:
+ *
+ *      Parser: FM_PARSER_NODE,
+ *      Kg: FM_KG_NODE,
+ *      Policer: FM_POLICER_NODE
+ *      Manip: FM_MANIP_NODE
+ **/
 const unsigned char map_node_name[][ID_MAP_NAME_SIZE] = {
     "FM_NODE", /* 0 */
     "FM_PORT_NODE", /* 1 */
@@ -110,6 +115,7 @@ void compat_del_ptr2id(void *p, const unsigned char *name)
 			compat_ptr2id_array[k].name = NULL;
 		}
 }
+EXPORT_SYMBOL(compat_del_ptr2id);
 
 compat_uptr_t compat_add_ptr2id(void *p, const unsigned char *name)
 {
@@ -132,6 +138,7 @@ compat_uptr_t compat_add_ptr2id(void *p, const unsigned char *name)
 	printk(KERN_WARNING "FMan map list full! No more PCD space on kernel!\n");
     return 0;
 }
+EXPORT_SYMBOL(compat_add_ptr2id);
 
 compat_uptr_t compat_get_ptr2id(void *p, const unsigned char *name)
 {
@@ -147,6 +154,7 @@ compat_uptr_t compat_get_ptr2id(void *p, const unsigned char *name)
 
     return 0;
 }
+EXPORT_SYMBOL(compat_get_ptr2id);
 
 void *compat_get_id2ptr(compat_uptr_t comp, const unsigned char *name)
 {
@@ -168,6 +176,7 @@ void *compat_get_id2ptr(compat_uptr_t comp, const unsigned char *name)
     }
     return NULL;
 }
+EXPORT_SYMBOL(compat_get_id2ptr);
 /* } maping kernel pointers w/ UserSpace id's  */
 
 static inline void compat_copy_fm_pcd_plcr_next_engine(
@@ -946,6 +955,12 @@ void compat_fm_pcd_manip_set_node(
         param->type = compat_param->type;
         memcpy(&param->u, &compat_param->u, sizeof(param->u));
 
+        /* user garbage - it could break the US application! */
+        if (compat_param->type == e_IOC_FM_PCD_MANIP_HDR &&
+            compat_param->u.hdr.insrt_params.type == e_IOC_FM_PCD_MANIP_INSRT_GENERIC)
+                param->u.hdr.insrt_params.u.generic.p_data =
+                    compat_ptr(compat_param->u.hdr.insrt_params.u.generic.p_data);
+
         if (compat_param->p_next_manip)
             param->p_next_manip = compat_get_id2ptr(compat_param->id, PCD_NODE);
     }
@@ -953,6 +968,12 @@ void compat_fm_pcd_manip_set_node(
         compat_param->type = param->type;
         memcpy(&compat_param->u, &param->u, sizeof(compat_param->u));
 
+        /* user garbage - it could break the US application! */
+        if (param->type == e_IOC_FM_PCD_MANIP_HDR &&
+            param->u.hdr.insrt_params.type == e_IOC_FM_PCD_MANIP_INSRT_GENERIC)
+                compat_param->u.hdr.insrt_params.u.generic.p_data =
+                    ptr_to_compat(param->u.hdr.insrt_params.u.generic.p_data);
+
         if (param->p_next_manip)
             compat_param->p_next_manip = compat_get_ptr2id(param->id, PCD_NODE);
 
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
index 16f5cfc..f31f2c9 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
@@ -356,26 +356,49 @@ typedef struct ioc_compat_fm_pcd_cc_node_modify_next_engine_params_t {
     ioc_compat_fm_pcd_cc_next_engine_params_t  cc_next_engine_params;
 } ioc_compat_fm_pcd_cc_node_modify_next_engine_params_t;
 
+typedef struct ioc_compat_fm_pcd_manip_hdr_insrt_generic_params_t {
+    uint8_t                         offset;
+    uint8_t                         size;
+    bool                            replace;
+    compat_uptr_t                   p_data;
+} ioc_compat_fm_pcd_manip_hdr_insrt_generic_params_t;
+
+typedef struct ioc_compat_fm_pcd_manip_hdr_insrt_params_t {
+    ioc_fm_pcd_manip_hdr_insrt_type                     type;
+    union {
+        ioc_compat_fm_pcd_manip_hdr_insrt_generic_params_t       generic;
+#ifdef FM_CAPWAP_SUPPORT
+TODO:
+#endif /* FM_CAPWAP_SUPPORT */
+    } u;
+} ioc_compat_fm_pcd_manip_hdr_insrt_params_t;
+
+typedef struct ioc_compat_fm_pcd_manip_hdr_params_t {
+    bool                                        rmv;
+    ioc_fm_pcd_manip_hdr_rmv_params_t           rmv_params;
+    bool                                        insrt;
+    ioc_compat_fm_pcd_manip_hdr_insrt_params_t  insrt_params;
+    bool                                        dont_parse_after_manip;
+} ioc_compat_fm_pcd_manip_hdr_params_t;
+
 /**************************************************************************//**
  @Description   Parameters for defining a manipulation node
 *//***************************************************************************/
 typedef struct ioc_compat_fm_pcd_manip_params_t {
-    ioc_net_header_type                           type;               /**< Selects type of manipulation node */
+    ioc_fm_pcd_manip_type                         type;
     union{
-        ioc_fm_pcd_manip_hdr_params_t             hdr;                /**< Parameters for defining header manipulation node */
-        ioc_fm_pcd_manip_reassem_params_t         reassem;            /**< Parameters for defining reassembly manipulation node */
-        ioc_fm_pcd_manip_frag_params_t            frag;               /**< Parameters for defining fragmentation manipulation node */
-        ioc_fm_pcd_manip_special_offload_params_t special_offload;     /**< Parameters for defining special offload manipulation node */
+        ioc_compat_fm_pcd_manip_hdr_params_t      hdr;
+        ioc_fm_pcd_manip_reassem_params_t         reassem;
+        ioc_fm_pcd_manip_frag_params_t            frag;
+        ioc_fm_pcd_manip_special_offload_params_t special_offload;
     } u;
-     compat_uptr_t                                p_next_manip;        /**< Handle to another (previously defined) manipulation node;
-                                                                            Allows concatenation of manipulation actions */
+     compat_uptr_t                                p_next_manip;
 #ifdef FM_CAPWAP_SUPPORT
 #warning "feature not supported!"
 #endif
     compat_uptr_t                                 id;
 } ioc_compat_fm_pcd_manip_params_t;
 
-
 /* } pcd compat structures */
 
 /* pcd compat functions { */
diff --git a/include/linux/fmd/Peripherals/fm_pcd_ioctls.h b/include/linux/fmd/Peripherals/fm_pcd_ioctls.h
index 174e83e..23d65cf 100644
--- a/include/linux/fmd/Peripherals/fm_pcd_ioctls.h
+++ b/include/linux/fmd/Peripherals/fm_pcd_ioctls.h
@@ -1549,7 +1549,7 @@ typedef struct ioc_fm_pcd_manip_hdr_insrt_generic_params_t {
     uint8_t                         size;           /**< Size of inserted section */
     bool                            replace;        /**< TRUE to override (replace) existing data at
                                                          'offset', FALSE to insert */
-    uint8_t                         *p_Data;        /**< Pointer to data to be inserted */
+    uint8_t                         *p_data;        /**< Pointer to data to be inserted */
 } ioc_fm_pcd_manip_hdr_insrt_generic_params_t;
 
 /**************************************************************************//**
@@ -1623,7 +1623,7 @@ typedef struct ioc_fm_pcd_manip_reassem_params_t {
  @Description   Parameters for defining a manipulation node
 *//***************************************************************************/
 typedef struct ioc_fm_pcd_manip_params_t {
-    ioc_net_header_type                           type;               /**< Selects type of manipulation node */
+    ioc_fm_pcd_manip_type                         type;               /**< Selects type of manipulation node */
     union{
         ioc_fm_pcd_manip_hdr_params_t             hdr;                /**< Parameters for defining header manipulation node */
         ioc_fm_pcd_manip_reassem_params_t         reassem;            /**< Parameters for defining reassembly manipulation node */
-- 
1.7.9.7

