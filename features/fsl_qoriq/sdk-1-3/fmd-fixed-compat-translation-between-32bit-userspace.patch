From 25b4713cc25a70ed099866d7ad36da3e0c95146c Mon Sep 17 00:00:00 2001
From: Stefan Szabo <szbs001@freescale.com>
Date: Mon, 1 Oct 2012 10:54:08 +0300
Subject: [PATCH 084/162] fmd: fixed compat translation between 32bit
 userspace and 64bit kernel

Signed-off-by: Stefan Szabo <szbs001@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../src/wrapper/lnxwrp_ioctls_fm_compat.c          |  227 ++++++++++----------
 .../src/wrapper/lnxwrp_ioctls_fm_compat.h          |   19 +-
 2 files changed, 135 insertions(+), 111 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
index abc2ef7..6f5bc18 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
@@ -147,7 +147,7 @@ void *compat_get_id2ptr(compat_uptr_t comp, enum fm_map_node_type node_type)
     _fm_cpt_dbg(COMPAT_GENERIC, " (0x%08x) get -> \n", comp);
 
     if((COMPAT_PTR2ID_WM_MASK & comp) != COMPAT_PTR2ID_WATERMARK) {
-        _fm_cpt_dbg(COMPAT_GENERIC, "Error, invalid watermark!\n\n");
+        _fm_cpt_dbg(COMPAT_GENERIC, "Error, invalid watermark (0x%08x)!\n\n", comp);
         dump_stack();
         return compat_ptr(comp);
     }
@@ -170,21 +170,21 @@ static inline void compat_copy_fm_pcd_plcr_next_engine(
         ioc_fm_pcd_engine                           next_engine,
         uint8_t                                     compat)
 {
-    _fm_cpt_dbg (compat, " Calling...\n");
+    _fm_cpt_dbg (compat, " {->...\n");
 
     switch (next_engine)
     {
         case e_IOC_FM_PCD_PLCR:
             if (compat == COMPAT_US_TO_K)
-                param->p_profile = compat_get_id2ptr(compat_param->p_profile, FM_MAP_TYPE_PCD_NODE);
+                param->p_profile = compat_pcd_id2ptr(compat_param->p_profile);
             else
-                compat_param->p_profile = compat_get_ptr2id(param->p_profile, FM_MAP_TYPE_PCD_NODE);
+                compat_param->p_profile = compat_pcd_ptr2id(param->p_profile);
         break;
         case e_IOC_FM_PCD_KG:
             if (compat == COMPAT_US_TO_K)
-                param->p_direct_scheme = compat_get_id2ptr(compat_param->p_direct_scheme, FM_MAP_TYPE_PCD_NODE);
+                param->p_direct_scheme = compat_pcd_id2ptr(compat_param->p_direct_scheme);
             else
-                compat_param->p_direct_scheme = compat_get_ptr2id(param->p_direct_scheme, FM_MAP_TYPE_PCD_NODE);
+                compat_param->p_direct_scheme = compat_pcd_ptr2id(param->p_direct_scheme);
         break;
         default:
             if (compat == COMPAT_US_TO_K)
@@ -194,7 +194,7 @@ static inline void compat_copy_fm_pcd_plcr_next_engine(
         break;
     }
 
-    _fm_cpt_dbg (compat, " Called.\n");
+    _fm_cpt_dbg (compat, " ...->}\n");
 }
 
 void compat_copy_fm_pcd_plcr_profile(
@@ -202,7 +202,7 @@ void compat_copy_fm_pcd_plcr_profile(
         ioc_fm_pcd_plcr_profile_params_t        *param,
         uint8_t                                 compat)
 {
-    _fm_cpt_dbg (compat, " Calling...\n");
+    _fm_cpt_dbg (compat, " {->...\n");
 
     if (compat == COMPAT_US_TO_K)
     {
@@ -220,7 +220,7 @@ void compat_copy_fm_pcd_plcr_profile(
         }
         else
             param->profile_select.p_profile =
-                compat_ptr(compat_param->profile_select.p_profile);
+                compat_pcd_id2ptr(compat_param->profile_select.p_profile);
 
         param->alg_selection    = compat_param->alg_selection;
         param->color_mode       = compat_param->color_mode;
@@ -245,7 +245,8 @@ void compat_copy_fm_pcd_plcr_profile(
         compat_param->modify = param->modify;
 
         /* profile_select */
-        if(!param->modify){
+        if (!param->modify)
+        {
             compat_param->profile_select.new_params.profile_type =
                 param->profile_select.new_params.profile_type;
             compat_param->profile_select.new_params.p_fm_port =
@@ -255,7 +256,7 @@ void compat_copy_fm_pcd_plcr_profile(
         }
         else
             compat_param->profile_select.p_profile =
-                ptr_to_compat(param->profile_select.p_profile);
+                compat_pcd_ptr2id(param->profile_select.p_profile);
 
         compat_param->alg_selection = param->alg_selection;
         compat_param->color_mode    = param->color_mode;
@@ -287,7 +288,7 @@ void compat_copy_fm_pcd_plcr_profile(
     compat_copy_fm_pcd_plcr_next_engine(&compat_param->params_on_red,
             &param->params_on_red, param->next_engine_on_red, compat);
 
-    _fm_cpt_dbg (compat, " Called.\n");
+    _fm_cpt_dbg (compat, " ...->}\n");
 }
 
 void compat_copy_fm_pcd_plcr_del_profile(
@@ -297,7 +298,7 @@ void compat_copy_fm_pcd_plcr_del_profile(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        id->obj = compat_pcd_id2ptr(compat_id->obj);
         compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
@@ -307,22 +308,22 @@ static inline void compat_copy_fm_pcd_cc_next_kg(
         ioc_fm_pcd_cc_next_kg_params_t          *param,
         uint8_t                                 compat)
 {
-    _fm_cpt_dbg (compat, " Calling...\n");
+    _fm_cpt_dbg (compat, " {->...\n");
 
     if (compat == COMPAT_US_TO_K)
     {
         param->new_fqid         = compat_param->new_fqid;
         param->override_fqid    = compat_param->override_fqid;
-        param->p_direct_scheme  = compat_get_id2ptr(compat_param->p_direct_scheme, FM_MAP_TYPE_PCD_NODE);
+        param->p_direct_scheme  = compat_pcd_id2ptr(compat_param->p_direct_scheme);
     }
     else
     {
         compat_param->new_fqid          = param->new_fqid;
         compat_param->override_fqid     = param->override_fqid;
-        compat_param->p_direct_scheme   = compat_get_ptr2id(param->p_direct_scheme, FM_MAP_TYPE_PCD_NODE);
+        compat_param->p_direct_scheme   = compat_pcd_ptr2id(param->p_direct_scheme);
     }
 
-    _fm_cpt_dbg (compat, " Called.\n");
+    _fm_cpt_dbg (compat, " ...->}\n");
 }
 
 static inline void compat_copy_fm_pcd_cc_next_cc(
@@ -330,14 +331,14 @@ static inline void compat_copy_fm_pcd_cc_next_cc(
         ioc_fm_pcd_cc_next_cc_params_t          *param,
         uint8_t                                 compat)
 {
-    _fm_cpt_dbg (compat, " Calling...\n");
+    _fm_cpt_dbg (compat, " {->...\n");
 
     if (compat == COMPAT_US_TO_K)
-        param->cc_node_id = compat_get_id2ptr(compat_param->cc_node_id, FM_MAP_TYPE_PCD_NODE);
+        param->cc_node_id = compat_pcd_id2ptr(compat_param->cc_node_id);
     else
-        compat_param->cc_node_id = compat_get_ptr2id(param->cc_node_id, FM_MAP_TYPE_PCD_NODE);
+        compat_param->cc_node_id = compat_pcd_ptr2id(param->cc_node_id);
 
-    _fm_cpt_dbg (compat, " Called.\n");
+    _fm_cpt_dbg (compat, " ...->}\n");
 }
 
 static inline void compat_copy_fm_pcd_cc_next_engine(
@@ -345,7 +346,7 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
         ioc_fm_pcd_cc_next_engine_params_t          *param,
         uint8_t                                     compat)
 {
-    /*_fm_cpt_dbg (compat, " Calling...\n");*/
+    /*_fm_cpt_dbg (compat, " {->...\n");*/
 
     if (compat == COMPAT_US_TO_K)
     {
@@ -362,8 +363,7 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
                 memcpy(&param->params, &compat_param->params, sizeof(param->params));
             break;
         }
-        if (compat_param->manip_id)
-            param->manip_id = compat_get_id2ptr(compat_param->manip_id, FM_MAP_TYPE_PCD_NODE);
+        param->manip_id = compat_pcd_id2ptr(compat_param->manip_id);
         param->statistics_en = compat_param->statistics_en;
     }
     else
@@ -379,8 +379,7 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
                 memcpy(&compat_param->params, &param->params, sizeof(compat_param->params));
             break;
         }
-        if (param->manip_id)
-            compat_param->manip_id = compat_get_ptr2id(param->manip_id, FM_MAP_TYPE_PCD_NODE);
+        compat_param->manip_id = compat_pcd_ptr2id(param->manip_id);
         compat_param->statistics_en = param->statistics_en;
     }
 
@@ -396,7 +395,7 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
         break;
     }
 
-    /*_fm_cpt_dbg (compat, " Called.\n");*/
+    /*_fm_cpt_dbg (compat, " ...->}\n");*/
 }
 
 void compat_copy_fm_pcd_cc_key(
@@ -428,7 +427,7 @@ void compat_copy_fm_pcd_cc_node_modify_key_and_next_engine(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        param->id       = compat_ptr(compat_param->id);
+        param->id       = compat_pcd_id2ptr(compat_param->id);
         param->key_indx = compat_param->key_indx;
         param->key_size = compat_param->key_size;
         compat_copy_fm_pcd_cc_key(
@@ -438,7 +437,7 @@ void compat_copy_fm_pcd_cc_node_modify_key_and_next_engine(
     }
     else
     {
-        compat_param->id       = ptr_to_compat(param->id);
+        compat_param->id       = compat_pcd_ptr2id(param->id);
         compat_param->key_indx = param->key_indx;
         compat_param->key_size = param->key_size;
         compat_copy_fm_pcd_cc_key(
@@ -455,13 +454,13 @@ void compat_copy_fm_pcd_cc_node_modify_next_engine(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        param->id = compat_ptr(compat_param->id);
+        param->id       = compat_pcd_id2ptr(compat_param->id);
         param->key_indx = compat_param->key_indx;
         param->key_size = compat_param->key_size;
     }
     else
     {
-        compat_param->id = ptr_to_compat(param->id);
+        compat_param->id       = compat_pcd_ptr2id(param->id);
         compat_param->key_indx = param->key_indx;
         compat_param->key_size = param->key_size;
     }
@@ -479,13 +478,13 @@ void compat_fm_pcd_cc_tree_modify_next_engine(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        param->id       = compat_ptr(compat_param->id);
+        param->id       = compat_pcd_id2ptr(compat_param->id);
         param->grp_indx = compat_param->grp_indx;
         param->indx     = compat_param->indx;
     }
     else
     {
-        compat_param->id       = ptr_to_compat(param->id);
+        compat_param->id       = compat_pcd_ptr2id(param->id);
         compat_param->grp_indx = param->grp_indx;
         compat_param->indx     = param->indx;
     }
@@ -508,7 +507,7 @@ void compat_copy_fm_pcd_hash_table(
         param->hash_res_mask    = compat_param->hash_res_mask;
         param->hash_shift       = compat_param->hash_shift;
         param->match_key_size   = compat_param->match_key_size;
-        param->id               = compat_ptr(compat_param->id);
+        param->id               = compat_pcd_id2ptr(compat_param->id);
     }
     else
     {
@@ -517,7 +516,8 @@ void compat_copy_fm_pcd_hash_table(
         compat_param->hash_res_mask    = param->hash_res_mask;
         compat_param->hash_shift       = param->hash_shift;
         compat_param->match_key_size   = param->match_key_size;
-        compat_param->id               = ptr_to_compat(param->id);
+
+        compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 
     compat_copy_fm_pcd_cc_next_engine(
@@ -533,7 +533,7 @@ void compat_copy_fm_pcd_cc_grp(
 {
     int k;
 
-    _fm_cpt_dbg (compat, " Calling...\n");
+    _fm_cpt_dbg (compat, " {->...\n");
 
     if (compat == COMPAT_US_TO_K)
     {
@@ -552,7 +552,7 @@ void compat_copy_fm_pcd_cc_grp(
                 &param->next_engine_per_entries_in_grp[k],
                 compat);
 
-    _fm_cpt_dbg (compat, " Called.\n");
+    _fm_cpt_dbg (compat, " ...->}\n");
 }
 
 void compat_copy_fm_pcd_cc_tree(
@@ -561,16 +561,16 @@ void compat_copy_fm_pcd_cc_tree(
         uint8_t compat)
 {
     int k;
-    _fm_cpt_dbg (compat, " Calling...\n");
+    _fm_cpt_dbg (compat, " {->...\n");
 
     if (compat == COMPAT_US_TO_K)
     {
-        param->net_env_id = compat_get_id2ptr(compat_param->net_env_id, FM_MAP_TYPE_PCD_NODE);
+        param->net_env_id = compat_pcd_id2ptr(compat_param->net_env_id);
         param->num_of_groups = compat_param->num_of_groups;
     }
     else
     {
-        compat_param->net_env_id = compat_get_ptr2id(param->net_env_id, FM_MAP_TYPE_PCD_NODE);
+        compat_param->net_env_id = compat_pcd_ptr2id(param->net_env_id);
         compat_param->num_of_groups = param->num_of_groups;
 
         compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
@@ -582,7 +582,7 @@ void compat_copy_fm_pcd_cc_tree(
                 &param->fm_pcd_cc_group_params[k],
                 compat);
 
-    _fm_cpt_dbg (compat, " Called.\n");
+    _fm_cpt_dbg (compat, " ...->}\n");
 }
 
 void compat_copy_fm_pcd_cc_delete_tree(
@@ -592,7 +592,7 @@ void compat_copy_fm_pcd_cc_delete_tree(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        id->obj = compat_pcd_id2ptr(compat_id->obj);
         compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
@@ -619,15 +619,16 @@ void compat_copy_fm_pcd_kg_scheme(
         ioc_fm_pcd_kg_scheme_params_t           *param,
         uint8_t                                 compat)
 {
-    _fm_cpt_dbg(compat," Calling...\n");
+    _fm_cpt_dbg(compat," {->...\n");
 
     if (compat == COMPAT_US_TO_K)
     {
         param->modify = compat_param->modify;
 
         /* scm_id */
-        if(compat_param->modify){
-            param->scm_id.scheme_id = compat_ptr(compat_param->scm_id.scheme_id);
+        if (compat_param->modify)
+        {
+            param->scm_id.scheme_id = compat_pcd_id2ptr(compat_param->scm_id.scheme_id);
             _fm_cpt_dbg(compat," param->scm_id.scheme_id = %p \n", param->scm_id.scheme_id);
         }
         else
@@ -635,11 +636,11 @@ void compat_copy_fm_pcd_kg_scheme(
 
         param->always_direct = compat_param->always_direct;
         /* net_env_params */
-        param->net_env_params.net_env_id = compat_get_id2ptr(compat_param->net_env_params.net_env_id, FM_MAP_TYPE_PCD_NODE);
+        param->net_env_params.net_env_id = compat_pcd_id2ptr(compat_param->net_env_params.net_env_id);
         param->net_env_params.num_of_distinction_units = compat_param->net_env_params.num_of_distinction_units;
         memcpy(param->net_env_params.unit_ids,
-               compat_param->net_env_params.unit_ids,
-               IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
+                compat_param->net_env_params.unit_ids,
+                IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
 
         param->use_hash = compat_param->use_hash;
         memcpy(&param->key_extract_and_hash_params,
@@ -654,12 +655,13 @@ void compat_copy_fm_pcd_kg_scheme(
         param->next_engine = compat_param->next_engine;
 
         /* kg_next_engine_params */
-        if(param->next_engine == e_IOC_FM_PCD_CC){
-            param->kg_next_engine_params.cc.tree_id = compat_get_id2ptr(compat_param->kg_next_engine_params.cc.tree_id, FM_MAP_TYPE_PCD_NODE);
-
-            param->kg_next_engine_params.cc.grp_id = compat_param->kg_next_engine_params.cc.grp_id;
+        if (param->next_engine == e_IOC_FM_PCD_CC)
+        {
+            param->kg_next_engine_params.cc.tree_id   = compat_pcd_id2ptr(compat_param->kg_next_engine_params.cc.tree_id);
+            param->kg_next_engine_params.cc.grp_id    = compat_param->kg_next_engine_params.cc.grp_id;
             param->kg_next_engine_params.cc.plcr_next = compat_param->kg_next_engine_params.cc.plcr_next;
-            param->kg_next_engine_params.cc.bypass_plcr_profile_generation = compat_param->kg_next_engine_params.cc.bypass_plcr_profile_generation;
+            param->kg_next_engine_params.cc.bypass_plcr_profile_generation
+                                                      = compat_param->kg_next_engine_params.cc.bypass_plcr_profile_generation;
             memcpy(&param->kg_next_engine_params.cc.plcr_profile,
                    &compat_param->kg_next_engine_params.cc.plcr_profile,
                    sizeof(ioc_fm_pcd_kg_plcr_profile_t));
@@ -678,15 +680,15 @@ void compat_copy_fm_pcd_kg_scheme(
         compat_param->modify = param->modify;
 
         /* scm_id */
-        if(param->modify)
-            compat_param->scm_id.scheme_id = ptr_to_compat(param->scm_id.scheme_id);
+        if (param->modify)
+            compat_param->scm_id.scheme_id = compat_pcd_ptr2id(param->scm_id.scheme_id);
         else
             compat_param->scm_id.relative_scheme_id = param->scm_id.relative_scheme_id;
 
         compat_param->always_direct = param->always_direct;
 
         /* net_env_params */
-        compat_param->net_env_params.net_env_id = ptr_to_compat(param->net_env_params.net_env_id);
+        compat_param->net_env_params.net_env_id = compat_pcd_ptr2id(param->net_env_params.net_env_id);
         compat_param->net_env_params.num_of_distinction_units = param->net_env_params.num_of_distinction_units;
         memcpy(compat_param->net_env_params.unit_ids, param->net_env_params.unit_ids, IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
 
@@ -699,12 +701,13 @@ void compat_copy_fm_pcd_kg_scheme(
         compat_param->next_engine = param->next_engine;
 
         /* kg_next_engine_params */
-        if(compat_param->next_engine == e_IOC_FM_PCD_CC){
-            compat_param->kg_next_engine_params.cc.tree_id = compat_get_ptr2id(param->kg_next_engine_params.cc.tree_id, FM_MAP_TYPE_PCD_NODE);
-
-            compat_param->kg_next_engine_params.cc.grp_id = param->kg_next_engine_params.cc.grp_id;
+        if (compat_param->next_engine == e_IOC_FM_PCD_CC)
+        {
+            compat_param->kg_next_engine_params.cc.tree_id   = compat_pcd_ptr2id(param->kg_next_engine_params.cc.tree_id);
+            compat_param->kg_next_engine_params.cc.grp_id    = param->kg_next_engine_params.cc.grp_id;
             compat_param->kg_next_engine_params.cc.plcr_next = param->kg_next_engine_params.cc.plcr_next;
-            compat_param->kg_next_engine_params.cc.bypass_plcr_profile_generation = param->kg_next_engine_params.cc.bypass_plcr_profile_generation;
+            compat_param->kg_next_engine_params.cc.bypass_plcr_profile_generation
+                                                             = param->kg_next_engine_params.cc.bypass_plcr_profile_generation;
             memcpy(&compat_param->kg_next_engine_params.cc.plcr_profile,
                    &param->kg_next_engine_params.cc.plcr_profile,
                    sizeof(ioc_fm_pcd_kg_plcr_profile_t));
@@ -717,7 +720,7 @@ void compat_copy_fm_pcd_kg_scheme(
         compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 
-    _fm_cpt_dbg(compat," Called.\n");
+    _fm_cpt_dbg(compat," ...->}\n");
 }
 
 void compat_copy_fm_pcd_scheme_delete(
@@ -727,7 +730,7 @@ void compat_copy_fm_pcd_scheme_delete(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        id->obj = compat_pcd_id2ptr(compat_id->obj);
         compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
@@ -737,9 +740,11 @@ void compat_copy_fm_pcd_kg_scheme_select(
         ioc_fm_pcd_kg_scheme_select_t *param,
         uint8_t compat)
 {
-    if (compat == COMPAT_US_TO_K){
+    if (compat == COMPAT_US_TO_K)
+    {
         param->direct = compat_param->direct;
-        param->scheme_id = compat_ptr(compat_param->direct);
+        if (param->direct)
+            param->scheme_id = compat_pcd_id2ptr(compat_param->scheme_id);
     }
 }
 
@@ -753,7 +758,7 @@ void compat_copy_fm_pcd_kg_schemes_params(
     if (compat == COMPAT_US_TO_K) {
         param->num_of_schemes = compat_param->num_of_schemes;
         for(k=0; k < compat_param->num_of_schemes; k++)
-            param->scheme_ids[k] = compat_get_id2ptr(compat_param->scheme_ids[k], FM_MAP_TYPE_PCD_NODE);
+            param->scheme_ids[k] = compat_pcd_id2ptr(compat_param->scheme_ids[k]);
     }
 }
 
@@ -763,7 +768,7 @@ void compat_copy_fm_port_pcd_cc(
     uint8_t compat)
 {
     if (compat == COMPAT_US_TO_K){
-        p_cc_params->cc_tree_id = compat_get_id2ptr(compat_cc_params->cc_tree_id, FM_MAP_TYPE_PCD_NODE);
+        p_cc_params->cc_tree_id = compat_pcd_id2ptr(compat_cc_params->cc_tree_id);
     }
 }
 
@@ -777,12 +782,10 @@ void compat_copy_fm_port_pcd_kg(
 
         param->num_of_schemes = compat_param->num_of_schemes;
         for(k=0; k<compat_param->num_of_schemes; k++)
-            if (compat_param->scheme_ids[k])
-                param->scheme_ids[k] = compat_get_id2ptr(compat_param->scheme_ids[k], FM_MAP_TYPE_PCD_NODE);
+            param->scheme_ids[k] = compat_pcd_id2ptr(compat_param->scheme_ids[k]);
 
         param->direct_scheme = compat_param->direct_scheme;
-        if (param->direct_scheme)
-            param->direct_scheme_id = compat_get_id2ptr(compat_param->direct_scheme_id, FM_MAP_TYPE_PCD_NODE);
+        param->direct_scheme_id = compat_pcd_id2ptr(compat_param->direct_scheme_id);
     }
 }
 
@@ -791,7 +794,8 @@ void compat_copy_fm_port_pcd(
         ioc_fm_port_pcd_params_t *param,
         uint8_t compat)
 {
-    if (compat == COMPAT_US_TO_K){
+    if (compat == COMPAT_US_TO_K)
+    {
         ioc_fm_port_pcd_prs_params_t         *same_port_pcd_prs_params;
         ioc_compat_fm_port_pcd_cc_params_t   *compat_port_pcd_cc_params;
         ioc_compat_fm_port_pcd_kg_params_t   *compat_port_pcd_kg_params;
@@ -809,16 +813,15 @@ void compat_copy_fm_port_pcd(
         _fm_cpt_dbg(compat," param->p_ip_reassembly_manip=%p  \n", param->p_ip_reassembly_manip);
 
         param->pcd_support = compat_param->pcd_support;
-        param->net_env_id = compat_get_id2ptr(compat_param->net_env_id, FM_MAP_TYPE_PCD_NODE);
+        param->net_env_id = compat_pcd_id2ptr(compat_param->net_env_id);
 
         if (param->p_cc_params)
             compat_copy_fm_port_pcd_cc(compat_port_pcd_cc_params, param->p_cc_params, COMPAT_US_TO_K);
         if (param->p_kg_params)
             compat_copy_fm_port_pcd_kg(compat_port_pcd_kg_params, param->p_kg_params, COMPAT_US_TO_K);
         if (param->p_plcr_params)
-            param->p_plcr_params->plcr_profile_id = compat_ptr(compat_port_pcd_plcr_params->plcr_profile_id);
-        if (param->p_ip_reassembly_manip)
-            param->p_ip_reassembly_manip = compat_get_id2ptr(compat_param->p_ip_reassembly_manip, FM_MAP_TYPE_PCD_NODE);
+            param->p_plcr_params->plcr_profile_id = compat_pcd_id2ptr(compat_port_pcd_plcr_params->plcr_profile_id);
+        param->p_ip_reassembly_manip = compat_pcd_id2ptr(compat_param->p_ip_reassembly_manip);
     }
 }
 
@@ -828,7 +831,7 @@ void compat_copy_fm_port_pcd_modify_tree(
         uint8_t compat)
 {
     if (compat == COMPAT_US_TO_K)
-        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        id->obj = compat_pcd_id2ptr(compat_id->obj);
 }
 
 void compat_copy_fm_pcd_net_env(
@@ -840,12 +843,13 @@ void compat_copy_fm_pcd_net_env(
     {
         param->num_of_distinction_units = compat_param->num_of_distinction_units;
         memcpy(param->units, compat_param->units, sizeof(ioc_fm_pcd_distinction_unit_t)*IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
-        param->id = compat_ptr(compat_param->id); /* this should be null */
+        param->id = NULL; /* to avoid passing garbage to the kernel */
     }
     else
     {
         compat_param->num_of_distinction_units = param->num_of_distinction_units;
         memcpy(compat_param->units, param->units, sizeof(ioc_fm_pcd_distinction_unit_t)*IOC_FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
+
         compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 }
@@ -857,7 +861,7 @@ void compat_copy_fm_net_env_delete(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        id->obj = compat_pcd_id2ptr(compat_id->obj);
         compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
@@ -869,14 +873,14 @@ void compat_copy_fm_pcd_cc_node_modify_key(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        param->id       = compat_ptr(compat_param->id);
-        _fm_cpt_dbg(compat," param->id = %p \n", param->id);
         param->key_indx = compat_param->key_indx;
         param->key_size = compat_param->key_size;
         param->p_key    = (uint8_t *)compat_ptr(compat_param->p_key);
         _fm_cpt_dbg(compat," param->p_key = %p \n", param->p_key);
         param->p_mask   = (uint8_t *)compat_ptr(compat_param->p_mask);
         _fm_cpt_dbg(compat," param->p_mask = %p\n", param->p_mask);
+        param->id       = compat_pcd_id2ptr(compat_param->id);
+        _fm_cpt_dbg(compat," param->id = %p \n", param->id);
     }
     else
     {
@@ -884,7 +888,8 @@ void compat_copy_fm_pcd_cc_node_modify_key(
         compat_param->key_size  = param->key_size;
         compat_param->p_key     = ptr_to_compat((void *)param->p_key);
         compat_param->p_mask    = ptr_to_compat((void *)param->p_mask);
-        compat_param->id        = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
+
+        compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 }
 
@@ -895,25 +900,36 @@ void compat_copy_keys(
 {
     int k = 0;
 
-    _fm_cpt_dbg(compat," Calling...\n");
+    _fm_cpt_dbg(compat," {->...\n");
 
-    if (compat == COMPAT_US_TO_K){
+    if (compat == COMPAT_US_TO_K) {
         param->max_num_of_keys = compat_param->max_num_of_keys;
-        param->mask_support = compat_param->mask_support;
+        param->mask_support    = compat_param->mask_support;
         param->statistics_mode = compat_param->statistics_mode;
-        param->num_of_keys = compat_param->num_of_keys;
-        param->key_size = compat_param->key_size;
+        param->num_of_keys     = compat_param->num_of_keys;
+        param->key_size        = compat_param->key_size;
+#ifdef FM_EXP_FEATURES
+        memcpy(&param->frame_length_ranges,
+                &compat_param->frame_length_ranges,
+                sizeof(param->frame_length_ranges[0] *
+                    IOC_FM_PCD_CC_STATS_MAX_NUM_OF_FLR);
+#endif /* FM_EXP_FEATURES */
     }
     else {
-
         compat_param->max_num_of_keys = param->max_num_of_keys;
-        compat_param->mask_support = param->mask_support;
+        compat_param->mask_support    = param->mask_support;
         compat_param->statistics_mode = param->statistics_mode;
-        compat_param->num_of_keys = param->num_of_keys;
-        compat_param->key_size = param->key_size;
+        compat_param->num_of_keys     = param->num_of_keys;
+        compat_param->key_size        = param->key_size;
+#ifdef FM_EXP_FEATURES
+        memcpy(&compat_param->frame_length_ranges,
+            &param->frame_length_ranges,
+            sizeof(compat_param->frame_length_ranges[0] *
+                IOC_FM_PCD_CC_STATS_MAX_NUM_OF_FLR);
+#endif /* FM_EXP_FEATURES */
     }
 
-    for(k=0;k<IOC_FM_PCD_MAX_NUM_OF_KEYS;k++)
+    for (k=0; k < IOC_FM_PCD_MAX_NUM_OF_KEYS; k++)
         compat_copy_fm_pcd_cc_key(
             &compat_param->key_params[k],
             &param->key_params[k],
@@ -924,7 +940,7 @@ void compat_copy_keys(
             &param->cc_next_engine_params_for_miss,
             compat);
 
-    _fm_cpt_dbg(compat," Called.\n");
+    _fm_cpt_dbg(compat," ...->}\n");
 }
 
 void compat_copy_fm_pcd_cc_node(
@@ -932,7 +948,7 @@ void compat_copy_fm_pcd_cc_node(
         ioc_fm_pcd_cc_node_params_t         *param,
         uint8_t                             compat)
 {
-    _fm_cpt_dbg(compat," Calling...\n");
+    _fm_cpt_dbg(compat," {->...\n");
 
     if (compat == COMPAT_US_TO_K)
         memcpy(&param->extract_cc_params, &compat_param->extract_cc_params, sizeof(ioc_fm_pcd_extract_entry_t));
@@ -947,7 +963,7 @@ void compat_copy_fm_pcd_cc_node(
 
     compat_copy_keys(&compat_param->keys_params, &param->keys_params, compat);
 
-    _fm_cpt_dbg(compat," Called.\n");
+    _fm_cpt_dbg(compat," ...->}\n");
 }
 
 void compat_copy_fm_pcd_cc_delete_node(
@@ -957,7 +973,7 @@ void compat_copy_fm_pcd_cc_delete_node(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        id->obj = compat_pcd_id2ptr(compat_id->obj);
         compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
@@ -1031,11 +1047,8 @@ void compat_fm_pcd_manip_set_node(
                 break;
         }
 
-        if (compat_param->p_next_manip)
-            param->p_next_manip = compat_get_id2ptr(compat_param->p_next_manip, FM_MAP_TYPE_PCD_NODE);
-
-        if (compat_param->id)
-            param->id = compat_get_id2ptr(compat_param->id, FM_MAP_TYPE_PCD_NODE);
+        param->p_next_manip = compat_pcd_id2ptr(compat_param->p_next_manip);
+        param->id = compat_pcd_id2ptr(compat_param->id);
     }
     else {
         compat_param->type = param->type;
@@ -1046,13 +1059,9 @@ void compat_fm_pcd_manip_set_node(
                 compat_param->u.hdr.insrt_params.u.generic.p_data =
                     ptr_to_compat(param->u.hdr.insrt_params.u.generic.p_data);
 
-        /* This one should be unnecessary, but if the LLD decided to change it,
-           then we'd be scr...eened! */
-        if (param->p_next_manip)
-            compat_param->p_next_manip = compat_get_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
-            /* ... should be one that was added previously by the very call to
-               compat_add_ptr2id() below: */
-
+        compat_param->p_next_manip = compat_pcd_ptr2id(param->id);
+        /* ... should be one that was added previously by the very call to
+           compat_add_ptr2id() below: */
         compat_param->id = compat_add_ptr2id(param->id, FM_MAP_TYPE_PCD_NODE);
     }
 }
@@ -1064,7 +1073,7 @@ void compat_copy_fm_pcd_manip_delete_node(
 {
     if (compat == COMPAT_US_TO_K)
     {
-        id->obj = compat_get_id2ptr(compat_id->obj, FM_MAP_TYPE_PCD_NODE);
+        id->obj = compat_pcd_id2ptr(compat_id->obj);
         compat_del_ptr2id(id->obj, FM_MAP_TYPE_PCD_NODE);
     }
 }
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
index 1e79dfc..b109419 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
@@ -49,7 +49,7 @@
 #define COMPAT_COPY_K2US(dest, src, type)	compat_copy_##type(src, dest, 0)
 #define COMPAT_COPY_US2K(dest, src, type)	compat_copy_##type(dest, src, 1)
 
-/* maping kernel pointers w/ UserSpace id's { */
+/* mapping kernel pointers w/ UserSpace id's { */
 /* Because compat_ptr(ptr_to_compat(X)) != X, this way we cannot exchange pointers
    back and forth (US - KS). compat_ptr is a cast and pointers are broken. */
 #define COMPAT_PTR2ID_ARRAY_MAX (256+1) /* first location is not used */
@@ -105,7 +105,20 @@ void compat_del_ptr2id(void *p, enum fm_map_node_type);
 compat_uptr_t compat_add_ptr2id(void *p, enum fm_map_node_type);
 compat_uptr_t compat_get_ptr2id(void *p, enum fm_map_node_type);
 void *compat_get_id2ptr(compat_uptr_t comp, enum fm_map_node_type);
-/* } maping kernel pointers w/ UserSpace id's  */
+
+static inline compat_uptr_t compat_pcd_ptr2id(void *ptr) {
+    return (ptr)? compat_get_ptr2id(ptr, FM_MAP_TYPE_PCD_NODE)
+                : (compat_uptr_t) 0;
+}
+
+static inline void *compat_pcd_id2ptr(compat_uptr_t id) {
+    return (id) ? compat_get_id2ptr(id, FM_MAP_TYPE_PCD_NODE)
+                : NULL;
+}
+
+/* other similar inlines may be added as new nodes are added
+   to enum fm_map_node_type above... */
+/* } mapping kernel pointers w/ UserSpace id's  */
 
 /* pcd compat structures { */
 typedef struct ioc_compat_fm_pcd_cc_node_remove_key_params_t {
@@ -248,7 +261,9 @@ typedef struct ioc_compat_keys_params_t {
     uint16_t                                   max_num_of_keys;
     bool                                       mask_support;
     ioc_fm_pcd_cc_stats_mode                   statistics_mode;
+#ifdef FM_EXP_FEATURES
     uint16_t                                   frame_length_ranges[IOC_FM_PCD_CC_STATS_MAX_NUM_OF_FLR];
+#endif /* FM_EXP_FEATURES */
     uint16_t                                   num_of_keys;
     uint8_t                                    key_size;
     ioc_compat_fm_pcd_cc_key_params_t          key_params[IOC_FM_PCD_MAX_NUM_OF_KEYS]; /**< compat structure*/
-- 
1.7.9.7

