From 5949112ca5dce6986d75b867d851414774d5bbb9 Mon Sep 17 00:00:00 2001
From: Stefan Szabo <szbs001@freescale.com>
Date: Mon, 8 Oct 2012 18:13:54 +0300
Subject: [PATCH 088/162] fmd: compat layer: many small fixes to finally get
 it to work w/ current FMD (17.3)

Signed-off-by: Stefan Szabo <szbs001@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.3-SOURCE-20121114-yocto.iso tarball.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../src/wrapper/lnxwrp_ioctls_fm_compat.c          |   42 ++++++++++----------
 .../src/wrapper/lnxwrp_ioctls_fm_compat.h          |    6 +--
 include/linux/fmd/Peripherals/fm_pcd_ioctls.h      |    8 ++--
 3 files changed, 27 insertions(+), 29 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
index 6f5bc18..41f80cf 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.c
@@ -346,7 +346,7 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
         ioc_fm_pcd_cc_next_engine_params_t          *param,
         uint8_t                                     compat)
 {
-    /*_fm_cpt_dbg (compat, " {->...\n");*/
+    _fm_cpt_dbg (compat, " {->...\n");
 
     if (compat == COMPAT_US_TO_K)
     {
@@ -357,13 +357,18 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
         switch (param->next_engine)
         {
             case e_IOC_FM_PCD_KG:
+                compat_copy_fm_pcd_cc_next_kg(&compat_param->params.kg_params, &param->params.kg_params, compat);
+            case e_IOC_FM_PCD_DONE:
+            case e_IOC_FM_PCD_PLCR:
+                param->manip_id = compat_pcd_id2ptr(compat_param->manip_id);
+                break;
             case e_IOC_FM_PCD_CC:
+                compat_copy_fm_pcd_cc_next_cc(&compat_param->params.cc_params, &param->params.cc_params, compat);
                 break;
             default:
                 memcpy(&param->params, &compat_param->params, sizeof(param->params));
             break;
         }
-        param->manip_id = compat_pcd_id2ptr(compat_param->manip_id);
         param->statistics_en = compat_param->statistics_en;
     }
     else
@@ -373,29 +378,22 @@ static inline void compat_copy_fm_pcd_cc_next_engine(
         switch (compat_param->next_engine)
         {
             case e_IOC_FM_PCD_KG:
+                compat_copy_fm_pcd_cc_next_kg(&compat_param->params.kg_params, &param->params.kg_params, compat);
+            case e_IOC_FM_PCD_DONE:
+            case e_IOC_FM_PCD_PLCR:
+                compat_param->manip_id = compat_pcd_ptr2id(param->manip_id);
+                break;
             case e_IOC_FM_PCD_CC:
+                compat_copy_fm_pcd_cc_next_cc(&compat_param->params.cc_params, &param->params.cc_params, compat);
                 break;
             default:
                 memcpy(&compat_param->params, &param->params, sizeof(compat_param->params));
             break;
         }
-        compat_param->manip_id = compat_pcd_ptr2id(param->manip_id);
         compat_param->statistics_en = param->statistics_en;
     }
 
-    switch (compat_param->next_engine)
-    {
-        case e_IOC_FM_PCD_KG:
-            compat_copy_fm_pcd_cc_next_kg(&compat_param->params.kg_params, &param->params.kg_params, compat);
-            break;
-        case e_IOC_FM_PCD_CC:
-            compat_copy_fm_pcd_cc_next_cc(&compat_param->params.cc_params, &param->params.cc_params, compat);
-            break;
-        default:
-        break;
-    }
-
-    /*_fm_cpt_dbg (compat, " ...->}\n");*/
+    _fm_cpt_dbg (compat, " ...->}\n");
 }
 
 void compat_copy_fm_pcd_cc_key(
@@ -908,12 +906,12 @@ void compat_copy_keys(
         param->statistics_mode = compat_param->statistics_mode;
         param->num_of_keys     = compat_param->num_of_keys;
         param->key_size        = compat_param->key_size;
-#ifdef FM_EXP_FEATURES
+#if (DPAA_VERSION >= 11)
         memcpy(&param->frame_length_ranges,
                 &compat_param->frame_length_ranges,
                 sizeof(param->frame_length_ranges[0] *
-                    IOC_FM_PCD_CC_STATS_MAX_NUM_OF_FLR);
-#endif /* FM_EXP_FEATURES */
+                    IOC_FM_PCD_CC_STATS_MAX_NUM_OF_FLR));
+#endif /* (DPAA_VERSION >= 11) */
     }
     else {
         compat_param->max_num_of_keys = param->max_num_of_keys;
@@ -921,12 +919,12 @@ void compat_copy_keys(
         compat_param->statistics_mode = param->statistics_mode;
         compat_param->num_of_keys     = param->num_of_keys;
         compat_param->key_size        = param->key_size;
-#ifdef FM_EXP_FEATURES
+#if (DPAA_VERSION >= 11)
         memcpy(&compat_param->frame_length_ranges,
             &param->frame_length_ranges,
             sizeof(compat_param->frame_length_ranges[0] *
-                IOC_FM_PCD_CC_STATS_MAX_NUM_OF_FLR);
-#endif /* FM_EXP_FEATURES */
+                IOC_FM_PCD_CC_STATS_MAX_NUM_OF_FLR));
+#endif /* (DPAA_VERSION >= 11) */
     }
 
     for (k=0; k < IOC_FM_PCD_MAX_NUM_OF_KEYS; k++)
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
index b109419..9b0a9ed 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_ioctls_fm_compat.h
@@ -261,9 +261,9 @@ typedef struct ioc_compat_keys_params_t {
     uint16_t                                   max_num_of_keys;
     bool                                       mask_support;
     ioc_fm_pcd_cc_stats_mode                   statistics_mode;
-#ifdef FM_EXP_FEATURES
+#if (DPAA_VERSION >= 11)
     uint16_t                                   frame_length_ranges[IOC_FM_PCD_CC_STATS_MAX_NUM_OF_FLR];
-#endif /* FM_EXP_FEATURES */
+#endif /* (DPAA_VERSION >= 11) */
     uint16_t                                   num_of_keys;
     uint8_t                                    key_size;
     ioc_compat_fm_pcd_cc_key_params_t          key_params[IOC_FM_PCD_MAX_NUM_OF_KEYS]; /**< compat structure*/
@@ -292,7 +292,7 @@ typedef struct ioc_compat_fm_pcd_hash_table_params_t {
 typedef struct ioc_compat_fm_pcd_hash_table_add_key_params_t {
     compat_uptr_t                       p_hash_tbl;
     uint8_t                             key_size;
-    ioc_compat_fm_pcd_cc_key_params_t  *p_key_params;
+    ioc_compat_fm_pcd_cc_key_params_t   key_params;
 } ioc_compat_fm_pcd_hash_table_add_key_params_t;
 
 typedef struct ioc_compat_fm_pcd_cc_node_modify_key_params_t {
diff --git a/include/linux/fmd/Peripherals/fm_pcd_ioctls.h b/include/linux/fmd/Peripherals/fm_pcd_ioctls.h
index bbc4434..25ee8c4 100644
--- a/include/linux/fmd/Peripherals/fm_pcd_ioctls.h
+++ b/include/linux/fmd/Peripherals/fm_pcd_ioctls.h
@@ -1375,7 +1375,7 @@ typedef struct ioc_keys_params_t {
                                                      masks at runtime. */
     ioc_fm_pcd_cc_stats_mode    statistics_mode;/**< If not e_IOC_FM_PCD_CC_STATS_MODE_NONE, the required structures for
                                                      the requested statistics mode will be allocated according to 'max_num_of_keys'. */
-#ifdef FM_EXP_FEATURES
+#if (DPAA_VERSION >= 11)
     uint16_t                    frame_length_ranges[IOC_FM_PCD_CC_STATS_MAX_NUM_OF_FLR];
                                                 /**< Relevant only for 'e_IOC_FM_PCD_CC_STATS_MODE_RMON' statistics mode.
                                                      Holds a list of programmable thresholds. For each received frame,
@@ -1385,7 +1385,7 @@ typedef struct ioc_keys_params_t {
                                                      range i-1 threshold < frame length <= range i threshold
                                                      Each range threshold must be larger then its preceding range
                                                      threshold. Last range threshold must be 0xFFFF. */
-#endif /* FM_EXP_FEATURES */
+#endif /* (DPAA_VERSION >= 11) */
     uint16_t                    num_of_keys;    /**< Number of initial keys;
                                                      Note that in case of 'action' = e_IOC_FM_PCD_ACTION_INDEXED_LOOKUP,
                                                      this field should be power-of-2 of the number of bits that are
@@ -1439,9 +1439,9 @@ typedef struct ioc_fm_pcd_hash_table_params_t {
  @Description   A structure with the arguments for the FM_PCD_HashTableAddKey ioctl() call
 *//***************************************************************************/
 typedef struct ioc_fm_pcd_hash_table_add_key_params_t {
-    void                       *p_hash_tbl;
+    void                        *p_hash_tbl;
     uint8_t                     key_size;
-    ioc_fm_pcd_cc_key_params_t *p_key_params;
+    ioc_fm_pcd_cc_key_params_t  key_params;
 } ioc_fm_pcd_hash_table_add_key_params_t;
 
 /**************************************************************************//**
-- 
1.7.9.7

