From 28ee2537b560121b9b895a749f1f7a5a0e85140d Mon Sep 17 00:00:00 2001
From: Tang Yuantian <Yuantian.Tang@freescale.com>
Date: Tue, 29 May 2012 12:35:54 +0000
Subject: [PATCH 27/27] gianfar: disallow that the 1588 is enabled/disabled
 automatically

Currently, when the ethernet interface is down/up, the 1588 is
accordingly disabled/enabled automatically. This is not what we
want sometimes.
After applying the patch, the status of 1588 keep unchanged unless
gianfar sysfs is used to disable or enable it explicitly.

Signed-off-by: Tang Yuantian <Yuantian.Tang@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/freescale/gianfar.c       |    3 ---
 drivers/net/ethernet/freescale/gianfar.h       |    4 ++--
 drivers/net/ethernet/freescale/gianfar_1588.c  |   10 ++++------
 drivers/net/ethernet/freescale/gianfar_sysfs.c |    4 ++--
 4 files changed, 8 insertions(+), 13 deletions(-)

diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index d82a868..d3a96bc 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -461,7 +461,6 @@ static void gfar_init_mac(struct net_device *ndev)
 	if (priv->ptimer) {
 		rctrl &= ~RCTRL_PAL_MASK;
 		rctrl |= RCTRL_PADDING(8) | RCTRL_PRSDEP_INIT;
-		gfar_1588_start(ndev);
 		priv->padding = 8;
 	}
 
@@ -2156,8 +2155,6 @@ void stop_gfar(struct net_device *dev)
 	unlock_tx_qs(priv);
 	local_irq_restore(flags);
 
-	gfar_1588_stop(dev);
-
 	/* Free the IRQs */
 	if (priv->device_flags & FSL_GIANFAR_DEV_HAS_MULTI_INTR) {
 		for (i = 0; i < priv->num_grps; i++)
diff --git a/drivers/net/ethernet/freescale/gianfar.h b/drivers/net/ethernet/freescale/gianfar.h
index 42d9170..c8e7d1f 100644
--- a/drivers/net/ethernet/freescale/gianfar.h
+++ b/drivers/net/ethernet/freescale/gianfar.h
@@ -1427,8 +1427,8 @@ extern irqreturn_t gfar_receive(int irq, void *dev_id);
 extern int startup_gfar(struct net_device *dev);
 extern void stop_gfar(struct net_device *dev);
 extern void gfar_halt(struct net_device *dev);
-void gfar_1588_start(struct net_device *dev);
-void gfar_1588_stop(struct net_device *dev);
+void gfar_1588_start(struct gfar_private *priv);
+void gfar_1588_stop(struct gfar_private *priv);
 int gfar_ptp_init(struct device_node *np, struct gfar_private *priv);
 void gfar_ptp_cleanup(struct gfar_private *priv);
 int gfar_ioctl_1588(struct net_device *dev, struct ifreq *ifr, int cmd);
diff --git a/drivers/net/ethernet/freescale/gianfar_1588.c b/drivers/net/ethernet/freescale/gianfar_1588.c
index 0528fe8..5d09891 100644
--- a/drivers/net/ethernet/freescale/gianfar_1588.c
+++ b/drivers/net/ethernet/freescale/gianfar_1588.c
@@ -675,6 +675,8 @@ int gfar_ptp_init(struct device_node *np, struct gfar_private *priv)
 					DEFAULT_PTP_RX_BUF_SZ))
 		goto rxbuf;
 
+	gfar_1588_start(priv);
+
 	return 0;
 
 rxbuf:
@@ -698,10 +700,8 @@ void gfar_ptp_cleanup(struct gfar_private *priv)
 }
 
 /* 1588 Module intialization */
-void gfar_1588_start(struct net_device *dev)
+void gfar_1588_start(struct gfar_private *priv)
 {
-	struct gfar_private *priv = netdev_priv(dev);
-
 	if (!priv->ptimer)
 		return;
 
@@ -714,10 +714,8 @@ void gfar_1588_start(struct net_device *dev)
 }
 
 /* When PTP is disabled this routing is called */
-void gfar_1588_stop(struct net_device *dev)
+void gfar_1588_stop(struct gfar_private *priv)
 {
-	struct gfar_private *priv = netdev_priv(dev);
-
 	if (!(priv->device_flags & FSL_GIANFAR_DEV_HAS_TIMER))
 		return;
 
diff --git a/drivers/net/ethernet/freescale/gianfar_sysfs.c b/drivers/net/ethernet/freescale/gianfar_sysfs.c
index 56d7aea..4018493 100644
--- a/drivers/net/ethernet/freescale/gianfar_sysfs.c
+++ b/drivers/net/ethernet/freescale/gianfar_sysfs.c
@@ -418,9 +418,9 @@ static ssize_t gfar_set_ptp_1588(struct device *dev,
 	lock_rx_qs(priv);
 
 	if (num)
-		gfar_1588_start(ndev);
+		gfar_1588_start(priv);
 	else
-		gfar_1588_stop(ndev);
+		gfar_1588_stop(priv);
 
 	unlock_rx_qs(priv);
 	unlock_tx_qs(priv);
-- 
1.7.9.7

