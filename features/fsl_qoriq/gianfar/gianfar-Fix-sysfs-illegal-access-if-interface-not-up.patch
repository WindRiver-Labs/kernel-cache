From c0d12f0d75171c2e747bce6db1ad706a4e7b4cdd Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@freescale.com>
Date: Thu, 26 Apr 2012 18:30:26 +0300
Subject: [PATCH 13/27] gianfar: Fix sysfs illegal access if interface not up

If given interface is not up, priv->recycle shall not be accessed,
as it might be NULL.

Signed-off-by: Claudiu Manoil <claudiu.manoil@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/freescale/gianfar_sysfs.c |   26 ++++++++++++++++--------
 1 file changed, 18 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/freescale/gianfar_sysfs.c b/drivers/net/ethernet/freescale/gianfar_sysfs.c
index 38021ba..f394945 100644
--- a/drivers/net/ethernet/freescale/gianfar_sysfs.c
+++ b/drivers/net/ethernet/freescale/gianfar_sysfs.c
@@ -323,27 +323,37 @@ static ssize_t gfar_show_recycle_cntxt(struct device *dev,
 					 struct device_attribute *attr,
 					 char *buf)
 {
-	struct gfar_private *priv = netdev_priv(to_net_dev(dev));
+	struct net_device *ndev = to_net_dev(dev);
+	struct gfar_private *priv = netdev_priv(ndev);
 	struct gfar_recycle_cntxt *recycle_cntxt;
 	struct gfar_recycle_cntxt_percpu *local;
 	unsigned int recycled_free_count, recycled_alloc_count;
 	int cpu;
 
+	if (!priv->recycle)
+		return 0;
+
 	recycle_cntxt = priv->recycle;
 	recycled_alloc_count = recycled_free_count = 0;
 
-	printk(KERN_NOTICE "recycle max %d\n", recycle_cntxt->recycle_max);
-	printk(KERN_NOTICE "queue swap during: free - %d, alloc - %d\n",
-		recycle_cntxt->free_swap_count,
-		recycle_cntxt->alloc_swap_count);
+	if (netif_msg_ifup(priv)) {
+		pr_notice("recycle max %d\n", recycle_cntxt->recycle_max);
+		pr_notice("queue swap during: free - %d, alloc - %d\n",
+					recycle_cntxt->free_swap_count,
+					recycle_cntxt->alloc_swap_count);
+	}
+
 	for_each_possible_cpu(cpu) {
 		local = per_cpu_ptr(recycle_cntxt->local, cpu);
 		recycled_alloc_count += local->alloc_count;
 		recycled_free_count += local->free_count;
 	}
-	printk(KERN_NOTICE \
-		"total recycle free count: %d, and recycle alloc count: %d\n",
-		recycled_free_count, recycled_alloc_count);
+
+	if (netif_msg_ifup(priv))
+		pr_notice("total recycle free count: %d"
+				", and recycle alloc count: %d\n",
+				recycled_free_count, recycled_alloc_count);
+
 	return sprintf(buf, "%d\n", recycle_cntxt->recycle_max);
 }
 
-- 
1.7.9.7

