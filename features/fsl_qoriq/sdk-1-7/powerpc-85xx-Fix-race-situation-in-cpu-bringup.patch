From 5b88a3b22565809cd3eb85ca16629b9b615da29b Mon Sep 17 00:00:00 2001
From: Par Olsson <par.olsson@windriver.com>
Date: Mon, 29 Sep 2014 11:11:45 +0200
Subject: [PATCH 2/2] powerpc: 85xx: Fix race situation in cpu bringup

When activating the secondary thread, it sometimes reaches
take_timebase before cur_booting_core is set to correct value.

t4240.cpu[0][0]: wrote cur_booting_core 14 new value:0xe
t4240.cpu[7][0]: enters mpc85xx_take_timebase 14
t4240.cpu[0][0]: enters mpc85xx_give_timebase 14
t4240.cpu[0][0]: wrote tb_valid 13 new value:0x1
t4240.cpu[7][0]: wrote tb_valid 14 new value:0x0

t4240.cpu[0][0]: wrote cur_booting_core 15 new value:0xf
t4240.cpu[7][1]: enters mpc85xx_take_timebase 15
t4240.cpu[0][0]: enters mpc85xx_give_timebase 15

t4240.cpu[0][0]: wrote cur_booting_core 16 new value:0x10
t4240.cpu[8][0]: enters mpc85xx_take_timebase 16
t4240.cpu[0][0]: enters mpc85xx_give_timebase 16
t4240.cpu[0][0]: wrote tb_valid 15 new value:0x1
t4240.cpu[8][0]: wrote tb_valid 16 new value:0x0

t4240.cpu[8][1]: enters mpc85xx_take_timebase 17
t4240.cpu[0][0]: wrote cur_booting_core 17 new value:0x11
t4240.cpu[0][0]: enters mpc85xx_give_timebase 17

In this case cpu[8][1] actually manages to reach take_timebase()
before cpu[0][0] has set cur_booting_core to 0x11 (it's still at 0x10).
This will cause cpu[8][1] to go down in take_timebase() and wait
for timebase synchronization to take place, which will not happen...

When give_timebase() on cpu[0][0] is reached, cur_booting_core
now correctly indicate that this is the secondary thread and it
will jump out early, skipping the timebase synchronization
which cpu[8][1] expects..

Signed-off-by: Par Olsson <par.olsson@windriver.com>
[Yong Zhang: make the code take effect for the first thread too]
Signed-off-by: Yong Zhang <yong.zhang@windriver.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 arch/powerpc/platforms/85xx/smp.c |    8 +++++---
 1 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/arch/powerpc/platforms/85xx/smp.c b/arch/powerpc/platforms/85xx/smp.c
index 0aa9305..26b3772 100644
--- a/arch/powerpc/platforms/85xx/smp.c
+++ b/arch/powerpc/platforms/85xx/smp.c
@@ -475,6 +475,11 @@ static int smp_85xx_kick_cpu(int nr)
 
 	pr_debug("smp_85xx_kick_cpu: kick CPU #%d\n", nr);
 
+	/*
+	 * Set cur_booting_core before kick cpu to avoid
+	 * take_timebase to be called with old value.
+	 */
+	cur_booting_core = hw_cpu;
 #ifdef CONFIG_PPC64
 	/* If the cpu we're kicking is a thread, kick it and return */
 	if (smt_capable() && (cpu_thread_in_core(nr) != 0)) {
@@ -507,8 +512,6 @@ static int smp_85xx_kick_cpu(int nr)
 			smp_generic_kick_cpu(nr);
 
 			generic_set_cpu_up(nr);
-			cur_booting_core = hw_cpu;
-
 			local_irq_restore(flags);
 
 			return 0;
@@ -664,7 +667,6 @@ static int smp_85xx_kick_cpu(int nr)
 #endif
 	/* Corresponding to generic_set_cpu_dead() */
 	generic_set_cpu_up(nr);
-	cur_booting_core = hw_cpu;
 
 out:
 	local_irq_restore(flags);
-- 
1.7.5.4

