From 92f25b72e724ab8c7eb36002670284162bf8ad6f Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@freescale.com>
Date: Tue, 16 Sep 2014 14:45:32 +0300
Subject: [PATCH 018/399] dpaa_eth: add explicit cast where needed

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
Change-Id: I6fe0041436e52d76a0677380935d15d8363ddbeb
Reviewed-on: http://git.am.freescale.net:8181/18839
Reviewed-by: Marian Cristian Rotariu <marian.rotariu@freescale.com>
[Lu:Original patch taken from
QorIQ-SDK-V1.7-SOURCE-20141218-yocto.iso]
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h      |    4 ++--
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    4 ++--
 .../net/ethernet/freescale/dpa/dpaa_eth_generic.c  |    9 +++++----
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c   |   10 +++++-----
 .../net/ethernet/freescale/dpa/dpaa_eth_shared.c   |    2 +-
 drivers/net/ethernet/freescale/dpa/mac.c           |    2 +-
 drivers/net/ethernet/freescale/dpa/offline_port.c  |    2 +-
 7 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index cb454ce..75ddf2f 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -495,11 +495,11 @@ static inline uint16_t dpa_get_headroom(struct dpa_buffer_layout_s *bl)
 	 *
 	 * Also make sure the headroom is a multiple of data_align bytes
 	 */
-	headroom = bl->priv_data_size +
+	headroom = (uint16_t)(bl->priv_data_size +
 		   (bl->parse_results ? DPA_PARSE_RESULTS_SIZE : 0) +
 		   (bl->hash_results || bl->time_stamp ?
 		    DPA_TIME_STAMP_SIZE + DPA_HASH_RESULTS_SIZE : 0) +
-		   bl->manip_extra_space;
+		   bl->manip_extra_space);
 
 	return bl->data_align ? ALIGN(headroom, bl->data_align) : headroom;
 }
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index d45481a..5ffe7e1 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -1224,7 +1224,7 @@ int dpa_fq_init(struct dpa_fq *dpa_fq, bool td_enable)
 				dpa_fq->fq_type == FQ_TYPE_TX_CONF_MQ) {
 			initfq.we_mask |= QM_INITFQ_WE_CGID;
 			initfq.fqd.fq_ctrl |= QM_FQCTRL_CGE;
-			initfq.fqd.cgid = priv->cgr_data.cgr.cgrid;
+			initfq.fqd.cgid = (uint8_t)priv->cgr_data.cgr.cgrid;
 			/* Set a fixed overhead accounting, in an attempt to
 			 * reduce the impact of fixed-size skb shells and the
 			 * driver's needed headroom on system memory. This is
@@ -1272,7 +1272,7 @@ int dpa_fq_init(struct dpa_fq *dpa_fq, bool td_enable)
 				 dpa_fq->fq_type == FQ_TYPE_RX_PCD)) {
 			initfq.we_mask |= QM_INITFQ_WE_CGID;
 			initfq.fqd.fq_ctrl |= QM_FQCTRL_CGE;
-			initfq.fqd.cgid = priv->ingress_cgr.cgrid;
+			initfq.fqd.cgid = (uint8_t)priv->ingress_cgr.cgrid;
 			/* Set a fixed overhead accounting, just like for the
 			 * egress CGR.
 			 */
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c
index 8f2ad0f..07b80ba 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c
@@ -433,7 +433,8 @@ dpa_generic_rx_dqrr(struct qman_portal *portal,
 	/* The skb is currently pointed at head + headroom. The packet
 	 * starts at skb->head + pad + fd offset.
 	 */
-	data_start = pad + dpa_fd_offset(fd) - skb_headroom(skb);
+	data_start = (unsigned int)(pad + dpa_fd_offset(fd) -
+				    skb_headroom(skb));
 	skb_put(skb, dpa_fd_length(fd) + data_start);
 	skb_pull(skb, data_start);
 	skb->protocol = eth_type_trans(skb, netdev);
@@ -576,7 +577,7 @@ int dpa_generic_tx_csum(struct dpa_generic_priv_s *priv,
 	}
 
 	/* At index 0 is IPOffset_1 as defined in the Parse Results */
-	parse_result->ip_off[0] = skb_network_offset(skb);
+	parse_result->ip_off[0] = (uint8_t)skb_network_offset(skb);
 	parse_result->l4_off = skb_transport_offset(skb);
 
 	/* Enable L3 (and L4, if TCP or UDP) HW checksum. */
@@ -652,7 +653,7 @@ static int __hot dpa_generic_tx(struct sk_buff *skb, struct net_device *netdev)
 	fd.format = qm_fd_contig;
 	fd.length20 = skb->len;
 	fd.offset = priv->tx_headroom;
-	fd.addr_hi = upper_32_bits(addr);
+	fd.addr_hi = (uint8_t)upper_32_bits(addr);
 	fd.addr_lo = lower_32_bits(addr);
 	/* fd.cmd |= FM_FD_CMD_FCO; */
 	fd.bpid = bp->bpid;
@@ -959,7 +960,7 @@ static int dpa_generic_rx_bp_probe(struct platform_device *_of_dev,
 			goto _return_of_node_put;
 		}
 
-		bp[i].bpid = *bpid;
+		bp[i].bpid = (uint8_t)*bpid;
 
 		bpool_cfg = of_get_property(dev_node, "fsl,bpool-ethernet-cfg",
 				&lenp);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index a13f4d4..509e518 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -261,14 +261,14 @@ struct sk_buff *_dpa_cleanup_tx_fd(const struct dpa_priv_s *priv,
 #endif /* CONFIG_FSL_DPAA_TS */
 
 		/* sgt[0] is from lowmem, was dma_map_single()-ed */
-		dma_unmap_single(dpa_bp->dev, sgt[0].addr,
+		dma_unmap_single(dpa_bp->dev, (dma_addr_t)sgt[0].addr,
 				sgt[0].length, dma_dir);
 
 		/* remaining pages were mapped with dma_map_page() */
 		for (i = 1; i < nr_frags; i++) {
 			DPA_BUG_ON(sgt[i].extension);
 
-			dma_unmap_page(dpa_bp->dev, sgt[i].addr,
+			dma_unmap_page(dpa_bp->dev, (dma_addr_t)sgt[i].addr,
 					sgt[i].length, dma_dir);
 		}
 
@@ -783,7 +783,7 @@ static int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 		goto sg0_map_failed;
 
 	}
-	sgt[0].addr_hi = upper_32_bits(addr);
+	sgt[0].addr_hi = (uint8_t)upper_32_bits(addr);
 	sgt[0].addr_lo = lower_32_bits(addr);
 
 	/* populate the rest of SGT entries */
@@ -805,7 +805,7 @@ static int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 		}
 
 		/* keep the offset in the address */
-		sgt[i].addr_hi = upper_32_bits(addr);
+		sgt[i].addr_hi = (uint8_t)upper_32_bits(addr);
 		sgt[i].addr_lo = lower_32_bits(addr);
 	}
 	sgt[i - 1].final = 1;
@@ -830,7 +830,7 @@ static int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 
 	fd->bpid = 0xff;
 	fd->cmd |= FM_FD_CMD_FCO;
-	fd->addr_hi = upper_32_bits(addr);
+	fd->addr_hi = (uint8_t)upper_32_bits(addr);
 	fd->addr_lo = lower_32_bits(addr);
 
 	return 0;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
index 90d2849..944d7c5 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
@@ -488,7 +488,7 @@ int __hot dpa_shared_tx(struct sk_buff *skb, struct net_device *net_dev)
 	fd.bpid = dpa_bp->bpid;
 
 	fd.length20 = skb_headlen(skb);
-	fd.addr_hi = bmb.hi;
+	fd.addr_hi = (uint8_t)bmb.hi;
 	fd.addr_lo = bmb.lo;
 	fd.offset = priv->tx_headroom;
 
diff --git a/drivers/net/ethernet/freescale/dpa/mac.c b/drivers/net/ethernet/freescale/dpa/mac.c
index 20994d4..2c349ac 100644
--- a/drivers/net/ethernet/freescale/dpa/mac.c
+++ b/drivers/net/ethernet/freescale/dpa/mac.c
@@ -258,7 +258,7 @@ static int __cold mac_probe(struct platform_device *_of_dev)
 		goto _return_dev_set_drvdata;
 	}
 	BUG_ON(lenp != sizeof(uint32_t));
-	mac_dev->cell_index = *uint32_prop;
+	mac_dev->cell_index = (uint8_t)*uint32_prop;
 
 	/* Get the MAC address */
 	mac_addr = of_get_mac_address(mac_node);
diff --git a/drivers/net/ethernet/freescale/dpa/offline_port.c b/drivers/net/ethernet/freescale/dpa/offline_port.c
index 81d8dac..8bc5b95 100644
--- a/drivers/net/ethernet/freescale/dpa/offline_port.c
+++ b/drivers/net/ethernet/freescale/dpa/offline_port.c
@@ -698,7 +698,7 @@ config_port:
 	dev_dbg(dpa_oh_dev, "OH port number of pools = %u\n",
 			crt_ext_pools_count);
 
-	oh_port_tx_params.num_pools = crt_ext_pools_count;
+	oh_port_tx_params.num_pools = (uint8_t)crt_ext_pools_count;
 
 	for (i = 0; i < crt_ext_pools_count; i++) {
 		bpool_node = of_find_node_by_phandle(bpool_handle[i]);
-- 
1.7.5.4

