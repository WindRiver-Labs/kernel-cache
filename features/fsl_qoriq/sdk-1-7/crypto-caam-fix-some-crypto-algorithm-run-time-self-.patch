From f271a1673f85c9c64251152b10b5e09ccb5397bd Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Fri, 22 May 2015 13:31:34 +0800
Subject: [PATCH] crypto: caam: fix some crypto algorithm run-time self test
 failed

This patch is original taken from
"QorIQ-SDK-V1.7-SOURCE-20141218-yocto_RDS_20150206.iso" and the commit is
"crypto: caam - add support for gcm(aes)". Here re-pick the patch to fix
some crypto algorithm run-time self test failed issue, since some pieces
of the code are missing to merge.

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/crypto/caam/caamalg.c |   21 +++++++++++++--------
 1 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/drivers/crypto/caam/caamalg.c b/drivers/crypto/caam/caamalg.c
index b4ea11c..12ae32a 100644
--- a/drivers/crypto/caam/caamalg.c
+++ b/drivers/crypto/caam/caamalg.c
@@ -2948,6 +2948,11 @@ static struct aead_edesc *aead_edesc_alloc(struct aead_request *req,
 					 DMA_FROM_DEVICE, dst_chained);
 	}
 
+	iv_dma = dma_map_single(jrdev, req->iv, ivsize, DMA_TO_DEVICE);
+	if (dma_mapping_error(jrdev, iv_dma)) {
+		dev_err(jrdev, "unable to map IV\n");
+		return ERR_PTR(-ENOMEM);
+	}
 	if (((ctx->class1_alg_type & OP_ALG_ALGSEL_MASK) ==
 	      OP_ALG_ALGSEL_AES) &&
 	    ((ctx->class1_alg_type & OP_ALG_AAI_MASK) == OP_ALG_AAI_GCM))
@@ -3000,10 +3005,10 @@ static struct aead_edesc *aead_edesc_alloc(struct aead_request *req,
 	if (!all_contig) {
 		if (!is_gcm && assoc_nents) {
 			sg_to_sec4_sg(req->assoc,
-				      (assoc_nents ? : 1),
-				      edesc->sec4_sg +
-				      sec4_sg_index, 0);
-			sec4_sg_index += assoc_nents ? : 1;
+				      assoc_nents,
+				      edesc->sec4_sg + sec4_sg_index,
+				      0);
+			sec4_sg_index += assoc_nents;
 		}
 
 		dma_to_sec4_sg_one(edesc->sec4_sg + sec4_sg_index,
@@ -3012,10 +3017,10 @@ static struct aead_edesc *aead_edesc_alloc(struct aead_request *req,
 
 		if (is_gcm && assoc_nents) {
 			sg_to_sec4_sg(req->assoc,
-				      (assoc_nents ? : 1),
-				      edesc->sec4_sg +
-				      sec4_sg_index, 0);
-			sec4_sg_index += assoc_nents ? : 1;
+				      assoc_nents,
+				      edesc->sec4_sg + sec4_sg_index,
+				      0);
+			sec4_sg_index += assoc_nents;
 		}
 
 		sg_to_sec4_sg_last(req->src,
-- 
1.7.5.4

