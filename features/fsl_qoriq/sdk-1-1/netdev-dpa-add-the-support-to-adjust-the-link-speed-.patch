From 4207f88a911165b9b468144901a78021838aa6ff Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Wed, 30 May 2012 13:24:09 +0800
Subject: [PATCH 3/4] netdev/dpa: add the support to adjust the link speed for the dtsec used by userspace

Currently the userspace driver for dtsec doesn't support to adjust
the link speed according to the auto negotiation of phy. So the dtsec
can only works in 1000M mode by default. In order to fix this
limitation, we add the support to adjust the link speed of dtsec by
adding a "fixed-link" property in the mac device node. For example,
if you want to set the dtsec to 100M duplex mode, you can add the
following to the mac device mode.

        fixed-link = <0 1 100 0 0>;

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
Integrated-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c |    3 ++
 drivers/net/ethernet/freescale/dpa/mac-api.c  |   28 +++++++++++++++++++++++++
 drivers/net/ethernet/freescale/dpa/mac.h      |    1 +
 3 files changed, 32 insertions(+), 0 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 227212f..3690db8 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -3047,6 +3047,9 @@ dpaa_eth_probe(struct platform_device *_of_dev)
 			for_each_port_device(i, mac_dev->port_dev)
 				fm_port_enable(mac_dev->port_dev[i]);
 
+		if (mac_dev->adjust_link)
+			mac_dev->adjust_link(mac_dev);
+
 		return 0;
 	}
 
diff --git a/drivers/net/ethernet/freescale/dpa/mac-api.c b/drivers/net/ethernet/freescale/dpa/mac-api.c
index a334317..e752333 100644
--- a/drivers/net/ethernet/freescale/dpa/mac-api.c
+++ b/drivers/net/ethernet/freescale/dpa/mac-api.c
@@ -591,6 +591,33 @@ static int __cold fm_rtc_set_drift(struct net_device *net_dev, uint32_t drift)
 	return _errno;
 }
 
+/*
+ * For the dtsec used by usdpaa, we support to set the mac speed by
+ * adding a "fixed-link" property in DTB.
+ */
+static int __cold dtsec_adjust_link(struct mac_device *mac_dev)
+{
+	struct device_node *mac_node = to_platform_device(mac_dev->dev)->dev.of_node;
+	const u32 *phy;
+	int _errno = 0;
+	t_Error	err;
+	int sz;
+
+	phy = of_get_property(mac_node, "fixed-link", &sz);
+	if (!phy || sz < sizeof(*phy) * 5)
+		return _errno;
+
+	err = FM_MAC_AdjustLink(
+			((struct mac_priv_s *)macdev_priv(mac_dev))->mac,
+			phy[2], phy[1]);
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0))
+		dpaa_eth_err(mac_dev->dev, "FM_MAC_AdjustLink() = 0x%08x\n",
+				err);
+
+	return _errno;
+}
+
 static int __cold fm_rtc_set_alarm(struct net_device *net_dev, uint32_t id,
 		uint64_t time)
 {
@@ -652,6 +679,7 @@ static void __devinit __cold setup_dtsec(struct mac_device *mac_dev)
 	mac_dev->fm_rtc_set_cnt		= fm_rtc_set_cnt;
 	mac_dev->fm_rtc_get_drift	= fm_rtc_get_drift;
 	mac_dev->fm_rtc_set_drift	= fm_rtc_set_drift;
+	mac_dev->adjust_link		= dtsec_adjust_link;
 	mac_dev->fm_rtc_set_alarm	= fm_rtc_set_alarm;
 	mac_dev->fm_rtc_set_fiper	= fm_rtc_set_fiper;
 }
diff --git a/drivers/net/ethernet/freescale/dpa/mac.h b/drivers/net/ethernet/freescale/dpa/mac.h
index fb4b94c..f95dde8 100644
--- a/drivers/net/ethernet/freescale/dpa/mac.h
+++ b/drivers/net/ethernet/freescale/dpa/mac.h
@@ -87,6 +87,7 @@ struct mac_device {
 	int (*fm_rtc_set_cnt)(struct net_device *net_dev, uint64_t ts);
 	int (*fm_rtc_get_drift)(struct net_device *net_dev, uint32_t *drift);
 	int (*fm_rtc_set_drift)(struct net_device *net_dev, uint32_t drift);
+	int (*adjust_link)(struct mac_device *mac_dev);
 	int (*fm_rtc_set_alarm)(struct net_device *net_dev, uint32_t id,
 			uint64_t time);
 	int (*fm_rtc_set_fiper)(struct net_device *net_dev, uint32_t id,
-- 
1.7.0.4

