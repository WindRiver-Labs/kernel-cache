From 9b9f3ab14dd1bad6a53845851d84a7ef9f0272ef Mon Sep 17 00:00:00 2001
From: Andy Fleming <afleming@freescale.com>
Date: Thu, 27 Sep 2012 11:01:51 -0500
Subject: [PATCH 074/227] T4: Make thread support more dynamic

Change all the code which used CONFIG_FSL_THREADS so that it
does a runtime feature bit fixup, instead. While we're at it,
eliminate the CONFIG option, altogether.

Signed-off-by: Andy Fleming <afleming@freescale.com>
[Kevin: Original patch taken from fsl sdk 1.3.1
QorIQ-SDK-V1.3.1-SOURCE-20121220-yocto.iso.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/powerpc/include/asm/reg_booke.h |    3 ---
 arch/powerpc/kernel/exceptions-64e.S |    9 ++++-----
 arch/powerpc/kernel/head_64.S        |    8 ++++----
 arch/powerpc/kernel/setup_64.c       |    6 +++++-
 arch/powerpc/mm/tlb_low_64e.S        |   24 +++++++++++-------------
 arch/powerpc/platforms/85xx/Kconfig  |    8 --------
 6 files changed, 24 insertions(+), 34 deletions(-)

diff --git a/arch/powerpc/include/asm/reg_booke.h b/arch/powerpc/include/asm/reg_booke.h
index 492fcdf..17e831c 100644
--- a/arch/powerpc/include/asm/reg_booke.h
+++ b/arch/powerpc/include/asm/reg_booke.h
@@ -714,7 +714,6 @@
 #define MMUBE1_VBE4		0x00000002
 #define MMUBE1_VBE5		0x00000001
 
-#ifdef CONFIG_FSL_THREADS
 #define TMRN_TPRI0	0x0C0	/* Thread Priority Register 0 */
 #define TMRN_TPRI1	0x0C1	/* Thread Priority Register 1 */
 #define TMRN_TPRI2	0x0C2	/* Thread Priority Register 2 */
@@ -735,7 +734,5 @@
 #define MTTMR(tmr, reg)	.long (0x7c0003dc | TMRN(tmr) | (reg << 21))
 #define MFTMR(tmr, reg)	.long (0x7c0002dc | TMRN(tmr) | (reg << 21))
 
-#endif
-
 #endif /* __ASM_POWERPC_REG_BOOKE_H__ */
 #endif /* __KERNEL__ */
diff --git a/arch/powerpc/kernel/exceptions-64e.S b/arch/powerpc/kernel/exceptions-64e.S
index e640f96..a325602 100644
--- a/arch/powerpc/kernel/exceptions-64e.S
+++ b/arch/powerpc/kernel/exceptions-64e.S
@@ -1324,10 +1324,10 @@ _GLOBAL(book3e_secondary_core_init)
 	/* Init global core bits */
 2:	bl	.init_core_book3e
 
-#ifdef CONFIG_FSL_THREADS
+BEGIN_FTR_SECTION
 	/* Start threads */
 	bl      .fsl_enable_threads
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 
 	/* Init per-thread bits */
 3:	bl	.init_thread_book3e
@@ -1369,8 +1369,8 @@ _GLOBAL(init_core_book3e)
 	sync
 	blr
 
-#ifdef CONFIG_FSL_THREADS
 _GLOBAL(fsl_enable_threads)
+BEGIN_FTR_SECTION
 	/* Configure the MSR per the default */
 	LOAD_REG_IMMEDIATE(r3, MSR_KERNEL);
 	MTTMR(TMRN_IMSR1, 3);
@@ -1387,8 +1387,7 @@ _GLOBAL(fsl_enable_threads)
 	mtspr	SPRN_TENS, r3
 
 	blr
-#endif
-
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 
 _STATIC(init_thread_book3e)
 	lis	r3,(SPRN_EPCR_ICM | SPRN_EPCR_GICM)@h
diff --git a/arch/powerpc/kernel/head_64.S b/arch/powerpc/kernel/head_64.S
index ca6d988..0013e4c 100644
--- a/arch/powerpc/kernel/head_64.S
+++ b/arch/powerpc/kernel/head_64.S
@@ -167,8 +167,8 @@ exception_marker:
 #include "exceptions-64s.S"
 #endif
 
-#ifdef CONFIG_FSL_THREADS
 _GLOBAL(fsl_secondary_thread_init)
+BEGIN_FTR_SECTION
 	/* Enable branch prediction */
 	lis     r3,BUCSR_INIT@h
 	ori     r3,r3,BUCSR_INIT@l
@@ -178,7 +178,7 @@ _GLOBAL(fsl_secondary_thread_init)
 	mfspr	r3, SPRN_PIR
 	rlwimi	r3, r3, 30, 2, 30
 	mtspr	SPRN_PIR, r3
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 
 _GLOBAL(generic_secondary_thread_init)
 	mr	r24,r3
@@ -808,9 +808,9 @@ _INIT_GLOBAL(start_here_common)
 	/* Do more system initializations in virtual mode */
 	bl	.setup_system
 
-#ifdef CONFIG_FSL_THREADS
+BEGIN_FTR_SECTION
 	bl	.fsl_enable_threads
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 
 	/* Mark interrupts soft and hard disabled (they might be enabled
 	 * in the PACA when doing hotplug)
diff --git a/arch/powerpc/kernel/setup_64.c b/arch/powerpc/kernel/setup_64.c
index b8d2bbb..60d7afc 100644
--- a/arch/powerpc/kernel/setup_64.c
+++ b/arch/powerpc/kernel/setup_64.c
@@ -447,7 +447,11 @@ void __init setup_system(void)
 	smp_setup_cpu_maps();
 	check_smt_enabled();
 
-#if defined(CONFIG_SMP) && !defined(CONFIG_FSL_THREADS)
+	/*
+	 * Freescale Book3e parts spin in a loop provided by firmware,
+	 * so smp_release_cpus() does nothing for them
+	 */
+#if defined(CONFIG_SMP) && !defined(CONFIG_PPC_FSL_BOOK3E)
 	/* Release secondary cpus out of their spinloops at 0x60 now that
 	 * we can map physical -> logical CPU ids
 	 */
diff --git a/arch/powerpc/mm/tlb_low_64e.S b/arch/powerpc/mm/tlb_low_64e.S
index c473726..267d408 100644
--- a/arch/powerpc/mm/tlb_low_64e.S
+++ b/arch/powerpc/mm/tlb_low_64e.S
@@ -102,9 +102,9 @@
 	ori	r10,r10,_PAGE_PRESENT
 	oris	r11,r10,_PAGE_ACCESSED@h
 
-#ifdef CONFIG_FSL_THREADS
+BEGIN_FTR_SECTION
 	ld	r10,PACA_TLB_PER_CORE_PTR(r13)
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 
 	TLB_MISS_STATS_SAVE_INFO_BOLTED
 	bne	tlb_miss_kernel_bolted
@@ -122,11 +122,11 @@ tlb_miss_common_bolted:
  * r10 = tlb_per_core ptr
  */
 
-#ifdef CONFIG_FSL_THREADS
 	/*
 	 * Search if we already have an entry for that virtual
 	 * address, and if we do, bail out.
 	 */
+BEGIN_FTR_SECTION
 	mtocrf	0x01,r10
 	addi	r10,r10,PACA_TLB_LOCK-1 /* -1 to compensate for low bit set */
 	bf	31,1f		/* no lock if TLB_PER_CORE_HAS_LOCK clear */
@@ -143,17 +143,17 @@ tlb_miss_common_bolted:
 	b	2b
 	.previous
 1:
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 
 	rldicl	r15,r16,64-PGDIR_SHIFT+3,64-PGD_INDEX_SIZE-3
 	cmpldi	cr0,r14,0
 	clrrdi	r15,r15,3
 	beq	tlb_miss_fault_bolted	/* No PGDIR, bail */
 
-#ifdef CONFIG_FSL_THREADS
+	ldx	r14,r14,r15		/* grab pgd entry */
+BEGIN_FTR_SECTION
 	mfspr	r10,SPRN_MAS2
 	tlbsx	0,r16
-	ldx	r14,r14,r15		/* grab pgd entry */
 	mfspr	r15,SPRN_MAS1
 	andis.	r15,r15,MAS1_VALID@h
 	bne	tlb_miss_done_bolted	/* tlb exists already, bail */
@@ -163,9 +163,7 @@ tlb_miss_common_bolted:
 	oris	r15,r15,MAS1_VALID@h
 	mtspr	SPRN_MAS1,r15
 	mtspr	SPRN_MAS2,r10
-#else
-	ldx	r14,r14,r15		/* grab pgd entry */
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 
 #ifndef CONFIG_PPC_64K_PAGES
 	rldicl	r15,r16,64-PUD_SHIFT+3,64-PUD_INDEX_SIZE-3
@@ -220,14 +218,14 @@ tlb_miss_common_bolted:
 
 tlb_miss_done_bolted:
 	.macro	tlb_unlock_bolted
-#ifdef CONFIG_FSL_THREADS
+BEGIN_FTR_SECTION
 	ld	r10,PACA_TLB_PER_CORE_PTR(r13)
 	bf	31,1f
 	li	r15,0
 	isync
 	stb	r15,PACA_TLB_LOCK-1(r10)
 1:
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 	.endm
 
 	tlb_unlock_bolted
@@ -270,9 +268,9 @@ itlb_miss_fault_bolted:
 	TLB_MISS_STATS_SAVE_INFO_BOLTED
 	bne-	itlb_miss_fault_bolted
 
-#ifdef CONFIG_FSL_THREADS
+BEGIN_FTR_SECTION
 	ld	r10,PACA_TLB_PER_CORE_PTR(r13)
-#endif
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
 	li	r11,_PAGE_PRESENT|_PAGE_EXEC	/* Base perm */
 
 	/* We do the user/kernel test for the PID here along with the RW test
diff --git a/arch/powerpc/platforms/85xx/Kconfig b/arch/powerpc/platforms/85xx/Kconfig
index d2c0ca5..2a49034 100644
--- a/arch/powerpc/platforms/85xx/Kconfig
+++ b/arch/powerpc/platforms/85xx/Kconfig
@@ -286,14 +286,6 @@ config B4860_QDS
 	help
 	  This option enables support for the B4860 QDS board
 
-# Note that this is a big hack, surely we have to figure this out
-# at runtime.
-config FSL_THREADS
-	bool "Freescale smt"
-	default y
-	help
-	  This option enables support for e6500 SMT
-
 config P5020_DS
 	bool "Freescale P5020 DS"
 	select DEFAULT_UIMAGE
-- 
1.7.9.7

