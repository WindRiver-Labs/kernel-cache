From 16a61b9ecbd78d166409c35e7b1bd1ee7ffeeeeb Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@freescale.com>
Date: Fri, 23 Nov 2012 19:25:21 +0200
Subject: [PATCH 180/227] dpaa_eth: add sysfs entry for MAC registers

Add a new sysfs entry exporting the MAC registers values.
Remove sysfs entries on driver unload.

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
[Kevin: Original patch taken from fsl sdk 1.3.1
QorIQ-SDK-V1.3.1-SOURCE-20121220-yocto.iso.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c |   39 +++++++++++++++++++++++++
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h |    7 +++++
 drivers/net/ethernet/freescale/dpa/mac-api.c  |    8 +++++
 3 files changed, 54 insertions(+)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index e274086..0d9fede 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -3640,14 +3640,51 @@ static ssize_t dpaa_eth_show_dflt_bpid(struct device *dev,
 
 static DEVICE_ATTR(dflt_bpid, S_IRUGO, dpaa_eth_show_dflt_bpid, NULL);
 
+static ssize_t dpaa_eth_show_mac_regs(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct dpa_priv_s *priv = netdev_priv(to_net_dev(dev));
+	struct mac_device *mac_dev = priv->mac_dev;
+
+	fm_mac_dump_regs(mac_dev);
+
+	return 0;
+}
+
+static DEVICE_ATTR(mac_regs, S_IRUGO, dpaa_eth_show_mac_regs, NULL);
+
 static void __devinit dpaa_eth_sysfs_init(struct device *dev)
 {
+	struct dpa_priv_s *priv = netdev_priv(to_net_dev(dev));
+	int i = 0;
+
 	if (device_create_file(dev, &dev_attr_device_addr))
 		dev_err(dev, "Error creating dpaa_eth addr file\n");
+	priv->sysfs_attrs[i++] = &dev_attr_device_addr;
+
 	if (device_create_file(dev, &dev_attr_fqids))
 		dev_err(dev, "Error creating dpaa_eth fqids file\n");
+	priv->sysfs_attrs[i++] = &dev_attr_fqids;
+
 	if (device_create_file(dev, &dev_attr_dflt_bpid))
 		dev_err(dev, "Error creating dpaa_eth dflt_bpid file\n");
+	priv->sysfs_attrs[i++] = &dev_attr_dflt_bpid;
+
+	if (device_create_file(dev, &dev_attr_mac_regs))
+		dev_err(dev, "Error creating dpaa_eth mac_regs file\n");
+	priv->sysfs_attrs[i++] = &dev_attr_mac_regs;
+
+	/* last entry must be NULL */
+	priv->sysfs_attrs[i] = NULL;
+}
+
+static void dpaa_eth_sysfs_remove(struct net_device *net_dev)
+{
+	struct dpa_priv_s *priv = netdev_priv(net_dev);
+	struct device_attribute **p = &priv->sysfs_attrs[0];
+
+	while (p)
+		device_remove_file(&net_dev->dev, *p++);
 }
 
 static int dpaa_eth_add_channel(void *__arg)
@@ -4003,6 +4040,8 @@ static int __devexit __cold dpa_remove(struct platform_device *of_dev)
 	net_dev = dev_get_drvdata(dev);
 	priv = netdev_priv(net_dev);
 
+	dpaa_eth_sysfs_remove(net_dev);
+
 	dev_set_drvdata(dev, NULL);
 	unregister_netdev(net_dev);
 
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index 88f27e2..27f5812 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -345,6 +345,9 @@ struct dpa_percpu_priv_s {
 	struct dpa_ern_cnt ern_cnt;
 };
 
+/* increment when adding new sysfs entries */
+#define DPA_MAX_NUM_OF_SYSFS_ATTRS 5
+
 struct dpa_priv_s {
 	struct dpa_bp *dpa_bp;
 	size_t bp_count;
@@ -387,6 +390,8 @@ struct dpa_priv_s {
 		 */
 		u32 cgr_congested_count;
 	} cgr_data;
+	/* sysfs entries, last value must be NULL */
+	struct device_attribute *sysfs_attrs[DPA_MAX_NUM_OF_SYSFS_ATTRS + 1];
 };
 
 extern const struct ethtool_ops dpa_ethtool_ops;
@@ -470,6 +475,8 @@ static inline int dpa_check_rx_mtu(struct sk_buff *skb, int mtu)
 	return 0;
 }
 
+void fm_mac_dump_regs(struct mac_device *mac_dev);
+
 /* Equivalent to a memset(0), but works faster */
 static inline void clear_fd(struct qm_fd *fd)
 {
diff --git a/drivers/net/ethernet/freescale/dpa/mac-api.c b/drivers/net/ethernet/freescale/dpa/mac-api.c
index e588b0f..984ceff 100644
--- a/drivers/net/ethernet/freescale/dpa/mac-api.c
+++ b/drivers/net/ethernet/freescale/dpa/mac-api.c
@@ -818,6 +818,14 @@ out:
 	return _errno;
 }
 
+
+void fm_mac_dump_regs(struct mac_device *mac_dev)
+{
+	struct mac_priv_s *mac_priv = macdev_priv(mac_dev);
+
+	FM_MAC_DumpRegs(mac_priv->mac);
+}
+
 static void __devinit __cold setup_dtsec(struct mac_device *mac_dev)
 {
 	mac_dev->init_phy	= dtsec_init_phy;
-- 
1.7.9.7

