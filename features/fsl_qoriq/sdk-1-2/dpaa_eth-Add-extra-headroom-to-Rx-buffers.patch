From a876868ff08e7abe9448dfe0b17faf4429b8abfb Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Tue, 15 May 2012 22:46:07 +0000
Subject: [PATCH 123/128] dpaa_eth: Add extra headroom to Rx buffers

Add a configurable option for specifying if extra headroom is required
on the Rx path. This would instruct FMan to reserve some extra space
at the beginning of a data buffer, before Internal Context fields are
copied. This is in addition to the private data area already reserved
for driver internal use. It does not affect the buffer layout on the Tx
path

The value of the extra headroom can be tweaked from Kconfig or with a
bootarg (dpa_extra_headroom)

This feature is useful on particular forwarding scenarios that add extra
headers to the forwarded frame to avoid unbounded increase of recycled
buffers

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
Signed-off-by: Stefan Szabo <szbs001@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/freescale/Kconfig             |   16 ++++++
 .../dpa/NetCommSw/src/wrapper/fman_test.c          |    2 +-
 .../dpa/NetCommSw/src/wrapper/lnxwrp_resources.c   |    6 +-
 .../net/ethernet/freescale/dpa/dpaa_eth-common.h   |   15 +++--
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |   60 +++++++++++++++++---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h      |    5 +-
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c   |    4 +-
 drivers/net/ethernet/freescale/dpa/offline_port.c  |    3 +-
 8 files changed, 93 insertions(+), 18 deletions(-)

diff --git a/drivers/net/ethernet/freescale/Kconfig b/drivers/net/ethernet/freescale/Kconfig
index cf7661d..080cf02 100644
--- a/drivers/net/ethernet/freescale/Kconfig
+++ b/drivers/net/ethernet/freescale/Kconfig
@@ -128,6 +128,22 @@ config DPA_MAX_FRM_SIZE
               "fsl_fman_phy_max_frm=<YourValue>";
 	    * in non-Hypervisor-based scenarios, via u-boot's env, by modifying the "bootargs" env variable.
 
+config DPA_EXTRA_HEADROOM
+	int "Add extra headroom at beginning of data buffers"
+	depends on DPA
+	range 0 447
+	default "0"
+	help
+	  Configure this to tell the Frame Manager to reserve some extra space at the beginning of a
+	  data buffer on the receive path, before Internal Context fields are copied. This is in addition
+	  to the private data area already reserved for driver internal use.
+	  The option does not affect in any way the layout of transmitted buffers.
+
+	  This setting can be overridden by specifying "dpa_extra_headroom" in the kernel bootargs:
+	    * in Hypervisor-based scenarios, by adding a "chosen" node with the "bootargs" property specifying
+              "dpa_extra_headroom=<YourValue>";
+	    * in non-Hypervisor-based scenarios, via u-boot's env, by modifying the "bootargs" env variable.
+
 config DPAA_ETH_SG_SUPPORT
 	bool "Add support for S/G frames in the DPAA Ethernet driver"
 	depends on DPA
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/fman_test.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/fman_test.c
index 37361b6..965b2f2 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/fman_test.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/fman_test.c
@@ -436,7 +436,7 @@ static int fmt_fq_release(const struct qm_fd *fd)
 }
 
 /* sync it w/ dpaa_eth.c: DPA_BP_HEAD */
-#define DPA_BP_HEADROOM (DPA_PRIV_DATA_SIZE + \
+#define DPA_BP_HEADROOM (DPA_RX_PRIV_DATA_SIZE + \
 			DPA_PARSE_RESULTS_SIZE + \
 			DPA_HASH_RESULTS_SIZE)
 #define MAC_HEADER_LENGTH 14
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_resources.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_resources.c
index afd89c1..47736cc 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_resources.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_resources.c
@@ -52,6 +52,7 @@
 #include "lnxwrp_resources.h"
 
 extern int fsl_fman_phy_maxfrm;	/* MAC file */
+extern int dpa_rx_extra_headroom; /* dpaa_eth.c */
 
 static struct device_node *match_mac_to_dpaa_port(struct device_node
 						  *enet_mac_node)
@@ -242,8 +243,11 @@ static uint32_t get_largest_buf_size(uint32_t max_rx_frame_size, uint32_t buf_si
 	uint32_t hash_results_size = 16;	/* DPA_HASH_RESULTS_SIZE */
 	uint32_t parse_results_size =
 		sizeof(t_FmPrsResult);		/* DPA_PARSE_RESULTS_SIZE */
+	uint32_t dpa_extra_headroom = (dpa_rx_extra_headroom != 0) ?
+					dpa_rx_extra_headroom :
+					CONFIG_DPA_EXTRA_HEADROOM;
 	uint32_t bp_head = priv_data_size + hash_results_size
-		+ parse_results_size; 		/* DPA_BP_HEAD */
+		+ parse_results_size + dpa_extra_headroom; /* DPA_BP_HEAD */
 	uint32_t bp_size = bp_head + max_rx_frame_size
 		+ NET_IP_ALIGN;			/* DPA_BP_SIZE */
 
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h
index 73ea2c4..3b1b96e 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2008-2011 Freescale Semiconductor Inc.
+ * Copyright 2008-2012 Freescale Semiconductor Inc.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -144,15 +144,22 @@ enum dpa_fq_type {
 };
 
 
-#define DPA_PRIV_DATA_SIZE 16
 #define DPA_PARSE_RESULTS_SIZE sizeof(t_FmPrsResult)
 #define DPA_HASH_RESULTS_SIZE 16
 
-#define dpaa_eth_init_port(type, port, param, errq_id, defq_id, has_timer) \
+#ifndef CONFIG_DPA_EXTRA_HEADROOM
+#define CONFIG_DPA_EXTRA_HEADROOM	0
+#endif
+
+#define DPA_TX_PRIV_DATA_SIZE	16
+#define DPA_RX_PRIV_DATA_SIZE	(DPA_TX_PRIV_DATA_SIZE + dpa_rx_extra_headroom)
+
+#define dpaa_eth_init_port(type, port, param, errq_id, defq_id, priv_size, \
+			   has_timer) \
 { \
 	param.errq = errq_id; \
 	param.defq = defq_id; \
-	param.priv_data_size = DPA_PRIV_DATA_SIZE; \
+	param.priv_data_size = priv_size; \
 	param.parse_results = true; \
 	param.hash_results = true; \
 	param.time_stamp = has_timer; \
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index d18ac23..374f595 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -91,6 +91,9 @@
 /* Bootarg used to override the Kconfig DPA_MAX_FRM_SIZE value */
 #define FSL_FMAN_PHY_MAXFRM_BOOTARG	"fsl_fman_phy_max_frm"
 
+/* Bootarg used to override DPA_EXTRA_HEADROOM Kconfig value */
+#define DPA_EXTRA_HEADROOM_BOOTARG	"dpa_extra_headroom"
+
 /* Valid checksum indication */
 #define DPA_CSUM_VALID		0xFFFF
 
@@ -130,6 +133,19 @@ extern struct dentry *powerpc_debugfs_root;
  */
 int fsl_fman_phy_maxfrm = CONFIG_DPA_MAX_FRM_SIZE;
 
+/*
+ * Extra headroom for Rx buffers.
+ * FMan is instructed to allocate, on the Rx path, this amount of
+ * space at the beginning of a data buffer, beside the DPA private
+ * data area and the IC fields.
+ * Does not impact Tx buffer layout.
+ *
+ * Configurable from Kconfig or bootargs. Zero by default, it's needed
+ * on particular forwarding scenarios that add extra headers to the
+ * forwarded frame to avoid unbounded increase of recycled buffers.
+ */
+int dpa_rx_extra_headroom = CONFIG_DPA_EXTRA_HEADROOM;
+
 static const char rtx[][3] = {
 	[RX] = "RX",
 	[TX] = "TX"
@@ -855,7 +871,7 @@ dpa_csum_validation(const struct dpa_priv_s	*priv,
 
 	dma_unmap_single(dpa_bp->dev, addr, dpa_bp->size, DMA_BIDIRECTIONAL);
 
-	parse_result = (t_FmPrsResult *)(frm + DPA_PRIV_DATA_SIZE);
+	parse_result = (t_FmPrsResult *)(frm + DPA_RX_PRIV_DATA_SIZE);
 
 	if (parse_result->cksum != DPA_CSUM_VALID)
 		percpu_priv->rx_errors.cse++;
@@ -1285,7 +1301,7 @@ static int __hot dpa_shared_tx(struct sk_buff *skb, struct net_device *net_dev)
 
 		/* Enable L3/L4 hardware checksum computation, if applicable */
 		err = dpa_enable_tx_csum(priv, skb, &fd,
-		                         dpa_bp_vaddr + DPA_PRIV_DATA_SIZE);
+					 dpa_bp_vaddr + DPA_TX_PRIV_DATA_SIZE);
 
 		goto static_map;
 	}
@@ -1317,7 +1333,7 @@ static int __hot dpa_shared_tx(struct sk_buff *skb, struct net_device *net_dev)
 
 			err = dpa_enable_tx_csum(priv, skb, &fd,
 			                         page_vaddr + offset +
-			                         DPA_PRIV_DATA_SIZE);
+						 DPA_TX_PRIV_DATA_SIZE);
 		}
 
 		kunmap_atomic(page_vaddr);
@@ -1374,7 +1390,7 @@ static int skb_to_sg_fd(struct dpa_priv_s *priv,
 
 	/* Enable hardware checksum computation */
 	err = dpa_enable_tx_csum(priv, skb, fd,
-		(char *)vaddr + DPA_PRIV_DATA_SIZE);
+		(char *)vaddr + DPA_TX_PRIV_DATA_SIZE);
 	if (unlikely(err < 0)) {
 		if (netif_msg_tx_err(priv) && net_ratelimit())
 			cpu_netdev_err(net_dev, "HW csum error: %d\n", err);
@@ -1510,7 +1526,7 @@ static int skb_to_contig_fd(struct dpa_priv_s *priv,
 	 * We must do this before dma_map_single(), because we may
 	 * need to write into the skb. */
 	err = dpa_enable_tx_csum(priv, skb, fd,
-				 ((char *)skbh) + DPA_PRIV_DATA_SIZE);
+				 ((char *)skbh) + DPA_TX_PRIV_DATA_SIZE);
 	if (unlikely(err < 0)) {
 		if (netif_msg_tx_err(priv) && net_ratelimit())
 			cpu_netdev_err(net_dev, "HW csum error: %d\n", err);
@@ -2953,7 +2969,7 @@ dpaa_eth_init_tx_port(struct fm_port *port, struct dpa_fq *errq,
 	struct fm_port_non_rx_params tx_port_param;
 
 	dpaa_eth_init_port(tx, port, tx_port_param, errq->fqid, defq->fqid,
-			has_timer);
+			DPA_TX_PRIV_DATA_SIZE, has_timer);
 }
 
 static void __devinit
@@ -2974,7 +2990,7 @@ dpaa_eth_init_rx_port(struct fm_port *port, struct dpa_bp *bp, size_t count,
 	}
 
 	dpaa_eth_init_port(rx, port, rx_port_param, errq->fqid, defq->fqid,
-			has_timer);
+			DPA_RX_PRIV_DATA_SIZE, has_timer);
 }
 
 static void dpa_rx_fq_init(struct dpa_priv_s *priv, struct list_head *head,
@@ -3664,3 +3680,33 @@ static int __init fsl_fman_phy_set_max_frm(char *str)
 	return 0;
 }
 early_param(FSL_FMAN_PHY_MAXFRM_BOOTARG, fsl_fman_phy_set_max_frm);
+
+static int __init dpa_set_extra_headroom(char *str)
+{
+	int ret;
+
+	ret = get_option(&str, &dpa_rx_extra_headroom);
+	if (ret != 1) {
+		printk(KERN_WARNING "No suitable %s=<int> prop in bootargs; "
+			"will use the default DPA_EXTRA_HEADROOM (%d) "
+			"from Kconfig.\n",
+			DPA_EXTRA_HEADROOM_BOOTARG, CONFIG_DPA_EXTRA_HEADROOM);
+		dpa_rx_extra_headroom = CONFIG_DPA_EXTRA_HEADROOM;
+		return 1;
+	}
+
+	/* Don't allow invalid bootargs; fallback to the Kconfig value */
+	if (dpa_rx_extra_headroom + DPA_BP_HEAD > DPA_MAX_FD_OFFSET) {
+		printk(KERN_WARNING "Invalid %s=%d in bootargs, valid range is "
+			"0-%d. Falling back to the Kconfig value (%d).\n",
+			DPA_EXTRA_HEADROOM_BOOTARG, dpa_rx_extra_headroom,
+			DPA_MAX_FD_OFFSET - DPA_BP_HEAD,
+			CONFIG_DPA_EXTRA_HEADROOM);
+		dpa_rx_extra_headroom = CONFIG_DPA_EXTRA_HEADROOM;
+		return 1;
+	}
+
+	return 0;
+}
+
+early_param(DPA_EXTRA_HEADROOM_BOOTARG, dpa_set_extra_headroom);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index 58ee3fa..4b938ef 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -130,9 +130,9 @@ struct dpaa_eth_hooks_s {
 
 void fsl_dpaa_eth_set_hooks(struct dpaa_eth_hooks_s *hooks);
 
-#define DPA_BP_HEAD (DPA_PRIV_DATA_SIZE + DPA_PARSE_RESULTS_SIZE + \
+#define DPA_BP_HEAD (DPA_TX_PRIV_DATA_SIZE + DPA_PARSE_RESULTS_SIZE + \
 			DPA_HASH_RESULTS_SIZE)
-#define DPA_BP_SIZE(s)	(DPA_BP_HEAD + (s))
+#define DPA_BP_SIZE(s)	(DPA_BP_HEAD + dpa_rx_extra_headroom + (s))
 
 #ifdef CONFIG_DPAA_ETH_SG_SUPPORT
 #define DEFAULT_SKB_COUNT 64 /* maximum number of SKBs in each percpu list */
@@ -300,6 +300,7 @@ struct dpa_priv_s {
 
 extern const struct ethtool_ops dpa_ethtool_ops;
 extern int fsl_fman_phy_maxfrm;
+extern int dpa_rx_extra_headroom;
 
 void __attribute__((nonnull))
 dpa_fd_release(const struct net_device *net_dev, const struct qm_fd *fd);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index ff2677b..5b08e73 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -509,7 +509,7 @@ static int __hot skb_to_contig_fd(struct dpa_priv_s *priv,
 	 * need to write into the skb.
 	 */
 	err = dpa_enable_tx_csum(priv, skb, fd,
-				 ((char *)skbh) + DPA_PRIV_DATA_SIZE);
+				 ((char *)skbh) + DPA_TX_PRIV_DATA_SIZE);
 	if (unlikely(err < 0)) {
 		if (netif_msg_tx_err(priv) && net_ratelimit())
 			cpu_netdev_err(net_dev, "HW csum error: %d\n", err);
@@ -567,7 +567,7 @@ static int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 	 * need to write into the skb.
 	 */
 	err = dpa_enable_tx_csum(priv, skb, fd,
-				 (void *)sgt_page + DPA_PRIV_DATA_SIZE);
+				 (void *)sgt_page + DPA_TX_PRIV_DATA_SIZE);
 	if (unlikely(err < 0)) {
 		if (netif_msg_tx_err(priv) && net_ratelimit())
 			cpu_netdev_err(net_dev, "HW csum error: %d\n", err);
diff --git a/drivers/net/ethernet/freescale/dpa/offline_port.c b/drivers/net/ethernet/freescale/dpa/offline_port.c
index 9fac832..b904569 100644
--- a/drivers/net/ethernet/freescale/dpa/offline_port.c
+++ b/drivers/net/ethernet/freescale/dpa/offline_port.c
@@ -260,7 +260,8 @@ oh_port_probe(struct platform_device *_of_dev)
 
 	/* Set Tx params */
 	dpaa_eth_init_port(tx, oh_config->oh_port, oh_port_tx_params,
-		oh_config->error_fqid, oh_config->default_fqid, FALSE);
+		oh_config->error_fqid, oh_config->default_fqid,
+		DPA_TX_PRIV_DATA_SIZE, FALSE);
 	/* Set PCD params */
 	oh_port_pcd_params.cba = oh_alloc_pcd_fqids;
 	oh_port_pcd_params.cbf = oh_free_pcd_fqids;
-- 
1.7.9.7

