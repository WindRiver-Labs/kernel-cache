From ef12c38a62798bdac895588bfea012e8f1306555 Mon Sep 17 00:00:00 2001
From: Sandeep Malik <Sandeep.Malik@freescale.com>
Date: Wed, 11 Apr 2012 23:35:54 -0500
Subject: [PATCH 029/128] crypto: talitos - ASF RNG mutual exclusion

mutual exclusion for RNG h/w pool, which is also used for IV generation
in ASF.

Signed-off-by: Sandeep Malik <Sandeep.Malik@freescale.com>
Signed-off-by: Hemant Agrawal <hemant@freescale.com>

this release: secfp_ components abstracted out; to be moved to ASF.

This will be removed in future SDK releases either via a
upstream-friendly (and reentrant for ASF to call) rng_data_read
implementation that uses uses talitos_submit with RNG descriptors
to fill a dual- buffer random cache in memory, or as such an
implementation wholly inclusive within ASF itself.

Signed-off-by: Kim Phillips <kim.phillips@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/crypto/talitos.c |   17 +++++++++++++++++
 drivers/crypto/talitos.h |    4 ++++
 2 files changed, 21 insertions(+)

diff --git a/drivers/crypto/talitos.c b/drivers/crypto/talitos.c
index 8a0272c..f78b351 100644
--- a/drivers/crypto/talitos.c
+++ b/drivers/crypto/talitos.c
@@ -586,10 +586,19 @@ static int talitos_rng_data_read(struct hwrng *rng, u32 *data)
 	struct device *dev = (struct device *)rng->priv;
 	struct talitos_private *priv = dev_get_drvdata(dev);
 
+#ifdef CONFIG_AS_FASTPATH
+	do {
+		if (!atomic_add_unless(&priv->ul_rng_in_use, 1, 1))
+			break;
+	} while (1);
+#endif
 	/* rng fifo requires 64-bit accesses */
 	*data = in_be32(priv->reg + TALITOS_RNGU_FIFO);
 	*data = in_be32(priv->reg + TALITOS_RNGU_FIFO_LO);
 
+#ifdef CONFIG_AS_FASTPATH
+	atomic_set(&priv->ul_rng_in_use, 0);
+#endif
 	return sizeof(u32);
 }
 
@@ -599,6 +608,11 @@ static int talitos_rng_init(struct hwrng *rng)
 	struct talitos_private *priv = dev_get_drvdata(dev);
 	unsigned int timeout = TALITOS_TIMEOUT;
 
+#ifdef CONFIG_AS_FASTPATH
+	if (priv->b_rng_init)
+		return 0;
+#endif
+
 	setbits32(priv->reg + TALITOS_RNGURCR_LO, TALITOS_RNGURCR_LO_SR);
 	while (!(in_be32(priv->reg + TALITOS_RNGUSR_LO) & TALITOS_RNGUSR_LO_RD)
 	       && --timeout)
@@ -611,6 +625,9 @@ static int talitos_rng_init(struct hwrng *rng)
 	/* start generating */
 	setbits32(priv->reg + TALITOS_RNGUDSR_LO, 0);
 
+#ifdef CONFIG_AS_FASTPATH
+	priv->b_rng_init = 1;
+#endif
 	return 0;
 }
 
diff --git a/drivers/crypto/talitos.h b/drivers/crypto/talitos.h
index 0907555..457ad09 100644
--- a/drivers/crypto/talitos.h
+++ b/drivers/crypto/talitos.h
@@ -133,6 +133,10 @@ struct talitos_private {
 
 	/* hwrng device */
 	struct hwrng rng;
+#ifdef CONFIG_AS_FASTPATH
+	bool b_rng_init;
+	atomic_t ul_rng_in_use;
+#endif
 };
 
 extern int talitos_submit(struct device *dev, int ch, struct talitos_desc *desc,
-- 
1.7.9.7

