From 2c163bdac995c23713361e1a73cff0fcf9e8ab59 Mon Sep 17 00:00:00 2001
From: Timur Tabi <timur@freescale.com>
Date: Wed, 7 Mar 2012 23:40:21 +0000
Subject: [PATCH 023/128] powerpc/85xx: PAMU driver API should take a node,
 not an LIODN

Instead of passing an actual LIODN to the PAMU driver's stashing API,
pass a device tree node and "device index".  Each device tree node for
an LIOD includes an fsl,liodn property that contains an array of LIODNs.
So instead of asking the caller to parse the property, the caller passes
the node itself and an index into the property.

This change eliminates the need for the caller to know the name of the
property.  When we add hypervisor support, a different device tree property
will be used, so we want to hide that from the caller.

Signed-off-by: Timur Tabi <timur@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/powerpc/sysdev/fsl_pamu.c |   38 +++++++++++++++++++++++++++++++++++---
 arch/powerpc/sysdev/fsl_pamu.h |    4 ++--
 2 files changed, 37 insertions(+), 5 deletions(-)

diff --git a/arch/powerpc/sysdev/fsl_pamu.c b/arch/powerpc/sysdev/fsl_pamu.c
index 0590a4e..fd45102 100644
--- a/arch/powerpc/sysdev/fsl_pamu.c
+++ b/arch/powerpc/sysdev/fsl_pamu.c
@@ -393,6 +393,34 @@ static phys_addr_t ppaact_phys;
 #define OMI_QMAN_PRIV   0x02
 #define OMI_CAAM        0x03
 
+/*
+ * Return the Nth integer of a given property in a given node
+ *
+ * 'index' is the index into the property (e.g. 'N').
+ * 'property' is the name of the property.
+ *
+ * This function assumes the value of the property is <= INT_MAX.  A negative
+ * return value indicates an error.
+ */
+static int of_read_indexed_number(struct device_node *node,
+	const char *property, unsigned int index)
+{
+	const u32 *prop;
+	int value;
+	int len;
+
+	prop = of_get_property(node, property, &len);
+	if (!prop || (len % sizeof(uint32_t)))
+		return -ENODEV;
+
+	if (index >= (len / sizeof(uint32_t)))
+		return -EINVAL;
+
+	value = be32_to_cpu(prop[index]);
+
+	return value;
+}
+
 /**
  * pamu_set_stash_dest() - set the stash target for a given LIODN
  * @liodn: LIODN to set
@@ -404,13 +432,17 @@ static phys_addr_t ppaact_phys;
  *
  * The function returns 0 on success, or a negative error code on failure.
  */
-int pamu_set_stash_dest(unsigned int liodn, unsigned int cpu,
-	unsigned int cache_level)
+int pamu_set_stash_dest(struct device_node *node, unsigned int index,
+	unsigned int cpu, unsigned int cache_level)
 {
-	struct device_node *node;
+	int liodn;
 	const u32 *prop;
 	unsigned int i;
 
+	liodn = of_read_indexed_number(node, "fsl,liodn", index);
+	if (liodn < 0)
+		return liodn;
+
 	for_each_node_by_type(node, "cpu") {
 		prop = of_get_property(node, "reg", NULL);
 		if (prop && (be32_to_cpup(prop) == cpu))
diff --git a/arch/powerpc/sysdev/fsl_pamu.h b/arch/powerpc/sysdev/fsl_pamu.h
index c40e524..4361b0b 100644
--- a/arch/powerpc/sysdev/fsl_pamu.h
+++ b/arch/powerpc/sysdev/fsl_pamu.h
@@ -33,7 +33,7 @@
 #define FSL_PAMU_H
 
 /* Set the stash target for a given LIODN */
-int pamu_set_stash_dest(unsigned int liodn, unsigned int cpu,
-	unsigned int cache_level);
+int pamu_set_stash_dest(struct device_node *node, unsigned int index,
+	unsigned int cpu, unsigned int cache_level);
 
 #endif
-- 
1.7.9.7

