From 89dc9d2fdc55ae43e97f3690d6772502a93dc210 Mon Sep 17 00:00:00 2001
From: Kim Phillips <kim.phillips@freescale.com>
Date: Mon, 5 Mar 2012 22:31:20 -0600
Subject: [PATCH 044/128] crypto: caam - fix kernel BUG at
 drivers/crypto/caam/jr.c:81!

SDK (only) commit 254028b "crypto: caam - remove redundant memory
barriers from job ring code" went one step too far in trying to
optimize out memory barriers.  We now see:

kernel BUG at drivers/crypto/caam/jr.c:81!

messages because jr dequeue now solely runs based on h/w-queried
done status, and we can have a descriptor match with head == tail
with i == 0, all because the h/w completed the job before jr
enqueue incremented the head without the appropriate memory
barrier in place.  This patch puts it back.

I'll squash the two patches for upstream submission.

Signed-off-by: Kim Phillips <kim.phillips@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/crypto/caam/jr.c |    4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/drivers/crypto/caam/jr.c b/drivers/crypto/caam/jr.c
index edbcdc7..bec7768 100644
--- a/drivers/crypto/caam/jr.c
+++ b/drivers/crypto/caam/jr.c
@@ -259,12 +259,14 @@ int caam_jr_enqueue(struct device *dev, u32 *desc,
 
 	jrp->inpring[jrp->inp_ring_write_index] = desc_dma;
 
-	wr_reg32(&jrp->rregs->inpring_jobadd, 1);
+	smp_wmb();
 
 	jrp->inp_ring_write_index = (jrp->inp_ring_write_index + 1) &
 				    (JOBR_DEPTH - 1);
 	jrp->head = (head + 1) & (JOBR_DEPTH - 1);
 
+	wr_reg32(&jrp->rregs->inpring_jobadd, 1);
+
 	spin_unlock(&jrp->inplock);
 
 	return 0;
-- 
1.7.9.7

