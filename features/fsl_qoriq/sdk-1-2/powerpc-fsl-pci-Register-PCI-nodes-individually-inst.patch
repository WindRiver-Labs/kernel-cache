From 88280eaa206d1758bead1908f5fe2f61b5aa33cd Mon Sep 17 00:00:00 2001
From: Jia Hongtao <B38951@freescale.com>
Date: Mon, 7 May 2012 10:08:45 +0800
Subject: [PATCH 027/121] powerpc/fsl-pci: Register PCI nodes individually
 instead of probing from root

PCI nodes might not be placed directly under the root node in device tree.
This causes PCI nodes not to be found if we use of_platform_bus_probe() to
search only under root node. Instead, we search for the PCI nodes and
register them individually.

Signed-off-by: Jia Hongtao <B38951@freescale.com>
Signed-off-by: Li Yang <leoli@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image. Adjust the arguments
of of_platform_bus_create.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/powerpc/platforms/85xx/corenet_ds.c |   12 +++++++++++-
 drivers/of/platform.c                    |    3 ++-
 include/linux/of_platform.h              |    5 +++++
 3 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/arch/powerpc/platforms/85xx/corenet_ds.c b/arch/powerpc/platforms/85xx/corenet_ds.c
index 47bcde9..c194a48 100644
--- a/arch/powerpc/platforms/85xx/corenet_ds.c
+++ b/arch/powerpc/platforms/85xx/corenet_ds.c
@@ -72,7 +72,17 @@ static struct of_device_id __initdata corenetds_pci_ids[] = {
 
 int __init corenet_ds_publish_pci_device(void)
 {
-	return of_platform_bus_probe(NULL, corenetds_pci_ids, NULL);
+	struct device_node *np;
+	int rc = 0;
+
+	for_each_matching_node(np, corenetds_pci_ids) {
+		rc = of_platform_bus_create(np, corenetds_pci_ids, NULL,
+						NULL, false);
+		if (rc)
+			break;
+	}
+
+	return rc;
 }
 
 static const struct of_device_id of_device_ids[] __devinitconst = {
diff --git a/drivers/of/platform.c b/drivers/of/platform.c
index 9abec25..3aab01f 100644
--- a/drivers/of/platform.c
+++ b/drivers/of/platform.c
@@ -345,7 +345,7 @@ static const struct of_dev_auxdata *of_dev_lookup(const struct of_dev_auxdata *l
  * Creates a platform_device for the provided device_node, and optionally
  * recursively create devices for all the child nodes.
  */
-static int of_platform_bus_create(struct device_node *bus,
+int of_platform_bus_create(struct device_node *bus,
 				  const struct of_device_id *matches,
 				  const struct of_dev_auxdata *lookup,
 				  struct device *parent, bool strict)
@@ -389,6 +389,7 @@ static int of_platform_bus_create(struct device_node *bus,
 	}
 	return rc;
 }
+EXPORT_SYMBOL(of_platform_bus_create);
 
 /**
  * of_platform_bus_probe() - Probe the device-tree for platform buses
diff --git a/include/linux/of_platform.h b/include/linux/of_platform.h
index b47d204..6b63a2e 100644
--- a/include/linux/of_platform.h
+++ b/include/linux/of_platform.h
@@ -94,6 +94,11 @@ extern int of_platform_populate(struct device_node *root,
 				const struct of_device_id *matches,
 				const struct of_dev_auxdata *lookup,
 				struct device *parent);
+
+extern int of_platform_bus_create(struct device_node *bus,
+				  const struct of_device_id *matches,
+				  const struct of_dev_auxdata *lookup,
+				  struct device *parent, bool strict);
 #endif /* CONFIG_OF_ADDRESS */
 
 #endif /* CONFIG_OF_DEVICE */
-- 
1.7.9.7

