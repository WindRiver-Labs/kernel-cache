From 0f547494f0e7a7d1bc4e9ee27fa44f5bdc5b48ed Mon Sep 17 00:00:00 2001
From: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Date: Fri, 17 Feb 2012 23:16:03 +0000
Subject: [PATCH 072/128] fmd: fman setup shouldn't use pool-channels

The setup logic for a Fman block was parsing the device-tree looking for
the first ethernet interface bound to that Fman block and parsing out
the corresponding qman pool-channel and using that for scheduling the
result FQ from the Fman. This is wrong for many reasons, but most
important is that the qman driver will soon be fixed to no longer
configure portals to dequeue from all pool-channels by default. As such,
the setup logic for ethernet interfaces will be adjusted to add the
interface's pool-channels to the dequeue masks of the relevant portals,
but this will be after the Fman blocks are set up.

This commit changes the Fman setup logic to just direct Fman setup
results to one of the affine portals directly, thus making no assumption
about pool channels.

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Acked-by: Stefan Szabo <stefan.szabo@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../dpa/NetCommSw/src/wrapper/lnxwrp_fm.c          |   70 +-------------------
 1 file changed, 3 insertions(+), 67 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.c
index 858fa6b..7208a3a 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.c
@@ -420,15 +420,11 @@ static const struct qe_firmware *FindFmanMicrocode(void)
 static t_LnxWrpFmDev * ReadFmDevTreeNode (struct platform_device *of_dev)
 {
     t_LnxWrpFmDev       *p_LnxWrpFmDev;
-    struct device_node  *fm_node, *dev_node, *dpa_node;
+    struct device_node  *fm_node, *dev_node;
     struct of_device_id name;
     struct resource     res;
     const uint32_t      *uint32_prop;
     int                 _errno=0, lenp;
-    static struct of_device_id dpa_eth_node_of_match[] __devinitdata = {
-        { .compatible = "fsl,dpa-ethernet", },
-        { /* end of list */ },
-    };
 
     fm_node = of_node_get(of_dev->dev.of_node);
 
@@ -594,68 +590,8 @@ static t_LnxWrpFmDev * ReadFmDevTreeNode (struct platform_device *of_dev)
 
     of_node_put(fm_node);
 
-    for_each_matching_node(dpa_node, dpa_eth_node_of_match) {
-        struct device_node  *mac_node;
-        const phandle       *phandle_prop;
-
-        phandle_prop = (typeof(phandle_prop))of_get_property(dpa_node, "fsl,fman-mac", &lenp);
-        if (phandle_prop == NULL)
-            continue;
-
-        if (WARN_ON(lenp != sizeof(phandle)))
-            return NULL;
-
-        mac_node = of_find_node_by_phandle(*phandle_prop);
-        if (unlikely(mac_node == NULL)) {
-            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_find_node_by_phandle() failed"));
-            return NULL;
-        }
-
-        fm_node = of_get_parent(mac_node);
-        of_node_put(mac_node);
-        if (unlikely(fm_node == NULL)) {
-            REPORT_ERROR(MAJOR, E_NO_DEVICE, ("of_get_parent() = %d", _errno));
-            return NULL;
-        }
-
-        uint32_prop = (uint32_t *)of_get_property(fm_node, "cell-index", &lenp);
-        if (unlikely(uint32_prop == NULL)) {
-            of_node_put(fm_node);
-            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, cell-index) failed", fm_node->full_name));
-            return NULL;
-        }
-        if (WARN_ON(lenp != sizeof(uint32_t)))
-            return NULL;
-        of_node_put(fm_node);
-
-        if (*uint32_prop == p_LnxWrpFmDev->id) {
-            phandle_prop = (typeof(phandle_prop))of_get_property(dpa_node, "fsl,qman-channel", &lenp);
-            if (unlikely(phandle_prop == NULL)) {
-                REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, fsl,qman-channel) failed", dpa_node->full_name));
-                return NULL;
-            }
-            if (WARN_ON(lenp != sizeof(phandle)))
-                return NULL;
-
-            dev_node = of_find_node_by_phandle(*phandle_prop);
-            if (unlikely(dev_node == NULL)) {
-                REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_find_node_by_phandle() failed"));
-                return NULL;
-            }
-
-            uint32_prop = (typeof(uint32_prop))of_get_property(dev_node, "fsl,qman-channel-id", &lenp);
-            if (unlikely(uint32_prop == NULL)) {
-                REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, fsl,qman-channel-id) failed", dev_node->full_name));
-                of_node_put(dev_node);
-                return NULL;
-            }
-            of_node_put(dev_node);
-            if (WARN_ON(lenp != sizeof(uint32_t)))
-                return NULL;
-            p_LnxWrpFmDev->hcCh = *uint32_prop;
-            break;
-        }
-    }
+    p_LnxWrpFmDev->hcCh =
+        qman_affine_channel(cpumask_first(qman_affine_cpus()));
 
     p_LnxWrpFmDev->active = TRUE;
 
-- 
1.7.9.7

