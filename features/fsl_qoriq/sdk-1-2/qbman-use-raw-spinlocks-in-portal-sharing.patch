From d7c4e2303b7358ba3785eba4f24bcdbb3f8d74ac Mon Sep 17 00:00:00 2001
From: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Date: Tue, 10 Apr 2012 12:43:47 -0500
Subject: [PATCH 094/121] qbman: use raw spinlocks in portal-sharing

When building an RT kernel, regular spinlocks can be pre-empted and
this breaks assumptions made by the portal driver.

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/staging/fsl_qbman/bman_high.c |    9 +++++----
 drivers/staging/fsl_qbman/qman_high.c |    9 +++++----
 2 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/drivers/staging/fsl_qbman/bman_high.c b/drivers/staging/fsl_qbman/bman_high.c
index fcc2c57..5e97b4f 100644
--- a/drivers/staging/fsl_qbman/bman_high.c
+++ b/drivers/staging/fsl_qbman/bman_high.c
@@ -47,7 +47,7 @@ struct bman_portal {
 	struct bman_pool *rcri_owned; /* only 1 release WAIT_SYNC at a time */
 #endif
 #ifdef CONFIG_FSL_DPA_PORTAL_SHARE
-	spinlock_t sharing_lock; /* only used if is_shared */
+	raw_spinlock_t sharing_lock; /* only used if is_shared */
 	int is_shared;
 	struct bman_portal *sharing_redirect;
 #endif
@@ -70,14 +70,15 @@ struct bman_portal {
 #define PORTAL_IRQ_LOCK(p, irqflags) \
 	do { \
 		if ((p)->is_shared) \
-			spin_lock_irqsave(&(p)->sharing_lock, irqflags); \
+			raw_spin_lock_irqsave(&(p)->sharing_lock, irqflags); \
 		else \
 			local_irq_save(irqflags); \
 	} while (0)
 #define PORTAL_IRQ_UNLOCK(p, irqflags) \
 	do { \
 		if ((p)->is_shared) \
-			spin_unlock_irqrestore(&(p)->sharing_lock, irqflags); \
+			raw_spin_unlock_irqrestore(&(p)->sharing_lock, \
+						   irqflags); \
 		else \
 			local_irq_restore(irqflags); \
 	} while (0)
@@ -232,7 +233,7 @@ struct bman_portal *bman_create_affine_portal(
 	portal->rcri_owned = NULL;
 #endif
 #ifdef CONFIG_FSL_DPA_PORTAL_SHARE
-	spin_lock_init(&portal->sharing_lock);
+	raw_spin_lock_init(&portal->sharing_lock);
 	portal->is_shared = config->public_cfg.is_shared;
 	portal->sharing_redirect = NULL;
 #endif
diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 49e89b9..68859f7 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -82,7 +82,7 @@ struct qman_portal {
 	struct qman_fq *eqci_owned; /* only 1 enqueue WAIT_SYNC at a time */
 #endif
 #ifdef CONFIG_FSL_DPA_PORTAL_SHARE
-	spinlock_t sharing_lock; /* only used if is_shared */
+	raw_spinlock_t sharing_lock; /* only used if is_shared */
 	int is_shared;
 	struct qman_portal *sharing_redirect;
 #endif
@@ -109,14 +109,15 @@ struct qman_portal {
 #define PORTAL_IRQ_LOCK(p, irqflags) \
 	do { \
 		if ((p)->is_shared) \
-			spin_lock_irqsave(&(p)->sharing_lock, irqflags); \
+			raw_spin_lock_irqsave(&(p)->sharing_lock, irqflags); \
 		else \
 			local_irq_save(irqflags); \
 	} while (0)
 #define PORTAL_IRQ_UNLOCK(p, irqflags) \
 	do { \
 		if ((p)->is_shared) \
-			spin_unlock_irqrestore(&(p)->sharing_lock, irqflags); \
+			raw_spin_unlock_irqrestore(&(p)->sharing_lock, \
+						   irqflags); \
 		else \
 			local_irq_restore(irqflags); \
 	} while (0)
@@ -394,7 +395,7 @@ struct qman_portal *qman_create_affine_portal(
 	portal->eqci_owned = NULL;
 #endif
 #ifdef CONFIG_FSL_DPA_PORTAL_SHARE
-	spin_lock_init(&portal->sharing_lock);
+	raw_spin_lock_init(&portal->sharing_lock);
 	portal->is_shared = config->public_cfg.is_shared;
 	portal->sharing_redirect = NULL;
 #endif
-- 
1.7.9.7

