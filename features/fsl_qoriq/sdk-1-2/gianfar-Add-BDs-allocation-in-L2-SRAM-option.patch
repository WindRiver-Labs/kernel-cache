From 0e6a1998f2661db21e0b776d2bccefcb47684e6d Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@freescale.com>
Date: Fri, 10 Feb 2012 13:36:24 +0200
Subject: [PATCH 001/121] gianfar: Add BDs allocation in L2 SRAM option

If this option is enabled the driver will try to allocate the
buffer descriptors (BDs) in the L2 SRAM memory, using the
powerpc/85xx cache-sram support API for P1/P2 QorIQ platforms,
with the intent to improve its performance.
For this to work, SRAM size and the offset where SRAM should
be mapped must be provided at kernel command line as:
	cache-sram-size=<value>
	cache-sram-offset=<offset>
Should the attempt to allocate in L2 SRAM fail, the driver falls
back to normal allocation of BDs (i.e. in normal RAM).

Signed-off-by: Sandeep Gopalpet <sandeep.kumar@freescale.com>
Signed-off-by: Jiajun Wu <b06378@freescale.com>
Signed-off-by: Li Yang <leoli@freescale.com>
Signed-off-by: Akhil Goyal <akhil.goyal@freescale.com>
Signed-off-by: Claudiu Manoil <claudiu.manoil@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image. Just minor context
mods in order to port to 3.4 kernel.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/freescale/Kconfig   |   10 ++++++
 drivers/net/ethernet/freescale/gianfar.c |   50 +++++++++++++++++++++++-------
 drivers/net/ethernet/freescale/gianfar.h |    6 +++-
 3 files changed, 54 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/freescale/Kconfig b/drivers/net/ethernet/freescale/Kconfig
index 0201982..dcff7b8 100644
--- a/drivers/net/ethernet/freescale/Kconfig
+++ b/drivers/net/ethernet/freescale/Kconfig
@@ -87,6 +87,16 @@ config GIANFAR
 	  This driver supports the Gigabit TSEC on the MPC83xx, MPC85xx,
 	  and MPC86xx family of chips, and the FEC on the 8540.
 
+config GIANFAR_L2SRAM
+	bool "BDs in L2SRAM allocation"
+	depends on (GIANFAR && FSL_SOC_BOOKE)
+	select FSL_85XX_CACHE_SRAM
+	help
+	  This option supports the allocation of Buffer Descriptors in L2 SRAM.
+	  cache-sram-size and cache-sram-offset command line parameters should
+	  be passed accordingly, otherwise the driver will fall back to normal
+	  memory operation.
+
 config DPA
 	bool "Freescale Data Path Frame Manager Ethernet"
 	depends on FSL_SOC && FSL_BMAN_PORTAL && FSL_QMAN_PORTAL && FSL_FMAN
diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index 24381e1..44ae493 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -102,6 +102,9 @@
 
 #include "gianfar.h"
 #include "fsl_pq_mdio.h"
+#ifdef CONFIG_GIANFAR_L2SRAM
+#include <asm/fsl_85xx_cache_sram.h>
+#endif
 
 #define TX_TIMEOUT      (1*HZ)
 
@@ -231,13 +234,32 @@ err_rxalloc_fail:
 	return -ENOMEM;
 }
 
+static void *gfar_alloc_bds(struct gfar_private *priv, dma_addr_t *addr)
+{
+	void *vaddr = NULL;
+#ifdef CONFIG_GIANFAR_L2SRAM
+	phys_addr_t paddr;
+	vaddr = mpc85xx_cache_sram_alloc(BDS_REGION_SIZE(priv), &paddr,
+			L1_CACHE_BYTES);
+	if (vaddr) {
+		priv->l2sram_bds_en = 1;
+		*addr = phys_to_dma(&priv->ofdev->dev, paddr);
+		return vaddr;
+	}
+	/* fallback to normal memory rather than stop working */
+#endif
+	vaddr = dma_alloc_coherent(&priv->ofdev->dev,
+			BDS_REGION_SIZE(priv), addr, GFP_KERNEL);
+
+	return vaddr;
+}
+
 static int gfar_alloc_skb_resources(struct net_device *ndev)
 {
 	void *vaddr;
 	dma_addr_t addr;
 	int i, j, k;
 	struct gfar_private *priv = netdev_priv(ndev);
-	struct device *dev = &priv->ofdev->dev;
 	struct gfar_priv_tx_q *tx_queue = NULL;
 	struct gfar_priv_rx_q *rx_queue = NULL;
 
@@ -250,10 +272,7 @@ static int gfar_alloc_skb_resources(struct net_device *ndev)
 		priv->total_rx_ring_size += priv->rx_queue[i]->rx_ring_size;
 
 	/* Allocate memory for the buffer descriptors */
-	vaddr = dma_alloc_coherent(dev,
-			sizeof(struct txbd8) * priv->total_tx_ring_size +
-			sizeof(struct rxbd8) * priv->total_rx_ring_size,
-			&addr, GFP_KERNEL);
+	vaddr = gfar_alloc_bds(priv, &addr);
 	if (!vaddr) {
 		netif_err(priv, ifup, ndev,
 			  "Could not allocate buffer descriptors!\n");
@@ -1717,6 +1736,20 @@ static void free_skb_rx_queue(struct gfar_priv_rx_q *rx_queue)
 	kfree(rx_queue->rx_skbuff);
 }
 
+static void gfar_free_bds(struct gfar_private *priv)
+{
+#ifdef CONFIG_GIANFAR_L2SRAM
+	if (priv->l2sram_bds_en) {
+		mpc85xx_cache_sram_free(priv->tx_queue[0]->tx_bd_base);
+		return;
+	}
+#endif
+	dma_free_coherent(&priv->ofdev->dev,
+			BDS_REGION_SIZE(priv),
+			priv->tx_queue[0]->tx_bd_base,
+			priv->tx_queue[0]->tx_bd_dma_base);
+}
+
 /* If there are any tx skbs or rx skbs still around, free them.
  * Then free tx_skbuff and rx_skbuff */
 static void free_skb_resources(struct gfar_private *priv)
@@ -1740,12 +1773,7 @@ static void free_skb_resources(struct gfar_private *priv)
 		if(rx_queue->rx_skbuff)
 			free_skb_rx_queue(rx_queue);
 	}
-
-	dma_free_coherent(&priv->ofdev->dev,
-			sizeof(struct txbd8) * priv->total_tx_ring_size +
-			sizeof(struct rxbd8) * priv->total_rx_ring_size,
-			priv->tx_queue[0]->tx_bd_base,
-			priv->tx_queue[0]->tx_bd_dma_base);
+	gfar_free_bds(priv);
 	skb_queue_purge(&priv->rx_recycle);
 }
 
diff --git a/drivers/net/ethernet/freescale/gianfar.h b/drivers/net/ethernet/freescale/gianfar.h
index 4c9f8d4..65c0e00 100644
--- a/drivers/net/ethernet/freescale/gianfar.h
+++ b/drivers/net/ethernet/freescale/gianfar.h
@@ -1098,7 +1098,8 @@ struct gfar_private {
 		extended_hash:1,
 		bd_stash_en:1,
 		rx_filer_enable:1,
-		wol_en:1; /* Wake-on-LAN enabled */
+		wol_en:1, /* Wake-on-LAN enabled */
+		l2sram_bds_en:1; /* BDs in L2SRAM enabled */
 	unsigned short padding;
 
 	/* PHY stuff */
@@ -1124,6 +1125,9 @@ struct gfar_private {
 	unsigned int ftp_rqfcr[MAX_FILER_IDX + 1];
 };
 
+#define BDS_REGION_SIZE(priv) ( \
+	sizeof(struct txbd8) * (priv)->total_tx_ring_size + \
+	sizeof(struct rxbd8) * (priv)->total_rx_ring_size)
 
 static inline int gfar_has_errata(struct gfar_private *priv,
 				  enum gfar_errata err)
-- 
1.7.9.7

