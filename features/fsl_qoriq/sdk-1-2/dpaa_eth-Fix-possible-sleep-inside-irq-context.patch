From 252a369854400bb0c67467d7218a58bc73d2b42e Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Thu, 26 Jan 2012 12:42:16 +0200
Subject: [PATCH 085/128] dpaa_eth: Fix possible sleep inside irq context

When called with BMAN_RELEASE_FLAG_WAIT flag, bman_release() function
may sleep if it doesn't succeed releasing the buffers from the first
try. This is not ok to do in some of the places the function is called.

Instead, just call bman_release() without any flags repeatedly, until
function succeeds.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c |   22 ++++++++++++++--------
 1 file changed, 14 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 0a6b2f6..4f18932 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2008-2011 Freescale Semiconductor Inc.
+ * Copyright 2008-2012 Freescale Semiconductor Inc.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -231,9 +231,13 @@ static void dpa_bp_add_8(struct dpa_bp *dpa_bp)
 	/* Avoid releasing a completely null buffer; bman_release() requires
 	 * at least one buf. */
 	if (likely(i)) {
-		/* Using the WAIT flag, bman_release() is guaranteed to succeed
-		 * in a reasonable amount of time*/
-		bman_release(dpa_bp->pool, bmb, i, BMAN_RELEASE_FLAG_WAIT);
+		/*
+		 * Release the buffers. In case bman is busy, keep trying
+		 * until successful. bman_release() is guaranteed to succeed
+		 * in a reasonable amount of time
+		 */
+		while (bman_release(dpa_bp->pool, bmb, i, 0))
+			cpu_relax();
 
 		*count_ptr += i;
 	}
@@ -284,7 +288,8 @@ static void dpaa_eth_seed_pool(struct dpa_bp *bp)
 
 		} while (--count && (num_bufs < 8));
 
-		bman_release(bp->pool, bufs, num_bufs, BMAN_RELEASE_FLAG_WAIT);
+		while (bman_release(bp->pool, bufs, num_bufs, 0))
+			cpu_relax();
 	}
 }
 
@@ -588,12 +593,13 @@ dpa_fd_release(const struct net_device *net_dev, const struct qm_fd *fd)
 					!sgt[i-1].final &&
 					sgt[i-1].bpid == sgt[i].bpid);
 
-			bman_release(dpa_bp->pool, bmb, j,
-				     BMAN_RELEASE_FLAG_WAIT);
+			while (bman_release(dpa_bp->pool, bmb, j, 0))
+				cpu_relax();
 		} while (!sgt[i-1].final);
 	}
 
-	bman_release(_dpa_bp->pool, &_bmb, 1, BMAN_RELEASE_FLAG_WAIT);
+	while (bman_release(_dpa_bp->pool, &_bmb, 1, 0))
+		cpu_relax();
 }
 
 /* net_device */
-- 
1.7.9.7

