From c2cfe5045473e2b9f7d183bb4e29116928fc1f89 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Thu, 31 May 2012 19:04:41 +0000
Subject: [PATCH 125/128] dpaa_eth: Avoid recycling too large buffers

In certain conditions (forwarding with encapsulation and dpa extra
headroom set to zero), reallocated skbs get recycled leading to
the buffer pool being populated with increasingly large buffers.
This eventually leads to system wide memory depletion.

Add an extra check in the tx function to avoid recycling buffers
that are above a certain size.

Since we're here, also change the default value of the extra headroom
parameter from 0 to 64. This ensures best performance for forwarding
IPSec scenarios. For plain ipfwd or termination, using a value of
zero is recommended.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/freescale/Kconfig        |    5 ++++-
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c |   12 ++++++++++++
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/freescale/Kconfig b/drivers/net/ethernet/freescale/Kconfig
index 080cf02..0201982 100644
--- a/drivers/net/ethernet/freescale/Kconfig
+++ b/drivers/net/ethernet/freescale/Kconfig
@@ -132,13 +132,16 @@ config DPA_EXTRA_HEADROOM
 	int "Add extra headroom at beginning of data buffers"
 	depends on DPA
 	range 0 447
-	default "0"
+	default "64"
 	help
 	  Configure this to tell the Frame Manager to reserve some extra space at the beginning of a
 	  data buffer on the receive path, before Internal Context fields are copied. This is in addition
 	  to the private data area already reserved for driver internal use.
 	  The option does not affect in any way the layout of transmitted buffers.
 
+	  Default value of 64 favours the case when forwarded frames are being encapsulated (e.g. IPSec).
+	  For plain forwarding or termination cases, a value of zero is recommended for optimum performance.
+
 	  This setting can be overridden by specifying "dpa_extra_headroom" in the kernel bootargs:
 	    * in Hypervisor-based scenarios, by adding a "chosen" node with the "bootargs" property specifying
               "dpa_extra_headroom=<YourValue>";
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 80b13da..e3810ff 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -100,6 +100,14 @@
 /* Maximum offset value for a contig or sg FD (represented on 9bits) */
 #define DPA_MAX_FD_OFFSET	((1 << 9) - 1)
 
+/*
+ * Maximum size of a buffer that is to be recycled back to the buffer pool.
+ * The value is arbitrary, but tries to reach a balance such that originating
+ * frames may get recycled, while forwarded skbs that get reallocated on Tx
+ * aren't allowed to grow unboundedly.
+ */
+#define DPA_BP_MAX_BUF_SIZE	(DEFAULT_BUF_SIZE + 256)
+
 #define DPA_DESCRIPTION "FSL DPAA Ethernet driver"
 
 MODULE_LICENSE("Dual BSD/GPL");
@@ -1466,10 +1474,14 @@ static int skb_to_contig_fd(struct dpa_priv_s *priv,
 	 * First, see if the conditions needed to recycle the skb are met:
 	 * - skb not cloned, not shared
 	 * - buffer size is large enough to accomodate a maximum size Rx frame
+	 * - buffer size does not exceed the maximum size allowed in the pool
+	 *   (to avoid unbounded increase of buffer size in certain forwarding
+	 *   conditions)
 	 * - buffer address is 16 byte aligned, as per DPAARM
 	 * - there's enough room in the buffer pool
 	 */
 	if (likely(skb_is_recycleable(skb, dpa_bp->size) &&
+		   (skb_end_pointer(skb) - skb->head <= DPA_BP_MAX_BUF_SIZE) &&
 		   (*percpu_priv->dpa_bp_count < dpa_bp->target_count))) {
 		/* Compute the minimum necessary fd offset */
 		offset = dpa_bp->size - skb->len - skb_tailroom(skb);
-- 
1.7.9.7

