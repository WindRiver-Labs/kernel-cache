From 5d40edac80aa836bfcfb0a218e4dc5e1bff829f2 Mon Sep 17 00:00:00 2001
From: Bhushan Bharat <r65777@freescale.com>
Date: Mon, 4 Jun 2012 11:35:07 +0000
Subject: [PATCH 031/121] Enable SWIOTLB if needed by pci/pcie

The head of SDK cannot use SWIOTLB if requested by PCI/PCIe, as PCI
initialization happens after mem_init(). The mem_init() initializes
the SWIOTLB (calls swiotlb_init()) if ppc_swiotlb_enable is set.
With the "powerpc/fsl-pci: Unify pci/pcie initialization code for all boards"
patch ppc_swiotlb_enable is set after mem_init(). So SWIOTLB does
not get enabled.

This patch extracts the inbound, outbound and PCICSRBAR initialization
Code in a separate function and we call this function from platform init
code. So the ppc_swiotlb_enable will be set before mem_init().

Signed-off-by: Bharat Bhushan <bharat.bhushan@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/powerpc/platforms/85xx/corenet_ds.c   |    9 +++++++++
 arch/powerpc/platforms/85xx/mpc8536_ds.c   |    9 +++++++++
 arch/powerpc/platforms/85xx/mpc85xx_cds.c  |    3 +++
 arch/powerpc/platforms/85xx/mpc85xx_ds.c   |   11 +++++++++--
 arch/powerpc/platforms/85xx/mpc85xx_mds.c  |    9 +++++++++
 arch/powerpc/platforms/85xx/mpc85xx_rdb.c  |    7 ++++++-
 arch/powerpc/platforms/85xx/p1010rdb.c     |    9 +++++++++
 arch/powerpc/platforms/85xx/p1022_ds.c     |    9 +++++++++
 arch/powerpc/platforms/85xx/p1023_rds.c    |    5 +++++
 arch/powerpc/platforms/85xx/xes_mpc85xx.c  |    8 ++++++++
 arch/powerpc/platforms/86xx/mpc86xx_hpcn.c |    7 +++++++
 arch/powerpc/sysdev/fsl_pci.c              |   19 ++++++++++++-------
 arch/powerpc/sysdev/fsl_pci.h              |    1 +
 13 files changed, 96 insertions(+), 10 deletions(-)

diff --git a/arch/powerpc/platforms/85xx/corenet_ds.c b/arch/powerpc/platforms/85xx/corenet_ds.c
index c194a48..239f20e 100644
--- a/arch/powerpc/platforms/85xx/corenet_ds.c
+++ b/arch/powerpc/platforms/85xx/corenet_ds.c
@@ -55,8 +55,17 @@ void __init corenet_ds_pic_init(void)
  */
 void __init corenet_ds_setup_arch(void)
 {
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
 	mpc85xx_smp_init();
 
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+#endif
+
 #ifdef CONFIG_SWIOTLB
 	if (memblock_end_of_DRAM() > 0xffffffff)
 		ppc_swiotlb_enable = 1;
diff --git a/arch/powerpc/platforms/85xx/mpc8536_ds.c b/arch/powerpc/platforms/85xx/mpc8536_ds.c
index 7fe89e0..c53d90e 100644
--- a/arch/powerpc/platforms/85xx/mpc8536_ds.c
+++ b/arch/powerpc/platforms/85xx/mpc8536_ds.c
@@ -46,9 +46,18 @@ void __init mpc8536_ds_pic_init(void)
  */
 static void __init mpc8536_ds_setup_arch(void)
 {
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
 	if (ppc_md.progress)
 		ppc_md.progress("mpc8536_ds_setup_arch()", 0);
 
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+#endif
+
 #ifdef CONFIG_SWIOTLB
 	if (memblock_end_of_DRAM() > 0xffffffff)
 		ppc_swiotlb_enable = 1;
diff --git a/arch/powerpc/platforms/85xx/mpc85xx_cds.c b/arch/powerpc/platforms/85xx/mpc85xx_cds.c
index 6f7ffd4..e0f4fba 100644
--- a/arch/powerpc/platforms/85xx/mpc85xx_cds.c
+++ b/arch/powerpc/platforms/85xx/mpc85xx_cds.c
@@ -309,6 +309,9 @@ static void __init mpc85xx_cds_setup_arch(void)
 	}
 
 #ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+
 	ppc_md.pci_irq_fixup = mpc85xx_cds_pci_irq_fixup;
 	ppc_md.pci_exclude_device = mpc85xx_exclude_device;
 #endif
diff --git a/arch/powerpc/platforms/85xx/mpc85xx_ds.c b/arch/powerpc/platforms/85xx/mpc85xx_ds.c
index 6defff6..938993b 100644
--- a/arch/powerpc/platforms/85xx/mpc85xx_ds.c
+++ b/arch/powerpc/platforms/85xx/mpc85xx_ds.c
@@ -139,15 +139,22 @@ static int mpc85xx_exclude_device(struct pci_controller *hose,
  */
 static void __init mpc85xx_ds_setup_arch(void)
 {
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
 	if (ppc_md.progress)
 		ppc_md.progress("mpc85xx_ds_setup_arch()", 0);
 
+	mpc85xx_smp_init();
+
 #ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+
 	ppc_md.pci_exclude_device = mpc85xx_exclude_device;
 #endif
 
-	mpc85xx_smp_init();
-
 #ifdef CONFIG_SWIOTLB
 	if (memblock_end_of_DRAM() > 0xffffffff)
 		ppc_swiotlb_enable = 1;
diff --git a/arch/powerpc/platforms/85xx/mpc85xx_mds.c b/arch/powerpc/platforms/85xx/mpc85xx_mds.c
index 637683e..4cc839f 100644
--- a/arch/powerpc/platforms/85xx/mpc85xx_mds.c
+++ b/arch/powerpc/platforms/85xx/mpc85xx_mds.c
@@ -327,11 +327,20 @@ static void __init mpc85xx_mds_qeic_init(void) { }
 
 static void __init mpc85xx_mds_setup_arch(void)
 {
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
 	if (ppc_md.progress)
 		ppc_md.progress("mpc85xx_mds_setup_arch()", 0);
 
 	mpc85xx_smp_init();
 
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+#endif
+
 	mpc85xx_mds_qe_init();
 
 #ifdef CONFIG_SWIOTLB
diff --git a/arch/powerpc/platforms/85xx/mpc85xx_rdb.c b/arch/powerpc/platforms/85xx/mpc85xx_rdb.c
index 23ec88a..05dd494 100644
--- a/arch/powerpc/platforms/85xx/mpc85xx_rdb.c
+++ b/arch/powerpc/platforms/85xx/mpc85xx_rdb.c
@@ -86,13 +86,18 @@ void __init mpc85xx_rdb_pic_init(void)
  */
 static void __init mpc85xx_rdb_setup_arch(void)
 {
-#if defined(CONFIG_QUICC_ENGINE)
+#if defined(CONFIG_QUICC_ENGINE) || defined(CONFIG_PCI)
 	struct device_node *np;
 #endif
 
 	if (ppc_md.progress)
 		ppc_md.progress("mpc85xx_rdb_setup_arch()", 0);
 
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+#endif
+
 	mpc85xx_smp_init();
 
 #ifdef CONFIG_QUICC_ENGINE
diff --git a/arch/powerpc/platforms/85xx/p1010rdb.c b/arch/powerpc/platforms/85xx/p1010rdb.c
index b496fc5..2d0bce5 100644
--- a/arch/powerpc/platforms/85xx/p1010rdb.c
+++ b/arch/powerpc/platforms/85xx/p1010rdb.c
@@ -46,9 +46,18 @@ void __init p1010_rdb_pic_init(void)
  */
 static void __init p1010_rdb_setup_arch(void)
 {
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
 	if (ppc_md.progress)
 		ppc_md.progress("p1010_rdb_setup_arch()", 0);
 
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+#endif
+
 	printk(KERN_INFO "P1010 RDB board from Freescale Semiconductor\n");
 }
 
diff --git a/arch/powerpc/platforms/85xx/p1022_ds.c b/arch/powerpc/platforms/85xx/p1022_ds.c
index 1799dd3..788ceda 100644
--- a/arch/powerpc/platforms/85xx/p1022_ds.c
+++ b/arch/powerpc/platforms/85xx/p1022_ds.c
@@ -465,9 +465,18 @@ early_param("video", early_video_setup);
  */
 static void __init p1022_ds_setup_arch(void)
 {
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
 	if (ppc_md.progress)
 		ppc_md.progress("p1022_ds_setup_arch()", 0);
 
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+#endif
+
 #if defined(CONFIG_FB_FSL_DIU) || defined(CONFIG_FB_FSL_DIU_MODULE)
 	diu_ops.get_pixel_format	= p1022ds_get_pixel_format;
 	diu_ops.set_gamma_table		= p1022ds_set_gamma_table;
diff --git a/arch/powerpc/platforms/85xx/p1023_rds.c b/arch/powerpc/platforms/85xx/p1023_rds.c
index afce916..6e3e738 100644
--- a/arch/powerpc/platforms/85xx/p1023_rds.c
+++ b/arch/powerpc/platforms/85xx/p1023_rds.c
@@ -80,6 +80,11 @@ static void __init mpc85xx_rds_setup_arch(void)
 		}
 	}
 
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+#endif
+
 	mpc85xx_smp_init();
 }
 
diff --git a/arch/powerpc/platforms/85xx/xes_mpc85xx.c b/arch/powerpc/platforms/85xx/xes_mpc85xx.c
index 0cade62..ca40932 100644
--- a/arch/powerpc/platforms/85xx/xes_mpc85xx.c
+++ b/arch/powerpc/platforms/85xx/xes_mpc85xx.c
@@ -118,6 +118,9 @@ static void __init xes_mpc85xx_setup_arch(void)
 {
 	struct device_node *root;
 	const char *model = "Unknown";
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
 
 	root = of_find_node_by_path("/");
 	if (root == NULL)
@@ -130,6 +133,11 @@ static void __init xes_mpc85xx_setup_arch(void)
 
 	xes_mpc85xx_fixups();
 
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+#endif
+
 	mpc85xx_smp_init();
 }
 
diff --git a/arch/powerpc/platforms/86xx/mpc86xx_hpcn.c b/arch/powerpc/platforms/86xx/mpc86xx_hpcn.c
index 7af02a4..8bedac2 100644
--- a/arch/powerpc/platforms/86xx/mpc86xx_hpcn.c
+++ b/arch/powerpc/platforms/86xx/mpc86xx_hpcn.c
@@ -69,10 +69,17 @@ static int mpc86xx_exclude_device(struct pci_controller *hose,
 static void __init
 mpc86xx_hpcn_setup_arch(void)
 {
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
 	if (ppc_md.progress)
 		ppc_md.progress("mpc86xx_hpcn_setup_arch()", 0);
 
 #ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci")
+		fsl_pci_setup(np);
+
 	ppc_md.pci_exclude_device = mpc86xx_exclude_device;
 
 #endif
diff --git a/arch/powerpc/sysdev/fsl_pci.c b/arch/powerpc/sysdev/fsl_pci.c
index 77c67d6..9b05094 100644
--- a/arch/powerpc/sysdev/fsl_pci.c
+++ b/arch/powerpc/sysdev/fsl_pci.c
@@ -903,22 +903,22 @@ static const struct of_device_id pci_ids[] = {
 };
 
 int primary_phb_addr;
-static int __devinit fsl_pci_probe(struct platform_device *pdev)
+int fsl_pci_setup(struct device_node *np)
 {
-	int ret;
+	struct pci_controller *hose;
+	int ret = 0;
 	bool is_primary;
 
-	if (of_match_node(pci_ids, pdev->dev.of_node)) {
+	if (of_match_node(pci_ids, np)) {
 		struct resource rsrc;
-		of_address_to_resource(pdev->dev.of_node, 0, &rsrc);
+		of_address_to_resource(np, 0, &rsrc);
 		is_primary = ((rsrc.start & 0xfffff) == primary_phb_addr);
-		ret = fsl_add_bridge(pdev->dev.of_node, is_primary);
+		ret = fsl_add_bridge(np, is_primary);
 
 #ifdef CONFIG_SWIOTLB
 		if (ret == 0) {
-			struct pci_controller *hose;
+			hose = pci_find_hose_for_OF_device(np);
 
-			hose = pci_find_hose_for_OF_device(pdev->dev.of_node);
 			/*
 			 * if we couldn't map all of DRAM via the dma windows
 			 * we need SWIOTLB to handle buffers located outside of
@@ -933,6 +933,11 @@ static int __devinit fsl_pci_probe(struct platform_device *pdev)
 		}
 #endif
 	}
+	return ret;
+}
+
+static int __devinit fsl_pci_probe(struct platform_device *pdev)
+{
 #ifdef CONFIG_PPC64
 	pci_devs_phb_init();
 #endif
diff --git a/arch/powerpc/sysdev/fsl_pci.h b/arch/powerpc/sysdev/fsl_pci.h
index 7b8d5fa..582cde0 100644
--- a/arch/powerpc/sysdev/fsl_pci.h
+++ b/arch/powerpc/sysdev/fsl_pci.h
@@ -125,6 +125,7 @@ struct ccsr_pci {
 
 extern int primary_phb_addr;
 extern int fsl_add_bridge(struct device_node *dev, int is_primary);
+extern int fsl_pci_setup(struct device_node *np);
 extern void fsl_pcibios_fixup_bus(struct pci_bus *bus);
 extern int mpc83xx_add_bridge(struct device_node *dev);
 u64 fsl_pci_immrbar_base(struct pci_controller *hose);
-- 
1.7.9.7

