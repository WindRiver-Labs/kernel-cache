From f9960bb5b9b046b22ed7b8939626bb5d1161ac20 Mon Sep 17 00:00:00 2001
From: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Date: Thu, 31 May 2012 22:02:36 +0000
Subject: [PATCH 126/128] dpaa_eth: Fix RX bytes counter

The skb is freed in netif_receive_skb, thus the skb->len
has invalid value.
Save the skb->len before passing the skb to the stack and
use the stored value to increment the rx_bytes counter.

Signed-off-by: Cristian Sovaiala <cristian.sovaiala@freescale.com>
[Kevin: Original patch taken from FSL
QorIQ-SDK-V1.2-SOURCE-20120614-yocto.iso image]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c    |    5 ++++-
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c |    5 ++++-
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index e3810ff..8692103 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -947,6 +947,7 @@ void __hot _dpa_rx(struct net_device *net_dev,
 	struct sk_buff **skbh;
 	dma_addr_t addr = qm_fd_addr(fd);
 	u32 fd_status = fd->status;
+	unsigned int skb_len;
 
 	skbh = (struct sk_buff **)phys_to_virt(addr);
 
@@ -1006,11 +1007,13 @@ void __hot _dpa_rx(struct net_device *net_dev,
 		/* won't count the rx bytes in */
 		goto skb_stolen;
 
+	skb_len = skb->len;
+
 	if (unlikely(netif_receive_skb(skb) == NET_RX_DROP))
 		percpu_priv->stats.rx_dropped++;
 	else {
 		percpu_priv->stats.rx_packets++;
-		percpu_priv->stats.rx_bytes += skb->len;
+		percpu_priv->stats.rx_bytes += skb_len;
 	}
 
 skb_stolen:
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index 5b08e73..a507230 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -406,6 +406,7 @@ void __hot _dpa_rx(struct net_device *net_dev,
 	struct sk_buff *skb;
 	dma_addr_t addr = qm_fd_addr(fd);
 	u32 fd_status = fd->status;
+	unsigned int skb_len;
 
 	if (unlikely(fd_status & FM_FD_STAT_ERRORS) != 0) {
 		if (netif_msg_hw(priv) && net_ratelimit())
@@ -471,11 +472,13 @@ void __hot _dpa_rx(struct net_device *net_dev,
 	} else
 		skb->ip_summed = CHECKSUM_NONE;
 
+	skb_len = skb->len;
+
 	if (unlikely(netif_receive_skb(skb) == NET_RX_DROP))
 		percpu_priv->stats.rx_dropped++;
 	else {
 		percpu_priv->stats.rx_packets++;
-		percpu_priv->stats.rx_bytes += skb->len;
+		percpu_priv->stats.rx_bytes += skb_len;
 	}
 
 	net_dev->last_rx = jiffies;
-- 
1.7.9.7

