From bcda7fa5bb3c3e8fda65d55a6429da3fb30af3d8 Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Mon, 31 Dec 2012 14:03:37 +0800
Subject: [PATCH] grsec: allow write access to process vm.

Allow kgdb access to process memory, and use the normal GRSecurity
logging mechanism to report failed connect attempts.

Signed-off-by: Joe MacDonald <joe.macdonald@windriver.com>
Signed-off-by: Benjamin Walsh <benjamin.walsh@windriver.com>
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 include/linux/grmsg.h |    1 +
 mm/memory.c           |   22 ++++++++++++++++++++++
 security/Kconfig      |    9 +++++++++
 3 files changed, 32 insertions(+)

diff --git a/include/linux/grmsg.h b/include/linux/grmsg.h
index 54f4e85..cd3fbae 100644
--- a/include/linux/grmsg.h
+++ b/include/linux/grmsg.h
@@ -108,3 +108,4 @@
 #define GR_INIT_TRANSFER_MSG "persistent special role transferred privilege to init by "
 #define GR_BADPROCPID_MSG "denied read of sensitive /proc/pid/%s entry via fd passed across exec by "
 #define GR_SYMLINKOWNER_MSG "denied following symlink %.950s since symlink owner %u does not match target owner %u, by "
+#define GR_ACCESS_PROC_VM_MSG "denied access to process memory "
diff --git a/mm/memory.c b/mm/memory.c
index ceb54c6..92ad5e9 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -4101,6 +4101,28 @@ static int __access_remote_vm(struct task_struct *tsk, struct mm_struct *mm,
 
 		ret = get_user_pages(tsk, mm, addr, 1,
 				write, 1, &page, &vma);
+#if defined(CONFIG_PAX_MPROTECT) && \
+    defined(CONFIG_PAX_MPROTECT_ALLOW_PTRACE)
+		if (write && ret <= 0) {
+			struct vm_area_struct *tvma, *prev;
+			unsigned long vm_flags;
+			ret = get_user_pages(tsk, mm, addr, 1,
+					     0, 1, &page, &vma);
+			if (ret <= 0)
+				break;
+			tvma = find_vma_prev(mm, addr, &prev);
+			if (!(tvma->vm_flags & (VM_MAYWRITE | VM_WRITE))) {
+				vm_flags = tvma->vm_flags;
+				tvma->vm_flags |= VM_MAYWRITE;
+				if (mprotect_fixup(vma, &prev, addr,
+						   vma->vm_end,
+						   tvma->vm_flags))
+					ret = -EFAULT;
+			}
+			ret = get_user_pages(tsk, mm, addr, 1,
+					     write, 1, &page, &vma);
+		}
+#endif
 		if (ret <= 0) {
 			/*
 			 * Check if this is a VM_IO | VM_PFNMAP VMA, which
diff --git a/security/Kconfig b/security/Kconfig
index 21ec30b..3d7ddf8 100644
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -486,6 +486,15 @@ config PAX_MPROTECT
 	  NOTE: you can use the 'chpax' or 'paxctl' utilities to control
 	  this feature on a per file basis.
 
+config PAX_MPROTECT_ALLOW_PTRACE
+	bool "Always allow ptrace write with PAX_MPROTECT"
+	depends on PAX_MPROTECT
+	default y
+	help
+	  This option is intended to allow the ptrace to modify an
+	  executables non writable pages that are protected with the
+	  restricted mprotect() that is in enforced with PAX_MPROTECT.
+
 config PAX_MPROTECT_COMPAT
 	bool "Use legacy/compat protection demoting (read help)"
 	default y if (GRKERNSEC_CONFIG_AUTO && GRKERNSEC_CONFIG_DESKTOP)
-- 
1.7.9.7

