From 3bced7dc6ef5cd49ab076c9863bfa07557ca5add Mon Sep 17 00:00:00 2001
From: Benjamin Walsh <benjamin.walsh@windriver.com>
Date: Thu, 6 May 2010 22:01:24 -0400
Subject: [PATCH 01/12] mm: release the page holding the mem range info last

The early boot sequence marks most of the memory as reserved, and later
releases it to the page allocator. When doing the release, one page is
used to store the information about the memory ranges. That page can be
amongst the first ones to be released. If the PaX SANITIZE feature is
turned on, the information in that page gets wiped out and the memory
in all remaining ranges does not get freed. A symptom of the problem is
an early boot out-of-memory error.

Signed-off-by: Benjamin Walsh <benjamin.walsh@windriver.com>
---
 kernel/early_res.c |   14 ++++++++++++++
 1 files changed, 14 insertions(+), 0 deletions(-)

diff --git a/kernel/early_res.c b/kernel/early_res.c
index 31aa933..6b6a7e6 100644
--- a/kernel/early_res.c
+++ b/kernel/early_res.c
@@ -398,6 +398,7 @@ int __init get_free_all_memory_range(struct range **rangep, int nodeid)
 	u64 mem;
 	struct range *range;
 	int nr_range;
+	int range_pages_pfn[2];
 
 	count  = 0;
 	for (i = 0; i < max_early_res && early_res[i].end; i++)
@@ -428,6 +429,19 @@ int __init get_free_all_memory_range(struct range **rangep, int nodeid)
 	subtract_early_res(range, count);
 	nr_range = clean_sort_range(range, count);
 
+	/* Remove pages that are used to store the ranges information from
+	 * their position in the list and add them to the end instead where
+	 * they will get freed last. Having them released in the current order
+	 * breaks the SANITIZE PaX option since it zeroes the pages and thus
+	 * wipes the information for the remaining ranges.
+	 */
+	range_pages_pfn[0] = PFN_DOWN(mem);
+	range_pages_pfn[1] = PFN_UP((mem+size));
+	subtract_range(range, count, range_pages_pfn[0], range_pages_pfn[1]);
+	nr_range = clean_sort_range(range, count);
+	nr_range = add_range(range, count, nr_range, range_pages_pfn[0],
+				range_pages_pfn[1]);
+
 	/* need to clear it ? */
 	if (nodeid == MAX_NUMNODES) {
 		memset(&early_res[0], 0,
-- 
1.6.5.2

