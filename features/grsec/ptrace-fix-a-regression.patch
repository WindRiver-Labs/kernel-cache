From 2e802e306e4299f477a54ad8eb2d4de5ec61442c Mon Sep 17 00:00:00 2001
From: Roy.Li <rongqing.li@windriver.com>
Date: Wed, 20 Mar 2013 11:18:25 +0800
Subject: [PATCH] ptrace: fix a regression

664e01bef177 (powerpc/ptrace: make the read/write registers successful
in PowerPC CGL kernel), to meet the security requirements of the
PAX_USERCOPY feature, We first copy the registers from the task struct
to stack memory(the address of stack memory is stored in kbuf)by calling
user_regset_copyout, and then copy the stack memory(kbuf) to userspace.

But when calling user_regset_copyout, the kbuf has been reassigned to
the end of stack memory. then copying kbuf to userspace is wrong, we
should use the start address of this stack memory as the source address.

static inline int user_regset_copyout(unsigned int *pos, unsigned int *count,
                                      void **kbuf,
                                      void __user **ubuf, const void *data,
                                      const int start_pos, const int end_pos)
{
...
                if (*kbuf) {
                        memcpy(*kbuf, data, copy);
*                       *kbuf += copy;
                } else if (__copy_to_user(*ubuf, data, copy))

...
}

Signed-off-by: Roy.Li <rongqing.li@windriver.com>
---
 arch/powerpc/kernel/ptrace.c |   13 +++++++------
 1 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/arch/powerpc/kernel/ptrace.c b/arch/powerpc/kernel/ptrace.c
index 7726591..19d5ad6 100644
--- a/arch/powerpc/kernel/ptrace.c
+++ b/arch/powerpc/kernel/ptrace.c
@@ -292,7 +292,7 @@ static int gpr_get(struct task_struct *target, const struct user_regset *regset,
 
 #ifdef CONFIG_PAX_USERCOPY
 	if (to_user)
-		__copy_to_user(ubuf, kbuf, to_user);
+		__copy_to_user(ubuf, mbuf, to_user);
 #endif
 	return ret;
 }
@@ -445,9 +445,10 @@ static int vr_get(struct task_struct *target, const struct user_regset *regset,
 	int ret;
 #ifdef CONFIG_PAX_USERCOPY
 	int to_user = 0;
+	void *mbuf = NULL;
 
 	if (!kbuf) {
-		kbuf = kmalloc(count, GFP_KERNEL);
+		mbuf = kbuf = kmalloc(count, GFP_KERNEL);
 		if (!kbuf)
 			return -ENOMEM;
 
@@ -477,8 +478,8 @@ static int vr_get(struct task_struct *target, const struct user_regset *regset,
 	}
 #ifdef CONFIG_PAX_USERCOPY
 	if (to_user) {
-		__copy_to_user(ubuf, kbuf, to_user);
-		kfree(kbuf);
+		__copy_to_user(ubuf, mbuf, to_user);
+		kfree(mbuf);
 	}
 #endif
 	return ret;
@@ -499,7 +500,7 @@ static int vr_set(struct task_struct *target, const struct user_regset *regset,
 			return -ENOMEM;
 
 		from_user = count;
-		__copy_from_user(kbuf, ubuf, count);
+		__copy_from_user((void *)kbuf, ubuf, count);
 	}
 #endif
 	flush_altivec_to_thread(target);
@@ -636,7 +637,7 @@ static int evr_get(struct task_struct *target, const struct user_regset *regset,
 
 #ifdef CONFIG_PAX_USERCOPY
 	if (to_user)
-		__copy_to_user(ubuf, kbuf, to_user);
+		__copy_to_user(ubuf, mbuf, to_user);
 #endif
 	return ret;
 }
-- 
1.7.0

