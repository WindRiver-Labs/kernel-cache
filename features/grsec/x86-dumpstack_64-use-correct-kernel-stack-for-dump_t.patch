From c5d61d5e8224ac0abe7b4021a4d7bdf2f3361b34 Mon Sep 17 00:00:00 2001
From: Shan Hai <shan.hai@windriver.com>
Date: Fri, 15 Nov 2013 15:28:45 +0800
Subject: [PATCH] x86/dumpstack_64: use correct kernel stack for dump_trace

The previous patch "oprofile: grsecurity changes results in x86-64 page fault"
erroneously makes the dump_trace to use thread_info of a task as kernel
stack base to walking the stack, this further causes empty stack trace dumpped
by dump_stack called from a kernel module, because the thread_info is moved off
the kernel stack in Pax and it does not point to the kernel stack anymore.

Call task_stack_page to get the stack of the current task of which stack is
dummped.

Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 arch/x86/kernel/dumpstack_64.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/arch/x86/kernel/dumpstack_64.c b/arch/x86/kernel/dumpstack_64.c
index 536ff3d..483e8f2 100644
--- a/arch/x86/kernel/dumpstack_64.c
+++ b/arch/x86/kernel/dumpstack_64.c
@@ -193,7 +193,7 @@ void dump_trace(struct task_struct *task, struct pt_regs *regs,
 	/*
 	 * This handles the process stack:
 	 */
-	stack_start = (void *)current_thread_info();
+	stack_start = task_stack_page(task);
 	bp = ops->walk_stack(task, stack_start, stack, bp, ops, data, NULL, &graph);
 out:
 	put_cpu();
-- 
1.7.5.4

