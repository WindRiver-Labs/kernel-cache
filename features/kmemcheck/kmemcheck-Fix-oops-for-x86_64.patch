From 0572257e79b90dbcc2567f7df0c85a869b775934 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 29 Jun 2010 13:49:36 +0800
Subject: [PATCH] kmemcheck: Fix oops for x86_64

PG_LEVEL_2M is page size by default before setup_arch,
so pmd_val is always available, this will let kmemcheck
in oops due to 2M page size, which from the following
codes:
	BUG_ON(level != PG_LEVEL_4K);
The change in this patch will let all pages with 4K
size, so kmemcheck will go right without oops.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/x86/mm/init_64.c |   10 ++++++++++
 1 files changed, 10 insertions(+), 0 deletions(-)

diff --git a/arch/x86/mm/init_64.c b/arch/x86/mm/init_64.c
index 367e79b..cbfe2f0 100644
--- a/arch/x86/mm/init_64.c
+++ b/arch/x86/mm/init_64.c
@@ -335,6 +335,15 @@ phys_pmd_init(pmd_t *pmd_page, unsigned long address, unsigned long end,
 			break;
 		}
 
+#ifndef CONFIG_KMEMCHECK
+/*
+ * PG_LEVEL_2M is page size by default before setup_arch,
+ * so pmd_val is always available, this will let kmemcheck
+ * in oops due to 2M page size.
+ * This change will let all pages with 4K size, so kmemcheck
+ * will go right without oops and no harm to others when it
+ * is disabled.
+ */
 		if (pmd_val(*pmd)) {
 			if (!pmd_large(*pmd)) {
 				spin_lock(&init_mm.page_table_lock);
@@ -347,6 +356,7 @@ phys_pmd_init(pmd_t *pmd_page, unsigned long address, unsigned long end,
 				pages++;
 			continue;
 		}
+#endif /* CONFIG_KMEMCHECK */
 
 		if (page_size_mask & (1<<PG_LEVEL_2M)) {
 			pages++;
-- 
1.7.0.4

