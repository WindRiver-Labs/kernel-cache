From 35f50f69838865279f2d18e6f020db677f8b16a2 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Mon, 15 Mar 2010 19:58:53 +0800
Subject: [PATCH] fix x86_64 boot stuck in kmemcheck

It seems "merge same page size" in init_memory_mapping is not
successful, which will incur in some mem_ranges with the same
page size.
This is similar to the upstream commit: f765090a2617b8d9cb

And __GFP_DMA should masked in kmemcheck,otherwise 2M DMA page
will reported as a BUG_ON.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/x86/mm/init_64.c |    2 +-
 mm/kmemcheck.c        |    2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/arch/x86/mm/init_64.c b/arch/x86/mm/init_64.c
index 27d433c..2084aec 100644
--- a/arch/x86/mm/init_64.c
+++ b/arch/x86/mm/init_64.c
@@ -661,7 +661,7 @@ unsigned long __init_refok init_memory_mapping(unsigned long start,
 		old_start = mr[i].start;
 		memmove(&mr[i], &mr[i+1],
 			 (nr_range - 1 - i) * sizeof (struct map_range));
-		mr[i].start = old_start;
+		mr[i--].start = old_start;
 		nr_range--;
 	}
 
diff --git a/mm/kmemcheck.c b/mm/kmemcheck.c
index ee19e5c..0754171 100644
--- a/mm/kmemcheck.c
+++ b/mm/kmemcheck.c
@@ -102,7 +102,7 @@ void kmemcheck_pagealloc_alloc(struct page *page, unsigned int order,
 {
 	int pages;
 
-	if (gfpflags & (__GFP_HIGHMEM | __GFP_NOTRACK))
+	if (gfpflags & (__GFP_HIGHMEM | __GFP_NOTRACK | __GFP_DMA))
 		return;
 
 	pages = 1 << order;
-- 
1.7.0

