From 4f91f3c8f268b2d199fdde3607c4fd942172a524 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Thu, 1 Jul 2010 05:56:20 -0700
Subject: [PATCH 1/2] kmemcheck: add address comparison to bug report decision

Original design goal:

 There is only one report when un-initialized access happened
 in the same instruction address, then you must fix this access;
 And go another. So there is only one comp(prev_ip == regs->ip).

There is implict assumption in this original design:

 It is the same context at the same un-initialized access when
 two continuous kmemcheck bug reports at the same instruction
 address.

But there are some abnormal cases (although they seldom happen),
So add another compare(prev_addr == address) to assure no bug
report missed.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/x86/mm/kmemcheck/error.c |    4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/arch/x86/mm/kmemcheck/error.c b/arch/x86/mm/kmemcheck/error.c
index dab4187..f4e13305 100644
--- a/arch/x86/mm/kmemcheck/error.c
+++ b/arch/x86/mm/kmemcheck/error.c
@@ -157,15 +157,17 @@ void kmemcheck_error_save(enum kmemcheck_shadow state,
 	unsigned long address, unsigned int size, struct pt_regs *regs)
 {
 	static unsigned long prev_ip;
+	static unsigned long prev_addr;
 
 	struct kmemcheck_error *e;
 	void *shadow_copy;
 	void *memory_copy;
 
 	/* Don't report several adjacent errors from the same EIP. */
-	if (regs->ip == prev_ip)
+	if ((regs->ip == prev_ip) && (address == prev_addr))
 		return;
 	prev_ip = regs->ip;
+	prev_addr = address;
 
 	e = error_next_wr();
 	if (!e)
-- 
1.7.9.7

