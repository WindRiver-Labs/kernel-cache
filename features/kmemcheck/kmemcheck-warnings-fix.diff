From 54805cd7604d977af358d084235c40f3ccc839b2
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Wed, 24 Feb 2010 17:05:29 +0800
Subject: [PATCH ] kmemcheck fixes for warnings

fs: introduce __getname_gfp()
commit 3446a8aa7ebcbc0a799e5e8fc4f2da0738d6bc21

The purpose of this change is to allow __getname() users to pass a
custom GFP mask to kmem_cache_alloc(). This is needed for annotating
a certain kmemcheck false positive.

And some warnings fixes:
commit 3b5c760efcddf1ebdd39a2035b554e96febd7466
commit 7a0aeb14e18ad59394bd9bbc6e57fb345819e748

Signed-off-by: Vegard Nossum <vegard.nossum@gmail.com>

diff --git a/include/linux/fs.h b/include/linux/fs.h
index ede84fa..6d12174 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -1919,8 +1919,9 @@ extern void __init vfs_caches_init(unsigned long);
 
 extern struct kmem_cache *names_cachep;
 
-#define __getname()	kmem_cache_alloc(names_cachep, GFP_KERNEL)
-#define __putname(name) kmem_cache_free(names_cachep, (void *)(name))
+#define __getname_gfp(gfp)	kmem_cache_alloc(names_cachep, (gfp))
+#define __getname()		__getname_gfp(GFP_KERNEL)
+#define __putname(name)		kmem_cache_free(names_cachep, (void *)(name))
 #ifndef CONFIG_AUDITSYSCALL
 #define putname(name)   __putname(name)
 #else
diff --git a/init/do_mounts.c b/init/do_mounts.c
index 880833b..b2e45ce 100644
--- a/init/do_mounts.c
+++ b/init/do_mounts.c
@@ -229,7 +229,8 @@ static int __init do_mount_root(char *name, char *fs, int flags, void *data)
 
 void __init mount_block_root(char *name, int flags)
 {
-	char *fs_names = __getname();
+	char *fs_names = __getname_gfp(GFP_KERNEL
+		| __GFP_NOTRACK_FALSE_POSITIVE);
 	char *p;
 #ifdef CONFIG_BLOCK
 	char b[BDEVNAME_SIZE];
diff --git a/kernel/signal.c b/kernel/signal.c
index 84dc1d8..7651189 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -803,6 +803,7 @@ static int send_signal(int sig, struct siginfo *info, struct task_struct *t,
 {
 	struct sigpending *pending;
 	struct sigqueue *q;
+	int override_rlimit;
 
 	trace_sched_signal_send(sig, t);
 
@@ -833,9 +834,13 @@ static int send_signal(int sig, struct siginfo *info, struct task_struct *t,
 	   make sure at least one signal gets delivered and don't
 	   pass on the info struct.  */
 
-	q = __sigqueue_alloc(t, GFP_ATOMIC, (sig < SIGRTMIN &&
-					     (is_si_special(info) ||
-					      info->si_code >= 0)));
+	if (sig < SIGRTMIN)
+		override_rlimit = (is_si_special(info) || info->si_code >= 0);
+	else
+		override_rlimit = 0;
+
+	q = __sigqueue_alloc(t, GFP_ATOMIC | __GFP_NOTRACK_FALSE_POSITIVE,
+		override_rlimit);
 	if (q) {
 		list_add_tail(&q->list, &pending->list);
 		switch ((unsigned long) info) {
-- 
1.6.3.3

