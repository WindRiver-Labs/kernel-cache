From c274efff2595744819046efcefd3a80ae5c287d1 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Fri, 18 Jan 2013 10:28:53 -0800
Subject: [PATCH] NTB: Add 32bit version writeq and readq

commit dbee8a0affd5e6eaa5d7c816c4bc233f6f110f50
[x86: remove 32-bit versions of readq()/writeq()] removed
32bit version writeq/readq, and encourage to implement
hardware driver specific 32bit version.

So, add 32bit version writeq/readq for NTB driver.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 drivers/ntb/ntb_hw.c |   39 ++++++++++++++++++++++++++++++++-------
 1 file changed, 32 insertions(+), 7 deletions(-)

diff --git a/drivers/ntb/ntb_hw.c b/drivers/ntb/ntb_hw.c
index 43bf0f2..ec5cc3a 100644
--- a/drivers/ntb/ntb_hw.c
+++ b/drivers/ntb/ntb_hw.c
@@ -95,6 +95,31 @@ MODULE_DEVICE_TABLE(pci, ntb_pci_tbl);
 
 extern struct bus_type ntb_bus_type;
 
+static inline __u64 ntb_readq(const volatile void __iomem *addr)
+{
+#ifdef CONFIG_X86_64
+	return readq(addr);
+#else
+	const volatile u32 __iomem *p = addr;
+	u32 low, high;
+
+	low = readl(p);
+	high = readl(p + 1);
+
+	return low + ((u64)high << 32);
+#endif
+}
+
+static inline void ntb_writeq(__u64 val, volatile void __iomem *addr)
+{
+#ifdef CONFIG_X86_64
+	writeq(val, addr);
+#else
+	writel(val, addr);
+	writel(val >> 32, addr+4);
+#endif
+}
+
 /**
  * ntb_register_event_callback() - register event callback
  * @ndev: pointer to ntb_device instance
@@ -401,10 +426,10 @@ void ntb_set_mw_addr(struct ntb_device *ndev, unsigned int mw, u64 addr)
 
 	switch (MW_TO_BAR(mw)) {
 	case NTB_BAR_23:
-		writeq(addr, ndev->reg_ofs.sbar2_xlat);
+		ntb_writeq(addr, ndev->reg_ofs.sbar2_xlat);
 		break;
 	case NTB_BAR_45:
-		writeq(addr, ndev->reg_ofs.sbar4_xlat);
+		ntb_writeq(addr, ndev->reg_ofs.sbar4_xlat);
 		break;
 	}
 }
@@ -424,7 +449,7 @@ void ntb_ring_sdb(struct ntb_device *ndev, unsigned int db)
 	dev_dbg(&ndev->pdev->dev, "%s: ringing doorbell %d\n", __func__, db);
 
 	if (ndev->hw_type == BWD_HW)
-		writeq((u64) 1 << db, ndev->reg_ofs.sdb);
+		ntb_writeq((u64) 1 << db, ndev->reg_ofs.sdb);
 	else
 		writew(((1 << ndev->bits_per_vector) - 1) <<
 		       (db * ndev->bits_per_vector), ndev->reg_ofs.sdb);
@@ -683,7 +708,7 @@ static irqreturn_t bwd_callback_msix_irq(int irq, void *data)
 	 */
 	ndev->last_ts = jiffies;
 
-	writeq((u64) 1 << db_cb->db_num, ndev->reg_ofs.pdb);
+	ntb_writeq((u64) 1 << db_cb->db_num, ndev->reg_ofs.pdb);
 
 	return IRQ_HANDLED;
 }
@@ -734,7 +759,7 @@ static irqreturn_t ntb_interrupt(int irq, void *dev)
 	unsigned int i = 0;
 
 	if (ndev->hw_type == BWD_HW) {
-		u64 pdb = readq(ndev->reg_ofs.pdb);
+		u64 pdb = ntb_readq(ndev->reg_ofs.pdb);
 
 		dev_dbg(&ndev->pdev->dev, "irq %d - pdb = %Lx\n", irq, pdb);
 
@@ -914,7 +939,7 @@ static int __devinit ntb_setup_interrupts(struct ntb_device *ndev)
 	 * Interrupt.  The rest will be unmasked as callbacks are registered.
 	 */
 	if (ndev->hw_type == BWD_HW)
-		writeq(~0, ndev->reg_ofs.pdb_mask);
+		ntb_writeq(~0, ndev->reg_ofs.pdb_mask);
 	else
 		writew(~(1 << ndev->limits.max_db_bits),
 		       ndev->reg_ofs.pdb_mask);
@@ -946,7 +971,7 @@ static void __devexit ntb_free_interrupts(struct ntb_device *ndev)
 
 	/* mask interrupts */
 	if (ndev->hw_type == BWD_HW)
-		writeq(~0, ndev->reg_ofs.pdb_mask);
+		ntb_writeq(~0, ndev->reg_ofs.pdb_mask);
 	else
 		writew(~0, ndev->reg_ofs.pdb_mask);
 
-- 
1.7.9.7

