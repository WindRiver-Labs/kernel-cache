From 78ebcaee8a4beb65a2b681b3be23d612dab26553 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Tue, 6 Nov 2012 09:59:41 -0800
Subject: [PATCH 4/4] ntb: Add the capability to support multiple ntb buses

The original driver design didn't take account into multiple ntb
buses and devices, the second bus or device was failed to register.

Fix bus and device register to support multiple buses and devices.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 drivers/ntb/ntb_hw.c        |   20 +++++++++++++++++++-
 drivers/ntb/ntb_transport.c |   25 ++++++++-----------------
 2 files changed, 27 insertions(+), 18 deletions(-)

diff --git a/drivers/ntb/ntb_hw.c b/drivers/ntb/ntb_hw.c
index d6671f9..43bf0f2 100644
--- a/drivers/ntb/ntb_hw.c
+++ b/drivers/ntb/ntb_hw.c
@@ -93,6 +93,8 @@ static DEFINE_PCI_DEVICE_TABLE(ntb_pci_tbl) = {
 };
 MODULE_DEVICE_TABLE(pci, ntb_pci_tbl);
 
+extern struct bus_type ntb_bus_type;
+
 /**
  * ntb_register_event_callback() - register event callback
  * @ndev: pointer to ntb_device instance
@@ -1152,9 +1154,23 @@ static struct pci_driver ntb_pci_driver = {
 
 static int __init ntb_init_module(void)
 {
+	int rc;
+
 	pr_info("%s: %s, version %s\n", KBUILD_MODNAME, NTB_NAME, NTB_VER);
 
-	return pci_register_driver(&ntb_pci_driver);
+	rc = bus_register(&ntb_bus_type);
+	if (rc)
+		goto err;
+
+	rc = pci_register_driver(&ntb_pci_driver);
+	if (rc)
+		goto err1;
+
+	return rc;
+err1:
+	bus_unregister(&ntb_bus_type);
+err:
+	return rc;
 }
 module_init(ntb_init_module);
 
@@ -1162,6 +1178,8 @@ static void __exit ntb_exit_module(void)
 {
 	pci_unregister_driver(&ntb_pci_driver);
 
+	bus_unregister(&ntb_bus_type);
+
 	pr_info("%s: Driver removed\n", KBUILD_MODNAME);
 }
 module_exit(ntb_exit_module);
diff --git a/drivers/ntb/ntb_transport.c b/drivers/ntb/ntb_transport.c
index 118a852..3ffe379 100644
--- a/drivers/ntb/ntb_transport.c
+++ b/drivers/ntb/ntb_transport.c
@@ -220,38 +220,29 @@ struct bus_type ntb_bus_type = {
 	.remove = ntb_client_remove,
 };
 
-static int __devinit ntb_bus_init(struct ntb_transport *nt)
+static int __devinit ntb_device_init(struct ntb_transport *nt)
 {
 	struct device *dev = &nt->netdev;
 	int rc;
-
-	rc = bus_register(&ntb_bus_type);
-	if (rc)
-		goto err;
+	static nr = 0;
 
 	/* setup and register client devices */
-	dev_set_name(dev, "ntb_netdev");
+	dev_set_name(dev, "ntb_netdev-%d", nr);
 	dev->bus = &ntb_bus_type;
 	dev->release = ntb_client_release;
 	dev->parent = &ntb_query_pdev(nt->ndev)->dev;
 
 	rc = device_register(dev);
 	if (rc)
-		goto err1;
+		return rc;
+	nr++;
 
 	return 0;
-
-err1:
-	bus_unregister(&ntb_bus_type);
-err:
-	return rc;
 }
 
-static void __devexit ntb_bus_remove(struct ntb_transport *nt)
+static void __devexit ntb_device_remove(struct ntb_transport *nt)
 {
 	device_unregister(&nt->netdev);
-
-	bus_unregister(&ntb_bus_type);
 }
 
 /**
@@ -707,7 +698,7 @@ int ntb_transport_init(struct pci_dev *pdev)
 	if (rc)
 		goto err2;
 
-	ntb_bus_init(nt);
+	ntb_device_init(nt);
 
 	INIT_DELAYED_WORK(&nt->link_work, ntb_transport_link_work);
 
@@ -742,7 +733,7 @@ void ntb_transport_free(void *transport)
 		ntb_transport_free_queue(&nt->qps[i]);
 	}
 
-	ntb_bus_remove(nt);
+	ntb_device_remove(nt);
 
 	cancel_delayed_work_sync(&nt->link_work);
 
-- 
1.7.9.7

