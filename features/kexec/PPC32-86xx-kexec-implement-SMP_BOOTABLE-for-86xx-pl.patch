From ce668d9105f6c237d50e76e772bb3760dbfa943f Mon Sep 17 00:00:00 2001
From: Benjamin Walsh <benjamin.walsh@windriver.com>
Date: Tue, 23 Mar 2010 21:47:27 -0400
Subject: [PATCH] PPC32/86xx/kexec: implement SMP_BOOTABLE for 86xx platforms

Simply store the address where secondary CPUs start when we're
ready to release them. This will get them out of their spin loop.

Signed-off-by: Benjamin Walsh <benjamin.walsh@windriver.com>
---
 arch/powerpc/platforms/86xx/mpc86xx_smp.c |   41 +++++++++++++++++++++++++++++
 1 files changed, 41 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/platforms/86xx/mpc86xx_smp.c b/arch/powerpc/platforms/86xx/mpc86xx_smp.c
index 014e26c..2cb6167 100644
--- a/arch/powerpc/platforms/86xx/mpc86xx_smp.c
+++ b/arch/powerpc/platforms/86xx/mpc86xx_smp.c
@@ -51,6 +51,42 @@ smp_86xx_release_core(int nr)
 }
 
 
+#ifdef CONFIG_KEXEC_POWERPC_SMP_BOOTABLE
+extern u32 kexec_secondary_hold_addr;
+static void __init __smp_86xx_kick_cpu(int nr)
+{
+	/* a kexec-bootable kernel has its secondary CPU spinning on
+	 * kexec_secondary_hold_addr in the new kernel text/data at this
+	 * point: release it and make it start its true kernel execution */
+
+	kexec_secondary_hold_addr = (u32)__pa(__secondary_start_mpc86xx);
+	mb();
+}
+
+static void __init
+smp_86xx_kick_cpu(int nr)
+{
+	unsigned long flags;
+	int n = 0;
+
+	WARN_ON (nr < 0 || nr >= NR_CPUS);
+
+	pr_debug("smp_86xx_kick_cpu: kick CPU #%d\n", nr);
+
+	local_irq_save(flags);
+
+	__smp_86xx_kick_cpu(nr);
+
+	/* Wait a bit for the CPU to ack. */
+	while ((__secondary_hold_acknowledge != nr) && (++n < 1000))
+		mdelay(1);
+
+	local_irq_restore(flags);
+
+	pr_debug("waited %d msecs for CPU #%d.\n", n, nr);
+}
+
+#else
 static void __init
 smp_86xx_kick_cpu(int nr)
 {
@@ -88,6 +124,7 @@ smp_86xx_kick_cpu(int nr)
 
 	pr_debug("wait CPU #%d for %d msecs.\n", nr, n);
 }
+#endif	/* CONFIG_KEXEC_POWERPC_SMP_BOOTABLE */
 
 
 static void __init
@@ -97,6 +134,7 @@ smp_86xx_setup_cpu(int cpu_nr)
 }
 
 
+extern void default_kexec_stop_cpus(void *arg);
 struct smp_ops_t smp_86xx_ops = {
 	.message_pass = smp_mpic_message_pass,
 	.probe = smp_mpic_probe,
@@ -104,6 +142,9 @@ struct smp_ops_t smp_86xx_ops = {
 	.setup_cpu = smp_86xx_setup_cpu,
 	.take_timebase = smp_generic_take_timebase,
 	.give_timebase = smp_generic_give_timebase,
+#ifdef CONFIG_KEXEC
+	.kexec_stop_cpus = default_kexec_stop_cpus,
+#endif
 };
 
 
-- 
1.6.0.4

