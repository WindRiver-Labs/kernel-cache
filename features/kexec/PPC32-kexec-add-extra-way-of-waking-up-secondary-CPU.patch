From 2191b9ee1bd546decc390356197e851382d86472 Mon Sep 17 00:00:00 2001
From: Benjamin Walsh <benjamin.walsh@windriver.com>
Date: Tue, 30 Mar 2010 18:24:41 -0400
Subject: [PATCH 4/5] PPC32/kexec: add extra way of waking up secondary CPUs

Some platforms secondary CPUs wakeup algorithms do not fit with the
way kexec holds these CPU while rebooting. Add a configuration flag
that takes care of these cases.

A default shutdown sequence and an very early boot sequence to bring
the secondary CPUs in the new kernel are provided. However, most
probably, a per-platform implementation of KEXEC_POWERPC_SMP_BOOTABLE
is required to wake up the secondary CPUs.

When the secondary CPU goes down in the original kernel, it first
spins in a tight loop in the control code page, which is randomly
allocated, until the copy of the new kernel is done. At that point,
the primary CPU jumps to the new kernel. It then has to bring the
secondary CPU into the second kernel as well since the control code
page has a high chance of being reused by the new kernel before the
primary CPU hits the secondary wakeup code. To achieve this, the
primary CPU writes the address of a new loop in the second kernel
at which the secondary jumps to.

To pass the address of the spin loop variable in the control code
page to the second kernel, register r25 is used: it is callee-saved
by C code that can be called by purgatory and not used by the
purgatory assembly code.

Signed-off-by: Benjamin Walsh <benjamin.walsh@windriver.com>
---
 arch/powerpc/Kconfig                 |   21 +++++++++++++++++++++
 arch/powerpc/kernel/head_32.S        |   16 +++++++++++++++-
 arch/powerpc/kernel/head_fsl_booke.S |   15 +++++++++++++++
 arch/powerpc/kernel/misc_32.S        |   28 ++++++++++++++++++++++++++++
 4 files changed, 79 insertions(+), 1 deletions(-)

diff --git a/arch/powerpc/Kconfig b/arch/powerpc/Kconfig
index 5328db7..b8c204c 100644
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@ -369,6 +369,27 @@ config KEXEC
 	  support.  As of this writing the exact hardware interface is
 	  strongly in flux, so no good recommendation can be made.
 
+config KEXEC_POWERPC_SMP_BOOTABLE
+	bool "Kernel bootable by kexec"
+	depends on SMP && (PPC_MULTIPLATFORM || PPC_85xx) && EXPERIMENTAL
+	help
+	  Some PowerPC kernels need a special treatment to be able to shut
+	  down CPUs and bring them safely to the kernel being kexec'ed into.
+	  Including this option adds the functionality needed by the kernel
+	  being kexec'ed into to bring itself up. The functionality for
+	  preparing the original kernel to go down and shut down the CPUs
+	  is included when the KEXEC option is selected.
+
+	  The original kernel booting out of the firmware should NOT be
+	  using this option.
+
+	  This option is to be used for the kernel being kexec'ed INTO. It
+	  will NOT WORK for booting out of the firmware.
+
+	  If a kernel is created to be kexec'ed into and also to be able to
+	  kexec into another kernel, both KEXEC_POWERPC_SMP_BOOTABLE and
+	  KEXEC should be included.
+
 config CRASH_DUMP
 	bool "Build a kdump crash kernel"
 	depends on (PPC_MULTIPLATFORM || PPC_85xx || PPC64 || 6xx)
diff --git a/arch/powerpc/kernel/head_32.S b/arch/powerpc/kernel/head_32.S
index e025e89..5d3d5da 100644
--- a/arch/powerpc/kernel/head_32.S
+++ b/arch/powerpc/kernel/head_32.S
@@ -138,7 +138,21 @@ __start:
 	trap
 #endif /* CONFIG_PPC_PMAC */
 
-1:	mr	r31,r3			/* save parameters */
+1:
+#ifdef CONFIG_KEXEC_POWERPC_SMP_BOOTABLE
+	/* purgatory did not touch r25, which contains the CPU1
+	 * boot info address: release CPU1 now and bring it into
+	 * this kernel: CPUs have a 1:1 mapping of the RAM at
+	 * this point. */
+
+	lis	r31, kexec_secondary_hold@h
+	ori	r31, r31, kexec_secondary_hold@l
+	subis	r31, r31, PAGE_OFFSET@h
+	stw	r31, 0(r25)
+	sync
+#endif
+
+	mr	r31,r3			/* save parameters */
 	mr	r30,r4
 	li	r24,0			/* cpu # */
 
diff --git a/arch/powerpc/kernel/head_fsl_booke.S b/arch/powerpc/kernel/head_fsl_booke.S
index 7255265..21c780d 100644
--- a/arch/powerpc/kernel/head_fsl_booke.S
+++ b/arch/powerpc/kernel/head_fsl_booke.S
@@ -62,6 +62,20 @@ _ENTRY(_start);
 	 * of abatron_pteptrs
 	 */
 	nop
+
+#ifdef CONFIG_KEXEC_POWERPC_SMP_BOOTABLE
+	/* purgatory did not touch r25, which contains the CPU1
+	 * boot info address: release CPU1 now and bring it into
+	 * this kernel: CPUs have a 1:1 mapping of the RAM at
+	 * this point. */
+
+	lis	r31, kexec_secondary_hold@h
+	ori	r31, r31, kexec_secondary_hold@l
+	subis	r31, r31, PAGE_OFFSET@h
+	stw	r31, 0(r25)
+	sync
+#endif
+
 /*
  * Save parameters we are passed
  */
@@ -136,6 +150,7 @@ match_TLB:
 	mtspr	SPRN_MAS1,r7
 	tlbwe
 
+/* r3 contains current MAS0[ESEL] */
 /* 2. Invalidate all entries except the entry we're executing in */
 	mfspr	r9,SPRN_TLB1CFG
 	andi.	r9,r9,0xfff
diff --git a/arch/powerpc/kernel/misc_32.S b/arch/powerpc/kernel/misc_32.S
index 89faf4f..6fde005 100644
--- a/arch/powerpc/kernel/misc_32.S
+++ b/arch/powerpc/kernel/misc_32.S
@@ -965,3 +965,31 @@ relocate_new_kernel_end:
 relocate_new_kernel_size:
 	.long relocate_new_kernel_end - relocate_new_kernel
 #endif
+
+#ifdef CONFIG_KEXEC_POWERPC_SMP_BOOTABLE
+
+	.globl kexec_secondary_hold_addr
+kexec_secondary_hold_addr:
+	.long 0
+
+	.globl kexec_secondary_hold
+kexec_secondary_hold:
+	lis	r3, kexec_secondary_hold_addr@h
+	ori	r3, r3, kexec_secondary_hold_addr@l
+	subis	r3, r3, PAGE_OFFSET@h
+
+	/* spin waiting for a non-zero address to branch to */
+1:	sync	/* relax */
+	lwz	r5, 0(r3)
+	cmpwi	r5, 0
+	beq	1b
+	/* end of spin loop */
+
+	isync
+	sync
+	mtlr	r5
+	blrl
+	/* not reached, jumped to _entry_start in new kernel */
+
+#endif 	/* CONFIG_KEXEC_POWERPC_SMP_BOOTABLE */
+
-- 
1.6.5.2

