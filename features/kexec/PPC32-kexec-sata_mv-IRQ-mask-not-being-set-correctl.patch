From 9f16287cd66308b39433fd7b5f682cc47bb0280b Mon Sep 17 00:00:00 2001
From: Benjamin Walsh <benjamin.walsh@windriver.com>
Date: Tue, 30 Mar 2010 18:26:16 -0400
Subject: [PATCH] PPC32/kexec/sata_mv: IRQ mask not being set correctly at boot

The global IRQ mask for the host controller had a potential
discrepancy between the HW value and the cached value. Coming
out of the firmware, they were in sync (zero default register
value in HW, cached value zeroed out when allocated), but
coming out of kexec, the HW could be in any state.

Signed-off-by: Benjamin Walsh <benjamin.walsh@windriver.com>
---
 drivers/ata/sata_mv.c |    7 +++++++
 1 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/drivers/ata/sata_mv.c b/drivers/ata/sata_mv.c
index d6f9453..3ee6af7 100644
--- a/drivers/ata/sata_mv.c
+++ b/drivers/ata/sata_mv.c
@@ -3094,6 +3094,13 @@ static int mv_init_host(struct ata_host *host, unsigned int board_idx)
 		hpriv->main_irq_mask_addr  = mmio + PCI_HC_MAIN_IRQ_MASK_OFS;
 	}
 
+	/* hpriv->main_irq_mask is zero at this point: make it reflect the
+	 * state of the hardware. If we don't, the call to mv_set_main_irq_mask
+	 * will be a no-op since it thinks that it is setting the mask to its
+	 * current value; we'll be left with discrepancy between the HW and the
+	 * cached value. */
+	hpriv->main_irq_mask = readl(hpriv->main_irq_mask_addr);
+
 	/* global interrupt mask: 0 == mask everything */
 	mv_set_main_irq_mask(host, ~0, 0);
 
-- 
1.6.0.4

