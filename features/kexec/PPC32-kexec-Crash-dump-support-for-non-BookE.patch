From ef32cbc0ea13de953a5b3e6a27d17dc8c0bdf74f Mon Sep 17 00:00:00 2001
From: Benjamin Walsh <benjamin.walsh@windriver.com>
Date: Tue, 30 Mar 2010 18:25:21 -0400
Subject: [PATCH] PPC32/kexec: Crash dump support for non-BookE

RELOCATABLE kernel type is broken for non-BookE PPC32 platforms. By
default, CRASH_DUMP kernels turn the RELOCATABLE option ON. Worse
even, the option was hidden in menuconfig for non-BookE platforms
since RELOCATABLE depended on FSL_BOOKE, and could not turned off.
Reverse this behaviour. The only important setting is the physical
address at which the kernel is linked, which must be 32M (0x02000000).

At the same time, take a first stab at fixing the broken RELOCATABLE
problem, at least loading the value of the variable PHYSICAL_START
is defined as in that case, instead of the address of the variable.
This doesn't really solve the problem but at least loads from the
correct place. The variable being in the BSS, it will always be
zero since it's not set anywhere, instead of garbage.

Signed-off-by: Benjamin Walsh <benjamin.walsh@windriver.com>
---
 arch/powerpc/Kconfig          |   14 ++++++++++----
 arch/powerpc/kernel/head_32.S |    7 +++++++
 2 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/arch/powerpc/Kconfig b/arch/powerpc/Kconfig
index e364113..fee30a7 100644
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@ -345,8 +345,9 @@ config KEXEC_POWERPC_SMP_BOOTABLE
 config CRASH_DUMP
 	bool "Build a kdump crash kernel (EXPERIMENTAL)"
 	depends on (PPC_MULTIPLATFORM || PPC_85xx) && EXPERIMENTAL
-	select RELOCATABLE
+	select RELOCATABLE if FSL_BOOKE
 	select VMCORE
+	select ADVANCED_OPTIONS
 	help
 	  Build a kernel suitable for use as a kdump capture kernel.
 	  The kernel will be linked at a different address than normal, and
@@ -717,7 +718,9 @@ config LOWMEM_SIZE
 
 config RELOCATABLE
 	bool "Build a relocatable kernel (EXPERIMENTAL)"
-	depends on EXPERIMENTAL && ADVANCED_OPTIONS && FLATMEM && FSL_BOOKE
+	depends on EXPERIMENTAL && ADVANCED_OPTIONS && FLATMEM
+	default y if CRASH_DUMP && FSL_BOOKE
+	default n
 	help
 	  This builds a kernel image that is capable of running at the
 	  location the kernel is loaded at (some alignment restrictions may
@@ -735,6 +738,7 @@ config RELOCATABLE
 
 config PAGE_OFFSET_BOOL
 	bool "Set custom page offset address"
+	default y if CRASH_DUMP
 	depends on ADVANCED_OPTIONS
 	help
 	  This option allows you to set the kernel virtual address at which
@@ -749,6 +753,7 @@ config PAGE_OFFSET
 
 config KERNEL_START_BOOL
 	bool "Set custom kernel base address"
+	default y if CRASH_DUMP
 	depends on ADVANCED_OPTIONS
 	help
 	  This option allows you to set the kernel virtual address at which
@@ -760,13 +765,14 @@ config KERNEL_START_BOOL
 
 config KERNEL_START
 	hex "Virtual address of kernel base" if KERNEL_START_BOOL
-	default PAGE_OFFSET if PAGE_OFFSET_BOOL
 	default "0xc2000000" if CRASH_DUMP
+	default PAGE_OFFSET if PAGE_OFFSET_BOOL
 	default "0xc0000000"
 
 config PHYSICAL_START_BOOL
 	bool "Set physical address where the kernel is loaded"
-	depends on ADVANCED_OPTIONS && FLATMEM && FSL_BOOKE
+	default y if CRASH_DUMP
+	depends on ADVANCED_OPTIONS && FLATMEM
 	help
 	  This gives the physical address where the kernel is loaded.
 
diff --git a/arch/powerpc/kernel/head_32.S b/arch/powerpc/kernel/head_32.S
index a87c5e0..8678493 100644
--- a/arch/powerpc/kernel/head_32.S
+++ b/arch/powerpc/kernel/head_32.S
@@ -190,7 +190,14 @@ __after_mmu_off:
 	bl	reloc_offset
 	mr	r26,r3
 	addis	r4,r3,KERNELBASE@h	/* current address of _start */
+
+#if defined(CONFIG_FLATMEM) && defined(CONFIG_RELOCATABLE)
+	lis	r5,PHYSICAL_START@ha
+	la	r5,PHYSICAL_START@l(r5)
+	lwz	r5,0(r5)
+#else
 	lis	r5,PHYSICAL_START@h
+#endif
 	cmplw	0,r4,r5			/* already running at PHYSICAL_START? */
 	bne	relocate_kernel
 /*
-- 
1.6.0.4

