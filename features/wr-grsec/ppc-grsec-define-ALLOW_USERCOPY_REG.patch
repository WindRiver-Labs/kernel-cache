From 260e6f1231aa5e64327b4311ef47798ffd37c100 Mon Sep 17 00:00:00 2001
From: "Roy.Li" <rongqing.li@windriver.com>
Date: Wed, 14 Jan 2015 15:06:49 -0800
Subject: [PATCH] ppc/grsec: define ALLOW_USERCOPY_REG

define ALLOW_USERCOPY_REG to allow to copy register content
from/to userland when grsec is on.

PAX_USERCOPY blocks to copy register data from/to userland.
when ALLOW_USERCOPY_REG is enabled, register/userland data
is firstly copied to stack, then copy to userland/register
from stack,this works around PAX_USERCOPY.

Signed-off-by: Roy.Li <rongqing.li@windriver.com>
Signed-off-by: Han Chao <chan@windriver.com>
[Adjust context for 3.14 kernel]
Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/powerpc/Kconfig         | 9 +++++++++
 arch/powerpc/kernel/ptrace.c | 8 ++++----
 2 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/arch/powerpc/Kconfig b/arch/powerpc/Kconfig
index afa4212..163f6b8 100644
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@ -1054,4 +1054,13 @@ source "crypto/Kconfig"
 config PPC_LIB_RHEAP
 	bool
 
+config ALLOW_USERCOPY_REG 
+	bool "allow to copy register content from/to userland when grsec is on"
+	depends on PAX_USERCOPY
+	default n
+	help
+	  Copying data between register and userland is normally disabled by
+	  GRSecurity kernel hardening policy (PAX_USERCOPY). Unless you know
+	  you need this feature, you should say N here.
+
 source "arch/powerpc/kvm/Kconfig"
diff --git a/arch/powerpc/kernel/ptrace.c b/arch/powerpc/kernel/ptrace.c
index 35df241..7dbb498 100644
--- a/arch/powerpc/kernel/ptrace.c
+++ b/arch/powerpc/kernel/ptrace.c
@@ -361,13 +361,13 @@ static int fpr_get(struct task_struct *target, const struct user_regset *regset,
 		   unsigned int pos, unsigned int count,
 		   void *kbuf, void __user *ubuf)
 {
-#ifdef CONFIG_VSX
+#if defined(CONFIG_VSX) || defined(CONFIG_ALLOW_USERCOPY_REG)
 	u64 buf[33];
 	int i;
 #endif
 	flush_fp_to_thread(target);
 
-#ifdef CONFIG_VSX
+#if defined(CONFIG_VSX) || defined(CONFIG_ALLOW_USERCOPY_REG)
 	/* copy to local buffer then write that out */
 	for (i = 0; i < 32 ; i++)
 		buf[i] = target->thread.TS_FPR(i);
@@ -387,13 +387,13 @@ static int fpr_set(struct task_struct *target, const struct user_regset *regset,
 		   unsigned int pos, unsigned int count,
 		   const void *kbuf, const void __user *ubuf)
 {
-#ifdef CONFIG_VSX
+#if defined(CONFIG_VSX) || defined(CONFIG_ALLOW_USERCOPY_REG)
 	u64 buf[33];
 	int i;
 #endif
 	flush_fp_to_thread(target);
 
-#ifdef CONFIG_VSX
+#if defined(CONFIG_VSX) || defined(CONFIG_ALLOW_USERCOPY_REG)
 	/* copy to local buffer then write that out */
 	i = user_regset_copyin(&pos, &count, &kbuf, &ubuf, buf, 0, -1);
 	if (i)
-- 
2.0.2

