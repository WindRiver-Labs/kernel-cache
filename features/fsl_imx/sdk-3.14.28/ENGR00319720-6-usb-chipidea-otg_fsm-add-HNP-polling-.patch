From 6862fbdad6c989d6ab4477fffb6a0bdca1bee451 Mon Sep 17 00:00:00 2001
From: Li Jun <b47624@freescale.com>
Date: Mon, 23 Jun 2014 16:11:12 +0800
Subject: [PATCH 1398/1543] ENGR00319720-6 usb: chipidea: otg_fsm: add HNP
 polling support

commit ab8e41b665c01b06aee84e2f43cc6ce7058b5530 from
git://git.freescale.com/imx/linux-2.6-imx.git

This patch adds HNP polling support for chipidea otg fsm driver, which
adds a SW timer to send HNP polling request.

Signed-off-by: Li Jun <b47624@freescale.com>
---
 drivers/usb/chipidea/ci.h      |    2 ++
 drivers/usb/chipidea/otg_fsm.c |   33 +++++++++++++++++++++++++++++++--
 drivers/usb/chipidea/otg_fsm.h |    2 ++
 3 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/chipidea/ci.h b/drivers/usb/chipidea/ci.h
index edfa533..4c6c7c8 100644
--- a/drivers/usb/chipidea/ci.h
+++ b/drivers/usb/chipidea/ci.h
@@ -210,6 +210,8 @@ struct ci_hdrc {
 	struct usb_otg			otg;
 	struct otg_fsm			fsm;
 	struct ci_otg_fsm_timer_list	*fsm_timer;
+	struct timer_list		hnp_polling_timer;
+	bool				hnp_polling_req;
 	struct work_struct		work;
 	struct workqueue_struct		*wq;
 
diff --git a/drivers/usb/chipidea/otg_fsm.c b/drivers/usb/chipidea/otg_fsm.c
index 93a12a5..015da19 100644
--- a/drivers/usb/chipidea/otg_fsm.c
+++ b/drivers/usb/chipidea/otg_fsm.c
@@ -383,6 +383,14 @@ static void a_wait_dp_end_tmout_func(void *ptr, unsigned long indicator)
 	ci_otg_queue_work(ci);
 }
 
+static void hnp_polling_timer_work(unsigned long arg)
+{
+	struct ci_hdrc *ci = (struct ci_hdrc *)arg;
+
+	ci->hnp_polling_req = true;
+	ci_otg_queue_work(ci);
+}
+
 /* Initialize timers */
 static int ci_otg_init_timers(struct ci_hdrc *ci)
 {
@@ -458,9 +466,17 @@ static int ci_otg_init_timers(struct ci_hdrc *ci)
 	if (ci->fsm_timer->timer_list[A_DP_END] == NULL)
 		return -ENOMEM;
 
+	setup_timer(&ci->hnp_polling_timer, hnp_polling_timer_work,
+							(unsigned long)ci);
 	return 0;
 }
 
+static void ci_otg_add_hnp_polling_timer(struct ci_hdrc *ci)
+{
+	mod_timer(&ci->hnp_polling_timer,
+			jiffies + msecs_to_jiffies(T_HOST_REQ_POLL));
+}
+
 /* -------------------------------------------------------------*/
 /* Operations that will be called from OTG Finite State Machine */
 /* -------------------------------------------------------------*/
@@ -468,8 +484,12 @@ static void ci_otg_fsm_add_timer(struct otg_fsm *fsm, enum otg_fsm_timer t)
 {
 	struct ci_hdrc	*ci = container_of(fsm, struct ci_hdrc, fsm);
 
-	if (t < NUM_OTG_FSM_TIMERS)
-		ci_otg_add_timer(ci, t);
+	if (t < NUM_OTG_FSM_TIMERS) {
+		if (t == HNP_POLLING)
+			ci_otg_add_hnp_polling_timer(ci);
+		else
+			ci_otg_add_timer(ci, t);
+	}
 	return;
 }
 
@@ -634,6 +654,14 @@ int ci_otg_fsm_work(struct ci_hdrc *ci)
 	}
 
 	pm_runtime_get_sync(ci->dev);
+	if (ci->hnp_polling_req) {
+		ci->hnp_polling_req = false;
+		if (otg_hnp_polling(&ci->fsm) != HOST_REQUEST_FLAG) {
+			pm_runtime_put_sync(ci->dev);
+			return 0;
+		}
+	}
+
 	if (otg_statemachine(&ci->fsm)) {
 		if (ci->fsm.otg->state == OTG_STATE_A_IDLE) {
 			/*
@@ -880,6 +908,7 @@ int ci_hdrc_otg_fsm_init(struct ci_hdrc *ci)
 void ci_hdrc_otg_fsm_remove(struct ci_hdrc *ci)
 {
 	sysfs_remove_group(&ci->dev->kobj, &inputs_attr_group);
+	del_timer_sync(&ci->hnp_polling_timer);
 }
 
 /* Restart OTG fsm if resume from power lost */
diff --git a/drivers/usb/chipidea/otg_fsm.h b/drivers/usb/chipidea/otg_fsm.h
index fff3620..85e17e3 100644
--- a/drivers/usb/chipidea/otg_fsm.h
+++ b/drivers/usb/chipidea/otg_fsm.h
@@ -65,6 +65,8 @@
 
 #define TB_SESS_VLD          (1000)
 
+#define T_HOST_REQ_POLL      (1500)	/* HNP polling interval 1s~2s */
+
 enum ci_otg_fsm_timer_index {
 	/*
 	 * CI specific timers, start from the end
-- 
1.7.5.4

