From df88f525911e622c9313575eeeb2e8fabe59bca3 Mon Sep 17 00:00:00 2001
From: Shengjiu Wang <shengjiu.wang@freescale.com>
Date: Thu, 4 Sep 2014 10:52:45 +0800
Subject: [PATCH 0381/1543] ENGR00329948-2: dma: imx-sdma: Add device to
 device support

commit ffd585522d8d601176acefe53d1449d06340b639 from
git://git.freescale.com/imx/linux-2.6-imx.git

This patch adds DEV_TO_DEV support for i.MX SDMA driver to support data
tranfer between two peripheral FIFOs. The per_2_per script requires two
peripheral addresses and two DMA requests, a bit different from the other
scripts.

Signed-off-by: Shengjiu Wang <shengjiu.wang@freescale.com>
---
 drivers/dma/imx-sdma.c |  118 ++++++++++++++++++++++++++++++++++++++++++-----
 1 files changed, 105 insertions(+), 13 deletions(-)

diff --git a/drivers/dma/imx-sdma.c b/drivers/dma/imx-sdma.c
index ae63b05..ac2073b 100644
--- a/drivers/dma/imx-sdma.c
+++ b/drivers/dma/imx-sdma.c
@@ -259,8 +259,9 @@ struct sdma_channel {
 	struct sdma_buffer_descriptor	*bd;
 	dma_addr_t			bd_phys;
 	unsigned int			pc_from_device, pc_to_device;
+	unsigned int			device_to_device;
 	unsigned long			flags;
-	dma_addr_t			per_address;
+	dma_addr_t			per_address, per_address2;
 	unsigned long			event_mask[2];
 	unsigned long			watermark_level;
 	u32				shp_addr, per_addr;
@@ -703,6 +704,7 @@ static void sdma_get_pc(struct sdma_channel *sdmac,
 
 	sdmac->pc_from_device = 0;
 	sdmac->pc_to_device = 0;
+	sdmac->device_to_device = 0;
 
 	switch (peripheral_type) {
 	case IMX_DMATYPE_MEMORY:
@@ -777,6 +779,7 @@ static void sdma_get_pc(struct sdma_channel *sdmac,
 
 	sdmac->pc_from_device = per_2_emi;
 	sdmac->pc_to_device = emi_2_per;
+	sdmac->device_to_device = per_2_per;
 }
 
 static int sdma_load_context(struct sdma_channel *sdmac)
@@ -789,11 +792,12 @@ static int sdma_load_context(struct sdma_channel *sdmac)
 	int ret;
 	unsigned long flags;
 
-	if (sdmac->direction == DMA_DEV_TO_MEM) {
+	if (sdmac->direction == DMA_DEV_TO_MEM)
 		load_address = sdmac->pc_from_device;
-	} else {
+	else if (sdmac->direction == DMA_DEV_TO_DEV)
+		load_address = sdmac->device_to_device;
+	else
 		load_address = sdmac->pc_to_device;
-	}
 
 	if (load_address < 0)
 		return load_address;
@@ -840,6 +844,68 @@ static void sdma_disable_channel(struct sdma_channel *sdmac)
 	sdmac->status = DMA_ERROR;
 }
 
+static void sdma_set_watermarklevel_for_p2p(struct sdma_channel *sdmac)
+{
+	int lwml = sdmac->watermark_level & 0xff;
+	int hwml = (sdmac->watermark_level >> 16) & 0xff;
+
+	if (sdmac->event_id0 > 31) {
+		sdmac->event_mask[0] |= 0;
+		__set_bit(28, &sdmac->watermark_level);
+		sdmac->event_mask[1] |=
+				BIT(sdmac->event_id0 % 32);
+	} else {
+		sdmac->event_mask[0] |= 0;
+		sdmac->event_mask[1] |=
+				BIT(sdmac->event_id0 % 32);
+	}
+	if (sdmac->event_id1 > 31) {
+		sdmac->event_mask[1] |= 0;
+		__set_bit(29, &sdmac->watermark_level);
+		sdmac->event_mask[0] |=
+			BIT(sdmac->event_id1 % 32);
+	} else {
+		sdmac->event_mask[1] |= 0;
+		sdmac->event_mask[0] |=
+			BIT(sdmac->event_id1 % 32);
+	}
+
+	/*
+	 * If LWML(src_maxburst) > HWML(dst_maxburst), we need
+	 * swap LWML and HWML of INFO(A.3.2.5.1), also need swap
+	 * r0(event_mask[1]) and r1(event_mask[0]).
+	 */
+	if (lwml > hwml) {
+		sdmac->watermark_level &= ~0xff00ff;
+		sdmac->watermark_level |= hwml;
+		sdmac->watermark_level |= lwml << 16;
+		swap(sdmac->event_mask[0], sdmac->event_mask[1]);
+	}
+	/* BIT 11:
+	 * 1 : Source on SPBA
+	 * 0 : Source on AIPS
+	 */
+	__set_bit(11, &sdmac->watermark_level);
+	/* BIT 12:
+	 * 1 : Destination on SPBA
+	 * 0 : Destination on AIPS
+	 */
+	__set_bit(12, &sdmac->watermark_level);
+	__set_bit(31, &sdmac->watermark_level);
+	/* BIT 31:
+	 * 1 : Amount of samples to be transferred is
+	 * unknown and script will keep on transferring
+	 * samples as long as both events are detected
+	 * and script must be manually stopped by the
+	 * application.
+	 * 0 : The amount of samples to be is equal to
+	 * the count field of mode word
+	 *
+	 */
+	__set_bit(25, &sdmac->watermark_level);
+	__clear_bit(24, &sdmac->watermark_level);
+}
+
 static int sdma_config_channel(struct sdma_channel *sdmac)
 {
 	int ret;
@@ -857,6 +923,12 @@ static int sdma_config_channel(struct sdma_channel *sdmac)
 		sdma_event_enable(sdmac, sdmac->event_id0);
 	}
 
+	if (sdmac->event_id1) {
+		if (sdmac->event_id1 >= sdmac->sdma->drvdata->num_events)
+			return -EINVAL;
+		sdma_event_enable(sdmac, sdmac->event_id1);
+	}
+
 	switch (sdmac->peripheral_type) {
 	case IMX_DMATYPE_DSP:
 		sdma_config_ownership(sdmac, false, true, true);
@@ -875,19 +947,21 @@ static int sdma_config_channel(struct sdma_channel *sdmac)
 			(sdmac->peripheral_type != IMX_DMATYPE_DSP)) {
 		/* Handle multiple event channels differently */
 		if (sdmac->event_id1) {
-			sdmac->event_mask[1] = BIT(sdmac->event_id1 % 32);
-			if (sdmac->event_id1 > 31)
-				__set_bit(31, &sdmac->watermark_level);
-			sdmac->event_mask[0] = BIT(sdmac->event_id0 % 32);
-			if (sdmac->event_id0 > 31)
-				__set_bit(30, &sdmac->watermark_level);
-		} else {
+			if (sdmac->peripheral_type == IMX_DMATYPE_ASRC_SP ||
+			    sdmac->peripheral_type == IMX_DMATYPE_ASRC)
+				sdma_set_watermarklevel_for_p2p(sdmac);
+		} else
 			__set_bit(sdmac->event_id0, sdmac->event_mask);
-		}
+
 		/* Watermark Level */
 		sdmac->watermark_level |= sdmac->watermark_level;
 		/* Address */
-		sdmac->shp_addr = sdmac->per_address;
+		if (sdmac->direction == DMA_DEV_TO_DEV) {
+			sdmac->shp_addr = sdmac->per_address2;
+			sdmac->per_addr = sdmac->per_address;
+		} else {
+			sdmac->shp_addr = sdmac->per_address;
+		}
 	} else {
 		sdmac->watermark_level = 0; /* FIXME: M3_BASE_ADDRESS */
 	}
@@ -981,6 +1055,7 @@ static int sdma_alloc_chan_resources(struct dma_chan *chan)
 
 	sdmac->peripheral_type = data->peripheral_type;
 	sdmac->event_id0 = data->dma_request;
+	sdmac->event_id1 = data->dma_request2;
 
 	clk_enable(sdmac->sdma->clk_ipg);
 	clk_enable(sdmac->sdma->clk_ahb);
@@ -1221,6 +1296,14 @@ static int sdma_control(struct dma_chan *chan, enum dma_ctrl_cmd cmd,
 			sdmac->watermark_level = dmaengine_cfg->src_maxburst *
 						dmaengine_cfg->src_addr_width;
 			sdmac->word_size = dmaengine_cfg->src_addr_width;
+		} else if (dmaengine_cfg->direction == DMA_DEV_TO_DEV) {
+			sdmac->per_address = dmaengine_cfg->src_addr;
+			sdmac->per_address2 = dmaengine_cfg->dst_addr;
+			sdmac->watermark_level =
+				dmaengine_cfg->src_maxburst & 0xff;
+			sdmac->watermark_level |=
+				(dmaengine_cfg->dst_maxburst & 0xff) << 16;
+			sdmac->word_size = dmaengine_cfg->dst_addr_width;
 		} else {
 			sdmac->per_address = dmaengine_cfg->dst_addr;
 			sdmac->watermark_level = dmaengine_cfg->dst_maxburst *
@@ -1452,6 +1535,15 @@ static struct dma_chan *sdma_xlate(struct of_phandle_args *dma_spec,
 	data.peripheral_type = dma_spec->args[1];
 	data.priority = dma_spec->args[2];
 
+	/*
+	 * init dma_request2 to zero, which is not used by the dts.
+	 * For P2P, dma_request2 is init from dma_request_channel(),
+	 * chan->private will point to the imx_dma_data, and in
+	 * device_alloc_chan_resources(), imx_dma_data.dma_request2 will
+	 * be set to sdmac->event_id1.
+	 */
+	data.dma_request2 = 0;
+
 	return dma_request_channel(mask, sdma_filter_fn, &data);
 }
 
-- 
1.7.5.4

