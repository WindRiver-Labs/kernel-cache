From 869d660951b1b4e41942254517188d71cc1ebe11 Mon Sep 17 00:00:00 2001
From: Richard Zhu <Richard.Zhu@freescale.com>
Date: Thu, 8 Jan 2015 14:53:05 +0800
Subject: [PATCH 1199/1543] MLK-10078-03 mcc: tests: add mcc test and tty api

commit 1372ba3221251683a000c6c080e31edc4b2ee13f from
git://git.freescale.com/imx/linux-2.6-imx.git

add mcc tests and tty api on imx_3.14.
note:
the device type of the tty device should be
TTY_DRIVER_TYPE_CONSOLE, otherwise the TTY_DRIVER_TYPE_PTY.
link layer stuffs are mandatory requried by
TTY_DRIVER_TYPE_PTY type devices.

Signed-off-by: Richard Zhu <Richard.Zhu@freescale.com>
---
 drivers/char/imx_amp/Kconfig        |   21 +++
 drivers/char/imx_amp/Makefile       |    2 +
 drivers/char/imx_amp/imx_mcc_test.c |  314 +++++++++++++++++++++++++++++++++++
 drivers/char/imx_amp/imx_mcc_tty.c  |  282 +++++++++++++++++++++++++++++++
 4 files changed, 619 insertions(+), 0 deletions(-)
 create mode 100644 drivers/char/imx_amp/imx_mcc_test.c
 create mode 100644 drivers/char/imx_amp/imx_mcc_tty.c

diff --git a/drivers/char/imx_amp/Kconfig b/drivers/char/imx_amp/Kconfig
index 1f892f8..ecde8548 100644
--- a/drivers/char/imx_amp/Kconfig
+++ b/drivers/char/imx_amp/Kconfig
@@ -7,3 +7,24 @@ config IMX_SEMA4
 	depends on SOC_IMX6SX
 	help
 	  Support for IMX SEMA4 driver, most people should say N here.
+
+config IMX_MCC_TEST
+	bool "IMX MCC test driver"
+	depends on SOC_IMX6SX && IMX_SEMA4
+	default y
+	help
+	  If you say Y here, you will get support for IMX MCC ping pong
+	  test and CAN test. Say N here, if the IMX_MCC_TTY interface is
+	  mandatory required.
+
+	  If unsure, it is safe to say Y.
+
+config IMX_MCC_TTY
+	bool "IMX PTY for MCC interface"
+	depends on SOC_IMX6SX && IMX_SEMA4 && !IMX_MCC_TEST
+	help
+	  This enables a PTY node for IMX6SX MCC, used as interface
+	  between kernel space and user space. Say N here, if the
+	  interface is not required.
+
+#end imx mcc
diff --git a/drivers/char/imx_amp/Makefile b/drivers/char/imx_amp/Makefile
index 4e7a916..1b14c71 100644
--- a/drivers/char/imx_amp/Makefile
+++ b/drivers/char/imx_amp/Makefile
@@ -3,3 +3,5 @@
 #
 #
 obj-$(CONFIG_IMX_SEMA4)		+= imx_sema4.o
+obj-$(CONFIG_IMX_MCC_TEST)	+= imx_mcc_test.o
+obj-$(CONFIG_IMX_MCC_TTY)	+= imx_mcc_tty.o
diff --git a/drivers/char/imx_amp/imx_mcc_test.c b/drivers/char/imx_amp/imx_mcc_test.c
new file mode 100644
index 0000000..08da3d6
--- /dev/null
+++ b/drivers/char/imx_amp/imx_mcc_test.c
@@ -0,0 +1,314 @@
+/*
+ * Copyright (C) 2014-2015 Freescale Semiconductor, Inc. All Rights Reserved.
+ */
+
+/*
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/suspend.h>
+
+#include <linux/imx_sema4.h>
+#include <linux/mcc_config_linux.h>
+#include <linux/mcc_common.h>
+#include <linux/mcc_api.h>
+#include <linux/mcc_linux.h>
+#include <linux/mcc_imx6sx.h>
+
+enum {
+	MCC_NODE_A9 = 0,
+	MCC_NODE_M4 = 0,
+
+	MCC_A9_PORT = 1,
+	MCC_M4_PORT = 2,
+};
+
+/* mcc pingpong test */
+MCC_ENDPOINT mcc_endpoint_a9_pingpong = {0, MCC_NODE_A9, MCC_A9_PORT};
+MCC_ENDPOINT mcc_endpoint_m4_pingpong = {1, MCC_NODE_M4, MCC_M4_PORT};
+/* mcc can test */
+MCC_ENDPOINT mcc_endpoint_a9_can = {0, MCC_NODE_A9, MCC_A9_PORT};
+MCC_ENDPOINT mcc_endpoint_m4_can = {1, MCC_NODE_A9, MCC_A9_PORT};
+
+struct mcc_pp_msg {
+	unsigned int data;
+};
+
+/* Set the max len of the can msg to be 1000 bytes */
+struct mcc_can_msg {
+	char data[MCC_ATTR_BUFFER_SIZE_IN_BYTES - 24];
+};
+
+static ssize_t imx_mcc_can_test_en(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	u32 can_test_en;
+	int i = 0, ret = 0;
+	struct mcc_can_msg msg;
+	MCC_MEM_SIZE num_of_received_bytes;
+	MCC_INFO_STRUCT mcc_info;
+
+	sscanf(buf, "%d\n", &can_test_en);
+
+	if (can_test_en) {
+		pr_info("imx mcc can communication test begin.\n");
+		ret = mcc_get_info(MCC_NODE_A9, &mcc_info);
+		if (ret) {
+			pr_err("failed to get mcc info.\n");
+			return -EINVAL;
+		}
+
+		ret = mcc_create_endpoint(&mcc_endpoint_a9_can, MCC_A9_PORT);
+		if (ret) {
+			pr_err("failed to create a9 mcc ep.\n");
+			return -EINVAL;
+		}
+
+		pr_info("\nA9 mcc prepares run, MCC version is %s\n",
+				mcc_info.version_string);
+
+		while (i < 0x10000) {
+			i++;
+			/*
+			 * wait for the "sleep" msg from the remote ep.
+			 */
+			ret = mcc_recv(&mcc_endpoint_m4_can,
+					&mcc_endpoint_a9_can, &msg,
+					sizeof(struct mcc_can_msg),
+					&num_of_received_bytes, 0xffffffff);
+			if (ret < 0) {
+				pr_err("A9 Main task recv error: %d\n", ret);
+				break;
+			}
+			pr_info("%s", msg.data);
+		}
+
+		ret = mcc_destroy_endpoint(&mcc_endpoint_a9_can);
+		if (ret) {
+			pr_err("failed to destory a9 mcc ep.\n");
+			return -EINVAL;
+		} else {
+			pr_info("destory a9 mcc ep.\n");
+		}
+	}
+
+	pr_info("imx mcc test end after %08d times recv tests.\n", i);
+	return count;
+}
+
+static ssize_t imx_mcc_pingpong_en(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	u32 pingpong_en;
+	int i = 0, ret = 0;
+	struct timeval tv1, tv2, tv3;
+	u32 tv_count1 = 0, tv_count2 = 0;
+	struct mcc_pp_msg msg;
+	MCC_MEM_SIZE num_of_received_bytes;
+	MCC_INFO_STRUCT mcc_info;
+
+	sscanf(buf, "%d\n", &pingpong_en);
+	if (pingpong_en) {
+		pr_info("imx mcc pingpong test begin.\n");
+		ret = mcc_get_info(MCC_NODE_A9, &mcc_info);
+		if (ret) {
+			pr_err("failed to get mcc info.\n");
+			return -EINVAL;
+		}
+
+		ret = mcc_create_endpoint(&mcc_endpoint_a9_pingpong,
+				MCC_A9_PORT);
+		if (ret) {
+			pr_err("failed to create a9 mcc ep.\n");
+			return -EINVAL;
+		}
+
+		pr_info("\nA9 mcc prepares run, MCC version is %s\n",
+				mcc_info.version_string);
+		msg.data = 1;
+		while (i < 0x50000) {
+			i++;
+			i++;
+			/*
+			 * wait until the remote endpoint is created by
+			 * the other core
+			 */
+			if (pingpong_en > 1)
+				do_gettimeofday(&tv1);
+
+			ret = mcc_send(&mcc_endpoint_a9_pingpong,
+					&mcc_endpoint_m4_pingpong, &msg,
+					sizeof(struct mcc_pp_msg),
+					0xffffffff);
+			if (ret < 0) {
+				pr_err("A9 Main task send error: %d\n", ret);
+				break;
+			}
+
+			if (pingpong_en > 1) {
+				do_gettimeofday(&tv2);
+				tv_count1 = (tv2.tv_sec - tv1.tv_sec)
+					* USEC_PER_SEC
+					+ tv2.tv_usec - tv1.tv_usec;
+			}
+			while (MCC_ERR_ENDPOINT == ret) {
+				pr_err("\n send err ret %d, re-send\n", ret);
+				ret = mcc_send(&mcc_endpoint_a9_pingpong,
+						&mcc_endpoint_m4_pingpong, &msg,
+						sizeof(struct mcc_pp_msg),
+						0xffffffff);
+				msleep(5000);
+			}
+
+			if (pingpong_en > 1)
+				do_gettimeofday(&tv2);
+
+			ret = mcc_recv(&mcc_endpoint_m4_pingpong,
+					&mcc_endpoint_a9_pingpong, &msg,
+					sizeof(struct mcc_pp_msg),
+					&num_of_received_bytes, 0xffffffff);
+
+			if (pingpong_en > 1) {
+				do_gettimeofday(&tv3);
+				tv_count2 = (tv3.tv_sec - tv2.tv_sec)
+					* USEC_PER_SEC
+					+ tv3.tv_usec - tv2.tv_usec;
+				pr_info("imx mcc: Data transfer speed tests"
+						"in pingpong. a9 -> m4:%08dus."
+						"a9 <- m4:%08dus.\n",
+						tv_count1, tv_count2);
+			}
+
+			if (MCC_SUCCESS != ret) {
+				pr_err("A9 Main task receive error: %d\n", ret);
+				break;
+			} else {
+				pr_info("%08x Main task received a msg"
+					" from [%d, %d, %d] endpoint\n", i,
+					mcc_endpoint_m4_pingpong.core,
+					mcc_endpoint_m4_pingpong.node,
+					mcc_endpoint_m4_pingpong.port);
+				pr_info("Message: Size=0x%08x, data = 0x%08x\n",
+					num_of_received_bytes, msg.data);
+				msg.data++;
+			}
+		}
+		ret = mcc_destroy_endpoint(&mcc_endpoint_a9_pingpong);
+		if (ret) {
+			pr_err("failed to destory a9 mcc ep.\n");
+			return ret;
+		} else {
+			pr_info("destory a9 mcc ep.\n");
+		}
+		pr_info("imx mcc test end after %08d times tests.\n", i/2);
+	}
+
+	if (ret)
+		return ret;
+	else
+		return count;
+}
+
+static DEVICE_ATTR(pingpong_en, S_IWUGO, NULL, imx_mcc_pingpong_en);
+static DEVICE_ATTR(can_test_en, S_IWUGO, NULL, imx_mcc_can_test_en);
+
+static struct attribute *imx_mcc_attrs[] = {
+	&dev_attr_pingpong_en.attr,
+	&dev_attr_can_test_en.attr,
+	NULL
+};
+
+static struct attribute_group imx_mcc_attrgroup = {
+	.attrs	= imx_mcc_attrs,
+};
+
+static int imx_mcc_test_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	MCC_INFO_STRUCT mcc_info;
+
+	ret = mcc_initialize(MCC_NODE_A9);
+	if (ret) {
+		pr_err("failed to initialize mcc.\n");
+		ret = -EINVAL;
+		return ret;
+	}
+
+	ret = mcc_get_info(MCC_NODE_A9, &mcc_info);
+	if (ret) {
+		pr_err("failed to get mcc info.\n");
+		ret = -EINVAL;
+		goto out_node;
+	}
+	pr_info("\nA9 mcc prepares run, MCC version is %s\n",
+			mcc_info.version_string);
+
+	if (strcmp(mcc_info.version_string, MCC_VERSION_STRING) != 0) {
+		pr_err("\nError, different versions of the MCC library");
+		pr_err("is used on each core!\n");
+		pr_err("\nApplication is stopped now.\n");
+		ret = -EINVAL;
+		goto out_node;
+	}
+
+	/* add attributes for device. */
+	ret = sysfs_create_group(&pdev->dev.kobj, &imx_mcc_attrgroup);
+	if (ret)
+		goto out_node;
+
+	return ret;
+
+out_node:
+	mcc_destroy(MCC_NODE_A9);
+
+	return ret;
+}
+
+static int imx_mcc_test_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static const struct of_device_id imx_mcc_test_dt_ids[] = {
+	{ .compatible = "fsl,imx6sx-mcc-test", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, imx_mcc_test_dt_ids);
+
+static struct platform_driver imx_mcc_test_driver = {
+	.driver = {
+		   .owner = THIS_MODULE,
+		   .name = "imx6sx-mcc-test",
+		   .of_match_table = imx_mcc_test_dt_ids,
+		   },
+	.probe = imx_mcc_test_probe,
+	.remove = imx_mcc_test_remove,
+};
+
+static int __init imx_mcc_test_init(void)
+{
+	int ret;
+
+	ret = platform_driver_register(&imx_mcc_test_driver);
+	if (ret)
+		pr_err("failed to register imx mcc test driver.\n");
+	else
+		pr_info("imx mcc test is registered.\n");
+	return ret;
+}
+late_initcall(imx_mcc_test_init);
+
+MODULE_AUTHOR("Freescale Semiconductor, Inc.");
+MODULE_DESCRIPTION("IMX MCC test driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/char/imx_amp/imx_mcc_tty.c b/drivers/char/imx_amp/imx_mcc_tty.c
new file mode 100644
index 0000000..975cd2b
--- /dev/null
+++ b/drivers/char/imx_amp/imx_mcc_tty.c
@@ -0,0 +1,282 @@
+/*
+ * imx_mcc_tty.c - tty demo driver used to test imx mcc
+ * posix tty interface.
+ *
+ * Copyright (C) 2014-2015 Freescale Semiconductor, Inc.
+ */
+
+/*
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/delay.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/tty.h>
+#include <linux/tty_driver.h>
+#include <linux/tty_flip.h>
+#include <linux/mcc_config_linux.h>
+#include <linux/mcc_common.h>
+#include <linux/mcc_api.h>
+
+/**
+ * struct mcctty_port - Wrapper struct for imx mcc tty port.
+ * @port:		TTY port data
+ */
+struct mcctty_port {
+	struct delayed_work	read;
+	struct tty_port		port;
+	spinlock_t		rx_lock;
+};
+
+static struct mcctty_port mcc_tty_port;
+
+enum {
+	MCC_NODE_A9 = 0,
+	MCC_NODE_M4 = 0,
+
+	MCC_A9_PORT = 1,
+	MCC_M4_PORT = 2,
+};
+
+/* mcc tty/pingpong demo */
+static MCC_ENDPOINT mcc_endpoint_a9_pingpong = {0, MCC_NODE_A9, MCC_A9_PORT};
+static MCC_ENDPOINT mcc_endpoint_m4_pingpong = {1, MCC_NODE_M4, MCC_M4_PORT};
+struct mcc_tty_msg {
+	char data[MCC_ATTR_BUFFER_SIZE_IN_BYTES - 24];
+};
+
+static struct tty_port_operations  mcctty_port_ops = { };
+
+static int mcctty_install(struct tty_driver *driver, struct tty_struct *tty)
+{
+	return tty_port_install(&mcc_tty_port.port, driver, tty);
+}
+
+static int mcctty_open(struct tty_struct *tty, struct file *filp)
+{
+	return tty_port_open(tty->port, tty, filp);
+}
+
+static void mcctty_close(struct tty_struct *tty, struct file *filp)
+{
+	return tty_port_close(tty->port, tty, filp);
+}
+
+static int mcctty_write(struct tty_struct *tty, const unsigned char *buf,
+			 int total)
+{
+	int i, count, ret = 0, space;
+	unsigned char *cbuf, *tmp;
+	MCC_MEM_SIZE num_of_received_bytes;
+	struct mcc_tty_msg tty_msg;
+	struct mcctty_port *cport = &mcc_tty_port;
+
+	if (NULL == buf) {
+		pr_err("buf shouldn't be null.\n");
+		return -ENOMEM;
+	}
+
+	count = total;
+	tmp = (unsigned char *)buf;
+	for (i = 0; i <= count / 999; i++) {
+		strlcpy(tty_msg.data, tmp, count >= 1000 ? 1000 : count + 1);
+		if (count >= 1000)
+			count -= 999;
+
+		/*
+		 * wait until the remote endpoint is created by
+		 * the other core
+		 */
+		ret = mcc_send(&mcc_endpoint_a9_pingpong,
+				&mcc_endpoint_m4_pingpong, &tty_msg,
+				sizeof(struct mcc_tty_msg),
+				0xffffffff);
+
+		while (MCC_ERR_ENDPOINT == ret) {
+			pr_err("\n send err ret %d, re-send\n", ret);
+			ret = mcc_send(&mcc_endpoint_a9_pingpong,
+					&mcc_endpoint_m4_pingpong, &tty_msg,
+					sizeof(struct mcc_tty_msg),
+					0xffffffff);
+			msleep(5000);
+		}
+
+		ret = mcc_recv(&mcc_endpoint_m4_pingpong,
+				&mcc_endpoint_a9_pingpong, &tty_msg,
+				sizeof(struct mcc_tty_msg),
+				&num_of_received_bytes, 0xffffffff);
+
+		if (MCC_SUCCESS != ret) {
+			pr_err("A9 Main task receive error: %d\n", ret);
+		} else {
+			/* flush the recv-ed data to tty node */
+			spin_lock_bh(&cport->rx_lock);
+			space = tty_prepare_flip_string(&cport->port, &cbuf,
+							strlen(tty_msg.data));
+			if (space <= 0)
+				return -ENOMEM;
+
+			memcpy(cbuf, &tty_msg.data, strlen(tty_msg.data));
+			tty_flip_buffer_push(&cport->port);
+			spin_unlock_bh(&cport->rx_lock);
+		}
+	}
+	return total;
+}
+
+static int mcctty_write_room(struct tty_struct *tty)
+{
+	/* report the space in the mcc buffer */
+	return MCC_ATTR_BUFFER_SIZE_IN_BYTES;
+}
+
+static const struct tty_operations imxmcctty_ops = {
+	.install		= mcctty_install,
+	.open			= mcctty_open,
+	.close			= mcctty_close,
+	.write			= mcctty_write,
+	.write_room		= mcctty_write_room,
+};
+
+static struct tty_driver *mcctty_driver;
+
+static int imx_mcc_tty_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct mcctty_port *cport = &mcc_tty_port;
+	MCC_INFO_STRUCT mcc_info;
+
+	mcctty_driver = tty_alloc_driver(1,
+			TTY_DRIVER_RESET_TERMIOS |
+			TTY_DRIVER_UNNUMBERED_NODE);
+	if (IS_ERR(mcctty_driver))
+		return PTR_ERR(mcctty_driver);
+
+	mcctty_driver->driver_name = "mcc_tty";
+	mcctty_driver->name = "ttyMCC";
+	mcctty_driver->major = TTYAUX_MAJOR;
+	mcctty_driver->minor_start = 3;
+	mcctty_driver->type = TTY_DRIVER_TYPE_CONSOLE;
+	mcctty_driver->init_termios = tty_std_termios;
+	mcctty_driver->init_termios.c_cflag |= CLOCAL;
+
+	tty_set_operations(mcctty_driver, &imxmcctty_ops);
+
+	tty_port_init(&cport->port);
+	cport->port.ops = &mcctty_port_ops;
+	spin_lock_init(&cport->rx_lock);
+	cport->port.low_latency = cport->port.flags | ASYNC_LOW_LATENCY;
+
+	ret = tty_register_driver(mcctty_driver);
+	if (ret < 0) {
+		pr_err("Couldn't install mcc tty driver: err %d\n", ret);
+		goto error;
+	} else
+		pr_info("Install mcc tty driver!\n");
+
+	ret = mcc_initialize(MCC_NODE_A9);
+	if (ret) {
+		pr_err("failed to initialize mcc.\n");
+		ret = -ENODEV;
+		goto error;
+	}
+
+	ret = mcc_get_info(MCC_NODE_A9, &mcc_info);
+	if (ret) {
+		pr_err("failed to get mcc info.\n");
+		ret = -ENODEV;
+		goto error;
+	} else {
+		pr_info("\nA9 mcc prepares run, MCC version is %s\n",
+				mcc_info.version_string);
+		pr_info("imx mcc tty/pingpong test begin.\n");
+	}
+
+	ret = mcc_create_endpoint(&mcc_endpoint_a9_pingpong,
+			MCC_A9_PORT);
+	if (ret) {
+		pr_err("failed to create a9 mcc ep.\n");
+		ret = -ENODEV;
+		goto error;
+	}
+
+	return 0;
+
+error:
+	tty_unregister_driver(mcctty_driver);
+	put_tty_driver(mcctty_driver);
+	tty_port_destroy(&cport->port);
+	mcctty_driver = NULL;
+
+	return ret;
+}
+
+static int imx_mcc_tty_remove(struct platform_device *pdev)
+{
+	int ret = 0;
+	struct mcctty_port *cport = &mcc_tty_port;
+
+	/* destory the mcc tty endpoint here */
+	ret = mcc_destroy_endpoint(&mcc_endpoint_a9_pingpong);
+	if (ret)
+		pr_err("failed to destory a9 mcc ep.\n");
+	else
+		pr_info("destory a9 mcc ep.\n");
+
+	tty_unregister_driver(mcctty_driver);
+	tty_port_destroy(&cport->port);
+	put_tty_driver(mcctty_driver);
+
+	return ret;
+}
+
+static const struct of_device_id imx6sx_mcc_tty_ids[] = {
+	{ .compatible = "fsl,imx6sx-mcc-tty", },
+	{ /* sentinel */ }
+};
+
+static struct platform_driver imxmcctty_driver = {
+	.driver = {
+		.name = "imx6sx-mcc-tty",
+		.owner  = THIS_MODULE,
+		.of_match_table = imx6sx_mcc_tty_ids,
+		},
+	.probe = imx_mcc_tty_probe,
+	.remove = imx_mcc_tty_remove,
+};
+
+/*!
+ * Initialise the imxmcctty_driver.
+ *
+ * @return  The function always returns 0.
+ */
+
+static int __init imxmcctty_init(void)
+{
+	if (platform_driver_register(&imxmcctty_driver) != 0)
+		return -ENODEV;
+
+	printk(KERN_INFO "IMX MCC TTY driver module loaded\n");
+	return 0;
+}
+
+static void __exit imxmcctty_exit(void)
+{
+	/* Unregister the device structure */
+	platform_driver_unregister(&imxmcctty_driver);
+}
+
+module_init(imxmcctty_init);
+module_exit(imxmcctty_exit);
+
+MODULE_AUTHOR("Freescale Semiconductor, Inc.");
+MODULE_DESCRIPTION("MCC TTY driver");
+MODULE_LICENSE("GPL");
-- 
1.7.5.4

