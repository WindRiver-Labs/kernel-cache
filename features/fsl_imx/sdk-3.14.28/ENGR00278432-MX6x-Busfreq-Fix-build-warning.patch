From 2db26c0e64e175239a98e15c04a4ab3b5368650f Mon Sep 17 00:00:00 2001
From: Ranjani Vaidyanathan <ra5478@freescale.com>
Date: Thu, 5 Sep 2013 17:06:10 -0500
Subject: [PATCH 0067/1543] ENGR00278432 [MX6x:Busfreq] Fix build warning.

commit 4ba3f76ddf029783df700fa559289f5eedd5903d from
git://git.freescale.com/imx/linux-2.6-imx.git

Fix build warning in arch/arm/mach-imx/busfreq_ddr3.c.

Signed-off-by: Ranjani Vaidyanathan <ra5478@freescale.com>
[shawn.guo: cherry-pick commit 312864a0b7e7 from imx_3.10.y]
Signed-off-by: Shawn Guo <shawn.guo@freescale.com>
---
 arch/arm/mach-imx/busfreq_ddr3.c |   11 ++++++++---
 1 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/arch/arm/mach-imx/busfreq_ddr3.c b/arch/arm/mach-imx/busfreq_ddr3.c
index d410f1f..6ecd2f8 100644
--- a/arch/arm/mach-imx/busfreq_ddr3.c
+++ b/arch/arm/mach-imx/busfreq_ddr3.c
@@ -46,6 +46,7 @@
 static unsigned long (*iram_ddr_settings)[2];
 static unsigned long (*normal_mmdc_settings)[2];
 static unsigned long (*iram_iomux_settings)[2];
+
 static void __iomem *mmdc_base;
 static void __iomem *iomux_base;
 static void __iomem *ccm_base;
@@ -258,6 +259,7 @@ int init_mmdc_settings(struct platform_device *busfreq_pdev)
 	u32 cpu;
 	struct device_node *node;
 	struct gen_pool *iram_pool;
+	void *iram_addr;
 
 	node = of_find_compatible_node(NULL, NULL, "fsl,imx6q-mmdc-combine");
 	if (!node) {
@@ -389,8 +391,9 @@ int init_mmdc_settings(struct platform_device *busfreq_pdev)
 	}
 
 	iomux_settings_size = ARRAY_SIZE(iomux_offsets_mx6q);
-	iram_iomux_settings = gen_pool_alloc(iram_pool,
+	iram_addr = (void *)gen_pool_alloc(iram_pool,
 						(iomux_settings_size * 8) + 8);
+	iram_iomux_settings = iram_addr;
 	if (!iram_iomux_settings) {
 		dev_err(dev, "unable to alloc iram for IOMUX settings!\n");
 		return -ENOMEM;
@@ -408,12 +411,14 @@ int init_mmdc_settings(struct platform_device *busfreq_pdev)
 	  * IOMUX_BASE_ADDR
 	  * L2X0_BASE_ADDR
 	  */
-	iram_ddr_settings = gen_pool_alloc(iram_pool,
+	iram_addr = (void *)gen_pool_alloc(iram_pool,
 					(ddr_settings_size * 8) + 8 + 32);
+	iram_ddr_settings = iram_addr;
 	if (!iram_ddr_settings) {
 		dev_err(dev, "unable to alloc iram for ddr settings!\n");
 		return -ENOMEM;
 	}
+
 	i = ddr_settings_size + 1;
 	iram_ddr_settings[i][0] = (unsigned long)mmdc_base;
 	iram_ddr_settings[i+1][0] = (unsigned long)ccm_base;
@@ -441,7 +446,7 @@ int init_mmdc_settings(struct platform_device *busfreq_pdev)
 		}
 	}
 
-	ddr_freq_change_iram_base = gen_pool_alloc(iram_pool,
+	ddr_freq_change_iram_base = (void *)gen_pool_alloc(iram_pool,
 						DDR_FREQ_CHANGE_SIZE);
 	if (!ddr_freq_change_iram_base) {
 		dev_err(dev, "Cannot alloc iram for ddr freq change code!\n");
-- 
1.7.5.4

