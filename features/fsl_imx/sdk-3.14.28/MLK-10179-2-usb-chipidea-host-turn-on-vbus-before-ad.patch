From eb349c26c013ab0e71b676b0c0c132f1562a00bf Mon Sep 17 00:00:00 2001
From: Li Jun <b47624@freescale.com>
Date: Tue, 3 Feb 2015 13:59:10 +0800
Subject: [PATCH 1513/1543] MLK-10179-2 usb: chipidea: host: turn on vbus
 before add hcd if early vbus on is required

commit 15290d39e1ba88d9c27c69f4691a14681a5cf42d from
git://git.freescale.com/imx/linux-2.6-imx.git

If CI_HDRC_IMX_VBUS_EARLY_ON is set, turn on vbus before add hcd, and do not
set reg_vbus of ehci_ci_priv, so vbus will not be handled by ehci core.

Signed-off-by: Li Jun <jun.li@freescale.com>
(cherry picked from commit a745133191bfe0c2ca408d9f8bcfc2a5204b0dbd)
---
 drivers/usb/chipidea/host.c |   27 ++++++++++++++++++++++-----
 1 files changed, 22 insertions(+), 5 deletions(-)

diff --git a/drivers/usb/chipidea/host.c b/drivers/usb/chipidea/host.c
index 4bfb1d4..5a87438 100644
--- a/drivers/usb/chipidea/host.c
+++ b/drivers/usb/chipidea/host.c
@@ -63,11 +63,10 @@ static int ehci_ci_portpower(struct usb_hcd *hcd, int portnum, bool enable)
 	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
 	struct ehci_ci_priv *priv = (struct ehci_ci_priv *)ehci->priv;
 	struct device *dev = hcd->self.controller;
-	struct ci_hdrc *ci = dev_get_drvdata(dev);
 	int ret = 0;
 	int port = HCS_N_PORTS(ehci->hcs_params);
 
-	if (priv->reg_vbus && !ci_otg_is_fsm_mode(ci)) {
+	if (priv->reg_vbus) {
 		if (port > 1) {
 			dev_warn(dev,
 				"Not support multi-port regulator control\n");
@@ -253,12 +252,23 @@ static int host_start(struct ci_hdrc *ci)
 	priv = (struct ehci_ci_priv *)ehci->priv;
 	priv->reg_vbus = NULL;
 
-	if (ci->platdata->reg_vbus)
-		priv->reg_vbus = ci->platdata->reg_vbus;
+	if (ci->platdata->reg_vbus && !ci_otg_is_fsm_mode(ci)) {
+		if (ci->platdata->flags & CI_HDRC_IMX_VBUS_EARLY_ON) {
+			ret = regulator_enable(ci->platdata->reg_vbus);
+			if (ret) {
+				dev_err(ci->dev,
+				"Failed to enable vbus regulator, ret=%d\n",
+									ret);
+				goto put_hcd;
+			}
+		} else {
+			priv->reg_vbus = ci->platdata->reg_vbus;
+		}
+	}
 
 	ret = usb_add_hcd(hcd, 0, 0);
 	if (ret) {
-		goto put_hcd;
+		goto disable_reg;
 	} else {
 		struct usb_otg *otg = &ci->otg;
 
@@ -286,6 +296,10 @@ static int host_start(struct ci_hdrc *ci)
 
 	return ret;
 
+disable_reg:
+	if (ci->platdata->reg_vbus && !ci_otg_is_fsm_mode(ci) &&
+			(ci->platdata->flags & CI_HDRC_IMX_VBUS_EARLY_ON))
+		regulator_disable(ci->platdata->reg_vbus);
 put_hcd:
 	usb_put_hcd(hcd);
 
@@ -299,6 +313,9 @@ static void host_stop(struct ci_hdrc *ci)
 	if (hcd) {
 		usb_remove_hcd(hcd);
 		usb_put_hcd(hcd);
+		if (ci->platdata->reg_vbus && !ci_otg_is_fsm_mode(ci) &&
+			(ci->platdata->flags & CI_HDRC_IMX_VBUS_EARLY_ON))
+				regulator_disable(ci->platdata->reg_vbus);
 	}
 	ci->hcd = NULL;
 }
-- 
1.7.5.4

