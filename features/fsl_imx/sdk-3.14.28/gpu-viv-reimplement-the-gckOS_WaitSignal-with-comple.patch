From ce1abb3105986bdf7266f9a3586c1fafedff2b05 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 15 Jul 2015 10:05:09 +0800
Subject: [PATCH 1543/1543] gpu-viv: reimplement the gckOS_WaitSignal() with
 completion helper functions

The gckOS_WaitSignal() almost reimplement the
wait_for_completion_interruptible_timeout() function. It makes no
sense to do so and will break on rt kernel since swait is used.
So reimplement it with the completion helper functions.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c |   56 ++++---------------
 1 files changed, 12 insertions(+), 44 deletions(-)

diff --git a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c
index 6b765a9..98bf39b 100644
--- a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c
+++ b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c
@@ -7331,6 +7331,7 @@ gckOS_WaitSignal(
 {
     gceSTATUS status = gcvSTATUS_OK;
     gcsSIGNAL_PTR signal;
+    long ret;
 
     gcmkHEADER_ARG("Os=0x%X Signal=0x%X Wait=0x%08X", Os, Signal, Wait);
 
@@ -7342,15 +7343,12 @@ gckOS_WaitSignal(
 
     gcmkASSERT(signal->id == (gctUINT32)(gctUINTPTR_T)Signal);
 
-    might_sleep();
 
-    spin_lock_irq(&signal->obj.wait.lock);
-
-    if (signal->obj.done)
+    if (completion_done(&signal->obj))
     {
         if (!signal->manualReset)
         {
-            signal->obj.done = 0;
+	    reinit_completion(&signal->obj);
         }
 
         status = gcvSTATUS_OK;
@@ -7366,48 +7364,18 @@ gckOS_WaitSignal(
             ? MAX_SCHEDULE_TIMEOUT
             : Wait * HZ / 1000;
 
-        DECLARE_WAITQUEUE(wait, current);
-        wait.flags |= WQ_FLAG_EXCLUSIVE;
-        __add_wait_queue_tail(&signal->obj.wait, &wait);
-
-        while (gcvTRUE)
-        {
-            if (signal_pending(current))
-            {
+	ret = wait_for_completion_interruptible_timeout(&signal->obj, timeout);
+	if (ret == -ERESTARTSYS) {
                 /* Interrupt received. */
-                status = gcvSTATUS_INTERRUPTED;
-                break;
-            }
-
-            __set_current_state(TASK_INTERRUPTIBLE);
-            spin_unlock_irq(&signal->obj.wait.lock);
-            timeout = schedule_timeout(timeout);
-            spin_lock_irq(&signal->obj.wait.lock);
-
-            if (signal->obj.done)
-            {
-                if (!signal->manualReset)
-                {
-                    signal->obj.done = 0;
-                }
-
-                status = gcvSTATUS_OK;
-                break;
-            }
-
-            if (timeout == 0)
-            {
-
-                status = gcvSTATUS_TIMEOUT;
-                break;
-            }
-        }
-
-        __remove_wait_queue(&signal->obj.wait, &wait);
+		status = gcvSTATUS_INTERRUPTED;
+	} else if (ret) {
+		if (!signal->manualReset)
+			reinit_completion(&signal->obj);
+		status = gcvSTATUS_OK;
+	} else
+		status = gcvSTATUS_TIMEOUT;
     }
 
-    spin_unlock_irq(&signal->obj.wait.lock);
-
 OnError:
     /* Return status. */
     gcmkFOOTER_ARG("Signal=0x%X status=%d", Signal, status);
-- 
1.7.5.4

