From a0380828a78c6be41f2a6db3e480cd2d4cfa6ba6 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Fri, 10 Oct 2014 10:32:59 +0800
Subject: [PATCH 0906/1543] MLK-9669-3 arm: imx: set SCU CPU power status
 register correctly

commit 519eeb6b5b240d1e6af34e3a2f3e21237f7387cc from
git://git.freescale.com/imx/linux-2.6-imx.git

Set the SCU CPU Power status register to reflect the correct status of
a CPU (active/inactive/not-present).

Signed-off-by: Ranjani Vaidyanathan <Ranjani.Vaidyanathan@freescale.com>
Signed-off-by: Anson Huang <b20788@freescale.com>
---
 arch/arm/mach-imx/headsmp.S |   50 ++++++++++++++++++++++++++++++++++++++++++-
 arch/arm/mach-imx/hotplug.c |   10 ++++++--
 arch/arm/mach-imx/platsmp.c |   37 +++++++++++++++++++++++--------
 3 files changed, 83 insertions(+), 14 deletions(-)

diff --git a/arch/arm/mach-imx/headsmp.S b/arch/arm/mach-imx/headsmp.S
index de5047c..3ec99d5 100644
--- a/arch/arm/mach-imx/headsmp.S
+++ b/arch/arm/mach-imx/headsmp.S
@@ -1,5 +1,5 @@
 /*
- * Copyright 2011 Freescale Semiconductor, Inc.
+ * Copyright 2011-2014 Freescale Semiconductor, Inc.
  * Copyright 2011 Linaro Ltd.
  *
  * The code contained herein is licensed under the GNU General Public
@@ -12,7 +12,16 @@
 
 #include <linux/linkage.h>
 #include <linux/init.h>
+#include <asm/asm-offsets.h>
+#include <asm/hardware/cache-l2x0.h>
+#include <asm/smp_scu.h>
 
+#define SCU_CPU_STATUS		0x08
+
+	.section ".text.head", "ax"
+.extern imx_scu_base
+
+#ifdef CONFIG_SMP
 diag_reg_offset:
 	.word	g_diag_reg - .
 
@@ -27,5 +36,44 @@ diag_reg_offset:
 ENTRY(v7_secondary_startup)
 	bl	v7_invalidate_l1
 	set_diag_reg
+
+	/* Set the CPU status in SCU CPU status register. */
+	mrc	p15, 0, r0, c0, c0, 5
+	and	r0, r0, #3
+	mrc	p15, 4, r1, c15, c0, 0
+	ldr	r2, =SCU_CPU_STATUS
+	orr	r2, r2, r0
+	ldr	r0, =SCU_PM_NORMAL
+	strb	r0, [r1, r2]
+
 	b	secondary_startup
 ENDPROC(v7_secondary_startup)
+#endif
+
+#ifdef CONFIG_ARM_CPU_SUSPEND
+/*
+ * The following code must assume it is running from physical address
+ * where absolute virtual addresses to the data section have to be
+ * turned into relative ones.
+ */
+
+#ifdef CONFIG_CACHE_L2X0
+	.macro	pl310_resume
+	adr	r0, l2x0_saved_regs_offset
+	ldr	r2, [r0]
+	add	r2, r2, r0
+	ldr	r0, [r2, #L2X0_R_PHY_BASE]	@ get physical base of l2x0
+	ldr	r1, [r2, #L2X0_R_AUX_CTRL]	@ get aux_ctrl value
+	str	r1, [r0, #L2X0_AUX_CTRL]	@ restore aux_ctrl
+	mov	r1, #0x1
+	str	r1, [r0, #L2X0_CTRL]		@ re-enable L2
+	.endm
+
+l2x0_saved_regs_offset:
+	.word	l2x0_saved_regs - .
+
+#else
+	.macro	pl310_resume
+	.endm
+#endif
+#endif
diff --git a/arch/arm/mach-imx/hotplug.c b/arch/arm/mach-imx/hotplug.c
index b35e99c..80dea09 100644
--- a/arch/arm/mach-imx/hotplug.c
+++ b/arch/arm/mach-imx/hotplug.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2011 Freescale Semiconductor, Inc.
+ * Copyright 2011-2014 Freescale Semiconductor, Inc.
  * Copyright 2011 Linaro Ltd.
  *
  * The code contained herein is licensed under the GNU General Public
@@ -14,9 +14,12 @@
 #include <linux/jiffies.h>
 #include <asm/cp15.h>
 #include <asm/proc-fns.h>
+#include <asm/smp_scu.h>
 
 #include "common.h"
 
+extern void __iomem *imx_scu_base;
+
 static inline void cpu_enter_lowpower(void)
 {
 	unsigned int v;
@@ -36,6 +39,8 @@ static inline void cpu_enter_lowpower(void)
 	  : "=&r" (v)
 	  : "r" (0), "Ir" (CR_C), "Ir" (0x40)
 	  : "cc");
+
+	scu_power_mode(imx_scu_base, SCU_PM_DORMANT);
 }
 
 /*
@@ -52,8 +57,7 @@ void imx_cpu_die(unsigned int cpu)
 	 * the register being cleared to kill the cpu.
 	 */
 	imx_set_cpu_arg(cpu, ~0);
-
-	while (1)
+	for (;;)
 		cpu_do_idle();
 }
 
diff --git a/arch/arm/mach-imx/platsmp.c b/arch/arm/mach-imx/platsmp.c
index 771bd25..9e7489a 100644
--- a/arch/arm/mach-imx/platsmp.c
+++ b/arch/arm/mach-imx/platsmp.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2011 Freescale Semiconductor, Inc.
+ * Copyright 2011-2014 Freescale Semiconductor, Inc.
  * Copyright 2011 Linaro Ltd.
  *
  * The code contained herein is licensed under the GNU General Public
@@ -20,8 +20,10 @@
 #include "common.h"
 #include "hardware.h"
 
+#define SCU_STANDBY_ENABLE	(1 << 5)
+
 u32 g_diag_reg;
-static void __iomem *scu_base;
+void __iomem *imx_scu_base;
 
 static struct map_desc scu_io_desc __initdata = {
 	/* .virtual and .pfn are run-time assigned */
@@ -40,10 +42,18 @@ void __init imx_scu_map_io(void)
 	scu_io_desc.pfn = __phys_to_pfn(base);
 	iotable_init(&scu_io_desc, 1);
 
-	scu_base = IMX_IO_ADDRESS(base);
+	imx_scu_base = IMX_IO_ADDRESS(base);
+}
+
+void imx_scu_standby_enable(void)
+{
+	u32 val = readl_relaxed(imx_scu_base);
+
+	val |= SCU_STANDBY_ENABLE;
+	writel_relaxed(val, imx_scu_base);
 }
 
-static int imx_boot_secondary(unsigned int cpu, struct task_struct *idle)
+static int __cpuinit imx_boot_secondary(unsigned int cpu, struct task_struct *idle)
 {
 	imx_set_cpu_jump(cpu, v7_secondary_startup);
 	imx_enable_cpu(cpu, true);
@@ -56,17 +66,23 @@ static int imx_boot_secondary(unsigned int cpu, struct task_struct *idle)
  */
 static void __init imx_smp_init_cpus(void)
 {
-	int i, ncores;
-
-	ncores = scu_get_core_count(scu_base);
+	int i;
+	u32 me = smp_processor_id();
 
-	for (i = ncores; i < NR_CPUS; i++)
+	for (i = setup_max_cpus; i < NR_CPUS; i++)
 		set_cpu_possible(i, false);
+	/* Set the SCU CPU Power status for each inactive core. */
+	for (i = 0; i < NR_CPUS;  i++) {
+		if (i != me)
+			__raw_writeb(SCU_PM_POWEROFF, imx_scu_base + 0x08 + i);
+	}
 }
 
 void imx_smp_prepare(void)
 {
-	scu_enable(scu_base);
+	scu_enable(imx_scu_base);
+	/* Need to enable SCU standby for entering WAIT mode */
+	imx_scu_standby_enable();
 }
 
 static void __init imx_smp_prepare_cpus(unsigned int max_cpus)
@@ -82,7 +98,8 @@ static void __init imx_smp_prepare_cpus(unsigned int max_cpus)
 	 * secondary cores when booting them.
 	 */
 	asm("mrc p15, 0, %0, c15, c0, 1" : "=r" (g_diag_reg) : : "cc");
-	sync_cache_w(&g_diag_reg);
+	__cpuc_flush_dcache_area(&g_diag_reg, sizeof(g_diag_reg));
+	outer_clean_range(__pa(&g_diag_reg), __pa(&g_diag_reg + 1));
 }
 
 struct smp_operations  imx_smp_ops __initdata = {
-- 
1.7.5.4

