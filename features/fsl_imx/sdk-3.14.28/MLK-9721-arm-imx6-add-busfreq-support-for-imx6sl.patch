From 7c807c68a89152e29629292bed85b93b6ba2c02c Mon Sep 17 00:00:00 2001
From: Bai Ping <b51503@freescale.com>
Date: Mon, 27 Oct 2014 14:28:08 +0800
Subject: [PATCH 0940/1543] MLK-9721 arm: imx6: add busfreq support for imx6sl

commit 492ac4129348ada85d743a8f540a92d6bfdbbff4 from
git://git.freescale.com/imx/linux-2.6-imx.git

Add busfreq node in the dtsi file and modified the source code
to support imx6sl to enter low busfreq mode.

As the clk tree of imx6sl on 3.14 branch different with imx6q,
imx6sx, etc. So the busfreq change flow need some additional
code. Especially, after change the bus frequency to 24MHz, the
clock parent-child relationship need one more step to update.

Before change to 24MHz low bus mode, the clock tree between the
OSC and MMDC as below:

OSC
 \__pll2_bypass_src
     \__pll2
       	  \__pll2_bypass
	       \_pll2_bus
	          \_..... mmdc

After change to 24MHz low bus mode, we bypass the pll2 in asm code, so
the correct clock tree as below:

OSC
  \_pll2_bypass_src
     \_pll2_bypass
     	\_pll2_bus
	   \_ .... mmdc

So the parent of pll2_bypass clock need to be set to pll2_bypass_src after
entering 24MHz mode, and set to pll2 after exiting 24MHz to reflect the correct
parent-child relationship in kernel.

Changing dev_dbg to printk to ease the debug of busfreq driver, print the busfreq
change information as needed.

Signed-off-by: Bai Ping <b51503@freescale.com>
---
 arch/arm/boot/dts/imx6sl.dtsi      |   30 ++++++++++++++++++++++-
 arch/arm/mach-imx/busfreq-imx6.c   |   44 +++++++++++++++++++++++++++++++-----
 arch/arm/mach-imx/busfreq_lpddr2.c |    4 +-
 arch/arm/mach-imx/clk-imx6sl.c     |   11 +++++++-
 arch/arm/mach-imx/clk.h            |    9 +++++++
 arch/arm/mach-imx/mach-imx6sl.c    |    1 +
 6 files changed, 87 insertions(+), 12 deletions(-)

diff --git a/arch/arm/boot/dts/imx6sl.dtsi b/arch/arm/boot/dts/imx6sl.dtsi
index 343e349..a4a4ca2 100644
--- a/arch/arm/boot/dts/imx6sl.dtsi
+++ b/arch/arm/boot/dts/imx6sl.dtsi
@@ -102,15 +102,41 @@
 		interrupt-parent = <&intc>;
 		ranges;
 
+		busfreq { /* BUSFREQ */
+			compatible = "fsl,imx6_busfreq";
+			clocks = <&clks IMX6SL_CLK_PLL2_BUS>, <&clks IMX6SL_CLK_PLL2_PFD2>,
+					<&clks IMX6SL_CLK_PLL2_198M>, <&clks IMX6SL_CLK_ARM>,
+					<&clks IMX6SL_CLK_PLL3_USB_OTG>, <&clks IMX6SL_CLK_PERIPH>,
+					<&clks IMX6SL_CLK_PRE_PERIPH_SEL>, <&clks IMX6SL_CLK_PERIPH_CLK2_PODF>,
+					<&clks IMX6SL_CLK_PERIPH_CLK2_SEL>, <&clks IMX6SL_CLK_OSC>,
+					<&clks IMX6SL_CLK_PLL1_SYS>, <&clks IMX6SL_CLK_PERIPH2>,
+					<&clks IMX6SL_CLK_AHB>, <&clks IMX6SL_CLK_OCRAM>,
+					<&clks IMX6SL_CLK_PLL1_SW>, <&clks IMX6SL_CLK_PRE_PERIPH2_SEL>,
+					<&clks IMX6SL_CLK_PERIPH2_CLK2_SEL>, <&clks IMX6SL_CLK_PERIPH2_CLK2_PODF>,
+					<&clks IMX6SL_CLK_STEP>, <&clks IMX6SL_PLL2_BYPASS_SRC>, <&clks IMX6SL_PLL2_BYPASS>,
+					<&clks IMX6SL_CLK_PLL2>;
+			clock-names = "pll2_bus", "pll2_pfd2_396m", "pll2_198m", "arm", "pll3_usb_otg", "periph",
+				"periph_pre", "periph_clk2", "periph_clk2_sel", "osc", "pll1_sys", "periph2", "ahb",
+				"ocram", "pll1_sw", "periph2_pre", "periph2_clk2_sel", "periph2_clk2", "step", "pll2_bypass_src",
+				"pll2_bypass", "pll2";
+			fsl,max_ddr_freq = <400000000>;
+		};
+
 		ocrams: sram@00900000 {
 			compatible = "fsl,lpm-sram";
 			reg = <0x00900000 0x4000>;
 			clocks = <&clks IMX6SL_CLK_OCRAM>;
 		};
 
-		ocram: sram@00904000 {
+		ocrams_ddr: sram@00904000 {
+			compatible = "fsl,ddr-lpm-sram";
+			reg = <0x00904000 0x1000>;
+			clocks = <&clks IMX6SL_CLK_OCRAM>;
+		};
+
+		ocram: sram@00905000 {
 			compatible = "mmio-sram";
-			reg = <0x00904000 0x1C000>;
+			reg = <0x00905000 0x1B000>;
 			clocks = <&clks IMX6SL_CLK_OCRAM>;
 		};
 
diff --git a/arch/arm/mach-imx/busfreq-imx6.c b/arch/arm/mach-imx/busfreq-imx6.c
index d9b8aa26..0ac354c 100644
--- a/arch/arm/mach-imx/busfreq-imx6.c
+++ b/arch/arm/mach-imx/busfreq-imx6.c
@@ -100,6 +100,9 @@ static struct clk *osc_clk;
 static struct clk *cpu_clk;
 static struct clk *pll3;
 static struct clk *pll2;
+static struct clk *pll2_bus;
+static struct clk *pll2_bypass_src;
+static struct clk *pll2_bypass;
 static struct clk *pll2_200;
 static struct clk *pll1_sys;
 static struct clk *periph2_clk;
@@ -214,7 +217,7 @@ static void exit_lpm_imx6sx(void)
 static void enter_lpm_imx6sl(void)
 {
 	if (high_bus_freq_mode) {
-		pll2_org_rate = clk_get_rate(pll2);
+		pll2_org_rate = clk_get_rate(pll2_bus);
 		/* Set periph_clk to be sourced from OSC_CLK */
 		imx_clk_set_parent(periph_clk2_sel, osc_clk);
 		imx_clk_set_parent(periph_clk, periph_clk2);
@@ -235,6 +238,12 @@ static void enter_lpm_imx6sl(void)
 
 		if (low_bus_freq_mode || ultra_low_bus_freq_mode) {
 			/*
+			 * Fix the clock tree in kernel, make sure
+			 * pll2_bypass is updated as it is
+			 * sourced from PLL2.
+			 */
+			imx_clk_set_parent(pll2_bypass, pll2);
+			/*
 			 * Swtich ARM to run off PLL2_PFD2_400MHz
 			 * since DDR is anyway at 100MHz.
 			 */
@@ -305,7 +314,8 @@ static void enter_lpm_imx6sl(void)
 				 * Make sure PLL2 rate is updated as it gets
 				 * bypassed in the DDR freq change code.
 				 */
-				imx_clk_set_parent(periph2_clk2_sel, pll2);
+				imx_clk_set_parent(pll2_bypass, pll2_bypass_src);
+				imx_clk_set_parent(periph2_clk2_sel, pll2_bus);
 				imx_clk_set_parent(periph2_clk, periph2_clk2);
 
 			}
@@ -331,6 +341,7 @@ static void exit_lpm_imx6sl(void)
 	 * Make sure PLL2 rate is updated as it gets
 	 * un-bypassed in the DDR freq change code.
 	 */
+	imx_clk_set_parent(pll2_bypass, pll2);
 	imx_clk_set_parent(periph2_pre_clk, pll2_400);
 	imx_clk_set_parent(periph2_clk, periph2_pre_clk);
 
@@ -457,7 +468,7 @@ static int set_high_bus_freq(int high_bus_freq)
 		return 0;
 
 	if (cpu_is_imx6q())
-		periph_clk_parent = pll2;
+		periph_clk_parent = pll2_bus;
 	else
 		periph_clk_parent = pll2_400;
 
@@ -817,11 +828,11 @@ static int busfreq_probe(struct platform_device *pdev)
 		return PTR_ERR(pll2_200);
 	}
 
-	pll2 = devm_clk_get(&pdev->dev, "pll2_bus");
-	if (IS_ERR(pll2)) {
+	pll2_bus = devm_clk_get(&pdev->dev, "pll2_bus");
+	if (IS_ERR(pll2_bus)) {
 		dev_err(busfreq_dev, "%s: failed to get pll2_bus\n",
 			__func__);
-		return PTR_ERR(pll2);
+		return PTR_ERR(pll2_bus);
 	}
 
 	cpu_clk = devm_clk_get(&pdev->dev, "arm");
@@ -964,7 +975,28 @@ static int busfreq_probe(struct platform_device *pdev)
 			return PTR_ERR(step_clk);
 		}
 	}
+	if (cpu_is_imx6sl()) {
+		pll2_bypass_src = devm_clk_get(&pdev->dev, "pll2_bypass_src");
+		if (IS_ERR(pll2_bypass_src)) {
+			dev_err(busfreq_dev, "%s: failed to get pll2_bypass_src\n",
+				__func__);
+			return PTR_ERR(pll2_bypass_src);
+		}
 
+		pll2 = devm_clk_get(&pdev->dev, "pll2");
+		if (IS_ERR(pll2)) {
+			dev_err(busfreq_dev, "%s: failed to get pll2\n",
+				__func__);
+			return PTR_ERR(pll2);
+		}
+
+		pll2_bypass = devm_clk_get(&pdev->dev, "pll2_bypass");
+		if (IS_ERR(pll2_bypass)) {
+			dev_err(busfreq_dev, "%s: failed to get pll2_bypass\n",
+				__func__);
+			return PTR_ERR(pll2_bypass);
+		}
+	}
 	if (cpu_is_imx6sx()) {
 		mmdc_clk = devm_clk_get(&pdev->dev, "mmdc");
 		if (IS_ERR(mmdc_clk)) {
diff --git a/arch/arm/mach-imx/busfreq_lpddr2.c b/arch/arm/mach-imx/busfreq_lpddr2.c
index e71b22f..363338c 100644
--- a/arch/arm/mach-imx/busfreq_lpddr2.c
+++ b/arch/arm/mach-imx/busfreq_lpddr2.c
@@ -68,7 +68,7 @@ int update_lpddr2_freq(int ddr_rate)
 	if (ddr_rate == curr_ddr_rate)
 		return 0;
 
-	dev_dbg(busfreq_dev, "\nBus freq set to %d start...\n", ddr_rate);
+	printk(KERN_DEBUG"\nBus freq set to %d start...\n", ddr_rate);
 
 	spin_lock_irqsave(&freq_lock, flags);
 	/*
@@ -85,7 +85,7 @@ int update_lpddr2_freq(int ddr_rate)
 	curr_ddr_rate = ddr_rate;
 	spin_unlock_irqrestore(&freq_lock, flags);
 
-	dev_dbg(busfreq_dev, "\nBus freq set to %d done...\n", ddr_rate);
+	printk(KERN_DEBUG"\nBus freq set to %d done...\n", ddr_rate);
 
 	return 0;
 }
diff --git a/arch/arm/mach-imx/clk-imx6sl.c b/arch/arm/mach-imx/clk-imx6sl.c
index b113c8c..8d32694 100644
--- a/arch/arm/mach-imx/clk-imx6sl.c
+++ b/arch/arm/mach-imx/clk-imx6sl.c
@@ -19,6 +19,8 @@
 #include "common.h"
 
 #define CCSR			0xc
+#define CCDR			0x04
+#define CCDR_CH0_HS_BYP		17
 #define BM_CCSR_PLL1_SW_CLK_SEL	(1 << 2)
 #define CACRR			0x10
 #define CDHIPR			0x48
@@ -189,7 +191,7 @@ static void __init imx6sl_clocks_init(struct device_node *ccm_node)
 {
 	struct device_node *np;
 	void __iomem *base;
-	int i;
+	int i, reg;
 
 	clks[IMX6SL_CLK_DUMMY] = imx_clk_fixed("dummy", 0);
 	clks[IMX6SL_CLK_CKIL] = imx_obtain_fixed_clock("ckil", 0);
@@ -220,7 +222,7 @@ static void __init imx6sl_clocks_init(struct device_node *ccm_node)
 	clks[IMX6SL_CLK_PLL7] = imx_clk_pllv3(IMX_PLLV3_USB,     "pll7", "pll7_bypass_src", base + 0x20, 0x3);
 
 	clks[IMX6SL_PLL1_BYPASS] = imx_clk_mux_flags("pll1_bypass", base + 0x00, 16, 1, pll1_bypass_sels, ARRAY_SIZE(pll1_bypass_sels), CLK_SET_RATE_PARENT);
-	clks[IMX6SL_PLL2_BYPASS] = imx_clk_mux_flags("pll2_bypass", base + 0x30, 16, 1, pll2_bypass_sels, ARRAY_SIZE(pll2_bypass_sels), CLK_SET_RATE_PARENT);
+	clks[IMX6SL_PLL2_BYPASS] = imx_clk_mux_flags_bus("pll2_bypass", base + 0x30, 16, 1, pll2_bypass_sels, ARRAY_SIZE(pll2_bypass_sels), CLK_SET_RATE_PARENT);
 	clks[IMX6SL_PLL3_BYPASS] = imx_clk_mux_flags("pll3_bypass", base + 0x10, 16, 1, pll3_bypass_sels, ARRAY_SIZE(pll3_bypass_sels), CLK_SET_RATE_PARENT);
 	clks[IMX6SL_PLL4_BYPASS] = imx_clk_mux_flags("pll4_bypass", base + 0x70, 16, 1, pll4_bypass_sels, ARRAY_SIZE(pll4_bypass_sels), CLK_SET_RATE_PARENT);
 	clks[IMX6SL_PLL5_BYPASS] = imx_clk_mux_flags("pll5_bypass", base + 0xa0, 16, 1, pll5_bypass_sels, ARRAY_SIZE(pll5_bypass_sels), CLK_SET_RATE_PARENT);
@@ -417,6 +419,11 @@ static void __init imx6sl_clocks_init(struct device_node *ccm_node)
 	clk_data.clk_num = ARRAY_SIZE(clks);
 	of_clk_add_provider(np, of_clk_src_onecell_get, &clk_data);
 
+	/* Ensure that CH0 handshake is bypassed */
+	reg = readl_relaxed(base + CCDR);
+	reg |= 1 << CCDR_CH0_HS_BYP;
+	writel_relaxed(reg, base + CCDR);
+
 	clk_register_clkdev(clks[IMX6SL_CLK_GPT], "ipg", "imx-gpt.0");
 	clk_register_clkdev(clks[IMX6SL_CLK_GPT_SERIAL], "per", "imx-gpt.0");
 
diff --git a/arch/arm/mach-imx/clk.h b/arch/arm/mach-imx/clk.h
index c933ae3..2e76127 100644
--- a/arch/arm/mach-imx/clk.h
+++ b/arch/arm/mach-imx/clk.h
@@ -156,6 +156,15 @@ static inline struct clk *imx_clk_mux_flags(const char *name,
 			reg, shift, width, 0, &imx_ccm_lock);
 }
 
+static inline struct clk *imx_clk_mux_flags_bus(const char *name,
+		void __iomem *reg, u8 shift, u8 width, const char **paretns,
+		int num_parents, unsigned long flags)
+{
+	return clk_register_mux(NULL, name, paretns, num_parents,
+			flags | CLK_SET_RATE_NO_REPARENT, reg, shift,
+			width, 0, &imx_ccm_lock);
+}
+
 static inline struct clk *imx_clk_mux_glitchless(const char *name,
 		void __iomem *reg, u8 shift, u8 width, const char **parents,
 		int num_parents)
diff --git a/arch/arm/mach-imx/mach-imx6sl.c b/arch/arm/mach-imx/mach-imx6sl.c
index 0e50534..9fc399b 100644
--- a/arch/arm/mach-imx/mach-imx6sl.c
+++ b/arch/arm/mach-imx/mach-imx6sl.c
@@ -84,6 +84,7 @@ static void __init imx6sl_map_io(void)
 {
 	debug_ll_io_init();
 	imx6_pm_map_io();
+	imx6_busfreq_map_io();
 }
 
 DT_MACHINE_START(IMX6SL, "Freescale i.MX6 SoloLite (Device Tree)")
-- 
1.7.5.4

