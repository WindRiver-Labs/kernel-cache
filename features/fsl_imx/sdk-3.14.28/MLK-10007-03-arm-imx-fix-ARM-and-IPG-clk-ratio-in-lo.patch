From 7b76223f365c58bf3594d29237c7aed9d7487b94 Mon Sep 17 00:00:00 2001
From: Bai Ping <b51503@freescale.com>
Date: Sat, 27 Dec 2014 01:36:42 +0800
Subject: [PATCH 1159/1543] MLK-10007-03 arm: imx: fix ARM and IPG clk ratio
 in low_bus_freq_mode

commit 61674e5ad59df590f8e858b8516477f8edd9ddf4 from
git://git.freescale.com/imx/linux-2.6-imx.git

On i.MX6SL, we must make sure ARM:IPG clock ratio is within 12:5 when entering
wait mode. If the system is in low_bus_freq_mode, the IPG is at 12MHz
according the busfreq code. So the max rate of ARM is 28.8MHz when entering
wait mode. As there is no way run at this clk rate, so set ARM to run from
24MHz OSC.

Signed-off-by: Bai Ping <b51503@freescale.com>
---
 arch/arm/mach-imx/clk-imx6sl.c |   27 ++++++++++++++++++++++++---
 1 files changed, 24 insertions(+), 3 deletions(-)

diff --git a/arch/arm/mach-imx/clk-imx6sl.c b/arch/arm/mach-imx/clk-imx6sl.c
index 55d56cd..8de4ac5 100644
--- a/arch/arm/mach-imx/clk-imx6sl.c
+++ b/arch/arm/mach-imx/clk-imx6sl.c
@@ -23,6 +23,7 @@
 #define CCDR			0x04
 #define CCDR_CH0_HS_BYP		17
 #define BM_CCSR_PLL1_SW_CLK_SEL	(1 << 2)
+#define BM_CCSR_STEP_CLK_SEL	(1 << 8)
 #define CACRR			0x10
 #define CDHIPR			0x48
 #define BM_CDHIPR_ARM_PODF_BUSY	(1 << 16)
@@ -113,6 +114,7 @@ static const u32 clks_init_on[] __initconst = {
 	IMX6SL_CLK_IPG, IMX6SL_CLK_ARM, IMX6SL_CLK_MMDC_ROOT,
 };
 
+extern int low_bus_freq_mode;
 /*
  * ERR005311 CCM: After exit from WAIT mode, unwanted interrupt(s) taken
  *           during WAIT mode entry process could cause cache memory
@@ -166,6 +168,7 @@ void imx6sl_enable_pll_arm(bool enable)
 void imx6sl_set_wait_clk(bool enter)
 {
 	static unsigned long saved_arm_div;
+	u32 val;
 	int arm_div_for_wait = imx6sl_get_arm_divider_for_wait();
 
 	/*
@@ -176,10 +179,28 @@ void imx6sl_set_wait_clk(bool enter)
 		imx6sl_enable_pll_arm(true);
 
 	if (enter) {
-		saved_arm_div = readl_relaxed(ccm_base + CACRR);
-		writel_relaxed(arm_div_for_wait, ccm_base + CACRR);
+		/*
+		 * If in this mode, the IPG clock is at 12MHz, we can
+		 * only run ARM at a max 28.8MHz, so we need to run
+		 * from the 24MHz OSC, as there is no way to get
+		 * 28.8MHz, when ARM is sourced from PLl1.
+		 */
+		if (low_bus_freq_mode) {
+			val = readl_relaxed(ccm_base + CCSR);
+			val |= BM_CCSR_PLL1_SW_CLK_SEL;
+			writel_relaxed(val, ccm_base + CCSR);
+		} else {
+			saved_arm_div = readl_relaxed(ccm_base + CACRR);
+			writel_relaxed(arm_div_for_wait, ccm_base + CACRR);
+		}
 	} else {
-		writel_relaxed(saved_arm_div, ccm_base + CACRR);
+		if (low_bus_freq_mode) {
+			val = readl_relaxed(ccm_base + CCSR);
+			val &= ~BM_CCSR_PLL1_SW_CLK_SEL;
+			writel_relaxed(val, ccm_base + CCSR);
+		} else {
+			writel_relaxed(saved_arm_div, ccm_base + CACRR);
+		}
 	}
 	while (__raw_readl(ccm_base + CDHIPR) & BM_CDHIPR_ARM_PODF_BUSY)
 		;
-- 
1.7.5.4

