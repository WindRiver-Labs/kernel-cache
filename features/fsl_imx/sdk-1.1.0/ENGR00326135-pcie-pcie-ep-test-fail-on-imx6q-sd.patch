From 42d6c3db9da2cc720d31d3c11f655286e13764fd Mon Sep 17 00:00:00 2001
From: Richard Zhu <r65037@freescale.com>
Date: Thu, 7 Aug 2014 10:00:25 +0800
Subject: [PATCH 0903/1074] ENGR00326135 pcie: pcie ep test fail on imx6q sd

Rootcause: doesn't get the correct mem ranges
from DT on imx6q after added imx6sx sdb pcie ep/rc
validation system support.
solution: Remove the imx6sx specification when get
the mem ranges from DT.

Signed-off-by: Richard Zhu <r65037@freescale.com>
[Original patch taken from git://git.freescale.com/imx/linux-2.6-imx.git]
Signed-off-by: Biyao Zhai <biyao.zhai@windriver.com>
---
 drivers/pci/host/pci-imx6.c |   37 +++++++++++++++++--------------------
 1 files changed, 17 insertions(+), 20 deletions(-)

diff --git a/drivers/pci/host/pci-imx6.c b/drivers/pci/host/pci-imx6.c
index d2ca897..8cc1b09 100644
--- a/drivers/pci/host/pci-imx6.c
+++ b/drivers/pci/host/pci-imx6.c
@@ -961,30 +961,27 @@ static int __init imx6_pcie_probe(struct platform_device *pdev)
 	}
 
 	if (IS_ENABLED(CONFIG_EP_MODE_IN_EP_RC_SYS)) {
-		if (is_imx6sx_pcie(imx6_pcie)) {
-			struct device_node *np = pp->dev->of_node;
-			struct of_pci_range range;
-			struct of_pci_range_parser parser;
-			unsigned long restype;
-
-			if (of_pci_range_parser_init(&parser, np)) {
-				dev_err(pp->dev, "missing ranges property\n");
-				return -EINVAL;
-			}
+		struct device_node *np = pp->dev->of_node;
+		struct of_pci_range range;
+		struct of_pci_range_parser parser;
+		unsigned long restype;
 
-			/* Get the memory ranges from DT */
-			for_each_of_pci_range(&parser, &range) {
-				restype = range.flags & IORESOURCE_TYPE_BITS;
-				if (restype == IORESOURCE_MEM) {
-					of_pci_range_to_resource(&range,
-							np, &pp->mem);
-					pp->mem.name = "MEM";
-				}
-			}
+		if (of_pci_range_parser_init(&parser, np)) {
+			dev_err(pp->dev, "missing ranges property\n");
+			return -EINVAL;
+		}
 
-			pp->mem_base = pp->mem.start;
+		/* Get the memory ranges from DT */
+		for_each_of_pci_range(&parser, &range) {
+			restype = range.flags & IORESOURCE_TYPE_BITS;
+			if (restype == IORESOURCE_MEM) {
+				of_pci_range_to_resource(&range,
+						np, &pp->mem);
+				pp->mem.name = "MEM";
+			}
 		}
 
+		pp->mem_base = pp->mem.start;
 		if (IS_ENABLED(CONFIG_EP_SELF_IO_TEST)) {
 			/* Prepare the test regions and data */
 			test_reg1 = devm_kzalloc(&pdev->dev,
-- 
1.7.5.4

