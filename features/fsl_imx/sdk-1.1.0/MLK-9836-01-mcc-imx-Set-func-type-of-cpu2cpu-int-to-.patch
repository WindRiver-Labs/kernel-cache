From 248da2cb71d0e5a5959691c3a6c751daa5ff48aa Mon Sep 17 00:00:00 2001
From: Richard Zhu <Richard.Zhu@freescale.com>
Date: Wed, 12 Nov 2014 09:41:23 +0800
Subject: [PATCH 0527/1074] MLK-9836-01 mcc: imx: Set func type of cpu2cpu int
 to int

mcc_generate_cpu_to_cpu_interrupt maybe failed, set the func
type of the mcc_generate_cpu_to_cpu_interrupt to int.

Signed-off-by: Richard Zhu <Richard.Zhu@freescale.com>
(cherry picked from commit 74b859788792fb59b8751468bd34cd2c6ee9025e)
[Original patch taken from git://git.freescale.com/imx/linux-2.6-imx.git]
Signed-off-by: Biyao Zhai <biyao.zhai@windriver.com>
---
 arch/arm/mach-imx/mcc_imx6sx.c |    9 ++++++---
 arch/arm/mach-imx/mcc_linux.c  |    9 +++++++--
 include/linux/mcc_imx6sx.h     |    2 +-
 3 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/arch/arm/mach-imx/mcc_imx6sx.c b/arch/arm/mach-imx/mcc_imx6sx.c
index 08a46a3..3d9d61a 100644
--- a/arch/arm/mach-imx/mcc_imx6sx.c
+++ b/arch/arm/mach-imx/mcc_imx6sx.c
@@ -106,7 +106,7 @@ void mcc_clear_cpu_to_cpu_interrupt(unsigned int core)
  *
  * Platform-specific software triggering the inter-CPU interrupts.
  */
-void mcc_triger_cpu_to_cpu_interrupt(void)
+int mcc_triger_cpu_to_cpu_interrupt(void)
 {
 	int i = 0;
 	u32 val;
@@ -120,11 +120,14 @@ void mcc_triger_cpu_to_cpu_interrupt(void)
 		} while (((val & BIT(19)) > 0) && (i++ < 100));
 	}
 
-	if ((val & BIT(19)) == 0)
+	if ((val & BIT(19)) == 0) {
 		/* Enable the bit19(GIR3) of MU_ACR */
 		regmap_update_bits(imx_mu_reg, MU_ACR, BIT(19), BIT(19));
-	else
+		return 0;
+	} else {
 		pr_info("mcc int still be triggered after %d ms polling!\n", i);
+		return -EIO;
+	}
 }
 
 /*!
diff --git a/arch/arm/mach-imx/mcc_linux.c b/arch/arm/mach-imx/mcc_linux.c
index 85f3c6a..7f4d921 100644
--- a/arch/arm/mach-imx/mcc_linux.c
+++ b/arch/arm/mach-imx/mcc_linux.c
@@ -238,13 +238,18 @@ int mcc_register_cpu_to_cpu_isr(void)
  */
 int mcc_generate_cpu_to_cpu_interrupt(void)
 {
+	int ret;
+
 	/*
 	 * Assert directed CPU interrupts for all processors except
 	 * the requesting core
 	 */
-	mcc_triger_cpu_to_cpu_interrupt();
+	ret = mcc_triger_cpu_to_cpu_interrupt();
 
-	return MCC_SUCCESS;
+	if (ret == 0)
+		return MCC_SUCCESS;
+	else
+		return ret;
 }
 
 /*!
diff --git a/include/linux/mcc_imx6sx.h b/include/linux/mcc_imx6sx.h
index ed3b250..c78195b 100644
--- a/include/linux/mcc_imx6sx.h
+++ b/include/linux/mcc_imx6sx.h
@@ -38,6 +38,6 @@ unsigned int _psp_node_num(void);
 
 unsigned int mcc_get_cpu_to_cpu_vector(unsigned int);
 void mcc_clear_cpu_to_cpu_interrupt(unsigned int);
-void mcc_triger_cpu_to_cpu_interrupt(void);
+int mcc_triger_cpu_to_cpu_interrupt(void);
 int imx_mcc_bsp_int_disable(unsigned int vector_number);
 int imx_mcc_bsp_int_enable(unsigned int vector_number);
-- 
1.7.5.4

