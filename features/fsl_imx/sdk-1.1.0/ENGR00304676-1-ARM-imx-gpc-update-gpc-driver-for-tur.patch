From 28195aac67d922d5e43044ccddb9b40f3de68b13 Mon Sep 17 00:00:00 2001
From: Robin Gong <b38343@freescale.com>
Date: Fri, 21 Mar 2014 18:28:43 +0800
Subject: [PATCH 0337/1074] ENGR00304676-1 ARM: imx: gpc: update gpc driver
 for turning on PCIe

For PCIe module on i.mx6sx, need send one power request to PCIe by GPC.
So we need update gpc driver for the new requirement. We implement it by
regulator notify framwork as pu power on/off in gpc driver. As PCIe use
fs_initcall, we need make sure gpc driver ready before PCIe driver probe.
Otherwise, cause system hang during PCIe driver probe, because the notify
NOT installed ready and the gpc will NOT power on PCIe.

Signed-off-by: Robin Gong <b38343@freescale.com>
[Original patch taken from git://git.freescale.com/imx/linux-2.6-imx.git]
Signed-off-by: Biyao Zhai <biyao.zhai@windriver.com>
---
 arch/arm/mach-imx/gpc.c |   55 +++++++++++++++++++++++++++++++++++++++++++---
 1 files changed, 51 insertions(+), 4 deletions(-)

diff --git a/arch/arm/mach-imx/gpc.c b/arch/arm/mach-imx/gpc.c
index 18af2c8..47859cf 100644
--- a/arch/arm/mach-imx/gpc.c
+++ b/arch/arm/mach-imx/gpc.c
@@ -46,6 +46,7 @@
 #define GPC_PGC_CPU_SW2ISO_SHIFT	8
 #define GPC_PGC_CPU_SW2ISO_MASK		0x3f
 #define GPC_CNTR		0x0
+#define GPC_CNTR_IPS_SHIFT	0x7
 #define GPC_CNTR_PU_UP_REQ_SHIFT	0x1
 #define GPC_CNTR_PU_DOWN_REQ_SHIFT	0x0
 
@@ -59,8 +60,9 @@ static struct clk *lcd_axi_clk, *lcd_pix_clk, *epdc_axi_clk, *epdc_pix_clk;
 static struct clk *pxp_axi_clk;
 static struct clk *openvg_axi_clk, *vpu_clk, *ipg_clk;
 static struct device *gpc_dev;
-struct regulator *pu_reg;
-struct notifier_block nb;
+static struct regulator *pu_reg;
+static struct notifier_block nb;
+static struct notifier_block nb_pcie;
 static struct regulator_dev *pu_dummy_regulator_rdev;
 static struct regulator_init_data pu_dummy_initdata = {
 	.constraints = {
@@ -328,6 +330,23 @@ static int imx_gpc_regulator_notify(struct notifier_block *nb,
 	return NOTIFY_OK;
 }
 
+static int imx_pcie_regulator_notify(struct notifier_block *nb,
+					unsigned long event,
+					void *ignored)
+{
+	switch (event) {
+	case REGULATOR_EVENT_VOLTAGE_CHANGE:
+	case REGULATOR_EVENT_ENABLE:
+		writel_relaxed(1 << GPC_CNTR_IPS_SHIFT,
+			gpc_base + GPC_CNTR);
+		break;
+	default:
+		break;
+	}
+
+	return NOTIFY_OK;
+}
+
 void __init imx_gpc_init(void)
 {
 	struct device_node *np;
@@ -478,6 +497,25 @@ static int imx_gpc_probe(struct platform_device *pdev)
 	}
 	nb.notifier_call = &imx_gpc_regulator_notify;
 
+	if (cpu_is_imx6sx()) {
+		struct regulator *pcie_reg;
+
+		pcie_reg = devm_regulator_get(gpc_dev, "pcie");
+		if (IS_ERR(pcie_reg)) {
+			ret = PTR_ERR(pcie_reg);
+			dev_info(gpc_dev, "pcie regulator not ready.\n");
+			return ret;
+		}
+		nb_pcie.notifier_call = &imx_pcie_regulator_notify;
+
+		ret = regulator_register_notifier(pcie_reg, &nb_pcie);
+		if (ret) {
+			dev_err(gpc_dev,
+				"pcie regulator notifier request failed\n");
+			return ret;
+		}
+	}
+
 	/* Get gpu&vpu clk for power up PU by GPC */
 	if (cpu_is_imx6sl()) {
 		gpu2d_clk = devm_clk_get(gpc_dev, "gpu2d_podf");
@@ -542,9 +580,18 @@ static struct platform_driver imx_gpc_platdrv = {
 	},
 	.probe		= imx_gpc_probe,
 };
-module_platform_driver(imx_gpc_platdrv);
 
-module_platform_driver(pu_dummy_driver);
+static int __init imx6_gpc_init(void)
+{
+	return platform_driver_probe(&imx_gpc_platdrv, imx_gpc_probe);
+}
+fs_initcall(imx6_gpc_init);
+
+static int __init imx6_pudummy_init(void)
+{
+	return platform_driver_probe(&pu_dummy_driver, pu_dummy_probe);
+}
+fs_initcall(imx6_pudummy_init);
 
 MODULE_AUTHOR("Anson Huang <b20788@freescale.com>");
 MODULE_DESCRIPTION("Freescale i.MX GPC driver");
-- 
1.7.5.4

