From 50dd866113efeb867aaf9a88e4e2e356a8b14858 Mon Sep 17 00:00:00 2001
From: Fugang Duan <B38611@freescale.com>
Date: Mon, 24 Mar 2014 17:56:35 +0800
Subject: [PATCH 1048/1074] ENGR00305272 net: fec: keep VLAN tag in default

By default, keep VLAN tag and tranfer to user.
If remove the VLAN tag, enable the quirk "FEC_QUIRK_HAS_VLAN" for
enet IP.

Signed-off-by: Fugang Duan <B38611@freescale.com>
[Original patch taken from git://git.freescale.com/imx/linux-2.6-imx.git]
Signed-off-by: Biyao Zhai <biyao.zhai@windriver.com>
---
 drivers/net/ethernet/freescale/fec_main.c |   26 +++++++++++++++-----------
 1 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/freescale/fec_main.c b/drivers/net/ethernet/freescale/fec_main.c
index ca82dfa..1e9c1dd 100644
--- a/drivers/net/ethernet/freescale/fec_main.c
+++ b/drivers/net/ethernet/freescale/fec_main.c
@@ -100,7 +100,7 @@ static struct platform_device_id fec_devtype[] = {
 		.name = "imx6q-fec",
 		.driver_data = FEC_QUIRK_ENET_MAC | FEC_QUIRK_HAS_GBIT |
 				FEC_QUIRK_HAS_BUFDESC_EX | FEC_QUIRK_HAS_CSUM |
-				FEC_QUIRK_HAS_VLAN | FEC_QUIRK_ERR006358,
+				FEC_QUIRK_ERR006358,
 	}, {
 		.name = "mvf600-fec",
 		.driver_data = FEC_QUIRK_ENET_MAC,
@@ -108,8 +108,8 @@ static struct platform_device_id fec_devtype[] = {
 		.name = "imx6sx-fec",
 		.driver_data = FEC_QUIRK_ENET_MAC | FEC_QUIRK_HAS_GBIT |
 				FEC_QUIRK_HAS_BUFDESC_EX | FEC_QUIRK_HAS_CSUM |
-				FEC_QUIRK_HAS_VLAN | FEC_QUIRK_HAS_AVB |
-				FEC_QUIRK_TKT210582 | FEC_QUIRK_TKT210590,
+				FEC_QUIRK_HAS_AVB | FEC_QUIRK_TKT210582 |
+				FEC_QUIRK_TKT210590,
 	}, {
 		/* sentinel */
 	}
@@ -1029,13 +1029,13 @@ fec_enet_rx(struct net_device *ndev, int budget)
 
 			/* If this is a VLAN packet remove the VLAN Tag */
 			vlan_packet_rcvd = false;
-			if ((ndev->features & NETIF_F_HW_VLAN_CTAG_RX) &&
-			    fep->bufdesc_ex && (ebdp->cbd_esc & BD_ENET_RX_VLAN)) {
+			if (fep->bufdesc_ex && (ebdp->cbd_esc & BD_ENET_RX_VLAN)) {
 				/* Push and remove the vlan tag */
 				struct vlan_hdr *vlan_header =
 					(struct vlan_hdr *) (data + ETH_HLEN);
 				vlan_tag = ntohs(vlan_header->h_vlan_TCI);
-				pkt_len -= VLAN_HLEN;
+				if (ndev->features & NETIF_F_HW_VLAN_CTAG_RX)
+					pkt_len -= VLAN_HLEN;
 
 				vlan_packet_rcvd = true;
 			}
@@ -1055,12 +1055,16 @@ fec_enet_rx(struct net_device *ndev, int budget)
 				skb_put(skb, pkt_len - 4);	/* Make room */
 
 				/* Extract the frame data without the VLAN header. */
-				skb_copy_to_linear_data(skb, data, (2 * ETH_ALEN));
-				if (vlan_packet_rcvd)
+				if (ndev->features & NETIF_F_HW_VLAN_CTAG_RX &&
+					vlan_packet_rcvd) {
+					skb_copy_to_linear_data(skb, data, (2 * ETH_ALEN));
 					payload_offset = (2 * ETH_ALEN) + VLAN_HLEN;
-				skb_copy_to_linear_data_offset(skb, (2 * ETH_ALEN),
-						       data + payload_offset,
-						       pkt_len - 4 - (2 * ETH_ALEN));
+					skb_copy_to_linear_data_offset(skb, (2 * ETH_ALEN),
+								data + payload_offset,
+								pkt_len - 4 - (2 * ETH_ALEN));
+				} else {
+					skb_copy_to_linear_data(skb, data, pkt_len - 4);
+				}
 
 				/* Get receive timestamp from the skb */
 				if (fep->hwts_rx_en && fep->bufdesc_ex) {
-- 
1.7.5.4

