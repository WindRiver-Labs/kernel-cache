From f91abbbe31c7c72bb95a257b097142f425a23035 Mon Sep 17 00:00:00 2001
From: Liu Ying <Ying.Liu@freescale.com>
Date: Thu, 19 Dec 2013 13:54:28 +0800
Subject: [PATCH 0674/1074] ENGR00292775 mipi csi2: Refine register access

The original mipi csi2 driver uses readl()/writel()
to access the 32 bit mipi csi2 registers in the
following way where info->mipi_csi2_base is a pointer
which points to a 32 bit I/O memory cell of the mipi
csi2's base address:
writel(value, info->mipi_csi2_base + offset);
readl(info->mipi_csi2_base + offset);

This makes the register offset values shrink 4 times,
comparing to the offset values documented in the
reference manual. For example, we need to change the
offset value from 0x004 to 0x001 so that we may access
the register MIPI_CSI2_N_LANES correctly.

This patch redefines the type of info->mipi_csi2_base
to 'void __iomem *', then the offset values can be the
same to what they are documented. Also, the macro names
for the registers are aligned to the documentation.

Acked-by: Robby Cai <R63905@freescale.com>
Cc: Oliver Brown <oliver.brown@freescale.com>
Signed-off-by: Liu Ying <Ying.Liu@freescale.com>
[Original patch taken from git://git.freescale.com/imx/linux-2.6-imx.git]
Signed-off-by: Biyao Zhai <biyao.zhai@windriver.com>
---
 drivers/mxc/mipi/mxc_mipi_csi2.c |   42 +++++++++++++++++++-------------------
 drivers/mxc/mipi/mxc_mipi_csi2.h |    2 +-
 include/linux/mipi_csi2.h        |   34 ++++++++++++++++--------------
 3 files changed, 40 insertions(+), 38 deletions(-)

diff --git a/drivers/mxc/mipi/mxc_mipi_csi2.c b/drivers/mxc/mipi/mxc_mipi_csi2.c
index 892ed35..2f5cb02 100644
--- a/drivers/mxc/mipi/mxc_mipi_csi2.c
+++ b/drivers/mxc/mipi/mxc_mipi_csi2.c
@@ -144,8 +144,8 @@ unsigned int mipi_csi2_set_lanes(struct mipi_csi2_info *info)
 	unsigned int lanes;
 
 	_mipi_csi2_lock(info);
-	mipi_csi2_write(info, info->lanes - 1, CSI2_N_LANES);
-	lanes = mipi_csi2_read(info, CSI2_N_LANES);
+	mipi_csi2_write(info, info->lanes - 1, MIPI_CSI2_N_LANES);
+	lanes = mipi_csi2_read(info, MIPI_CSI2_N_LANES);
 	_mipi_csi2_unlock(info);
 
 	return lanes;
@@ -201,7 +201,7 @@ unsigned int mipi_csi2_dphy_status(struct mipi_csi2_info *info)
 	unsigned int status;
 
 	_mipi_csi2_lock(info);
-	status = mipi_csi2_read(info, CSI2_PHY_STATE);
+	status = mipi_csi2_read(info, MIPI_CSI2_PHY_STATE);
 	_mipi_csi2_unlock(info);
 
 	return status;
@@ -219,7 +219,7 @@ unsigned int mipi_csi2_get_error1(struct mipi_csi2_info *info)
 	unsigned int err1;
 
 	_mipi_csi2_lock(info);
-	err1 = mipi_csi2_read(info, CSI2_ERR1);
+	err1 = mipi_csi2_read(info, MIPI_CSI2_ERR1);
 	_mipi_csi2_unlock(info);
 
 	return err1;
@@ -237,7 +237,7 @@ unsigned int mipi_csi2_get_error2(struct mipi_csi2_info *info)
 	unsigned int err2;
 
 	_mipi_csi2_lock(info);
-	err2 = mipi_csi2_read(info, CSI2_ERR2);
+	err2 = mipi_csi2_read(info, MIPI_CSI2_ERR2);
 	_mipi_csi2_unlock(info);
 
 	return err2;
@@ -278,23 +278,23 @@ int mipi_csi2_reset(struct mipi_csi2_info *info)
 {
 	_mipi_csi2_lock(info);
 
-	mipi_csi2_write(info, 0x0, CSI2_PHY_SHUTDOWNZ);
-	mipi_csi2_write(info, 0x0, CSI2_DPHY_RSTZ);
-	mipi_csi2_write(info, 0x0, CSI2_RESETN);
+	mipi_csi2_write(info, 0x0, MIPI_CSI2_PHY_SHUTDOWNZ);
+	mipi_csi2_write(info, 0x0, MIPI_CSI2_DPHY_RSTZ);
+	mipi_csi2_write(info, 0x0, MIPI_CSI2_CSI2_RESETN);
 
-	mipi_csi2_write(info, 0x00000001, CSI2_PHY_TST_CTRL0);
-	mipi_csi2_write(info, 0x00000000, CSI2_PHY_TST_CTRL1);
-	mipi_csi2_write(info, 0x00000000, CSI2_PHY_TST_CTRL0);
-	mipi_csi2_write(info, 0x00000002, CSI2_PHY_TST_CTRL0);
-	mipi_csi2_write(info, 0x00010044, CSI2_PHY_TST_CTRL1);
-	mipi_csi2_write(info, 0x00000000, CSI2_PHY_TST_CTRL0);
-	mipi_csi2_write(info, 0x00000014, CSI2_PHY_TST_CTRL1);
-	mipi_csi2_write(info, 0x00000002, CSI2_PHY_TST_CTRL0);
-	mipi_csi2_write(info, 0x00000000, CSI2_PHY_TST_CTRL0);
+	mipi_csi2_write(info, 0x00000001, MIPI_CSI2_PHY_TST_CTRL0);
+	mipi_csi2_write(info, 0x00000000, MIPI_CSI2_PHY_TST_CTRL1);
+	mipi_csi2_write(info, 0x00000000, MIPI_CSI2_PHY_TST_CTRL0);
+	mipi_csi2_write(info, 0x00000002, MIPI_CSI2_PHY_TST_CTRL0);
+	mipi_csi2_write(info, 0x00010044, MIPI_CSI2_PHY_TST_CTRL1);
+	mipi_csi2_write(info, 0x00000000, MIPI_CSI2_PHY_TST_CTRL0);
+	mipi_csi2_write(info, 0x00000014, MIPI_CSI2_PHY_TST_CTRL1);
+	mipi_csi2_write(info, 0x00000002, MIPI_CSI2_PHY_TST_CTRL0);
+	mipi_csi2_write(info, 0x00000000, MIPI_CSI2_PHY_TST_CTRL0);
 
-	mipi_csi2_write(info, 0xffffffff, CSI2_PHY_SHUTDOWNZ);
-	mipi_csi2_write(info, 0xffffffff, CSI2_DPHY_RSTZ);
-	mipi_csi2_write(info, 0xffffffff, CSI2_RESETN);
+	mipi_csi2_write(info, 0xffffffff, MIPI_CSI2_PHY_SHUTDOWNZ);
+	mipi_csi2_write(info, 0xffffffff, MIPI_CSI2_DPHY_RSTZ);
+	mipi_csi2_write(info, 0xffffffff, MIPI_CSI2_CSI2_RESETN);
 
 	_mipi_csi2_unlock(info);
 
@@ -458,7 +458,7 @@ static int mipi_csi2_probe(struct platform_device *pdev)
 	/* mipi dphy clk enable for register access */
 	clk_prepare_enable(gmipi_csi2->dphy_clk);
 	/* get mipi csi2 dphy version */
-	mipi_csi2_dphy_ver = mipi_csi2_read(gmipi_csi2, CSI2_VERSION);
+	mipi_csi2_dphy_ver = mipi_csi2_read(gmipi_csi2, MIPI_CSI2_VERSION);
 
 	clk_disable_unprepare(gmipi_csi2->dphy_clk);
 
diff --git a/drivers/mxc/mipi/mxc_mipi_csi2.h b/drivers/mxc/mipi/mxc_mipi_csi2.h
index f9ef164..3137935 100644
--- a/drivers/mxc/mipi/mxc_mipi_csi2.h
+++ b/drivers/mxc/mipi/mxc_mipi_csi2.h
@@ -36,7 +36,7 @@ struct mipi_csi2_info {
 	unsigned int	datatype;
 	struct clk	*dphy_clk;
 	struct clk	*pixel_clk;
-	unsigned int	*mipi_csi2_base;
+	void __iomem	*mipi_csi2_base;
 	struct platform_device	*pdev;
 
 	struct mutex mutex_lock;
diff --git a/include/linux/mipi_csi2.h b/include/linux/mipi_csi2.h
index 9cc1f89..7dc76fd 100644
--- a/include/linux/mipi_csi2.h
+++ b/include/linux/mipi_csi2.h
@@ -19,22 +19,24 @@
 #ifndef __INCLUDE_MIPI_CSI2_H
 #define __INCLUDE_MIPI_CSI2_H
 
-/* mipi csi2 register */
-#define	CSI2_VERSION					0x000
-#define	CSI2_N_LANES					(0x004/4)
-#define	CSI2_PHY_SHUTDOWNZ				(0x008/4)
-#define	CSI2_DPHY_RSTZ					(0x00c/4)
-#define	CSI2_RESETN					(0x010/4)
-#define	CSI2_PHY_STATE					(0x014/4)
-#define	CSI2_DATA_IDS_1					(0x018/4)
-#define	CSI2_DATA_IDS_2					(0x01c/4)
-#define	CSI2_ERR1					(0x020/4)
-#define	CSI2_ERR2					(0x024/4)
-#define	CSI2_MSK1					(0x028/4)
-#define	CSI2_MSK2					(0x02c/4)
-#define	CSI2_PHY_TST_CTRL0				(0x030/4)
-#define	CSI2_PHY_TST_CTRL1				(0x034/4)
-#define	CSI2_SFT_RESET					(0xf00/4)
+/* MIPI CSI2 registers */
+#define MIPI_CSI2_REG(offset)		(offset)
+
+#define	MIPI_CSI2_VERSION		MIPI_CSI2_REG(0x000)
+#define	MIPI_CSI2_N_LANES		MIPI_CSI2_REG(0x004)
+#define	MIPI_CSI2_PHY_SHUTDOWNZ		MIPI_CSI2_REG(0x008)
+#define	MIPI_CSI2_DPHY_RSTZ		MIPI_CSI2_REG(0x00c)
+#define	MIPI_CSI2_CSI2_RESETN		MIPI_CSI2_REG(0x010)
+#define	MIPI_CSI2_PHY_STATE		MIPI_CSI2_REG(0x014)
+#define	MIPI_CSI2_DATA_IDS_1		MIPI_CSI2_REG(0x018)
+#define	MIPI_CSI2_DATA_IDS_2		MIPI_CSI2_REG(0x01c)
+#define	MIPI_CSI2_ERR1			MIPI_CSI2_REG(0x020)
+#define	MIPI_CSI2_ERR2			MIPI_CSI2_REG(0x024)
+#define	MIPI_CSI2_MASK1			MIPI_CSI2_REG(0x028)
+#define	MIPI_CSI2_MASK2			MIPI_CSI2_REG(0x02c)
+#define	MIPI_CSI2_PHY_TST_CTRL0		MIPI_CSI2_REG(0x030)
+#define	MIPI_CSI2_PHY_TST_CTRL1		MIPI_CSI2_REG(0x034)
+#define	MIPI_CSI2_SFT_RESET		MIPI_CSI2_REG(0xf00)
 
 /* mipi data type */
 #define MIPI_DT_YUV420		0x18 /* YYY.../UYVY.... */
-- 
1.7.5.4

