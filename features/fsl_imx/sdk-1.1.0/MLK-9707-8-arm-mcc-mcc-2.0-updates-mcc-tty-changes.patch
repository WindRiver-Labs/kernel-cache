From ae237b027cc2b26da7644ecb862613a4b543c680 Mon Sep 17 00:00:00 2001
From: Richard Zhu <r65037@freescale.com>
Date: Fri, 19 Sep 2014 11:40:22 +0800
Subject: [PATCH 0949/1074] MLK-9707-8 arm: mcc: mcc 2.0 updates mcc tty
 changes

mcc tty api changes in mcc2.0 updates
make mcc tty excluded with mcc demo, since the mcc_initialize()
is one time kick-off func.

Signed-off-by: Richard Zhu <richard.zhu@freescale.com>
[Original patch taken from git://git.freescale.com/imx/linux-2.6-imx.git]
Signed-off-by: Biyao Zhai <biyao.zhai@windriver.com>
---
 drivers/char/imx_mcc/Kconfig       |   10 +++++++---
 drivers/char/imx_mcc/imx_mcc_tty.c |   10 +++++++---
 2 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/drivers/char/imx_mcc/Kconfig b/drivers/char/imx_mcc/Kconfig
index 9625efa..3a15661 100644
--- a/drivers/char/imx_mcc/Kconfig
+++ b/drivers/char/imx_mcc/Kconfig
@@ -15,9 +15,13 @@ config IMX_MCC_DEMO
 	  Support for IMX MCC DEMO, most people should say N here.
 
 config IMX_MCC_TTY
-	bool "imx pty for mcc interface"
-	depends on SOC_IMX6SX && IMX_SEMA4
+	bool "IMX PTY for MCC interface"
+	depends on SOC_IMX6SX && IMX_SEMA4 && !IMX_MCC_TEST
+	default y
 	help
-	  This enables a pty node for imx6sx mcc interface.
+	  This enables a PTY node for IMX6SX MCC, used as interface
+	  between kernel space and user space, and flush the message
+	  received from M4 side to user space, most people
+	  should say N here.
 
 #end imx mcc
diff --git a/drivers/char/imx_mcc/imx_mcc_tty.c b/drivers/char/imx_mcc/imx_mcc_tty.c
index 4ce5b9b..28f8d7a 100644
--- a/drivers/char/imx_mcc/imx_mcc_tty.c
+++ b/drivers/char/imx_mcc/imx_mcc_tty.c
@@ -21,6 +21,7 @@
 #include <linux/tty.h>
 #include <linux/tty_driver.h>
 #include <linux/tty_flip.h>
+#include <linux/mcc_config_linux.h>
 #include <linux/mcc_common.h>
 #include <linux/mcc_api.h>
 
@@ -81,7 +82,8 @@ static void mcctty_delay_work(struct work_struct *work)
 		pr_err("failed to create a9 mcc ep.\n");
 
 	while (1) {
-		ret = mcc_recv_copy(&mcc_endpoint_a9_pingpong, &pp_msg,
+		ret = mcc_recv(&mcc_endpoint_m4_pingpong,
+				&mcc_endpoint_a9_pingpong, &pp_msg,
 				sizeof(struct mcc_pp_msg),
 				&num_of_received_bytes, 0xffffffff);
 
@@ -138,13 +140,15 @@ static int mcctty_write(struct tty_struct *tty, const unsigned char *buf,
 		 * wait until the remote endpoint is created by
 		 * the other core
 		 */
-		ret = mcc_send(&mcc_endpoint_m4_pingpong, &pp_msg,
+		ret = mcc_send(&mcc_endpoint_a9_pingpong,
+				&mcc_endpoint_m4_pingpong, &pp_msg,
 				sizeof(struct mcc_pp_msg),
 				0xffffffff);
 
 		while (MCC_ERR_ENDPOINT == ret) {
 			pr_err("\n send err ret %d, re-send\n", ret);
-			ret = mcc_send(&mcc_endpoint_m4_pingpong, &pp_msg,
+			ret = mcc_send(&mcc_endpoint_a9_pingpong,
+					&mcc_endpoint_m4_pingpong, &pp_msg,
 					sizeof(struct mcc_pp_msg),
 					0xffffffff);
 			msleep(5000);
-- 
1.7.5.4

