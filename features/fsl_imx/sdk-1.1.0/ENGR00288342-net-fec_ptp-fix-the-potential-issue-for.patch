From 9e3c2e2ec5aabad2fe3f389a663d80bc7f2f1864 Mon Sep 17 00:00:00 2001
From: Fugang Duan <B38611@freescale.com>
Date: Mon, 18 Nov 2013 10:17:03 +0800
Subject: [PATCH 1027/1074] ENGR00288342 net:fec_ptp: fix the potential issue
 for storing timestamp

The timestamps generated in the i.MX drivers are generated by the
nanoseconds part coming from the 1588 clock. But the number of seconds
are maintained in a private structure of the interface. Those are
updated in a 1588 clock rollover interrupt.

The timestamp is generated right before a rollover of a second and the
timestamp value is constructed afterwards. Therefore the bigger part of
the timestamp is wrong (the second).

Suggested solution (pseudo-code):
If( actual-time.nsec < timestamp.nsec )
	Timestamp.sec = fpp->prtc -1;
Else
	Timestamp.sec = fpp->prtc;

Signed-off-by: Fugang Duan <B38611@freescale.com>
[Original patch taken from git://git.freescale.com/imx/linux-2.6-imx.git]
Signed-off-by: Biyao Zhai <biyao.zhai@windriver.com>
---
 drivers/net/ethernet/freescale/fec_ptp.c |   14 ++++++++++++--
 1 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/freescale/fec_ptp.c b/drivers/net/ethernet/freescale/fec_ptp.c
index aa942ac..4b9f898 100644
--- a/drivers/net/ethernet/freescale/fec_ptp.c
+++ b/drivers/net/ethernet/freescale/fec_ptp.c
@@ -361,6 +361,7 @@ void fec_ptp_store_txstamp(struct fec_enet_private *priv,
 {
 	struct fec_ptp_ts_data tmp_tx_time;
 	struct bufdesc_ex *bdp_ex = NULL;
+	struct ptp_rtc_time curr_time;
 	u8 *ptp_loc;
 	u16 eth_type;
 
@@ -388,7 +389,11 @@ void fec_ptp_store_txstamp(struct fec_enet_private *priv,
 		memcpy(tmp_tx_time.ident.spid, &ptp_loc[PTP_SPID_OFFS],
 						PTP_SOURCE_PORT_LENGTH);
 		/* store tx timestamp */
-		tmp_tx_time.ts.sec = priv->prtc;
+		fec_get_curr_cnt(priv, &curr_time);
+		if (curr_time.rtc_time.nsec < bdp_ex->ts)
+			tmp_tx_time.ts.sec = priv->prtc - 1;
+		else
+			tmp_tx_time.ts.sec = priv->prtc;
 		tmp_tx_time.ts.nsec = bdp_ex->ts;
 		/* insert timestamp in circular buffer */
 		fec_ptp_insert(&(priv->tx_timestamps), &tmp_tx_time);
@@ -401,6 +406,7 @@ void fec_ptp_store_rxstamp(struct fec_enet_private *priv,
 {
 	struct fec_ptp_ts_data tmp_rx_time;
 	struct bufdesc_ex *bdp_ex = NULL;
+	struct ptp_rtc_time curr_time;
 	u8 *ptp_loc;
 	u16 eth_type;
 
@@ -428,7 +434,11 @@ void fec_ptp_store_rxstamp(struct fec_enet_private *priv,
 		memcpy(tmp_rx_time.ident.spid, &ptp_loc[PTP_SPID_OFFS],
 						PTP_SOURCE_PORT_LENGTH);
 		/* store rx timestamp */
-		tmp_rx_time.ts.sec = priv->prtc;
+		fec_get_curr_cnt(priv, &curr_time);
+		if (curr_time.rtc_time.nsec < bdp_ex->ts)
+			tmp_rx_time.ts.sec = priv->prtc - 1;
+		else
+			tmp_rx_time.ts.sec = priv->prtc;
 		tmp_rx_time.ts.nsec = bdp_ex->ts;
 
 		/* insert timestamp in circular buffer */
-- 
1.7.5.4

