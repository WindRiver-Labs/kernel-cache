From df05209e3543441c9e19a6e543e27fd4077b7a8a Mon Sep 17 00:00:00 2001
From: Fugang Duan <b38611@freescale.com>
Date: Tue, 4 Nov 2014 16:25:58 +0800
Subject: [PATCH 1067/1074] MLK-9345 net: fec: avoid scheduling while atomic
 in kworker

In vte test with running "nand_stress.sh 2" case, there have kernel dump:
BUG: scheduling while atomic: kworker/0:1/13/0x00000202
Modules linked in: evbug
CPU: 0 PID: 13 Comm: kworker/0:1 Not tainted 3.10.31-1.1.0_beta+g94a7e47 #1
Workqueue: events phy_state_machine
[<80013b00>] (unwind_backtrace+0x0/0xf4) from [<80011524>] (show_stack+0x10/0x14)
[<80011524>] (show_stack+0x10/0x14) from [<806410f4>] (__schedule_bug+0x50/0x64)
[<806410f4>] (__schedule_bug+0x50/0x64) from [<8064673c>] (__schedule+0x4dc/0x594)
[<8064673c>] (__schedule+0x4dc/0x594) from [<80646be0>] (schedule_preempt_disabled+0x14/0x20)
[<80646be0>] (schedule_preempt_disabled+0x14/0x20) from [<80645818>] (__mutex_lock_slowpath+0x15c/0
x23c)
[<80645818>] (__mutex_lock_slowpath+0x15c/0x23c) from [<80645940>] (mutex_lock+0x48/0x4c)
[<80645940>] (mutex_lock+0x48/0x4c) from [<804c8334>] (clk_prepare_lock+0x88/0xfc)
[<804c8334>] (clk_prepare_lock+0x88/0xfc) from [<804c8fd8>] (clk_get_rate+0xc/0x5c)
[<804c8fd8>] (clk_get_rate+0xc/0x5c) from [<803a49ec>] (fec_enet_set_coalesce+0x8c/0x198)
[<803a49ec>] (fec_enet_set_coalesce+0x8c/0x198) from [<803a6218>] (fec_restart+0x918/0xcac)
[<803a6218>] (fec_restart+0x918/0xcac) from [<803a6938>] (fec_enet_adjust_link+0xb0/0xc8)
[<803a6938>] (fec_enet_adjust_link+0xb0/0xc8) from [<8039e51c>] (phy_state_machine+0x244/0x3a4)
[<8039e51c>] (phy_state_machine+0x244/0x3a4) from [<800418a8>] (process_one_work+0xf8/0x360)
[<800418a8>] (process_one_work+0xf8/0x360) from [<80042504>] (worker_thread+0x138/0x3d4)
[<80042504>] (worker_thread+0x138/0x3d4) from [<800478d0>] (kthread+0xb4/0xb8)
[<800478d0>] (kthread+0xb4/0xb8) from [<8000e118>] (ret_from_fork+0x14/0x3c)

The patch just fix the issue.

Signed-off-by: Fugang Duan <B38611@freescale.com>
[Original patch taken from git://git.freescale.com/imx/linux-2.6-imx.git]
Signed-off-by: Biyao Zhai <biyao.zhai@windriver.com>
---
 drivers/net/ethernet/freescale/fec.h      |    1 +
 drivers/net/ethernet/freescale/fec_main.c |    4 +++-
 2 files changed, 4 insertions(+), 1 deletions(-)

diff --git a/drivers/net/ethernet/freescale/fec.h b/drivers/net/ethernet/freescale/fec.h
index 759691c..eaa1ce5 100644
--- a/drivers/net/ethernet/freescale/fec.h
+++ b/drivers/net/ethernet/freescale/fec.h
@@ -627,6 +627,7 @@ struct fec_enet_private {
 	uint rx_time_itr;
 	uint tx_pkts_itr;
 	uint tx_time_itr;
+	unsigned int itr_clk_rate;
 };
 
 void fec_ptp_init(struct platform_device *pdev);
diff --git a/drivers/net/ethernet/freescale/fec_main.c b/drivers/net/ethernet/freescale/fec_main.c
index 57e901e..326c2ca 100644
--- a/drivers/net/ethernet/freescale/fec_main.c
+++ b/drivers/net/ethernet/freescale/fec_main.c
@@ -2192,7 +2192,7 @@ static int fec_enet_us_to_itr_clock(struct net_device *ndev, int us)
 {
 	struct fec_enet_private *fep = netdev_priv(ndev);
 
-	return us * (clk_get_rate(fep->clk_ahb) / 64000) / 1000;
+	return us * (fep->itr_clk_rate / 64000) / 1000;
 }
 
 /* Set threshold for interrupt coalescing */
@@ -3005,6 +3005,8 @@ fec_probe(struct platform_device *pdev)
 		goto failed_clk;
 	}
 
+	fep->itr_clk_rate = clk_get_rate(fep->clk_ahb);
+
 	/* enet_out is optional, depends on board */
 	fep->clk_enet_out = devm_clk_get(&pdev->dev, "enet_out");
 	if (IS_ERR(fep->clk_enet_out))
-- 
1.7.5.4

