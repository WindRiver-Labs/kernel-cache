From 9357b5657188e373a79d1d40ac7331c8ed7c763c Mon Sep 17 00:00:00 2001
From: Quanyang Wang <quanyang.wang@windriver.com>
Date: Wed, 11 Nov 2015 21:43:26 +0800
Subject: [PATCH 26/35] fsl_qbman: move preempt_enable() before kthread_create

Just enable preemption after calling smp_processor_id(),
otherwise, triggers scheduling while atomic (might_sleep()) warnings
as below:

BUG: scheduling while atomic: kexec/570/0x00000002
Modules linked in: twofish_generic twofish_common camellia_generic serpent_generic blowfish_generic blowfish_common cast5_genere
Preemption disabled at:[<          (null)>]           (null)

CPU: 7 PID: 570 Comm: kexec Tainted: G        W       4.1.12-WR8.0.0.0_standard #3
Call Trace:
[c0000000ebb6f530] [c000000000b0a748] .dump_stack+0x9c/0xfc (unreliable)
[c0000000ebb6f5b0] [c00000000009180c] .__schedule_bug+0x90/0xe8
[c0000000ebb6f630] [c000000000afaf40] .__schedule+0x6fc/0x7b0
[c0000000ebb6f6e0] [c000000000afb030] .schedule+0x3c/0xa8
[c0000000ebb6f760] [c000000000afe940] .schedule_timeout+0x22c/0x2dc
[c0000000ebb6f860] [c000000000afbef4] .wait_for_common+0xc0/0x1ac
[c0000000ebb6f920] [c0000000009359e4] .qman_delete_cgr_safe+0xd0/0x160
[c0000000ebb6f9e0] [c000000000b0febc] .dpa_remove+0x6c/0x11c
[c0000000ebb6fa70] [c0000000006110c4] .platform_drv_shutdown+0x3c/0x64
[c0000000ebb6faf0] [c00000000060b2a8] .device_shutdown+0x134/0x2c4
[c0000000ebb6fb90] [c00000000008b2c8] .kernel_restart_prepare+0x54/0x6c
[c0000000ebb6fc10] [c0000000000fc78c] .kernel_kexec+0x90/0xd4
[c0000000ebb6fc90] [c00000000008b90c] .SyS_reboot+0x218/0x290
[c0000000ebb6fe30] [c000000000000698] system_call+0x38/0xc4

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 727430c..431a157 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -2990,6 +2990,7 @@ void qman_delete_cgr_safe(struct qman_cgr *cgr)
 
 	preempt_disable();
 	if (qman_cgr_cpus[cgr->cgrid] != smp_processor_id()) {
+		preempt_enable();
 		init_completion(&cgr_comp.completion);
 		cgr_comp.cgr = cgr;
 		thread = kthread_create(qman_delete_cgr_thread, &cgr_comp,
@@ -2999,7 +3000,6 @@ void qman_delete_cgr_safe(struct qman_cgr *cgr)
 			kthread_bind(thread, qman_cgr_cpus[cgr->cgrid]);
 			wake_up_process(thread);
 			wait_for_completion(&cgr_comp.completion);
-			preempt_enable();
 			return;
 		}
 	}
-- 
1.7.5.4

