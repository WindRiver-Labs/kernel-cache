From b734422a47b58a2e48a7026d0b78131510538b11 Mon Sep 17 00:00:00 2001
From: Bai Ping <b51503@freescale.com>
Date: Fri, 26 Dec 2014 21:37:31 +0800
Subject: [PATCH 0320/1594] MLK-10018-01 arm: imx: Implement busfreq notifier
 calls for busfreq

commit c1f3faf63b60f863a1cf41c770f9fac48583e415 from
git://git.freescale.com/imx/linux-2.6-imx.git

Implement busfreq notifier calls used when busfreq entering low_bus_freq_mode.
When the system lower the bus frequency, some modules can be affected by bus
frequency change. Adding notifier call chains that allow driver affected by bus
frequency can be notified before and after low_bus_freq_mode.

Signed-off-by: Bai Ping <b51503@freescale.com>
---
 arch/arm/mach-imx/busfreq-imx6.c |   30 ++++++++++++++++++++++++++++++
 include/linux/busfreq-imx6.h     |   10 +++++++++-
 2 files changed, 39 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mach-imx/busfreq-imx6.c b/arch/arm/mach-imx/busfreq-imx6.c
index e5bbc7a..0d74b96 100644
--- a/arch/arm/mach-imx/busfreq-imx6.c
+++ b/arch/arm/mach-imx/busfreq-imx6.c
@@ -122,6 +122,29 @@ static u32 pll2_org_rate;
 static struct delayed_work low_bus_freq_handler;
 static struct delayed_work bus_freq_daemon;
 
+static RAW_NOTIFIER_HEAD(busfreq_notifier_chain);
+
+static int busfreq_notify(enum busfreq_event event)
+{
+	int ret;
+
+	ret = raw_notifier_call_chain(&busfreq_notifier_chain, event, NULL);
+
+	return notifier_to_errno(ret);
+}
+
+int register_busfreq_notifier(struct notifier_block *nb)
+{
+	return raw_notifier_chain_register(&busfreq_notifier_chain, nb);
+}
+EXPORT_SYMBOL(register_busfreq_notifier);
+
+int unregister_busfreq_notifier(struct notifier_block *nb)
+{
+	return raw_notifier_chain_unregister(&busfreq_notifier_chain, nb);
+}
+EXPORT_SYMBOL(unregister_busfreq_notifier);
+
 static bool check_m4_sleep(void)
 {
 	unsigned long timeout = jiffies + msecs_to_jiffies(500);
@@ -398,6 +421,10 @@ static void exit_lpm_imx6sl(void)
 static void reduce_bus_freq(void)
 {
 	clk_prepare_enable(pll3);
+	if (audio_bus_count && (low_bus_freq_mode || ultra_low_bus_freq_mode))
+		busfreq_notify(LOW_BUSFREQ_EXIT);
+	else if (!audio_bus_count)
+		busfreq_notify(LOW_BUSFREQ_ENTER);
 	if (cpu_is_imx6sl())
 		enter_lpm_imx6sl();
 	else if (cpu_is_imx6sx())
@@ -513,6 +540,9 @@ static int set_high_bus_freq(int high_bus_freq)
 	if (med_bus_freq_mode && !high_bus_freq)
 		return 0;
 
+	if (low_bus_freq_mode || ultra_low_bus_freq_mode)
+		busfreq_notify(LOW_BUSFREQ_EXIT);
+
 	clk_prepare_enable(pll3);
 	if (cpu_is_imx6sl())
 		exit_lpm_imx6sl();
diff --git a/include/linux/busfreq-imx6.h b/include/linux/busfreq-imx6.h
index 18eb0f8..46d9cba 100644
--- a/include/linux/busfreq-imx6.h
+++ b/include/linux/busfreq-imx6.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2013 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2012-2015 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -9,9 +9,15 @@
 #ifndef __ASM_ARCH_MXC_BUSFREQ_H__
 #define __ASM_ARCH_MXC_BUSFREQ_H__
 
+#include <linux/notifier.h>
 /*
  * This enumerates busfreq mode.
  */
+enum busfreq_event {
+	LOW_BUSFREQ_ENTER,
+	LOW_BUSFREQ_EXIT,
+};
+
 enum bus_freq_mode {
 	BUS_FREQ_HIGH,
 	BUS_FREQ_MED,
@@ -20,4 +26,6 @@ enum bus_freq_mode {
 };
 void request_bus_freq(enum bus_freq_mode mode);
 void release_bus_freq(enum bus_freq_mode mode);
+int register_busfreq_notifier(struct notifier_block *nb);
+int unregister_busfreq_notifier(struct notifier_block *nb);
 #endif
-- 
1.7.5.4

