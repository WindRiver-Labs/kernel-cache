From 644fae24b4bb8208fef1c5a927499d38302f2908 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Wed, 16 Mar 2016 16:16:51 +0800
Subject: [PATCH 3/3] driver: pci: pcie-designware: implement dedicated
 irq_mask() for kdump feature

when initialize pcie module, dw_pcie_host_init() call
irq_create_mapping() to pre-allocates MAX_MSI_IRQS(32) irq_desc
instance one time. When register a pcie device, call pci_enable_msi()
to assign a pre-allocates irq_desc instance for current msi interrupt
and initialize irq_desc.irq_data.msi_desc with current msi_desc
instance. When run kdump, function machine_kexec_mask_interrupts()
will iterate all irq_desc instances and call irq_mask() of
irq_desc.irq_data.chip with parameter irq_desc.irq_data.
When call irq_mask() of pcie module, irq_desc.irq_data.msi_desc
will be used to mask msi interrupt. Because not all the 32
pre-allocates irq_desc is used by msi interrupt,
irq_desc.irq_data.msi_desc is null in some irq_desc instances.
So, causing a kernel crash when call msi_set_mask_bit() function.
Detail crash info as below:

Unable to handle kernel NULL pointer dereference at virtual address 00000000
pgd = 86644000
[00000000] *pgd=16438831, *pte=00000000, *ppte=00000000
Internal error: Oops: 17 [#2] PREEMPT SMP ARM
Modules linked in: ov5640_camera_int ov5640_camera_mipi_int softdog
CPU: 0 PID: 653 Comm: sh Not tainted 4.1.18-WR8.0.0.0_standard #88
Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
task: 8dcd5400 ti: 865c4000 task.ti: 865c4000
PC is at msi_set_mask_bit+0x2c/0x80
LR is at vprintk_emit+0x440/0x4bc
pc : [<803d3fd0>]    lr : [<8007b490>]    psr: 60000093
sp : 865c5c20  ip : 865c5b78  fp : 865c5c3c
r10: 80d24780  r9 : 865c5d2a  r8 : 804236ce
r7 : 80d323e4  r6 : 8d41aa80  r5 : 00000001  r4 : 00000000
r3 : 00000000  r2 : 00000000  r1 : 00000007  r0 : 0000002d
Flags: nZCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment user
Control: 10c5387d  Table: 1664404a  DAC: 00000015
Process sh (pid: 653, stack limit = 0x865c4210)
Stack: (0x865c5c20 to 0x865c6000)
5c20: 8d41aa80 80d76ba8 0000013c 80d323e4 865c5c54 865c5c40 803d43fc 803d3fb0
5c40: 8d41aa80 80d76ba8 865c5c74 865c5c58 80017a10 803d43d8 865c5c78 80e027a0
5c60: 865c5e78 00000000 865c5cdc 865c5c78 800aafb4 800178c8 00000063 8ffc93dc
5c80: 00000000 00000000 00000001 80d32250 00000007 00000063 00000000 865c4000
5ca0: 00000000 865c5ed4 865c5ec0 865c5ec0 804236c8 804236cc a0060013 ffffffff
5cc0: 865c5d5c 865c5e78 80dc8cc4 0000000b 865c5d5c 865c5ce0 80013964 800aaf34
5ce0: 865c4210 0000000b 60000013 00000008 7f000000 804236cc 65acb44f 30323533
5d00: 20303030 30306130 30303030 32316520 33666666 33652032 30333061 28203030
5d20: 33633565 30303034 80002029 8089ac80 80acb44f 00000000 865c5e78 00000817
5d40: 8daa8fc0 8dcd5400 00000817 8daa8fc0 865c5d74 865c5d60 8089a874 8001371c
5d60: 865c5e78 00000015 865c5dcc 865c5d78 808a4d90 8089a81c 865c5d94 865c5d88
5d80: 8039b704 800f02a8 865c5db4 865c5d98 00000000 00000800 80e512fc 8daa8ff8
5da0: 000002d5 00000817 00000000 80d24ea4 865c5e78 00000000 865c4000 00000000
5dc0: 865c5e74 865c5dd0 800091b8 808a4a54 80d32224 20060013 0000e8c4 000000c3
5de0: 000002d5 00000000 00000000 00000001 000002d5 00000000 80ddbff8 60060013
5e00: 0000000f 0000000f 0000000f 80dcce18 00000004 00000002 80ded76c 8007b490
5e20: 865c5e8c 865c5e30 8007b490 8005bec4 865c5e84 865c5e40 80130030 8012f748
5e40: 00000000 00000040 00000187 00000001 60060013 00000000 804236cc a0060013
5e60: ffffffff 865c5eac 865c5ed4 865c5e78 808a4398 80009180 00000063 8ffc93dc
5e80: 00000000 00000000 00000001 80d32250 00000007 00000063 00000000 865c4000
5ea0: 00000000 865c5ed4 865c5ec0 865c5ec0 804236c8 804236cc a0060013 ffffffff
5ec0: 80d7b194 80d32250 865c5efc 865c5ed8 80424158 80423698 00000002 8cf2f880
5ee0: 00000001 00000000 8000f588 865c4000 865c5f14 865c5f00 804245c8 804240cc
5f00: 8042457c 8cf2f880 865c5f34 865c5f18 801a5a68 80424588 801a59e8 8ded30c0
5f20: 76f87000 865c5f80 865c5f4c 865c5f38 80154914 801a59f4 00000002 8ded30c0
5f40: 865c5f7c 865c5f50 80155018 801548f8 8016f278 8016f1e4 8ded30c0 8ded30c0
5f60: 76f87000 00000002 8000f588 865c4000 865c5fa4 865c5f80 8015577c 80154f68
5f80: 00000000 00000000 00000002 76f87000 76f16d60 00000004 00000000 865c5fa8
5fa0: 8000f3c0 80155730 00000002 76f87000 00000001 76f87000 00000002 00000000
5fc0: 00000002 76f87000 76f16d60 00000004 00000002 000eb234 00000001 00000000
5fe0: 00000000 7eee7964 76e46900 76e9ed50 60060010 00000001 00000000 00000000
[<803d3fd0>] (msi_set_mask_bit) from [<803d43fc>] (pci_msi_mask_irq+0x30/0x38)
[<803d43fc>] (pci_msi_mask_irq) from [<80017a10>] (machine_crash_shutdown+0x154/0x1c8)
[<80017a10>] (machine_crash_shutdown) from [<800aafb4>] (crash_kexec+0x8c/0xc4)
[<800aafb4>] (crash_kexec) from [<80013964>] (die+0x254/0x3f8)
[<80013964>] (die) from [<8089a874>] (__do_kernel_fault.part.0+0x64/0x84)
[<8089a874>] (__do_kernel_fault.part.0) from [<808a4d90>] (do_page_fault+0x348/0x3d0)
[<808a4d90>] (do_page_fault) from [<800091b8>] (do_DataAbort+0x44/0xc4)
[<800091b8>] (do_DataAbort) from [<808a4398>] (__dabt_svc+0x38/0x60)

Therefore, implement a dedicated irq_mask() function, add a judgement
for msi_desc pointer.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pci/host/pcie-designware.c |   12 +++++++++++-
 1 files changed, 11 insertions(+), 1 deletions(-)

diff --git a/drivers/pci/host/pcie-designware.c b/drivers/pci/host/pcie-designware.c
index 559ab30..bdbde7c 100644
--- a/drivers/pci/host/pcie-designware.c
+++ b/drivers/pci/host/pcie-designware.c
@@ -150,11 +150,21 @@ static int dw_pcie_wr_own_conf(struct pcie_port *pp, int where, int size,
 	return ret;
 }
 
+static void dw_pcie_msi_mask_irq(struct irq_data *data)
+{
+	struct msi_desc *desc = irq_data_get_msi(data);
+
+	if (!desc)
+		return;
+
+	pci_msi_mask_irq(data);
+}
+
 static struct irq_chip dw_msi_irq_chip = {
 	.name = "PCI-MSI",
 	.irq_enable = pci_msi_unmask_irq,
 	.irq_disable = pci_msi_mask_irq,
-	.irq_mask = pci_msi_mask_irq,
+	.irq_mask = dw_pcie_msi_mask_irq,
 	.irq_unmask = pci_msi_unmask_irq,
 };
 
-- 
1.7.5.4

