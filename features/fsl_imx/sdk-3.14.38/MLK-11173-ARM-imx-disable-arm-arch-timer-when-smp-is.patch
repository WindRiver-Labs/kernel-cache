From f7a4b580eb84a06413dddb333a4cddef92ccb239 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Sat, 27 Jun 2015 00:23:36 +0800
Subject: [PATCH 1254/1594] MLK-11173 ARM: imx: disable arm arch timer when
 smp is NOT enabled

commit 2f122ee31de21a3e2c4d01c1087a45dddee85017 from
git://git.freescale.com/imx/linux-2.6-imx.git

When SMP is deselected, ARM_ARCH_TIMER is still enabled while
broadcast time is disabled, so when system enters WAIT mode,
ARM platform's clock will be disabled, then system tick timer
will stop and cause system stay at WAIT mode and timer event
will NOT come as expected.

To fix this issue, we do runtime check in our timer driver,
if SMP is NOT enabled, ARM_ARCH_TIMER will be disabled and
using GPT timer always.

Signed-off-by: Anson Huang <b20788@freescale.com>
---
 arch/arm/mach-imx/time.c |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-imx/time.c b/arch/arm/mach-imx/time.c
index f53247a..e866d2c 100644
--- a/arch/arm/mach-imx/time.c
+++ b/arch/arm/mach-imx/time.c
@@ -84,6 +84,14 @@ static enum clock_event_mode clockevent_mode = CLOCK_EVT_MODE_UNUSED;
 
 static void __iomem *timer_base;
 
+#ifndef CONFIG_SMP
+static struct property device_disabled = {
+	.name = "status",
+	.length = sizeof("disabled"),
+	.value = "disabled",
+};
+#endif
+
 static inline void gpt_irq_disable(void)
 {
 	unsigned int tmp;
@@ -359,6 +367,15 @@ void __init mxc_timer_init_dt(struct device_node *np)
 {
 	struct clk *clk_per, *clk_ipg;
 	int irq;
+#ifndef CONFIG_SMP
+	struct device_node *node;
+
+	node = of_find_compatible_node(NULL, NULL, "arm,armv7-timer");
+	if (node) {
+		pr_info("disable arm arch timer for nosmp!\n");
+		of_add_property(node, &device_disabled);
+	}
+#endif
 
 	if (timer_base)
 		return;
-- 
1.7.5.4

