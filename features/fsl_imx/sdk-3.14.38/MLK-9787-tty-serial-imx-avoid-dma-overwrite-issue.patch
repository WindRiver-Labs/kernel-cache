From 47b5a71422f70f55283d53da9c25273891b8f3ec Mon Sep 17 00:00:00 2001
From: Fugang Duan <b38611@freescale.com>
Date: Thu, 30 Oct 2014 12:56:09 +0800
Subject: [PATCH 0126/1594] MLK-9787 tty: serial: imx: avoid dma overwrite
 issue

commit 20cafac0d3c188d5e319a29c46f97423a8a2b2de from
git://git.freescale.com/imx/linux-2.6-imx.git

The patch fix the potential issue that dma buffer overwrite.

Signed-off-by: Fugang Duan <B38611@freescale.com>
---
 drivers/tty/serial/imx.c |   22 +++++++++++-----------
 1 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/drivers/tty/serial/imx.c b/drivers/tty/serial/imx.c
index cb1f92b..e6d4585 100644
--- a/drivers/tty/serial/imx.c
+++ b/drivers/tty/serial/imx.c
@@ -977,10 +977,7 @@ static void dma_rx_callback(void *data)
 
 	status = dmaengine_tx_status(chan, (dma_cookie_t)0, &state);
 	count = RX_BUF_SIZE - state.residue;
-	sport->rx_buf.buf_info[sport->rx_buf.cur_idx].filled = true;
-	sport->rx_buf.buf_info[sport->rx_buf.cur_idx].rx_bytes = count;
-	sport->rx_buf.cur_idx++;
-	sport->rx_buf.cur_idx %= IMX_RXBD_NUM;
+
 	if (readl(sport->port.membase + USR2) & USR2_IDLE) {
 		/* In condition [3] the SDMA counted up too early */
 		count--;
@@ -988,15 +985,18 @@ static void dma_rx_callback(void *data)
 		writel(USR2_IDLE, sport->port.membase + USR2);
 	}
 
-	dev_dbg(sport->port.dev, "We get %d bytes.\n", count);
+	if (count > 0) {
+		sport->rx_buf.buf_info[sport->rx_buf.cur_idx].filled = true;
+		sport->rx_buf.buf_info[sport->rx_buf.cur_idx].rx_bytes = count;
+		sport->rx_buf.cur_idx++;
+		sport->rx_buf.cur_idx %= IMX_RXBD_NUM;
+		dev_dbg(sport->port.dev, "We get %d bytes.\n", count);
 
-	if (sport->rx_buf.cur_idx == sport->rx_buf.last_completed_idx)
-		dev_err(sport->port.dev, "overwrite!\n");
+		if (sport->rx_buf.cur_idx == sport->rx_buf.last_completed_idx)
+			dev_err(sport->port.dev, "overwrite!\n");
 
-	if (count)
 		schedule_work(&sport->tsk_dma_rx);
-	else
-		sport->rx_buf.last_completed_idx++;
+	}
 }
 
 static int start_rx_dma(struct imx_port *sport)
@@ -1008,7 +1008,7 @@ static int start_rx_dma(struct imx_port *sport)
 	sport->rx_buf.period_len = RX_BUF_SIZE;
 	sport->rx_buf.buf_len = IMX_RXBD_NUM * RX_BUF_SIZE;
 	sport->rx_buf.cur_idx = 0;
-	sport->rx_buf.last_completed_idx = -1;
+	sport->rx_buf.last_completed_idx = 0;
 	desc = dmaengine_prep_dma_cyclic(chan, sport->rx_buf.dmaaddr,
 		sport->rx_buf.buf_len, sport->rx_buf.period_len,
 		DMA_DEV_TO_MEM, DMA_PREP_INTERRUPT);
-- 
1.7.5.4

