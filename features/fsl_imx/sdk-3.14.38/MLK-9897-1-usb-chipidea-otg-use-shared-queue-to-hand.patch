From c24f3baf58d78ea0e326587789bfcb7f119733f7 Mon Sep 17 00:00:00 2001
From: Li Jun <jun.li@freescale.com>
Date: Mon, 24 Nov 2014 10:00:18 +0800
Subject: [PATCH 1335/1594] MLK-9897-1 usb: chipidea: otg: use shared queue to
 handle hnp polling

commit ac646fdb3af143c2269c402b1cd3c467b3279043 from
git://git.freescale.com/imx/linux-2.6-imx.git

This patch moves out hnp polling from usb otg work queue to shared queue, as
hnp polling call to usb_control_msg() which sends a control message and waits
for it complete or timeout, so it's not proper to handle it in usb otg work
queue which handles work with usb irq disabled.

Acked-by: Peter Chen <peter.chen@freescale.com>
Signed-off-by: Li Jun <jun.li@freescale.com>
(cherry picked from commit a147c8808ad198a7b9694b7dd517166505b76c50)
---
 drivers/usb/chipidea/ci.h      |    3 ++-
 drivers/usb/chipidea/otg_fsm.c |   24 ++++++++++++++----------
 2 files changed, 16 insertions(+), 11 deletions(-)

diff --git a/drivers/usb/chipidea/ci.h b/drivers/usb/chipidea/ci.h
index 8af2e0f..b019cc2 100644
--- a/drivers/usb/chipidea/ci.h
+++ b/drivers/usb/chipidea/ci.h
@@ -170,6 +170,7 @@ struct hw_bank {
  * @hr_timeouts: time out list for active otg fsm timers
  * @enabled_otg_timer_bits: bits of enabled otg timers
  * @next_otg_timer: next nearest enabled timer to be expired
+ * @hnp_polling_work: work for hnp polling
  * @work: work for role changing
  * @wq: workqueue thread
  * @qh_pool: allocation pool for queue heads
@@ -217,7 +218,7 @@ struct ci_hdrc {
 	unsigned			enabled_otg_timer_bits;
 	enum otg_fsm_timer		next_otg_timer;
 	struct timer_list		hnp_polling_timer;
-	bool				hnp_polling_req;
+	struct work_struct		hnp_polling_work;
 	struct work_struct		work;
 	struct workqueue_struct		*wq;
 
diff --git a/drivers/usb/chipidea/otg_fsm.c b/drivers/usb/chipidea/otg_fsm.c
index 5096513..f36dd6e6 100644
--- a/drivers/usb/chipidea/otg_fsm.c
+++ b/drivers/usb/chipidea/otg_fsm.c
@@ -421,8 +421,18 @@ static void hnp_polling_timer_work(unsigned long arg)
 {
 	struct ci_hdrc *ci = (struct ci_hdrc *)arg;
 
-	ci->hnp_polling_req = true;
-	ci_otg_queue_work(ci);
+	schedule_work(&ci->hnp_polling_work);
+}
+
+static void ci_hnp_polling_work(struct work_struct *work)
+{
+	struct ci_hdrc *ci = container_of(work, struct ci_hdrc,
+						hnp_polling_work);
+
+	pm_runtime_get_sync(ci->dev);
+	if (otg_hnp_polling(&ci->fsm) == HOST_REQUEST_FLAG)
+		ci_otg_queue_work(ci);
+	pm_runtime_put_sync(ci->dev);
 }
 
 /* Initialize timers */
@@ -616,14 +626,6 @@ int ci_otg_fsm_work(struct ci_hdrc *ci)
 	}
 
 	pm_runtime_get_sync(ci->dev);
-	if (ci->hnp_polling_req) {
-		ci->hnp_polling_req = false;
-		if (otg_hnp_polling(&ci->fsm) != HOST_REQUEST_FLAG) {
-			pm_runtime_put_sync(ci->dev);
-			return 0;
-		}
-	}
-
 	if (otg_statemachine(&ci->fsm)) {
 		if (ci->fsm.otg->state == OTG_STATE_A_IDLE) {
 			/*
@@ -854,6 +856,8 @@ int ci_hdrc_otg_fsm_init(struct ci_hdrc *ci)
 		return retval;
 	}
 
+	INIT_WORK(&ci->hnp_polling_work, ci_hnp_polling_work);
+
 	/* Enable A vbus valid irq */
 	hw_write_otgsc(ci, OTGSC_AVVIE, OTGSC_AVVIE);
 
-- 
1.7.5.4

