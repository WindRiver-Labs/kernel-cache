From 87dbe2d51188085e17d12f9aaf65e3487c6d6a1c Mon Sep 17 00:00:00 2001
From: Jason Liu <r64343@freescale.com>
Date: Sun, 1 Mar 2015 01:42:20 +0800
Subject: [PATCH 0863/1594] MLK-10348 ARM: imx: add volatile qualifiers to
 avoid GCC optimizations
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

commit 872042346c9b36963b5d4c0664c5e0ec25b58a9c from
git://git.freescale.com/imx/linux-2.6-imx.git

The GCC optimized the code and thus run into the instruction which CA9 not support,
thus Linux kernel panic with the undefined instruction, which cause boot up failure.

This is the code snip which cause the issue on the i.MX6Q(CA9) platform.

static void __init imx_smp_init_cpus(void)
{
... skip

        if (arm_is_ca7()) {
                unsigned long val;

                /* CA7 core number, [25:24] of CP15 L2CTLR */
                asm("mrc p15, 1, %0, c9, c0, 2" : "=r" (val));
                ncores = ((val >> 24) & 0x3) + 1;
        } else {
                ncores = scu_get_core_count(imx_scu_base);
        }
â€¦skip
}

According to the code logic, we should not run this instruction on the i.MX6Q(CA9)
if the run-time ARCH is not CA7. But unfortunately, code did run into it on i.MX6Q.
This can be seen from the ASM code by objdump:

80d4c010 <imx_smp_init_cpus>:
80d4c010:       e92d4070        push    {r4, r5, r6, lr}
80d4c014:       ebd54f77        bl      8029fdf8 <debug_smp_processor_id>
80d4c018:       e1a05000        mov     r5, r0
80d4c01c:       e320f000        nop     {0}
80d4c020:       ee100f10        mrc     15, 0, r0, cr0, cr0, {0}
80d4c024:       e7eb0250        ubfx    r0, r0, #4, #12
80d4c028:       ebcb4638        bl      8001d910 <mxc_set_arch_type>
80d4c02c:       e302387c        movw    r3, #10364      ; 0x287c
80d4c030:       e34830e0        movt    r3, #32992      ; 0x80e0
80d4c034:       e3002c07        movw    r2, #3079       ; 0xc07
80d4c038:       e5931000        ldr     r1, [r3]
80d4c03c:       e1a06003        mov     r6, r3
80d4c040:       ee394f50        mrc     15, 1, r4, cr9, cr0, {2} -> unconditionally run
80d4c044:       e1510002        cmp     r1, r2                   -> mrc before cmp!!!
80d4c048:       e7e14c54        ubfx    r4, r4, #24, #2
80d4c04c:       e2844001        add     r4, r4, #1
80d4c050:       0a000004        beq     80d4c068 <imx_smp_init_cpus+0x58>
80d4c054:       e3023c5c        movw    r3, #11356      ; 0x2c5c
80d4c058:       e34830e0        movt    r3, #32992      ; 0x80e0
80d4c05c:       e5930000        ldr     r0, [r3]
80d4c060:       ebffdd68        bl      80d43608 <scu_get_core_count>
80d4c064:       e1a04000        mov     r4, r0
80d4c068:       e30e39a4        movw    r3, #59812      ; 0xe9a4
80d4c06c:       e34830da        movt    r3, #32986      ; 0x80da
80d4c070:       e5933000        ldr     r3, [r3]
80d4c074:       e1540003        cmp     r4, r3
80d4c078:       9a000002        bls     80d4c088 <imx_smp_init_cpus+0x78>

This can be fixed by using the asm volatile qualifiers to disable the GCC compiler optimization.

Signed-off-by: Jason Liu <r64343@freescale.com>
---
 arch/arm/mach-imx/platsmp.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mach-imx/platsmp.c b/arch/arm/mach-imx/platsmp.c
index 79daf78..ccebd0a 100644
--- a/arch/arm/mach-imx/platsmp.c
+++ b/arch/arm/mach-imx/platsmp.c
@@ -85,7 +85,7 @@ static void __init imx_smp_init_cpus(void)
 		unsigned long val;
 
 		/* CA7 core number, [25:24] of CP15 L2CTLR */
-		asm("mrc p15, 1, %0, c9, c0, 2" : "=r" (val));
+		asm volatile("mrc p15, 1, %0, c9, c0, 2" : "=r" (val));
 		ncores = ((val >> 24) & 0x3) + 1;
 	} else {
 		ncores = scu_get_core_count(imx_scu_base);
-- 
1.7.5.4

