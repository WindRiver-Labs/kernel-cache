From ebba015ebfeb2f4c26679ec5a98d0927d98f2293 Mon Sep 17 00:00:00 2001
From: Bai Ping <b51503@freescale.com>
Date: Sat, 27 Dec 2014 01:00:58 +0800
Subject: [PATCH 0318/1594] MLK-10007-02 arm: imx: enable pll1 when changing
 arm_podf value

commit 59ce2a1912f2b358714bf7fb8ec401574040884d from
git://git.freescale.com/imx/linux-2.6-imx.git

Before changing the arm_podf, the pll1 must be output enabled according
to the hardware design.

Refer to the clk tree implementation code for i.MX6SL. pll1's output will
be disabled when no clk is sourced from it. In busfreq code, in order to
successfully change the arm_clk rate, we must make sure pll1's output is
enabled before changing this clk rate. add imx6sl_enable_pll_arm() calls
to fulfill this requirement.

Additionally, only a bypassed output clk is ok, so no need to make sure pll1
is powered up.

Signed-off-by: Bai Ping <b51503@freescale.com>
---
 arch/arm/mach-imx/busfreq-imx6.c |   15 +++++++++++++--
 arch/arm/mach-imx/clk-imx6sl.c   |    9 ++++-----
 arch/arm/mach-imx/common.h       |    1 +
 3 files changed, 18 insertions(+), 7 deletions(-)

diff --git a/arch/arm/mach-imx/busfreq-imx6.c b/arch/arm/mach-imx/busfreq-imx6.c
index 49c2c71..8d8f8c3 100644
--- a/arch/arm/mach-imx/busfreq-imx6.c
+++ b/arch/arm/mach-imx/busfreq-imx6.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2014 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2011-2015 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -265,9 +265,13 @@ static void enter_lpm_imx6sl(void)
 			imx_clk_set_parent(pll1_sw_clk, step_clk);
 			/*
 			 * Ensure that the clock will be
-			 * at original speed.
+			 * at original speed. the arm_podf can only be
+			 * changed when the pll1 output is enabled. So
+			 * enable pll1 output before change cpu_clk.
 			 */
+			imx6sl_enable_pll_arm(true);
 			imx_clk_set_rate(cpu_clk, org_arm_rate);
+			imx6sl_enable_pll_arm(false);
 		}
 		low_bus_freq_mode = 0;
 		ultra_low_bus_freq_mode = 0;
@@ -373,7 +377,14 @@ static void exit_lpm_imx6sl(void)
 		/* Move ARM from PLL1_SW_CLK to PLL2_400. */
 		imx_clk_set_parent(step_clk, pll2_400);
 		imx_clk_set_parent(pll1_sw_clk, step_clk);
+		/*
+		 * arm_podf can only be changed when pll1 output
+		 * is enabled. Enable pll1 output before changing
+		 * cpu_clk rate.
+		 */
+		imx6sl_enable_pll_arm(true);
 		imx_clk_set_rate(cpu_clk, org_arm_rate);
+		imx6sl_enable_pll_arm(false);
 		ultra_low_bus_freq_mode = 0;
 	}
 }
diff --git a/arch/arm/mach-imx/clk-imx6sl.c b/arch/arm/mach-imx/clk-imx6sl.c
index 6f708a7..ef661d0 100644
--- a/arch/arm/mach-imx/clk-imx6sl.c
+++ b/arch/arm/mach-imx/clk-imx6sl.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2014 Freescale Semiconductor, Inc.
+ * Copyright 2013-2015 Freescale Semiconductor, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -33,6 +33,7 @@
 #define BM_PLL_ARM_DIV_SELECT	(0x7f << 0)
 #define BM_PLL_ARM_POWERDOWN	(1 << 12)
 #define BM_PLL_ARM_ENABLE	(1 << 13)
+#define BM_PLL_ARM_BYPASS	(1 << 16)
 #define BM_PLL_ARM_LOCK		(1 << 31)
 #define PLL_ARM_DIV_792M	66
 
@@ -145,7 +146,7 @@ static int imx6sl_get_arm_divider_for_wait(void)
 	}
 }
 
-static void imx6sl_enable_pll_arm(bool enable)
+void imx6sl_enable_pll_arm(bool enable)
 {
 	static u32 saved_pll_arm;
 	u32 val;
@@ -153,10 +154,8 @@ static void imx6sl_enable_pll_arm(bool enable)
 	if (enable) {
 		saved_pll_arm = val = readl_relaxed(anatop_base + PLL_ARM);
 		val |= BM_PLL_ARM_ENABLE;
-		val &= ~BM_PLL_ARM_POWERDOWN;
+		val |= BM_PLL_ARM_BYPASS;
 		writel_relaxed(val, anatop_base + PLL_ARM);
-		while (!(__raw_readl(anatop_base + PLL_ARM) & BM_PLL_ARM_LOCK))
-			;
 	} else {
 		 writel_relaxed(saved_pll_arm, anatop_base + PLL_ARM);
 	}
diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index e96c812..0639d0f 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -128,6 +128,7 @@ void imx_anatop_pre_suspend(void);
 void imx_anatop_post_resume(void);
 int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
 void imx6q_set_int_mem_clk_lpm(bool enable);
+void imx6sl_enable_pll_arm(bool enable);
 void imx6sl_set_wait_clk(bool enter);
 void imx6_enet_mac_init(const char *compatible);
 int imx_mmdc_get_ddr_type(void);
-- 
1.7.5.4

