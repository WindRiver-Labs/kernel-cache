From 507a355f88e2f7d15f2cb884f83dd7084617b7bb Mon Sep 17 00:00:00 2001
From: Bai Ping <b51503@freescale.com>
Date: Fri, 22 May 2015 22:39:11 +0800
Subject: [PATCH 1142/1594] MLK-10960 thermal: imx: add a mutex to make sure
 tempmon setting changed safely

commit 39c253cbd4c9e041a94d280832c498ae01bcb14e from
git://git.freescale.com/imx/linux-2.6-imx.git

The busfreq notifier and thermal_zone updating run asynchronously. In some critical
situaiton, the notifier callback may be interrupted by thermal_zone kthread, it will
lead to the TEMPMON setting uncompleted when the get_temp function reads the
temp sensor value.

Signed-off-by: Bai Ping <b51503@freescale.com>
---
 drivers/thermal/imx_thermal.c |    9 +++++++++
 1 files changed, 9 insertions(+), 0 deletions(-)

diff --git a/drivers/thermal/imx_thermal.c b/drivers/thermal/imx_thermal.c
index 3f6b70b..3d8f4c7 100644
--- a/drivers/thermal/imx_thermal.c
+++ b/drivers/thermal/imx_thermal.c
@@ -122,6 +122,7 @@ struct imx_thermal_data {
 	bool irq_enabled;
 	int irq;
 	struct clk *thermal_clk;
+	struct mutex mutex;
 	const struct thermal_soc_data *socdata;
 };
 
@@ -231,6 +232,7 @@ static int imx_get_temp(struct thermal_zone_device *tz, unsigned long *temp)
 	unsigned int finished;
 	unsigned int val;
 
+	mutex_lock(&data->mutex);
 	if (data->mode == THERMAL_DEVICE_ENABLED) {
 		/* Check if a measurement is currently in progress */
 		regmap_field_read(data->finished, &finished);
@@ -277,6 +279,7 @@ static int imx_get_temp(struct thermal_zone_device *tz, unsigned long *temp)
 	/* The finished bit is not easy to poll on i.MX7, skip checking it */
 	if (data->socdata->version != TEMPMON_V3 && !finished) {
 		dev_dbg(&tz->device, "temp measurement never finished\n");
+		mutex_unlock(&data->mutex);
 		return -EAGAIN;
 	}
 
@@ -309,6 +312,7 @@ static int imx_get_temp(struct thermal_zone_device *tz, unsigned long *temp)
 		data->irq_enabled = true;
 		enable_irq(data->irq);
 	}
+	mutex_unlock(&data->mutex);
 
 	return 0;
 }
@@ -600,6 +604,8 @@ MODULE_DEVICE_TABLE(of, of_imx_thermal_match);
 static int thermal_notifier_event(struct notifier_block *this,
 					unsigned long event, void *ptr)
 {
+	mutex_lock(&imx_thermal_data->mutex);
+
 	switch (event) {
 	/*
 	 * In low_bus_freq_mode, the thermal sensor auto measurement
@@ -625,6 +631,8 @@ static int thermal_notifier_event(struct notifier_block *this,
 	default:
 		break;
 	}
+	mutex_unlock(&imx_thermal_data->mutex);
+
 	return NOTIFY_OK;
 }
 
@@ -678,6 +686,7 @@ static int imx_thermal_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	mutex_init(&data->mutex);
 	/* make sure the IRQ flag is clear before enabling irq on i.MX6SX */
 	if (data->socdata->version != TEMPMON_V3)
 		regmap_write(map, MISC1 + REG_CLR, MISC1_IRQ_TEMPHIGH);
-- 
1.7.5.4

