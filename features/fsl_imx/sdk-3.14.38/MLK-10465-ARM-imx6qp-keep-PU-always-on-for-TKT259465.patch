From a30856515166ecb46ea8af79e7821a5669f75f69 Mon Sep 17 00:00:00 2001
From: Robin Gong <b38343@freescale.com>
Date: Wed, 25 Mar 2015 10:07:08 +0800
Subject: [PATCH 0437/1594] MLK-10465: ARM: imx6qp: keep PU always on for
 TKT259465

commit 16bb87752ca9cbba7c28c43d87497a5f9516e366 from
git://git.freescale.com/imx/linux-2.6-imx.git

There is one design bug TKT259465 between GPU and PRE module, in the worst
case, PRE clock may be turned off when PU power up again. The workaround is
to keep PU always on except in suspend. That may cause more ~35mW power
consumption.

Signed-off-by: Robin Gong <b38343@freescale.com>
---
 arch/arm/mach-imx/anatop.c |   25 +++++++++
 arch/arm/mach-imx/gpc.c    |  117 +++++++++++++++++++++++++++-----------------
 2 files changed, 97 insertions(+), 45 deletions(-)

diff --git a/arch/arm/mach-imx/anatop.c b/arch/arm/mach-imx/anatop.c
index aff94d0..d37b579 100644
--- a/arch/arm/mach-imx/anatop.c
+++ b/arch/arm/mach-imx/anatop.c
@@ -39,6 +39,8 @@
 #define BM_ANADIG_REG_2P5_ENABLE_WEAK_LINREG	0x40000
 #define BM_ANADIG_REG_2P5_ENABLE_PULLDOWN	0x8
 #define BM_ANADIG_REG_CORE_FET_ODRIVE		0x20000000
+#define BM_ANADIG_REG_CORE_REG1			(0x1f << 9)
+#define BM_ANADIG_REG_CORE_REG2			(0x1f << 18)
 #define BM_ANADIG_ANA_MISC0_STOP_MODE_CONFIG	0x1000
 /* Below MISC0_DISCON_HIGH_SNVS is only for i.MX6SL */
 #define BM_ANADIG_ANA_MISC0_DISCON_HIGH_SNVS	0x2000
@@ -78,6 +80,23 @@ static inline void imx_anatop_disconnect_high_snvs(bool enable)
 		BM_ANADIG_ANA_MISC0_DISCON_HIGH_SNVS);
 }
 
+static void imx_anatop_disable_pu(bool off)
+{
+	u32  val, soc;
+	if (off) {
+		regmap_read(anatop, ANADIG_REG_CORE, &val);
+		val &= ~BM_ANADIG_REG_CORE_REG1;
+		regmap_write(anatop, ANADIG_REG_CORE, val);
+	} else {
+		/* track vddpu with vddsoc */
+		regmap_read(anatop, ANADIG_REG_CORE, &val);
+		soc = val & BM_ANADIG_REG_CORE_REG2;
+		val &= ~BM_ANADIG_REG_CORE_REG1;
+		val |= soc >> 9;
+		regmap_write(anatop, ANADIG_REG_CORE, val);
+	}
+}
+
 void imx_anatop_pre_suspend(void)
 {
 	if (cpu_is_imx7d()) {
@@ -91,6 +110,9 @@ void imx_anatop_pre_suspend(void)
 		return;
 	}
 
+	if (cpu_is_imx6q() && imx_get_soc_revision() == IMX_CHIP_REVISION_2_0)
+		imx_anatop_disable_pu(true);
+
 	if (imx_mmdc_get_ddr_type() == IMX_DDR_TYPE_LPDDR2)
 		imx_anatop_enable_2p5_pulldown(true);
 	else
@@ -115,6 +137,9 @@ void imx_anatop_post_resume(void)
 		return;
 	}
 
+	if (cpu_is_imx6q() && imx_get_soc_revision() == IMX_CHIP_REVISION_2_0)
+		imx_anatop_disable_pu(false);
+
 	if (imx_mmdc_get_ddr_type() == IMX_DDR_TYPE_LPDDR2)
 		imx_anatop_enable_2p5_pulldown(false);
 	else
diff --git a/arch/arm/mach-imx/gpc.c b/arch/arm/mach-imx/gpc.c
index 42dfe9d..d7c8a38 100644
--- a/arch/arm/mach-imx/gpc.c
+++ b/arch/arm/mach-imx/gpc.c
@@ -80,6 +80,9 @@ static u32 gpc_mf_request_on[IMR_NUM];
 static u32 bypass;
 static DEFINE_SPINLOCK(gpc_lock);
 static struct notifier_block nb_pcie;
+static struct pu_domain imx6q_pu_domain;
+static bool pu_on;	/* keep always on i.mx6qp */
+static void imx6q_pu_pgc_power_off(struct pu_domain *pu, bool off);
 
 void imx_gpc_add_m4_wake_up_irq(u32 irq, bool enable)
 {
@@ -182,6 +185,9 @@ void imx_gpc_pre_suspend(bool arm_power_off)
 	void __iomem *reg_imr1 = gpc_base + GPC_IMR1;
 	int i;
 
+	if (cpu_is_imx6q() && imx_get_soc_revision() == IMX_CHIP_REVISION_2_0)
+		imx6q_pu_pgc_power_off(&imx6q_pu_domain, true);
+
 	/* Tell GPC to power off ARM core when suspend */
 	if (cpu_is_imx6sx() && arm_power_off)
 		imx_gpc_mf_mix_off();
@@ -200,6 +206,9 @@ void imx_gpc_post_resume(void)
 	void __iomem *reg_imr1 = gpc_base + GPC_IMR1;
 	int i;
 
+	if (cpu_is_imx6q() && imx_get_soc_revision() == IMX_CHIP_REVISION_2_0)
+		imx6q_pu_pgc_power_off(&imx6q_pu_domain, false);
+
 	/* Keep ARM core powered on for other low-power modes */
 	imx_gpc_set_arm_power_in_lpm(false);
 	/* Keep M/F mix powered on for other low-power modes */
@@ -461,33 +470,66 @@ void __init imx_gpc_check_dt(void)
 	}
 }
 
-static void _imx6q_pm_pu_power_off(struct generic_pm_domain *genpd)
+static void imx6q_pu_pgc_power_off(struct pu_domain *pu, bool off)
 {
-	int iso, iso2sw;
-	u32 val;
+	if (off) {
+		int iso, iso2sw;
+		u32 val;
 
-	/* Read ISO and ISO2SW power down delays */
-	val = readl_relaxed(gpc_base + GPC_PGC_GPU_PDNSCR);
-	iso = val & 0x3f;
-	iso2sw = (val >> 8) & 0x3f;
+		/* Read ISO and ISO2SW power down delays */
+		val = readl_relaxed(gpc_base + GPC_PGC_GPU_PDNSCR);
+		iso = val & 0x3f;
+		iso2sw = (val >> 8) & 0x3f;
 
-	/* Gate off PU domain when GPU/VPU when powered down */
-	writel_relaxed(0x1, gpc_base + GPC_PGC_GPU_PDN);
+		/* Gate off PU domain when GPU/VPU when powered down */
+		writel_relaxed(0x1, gpc_base + GPC_PGC_GPU_PDN);
+
+		/* Request GPC to power down GPU/VPU */
+		val = readl_relaxed(gpc_base + GPC_CNTR);
+		val |= GPU_VPU_PDN_REQ;
+		writel_relaxed(val, gpc_base + GPC_CNTR);
+
+		/* Wait ISO + ISO2SW IPG clock cycles */
+		ndelay((iso + iso2sw) * 1000 / 66);
+	} else {
+		int i, sw, sw2iso;
+		u32 val;
 
-	/* Request GPC to power down GPU/VPU */
-	val = readl_relaxed(gpc_base + GPC_CNTR);
-	val |= GPU_VPU_PDN_REQ;
-	writel_relaxed(val, gpc_base + GPC_CNTR);
+		/* Enable reset clocks for all devices in the PU domain */
+		for (i = 0; i < pu->num_clks; i++)
+			clk_prepare_enable(pu->clk[i]);
 
-	/* Wait ISO + ISO2SW IPG clock cycles */
-	ndelay((iso + iso2sw) * 1000 / 66);
+		/* Gate off PU domain when GPU/VPU when powered down */
+		writel_relaxed(0x1, gpc_base + GPC_PGC_GPU_PDN);
+
+		/* Read ISO and ISO2SW power down delays */
+		val = readl_relaxed(gpc_base + GPC_PGC_GPU_PUPSCR);
+		sw = val & 0x3f;
+		sw2iso = (val >> 8) & 0x3f;
+
+		/* Request GPC to power up GPU/VPU */
+		val = readl_relaxed(gpc_base + GPC_CNTR);
+		val |= GPU_VPU_PUP_REQ;
+		writel_relaxed(val, gpc_base + GPC_CNTR);
+
+		/* Wait ISO + ISO2SW IPG clock cycles */
+		ndelay((sw + sw2iso) * 1000 / 66);
+
+		/* Disable reset clocks for all devices in the PU domain */
+		for (i = 0; i < pu->num_clks; i++)
+			clk_disable_unprepare(pu->clk[i]);
+	}
 }
 
 static int imx6q_pm_pu_power_off(struct generic_pm_domain *genpd)
 {
 	struct pu_domain *pu = container_of(genpd, struct pu_domain, base);
 
-	_imx6q_pm_pu_power_off(genpd);
+	if (&imx6q_pu_domain == pu && pu_on && cpu_is_imx6q()
+	    && imx_get_soc_revision() == IMX_CHIP_REVISION_2_0)
+		return 0;
+
+	imx6q_pu_pgc_power_off(pu, true);
 
 	if (pu->reg)
 		regulator_disable(pu->reg);
@@ -498,8 +540,15 @@ static int imx6q_pm_pu_power_off(struct generic_pm_domain *genpd)
 static int imx6q_pm_pu_power_on(struct generic_pm_domain *genpd)
 {
 	struct pu_domain *pu = container_of(genpd, struct pu_domain, base);
-	int i, ret, sw, sw2iso;
-	u32 val;
+	int ret;
+
+	if (cpu_is_imx6q() && imx_get_soc_revision() == IMX_CHIP_REVISION_2_0
+		&& &imx6q_pu_domain == pu) {
+		if (!pu_on)
+			pu_on = true;
+		else
+			return 0;
+	}
 
 	if (pu->reg)
 		ret = regulator_enable(pu->reg);
@@ -508,29 +557,7 @@ static int imx6q_pm_pu_power_on(struct generic_pm_domain *genpd)
 		return ret;
 	}
 
-	/* Enable reset clocks for all devices in the PU domain */
-	for (i = 0; i < pu->num_clks; i++)
-		clk_prepare_enable(pu->clk[i]);
-
-	/* Gate off PU domain when GPU/VPU when powered down */
-	writel_relaxed(0x1, gpc_base + GPC_PGC_GPU_PDN);
-
-	/* Read ISO and ISO2SW power down delays */
-	val = readl_relaxed(gpc_base + GPC_PGC_GPU_PUPSCR);
-	sw = val & 0x3f;
-	sw2iso = (val >> 8) & 0x3f;
-
-	/* Request GPC to power up GPU/VPU */
-	val = readl_relaxed(gpc_base + GPC_CNTR);
-	val |= GPU_VPU_PUP_REQ;
-	writel_relaxed(val, gpc_base + GPC_CNTR);
-
-	/* Wait ISO + ISO2SW IPG clock cycles */
-	ndelay((sw + sw2iso) * 1000 / 66);
-
-	/* Disable reset clocks for all devices in the PU domain */
-	for (i = 0; i < pu->num_clks; i++)
-		clk_disable_unprepare(pu->clk[i]);
+	imx6q_pu_pgc_power_off(pu, false);
 
 	return 0;
 }
-- 
1.7.5.4

