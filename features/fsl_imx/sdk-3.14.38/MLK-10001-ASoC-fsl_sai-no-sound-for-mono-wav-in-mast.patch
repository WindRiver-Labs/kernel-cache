From dae65d9ef47fe88a0dea30b54824b37319348184 Mon Sep 17 00:00:00 2001
From: Shengjiu Wang <shengjiu.wang@freescale.com>
Date: Tue, 16 Dec 2014 10:09:50 +0800
Subject: [PATCH 0745/1594] MLK-10001: ASoC: fsl_sai: no sound for mono wav in
 master mode

commit d6497403ddcd677dff610d748709b67e0c6a1b2c from
git://git.freescale.com/imx/linux-2.6-imx.git

The bclk caculation should according to the slot num, not the channels.
Because sometime we have two slots, but only one slot is enabled for mono
channel.
As when the codec wm8962 works on mono mode, it needs two slots I2S signal.
So here set the default slots of sai to 2, and add function set_tdm_slots for
future usage.

Signed-off-by: Shengjiu Wang <shengjiu.wang@freescale.com>
(cherry picked from commit 991a1f269ce4e4d0daa2cf5615169891acca0607)
---
 sound/soc/fsl/fsl_sai.c |   18 ++++++++++++++++--
 sound/soc/fsl/fsl_sai.h |    2 ++
 2 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/sound/soc/fsl/fsl_sai.c b/sound/soc/fsl/fsl_sai.c
index 74ec568..3622297 100644
--- a/sound/soc/fsl/fsl_sai.c
+++ b/sound/soc/fsl/fsl_sai.c
@@ -116,6 +116,17 @@ out:
 		return IRQ_HANDLED;
 }
 
+static int fsl_sai_set_dai_tdm_slot(struct snd_soc_dai *cpu_dai, u32 tx_mask,
+				u32 rx_mask, int slots, int slot_width)
+{
+	struct fsl_sai *sai = snd_soc_dai_get_drvdata(cpu_dai);
+
+	sai->slots = slots;
+	sai->slot_width = slot_width;
+
+	return 0;
+}
+
 static int fsl_sai_set_dai_sysclk_tr(struct snd_soc_dai *cpu_dai,
 		int clk_id, unsigned int freq, int fsl_dir)
 {
@@ -362,7 +373,7 @@ static int fsl_sai_hw_params(struct snd_pcm_substream *substream,
 	int ret;
 
 	if (!sai->is_slave_mode) {
-		ret = fsl_sai_set_bclk(cpu_dai, tx, 2 * word_width * params_rate(params));
+		ret = fsl_sai_set_bclk(cpu_dai, tx, sai->slots * word_width * params_rate(params));
 		if (ret)
 			return ret;
 
@@ -388,7 +399,7 @@ static int fsl_sai_hw_params(struct snd_pcm_substream *substream,
 	else
 		val_cr5 |= FSL_SAI_CR5_FBT(word_width - 1);
 
-	val_cr4 |= FSL_SAI_CR4_FRSZ(channels);
+	val_cr4 |= FSL_SAI_CR4_FRSZ(sai->slots);
 
 	regmap_update_bits(sai->regmap, FSL_SAI_xCR4(tx),
 			   FSL_SAI_CR4_SYWD_MASK | FSL_SAI_CR4_FRSZ_MASK,
@@ -531,6 +542,7 @@ static void fsl_sai_shutdown(struct snd_pcm_substream *substream,
 static const struct snd_soc_dai_ops fsl_sai_pcm_dai_ops = {
 	.set_sysclk	= fsl_sai_set_dai_sysclk,
 	.set_fmt	= fsl_sai_set_dai_fmt,
+	.set_tdm_slot	= fsl_sai_set_dai_tdm_slot,
 	.hw_params	= fsl_sai_hw_params,
 	.hw_free	= fsl_sai_hw_free,
 	.trigger	= fsl_sai_trigger,
@@ -714,6 +726,8 @@ static int fsl_sai_probe(struct platform_device *pdev)
 		}
 	}
 
+	sai->slots = 2;
+
 	irq = platform_get_irq(pdev, 0);
 	if (irq < 0) {
 		dev_err(&pdev->dev, "no irq for node %s\n", pdev->name);
diff --git a/sound/soc/fsl/fsl_sai.h b/sound/soc/fsl/fsl_sai.h
index 0171192..75cbc16 100644
--- a/sound/soc/fsl/fsl_sai.h
+++ b/sound/soc/fsl/fsl_sai.h
@@ -142,6 +142,8 @@ struct fsl_sai {
 
 	unsigned int mclk_id;
 	unsigned int mclk_streams;
+	unsigned int slots;
+	unsigned int slot_width;
 
 	struct snd_dmaengine_dai_dma_data dma_params_rx;
 	struct snd_dmaengine_dai_dma_data dma_params_tx;
-- 
1.7.5.4

