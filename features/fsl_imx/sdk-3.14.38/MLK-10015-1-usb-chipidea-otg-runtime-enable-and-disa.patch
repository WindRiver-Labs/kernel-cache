From e533f3a76ec88a4fcae6c7e4a22a9e2340d3cd14 Mon Sep 17 00:00:00 2001
From: Li Jun <B47624@freescale.com>
Date: Tue, 16 Dec 2014 15:24:45 +0800
Subject: [PATCH 1382/1594] MLK-10015-1 usb: chipidea: otg: runtime enable and
 disable OTG HNP for OTG FSM

commit bc02493f2590587386fdfdc492082d00982fb6eb from
git://git.freescale.com/imx/linux-2.6-imx.git

By introduce a flag hnp_enable, this full OTG protocol can support the original
simple role switch via ID pin state, this is most common usage for OTG right
now, user can runtime set the hnp_enable file to enable or disable the full OTG.

Acked-by: Peter Chen <peter.chen@freescale.com>
Signed-off-by: Li Jun <jun.li@freescale.com>
(cherry picked from commit 7b6a15c2f8b4979cf9f29c4ab564cf8fbcfcc57a)
---
 drivers/usb/chipidea/ci.h      |    2 +
 drivers/usb/chipidea/otg_fsm.c |   55 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 57 insertions(+), 0 deletions(-)

diff --git a/drivers/usb/chipidea/ci.h b/drivers/usb/chipidea/ci.h
index 3c1a336..e3fe643 100644
--- a/drivers/usb/chipidea/ci.h
+++ b/drivers/usb/chipidea/ci.h
@@ -204,6 +204,7 @@ struct hw_bank {
  * @in_lpm: if the core in low power mode
  * @wakeup_int: if wakeup interrupt occur
  * @rev: The revision number for controller
+ * @hnp_enable: indicates if OTG full HNP is enabled
  */
 struct ci_hdrc {
 	struct device			*dev;
@@ -268,6 +269,7 @@ struct ci_hdrc {
 	u32				pm_portsc;
 	u32				pm_usbmode;
 	struct work_struct		power_lost_work;
+	bool				hnp_enable;
 };
 
 static inline struct ci_role_driver *ci_role(struct ci_hdrc *ci)
diff --git a/drivers/usb/chipidea/otg_fsm.c b/drivers/usb/chipidea/otg_fsm.c
index 2ea1a13..42a3ece 100644
--- a/drivers/usb/chipidea/otg_fsm.c
+++ b/drivers/usb/chipidea/otg_fsm.c
@@ -148,6 +148,12 @@ set_b_bus_req(struct device *dev, struct device_attribute *attr,
 	if (count > 2)
 		return -1;
 
+	if (!ci->hnp_enable) {
+		dev_warn(ci->dev,
+			"Can't do this because HNP is not enabled!\n");
+		return -1;
+	}
+
 	mutex_lock(&ci->fsm.lock);
 	if (buf[0] == '0')
 		ci->fsm.b_bus_req = 0;
@@ -187,11 +193,57 @@ set_a_clr_err(struct device *dev, struct device_attribute *attr,
 }
 static DEVICE_ATTR(a_clr_err, S_IWUSR, NULL, set_a_clr_err);
 
+static ssize_t
+get_hnp_enable(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	char		*next;
+	unsigned	size, t;
+	struct ci_hdrc	*ci = dev_get_drvdata(dev);
+
+	next = buf;
+	size = PAGE_SIZE;
+	t = scnprintf(next, size, "%d\n", ci->hnp_enable);
+	size -= t;
+	next += t;
+
+	return PAGE_SIZE - size;
+}
+
+static ssize_t
+set_hnp_enable(struct device *dev, struct device_attribute *attr,
+					const char *buf, size_t count)
+{
+	struct ci_hdrc	*ci = dev_get_drvdata(dev);
+	unsigned long flags;
+
+	if (count > 2)
+		return -1;
+
+	spin_lock_irqsave(&ci->lock, flags);
+	if (buf[0] == '1') {
+		ci->hnp_enable = 1;
+	} else if (buf[0] == '0') {
+		if ((ci->fsm.otg->state == OTG_STATE_B_WAIT_ACON) ||
+			(ci->fsm.otg->state == OTG_STATE_B_HOST) ||
+			(ci->fsm.otg->state == OTG_STATE_A_PERIPHERAL))
+			dev_warn(ci->dev,
+				"Can't disable HNP while role switch!\n");
+		else
+			ci->hnp_enable = 0;
+	}
+	spin_unlock_irqrestore(&ci->lock, flags);
+
+	return count;
+}
+static DEVICE_ATTR(hnp_enable, S_IRUGO | S_IWUSR, get_hnp_enable,
+							set_hnp_enable);
+
 static struct attribute *inputs_attrs[] = {
 	&dev_attr_a_bus_req.attr,
 	&dev_attr_a_bus_drop.attr,
 	&dev_attr_b_bus_req.attr,
 	&dev_attr_a_clr_err.attr,
+	&dev_attr_hnp_enable.attr,
 	NULL,
 };
 
@@ -460,6 +512,9 @@ static void ci_otg_fsm_add_timer(struct otg_fsm *fsm, enum otg_fsm_timer t)
 	struct ci_hdrc	*ci = container_of(fsm, struct ci_hdrc, fsm);
 
 	if (t < NUM_OTG_FSM_TIMERS) {
+		if ((!ci->hnp_enable) && ((t == HNP_POLLING) ||
+						(t == A_WAIT_BCON)))
+			return;
 		if (t == HNP_POLLING)
 			ci_otg_add_hnp_polling_timer(ci);
 		else
-- 
1.7.5.4

