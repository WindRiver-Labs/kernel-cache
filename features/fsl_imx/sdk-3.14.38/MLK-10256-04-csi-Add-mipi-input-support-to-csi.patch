From 1d4fe7e29cd78ac2d009af4e6ab9cada031584f9 Mon Sep 17 00:00:00 2001
From: Sandor Yu <R01008@freescale.com>
Date: Fri, 29 May 2015 17:32:49 +0800
Subject: [PATCH 1195/1594] MLK-10256-04: csi: Add mipi input support to csi

commit c5ab6dc9198de128863b8a389098d336a1dd73b3 from
git://git.freescale.com/imx/linux-2.6-imx.git

-Add mipi input support. DTS property csi-mux-mipi
use to enable csi working in mipi mode.
-Set max video memory size 32M
-Add rx fifo overflow interrupter handle

Signed-off-by: Sandor Yu <R01008@freescale.com>
---
 drivers/media/platform/mxc/subdev/mx6s_capture.c |  110 ++++++++++++++++++++--
 1 files changed, 102 insertions(+), 8 deletions(-)

diff --git a/drivers/media/platform/mxc/subdev/mx6s_capture.c b/drivers/media/platform/mxc/subdev/mx6s_capture.c
index c41799b..352d059 100644
--- a/drivers/media/platform/mxc/subdev/mx6s_capture.c
+++ b/drivers/media/platform/mxc/subdev/mx6s_capture.c
@@ -32,6 +32,7 @@
 #include <linux/io.h>
 #include <linux/kernel.h>
 #include <linux/math64.h>
+#include <linux/mfd/syscon.h>
 #include <linux/mm.h>
 #include <linux/module.h>
 #include <linux/moduleparam.h>
@@ -39,6 +40,7 @@
 #include <linux/of_device.h>
 #include <linux/platform_device.h>
 #include <linux/pm_runtime.h>
+#include <linux/regmap.h>
 #include <linux/slab.h>
 #include <linux/time.h>
 #include <linux/v4l2-mediabus.h>
@@ -55,7 +57,7 @@
 #define MX6S_CAM_VERSION "0.0.1"
 #define MX6S_CAM_DRIVER_DESCRIPTION "i.MX6S_CSI"
 
-#define MAX_VIDEO_MEM 16
+#define MAX_VIDEO_MEM 32
 
 /* reset values */
 #define CSICR1_RESET_VAL	0x40000800
@@ -134,6 +136,13 @@
 
 /* csi control reg 18 */
 #define BIT_CSI_ENABLE			(0x1 << 31)
+#define BIT_MIPI_DATA_FORMAT_RAW8		(0x2a << 25)
+#define BIT_MIPI_DATA_FORMAT_YUV422_8B	(0x1e << 25)
+#define BIT_MIPI_DATA_FORMAT_MASK	(0x3F << 25)
+#define BIT_MIPI_DATA_FORMAT_OFFSET	25
+#define BIT_DATA_FROM_MIPI		(0x1 << 22)
+#define BIT_MIPI_YU_SWAP		(0x1 << 21)
+#define BIT_MIPI_DOUBLE_CMPNT	(0x1 << 20)
 #define BIT_BASEADDR_CHG_ERR_EN	(0x1 << 9)
 #define BIT_BASEADDR_SWITCH_SEL	(0x1 << 5)
 #define BIT_BASEADDR_SWITCH_EN	(0x1 << 4)
@@ -273,6 +282,12 @@ struct mx6s_buffer {
 	struct mx6s_buf_internal	internal;
 };
 
+struct mx6s_csi_mux {
+	struct regmap *gpr;
+	u8 req_gpr;
+	u8 req_bit;
+};
+
 struct mx6s_csi_dev {
 	struct device		*dev;
 	struct video_device *vdev;
@@ -315,6 +330,9 @@ struct mx6s_csi_dev {
 	struct v4l2_async_subdev	asd;
 	struct v4l2_async_notifier	subdev_notifier;
 	struct v4l2_async_subdev	*async_subdevs[2];
+
+	bool csi_mux_mipi;
+	struct mx6s_csi_mux csi_mux;
 };
 
 static inline int csi_read(struct mx6s_csi_dev *csi, unsigned int offset)
@@ -355,7 +373,7 @@ struct mx6s_fmt *format_by_mbus(enum v4l2_mbus_pixelcode code)
 			return formats + i;
 	}
 
-	pr_err("unknown pixelformat:'%4.4s'\n", (char *)&code);
+	pr_err("unknown mbus:0x%x\n", code);
 	return NULL;
 }
 
@@ -464,6 +482,7 @@ static void csi_enable_int(struct mx6s_csi_dev *csi_dev, int arg)
 	unsigned long cr1 = __raw_readl(csi_dev->regbase + CSI_CSICR1);
 
 	cr1 |= BIT_SOF_INTEN;
+	cr1 |= BIT_RFF_OR_INT;
 	if (arg == 1) {
 		/* still capture needs DMA intterrupt */
 		cr1 |= BIT_FB1_DMA_DONE_INTEN;
@@ -477,6 +496,7 @@ static void csi_disable_int(struct mx6s_csi_dev *csi_dev)
 	unsigned long cr1 = __raw_readl(csi_dev->regbase + CSI_CSICR1);
 
 	cr1 &= ~BIT_SOF_INTEN;
+	cr1 &= ~BIT_RFF_OR_INT;
 	cr1 &= ~BIT_FB1_DMA_DONE_INTEN;
 	cr1 &= ~BIT_FB2_DMA_DONE_INTEN;
 	__raw_writel(cr1, csi_dev->regbase + CSI_CSICR1);
@@ -592,7 +612,7 @@ static void csi_set_16bit_imagpara(struct mx6s_csi_dev *csi,
 	int imag_para = 0;
 	unsigned long cr3 = __raw_readl(csi->regbase + CSI_CSICR3);
 
-	imag_para = (width << 16) | (height * 2);
+	imag_para = ((width * 2) << 16) | height;
 	__raw_writel(imag_para, csi->regbase + CSI_CSIIMAG_PARA);
 
 	/* reflash the embeded DMA controller */
@@ -715,6 +735,14 @@ static int mx6s_csi_enable(struct mx6s_csi_dev *csi_dev)
 	if (pix->field == V4L2_FIELD_INTERLACED)
 		csi_tvdec_enable(csi_dev, true);
 
+	/* For mipi csi input only */
+	if (csi_dev->csi_mux_mipi == true) {
+		csi_dmareq_rff_enable(csi_dev);
+		csi_enable_int(csi_dev, 1);
+		csi_enable(csi_dev, 1);
+		return 0;
+	}
+
 	local_irq_save(flags);
 	for (timeout = 10000000; timeout > 0; timeout--) {
 		if (csi_read(csi_dev, CSI_CSISR) & BIT_SOF_INT) {
@@ -779,6 +807,7 @@ static void mx6s_csi_disable(struct mx6s_csi_dev *csi_dev)
 static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 {
 	struct v4l2_pix_format *pix = &csi_dev->pix;
+	u32 cr1, cr18;
 
 	if (pix->field == V4L2_FIELD_INTERLACED) {
 		csi_deinterlace_enable(csi_dev, true);
@@ -804,6 +833,26 @@ static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 		return -EINVAL;
 	}
 
+	if (csi_dev->csi_mux_mipi == true) {
+		cr1 = csi_read(csi_dev, CSI_CSICR1);
+		cr1 &= ~BIT_GCLK_MODE;
+		csi_write(csi_dev, cr1, CSI_CSICR1);
+
+		cr18 = csi_read(csi_dev, CSI_CSICR18);
+		cr18 |= BIT_DATA_FROM_MIPI;
+
+		switch (csi_dev->fmt->pixelformat) {
+		case V4L2_PIX_FMT_UYVY:
+		case V4L2_PIX_FMT_YUYV:
+			cr18 |= BIT_MIPI_DATA_FORMAT_YUV422_8B;
+			break;
+		default:
+			pr_debug("   fmt not supported\n");
+			return -EINVAL;
+		}
+
+		csi_write(csi_dev, cr18, CSI_CSICR18);
+	}
 	return 0;
 }
 
@@ -1014,6 +1063,9 @@ static irqreturn_t mx6s_csi_irq_handler(int irq, void *data)
 		return IRQ_HANDLED;
 	}
 
+	if (status & BIT_RFF_OR_INT)
+		dev_warn(csi_dev->dev, "%s Rx fifo overflow\n", __func__);
+
 	if (status & BIT_HRESP_ERR_INT) {
 		/* software reset */
 
@@ -1315,14 +1367,15 @@ static int mx6s_vidioc_enum_fmt_vid_cap(struct file *file, void  *priv,
 	WARN_ON(priv != file->private_data);
 
 	ret = v4l2_subdev_call(sd, video, enum_mbus_fmt, index, &code);
-	if (ret < 0)
+	if (ret < 0) {
 		/* no more formats */
+		dev_dbg(csi_dev->dev, "No more fmt\n");
 		return -EINVAL;
-
+	}
 
 	fmt = format_by_mbus(code);
 	if (!fmt) {
-		dev_err(csi_dev->dev, "mbus (0x%08x) invalid.", code);
+		dev_err(csi_dev->dev, "mbus (0x%08x) invalid.\n", code);
 		return -EINVAL;
 	}
 
@@ -1350,7 +1403,7 @@ static int mx6s_vidioc_try_fmt_vid_cap(struct file *file, void *priv,
 	}
 
 	v4l2_fill_mbus_format(&mbus_fmt, pix, fmt->mbus_code);
-	ret = v4l2_subdev_call(sd, video, try_mbus_fmt, &mbus_fmt);
+	ret = v4l2_subdev_call(sd, video, s_mbus_fmt, &mbus_fmt);
 	v4l2_fill_pix_format(pix, &mbus_fmt);
 
 	if (pix->field != V4L2_FIELD_INTERLACED)
@@ -1433,7 +1486,6 @@ static int mx6s_vidioc_streamon(struct file *file, void *priv,
 		return -EINVAL;
 
 	ret = vb2_streamon(&csi_dev->vb2_vidq, i);
-
 	if (!ret)
 		v4l2_subdev_call(sd, video, s_stream, 1);
 
@@ -1632,6 +1684,46 @@ static int subdev_notifier_bound(struct v4l2_async_notifier *notifier,
 	return 0;
 }
 
+static int mx6s_csi_mux_sel(struct mx6s_csi_dev *csi_dev)
+{
+	struct device_node *np = csi_dev->dev->of_node;
+	struct device_node *node;
+	phandle phandle;
+	u32 out_val[3];
+	int ret;
+
+	ret = of_property_read_u32_array(np, "csi-mux-mipi", out_val, 3);
+	if (ret) {
+		dev_dbg(csi_dev->dev, "no csi-mux-mipi property found\n");
+		csi_dev->csi_mux_mipi = false;
+	} else {
+		phandle = *out_val;
+
+		node = of_find_node_by_phandle(phandle);
+		if (!node) {
+			dev_dbg(csi_dev->dev, "not find gpr node by phandle\n");
+			ret = PTR_ERR(node);
+		}
+		csi_dev->csi_mux.gpr = syscon_node_to_regmap(node);
+		if (IS_ERR(csi_dev->csi_mux.gpr)) {
+			dev_err(csi_dev->dev, "failed to get gpr regmap\n");
+			ret = PTR_ERR(csi_dev->csi_mux.gpr);
+		}
+		of_node_put(node);
+		if (ret < 0)
+			return ret;
+
+		csi_dev->csi_mux.req_gpr = out_val[1];
+		csi_dev->csi_mux.req_bit = out_val[2];
+
+		regmap_update_bits(csi_dev->csi_mux.gpr, csi_dev->csi_mux.req_gpr,
+			1 << csi_dev->csi_mux.req_bit, 1 << csi_dev->csi_mux.req_bit);
+
+		csi_dev->csi_mux_mipi = true;
+	}
+	return ret;
+}
+
 static int mx6sx_register_subdevs(struct mx6s_csi_dev *csi_dev)
 {
 	struct device_node *parent = csi_dev->dev->of_node;
@@ -1732,6 +1824,8 @@ static int mx6s_csi_probe(struct platform_device *pdev)
 
 	csi_dev->dev = dev;
 
+	mx6s_csi_mux_sel(csi_dev);
+
 	snprintf(csi_dev->v4l2_dev.name,
 		 sizeof(csi_dev->v4l2_dev.name), "CSI");
 
-- 
1.7.5.4

