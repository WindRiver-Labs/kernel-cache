From 7552e8a426f5b953e572a6e469ddd80b77a79461 Mon Sep 17 00:00:00 2001
From: Zidan Wang <zidan.wang@freescale.com>
Date: Wed, 8 Apr 2015 14:50:08 +0800
Subject: [PATCH 0946/1594] MLK-10601 ASoC: imx-wm8958: headphone volume
 adjust failed sometimes

commit 1bfa190787c82569d9d149c74bbc75620e7d149a from
git://git.freescale.com/imx/linux-2.6-imx.git

At the end of playback and before power down time, audio master clk has
been disabled and cause i2c write failed, so headphone volume adjust will
failed.

Move clk enable/disable to set_bias_level() and set_bias_level_post()
function. When power state change from on to standby, it will enable
audio master clk. And disable it when power state change from standby
to off.

Signed-off-by: Zidan Wang <zidan.wang@freescale.com>
---
 sound/soc/fsl/imx-wm8958.c |   85 +++++++++++++++++++++++++++++++-------------
 1 files changed, 60 insertions(+), 25 deletions(-)

diff --git a/sound/soc/fsl/imx-wm8958.c b/sound/soc/fsl/imx-wm8958.c
index d37649c..1309b75 100644
--- a/sound/soc/fsl/imx-wm8958.c
+++ b/sound/soc/fsl/imx-wm8958.c
@@ -267,43 +267,22 @@ static struct snd_pcm_hw_constraint_list imx_wm8958_dac_rate_constraints = {
 
 static int imx_hifi_startup(struct snd_pcm_substream *substream)
 {
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_card *card = rtd->card;
-	struct imx_wm8958_data *data = snd_soc_card_get_drvdata(card);
+	bool tx = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
 	int ret = 0;
 
-	if (!IS_ERR(data->mclk)) {
-		ret = clk_prepare_enable(data->mclk);
-		if (ret) {
-			dev_err(card->dev, "Failed to enable MCLK: %d\n", ret);
-			return ret;
-		}
-	}
-
-	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
+	if (!tx)
 		ret = snd_pcm_hw_constraint_list(substream->runtime, 0,
 			SNDRV_PCM_HW_PARAM_RATE, &imx_wm8958_adc_rate_constraints);
-	else if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+	else
 		ret = snd_pcm_hw_constraint_list(substream->runtime, 0,
 			SNDRV_PCM_HW_PARAM_RATE, &imx_wm8958_dac_rate_constraints);
 	return ret;
 }
 
-static void imx_hifi_shutdown(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_card *card = rtd->card;
-	struct imx_wm8958_data *data = snd_soc_card_get_drvdata(card);
-
-	if (!IS_ERR(data->mclk))
-		clk_disable_unprepare(data->mclk);
-}
-
 static struct snd_soc_ops imx_hifi_ops = {
 	.hw_params = imx_hifi_hw_params,
 	.hw_free   = imx_hifi_hw_free,
 	.startup   = imx_hifi_startup,
-	.shutdown  = imx_hifi_shutdown,
 };
 
 static int imx_wm8958_gpio_init(struct snd_soc_card *card)
@@ -357,6 +336,61 @@ static ssize_t show_headphone(struct device_driver *dev, char *buf)
 
 static DRIVER_ATTR(headphone, S_IRUGO | S_IWUSR, show_headphone, NULL);
 
+static int imx_wm8958_set_bias_level(struct snd_soc_card *card,
+					struct snd_soc_dapm_context *dapm,
+					enum snd_soc_bias_level level)
+{
+	struct snd_soc_dai *codec_dai = card->rtd[0].codec_dai;
+	struct imx_wm8958_data *data = snd_soc_card_get_drvdata(card);
+	int ret;
+
+	if (dapm->dev != codec_dai->dev)
+		return 0;
+
+	switch (level) {
+	case SND_SOC_BIAS_STANDBY:
+		if (dapm->bias_level == SND_SOC_BIAS_OFF) {
+			if (!IS_ERR(data->mclk)) {
+				ret = clk_prepare_enable(data->mclk);
+				if (ret) {
+					dev_err(card->dev, "Failed to enable MCLK: %d\n", ret);
+					return ret;
+				}
+			}
+		}
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+static int imx_wm8958_set_bias_level_post(struct snd_soc_card *card,
+				     struct snd_soc_dapm_context *dapm,
+				     enum snd_soc_bias_level level)
+{
+	struct snd_soc_dai *codec_dai = card->rtd[0].codec_dai;
+	struct imx_wm8958_data *data = snd_soc_card_get_drvdata(card);
+
+	if (dapm->dev != codec_dai->dev)
+		return 0;
+
+	switch (level) {
+	case SND_SOC_BIAS_OFF:
+		if (dapm->bias_level == SND_SOC_BIAS_STANDBY)
+			if (!IS_ERR(data->mclk))
+				clk_disable_unprepare(data->mclk);
+		break;
+	default:
+		break;
+	}
+
+	dapm->bias_level = level;
+
+	return 0;
+}
+
 static int imx_wm8958_probe(struct platform_device *pdev)
 {
 	struct device_node *cpu_np, *codec_np;
@@ -426,8 +460,9 @@ static int imx_wm8958_probe(struct platform_device *pdev)
 	data->dai.cpu_dai_name = dev_name(&cpu_pdev->dev);
 	data->dai.platform_of_node = cpu_np;
 	data->dai.ops = &imx_hifi_ops;
-	data->dai.ignore_pmdown_time = 1;
 	data->dai.dai_fmt |= SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF;
+	data->card.set_bias_level = imx_wm8958_set_bias_level;
+	data->card.set_bias_level_post = imx_wm8958_set_bias_level_post;
 
 	data->card.dev = &pdev->dev;
 	ret = snd_soc_of_parse_card_name(&data->card, "model");
-- 
1.7.5.4

