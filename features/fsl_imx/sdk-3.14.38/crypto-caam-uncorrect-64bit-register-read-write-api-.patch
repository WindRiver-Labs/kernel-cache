From 55c880fc237aa1791e642d8fd84a73cf0056bab0 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Sun, 31 Jan 2016 21:30:09 +0800
Subject: [PATCH 1577/1594] crypto: caam: uncorrect 64bit register read/write
 api cause kernel crash

When read/write 64bit register, rd_reg64()/wr_reg64() function
use 32bit api to process high and low 32bit of 64bit data separately.
But original code doesn't write high and low 32bit to correct address
and doesn't read high and low 32bit from correct address. For example,
getting a wrong value when call rd_reg64() function, and cause kernel
crash when using wrong value.

Detail crash core dump information as below:
Unable to handle kernel paging request at virtual address 70000000
pgd = 80004000
[70000000] *pgd=00000000
Internal error: Oops: 805 [#1] PREEMPT SMP ARM
Modules linked in:
CPU: 1 PID: 1 Comm: swapper/0 Not tainted 4.1.15-WR8.0.0.0_standard #87
Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
task: a80d8000 ti: a80c2000 task.ti: a80c2000
PC is at v7_dma_clean_range+0x20/0x38
LR is at dma_cache_maint_page+0x6c/0x7c
pc : [<80021da4>]    lr : [<8001e2a4>]    psr: 20000113
sp : a80c3db0  ip : 70000000  fp : a80c3dc4
r10: a89d0054  r9 : a89d0054  r8 : 389d0054
r7 : 00000000  r6 : 00000001  r5 : 38e38e39  r4 : 00000800
r3 : 0000001f  r2 : 00000020  r1 : 70000800  r0 : 70000000 //1111 = f
Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment kernel
Control: 10c5387d  Table: 1000404a  DAC: 00000015
Process swapper/0 (pid: 1, stack limit = 0xa80c2210)
Stack: (0xa80c3db0 to 0xa80c4000)
3da0:                                     ab417000 00000800 a80c3dec a80c3dc8
3dc0: 8001e2e8 8001e244 80021df4 8001e3b4 a8873410 a8873810 00000010 8001e35c
3de0: a80c3dfc a80c3df0 8001e3a8 8001e2c0 a80c3e44 a80c3e00 806737c8 8001e368
3e00: 00000001 00000000 a89c0000 806806bc 00000000 00000000 a80c3e44 a89d0040
3e20: a89c0000 00010000 a89d0054 00000001 a8873410 a89d0054 a80c3e7c a80c3e48
3e40: 80896600 8067368c 00000002 00000000 a89c0000 a89c0000 a8873410 8001e35c
3e60: 80ca9260 80ca9260 80d50000 00000000 a80c3ea4 a80c3e80 80c47b8c 80896478
3e80: 00000001 00000000 80ca9260 a88a4340 80c479f0 00000000 a80c3f1c a80c3ea8
3ea0: 80009774 80c479fc 00000000 80cb4c90 60000113 80052e34 a80c3e00 a80c3ec8
3ec0: 80bf4600 803b3e48 abfff8f4 abfff8f7 a80c3f1c a80c3ee0 80053078 80bf45f0
3ee0: 000000fd 00000006 00000006 000000fe 80c6cb78 00000006 00000006 000000fe
3f00: 80c9a92c 80c6cb94 80d50000 80d50000 a80c3f94 a80c3f20 80bf4eb8 8000966c
3f20: 00000006 00000006 80bf45e4 ffff372d 600d8197 ffffffff e5ab93be 9006ec65
3f40: a8638afc ec423839 a80d8540 8089181c 00000000 8089b64c a80c3f74 a80c3f68
3f60: 8089b64c 8005a9c0 a80c3f94 a80c3f78 80d50000 8089181c 00000000 00000000
3f80: 00000000 00000000 a80c3fac a80c3f98 80891838 80bf4d2c 00000000 8089181c
3fa0: 00000000 a80c3fb0 8000f3c8 80891828 00000000 00000000 00000000 00000000
3fc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
3fe0: 00000000 00000000 00000000 00000000 00000013 00000000 e553383c b80f7fd8
[<80021da4>] (v7_dma_clean_range) from [<8001e2a4>] (dma_cache_maint_page+0x6c/0x7c)
[<8001e2a4>] (dma_cache_maint_page) from [<8001e2e8>] (__dma_page_cpu_to_dev+0x34/0xa8)
[<8001e2e8>] (__dma_page_cpu_to_dev) from [<8001e3a8>] (arm_dma_sync_single_for_device+0x4c/0x58)
[<8001e3a8>] (arm_dma_sync_single_for_device) from [<806737c8>] (caam_jr_enqueue+0x148/0x2d0)
[<806737c8>] (caam_jr_enqueue) from [<80896600>] (caam_init_buf+0x194/0x208)
[<80896600>] (caam_init_buf) from [<80c47b8c>] (caam_rng_init+0x19c/0x20c)
[<80c47b8c>] (caam_rng_init) from [<80009774>] (do_one_initcall+0x114/0x1c4)
[<80009774>] (do_one_initcall) from [<80bf4eb8>] (kernel_init_freeable+0x198/0x294)
[<80bf4eb8>] (kernel_init_freeable) from [<80891838>] (kernel_init+0x1c/0xf4)
[<80891838>] (kernel_init) from [<8000f3c8>] (ret_from_fork+0x14/0x2c)
Code: e1a02312 e2423001 e1c00003 f57ff04f (ee070f3a)
---[ end trace af9b1eabc25605e1 ]---
Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
CPU0: stopping
CPU: 0 PID: 0 Comm: swapper/0 Tainted: G      D         4.1.15-WR8.0.0.0_standard #87
Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
[<800191f0>] (unwind_backtrace) from [<80013644>] (show_stack+0x20/0x24)
[<80013644>] (show_stack) from [<80894f7c>] (dump_stack+0x7c/0xc8)
[<80894f7c>] (dump_stack) from [<80016370>] (handle_IPI+0x168/0x2c4)
[<80016370>] (handle_IPI) from [<80009430>] (gic_handle_irq+0x64/0x6c)
[<80009430>] (gic_handle_irq) from [<8089be00>] (__irq_svc+0x40/0x74)
Exception stack(0x80ca3f28 to 0x80ca3f70)
3f20:                   00000001 00000000 00000000 800224c0 00000000 00000000
3f40: 80c9b3c4 00000001 abfff7c0 80c6e198 00000000 80ca3f7c 80ca3f80 80ca3f70
3f60: 800104d0 800104d4 60000113 ffffffff
[<8089be00>] (__irq_svc) from [<800104d4>] (arch_cpu_idle+0x3c/0x48)
[<800104d4>] (arch_cpu_idle) from [<80070250>] (cpu_startup_entry+0x3b0/0x420)
[<80070250>] (cpu_startup_entry) from [<80891804>] (rest_init+0x84/0x9c)
[<80891804>] (rest_init) from [<80bf4cb0>] (start_kernel+0x360/0x3d0)
[<80bf4cb0>] (start_kernel) from [<1000807c>] (0x1000807c)
CPU2: stopping
CPU: 2 PID: 0 Comm: swapper/2 Tainted: G      D         4.1.15-WR8.0.0.0_standard #87
Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
[<800191f0>] (unwind_backtrace) from [<80013644>] (show_stack+0x20/0x24)
[<80013644>] (show_stack) from [<80894f7c>] (dump_stack+0x7c/0xc8)
[<80894f7c>] (dump_stack) from [<80016370>] (handle_IPI+0x168/0x2c4)
[<80016370>] (handle_IPI) from [<80009430>] (gic_handle_irq+0x64/0x6c)
[<80009430>] (gic_handle_irq) from [<8089be00>] (__irq_svc+0x40/0x74)
Exception stack(0xa816bf68 to 0xa816bfb0)
bf60:                   00000001 00000000 00000000 800224c0 00000000 00000000
bf80: 80c9b3c4 00000001 1000406a 412fc09a 00000000 a816bfbc a816bfc0 a816bfb0
bfa0: 800104d0 800104d4 60000113 ffffffff
[<8089be00>] (__irq_svc) from [<800104d4>] (arch_cpu_idle+0x3c/0x48)
[<800104d4>] (arch_cpu_idle) from [<80070250>] (cpu_startup_entry+0x3b0/0x420)
[<80070250>] (cpu_startup_entry) from [<80015fa8>] (secondary_start_kernel+0x114/0x130)
[<80015fa8>] (secondary_start_kernel) from [<100094cc>] (0x100094cc)
CPU3: stopping
CPU: 3 PID: 0 Comm: swapper/3 Tainted: G      D         4.1.15-WR8.0.0.0_standard #87
Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
[<800191f0>] (unwind_backtrace) from [<80013644>] (show_stack+0x20/0x24)
[<80013644>] (show_stack) from [<80894f7c>] (dump_stack+0x7c/0xc8)
[<80894f7c>] (dump_stack) from [<80016370>] (handle_IPI+0x168/0x2c4)
[<80016370>] (handle_IPI) from [<80009430>] (gic_handle_irq+0x64/0x6c)
[<80009430>] (gic_handle_irq) from [<8089be00>] (__irq_svc+0x40/0x74)
Exception stack(0xa816df68 to 0xa816dfb0)
df60:                   00000001 00000000 00000000 800224c0 00000000 00000000
df80: 80c9b3c4 00000001 1000406a 412fc09a 00000000 a816dfbc a816dfc0 a816dfb0
dfa0: 800104d0 800104d4 60000113 ffffffff
[<8089be00>] (__irq_svc) from [<800104d4>] (arch_cpu_idle+0x3c/0x48)
[<800104d4>] (arch_cpu_idle) from [<80070250>] (cpu_startup_entry+0x3b0/0x420)
[<80070250>] (cpu_startup_entry) from [<80015fa8>] (secondary_start_kernel+0x114/0x130)
[<80015fa8>] (secondary_start_kernel) from [<100094cc>] (0x100094cc)
---[ end Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b

Therefore, modify code to adjust the order of operating register address.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/caam/regs.h |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/crypto/caam/regs.h b/drivers/crypto/caam/regs.h
index 361acb2..9add753 100644
--- a/drivers/crypto/caam/regs.h
+++ b/drivers/crypto/caam/regs.h
@@ -106,14 +106,14 @@ static inline u64 rd_reg64(u64 __iomem *reg)
 #ifdef __LITTLE_ENDIAN
 static inline void wr_reg64(u64 __iomem *reg, u64 data)
 {
-	wr_reg32((u32 __iomem *)reg + 1, (data & 0xffffffff00000000ull) >> 32);
-	wr_reg32((u32 __iomem *)reg, data & 0x00000000ffffffffull);
+	wr_reg32((u32 __iomem *)reg, (data & 0xffffffff00000000ull) >> 32);
+	wr_reg32((u32 __iomem *)reg + 1, data & 0x00000000ffffffffull);
 }
 
 static inline u64 rd_reg64(u64 __iomem *reg)
 {
-	return (((u64)rd_reg32((u32 __iomem *)reg + 1)) << 32) |
-		((u64)rd_reg32((u32 __iomem *)reg));
+	return (((u64)rd_reg32((u32 __iomem *)reg)) << 32) |
+		((u64)rd_reg32((u32 __iomem *)reg + 1));
 }
 #endif
 #endif
-- 
1.7.5.4

