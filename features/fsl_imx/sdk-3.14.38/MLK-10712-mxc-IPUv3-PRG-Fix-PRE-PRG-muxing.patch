From ad3341dd9607349e3012bfe6b61e3e0f24757849 Mon Sep 17 00:00:00 2001
From: Liu Ying <Ying.Liu@freescale.com>
Date: Tue, 21 Apr 2015 18:14:21 +0800
Subject: [PATCH 0495/1594] MLK-10712 mxc IPUv3: PRG: Fix PRE/PRG muxing

commit f3234805919f2bdc7480faed92815faa8fa81074 from
git://git.freescale.com/imx/linux-2.6-imx.git

The i.MX6QP IOMUX_GPR5 PRE_PRG_SEL0/1 fields control the PRE/PRG muxing.
The muxing could be described by the following table.
 ------------------------------------------------------------------
|\     |          PRG0/IPU0          |           PRG1/IPU1         |
| mux  |-----------------------------------------------------------|
|    \ |ch0/ch23 |ch1/ch27 |ch2/ch28 |ch0/ch23 |ch1/ch27 |ch2/ch28 |
|------------------------------------------------------------------|
| PRE0 |  fixed  |   n/a   |   n/a   |   n/a   |   n/a   |   n/a   |
|------------------------------------------------------------------|
| PRE1 |   n/a   | A(2b'00)| A(2b'01)|   n/a   | A(2b'10)| A(2b'11)|
|------------------------------------------------------------------|
| PRE2 |   n/a   | B(2b'00)| B(2b'01)|   n/a   | B(2b'10)| B(2b'11)|
|------------------------------------------------------------------|
| PRE3 |   n/a   |   n/a   |   n/a   |  fixed  |   n/a   |   n/a   |
 ------------------------------------------------------------------
(Note - A: GPR5 bit12-13, B: GPR5 bit14-15)

We should bind PRG[x] channel[y] with IPU[x] channel[y+26] statically
instead of dynamically, where x=0or1, y=1or2.  Also, the values for A/B
cannot be the same due to a SoC design requirement(even if one of the
PRE1/PRE2 is disabled, the two values cannot be the same).  This patch
fixes the PRE/PRG muxing logic.

Signed-off-by: Liu Ying <Ying.Liu@freescale.com>
---
 drivers/mxc/ipu3/prg.c                      |   99 ++++++++++++++++++---------
 include/linux/mfd/syscon/imx6q-iomuxc-gpr.h |    4 +
 2 files changed, 70 insertions(+), 33 deletions(-)

diff --git a/drivers/mxc/ipu3/prg.c b/drivers/mxc/ipu3/prg.c
index 5327db1..89a8301 100644
--- a/drivers/mxc/ipu3/prg.c
+++ b/drivers/mxc/ipu3/prg.c
@@ -51,6 +51,7 @@ struct ipu_prg_data {
 	struct device *dev;
 	struct prg_chan chan[PRG_CHAN_NUM];
 	struct regmap *regmap;
+	struct regmap_field *pre_prg_sel[2];
 	spinlock_t lock;
 };
 
@@ -84,50 +85,66 @@ static struct ipu_prg_data *get_prg(unsigned int ipu_id)
 	return NULL;
 }
 
-static int alloc_prg_chan(struct ipu_prg_data *prg, unsigned int pre_num)
+static int assign_prg_chan(struct ipu_prg_data *prg, unsigned int pre_num,
+			   ipu_channel_t ipu_ch)
 {
-	u32 mask, shift;
-	int i;
+	int prg_ch;
 
 	if (!prg)
 		return -EINVAL;
 
-	if ((prg->id == 0 && pre_num == 0) ||
-	    (prg->id == 1 && pre_num == 3)) {
-		mutex_lock(&prg->chan[0].mutex);
-		if (!prg->chan[0].in_use) {
-			prg->chan[0].in_use = true;
-			prg->chan[0].pre_num = pre_num;
-			mutex_unlock(&prg->chan[0].mutex);
-			return 0;
-		}
-		mutex_unlock(&prg->chan[0].mutex);
-		return -EBUSY;
+	switch (ipu_ch) {
+	case MEM_BG_SYNC:
+		prg_ch = 0;
+		break;
+	case MEM_FG_SYNC:
+		prg_ch = 1;
+		break;
+	case MEM_DC_SYNC:
+		prg_ch = 2;
+		break;
+	default:
+		dev_err(prg->dev, "wrong ipu channel type\n");
+		return -EINVAL;
 	}
 
-	for (i = 1; i < PRG_CHAN_NUM; i++) {
-		mutex_lock(&prg->chan[i].mutex);
-		if (!prg->chan[i].in_use) {
-			prg->chan[i].in_use = true;
-			prg->chan[i].pre_num = pre_num;
-
-			if (pre_num == 1) {
-				mask = IMX6Q_GPR5_PRE_PRG_SEL0_MASK;
-				shift = IMX6Q_GPR5_PRE_PRG_SEL0_SHIFT;
-			} else {
-				mask = IMX6Q_GPR5_PRE_PRG_SEL1_MASK;
-				shift = IMX6Q_GPR5_PRE_PRG_SEL1_SHIFT;
-			}
+	mutex_lock(&prg->chan[prg_ch].mutex);
+	if (!prg->chan[prg_ch].in_use) {
+		prg->chan[prg_ch].in_use = true;
+		prg->chan[prg_ch].pre_num = pre_num;
+
+		if (prg_ch != 0) {
+			unsigned int pmux, psel;	/* primary */
+			unsigned int smux, ssel;	/* secondary */
+			struct regmap_field *pfield, *sfield;
+
+			psel = pre_num - 1;
+			ssel = psel ? 0 : 1;
+
+			pfield = prg->pre_prg_sel[psel];
+			sfield = prg->pre_prg_sel[ssel];
+			pmux = (prg_ch - 1) + (prg->id << 1);
 
 			mutex_lock(&prg_lock);
-			regmap_update_bits(prg->regmap, IOMUXC_GPR5, mask,
-				((i - 1) + (prg->id << 1)) << shift);
+			regmap_field_write(pfield, pmux);
+
+			/*
+			 * PRE1 and PRE2 cannot bind with a same channel of
+			 * one PRG even if one of the two PREs is disabled.
+			 */
+			regmap_field_read(sfield, &smux);
+			if (smux == pmux) {
+				smux = pmux ^ 0x1;
+				regmap_field_write(sfield, smux);
+			}
 			mutex_unlock(&prg_lock);
-			mutex_unlock(&prg->chan[i].mutex);
-			return i;
 		}
-		mutex_unlock(&prg->chan[i].mutex);
+		mutex_unlock(&prg->chan[prg_ch].mutex);
+		dev_dbg(prg->dev, "bind prg%u ch%d with pre%u\n",
+				prg->id, prg_ch, pre_num);
+		return prg_ch;
 	}
+	mutex_unlock(&prg->chan[prg_ch].mutex);
 	return -EBUSY;
 }
 
@@ -163,7 +180,7 @@ int ipu_prg_config(struct ipu_prg_config *config)
 	if (config->height & ~IPU_PR_CH_HEIGHT_MASK)
 		return -EINVAL;
 
-	prg_ch = alloc_prg_chan(prg, config->pre_num);
+	prg_ch = assign_prg_chan(prg, config->pre_num, config->ipu_ch);
 	if (prg_ch < 0)
 		return prg_ch;
 
@@ -378,6 +395,12 @@ static int ipu_prg_probe(struct platform_device *pdev)
 	struct device_node *np = pdev->dev.of_node, *memory;
 	struct ipu_prg_data *prg;
 	struct resource *res;
+	struct reg_field reg_field0 = REG_FIELD(IOMUXC_GPR5,
+						IMX6Q_GPR5_PRE_PRG_SEL0_LSB,
+						IMX6Q_GPR5_PRE_PRG_SEL0_MSB);
+	struct reg_field reg_field1 = REG_FIELD(IOMUXC_GPR5,
+						IMX6Q_GPR5_PRE_PRG_SEL1_LSB,
+						IMX6Q_GPR5_PRE_PRG_SEL1_MSB);
 	int id, i;
 
 	prg = devm_kzalloc(&pdev->dev, sizeof(*prg), GFP_KERNEL);
@@ -413,6 +436,16 @@ static int ipu_prg_probe(struct platform_device *pdev)
 		return PTR_ERR(prg->regmap);
 	}
 
+	prg->pre_prg_sel[0] = devm_regmap_field_alloc(&pdev->dev, prg->regmap,
+							reg_field0);
+	if (IS_ERR(prg->pre_prg_sel[0]))
+		return PTR_ERR(prg->pre_prg_sel[0]);
+
+	prg->pre_prg_sel[1] = devm_regmap_field_alloc(&pdev->dev, prg->regmap,
+							reg_field1);
+	if (IS_ERR(prg->pre_prg_sel[1]))
+		return PTR_ERR(prg->pre_prg_sel[1]);
+
 	memory = of_parse_phandle(np, "memory-region", 0);
 	if (!memory)
 		return -ENODEV;
diff --git a/include/linux/mfd/syscon/imx6q-iomuxc-gpr.h b/include/linux/mfd/syscon/imx6q-iomuxc-gpr.h
index 58e9f44..6071592 100644
--- a/include/linux/mfd/syscon/imx6q-iomuxc-gpr.h
+++ b/include/linux/mfd/syscon/imx6q-iomuxc-gpr.h
@@ -249,12 +249,16 @@
 #define IMX6Q_GPR5_ENET_TX_CLK_SEL		BIT(9)
 #define IMX6Q_GPR5_PRE_PRG_SEL0_MASK		(0x3 << 12)
 #define IMX6Q_GPR5_PRE_PRG_SEL0_SHIFT		12
+#define IMX6Q_GPR5_PRE_PRG_SEL0_MSB		13
+#define IMX6Q_GPR5_PRE_PRG_SEL0_LSB		12
 #define IMX6Q_GPR5_PRE_PRG_SEL0_PRE1_PRG0_CHAN1	(0x0 << 12)
 #define IMX6Q_GPR5_PRE_PRG_SEL0_PRE1_PRG0_CHAN2	(0x1 << 12)
 #define IMX6Q_GPR5_PRE_PRG_SEL0_PRE1_PRG1_CHAN1	(0x2 << 12)
 #define IMX6Q_GPR5_PRE_PRG_SEL0_PRE1_PRG1_CHAN2	(0x3 << 12)
 #define IMX6Q_GPR5_PRE_PRG_SEL1_MASK		(0x3 << 14)
 #define IMX6Q_GPR5_PRE_PRG_SEL1_SHIFT		14
+#define IMX6Q_GPR5_PRE_PRG_SEL1_MSB		15
+#define IMX6Q_GPR5_PRE_PRG_SEL1_LSB		14
 #define IMX6Q_GPR5_PRE_PRG_SEL1_PRE2_PRG0_CHAN1	(0x0 << 14)
 #define IMX6Q_GPR5_PRE_PRG_SEL1_PRE2_PRG0_CHAN2	(0x1 << 14)
 #define IMX6Q_GPR5_PRE_PRG_SEL1_PRE2_PRG1_CHAN1	(0x2 << 14)
-- 
1.7.5.4

