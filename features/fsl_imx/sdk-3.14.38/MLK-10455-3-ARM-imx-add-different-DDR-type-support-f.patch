From c5f530ed0288df10c87750ecd1cf1a4cad348b38 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Fri, 20 Mar 2015 12:57:09 +0800
Subject: [PATCH 0450/1594] MLK-10455-3 ARM: imx: add different DDR type
 support for imx7d retention

commit 4c217aef2fda4d07d7bbb8b16121d763d8e5c14b from
git://git.freescale.com/imx/linux-2.6-imx.git

On i.MX7D, LPDDR3 and DDR3 have different retention flow, need to add DDR
type check during initialization.

Some DDR configurations may be updated lated, so it is better to
just read it from register instead of hard coding.

Signed-off-by: Anson Huang <b20788@freescale.com>
---
 arch/arm/mach-imx/Kconfig   |    4 ++
 arch/arm/mach-imx/Makefile  |    1 +
 arch/arm/mach-imx/common.h  |    1 +
 arch/arm/mach-imx/ddrc.c    |   86 ++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-imx/mxc.h     |    2 +
 arch/arm/mach-imx/pm-imx7.c |   97 ++++++++++++++++++++++++-------------------
 6 files changed, 148 insertions(+), 43 deletions(-)
 create mode 100644 arch/arm/mach-imx/ddrc.c

diff --git a/arch/arm/mach-imx/Kconfig b/arch/arm/mach-imx/Kconfig
index 6684bf5..6a0aa32 100644
--- a/arch/arm/mach-imx/Kconfig
+++ b/arch/arm/mach-imx/Kconfig
@@ -57,6 +57,9 @@ config HAVE_IMX_GPC
 config HAVE_IMX_MMDC
 	bool
 
+config HAVE_IMX_DDRC
+	bool
+
 config HAVE_IMX_SRC
 	def_bool y if SMP
 
@@ -597,6 +600,7 @@ config SOC_IMX7
 	select CPU_V7
 	select ARM_GIC
 	select HAVE_SMP
+	select HAVE_IMX_DDRC
 
 config SOC_IMX7D
 	bool "i.MX7 Dual support"
diff --git a/arch/arm/mach-imx/Makefile b/arch/arm/mach-imx/Makefile
index 534d32d..a382b2b 100644
--- a/arch/arm/mach-imx/Makefile
+++ b/arch/arm/mach-imx/Makefile
@@ -82,6 +82,7 @@ obj-$(CONFIG_MACH_IMX35_DT) += imx35-dt.o
 obj-$(CONFIG_HAVE_IMX_ANATOP) += anatop.o
 obj-$(CONFIG_HAVE_IMX_GPC) += gpc.o gpcv2.o
 obj-$(CONFIG_HAVE_IMX_MMDC) += mmdc.o
+obj-$(CONFIG_HAVE_IMX_DDRC) += ddrc.o
 obj-$(CONFIG_HAVE_IMX_SRC) += src.o
 obj-$(CONFIG_HAVE_IMX_MCC) += mcc_api.o mcc_common.o mcc_linux.o mcc_imx6sx.o
 ifneq ($(CONFIG_SOC_IMX6)$(CONFIG_SOC_LS1021A),)
diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index f8be03b..c1fc037 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -138,6 +138,7 @@ void imx6q_set_int_mem_clk_lpm(bool enable);
 void imx6sl_set_wait_clk(bool enter);
 void imx6_enet_mac_init(const char *compatible);
 int imx_mmdc_get_ddr_type(void);
+int imx_ddrc_get_ddr_type(void);
 void imx6_busfreq_map_io(void);
 void imx6sx_low_power_idle(void);
 void imx7d_low_power_idle(void);
diff --git a/arch/arm/mach-imx/ddrc.c b/arch/arm/mach-imx/ddrc.c
new file mode 100644
index 0000000..9c7f627
--- /dev/null
+++ b/arch/arm/mach-imx/ddrc.c
@@ -0,0 +1,86 @@
+/*
+ * Copyright 2015 Freescale Semiconductor, Inc.
+ *
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+
+#include "hardware.h"
+
+#define DDRC_MSTR		0x0
+#define	BM_DDRC_MSTR_DDR3	0x1
+#define	BM_DDRC_MSTR_LPDDR2	0x4
+#define	BM_DDRC_MSTR_LPDDR3	0x8
+
+static int ddr_type;
+
+static int imx_ddrc_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	void __iomem *ddrc_base, *reg;
+	u32 val;
+
+	ddrc_base = of_iomap(np, 0);
+	WARN_ON(!ddrc_base);
+
+	reg = ddrc_base + DDRC_MSTR;
+	/* Get ddr type */
+	val = readl_relaxed(reg);
+	val &= (BM_DDRC_MSTR_DDR3 | BM_DDRC_MSTR_LPDDR2
+		| BM_DDRC_MSTR_LPDDR3);
+
+	switch (val) {
+	case BM_DDRC_MSTR_DDR3:
+		pr_info("DDR type is DDR3!\n");
+		ddr_type = IMX_DDR_TYPE_DDR3;
+		break;
+	case BM_DDRC_MSTR_LPDDR2:
+		pr_info("DDR type is LPDDR2!\n");
+		ddr_type = IMX_DDR_TYPE_LPDDR2;
+		break;
+	case BM_DDRC_MSTR_LPDDR3:
+		pr_info("DDR type is LPDDR3!\n");
+		ddr_type = IMX_DDR_TYPE_LPDDR3;
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+int imx_ddrc_get_ddr_type(void)
+{
+	return ddr_type;
+}
+
+static struct of_device_id imx_ddrc_dt_ids[] = {
+	{ .compatible = "fsl,imx7-ddrc", },
+	{ /* sentinel */ }
+};
+
+static struct platform_driver imx_ddrc_driver = {
+	.driver		= {
+		.name	= "imx-ddrc",
+		.owner	= THIS_MODULE,
+		.of_match_table = imx_ddrc_dt_ids,
+	},
+	.probe		= imx_ddrc_probe,
+};
+
+static int __init imx_ddrc_init(void)
+{
+	return platform_driver_register(&imx_ddrc_driver);
+}
+postcore_initcall(imx_ddrc_init);
diff --git a/arch/arm/mach-imx/mxc.h b/arch/arm/mach-imx/mxc.h
index 2d5e19e..6af4a08 100644
--- a/arch/arm/mach-imx/mxc.h
+++ b/arch/arm/mach-imx/mxc.h
@@ -57,7 +57,9 @@
 #define IMX_CHIP_REVISION_3_3		0x33
 #define IMX_CHIP_REVISION_UNKNOWN	0xff
 
+#define IMX_DDR_TYPE_DDR3		0
 #define IMX_DDR_TYPE_LPDDR2		1
+#define IMX_DDR_TYPE_LPDDR3		2
 
 #ifndef __ASSEMBLY__
 extern unsigned int __mxc_cpu_type;
diff --git a/arch/arm/mach-imx/pm-imx7.c b/arch/arm/mach-imx/pm-imx7.c
index 2918d34..861f3cb 100644
--- a/arch/arm/mach-imx/pm-imx7.c
+++ b/arch/arm/mach-imx/pm-imx7.c
@@ -43,6 +43,7 @@
 #define MX7_MAX_DDRC_PHY_NUM		16
 
 #define MX7_SUSPEND_IRAM_ADDR_OFFSET	0
+#define READ_DATA_FROM_HARDWARE		0
 
 #define UART_UCR1	0x80
 #define UART_UCR2	0x84
@@ -97,46 +98,46 @@ struct imx7_pm_socdata {
 	const u32 (*ddrc_phy_offset)[2];
 };
 
-static const u32 imx7d_ddrc_reg_setting[][2] __initconst = {
-	{ 0x0, 0x03040008 },
-	{ 0x1a0, 0x80400003 },
-	{ 0x1a4, 0x00100020 },
-	{ 0x1a8, 0x80100004 },
-	{ 0x64, 0x00200038 },
+static const u32 imx7d_ddrc_lpddr3_setting[][2] __initconst = {
+	{ 0x0, READ_DATA_FROM_HARDWARE },
+	{ 0x1a0, READ_DATA_FROM_HARDWARE },
+	{ 0x1a4, READ_DATA_FROM_HARDWARE },
+	{ 0x1a8, READ_DATA_FROM_HARDWARE },
+	{ 0x64, READ_DATA_FROM_HARDWARE },
 	{ 0xd0, 0xc0350001 },
-	{ 0xdc, 0x00c3000a },
-	{ 0xe0, 0x00010000 },
-	{ 0xe4, 0x00110006 },
-	{ 0xf4, 0x0000033f },
-	{ 0x100, 0x0a0e110b },
-	{ 0x104, 0x00020211 },
-	{ 0x108, 0x03060707 },
-	{ 0x10c, 0x00a0500c },
-	{ 0x110, 0x05020307 },
-	{ 0x114, 0x02020404 },
-	{ 0x118, 0x02020003 },
-	{ 0x11c, 0x00000202 },
-	{ 0x180, 0x00600018 },
-	{ 0x184, 0x00e00100 },
-	{ 0x190, 0x02098205 },
-	{ 0x194, 0x00060303 },
-	{ 0x200, 0x00000016 },
-	{ 0x204, 0x00171717 },
-	{ 0x214, 0x05050505 },
-	{ 0x218, 0x0f0f0505 },
+	{ 0xdc, READ_DATA_FROM_HARDWARE },
+	{ 0xe0, READ_DATA_FROM_HARDWARE },
+	{ 0xe4, READ_DATA_FROM_HARDWARE },
+	{ 0xf4, READ_DATA_FROM_HARDWARE },
+	{ 0x100, READ_DATA_FROM_HARDWARE },
+	{ 0x104, READ_DATA_FROM_HARDWARE },
+	{ 0x108, READ_DATA_FROM_HARDWARE },
+	{ 0x10c, READ_DATA_FROM_HARDWARE },
+	{ 0x110, READ_DATA_FROM_HARDWARE },
+	{ 0x114, READ_DATA_FROM_HARDWARE },
+	{ 0x118, READ_DATA_FROM_HARDWARE },
+	{ 0x11c, READ_DATA_FROM_HARDWARE },
+	{ 0x180, READ_DATA_FROM_HARDWARE },
+	{ 0x184, READ_DATA_FROM_HARDWARE },
+	{ 0x190, READ_DATA_FROM_HARDWARE },
+	{ 0x194, READ_DATA_FROM_HARDWARE },
+	{ 0x200, READ_DATA_FROM_HARDWARE },
+	{ 0x204, READ_DATA_FROM_HARDWARE },
+	{ 0x214, READ_DATA_FROM_HARDWARE },
+	{ 0x218, READ_DATA_FROM_HARDWARE },
 	{ 0x240, 0x06000601 },
-	{ 0x244, 0x00000000 },
+	{ 0x244, READ_DATA_FROM_HARDWARE },
 };
 
-static const u32 imx7d_ddrc_phy_reg_setting[][2] __initconst = {
-	{ 0x0, 0x17421e40 },
-	{ 0x4, 0x10210100 },
-	{ 0x8, 0x00010000 },
-	{ 0x10, 0x0007080c },
-	{ 0x1c, 0x01010000 },
-	{ 0x9c, 0x00000d6e },
-	{ 0x20, 0x0a0c0a0a },
-	{ 0x30, 0x06060606 },
+static const u32 imx7d_ddrc_phy_lpddr3_setting[][2] __initconst = {
+	{ 0x0, READ_DATA_FROM_HARDWARE },
+	{ 0x4, READ_DATA_FROM_HARDWARE },
+	{ 0x8, READ_DATA_FROM_HARDWARE },
+	{ 0x10, READ_DATA_FROM_HARDWARE },
+	{ 0x1c, READ_DATA_FROM_HARDWARE },
+	{ 0x9c, READ_DATA_FROM_HARDWARE },
+	{ 0x20, READ_DATA_FROM_HARDWARE },
+	{ 0x30, READ_DATA_FROM_HARDWARE },
 	{ 0x50, 0x01000008 },
 	{ 0x50, 0x00000008 },
 	{ 0xc0, 0x0e407304 },
@@ -152,10 +153,10 @@ static const struct imx7_pm_socdata imx7d_pm_data __initconst = {
 	.src_compat = "fsl,imx7d-src",
 	.iomuxc_compat = "fsl,imx7d-iomuxc",
 	.gpc_compat = "fsl,imx7d-gpc",
-	.ddrc_num = ARRAY_SIZE(imx7d_ddrc_reg_setting),
-	.ddrc_offset = imx7d_ddrc_reg_setting,
-	.ddrc_phy_num = ARRAY_SIZE(imx7d_ddrc_phy_reg_setting),
-	.ddrc_phy_offset = imx7d_ddrc_phy_reg_setting,
+	.ddrc_num = ARRAY_SIZE(imx7d_ddrc_lpddr3_setting),
+	.ddrc_offset = imx7d_ddrc_lpddr3_setting,
+	.ddrc_phy_num = ARRAY_SIZE(imx7d_ddrc_phy_lpddr3_setting),
+	.ddrc_phy_offset = imx7d_ddrc_phy_lpddr3_setting,
 };
 
 /*
@@ -481,15 +482,25 @@ static int __init imx7_suspend_init(const struct imx7_pm_socdata *socdata)
 	/* initialize DDRC settings */
 	for (i = 0; i < pm_info->ddrc_num; i++) {
 		pm_info->ddrc_val[i][0] = ddrc_offset_array[i][0];
-		pm_info->ddrc_val[i][1] = ddrc_offset_array[i][1];
+		if (ddrc_offset_array[i][1] == READ_DATA_FROM_HARDWARE)
+			pm_info->ddrc_val[i][1] =
+				readl_relaxed(pm_info->ddrc_base.vbase +
+				ddrc_offset_array[i][0]);
+		else
+			pm_info->ddrc_val[i][1] = ddrc_offset_array[i][1];
 	}
 
 	/* initialize DDRC PHY settings */
 	for (i = 0; i < pm_info->ddrc_phy_num; i++) {
 		pm_info->ddrc_phy_val[i][0] =
 			ddrc_phy_offset_array[i][0];
-		pm_info->ddrc_phy_val[i][1] =
-			ddrc_phy_offset_array[i][1];
+		if (ddrc_phy_offset_array[i][1] == READ_DATA_FROM_HARDWARE)
+			pm_info->ddrc_phy_val[i][1] =
+				readl_relaxed(pm_info->ddrc_phy_base.vbase +
+				ddrc_phy_offset_array[i][0]);
+		else
+			pm_info->ddrc_phy_val[i][1] =
+				ddrc_phy_offset_array[i][1];
 	}
 
 	imx7_suspend_in_ocram_fn = fncpy(
-- 
1.7.5.4

