From 842990a6f4bb86ab9850fdc1f70604a600cb0880 Mon Sep 17 00:00:00 2001
From: Robin Gong <b38343@freescale.com>
Date: Sat, 13 Dec 2014 12:46:31 +0800
Subject: [PATCH 0771/1594] MLK-9986-1 spi: spi-imx: change dma timeout value
 with transfer length

commit 446242711313307d32db514628d2b25bcca7ff0b from
git://git.freescale.com/imx/linux-2.6-imx.git

Change dma timeout value with the transfer length if the length bigger than
1 MB.

Signed-off-by: Robin Gong <b38343@freescale.com>
(cherry picked from commit fb12a91a9ce6cd99d4c08483627ea0c94363ee08)
(cherry picked from commit d0fa9b74641285ef62bad2e8e39ee13467549967)
---
 drivers/spi/spi-imx.c |   19 +++++++++++--------
 1 files changed, 11 insertions(+), 8 deletions(-)

diff --git a/drivers/spi/spi-imx.c b/drivers/spi/spi-imx.c
index bfcc889..dc59060 100644
--- a/drivers/spi/spi-imx.c
+++ b/drivers/spi/spi-imx.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2007, 2014 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2004-2007, 2015 Freescale Semiconductor, Inc. All Rights Reserved.
  * Copyright (C) 2008 Juergen Beisert
  *
  * This program is free software; you can redistribute it and/or
@@ -56,7 +56,10 @@
 
 /* The maximum  bytes that a sdma BD can transfer.*/
 #define MAX_SDMA_BD_BYTES  (1 << 15)
-#define IMX_DMA_TIMEOUT (msecs_to_jiffies(3000))
+/* 3 Sec for 1MB or less than 1MB, else change with the transfer length */
+#define IMX_DEFAULT_DMA_TIMEOUT (msecs_to_jiffies(3000))
+#define IMX_DMA_TIMEOUT(len) ((len < 0x100000) ? IMX_DEFAULT_DMA_TIMEOUT : \
+				len * IMX_DEFAULT_DMA_TIMEOUT / 0x100000)
 struct spi_imx_config {
 	unsigned int speed_hz;
 	unsigned int bpw;
@@ -945,19 +948,19 @@ static int spi_imx_dma_transfer(struct spi_imx_data *spi_imx,
 	dma_async_issue_pending(master->dma_rx);
 	/* Wait SDMA to finish the data transfer.*/
 	timeout = wait_for_completion_timeout(&spi_imx->dma_tx_completion,
-						IMX_DMA_TIMEOUT);
+					  IMX_DMA_TIMEOUT(transfer->len));
 	if (!timeout) {
-		pr_warn("%s %s: I/O Error in DMA TX\n",
+		pr_warn("%s %s: I/O Error in DMA TX:%x\n",
 			dev_driver_string(&master->dev),
-			dev_name(&master->dev));
+			dev_name(&master->dev), transfer->len);
 		dmaengine_terminate_all(master->dma_tx);
 	} else {
 		timeout = wait_for_completion_timeout(
-				&spi_imx->dma_rx_completion, IMX_DMA_TIMEOUT);
+				&spi_imx->dma_rx_completion, IMX_DMA_TIMEOUT(transfer->len));
 		if (!timeout) {
-			pr_warn("%s %s: I/O Error in DMA RX\n",
+			pr_warn("%s %s: I/O Error in DMA RX:%x\n",
 				dev_driver_string(&master->dev),
-				dev_name(&master->dev));
+				dev_name(&master->dev), transfer->len);
 			spi_imx->devtype_data->reset(spi_imx);
 			dmaengine_terminate_all(master->dma_rx);
 		}
-- 
1.7.5.4

