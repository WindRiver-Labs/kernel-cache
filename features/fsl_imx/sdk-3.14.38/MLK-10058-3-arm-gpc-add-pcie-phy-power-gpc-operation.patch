From 1ea63652027e8e4ff622b90336671a73bda260a5 Mon Sep 17 00:00:00 2001
From: Richard Zhu <Richard.Zhu@freescale.com>
Date: Thu, 25 Dec 2014 14:30:38 +0800
Subject: [PATCH 0430/1594] MLK-10058-3 arm: gpc: add pcie phy power gpc
 operations

commit 2a7df81caf4c63044739f974e5ce3766412dccb2 from
git://git.freescale.com/imx/linux-2.6-imx.git

For PCIe module on i.mx6sx, some GPC operations would
be mandatory required when PCIe PHY is powered on/off.
So we need update gpc driver for the new requirements.
We implement it by regulator notify framwork in gpc driver.
NOTE:
make sure gpc driver is ready before PCIe driver is probed.
Otherwise, cause system hang during PCIe driver probe,
because the notify NOT installed ready and the gpc will
NOT power on PCIe.

Signed-off-by: Richard Zhu <Richard.Zhu@freescale.com>
---
 arch/arm/mach-imx/gpc.c |   58 ++++++++++++++++++++++++++++++++++++++++++----
 1 files changed, 53 insertions(+), 5 deletions(-)

diff --git a/arch/arm/mach-imx/gpc.c b/arch/arm/mach-imx/gpc.c
index 35f325b..0a8205f 100644
--- a/arch/arm/mach-imx/gpc.c
+++ b/arch/arm/mach-imx/gpc.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2011-2014 Freescale Semiconductor, Inc.
+ * Copyright 2011-2015 Freescale Semiconductor, Inc.
  * Copyright 2011 Linaro Ltd.
  *
  * The code contained herein is licensed under the GNU General Public
@@ -25,6 +25,10 @@
 #include "hardware.h"
 
 #define GPC_CNTR		0x000
+#define GPC_CNTR_PCIE_PHY_PDU_SHIFT	0x7
+#define GPC_CNTR_PCIE_PHY_PDN_SHIFT	0x6
+#define PGC_PCIE_PHY_CTRL		0x200
+#define PGC_PCIE_PHY_PDN_EN		0x1
 #define GPC_IMR1		0x008
 #define GPC_PGC_MF_PDN		0x220
 #define GPC_PGC_GPU_PDN		0x260
@@ -64,6 +68,7 @@ static u32 gpc_wake_irqs[IMR_NUM];
 static u32 gpc_saved_imrs[IMR_NUM];
 static u32 bypass;
 static DEFINE_SPINLOCK(gpc_lock);
+static struct notifier_block nb_pcie;
 
 void imx_gpc_add_m4_wake_up_irq(u32 irq, bool enable)
 {
@@ -331,6 +336,30 @@ static struct irq_domain_ops imx_gpc_domain_ops = {
 	.free	= irq_domain_free_irqs_common,
 };
 
+static int imx_pcie_regulator_notify(struct notifier_block *nb,
+					unsigned long event,
+					void *ignored)
+{
+	u32 value = readl_relaxed(gpc_base + GPC_CNTR);
+
+	switch (event) {
+	case REGULATOR_EVENT_PRE_ENABLE:
+		value |= 1 << GPC_CNTR_PCIE_PHY_PDU_SHIFT;
+		writel_relaxed(value, gpc_base + GPC_CNTR);
+		break;
+	case REGULATOR_EVENT_PRE_DISABLE:
+		value |= 1 << GPC_CNTR_PCIE_PHY_PDN_SHIFT;
+		writel_relaxed(value, gpc_base + GPC_CNTR);
+		writel_relaxed(PGC_PCIE_PHY_PDN_EN,
+				gpc_base + PGC_PCIE_PHY_CTRL);
+		break;
+	default:
+		break;
+	}
+
+	return NOTIFY_OK;
+}
+
 static int __init imx_gpc_init(struct device_node *node,
 			       struct device_node *parent)
 {
@@ -366,13 +395,13 @@ static int __init imx_gpc_init(struct device_node *node,
 
 	/* Read supported wakeup source in M/F domain */
 	if (cpu_is_imx6sx()) {
-		of_property_read_u32_index(np, "fsl,mf-mix-wakeup-irq", 0,
+		of_property_read_u32_index(node, "fsl,mf-mix-wakeup-irq", 0,
 			&gpc_mf_irqs[0]);
-		of_property_read_u32_index(np, "fsl,mf-mix-wakeup-irq", 1,
+		of_property_read_u32_index(node, "fsl,mf-mix-wakeup-irq", 1,
 			&gpc_mf_irqs[1]);
-		of_property_read_u32_index(np, "fsl,mf-mix-wakeup-irq", 2,
+		of_property_read_u32_index(node, "fsl,mf-mix-wakeup-irq", 2,
 			&gpc_mf_irqs[2]);
-		of_property_read_u32_index(np, "fsl,mf-mix-wakeup-irq", 3,
+		of_property_read_u32_index(node, "fsl,mf-mix-wakeup-irq", 3,
 			&gpc_mf_irqs[3]);
 		if (!(gpc_mf_irqs[0] | gpc_mf_irqs[1] |
 			gpc_mf_irqs[2] | gpc_mf_irqs[3]))
@@ -569,6 +598,25 @@ static int imx_gpc_probe(struct platform_device *pdev)
 		pu_reg = NULL;
 	}
 
+	if (cpu_is_imx6sx()) {
+		struct regulator *pcie_reg;
+
+		pcie_reg = devm_regulator_get(&pdev->dev, "pcie-phy");
+		if (IS_ERR(pcie_reg)) {
+			ret = PTR_ERR(pcie_reg);
+			dev_info(&pdev->dev, "pcie regulator not ready.\n");
+			return ret;
+		}
+		nb_pcie.notifier_call = &imx_pcie_regulator_notify;
+
+		ret = regulator_register_notifier(pcie_reg, &nb_pcie);
+		if (ret) {
+			dev_err(&pdev->dev,
+				"pcie regulator notifier request failed\n");
+			return ret;
+		}
+	}
+
 	return imx_gpc_genpd_init(&pdev->dev, pu_reg);
 }
 
-- 
1.7.5.4

