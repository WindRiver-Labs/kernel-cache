From cdee52a56ed81cf1408da6da5b023333741a0aed Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Wed, 18 Jun 2014 13:04:23 +0800
Subject: [PATCH 0065/1594] ENGR00318913-3 thermal: imx: enable thermal
 support for i.mx6sx

commit 00f93c801838891e6777a3e7a7e6420caf953f23 from
git://git.freescale.com/imx/linux-2.6-imx.git

i.MX6SX has some new feature of thermal interrupt function,
there is LOW, HIGH and PANIC irq for thermal sensor, so add
platform data to separate different thermal version;

The reset value of LOW ALARM is 0 which means the highest
temp, so the LOW ALARM will be triggered once irq is enabled,
so we need to set them to correct setting before enabling
thermal irq;

Enable PANIC ALARM as critical trip point, it will trigger
system reset via SRC module once PANIC IRQ is triggered.

Signed-off-by: Anson Huang <b20788@freescale.com>
---
 drivers/thermal/imx_thermal.c |   31 +++++++++++++++++++++++++++----
 1 files changed, 27 insertions(+), 4 deletions(-)

diff --git a/drivers/thermal/imx_thermal.c b/drivers/thermal/imx_thermal.c
index e646dc2..8e05a2d 100644
--- a/drivers/thermal/imx_thermal.c
+++ b/drivers/thermal/imx_thermal.c
@@ -69,6 +69,7 @@ enum imx_thermal_trip {
  * that will trigger cooling action when crossed.
  */
 #define IMX_TEMP_PASSIVE		85000
+#define IMX_TEMP_PASSIVE_COOL_DELTA     10000
 
 #define IMX_POLLING_DELAY		2000 /* millisecond */
 #define IMX_PASSIVE_DELAY		1000
@@ -289,13 +290,34 @@ static int imx_set_trip_temp(struct thermal_zone_device *tz, int trip,
 	if (temp > IMX_TEMP_PASSIVE)
 		return -EINVAL;
 
-	if (trip == IMX_TRIP_CRITICAL)
+	if (trip == IMX_TRIP_CRITICAL) {
 		data->temp_critical = temp;
-	if (trip == IMX_TRIP_PASSIVE)
-		data->temp_passive = temp;
+		if (data->socdata->version == TEMPMON_IMX6SX)
+			imx_set_panic_temp(data, temp);
+	}
 
-	if (trip == IMX_TRIP_PASSIVE)
+	if (trip == IMX_TRIP_PASSIVE) {
+		data->temp_passive = temp;
 		imx_set_alarm_temp(data, temp);
+	}
+
+	return 0;
+}
+
+static int imx_get_trend(struct thermal_zone_device *tz,
+	int trip, enum thermal_trend *trend)
+{
+	int ret;
+	unsigned long trip_temp;
+
+	ret = imx_get_trip_temp(tz, trip, &trip_temp);
+	if (ret < 0)
+		return ret;
+
+	if (tz->temperature >= (trip_temp - IMX_TEMP_PASSIVE_COOL_DELTA))
+		*trend = THERMAL_TREND_RAISE_FULL;
+	else
+		*trend = THERMAL_TREND_DROP_FULL;
 
 	return 0;
 }
@@ -344,6 +366,7 @@ static struct thermal_zone_device_ops imx_tz_ops = {
 	.get_trip_temp = imx_get_trip_temp,
 	.get_crit_temp = imx_get_crit_temp,
 	.set_trip_temp = imx_set_trip_temp,
+	.get_trend = imx_get_trend,
 };
 
 static int imx_get_sensor_data(struct platform_device *pdev)
-- 
1.7.5.4

