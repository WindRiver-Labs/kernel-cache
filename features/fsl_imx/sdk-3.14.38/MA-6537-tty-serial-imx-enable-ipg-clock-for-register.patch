From ee24d6354223e8cc9e99836f8bae1137babd6e56 Mon Sep 17 00:00:00 2001
From: Fugang Duan <b38611@freescale.com>
Date: Fri, 17 Apr 2015 09:40:17 +0800
Subject: [PATCH 0137/1594] MA-6537 tty: serial: imx: enable ipg clock for
 register save/restore in megafix power off

commit b72847043d629fe2bc152201485f4da6bb16fc89 from
git://git.freescale.com/imx/linux-2.6-imx.git

In megafix power off, the driver save necessary registers in suspend, and resotre the
registers in resume, but access registers need ipg clock gate on, so the patch make sure
ipg clock gate is on before save/restore the uart registers.

Signed-off-by: Fugang Duan <B38611@freescale.com>
---
 drivers/tty/serial/imx.c |    4 ++++
 1 files changed, 4 insertions(+), 0 deletions(-)

diff --git a/drivers/tty/serial/imx.c b/drivers/tty/serial/imx.c
index 56009f9..a711030 100644
--- a/drivers/tty/serial/imx.c
+++ b/drivers/tty/serial/imx.c
@@ -1916,6 +1916,7 @@ static int serial_imx_suspend(struct platform_device *dev, pm_message_t state)
 	uart_suspend_port(&imx_reg, &sport->port);
 
 	/* Save necessary regs */
+	clk_prepare_enable(sport->clk_ipg);
 	sport->saved_reg[0] = readl(sport->port.membase + UCR1);
 	sport->saved_reg[1] = readl(sport->port.membase + UCR2);
 	sport->saved_reg[2] = readl(sport->port.membase + UCR3);
@@ -1926,6 +1927,7 @@ static int serial_imx_suspend(struct platform_device *dev, pm_message_t state)
 	sport->saved_reg[7] = readl(sport->port.membase + UBIR);
 	sport->saved_reg[8] = readl(sport->port.membase + UBMR);
 	sport->saved_reg[9] = readl(sport->port.membase + IMX21_UTS);
+	clk_disable_unprepare(sport->clk_ipg);
 
 	return 0;
 }
@@ -1935,6 +1937,7 @@ static int serial_imx_resume(struct platform_device *dev)
 	struct imx_port *sport = platform_get_drvdata(dev);
 	unsigned int val;
 
+	clk_prepare_enable(sport->clk_ipg);
 	writel(sport->saved_reg[4], sport->port.membase + UFCR);
 	writel(sport->saved_reg[5], sport->port.membase + UESC);
 	writel(sport->saved_reg[6], sport->port.membase + UTIM);
@@ -1953,6 +1956,7 @@ static int serial_imx_resume(struct platform_device *dev)
 	val = readl(sport->port.membase + USR1);
 	if (val & USR1_AWAKE)
 		writel(USR1_AWAKE, sport->port.membase + USR1);
+	clk_disable_unprepare(sport->clk_ipg);
 
 	uart_resume_port(&imx_reg, &sport->port);
 
-- 
1.7.5.4

