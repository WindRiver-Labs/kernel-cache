From 44e6726bd52be5bf578c7ea01951c0912a2499ac Mon Sep 17 00:00:00 2001
From: Bai Ping <b51503@freescale.com>
Date: Wed, 13 May 2015 01:29:37 +0800
Subject: [PATCH 1079/1594] MLK-10879-03 cpufreq: imx: add cpufreq support for
 i.mx6ul.

commit f6528f7922c2ba1cacabf93eecb9301fb20d459e from
git://git.freescale.com/imx/linux-2.6-imx.git

Add cpufreq driver for i.MX6UL for DVFS. According to the design team, the ARM core can run
at setpoints 528MHz, 396MHz and 198MHz. This SOC adds a secondary_clk_sel(pll2/pll2_pfd2)
as the clock source of step_clk. In normal situation, just use the step_clk as the ARM
clk source, the pll1_sys is only used when change the cpu frequency.

Signed-off-by: Bai Ping <b51503@freescale.com>
---
 arch/arm/mach-imx/mach-imx6ul.c |    1 +
 drivers/cpufreq/imx6q-cpufreq.c |   59 ++++++++++++++++++++++++++++----------
 2 files changed, 44 insertions(+), 16 deletions(-)

diff --git a/arch/arm/mach-imx/mach-imx6ul.c b/arch/arm/mach-imx/mach-imx6ul.c
index fc757fd..4d8a0d6 100644
--- a/arch/arm/mach-imx/mach-imx6ul.c
+++ b/arch/arm/mach-imx/mach-imx6ul.c
@@ -96,6 +96,7 @@ static const char *imx6ul_dt_compat[] __initdata = {
 
 static void __init imx6ul_init_late(void)
 {
+	platform_device_register_simple("imx6q-cpufreq", -1, NULL, 0);
 }
 
 static void __init imx6ul_map_io(void)
diff --git a/drivers/cpufreq/imx6q-cpufreq.c b/drivers/cpufreq/imx6q-cpufreq.c
index b63fef5..5200f86 100644
--- a/drivers/cpufreq/imx6q-cpufreq.c
+++ b/drivers/cpufreq/imx6q-cpufreq.c
@@ -35,6 +35,9 @@ static struct clk *pll2_pfd2_396m_clk;
 static struct clk *pll1_bypass;
 static struct clk *pll1_bypass_src;
 static struct clk *pll1;
+static struct clk *secondary_sel;
+static struct clk *pll2_bus;
+static struct clk *osc;
 
 static struct device *cpu_dev;
 static bool free_opp;
@@ -107,29 +110,48 @@ static int imx6q_set_target(struct cpufreq_policy *policy, unsigned int index)
 
 	/*
 	 * The setpoints are selected per PLL/PDF frequencies, so we need to
-	 * reprogram PLL for frequency scaling.  The procedure of reprogramming
+	 * reprogram PLL for frequency scaling. The procedure of reprogramming
 	 * PLL1 is as below.
+	 * For i.MX6UL, it has a secondary clk mux, the cpu frequency change
+	 * flow is slightly different from other I.MX6 SOC.
 	 *
+	 * The cpu frequency change flow for i.MX6(except i.MX6UL) is as below:
 	 *  - Enable pll2_pfd2_396m_clk and reparent pll1_sw_clk to it
 	 *  - Reprogram pll1_sys_clk and reparent pll1_sw_clk back to it
 	 *  - Disable pll2_pfd2_396m_clk
 	 */
-	clk_set_parent(step_clk, pll2_pfd2_396m_clk);
-	clk_set_parent(pll1_sw_clk, step_clk);
-	if (freq_hz > clk_get_rate(pll2_pfd2_396m_clk)) {
-		clk_set_rate(pll1, new_freq * 1000);
-		/*
-		  * Ensure pll1_bypass is set back to pll1.
-		  */
-		clk_set_parent(pll1_bypass, pll1);
+	if (!IS_ERR(secondary_sel)) {
+
+		/* When changing pll1_sw source to pll1_sys, cpu may run at higher
+		 * than 528MHz, this will lead to the system unstable if the voltage
+		 * is lower than the voltage of 528MHz. So lower the cpu frequency to
+		 * one half before changing cpu frequency.
+		 */
+		clk_set_rate(arm_clk, (old_freq >> 1) * 1000);
 		clk_set_parent(pll1_sw_clk, pll1_sys_clk);
-	} else
-		/*
-		  * Need to ensure that PLL1 is bypassed and enabled
-		  * before ARM-PODF is set.
-		  */
-		clk_set_parent(pll1_bypass, pll1_bypass_src);
-
+		clk_set_parent(step_clk, osc);
+		if (freq_hz > clk_get_rate(pll2_pfd2_396m_clk))
+			clk_set_parent(secondary_sel, pll2_bus);
+		else
+			ret = clk_set_parent(secondary_sel, pll2_pfd2_396m_clk);
+		clk_set_parent(step_clk, secondary_sel);
+		clk_set_parent(pll1_sw_clk, step_clk);
+	} else {
+		clk_set_parent(step_clk, pll2_pfd2_396m_clk);
+		clk_set_parent(pll1_sw_clk, step_clk);
+		if (freq_hz > clk_get_rate(pll2_pfd2_396m_clk)) {
+			clk_set_rate(pll1, new_freq * 1000);
+
+			/* Ensure pll1_bypass is set back to pll1. */
+			clk_set_parent(pll1_bypass, pll1);
+			clk_set_parent(pll1_sw_clk, pll1_sys_clk);
+		} else
+			/*
+			 * Need to ensure that PLL1 is bypassed and enabled
+			 * before ARM-PODF is set.
+			 */
+			clk_set_parent(pll1_bypass, pll1_bypass_src);
+	}
 
 	/* Ensure the arm clock divider is what we expect */
 	ret = clk_set_rate(arm_clk, new_freq * 1000);
@@ -273,6 +295,11 @@ static int imx6q_cpufreq_probe(struct platform_device *pdev)
 		goto put_clk;
 	}
 
+	/* below clks are just for i.MX6UL */
+	pll2_bus = devm_clk_get(cpu_dev, "pll2_bus");
+	secondary_sel = devm_clk_get(cpu_dev, "secondary_sel");
+	osc = devm_clk_get(cpu_dev, "osc");
+
 	arm_reg = devm_regulator_get_optional(cpu_dev, "arm");
 	pu_reg = devm_regulator_get_optional(cpu_dev, "pu");
 	soc_reg = devm_regulator_get_optional(cpu_dev, "soc");
-- 
1.7.5.4

