From d55113c76e5d7ca7a9c1d0defd41177f183d764c Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Thu, 11 Feb 2016 15:02:54 +0800
Subject: [PATCH 1580/1594] ARM: mach: gpc: get a dummy regulator when there
 is no pu-supply property in gpc node.

Original conde call devm_regulator_get_optional() function to get
a regulator, but when there is no pu-supply property in gpc node,
it will return NULL, and probe will return.
Therefore, modify code with below method:
firstly, get regulator with function devm_regulator_get(), because
this function allow to get a dummy regulator when can't get the
specific regulator.
Secondly, adjust process logic when get a wrong regulator.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-imx/gpc.c |   13 +++++++++----
 1 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/arch/arm/mach-imx/gpc.c b/arch/arm/mach-imx/gpc.c
index 7ec63f9..022a30a 100644
--- a/arch/arm/mach-imx/gpc.c
+++ b/arch/arm/mach-imx/gpc.c
@@ -813,9 +813,7 @@ static int imx_gpc_probe(struct platform_device *pdev)
 		return 0;
 
 	of_property_read_u32(pdev->dev.of_node, "fsl,ldo-bypass", &bypass);
-	pu_reg = devm_regulator_get_optional(&pdev->dev, "pu");
-	if (PTR_ERR(pu_reg) == -ENODEV)
-		pu_reg = NULL;
+	pu_reg = devm_regulator_get(&pdev->dev, "pu");
 	if (!IS_ERR(pu_reg)) {
 		/* The regulator is initially enabled */
 		ret = regulator_enable(pu_reg);
@@ -827,7 +825,14 @@ static int imx_gpc_probe(struct platform_device *pdev)
 		if (bypass)
 			regulator_allow_bypass(pu_reg, true);
 	} else {
-		pu_reg = NULL;
+		if (PTR_ERR(pu_reg) == -ENODEV) {
+			pu_reg = NULL;
+		} else {
+			ret = PTR_ERR(pu_reg);
+			dev_err(&pdev->dev,
+				"failed to get pu regulator: %d\n", ret);
+			return ret;
+		}
 	}
 
 	if (cpu_is_imx6sx()) {
-- 
1.7.5.4

