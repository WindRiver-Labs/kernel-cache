From 5db3a25f3d13954065558086cdf419f6d75b25fd Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Thu, 5 Mar 2015 14:23:07 +0800
Subject: [PATCH 0448/1594] MLK-10415-2 ARM: imx: support no_console_suspend
 with Mega/Fast mix off in DSM of imx7d

commit 873f3a43a88314f8bcdf97cfce1a0c844eda5e43 from
git://git.freescale.com/imx/linux-2.6-imx.git

With M/F mix off in DSM, during the window of SOC resume and UART driver
resume, the UART1 hardware is NOT working. So, add uart1 registers
save/restore during suspend/resume when no_console_suspend is enabled.

Signed-off-by: Anson Huang <b20788@freescale.com>
---
 arch/arm/mach-imx/pm-imx7.c |   55 +++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 55 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-imx/pm-imx7.c b/arch/arm/mach-imx/pm-imx7.c
index 5c5e0ee..b350915 100644
--- a/arch/arm/mach-imx/pm-imx7.c
+++ b/arch/arm/mach-imx/pm-imx7.c
@@ -44,6 +44,18 @@
 
 #define MX7_SUSPEND_IRAM_ADDR_OFFSET	0
 
+#define UART_UCR1	0x80
+#define UART_UCR2	0x84
+#define UART_UCR3	0x88
+#define UART_UCR4	0x8c
+#define UART_UFCR	0x90
+#define UART_UESC	0x9c
+#define UART_UTIM	0xa0
+#define UART_UBIR	0xa4
+#define UART_UBMR	0xa8
+#define UART_UBRC	0xac
+#define UART_UTS	0xb4
+
 unsigned long imx7_iram_tlb_base_addr;
 unsigned long imx7_iram_tlb_phys_addr;
 
@@ -51,6 +63,7 @@ static unsigned int *ocram_saved_in_ddr;
 static void __iomem *ocram_base;
 static unsigned int ocram_size;
 static void __iomem *ccm_base;
+static void __iomem *console_base;
 static void __iomem *suspend_ocram_base;
 static void (*imx7_suspend_in_ocram_fn)(void __iomem *ocram_vbase);
 /*
@@ -138,6 +151,40 @@ static const char * const low_power_ocram_match[] __initconst = {
 	NULL
 };
 
+static void imx7_console_save(unsigned int *regs)
+{
+	if (!console_base)
+		return;
+
+	regs[0] = readl_relaxed(console_base + UART_UCR1);
+	regs[1] = readl_relaxed(console_base + UART_UCR2);
+	regs[2] = readl_relaxed(console_base + UART_UCR3);
+	regs[3] = readl_relaxed(console_base + UART_UCR4);
+	regs[4] = readl_relaxed(console_base + UART_UFCR);
+	regs[5] = readl_relaxed(console_base + UART_UESC);
+	regs[6] = readl_relaxed(console_base + UART_UTIM);
+	regs[7] = readl_relaxed(console_base + UART_UBIR);
+	regs[8] = readl_relaxed(console_base + UART_UBMR);
+	regs[9] = readl_relaxed(console_base + UART_UTS);
+}
+
+static void imx7_console_restore(unsigned int *regs)
+{
+	if (!console_base)
+		return;
+
+	writel_relaxed(regs[4], console_base + UART_UFCR);
+	writel_relaxed(regs[5], console_base + UART_UESC);
+	writel_relaxed(regs[6], console_base + UART_UTIM);
+	writel_relaxed(regs[7], console_base + UART_UBIR);
+	writel_relaxed(regs[8], console_base + UART_UBMR);
+	writel_relaxed(regs[9], console_base + UART_UTS);
+	writel_relaxed(regs[0], console_base + UART_UCR1);
+	writel_relaxed(regs[1] | 0x1, console_base + UART_UCR2);
+	writel_relaxed(regs[2], console_base + UART_UCR3);
+	writel_relaxed(regs[3], console_base + UART_UCR4);
+}
+
 static int imx7_suspend_finish(unsigned long val)
 {
 	if (!imx7_suspend_in_ocram_fn) {
@@ -156,6 +203,7 @@ static int imx7_suspend_finish(unsigned long val)
 
 static int imx7_pm_enter(suspend_state_t state)
 {
+	unsigned int console_saved_reg[10] = {0};
 
 	if (!imx7_iram_tlb_base_addr) {
 		pr_warn("No IRAM/OCRAM memory allocated for suspend/resume \
@@ -174,12 +222,14 @@ static int imx7_pm_enter(suspend_state_t state)
 	case PM_SUSPEND_MEM:
 		imx_anatop_pre_suspend();
 		imx_gpcv2_pre_suspend(true);
+		imx7_console_save(console_saved_reg);
 		memcpy(ocram_saved_in_ddr, ocram_base, ocram_size);
 
 		/* Zzz ... */
 		cpu_suspend(0, imx7_suspend_finish);
 
 		memcpy(ocram_base, ocram_saved_in_ddr, ocram_size);
+		imx7_console_restore(console_saved_reg);
 		imx_anatop_post_resume();
 		imx_gpcv2_post_resume();
 		break;
@@ -429,4 +479,9 @@ void __init imx7d_pm_init(void)
 	ocram_size = resource_size(&res);
 	ocram_saved_in_ddr = kzalloc(ocram_size, GFP_KERNEL);
 	WARN_ON(!ocram_saved_in_ddr);
+
+	np = of_find_node_by_path(
+		"/soc/aips-bus@30800000/serial@30860000");
+	if (np)
+		console_base = of_iomap(np, 0);
 }
-- 
1.7.5.4

