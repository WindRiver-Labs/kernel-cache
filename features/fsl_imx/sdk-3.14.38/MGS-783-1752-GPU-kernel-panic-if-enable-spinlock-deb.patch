From 8c29a520137d730113653fab5b9ecf67917d0742 Mon Sep 17 00:00:00 2001
From: Meng Mingming <b51843@freescale.com>
Date: Wed, 24 Jun 2015 14:08:38 +0800
Subject: [PATCH 3/9] MGS-783 [#1752] GPU kernel panic if enable spinlock
 debug config.

commit 404f2af541358ef69e4c009186d322fee0d3b84f from
git://git.freescale.com/imx/linux-2.6-imx.git

After enable spin lock debug in 3.14 kernel by CONFIG_DEBUG_SPINLOCK=y,
it will meet kernel panic related with gpu driver.

kernel panic:
[<c006a9ec>] (do_raw_spin_lock) from [<bf0020b4>] (_QueryProcessPageTable+0x8c/0xec [galcore])
[<bf0020b4>] (_QueryProcessPageTable [galcore]) from [<bf00307c>] (gckOS_GetPhysicalAddress+0x28/0xa8 [galcore])
[<bf00307c>] (gckOS_GetPhysicalAddress [galcore]) from [<bf01b60c>] (gckHARDWARE_ConvertLogical+0x34/0xac [galcore])
[<bf01b60c>] (gckHARDWARE_ConvertLogical [galcore]) from [<bf00d628>] (gckCOMMAND_Construct+0x260/0x330 [galcore])
[<bf00d628>] (gckCOMMAND_Construct [galcore]) from [<bf00b1e4>] (gckKERNEL_Construct+0xf8/0x4d4 [galcore])
[<bf00b1e4>] (gckKERNEL_Construct [galcore]) from [<bf000e40>] (gckGALDEVICE_Construct+0x1a8/0xa14 [galcore])
[<bf000e40>] (gckGALDEVICE_Construct [galcore]) from [<bf0092b8>] (gpu_probe+0x248/0x3a8 [galcore])
[<bf0092b8>] (gpu_probe [galcore]) from [<c03f5a5c>] (platform_drv_probe+0x48/0x98)
[<c03f5a5c>] (platform_drv_probe) from [<c03f4670>] (driver_probe_device+0x90/0x24c)
[<c03f4670>] (driver_probe_device) from [<c03f48b8>] (__driver_attach+0x8c/0x90)
[<c03f48b8>] (__driver_attach) from [<c03f2f8c>] (bus_for_each_dev+0x60/0x94)
[<c03f2f8c>] (bus_for_each_dev) from [<c03f3e6c>] (bus_add_driver+0xd8/0x1d0)
[<c03f3e6c>] (bus_add_driver) from [<c03f4ed4>] (driver_register+0x78/0xf4)
[<c03f4ed4>] (driver_register) from [<bf0370f0>] (gpu_init+0xf0/0x134 [galcore])
[<bf0370f0>] (gpu_init [galcore]) from [<c0008928>] (do_one_initcall+0xe4/0x140)
[<c0008928>] (do_one_initcall) from [<c008f290>] (load_module+0x17f4/0x1b8c)
[<c008f290>] (load_module) from [<c008f6e8>] (SyS_init_module+0xc0/0xfc)
[<c008f6e8>] (SyS_init_module) from [<c000e5e0>] (ret_fast_syscall+0x0/0x30)

And we find in pte_offset_map_lock(mm, pmd, address, ptlp) it calls
pte_lockptr(mm, pmd) to get a spinlock_t, but it fails and get an empty lock.

The root cause is page->ptl of PMD may be not allocated dynamically
when size of a spinlock is larger than long on some arch. So when
enable DEBUG_SPINLOCK debug, this lock may be empty.

See pmd_alloc_one() for each arch.

Date: Jun 24, 2015
Signed-off-by: Meng Mingming <b51843@freescale.com>
---
 .../gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c
index af7f4bb..7616b8a 100644
--- a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c
+++ b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c
@@ -354,7 +354,9 @@ _QueryProcessPageTable(
     OUT gctPHYS_ADDR_T * Address
     )
 {
+#ifndef CONFIG_DEBUG_SPINLOCK
     spinlock_t *lock;
+#endif
     gctUINTPTR_T logical = (gctUINTPTR_T)Logical;
     pgd_t *pgd;
     pud_t *pud;
@@ -384,7 +386,14 @@ _QueryProcessPageTable(
         return gcvSTATUS_NOT_FOUND;
     }
 
+#ifndef CONFIG_DEBUG_SPINLOCK
     pte = pte_offset_map_lock(current->mm, pmd, logical, &lock);
+#else
+    spin_lock(&current->mm->page_table_lock);
+
+    pte = pte_offset_map(pmd, logical);
+#endif
+
     if (!pte)
     {
         return gcvSTATUS_NOT_FOUND;
@@ -392,12 +401,20 @@ _QueryProcessPageTable(
 
     if (!pte_present(*pte))
     {
+#ifndef CONFIG_DEBUG_SPINLOCK
         pte_unmap_unlock(pte, lock);
+#else
+        spin_unlock(&current->mm->page_table_lock);
+#endif
         return gcvSTATUS_NOT_FOUND;
     }
 
     *Address = (pte_pfn(*pte) << PAGE_SHIFT) | (logical & ~PAGE_MASK);
+#ifndef CONFIG_DEBUG_SPINLOCK
     pte_unmap_unlock(pte, lock);
+#else
+    spin_unlock(&current->mm->page_table_lock);
+#endif
 
     return gcvSTATUS_OK;
 }
-- 
1.7.5.4

