From 851bb140492eca9a262794645c2e88fed4ecfd35 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Thu, 4 Dec 2014 12:24:49 +0800
Subject: [PATCH 0316/1594] MLK-9955-10 arm: imx: add A9-M4 power management

commit 23abf791bb60e1e27d892ccf2790de4b9c4f20e8 from
git://git.freescale.com/imx/linux-2.6-imx.git

this patch adds A9-M4 power management, including
below features:

1. busfreq: M4 is registered as a high speed device
   of A9, when M4 is running at high speed, busfreq
   will NOT enter low bus mode, when M4 is entering
   its low power idle, A9 will be able to enter low
   bus mode according to its state machine;
2. low power idle: only when M4 is in its low power
   idle, busfreq is staying at low bus mode, low
   power idle is available for kernel;
3. suspend: when M4 is NOT in its low power idle,
   when linux is about to suspend, it will only
   force SOC enter WAIT mode, only when M4 is in
   its low power idle in TCM, linux suspend can
   enter DSM mode. M4 can request/release wakeup
   source via MU to A9.

as M4 can NOT switch its clk parent due to glitch MUX,
to handle this case, A9 will help switch M4's clk
parent, the flow is as below:

M4:
1. enter low power idle, send bus use count-- to A9;
2. enter wfi and only wait for MU interrupt;
3. receive A9's clk switch ready message, go into low
   power idle;
4. receive interrupt to exit low power idle, send request
   to A9 for increase busfreq and M4 freq, enter wfi
   and only wait for MU interrupt;
5. receive A9 ready message, go out of low power idle.

A9:
1. when receive M4's message of entering low power idle,
   wait M4 into wfi, hold M4 in wfi by hardware, gate
   M4 clk, then switch M4's clk to OSC, ungate M4 clk,
   send ready command to wake up M4 into low power idle;
2. when receive M4's message of exiting low power idle,
   wait M4 into wfi, hold M4 in wfi by hardware, gate
   M4 clk, then switch M4's clk to origin high clk,
   ungate M4 clk, send ready command to wake up M4
   to exit low power idle;

Signed-off-by: Anson Huang <b20788@freescale.com>
---
 arch/arm/mach-imx/busfreq-imx6.c          |   18 +++++++++
 arch/arm/mach-imx/common.h                |    1 +
 arch/arm/mach-imx/cpuidle-imx6sx.c        |    5 +++
 arch/arm/mach-imx/imx6sx_low_power_idle.S |   40 ++++++++++++++++++++--
 arch/arm/mach-imx/mx6.h                   |    4 ++
 arch/arm/mach-imx/pm-imx6.c               |   54 +++++++++++++++++++++++++++++
 6 files changed, 119 insertions(+), 3 deletions(-)

diff --git a/arch/arm/mach-imx/busfreq-imx6.c b/arch/arm/mach-imx/busfreq-imx6.c
index 0ac354c..49c2c71 100644
--- a/arch/arm/mach-imx/busfreq-imx6.c
+++ b/arch/arm/mach-imx/busfreq-imx6.c
@@ -122,8 +122,22 @@ static u32 pll2_org_rate;
 static struct delayed_work low_bus_freq_handler;
 static struct delayed_work bus_freq_daemon;
 
+static bool check_m4_sleep(void)
+{
+	unsigned long timeout = jiffies + msecs_to_jiffies(500);
+
+	while (imx_gpc_is_m4_sleeping() == 0)
+		if (time_after(jiffies, timeout))
+			return false;
+	return  true;
+}
+
 static void enter_lpm_imx6sx(void)
 {
+	if (imx_src_is_m4_enabled())
+		if (!check_m4_sleep())
+			pr_err("M4 is NOT in sleep!!!\n");
+
 	/* set periph_clk2 to source from OSC for periph */
 	imx_clk_set_parent(periph_clk2_sel, osc_clk);
 	imx_clk_set_parent(periph_clk, periph_clk2);
@@ -1076,6 +1090,10 @@ static int busfreq_probe(struct platform_device *pdev)
 			err = init_mmdc_ddr3_settings_imx6sx(pdev);
 		else if (ddr_type == MMDC_MDMISC_DDR_TYPE_LPDDR2)
 			err = init_mmdc_lpddr2_settings(pdev);
+		/* if M4 is enabled and rate > 24MHz, add high bus count */
+		if (imx_src_is_m4_enabled() &&
+			(clk_get_rate(m4_clk) > LPAPM_CLK))
+			high_bus_count++;
 	} else {
 		err = init_mmdc_ddr3_settings_imx6q(pdev);
 	}
diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 2efd95d..38b4a1e 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -77,6 +77,7 @@ bool imx_src_is_m4_enabled(void);
 void mcc_receive_from_mu_buffer(unsigned int index, unsigned int *data);
 void mcc_send_via_mu_buffer(unsigned int index, unsigned int data);
 unsigned int imx_gpc_is_m4_sleeping(void);
+bool imx_mu_is_m4_in_low_freq(void);
 void imx6_enable_rbc(bool enable);
 void imx_gpc_check_dt(void);
 void imx_gpc_set_arm_power_in_lpm(bool power_off);
diff --git a/arch/arm/mach-imx/cpuidle-imx6sx.c b/arch/arm/mach-imx/cpuidle-imx6sx.c
index dbf3476..2ea4c52 100644
--- a/arch/arm/mach-imx/cpuidle-imx6sx.c
+++ b/arch/arm/mach-imx/cpuidle-imx6sx.c
@@ -77,6 +77,7 @@ struct imx6_cpuidle_pm_info {
 	struct imx6_pm_base l2_base;
 	struct imx6_pm_base anatop_base;
 	struct imx6_pm_base src_base;
+	struct imx6_pm_base sema4_base;
 	u32 saved_diagnostic; /* To save disagnostic register */
 	u32 mmdc_io_num; /* Number of MMDC IOs which need saved/restored. */
 	u32 mmdc_io_val[MX6_MAX_MMDC_IO_NUM][2]; /* To save offset and value */
@@ -195,6 +196,10 @@ int __init imx6sx_cpuidle_init(void)
 	cpuidle_pm_info->src_base.pbase = MX6Q_SRC_BASE_ADDR;
 	cpuidle_pm_info->src_base.vbase = (void __iomem *)IMX_IO_P2V(MX6Q_SRC_BASE_ADDR);
 
+	cpuidle_pm_info->sema4_base.pbase = MX6Q_SEMA4_BASE_ADDR;
+	cpuidle_pm_info->sema4_base.vbase =
+		(void __iomem *)IMX_IO_P2V(MX6Q_SEMA4_BASE_ADDR);
+
 	/* only save mmdc io offset, settings will be saved in asm code */
 	for (i = 0; i < cpuidle_pm_info->mmdc_io_num; i++)
 		cpuidle_pm_info->mmdc_io_val[i][0] = mmdc_offset_array[i];
diff --git a/arch/arm/mach-imx/imx6sx_low_power_idle.S b/arch/arm/mach-imx/imx6sx_low_power_idle.S
index a53f920..dd0a220 100644
--- a/arch/arm/mach-imx/imx6sx_low_power_idle.S
+++ b/arch/arm/mach-imx/imx6sx_low_power_idle.S
@@ -32,9 +32,11 @@
 #define PM_INFO_MX6Q_ANATOP_V_OFFSET		0x3c
 #define PM_INFO_MX6Q_SRC_P_OFFSET		0x40
 #define PM_INFO_MX6Q_SRC_V_OFFSET		0x44
-#define PM_INFO_MX6Q_SAVED_DIAGNOSTIC_OFFSET	0x48
-#define PM_INFO_MMDC_IO_NUM_OFFSET		0x4c
-#define PM_INFO_MMDC_IO_VAL_OFFSET		0x50
+#define PM_INFO_MX6Q_SEMA4_P_OFFSET		0x48
+#define PM_INFO_MX6Q_SEMA4_V_OFFSET		0x4c
+#define PM_INFO_MX6Q_SAVED_DIAGNOSTIC_OFFSET	0x50
+#define PM_INFO_MMDC_IO_NUM_OFFSET		0x54
+#define PM_INFO_MMDC_IO_VAL_OFFSET		0x58
 
 #define	MX6Q_MMDC_MAPSR		0x404
 #define MX6Q_MMDC_MPDGCTRL0	0x83c
@@ -537,6 +539,32 @@
 
 	.endm
 
+	.macro  sema4_lock
+
+	/* lock share memory sema4 */
+	cmp	r5, #0x0
+	ldreq	r10, [r0, #PM_INFO_MX6Q_SEMA4_V_OFFSET]
+	ldrne	r10, [r0, #PM_INFO_MX6Q_SEMA4_P_OFFSET]
+	ldrb	r6, =0x1
+16:
+	ldrb	r7, [r10, #0x6]
+	cmp	r7, #0x0
+	bne	16b
+	strb	r6, [r10, #0x6]
+
+	.endm
+
+	.macro  sema4_unlock
+
+	/* unlock share memory sema4 */
+	cmp	r5, #0x0
+	ldreq	r10, [r0, #PM_INFO_MX6Q_SEMA4_V_OFFSET]
+	ldrne	r10, [r0, #PM_INFO_MX6Q_SEMA4_P_OFFSET]
+	ldrb	r6, =0x0
+	strb	r6, [r10, #0x6]
+
+	.endm
+
 	.macro	tlb_set_to_ocram
 
 	/* save ttbr */
@@ -704,8 +732,10 @@ save_and_set_mmdc_io_lpm:
 	bne	save_and_set_mmdc_io_lpm
 
 	mov	r5, #0x0
+	sema4_lock
 	ccm_enter_idle
 	anatop_enter_idle
+	sema4_unlock
 
 	/*
 	 * mask all GPC interrupts before
@@ -799,8 +829,10 @@ rbc_loop:
 	nop
 
 	mov	r5, #0x0
+	sema4_lock
 	anatop_exit_idle
 	ccm_exit_idle
+	sema4_unlock
 	resume_mmdc
 
 	/* clear ARM power gate setting */
@@ -855,8 +887,10 @@ wakeup:
 	str	r7, [r10, #0x2a0]
 
 	mov	r5, #0x1
+	sema4_lock
 	anatop_exit_idle
 	ccm_exit_idle
+	sema4_unlock
 	resume_mmdc
 
 	/* Restore registers */
diff --git a/arch/arm/mach-imx/mx6.h b/arch/arm/mach-imx/mx6.h
index b4bfc28..5f693c3 100644
--- a/arch/arm/mach-imx/mx6.h
+++ b/arch/arm/mach-imx/mx6.h
@@ -26,6 +26,8 @@
 #define MX6Q_ANATOP_SIZE        0x1000
 #define MX6Q_GPC_BASE_ADDR      0x020dc000
 #define MX6Q_GPC_SIZE           0x4000
+#define MX6Q_SEMA4_BASE_ADDR	0x02290000
+#define MX6Q_SEMA4_SIZE		0x4000
 #define MX6Q_MMDC_P0_BASE_ADDR  0x021b0000
 #define MX6Q_MMDC_P0_SIZE       0x4000
 #define MX6Q_MMDC_P1_BASE_ADDR  0x021b4000
@@ -34,6 +36,8 @@
 #define MX6Q_AIPS1_SIZE     0x100000
 #define MX6Q_AIPS2_BASE_ADDR        0x02100000
 #define MX6Q_AIPS2_SIZE     0x100000
+#define MX6Q_AIPS3_BASE_ADDR	0x02200000
+#define MX6Q_AIPS3_SIZE		0x100000
 
 #define MX6SX_IRAM_TLB_BASE_ADDR    0x008f8000
 #define MX6Q_IRAM_TLB_BASE_ADDR 0x00900000
diff --git a/arch/arm/mach-imx/pm-imx6.c b/arch/arm/mach-imx/pm-imx6.c
index b9c1a2d..40f521f 100644
--- a/arch/arm/mach-imx/pm-imx6.c
+++ b/arch/arm/mach-imx/pm-imx6.c
@@ -69,6 +69,8 @@
 
 #define CGPR				0x64
 #define BM_CGPR_INT_MEM_CLK_LPM		(0x1 << 17)
+#define CCGR4				0x78
+#define CCGR6				0x80
 
 #define MX6Q_SUSPEND_OCRAM_SIZE		0x1000
 #define MX6_MAX_MMDC_IO_NUM		33
@@ -657,6 +659,25 @@ static void imx6_qspi_restore(struct qspi_regs *pregs, int reg_num)
 static int imx6q_pm_enter(suspend_state_t state)
 {
 	unsigned int console_saved_reg[11] = {0};
+	static unsigned int ccm_ccgr4, ccm_ccgr6;
+
+	if (imx_src_is_m4_enabled()) {
+		if (imx_gpc_is_m4_sleeping() && imx_mu_is_m4_in_low_freq()) {
+			imx_gpc_hold_m4_in_sleep();
+			imx_mu_enable_m4_irqs_in_gic(true);
+		} else {
+			pr_info("M4 is busy, enter WAIT mode instead of STOP!\n");
+			imx6q_set_lpm(WAIT_UNCLOCKED);
+			imx6q_set_int_mem_clk_lpm(true);
+			imx_gpc_pre_suspend(false);
+			/* Zzz ... */
+			cpu_do_idle();
+			imx_gpc_post_resume();
+			imx6q_set_lpm(WAIT_CLOCKED);
+
+			return 0;
+		}
+	}
 
 	if (!iram_tlb_base_addr) {
 		pr_warn("No IRAM/OCRAM memory allocated for suspend/resume \
@@ -692,6 +713,22 @@ static int imx6q_pm_enter(suspend_state_t state)
 		imx_gpc_pre_suspend(true);
 		imx_anatop_pre_suspend();
 		if (cpu_is_imx6sx() && imx_gpc_is_mf_mix_off()) {
+			ccm_ccgr4 = readl_relaxed(ccm_base + CCGR4);
+			ccm_ccgr6 = readl_relaxed(ccm_base + CCGR6);
+			/*
+			 * i.MX6SX RDC needs PCIe and eim clk to be enabled
+			 * if Mega/Fast off, it is better to check cpu type
+			 * and whether Mega/Fast is off in this suspend flow,
+			 * but we need to add cpu type check for 3 places which
+			 * will increase code size, so here we just do it
+			 * for all cases, as when STOP mode is entered, CCM
+			 * hardware will gate all clocks, so it will NOT impact
+			 * any function or power.
+			 */
+			writel_relaxed(ccm_ccgr4 | (0x3 << 0), ccm_base +
+				CCGR4);
+			writel_relaxed(ccm_ccgr6 | (0x3 << 10), ccm_base +
+				CCGR6);
 			memcpy(ocram_saved_in_ddr, ocram_base, ocram_size);
 			imx6_console_save(console_saved_reg);
 			if (imx_src_is_m4_enabled())
@@ -704,6 +741,8 @@ static int imx6q_pm_enter(suspend_state_t state)
 		cpu_suspend(0, imx6q_suspend_finish);
 
 		if (cpu_is_imx6sx() && imx_gpc_is_mf_mix_off()) {
+			writel_relaxed(ccm_ccgr4, ccm_base + CCGR4);
+			writel_relaxed(ccm_ccgr6, ccm_base + CCGR6);
 			memcpy(ocram_base, ocram_saved_in_ddr, ocram_size);
 			imx6_console_restore(console_saved_reg);
 			if (imx_src_is_m4_enabled())
@@ -724,6 +763,11 @@ static int imx6q_pm_enter(suspend_state_t state)
 		return -EINVAL;
 	}
 
+	if (imx_src_is_m4_enabled()) {
+		imx_mu_enable_m4_irqs_in_gic(false);
+		imx_gpc_release_m4_in_sleep();
+	}
+
 	return 0;
 }
 
@@ -796,6 +840,7 @@ static struct map_desc imx6_pm_io_desc[] __initdata = {
 	imx_map_entry(MX6Q, ANATOP, MT_DEVICE),
 	imx_map_entry(MX6Q, GPC, MT_DEVICE),
 	imx_map_entry(MX6Q, L2, MT_DEVICE),
+	imx_map_entry(MX6Q, SEMA4, MT_DEVICE),
 };
 
 void __init imx6_pm_map_io(void)
@@ -852,6 +897,15 @@ void __init imx6_pm_map_io(void)
 		TT_ATTRIB_NON_CACHEABLE_1M;
 
 	/*
+	 * Make sure the AIPS3 virtual address has a mapping
+	 * in the IRAM page table.
+	 */
+	i = ((IMX_IO_P2V(MX6Q_AIPS3_BASE_ADDR) >> 20) << 2) / 4;
+		*((unsigned long *)iram_tlb_base_addr + i) =
+		(MX6Q_AIPS3_BASE_ADDR & 0xFFF00000) |
+		TT_ATTRIB_NON_CACHEABLE_1M;
+
+	/*
 	 * Make sure the L2 controller virtual address has a mapping
 	 * in the IRAM page table.
 	 */
-- 
1.7.5.4

