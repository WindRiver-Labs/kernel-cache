From 5e6056f29c9c378526a78acc7c20340db5474621 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Mon, 16 Mar 2015 13:08:06 +0800
Subject: [PATCH 0452/1594] MLK-10430 ARM: imx: use IOMUX IRQ to make GPC
 state machine correct on imx7d

commit cd64441cf96b155d99c0cafc5c2ce687f8473b84 from
git://git.freescale.com/imx/linux-2.6-imx.git

When ARM is waked up from WFI by irq number which < 32, GPC state
machine may keep ARM WFI signal available for next time entering
low power mode, so the issue is when we just set the low power mode
in GPC, ARM is still executing instructions, whenever GPC's low power
mode is enabled, the whole system is forced into low power mode, this
is unexpected, low power mode should only be entered when ARM is in WFI.

To fix this issue, we should make sure the last wakeup irq is from our
SOC platform, the irq number should be >= 32, so here we force the IOMUX
irq to be always pending by setting bit 12 of IOMUX_GPR1, then whenever
we set the low power mode in GPC, we should unmask it in GPC first then
mask it back, it will clean all previous internal logics in GPC low power
mode.

Signed-off-by: Anson Huang <b20788@freescale.com>
---
 arch/arm/mach-imx/gpcv2.c                  |   74 ++++++++++++++++-----------
 arch/arm/mach-imx/pm-imx7.c                |   12 +++++
 include/linux/mfd/syscon/imx7-iomuxc-gpr.h |    1 +
 3 files changed, 57 insertions(+), 30 deletions(-)

diff --git a/arch/arm/mach-imx/gpcv2.c b/arch/arm/mach-imx/gpcv2.c
index e339c51..cfbacc9 100644
--- a/arch/arm/mach-imx/gpcv2.c
+++ b/arch/arm/mach-imx/gpcv2.c
@@ -121,10 +121,39 @@ void imx_gpcv2_set_slot_ack(u32 index, enum imx_gpc_slot m_core,
 	}
 }
 
+void imx_gpcv2_irq_unmask(struct irq_data *d)
+{
+	void __iomem *reg;
+	u32 val;
+
+	/* Sanity check for SPI irq */
+	if (d->irq < 32)
+		return;
+	reg = gpc_base + GPC_IMR1_CORE0 + (d->irq / 32 - 1) * 4;
+	val = readl_relaxed(reg);
+	val &= ~(1 << d->irq % 32);
+	writel_relaxed(val, reg);
+}
+
+void imx_gpcv2_irq_mask(struct irq_data *d)
+{
+	void __iomem *reg;
+	u32 val;
+
+	/* Sanity check for SPI irq */
+	if (d->irq < 32)
+		return;
+	reg = gpc_base + GPC_IMR1_CORE0 + (d->irq / 32 - 1) * 4;
+	val = readl_relaxed(reg);
+	val |= 1 << (d->irq % 32);
+	writel_relaxed(val, reg);
+}
+
 void imx_gpcv2_set_lpm_mode(u32 cpu, enum mxc_cpu_pwr_mode mode)
 {
 	unsigned long flags;
 	u32 val1, val2;
+	struct irq_desc *iomuxc_irq_desc;
 
 	spin_lock_irqsave(&gpcv2_lock, flags);
 
@@ -159,8 +188,23 @@ void imx_gpcv2_set_lpm_mode(u32 cpu, enum mxc_cpu_pwr_mode mode)
 		return;
 	}
 
+	/*
+	 * GPC: When improper low-power sequence is used,
+	 * the SoC enters low power mode before the ARM core executes WFI.
+	 *
+	 * Software workaround:
+	 * 1) Software should trigger IRQ #32 (IOMUX) to be always pending
+	 *    by setting IOMUX_GPR1_IRQ.
+	 * 2) Software should then unmask IRQ #32 in GPC before setting GPC
+	 *    Low-Power mode.
+	 * 3) Software should mask IRQ #32 right after GPC Low-Power mode
+	 *    is set.
+	 */
+	iomuxc_irq_desc = irq_to_desc(32);
+	imx_gpcv2_irq_unmask(&iomuxc_irq_desc->irq_data);
 	writel_relaxed(val1, gpc_base + GPC_LPCR_A7_BSC);
 	writel_relaxed(val2, gpc_base + GPC_SLPCR);
+	imx_gpcv2_irq_mask(&iomuxc_irq_desc->irq_data);
 	spin_unlock_irqrestore(&gpcv2_lock, flags);
 }
 
@@ -397,36 +441,6 @@ void imx_gpcv2_restore_all(void)
 		writel_relaxed(gpcv2_saved_imrs[i], reg_imr1 + i * 4);
 }
 
-void imx_gpcv2_irq_unmask(struct irq_data *d)
-{
-	void __iomem *reg;
-	u32 val;
-
-	/* Sanity check for SPI irq */
-	if (d->irq < 32)
-		return;
-
-	reg = gpc_base + GPC_IMR1_CORE0 + (d->irq / 32 - 1) * 4;
-	val = readl_relaxed(reg);
-	val &= ~(1 << d->irq % 32);
-	writel_relaxed(val, reg);
-}
-
-void imx_gpcv2_irq_mask(struct irq_data *d)
-{
-	void __iomem *reg;
-	u32 val;
-
-	/* Sanity check for SPI irq */
-	if (d->irq < 32)
-		return;
-
-	reg = gpc_base + GPC_IMR1_CORE0 + (d->irq / 32 - 1) * 4;
-	val = readl_relaxed(reg);
-	val |= 1 << (d->irq % 32);
-	writel_relaxed(val, reg);
-}
-
 void __init imx_gpcv2_init(void)
 {
 	struct device_node *np;
diff --git a/arch/arm/mach-imx/pm-imx7.c b/arch/arm/mach-imx/pm-imx7.c
index 861f3cb..931ea0d 100644
--- a/arch/arm/mach-imx/pm-imx7.c
+++ b/arch/arm/mach-imx/pm-imx7.c
@@ -21,6 +21,7 @@
 #include <linux/suspend.h>
 #include <linux/genalloc.h>
 #include <linux/mfd/syscon.h>
+#include <linux/mfd/syscon/imx7-iomuxc-gpr.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
 #include <linux/of_fdt.h>
@@ -519,6 +520,7 @@ put_node:
 static void __init imx7_pm_common_init(const struct imx7_pm_socdata
 					*socdata)
 {
+	struct regmap *gpr;
 	int ret;
 
 	if (IS_ENABLED(CONFIG_SUSPEND)) {
@@ -527,6 +529,16 @@ static void __init imx7_pm_common_init(const struct imx7_pm_socdata
 			pr_warn("%s: No DDR LPM support with suspend %d!\n",
 				__func__, ret);
 	}
+
+	/*
+	 * Force IOMUXC irq pending, so that the interrupt to GPC can be
+	 * used to deassert dsm_request signal when the signal gets
+	 * asserted unexpectedly.
+	 */
+	gpr = syscon_regmap_lookup_by_compatible("fsl,imx7d-iomuxc-gpr");
+	if (!IS_ERR(gpr))
+		regmap_update_bits(gpr, IOMUXC_GPR1, IMX7D_GPR1_IRQ_MASK,
+				   IMX7D_GPR1_IRQ_MASK);
 }
 
 void __init imx7d_pm_init(void)
diff --git a/include/linux/mfd/syscon/imx7-iomuxc-gpr.h b/include/linux/mfd/syscon/imx7-iomuxc-gpr.h
index 24089a0..dd00de5 100644
--- a/include/linux/mfd/syscon/imx7-iomuxc-gpr.h
+++ b/include/linux/mfd/syscon/imx7-iomuxc-gpr.h
@@ -36,6 +36,7 @@
 #define IOMUXC_GPR22	0x58
 
 /* For imx7d iomux gpr register field define */
+#define IMX7D_GPR1_IRQ_MASK			(0x1 << 12)
 #define IMX7D_GPR1_ENET1_TX_CLK_SEL_MASK	(0x1 << 13)
 #define IMX7D_GPR1_ENET2_TX_CLK_SEL_MASK	(0x1 << 14)
 #define IMX7D_GPR1_ENET_TX_CLK_SEL_MASK		(0x3 << 13)
-- 
1.7.5.4

