From 8c0d4075b6d65a24fa361ca15785512285511ec1 Mon Sep 17 00:00:00 2001
From: Anson Huang <Anson.Huang@nxp.com>
Date: Thu, 14 Jan 2016 19:13:34 +0800
Subject: [PATCH 1424/1691] MLK-12136-3 ARM: imx: adjust ddr frequency scale
 flow on i.MX7D TO1.1

commit 8c0d4075b6d65a24fa361ca15785512285511ec1 from
git://git.freescale.com/imx/linux-2.6-imx.git imx_4.1.15_1.0.0_ga

i.MX7D TO1.1 updates the DDR script, ddr frequency scale flow
should be updated accordingly.

Add runtime revision check to support both TO1.0 and TO1.1.

Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
---
 arch/arm/mach-imx/ddr3_freq_imx7d.S | 40 +++++++++++++++++++++++++++++++++----
 arch/arm/mach-imx/lpddr3_freq_imx.S | 40 +++++++++++++++++++++++++++++++++----
 2 files changed, 72 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-imx/ddr3_freq_imx7d.S b/arch/arm/mach-imx/ddr3_freq_imx7d.S
index ab82047..01ab9b0 100644
--- a/arch/arm/mach-imx/ddr3_freq_imx7d.S
+++ b/arch/arm/mach-imx/ddr3_freq_imx7d.S
@@ -41,10 +41,13 @@
 #define DDRPHY_OFFSETW_CON0	0x30
 #define DDRPHY_OFFSETW_CON1	0x34
 #define DDRPHY_OFFSETW_CON2	0x38
+#define DDRPHY_CA_WLDSKEW_CON0	0x6c
 #define DDRPHY_CA_DSKEW_CON0	0x7c
 #define DDRPHY_CA_DSKEW_CON1	0x80
 #define DDRPHY_CA_DSKEW_CON2	0x84
 
+#define ANADIG_DIGPROG		0x800
+
 	.align 3
 
 	.macro	switch_to_below_100m
@@ -171,11 +174,25 @@
 	ldr	r7, =0x7f
 	str	r7, [r5, #DDRPHY_OFFSETW_CON2]
 
+	ldr	r7, [r9, #ANADIG_DIGPROG]
+	and	r7, r7, #0x11
+	cmp	r7, #0x10
+	beq	20f
+
 	ldr	r7, =0x0
+	str	r7, [r5, #DDRPHY_CA_WLDSKEW_CON0]
+	ldr	r7, =0x60606060
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON0]
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON1]
+	ldr	r7, =0x00006060
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON2]
-
+	b	21f
+20:
+	ldr	r7, =0x0
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON0]
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON1]
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON2]
+21:
 	ldr	r7, =0x1100007f
 	str	r7, [r5, #DDRPHY_OFFSETD_CON0]
 	ldr	r7, =0x1000007f
@@ -287,11 +304,25 @@
 	ldr	r7, =0x8
 	str	r7, [r5, #DDRPHY_OFFSETW_CON2]
 
+	ldr	r7, [r9, #ANADIG_DIGPROG]
+	and	r7, r7, #0x11
+	cmp	r7, #0x10
+	beq	22f
+
+	ldr	r7, =0x1d1d1d1d
+	str	r7, [r5, #DDRPHY_CA_WLDSKEW_CON0]
+	ldr	r7, =0x10101010
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON0]
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON1]
+	ldr	r7, =0x1d1d1010
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON2]
+	b	23f
+22:
 	ldr	r7, =0x0
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON0]
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON1]
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON2]
-
+23:
 	ldr	r7, =0x11000008
 	str	r7, [r5, #DDRPHY_OFFSETD_CON0]
 	ldr	r7, =0x10000008
@@ -393,7 +424,7 @@
 	.endm
 
 ENTRY(imx7d_ddr3_freq_change)
-	push	{r2 - r8}
+	push	{r2 - r9}
 
 	/*
 	 * To ensure no page table walks occur in DDR, we
@@ -446,6 +477,7 @@ ENTRY(imx7d_ddr3_freq_change)
 	ldr	r3, =IMX_IO_P2V(MX7D_IOMUXC_GPR_BASE_ADDR)
 	ldr	r4, =IMX_IO_P2V(MX7D_DDRC_BASE_ADDR)
 	ldr	r5, =IMX_IO_P2V(MX7D_DDRC_PHY_BASE_ADDR)
+	ldr	r9, =IMX_IO_P2V(MX7D_ANATOP_BASE_ADDR)
 
 	ldr	r6, =100000000
 	cmp	r0, r6
@@ -526,7 +558,7 @@ done:
 	nop
 
 	/* Restore registers */
-	pop	{r2 - r8}
+	pop	{r2 - r9}
 	mov	pc, lr
 	.ltorg
 ENDPROC(imx7d_ddr3_freq_change)
diff --git a/arch/arm/mach-imx/lpddr3_freq_imx.S b/arch/arm/mach-imx/lpddr3_freq_imx.S
index 6cbbe3a..515e961 100644
--- a/arch/arm/mach-imx/lpddr3_freq_imx.S
+++ b/arch/arm/mach-imx/lpddr3_freq_imx.S
@@ -38,10 +38,13 @@
 #define DDRPHY_OFFSETW_CON1	0x34
 #define DDRPHY_OFFSETW_CON2	0x38
 #define DDRPHY_RFSHTMG		0x64
+#define DDRPHY_CA_WLDSKEW_CON0	0x6c
 #define DDRPHY_CA_DSKEW_CON0	0x7c
 #define DDRPHY_CA_DSKEW_CON1	0x80
 #define DDRPHY_CA_DSKEW_CON2	0x84
 
+#define ANADIG_DIGPROG		0x800
+
 	.align 3
 
 	.macro	ddrc_prepare
@@ -177,11 +180,25 @@
 	ldr	r7, =0x7f
 	str	r7, [r5, #DDRPHY_OFFSETW_CON2]
 
+	ldr	r7, [r9, #ANADIG_DIGPROG]
+	and	r7, r7, #0x11
+	cmp	r7, #0x10
+	beq	11f
+
 	ldr	r7, =0x0
+	str	r7, [r5, #DDRPHY_CA_WLDSKEW_CON0]
+	ldr	r7, =0x60606060
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON0]
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON1]
+	ldr	r7, =0x00006060
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON2]
-
+	b	12f
+11:
+	ldr	r7, =0x0
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON0]
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON1]
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON2]
+12:
 	ldr	r7, =0x100007f
 	str	r7, [r5, #DDRPHY_OFFSETD_CON0]
 	ldr	r7, =0x7f
@@ -220,12 +237,26 @@
 	ldr	r7, =0x8
 	str	r7, [r5, #DDRPHY_OFFSETW_CON2]
 
+	ldr	r7, [r9, #ANADIG_DIGPROG]
+	and	r7, r7, #0x11
+	cmp	r7, #0x10
+	beq	13f
+
+	ldr	r7, =0x1c1c1c1c
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON0]
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON1]
+	ldr	r7, =0x30301c1c
+	str	r7, [r5, #DDRPHY_CA_DSKEW_CON2]
+	ldr	r7, =0x30303030
+	str	r7, [r5, #DDRPHY_CA_WLDSKEW_CON0]
+	b	14f
+13:
 	ldr	r7, =0x08080808
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON0]
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON1]
 	ldr	r7, =0x0808
 	str	r7, [r5, #DDRPHY_CA_DSKEW_CON2]
-
+14:
 	ldr	r7, =0x11000008
 	str	r7, [r5, #DDRPHY_OFFSETD_CON0]
 	ldr	r7, =0x10000008
@@ -241,7 +272,7 @@
 	.endm
 
 ENTRY(imx_lpddr3_freq_change)
-	push	{r2 - r8}
+	push	{r2 - r9}
 
 	/*
 	 * To ensure no page table walks occur in DDR, we
@@ -297,6 +328,7 @@ ENTRY(imx_lpddr3_freq_change)
 	ldr	r3, =IMX_IO_P2V(MX7D_IOMUXC_GPR_BASE_ADDR)
 	ldr	r4, =IMX_IO_P2V(MX7D_DDRC_BASE_ADDR)
 	ldr	r5, =IMX_IO_P2V(MX7D_DDRC_PHY_BASE_ADDR)
+	ldr	r9, =IMX_IO_P2V(MX7D_ANATOP_BASE_ADDR)
 
 	ddrc_prepare
 
@@ -378,6 +410,6 @@ done:
 	nop
 
 	/* Restore registers */
-	pop	{r2 - r8}
+	pop	{r2 - r9}
 	mov	pc, lr
 ENDPROC(imx_lpddr3_freq_change)
-- 
1.9.1

