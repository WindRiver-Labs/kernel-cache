From dc7f056d66f850bc006db9a20502787934abf9da Mon Sep 17 00:00:00 2001
From: Li Jun <b47624@freescale.com>
Date: Mon, 23 Jun 2014 16:11:12 +0800
Subject: [PATCH 0173/1691] MLK-11340-32 usb: chipidea: otg_fsm: add HNP
 polling support

commit dc7f056d66f850bc006db9a20502787934abf9da from
git://git.freescale.com/imx/linux-2.6-imx.git imx_4.1.15_1.0.0_ga

This patch adds HNP polling support for chipidea otg fsm driver, which
adds a SW timer to send HNP polling request.

Signed-off-by: Li Jun <b47624@freescale.com>
(cherry picked from commit 5536adef13bb3af48bc53cbd89e3bae41150691d)
---
 drivers/usb/chipidea/ci.h      |  2 ++
 drivers/usb/chipidea/otg_fsm.c | 39 +++++++++++++++++++++++++++++++++++++--
 drivers/usb/chipidea/otg_fsm.h |  2 ++
 3 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/chipidea/ci.h b/drivers/usb/chipidea/ci.h
index 02e0ff9..d8ce6cb 100644
--- a/drivers/usb/chipidea/ci.h
+++ b/drivers/usb/chipidea/ci.h
@@ -218,6 +218,8 @@ struct ci_hdrc {
 	ktime_t				hr_timeouts[NUM_OTG_FSM_TIMERS];
 	unsigned			enabled_otg_timer_bits;
 	enum otg_fsm_timer		next_otg_timer;
+	struct timer_list		hnp_polling_timer;
+	struct work_struct		hnp_polling_work;
 	struct work_struct		work;
 	struct workqueue_struct		*wq;
 
diff --git a/drivers/usb/chipidea/otg_fsm.c b/drivers/usb/chipidea/otg_fsm.c
index a0d775a..d576475 100644
--- a/drivers/usb/chipidea/otg_fsm.c
+++ b/drivers/usb/chipidea/otg_fsm.c
@@ -207,6 +207,7 @@ static unsigned otg_timer_ms[] = {
 	TB_DATA_PLS,
 	TB_SSEND_SRP,
 	TA_DP_END,
+	0,
 };
 
 /*
@@ -370,6 +371,7 @@ static int (*otg_timer_handlers[])(struct ci_hdrc *) = {
 	b_data_pls_tmout,	/* B_DATA_PLS */
 	b_ssend_srp_tmout,	/* B_SSEND_SRP */
 	a_dp_end_tmout,		/* A_DP_END */
+	NULL,			/* HNP_POLLING */
 };
 
 /*
@@ -416,15 +418,41 @@ static enum hrtimer_restart ci_otg_hrtimer_func(struct hrtimer *t)
 	return HRTIMER_NORESTART;
 }
 
+static void hnp_polling_timer_work(unsigned long arg)
+{
+	struct ci_hdrc *ci = (struct ci_hdrc *)arg;
+
+	schedule_work(&ci->hnp_polling_work);
+}
+
+static void ci_hnp_polling_work(struct work_struct *work)
+{
+	struct ci_hdrc *ci = container_of(work, struct ci_hdrc,
+						hnp_polling_work);
+
+	pm_runtime_get_sync(ci->dev);
+	if (otg_hnp_polling(&ci->fsm) == HOST_REQUEST_FLAG)
+		ci_otg_queue_work(ci);
+	pm_runtime_put_sync(ci->dev);
+}
+
 /* Initialize timers */
 static int ci_otg_init_timers(struct ci_hdrc *ci)
 {
 	hrtimer_init(&ci->otg_fsm_hrtimer, CLOCK_MONOTONIC, HRTIMER_MODE_ABS);
 	ci->otg_fsm_hrtimer.function = ci_otg_hrtimer_func;
 
+	setup_timer(&ci->hnp_polling_timer, hnp_polling_timer_work,
+							(unsigned long)ci);
 	return 0;
 }
 
+static void ci_otg_add_hnp_polling_timer(struct ci_hdrc *ci)
+{
+	mod_timer(&ci->hnp_polling_timer,
+			jiffies + msecs_to_jiffies(T_HOST_REQ_POLL));
+}
+
 /* -------------------------------------------------------------*/
 /* Operations that will be called from OTG Finite State Machine */
 /* -------------------------------------------------------------*/
@@ -432,8 +460,12 @@ static void ci_otg_fsm_add_timer(struct otg_fsm *fsm, enum otg_fsm_timer t)
 {
 	struct ci_hdrc	*ci = container_of(fsm, struct ci_hdrc, fsm);
 
-	if (t < NUM_OTG_FSM_TIMERS)
-		ci_otg_add_timer(ci, t);
+	if (t < NUM_OTG_FSM_TIMERS) {
+		if (t == HNP_POLLING)
+			ci_otg_add_hnp_polling_timer(ci);
+		else
+			ci_otg_add_timer(ci, t);
+	}
 	return;
 }
 
@@ -824,6 +856,8 @@ int ci_hdrc_otg_fsm_init(struct ci_hdrc *ci)
 		return retval;
 	}
 
+	INIT_WORK(&ci->hnp_polling_work, ci_hnp_polling_work);
+
 	/* Enable A vbus valid irq */
 	hw_write_otgsc(ci, OTGSC_AVVIE, OTGSC_AVVIE);
 
@@ -842,6 +876,7 @@ int ci_hdrc_otg_fsm_init(struct ci_hdrc *ci)
 void ci_hdrc_otg_fsm_remove(struct ci_hdrc *ci)
 {
 	sysfs_remove_group(&ci->dev->kobj, &inputs_attr_group);
+	del_timer_sync(&ci->hnp_polling_timer);
 }
 
 /* Restart OTG fsm if resume from power lost */
diff --git a/drivers/usb/chipidea/otg_fsm.h b/drivers/usb/chipidea/otg_fsm.h
index 6f0598e..3465c9a 100644
--- a/drivers/usb/chipidea/otg_fsm.h
+++ b/drivers/usb/chipidea/otg_fsm.h
@@ -64,6 +64,8 @@
 /* SSEND time before SRP */
 #define TB_SSEND_SRP         (1500)	/* minimum 1.5 sec, section:5.1.2 */
 
+#define T_HOST_REQ_POLL      (1500)	/* HNP polling interval 1s~2s */
+
 #ifdef CONFIG_USB_OTG_FSM
 
 int ci_hdrc_otg_fsm_init(struct ci_hdrc *ci);
-- 
1.9.1

