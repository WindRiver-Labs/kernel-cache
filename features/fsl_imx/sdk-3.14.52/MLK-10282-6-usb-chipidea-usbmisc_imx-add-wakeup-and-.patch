From 602dec14cc53dd7a1cd7d715639d7388826fc549 Mon Sep 17 00:00:00 2001
From: Peter Chen <peter.chen@freescale.com>
Date: Sat, 28 Feb 2015 08:45:35 +0800
Subject: [PATCH 0111/1221] MLK-10282-6 usb: chipidea: usbmisc_imx: add wakeup
 and unburst support for 7d

Add wakeup and unburst support for imx7d.

Signed-off-by: Peter Chen <peter.chen@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/usb/chipidea/usbmisc_imx.c |   37 ++++++++++++++++++++++++++++++++++-
 1 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/chipidea/usbmisc_imx.c b/drivers/usb/chipidea/usbmisc_imx.c
index 0012883..21e9c36 100644
--- a/drivers/usb/chipidea/usbmisc_imx.c
+++ b/drivers/usb/chipidea/usbmisc_imx.c
@@ -452,6 +452,31 @@ static int usbmisc_imx6sx_power_lost_check(struct imx_usbmisc_data *data)
 		return 0;
 }
 
+static int usbmisc_imx7d_set_wakeup
+	(struct imx_usbmisc_data *data, bool enabled)
+{
+	struct imx_usbmisc *usbmisc = dev_get_drvdata(data->dev);
+	unsigned long flags;
+	u32 val;
+	u32 wakeup_setting = MX6_BM_WAKEUP_ENABLE;
+	int ret = 0;
+
+	spin_lock_irqsave(&usbmisc->lock, flags);
+	val = readl(usbmisc->base);
+	if (enabled) {
+		wakeup_setting |= imx6q_finalize_wakeup_setting(data);
+		writel(val | wakeup_setting, usbmisc->base);
+	} else {
+		if (val & MX6_BM_WAKEUP_INTR)
+			dev_dbg(data->dev, "wakeup int\n");
+		wakeup_setting |= MX6_BM_VBUS_WAKEUP | MX6_BM_ID_WAKEUP;
+		writel(val & ~wakeup_setting, usbmisc->base);
+	}
+	spin_unlock_irqrestore(&usbmisc->lock, flags);
+
+	return ret;
+}
+
 static int usbmisc_imx7d_init(struct imx_usbmisc_data *data)
 {
 	struct imx_usbmisc *usbmisc = dev_get_drvdata(data->dev);
@@ -461,13 +486,20 @@ static int usbmisc_imx7d_init(struct imx_usbmisc_data *data)
 	if (data->index >= 1)
 		return -EINVAL;
 
+	spin_lock_irqsave(&usbmisc->lock, flags);
 	if (data->disable_oc) {
-		spin_lock_irqsave(&usbmisc->lock, flags);
 		reg = readl(usbmisc->base);
 		writel(reg | MX6_BM_OVER_CUR_DIS, usbmisc->base);
-		spin_unlock_irqrestore(&usbmisc->lock, flags);
 	}
 
+	/* Enable unburst setting */
+	reg = readl(usbmisc->base);
+	writel(reg | MX6_BM_UNBURST_SETTING, usbmisc->base);
+
+	spin_unlock_irqrestore(&usbmisc->lock, flags);
+
+	usbmisc_imx7d_set_wakeup(data, false);
+
 	return 0;
 }
 
@@ -505,6 +537,7 @@ static const struct usbmisc_ops imx6sx_usbmisc_ops = {
 
 static const struct usbmisc_ops imx7d_usbmisc_ops = {
 	.init = usbmisc_imx7d_init,
+	.set_wakeup = usbmisc_imx7d_set_wakeup,
 };
 
 int imx_usbmisc_init(struct imx_usbmisc_data *data)
-- 
1.7.5.4

