From b80ecf3e967dfe5d625274a571c39ef9d55b5f64 Mon Sep 17 00:00:00 2001
From: Richard Zhu <Richard.Zhu@freescale.com>
Date: Thu, 23 Jul 2015 15:47:07 +0800
Subject: [PATCH 1005/1221] MLK-11312-2 rpmsg: imx: enable rpmsg on imx6sx

enable rpmsg on imx6sx sabreauto and sdb boards

Signed-off-by: Richard Zhu <Richard.Zhu@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/Kconfig     |    2 ++
 arch/arm/mach-imx/imx_rpmsg.c |    2 ++
 arch/arm/mach-imx/mu.c        |    9 ++++-----
 3 files changed, 8 insertions(+), 5 deletions(-)

diff --git a/arch/arm/mach-imx/Kconfig b/arch/arm/mach-imx/Kconfig
index 495d4df..72ca58b 100644
--- a/arch/arm/mach-imx/Kconfig
+++ b/arch/arm/mach-imx/Kconfig
@@ -837,6 +837,8 @@ config SOC_IMX6SX
 	select MIGHT_HAVE_PCI
 	select PCI_DOMAINS if PCI
 	select SOC_IMX6
+	select HAVE_IMX_RPMSG
+	select RPMSG
 
 	help
 	  This enables support for Freescale i.MX6 SoloX processor.
diff --git a/arch/arm/mach-imx/imx_rpmsg.c b/arch/arm/mach-imx/imx_rpmsg.c
index ba8cd7c..7ccaf67 100644
--- a/arch/arm/mach-imx/imx_rpmsg.c
+++ b/arch/arm/mach-imx/imx_rpmsg.c
@@ -271,6 +271,7 @@ static struct imx_rpmsg_vproc imx_rpmsg_vprocs[] = {
 };
 
 static const struct of_device_id imx_rpmsg_dt_ids[] = {
+	{ .compatible = "fsl,imx6sx-rpmsg", },
 	{ .compatible = "fsl,imx7d-rpmsg", },
 	{ /* sentinel */ }
 };
@@ -286,6 +287,7 @@ static int imx_rpmsg_probe(struct platform_device *pdev)
 
 		if (!strcmp(rpdev->rproc_name, "m4")) {
 			ret = of_device_is_compatible(np, "fsl,imx7d-rpmsg");
+			ret |= of_device_is_compatible(np, "fsl,imx6sx-rpmsg");
 			if (ret) {
 				/* hardcodes here now. */
 				rpdev->vring[0] = 0xBFFF0000;
diff --git a/arch/arm/mach-imx/mu.c b/arch/arm/mach-imx/mu.c
index 4131b80..3f330ac 100644
--- a/arch/arm/mach-imx/mu.c
+++ b/arch/arm/mach-imx/mu.c
@@ -560,11 +560,6 @@ static int imx_mu_probe(struct platform_device *pdev)
 		/* enable the bit31(GIE3) of MU_ACR, used for MCC */
 		writel_relaxed(readl_relaxed(mu_base + MU_ACR) | BIT(31),
 			mu_base + MU_ACR);
-
-		INIT_DELAYED_WORK(&rpmsg_work, rpmsg_work_handler);
-		/* enable the bit26(RIE1) of MU_ACR */
-		writel_relaxed(readl_relaxed(mu_base + MU_ACR) | BIT(26),
-			mu_base + MU_ACR);
 	} else {
 		INIT_DELAYED_WORK(&mu_work, mu_work_handler);
 
@@ -579,6 +574,10 @@ static int imx_mu_probe(struct platform_device *pdev)
 		imx_gpc_add_m4_wake_up_irq(irq, true);
 	}
 
+	INIT_DELAYED_WORK(&rpmsg_work, rpmsg_work_handler);
+	/* enable the bit26(RIE1) of MU_ACR */
+	writel_relaxed(readl_relaxed(mu_base + MU_ACR) | BIT(26),
+			mu_base + MU_ACR);
 	BLOCKING_INIT_NOTIFIER_HEAD(&(mu_rpmsg_box.notifier));
 
 	pr_info("MU is ready for cross core communication!\n");
-- 
1.7.5.4

