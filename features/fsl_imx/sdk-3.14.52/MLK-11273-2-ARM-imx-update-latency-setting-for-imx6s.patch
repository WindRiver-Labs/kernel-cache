From 713d577eae418426fc5f5a1db8a66f9464263d89 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Wed, 22 Jul 2015 19:29:42 +0800
Subject: [PATCH 0955/1221] MLK-11273-2 ARM: imx: update latency setting for
 imx6sx low power idle

Per design team, the RBC counter to hold interrupt needs at least
90us, so the counter value should be better set to 4, ~120us.

Also, right before WFI, ARM is running at 24MHz, the delay loop
value assumes ARM is at 1GHz which is incorrect, adjust it based
on 24MHz freq.

The latency of cpuidle exit should be adjusted accordingly.

Signed-off-by: Anson Huang <b20788@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/cpuidle-imx6sx.c        |    6 +++---
 arch/arm/mach-imx/imx6sx_low_power_idle.S |   10 +++++-----
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-imx/cpuidle-imx6sx.c b/arch/arm/mach-imx/cpuidle-imx6sx.c
index 6eb8e74..37e454a 100644
--- a/arch/arm/mach-imx/cpuidle-imx6sx.c
+++ b/arch/arm/mach-imx/cpuidle-imx6sx.c
@@ -138,11 +138,11 @@ static struct cpuidle_driver imx6sx_cpuidle_driver = {
 		/* LOW POWER IDLE */
 		{
 			/*
-			 * RBC 31us + ARM gating 93us + RBC clear 65us
+			 * RBC 130us + ARM gating 93us + RBC clear 65us
 			 * + PLL2 relock 450us and some margin, here set
-			 * it to 650us.
+			 * it to 800us.
 			 */
-			.exit_latency = 650,
+			.exit_latency = 800,
 			.target_residency = 1000,
 			.flags = CPUIDLE_FLAG_TIME_VALID,
 			.enter = imx6sx_enter_wait,
diff --git a/arch/arm/mach-imx/imx6sx_low_power_idle.S b/arch/arm/mach-imx/imx6sx_low_power_idle.S
index 796e9fd..7ddda1c 100644
--- a/arch/arm/mach-imx/imx6sx_low_power_idle.S
+++ b/arch/arm/mach-imx/imx6sx_low_power_idle.S
@@ -747,14 +747,14 @@ save_and_set_mmdc_io_lpm:
 	/*
 	 * enable the RBC bypass counter here
 	 * to hold off the interrupts. RBC counter
-	 * = 1 (30us). With this setting, the latency
+	 * = 4 (120us). With this setting, the latency
 	 * from wakeup interrupt to ARM power up
-	 * is ~40uS.
+	 * is ~130uS.
 	 */
 	ldr     r10, [r0, #PM_INFO_MX6Q_CCM_V_OFFSET]
 	ldr	r3, [r10, #MX6Q_CCM_CCR]
 	bic	r3, r3, #(0x3f << 21)
-	orr	r3, r3, #(0x1 << 21)
+	orr	r3, r3, #(0x4 << 21)
 	str	r3, [r10, #MX6Q_CCM_CCR]
 
 	/* enable the counter. */
@@ -771,7 +771,7 @@ save_and_set_mmdc_io_lpm:
 
 	/*
 	 * now delay for a short while (3usec)
-	 * ARM is at 1GHz at this point
+	 * ARM is at 24MHz at this point
 	 * so a short loop should be enough.
 	 * this delay is required to ensure that
 	 * the RBC counter can start counting in
@@ -779,7 +779,7 @@ save_and_set_mmdc_io_lpm:
 	 * or in case an interrupt arrives just
 	 * as ARM is about to assert DSM_request.
 	 */
-	ldr	r4, =2000
+	ldr	r4, =50
 rbc_loop:
 	subs	r4, r4, #0x1
 	bne	rbc_loop
-- 
1.7.5.4

