From 96190201dd1be58f06c43240be4cd11915c10846 Mon Sep 17 00:00:00 2001
From: Li Jun <jun.li@freescale.com>
Date: Tue, 4 Aug 2015 18:43:29 +0800
Subject: [PATCH 0991/1221] MLK-11319-1 usb: chipidea: move imx6 usb charger
 driver to controller driver

Since imx6 usb charger detection is coupled with its controller, so move its
driver to chipidea imx specific driver.

Signed-off-by: Li Jun <jun.li@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/usb/chipidea/ci_hdrc_imx.c |  117 ++++++++++++++++-----
 drivers/usb/chipidea/ci_hdrc_imx.h |   27 +++++
 drivers/usb/chipidea/usbmisc_imx.c |  211 ++++++++++++++++++++++++++++++++++++
 3 files changed, 330 insertions(+), 25 deletions(-)

diff --git a/drivers/usb/chipidea/ci_hdrc_imx.c b/drivers/usb/chipidea/ci_hdrc_imx.c
index 576c37e..374b904 100644
--- a/drivers/usb/chipidea/ci_hdrc_imx.c
+++ b/drivers/usb/chipidea/ci_hdrc_imx.c
@@ -22,7 +22,6 @@
 #include <linux/of_device.h>
 #include <linux/regmap.h>
 #include <linux/mfd/syscon.h>
-#include <linux/power/imx6_usb_charger.h>
 #include <linux/busfreq-imx.h>
 #include <linux/regulator/consumer.h>
 
@@ -115,7 +114,7 @@ struct ci_hdrc_imx_data {
 	struct imx_usbmisc_data *usbmisc_data;
 	bool supports_runtime_pm;
 	bool in_lpm;
-	bool imx6_usb_charger_detection;
+	bool imx_usb_charger_detection;
 	struct usb_charger charger;
 	struct regmap *anatop;
 	struct pinctrl *pinctrl;
@@ -124,6 +123,16 @@ struct ci_hdrc_imx_data {
 	const struct ci_hdrc_imx_platform_flag *data;
 };
 
+static char *imx_usb_charger_supplied_to[] = {
+	"imx_usb_charger",
+};
+
+static enum power_supply_property imx_usb_charger_power_props[] = {
+	POWER_SUPPLY_PROP_PRESENT,	/* Charger detected */
+	POWER_SUPPLY_PROP_ONLINE,	/* VBUS online */
+	POWER_SUPPLY_PROP_CURRENT_MAX,	/* Maximum current in mA */
+};
+
 static inline bool is_imx6q_con(struct ci_hdrc_imx_data *imx_data)
 {
 	return imx_data->data == &imx6q_usb_data;
@@ -229,21 +238,23 @@ static int ci_hdrc_imx_notify_event(struct ci_hdrc *ci, unsigned event)
 	switch (event) {
 	case CI_HDRC_CONTROLLER_VBUS_EVENT:
 		if (data->usbmisc_data && ci->vbus_active) {
-			if (data->imx6_usb_charger_detection) {
-				ret = imx6_usb_vbus_connect(&data->charger);
+			if (data->imx_usb_charger_detection) {
+				ret = imx_usbmisc_charger_detection(
+					data->usbmisc_data, true);
 				if (!ret && data->charger.psy.type !=
 							POWER_SUPPLY_TYPE_USB)
 					ret = CI_HDRC_NOTIFY_RET_DEFER_EVENT;
 			}
 		} else if (data->usbmisc_data && !ci->vbus_active) {
-			if (data->imx6_usb_charger_detection)
-				ret = imx6_usb_vbus_disconnect(&data->charger);
+			if (data->imx_usb_charger_detection)
+				ret = imx_usbmisc_charger_detection(
+					data->usbmisc_data, false);
 		}
 		break;
 	case CI_HDRC_CONTROLLER_CHARGER_POST_EVENT:
-		if (!data->imx6_usb_charger_detection)
+		if (!data->imx_usb_charger_detection)
 			return ret;
-		imx6_usb_charger_detect_post(&data->charger);
+		imx_usbmisc_charger_secondary_detection(data->usbmisc_data);
 		break;
 	case CI_HDRC_IMX_HSIC_ACTIVE_EVENT:
 		if (!IS_ERR(data->pinctrl) &&
@@ -307,6 +318,63 @@ static int ci_hdrc_imx_notify_event(struct ci_hdrc *ci, unsigned event)
 	return ret;
 }
 
+static int imx_usb_charger_get_property(struct power_supply *psy,
+				enum power_supply_property psp,
+				union power_supply_propval *val)
+{
+	struct usb_charger *charger =
+		container_of(psy, struct usb_charger, psy);
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_PRESENT:
+		val->intval = charger->present;
+		break;
+	case POWER_SUPPLY_PROP_ONLINE:
+		val->intval = charger->online;
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_MAX:
+		val->intval = charger->max_current;
+		break;
+	default:
+		return -EINVAL;
+	}
+	return 0;
+}
+/*
+ * imx_usb_register_charger - register a USB charger
+ * @charger: the charger to be initialized
+ * @name: name for the power supply
+
+ * Registers a power supply for the charger. The USB Controller
+ * driver will call this after filling struct usb_charger.
+ */
+static int imx_usb_register_charger(struct usb_charger *charger,
+		const char *name)
+{
+	struct power_supply	*psy = &charger->psy;
+
+	if (!charger->dev)
+		return -EINVAL;
+
+	if (name)
+		psy->name = name;
+	else
+		psy->name = "imx_usb_charger";
+
+	charger->bc = BATTERY_CHARGING_SPEC_1_2;
+	mutex_init(&charger->lock);
+
+	psy->type		= POWER_SUPPLY_TYPE_MAINS;
+	psy->properties		= imx_usb_charger_power_props;
+	psy->num_properties	= ARRAY_SIZE(imx_usb_charger_power_props);
+	psy->get_property	= imx_usb_charger_get_property;
+	psy->supplied_to	= imx_usb_charger_supplied_to;
+	psy->num_supplicants	= sizeof(imx_usb_charger_supplied_to)
+		/ sizeof(char *);
+
+	return power_supply_register(charger->dev, psy);
+}
+
 static int ci_hdrc_imx_probe(struct platform_device *pdev)
 {
 	struct ci_hdrc_imx_data *data;
@@ -424,9 +492,6 @@ static int ci_hdrc_imx_probe(struct platform_device *pdev)
 		}
 	}
 
-	if (of_find_property(np, "imx6-usb-charger-detection", NULL))
-		data->imx6_usb_charger_detection = true;
-
 	if (of_find_property(np, "fsl,anatop", NULL)) {
 		data->anatop = syscon_regmap_lookup_by_phandle(np,
 							"fsl,anatop");
@@ -438,17 +503,19 @@ static int ci_hdrc_imx_probe(struct platform_device *pdev)
 		}
 		if (data->usbmisc_data)
 			data->usbmisc_data->anatop = data->anatop;
-		if (data->imx6_usb_charger_detection) {
-			data->charger.anatop = data->anatop;
-			data->charger.dev = &pdev->dev;
-			ret = imx6_usb_create_charger(&data->charger,
-						"imx6_usb_charger");
-			if (ret && ret != -ENODEV)
-				goto disable_hsic_regulator;
-			if (!ret)
-				dev_dbg(&pdev->dev,
+	}
+
+	if (of_find_property(np, "imx-usb-charger-detection", NULL)) {
+		data->imx_usb_charger_detection = true;
+		data->charger.dev = &pdev->dev;
+		data->usbmisc_data->charger = &data->charger;
+		ret = imx_usb_register_charger(&data->charger,
+						"imx_usb_charger");
+		if (ret && ret != -ENODEV)
+			goto disable_hsic_regulator;
+		if (!ret)
+			dev_dbg(&pdev->dev,
 					"USB Charger is created\n");
-		}
 	}
 
 	ret = imx_usbmisc_init(data->usbmisc_data);
@@ -502,8 +569,8 @@ static int ci_hdrc_imx_probe(struct platform_device *pdev)
 disable_device:
 	ci_hdrc_remove_device(data->ci_pdev);
 remove_charger:
-	if (data->imx6_usb_charger_detection)
-		imx6_usb_remove_charger(&data->charger);
+	if (data->imx_usb_charger_detection)
+		power_supply_unregister(&data->charger.psy);
 disable_hsic_regulator:
 	if (data->hsic_pad_regulator)
 		ret = regulator_disable(data->hsic_pad_regulator);
@@ -525,8 +592,8 @@ static int ci_hdrc_imx_remove(struct platform_device *pdev)
 	ci_hdrc_remove_device(data->ci_pdev);
 	clk_disable_unprepare(data->clk);
 	release_bus_freq(BUS_FREQ_HIGH);
-	if (data->imx6_usb_charger_detection)
-		imx6_usb_remove_charger(&data->charger);
+	if (data->imx_usb_charger_detection)
+		power_supply_unregister(&data->charger.psy);
 	if (data->hsic_pad_regulator)
 		regulator_disable(data->hsic_pad_regulator);
 
diff --git a/drivers/usb/chipidea/ci_hdrc_imx.h b/drivers/usb/chipidea/ci_hdrc_imx.h
index 7db96f5..b2d91d5 100644
--- a/drivers/usb/chipidea/ci_hdrc_imx.h
+++ b/drivers/usb/chipidea/ci_hdrc_imx.h
@@ -13,6 +13,30 @@
 #define __DRIVER_USB_CHIPIDEA_CI_HDRC_IMX_H
 
 #include <linux/usb/otg.h>
+#include <linux/power_supply.h>
+
+enum battery_charging_spec {
+	BATTERY_CHARGING_SPEC_NONE = 0,
+	BATTERY_CHARGING_SPEC_UNKNOWN,
+	BATTERY_CHARGING_SPEC_1_0,
+	BATTERY_CHARGING_SPEC_1_1,
+	BATTERY_CHARGING_SPEC_1_2,
+};
+
+struct usb_charger {
+	/* USB controller */
+	struct device		*dev;
+	struct power_supply	psy;
+	struct mutex		lock;
+
+	/* Compliant with Battery Charging Specification version (if any) */
+	enum battery_charging_spec	bc;
+
+	/* properties */
+	unsigned		present:1;
+	unsigned		online:1;
+	unsigned		max_current;
+};
 
 struct imx_usbmisc_data {
 	struct device *dev;
@@ -29,6 +53,7 @@ struct imx_usbmisc_data {
 	 */
 	unsigned int osc_clkgate_delay;
 	struct regmap *anatop;
+	struct usb_charger *charger;
 	enum usb_dr_mode available_role;
 };
 
@@ -47,5 +72,7 @@ bool imx_usbmisc_adp_sense_connection(struct imx_usbmisc_data *data);
 bool imx_usbmisc_adp_attach_event(struct imx_usbmisc_data *data);
 int imx_usbmisc_term_select_override(struct imx_usbmisc_data *data,
 						bool enable, int val);
+int imx_usbmisc_charger_detection(struct imx_usbmisc_data *data, bool connect);
+int imx_usbmisc_charger_secondary_detection(struct imx_usbmisc_data *data);
 
 #endif /* __DRIVER_USB_CHIPIDEA_CI_HDRC_IMX_H */
diff --git a/drivers/usb/chipidea/usbmisc_imx.c b/drivers/usb/chipidea/usbmisc_imx.c
index 87edc8b..13d88f6 100644
--- a/drivers/usb/chipidea/usbmisc_imx.c
+++ b/drivers/usb/chipidea/usbmisc_imx.c
@@ -90,6 +90,20 @@
 #define ANADIG_ANA_MISC0_SET		0x154
 #define ANADIG_ANA_MISC0_CLK_DELAY(x)	((x >> 26) & 0x7)
 
+#define ANADIG_USB1_CHRG_DETECT_SET	0x1b4
+#define ANADIG_USB1_CHRG_DETECT_CLR	0x1b8
+#define ANADIG_USB1_CHRG_DETECT_EN_B		BIT(20)
+#define ANADIG_USB1_CHRG_DETECT_CHK_CHRG_B	BIT(19)
+#define ANADIG_USB1_CHRG_DETECT_CHK_CONTACT	BIT(18)
+
+#define ANADIG_USB1_VBUS_DET_STAT	0x1c0
+#define ANADIG_USB1_VBUS_DET_STAT_VBUS_VALID	BIT(3)
+
+#define ANADIG_USB1_CHRG_DET_STAT	0x1d0
+#define ANADIG_USB1_CHRG_DET_STAT_DM_STATE	BIT(2)
+#define ANADIG_USB1_CHRG_DET_STAT_CHRG_DETECTED	BIT(1)
+#define ANADIG_USB1_CHRG_DET_STAT_PLUG_CONTACT	BIT(0)
+
 #define MX7D_USBNC_USB_CTRL2		0x4
 #define MX7D_USB_VBUS_WAKEUP_SOURCE_MASK	0x3
 #define MX7D_USB_VBUS_WAKEUP_SOURCE(v)		(v << 0)
@@ -149,6 +163,10 @@ struct usbmisc_ops {
 	/* override UTMI termination select */
 	int (*term_select_override)(struct imx_usbmisc_data *data,
 						bool enable, int val);
+	/* usb charger contact and primary detection */
+	int (*charger_primary_detection)(struct imx_usbmisc_data *data);
+	/* usb charger secondary detection */
+	int (*charger_secondary_detection)(struct imx_usbmisc_data *data);
 };
 
 struct imx_usbmisc {
@@ -772,6 +790,144 @@ static int usbmisc_term_select_override(struct imx_usbmisc_data *data,
 	return 0;
 }
 
+/***************************************************************************/
+/*                         imx usb charger detecton                        */
+/***************************************************************************/
+static void usb_charger_is_present(struct usb_charger *charger, bool present)
+{
+	if (present)
+		charger->present = 1;
+	else
+		charger->present = 0;
+
+	power_supply_changed(&charger->psy);
+	sysfs_notify(&charger->psy.dev->kobj, NULL, "present");
+}
+
+static void imx6_disable_charger_detector(struct imx_usbmisc_data *data)
+{
+	struct regmap *regmap = data->anatop;
+
+	regmap_write(regmap, ANADIG_USB1_CHRG_DETECT_SET,
+				ANADIG_USB1_CHRG_DETECT_EN_B |
+				ANADIG_USB1_CHRG_DETECT_CHK_CHRG_B);
+}
+
+static int imx6_charger_data_contact_detect(struct imx_usbmisc_data *data)
+{
+	struct regmap *regmap = data->anatop;
+	struct usb_charger *charger = data->charger;
+	u32 val;
+	int i, data_pin_contact_count = 0;
+
+	/* check if vbus is valid */
+	regmap_read(regmap, ANADIG_USB1_VBUS_DET_STAT, &val);
+	if (!(val & ANADIG_USB1_VBUS_DET_STAT_VBUS_VALID)) {
+		dev_err(charger->dev, "vbus is error\n");
+		return -EINVAL;
+	}
+
+	/* Enable charger detector */
+	regmap_write(regmap, ANADIG_USB1_CHRG_DETECT_CLR,
+				ANADIG_USB1_CHRG_DETECT_EN_B);
+	/*
+	 * - Do not check whether a charger is connected to the USB port
+	 * - Check whether the USB plug has been in contact with each other
+	 */
+	regmap_write(regmap, ANADIG_USB1_CHRG_DETECT_SET,
+			ANADIG_USB1_CHRG_DETECT_CHK_CONTACT |
+			ANADIG_USB1_CHRG_DETECT_CHK_CHRG_B);
+
+	/* Check if plug is connected */
+	for (i = 0; i < 100; i = i + 1) {
+		regmap_read(regmap, ANADIG_USB1_CHRG_DET_STAT, &val);
+		if (val & ANADIG_USB1_CHRG_DET_STAT_PLUG_CONTACT) {
+			data_pin_contact_count++;
+			if (data_pin_contact_count > 5)
+				/* Data pin makes contact */
+				break;
+			else
+				usleep_range(5000, 10000);
+		} else {
+			data_pin_contact_count = 0;
+			usleep_range(5000, 6000);
+		}
+	}
+
+	if (i == 100) {
+		dev_err(charger->dev,
+			"VBUS is coming from a dedicated power supply.\n");
+		imx6_disable_charger_detector(data);
+		return -ENXIO;
+	}
+
+	return 0;
+}
+
+static int imx6_charger_primary_detection(struct imx_usbmisc_data *data)
+{
+	struct regmap *regmap = data->anatop;
+	struct usb_charger *charger = data->charger;
+	u32 val;
+	int ret;
+
+	ret = imx6_charger_data_contact_detect(data);
+	if (ret)
+		return ret;
+
+	/*
+	 * - Do check whether a charger is connected to the USB port
+	 * - Do not Check whether the USB plug has been in contact with
+	 * each other
+	 */
+	regmap_write(regmap, ANADIG_USB1_CHRG_DETECT_CLR,
+			ANADIG_USB1_CHRG_DETECT_CHK_CONTACT |
+			ANADIG_USB1_CHRG_DETECT_CHK_CHRG_B);
+
+	msleep(100);
+
+	/* Check if it is a charger */
+	regmap_read(regmap, ANADIG_USB1_CHRG_DET_STAT, &val);
+	if (!(val & ANADIG_USB1_CHRG_DET_STAT_CHRG_DETECTED)) {
+		dev_dbg(charger->dev, "It is a stardard downstream port\n");
+		charger->psy.type = POWER_SUPPLY_TYPE_USB;
+		charger->max_current = 500;
+	}
+
+	imx6_disable_charger_detector(data);
+	return 0;
+}
+
+/*
+ * It must be called after dp is pulled up (from USB controller driver),
+ * That is used to differentiate DCP and CDP
+ */
+int imx6_charger_secondary_detection(struct imx_usbmisc_data *data)
+{
+	struct regmap *regmap = data->anatop;
+	struct usb_charger *charger = data->charger;
+	int val;
+
+	msleep(80);
+
+	mutex_lock(&charger->lock);
+	regmap_read(regmap, ANADIG_USB1_CHRG_DET_STAT, &val);
+	if (val & ANADIG_USB1_CHRG_DET_STAT_DM_STATE) {
+		dev_dbg(charger->dev, "It is a dedicate charging port\n");
+		charger->psy.type = POWER_SUPPLY_TYPE_USB_DCP;
+		charger->max_current = 1500;
+	} else {
+		dev_dbg(charger->dev, "It is a charging downstream port\n");
+		charger->psy.type = POWER_SUPPLY_TYPE_USB_CDP;
+		charger->max_current = 900;
+	}
+
+	usb_charger_is_present(charger, true);
+	mutex_unlock(&charger->lock);
+
+	return 0;
+}
+
 static const struct usbmisc_ops imx25_usbmisc_ops = {
 	.init = usbmisc_imx25_init,
 	.post = usbmisc_imx25_post,
@@ -790,6 +946,8 @@ static const struct usbmisc_ops imx6q_usbmisc_ops = {
 	.init = usbmisc_imx6q_init,
 	.hsic_set_connect = usbmisc_imx6_hsic_set_connect,
 	.hsic_set_clk   = usbmisc_imx6_hsic_set_clk,
+	.charger_primary_detection = imx6_charger_primary_detection,
+	.charger_secondary_detection = imx6_charger_secondary_detection,
 };
 
 static const struct usbmisc_ops vf610_usbmisc_ops = {
@@ -802,6 +960,8 @@ static const struct usbmisc_ops imx6sx_usbmisc_ops = {
 	.power_lost_check = usbmisc_imx6sx_power_lost_check,
 	.hsic_set_connect = usbmisc_imx6_hsic_set_connect,
 	.hsic_set_clk = usbmisc_imx6_hsic_set_clk,
+	.charger_primary_detection = imx6_charger_primary_detection,
+	.charger_secondary_detection = imx6_charger_secondary_detection,
 };
 
 static const struct usbmisc_ops imx7d_usbmisc_ops = {
@@ -1015,6 +1175,57 @@ int imx_usbmisc_term_select_override(struct imx_usbmisc_data *data,
 }
 EXPORT_SYMBOL_GPL(imx_usbmisc_term_select_override);
 
+int imx_usbmisc_charger_detection(struct imx_usbmisc_data *data, bool connect)
+{
+	struct imx_usbmisc *usbmisc;
+	struct usb_charger *charger = data->charger;
+	int ret = 0;
+
+	if (!data)
+		return -EINVAL;
+
+	usbmisc = dev_get_drvdata(data->dev);
+	if (!usbmisc->ops->charger_primary_detection)
+		return -ENOTSUPP;
+
+	mutex_lock(&charger->lock);
+	if (connect) {
+		charger->online = 1;
+		ret = usbmisc->ops->charger_primary_detection(data);
+		if (ret) {
+			dev_err(charger->dev,
+					"Error occurs during detection: %d\n",
+					ret);
+		} else {
+			if (charger->psy.type == POWER_SUPPLY_TYPE_USB)
+				usb_charger_is_present(charger, true);
+		}
+	} else {
+		charger->online = 0;
+		charger->max_current = 0;
+		charger->psy.type = POWER_SUPPLY_TYPE_MAINS;
+
+		usb_charger_is_present(charger, false);
+	}
+	mutex_unlock(&charger->lock);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(imx_usbmisc_charger_detection);
+
+int imx_usbmisc_charger_secondary_detection(struct imx_usbmisc_data *data)
+{
+	struct imx_usbmisc *usbmisc;
+
+	if (!data)
+		return 0;
+
+	usbmisc = dev_get_drvdata(data->dev);
+	if (!usbmisc->ops->charger_secondary_detection)
+		return 0;
+	return usbmisc->ops->charger_secondary_detection(data);
+}
+EXPORT_SYMBOL_GPL(imx_usbmisc_charger_secondary_detection);
+
 static const struct of_device_id usbmisc_imx_dt_ids[] = {
 	{
 		.compatible = "fsl,imx25-usbmisc",
-- 
1.7.5.4

