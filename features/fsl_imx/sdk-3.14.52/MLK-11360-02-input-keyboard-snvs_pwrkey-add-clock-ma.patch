From b00fc50ff29207973ee84fe126f8b97779740db5 Mon Sep 17 00:00:00 2001
From: Fugang Duan <b38611@freescale.com>
Date: Fri, 14 Aug 2015 15:05:23 +0800
Subject: [PATCH 1008/1221] MLK-11360-02 input: keyboard: snvs_pwrkey: add
 clock management

Add snvs HP/LP clock management for the driver.

Signed-off-by: Fugang Duan <B38611@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 .../devicetree/bindings/input/snvs-pwrkey.txt      |    5 +++
 drivers/input/keyboard/snvs_pwrkey.c               |   30 ++++++++++++++++++--
 2 files changed, 32 insertions(+), 3 deletions(-)

diff --git a/Documentation/devicetree/bindings/input/snvs-pwrkey.txt b/Documentation/devicetree/bindings/input/snvs-pwrkey.txt
index 8f0826f..ae073fc 100644
--- a/Documentation/devicetree/bindings/input/snvs-pwrkey.txt
+++ b/Documentation/devicetree/bindings/input/snvs-pwrkey.txt
@@ -16,6 +16,11 @@ Required SoC Specific Properties:
 
 - fsl,wakeup: Button can wake-up the system
 
+Optional properties:
+- clocks: phandle to the source clock for snvs register access. If i.MX clk driver
+  defines the clock node, it needs user to specify the clocks in device tree for
+  all modules with snvs LP/HP registers access.
+
 Example:
 snvs-pwrkey@0x020cc000 {
 	compatible = "fsl,imx6sx-snvs-pwrkey";
diff --git a/drivers/input/keyboard/snvs_pwrkey.c b/drivers/input/keyboard/snvs_pwrkey.c
index 35f63af..33f92b1 100644
--- a/drivers/input/keyboard/snvs_pwrkey.c
+++ b/drivers/input/keyboard/snvs_pwrkey.c
@@ -18,6 +18,7 @@
 #include <linux/jiffies.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/clk.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
 #include <linux/platform_device.h>
@@ -31,6 +32,7 @@
 
 struct pwrkey_drv_data {
 	void __iomem *ioaddr;
+	struct clk *clk;
 	int irq;
 	int keycode;
 	int keystate;  /* 1:pressed */
@@ -46,8 +48,10 @@ static void imx_imx_snvs_check_for_events(unsigned long data)
 	void __iomem *ioaddr = pdata->ioaddr;
 	u32 state;
 
+	clk_enable(pdata->clk);
 	state = ((readl_relaxed(ioaddr + SNVS_HPSR_REG) & SNVS_HPSR_BTN) ?
 		1 : 0);
+	clk_disable(pdata->clk);
 
 	/* only report new event if status changed */
 	if (state ^ pdata->keystate) {
@@ -71,6 +75,7 @@ static irqreturn_t imx_snvs_pwrkey_interrupt(int irq, void *dev_id)
 	void __iomem *ioaddr = pdata->ioaddr;
 	u32 lp_status;
 
+	clk_enable(pdata->clk);
 	pm_wakeup_event(pdata->input->dev.parent, 0);
 	lp_status = readl_relaxed(ioaddr + SNVS_LPSR_REG);
 	if (lp_status & SNVS_LPSR_SPO)
@@ -78,6 +83,7 @@ static irqreturn_t imx_snvs_pwrkey_interrupt(int irq, void *dev_id)
 
 	/* clear SPO status */
 	writel_relaxed(lp_status, ioaddr + SNVS_LPSR_REG);
+	clk_disable(pdata->clk);
 
 	return IRQ_HANDLED;
 }
@@ -103,6 +109,12 @@ static int imx_snvs_pwrkey_probe(struct platform_device *pdev)
 	if (IS_ERR(pdata->ioaddr))
 		return PTR_ERR(pdata->ioaddr);
 
+	pdata->clk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(pdata->clk)) {
+		dev_err(&pdev->dev, "can't get snvs clock\n");
+		pdata->clk = NULL;
+	}
+
 	if (of_property_read_u32(np, "fsl,keycode", &pdata->keycode)) {
 		pdata->keycode = KEY_POWER;
 		dev_warn(&pdev->dev, "KEY_POWER without setting in dts\n");
@@ -116,6 +128,12 @@ static int imx_snvs_pwrkey_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
+	ret = clk_prepare_enable(pdata->clk);
+	if (ret) {
+		dev_err(&pdev->dev, "can't enable snvs clock\n");
+		return ret;
+	}
+
 	ioaddr = pdata->ioaddr;
 	val = readl_relaxed(ioaddr + SNVS_LPCR_REG);
 	val |= SNVS_LPCR_DEP_EN,
@@ -134,14 +152,14 @@ static int imx_snvs_pwrkey_probe(struct platform_device *pdev)
 					IRQF_TRIGGER_HIGH | IRQF_NO_SUSPEND, pdev->name, pdev);
 		if (ret) {
 			dev_err(&pdev->dev, "interrupt not available.\n");
-			return ret;
+			goto err_clk;
 		}
 	}
 
 	input = devm_input_allocate_device(&pdev->dev);
 	if (!input) {
 		dev_err(&pdev->dev, "failed to allocate the input device\n");
-		return -ENOMEM;
+		goto err_clk;
 	}
 
 	input->name = pdev->name;
@@ -155,17 +173,22 @@ static int imx_snvs_pwrkey_probe(struct platform_device *pdev)
 	if (ret < 0) {
 		dev_err(&pdev->dev, "failed to register input device\n");
 		input_free_device(input);
-		return ret;
+		goto err_clk;
 	}
 
 	pdata->input = input;
 	platform_set_drvdata(pdev, pdata);
 
 	device_init_wakeup(&pdev->dev, pdata->wakeup);
+	clk_disable(pdata->clk);
 
 	dev_info(&pdev->dev, "i.MX snvs powerkey probed\n");
 
 	return 0;
+
+err_clk:
+	clk_disable_unprepare(pdata->clk);
+	return ret;
 }
 
 static int imx_snvs_pwrkey_remove(struct platform_device *pdev)
@@ -174,6 +197,7 @@ static int imx_snvs_pwrkey_remove(struct platform_device *pdev)
 
 	input_unregister_device(pdata->input);
 	del_timer_sync(&pdata->check_timer);
+	clk_disable_unprepare(pdata->clk);
 
 	return 0;
 }
-- 
1.7.5.4

