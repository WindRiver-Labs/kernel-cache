From 0b2ea8e3b5b1929e294f2369083ce91ed7a1a51b Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Tue, 25 Aug 2015 00:24:20 +0800
Subject: [PATCH 1025/1221] MLK-11401-1 ARM: imx: correct mipi PGC power
 up/down flow

For SW power up/down mipi phy in GPC, below flow should
be executed:

1. map mipi phy to A7 domain;
2. enable mipi phy PGC bit if it is a disable operation;
3. do software power up/down request in GPC;
4. wait for the software request bit clear.

Previous flow is incorrect, as it miss #4 step, correct it.

Signed-off-by: Anson Huang <b20788@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/gpcv2.c |   22 +++++++++++++---------
 1 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/arch/arm/mach-imx/gpcv2.c b/arch/arm/mach-imx/gpcv2.c
index 850e8ee..c7cebf1 100644
--- a/arch/arm/mach-imx/gpcv2.c
+++ b/arch/arm/mach-imx/gpcv2.c
@@ -574,28 +574,32 @@ static int imx_mipi_regulator_notify(struct notifier_block *nb,
 {
 	u32 val = 0;
 
+	val = readl_relaxed(gpc_base + GPC_PGC_CPU_MAPPING);
+	writel_relaxed(val | BIT(2), gpc_base + GPC_PGC_CPU_MAPPING);
+
 	switch (event) {
 	case REGULATOR_EVENT_PRE_ENABLE:
-		val = readl_relaxed(gpc_base + GPC_PGC_CPU_MAPPING);
-		writel_relaxed(val | BIT(2), gpc_base + GPC_PGC_CPU_MAPPING);
-
 		val = readl_relaxed(gpc_base + GPC_PU_PGC_SW_PUP_REQ);
 		writel_relaxed(val | BIT(0), gpc_base + GPC_PU_PGC_SW_PUP_REQ);
+		while (readl_relaxed(gpc_base + GPC_PU_PGC_SW_PUP_REQ) & BIT(0))
+			;
 		break;
 	case REGULATOR_EVENT_PRE_DISABLE:
+		/* only disable phy need to set PGC bit, enable does NOT need */
+		imx_gpcv2_set_m_core_pgc(true, GPC_PGC_MIPI_PHY);
 		val = readl_relaxed(gpc_base + GPC_PU_PGC_SW_PDN_REQ);
 		writel_relaxed(val | BIT(0), gpc_base + GPC_PU_PGC_SW_PDN_REQ);
-
-		val = readl_relaxed(gpc_base + GPC_PGC_MIPI_PHY);
-		writel_relaxed(val | BIT(0), gpc_base + GPC_PGC_MIPI_PHY);
-
-		val = readl_relaxed(gpc_base + GPC_PGC_CPU_MAPPING);
-		writel_relaxed(val & ~BIT(2), gpc_base + GPC_PGC_CPU_MAPPING);
+		while (readl_relaxed(gpc_base + GPC_PU_PGC_SW_PDN_REQ) & BIT(0))
+			;
+		imx_gpcv2_set_m_core_pgc(false, GPC_PGC_MIPI_PHY);
 		break;
 	default:
 		break;
 	}
 
+	val = readl_relaxed(gpc_base + GPC_PGC_CPU_MAPPING);
+	writel_relaxed(val & ~BIT(2), gpc_base + GPC_PGC_CPU_MAPPING);
+
 	return NOTIFY_OK;
 }
 
-- 
1.7.5.4

