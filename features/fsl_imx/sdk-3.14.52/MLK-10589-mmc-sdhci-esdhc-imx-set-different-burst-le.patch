From 0c422cc08c6a20d583dff492c609e2424f6f748d Mon Sep 17 00:00:00 2001
From: Haibo Chen <haibo.chen@freescale.com>
Date: Fri, 3 Apr 2015 19:13:11 +0800
Subject: [PATCH 0334/1221] MLK-10589 mmc: sdhci-esdhc-imx: set different
 burst length on different boards

currently we set burst length from 8 to 16 in our usdhc driver, but
we find if the burst length is 16, the SD3.0 performance on
i.MX6Q-sabreauto and i.MX6QP-sabreauto board will drop a lot.

for TOSHIBA 16GB SDR104 card,
if burst length is 16, the peformance on these two boards is:
	read: 19.4MB/s, write: 13.2MB/s

when burst length is 8, the performance on these two boards is:
	read: 63MB/s,  write: 25.4MB/s

other boards like i.MX6sl-evk, i.MX6sx-sdb and i.MX7D-12x12-arm2
has no this issue.

The root cause still not find on these two boards. So this patch
just change the burst length to 16 for i.MX7d, all i.MX6 series
will remain 8.

Signed-off-by: Haibo Chen <haibo.chen@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/mmc/host/sdhci-esdhc-imx.c |   10 +++++++++-
 1 files changed, 9 insertions(+), 1 deletions(-)

diff --git a/drivers/mmc/host/sdhci-esdhc-imx.c b/drivers/mmc/host/sdhci-esdhc-imx.c
index 2722be0..ce5d7f6 100644
--- a/drivers/mmc/host/sdhci-esdhc-imx.c
+++ b/drivers/mmc/host/sdhci-esdhc-imx.c
@@ -242,6 +242,11 @@ static inline int is_imx6q_usdhc(struct pltfm_imx_data *data)
 	return data->socdata == &usdhc_imx6q_data;
 }
 
+static inline int is_imx7d_usdhc(struct pltfm_imx_data *data)
+{
+	return data->socdata == &usdhc_imx7d_data;
+}
+
 static inline int esdhc_is_usdhc(struct pltfm_imx_data *data)
 {
 	return !!(data->socdata->flags & ESDHC_FLAG_USDHC);
@@ -1127,7 +1132,10 @@ static int sdhci_esdhc_imx_probe(struct platform_device *pdev)
 	 * to something insane.  Change it back here.
 	 */
 	if (esdhc_is_usdhc(imx_data)) {
-		writel(0x10401040, host->ioaddr + ESDHC_WTMK_LVL);
+		if (is_imx7d_usdhc(imx_data))
+			writel(0x10401040, host->ioaddr + ESDHC_WTMK_LVL);
+		else
+			writel(0x08100810, host->ioaddr + ESDHC_WTMK_LVL);
 		host->quirks2 |= SDHCI_QUIRK2_PRESET_VALUE_BROKEN |
 					SDHCI_QUIRK2_NOSTD_TIMEOUT_COUNTER;
 		host->mmc->caps |= MMC_CAP_1_8V_DDR;
-- 
1.7.5.4

