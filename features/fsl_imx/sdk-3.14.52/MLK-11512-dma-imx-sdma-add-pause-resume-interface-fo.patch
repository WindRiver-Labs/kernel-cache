From acf573e2d8836489848dc714f2ca32d4fef34faf Mon Sep 17 00:00:00 2001
From: Robin Gong <b38343@freescale.com>
Date: Fri, 28 Aug 2015 15:44:34 +0800
Subject: [PATCH 1077/1221] MLK-11512 dma: imx-sdma: add pause/resume
 interface for cyclic loop mode

Add new pause/resume interface instead of dma_terminate_all channel before
suspend, that can make less noise during suspend and resume back. Because no
need do any other prepare jobs for dma transfer after terminate this dma
channel. That's only for cyclic mode such as audio loop.

Signed-off-by: Robin Gong <b38343@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/dma/imx-sdma.c |   50 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 50 insertions(+), 0 deletions(-)

diff --git a/drivers/dma/imx-sdma.c b/drivers/dma/imx-sdma.c
index b82ca07..be1c36e 100644
--- a/drivers/dma/imx-sdma.c
+++ b/drivers/dma/imx-sdma.c
@@ -956,6 +956,49 @@ static void sdma_disable_channel(struct sdma_channel *sdmac)
 	writel_relaxed(BIT(channel), sdma->regs + SDMA_H_STATSTOP);
 }
 
+static int sdma_pause_channel(struct sdma_channel *sdmac)
+{
+	struct sdma_engine *sdma = sdmac->sdma;
+	int channel = sdmac->channel;
+	unsigned long flags;
+
+	if (!(sdmac->flags & IMX_DMA_SG_LOOP))
+		return -EINVAL;
+
+	writel_relaxed(BIT(channel), sdma->regs + SDMA_H_STATSTOP);
+
+	spin_lock_irqsave(&sdmac->lock, flags);
+	sdmac->status = DMA_PAUSED;
+	spin_unlock_irqrestore(&sdmac->lock, flags);
+
+	return 0;
+}
+
+static int sdma_resume_channel(struct sdma_channel *sdmac)
+{
+	struct sdma_engine *sdma = sdmac->sdma;
+	unsigned long flags;
+
+	if (!(sdmac->flags & IMX_DMA_SG_LOOP))
+		return -EINVAL;
+	/*
+	 * restore back context since context may loss if mega/fast OFF
+	 */
+	if (!readl_relaxed(sdma->regs + SDMA_H_C0PTR)) {
+		if (sdma_load_context(sdmac)) {
+			dev_err(sdmac->sdma->dev, "context load failed.\n");
+			return -EINVAL;
+		}
+	}
+
+	sdma_enable_channel(sdmac->sdma, sdmac->channel);
+	spin_lock_irqsave(&sdmac->lock, flags);
+	sdmac->status = DMA_IN_PROGRESS;
+	spin_unlock_irqrestore(&sdmac->lock, flags);
+
+	return 0;
+}
+
 static void sdma_set_watermarklevel_for_p2p(struct sdma_channel *sdmac)
 {
 	struct sdma_engine *sdma = sdmac->sdma;
@@ -1557,6 +1600,13 @@ static int sdma_control(struct dma_chan *chan, enum dma_ctrl_cmd cmd,
 	case DMA_TERMINATE_ALL:
 		sdma_disable_channel(sdmac);
 		return 0;
+	/* only support pause/resume on cyclic mode */
+	case DMA_PAUSE:
+		return sdma_pause_channel(sdmac);
+
+	case DMA_RESUME:
+		return sdma_resume_channel(sdmac);
+
 	case DMA_SLAVE_CONFIG:
 		if (dmaengine_cfg->direction == DMA_DEV_TO_MEM) {
 			sdmac->per_address = dmaengine_cfg->src_addr;
-- 
1.7.5.4

