From 06438f4e8fb1c4d763e7528c677f052493e709e2 Mon Sep 17 00:00:00 2001
From: Robin Gong <b38343@freescale.com>
Date: Thu, 11 Jun 2015 15:49:38 +0800
Subject: [PATCH 0988/1221] MLK-11281-14: ARM: imx: restore RC_OSC after LPSR

Restore RC_OSC after LPSR resume back, otherwise,
low power idle will never works normally.

Signed-off-by: Robin Gong <b38343@freescale.com>
Signed-off-by: Anson Huang <b20788@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/cpuidle-imx7d.c |   96 +++++++++++++++++++------------------
 arch/arm/mach-imx/cpuidle.h       |    5 ++
 arch/arm/mach-imx/pm-imx7.c       |    2 +
 3 files changed, 57 insertions(+), 46 deletions(-)

diff --git a/arch/arm/mach-imx/cpuidle-imx7d.c b/arch/arm/mach-imx/cpuidle-imx7d.c
index 08e71ed..13364b9 100644
--- a/arch/arm/mach-imx/cpuidle-imx7d.c
+++ b/arch/arm/mach-imx/cpuidle-imx7d.c
@@ -159,56 +159,13 @@ static struct cpuidle_driver imx7d_cpuidle_driver = {
 	.safe_state_index = 0,
 };
 
-int __init imx7d_cpuidle_init(void)
+int imx7d_enable_rcosc(void)
 {
 	void __iomem *anatop_base =
 		(void __iomem *)IMX_IO_P2V(MX7D_ANATOP_BASE_ADDR);
 	u32 val;
 
-	wfi_iram_base_phys = (void *)(iram_tlb_phys_addr +
-		MX7_CPUIDLE_OCRAM_ADDR_OFFSET);
-
-	/* Make sure wfi_iram_base is 8 byte aligned. */
-	if ((uintptr_t)(wfi_iram_base_phys) & (FNCPY_ALIGN - 1))
-		wfi_iram_base_phys += FNCPY_ALIGN -
-		((uintptr_t)wfi_iram_base_phys % (FNCPY_ALIGN));
-
-	wfi_iram_base = (void *)IMX_IO_P2V((unsigned long) wfi_iram_base_phys);
-
-	cpuidle_pm_info = wfi_iram_base;
-	cpuidle_pm_info->vbase = (phys_addr_t) wfi_iram_base;
-	cpuidle_pm_info->pbase = (phys_addr_t) wfi_iram_base_phys;
-	cpuidle_pm_info->pm_info_size = sizeof(*cpuidle_pm_info);
-	cpuidle_pm_info->resume_addr = virt_to_phys(ca7_cpu_resume);
-	cpuidle_pm_info->cpu1_wfi = 0;
-	cpuidle_pm_info->lpi_enter = 0;
-	/* initialize the last cpu id to invalid here */
-	cpuidle_pm_info->last_cpu = -1;
-
-	cpuidle_pm_info->ddrc_base.pbase = MX7D_DDRC_BASE_ADDR;
-	cpuidle_pm_info->ddrc_base.vbase =
-		(void __iomem *)IMX_IO_P2V(MX7D_DDRC_BASE_ADDR);
-
-	cpuidle_pm_info->ccm_base.pbase = MX7D_CCM_BASE_ADDR;
-	cpuidle_pm_info->ccm_base.vbase =
-		(void __iomem *)IMX_IO_P2V(MX7D_CCM_BASE_ADDR);
-
-	cpuidle_pm_info->anatop_base.pbase = MX7D_ANATOP_BASE_ADDR;
-	cpuidle_pm_info->anatop_base.vbase =
-		(void __iomem *)IMX_IO_P2V(MX7D_ANATOP_BASE_ADDR);
-
-	cpuidle_pm_info->src_base.pbase = MX7D_SRC_BASE_ADDR;
-	cpuidle_pm_info->src_base.vbase =
-		(void __iomem *)IMX_IO_P2V(MX7D_SRC_BASE_ADDR);
-
-	/* code size should include cpuidle_pm_info size */
-	imx7d_wfi_in_iram_fn = (void *)fncpy(wfi_iram_base +
-		sizeof(*cpuidle_pm_info),
-		&imx7d_low_power_idle,
-		MX7_CPUIDLE_OCRAM_SIZE - sizeof(*cpuidle_pm_info));
-
 	imx_gpcv2_set_lpm_mode(WAIT_CLOCKED);
-
 	/* set RC-OSC freq and turn it on */
 	writel_relaxed(0x1 << XTALOSC_CTRL_24M_RC_OSC_EN_SHIFT,
 		anatop_base + XTALOSC_CTRL_24M + REG_SET);
@@ -228,8 +185,8 @@ int __init imx7d_cpuidle_init(void)
 		0x40 << XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR_SHIFT |
 		0x2dc << XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG_SHIFT,
 		anatop_base + XTALOSC24M_OSC_CONFIG1);
-	/* wait 4ms according to hardware design, kernel needs > 20ms */
-	msleep(20);
+	/* wait at least 4ms according to hardware design */
+	mdelay(6);
 	/*
 	 * now add some hysteresis, hyst_plus=3, hyst_minus=3
 	 * (the minimum hysteresis that looks good is 2)
@@ -256,5 +213,52 @@ int __init imx7d_cpuidle_init(void)
 	val = readl_relaxed(anatop_base + XTALOSC24M_OSC_CONFIG1);
 	writel_relaxed(val, anatop_base + XTALOSC24M_OSC_CONFIG1);
 
+	return 0;
+}
+
+int __init imx7d_cpuidle_init(void)
+{
+	wfi_iram_base_phys = (void *)(iram_tlb_phys_addr +
+		MX7_CPUIDLE_OCRAM_ADDR_OFFSET);
+
+	/* Make sure wfi_iram_base is 8 byte aligned. */
+	if ((uintptr_t)(wfi_iram_base_phys) & (FNCPY_ALIGN - 1))
+		wfi_iram_base_phys += FNCPY_ALIGN -
+		((uintptr_t)wfi_iram_base_phys % (FNCPY_ALIGN));
+
+	wfi_iram_base = (void *)IMX_IO_P2V((unsigned long) wfi_iram_base_phys);
+
+	cpuidle_pm_info = wfi_iram_base;
+	cpuidle_pm_info->vbase = (phys_addr_t) wfi_iram_base;
+	cpuidle_pm_info->pbase = (phys_addr_t) wfi_iram_base_phys;
+	cpuidle_pm_info->pm_info_size = sizeof(*cpuidle_pm_info);
+	cpuidle_pm_info->resume_addr = virt_to_phys(ca7_cpu_resume);
+	cpuidle_pm_info->cpu1_wfi = 0;
+	cpuidle_pm_info->lpi_enter = 0;
+	/* initialize the last cpu id to invalid here */
+	cpuidle_pm_info->last_cpu = -1;
+
+	cpuidle_pm_info->ddrc_base.pbase = MX7D_DDRC_BASE_ADDR;
+	cpuidle_pm_info->ddrc_base.vbase =
+		(void __iomem *)IMX_IO_P2V(MX7D_DDRC_BASE_ADDR);
+
+	cpuidle_pm_info->ccm_base.pbase = MX7D_CCM_BASE_ADDR;
+	cpuidle_pm_info->ccm_base.vbase =
+		(void __iomem *)IMX_IO_P2V(MX7D_CCM_BASE_ADDR);
+
+	cpuidle_pm_info->anatop_base.pbase = MX7D_ANATOP_BASE_ADDR;
+	cpuidle_pm_info->anatop_base.vbase =
+		(void __iomem *)IMX_IO_P2V(MX7D_ANATOP_BASE_ADDR);
+
+	cpuidle_pm_info->src_base.pbase = MX7D_SRC_BASE_ADDR;
+	cpuidle_pm_info->src_base.vbase =
+		(void __iomem *)IMX_IO_P2V(MX7D_SRC_BASE_ADDR);
+
+	/* code size should include cpuidle_pm_info size */
+	imx7d_wfi_in_iram_fn = (void *)fncpy(wfi_iram_base +
+		sizeof(*cpuidle_pm_info),
+		&imx7d_low_power_idle,
+		MX7_CPUIDLE_OCRAM_SIZE - sizeof(*cpuidle_pm_info));
+
 	return cpuidle_register(&imx7d_cpuidle_driver, NULL);
 }
diff --git a/arch/arm/mach-imx/cpuidle.h b/arch/arm/mach-imx/cpuidle.h
index c2be762..728404c 100644
--- a/arch/arm/mach-imx/cpuidle.h
+++ b/arch/arm/mach-imx/cpuidle.h
@@ -17,6 +17,7 @@ extern int imx6sl_cpuidle_init(void);
 extern int imx6sx_cpuidle_init(void);
 extern int imx6ul_cpuidle_init(void);
 extern int imx7d_cpuidle_init(void);
+extern int imx7d_enable_rcosc(void);
 #else
 static inline int imx5_cpuidle_init(void)
 {
@@ -42,4 +43,8 @@ static inline int imx7d_cpuidle_init(void)
 {
 	return 0;
 }
+static inline int imx7d_enable_rcosc(void)
+{
+	return 0;
+}
 #endif
diff --git a/arch/arm/mach-imx/pm-imx7.c b/arch/arm/mach-imx/pm-imx7.c
index 5f71265..95a2b17 100644
--- a/arch/arm/mach-imx/pm-imx7.c
+++ b/arch/arm/mach-imx/pm-imx7.c
@@ -37,6 +37,7 @@
 
 #include "common.h"
 #include "hardware.h"
+#include "cpuidle.h"
 
 #define MX7_SUSPEND_OCRAM_SIZE		0x1000
 #define MX7_MAX_DDRC_NUM		32
@@ -710,6 +711,7 @@ static int imx7_pm_enter(suspend_state_t state)
 			imx7_gpt_restore();
 			imx7_sys_counter_restore();
 			imx7_gpio_restore();
+			imx7d_enable_rcosc();
 		}
 		if (imx_gpcv2_is_mf_mix_off() ||
 			imx7_pm_is_resume_from_lpsr()) {
-- 
1.7.5.4

