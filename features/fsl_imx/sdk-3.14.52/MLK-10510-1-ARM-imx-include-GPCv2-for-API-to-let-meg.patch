From 9a3f6869b645e6bd5551c3281fceade5a8bd7574 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Thu, 26 Mar 2015 10:46:51 +0800
Subject: [PATCH 0287/1221] MLK-10510-1 ARM: imx: include GPCv2 for API to let
 mega/fast mix always on

Some drivers have special requirement that Mega/Fast MIX can NOT be off in DSM
and it can NOT be done by wakeup irq enabled, there is already an API to achieve
this which is only for GPCv1, this patch enhance the API to cover GPCv2.

Acked-by: Peter Chen <peter.chen@freescale.com>
Signed-off-by: Anson Huang <b20788@freescale.com>
Signed-off-by: Li Jun <jun.li@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/common.h |    2 ++
 arch/arm/mach-imx/gpc.c    |   12 +++++++++++-
 arch/arm/mach-imx/gpcv2.c  |   19 ++++++++++++++++++-
 3 files changed, 31 insertions(+), 2 deletions(-)

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 8735960..010e5d8 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -98,6 +98,8 @@ unsigned int imx_gpc_is_m4_sleeping(void);
 bool imx_mu_is_m4_in_low_freq(void);
 void imx_gpcv2_set_core1_pdn_pup_by_software(bool pdn);
 unsigned int imx_gpcv2_is_mf_mix_off(void);
+int imx_gpc_mf_power_on(unsigned int irq, unsigned int on);
+int imx_gpcv2_mf_power_on(unsigned int irq, unsigned int on);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */
diff --git a/arch/arm/mach-imx/gpc.c b/arch/arm/mach-imx/gpc.c
index 6072f1d..a47d93d 100644
--- a/arch/arm/mach-imx/gpc.c
+++ b/arch/arm/mach-imx/gpc.c
@@ -291,7 +291,7 @@ static int imx_pcie_regulator_notify(struct notifier_block *nb,
 	return NOTIFY_OK;
 }
 
-int imx_gpc_mf_request_on(unsigned int irq, unsigned int on)
+int imx_gpc_mf_power_on(unsigned int irq, unsigned int on)
 {
 	unsigned int idx = irq / 32 - 1;
 	unsigned long flags;
@@ -305,6 +305,16 @@ int imx_gpc_mf_request_on(unsigned int irq, unsigned int on)
 
 	return 0;
 }
+
+int imx_gpc_mf_request_on(unsigned int irq, unsigned int on)
+{
+	if (cpu_is_imx6sx())
+		return imx_gpc_mf_power_on(irq, on);
+	else if (cpu_is_imx7d())
+		return imx_gpcv2_mf_power_on(irq, on);
+	else
+		return 0;
+}
 EXPORT_SYMBOL_GPL(imx_gpc_mf_request_on);
 
 void __init imx_gpc_init(void)
diff --git a/arch/arm/mach-imx/gpcv2.c b/arch/arm/mach-imx/gpcv2.c
index c0e2de2..198e063 100644
--- a/arch/arm/mach-imx/gpcv2.c
+++ b/arch/arm/mach-imx/gpcv2.c
@@ -100,6 +100,7 @@ static void __iomem *gpc_base;
 static u32 gpcv2_wake_irqs[IMR_NUM];
 static u32 gpcv2_saved_imrs[IMR_NUM];
 static u32 gpcv2_mf_irqs[IMR_NUM];
+static u32 gpcv2_mf_request_on[IMR_NUM];
 static DEFINE_SPINLOCK(gpcv2_lock);
 static struct notifier_block nb_pcie;
 
@@ -315,7 +316,8 @@ static void imx_gpcv2_mf_mix_off(void)
 	int i;
 
 	for (i = 0; i < IMR_NUM; i++)
-		if ((gpcv2_wake_irqs[i] & gpcv2_mf_irqs[i]) != 0)
+		if (((gpcv2_wake_irqs[i] | gpcv2_mf_request_on[i]) &
+						gpcv2_mf_irqs[i]) != 0)
 			return;
 
 	pr_info("Turn off Mega/Fast mix in DSM\n");
@@ -323,6 +325,21 @@ static void imx_gpcv2_mf_mix_off(void)
 	imx_gpcv2_set_m_core_pgc(true, GPC_PGC_FM);
 }
 
+int imx_gpcv2_mf_power_on(unsigned int irq, unsigned int on)
+{
+	unsigned int idx = irq / 32 - 1;
+	unsigned long flags;
+	u32 mask;
+
+	mask = 1 << (irq % 32);
+	spin_lock_irqsave(&gpcv2_lock, flags);
+	gpcv2_mf_request_on[idx] = on ? gpcv2_mf_request_on[idx] | mask :
+				  gpcv2_mf_request_on[idx] & ~mask;
+	spin_unlock_irqrestore(&gpcv2_lock, flags);
+
+	return 0;
+}
+
 void imx_gpcv2_pre_suspend(bool arm_power_off)
 {
 	void __iomem *reg_imr1 = gpc_base + GPC_IMR1_CORE0;
-- 
1.7.5.4

