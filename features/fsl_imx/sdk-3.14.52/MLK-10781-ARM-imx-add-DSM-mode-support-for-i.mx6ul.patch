From ef13a85669762d291eebb5c162535225c3fb84a0 Mon Sep 17 00:00:00 2001
From: Bai Ping <b51503@freescale.com>
Date: Fri, 24 Apr 2015 01:13:35 +0800
Subject: [PATCH 0470/1221] MLK-10781 ARM: imx: add DSM mode support for
 i.mx6ul

Add DSM mode support for i.MX6UL. on i.MX6UL, only the arm core is
differnt from the the i.MX6 family. It is a Cortex-a7 core, The cache
maintenance operations is slightly different from cortex-a9. Most of
the IP like GPC, CCM and SRC is the same as other imx6 processor,
reuse the code for other i.MX6 processor, only add conditon check to
run the code specific to i.MX6UL.

Signed-off-by: Bai Ping <b51503@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/gpc.c          |    4 +-
 arch/arm/mach-imx/pm-imx6.c      |   17 ++++++++--
 arch/arm/mach-imx/suspend-imx6.S |   67 ++++++++++++++++++++++++++++++++++++--
 3 files changed, 80 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-imx/gpc.c b/arch/arm/mach-imx/gpc.c
index 84da4ef..0a82aba 100644
--- a/arch/arm/mach-imx/gpc.c
+++ b/arch/arm/mach-imx/gpc.c
@@ -170,7 +170,7 @@ void imx_gpc_pre_suspend(bool arm_power_off)
 		imx6q_pu_pgc_power_off(&imx6q_pu_domain, true);
 
 	/* Tell GPC to power off ARM core when suspend */
-	if (cpu_is_imx6sx() && arm_power_off)
+	if ((cpu_is_imx6sx() || cpu_is_imx6ul()) && arm_power_off)
 		imx_gpc_mf_mix_off();
 
 	if (arm_power_off)
@@ -193,7 +193,7 @@ void imx_gpc_post_resume(void)
 	/* Keep ARM core powered on for other low-power modes */
 	writel_relaxed(0x0, gpc_base + GPC_PGC_CPU_PDN);
 	/* Keep M/F mix powered on for other low-power modes */
-	if (cpu_is_imx6sx())
+	if (cpu_is_imx6sx() || cpu_is_imx6ul())
 		writel_relaxed(0x0, gpc_base + GPC_PGC_MF_PDN);
 
 	for (i = 0; i < IMR_NUM; i++)
diff --git a/arch/arm/mach-imx/pm-imx6.c b/arch/arm/mach-imx/pm-imx6.c
index 9b32745..3772686 100644
--- a/arch/arm/mach-imx/pm-imx6.c
+++ b/arch/arm/mach-imx/pm-imx6.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2011-2014 Freescale Semiconductor, Inc.
+ * Copyright 2011-2015 Freescale Semiconductor, Inc.
  * Copyright 2011 Linaro Ltd.
  *
  * The code contained herein is licensed under the GNU General Public
@@ -357,9 +357,20 @@ static const u32 imx6sx_mmdc_offset[] __initconst = {
 };
 
 static const u32 imx6ul_mmdc_io_offset[] __initconst = {
+	0x244, 0x248, 0x24c, 0x250, /* DQM0, DQM1, RAS, CAS */
+	0x27c, 0x498, 0x4a4, 0x490, /* SDCLK0, GPR_B0DS-B1DS, GPR_ADDS */
+	0x280, 0x284, 0x260, 0x264, /* SDQS0~1, SODT0, SODT1 */
+	0x494, 0x4b0,	            /* MODE_CTL, MODE, */
 };
 
 static const u32 imx6ul_mmdc_offset[] __initconst = {
+	0x01c, 0x800, 0x80c, 0x83c,
+	0x848, 0x850, 0x81c, 0x820,
+	0x82c, 0x830, 0x8c0, 0x8b8,
+	0x004, 0x008, 0x00c, 0x010,
+	0x014, 0x018, 0x01c, 0x02c,
+	0x030, 0x040, 0x000, 0x01c,
+	0x020, 0x818, 0x01c,
 };
 
 static const struct imx6_pm_socdata imx6q_pm_data __initconst = {
@@ -568,7 +579,7 @@ int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode)
 		val |= BM_CLPCR_SBYOS;
 		if (cpu_is_imx6sl())
 			val |= BM_CLPCR_BYPASS_PMIC_READY;
-		if (cpu_is_imx6sl() || cpu_is_imx6sx())
+		if (cpu_is_imx6sl() || cpu_is_imx6sx() || cpu_is_imx6ul())
 			val |= BM_CLPCR_BYP_MMDC_CH0_LPM_HS;
 		else
 			val |= BM_CLPCR_BYP_MMDC_CH1_LPM_HS;
@@ -1027,7 +1038,7 @@ static int __init imx6q_suspend_init(const struct imx6_pm_socdata *socdata)
 	}
 
 	/* need to overwrite the value for some mmdc registers */
-	if (cpu_is_imx6sx()) {
+	if (cpu_is_imx6sx() || cpu_is_imx6ul()) {
 		pm_info->mmdc_val[20][1] = (pm_info->mmdc_val[20][1]
 			& 0xffff0000) | 0x0202;
 		pm_info->mmdc_val[23][1] = 0x8033;
diff --git a/arch/arm/mach-imx/suspend-imx6.S b/arch/arm/mach-imx/suspend-imx6.S
index cdeff56..a292b3f 100644
--- a/arch/arm/mach-imx/suspend-imx6.S
+++ b/arch/arm/mach-imx/suspend-imx6.S
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2014 Freescale Semiconductor, Inc.
+ * Copyright (C) 2014-2015 Freescale Semiconductor, Inc.
  *
  * The code contained herein is licensed under the GNU General Public
  * License. You may obtain a copy of the GNU General Public License
@@ -83,6 +83,45 @@
 
 	.align 3
 
+	/* Check if the cpu is cortex-a7 */
+	.macro is_cortex_a7
+
+	/* Read the primary cpu number is MPIDR */
+	mrc	p15, 0, r5, c0, c0, 0
+	ldr	r6, =0xfff0
+	and	r5, r5, r6
+	ldr	r6, =0xc070
+	cmp	r5, r6
+
+	.endm
+
+	.macro	disable_l1_cache
+
+	/*
+	 * Flush all data from the L1 data cache before disabling
+	 * SCTLR.C bit.
+	 */
+	push	{r0 - r10, lr}
+	ldr	r7, =v7_flush_dcache_all
+	mov	lr, pc
+	mov	pc, r7
+	pop	{r0 - r10, lr}
+
+	/* disable d-cache */
+	mrc	p15, 0, r7, c1, c0, 0
+	bic	r7, r7, #(1 << 2)
+	mcr	p15, 0, r7, c1, c0, 0
+	dsb
+	isb
+
+	push	{r0 -r10, lr}
+	ldr	r7, = v7_flush_dcache_all
+	mov 	lr, pc
+	mov 	pc , r7
+	pop	{r0 -r10, lr}
+
+	.endm
+
 	.macro  sync_l2_cache
 
 	/* sync L2 cache to drain L2's buffers to DRAM. */
@@ -303,6 +342,9 @@
 	dsb
 	isb
 
+	is_cortex_a7
+	beq	14f
+
 #ifdef CONFIG_CACHE_L2X0
 	ldr	r8, [r0, #PM_INFO_MX6Q_L2_V_OFFSET]
 	mov	r6, #0x0
@@ -311,11 +353,14 @@
 	dsb
 	isb
 #endif
-
+14:
 	.endm
 
 	.macro restore_ttbr1
 
+	is_cortex_a7
+	beq	15f
+
 #ifdef CONFIG_CACHE_L2X0
 	/* Enable L2. */
 	ldr	r8, [r0, #PM_INFO_MX6Q_L2_V_OFFSET]
@@ -323,6 +368,7 @@
 	str	r7, [r8, #0x100]
 #endif
 
+15:
 	/* Enable L1 data cache. */
 	mrc	p15, 0, r6, c1, c0, 0
 	orr	r6, r6, #0x4
@@ -394,9 +440,21 @@ ENTRY(imx6_suspend)
 	str	r9, [r11, #MX6Q_SRC_GPR1]
 	str	r1, [r11, #MX6Q_SRC_GPR2]
 
+	/*
+	 * Check if the cpu is Cortex-A7, for Cortex-A7
+	 * the cache implementation is not the same as
+	 * Cortex-A9, so the cache maintenance operation
+	 * is different.
+	 */
+	is_cortex_a7
+	beq	a7_dache_flush
+
 	/* need to sync L2 cache before DSM. */
 	sync_l2_cache
-
+	b	ttbr_store
+a7_dache_flush:
+	disable_l1_cache
+ttbr_store:
 	store_ttbr1
 
 	ldr	r11, [r0, #PM_INFO_MX6Q_MMDC_V_OFFSET]
@@ -656,6 +714,9 @@ l2x0_saved_regs_offset:
 
 ENTRY(v7_cpu_resume)
 	bl	v7_invalidate_l1
+	is_cortex_a7
+	beq	done
 	pl310_resume
+done:
 	b	cpu_resume
 ENDPROC(v7_cpu_resume)
-- 
1.7.5.4

