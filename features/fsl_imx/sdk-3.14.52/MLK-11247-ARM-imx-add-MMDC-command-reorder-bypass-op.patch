From fcbcdaf808c8b2af19bea2eb662c2371aec7a73d Mon Sep 17 00:00:00 2001
From: Bai Ping <b51503@freescale.com>
Date: Tue, 30 Jun 2015 23:53:38 +0800
Subject: [PATCH 0920/1221] MLK-11247 ARM: imx: add MMDC command reorder
 bypass option on imx6qp

The Bypass 'MMDC ADOPT' option shows better DRAM utilization result.
To fully enable the Bypass MMDC ADOPT option the DRAM low power mode
sequence needs to be updated.

Signed-off-by: Bai Ping <b51503@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/ddr3_freq_imx6.S |   46 +++++++++++++++++++++++++++++++++++-
 1 files changed, 45 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mach-imx/ddr3_freq_imx6.S b/arch/arm/mach-imx/ddr3_freq_imx6.S
index 888e7c7..febc15c 100644
--- a/arch/arm/mach-imx/ddr3_freq_imx6.S
+++ b/arch/arm/mach-imx/ddr3_freq_imx6.S
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2014 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2011-2015 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -25,6 +25,7 @@
 #define MMDC0_MDCF1			0x10
 #define MMDC0_MDMISC		0x18
 #define MMDC0_MDSCR		0x1c
+#define MMDC0_MAARCR		0x400
 #define MMDC0_MAPSR			0x404
 #define MMDC0_MADPCR0		0x410
 #define MMDC0_MPZQHWCTRL	0x800
@@ -43,6 +44,9 @@
 
 #define L2_CACHE_SYNC		0x730
 
+#define IMX6QP_REVISION_ID 0x630100
+#define ANADIG_DIGPROG     0x260
+
 .extern iram_tlb_phys_addr
 #ifdef CONFIG_SMP
 .extern imx_scu_base
@@ -55,6 +59,16 @@
 
 	.align 3
 
+	.macro is_mx6qp
+
+	/* check if the SOC is i.MX6QP */
+	ldr	r0, =IMX_IO_P2V(MX6Q_ANATOP_BASE_ADDR)
+	ldr	r1, [r0, #ANADIG_DIGPROG]
+	ldr	r2, =IMX6QP_REVISION_ID
+	cmp	r1, r2
+
+	.endm
+
 	.macro	switch_to_528MHz
 
 	/* check if periph_clk_sel is already set */
@@ -509,6 +523,14 @@ poll_conreq_set_1:
 	cmp	r0, #(0x4 << 12)
 	bne	poll_conreq_set_1
 
+	is_mx6qp
+	bne	1f
+	/* Switch to adopt mode, set MMDC0_MAARCR bit25~26 to 2b'01 */
+	ldr	r0, [r5, #MMDC0_MAARCR]
+	bic	r0, r0, #(0x3 << 25)
+	orr	r0, #(0x01 << 25)
+	str	r0 , [r5, #MMDC0_MAARCR]
+1:
 	ldr	r0, =0x00008050
 	str	r0, [r5, #MMDC0_MDSCR]
 	ldr	r0, =0x00008058
@@ -706,6 +728,17 @@ continue_dll_off_3:
 	bic	r0, r0, #(0x1 << 8)
 	str	r0, [r5, #MMDC0_MADPCR0]
 
+	is_mx6qp
+	bne	2f
+	/*
+	 * Switch back to adopt_bp mode, set MMDC0_MAARCR
+	 * bit25~26 to 2b'10.
+	 */
+	ldr	r0, [r5, #MMDC0_MAARCR]
+	bic	r0, r0, #(0x3 << 25)
+	orr	r0, r0, #(0x2 << 25)
+	str	r0, [r5, #MMDC0_MAARCR]
+2:
 	mov	r0, #0x0
 	str	r0, [r5, #MMDC0_MDSCR]
 poll_conreq_clear_1:
@@ -970,6 +1003,17 @@ update_calib:
 	bic	r0, r0, #(1 << 8)
 	str	r0, [r5, #MMDC0_MADPCR0]
 
+	is_mx6qp
+	bne	3f
+	/*
+	 * Switch back to adopt_bp mode, set MMDC0_MAARCR
+	 * bit25~26 to 2b'10.
+	 */
+	ldr	r0, [r5, #MMDC0_MAARCR]
+	bic	r0, r0, #(0x3 << 25)
+	orr	r0, r0, #(0x2 << 25)
+	str	r0, [r5, #MMDC0_MAARCR]
+3:
 	mov	r0, #0x0
 	str	r0, [r5, #MMDC0_MDSCR]
 poll_conreq_clear_2:
-- 
1.7.5.4

