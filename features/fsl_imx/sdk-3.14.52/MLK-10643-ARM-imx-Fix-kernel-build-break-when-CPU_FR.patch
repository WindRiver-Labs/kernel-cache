From fc31512cac0b30a6c093c5bcbb7eabe79131b80b Mon Sep 17 00:00:00 2001
From: Ranjani Vaidyanathan <Ranjani.Vaidyanathan@freescale.com>
Date: Thu, 9 Apr 2015 15:50:07 -0500
Subject: [PATCH 0428/1221] MLK-10643 ARM:imx:Fix kernel build break when
 CPU_FREQ or CPU_IDLE is not defined.

Kernel build fails when CPU_FREQ or CPU_IDLE is disabled in the kernel config.
This patch fixes the problem.
When CPU_FREQ is disabled the system will run at the frequency setup by
uboot.

Signed-off-by: Ranjani Vaidyanathan <Ranjani.Vaidyanathan@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/busfreq-imx6.c   |   45 +++++++++++++++++++++++++++-----
 arch/arm/mach-imx/busfreq_ddr3.c   |    9 ++++--
 arch/arm/mach-imx/busfreq_lpddr2.c |    6 ++--
 arch/arm/mach-imx/clk-imx6sl.c     |    7 +++--
 arch/arm/mach-imx/cpuidle-imx6sl.c |   15 +++++++---
 arch/arm/mach-imx/cpuidle-imx6sx.c |   50 +++++++++++++++++------------------
 arch/arm/mach-imx/mach-imx6q.c     |    2 +
 arch/arm/mach-imx/mach-imx6sl.c    |    4 ++-
 arch/arm/mach-imx/mach-imx6sx.c    |    2 +
 include/linux/busfreq-imx6.h       |   42 +++++++++++++++++++++++++++++-
 10 files changed, 133 insertions(+), 49 deletions(-)

diff --git a/arch/arm/mach-imx/busfreq-imx6.c b/arch/arm/mach-imx/busfreq-imx6.c
index d185fa7..288582e 100644
--- a/arch/arm/mach-imx/busfreq-imx6.c
+++ b/arch/arm/mach-imx/busfreq-imx6.c
@@ -58,18 +58,19 @@
 #define	MMDC_MDMISC_DDR_TYPE_DDR3	0
 #define	MMDC_MDMISC_DDR_TYPE_LPDDR2	1
 
-static int ddr_type;
-int high_bus_freq_mode;
-int med_bus_freq_mode;
-int audio_bus_freq_mode;
-int low_bus_freq_mode;
-int ultra_low_bus_freq_mode;
+
 unsigned int ddr_med_rate;
 unsigned int ddr_normal_rate;
 unsigned long ddr_freq_change_total_size;
 unsigned long ddr_freq_change_iram_base;
 unsigned long ddr_freq_change_iram_phys;
 
+static int ddr_type;
+static int low_bus_freq_mode;
+static int audio_bus_freq_mode;
+static int ultra_low_bus_freq_mode;
+static int high_bus_freq_mode;
+static int med_bus_freq_mode;
 static int bus_freq_scaling_initialized;
 static struct device *busfreq_dev;
 static int busfreq_suspended;
@@ -77,6 +78,7 @@ static u32 org_arm_rate;
 static int bus_freq_scaling_is_active;
 static int high_bus_count, med_bus_count, audio_bus_count, low_bus_count;
 static unsigned int ddr_low_rate;
+static int cur_bus_freq_mode;
 
 extern unsigned long iram_tlb_phys_addr;
 extern int unsigned long iram_tlb_base_addr;
@@ -198,6 +200,7 @@ static void enter_lpm_imx6sx(void)
 		}
 		audio_bus_freq_mode = 1;
 		low_bus_freq_mode = 0;
+		cur_bus_freq_mode = BUS_FREQ_AUDIO;
 	} else {
 		if (ddr_type == MMDC_MDMISC_DDR_TYPE_DDR3)
 			update_ddr_freq_imx6sx(LPAPM_CLK);
@@ -210,6 +213,7 @@ static void enter_lpm_imx6sx(void)
 			clk_disable_unprepare(pll2_400);
 		low_bus_freq_mode = 1;
 		audio_bus_freq_mode = 0;
+		cur_bus_freq_mode = BUS_FREQ_LOW;
 	}
 }
 
@@ -306,6 +310,7 @@ static void enter_lpm_imx6sl(void)
 		low_bus_freq_mode = 0;
 		ultra_low_bus_freq_mode = 0;
 		audio_bus_freq_mode = 1;
+		cur_bus_freq_mode = BUS_FREQ_AUDIO;
 	} else {
 		u32 arm_div, pll1_rate;
 		org_arm_rate = clk_get_rate(cpu_clk);
@@ -319,6 +324,7 @@ static void enter_lpm_imx6sl(void)
 			ultra_low_bus_freq_mode = 1;
 			low_bus_freq_mode = 0;
 			audio_bus_freq_mode = 0;
+			cur_bus_freq_mode = BUS_FREQ_ULTRA_LOW;
 		} else {
 			if (!ultra_low_bus_freq_mode && !low_bus_freq_mode) {
 				/*
@@ -376,14 +382,15 @@ static void enter_lpm_imx6sl(void)
 				imx_clk_set_parent(pll2_bypass, pll2_bypass_src);
 				imx_clk_set_parent(periph2_clk2_sel, pll2_bus);
 				imx_clk_set_parent(periph2_clk, periph2_clk2);
-
 			}
 			if (low_bus_count == 0) {
 				ultra_low_bus_freq_mode = 1;
 				low_bus_freq_mode = 0;
+				cur_bus_freq_mode = BUS_FREQ_ULTRA_LOW;
 			} else {
 				ultra_low_bus_freq_mode = 0;
 				low_bus_freq_mode = 1;
+				cur_bus_freq_mode = BUS_FREQ_LOW;
 			}
 			audio_bus_freq_mode = 0;
 		}
@@ -454,6 +461,7 @@ static void reduce_bus_freq(void)
 			imx_clk_set_parent(periph_clk, periph_pre_clk);
 			audio_bus_freq_mode = 1;
 			low_bus_freq_mode = 0;
+			cur_bus_freq_mode = BUS_FREQ_AUDIO;
 		} else {
 			update_ddr_freq_imx6q(LPAPM_CLK);
 			/* Make sure periph clk's parent also got updated */
@@ -464,6 +472,7 @@ static void reduce_bus_freq(void)
 				clk_disable_unprepare(pll2_400);
 			low_bus_freq_mode = 1;
 			audio_bus_freq_mode = 0;
+			cur_bus_freq_mode = BUS_FREQ_LOW;
 		}
 	}
 	clk_disable_unprepare(pll3);
@@ -587,6 +596,7 @@ static int set_high_bus_freq(int high_bus_freq)
 	med_bus_freq_mode = 0;
 	low_bus_freq_mode = 0;
 	audio_bus_freq_mode = 0;
+	cur_bus_freq_mode = BUS_FREQ_HIGH;
 
 	clk_disable_unprepare(pll3);
 	if (high_bus_freq_mode)
@@ -605,6 +615,13 @@ void request_bus_freq(enum bus_freq_mode mode)
 {
 	mutex_lock(&bus_freq_mutex);
 
+	if (mode == BUS_FREQ_ULTRA_LOW) {
+		dev_dbg(busfreq_dev, "This mode is automatically entered, cannot \
+			be requested.\n");
+		mutex_unlock(&bus_freq_mutex);
+		return;
+	}
+
 	if (mode == BUS_FREQ_HIGH)
 		high_bus_count++;
 	else if (mode == BUS_FREQ_MED)
@@ -656,6 +673,13 @@ void release_bus_freq(enum bus_freq_mode mode)
 {
 	mutex_lock(&bus_freq_mutex);
 
+	if (mode == BUS_FREQ_ULTRA_LOW) {
+		dev_dbg(busfreq_dev, "This mode is automatically entered, cannot \
+			be released.\n");
+		mutex_unlock(&bus_freq_mutex);
+		return;
+	}
+
 	if (mode == BUS_FREQ_HIGH) {
 		if (high_bus_count == 0) {
 			dev_err(busfreq_dev, "high bus count mismatch!\n");
@@ -730,6 +754,12 @@ void release_bus_freq(enum bus_freq_mode mode)
 }
 EXPORT_SYMBOL(release_bus_freq);
 
+int get_bus_freq_mode(void)
+{
+	return cur_bus_freq_mode;
+}
+EXPORT_SYMBOL(get_bus_freq_mode);
+
 static struct map_desc ddr_iram_io_desc __initdata = {
 	/* .virtual and .pfn are run-time assigned */
 	.length		= SZ_1M,
@@ -1124,6 +1154,7 @@ static int busfreq_probe(struct platform_device *pdev)
 	low_bus_freq_mode = 0;
 	audio_bus_freq_mode = 0;
 	ultra_low_bus_freq_mode = 0;
+	cur_bus_freq_mode = BUS_FREQ_HIGH;
 
 	bus_freq_scaling_is_active = 1;
 	bus_freq_scaling_initialized = 1;
diff --git a/arch/arm/mach-imx/busfreq_ddr3.c b/arch/arm/mach-imx/busfreq_ddr3.c
index b84c9d8..0bba9f6 100644
--- a/arch/arm/mach-imx/busfreq_ddr3.c
+++ b/arch/arm/mach-imx/busfreq_ddr3.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2014 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2011-2015 Freescale Semiconductor, Inc. All Rights Reserved.
  */
 
 /*
@@ -24,6 +24,7 @@
 #include <asm/mach/map.h>
 #include <asm/mach-types.h>
 #include <asm/tlb.h>
+#include <linux/busfreq-imx6.h>
 #include <linux/clk.h>
 #include <linux/clockchips.h>
 #include <linux/cpumask.h>
@@ -244,13 +245,14 @@ int update_ddr_freq_imx6sx(int ddr_rate)
 	int i;
 	bool dll_off = false;
 	unsigned long ttbr1;
+	int mode = get_bus_freq_mode();
 
 	if (ddr_rate == curr_ddr_rate)
 		return 0;
 
 	printk(KERN_DEBUG "\nBus freq set to %d start...\n", ddr_rate);
 
-	if (low_bus_freq_mode || audio_bus_freq_mode)
+	if ((mode == BUS_FREQ_LOW) || (mode == BUS_FREQ_AUDIO))
 		dll_off = true;
 
 	imx6sx_busfreq_info->dll_off = dll_off;
@@ -294,6 +296,7 @@ int update_ddr_freq_imx6q(int ddr_rate)
 	unsigned int reg;
 	int cpu = 0;
 #endif
+	int mode = get_bus_freq_mode();
 
 	if (!can_change_ddr_freq())
 		return -1;
@@ -303,7 +306,7 @@ int update_ddr_freq_imx6q(int ddr_rate)
 
 	printk(KERN_DEBUG "\nBus freq set to %d start...\n", ddr_rate);
 
-	if (low_bus_freq_mode || audio_bus_freq_mode)
+	if ((mode == BUS_FREQ_LOW) || (mode == BUS_FREQ_AUDIO))
 		dll_off = true;
 
 	iram_ddr_settings[0][0] = ddr_settings_size;
diff --git a/arch/arm/mach-imx/busfreq_lpddr2.c b/arch/arm/mach-imx/busfreq_lpddr2.c
index 757001e..b000051 100644
--- a/arch/arm/mach-imx/busfreq_lpddr2.c
+++ b/arch/arm/mach-imx/busfreq_lpddr2.c
@@ -24,6 +24,7 @@
 #include <asm/mach/map.h>
 #include <asm/mach-types.h>
 #include <asm/tlb.h>
+#include <linux/busfreq-imx6.h>
 #include <linux/clk.h>
 #include <linux/cpumask.h>
 #include <linux/delay.h>
@@ -50,8 +51,6 @@ static DEFINE_SPINLOCK(freq_lock);
 void (*mx6_change_lpddr2_freq)(u32 ddr_freq, int bus_freq_mode) = NULL;
 
 extern unsigned int ddr_normal_rate;
-extern int low_bus_freq_mode;
-extern int ultra_low_bus_freq_mode;
 extern void mx6_lpddr2_freq_change(u32 freq, int bus_freq_mode);
 extern void imx6sx_lpddr2_freq_change(u32 freq, int bus_freq_mode);
 extern unsigned long save_ttbr1(void);
@@ -64,6 +63,7 @@ extern unsigned long imx6_lpddr2_freq_change_end asm("imx6_lpddr2_freq_change_en
 int update_lpddr2_freq(int ddr_rate)
 {
 	unsigned long ttbr1, flags;
+	int mode = get_bus_freq_mode();
 
 	if (ddr_rate == curr_ddr_rate)
 		return 0;
@@ -79,7 +79,7 @@ int update_lpddr2_freq(int ddr_rate)
 
 	/* Now change DDR frequency. */
 	mx6_change_lpddr2_freq(ddr_rate,
-		(low_bus_freq_mode | ultra_low_bus_freq_mode));
+		(mode == BUS_FREQ_LOW || mode == BUS_FREQ_ULTRA_LOW) ? 1 : 0);
 	restore_ttbr1(ttbr1);
 
 	curr_ddr_rate = ddr_rate;
diff --git a/arch/arm/mach-imx/clk-imx6sl.c b/arch/arm/mach-imx/clk-imx6sl.c
index 5265b70..ab20082 100644
--- a/arch/arm/mach-imx/clk-imx6sl.c
+++ b/arch/arm/mach-imx/clk-imx6sl.c
@@ -7,6 +7,7 @@
  *
  */
 
+#include <linux/busfreq-imx6.h>
 #include <linux/clk.h>
 #include <linux/clkdev.h>
 #include <linux/err.h>
@@ -113,7 +114,6 @@ static const u32 clks_init_on[] __initconst = {
 	IMX6SL_CLK_IPG, IMX6SL_CLK_ARM, IMX6SL_CLK_MMDC_ROOT,
 };
 
-extern int low_bus_freq_mode;
 /*
  * ERR005311 CCM: After exit from WAIT mode, unwanted interrupt(s) taken
  *           during WAIT mode entry process could cause cache memory
@@ -154,6 +154,7 @@ void imx6sl_set_wait_clk(bool enter)
 	static unsigned long saved_arm_div;
 	u32 val;
 	int arm_div_for_wait = imx6sl_get_arm_divider_for_wait();
+	int mode = get_bus_freq_mode();
 
 	if (enter) {
 		/*
@@ -162,7 +163,7 @@ void imx6sl_set_wait_clk(bool enter)
 		 * from the 24MHz OSC, as there is no way to get
 		 * 28.8MHz, when ARM is sourced from PLl1.
 		 */
-		if (low_bus_freq_mode) {
+		if (mode == BUS_FREQ_LOW) {
 			val = readl_relaxed(ccm_base + CCSR);
 			val |= BM_CCSR_PLL1_SW_CLK_SEL;
 			writel_relaxed(val, ccm_base + CCSR);
@@ -171,7 +172,7 @@ void imx6sl_set_wait_clk(bool enter)
 			writel_relaxed(arm_div_for_wait, ccm_base + CACRR);
 		}
 	} else {
-		if (low_bus_freq_mode) {
+		if (mode == BUS_FREQ_LOW) {
 			val = readl_relaxed(ccm_base + CCSR);
 			val &= ~BM_CCSR_PLL1_SW_CLK_SEL;
 			writel_relaxed(val, ccm_base + CCSR);
diff --git a/arch/arm/mach-imx/cpuidle-imx6sl.c b/arch/arm/mach-imx/cpuidle-imx6sl.c
index ee15500..38d98d1 100644
--- a/arch/arm/mach-imx/cpuidle-imx6sl.c
+++ b/arch/arm/mach-imx/cpuidle-imx6sl.c
@@ -6,6 +6,7 @@
  * published by the Free Software Foundation.
  */
 
+#include <linux/busfreq-imx6.h>
 #include <linux/cpuidle.h>
 #include <linux/module.h>
 #include <linux/platform_device.h>
@@ -24,10 +25,11 @@
 
 static void __iomem *wfi_iram_base;
 extern unsigned long iram_tlb_base_addr;
-extern int ultra_low_bus_freq_mode;
-extern int audio_bus_freq_mode;
+
+#ifdef CONFIG_CPU_FREQ
 extern unsigned long mx6sl_lpm_wfi_start asm("mx6sl_lpm_wfi_start");
 extern unsigned long mx6sl_lpm_wfi_end asm("mx6sl_lpm_wfi_end");
+#endif
 
 struct imx6_cpuidle_pm_info {
 	u32 pm_info_size; /* Size of pm_info */
@@ -64,9 +66,11 @@ static void (*imx6sl_wfi_in_iram_fn)(void __iomem *iram_vbase,
 static int imx6sl_enter_wait(struct cpuidle_device *dev,
 			    struct cpuidle_driver *drv, int index)
 {
+	int mode = get_bus_freq_mode();
+
 	imx6q_set_lpm(WAIT_UNCLOCKED);
-	if (audio_bus_freq_mode || ultra_low_bus_freq_mode) {
-		imx6sl_wfi_in_iram_fn(wfi_iram_base, audio_bus_freq_mode,
+	if ((mode == BUS_FREQ_AUDIO) || (mode == BUS_FREQ_ULTRA_LOW)) {
+		imx6sl_wfi_in_iram_fn(wfi_iram_base, (mode == BUS_FREQ_AUDIO) ? 1 : 0 ,
 			regulator_is_enabled(vbus_ldo));
 	} else {
 		/*
@@ -105,6 +109,7 @@ static struct cpuidle_driver imx6sl_cpuidle_driver = {
 
 int __init imx6sl_cpuidle_init(void)
 {
+#ifdef CONFIG_CPU_FREQ
 	struct imx6_cpuidle_pm_info *pm_info;
 	int i;
 	const u32 *mmdc_offset_array;
@@ -139,7 +144,7 @@ int __init imx6sl_cpuidle_init(void)
 
 	imx6sl_wfi_in_iram_fn = (void *)fncpy(wfi_iram_base + sizeof(*pm_info),
 		&imx6sl_low_power_wfi, wfi_code_size);
-
+#endif
 	return cpuidle_register(&imx6sl_cpuidle_driver, NULL);
 }
 
diff --git a/arch/arm/mach-imx/cpuidle-imx6sx.c b/arch/arm/mach-imx/cpuidle-imx6sx.c
index 430d769..18f25fd 100644
--- a/arch/arm/mach-imx/cpuidle-imx6sx.c
+++ b/arch/arm/mach-imx/cpuidle-imx6sx.c
@@ -1,11 +1,12 @@
 /*
- * Copyright (C) 2014 Freescale Semiconductor, Inc.
+ * Copyright (C) 2014-2015 Freescale Semiconductor, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
 
+#include <linux/busfreq-imx6.h>
 #include <linux/cpuidle.h>
 #include <linux/cpu_pm.h>
 #include <linux/delay.h>
@@ -45,12 +46,14 @@
 #define XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_MASK	0xfff
 #define XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_SHIFT	0
 
+extern unsigned long iram_tlb_phys_addr;
+
 static void __iomem *wfi_iram_base;
+#ifdef CONFIG_CPU_FREQ
 static void __iomem *wfi_iram_base_phys;
-extern unsigned long iram_tlb_phys_addr;
 extern unsigned long mx6sx_lpm_wfi_start asm("mx6sx_lpm_wfi_start");
 extern unsigned long mx6sx_lpm_wfi_end asm("mx6sx_lpm_wfi_end");
-extern u32 low_bus_freq_mode;
+#endif
 
 struct imx6_pm_base {
 	phys_addr_t pbase;
@@ -95,8 +98,10 @@ static int imx6_idle_finish(unsigned long val)
 static int imx6sx_enter_wait(struct cpuidle_device *dev,
 			    struct cpuidle_driver *drv, int index)
 {
+	int mode = get_bus_freq_mode();
+
 	imx6q_set_lpm(WAIT_UNCLOCKED);
-	if ((index == 1) || (!low_bus_freq_mode && index == 2)) {
+	if ((index == 1) || ((mode != BUS_FREQ_LOW) && index == 2)) {
 		cpu_do_idle();
 	} else {
 			/* Need to notify there is a cpu pm operation. */
@@ -144,7 +149,6 @@ static struct cpuidle_driver imx6sx_cpuidle_driver = {
 			.name = "LOW-POWER-IDLE",
 			.desc = "ARM power off",
 		},
-
 	},
 	.state_count = 3,
 	.safe_state_index = 0,
@@ -152,10 +156,13 @@ static struct cpuidle_driver imx6sx_cpuidle_driver = {
 
 int __init imx6sx_cpuidle_init(void)
 {
+	void __iomem *anatop_base = (void __iomem *)IMX_IO_P2V(MX6Q_ANATOP_BASE_ADDR);
+	u32 val;
+#ifdef CONFIG_CPU_FREQ
 	struct imx6_cpuidle_pm_info *cpuidle_pm_info;
 	int i;
 	const u32 *mmdc_offset_array;
-	u32 wfi_code_size, val;
+	u32 wfi_code_size;
 
 	wfi_iram_base_phys = (void *)(iram_tlb_phys_addr + MX6_CPUIDLE_IRAM_ADDR_OFFSET);
 
@@ -205,6 +212,7 @@ int __init imx6sx_cpuidle_init(void)
 	wfi_code_size = (&mx6sx_lpm_wfi_end -&mx6sx_lpm_wfi_start) *4 + sizeof(*cpuidle_pm_info);
 	imx6sx_wfi_in_iram_fn = (void *)fncpy(wfi_iram_base + sizeof(*cpuidle_pm_info),
 		&imx6sx_low_power_idle, wfi_code_size);
+#endif
 
 	imx6q_set_int_mem_clk_lpm(true);
 
@@ -214,11 +222,9 @@ int __init imx6sx_cpuidle_init(void)
 		 * be stable, low power idle flow can NOT endure this big
 		 * latency, so we make RC-OSC self-tuning enabled here.
 		 */
-		val = readl_relaxed(cpuidle_pm_info->anatop_base.vbase +
-			PMU_LOW_PWR_CTRL);
+		val = readl_relaxed(anatop_base + PMU_LOW_PWR_CTRL);
 		val |= 0x1;
-		writel_relaxed(val, cpuidle_pm_info->anatop_base.vbase +
-			PMU_LOW_PWR_CTRL);
+		writel_relaxed(val, anatop_base + PMU_LOW_PWR_CTRL);
 		/*
 		 * config RC-OSC freq
 		 * tune_enable = 1;tune_start = 1;hyst_plus = 0;hyst_minus = 0;
@@ -229,47 +235,39 @@ int __init imx6sx_cpuidle_init(void)
 			0xa7 << XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_SHIFT |
 			0x1 << XTALOSC24M_OSC_CONFIG0_ENABLE_SHIFT |
 			0x1 << XTALOSC24M_OSC_CONFIG0_START_SHIFT,
-			cpuidle_pm_info->anatop_base.vbase +
-			XTALOSC24M_OSC_CONFIG0);
+			anatop_base + XTALOSC24M_OSC_CONFIG0);
 		/* set count_trg = 0x2dc */
 		writel_relaxed(
 			0x40 << XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR_SHIFT |
 			0x2dc << XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG_SHIFT,
-			cpuidle_pm_info->anatop_base.vbase +
-			XTALOSC24M_OSC_CONFIG1);
+			anatop_base + XTALOSC24M_OSC_CONFIG1);
 		/* wait 4ms according to hardware design */
 		msleep(4);
 		/*
 		 * now add some hysteresis, hyst_plus=3, hyst_minus=3
 		 * (the minimum hysteresis that looks good is 2)
 		 */
-		val = readl_relaxed(cpuidle_pm_info->anatop_base.vbase +
-			XTALOSC24M_OSC_CONFIG0);
+		val = readl_relaxed(anatop_base + XTALOSC24M_OSC_CONFIG0);
 		val &= ~((XTALOSC24M_OSC_CONFIG0_HYST_MINUS_MASK <<
 			XTALOSC24M_OSC_CONFIG0_HYST_MINUS_SHIFT) |
 			(XTALOSC24M_OSC_CONFIG0_HYST_PLUS_MASK <<
 			XTALOSC24M_OSC_CONFIG0_HYST_PLUS_SHIFT));
 		val |= (0x3 << XTALOSC24M_OSC_CONFIG0_HYST_MINUS_SHIFT) |
 			(0x3 << XTALOSC24M_OSC_CONFIG0_HYST_PLUS_SHIFT);
-		writel_relaxed(val, cpuidle_pm_info->anatop_base.vbase +
-			XTALOSC24M_OSC_CONFIG0);
+		writel_relaxed(val, anatop_base  + XTALOSC24M_OSC_CONFIG0);
 		/* set the count_1m_trg = 0x2d7 */
-		val = readl_relaxed(cpuidle_pm_info->anatop_base.vbase +
-			XTALOSC24M_OSC_CONFIG2);
+		val = readl_relaxed(anatop_base  + XTALOSC24M_OSC_CONFIG2);
 		val &= ~(XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_MASK <<
 			XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_SHIFT);
 		val |= 0x2d7 << XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_SHIFT;
-		writel_relaxed(val, cpuidle_pm_info->anatop_base.vbase +
-			XTALOSC24M_OSC_CONFIG2);
+		writel_relaxed(val, anatop_base  + XTALOSC24M_OSC_CONFIG2);
 		/*
 		 * hardware design require to write XTALOSC24M_OSC_CONFIG0 or
 		 * XTALOSC24M_OSC_CONFIG1 to
 		 * make XTALOSC24M_OSC_CONFIG2 write work
 		 */
-		val = readl_relaxed(cpuidle_pm_info->anatop_base.vbase +
-			XTALOSC24M_OSC_CONFIG1);
-		writel_relaxed(val, cpuidle_pm_info->anatop_base.vbase +
-			XTALOSC24M_OSC_CONFIG1);
+		val = readl_relaxed(anatop_base  + XTALOSC24M_OSC_CONFIG1);
+		writel_relaxed(val, anatop_base  + XTALOSC24M_OSC_CONFIG1);
 	}
 
 	return cpuidle_register(&imx6sx_cpuidle_driver, NULL);
diff --git a/arch/arm/mach-imx/mach-imx6q.c b/arch/arm/mach-imx/mach-imx6q.c
index a5d0861..b78bc71 100644
--- a/arch/arm/mach-imx/mach-imx6q.c
+++ b/arch/arm/mach-imx/mach-imx6q.c
@@ -601,7 +601,9 @@ static void __init imx6q_map_io(void)
 	debug_ll_io_init();
 	imx_scu_map_io();
 	imx6_pm_map_io();
+#ifdef CONFIG_CPU_FREQ
 	imx6_busfreq_map_io();
+#endif
 }
 
 static void __init imx6q_init_irq(void)
diff --git a/arch/arm/mach-imx/mach-imx6sl.c b/arch/arm/mach-imx/mach-imx6sl.c
index 9fc399b..b136b73 100644
--- a/arch/arm/mach-imx/mach-imx6sl.c
+++ b/arch/arm/mach-imx/mach-imx6sl.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013-2014 Freescale Semiconductor, Inc.
+ * Copyright (C) 2013-2015 Freescale Semiconductor, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -84,7 +84,9 @@ static void __init imx6sl_map_io(void)
 {
 	debug_ll_io_init();
 	imx6_pm_map_io();
+#ifdef CONFIG_CPU_FREQ
 	imx6_busfreq_map_io();
+#endif
 }
 
 DT_MACHINE_START(IMX6SL, "Freescale i.MX6 SoloLite (Device Tree)")
diff --git a/arch/arm/mach-imx/mach-imx6sx.c b/arch/arm/mach-imx/mach-imx6sx.c
index 7f5188f..70a30f7 100755
--- a/arch/arm/mach-imx/mach-imx6sx.c
+++ b/arch/arm/mach-imx/mach-imx6sx.c
@@ -327,7 +327,9 @@ static void __init imx6sx_map_io(void)
 {
 	debug_ll_io_init();
 	imx6_pm_map_io();
+#ifdef CONFIG_CPU_FREQ
 	imx6_busfreq_map_io();
+#endif
 }
 
 DT_MACHINE_START(IMX6SX, "Freescale i.MX6 SoloX (Device Tree)")
diff --git a/include/linux/busfreq-imx6.h b/include/linux/busfreq-imx6.h
index 46d9cba..85b8b38 100644
--- a/include/linux/busfreq-imx6.h
+++ b/include/linux/busfreq-imx6.h
@@ -10,22 +10,62 @@
 #define __ASM_ARCH_MXC_BUSFREQ_H__
 
 #include <linux/notifier.h>
+
 /*
- * This enumerates busfreq mode.
+ * This enumerates busfreq low power mode entry and exit.
  */
 enum busfreq_event {
 	LOW_BUSFREQ_ENTER,
 	LOW_BUSFREQ_EXIT,
 };
 
+/*
+  * This enumerates the system bus and ddr frequencies in various modes.
+  * BUS_FREQ_HIGH - DDR @ 528MHz, AHB @ 132MHz.
+  * BUS_FREQ_MED - DDR @ 400MHz, AHB @ 132MHz
+  * BUS_FREQ_AUDIO - DDR @ 50MHz/100MHz, AHB @ 24MHz.
+  * BUS_FREQ_LOW  - DDR @ 24MHz, AHB @ 24MHz.
+  * BUS_FREQ_ULTRA_LOW - DDR @ 1MHz, AHB - 3MHz.
+  *
+  * Drivers need to request/release the bus/ddr frequencies based on their performance
+  * requirements. Drivers cannot request/release BUS_FREQ_ULTRA_LOW mode as
+  * this mode is automatically entered from either BUS_FREQ_AUDIO or BUS_FREQ_LOW
+  * modes.
+  */
 enum bus_freq_mode {
 	BUS_FREQ_HIGH,
 	BUS_FREQ_MED,
 	BUS_FREQ_AUDIO,
 	BUS_FREQ_LOW,
+	BUS_FREQ_ULTRA_LOW,
 };
+
+#ifdef CONFIG_CPU_FREQ
 void request_bus_freq(enum bus_freq_mode mode);
 void release_bus_freq(enum bus_freq_mode mode);
 int register_busfreq_notifier(struct notifier_block *nb);
 int unregister_busfreq_notifier(struct notifier_block *nb);
+int get_bus_freq_mode(void);
+#else
+static inline void request_bus_freq(enum bus_freq_mode mode)
+{
+	return;
+}
+static inline void release_bus_freq(enum bus_freq_mode mode)
+{
+	return;
+}
+static inline int register_busfreq_notifier(struct notifier_block *nb)
+{
+	return 0;
+}
+static inline int unregister_busfreq_notifier(struct notifier_block *nb)
+{
+	return 0;
+}
+static inline int get_bus_freq_mode(void)
+{
+	return BUS_FREQ_HIGH;
+}
+#endif
 #endif
-- 
1.7.5.4

