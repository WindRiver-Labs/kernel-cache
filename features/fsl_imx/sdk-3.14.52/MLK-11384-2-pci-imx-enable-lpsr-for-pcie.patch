From 6d4dc56f992e0f1f74220d46d9be9d8d14dede08 Mon Sep 17 00:00:00 2001
From: Richard Zhu <Richard.Zhu@freescale.com>
Date: Wed, 19 Aug 2015 12:05:06 +0800
Subject: [PATCH 1016/1221] MLK-11384-2 pci: imx: enable lpsr for pcie

Regarding to the lpsr mode on imx7d arm2 board
- turn off/on imx7d pcie phy during suspend/resume
- add the pcie ep power on/off control
- align the imx6sx/imx7d pcie pm operations.

Signed-off-by: Richard Zhu <Richard.Zhu@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/pci/host/Kconfig    |   10 -----
 drivers/pci/host/pci-imx6.c |   78 +++++++++----------------------------------
 2 files changed, 16 insertions(+), 72 deletions(-)

diff --git a/drivers/pci/host/Kconfig b/drivers/pci/host/Kconfig
index 383d72d..6c19d2a 100644
--- a/drivers/pci/host/Kconfig
+++ b/drivers/pci/host/Kconfig
@@ -30,16 +30,6 @@ config PCI_IMX6
 	select PCIEPORTBUS
 	select PCIE_DW
 
-config PCI_IMX6SX_EXTREMELY_PWR_SAVE
-	bool "Freescale i.MX6SX PCIe controller extremely power save mode"
-	depends on PCI_IMX6
-	help
-	  If you want extremely power save on iMX6SX PCIe, you can enable
-	  the ultra low power mode during suspend/resume here. Note: iMX6SX
-	  PCIe maybe powered off compeltely during suspend, and would be
-	  re-initialized again during resume. Some behaviors of the PCIe EP
-	  device would be impacted.
-
 config EP_MODE_IN_EP_RC_SYS
 	bool "PCI Express EP mode in the IMX6 RC/EP interconnection system"
 	depends on PCI_IMX6
diff --git a/drivers/pci/host/pci-imx6.c b/drivers/pci/host/pci-imx6.c
index 7ab744f..2ddbbf0 100644
--- a/drivers/pci/host/pci-imx6.c
+++ b/drivers/pci/host/pci-imx6.c
@@ -535,7 +535,7 @@ static int imx6_pcie_init_phy(struct pcie_port *pp)
 
 static int imx6_pcie_wait_for_link(struct pcie_port *pp)
 {
-	int count = 200;
+	int count = 2000;
 
 	while (!dw_pcie_link_up(pp)) {
 		udelay(100);
@@ -1034,9 +1034,7 @@ static int pci_imx_suspend_noirq(struct device *dev)
 		/* Disable clks */
 		clk_disable_unprepare(imx6_pcie->pcie);
 		clk_disable_unprepare(imx6_pcie->pcie_phy);
-		if (!IS_ENABLED(CONFIG_EP_MODE_IN_EP_RC_SYS)
-			&& !IS_ENABLED(CONFIG_RC_MODE_IN_EP_RC_SYS))
-			clk_disable_unprepare(imx6_pcie->pcie_bus);
+		clk_disable_unprepare(imx6_pcie->pcie_bus);
 		if (is_imx6sx_pcie(imx6_pcie)) {
 			clk_disable_unprepare(imx6_pcie->pcie_inbound_axi);
 		} else {
@@ -1047,8 +1045,9 @@ static int pci_imx_suspend_noirq(struct device *dev)
 		release_bus_freq(BUS_FREQ_HIGH);
 
 		/* Power down PCIe PHY. */
-		if (IS_ENABLED(CONFIG_PCI_IMX6SX_EXTREMELY_PWR_SAVE))
-			regulator_disable(imx6_pcie->pcie_phy_regulator);
+		regulator_disable(imx6_pcie->pcie_phy_regulator);
+		if (gpio_is_valid(imx6_pcie->power_on_gpio))
+			gpio_set_value(imx6_pcie->power_on_gpio, 0);
 	} else if (is_imx6qp_pcie(imx6_pcie)) {
 		regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1,
 				IMX6Q_GPR1_PCIE_REF_CLK_EN, 0);
@@ -1078,7 +1077,13 @@ static int pci_imx_resume_noirq(struct device *dev)
 	struct imx6_pcie *imx6_pcie = dev_get_drvdata(dev);
 	struct pcie_port *pp = &imx6_pcie->pp;
 
-	if (IS_ENABLED(CONFIG_PCI_IMX6SX_EXTREMELY_PWR_SAVE)) {
+	if (is_imx6sx_pcie(imx6_pcie) || is_imx7d_pcie(imx6_pcie)) {
+		if (is_imx7d_pcie(imx6_pcie))
+			regmap_update_bits(imx6_pcie->reg_src, 0x2c, BIT(6), 0);
+		else
+			regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12,
+					IMX6Q_GPR12_PCIE_CTL_2, 0);
+
 		imx6_pcie_assert_core_reset(pp);
 
 		ret = imx6_pcie_init_phy(pp);
@@ -1089,61 +1094,6 @@ static int pci_imx_resume_noirq(struct device *dev)
 		if (ret < 0)
 			return ret;
 
-		if (IS_ENABLED(CONFIG_EP_MODE_IN_EP_RC_SYS))
-			imx6_pcie_setup_ep(pp);
-		else
-			dw_pcie_setup_rc(pp);
-
-		if (IS_ENABLED(CONFIG_PCI_MSI))
-			dw_pcie_msi_cfg_restore(pp);
-
-		/* Start LTSSM. */
-		regmap_update_bits(imx6_pcie->iomuxc_gpr,
-				IOMUXC_GPR12,
-				IMX6Q_GPR12_PCIE_CTL_2,
-				IMX6Q_GPR12_PCIE_CTL_2);
-	} else if (is_imx6sx_pcie(imx6_pcie) || is_imx7d_pcie(imx6_pcie)) {
-		if (is_imx7d_pcie(imx6_pcie)) {
-			regmap_update_bits(imx6_pcie->reg_src,
-					0x2c, BIT(1), BIT(1));
-			regmap_update_bits(imx6_pcie->reg_src,
-					0x2c, BIT(2), BIT(2));
-			/* set external osc in */
-			regmap_update_bits(imx6_pcie->iomuxc_gpr,
-					IOMUXC_GPR12, BIT(5), 0);
-		} else {
-			regmap_update_bits(imx6_pcie->iomuxc_gpr,
-					IOMUXC_GPR5,
-					IMX6SX_GPR5_PCIE_BTNRST,
-					IMX6SX_GPR5_PCIE_BTNRST);
-		}
-
-		request_bus_freq(BUS_FREQ_HIGH);
-		if (is_imx6sx_pcie(imx6_pcie))
-			clk_prepare_enable(imx6_pcie->pcie_inbound_axi);
-		if (!IS_ENABLED(CONFIG_EP_MODE_IN_EP_RC_SYS)
-			&& !IS_ENABLED(CONFIG_RC_MODE_IN_EP_RC_SYS))
-			clk_prepare_enable(imx6_pcie->pcie_bus);
-		clk_prepare_enable(imx6_pcie->pcie_phy);
-		clk_prepare_enable(imx6_pcie->pcie);
-
-		if (gpio_is_valid(imx6_pcie->reset_gpio))
-			gpio_set_value_cansleep(imx6_pcie->reset_gpio, 1);
-		mdelay(20);
-
-		if (is_imx7d_pcie(imx6_pcie)) {
-			regmap_update_bits(imx6_pcie->reg_src,
-					0x2c, BIT(6), 0);
-			regmap_update_bits(imx6_pcie->reg_src,
-					0x2c, BIT(1), 0);
-			regmap_update_bits(imx6_pcie->reg_src,
-					0x2c, BIT(2), 0);
-		} else {
-			regmap_update_bits(imx6_pcie->iomuxc_gpr,
-					IOMUXC_GPR5,
-					IMX6SX_GPR5_PCIE_BTNRST, 0);
-		}
-
 		/*
 		 * controller maybe turn off, re-configure again
 		 */
@@ -1157,6 +1107,10 @@ static int pci_imx_resume_noirq(struct device *dev)
 			pci_imx_phy_pll_locked(imx6_pcie);
 			regmap_update_bits(imx6_pcie->reg_src, 0x2c,
 					BIT(6), BIT(6));
+		} else {
+			regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12,
+					IMX6Q_GPR12_PCIE_CTL_2,
+					IMX6Q_GPR12_PCIE_CTL_2);
 		}
 		ret = imx6_pcie_wait_for_link(pp);
 		if (ret < 0)
-- 
1.7.5.4

