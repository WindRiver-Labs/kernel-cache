From e5b42704949f7a80f93ede9a4d6bfb8253852200 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Wed, 18 Mar 2015 21:32:22 +0800
Subject: [PATCH 0232/1221] MLK-10455-1 ARM: imx: remove GPC workaround for
 imx7d

On i.MX7D, the new GPC design has added a function of waking
up GPC from low power mode using internal GIC signal, which
means IRQ number < 32 can also wake up GPC from low power mode
as long as we set the wake up source correctly in A7_BSC, so
we can remove the workaround.

Signed-off-by: Anson Huang <b20788@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/gpcv2.c   |   27 +++++++--------------------
 arch/arm/mach-imx/pm-imx7.c |   11 -----------
 2 files changed, 7 insertions(+), 31 deletions(-)

diff --git a/arch/arm/mach-imx/gpcv2.c b/arch/arm/mach-imx/gpcv2.c
index 8ca2b43..c0e2de2 100644
--- a/arch/arm/mach-imx/gpcv2.c
+++ b/arch/arm/mach-imx/gpcv2.c
@@ -156,7 +156,6 @@ void imx_gpcv2_set_lpm_mode(u32 cpu, enum mxc_cpu_pwr_mode mode)
 {
 	unsigned long flags;
 	u32 val1, val2;
-	struct irq_desc *iomuxc_irq_desc;
 
 	spin_lock_irqsave(&gpcv2_lock, flags);
 
@@ -164,7 +163,8 @@ void imx_gpcv2_set_lpm_mode(u32 cpu, enum mxc_cpu_pwr_mode mode)
 	val2 = readl_relaxed(gpc_base + GPC_SLPCR);
 
 	/* core 0/1's LPM settings must be same */
-	val1 &= ~(BM_LPCR_A7_BSC_LPM0 | BM_LPCR_A7_BSC_LPM1);
+	val1 &= ~(BM_LPCR_A7_BSC_LPM0 | BM_LPCR_A7_BSC_LPM1 |
+		BM_LPCR_A7_BSC_IRQ_SRC_A7_WAKEUP);
 
 	val1 |= BM_LPCR_A7_BSC_CPU_CLK_ON_LPM;
 
@@ -173,14 +173,17 @@ void imx_gpcv2_set_lpm_mode(u32 cpu, enum mxc_cpu_pwr_mode mode)
 
 	switch (mode) {
 	case WAIT_CLOCKED:
+		val1 |= 0x3 << BP_LPCR_A7_BSC_IRQ_SRC;
 		break;
 	case WAIT_UNCLOCKED:
 		val1 |= A7_LPM_WAIT << BP_LPCR_A7_BSC_LPM0;
 		val1 &= ~BM_LPCR_A7_BSC_CPU_CLK_ON_LPM;
+		val1 |= 0x2 << BP_LPCR_A7_BSC_IRQ_SRC;
 		break;
 	case STOP_POWER_OFF:
 		val1 |= A7_LPM_STOP << BP_LPCR_A7_BSC_LPM0;
 		val1 &= ~BM_LPCR_A7_BSC_CPU_CLK_ON_LPM;
+		val1 |= 0x2 << BP_LPCR_A7_BSC_IRQ_SRC;
 		val2 |= BM_SLPCR_EN_DSM;
 		val2 |= BM_SLPCR_RBC_EN;
 		val2 |= BM_SLPCR_SBYOS;
@@ -191,23 +194,9 @@ void imx_gpcv2_set_lpm_mode(u32 cpu, enum mxc_cpu_pwr_mode mode)
 		return;
 	}
 
-	/*
-	 * GPC: When improper low-power sequence is used,
-	 * the SoC enters low power mode before the ARM core executes WFI.
-	 *
-	 * Software workaround:
-	 * 1) Software should trigger IRQ #32 (IOMUX) to be always pending
-	 *    by setting IOMUX_GPR1_IRQ.
-	 * 2) Software should then unmask IRQ #32 in GPC before setting GPC
-	 *    Low-Power mode.
-	 * 3) Software should mask IRQ #32 right after GPC Low-Power mode
-	 *    is set.
-	 */
-	iomuxc_irq_desc = irq_to_desc(32);
-	imx_gpcv2_irq_unmask(&iomuxc_irq_desc->irq_data);
 	writel_relaxed(val1, gpc_base + GPC_LPCR_A7_BSC);
 	writel_relaxed(val2, gpc_base + GPC_SLPCR);
-	imx_gpcv2_irq_mask(&iomuxc_irq_desc->irq_data);
+
 	spin_unlock_irqrestore(&gpcv2_lock, flags);
 }
 
@@ -506,15 +495,13 @@ void __init imx_gpcv2_init(void)
 	}
 
 	/* only external IRQs to wake up LPM and core 0/1 */
-	writel_relaxed(0x2 << BP_LPCR_A7_BSC_IRQ_SRC,
+	writel_relaxed(BM_LPCR_A7_BSC_IRQ_SRC_A7_WAKEUP,
 		gpc_base + GPC_LPCR_A7_BSC);
 	/* mask m4 dsm trigger */
 	writel_relaxed(readl_relaxed(gpc_base + GPC_LPCR_M4) |
 		BM_LPCR_M4_MASK_DSM_TRIGGER, gpc_base + GPC_LPCR_M4);
 	/* set mega/fast mix in A7 domain */
 	writel_relaxed(0x1, gpc_base + GPC_PGC_CPU_MAPPING);
-	/* init A7 basic setting register */
-	writel_relaxed(0x0, gpc_base + GPC_LPCR_A7_BSC);
 
 	/* Register GPC as the secondary interrupt controller behind GIC */
 	gic_arch_extn.irq_mask = imx_gpcv2_irq_mask;
diff --git a/arch/arm/mach-imx/pm-imx7.c b/arch/arm/mach-imx/pm-imx7.c
index 588e54b..6ea2e0e 100644
--- a/arch/arm/mach-imx/pm-imx7.c
+++ b/arch/arm/mach-imx/pm-imx7.c
@@ -508,7 +508,6 @@ put_node:
 static void __init imx7_pm_common_init(const struct imx7_pm_socdata
 					*socdata)
 {
-	struct regmap *gpr;
 	int ret;
 
 	if (IS_ENABLED(CONFIG_SUSPEND)) {
@@ -517,16 +516,6 @@ static void __init imx7_pm_common_init(const struct imx7_pm_socdata
 			pr_warn("%s: No DDR LPM support with suspend %d!\n",
 				__func__, ret);
 	}
-
-	/*
-	 * Force IOMUXC irq pending, so that the interrupt to GPC can be
-	 * used to deassert dsm_request signal when the signal gets
-	 * asserted unexpectedly.
-	 */
-	gpr = syscon_regmap_lookup_by_compatible("fsl,imx7d-iomuxc-gpr");
-	if (!IS_ERR(gpr))
-		regmap_update_bits(gpr, IOMUXC_GPR1, IMX7D_GPR1_IRQ_MASK,
-				   IMX7D_GPR1_IRQ_MASK);
 }
 
 void __init imx7d_pm_init(void)
-- 
1.7.5.4

