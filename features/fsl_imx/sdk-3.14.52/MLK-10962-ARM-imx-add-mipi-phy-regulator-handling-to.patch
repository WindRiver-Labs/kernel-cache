From a0de18fda5ee4729ec2199b36f14f7eef209e383 Mon Sep 17 00:00:00 2001
From: Fancy Fang <chen.fang@freescale.com>
Date: Fri, 22 May 2015 16:29:18 +0800
Subject: [PATCH 0609/1221] MLK-10962 ARM: imx: add mipi phy regulator
 handling to gpcv2.

Add mipi phy regulator notify callback to power on
or power off this phy along with the regulator
enable/disable called. This will be used by mipi
dsi/csi later.

Signed-off-by: Fancy Fang <chen.fang@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/boot/dts/imx7d.dtsi |    1 +
 arch/arm/mach-imx/gpcv2.c    |   50 ++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 49 insertions(+), 2 deletions(-)

diff --git a/arch/arm/boot/dts/imx7d.dtsi b/arch/arm/boot/dts/imx7d.dtsi
index d3d0742..bbf8a17 100644
--- a/arch/arm/boot/dts/imx7d.dtsi
+++ b/arch/arm/boot/dts/imx7d.dtsi
@@ -646,6 +646,7 @@
 				fsl,mf-mix-wakeup-irq = <0x54010000 0xc00 0x0 0x1000040>;
 				#power-domain-cells = <1>;
 				pcie-phy-supply = <&reg_1p0d>;
+				mipi-phy-supply = <&reg_1p0d>;
 			};
 		};
 
diff --git a/arch/arm/mach-imx/gpcv2.c b/arch/arm/mach-imx/gpcv2.c
index aa2f7a7..6ba6676 100644
--- a/arch/arm/mach-imx/gpcv2.c
+++ b/arch/arm/mach-imx/gpcv2.c
@@ -106,7 +106,7 @@ static u32 gpcv2_saved_imrs[IMR_NUM];
 static u32 gpcv2_mf_irqs[IMR_NUM];
 static u32 gpcv2_mf_request_on[IMR_NUM];
 static DEFINE_SPINLOCK(gpcv2_lock);
-static struct notifier_block nb_pcie;
+static struct notifier_block nb_pcie, nb_mipi;
 
 void imx_gpcv2_set_slot_ack(u32 index, enum imx_gpc_slot m_core,
 				bool mode, bool ack)
@@ -541,6 +541,37 @@ static int imx_pcie_regulator_notify(struct notifier_block *nb,
 	return NOTIFY_OK;
 }
 
+static int imx_mipi_regulator_notify(struct notifier_block *nb,
+					unsigned long event,
+					void *ignored)
+{
+	u32 val = 0;
+
+	switch (event) {
+	case REGULATOR_EVENT_PRE_ENABLE:
+		val = readl_relaxed(gpc_base + GPC_PGC_CPU_MAPPING);
+		writel_relaxed(val | BIT(2), gpc_base + GPC_PGC_CPU_MAPPING);
+
+		val = readl_relaxed(gpc_base + GPC_PU_PGC_SW_PUP_REQ);
+		writel_relaxed(val | BIT(0), gpc_base + GPC_PU_PGC_SW_PUP_REQ);
+		break;
+	case REGULATOR_EVENT_PRE_DISABLE:
+		val = readl_relaxed(gpc_base + GPC_PU_PGC_SW_PDN_REQ);
+		writel_relaxed(val | BIT(0), gpc_base + GPC_PU_PGC_SW_PDN_REQ);
+
+		val = readl_relaxed(gpc_base + GPC_PGC_MIPI_PHY);
+		writel_relaxed(val | BIT(0), gpc_base + GPC_PGC_MIPI_PHY);
+
+		val = readl_relaxed(gpc_base + GPC_PGC_CPU_MAPPING);
+		writel_relaxed(val & ~BIT(2), gpc_base + GPC_PGC_CPU_MAPPING);
+		break;
+	default:
+		break;
+	}
+
+	return NOTIFY_OK;
+}
+
 void __init imx_gpcv2_init(void)
 {
 	struct device_node *np;
@@ -613,7 +644,7 @@ void __init imx_gpcv2_init(void)
 static int imx_gpcv2_probe(struct platform_device *pdev)
 {
 	int ret;
-	struct regulator *pcie_reg;
+	struct regulator *pcie_reg, *mipi_reg;
 
 	if (cpu_is_imx7d()) {
 		pcie_reg = devm_regulator_get(&pdev->dev, "pcie-phy");
@@ -630,6 +661,21 @@ static int imx_gpcv2_probe(struct platform_device *pdev)
 				"pcie regulator notifier request failed\n");
 			return ret;
 		}
+
+		mipi_reg = devm_regulator_get(&pdev->dev, "mipi-phy");
+		if (IS_ERR(mipi_reg)) {
+			ret = PTR_ERR(mipi_reg);
+			dev_info(&pdev->dev, "mipi regulator not ready.\n");
+			return ret;
+		}
+		nb_mipi.notifier_call = &imx_mipi_regulator_notify;
+
+		ret = regulator_register_notifier(mipi_reg, &nb_mipi);
+		if (ret) {
+			dev_err(&pdev->dev,
+				"mipi regulator notifier request failed.\n");
+			return ret;
+		}
 	}
 	return 0;
 }
-- 
1.7.5.4

