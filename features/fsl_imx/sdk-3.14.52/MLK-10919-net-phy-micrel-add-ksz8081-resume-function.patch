From c07251f901bcfdc69bc15699acbaf8524c4ff6cd Mon Sep 17 00:00:00 2001
From: Fugang Duan <b38611@freescale.com>
Date: Tue, 19 May 2015 10:51:51 +0800
Subject: [PATCH 0564/1221] MLK-10919 net: phy: micrel: add ksz8081 resume
 function

Add ksz8081 resume function since the phy has some non-standard
register init process that has some fixup.

Signed-off-by: Fugang Duan <B38611@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/net/phy/micrel.c     |   18 +++++++++++++++++-
 drivers/net/phy/phy_device.c |    3 ++-
 include/linux/phy.h          |    1 +
 3 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/drivers/net/phy/micrel.c b/drivers/net/phy/micrel.c
index b217a16..aaf1d7f 100644
--- a/drivers/net/phy/micrel.c
+++ b/drivers/net/phy/micrel.c
@@ -275,6 +275,22 @@ static int ksz8873mll_config_aneg(struct phy_device *phydev)
 	return 0;
 }
 
+static int ksz8081_resume(struct phy_device *phydev)
+{
+	int value;
+
+	mutex_lock(&phydev->lock);
+	value = phy_read(phydev, MII_BMCR);
+	phy_write(phydev, MII_BMCR, value & ~BMCR_PDOWN);
+
+	value = phy_scan_fixups(phydev);
+	if (value < 0)
+		return value;
+	mutex_unlock(&phydev->lock);
+
+	return 0;
+}
+
 static struct of_device_id micrel9031_match[] = {
 	{
 		.compatible = "micrel,ksz9031",
@@ -397,7 +413,7 @@ static struct phy_driver ksphy_driver[] = {
 	.ack_interrupt	= kszphy_ack_interrupt,
 	.config_intr	= kszphy_config_intr,
 	.suspend	= genphy_suspend,
-	.resume		= genphy_resume,
+	.resume		= ksz8081_resume,
 	.driver		= { .owner = THIS_MODULE,},
 }, {
 	.phy_id		= PHY_ID_KSZ8061,
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index a25d4a5..983e74c 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -127,7 +127,7 @@ static int phy_needs_fixup(struct phy_device *phydev, struct phy_fixup *fixup)
 }
 
 /* Runs any matching fixups for this phydev */
-static int phy_scan_fixups(struct phy_device *phydev)
+int phy_scan_fixups(struct phy_device *phydev)
 {
 	struct phy_fixup *fixup;
 
@@ -147,6 +147,7 @@ static int phy_scan_fixups(struct phy_device *phydev)
 
 	return 0;
 }
+EXPORT_SYMBOL(phy_scan_fixups);
 
 struct phy_device *phy_device_create(struct mii_bus *bus, int addr, int phy_id,
 				     bool is_c45,
diff --git a/include/linux/phy.h b/include/linux/phy.h
index d48f2c7..5835508 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -723,6 +723,7 @@ int phy_start_interrupts(struct phy_device *phydev);
 void phy_print_status(struct phy_device *phydev);
 void phy_device_free(struct phy_device *phydev);
 
+int phy_scan_fixups(struct phy_device *phydev);
 int phy_register_fixup(const char *bus_id, u32 phy_uid, u32 phy_uid_mask,
 		       int (*run)(struct phy_device *));
 int phy_register_fixup_for_id(const char *bus_id,
-- 
1.7.5.4

