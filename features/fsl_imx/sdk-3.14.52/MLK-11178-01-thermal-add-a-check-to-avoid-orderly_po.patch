From d63e61e158c73d85e38d8cf4f6945c7877835b28 Mon Sep 17 00:00:00 2001
From: Bai Ping <b51503@freescale.com>
Date: Fri, 26 Jun 2015 22:21:38 +0800
Subject: [PATCH 0838/1221] MLK-11178-01 thermal: add a check to avoid
 orderly_poweroff twice

When temperature >= the 'critical_trip' temperature, the common
framework code will call 'orderly_poweroff' function to power off
the system. During the power off procedure the thermal framework
will go on polling the temp, this will lead to recall the
'orderly_poweroff' again. In the first poweroff flow, some system
resource has been freezed, then if the secondary 'orderly_poweroff'
frees the resource again, it will lead to kernel dump.

Signed-off-by: Bai Ping <b51503@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/thermal/thermal_core.c |    6 +++++-
 include/linux/thermal.h        |    1 +
 2 files changed, 6 insertions(+), 1 deletions(-)

diff --git a/drivers/thermal/thermal_core.c b/drivers/thermal/thermal_core.c
index 284733e..2e151c9 100644
--- a/drivers/thermal/thermal_core.c
+++ b/drivers/thermal/thermal_core.c
@@ -375,7 +375,10 @@ static void handle_critical_trips(struct thermal_zone_device *tz,
 		dev_emerg(&tz->device,
 			  "critical temperature reached(%d C),shutting down\n",
 			  tz->temperature / 1000);
-		orderly_poweroff(true);
+		if (tz->poweroff)
+			return;
+		if (!orderly_poweroff(true))
+			tz->poweroff = true;
 	}
 }
 
@@ -1486,6 +1489,7 @@ struct thermal_zone_device *thermal_zone_device_register(const char *type,
 	tz->trips = trips;
 	tz->passive_delay = passive_delay;
 	tz->polling_delay = polling_delay;
+	tz->poweroff = false;
 
 	dev_set_name(&tz->device, "thermal_zone%d", tz->id);
 	result = device_register(&tz->device);
diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index f7e11c7..3c4988d 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -182,6 +182,7 @@ struct thermal_zone_device {
 	struct mutex lock; /* protect thermal_instances list */
 	struct list_head node;
 	struct delayed_work poll_queue;
+	bool poweroff;
 };
 
 /* Structure that holds thermal governor information */
-- 
1.7.5.4

