From 1b270d3fc395a7ee2be872a883ba8cb9473155d9 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Fri, 6 Feb 2015 23:10:07 +0800
Subject: [PATCH 0040/1221] MLK-10226-1 ARM: imx: add cpu hotplug support for
 i.mx7d

When secondary core is removed or added, we can use software
request power down/up of PGC to shut down secondary core's
power.

Add this feature support on i.MX7D.

Signed-off-by: Anson Huang <b20788@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/common.h  |    2 +-
 arch/arm/mach-imx/gpcv2.c   |   36 ++++++++++++++++++++++++++----------
 arch/arm/mach-imx/hotplug.c |    5 +++--
 arch/arm/mach-imx/src.c     |    2 +-
 4 files changed, 31 insertions(+), 14 deletions(-)

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 2ccedae..d5400bd 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -96,7 +96,7 @@ void mcc_receive_from_mu_buffer(unsigned int index, unsigned int *data);
 void mcc_send_via_mu_buffer(unsigned int index, unsigned int data);
 unsigned int imx_gpc_is_m4_sleeping(void);
 bool imx_mu_is_m4_in_low_freq(void);
-void imx_gpcv2_set_core_pdn_by_wfi(u32 cpu, bool enable);
+void imx_gpcv2_set_core1_pdn_pup_by_software(bool pdn);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */
diff --git a/arch/arm/mach-imx/gpcv2.c b/arch/arm/mach-imx/gpcv2.c
index bdc194e..9413c4a 100644
--- a/arch/arm/mach-imx/gpcv2.c
+++ b/arch/arm/mach-imx/gpcv2.c
@@ -33,6 +33,8 @@
 #define GPC_IMR1_CORE0		0x30
 #define GPC_IMR1_CORE1		0x40
 #define GPC_SLOT0_CFG		0xb0
+#define GPC_CPU_PGC_SW_PUP_REQ	0xf0
+#define GPC_CPU_PGC_SW_PDN_REQ	0xfc
 #define GPC_GTOR		0x124
 #define GPC_PGC_C0		0x800
 #define GPC_PGC_C1		0x840
@@ -61,6 +63,8 @@
 #define BM_LPCR_A7_AD_EN_C1_PDN			0x8
 #define BM_LPCR_A7_AD_EN_C0_PDN			0x2
 
+#define BM_CPU_PGC_SW_PDN_PUP_REQ_CORE1_A7	0x2
+
 enum imx_gpc_slot {
 	CORE0_A7,
 	CORE1_A7,
@@ -79,16 +83,6 @@ static u32 gpcv2_wake_irqs[IMR_NUM];
 static u32 gpcv2_saved_imrs[IMR_NUM];
 static DEFINE_SPINLOCK(gpcv2_lock);
 
-void imx_gpcv2_set_core_pdn_by_wfi(u32 cpu, bool enable)
-{
-	u32 val = readl_relaxed(gpc_base + GPC_LPCR_A7_AD);
-
-	val &= ~(1 << (cpu * 2));
-	if (enable)
-		val |= 1 << (cpu * 2);
-	writel_relaxed(val, gpc_base + GPC_LPCR_A7_AD);
-}
-
 void imx_gpcv2_set_slot_ack(u32 index, enum imx_gpc_slot m_core,
 				bool mode, bool ack)
 {
@@ -154,6 +148,28 @@ void imx_gpcv2_set_plat_power_gate_by_lpm(void)
 	writel_relaxed(val, gpc_base + GPC_LPCR_A7_AD);
 }
 
+void imx_gpcv2_set_m_core_pgc(bool enable, u32 offset)
+{
+	writel_relaxed(enable, gpc_base + offset);
+}
+
+void imx_gpcv2_set_core1_pdn_pup_by_software(bool pdn)
+{
+	u32 val = readl_relaxed(gpc_base + (pdn ?
+		GPC_CPU_PGC_SW_PDN_REQ : GPC_CPU_PGC_SW_PUP_REQ));
+
+	imx_gpcv2_set_m_core_pgc(true, GPC_PGC_C1);
+	val |= BM_CPU_PGC_SW_PDN_PUP_REQ_CORE1_A7;
+	writel_relaxed(val, gpc_base + (pdn ?
+		GPC_CPU_PGC_SW_PDN_REQ : GPC_CPU_PGC_SW_PUP_REQ));
+
+	while ((readl_relaxed(gpc_base + (pdn ?
+		GPC_CPU_PGC_SW_PDN_REQ : GPC_CPU_PGC_SW_PUP_REQ)) &
+		BM_CPU_PGC_SW_PDN_PUP_REQ_CORE1_A7) != 0)
+		;
+	imx_gpcv2_set_m_core_pgc(false, GPC_PGC_C1);
+}
+
 void imx_gpcv2_set_cpu_power_gate_by_lpm(u32 cpu)
 {
 	u32 val = readl_relaxed(gpc_base + GPC_LPCR_A7_AD);
diff --git a/arch/arm/mach-imx/hotplug.c b/arch/arm/mach-imx/hotplug.c
index 62cbea9..189aaf2 100644
--- a/arch/arm/mach-imx/hotplug.c
+++ b/arch/arm/mach-imx/hotplug.c
@@ -59,8 +59,6 @@ void imx_cpu_die(unsigned int cpu)
 	 * the register being cleared to kill the cpu.
 	 */
 	imx_set_cpu_arg(cpu, ~0);
-	if (cpu_is_imx7d())
-		imx_gpcv2_set_core_pdn_by_wfi(cpu, true);
 	for (;;)
 		cpu_do_idle();
 }
@@ -74,5 +72,8 @@ int imx_cpu_kill(unsigned int cpu)
 			return 0;
 	imx_enable_cpu(cpu, false);
 	imx_set_cpu_arg(cpu, 0);
+	if (cpu_is_imx7d())
+		imx_gpcv2_set_core1_pdn_pup_by_software(true);
+
 	return 1;
 }
diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index 717b54f..e069fea 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -105,11 +105,11 @@ void imx_enable_cpu(int cpu, bool enable)
 	spin_lock(&src_lock);
 	if (cpu_is_imx7d()) {
 		/* enable core */
+		imx_gpcv2_set_core1_pdn_pup_by_software(false);
 		mask = 1 << (BP_SRC_A7RCR1_A7_CORE1_ENABLE + cpu - 1);
 		val = readl_relaxed(src_base + SRC_A7RCR1);
 		val = enable ? val | mask : val & ~mask;
 		writel_relaxed(val, src_base + SRC_A7RCR1);
-		imx_gpcv2_set_core_pdn_by_wfi(cpu, false);
 	} else {
 		mask = 1 << (BP_SRC_SCR_CORE1_ENABLE + cpu - 1);
 		val = readl_relaxed(src_base + SRC_SCR);
-- 
1.7.5.4

