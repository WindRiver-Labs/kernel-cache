From 3d2bda0e820109810c444e35686db17926dacb23 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Thu, 12 Mar 2015 16:32:44 +0800
Subject: [PATCH 0187/1221] MLK-10415-4 ARM: imx: enable mega/fast mix off for
 imx7d

When Mega/Fast mix is off in DSM, we need to do DDR retention,
by default, Mega/Fast mix will be off in DSM, unless there
is any device inside Mega/Fast mix domain enabled as wakeup source.

Signed-off-by: Anson Huang <b20788@freescale.com>
[zou:Original patch taken from
git.freescale.com/imx/fsl-arm-yocto-bsp.git-b imx-3.14.52-1.1.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/common.h       |    1 +
 arch/arm/mach-imx/gpcv2.c        |  226 +++++++++++++++++++++++++------
 arch/arm/mach-imx/mx7.h          |    4 +
 arch/arm/mach-imx/pm-imx7.c      |  131 +++++++++++++------
 arch/arm/mach-imx/src.c          |    3 +-
 arch/arm/mach-imx/suspend-imx7.S |  278 +++++++++++++++++++++++++++++++++----
 6 files changed, 534 insertions(+), 109 deletions(-)

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index d5400bd..04703e1 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -97,6 +97,7 @@ void mcc_send_via_mu_buffer(unsigned int index, unsigned int data);
 unsigned int imx_gpc_is_m4_sleeping(void);
 bool imx_mu_is_m4_in_low_freq(void);
 void imx_gpcv2_set_core1_pdn_pup_by_software(bool pdn);
+unsigned int imx_gpcv2_is_mf_mix_off(void);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */
diff --git a/arch/arm/mach-imx/gpcv2.c b/arch/arm/mach-imx/gpcv2.c
index 5a96b4f..d5cd5a4 100644
--- a/arch/arm/mach-imx/gpcv2.c
+++ b/arch/arm/mach-imx/gpcv2.c
@@ -29,10 +29,11 @@
 #define GPC_LPCR_M4		0x8
 #define GPC_SLPCR		0x14
 #define GPC_PGC_ACK_SEL_A7	0x24
-#define GPC_MISC_OFFSET		0x2c
+#define GPC_MISC		0x2c
 #define GPC_IMR1_CORE0		0x30
 #define GPC_IMR1_CORE1		0x40
 #define GPC_SLOT0_CFG		0xb0
+#define GPC_PGC_CPU_MAPPING	0xec
 #define GPC_CPU_PGC_SW_PUP_REQ	0xf0
 #define GPC_CPU_PGC_SW_PDN_REQ	0xfc
 #define GPC_GTOR		0x124
@@ -46,6 +47,7 @@
 #define GPC_PGC_USB_OTG2_PHY	0xcc0
 #define GPC_PGC_USB_HSIC_PHY	0xd00
 
+#define BM_LPCR_A7_BSC_IRQ_SRC_A7_WAKEUP	0x70000000
 #define BM_LPCR_A7_BSC_CPU_CLK_ON_LPM		0x4000
 #define BM_LPCR_A7_BSC_LPM1			0xc
 #define BM_LPCR_A7_BSC_LPM0			0x3
@@ -53,18 +55,32 @@
 #define BP_LPCR_A7_BSC_LPM0			0
 #define BM_LPCR_M4_MASK_DSM_TRIGGER		0x80000000
 #define BM_SLPCR_EN_DSM				0x80000000
+#define BM_SLPCR_RBC_EN				0x40000000
 #define BM_SLPCR_VSTBY				0x4
 #define BM_SLPCR_SBYOS				0x2
 #define BM_SLPCR_BYPASS_PMIC_READY		0x1
 
 #define BM_LPCR_A7_AD_EN_C1_PUP			0x800
+#define BM_LPCR_A7_AD_EN_C1_IRQ_PUP		0x400
 #define BM_LPCR_A7_AD_EN_C0_PUP			0x200
+#define BM_LPCR_A7_AD_EN_C0_IRQ_PUP		0x100
 #define BM_LPCR_A7_AD_EN_PLAT_PDN		0x10
 #define BM_LPCR_A7_AD_EN_C1_PDN			0x8
+#define BM_LPCR_A7_AD_EN_C1_WFI_PDN		0x4
 #define BM_LPCR_A7_AD_EN_C0_PDN			0x2
+#define BM_LPCR_A7_AD_EN_C0_WFI_PDN		0x1
 
 #define BM_CPU_PGC_SW_PDN_PUP_REQ_CORE1_A7	0x2
 
+#define BM_GPC_PGC_ACK_SEL_A7_DUMMY_PUP_ACK	0x80000000
+#define BM_GPC_PGC_ACK_SEL_A7_DUMMY_PDN_ACK	0x8000
+
+#define BP_LPCR_A7_BSC_IRQ_SRC			28
+
+#define MAX_SLOT_NUMBER				10
+#define A7_LPM_WAIT				0x5
+#define A7_LPM_STOP				0xa
+
 enum imx_gpc_slot {
 	CORE0_A7,
 	CORE1_A7,
@@ -81,6 +97,7 @@ enum imx_gpc_slot {
 static void __iomem *gpc_base;
 static u32 gpcv2_wake_irqs[IMR_NUM];
 static u32 gpcv2_saved_imrs[IMR_NUM];
+static u32 gpcv2_mf_irqs[IMR_NUM];
 static DEFINE_SPINLOCK(gpcv2_lock);
 
 void imx_gpcv2_set_slot_ack(u32 index, enum imx_gpc_slot m_core,
@@ -88,7 +105,7 @@ void imx_gpcv2_set_slot_ack(u32 index, enum imx_gpc_slot m_core,
 {
 	u32 val;
 
-	if (index > 9)
+	if (index >= MAX_SLOT_NUMBER)
 		pr_err("Invalid slot index!\n");
 	/* set slot */
 	writel_relaxed((mode + 1) << (m_core * 2), gpc_base +
@@ -106,28 +123,34 @@ void imx_gpcv2_set_slot_ack(u32 index, enum imx_gpc_slot m_core,
 
 void imx_gpcv2_set_lpm_mode(u32 cpu, enum mxc_cpu_pwr_mode mode)
 {
-	u32 val1 = readl_relaxed(gpc_base + GPC_LPCR_A7_BSC);
-	u32 val2 = readl_relaxed(gpc_base + GPC_SLPCR);
+	unsigned long flags;
+	u32 val1, val2;
+
+	spin_lock_irqsave(&gpcv2_lock, flags);
 
-	if (cpu == 0)
-		val1 &= ~BM_LPCR_A7_BSC_LPM0;
-	if (cpu == 1)
-		val1 &= ~BM_LPCR_A7_BSC_LPM1;
+	val1 = readl_relaxed(gpc_base + GPC_LPCR_A7_BSC);
+	val2 = readl_relaxed(gpc_base + GPC_SLPCR);
 
-	val2 &= ~(BM_SLPCR_EN_DSM | BM_SLPCR_VSTBY |
+	/* core 0/1's LPM settings must be same */
+	val1 &= ~(BM_LPCR_A7_BSC_LPM0 | BM_LPCR_A7_BSC_LPM1);
+
+	val1 |= BM_LPCR_A7_BSC_CPU_CLK_ON_LPM;
+
+	val2 &= ~(BM_SLPCR_EN_DSM | BM_SLPCR_VSTBY | BM_SLPCR_RBC_EN |
 		BM_SLPCR_SBYOS | BM_SLPCR_BYPASS_PMIC_READY);
 
 	switch (mode) {
 	case WAIT_CLOCKED:
 		break;
 	case WAIT_UNCLOCKED:
-		val1 |= 0x1 << (BP_LPCR_A7_BSC_LPM0 + cpu * 2);
+		val1 |= A7_LPM_WAIT << BP_LPCR_A7_BSC_LPM0;
 		val1 &= ~BM_LPCR_A7_BSC_CPU_CLK_ON_LPM;
 		break;
 	case STOP_POWER_OFF:
-		val1 |= 0x2 << (BP_LPCR_A7_BSC_LPM0 + cpu * 2);
+		val1 |= A7_LPM_STOP << BP_LPCR_A7_BSC_LPM0;
 		val1 &= ~BM_LPCR_A7_BSC_CPU_CLK_ON_LPM;
 		val2 |= BM_SLPCR_EN_DSM;
+		val2 |= BM_SLPCR_RBC_EN;
 		val2 |= BM_SLPCR_SBYOS;
 		val2 |= BM_SLPCR_VSTBY;
 		val2 |= BM_SLPCR_BYPASS_PMIC_READY;
@@ -138,13 +161,16 @@ void imx_gpcv2_set_lpm_mode(u32 cpu, enum mxc_cpu_pwr_mode mode)
 
 	writel_relaxed(val1, gpc_base + GPC_LPCR_A7_BSC);
 	writel_relaxed(val2, gpc_base + GPC_SLPCR);
+	spin_unlock_irqrestore(&gpcv2_lock, flags);
 }
 
-void imx_gpcv2_set_plat_power_gate_by_lpm(void)
+void imx_gpcv2_set_plat_power_gate_by_lpm(bool pdn)
 {
 	u32 val = readl_relaxed(gpc_base + GPC_LPCR_A7_AD);
 
-	val |= BM_LPCR_A7_AD_EN_PLAT_PDN;
+	val &= ~BM_LPCR_A7_AD_EN_PLAT_PDN;
+	if (pdn)
+		val |= BM_LPCR_A7_AD_EN_PLAT_PDN;
 
 	writel_relaxed(val, gpc_base + GPC_LPCR_A7_AD);
 }
@@ -171,45 +197,135 @@ void imx_gpcv2_set_core1_pdn_pup_by_software(bool pdn)
 	imx_gpcv2_set_m_core_pgc(false, GPC_PGC_C1);
 }
 
-void imx_gpcv2_set_cpu_power_gate_by_lpm(u32 cpu)
+void imx_gpcv2_set_cpu_power_gate_by_wfi(u32 cpu, bool pdn)
+{
+	unsigned long flags;
+	u32 val;
+
+	spin_lock_irqsave(&gpcv2_lock, flags);
+	val = readl_relaxed(gpc_base + GPC_LPCR_A7_AD);
+
+	if (cpu == 0) {
+		if (pdn) {
+			imx_gpcv2_set_m_core_pgc(true, GPC_PGC_C0);
+			val |= BM_LPCR_A7_AD_EN_C0_WFI_PDN |
+				BM_LPCR_A7_AD_EN_C0_IRQ_PUP;
+		} else {
+			imx_gpcv2_set_m_core_pgc(false, GPC_PGC_C0);
+			val &= ~(BM_LPCR_A7_AD_EN_C0_WFI_PDN |
+				BM_LPCR_A7_AD_EN_C0_IRQ_PUP);
+		}
+	}
+	if (cpu == 1) {
+		if (pdn) {
+			imx_gpcv2_set_m_core_pgc(true, GPC_PGC_C1);
+			val |= BM_LPCR_A7_AD_EN_C1_WFI_PDN |
+				BM_LPCR_A7_AD_EN_C1_IRQ_PUP;
+		} else {
+			imx_gpcv2_set_m_core_pgc(false, GPC_PGC_C1);
+			val &= ~(BM_LPCR_A7_AD_EN_C1_WFI_PDN |
+				BM_LPCR_A7_AD_EN_C1_IRQ_PUP);
+		}
+	}
+	writel_relaxed(val, gpc_base + GPC_LPCR_A7_AD);
+	spin_unlock_irqrestore(&gpcv2_lock, flags);
+}
+
+void imx_gpcv2_set_cpu_power_gate_by_lpm(u32 cpu, bool pdn)
 {
+	unsigned long flags;
 	u32 val = readl_relaxed(gpc_base + GPC_LPCR_A7_AD);
 
-	if (cpu == 0)
-		val |= BM_LPCR_A7_AD_EN_C0_PDN | BM_LPCR_A7_AD_EN_C0_PUP;
-	if (cpu == 1)
-		val |= BM_LPCR_A7_AD_EN_C1_PDN | BM_LPCR_A7_AD_EN_C1_PUP;
+	spin_lock_irqsave(&gpcv2_lock, flags);
+	if (cpu == 0) {
+		if (pdn)
+			val |= BM_LPCR_A7_AD_EN_C0_PDN |
+				BM_LPCR_A7_AD_EN_C0_PUP;
+		else
+			val &= ~(BM_LPCR_A7_AD_EN_C0_PDN |
+				BM_LPCR_A7_AD_EN_C0_PUP);
+	}
+	if (cpu == 1) {
+		if (pdn)
+			val |= BM_LPCR_A7_AD_EN_C1_PDN |
+				BM_LPCR_A7_AD_EN_C1_PUP;
+		else
+			val &= ~(BM_LPCR_A7_AD_EN_C1_PDN |
+				BM_LPCR_A7_AD_EN_C1_PUP);
+	}
 
 	writel_relaxed(val, gpc_base + GPC_LPCR_A7_AD);
+	spin_unlock_irqrestore(&gpcv2_lock, flags);
+}
+
+void imx_gpcv2_set_mix_phy_gate_by_lpm(u32 pdn_index, u32 pup_index)
+{
+	/* set power down slot */
+	writel_relaxed(1 << (FAST_MEGA_MIX * 2),
+		gpc_base + GPC_SLOT0_CFG + pdn_index * 4);
+
+	/* set power up slot */
+	writel_relaxed(1 << (FAST_MEGA_MIX * 2 + 1),
+		gpc_base + GPC_SLOT0_CFG + pup_index * 4);
+}
+
+unsigned int imx_gpcv2_is_mf_mix_off(void)
+{
+	return readl_relaxed(gpc_base + GPC_PGC_FM);
+}
+
+static void imx_gpcv2_mf_mix_off(void)
+{
+	int i;
+
+	for (i = 0; i < IMR_NUM; i++)
+		if ((gpcv2_wake_irqs[i] & gpcv2_mf_irqs[i]) != 0)
+			return;
+
+	pr_info("Turn off Mega/Fast mix in DSM\n");
+	imx_gpcv2_set_mix_phy_gate_by_lpm(1, 5);
+	imx_gpcv2_set_m_core_pgc(true, GPC_PGC_FM);
 }
 
 void imx_gpcv2_pre_suspend(bool arm_power_off)
 {
 	void __iomem *reg_imr1 = gpc_base + GPC_IMR1_CORE0;
-	int i;
+	int i, cpu = 0;
 
 	if (arm_power_off) {
-		/* both core0 and core1's lpm need to be set */
-		imx_gpcv2_set_lpm_mode(0, STOP_POWER_OFF);
-		imx_gpcv2_set_lpm_mode(1, STOP_POWER_OFF);
+		/* all CPU's lpm need to be set */
+		for_each_possible_cpu(cpu)
+			imx_gpcv2_set_lpm_mode(cpu, STOP_POWER_OFF);
 		/* enable core0 power down/up with low power mode */
-		imx_gpcv2_set_cpu_power_gate_by_lpm(0);
+		imx_gpcv2_set_cpu_power_gate_by_lpm(0, true);
 		/* enable plat power down with low power mode */
-		imx_gpcv2_set_plat_power_gate_by_lpm();
-
-		/* enable cpu0 power down in slot0 */
+		imx_gpcv2_set_plat_power_gate_by_lpm(true);
+
+		/*
+		 * To avoid confuse, we use slot 0~4 for power down,
+		 * slot 5~9 for power up.
+		 *
+		 * Power down slot sequence:
+		 * Slot0 -> CORE0
+		 * Slot1 -> Mega/Fast MIX
+		 * Slot2 -> SCU
+		 *
+		 * Power up slot sequence:
+		 * Slot5 -> Mega/Fast MIX
+		 * Slot6 -> SCU
+		 * Slot7 -> CORE0
+		 */
 		imx_gpcv2_set_slot_ack(0, CORE0_A7, false, false);
-		/* enable scu power down in slot1, ack for last one */
-		imx_gpcv2_set_slot_ack(1, SCU_A7, false, true);
+		imx_gpcv2_set_slot_ack(2, SCU_A7, false, true);
+
+		imx_gpcv2_mf_mix_off();
 
-		/* enable scu power up in slot5 */
-		imx_gpcv2_set_slot_ack(5, SCU_A7, true, false);
-		/* enable core0 power up in slot5, ack for last one */
-		imx_gpcv2_set_slot_ack(6, CORE0_A7, true, true);
+		imx_gpcv2_set_slot_ack(6, SCU_A7, true, false);
+		imx_gpcv2_set_slot_ack(7, CORE0_A7, true, true);
 
 		/* enable core0, scu */
-		writel_relaxed(0x1, gpc_base + GPC_PGC_C0);
-		writel_relaxed(0x1, gpc_base + GPC_PGC_SCU);
+		imx_gpcv2_set_m_core_pgc(true, GPC_PGC_C0);
+		imx_gpcv2_set_m_core_pgc(true, GPC_PGC_SCU);
 	}
 
 	for (i = 0; i < IMR_NUM; i++) {
@@ -221,14 +337,25 @@ void imx_gpcv2_pre_suspend(bool arm_power_off)
 void imx_gpcv2_post_resume(void)
 {
 	void __iomem *reg_imr1 = gpc_base + GPC_IMR1_CORE0;
-	int i;
+	int i, cpu = 0;
 
 	for (i = 0; i < IMR_NUM; i++)
 		writel_relaxed(gpcv2_saved_imrs[i], reg_imr1 + i * 4);
 
-	/* both core0 and core1's lpm need to be set */
-	imx_gpcv2_set_lpm_mode(0, WAIT_CLOCKED);
-	imx_gpcv2_set_lpm_mode(1, WAIT_CLOCKED);
+	/* all cpu's lpm need to be set */
+	for_each_possible_cpu(cpu)
+		imx_gpcv2_set_lpm_mode(cpu, WAIT_CLOCKED);
+	imx_gpcv2_set_cpu_power_gate_by_lpm(0, false);
+	imx_gpcv2_set_plat_power_gate_by_lpm(false);
+
+	imx_gpcv2_set_m_core_pgc(false, GPC_PGC_C0);
+	imx_gpcv2_set_m_core_pgc(false, GPC_PGC_SCU);
+	imx_gpcv2_set_m_core_pgc(false, GPC_PGC_FM);
+	for (i = 0; i < MAX_SLOT_NUMBER; i++)
+		writel_relaxed(0x0, gpc_base + GPC_SLOT0_CFG + i * 0x4);
+	writel_relaxed(BM_GPC_PGC_ACK_SEL_A7_DUMMY_PUP_ACK |
+		BM_GPC_PGC_ACK_SEL_A7_DUMMY_PDN_ACK,
+		gpc_base + GPC_PGC_ACK_SEL_A7);
 }
 
 static int imx_gpcv2_irq_set_wake(struct irq_data *d, unsigned int on)
@@ -315,10 +442,31 @@ void __init imx_gpcv2_init(void)
 		writel_relaxed(~0, gpc_base + GPC_IMR1_CORE1 + i * 4);
 	}
 
-	writel_relaxed(0x0, gpc_base + GPC_LPCR_A7_BSC);
+	/* Read supported wakeup source in M/F domain */
+	if (cpu_is_imx7d()) {
+		of_property_read_u32_index(np, "fsl,mf-mix-wakeup-irq", 0,
+			&gpcv2_mf_irqs[0]);
+		of_property_read_u32_index(np, "fsl,mf-mix-wakeup-irq", 1,
+			&gpcv2_mf_irqs[1]);
+		of_property_read_u32_index(np, "fsl,mf-mix-wakeup-irq", 2,
+			&gpcv2_mf_irqs[2]);
+		of_property_read_u32_index(np, "fsl,mf-mix-wakeup-irq", 3,
+			&gpcv2_mf_irqs[3]);
+		if (!(gpcv2_mf_irqs[0] | gpcv2_mf_irqs[1] |
+			gpcv2_mf_irqs[2] | gpcv2_mf_irqs[3]))
+			pr_info("No wakeup source in Mega/Fast domain found!\n");
+	}
+
+	/* only external IRQs to wake up LPM and core 0/1 */
+	writel_relaxed(0x2 << BP_LPCR_A7_BSC_IRQ_SRC,
+		gpc_base + GPC_LPCR_A7_BSC);
 	/* mask m4 dsm trigger */
 	writel_relaxed(readl_relaxed(gpc_base + GPC_LPCR_M4) |
 		BM_LPCR_M4_MASK_DSM_TRIGGER, gpc_base + GPC_LPCR_M4);
+	/* set mega/fast mix in A7 domain */
+	writel_relaxed(0x1, gpc_base + GPC_PGC_CPU_MAPPING);
+	/* init A7 basic setting register */
+	writel_relaxed(0x0, gpc_base + GPC_LPCR_A7_BSC);
 
 	/* Register GPC as the secondary interrupt controller behind GIC */
 	gic_arch_extn.irq_mask = imx_gpcv2_irq_mask;
diff --git a/arch/arm/mach-imx/mx7.h b/arch/arm/mach-imx/mx7.h
index bfef936..1fc69f4 100644
--- a/arch/arm/mach-imx/mx7.h
+++ b/arch/arm/mach-imx/mx7.h
@@ -18,6 +18,8 @@
 #define MX7D_CCM_SIZE                   0x10000
 #define MX7D_IOMUXC_BASE_ADDR           0x30330000
 #define MX7D_IOMUXC_SIZE                0x10000
+#define MX7D_IOMUXC_GPR_BASE_ADDR       0x30340000
+#define MX7D_IOMUXC_GPR_SIZE            0x10000
 #define MX7D_ANATOP_BASE_ADDR           0x30360000
 #define MX7D_ANATOP_SIZE                0x10000
 #define MX7D_GPC_BASE_ADDR              0x303a0000
@@ -26,6 +28,8 @@
 #define MX7D_SRC_SIZE                   0x10000
 #define MX7D_DDRC_BASE_ADDR             0x307a0000
 #define MX7D_DDRC_SIZE                  0x10000
+#define MX7D_DDRC_PHY_BASE_ADDR         0x30790000
+#define MX7D_DDRC_PHY_SIZE              0x10000
 #define MX7D_AIPS1_BASE_ADDR            0x30000000
 #define MX7D_AIPS1_SIZE                 0x400000
 #define MX7D_AIPS2_BASE_ADDR            0x30400000
diff --git a/arch/arm/mach-imx/pm-imx7.c b/arch/arm/mach-imx/pm-imx7.c
index de55c10..342e912 100644
--- a/arch/arm/mach-imx/pm-imx7.c
+++ b/arch/arm/mach-imx/pm-imx7.c
@@ -38,8 +38,8 @@
 #include "hardware.h"
 
 #define MX7_SUSPEND_OCRAM_SIZE		0x1000
-#define MX7_MAX_DDRC_IO_NUM		33
-#define MX7_MAX_DDRC_NUM		34
+#define MX7_MAX_DDRC_NUM		32
+#define MX7_MAX_DDRC_PHY_NUM		16
 
 #define MX7_SUSPEND_IRAM_ADDR_OFFSET	0
 
@@ -90,27 +90,71 @@ struct imx7_pm_socdata {
 	const char *src_compat;
 	const char *iomuxc_compat;
 	const char *gpc_compat;
-	const u32 ddrc_io_num;
-	const u32 *ddrc_io_offset;
 	const u32 ddrc_num;
-	const u32 *ddrc_offset;
+	const u32 (*ddrc_offset)[2];
+	const u32 ddrc_phy_num;
+	const u32 (*ddrc_phy_offset)[2];
 };
 
-static const u32 imx7d_ddrc_io_offset[] __initconst = {
+static const u32 imx7d_ddrc_reg_setting[][2] __initconst = {
+	{ 0x0, 0x03040008 },
+	{ 0x1a0, 0x80400003 },
+	{ 0x1a4, 0x00100020 },
+	{ 0x1a8, 0x80100004 },
+	{ 0x64, 0x00200038 },
+	{ 0xd0, 0xc0350001 },
+	{ 0xdc, 0x00c3000a },
+	{ 0xe0, 0x00010000 },
+	{ 0xe4, 0x00110006 },
+	{ 0xf4, 0x0000033f },
+	{ 0x100, 0x0a0e110b },
+	{ 0x104, 0x00020211 },
+	{ 0x108, 0x03060707 },
+	{ 0x10c, 0x00a0500c },
+	{ 0x110, 0x05020307 },
+	{ 0x114, 0x02020404 },
+	{ 0x118, 0x02020003 },
+	{ 0x11c, 0x00000202 },
+	{ 0x180, 0x00600018 },
+	{ 0x184, 0x00e00100 },
+	{ 0x190, 0x02098205 },
+	{ 0x194, 0x00060303 },
+	{ 0x200, 0x00000016 },
+	{ 0x204, 0x00171717 },
+	{ 0x214, 0x05050505 },
+	{ 0x218, 0x0f0f0505 },
+	{ 0x240, 0x06000601 },
+	{ 0x244, 0x00000000 },
 };
 
-static const u32 imx7d_ddrc_offset[] __initconst = {
+static const u32 imx7d_ddrc_phy_reg_setting[][2] __initconst = {
+	{ 0x0, 0x17421e40 },
+	{ 0x4, 0x10210100 },
+	{ 0x8, 0x00010000 },
+	{ 0x10, 0x0007080c },
+	{ 0x1c, 0x01010000 },
+	{ 0x9c, 0x00000d6e },
+	{ 0x20, 0x0a0c0a0a },
+	{ 0x30, 0x06060606 },
+	{ 0x50, 0x01000008 },
+	{ 0x50, 0x00000008 },
+	{ 0xc0, 0x0e407304 },
+	{ 0xc0, 0x0e447304 },
+	{ 0xc0, 0x0e447306 },
+	{ 0xc0, 0x0e4c7304 },
+	{ 0xc0, 0x0e487306 },
 };
 
+
 static const struct imx7_pm_socdata imx7d_pm_data __initconst = {
 	.ddrc_compat = "fsl,imx7d-ddrc",
 	.src_compat = "fsl,imx7d-src",
 	.iomuxc_compat = "fsl,imx7d-iomuxc",
 	.gpc_compat = "fsl,imx7d-gpc",
-	.ddrc_io_num = ARRAY_SIZE(imx7d_ddrc_io_offset),
-	.ddrc_io_offset = imx7d_ddrc_io_offset,
-	.ddrc_num = 0,
-	.ddrc_offset = NULL,
+	.ddrc_num = ARRAY_SIZE(imx7d_ddrc_reg_setting),
+	.ddrc_offset = imx7d_ddrc_reg_setting,
+	.ddrc_phy_num = ARRAY_SIZE(imx7d_ddrc_phy_reg_setting),
+	.ddrc_phy_offset = imx7d_ddrc_phy_reg_setting,
 };
 
 /*
@@ -121,22 +165,26 @@ static const struct imx7_pm_socdata imx7d_pm_data __initconst = {
  * otherwise, the suspend to ocram function will be broken!
  */
 struct imx7_cpu_pm_info {
+	u32 m4_reserve0;
+	u32 m4_reserve1;
+	u32 m4_reserve2;
 	phys_addr_t pbase; /* The physical address of pm_info. */
 	phys_addr_t resume_addr; /* The physical resume address for asm code */
 	u32 ddr_type;
 	u32 pm_info_size; /* Size of pm_info. */
 	struct imx7_pm_base ddrc_base;
+	struct imx7_pm_base ddrc_phy_base;
 	struct imx7_pm_base src_base;
-	struct imx7_pm_base iomuxc_base;
+	struct imx7_pm_base iomuxc_gpr_base;
 	struct imx7_pm_base ccm_base;
 	struct imx7_pm_base gpc_base;
 	struct imx7_pm_base l2_base;
 	struct imx7_pm_base anatop_base;
 	u32 ttbr1; /* Store TTBR1 */
-	u32 ddrc_io_num; /* Number of DDRC IOs which need saved/restored. */
-	u32 ddrc_io_val[MX7_MAX_DDRC_IO_NUM][2]; /* To save offset and value */
-	u32 ddrc_num; /* Number of DDRC registers which need saved/restored. */
+	u32 ddrc_num; /* Number of DDRC which need saved/restored. */
 	u32 ddrc_val[MX7_MAX_DDRC_NUM][2]; /* To save offset and value */
+	u32 ddrc_phy_num; /* Number of DDRC which need saved/restored. */
+	u32 ddrc_phy_val[MX7_MAX_DDRC_NUM][2]; /* To save offset and value */
 } __aligned(8);
 
 static struct map_desc imx7_pm_io_desc[] __initdata = {
@@ -221,14 +269,18 @@ static int imx7_pm_enter(suspend_state_t state)
 	case PM_SUSPEND_MEM:
 		imx_anatop_pre_suspend();
 		imx_gpcv2_pre_suspend(true);
-		imx7_console_save(console_saved_reg);
-		memcpy(ocram_saved_in_ddr, ocram_base, ocram_size);
+		if (imx_gpcv2_is_mf_mix_off()) {
+			imx7_console_save(console_saved_reg);
+			memcpy(ocram_saved_in_ddr, ocram_base, ocram_size);
+		}
 
 		/* Zzz ... */
 		cpu_suspend(0, imx7_suspend_finish);
 
-		memcpy(ocram_base, ocram_saved_in_ddr, ocram_size);
-		imx7_console_restore(console_saved_reg);
+		if (imx_gpcv2_is_mf_mix_off()) {
+			memcpy(ocram_base, ocram_saved_in_ddr, ocram_size);
+			imx7_console_restore(console_saved_reg);
+		}
 		imx_anatop_post_resume();
 		imx_gpcv2_post_resume();
 		break;
@@ -355,8 +407,8 @@ static int __init imx7_suspend_init(const struct imx7_pm_socdata *socdata)
 	struct device_node *node;
 	struct imx7_cpu_pm_info *pm_info;
 	int i, ret = 0;
-	const u32 *ddrc_io_offset_array;
-	const u32 *ddrc_offset_array;
+	const u32 (*ddrc_offset_array)[2];
+	const u32 (*ddrc_phy_offset_array)[2];
 	unsigned long iram_paddr;
 
 	suspend_set_ops(&imx7_pm_ops);
@@ -400,13 +452,17 @@ static int __init imx7_suspend_init(const struct imx7_pm_socdata *socdata)
 	pm_info->ddrc_base.vbase = (void __iomem *)
 				    IMX_IO_P2V(MX7D_DDRC_BASE_ADDR);
 
+	pm_info->ddrc_phy_base.pbase = MX7D_DDRC_PHY_BASE_ADDR;
+	pm_info->ddrc_phy_base.vbase = (void __iomem *)
+				    IMX_IO_P2V(MX7D_DDRC_PHY_BASE_ADDR);
+
 	pm_info->src_base.pbase = MX7D_SRC_BASE_ADDR;
 	pm_info->src_base.vbase = (void __iomem *)
 				   IMX_IO_P2V(MX7D_SRC_BASE_ADDR);
 
-	pm_info->iomuxc_base.pbase = MX7D_IOMUXC_BASE_ADDR;
-	pm_info->iomuxc_base.vbase = (void __iomem *)
-				      IMX_IO_P2V(MX7D_IOMUXC_BASE_ADDR);
+	pm_info->iomuxc_gpr_base.pbase = MX7D_IOMUXC_GPR_BASE_ADDR;
+	pm_info->iomuxc_gpr_base.vbase = (void __iomem *)
+				      IMX_IO_P2V(MX7D_IOMUXC_GPR_BASE_ADDR);
 
 	pm_info->gpc_base.pbase = MX7D_GPC_BASE_ADDR;
 	pm_info->gpc_base.vbase = (void __iomem *)
@@ -416,26 +472,23 @@ static int __init imx7_suspend_init(const struct imx7_pm_socdata *socdata)
 	pm_info->anatop_base.vbase = (void __iomem *)
 				  IMX_IO_P2V(MX7D_ANATOP_BASE_ADDR);
 
-	pm_info->ddrc_io_num = socdata->ddrc_io_num;
-	ddrc_io_offset_array = socdata->ddrc_io_offset;
 	pm_info->ddrc_num = socdata->ddrc_num;
 	ddrc_offset_array = socdata->ddrc_offset;
+	pm_info->ddrc_phy_num = socdata->ddrc_phy_num;
+	ddrc_phy_offset_array = socdata->ddrc_phy_offset;
 
-	/* initialize DDRC IO settings */
-	for (i = 0; i < pm_info->ddrc_io_num; i++) {
-		pm_info->ddrc_io_val[i][0] =
-			ddrc_io_offset_array[i];
-		pm_info->ddrc_io_val[i][1] =
-			readl_relaxed(pm_info->iomuxc_base.vbase +
-			ddrc_io_offset_array[i]);
-	}
 	/* initialize DDRC settings */
 	for (i = 0; i < pm_info->ddrc_num; i++) {
-		pm_info->ddrc_val[i][0] =
-			ddrc_offset_array[i];
-		pm_info->ddrc_val[i][1] =
-			readl_relaxed(pm_info->ddrc_base.vbase +
-			ddrc_offset_array[i]);
+		pm_info->ddrc_val[i][0] = ddrc_offset_array[i][0];
+		pm_info->ddrc_val[i][1] = ddrc_offset_array[i][1];
+	}
+
+	/* initialize DDRC PHY settings */
+	for (i = 0; i < pm_info->ddrc_phy_num; i++) {
+		pm_info->ddrc_phy_val[i][0] =
+			ddrc_phy_offset_array[i][0];
+		pm_info->ddrc_phy_val[i][1] =
+			ddrc_phy_offset_array[i][1];
 	}
 
 	imx7_suspend_in_ocram_fn = fncpy(
diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index e069fea..9217983 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -105,7 +105,8 @@ void imx_enable_cpu(int cpu, bool enable)
 	spin_lock(&src_lock);
 	if (cpu_is_imx7d()) {
 		/* enable core */
-		imx_gpcv2_set_core1_pdn_pup_by_software(false);
+		if (enable)
+			imx_gpcv2_set_core1_pdn_pup_by_software(false);
 		mask = 1 << (BP_SRC_A7RCR1_A7_CORE1_ENABLE + cpu - 1);
 		val = readl_relaxed(src_base + SRC_A7RCR1);
 		val = enable ? val | mask : val & ~mask;
diff --git a/arch/arm/mach-imx/suspend-imx7.S b/arch/arm/mach-imx/suspend-imx7.S
index 5e127da..8f72f02 100644
--- a/arch/arm/mach-imx/suspend-imx7.S
+++ b/arch/arm/mach-imx/suspend-imx7.S
@@ -41,40 +41,49 @@
  * structure contains necessary pm info for low level
  * suspend related code.
  */
-#define PM_INFO_PBASE_OFFSET			0x0
-#define PM_INFO_RESUME_ADDR_OFFSET		0x4
-#define PM_INFO_DDR_TYPE_OFFSET			0x8
-#define PM_INFO_PM_INFO_SIZE_OFFSET		0xC
-#define PM_INFO_MX7_DDRC_P_OFFSET		0x10
-#define PM_INFO_MX7_DDRC_V_OFFSET		0x14
-#define PM_INFO_MX7_SRC_P_OFFSET		0x18
-#define PM_INFO_MX7_SRC_V_OFFSET		0x1C
-#define PM_INFO_MX7_IOMUXC_P_OFFSET		0x20
-#define PM_INFO_MX7_IOMUXC_V_OFFSET		0x24
-#define PM_INFO_MX7_CCM_P_OFFSET		0x28
-#define PM_INFO_MX7_CCM_V_OFFSET		0x2C
-#define PM_INFO_MX7_GPC_P_OFFSET		0x30
-#define PM_INFO_MX7_GPC_V_OFFSET		0x34
-#define PM_INFO_MX7_L2_P_OFFSET		0x38
-#define PM_INFO_MX7_L2_V_OFFSET		0x3C
-#define PM_INFO_MX7_ANATOP_P_OFFSET		0x40
-#define PM_INFO_MX7_ANATOP_V_OFFSET		0x44
-#define PM_INFO_MX7_TTBR1_V_OFFSET		0x48
-#define PM_INFO_DDRC_IO_NUM_OFFSET		0x4c
-#define PM_INFO_DDRC_IO_VAL_OFFSET		0x50
-/* below offsets depends on MX6_MAX_DDRC_IO_NUM(33) definition */
-#define PM_INFO_DDRC_NUM_OFFSET			0x158
-#define PM_INFO_DDRC_VAL_OFFSET			0x15c
+#define PM_INFO_M4_RESERVE0_OFFSET		0x0
+#define PM_INFO_M4_RESERVE1_OFFSET		0x4
+#define PM_INFO_M4_RESERVE2_OFFSET		0x8
+#define PM_INFO_PBASE_OFFSET			0xc
+#define PM_INFO_RESUME_ADDR_OFFSET		0x10
+#define PM_INFO_DDR_TYPE_OFFSET			0x14
+#define PM_INFO_PM_INFO_SIZE_OFFSET		0x18
+#define PM_INFO_MX7_DDRC_P_OFFSET		0x1c
+#define PM_INFO_MX7_DDRC_V_OFFSET		0x20
+#define PM_INFO_MX7_DDRC_PHY_P_OFFSET		0x24
+#define PM_INFO_MX7_DDRC_PHY_V_OFFSET		0x28
+#define PM_INFO_MX7_SRC_P_OFFSET		0x2c
+#define PM_INFO_MX7_SRC_V_OFFSET		0x30
+#define PM_INFO_MX7_IOMUXC_GPR_P_OFFSET		0x34
+#define PM_INFO_MX7_IOMUXC_GPR_V_OFFSET		0x38
+#define PM_INFO_MX7_CCM_P_OFFSET		0x3c
+#define PM_INFO_MX7_CCM_V_OFFSET		0x40
+#define PM_INFO_MX7_GPC_P_OFFSET		0x44
+#define PM_INFO_MX7_GPC_V_OFFSET		0x48
+#define PM_INFO_MX7_L2_P_OFFSET			0x4c
+#define PM_INFO_MX7_L2_V_OFFSET			0x50
+#define PM_INFO_MX7_ANATOP_P_OFFSET		0x54
+#define PM_INFO_MX7_ANATOP_V_OFFSET		0x58
+#define PM_INFO_MX7_TTBR1_V_OFFSET		0x5c
+#define PM_INFO_DDRC_REG_NUM_OFFSET		0x60
+#define PM_INFO_DDRC_REG_OFFSET			0x64
+#define PM_INFO_DDRC_VALUE_OFFSET		0x68
+#define PM_INFO_DDRC_PHY_REG_NUM_OFFSET		0x164
+#define PM_INFO_DDRC_PHY_REG_OFFSET		0x168
+#define PM_INFO_DDRC_PHY_VALUE_OFFSET		0x16c
 
 #define MX7_SRC_GPR1	0x74
 #define MX7_SRC_GPR2	0x78
 #define MX7_ANATOP_CORE	0x140
+#define ANADIG_SNVS_MISC_CTRL	0x380
 #define DDRC_STAT	0x4
 #define DDRC_PWRCTL	0x30
 #define DDRC_PSTAT	0x3fc
-
-#define MX7_MAX_DDRC_IO_NUM             33
-#define MX7_MAX_DDRC_NUM                34
+#define DDRC_PCTRL_0	0x490
+#define DDR_DFIMISC	0x1b0
+#define DDR_SWCTL	0x320
+#define DDR_SWSTAT	0x324
+#define DDRPHY_LP_CON0	0x18
 
 	.align 3
 
@@ -217,6 +226,196 @@
 
 	.endm
 
+	.macro wait_delay
+5:
+	subs	r6, r6, #0x1
+	bne	5b
+
+	.endm
+
+	.macro ddr_enter_retention
+
+	/* let DDR out of self-refresh */
+	ldr	r7, =0x0
+	str	r7, [r11, #DDRC_PCTRL_0]
+
+	/* wait rw port_busy clear */
+	ldr	r6, =(0x1 << 16)
+	orr	r6, r6, #0x1
+6:
+	ldr	r7, [r11, #DDRC_PSTAT]
+	ands	r7, r7, r6
+	bne	6b
+
+	ldr	r11, [r0, #PM_INFO_MX7_DDRC_V_OFFSET]
+	/* enter self-refresh bit 5 */
+	ldr	r7, =(0x1 << 5)
+	str	r7, [r11, #DDRC_PWRCTL]
+
+	/* wait until self-refresh mode entered */
+7:
+	ldr	r7, [r11, #DDRC_STAT]
+	and	r7, r7, #0x3
+	cmp	r7, #0x3
+	bne	7b
+8:
+	ldr	r7, [r11, #DDRC_STAT]
+	ands	r7, r7, #0x20
+	beq	8b
+
+	/* disable dram clk */
+	ldr	r7, =(0x1 << 5)
+	orr	r7, r7, #(1 << 3)
+	str	r7, [r11, #DDRC_PWRCTL]
+
+	/* reset ddr_phy  */
+
+	ldr	r11, [r0, #PM_INFO_MX7_SRC_V_OFFSET]
+	ldr	r6, =0x1000
+	ldr	r7, [r11, r6]
+	orr	r7, r7, #0x1
+	str	r7, [r11, r6]
+	ldr	r11, [r0, #PM_INFO_MX7_ANATOP_V_OFFSET]
+	ldr	r7, =0x0
+	str	r7, [r11, #ANADIG_SNVS_MISC_CTRL]
+	/* turn off ddr power */
+	ldr	r7, =(0x1 << 29)
+	str	r7, [r11, #ANADIG_SNVS_MISC_CTRL]
+
+	.endm
+
+	.macro ddr_exit_retention
+
+	cmp	r5, #0x0
+	ldreq	r1, [r0, #PM_INFO_MX7_ANATOP_V_OFFSET]
+	ldrne	r1, [r0, #PM_INFO_MX7_ANATOP_P_OFFSET]
+	ldreq	r2, [r0, #PM_INFO_MX7_SRC_V_OFFSET]
+	ldrne	r2, [r0, #PM_INFO_MX7_SRC_P_OFFSET]
+	ldreq	r3, [r0, #PM_INFO_MX7_DDRC_V_OFFSET]
+	ldrne	r3, [r0, #PM_INFO_MX7_DDRC_P_OFFSET]
+	ldreq	r4, [r0, #PM_INFO_MX7_DDRC_PHY_V_OFFSET]
+	ldrne	r4, [r0, #PM_INFO_MX7_DDRC_PHY_P_OFFSET]
+	ldreq	r10, [r0, #PM_INFO_MX7_CCM_V_OFFSET]
+	ldrne	r10, [r0, #PM_INFO_MX7_CCM_P_OFFSET]
+	ldreq	r11, [r0, #PM_INFO_MX7_IOMUXC_GPR_V_OFFSET]
+	ldrne	r11, [r0, #PM_INFO_MX7_IOMUXC_GPR_P_OFFSET]
+
+	/* turn on ddr power */
+	ldr	r7, =(0x1 << 29)
+	str	r7, [r1, #ANADIG_SNVS_MISC_CTRL]
+
+	ldr	r6, =50
+	wait_delay
+
+	ldr	r7, =0x0
+	str	r7, [r1, #ANADIG_SNVS_MISC_CTRL]
+
+	/* clear ddr_phy reset */
+	ldr	r6, =0x1000
+	ldr	r7, [r2, r6]
+	orr	r7, r7, #0x3
+	str	r7, [r2, r6]
+	ldr	r7, [r2, r6]
+	bic	r7, r7, #0x1
+	str	r7, [r2, r6]
+
+	ldr	r6, [r0, #PM_INFO_DDRC_REG_NUM_OFFSET]
+	ldr	r7, =PM_INFO_DDRC_REG_OFFSET
+	add	r7, r7, r0
+9:
+	ldr	r8, [r7], #0x4
+	ldr	r9, [r7], #0x4
+	str	r9, [r3, r8]
+	subs	r6, r6, #0x1
+	bne	9b
+	ldr	r7, =0x20
+	str	r7, [r3, #DDRC_PWRCTL]
+	ldr	r7, =0x0
+	str	r7, [r3, #DDR_DFIMISC]
+
+	/* do PHY, clear ddr_phy reset */
+	ldr	r6, =0x1000
+	ldr	r7, [r2, r6]
+	bic	r7, r7, #0x2
+	str	r7, [r2, r6]
+
+	ldr	r7, =(0x1 << 30)
+	str	r7, [r1, #ANADIG_SNVS_MISC_CTRL]
+
+	/* need to delay ~5mS */
+	ldr	r6, =0x100000
+	wait_delay
+
+	ldr	r6, [r0, #PM_INFO_DDRC_PHY_REG_NUM_OFFSET]
+	ldr	r7, =PM_INFO_DDRC_PHY_REG_OFFSET
+	add	r7, r7, r0
+
+10:
+	ldr	r8, [r7], #0x4
+	ldr	r9, [r7], #0x4
+	str	r9, [r4, r8]
+	subs	r6, r6, #0x1
+	bne	10b
+
+	ldr	r7, =0x0
+	add	r9, r10, #0x4000
+	str	r7, [r9, #0x130]
+
+	ldr	r7, =0x170
+	orr	r7, r7, #0x8
+	str	r7, [r11, #0x20]
+
+	ldr	r7, =0x2
+	add	r9, r10, #0x4000
+	str	r7, [r9, #0x130]
+
+	ldr	r7, =0xf
+	str	r7, [r4, #DDRPHY_LP_CON0]
+
+	/* wait until self-refresh mode entered */
+11:
+	ldr	r7, [r3, #DDRC_STAT]
+	and	r7, r7, #0x3
+	cmp	r7, #0x3
+	bne	11b
+	ldr	r7, =0x0
+	str	r7, [r3, #DDR_SWCTL]
+	ldr	r7, =0x1
+	str	r7, [r3, #DDR_DFIMISC]
+	ldr	r7, =0x1
+	str	r7, [r3, #DDR_SWCTL]
+12:
+	ldr	r7, [r3, #DDR_SWSTAT]
+	and	r7, r7, #0x1
+	cmp	r7, #0x1
+	bne	12b
+13:
+	ldr	r7, [r3, #DDRC_STAT]
+	and	r7, r7, #0x20
+	cmp	r7, #0x20
+	bne	13b
+
+	/* let DDR out of self-refresh */
+	ldr	r7, =0x0
+	str	r7, [r3, #DDRC_PWRCTL]
+14:
+	ldr	r7, [r3, #DDRC_STAT]
+	and	r7, r7, #0x30
+	cmp	r7, #0x0
+	bne	14b
+
+15:
+	ldr	r7, [r3, #DDRC_STAT]
+	and	r7, r7, #0x3
+	cmp	r7, #0x1
+	bne	15b
+
+	/* enable port */
+	ldr	r7, =0x1
+	str	r7, [r3, #DDRC_PCTRL_0]
+
+	.endm
+
 ENTRY(imx7_suspend)
 	push	{r4-r12}
 	/*
@@ -246,7 +445,16 @@ ENTRY(imx7_suspend)
 	store_ttbr1
 
 	ldr	r11, [r0, #PM_INFO_MX7_DDRC_V_OFFSET]
+	ldr	r10, [r0, #PM_INFO_MX7_GPC_V_OFFSET]
+	ldr	r5, [r10, #0xa00]
+	cmp	r5, #0
+	beq	ddr_only_self_refresh
+
+	ddr_enter_retention
+	b	ddr_retention_enter_out
+ddr_only_self_refresh:
 	ddrc_enter_self_refresh
+ddr_retention_enter_out:
 
 	/* Zzz, enter stop mode */
 	wfi
@@ -255,7 +463,9 @@ ENTRY(imx7_suspend)
 	nop
 	nop
 
-	ddrc_exit_self_refresh
+	mov	r5, #0x0
+	ddr_exit_retention
+
 	restore_ttbr1
 
 	pop	{r4-r12}
@@ -281,9 +491,17 @@ resume:
 	str	r7, [r11, #MX7_SRC_GPR2]
 
 	ldr	r11, [r0, #PM_INFO_MX7_DDRC_P_OFFSET]
+	ldr	r10, [r0, #PM_INFO_MX7_GPC_P_OFFSET]
+	ldr	r5, [r10, #0xa00]
+	cmp	r5, #0
+	beq	ddr_only_self_refresh_out
+
+	mov	r5, #0x1
+	ddr_exit_retention
+	b	ddr_retention_exit_out
+ddr_only_self_refresh_out:
 	ddrc_exit_self_refresh
-
-	restore_ttbr1
+ddr_retention_exit_out:
 
 	mov	pc, lr
 ENDPROC(imx7_suspend)
-- 
1.7.5.4

