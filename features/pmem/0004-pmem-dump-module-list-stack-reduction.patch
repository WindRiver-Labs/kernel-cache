From 816156bbc3850f3f6121f104e862ad2b112710d4 Mon Sep 17 00:00:00 2001
From: Yongli He <yongli.he@windriver.com>
Date: Thu, 4 Sep 2008 12:56:53 +0800
Subject: [PATCH] pmem dump module list stack reduction

Signed-off-by: Yongli he   <yongli.he@windriver.com>
Signed-off-by: MacDonald, Joe <Joe.MacDonald@windriver.com>
---
 kernel/module.c |   49 +++++++++++++++++++++++++++++++------------------
 1 files changed, 31 insertions(+), 18 deletions(-)

diff --git a/kernel/module.c b/kernel/module.c
index 5c31fbc..9ac5887 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -2978,7 +2978,16 @@ int is_imv_cond_end_module(unsigned long addr1, unsigned long addr2)
 #include <linux/pmem.h>
 extern pmem_handle_t kcore_reg_hdl;    /* instantiated in printk.c  */
 
-#define MODLIST_SIZE 4096
+#define MODLIST_STRING_SIZE	4096
+#define KSYMS_STRING_SIZE	8192
+/*  A buffer used to hold the string representation of print_modules()
+ *  in order to dump it to pmem.  Allocated here as a static array 
+ *  so that we dont have to rely on kmalloc when called from kcore_logoff - 
+ *  a panic/oops may have happened. */
+static char modtextbuf[MODLIST_STRING_SIZE];
+/* Similar buffer for module symbols */
+static char ksymstextbuf[KSYMS_STRING_SIZE+1];
+
 
 /*
  * Same function as module.c void print_modules(void) EXCEPT that
@@ -2988,57 +2997,61 @@ void pmem_dump_module_list(void)
 {
 	struct module *mod;
 	unsigned int pos = 0;
-	char buf[MODLIST_SIZE];
 
 	if (!kcore_reg_hdl)
 		return;
 
-	pos += snprintf(buf+pos, MODLIST_SIZE-pos, "\n");
+	pos += snprintf(modtextbuf+pos, MODLIST_STRING_SIZE-pos, "\n");
 	list_for_each_entry(mod, &modules, list)
-		pos += snprintf(buf+pos, MODLIST_SIZE-pos, "%s ", mod->name);
-	pos += snprintf(buf+pos, MODLIST_SIZE-pos-1, "\n");
+		pos += snprintf(modtextbuf+pos, MODLIST_STRING_SIZE-pos, "%s ", mod->name);
+	pos += snprintf(modtextbuf+pos, MODLIST_STRING_SIZE-pos-1, "\n");
 
-	pmem_write_data(kcore_reg_hdl, buf, pos);
+	pmem_write_data(kcore_reg_hdl, modtextbuf, pos);
 }
 
 void pmem_dump_ksyms(void)
 {
 	struct module *mod;
 	const struct kernel_symbol *sym;
-	char buf[512];
 	unsigned int len;
 	unsigned int i;
 	
 	if (!kcore_reg_hdl)
 		return;
-        
+
 	pmem_write_data(kcore_reg_hdl, "\n", 1);
 
 	list_for_each_entry(mod, &modules, list) {
 		for (i = 0; i < mod->num_syms; i++) {
 			sym = &mod->syms[i];
 			if (mod->name)
-				len = snprintf(buf, 512, "%0*lx %s\t[%s]\n", 
-						(int)(2*sizeof(void*)), sym->value, 
-						sym->name, mod->name);
+				len = snprintf(ksymstextbuf, KSYMS_STRING_SIZE,
+						"%0*lx %s\t[%s]\n",
+						(int)(2*sizeof(void*)),
+						sym->value, sym->name,
+						mod->name);
 			else
-				len = snprintf(buf, 512, "%0*lx %s\n", 
+				len = snprintf(ksymstextbuf, KSYMS_STRING_SIZE,
+						"%0*lx %s\n",
 						(int)(2*sizeof(void*)),
 						sym->value, sym->name);
-			pmem_write_data(kcore_reg_hdl, buf, len);
+			pmem_write_data(kcore_reg_hdl, ksymstextbuf, len);
 		}
 		/* and gpl symbols as well */
 		for (i = 0; i < mod->num_gpl_syms; i++) {
 			sym = &mod->gpl_syms[i];
 			if (mod->name)
-				len = snprintf(buf, 512, "%0*lx %s\t[%s]\n", 
-						(int)(2*sizeof(void*)), sym->value, 
-						sym->name, mod->name);
+				len = snprintf(ksymstextbuf, KSYMS_STRING_SIZE,
+						"%0*lx %s\t[%s]\n",
+						(int)(2*sizeof(void*)),
+						sym->value, sym->name,
+						mod->name);
 			else
-				len = snprintf(buf, 512, "%0*lx %s\n", 
+				len = snprintf(ksymstextbuf, KSYMS_STRING_SIZE,
+						"%0*lx %s\n",
 						(int)(2*sizeof(void*)),
 						sym->value, sym->name);
-			pmem_write_data(kcore_reg_hdl, buf, len);
+			pmem_write_data(kcore_reg_hdl, ksymstextbuf, len);
 		}
 	}
 }
-- 
1.5.5.1

