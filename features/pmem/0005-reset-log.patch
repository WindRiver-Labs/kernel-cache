From 475e6de130b42771eb6b71087a609b51dd34679d Mon Sep 17 00:00:00 2001
From: Yongli He <yongli.he@windriver.com>
Date: Thu, 4 Sep 2008 13:09:01 +0800
Subject: [PATCH] reset log

Signed-off-by: Yongli he   <yongli.he@windriver.com>
Signed-off-by: MacDonald, Joe <Joe.MacDonald@windriver.com>

diff --git a/arch/powerpc/kernel/setup-common.c b/arch/powerpc/kernel/setup-common.c
index 9cc5a52..05e4d71 100644
--- a/arch/powerpc/kernel/setup-common.c
+++ b/arch/powerpc/kernel/setup-common.c
@@ -35,6 +35,11 @@
 #include <linux/debugfs.h>
 #include <linux/percpu.h>
 #include <linux/lmb.h>
+
+#ifdef CONFIG_RESET_LOGS
+#include <linux/kernel.h>
+#endif
+
 #include <asm/io.h>
 #include <asm/prom.h>
 #include <asm/processor.h>
@@ -107,6 +112,17 @@ void machine_shutdown(void)
 
 void machine_restart(char *cmd)
 {
+#ifdef CONFIG_RESET_LOGS
+	struct timeval tv;
+
+	kcore_logon(1);
+	do_gettimeofday(&tv);
+	printk("Machine Restart at %9d:%06d\n", (int) tv.tv_sec, (int) tv.tv_usec);
+	dump_stack();
+	printk("Current process %d: '%s'\n", current->pid, current->comm);
+	kcore_logoff_quiet();
+#endif
+
 	machine_shutdown();
 	if (ppc_md.restart)
 		ppc_md.restart(cmd);
diff --git a/arch/x86/kernel/reboot.c b/arch/x86/kernel/reboot.c
index 0501dea..f942f51 100644
--- a/arch/x86/kernel/reboot.c
+++ b/arch/x86/kernel/reboot.c
@@ -13,6 +13,10 @@
 #include <asm/reboot_fixups.h>
 #include <asm/reboot.h>
 
+#ifdef CONFIG_RESET_LOGS
+#include <linux/kernel.h>
+#endif
+
 #ifdef CONFIG_LHB
 extern void lhb_log_restart(void);
 #else
@@ -460,7 +464,16 @@ void native_machine_shutdown(void)
 static void native_machine_restart(char *__unused)
 {
 	printk("machine restart\n");
-
+#ifdef CONFIG_RESET_LOGS
+	struct timeval tv;
+
+	kcore_logon(1);
+	do_gettimeofday(&tv);
+	printk("Machine Restart at %9d:%06d\n", (int) tv.tv_sec, (int) tv.tv_usec);
+	dump_stack();
+	printk("Current process %d: '%s'\n", current->pid, current->comm);
+	kcore_logoff_quiet();
+#endif
 	if (!reboot_force)
 		machine_shutdown();
 	machine_emergency_restart();
diff --git a/drivers/pmem/pmem_init.c b/drivers/pmem/pmem_init.c
index f768d83..9eeefe4 100644
--- a/drivers/pmem/pmem_init.c
+++ b/drivers/pmem/pmem_init.c
@@ -57,6 +57,11 @@ void lhb_mask_init(void);
 #define lhb_mask_init() do { } while(0)
 #endif  /* CONFIG_LHB_TESTMODE */
 
+#ifdef CONFIG_PMEM_LOG_REG
+extern pmem_handle_t general_part_hdl;
+extern pmem_handle_t general_reg_hdl;
+#endif /* CONFIG_PMEM_LOG_REG */
+
 /* Allow the kernel command line to force a pmem format */
 static int __initdata pmem_force_clear = 0;
 
@@ -910,6 +915,11 @@ static int pmem_reg_users(void)
 #ifdef CONFIG_LHB
 	memset(&lhb_ptrs, '\0', sizeof(struct pmem_ptr_block));
 #endif
+#ifdef CONFIG_PMEM_LOG_REG
+	general_part_hdl = NULL;
+	general_reg_hdl = NULL;
+#endif
+
 	/* Register the log partition */
 	strncpy(part.desc, PMEM_PART_LOG_DESC, PMEM_DESC_MAX);
 	part.size = CONFIG_PMEM_LOG_PART_SIZE;
@@ -955,24 +965,29 @@ static int pmem_reg_users(void)
 #endif
 
 #ifdef CONFIG_PMEM_LOG_REG
-	/* Register the log region and release the handle */
-	strncpy(region.desc, PMEM_REG_GENERAL_DESC, PMEM_DESC_MAX);
-	region.size = CONFIG_PMEM_LOG_REG_SIZE;
-	region.flags = PMEM_REG_GENERAL_FLAGS;
-	region.fixed_size = PMEM_REG_GENERAL_FIXED_SIZE;
-	region.num_log_desc = CONFIG_PMEM_LOG_REG_LOGS;
-	region.version = PMEM_REG_GENERAL_VERSION;
-	region.block_id = PMEM_ACTIVE_BLOCK;
-
-	rc = pmem_region_reg(log_part_hdl, &region, &region_hdl);
-	if (rc < 0) {
+	/* Register the general region and keep the handles */
+	if (pmem_partition_reg(&part, &general_part_hdl) < 0) {
 		printk(KERN_ERR "ERROR: **********************************\n");
-		printk(KERN_ERR "ERROR: Unable to get general logs region\n");
-		printk(KERN_ERR "ERROR: Kernelspace access DISABLED\n");
+		printk(KERN_ERR "ERROR: Unable to get general partition\n");
 		printk(KERN_ERR "ERROR: **********************************\n");
 	}
 	else {
-		pmem_release_handle(region_hdl);
+		/* Register the log region and release the handle */
+		strncpy(region.desc, PMEM_REG_GENERAL_DESC, PMEM_DESC_MAX);
+		region.size = CONFIG_PMEM_LOG_REG_SIZE;
+		region.flags = PMEM_REG_GENERAL_FLAGS;
+		region.fixed_size = PMEM_REG_GENERAL_FIXED_SIZE;
+		region.num_log_desc = CONFIG_PMEM_LOG_REG_LOGS;
+		region.version = PMEM_REG_GENERAL_VERSION;
+		region.block_id = PMEM_ACTIVE_BLOCK;
+
+		if (pmem_region_reg(general_part_hdl, &region, &general_reg_hdl) < 0) {
+			printk(KERN_ERR "ERROR: **********************************\n");
+			printk(KERN_ERR "ERROR: Unable to get general region\n");
+			printk(KERN_ERR "ERROR: **********************************\n");
+			pmem_release_handle(general_part_hdl);
+			general_part_hdl = NULL;
+		}
 	}
 #endif
 
@@ -1255,7 +1270,16 @@ static int pmem_reboot_handler(struct notifier_block *this,
 {
 	int reason;
 	int rc = -EFAULT;
-
+#ifdef CONFIG_RESET_LOGS
+	struct timeval tv;
+
+	kcore_logon(1);
+	do_gettimeofday(&tv);
+	printk(KERN_EMERG "pmem reboot handler at %9d:%06d\n", (int) tv.tv_sec, (int) tv.tv_usec);
+	dump_stack();
+	printk("Current process %d: '%s'\n", current->pid, current->comm);
+	kcore_logoff_quiet();
+#endif
 	printk(KERN_INFO "INFO: Starting pmem_reboot_handler\n");
 	
 	/* lock the current active segment to prevent accidental 
diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index 2efed90..d6ad287 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -222,6 +222,11 @@ static inline void unregister_emit_crash_char() {}
 extern void asmlinkage __attribute__((format(printf, 1, 2)))
 	early_printk(const char *fmt, ...);
 
+#ifdef CONFIG_RESET_LOGS
+extern void kcore_logon(int reboot);
+extern void kcore_logoff_quiet(void);
+#endif
+
 unsigned long int_sqrt(unsigned long);
 
 static inline void console_silent(void)
diff --git a/init/Kconfig b/init/Kconfig
index 8bed126..c291500 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -595,6 +595,13 @@ config PANIC_LOGS_SIZE
 	  Specifies the size (in bytes) of the panic history buffer in
 	  persistent memory.
 
+config RESET_LOGS 
+        bool "Reset logging support"
+	depends on PANIC_LOGS&&PMEM
+        default n
+        help
+          When enabled this logs reset info to kcore.
+
 config SYSCTL
 	bool
 
diff --git a/kernel/printk.c b/kernel/printk.c
index 2b715f0..668deeb 100644
--- a/kernel/printk.c
+++ b/kernel/printk.c
@@ -106,7 +106,7 @@ static DEFINE_SPINLOCK(logbuf_lock);
 #define LOG_BUF_MASK (log_buf_len-1)
 #define LOG_BUF(idx) (log_buf[(idx) & LOG_BUF_MASK])
 
-#ifdef CONFIG_PANIC_LOGS
+#if defined (CONFIG_PANIC_LOGS) || defined (CONFIG_PMEM_LOG_REG) || defined (CONFIG_RESET_LOGS)
 #include <linux/pmem.h>
 #include <linux/time.h>
 
@@ -144,9 +144,28 @@ void kcore_logoff(void)
 	if (!atomic_dec_and_test(&log_printks))
 		return;
 
+#ifdef CONFIG_PANIC_LOGS
 	pmem_dump_module_list();
 	pmem_dump_ksyms();
+#endif /* CONFIG_PANIC_LOGS */
 }
+
+void kcore_logoff_quiet(void)
+{
+	if (!kcore_reg_hdl)
+		return;
+
+	if (!atomic_dec_and_test(&log_printks))
+		return;
+}
+
+EXPORT_SYMBOL(kcore_logon);
+EXPORT_SYMBOL(kcore_logoff_quiet);
+#endif
+
+#ifdef CONFIG_PMEM_LOG_REG
+pmem_handle_t general_part_hdl = 0;
+pmem_handle_t general_reg_hdl = 0;
 #endif
 
 /*
@@ -535,7 +554,7 @@ static void _call_console_drivers(unsigned start,
 			__call_console_drivers(start, end);
 		}
 	}
-#ifdef CONFIG_PANIC_LOGS
+#if defined (CONFIG_PANIC_LOGS) || defined (CONFIG_RESET_LOGS)
 	if ((start != end) && atomic_read(&log_printks)) {/*Dont care about log level*/
 		if ((start & LOG_BUF_MASK) > (end & LOG_BUF_MASK)) {
 			/* wrapped write */
@@ -546,6 +565,18 @@ static void _call_console_drivers(unsigned start,
 		}
 	}
 #endif
+
+#ifdef CONFIG_PMEM_LOG_REG
+	if (start != end) {/*Dont care about log level*/
+		if ((start & LOG_BUF_MASK) > (end & LOG_BUF_MASK)) {
+			/* wrapped write */
+			pmem_write_data(general_reg_hdl, &LOG_BUF(start & LOG_BUF_MASK), log_buf_len-(start & LOG_BUF_MASK));
+			pmem_write_data(general_reg_hdl, &LOG_BUF(0), (end & LOG_BUF_MASK) -0);
+		} else {
+       			pmem_write_data(general_reg_hdl, &LOG_BUF(start), end-start);
+		}
+	}
+#endif
 }
 
 /*
