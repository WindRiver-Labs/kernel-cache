From f8a0b5d259155b39a8a6a8fc2dcc71cc8ed2e33d Mon Sep 17 00:00:00 2001
From: Jason HU <yongqi.hu@windriver.com>
Date: Mon, 3 Nov 2008 14:27:27 +0800
Subject: [PATCH] unify pmem new task enqueued entry

When scheduler history buffer is enabled, the "new task enqueued" event would
be recorded to PMEM with an entry that marked with "added_to_runqueue", for
example: ECBE5F873E: 0,1248866272.815469,1392,ps,C0139E41,added_to_runqueue.

This type of entry was unified with the rest types of PMEM entries by
recording 0x8000000 into pid2 and current->comm into pname2:
169842A4162: 0,1248864820.635601,1421,ps,00000000,134217728,swapper,00000000

(Note: 0x8000000 == 134217728)

Signed-off-by: Harry Ciao<qingtao.cao@windriver.com>
Integrated-by: Jason HU <yongqi.hu@windriver.com>
---
 kernel/sched.c |   13 ++++++++++---
 1 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/kernel/sched.c b/kernel/sched.c
index 1fac2f2..728367a 100644
--- a/kernel/sched.c
+++ b/kernel/sched.c
@@ -142,6 +142,8 @@ struct pmem_ptr_block sched_hist_pmem_block = { };
 #define offset_of(_s, _m) \
 	&((_s *)0)->_m
 
+#define PMEM_SCHED_ADD_RUNQ 0x8000000
+
 static inline void sched_hist_addentry(struct task_struct *prev,
                                        struct task_struct *next)
 {
@@ -193,9 +195,14 @@ static inline void sched_hist_addentry(struct task_struct *prev,
 		entry->pid2 = (__s32)next->pid;
 		strncpy(entry->pname2, next->comm, PROC_NAME_SIZE);
 	} else {
-		entry->pid2 = (__s32)-1;
-		entry->nip2 = (__u64)0;
-		memset(entry->pname2, '\0', PROC_NAME_SIZE);
+		/* setting the high-order bit of pid2 indicates
+		 * that we're adding an entry to the runqueue
+		 * rather than switching tasks
+		 */
+		entry->pid2 = (__s32)(PMEM_SCHED_ADD_RUNQ | current->pid);
+		entry->nip2 = (current->state == TASK_RUNNING) ?
+		                0:(__u64)thread_saved_pc(current);
+		strncpy(entry->pname2, current->comm, PROC_NAME_SIZE);
 	}
 	PMEM_FLUSH_CACHE(entry, 0);
 }
-- 
1.6.0.90.g436ed

