From ff31de13b5d61cf38abb92877b730ce0fd6abf48 Mon Sep 17 00:00:00 2001
From: Jason HU <yongqi.hu@windriver.com>
Date: Mon, 24 Nov 2008 10:54:26 +0800
Subject: [PATCH] emer_atca6101 pmem hardware fixup

PCI device PMC815, used on emer_atca6101 as pmem hardware, was
configured and fixed up by assigning new base address to PMC815
to make that consistent with the bus address range configuration.

Base address values were changed from
      #define PCI_815_ITBAR0_VAL                0x90 << 24
      #define PCI_815_ITBAR1_VAL                0x8c << 24
  to
      #define PCI_815_ITBAR0_VAL                0x8f << 24
      #define PCI_815_ITBAR1_VAL                0x90 << 24

Signed-off-by: Jason HU <yongqi.hu@windriver.com>
---
 arch/powerpc/kernel/Makefile              |    1 +
 arch/powerpc/kernel/atca6101_pmc815_pci.c |   55 +++++++++++++++++++++++++++++
 2 files changed, 56 insertions(+), 0 deletions(-)
 create mode 100644 arch/powerpc/kernel/atca6101_pmc815_pci.c

diff --git a/arch/powerpc/kernel/Makefile b/arch/powerpc/kernel/Makefile
index f5ba3c4..6d89fa8 100644
--- a/arch/powerpc/kernel/Makefile
+++ b/arch/powerpc/kernel/Makefile
@@ -80,6 +80,7 @@ obj-$(CONFIG_MODULES)		+= ppc_ksyms.o
 obj-$(CONFIG_BOOTX_TEXT)	+= btext.o
 obj-$(CONFIG_SMP)		+= smp.o
 obj-$(CONFIG_KPROBES)		+= kprobes.o
+obj-$(CONFIG_PMEM_HW_ATCA6101)  += atca6101_pmc815_pci.o
 obj-$(CONFIG_PPC_UDBG_16550)	+= legacy_serial.o udbg_16550.o
 obj-$(CONFIG_STACKTRACE)	+= stacktrace.o
 
diff --git a/arch/powerpc/kernel/atca6101_pmc815_pci.c b/arch/powerpc/kernel/atca6101_pmc815_pci.c
new file mode 100644
index 0000000..ce7eae8
--- /dev/null
+++ b/arch/powerpc/kernel/atca6101_pmc815_pci.c
@@ -0,0 +1,55 @@
+/* Support for the PMC815 daughter card on the ATCA-6101 blade.
+ * Original Author : Chris Medl <cmedl@nortel.com>
+ * November 2005
+ *
+ * Modified by Rob Woolley <rob.woolley@windriver.com>, September 2006
+ *
+ * Added quirk_pmc815 to fix PCI base address register before
+ * resource values are set during PCI probe
+ * 
+ */
+
+#include <linux/pci.h>
+#if 0
+#include <linux/ioport.h>
+#include <asm/types.h>		/* BITS_PER_LONG */
+#endif
+
+/* PCI Configuration Registers for the Motorola Harrier PCI Bridge */
+
+/* PCI Command Register */
+#define PCI_815_CMD_LOC                   0x4
+#define PCI_815_CMD_VAL                   0x02a00006
+/* Inbound Translation Base Address Registers */
+#define PCI_815_ITBAR0_LOC                0x14
+#define PCI_815_ITBAR0_VAL                0x8f << 24
+#define PCI_815_ITBAR1_LOC                0x18
+#define PCI_815_ITBAR1_VAL                0x90 << 24
+/* Inbound Translation Attribute Registers */
+#define PCI_815_ITAT0_LOC                 0x4c
+#define PCI_815_ITAT0_VAL                 0x000877f8
+#define PCI_815_ITAT1_LOC                 0x54
+#define PCI_815_ITAT1_VAL                 0x000877f8
+/* Inbound Translation Size Registers */
+#define PCI_815_ITSZ1_LOC                 0x50
+#define PCI_815_ITSZ1_VAL                 0x0000000E
+
+static void __init quirk_pmc815(struct pci_dev *dev)
+{
+	printk("PCI: Enabling Prefetch windows on PMC815\n");
+
+	pci_write_config_dword(dev, PCI_815_CMD_LOC,    PCI_815_CMD_VAL);
+
+	/* the ENA bit of ITAT must be set high before ITBAR can be set */
+	pci_write_config_dword(dev, PCI_815_ITAT0_LOC,  PCI_815_ITAT0_VAL);
+	pci_write_config_dword(dev, PCI_815_ITAT1_LOC,  PCI_815_ITAT1_VAL);
+
+	pci_write_config_dword(dev, PCI_815_ITSZ1_LOC,  PCI_815_ITSZ1_VAL);
+
+	pci_write_config_dword(dev, PCI_815_ITBAR0_LOC, PCI_815_ITBAR0_VAL);
+	pci_write_config_dword(dev, PCI_815_ITBAR1_LOC, PCI_815_ITBAR1_VAL);
+}
+
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_MOTOROLA,
+                        PCI_DEVICE_ID_MOTOROLA_HARRIER,
+                        quirk_pmc815); 
-- 
1.6.0.2.GIT

