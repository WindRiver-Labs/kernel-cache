From 00d319e13b182f5b5028422e7e2181a8cfadd8ef Mon Sep 17 00:00:00 2001
From: Liming Wang <liming.wang@windriver.com>
Date: Thu, 8 Apr 2010 13:56:43 -0400
Subject: [PATCH] ftrace/mips: re-enable dynamic ftrace for mips.

Update to the latest api, syncing functions with the x86 versions.

Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 arch/mips/Kconfig         |    2 +
 arch/mips/kernel/Makefile |    4 +++
 arch/mips/kernel/ftrace.c |   50 +++++++++++++++++++++++++-------------------
 arch/mips/lib/Makefile    |    4 +++
 arch/mips/lib/mcount.S    |    8 -------
 include/asm-mips/ftrace.h |   18 ++++++++++++++++
 scripts/recordmcount.pl   |    3 ++
 7 files changed, 59 insertions(+), 30 deletions(-)

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index 9ba9259..3e55a6d 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -1,6 +1,8 @@
 config MIPS
 	bool
 	default y
+	select HAVE_FTRACE_MCOUNT_RECORD
+	select HAVE_DYNAMIC_FTRACE
 	select HAVE_GENERIC_DMA_COHERENT
 	select HAVE_FTRACE
 	select HAVE_IDE
diff --git a/arch/mips/kernel/Makefile b/arch/mips/kernel/Makefile
index 8972f5e..bde3b9e 100644
--- a/arch/mips/kernel/Makefile
+++ b/arch/mips/kernel/Makefile
@@ -8,6 +8,10 @@ obj-y		+= cpu-probe.o branch.o entry.o genex.o irq.o process.o \
 		   ptrace.o reset.o setup.o signal.o syscall.o \
 		   time.o topology.o traps.o unaligned.o
 
+ifdef CONFIG_DYNAMIC_FTRACE
+CFLAGS_REMOVE_ftrace.o = -pg
+endif
+
 obj-$(CONFIG_CEVT_BCM1480)	+= cevt-bcm1480.o
 obj-$(CONFIG_CEVT_R4K)		+= cevt-r4k.o
 obj-$(CONFIG_MIPS_MT_SMTC)	+= cevt-smtc.o
diff --git a/arch/mips/kernel/ftrace.c b/arch/mips/kernel/ftrace.c
index e24ae47..902c667 100644
--- a/arch/mips/kernel/ftrace.c
+++ b/arch/mips/kernel/ftrace.c
@@ -30,12 +30,12 @@ static const union mips_instruction ftrace_nop = {
 #endif
 };
 
-notrace unsigned char *ftrace_nop_replace(void)
+unsigned char *ftrace_nop_replace(void)
 {
 	return (unsigned char *) ftrace_nop.byte;
 }
 
-notrace unsigned char *ftrace_call_replace(unsigned long ip, unsigned long addr)
+static unsigned char *ftrace_call_replace(unsigned long ip, unsigned long addr)
 {
 	static union mips_instruction inst;
 
@@ -50,7 +50,7 @@ notrace unsigned char *ftrace_call_replace(unsigned long ip, unsigned long addr)
 	return (unsigned char *) &inst;
 }
 
-notrace int
+int
 ftrace_modify_code(unsigned long ip, unsigned char *old_code,
                    unsigned char *new_code)
 {
@@ -80,7 +80,30 @@ ftrace_modify_code(unsigned long ip, unsigned char *old_code,
 	return 0;
 }
 
-notrace int ftrace_update_ftrace_func(ftrace_func_t func)
+int ftrace_make_nop(struct module *mod,
+		    struct dyn_ftrace *rec, unsigned long addr)
+{
+	unsigned char *new, *old;
+	unsigned long ip = rec->ip;
+
+	old = ftrace_call_replace(ip, addr);
+	new = ftrace_nop_replace();
+
+	return ftrace_modify_code(rec->ip, old, new);
+}
+
+int ftrace_make_call(struct dyn_ftrace *rec, unsigned long addr)
+{
+	unsigned char *new, *old;
+	unsigned long ip = rec->ip;
+
+	old = ftrace_nop_replace();
+	new = ftrace_call_replace(ip, addr);
+
+	return ftrace_modify_code(rec->ip, old, new);
+}
+
+int ftrace_update_ftrace_func(ftrace_func_t func)
 {
 	unsigned long ip = (unsigned long) &ftrace_call;
 	unsigned char old[MCOUNT_INSN_SIZE], *new;
@@ -93,26 +116,9 @@ notrace int ftrace_update_ftrace_func(ftrace_func_t func)
 	return ret;
 }
 
-notrace int ftrace_mcount_set(unsigned long *data)
-{
-	unsigned long ip = (unsigned long) &mcount_call;
-	unsigned long *addr = data;
-	unsigned char old[MCOUNT_INSN_SIZE], *new;
-
-	/*
-	 * Replace the mcount stub with a pointer to the
-	 * ip recorder function.
-	 */
-	memcpy(old, &mcount_call, MCOUNT_INSN_SIZE);
-	new = ftrace_call_replace(ip, *addr);
-	*addr = ftrace_modify_code(ip, old, new);
-
-	return 0;
-}
-
 int __init ftrace_dyn_arch_init(void *data)
 {
-	ftrace_mcount_set(data);
+	*(unsigned long *)data = 0;
 
 	return 0;
 }
diff --git a/arch/mips/lib/Makefile b/arch/mips/lib/Makefile
index f454a97..ba43c32 100644
--- a/arch/mips/lib/Makefile
+++ b/arch/mips/lib/Makefile
@@ -5,6 +5,10 @@
 lib-y	+= csum_partial.o delay.o memcpy.o memcpy-inatomic.o memset.o \
 	   strlen_user.o strncpy_user.o strnlen_user.o uncached.o
 
+ifdef CONFIG_DYNAMIC_FTRACE
+CFLAGS_REMOVE_mcount.o = -pg
+endif
+
 lib-$(CONFIG_FTRACE) += mcount.o
 
 obj-y			+= iomap.o
diff --git a/arch/mips/lib/mcount.S b/arch/mips/lib/mcount.S
index 9817ce6..cb43f79 100644
--- a/arch/mips/lib/mcount.S
+++ b/arch/mips/lib/mcount.S
@@ -61,14 +61,6 @@ LEAF(_mcount)
 	.set		push
 	.set		noreorder
 	.set		noat
-	save_mcount_frame
-	PTR_SUBU	a0, ra, 2 * MCOUNT_INSN_SIZE
-
-FEXPORT(mcount_call)
-	jal		ftrace_stub
-	 nop
-
-	restore_mcount_frame
 	jr		ra
 	 move		ra, AT
 	.set		pop
diff --git a/include/asm-mips/ftrace.h b/include/asm-mips/ftrace.h
index f0479ce..b0d3e83 100644
--- a/include/asm-mips/ftrace.h
+++ b/include/asm-mips/ftrace.h
@@ -1,12 +1,30 @@
 #ifndef __ASM_FTRACE_H
 #define __ASM_FTRACE_H
 
+#ifndef __ASSEMBLY__
+static inline void ftrace_nmi_enter(void) { }
+static inline void ftrace_nmi_exit(void) { }
+#endif
+
 #ifdef CONFIG_FTRACE
 #define MCOUNT_ADDR             ((long)(_mcount))
 #define MCOUNT_INSN_SIZE        4 /* sizeof mcount call */
 
 #ifndef __ASSEMBLY__
 extern void _mcount(void);
+
+static inline unsigned long ftrace_call_adjust(unsigned long addr)
+{
+	return addr;
+}
+
+#ifdef CONFIG_DYNAMIC_FTRACE
+
+struct dyn_arch_ftrace {
+	/* No extra data needed for mips */
+};
+
+#endif /*  CONFIG_DYNAMIC_FTRACE */
 #endif
 
 #endif /* CONFIG_FTRACE */
diff --git a/scripts/recordmcount.pl b/scripts/recordmcount.pl
index c2d42c4..e68d1e4 100755
--- a/scripts/recordmcount.pl
+++ b/scripts/recordmcount.pl
@@ -206,6 +206,9 @@ if ($arch eq "x86_64") {
     $alignment = 2;
     $section_type = '%progbits';
 
+} elsif ($arch eq "mips") {
+    $mcount_regex = "^\\s*([0-9a-fA-F]+):.*\\s_mcount\$";
+
 } else {
     die "Arch $arch is not supported with CONFIG_FTRACE_MCOUNT_RECORD";
 }
-- 
1.6.0.4

