From 35305aae107f041adfd3db9278432cd206af2e96 Mon Sep 17 00:00:00 2001
From: Roy.Li <rongqing.li@windriver.com>
Date: Wed, 2 May 2012 10:50:14 +0800
Subject: [PATCH] xfrm: prevent larval states migration

When a MIGRATE message is handled by the kernel, all XFRM states (SA)
associated with the SP are migrated. When one of those states is
still larval, the call to xfrm_state_clone() fails, resulting in
the whole migration process failing including the migration of the
SP.  Migrating a larval SA may create inconsistencies between kernel
SADB and the local version of the IKE daemon.

The patch below prevents larval states to be considered during
MIRGATE processing.

The patch comes from git://git.umip.org/migrate2_kernel_patches.git,
it is only needed by umip-ike feature.
Author: Arnaud Ebalard <arno@natisbad.org>

Signed-off-by: RongQing.li@windriver.com
---
 net/xfrm/Kconfig      |   16 ++++++++++++++++
 net/xfrm/xfrm_state.c |    8 ++++++++
 2 files changed, 24 insertions(+), 0 deletions(-)

diff --git a/net/xfrm/Kconfig b/net/xfrm/Kconfig
index 6d08167..8eccad7 100644
--- a/net/xfrm/Kconfig
+++ b/net/xfrm/Kconfig
@@ -78,3 +78,19 @@ config NET_KEY_MIGRATE
 
 	  If unsure, say N.
 
+config XFRM_PREVENT_LARVAL_MIGRATE
+	bool "Prevent larval states migration"
+	depends on XFRM
+	default n
+	---help---
+	  When a MIGRATE message is handled by the kernel, all XFRM states (SA)
+	  associated with the SP are migrated. When one of those states is
+	  still larval, the call to xfrm_state_clone() fails, resulting in
+	  the whole migration process failing including the migration of the
+	  SP.  Migrating a larval SA may create inconsistencies between kernel
+	  SADB and the local version of the IKE daemon.
+
+	  This option allows us able to decide whether to prevent larval states
+	  during MIRGATE processing.
+
+	  If unsure, say N.
diff --git a/net/xfrm/xfrm_state.c b/net/xfrm/xfrm_state.c
index add77ec..eee8add 100644
--- a/net/xfrm/xfrm_state.c
+++ b/net/xfrm/xfrm_state.c
@@ -1203,6 +1203,10 @@ struct xfrm_state * xfrm_migrate_state_find(struct xfrm_migrate *m)
 		h = xfrm_dst_hash(&init_net, &m->old_daddr, &m->old_saddr,
 				  m->reqid, m->old_family);
 		hlist_for_each_entry(x, entry, init_net.xfrm.state_bydst+h, bydst) {
+#ifdef CONFIG_XFRM_PREVENT_LARVAL_MIGRATE
+			if (x->km.state == XFRM_STATE_ACQ)
+				continue;
+#endif
 			if (x->props.mode != m->mode ||
 			    x->id.proto != m->proto)
 				continue;
@@ -1220,6 +1224,10 @@ struct xfrm_state * xfrm_migrate_state_find(struct xfrm_migrate *m)
 		h = xfrm_src_hash(&init_net, &m->old_daddr, &m->old_saddr,
 				  m->old_family);
 		hlist_for_each_entry(x, entry, init_net.xfrm.state_bysrc+h, bysrc) {
+#ifdef CONFIG_XFRM_PREVENT_LARVAL_MIGRATE
+			if (x->km.state == XFRM_STATE_ACQ)
+				continue;
+#endif
 			if (x->props.mode != m->mode ||
 			    x->id.proto != m->proto)
 				continue;
-- 
1.7.0.4

