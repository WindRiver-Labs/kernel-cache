From 27be9cce53be98e1a47d6f2ca409bbe2b2dad3ab Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:27:48 -0400
Subject: [PATCH 281/391] trace-clock-32-to-64-add-compiler-barrier

trace clock 32 to 64 - add compiler barrier

Update-side need a compiler barrier to ensure interrupts never see the index
updated before the value.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 kernel/trace/trace-clock-32-to-64.c |    6 ++++++
 1 files changed, 6 insertions(+), 0 deletions(-)

diff --git a/kernel/trace/trace-clock-32-to-64.c b/kernel/trace/trace-clock-32-to-64.c
index 701aeb1..6249d5e 100644
--- a/kernel/trace/trace-clock-32-to-64.c
+++ b/kernel/trace/trace-clock-32-to-64.c
@@ -79,6 +79,12 @@ static void update_synthetic_tsc(void)
 		cpu_synth->tsc[new_index].val =
 			(SW_MS32(cpu_synth->tsc[cpu_synth->index].val)
 				| (u64)tsc) + (1ULL << TC_HW_BITS);
+		/*
+		 * Ensure the compiler does not reorder index write. It makes
+		 * sure all nested interrupts will see the new value before the
+		 * new index is written.
+		 */
+		barrier();
 		cpu_synth->index = new_index;	/* atomic change of index */
 	} else {
 		/*
-- 
1.6.5.2

