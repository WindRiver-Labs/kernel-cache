From 44d940ff4ce53e26a561381e4ee27ae03f225de7 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Wed, 25 Aug 2010 07:27:19 -0700
Subject: [PATCH] lttng: Fix the trace-clock-32-to-64 for SMP

The function disable_synthetic_tsc() needs to delete the timer for the
specified cpu, but disable_synthetic_tsc() always delete the timer for
smp_processor_id()(the current cpu), then, whenever the cpu you
specifies, the timers of the other cpus are not really be deleted.  As a
result, if lttng tries to add the new timers for the related cpus, it
will introduces the following errors:

lttctl: Creating trace
Kernel bug detected[#1]:
Cpu 9
$ 0   : 0000000000000000 ffffffff834686f8 0000000000000001 0000000000000103
$ 4   : ffffffffc0147e30 a80000008e9ec4f0 a80000008e9fbac0 0000000000000018
$ 8   : 0000000000000008 00000000ffff654d 000000000000000f 0000000000000018
$12   : 000000001000dce0 000000001000001f 0000000000000000 a80000008db24000
$16   : a800000081fea878 a80000008e9ec000 fffffffffffffffe 0000000000000025
$20   : 0000000000200200 ffffffff83b23ac0 ffffffff83b23a80 ffffffff83b23b00
$24   : 0000000000000000 a80000008db27010
$28   : a80000008e9f8000 a80000008e9fbb20 a80000008e9fbb20 ffffffff834686f8
Hi    : 0000000000000000
Lo    : 001247bb9968da50
epc   : ffffffff834686ec cascade+0x84/0xc8
    Tainted: G        W
ra    : ffffffff834686f8 cascade+0x90/0xc8
Status: 1000dce2    KX SX UX KERNEL EXL
Cause : 00800034
PrId  : 000c4402 (XLS416 Rev B0)
Modules linked in: x_tables ip_tables libcrc32c crc32c ipv6 sctp binfmt_misc ltt_statedump ltt_filter syscall_trace mm_trace block_trace ipc_trace jbd2_trace lockdep_trace net_extended_trace rcu_trace pm_trace net_trace fs_trace trap_trace kernel_trace ltt_userspace_event [last unloaded: scsi_wait_scan]
Process swapper (pid: 0, threadinfo=a80000008e9f8000, task=a80000008e9bbf40, tls=0000000000000000)
Stack : a800000081fea878 a800000081feada0 a80000008e9ec000 0000000000000000
        ffffffff83ad0000 a80000008e9ed020 a80000008e9fbb60 ffffffff83468870
        000000201f1fb488 0000000000000002 a800000081fe9378 a80000008cbf42d8
        a80000008e9ed420 a80000008e9ed820 a80000008e9edc20 ffffffff83acd148
        0000000000000008 0000000000000102 0000000000000141 ffffffff83acd148
        0000000000000008 0000000000000102 000000000000000a ffffffff83b931d8
        ffffffff83be7da0 0000000000000009 a80000008e9fbc00 ffffffff8345ec14
        0000000000000001 a80000008cbf4378 000000001000dce0 0000000000000009
        ffffffff83bc0000 ffffffff83bb9828 ffffffff8c2678f8 0000000000000009
        ffffffff8c260000 ffffffff83bb9770 a80000008e9fbc60 ffffffff8345ef58
        ...
Call Trace:
[<ffffffff834686ec>] cascade+0x84/0xc8
[<ffffffff83468870>] run_timer_softirq+0x140/0x448
[<ffffffff8345ec14>] __do_softirq+0x174/0x370
[<ffffffff8345ef58>] do_softirq+0x148/0x150
[<ffffffff8345f26c>] irq_exit+0xec/0xf8
[<ffffffff8398c378>] do_IRQ+0x48/0x60
[<ffffffff8340369c>] phoenix_timer_interrupt+0x44/0x198
[<ffffffff83402794>] plat_irq_dispatch+0xfc/0x128
[<ffffffff834101a0>] ret_from_irq+0x0/0x4
[<ffffffff8340faec>] phoenix_wait+0x1c/0x30
[<ffffffff834132cc>] cpu_idle+0xac/0x100
[<ffffffff83b56a1c>] start_secondary+0x474/0x4a8

This bug is triggered by the following piece of code in kernel/timer.c:

static int cascade(struct tvec_base *base, struct tvec *tv, int index)
{
	[snip]
	list_for_each_entry_safe(timer, tmp, &tv_list, entry) {
		BUG_ON(tbase_get_base(timer->base) != base);	--> Here triggers the bug.
		internal_add_timer(base, timer);
	}
	[snip]
}

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 kernel/trace/trace-clock-32-to-64.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/kernel/trace/trace-clock-32-to-64.c b/kernel/trace/trace-clock-32-to-64.c
index e62529e..b1fa63a 100644
--- a/kernel/trace/trace-clock-32-to-64.c
+++ b/kernel/trace/trace-clock-32-to-64.c
@@ -198,7 +198,7 @@ static void enable_synthetic_tsc(int cpu)
 
 static void disable_synthetic_tsc(int cpu)
 {
-	del_timer_sync(&per_cpu(tsc_timer, smp_processor_id()));
+	del_timer_sync(&per_cpu(tsc_timer, cpu));
 }
 
 /*
-- 
1.6.5.2

