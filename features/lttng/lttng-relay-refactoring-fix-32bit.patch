From 926c7889393c69219c7ac6f535b885dd88b83f7d Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:27:57 -0400
Subject: [PATCH 299/390] lttng-relay-refactoring-fix-32bit

LTTng relay refactoring fix 32-bits

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 ltt/ltt-kprobes.c        |    4 ++--
 ltt/ltt-relay-lockless.c |    4 ++--
 ltt/ltt-trace-control.c  |   22 +++++++++++-----------
 3 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/ltt/ltt-kprobes.c b/ltt/ltt-kprobes.c
index 4ff4716..586c212 100644
--- a/ltt/ltt-kprobes.c
+++ b/ltt/ltt-kprobes.c
@@ -220,7 +220,7 @@ static ssize_t enable_op_write(struct file *file,
 		goto error;
 	}
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto error;
@@ -256,7 +256,7 @@ static ssize_t disable_op_write(struct file *file,
 	if (module_exit)
 		goto end;
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto error;
diff --git a/ltt/ltt-relay-lockless.c b/ltt/ltt-relay-lockless.c
index 65a63de..b74f144 100644
--- a/ltt/ltt-relay-lockless.c
+++ b/ltt/ltt-relay-lockless.c
@@ -207,8 +207,8 @@ free_init:
 	wake_up_interruptible(&chan->trace->kref_wq);
 #ifdef CONFIG_LTT_VMCORE
 	kfree(buf->commit_seq);
-#endif
 free_commit:
+#endif
 	kfree(buf->commit_count);
 free_chanbuf:
 	ltt_chanbuf_alloc_free(&buf->a);
@@ -611,7 +611,7 @@ void ltt_relay_print_subbuffer_errors(struct ltt_chanbuf *buf,
 		       "commit count [cc, cc_sb] [%lu,%lu].\n",
 		       chan->a.filename, cons_idx, commit_count,
 		       commit_count_sb);
-	printk(KERN_ALERT "LTT : %s : commit count : %lu, subbuf size %zd\n",
+	printk(KERN_ALERT "LTT : %s : commit count : %lu, subbuf size %lu\n",
 	       chan->a.filename, commit_count, chan->a.sb_size);
 }
 
diff --git a/ltt/ltt-trace-control.c b/ltt/ltt-trace-control.c
index de1f9ff..7594a06 100644
--- a/ltt/ltt-trace-control.c
+++ b/ltt/ltt-trace-control.c
@@ -86,7 +86,7 @@ static ssize_t alloc_write(struct file *file, const char __user *user_buf,
 	char *buf = (char *)__get_free_page(GFP_KERNEL);
 	char *cmd = (char *)__get_free_page(GFP_KERNEL);
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto err_copy_from_user;
@@ -135,7 +135,7 @@ static ssize_t enabled_write(struct file *file, const char __user *user_buf,
 	char *buf = (char *)__get_free_page(GFP_KERNEL);
 	char *cmd = (char *)__get_free_page(GFP_KERNEL);
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto err_copy_from_user;
@@ -208,7 +208,7 @@ static ssize_t trans_write(struct file *file, const char __user *user_buf,
 	int err = 0;
 	int buf_size;
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto err_copy_from_user;
@@ -254,7 +254,7 @@ static ssize_t channel_subbuf_num_write(struct file *file,
 	const char *trace_name;
 	char *buf = (char *)__get_free_page(GFP_KERNEL);
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto err_copy_from_user;
@@ -302,7 +302,7 @@ ssize_t channel_subbuf_size_write(struct file *file,
 	const char *trace_name;
 	char *buf = (char *)__get_free_page(GFP_KERNEL);
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto err_copy_from_user;
@@ -349,7 +349,7 @@ ssize_t channel_switch_timer_write(struct file *file,
 	const char *trace_name;
 	char *buf = (char *)__get_free_page(GFP_KERNEL);
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto err_copy_from_user;
@@ -399,7 +399,7 @@ ssize_t channel_overwrite_write(struct file *file,
 	char *buf = (char *)__get_free_page(GFP_KERNEL);
 	char *cmd = (char *)__get_free_page(GFP_KERNEL);
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto err_copy_from_user;
@@ -478,7 +478,7 @@ ssize_t channel_enable_write(struct file *file,
 	char *buf = (char *)__get_free_page(GFP_KERNEL);
 	char *cmd = (char *)__get_free_page(GFP_KERNEL);
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto err_copy_from_user;
@@ -707,7 +707,7 @@ ssize_t setup_trace_write(struct file *file, const char __user *user_buf,
 	char *buf = (char *)__get_free_page(GFP_KERNEL);
 	char *trace_name = (char *)__get_free_page(GFP_KERNEL);
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto err_copy_from_user;
@@ -769,7 +769,7 @@ ssize_t destroy_trace_write(struct file *file, const char __user *user_buf,
 	char *buf = (char *)__get_free_page(GFP_KERNEL);
 	char *trace_name = (char *)__get_free_page(GFP_KERNEL);
 
-	buf_size = min(count, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, count, PAGE_SIZE - 1);
 	err = copy_from_user(buf, user_buf, buf_size);
 	if (err)
 		goto err_copy_from_user;
@@ -879,7 +879,7 @@ ssize_t marker_enable_write(struct file *filp, const char __user *ubuf,
 	marker = filp->f_dentry->d_parent->d_name.name;
 	channel = filp->f_dentry->d_parent->d_parent->d_name.name;
 
-	buf_size = min(cnt, PAGE_SIZE - 1);
+	buf_size = min_t(size_t, cnt, PAGE_SIZE - 1);
 	ret = copy_from_user(buf, ubuf, buf_size);
 	if (ret)
 		goto end;
-- 
1.6.5.2

