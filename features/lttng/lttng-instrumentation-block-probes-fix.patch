From 6853f7eef62390f139ee4f221b97c3c237fb657f Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:27:20 -0400
Subject: [PATCH 231/390] lttng-instrumentation-block-probes-fix

LTTng instrumentation block probes fix

Fix flag lists.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 ltt/probes/block-trace.c |   65 ++++++++++++++++++++++------------------------
 1 files changed, 31 insertions(+), 34 deletions(-)

diff --git a/ltt/probes/block-trace.c b/ltt/probes/block-trace.c
index 05cc29c..6a90744 100644
--- a/ltt/probes/block-trace.c
+++ b/ltt/probes/block-trace.c
@@ -9,7 +9,7 @@
 
 #include <linux/module.h>
 
-#include <trace/block.h>
+#include <trace/events/block.h>
 
 /*
  * Add rq cmd as a sequence. Needs new type. (size + binary blob)
@@ -26,7 +26,7 @@ void probe_block_rq_abort(struct request_queue *q, struct request *rq)
 		trace_mark_tp(block, rq_abort_pc, block_rq_abort,
 			probe_block_rq_abort,
 			"data_len %u rw %d errors %d",
-			rq->data_len, rw, rq->errors);
+			blk_rq_bytes(rq), rw, rq->errors);
 	} else {
 		/*
 		 * FIXME Using a simple trace_mark for the second event
@@ -36,9 +36,8 @@ void probe_block_rq_abort(struct request_queue *q, struct request *rq)
 		 * markers to have the rq_abort_fs marker enabled.
 		 */
 		trace_mark(block, rq_abort_fs,
-			"hard_sector %llu hard_nr_sectors %llu "
-			"rw %d errors %d", (unsigned long long)rq->hard_sector,
-			(unsigned long long)rq->hard_nr_sectors << 9,
+			"hard_sector %llu "
+			"rw %d errors %d", (unsigned long long)blk_rq_pos(rq),
 			rw, rq->errors);
 	}
 }
@@ -54,7 +53,7 @@ void probe_block_rq_insert(struct request_queue *q, struct request *rq)
 		trace_mark_tp(block, rq_insert_pc, block_rq_insert,
 			probe_block_rq_insert,
 			"data_len %u rw %d errors %d",
-			rq->data_len, rw, rq->errors);
+			blk_rq_bytes(rq), rw, rq->errors);
 	} else {
 		/*
 		 * FIXME Using a simple trace_mark for the second event
@@ -64,9 +63,8 @@ void probe_block_rq_insert(struct request_queue *q, struct request *rq)
 		 * rq_insert_fs markers to have the rq_insert_fs marker enabled.
 		 */
 		trace_mark(block, rq_insert_fs,
-			"hard_sector %llu hard_nr_sectors %llu "
-			"rw %d errors %d", (unsigned long long)rq->hard_sector,
-			(unsigned long long)rq->hard_nr_sectors << 9,
+			"hard_sector %llu "
+			"rw %d errors %d", (unsigned long long)blk_rq_pos(rq),
 			rw, rq->errors);
 	}
 }
@@ -82,7 +80,7 @@ void probe_block_rq_issue(struct request_queue *q, struct request *rq)
 		trace_mark_tp(block, rq_issue_pc, block_rq_issue,
 			probe_block_rq_issue,
 			"data_len %u rw %d errors %d",
-			rq->data_len, rw, rq->errors);
+			blk_rq_bytes(rq), rw, rq->errors);
 	} else {
 		/*
 		 * FIXME Using a simple trace_mark for the second event
@@ -92,9 +90,8 @@ void probe_block_rq_issue(struct request_queue *q, struct request *rq)
 		 * markers to have the rq_issue_fs marker enabled.
 		 */
 		trace_mark(block, rq_issue_fs,
-			"hard_sector %llu hard_nr_sectors %llu "
-			"rw %d errors %d", (unsigned long long)rq->hard_sector,
-			(unsigned long long)rq->hard_nr_sectors << 9,
+			"hard_sector %llu "
+			"rw %d errors %d", (unsigned long long)blk_rq_pos(rq),
 			rw, rq->errors);
 	}
 }
@@ -110,7 +107,7 @@ void probe_block_rq_requeue(struct request_queue *q, struct request *rq)
 		trace_mark_tp(block, rq_requeue_pc, block_rq_requeue,
 			probe_block_rq_requeue,
 			"data_len %u rw %d errors %d",
-			rq->data_len, rw, rq->errors);
+			blk_rq_bytes(rq), rw, rq->errors);
 	} else {
 		/*
 		 * FIXME Using a simple trace_mark for the second event
@@ -121,9 +118,8 @@ void probe_block_rq_requeue(struct request_queue *q, struct request *rq)
 		 * enabled.
 		 */
 		trace_mark(block, rq_requeue_fs,
-			"hard_sector %llu hard_nr_sectors %llu "
-			"rw %d errors %d", (unsigned long long)rq->hard_sector,
-			(unsigned long long)rq->hard_nr_sectors << 9,
+			"hard_sector %llu "
+			"rw %d errors %d", (unsigned long long)blk_rq_pos(rq),
 			rw, rq->errors);
 	}
 }
@@ -139,7 +135,7 @@ void probe_block_rq_complete(struct request_queue *q, struct request *rq)
 		trace_mark_tp(block, rq_complete_pc, block_rq_complete,
 			probe_block_rq_complete,
 			"data_len %u rw %d errors %d",
-			rq->data_len, rw, rq->errors);
+			blk_rq_bytes(rq), rw, rq->errors);
 	} else {
 		/*
 		 * FIXME Using a simple trace_mark for the second event
@@ -150,9 +146,8 @@ void probe_block_rq_complete(struct request_queue *q, struct request *rq)
 		 * enabled.
 		 */
 		trace_mark(block, rq_complete_fs,
-			"hard_sector %llu hard_nr_sectors %llu "
-			"rw %d errors %d", (unsigned long long)rq->hard_sector,
-			(unsigned long long)rq->hard_nr_sectors << 9,
+			"hard_sector %llu "
+			"rw %d errors %d", (unsigned long long)blk_rq_pos(rq),
 			rw, rq->errors);
 	}
 }
@@ -161,7 +156,7 @@ void probe_block_bio_bounce(struct request_queue *q, struct bio *bio)
 {
 	trace_mark_tp(block, bio_bounce, block_bio_bounce,
 		probe_block_bio_bounce,
-		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT, "
+		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT,"
 		"FAILFAST_DEV,DISCARD,META,SYNC,BARRIER,AHEAD,RW) %lX "
 		"not_uptodate #1u%d",
 		(unsigned long long)bio->bi_sector, bio->bi_size,
@@ -172,7 +167,7 @@ void probe_block_bio_complete(struct request_queue *q, struct bio *bio)
 {
 	trace_mark_tp(block, bio_complete, block_bio_complete,
 		probe_block_bio_complete,
-		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT, "
+		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT,"
 		"FAILFAST_DEV,DISCARD,META,SYNC,BARRIER,AHEAD,RW) %lX "
 		"not_uptodate #1u%d",
 		(unsigned long long)bio->bi_sector, bio->bi_size,
@@ -183,7 +178,7 @@ void probe_block_bio_backmerge(struct request_queue *q, struct bio *bio)
 {
 	trace_mark_tp(block, bio_backmerge, block_bio_backmerge,
 		probe_block_bio_backmerge,
-		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT, "
+		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT,"
 		"FAILFAST_DEV,DISCARD,META,SYNC,BARRIER,AHEAD,RW) %lX "
 		"not_uptodate #1u%d",
 		(unsigned long long)bio->bi_sector, bio->bi_size,
@@ -194,7 +189,7 @@ void probe_block_bio_frontmerge(struct request_queue *q, struct bio *bio)
 {
 	trace_mark_tp(block, bio_frontmerge, block_bio_frontmerge,
 		probe_block_bio_frontmerge,
-		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT, "
+		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT,"
 		"FAILFAST_DEV,DISCARD,META,SYNC,BARRIER,AHEAD,RW) %lX "
 		"not_uptodate #1u%d",
 		(unsigned long long)bio->bi_sector, bio->bi_size,
@@ -205,7 +200,7 @@ void probe_block_bio_queue(struct request_queue *q, struct bio *bio)
 {
 	trace_mark_tp(block, bio_queue, block_bio_queue,
 		probe_block_bio_queue,
-		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT, "
+		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT,"
 		"FAILFAST_DEV,DISCARD,META,SYNC,BARRIER,AHEAD,RW) %lX "
 		"not_uptodate #1u%d",
 		(unsigned long long)bio->bi_sector, bio->bi_size,
@@ -218,7 +213,7 @@ void probe_block_getrq(struct request_queue *q, struct bio *bio, int rw)
 		trace_mark_tp(block, getrq_bio, block_getrq,
 			probe_block_getrq,
 			"sector %llu size %u "
-			"rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT, "
+			"rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT,"
 			"FAILFAST_DEV,DISCARD,META,SYNC,BARRIER,AHEAD,RW) %lX "
 			"not_uptodate #1u%d",
 			(unsigned long long)bio->bi_sector, bio->bi_size,
@@ -241,7 +236,7 @@ void probe_block_sleeprq(struct request_queue *q, struct bio *bio, int rw)
 		trace_mark_tp(block, sleeprq_bio, block_sleeprq,
 			probe_block_sleeprq,
 			"sector %llu size %u "
-			"rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT, "
+			"rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT,"
 			"FAILFAST_DEV,DISCARD,META,SYNC,BARRIER,AHEAD,RW) %lX "
 			"not_uptodate #1u%d",
 			(unsigned long long)bio->bi_sector, bio->bi_size,
@@ -286,7 +281,7 @@ void probe_block_split(struct request_queue *q, struct bio *bio,
 {
 	trace_mark_tp(block, split, block_split,
 		probe_block_split,
-		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT, "
+		"sector %llu size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT,"
 		"FAILFAST_DEV,DISCARD,META,SYNC,BARRIER,AHEAD,RW) %lX "
 		"not_uptodate #1u%d pdu %u",
 		(unsigned long long)bio->bi_sector, bio->bi_size,
@@ -294,16 +289,18 @@ void probe_block_split(struct request_queue *q, struct bio *bio,
 }
 
 void probe_block_remap(struct request_queue *q, struct bio *bio,
-		       dev_t dev, sector_t from, sector_t to)
+		       dev_t dev, sector_t from)
 {
 	trace_mark_tp(block, remap, block_remap,
 		probe_block_remap,
-		"device_from %u sector_from %llu device_to %u sector_to %llu "
-		"size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT, "
+		"device_from %lu sector_from %llu device_to %lu "
+		"size %u rw(FAILFAST_DRIVER,FAILFAST_TRANSPORT,"
 		"FAILFAST_DEV,DISCARD,META,SYNC,BARRIER,AHEAD,RW) %lX "
 		"not_uptodate #1u%d",
-		bio->bi_bdev->bd_dev, (unsigned long long)from, dev,
-		(unsigned long long)to, bio->bi_size, bio->bi_rw,
+		(unsigned long)bio->bi_bdev->bd_dev,
+		(unsigned long long)from,
+		(unsigned long)dev,
+		bio->bi_size, bio->bi_rw,
 		!bio_flagged(bio, BIO_UPTODATE));
 }
 
-- 
1.6.5.2

