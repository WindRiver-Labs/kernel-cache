From bc5f20ab1d68ed6495b09b12a0ba00010245ee9d Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:26:43 -0400
Subject: [PATCH 160/390] markers-update-to-channel-api

Markers update to new channel API

Update marker users accordingly.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 arch/x86/kernel/syscall_64.c |    3 +-
 arch/x86/kernel/traps.c      |    4 +-
 drivers/input/input.c        |    3 +-
 kernel/module.c              |    2 +-
 kernel/softirq.c             |    2 +-
 ltt/ltt-ftrace.c             |    3 +-
 ltt/ltt-statedump.c          |   19 +++++---
 ltt/probes/fs-trace.c        |   33 +++++++-------
 ltt/probes/ipc-trace.c       |    8 ++--
 ltt/probes/kernel-trace.c    |  100 +++++++++++++++++++++---------------------
 ltt/probes/lockdep-trace.c   |   12 +++---
 ltt/probes/mm-trace.c        |   28 ++++++------
 ltt/probes/net-trace.c       |   34 ++++++++-------
 ltt/probes/syscall-trace.c   |   12 +++---
 ltt/probes/trap-trace.c      |   12 +++---
 mm/swapfile.c                |    2 +-
 16 files changed, 143 insertions(+), 134 deletions(-)

diff --git a/arch/x86/kernel/syscall_64.c b/arch/x86/kernel/syscall_64.c
index bbbffe0..5e74f6a 100644
--- a/arch/x86/kernel/syscall_64.c
+++ b/arch/x86/kernel/syscall_64.c
@@ -38,7 +38,8 @@ void ltt_dump_sys_call_table(void *call_data)
 
 	for (i = 0; i < __NR_syscall_max + 1; i++) {
 		sprint_symbol(namebuf, (unsigned long)sys_call_table[i]);
-		__trace_mark(0, statedump_sys_call_table, call_data,
+		__trace_mark(0, syscall_state, sys_call_table,
+			call_data,
 			"id %d address %p symbol %s",
 			i, (void*)sys_call_table[i], namebuf);
 	}
diff --git a/arch/x86/kernel/traps.c b/arch/x86/kernel/traps.c
index 2f44ca5..f21ad57 100644
--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@ -640,7 +640,7 @@ void ltt_dump_sys_call_table(void *call_data)
 
 	for (i = 0; i < NR_syscalls; i++) {
 		sprint_symbol(namebuf, sys_call_table[i]);
-		__trace_mark(0, statedump_sys_call_table, call_data,
+		__trace_mark(0, syscall_state, sys_call_table, call_data,
 			"id %d address %p symbol %s",
 			i, (void*)sys_call_table[i], namebuf);
 	}
@@ -854,7 +854,7 @@ void ltt_dump_idt_table(void *call_data)
 	for (i = 0; i < IDT_ENTRIES; i++) {
 		unsigned long address = gate_offset(idt_table[i]);
 		sprint_symbol(namebuf, address);
-		__trace_mark(0, statedump_idt_table, call_data,
+		__trace_mark(0, irq_state, idt_table, call_data,
 			"irq %d address %p symbol %s",
 			i, (void *)address, namebuf);
 	}
diff --git a/drivers/input/input.c b/drivers/input/input.c
index 66d4333..22d8c9e 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -186,7 +186,8 @@ static void input_handle_event(struct input_dev *dev,
 {
 	int disposition = INPUT_IGNORE_EVENT;
 
-	trace_mark(input_event, "type %u code %u value %d", type, code, value);
+	trace_mark(input, input_event,
+		   "type %u code %u value %d", type, code, value);
 
 	switch (type) {
 
diff --git a/kernel/module.c b/kernel/module.c
index 25b7924..9bf69d3 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -2990,7 +2990,7 @@ void list_modules(void *call_data)
 #ifdef CONFIG_MODULE_UNLOAD
 		refcount = module_refcount(mod);
 #endif
-		__trace_mark(0, list_module, call_data,
+		__trace_mark(0, module_state, list_module, call_data,
 				"name %s state %d refcount %lu",
 				mod->name, mod->state, refcount);
 	}
diff --git a/kernel/softirq.c b/kernel/softirq.c
index 5b75b57..4d1099f 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -63,7 +63,7 @@ void ltt_dump_softirq_vec(void *call_data)
 
 	for (i = 0; i < 32; i++) {
 		sprint_symbol(namebuf, (unsigned long)softirq_vec[i].action);
-		__trace_mark(0, statedump_softirq_vec, call_data,
+		__trace_mark(0, softirq_state, softirq_vec, call_data,
 			"id %d address %p symbol %s",
 			i, softirq_vec[i].action, namebuf);
 	}
diff --git a/ltt/ltt-ftrace.c b/ltt/ltt-ftrace.c
index 6d1eaea..6da7492 100644
--- a/ltt/ltt-ftrace.c
+++ b/ltt/ltt-ftrace.c
@@ -37,7 +37,8 @@ ltt_tracer_call(unsigned long ip, unsigned long parent_ip)
 	if (likely(!per_cpu(tracing_cpu, cpu)
 			&& !atomic_read(&system_trace_refcount)))
 		return;
-	trace_mark(ftrace_entry, "ip 0x%lX parent_ip 0x%lX", ip, parent_ip);
+	trace_mark(function_trace, entry, "ip 0x%lX parent_ip 0x%lX",
+		   ip, parent_ip);
 }
 
 static notrace void ltt_tap_marker(const struct marker *mdata,
diff --git a/ltt/ltt-statedump.c b/ltt/ltt-statedump.c
index efd5586..b6eec25 100644
--- a/ltt/ltt-statedump.c
+++ b/ltt/ltt-statedump.c
@@ -81,7 +81,8 @@ static void ltt_enumerate_device(struct ltt_probe_private_data *call_data,
 			for (ifa = in_dev->ifa_list;
 					ifa != NULL;
 					ifa = ifa->ifa_next)
-				__trace_mark(0, list_network_ipv4_interface,
+				__trace_mark(0, netif_state,
+					network_ipv4_interface,
 					call_data,
 					"name %s address #4u%lu up %d",
 					dev->name,
@@ -89,8 +90,9 @@ static void ltt_enumerate_device(struct ltt_probe_private_data *call_data,
 			in_dev_put(in_dev);
 		}
 	} else
-		__trace_mark(0, list_network_ip_interface, call_data,
-			"name %s address #4u%lu up %d", dev->name, 0UL, 0);
+		__trace_mark(0, netif_state, network_ip_interface,
+			call_data, "name %s address #4u%lu up %d",
+			dev->name, 0UL, 0);
 }
 
 static inline int
@@ -134,7 +136,7 @@ ltt_enumerate_task_fd(struct ltt_probe_private_data *call_data,
 			continue;
 		path = d_path(&filp->f_path, tmp, PAGE_SIZE);
 		/* Make sure we give at least some info */
-		__trace_mark(0, list_file_descriptor, call_data,
+		__trace_mark(0, fd_state, file_descriptor, call_data,
 			"filename %s pid %d fd %u",
 			(IS_ERR(path))?(filp->f_dentry->d_name.name):(path),
 			t->pid, i);
@@ -185,7 +187,7 @@ ltt_enumerate_task_vm_maps(struct ltt_probe_private_data *call_data,
 				ino = map->vm_file->f_dentry->d_inode->i_ino;
 			else
 				ino = 0;
-			__trace_mark(0, list_vm_map, call_data,
+			__trace_mark(0, vm_state, vm_map, call_data,
 					"pid %d start %lu end %lu flags %lu "
 					"pgoff %lu inode %lu",
 					t->pid,
@@ -234,7 +236,7 @@ static inline void list_interrupts(struct ltt_probe_private_data *call_data)
 		local_irq_save(flags);
 		raw_spin_lock(&desc->lock);
 		for (action = desc->action; action; action = action->next)
-			__trace_mark(0, list_interrupt, call_data,
+			__trace_mark(0, irq_state, interrupt, call_data,
 				"name %s action %s irq_id %u",
 				irq_chip_name, action->name, irq);
 		raw_spin_unlock(&desc->lock);
@@ -308,7 +310,7 @@ ltt_enumerate_process_states(struct ltt_probe_private_data *call_data)
 		else
 			type = LTTNG_KERNEL_THREAD;
 
-		__trace_mark(0, list_process_state, call_data,
+		__trace_mark(0, task_state, process_state, call_data,
 				"pid %d parent_pid %d name %s type %d mode %d "
 				"submode %d status %d tgid %d",
 				t->pid, t->parent->pid, t->comm,
@@ -363,7 +365,8 @@ static int do_ltt_statedump(struct ltt_probe_private_data *call_data)
 	BUG_ON(atomic_read(&kernel_threads_to_run) != 0);
 	/* Our work is done */
 	printk(KERN_DEBUG "LTT state dump end\n");
-	__trace_mark(0, list_statedump_end, call_data, MARK_NOARGS);
+	__trace_mark(0, global_state, statedump_end,
+		     call_data, MARK_NOARGS);
 	return 0;
 }
 
diff --git a/ltt/probes/fs-trace.c b/ltt/probes/fs-trace.c
index fa63ae6..591dd26 100644
--- a/ltt/probes/fs-trace.c
+++ b/ltt/probes/fs-trace.c
@@ -13,47 +13,48 @@
 
 void probe_fs_buffer_wait_start(struct buffer_head *bh)
 {
-	trace_mark_tp(fs_buffer_wait_start, fs_buffer_wait_start,
+	trace_mark_tp(fs, buffer_wait_start, fs_buffer_wait_start,
 		probe_fs_buffer_wait_start, "bh %p", bh);
 }
 
 void probe_fs_buffer_wait_end(struct buffer_head *bh)
 {
-	trace_mark_tp(fs_buffer_wait_end, fs_buffer_wait_end,
+	trace_mark_tp(fs, buffer_wait_end, fs_buffer_wait_end,
 		probe_fs_buffer_wait_end, "bh %p", bh);
 }
 
 void probe_fs_exec(char *filename)
 {
-	trace_mark_tp(fs_exec, fs_exec, probe_fs_exec, "filename %s", filename);
+	trace_mark_tp(fs, exec, fs_exec, probe_fs_exec, "filename %s",
+		filename);
 }
 
 void probe_fs_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
 {
-	trace_mark_tp(fs_ioctl, fs_ioctl, probe_fs_ioctl,
+	trace_mark_tp(fs, ioctl, fs_ioctl, probe_fs_ioctl,
 		"fd %u cmd %u arg %lu", fd, cmd, arg);
 }
 
 void probe_fs_open(int fd, char *filename)
 {
-	trace_mark_tp(fs_open, fs_open, probe_fs_open,
+	trace_mark_tp(fs, open, fs_open, probe_fs_open,
 		"fd %d filename %s", fd, filename);
 }
 
 void probe_fs_close(unsigned int fd)
 {
-	trace_mark_tp(fs_close, fs_close, probe_fs_close, "fd %u", fd);
+	trace_mark_tp(fs, close, fs_close, probe_fs_close, "fd %u", fd);
 }
 
 void probe_fs_lseek(unsigned int fd, long offset, unsigned int origin)
 {
-	trace_mark_tp(fs_lseek, fs_lseek, probe_fs_lseek,
+	trace_mark_tp(fs, lseek, fs_lseek, probe_fs_lseek,
 		"fd %u offset %ld origin %u", fd, offset, origin);
 }
 
 void probe_fs_llseek(unsigned int fd, loff_t offset, unsigned int origin)
 {
-	trace_mark_tp(fs_llseek, fs_llseek, probe_fs_llseek,
+	trace_mark_tp(fs, llseek, fs_llseek, probe_fs_llseek,
 		"fd %u offset %lld origin %u", fd,
 		(long long)offset, origin);
 }
@@ -61,21 +62,21 @@ void probe_fs_llseek(unsigned int fd, loff_t offset, unsigned int origin)
 void probe_fs_read(unsigned int fd, char __user *buf, size_t count,
 		ssize_t ret)
 {
-	trace_mark_tp(fs_read, fs_read, probe_fs_read,
+	trace_mark_tp(fs, read, fs_read, probe_fs_read,
 		"fd %u count %zu", fd, count);
 }
 
 void probe_fs_write(unsigned int fd, const char __user *buf,
 		size_t count, ssize_t ret)
 {
-	trace_mark_tp(fs_write, fs_write, probe_fs_write,
+	trace_mark_tp(fs, write, fs_write, probe_fs_write,
 		"fd %u count %zu", fd, count);
 }
 
 void probe_fs_pread64(unsigned int fd, char __user *buf, size_t count,
 		loff_t pos, ssize_t ret)
 {
-	trace_mark_tp(fs_pread64, fs_pread64, probe_fs_pread64,
+	trace_mark_tp(fs, pread64, fs_pread64, probe_fs_pread64,
 		"fd %u count %zu pos %llu",
 		fd, count, (unsigned long long)pos);
 }
@@ -83,7 +84,7 @@ void probe_fs_pread64(unsigned int fd, char __user *buf, size_t count,
 void probe_fs_pwrite64(unsigned int fd, const char __user *buf,
 		size_t count, loff_t pos, ssize_t ret)
 {
-	trace_mark_tp(fs_pwrite64, fs_pwrite64, probe_fs_pwrite64,
+	trace_mark_tp(fs, pwrite64, fs_pwrite64, probe_fs_pwrite64,
 		"fd %u count %zu pos %llu",
 		fd, count, (unsigned long long)pos);
 }
@@ -91,14 +92,14 @@ void probe_fs_pwrite64(unsigned int fd, const char __user *buf,
 void probe_fs_readv(unsigned long fd, const struct iovec __user *vec,
 		unsigned long vlen, ssize_t ret)
 {
-	trace_mark_tp(fs_readv, fs_readv, probe_fs_readv,
+	trace_mark_tp(fs, readv, fs_readv, probe_fs_readv,
 		"fd %lu vlen %lu", fd, vlen);
 }
 
 void probe_fs_writev(unsigned long fd, const struct iovec __user *vec,
 		unsigned long vlen, ssize_t ret)
 {
-	trace_mark_tp(fs_writev, fs_writev, probe_fs_writev,
+	trace_mark_tp(fs, writev, fs_writev, probe_fs_writev,
 		"fd %lu vlen %lu", fd, vlen);
 }
 
@@ -113,14 +114,14 @@ void probe_fs_select(int fd, struct timespec *end_time)
 		tmptime.tv_nsec = -1L;
 	}
 
-	trace_mark_tp(fs_select, fs_select, probe_fs_select,
+	trace_mark_tp(fs, select, fs_select, probe_fs_select,
 		"fd %d end_time_sec %ld end_time_nsec %ld", fd,
 			tmptime.tv_sec, tmptime.tv_nsec);
 }
 
 void probe_fs_poll(int fd)
 {
-	trace_mark_tp(fs_pollfd, fs_poll, probe_fs_poll,
+	trace_mark_tp(fs, pollfd, fs_poll, probe_fs_poll,
 		"fd %d", fd);
 }
 
diff --git a/ltt/probes/ipc-trace.c b/ltt/probes/ipc-trace.c
index 128900c..91ccb4e 100644
--- a/ltt/probes/ipc-trace.c
+++ b/ltt/probes/ipc-trace.c
@@ -12,25 +12,25 @@
 
 void probe_ipc_msg_create(long id, int flags)
 {
-	trace_mark_tp(ipc_msg_create, ipc_msg_create, probe_ipc_msg_create,
+	trace_mark_tp(ipc, msg_create, ipc_msg_create, probe_ipc_msg_create,
 		"id %ld flags %d", id, flags);
 }
 
 void probe_ipc_sem_create(long id, int flags)
 {
-	trace_mark_tp(ipc_sem_create, ipc_sem_create, probe_ipc_sem_create,
+	trace_mark_tp(ipc, sem_create, ipc_sem_create, probe_ipc_sem_create,
 		"id %ld flags %d", id, flags);
 }
 
 void probe_ipc_shm_create(long id, int flags)
 {
-	trace_mark_tp(ipc_shm_create, ipc_shm_create, probe_ipc_shm_create,
+	trace_mark_tp(ipc, shm_create, ipc_shm_create, probe_ipc_shm_create,
 		"id %ld flags %d", id, flags);
 }
 
 void probe_ipc_call(unsigned int call, unsigned int first)
 {
-	trace_mark_tp(ipc_call, ipc_call, probe_ipc_call,
+	trace_mark_tp(ipc, call, ipc_call, probe_ipc_call,
 		"call %u first %d", call, first);
 }
 
diff --git a/ltt/probes/kernel-trace.c b/ltt/probes/kernel-trace.c
index b505a84..9f12b95 100644
--- a/ltt/probes/kernel-trace.c
+++ b/ltt/probes/kernel-trace.c
@@ -41,7 +41,7 @@ static struct pt_regs *get_irq_regs(void)
 void probe_irq_entry(unsigned int id, struct pt_regs *regs,
 	struct irqaction *action);
 
-DEFINE_MARKER_TP(kernel_irq_entry, irq_entry, probe_irq_entry,
+DEFINE_MARKER_TP(kernel, irq_entry, irq_entry, probe_irq_entry,
 	"ip %lu handler %p irq_id #2u%u kernel_mode #1u%u");
 
 notrace void probe_irq_entry(unsigned int id, struct pt_regs *regs,
@@ -62,15 +62,15 @@ notrace void probe_irq_entry(unsigned int id, struct pt_regs *regs,
 	data.f2 = (unsigned long) (action ? action->handler : NULL);
 	data.f3 = id;
 
-	marker = &GET_MARKER(kernel_irq_entry);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, irq_entry);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, serialize_sizeof(data), sizeof(long));
 }
 
 void probe_irq_next_handler(unsigned int id, struct irqaction *action,
 		irqreturn_t prev_ret);
 
-DEFINE_MARKER_TP(kernel_irq_next_handler, irq_next_handler,
+DEFINE_MARKER_TP(kernel, irq_next_handler, irq_next_handler,
 	probe_irq_next_handler,
 	"handler %p prev_ret #1u%u");
 
@@ -83,8 +83,8 @@ notrace void probe_irq_next_handler(unsigned int id, struct irqaction *action,
 	data.f1 = (unsigned long) (action ? action->handler : NULL);
 	data.f2 = prev_ret;
 
-	marker = &GET_MARKER(kernel_irq_next_handler);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, irq_next_handler);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, serialize_sizeof(data), sizeof(long));
 }
 
@@ -92,7 +92,7 @@ notrace void probe_irq_next_handler(unsigned int id, struct irqaction *action,
 
 void probe_irq_exit(irqreturn_t retval);
 
-DEFINE_MARKER_TP(kernel_irq_exit, irq_exit, probe_irq_exit,
+DEFINE_MARKER_TP(kernel, irq_exit, irq_exit, probe_irq_exit,
 	"handled #1u%u");
 
 notrace void probe_irq_exit(irqreturn_t retval)
@@ -102,8 +102,8 @@ notrace void probe_irq_exit(irqreturn_t retval)
 
 	data = IRQ_RETVAL(retval);
 
-	marker = &GET_MARKER(kernel_irq_exit);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, irq_exit);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, sizeof(data), sizeof(data));
 }
 
@@ -112,7 +112,7 @@ notrace void probe_irq_exit(irqreturn_t retval)
 void probe_irq_softirq_entry(struct softirq_action *h,
 	struct softirq_action *softirq_vec);
 
-DEFINE_MARKER_TP(kernel_softirq_entry, irq_softirq_entry,
+DEFINE_MARKER_TP(kernel, softirq_entry, irq_softirq_entry,
 	probe_irq_softirq_entry, "softirq_id #1u%lu");
 
 notrace void probe_irq_softirq_entry(struct softirq_action *h,
@@ -123,8 +123,8 @@ notrace void probe_irq_softirq_entry(struct softirq_action *h,
 
 	data = ((unsigned long)h - (unsigned long)softirq_vec) / sizeof(*h);
 
-	marker = &GET_MARKER(kernel_softirq_entry);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, softirq_entry);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, sizeof(data), sizeof(data));
 }
 
@@ -133,7 +133,7 @@ notrace void probe_irq_softirq_entry(struct softirq_action *h,
 void probe_irq_softirq_exit(struct softirq_action *h,
 	struct softirq_action *softirq_vec);
 
-DEFINE_MARKER_TP(kernel_softirq_exit, irq_softirq_exit,
+DEFINE_MARKER_TP(kernel, softirq_exit, irq_softirq_exit,
 	probe_irq_softirq_exit, "softirq_id #1u%lu");
 
 notrace void probe_irq_softirq_exit(struct softirq_action *h,
@@ -144,8 +144,8 @@ notrace void probe_irq_softirq_exit(struct softirq_action *h,
 
 	data = ((unsigned long)h - (unsigned long)softirq_vec) / sizeof(*h);
 
-	marker = &GET_MARKER(kernel_softirq_exit);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, softirq_exit);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, sizeof(data), sizeof(data));
 }
 
@@ -153,7 +153,7 @@ notrace void probe_irq_softirq_exit(struct softirq_action *h,
 
 void probe_irq_softirq_raise(unsigned int nr);
 
-DEFINE_MARKER_TP(kernel_softirq_raise, irq_softirq_raise,
+DEFINE_MARKER_TP(kernel, softirq_raise, irq_softirq_raise,
 	probe_irq_softirq_raise, "softirq_id #1u%u");
 
 notrace void probe_irq_softirq_raise(unsigned int nr)
@@ -163,55 +163,55 @@ notrace void probe_irq_softirq_raise(unsigned int nr)
 
 	data = nr;
 
-	marker = &GET_MARKER(kernel_softirq_raise);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, softirq_raise);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, sizeof(data), sizeof(data));
 }
 
 /* Standard probes */
 void probe_irq_tasklet_low_entry(struct tasklet_struct *t)
 {
-	trace_mark_tp(kernel_tasklet_low_entry, irq_tasklet_low_entry,
+	trace_mark_tp(kernel, tasklet_low_entry, irq_tasklet_low_entry,
 		probe_irq_tasklet_low_entry, "func %p data %lu",
 		t->func, t->data);
 }
 
 void probe_irq_tasklet_low_exit(struct tasklet_struct *t)
 {
-	trace_mark_tp(kernel_tasklet_low_exit, irq_tasklet_low_exit,
+	trace_mark_tp(kernel, tasklet_low_exit, irq_tasklet_low_exit,
 		probe_irq_tasklet_low_exit, "func %p data %lu",
 		t->func, t->data);
 }
 
 void probe_irq_tasklet_high_entry(struct tasklet_struct *t)
 {
-	trace_mark_tp(kernel_tasklet_high_entry, irq_tasklet_high_entry,
+	trace_mark_tp(kernel, tasklet_high_entry, irq_tasklet_high_entry,
 		probe_irq_tasklet_high_entry, "func %p data %lu",
 		t->func, t->data);
 }
 
 void probe_irq_tasklet_high_exit(struct tasklet_struct *t)
 {
-	trace_mark_tp(kernel_tasklet_high_exit, irq_tasklet_high_exit,
+	trace_mark_tp(kernel, tasklet_high_exit, irq_tasklet_high_exit,
 		probe_irq_tasklet_high_exit, "func %p data %lu",
 		t->func, t->data);
 }
 
 void probe_sched_kthread_stop(struct task_struct *t)
 {
-	trace_mark_tp(kernel_kthread_stop, sched_kthread_stop,
+	trace_mark_tp(kernel, kthread_stop, sched_kthread_stop,
 		probe_sched_kthread_stop, "pid %d", t->pid);
 }
 
 void probe_sched_kthread_stop_ret(int ret)
 {
-	trace_mark_tp(kernel_kthread_stop_ret, sched_kthread_stop_ret,
+	trace_mark_tp(kernel, kthread_stop_ret, sched_kthread_stop_ret,
 		probe_sched_kthread_stop_ret, "ret %d", ret);
 }
 
 void probe_sched_wait_task(struct rq *rq, struct task_struct *p)
 {
-	trace_mark_tp(kernel_sched_wait_task, sched_wait_task,
+	trace_mark_tp(kernel, sched_wait_task, sched_wait_task,
 		probe_sched_wait_task, "pid %d state #2d%ld",
 		p->pid, p->state);
 }
@@ -220,7 +220,7 @@ void probe_sched_wait_task(struct rq *rq, struct task_struct *p)
 
 void probe_sched_wakeup(struct rq *rq, struct task_struct *p);
 
-DEFINE_MARKER_TP(kernel_sched_try_wakeup, sched_wakeup,
+DEFINE_MARKER_TP(kernel, sched_try_wakeup, sched_wakeup,
 	probe_sched_wakeup, "pid %d cpu_id %u state #2d%ld");
 
 notrace void probe_sched_wakeup(struct rq *rq, struct task_struct *p)
@@ -232,14 +232,14 @@ notrace void probe_sched_wakeup(struct rq *rq, struct task_struct *p)
 	data.f2 = task_cpu(p);
 	data.f3 = p->state;
 
-	marker = &GET_MARKER(kernel_sched_try_wakeup);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, sched_try_wakeup);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, serialize_sizeof(data), sizeof(int));
 }
 
 void probe_sched_wakeup_new(struct rq *rq, struct task_struct *p, int success)
 {
-	trace_mark_tp(kernel_sched_wakeup_new_task, sched_wakeup_new,
+	trace_mark_tp(kernel, sched_wakeup_new_task, sched_wakeup_new,
 		probe_sched_wakeup_new, "pid %d state #2d%ld cpu_id %u",
 		p->pid, p->state, task_cpu(p));
 }
@@ -249,7 +249,7 @@ void probe_sched_wakeup_new(struct rq *rq, struct task_struct *p, int success)
 void probe_sched_switch(struct rq *rq, struct task_struct *prev,
 		struct task_struct *next);
 
-DEFINE_MARKER_TP(kernel_sched_schedule, sched_switch, probe_sched_switch,
+DEFINE_MARKER_TP(kernel, sched_schedule, sched_switch, probe_sched_switch,
 	"prev_pid %d next_pid %d prev_state #2d%ld");
 
 notrace void probe_sched_switch(struct rq *rq, struct task_struct *prev,
@@ -262,46 +262,46 @@ notrace void probe_sched_switch(struct rq *rq, struct task_struct *prev,
 	data.f2 = next->pid;
 	data.f3 = prev->state;
 
-	marker = &GET_MARKER(kernel_sched_schedule);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, sched_schedule);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, serialize_sizeof(data), sizeof(int));
 }
 
 void probe_sched_migrate_task(struct task_struct *p, int dest_cpu)
 {
-	trace_mark_tp(kernel_sched_migrate_task, sched_migrate_task,
+	trace_mark_tp(kernel, sched_migrate_task, sched_migrate_task,
 		probe_sched_migrate_task, "pid %d state #2d%ld dest_cpu %d",
 		p->pid, p->state, dest_cpu);
 }
 
 void probe_sched_signal_send(int sig, struct siginfo *info, struct task_struct *t)
 {
-	trace_mark_tp(kernel_send_signal, signal_generate,
+	trace_mark_tp(kernel, send_signal, signal_generate,
 		probe_sched_signal_send, "pid %d signal %d", t->pid, sig);
 }
 
 void probe_sched_process_free(struct task_struct *p)
 {
-	trace_mark_tp(kernel_process_free, sched_process_free,
+	trace_mark_tp(kernel, process_free, sched_process_free,
 		probe_sched_process_free, "pid %d", p->pid);
 }
 
 void probe_sched_process_exit(struct task_struct *p)
 {
-	trace_mark_tp(kernel_process_exit, sched_process_exit,
+	trace_mark_tp(kernel, process_exit, sched_process_exit,
 		probe_sched_process_exit, "pid %d", p->pid);
 }
 
 void probe_sched_process_wait(struct pid *pid)
 {
-	trace_mark_tp(kernel_process_wait, sched_process_wait,
+	trace_mark_tp(kernel, process_wait, sched_process_wait,
 		probe_sched_process_wait, "pid %d", pid_nr(pid));
 }
 
 void probe_sched_process_fork(struct task_struct *parent,
 		struct task_struct *child)
 {
-	trace_mark_tp(kernel_process_fork, sched_process_fork,
+	trace_mark_tp(kernel, process_fork, sched_process_fork,
 		probe_sched_process_fork,
 		"parent_pid %d child_pid %d child_tgid %d",
 		parent->pid, child->pid, child->tgid);
@@ -309,21 +309,21 @@ void probe_sched_process_fork(struct task_struct *parent,
 
 void probe_sched_kthread_create(void *fn, int pid)
 {
-	trace_mark_tp(kernel_kthread_create, sched_kthread_create,
+	trace_mark_tp(kernel, kthread_create, sched_kthread_create,
 		probe_sched_kthread_create,
 		"fn %p pid %d", fn, pid);
 }
 
 void probe_timer_itimer_expired(struct signal_struct *sig)
 {
-	trace_mark_tp(kernel_timer_itimer_expired, timer_itimer_expired,
+	trace_mark_tp(kernel, timer_itimer_expired, timer_itimer_expired,
 		probe_timer_itimer_expired, "pid %d",
 		pid_nr(sig->leader_pid));
 }
 
 void probe_timer_itimer_set(int which, struct itimerval *value)
 {
-	trace_mark_tp(kernel_timer_itimer_set,
+	trace_mark_tp(kernel, timer_itimer_set,
 		timer_itimer_set, probe_timer_itimer_set,
 		"which %d interval_sec %ld interval_usec %ld "
 		"value_sec %ld value_usec %ld",
@@ -338,7 +338,7 @@ void probe_timer_itimer_set(int which, struct itimerval *value)
 
 void probe_timer_set(struct timer_list *timer);
 
-DEFINE_MARKER_TP(kernel_timer_set, timer_set, probe_timer_set,
+DEFINE_MARKER_TP(kernel, timer_set, timer_set, probe_timer_set,
 	"expires %lu function %p data %lu");
 
 notrace void probe_timer_set(struct timer_list *timer)
@@ -350,15 +350,15 @@ notrace void probe_timer_set(struct timer_list *timer)
 	data.f2 = (unsigned long)timer->function;
 	data.f3 = timer->data;
 
-	marker = &GET_MARKER(kernel_timer_set);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, timer_set);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, serialize_sizeof(data), sizeof(long));
 }
 
 void probe_timer_update_time(struct timespec *_xtime,
 		struct timespec *_wall_to_monotonic)
 {
-	trace_mark_tp(kernel_timer_update_time, timer_update_time,
+	trace_mark_tp(kernel, timer_update_time, timer_update_time,
 		probe_timer_update_time,
 		"jiffies #8u%llu xtime_sec %ld xtime_nsec %ld "
 		"walltomonotonic_sec %ld walltomonotonic_nsec %ld",
@@ -368,13 +368,13 @@ void probe_timer_update_time(struct timespec *_xtime,
 
 void probe_timer_timeout(struct task_struct *p)
 {
-	trace_mark_tp(kernel_timer_timeout, timer_timeout,
+	trace_mark_tp(kernel, timer_timeout, timer_timeout,
 		probe_timer_timeout, "pid %d", p->pid);
 }
 
 void probe_kernel_printk(unsigned long retaddr)
 {
-	trace_mark_tp(kernel_printk, kernel_printk,
+	trace_mark_tp(kernel, printk, kernel_printk,
 		probe_kernel_printk, "ip 0x%lX", retaddr);
 }
 
@@ -400,7 +400,7 @@ void probe_kernel_vprintk(unsigned long retaddr, char *buf, int len)
 			mark_len--;
 		saved_char = mark_buf[mark_len];
 		mark_buf[mark_len] = '\0';
-		trace_mark_tp(kernel_vprintk, kernel_vprintk,
+		trace_mark_tp(kernel, vprintk, kernel_vprintk,
 			probe_kernel_vprintk,
 			"loglevel #1u%u string %s ip 0x%lX",
 			loglevel, mark_buf, retaddr);
@@ -411,13 +411,13 @@ void probe_kernel_vprintk(unsigned long retaddr, char *buf, int len)
 #ifdef CONFIG_MODULES
 void probe_kernel_module_free(struct module *mod)
 {
-	trace_mark_tp(kernel_module_free, kernel_module_free,
+	trace_mark_tp(kernel, module_free, kernel_module_free,
 		probe_kernel_module_free, "name %s", mod->name);
 }
 
 void probe_kernel_module_load(struct module *mod)
 {
-	trace_mark_tp(kernel_module_load, kernel_module_load,
+	trace_mark_tp(kernel, module_load, kernel_module_load,
 		probe_kernel_module_load, "name %s", mod->name);
 }
 #endif
diff --git a/ltt/probes/lockdep-trace.c b/ltt/probes/lockdep-trace.c
index 5a2ad5b..61af4d3 100644
--- a/ltt/probes/lockdep-trace.c
+++ b/ltt/probes/lockdep-trace.c
@@ -13,25 +13,25 @@
 
 void probe_lockdep_hardirqs_on(unsigned long retaddr)
 {
-	trace_mark_tp(lockdep_hardirqs_on, lockdep_hardirqs_on,
+	trace_mark_tp(lockdep, hardirqs_on, lockdep_hardirqs_on,
 		probe_lockdep_hardirqs_on, "retaddr 0x%lX", retaddr);
 }
 
 void probe_lockdep_hardirqs_off(unsigned long retaddr)
 {
-	trace_mark_tp(lockdep_hardirqs_off, lockdep_hardirqs_off,
+	trace_mark_tp(lockdep, hardirqs_off, lockdep_hardirqs_off,
 		probe_lockdep_hardirqs_off, "retaddr 0x%lX", retaddr);
 }
 
 void probe_lockdep_softirqs_on(unsigned long retaddr)
 {
-	trace_mark_tp(lockdep_softirqs_on, lockdep_softirqs_on,
+	trace_mark_tp(lockdep, softirqs_on, lockdep_softirqs_on,
 		probe_lockdep_softirqs_on, "retaddr 0x%lX", retaddr);
 }
 
 void probe_lockdep_softirqs_off(unsigned long retaddr)
 {
-	trace_mark_tp(lockdep_softirqs_off, lockdep_softirqs_off,
+	trace_mark_tp(lockdep, softirqs_off, lockdep_softirqs_off,
 		probe_lockdep_softirqs_off, "retaddr 0x%lX", retaddr);
 }
 
@@ -39,7 +39,7 @@ void probe_lockdep_lock_acquire(unsigned long retaddr,
 		unsigned int subclass, struct lockdep_map *lock, int trylock,
 		int read, int hardirqs_off)
 {
-	trace_mark_tp(lockdep_lock_acquire, lockdep_lock_acquire,
+	trace_mark_tp(lockdep, lock_acquire, lockdep_lock_acquire,
 		probe_lockdep_lock_acquire,
 		"retaddr 0x%lX subclass %u lock %p trylock %d read %d "
 		"hardirqs_off %d",
@@ -49,7 +49,7 @@ void probe_lockdep_lock_acquire(unsigned long retaddr,
 void probe_lockdep_lock_release(unsigned long retaddr,
 		struct lockdep_map *lock, int nested)
 {
-	trace_mark_tp(lockdep_lock_release, lockdep_lock_release,
+	trace_mark_tp(lockdep, lock_release, lockdep_lock_release,
 		probe_lockdep_lock_release,
 		"retaddr 0x%lX lock %p nested %d",
 		retaddr, lock, nested);
diff --git a/ltt/probes/mm-trace.c b/ltt/probes/mm-trace.c
index 72af24e..2f73d15 100644
--- a/ltt/probes/mm-trace.c
+++ b/ltt/probes/mm-trace.c
@@ -22,28 +22,28 @@
 
 void probe_wait_on_page_start(struct page *page, int bit_nr)
 {
-	trace_mark_tp(mm_wait_on_page_start, wait_on_page_start,
+	trace_mark_tp(mm, wait_on_page_start, wait_on_page_start,
 		probe_wait_on_page_start, "pfn %lu bit_nr %d",
 		page_to_pfn(page), bit_nr);
 }
 
 void probe_wait_on_page_end(struct page *page, int bit_nr)
 {
-	trace_mark_tp(mm_wait_on_page_end, wait_on_page_end,
+	trace_mark_tp(mm, wait_on_page_end, wait_on_page_end,
 		probe_wait_on_page_end, "pfn %lu bit_nr %d",
 		page_to_pfn(page), bit_nr);
 }
 
 void probe_hugetlb_page_free(struct page *page)
 {
-	trace_mark_tp(mm_huge_page_free, hugetlb_page_free,
+	trace_mark_tp(mm, huge_page_free, hugetlb_page_free,
 		probe_hugetlb_page_free, "pfn %lu", page_to_pfn(page));
 }
 
 void probe_hugetlb_page_alloc(struct page *page)
 {
 	if (page)
-		trace_mark_tp(mm_huge_page_alloc, hugetlb_page_alloc,
+		trace_mark_tp(mm, huge_page_alloc, hugetlb_page_alloc,
 			probe_hugetlb_page_alloc, "pfn %lu", page_to_pfn(page));
 }
 
@@ -51,7 +51,7 @@ void probe_hugetlb_page_alloc(struct page *page)
 
 void probe_page_free(struct page *page, unsigned int order);
 
-DEFINE_MARKER_TP(mm_page_free, page_free, probe_page_free,
+DEFINE_MARKER_TP(mm, page_free, page_free, probe_page_free,
 	"pfn %lu order %u");
 
 notrace void probe_page_free(struct page *page, unsigned int order)
@@ -62,8 +62,8 @@ notrace void probe_page_free(struct page *page, unsigned int order)
 	data.f1 = page_to_pfn(page);
 	data.f2 = order;
 
-	marker = &GET_MARKER(mm_page_free);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(mm, page_free);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, serialize_sizeof(data), sizeof(long));
 }
 
@@ -71,7 +71,7 @@ notrace void probe_page_free(struct page *page, unsigned int order)
 
 void probe_page_alloc(struct page *page, unsigned int order);
 
-DEFINE_MARKER_TP(mm_page_alloc, page_alloc, probe_page_alloc,
+DEFINE_MARKER_TP(mm, page_alloc, page_alloc, probe_page_alloc,
 	"pfn %lu order %u");
 
 notrace void probe_page_alloc(struct page *page, unsigned int order)
@@ -85,15 +85,15 @@ notrace void probe_page_alloc(struct page *page, unsigned int order)
 	data.f1 = page_to_pfn(page);
 	data.f2 = order;
 
-	marker = &GET_MARKER(mm_page_alloc);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(mm, page_alloc);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, serialize_sizeof(data), sizeof(long));
 }
 
 #ifdef CONFIG_SWAP
 void probe_swap_in(struct page *page, swp_entry_t entry)
 {
-	trace_mark_tp(mm_swap_in, swap_in, probe_swap_in,
+	trace_mark_tp(mm, swap_in, swap_in, probe_swap_in,
 		"pfn %lu filp %p offset %lu",
 		page_to_pfn(page),
 		get_swap_info_struct(swp_type(entry))->swap_file,
@@ -102,7 +102,7 @@ void probe_swap_in(struct page *page, swp_entry_t entry)
 
 void probe_swap_out(struct page *page)
 {
-	trace_mark_tp(mm_swap_out, swap_out, probe_swap_out,
+	trace_mark_tp(mm, swap_out, swap_out, probe_swap_out,
 		"pfn %lu filp %p offset %lu",
 		page_to_pfn(page),
 		get_swap_info_struct(swp_type(
@@ -112,13 +112,13 @@ void probe_swap_out(struct page *page)
 
 void probe_swap_file_close(struct file *file)
 {
-	trace_mark_tp(mm_swap_file_close, swap_file_close,
+	trace_mark_tp(mm, swap_file_close, swap_file_close,
 		probe_swap_file_close, "filp %p", file);
 }
 
 void probe_swap_file_open(struct file *file, char *filename)
 {
-	trace_mark_tp(mm_swap_file_open, swap_file_open,
+	trace_mark_tp(mm, swap_file_open, swap_file_open,
 		probe_swap_file_open, "filp %p filename %s",
 		file, filename);
 }
diff --git a/ltt/probes/net-trace.c b/ltt/probes/net-trace.c
index a7c94c6..d4ad51d 100644
--- a/ltt/probes/net-trace.c
+++ b/ltt/probes/net-trace.c
@@ -16,28 +16,28 @@
 
 void probe_net_dev_xmit(struct sk_buff *skb)
 {
-	trace_mark_tp(net_dev_xmit, net_dev_xmit,
+	trace_mark_tp(net, dev_xmit, net_dev_xmit,
 		probe_net_dev_xmit,
 		"skb %p protocol #2u%hu", skb, skb->protocol);
 }
 
 void probe_net_dev_receive(struct sk_buff *skb)
 {
-	trace_mark_tp(net_dev_receive, net_dev_receive,
+	trace_mark_tp(net, dev_receive, net_dev_receive,
 		probe_net_dev_receive, "skb %p protocol #2u%hu",
 		skb, skb->protocol);
 }
 
 void probe_ipv4_addr_add(struct in_ifaddr *ifa)
 {
-	trace_mark_tp(net_insert_ifa_ipv4, ipv4_addr_add,
+	trace_mark_tp(netif_state, insert_ifa_ipv4, ipv4_addr_add,
 		probe_ipv4_addr_add, "label %s address #4u%u",
 		ifa->ifa_label, (unsigned int)ifa->ifa_address);
 }
 
 void probe_ipv4_addr_del(struct in_ifaddr *ifa)
 {
-	trace_mark_tp(net_del_ifa_ipv4, ipv4_addr_del,
+	trace_mark_tp(netif_state, del_ifa_ipv4, ipv4_addr_del,
 		probe_ipv4_addr_del, "label %s address #4u%u",
 		ifa->ifa_label, (unsigned int)ifa->ifa_address);
 }
@@ -46,7 +46,8 @@ void probe_ipv6_addr_add(struct inet6_ifaddr *ifa)
 {
 	__u8 *addr = ifa->addr.s6_addr;
 
-	trace_mark_tp(net_insert_ifa_ipv6, ipv6_addr_add, probe_ipv6_addr_add,
+	trace_mark_tp(netif_state, insert_ifa_ipv6, ipv6_addr_add,
+		probe_ipv6_addr_add,
 		"label %s "
 		"a15 #1x%c a14 #1x%c a13 #1x%c a12 #1x%c "
 		"a11 #1x%c a10 #1x%c a9 #1x%c a8 #1x%c "
@@ -63,7 +64,8 @@ void probe_ipv6_addr_del(struct inet6_ifaddr *ifa)
 {
 	__u8 *addr = ifa->addr.s6_addr;
 
-	trace_mark_tp(net_insert_ifa_ipv6, ipv6_addr_del, probe_ipv6_addr_del,
+	trace_mark_tp(netif_state, insert_ifa_ipv6, ipv6_addr_del,
+		probe_ipv6_addr_del,
 		"label %s "
 		"a15 #1x%c a14 #1x%c a13 #1x%c a12 #1x%c "
 		"a11 #1x%c a10 #1x%c a9 #1x%c a8 #1x%c "
@@ -79,7 +81,7 @@ void probe_ipv6_addr_del(struct inet6_ifaddr *ifa)
 void probe_socket_sendmsg(struct socket *sock, struct msghdr *msg,
 		size_t size, int ret)
 {
-	trace_mark_tp(net_socket_sendmsg, socket_sendmsg, probe_socket_sendmsg,
+	trace_mark_tp(net, socket_sendmsg, socket_sendmsg, probe_socket_sendmsg,
 		"sock %p family %d type %d protocol %d size %zu",
 		sock, sock->sk->sk_family, sock->sk->sk_type,
 		sock->sk->sk_protocol, size);
@@ -88,7 +90,7 @@ void probe_socket_sendmsg(struct socket *sock, struct msghdr *msg,
 void probe_socket_recvmsg(struct socket *sock, struct msghdr *msg,
 		size_t size, int flags, int ret)
 {
-	trace_mark_tp(net_socket_recvmsg, socket_recvmsg, probe_socket_recvmsg,
+	trace_mark_tp(net, socket_recvmsg, socket_recvmsg, probe_socket_recvmsg,
 		"sock %p family %d type %d protocol %d size %zu",
 		sock, sock->sk->sk_family, sock->sk->sk_type,
 		sock->sk->sk_protocol, size);
@@ -96,7 +98,7 @@ void probe_socket_recvmsg(struct socket *sock, struct msghdr *msg,
 
 void probe_socket_create(struct socket *sock, int fd)
 {
-	trace_mark_tp(net_socket_create, socket_create, probe_socket_create,
+	trace_mark_tp(net, socket_create, socket_create, probe_socket_create,
 		"sock %p family %d type %d protocol %d fd %d",
 		sock, sock->sk->sk_family, sock->sk->sk_type,
 		sock->sk->sk_protocol, fd);
@@ -104,14 +106,14 @@ void probe_socket_create(struct socket *sock, int fd)
 
 void probe_socket_call(int call, unsigned long a0)
 {
-	trace_mark_tp(net_socket_call, socket_call, probe_socket_call,
+	trace_mark_tp(net, socket_call, socket_call, probe_socket_call,
 		"call %d a0 %lu", call, a0);
 }
 
 #ifdef CONFIG_NETPOLL
 void probe_net_napi_schedule(struct napi_struct *n)
 {
-	trace_mark_tp(net_napi_schedule, net_napi_schedule,
+	trace_mark_tp(net, napi_schedule, net_napi_schedule,
 		probe_net_napi_schedule,
 		"napi_struct %p name %s",
 		n, n->dev->name);
@@ -119,14 +121,14 @@ void probe_net_napi_schedule(struct napi_struct *n)
 
 void probe_net_napi_poll(struct napi_struct *n)
 {
-	trace_mark_tp(net_napi_poll, net_napi_poll, probe_net_napi_poll,
+	trace_mark_tp(net, napi_poll, net_napi_poll, probe_net_napi_poll,
 		"napi_struct %p name %s",
 		n, n->dev->name);
 }
 
 void probe_net_napi_complete(struct napi_struct *n)
 {
-	trace_mark_tp(net_napi_complete, net_napi_complete,
+	trace_mark_tp(net, napi_complete, net_napi_complete,
 		probe_net_napi_complete,
 		"napi_struct %p name %s",
 		n, n->dev->name);
@@ -134,20 +136,20 @@ void probe_net_napi_complete(struct napi_struct *n)
 #else /* !CONFIG_NETPOLL */
 void probe_net_napi_schedule(struct napi_struct *n)
 {
-	trace_mark_tp(net_napi_schedule, net_napi_schedule,
+	trace_mark_tp(net, napi_schedule, net_napi_schedule,
 		probe_net_napi_schedule,
 		"napi_struct %p", n);
 }
 
 void probe_net_napi_poll(struct napi_struct *n)
 {
-	trace_mark_tp(net_napi_poll, net_napi_poll, probe_net_napi_poll,
+	trace_mark_tp(net, napi_poll, net_napi_poll, probe_net_napi_poll,
 		"napi_struct %p", n);
 }
 
 void probe_net_napi_complete(struct napi_struct *n)
 {
-	trace_mark_tp(net_napi_complete, net_napi_complete,
+	trace_mark_tp(net, napi_complete, net_napi_complete,
 		probe_net_napi_complete,
 		"napi_struct %p", n);
 }
diff --git a/ltt/probes/syscall-trace.c b/ltt/probes/syscall-trace.c
index 18ce105..9cd42a3 100644
--- a/ltt/probes/syscall-trace.c
+++ b/ltt/probes/syscall-trace.c
@@ -16,7 +16,7 @@
 
 void probe_syscall_entry(struct pt_regs *regs, long id);
 
-DEFINE_MARKER_TP(kernel_syscall_entry, syscall_entry,
+DEFINE_MARKER_TP(kernel, syscall_entry, syscall_entry,
 	probe_syscall_entry, "ip #p%ld syscall_id #2u%u");
 
 notrace void probe_syscall_entry(struct pt_regs *regs, long id)
@@ -27,8 +27,8 @@ notrace void probe_syscall_entry(struct pt_regs *regs, long id)
 	data.f1 = instruction_pointer(regs);
 	data.f2 = (unsigned short)id;
 
-	marker = &GET_MARKER(kernel_syscall_entry);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, syscall_entry);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, serialize_sizeof(data), sizeof(long));
 }
 
@@ -36,15 +36,15 @@ notrace void probe_syscall_entry(struct pt_regs *regs, long id)
 
 void probe_syscall_exit(long ret);
 
-DEFINE_MARKER_TP(kernel_syscall_exit, syscall_exit,
+DEFINE_MARKER_TP(kernel, syscall_exit, syscall_exit,
 	probe_syscall_exit, "ret %ld");
 
 notrace void probe_syscall_exit(long ret)
 {
 	struct marker *marker;
 
-	marker = &GET_MARKER(kernel_syscall_exit);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, syscall_exit);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&ret, sizeof(ret), sizeof(ret));
 }
 
diff --git a/ltt/probes/trap-trace.c b/ltt/probes/trap-trace.c
index 0b2cc84..37cb6d8 100644
--- a/ltt/probes/trap-trace.c
+++ b/ltt/probes/trap-trace.c
@@ -15,7 +15,7 @@
 
 void probe_trap_entry(struct pt_regs *regs, long id);
 
-DEFINE_MARKER_TP(kernel_trap_entry, trap_entry,
+DEFINE_MARKER_TP(kernel, trap_entry, trap_entry,
 	probe_trap_entry, "ip #p%ld trap_id #2u%u");
 
 notrace void probe_trap_entry(struct pt_regs *regs, long id)
@@ -29,8 +29,8 @@ notrace void probe_trap_entry(struct pt_regs *regs, long id)
 		data.f1 = 0UL;
 	data.f2 = (unsigned short)id;
 
-	marker = &GET_MARKER(kernel_trap_entry);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, trap_entry);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		&data, serialize_sizeof(data), sizeof(long));
 }
 
@@ -38,15 +38,15 @@ notrace void probe_trap_entry(struct pt_regs *regs, long id)
 
 void probe_trap_exit(void);
 
-DEFINE_MARKER_TP(kernel_trap_exit, trap_exit,
+DEFINE_MARKER_TP(kernel, trap_exit, trap_exit,
 	probe_trap_exit, MARK_NOARGS);
 
 notrace void probe_trap_exit(void)
 {
 	struct marker *marker;
 
-	marker = &GET_MARKER(kernel_trap_exit);
-	ltt_specialized_trace(marker->single.probe_private,
+	marker = &GET_MARKER(kernel, trap_exit);
+	ltt_specialized_trace(marker, marker->single.probe_private,
 		NULL, 0, 0);
 }
 
diff --git a/mm/swapfile.c b/mm/swapfile.c
index 0f53ab7..b973664 100644
--- a/mm/swapfile.c
+++ b/mm/swapfile.c
@@ -2511,7 +2511,7 @@ void ltt_dump_swap_files(void *call_data)
 		p = swap_info[type];
 		if (!(p->flags & SWP_WRITEOK))
 			continue;
-		__trace_mark(0, statedump_swap_files, call_data,
+		__trace_mark(0, swap_state, statedump_swap_files, call_data,
 			"filp %p vfsmount %p dname %s",
 			p->swap_file, p->swap_file->f_vfsmnt,
 			p->swap_file->f_dentry->d_name.name);
-- 
1.6.5.2

