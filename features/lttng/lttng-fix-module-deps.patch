From 094789ad4e3287cae855468f5a8295fd6a07c3ce Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:28:38 -0400
Subject: [PATCH 378/390] lttng-fix-module-deps

LTTng fix module deps

relay module dependencies and symbol declaration problems crept in lately.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 ltt/Kconfig              |   11 ++++++-----
 ltt/ltt-relay-alloc.c    |   11 +++++++++--
 ltt/ltt-relay-lockless.c |    7 ++-----
 ltt/ltt-relay-lockless.h |    3 +++
 4 files changed, 20 insertions(+), 12 deletions(-)

diff --git a/ltt/Kconfig b/ltt/Kconfig
index 959a1b5..05eef6d 100644
--- a/ltt/Kconfig
+++ b/ltt/Kconfig
@@ -35,11 +35,15 @@ config HAVE_LTT_DUMP_TABLES
 	def_bool n
 
 config LTT_RELAY
-	def_bool n
+	tristate "LTTng buffer relay"
+	depends on LTT_TRACER
+	default y
+	help
+	  Build the LTTng ring-buffer.
 
 choice
 	prompt "LTTng Buffer Concurrency Management Algorithm"
-	depends on LTT_TRACER
+	depends on LTT_RELAY
 	default LTT_RELAY_LOCKLESS
 	help
 	  Choose between the fast lockless and the slower, spinlock/irq disable
@@ -47,7 +51,6 @@ choice
 
 	config LTT_RELAY_LOCKLESS
 		bool "Linux Trace Toolkit High-speed Lockless Data Relay"
-	select LTT_RELAY
 	select DEBUG_FS
 	help
 	  Support using the fast lockless algorithm to log the data obtained
@@ -58,7 +61,6 @@ choice
 
 	config LTT_RELAY_IRQOFF
 		bool "Linux Trace Toolkit Irq-off Data Relay"
-	select LTT_RELAY
 	select DEBUG_FS
 	depends on BROKEN
 	help
@@ -67,7 +69,6 @@ choice
 
 	config LTT_RELAY_LOCKED
 		bool "Linux Trace Toolkit Lock-Protected Data Relay"
-	select LTT_RELAY
 	select DEBUG_FS
 	depends on BROKEN
 	help
diff --git a/ltt/ltt-relay-alloc.c b/ltt/ltt-relay-alloc.c
index e16b065..5d4bb83 100644
--- a/ltt/ltt-relay-alloc.c
+++ b/ltt/ltt-relay-alloc.c
@@ -594,10 +594,17 @@ void *ltt_relay_offset_address(struct ltt_chanbuf_alloc *bufa, size_t offset)
 }
 EXPORT_SYMBOL_GPL(ltt_relay_offset_address);
 
-static __init int ltt_relay_init(void)
+static __init int ltt_relay_alloc_init(void)
 {
 	hotcpu_notifier(ltt_relay_hotcpu_callback, 5);
+	ltt_relay_init();
 	return 0;
 }
 
-module_init(ltt_relay_init);
+static void __exit ltt_relay_alloc_exit(void)
+{
+	ltt_relay_exit();
+}
+
+module_init(ltt_relay_alloc_init);
+module_exit(ltt_relay_alloc_exit);
diff --git a/ltt/ltt-relay-lockless.c b/ltt/ltt-relay-lockless.c
index 09584b6..a9b7efd 100644
--- a/ltt/ltt-relay-lockless.c
+++ b/ltt/ltt-relay-lockless.c
@@ -1337,7 +1337,7 @@ static struct notifier_block fn_ltt_chanbuf_hotcpu_callback = {
 	.priority = 6,
 };
 
-static int __init ltt_relay_init(void)
+int __init ltt_relay_init(void)
 {
 	printk(KERN_INFO "LTT : ltt-relay init\n");
 
@@ -1348,7 +1348,7 @@ static int __init ltt_relay_init(void)
 	return 0;
 }
 
-static void __exit ltt_relay_exit(void)
+void __exit ltt_relay_exit(void)
 {
 	printk(KERN_INFO "LTT : ltt-relay exit\n");
 
@@ -1357,9 +1357,6 @@ static void __exit ltt_relay_exit(void)
 	ltt_transport_unregister(&ltt_relay_transport);
 }
 
-module_init(ltt_relay_init);
-module_exit(ltt_relay_exit);
-
 MODULE_LICENSE("GPL and additional rights");
 MODULE_AUTHOR("Mathieu Desnoyers");
 MODULE_DESCRIPTION("Linux Trace Toolkit Next Generation Lockless Relay");
diff --git a/ltt/ltt-relay-lockless.h b/ltt/ltt-relay-lockless.h
index e2d29c8..9f17357 100644
--- a/ltt/ltt-relay-lockless.h
+++ b/ltt/ltt-relay-lockless.h
@@ -184,6 +184,9 @@ extern int ltt_chanbuf_put_subbuf(struct ltt_chanbuf *buf,
 extern void ltt_chan_start_switch_timer(struct ltt_chan *chan);
 extern void ltt_chan_stop_switch_timer(struct ltt_chan *chan);
 
+extern int ltt_relay_init(void);
+extern void ltt_relay_exit(void);
+
 static __inline__
 unsigned long ltt_chanbuf_get_offset(struct ltt_chanbuf *buf)
 {
-- 
1.6.5.2

