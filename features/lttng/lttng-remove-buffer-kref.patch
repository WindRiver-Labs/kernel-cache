From 8526ab4695a5e20f61db7284d73b322a47d4760d Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:28:04 -0400
Subject: [PATCH 315/391] lttng-remove-buffer-kref

LTTng relay remove buffer kref

The reference to each buffer is pointless and can be expressed through the
channel kref. Remove this duplication.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 include/linux/ltt-relay.h |    1 -
 ltt/ltt-relay-alloc.c     |    5 ++---
 ltt/ltt-relay-lockless.c  |    7 +------
 ltt/ltt-relay-lockless.h  |    2 +-
 4 files changed, 4 insertions(+), 11 deletions(-)

diff --git a/include/linux/ltt-relay.h b/include/linux/ltt-relay.h
index ad26e9f..0b3801f 100644
--- a/include/linux/ltt-relay.h
+++ b/include/linux/ltt-relay.h
@@ -52,7 +52,6 @@ struct ltt_chanbuf_alloc {
 	unsigned int nr_pages;		/* Number pages in buffer */
 
 	struct ltt_chan_alloc *chan;	/* Associated channel */
-	struct kref kref;		/* Reference count */
 	unsigned int cpu;		/* This buffer's cpu */
 	unsigned int allocated:1;	/* Bool: is buffer allocated ? */
 };
diff --git a/ltt/ltt-relay-alloc.c b/ltt/ltt-relay-alloc.c
index 8c21e35..c4b72ef 100644
--- a/ltt/ltt-relay-alloc.c
+++ b/ltt/ltt-relay-alloc.c
@@ -158,7 +158,6 @@ int ltt_chanbuf_alloc_create(struct ltt_chanbuf_alloc *buf,
 	if (ret)
 		goto end;
 
-	kref_init(&buf->kref);
 	buf->chan = chan;
 	buf->allocated = 1;
 	buf->cpu = cpu;
@@ -336,7 +335,7 @@ free_bufs:
 		if (!buf->a.allocated)
 			continue;
 		ltt_chanbuf_remove_file(buf);
-		kref_put(&buf->a.kref, ltt_chanbuf_free);
+		ltt_chanbuf_free(buf);
 	}
 	mutex_unlock(&ltt_relay_alloc_mutex);
 	free_percpu(chan->buf);
@@ -368,7 +367,7 @@ void ltt_chan_alloc_free(struct ltt_chan_alloc *chan)
 		if (!buf->a.allocated)
 			continue;
 		ltt_chanbuf_remove_file(buf);
-		kref_put(&buf->a.kref, ltt_chanbuf_free);
+		ltt_chanbuf_free(buf);
 	}
 	mutex_unlock(&ltt_relay_alloc_mutex);
 	free_percpu(chan->buf);
diff --git a/ltt/ltt-relay-lockless.c b/ltt/ltt-relay-lockless.c
index 5d2e3fd..1e8865f 100644
--- a/ltt/ltt-relay-lockless.c
+++ b/ltt/ltt-relay-lockless.c
@@ -112,10 +112,8 @@ void ltt_buffer_end(struct ltt_chanbuf *buf, u64 tsc, unsigned int offset,
 	header->subbuf_corrupt = local_read(&buf->corrupted_subbuffers);
 }
 
-void ltt_chanbuf_free(struct kref *kref)
+void ltt_chanbuf_free(struct ltt_chanbuf *buf)
 {
-	struct ltt_chanbuf *buf = container_of(kref, struct ltt_chanbuf,
-					       a.kref);
 	struct ltt_chan *chan = container_of(buf->a.chan, struct ltt_chan, a);
 
 	ltt_relay_print_buffer_errors(chan, buf->a.cpu);
@@ -256,9 +254,7 @@ EXPORT_SYMBOL_GPL(ltt_chan_create);
 int ltt_chanbuf_open_read(struct ltt_chanbuf *buf)
 {
 	kref_get(&buf->a.chan->kref);
-	kref_get(&buf->a.kref);
 	if (!atomic_long_add_unless(&buf->active_readers, 1, 1)) {
-		kref_put(&buf->a.kref, ltt_chanbuf_free);
 		kref_put(&buf->a.chan->kref, ltt_chan_free);
 		return -EBUSY;
 	}
@@ -271,7 +267,6 @@ void ltt_chanbuf_release_read(struct ltt_chanbuf *buf)
 	//ltt_relay_destroy_buffer(&buf->a.chan->a, buf->a.cpu);
 	WARN_ON(atomic_long_read(&buf->active_readers) != 1);
 	atomic_long_dec(&buf->active_readers);
-	kref_put(&buf->a.kref, ltt_chanbuf_free);
 	kref_put(&buf->a.chan->kref, ltt_chan_free);
 }
 
diff --git a/ltt/ltt-relay-lockless.h b/ltt/ltt-relay-lockless.h
index 9412d26..e47b406 100644
--- a/ltt/ltt-relay-lockless.h
+++ b/ltt/ltt-relay-lockless.h
@@ -166,7 +166,7 @@ static __inline__ int last_tsc_overflow(struct ltt_chanbuf *buf, u64 tsc)
 extern
 int ltt_chanbuf_create(struct ltt_chanbuf *buf, struct ltt_chan_alloc *chana,
 		       int cpu);
-extern void ltt_chanbuf_free(struct kref *kref);
+extern void ltt_chanbuf_free(struct ltt_chanbuf *buf);
 extern int ltt_chan_create(const char *base_filename, struct ltt_chan *chan,
 			   struct dentry *parent, size_t sb_size, size_t n_sb,
 			   int overwrite, struct ltt_trace *trace);
-- 
1.6.5.2

