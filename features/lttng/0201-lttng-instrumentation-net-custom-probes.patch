From ac66b9acf39cf15e0ad824a9f2cc94730be2032e Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:27:02 -0400
Subject: [PATCH 201/391] lttng-instrumentation-net-custom-probes

LTTng instrumentation net custom probes

For tbench workload.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 ltt/probes/net-trace.c |  217 +++++++++++++++++++++++++++++++++++++++---------
 1 files changed, 176 insertions(+), 41 deletions(-)

diff --git a/ltt/probes/net-trace.c b/ltt/probes/net-trace.c
index 335320c..72397aa 100644
--- a/ltt/probes/net-trace.c
+++ b/ltt/probes/net-trace.c
@@ -9,23 +9,47 @@
 
 #include <linux/module.h>
 #include <linux/netdevice.h>
+#include <linux/ltt-type-serializer.h>
+#include <linux/string.h>
 #include <trace/net.h>
 #include <trace/ipv4.h>
 #include <trace/ipv6.h>
 #include <trace/socket.h>
 
-void probe_net_dev_xmit(struct sk_buff *skb)
+void probe_net_dev_xmit(struct sk_buff *skb);
+
+DEFINE_MARKER_TP(net, dev_xmit, net_dev_xmit, probe_net_dev_xmit,
+	"skb %p protocol #2u%hu");
+
+notrace void probe_net_dev_xmit(struct sk_buff *skb)
 {
-	trace_mark_tp(net, dev_xmit, net_dev_xmit,
-		probe_net_dev_xmit,
-		"skb %p protocol #2u%hu", skb, skb->protocol);
+	struct marker *marker;
+	struct serialize_long_short data;
+
+	data.f1 = (unsigned long)skb;
+	data.f2 = skb->protocol;
+
+	marker = &GET_MARKER(net, dev_xmit);
+	ltt_specialized_trace(marker, marker->single.probe_private,
+		&data, serialize_sizeof(data), sizeof(long));
 }
 
-void probe_net_dev_receive(struct sk_buff *skb)
+void probe_net_dev_receive(struct sk_buff *skb);
+
+DEFINE_MARKER_TP(net, dev_receive, net_dev_receive, probe_net_dev_receive,
+	"skb %p protocol #2u%hu");
+
+notrace void probe_net_dev_receive(struct sk_buff *skb)
 {
-	trace_mark_tp(net, dev_receive, net_dev_receive,
-		probe_net_dev_receive, "skb %p protocol #2u%hu",
-		skb, skb->protocol);
+	struct marker *marker;
+	struct serialize_long_short data;
+
+	data.f1 = (unsigned long)skb;
+	data.f2 = skb->protocol;
+
+	marker = &GET_MARKER(net, dev_receive);
+	ltt_specialized_trace(marker, marker->single.probe_private,
+		&data, serialize_sizeof(data), sizeof(long));
 }
 
 void probe_ipv4_addr_add(struct in_ifaddr *ifa)
@@ -145,19 +169,50 @@ void probe_socket_socketpair(int family, int type, int protocol,
 }
 
 void probe_socket_sendmsg(struct socket *sock, struct msghdr *msg, size_t size,
-	int ret)
+	int ret);
+
+DEFINE_MARKER_TP(net, socket_sendmsg, net_socket_sendmsg,
+	probe_socket_sendmsg,
+	"sock %p msg %p size %zu ret %d");
+
+notrace void probe_socket_sendmsg(struct socket *sock, struct msghdr *msg,
+	size_t size, int ret)
 {
-	trace_mark_tp(net, socket_sendmsg, socket_sendmsg, probe_socket_sendmsg,
-		"sock %p msg %p size %zu ret %d",
-		sock, msg, size, ret);
+	struct marker *marker;
+	struct serialize_long_long_sizet_int data;
+
+	data.f1 = (unsigned long)sock;
+	data.f2 = (unsigned long)msg;
+	data.f3 = size;
+	data.f4 = ret;
+
+	marker = &GET_MARKER(net, socket_sendmsg);
+	ltt_specialized_trace(marker, marker->single.probe_private,
+		&data, serialize_sizeof(data), sizeof(size_t));
 }
 
 void probe_socket_recvmsg(struct socket *sock, struct msghdr *msg, size_t size,
-	int flags, int ret)
+	int flags, int ret);
+
+DEFINE_MARKER_TP(net, socket_recvmsg, net_socket_recvmsg,
+	probe_socket_recvmsg,
+	"sock %p msg %p size %zu flags %d ret %d");
+
+notrace void probe_socket_recvmsg(struct socket *sock, struct msghdr *msg,
+	size_t size, int flags, int ret)
 {
-	trace_mark_tp(net, socket_recvmsg, socket_recvmsg, probe_socket_recvmsg,
-		"sock %p msg %p size %zu flags %d ret %d",
-		sock, msg, size, flags, ret);
+	struct marker *marker;
+	struct serialize_long_long_sizet_int_int data;
+
+	data.f1 = (unsigned long)sock;
+	data.f2 = (unsigned long)msg;
+	data.f3 = size;
+	data.f4 = flags;
+	data.f5 = ret;
+
+	marker = &GET_MARKER(net, socket_recvmsg);
+	ltt_specialized_trace(marker, marker->single.probe_private,
+		&data, serialize_sizeof(data), sizeof(size_t));
 }
 
 void probe_socket_setsockopt(int fd, int level, int optname,
@@ -193,47 +248,127 @@ void probe_socket_call(int call, unsigned long a0)
 }
 
 #ifdef CONFIG_NETPOLL
-void probe_net_napi_schedule(struct napi_struct *n)
+void probe_net_napi_schedule(struct napi_struct *n);
+
+DEFINE_MARKER_TP(net, napi_schedule, net_napi_schedule,
+	probe_net_napi_schedule,
+	"napi_struct %p name %s");
+
+notrace void probe_net_napi_schedule(struct napi_struct *n)
 {
-	trace_mark_tp(net, napi_schedule, net_napi_schedule,
-		probe_net_napi_schedule,
-		"napi_struct %p name %s",
-		n, n->dev->name);
+	struct marker *marker;
+	struct serialize_long_ifname data;
+	size_t data_len = 0;
+
+	data.f1 = (unsigned long)n;
+	data_len += sizeof(data.f1);
+	/* No need to align for strings */
+	strcpy(data.f2, n->dev->name);
+	data_len += strlen(data.f2) + 1;
+
+	marker = &GET_MARKER(net, napi_schedule);
+	ltt_specialized_trace(marker, marker->single.probe_private,
+		&data, data_len, sizeof(long));
 }
 
-void probe_net_napi_poll(struct napi_struct *n)
+void probe_net_napi_poll(struct napi_struct *n);
+
+DEFINE_MARKER_TP(net, napi_poll, net_napi_poll,
+	probe_net_napi_poll,
+	"napi_struct %p name %s");
+
+notrace void probe_net_napi_poll(struct napi_struct *n)
 {
-	trace_mark_tp(net, napi_poll, net_napi_poll, probe_net_napi_poll,
-		"napi_struct %p name %s",
-		n, n->dev->name);
+	struct marker *marker;
+	struct serialize_long_ifname data;
+	size_t data_len = 0;
+
+	data.f1 = (unsigned long)n;
+	data_len += sizeof(data.f1);
+	/* No need to align for strings */
+	strcpy(data.f2, n->dev->name);
+	data_len += strlen(data.f2) + 1;
+
+	marker = &GET_MARKER(net, napi_poll);
+	ltt_specialized_trace(marker, marker->single.probe_private,
+		&data, data_len, sizeof(long));
 }
 
-void probe_net_napi_complete(struct napi_struct *n)
+void probe_net_napi_complete(struct napi_struct *n);
+
+DEFINE_MARKER_TP(net, napi_complete, net_napi_complete,
+	probe_net_napi_complete,
+	"napi_struct %p name %s");
+
+notrace void probe_net_napi_complete(struct napi_struct *n)
 {
-	trace_mark_tp(net, napi_complete, net_napi_complete,
-		probe_net_napi_complete,
-		"napi_struct %p name %s",
-		n, n->dev->name);
+	struct marker *marker;
+	struct serialize_long_ifname data;
+	size_t data_len = 0;
+
+	data.f1 = (unsigned long)n;
+	data_len += sizeof(data.f1);
+	/* No need to align for strings */
+	strcpy(data.f2, n->dev->name);
+	data_len += strlen(data.f2) + 1;
+
+	marker = &GET_MARKER(net, napi_complete);
+	ltt_specialized_trace(marker, marker->single.probe_private,
+		&data, data_len, sizeof(long));
 }
 #else /* !CONFIG_NETPOLL */
-void probe_net_napi_schedule(struct napi_struct *n)
+void probe_net_napi_schedule(struct napi_struct *n);
+
+DEFINE_MARKER_TP(net, napi_schedule, net_napi_schedule,
+	probe_net_napi_schedule,
+	"napi_struct %p");
+
+notrace void probe_net_napi_schedule(struct napi_struct *n)
 {
-	trace_mark_tp(net, napi_schedule, net_napi_schedule,
-		probe_net_napi_schedule,
-		"napi_struct %p", n);
+	struct marker *marker;
+	unsigned long data;
+
+	data = (unsigned long)n;
+
+	marker = &GET_MARKER(net, napi_schedule);
+	ltt_specialized_trace(marker, marker->single.probe_private,
+		&data, sizeof(data), sizeof(data));
 }
 
-void probe_net_napi_poll(struct napi_struct *n)
+void probe_net_napi_poll(struct napi_struct *n);
+
+DEFINE_MARKER_TP(net, napi_poll, net_napi_poll,
+	probe_net_napi_poll,
+	"napi_struct %p");
+
+notrace void probe_net_napi_poll(struct napi_struct *n)
 {
-	trace_mark_tp(net, napi_poll, net_napi_poll, probe_net_napi_poll,
-		"napi_struct %p", n);
+	struct marker *marker;
+	unsigned long data;
+
+	data = (unsigned long)n;
+
+	marker = &GET_MARKER(net, napi_poll);
+	ltt_specialized_trace(marker, marker->single.probe_private,
+		&data, sizeof(data), sizeof(data));
 }
 
-void probe_net_napi_complete(struct napi_struct *n)
+void probe_net_napi_complete(struct napi_struct *n);
+
+DEFINE_MARKER_TP(net, napi_complete, net_napi_complete,
+	probe_net_napi_complete,
+	"napi_struct %p");
+
+notrace void probe_net_napi_complete(struct napi_struct *n)
 {
-	trace_mark_tp(net, napi_complete, net_napi_complete,
-		probe_net_napi_complete,
-		"napi_struct %p", n);
+	struct marker *marker;
+	unsigned long data;
+
+	data = (unsigned long)n;
+
+	marker = &GET_MARKER(net, napi_complete);
+	ltt_specialized_trace(marker, marker->single.probe_private,
+		&data, sizeof(data), sizeof(data));
 }
 #endif
 
-- 
1.6.5.2

