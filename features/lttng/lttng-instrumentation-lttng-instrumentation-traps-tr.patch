From 2192220a0c9506eb65f34f5b643c31ae053e47bb Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:26:28 -0400
Subject: [PATCH 140/391] lttng-instrumentation/lttng-instrumentation-traps-tracepoints-probes

LTTng instrumentation trap tracepoints probes

Trap instrumentation tracepoints probes.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 ltt/probes/Makefile     |    3 +-
 ltt/probes/trap-trace.c |   55 +++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 57 insertions(+), 1 deletions(-)
 create mode 100644 ltt/probes/trap-trace.c

diff --git a/ltt/probes/Makefile b/ltt/probes/Makefile
index 4de500d..1870e02 100644
--- a/ltt/probes/Makefile
+++ b/ltt/probes/Makefile
@@ -8,11 +8,12 @@ CFLAGS_REMOVE_ipc-trace.o = -pg
 CFLAGS_REMOVE_lockdep-trace.o = -pg
 CFLAGS_REMOVE_rcu-trace.o = -pg
 CFLAGS_REMOVE_syscall-trace.o = -pg
+CFLAGS_REMOVE_trap-trace.o = -pg
 endif
 
 obj-$(CONFIG_LTT_TRACEPROBES)	+= kernel-trace.o mm-trace.o fs-trace.o \
 				ipc-trace.o lockdep-trace.o rcu-trace.o \
-				syscall-trace.o
+				syscall-trace.o trap-trace.o
 
 ifeq ($(CONFIG_NET),y)
 ifdef CONFIG_FTRACE
diff --git a/ltt/probes/trap-trace.c b/ltt/probes/trap-trace.c
new file mode 100644
index 0000000..0b2cc84
--- /dev/null
+++ b/ltt/probes/trap-trace.c
@@ -0,0 +1,55 @@
+/*
+ * ltt/probes/trap-trace.c
+ *
+ * Trap tracepoint probes.
+ *
+ * (C) Copyright 2009 - Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
+ * Dual LGPL v2.1/GPL v2 license.
+ */
+
+#include <linux/module.h>
+#include <trace/trap.h>
+#include <linux/ltt-type-serializer.h>
+
+/* kernel_trap_entry specialized tracepoint probe */
+
+void probe_trap_entry(struct pt_regs *regs, long id);
+
+DEFINE_MARKER_TP(kernel_trap_entry, trap_entry,
+	probe_trap_entry, "ip #p%ld trap_id #2u%u");
+
+notrace void probe_trap_entry(struct pt_regs *regs, long id)
+{
+	struct marker *marker;
+	struct serialize_long_short data;
+
+	if (likely(regs))
+		data.f1 = instruction_pointer(regs);
+	else
+		data.f1 = 0UL;
+	data.f2 = (unsigned short)id;
+
+	marker = &GET_MARKER(kernel_trap_entry);
+	ltt_specialized_trace(marker->single.probe_private,
+		&data, serialize_sizeof(data), sizeof(long));
+}
+
+/* kernel_syscall_exit specialized tracepoint probe */
+
+void probe_trap_exit(void);
+
+DEFINE_MARKER_TP(kernel_trap_exit, trap_exit,
+	probe_trap_exit, MARK_NOARGS);
+
+notrace void probe_trap_exit(void)
+{
+	struct marker *marker;
+
+	marker = &GET_MARKER(kernel_trap_exit);
+	ltt_specialized_trace(marker->single.probe_private,
+		NULL, 0, 0);
+}
+
+MODULE_LICENSE("GPL and additional rights");
+MODULE_AUTHOR("Mathieu Desnoyers");
+MODULE_DESCRIPTION("Trap Tracepoint Probes");
-- 
1.6.5.2

