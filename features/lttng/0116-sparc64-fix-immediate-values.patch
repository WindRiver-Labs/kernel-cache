From ecce8b0934b6bdb3d12cb2c80b5cf3f7a4e2ceaf Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date: Thu, 30 Oct 2008 23:27:07 -0400
Subject: [PATCH] sparc64-fix-immediate-values

Sparc64 : fix immediate values

Use _ASM_PTR and _ASM_UAPTR 32/64 bits compatibility macros.

Use "unsigned long" type to encode pointers, with uaxword on sparc64 and uaword
on sparc32.

Disable immediate values on gcc < 4.0.0, because it seems to have problem with
passing pointers as "i" inline asm constraint.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
CC: David S. Miller <davem@davemloft.net>
---
 arch/sparc/include/asm/immediate.h |   14 ++++++++------
 arch/sparc64/Makefile              |    4 +++-
 2 files changed, 11 insertions(+), 7 deletions(-)

diff --git a/arch/sparc/include/asm/immediate.h b/arch/sparc/include/asm/immediate.h
index 3673afd..c854cc4 100644
--- a/arch/sparc/include/asm/immediate.h
+++ b/arch/sparc/include/asm/immediate.h
@@ -1,9 +1,11 @@
-#ifndef _ASM_SPARC64_IMMEDIATE_H
-#define _ASM_SPARC64_IMMEDIATE_H
+#ifndef _ASM_SPARC_IMMEDIATE_H
+#define _ASM_SPARC_IMMEDIATE_H
+
+#include <asm/asm.h>
 
 struct __imv {
-	unsigned int var;
-	unsigned int imv;
+	unsigned long var;
+	unsigned long imv;
 	unsigned char size;
 } __attribute__ ((packed));
 
@@ -14,7 +16,7 @@ struct __imv {
 		switch (sizeof(value)) {				\
 		case 1:							\
 			asm(".section __imv,\"aw\",@progbits\n\t"	\
-					".uaword %c1, 1f\n\t"		\
+					_ASM_UAPTR " %c1, 1f\n\t"	\
 					".byte 1\n\t"			\
 					".previous\n\t"			\
 					"1: mov 0, %0\n\t"		\
@@ -34,4 +36,4 @@ struct __imv {
 
 extern int arch_imv_update(const struct __imv *imv, int early);
 
-#endif /* _ASM_SPARC64_IMMEDIATE_H */
+#endif /* _ASM_SPARC_IMMEDIATE_H */
diff --git a/arch/sparc64/Makefile b/arch/sparc64/Makefile
index 2503958..5fae04e 100644
--- a/arch/sparc64/Makefile
+++ b/arch/sparc64/Makefile
@@ -21,7 +21,9 @@ KBUILD_CFLAGS += -m64 -pipe -mno-fpu -mcpu=ultrasparc -mcmodel=medlow \
 KBUILD_CFLAGS += $(call cc-option,-mtune=ultrasparc3)
 KBUILD_AFLAGS += -m64 -mcpu=ultrasparc -Wa,--undeclared-regs
 
-export USE_IMMEDIATE := $(CONFIG_IMMEDIATE)
+# gcc 3.x has problems with passing symbol+offset in
+# asm "i" constraint.
+export USE_IMMEDIATE := $(call cc-ifversion, -ge, 0400, $(CONFIG_IMMEDIATE))
 
 ifeq ($(CONFIG_MCOUNT),y)
   KBUILD_CFLAGS += -pg
-- 
1.5.5.1

