From 7f54094aa2c8752eaa5d30ff57cbee1f9bc16fa1 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Thu, 24 May 2012 18:21:58 -0700
Subject: [PATCH 248/248] lttng: Add lttng config and build infrastructure

Add lttng Kconfig and Makefile, and add into kernel build system.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 Makefile            |    2 +-
 init/Kconfig        |    2 +
 ltt/Kconfig         |  169 +++++++++++++++++++++++++++++++++++++++++++++++++++
 ltt/Makefile        |   52 ++++++----------
 ltt/probes/Makefile |   12 ++--
 5 files changed, 196 insertions(+), 41 deletions(-)
 create mode 100644 ltt/Kconfig

diff --git a/Makefile b/Makefile
index 1338ada..f4d759e 100644
--- a/Makefile
+++ b/Makefile
@@ -708,7 +708,7 @@ export mod_strip_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ ltt/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/init/Kconfig b/init/Kconfig
index e1f78e8..e0105f6 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1371,6 +1371,8 @@ config PROFILING
 	  Say Y here to enable the extended profiling support mechanisms used
 	  by profilers such as OProfile.
 
+source ltt/Kconfig
+
 #
 # Place an empty function call at each tracepoint site. Can be
 # dynamically changed for a probe function.
diff --git a/ltt/Kconfig b/ltt/Kconfig
new file mode 100644
index 0000000..86b4c37
--- /dev/null
+++ b/ltt/Kconfig
@@ -0,0 +1,169 @@
+menuconfig LTT
+	bool "Linux Trace Toolkit Next Generation (LTTng)"
+	depends on EXPERIMENTAL
+	select MARKERS
+	select TRACEPOINTS
+	default n
+	help
+	  It is possible for the kernel to log important events to a trace
+	  facility. Doing so enables the use of the generated traces in order
+	  to reconstruct the dynamic behavior of the kernel, and hence the
+	  whole system.
+
+	  The tracing process contains 4 parts :
+	      1) The logging of events by key parts of the kernel.
+	      2) The tracer that keeps the events in a data buffer (uses
+	         relay).
+	      3) A trace daemon that interacts with the tracer and is
+	         notified every time there is a certain quantity of data to
+	         read from the tracer.
+	      4) A trace event data decoder that reads the accumulated data
+	         and formats it in a human-readable format.
+
+	  If you say Y, the first component will be built into the kernel.
+
+	  For more information on kernel tracing, lttctl, lttd or lttv,
+	  please check the following address :
+	       http://ltt.polymtl.ca
+
+if LTT
+
+config LTT_FILTER
+	tristate
+
+config HAVE_LTT_DUMP_TABLES
+	def_bool n
+
+config LTT_TRACER
+	tristate "Linux Trace Toolkit Tracer"
+	default y
+	help
+	  If you enable this option, the Linux Trace Toolkit Tracer will be
+	  either built in the kernel or as module.
+
+	  Critical parts of the kernel will call upon the kernel tracing
+	  function. The data is then recorded by the tracer if a trace daemon
+	  is running in user-space and has issued a "start" command.
+
+	  For more information on kernel tracing, the trace daemon or the event
+	  decoder, please check the following address :
+	       http://lttng.org
+
+choice
+	prompt "LTTng Buffer Concurrency Management Algorithm"
+	depends on LTT_TRACER
+	default LTT_RELAY_LOCKLESS
+	help
+	  Choose between the fast lockless and the slower, spinlock/irq disable
+	  mechanism to manage tracing concurrency within a buffer.
+
+	config LTT_RELAY_LOCKLESS
+		bool "Linux Trace Toolkit High-speed Lockless Data Relay"
+	select DEBUG_FS
+	help
+	  Support using the fast lockless algorithm to log the data obtained
+	  through LTT.
+
+	  If you don't have special hardware, you almost certainly want
+	  to say Y here.
+endchoice
+
+config LTT_SERIALIZE
+	tristate "Linux Trace Toolkit Serializer"
+	depends on LTT_TRACER
+	depends on LTT_RELAY_LOCKLESS
+	default y
+	help
+	  Library for serializing information from format string and argument
+	  list to the trace buffers.
+
+config LTT_FAST_SERIALIZE
+	tristate "Linux Trace Toolkit Custom Serializer"
+	depends on LTT_TRACER
+	depends on LTT_RELAY_LOCKLESS
+	default y
+	help
+	  Library for serializing information from custom, efficient, tracepoint
+	  probes.
+
+config LTT_TRACEPROBES
+	tristate "Compile lttng tracing probes"
+	depends on LTT_FAST_SERIALIZE
+	depends on LTT_SERIALIZE
+	default m
+	select LTT_FILTER
+	help
+	  Compile lttng tracing probes, which connect to the tracepoints when
+	  loaded and format the information collected by the tracepoints with
+	  the Markers.
+
+config LTT_TRACE_CONTROL
+	tristate "Linux Trace Toolkit Trace Controller"
+	depends on LTT_TRACER
+	depends on LTT_SERIALIZE
+	default y
+	help
+	  If you enable this option, the debugfs-based Linux Trace Toolkit Trace
+	  Controller will be either built in the kernel or as module.
+
+config LTT_DEBUG_EVENT_SIZE
+	bool "Add event size field to LTT events for tracer debugging"
+	default n
+	help
+	  Tracer-internal option to help debugging event type encoding problems.
+
+config LTT_USERSPACE_EVENT
+	tristate "Support logging events from userspace"
+	depends on LTT_TRACER
+	depends on LTT_FAST_SERIALIZE
+	default m
+	help
+	  This option lets userspace write text events in
+	  /debugfs/ltt/write_event.
+
+config LTT_VMCORE
+	bool "Support trace extraction from crash dump"
+	default n 
+	help
+	  If you enable this option, the Linux Trace Toolkit Tracer will
+	  support extacting ltt log from vmcore, which can be generated with
+	  kdump or LKCD tools.
+
+	  Special crash extension should be used to extract ltt buffers.
+
+config LTT_STATEDUMP
+	tristate "Linux Trace Toolkit State Dump"
+	depends on LTT_TRACER
+	default m
+	help
+	  If you enable this option, the Linux Trace Toolkit State Dump will
+	  be either built in the kernel or as module.
+
+	  This module saves the state of the running kernel at trace start
+	  into the trace buffers along with the ongoing tracing information.
+
+config LTT_KPROBES
+	tristate "Linux Trace Toolkit Kprobes Support"
+	depends on LTT_TRACE_CONTROL
+	depends on LTT_FAST_SERIALIZE
+	depends on LTT_STATEDUMP
+	depends on KPROBES
+	default y
+	help
+	  Allows connecting the LTTng tracer on kprobes using simple debugfs
+	  file operations :
+	    ltt/kprobes/enable
+	    ltt/kprobes/disable
+	    ltt/kprobes/list
+
+config LTT_ASCII
+	bool "Linux Trace Toolkit Ascii Output" if LTT_TRACER = "y"
+	depends on LTT_TRACER
+        depends on LTT_RELAY_LOCKLESS
+	depends on LTT_SERIALIZE
+	default y 
+	help
+	  Output trace data in a text-formatted ascii file, presented in
+	  /mnt/debugfs/ltt/ascii/<trace name>.
+
+endif # LTT
diff --git a/ltt/Makefile b/ltt/Makefile
index 81d8128..0e17a1c 100644
--- a/ltt/Makefile
+++ b/ltt/Makefile
@@ -2,40 +2,24 @@
 # Makefile for the LTT objects.
 #
 
-ifneq ($(KERNELRELEASE),)
-ifneq ($(CONFIG_MARKERS),)
-
-obj-m += ltt-core.o
-obj-m += ltt-tracer.o
-obj-m += ltt-marker-control.o
-
-obj-m += ltt-relay.o
-ltt-relay-objs := ltt-relay-lockless.o ltt-relay-alloc.o ltt-relay-splice.o \
-		  ltt-relay-vfs.o ltt-event-header.o ltt-ascii.o \
-		  ltt-serialize.o ltt-type-serializer.o
-
-obj-m += ltt-statedump.o
-obj-m += ltt-trace-control.o
-obj-m += ltt-userspace-event.o
-obj-m += ltt-filter.o
-obj-m += ltt-kprobes.o
-obj-m += probes/
+obj-$(CONFIG_LTT)			+= ltt-core.o
+obj-$(CONFIG_LTT_TRACER)		+= ltt-tracer.o
+obj-$(CONFIG_LTT_TRACE_CONTROL)		+= ltt-marker-control.o
 
+ifdef CONFIG_LTT_RELAY_LOCKLESS
+RELAY_LOCKING := ltt-relay-lockless.o
 endif
 
-else
-	KERNELDIR ?= /lib/modules/$(shell uname -r)/build
-	PWD := $(shell pwd)
-	CFLAGS = $(EXTCFLAGS)
-
-default:
-	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules
-
-modules_install:
-	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules_install
-	/sbin/depmod -a
-
-clean:
-	$(MAKE) -C $(KERNELDIR) M=$(PWD) clean
-
-endif
+obj-$(CONFIG_LTT_TRACER)		+= ltt-relay.o
+ltt-relay-objs := $(RELAY_LOCKING) ltt-relay-alloc.o ltt-relay-splice.o \
+		  ltt-relay-vfs.o ltt-event-header.o
+
+obj-$(CONFIG_LTT_SERIALIZE)		+= ltt-serialize.o
+obj-$(CONFIG_LTT_STATEDUMP)		+= ltt-statedump.o
+obj-$(CONFIG_LTT_FAST_SERIALIZE)	+= ltt-type-serializer.o
+obj-$(CONFIG_LTT_TRACE_CONTROL)		+= ltt-trace-control.o
+obj-$(CONFIG_LTT_USERSPACE_EVENT)	+= ltt-userspace-event.o
+obj-$(CONFIG_LTT_FILTER)		+= ltt-filter.o
+obj-$(CONFIG_LTT_KPROBES)		+= ltt-kprobes.o
+obj-$(CONFIG_LTT_TRACEPROBES)		+= probes/
+obj-$(CONFIG_LTT_ASCII)			+= ltt-ascii.o
diff --git a/ltt/probes/Makefile b/ltt/probes/Makefile
index c6f762b..7960830 100644
--- a/ltt/probes/Makefile
+++ b/ltt/probes/Makefile
@@ -11,14 +11,14 @@ CFLAGS_REMOVE_trap-trace.o = -pg
 CFLAGS_REMOVE_pm-trace.o = -pg
 endif
 
-obj-m += kernel-trace.o mm-trace.o fs-trace.o ipc-trace.o \
+obj-$(CONFIG_LTT_TRACEPROBES) += kernel-trace.o mm-trace.o fs-trace.o ipc-trace.o \
 	 rcu-trace.o syscall-trace.o trap-trace.o pm-trace.o
 
 ifdef CONFIG_LOCKDEP
 ifdef CONFIG_FTRACE
 CFLAGS_REMOVE_lockdep-trace.o = -pg
 endif
-obj-m += lockdep-trace.o
+obj-$(CONFIG_LTT_TRACEPROBES) += lockdep-trace.o
 endif
 
 ifeq ($(CONFIG_NET),y)
@@ -26,14 +26,14 @@ ifdef CONFIG_FTRACE
 CFLAGS_REMOVE_net-trace.o = -pg
 CFLAGS_REMOVE_net-extended-trace.o = -pg
 endif
-obj-m += net-trace.o net-extended-trace.o
+obj-$(CONFIG_LTT_TRACEPROBES) += net-trace.o net-extended-trace.o
 endif
 
 ifdef CONFIG_JBD2
 ifdef CONFIG_FTRACE
 CFLAGS_REMOVE_jbd2-trace.o = -pg
 endif
-obj-m += jbd2-trace.o
+obj-$(CONFIG_LTT_TRACEPROBES) += jbd2-trace.o
 endif
 
 #ifdef CONFIG_EXT4_FS
@@ -47,13 +47,13 @@ ifdef CONFIG_BLOCK
 ifdef CONFIG_FTRACE
 CFLAGS_REMOVE_block-trace.o = -pg
 endif
-obj-m += block-trace.o
+obj-$(CONFIG_LTT_TRACEPROBES) += block-trace.o
 endif
 
 ifdef CONFIG_KVM
 ifdef CONFIG_FTRACE
 CFLAGS_REMOVE_kvm-trace.o = -pg
 endif
-obj-m += kvm-trace.o
+obj-$(CONFIG_LTT_TRACEPROBES) += kvm-trace.o
 endif
 
-- 
1.7.0.4

