From 7a5cbc6f5159f703dc52f1fabb2d783ce0c13119 Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Tue, 15 Jul 2008 14:56:28 -0400
Subject: [PATCH] LTTng instrumentation net tracepoint probes

Create a module which declares net tracepoint probes, using markers.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
CC: Alexander Viro <viro@zeniv.linux.org.uk>
CC: 'Peter Zijlstra' <peterz@infradead.org>
CC: "Frank Ch. Eigler" <fche@redhat.com>
CC: 'Ingo Molnar' <mingo@elte.hu>
CC: 'Hideo AOKI' <haoki@redhat.com>
CC: Takashi Nishiie <t-nishiie@np.css.fujitsu.com>
CC: 'Steven Rostedt' <rostedt@goodmis.org>
CC: Masami Hiramatsu <mhiramat@redhat.com>
---
 net/Makefile    |    3 +
 net/net-trace.c |  147 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 150 insertions(+), 0 deletions(-)
 create mode 100644 net/net-trace.c

diff --git a/net/Makefile b/net/Makefile
index b7a1364..38e2fc6 100644
--- a/net/Makefile
+++ b/net/Makefile
@@ -11,6 +11,9 @@ obj-$(CONFIG_NET)		:= socket.o core/
 
 tmp-$(CONFIG_COMPAT) 		:= compat.o
 obj-$(CONFIG_NET)		+= $(tmp-y)
+ifeq ($(CONFIG_NET),y)
+obj-$(CONFIG_TRACEPROBES)	+= net-trace.o
+endif
 
 # LLC has to be linked before the files in net/802/
 obj-$(CONFIG_LLC)		+= llc/
diff --git a/net/net-trace.c b/net/net-trace.c
new file mode 100644
index 0000000..e09648c
--- /dev/null
+++ b/net/net-trace.c
@@ -0,0 +1,147 @@
+/*
+ * net/net-trace.c
+ *
+ * Net tracepoint probes.
+ */
+
+#include <linux/module.h>
+#include "core/net-trace.h"
+#include "ipv4/ipv4-trace.h"
+#include "ipv6/ipv6-trace.h"
+#include "socket-trace.h"
+
+static void probe_net_dev_xmit(struct sk_buff *skb)
+{
+	trace_mark(net_dev_xmit, "skb %p protocol #2u%hu", skb, skb->protocol);
+}
+
+static void probe_net_dev_receive(struct sk_buff *skb)
+{
+	trace_mark(net_dev_receive, "skb %p protocol #2u%hu",
+		skb, skb->protocol);
+}
+
+static void probe_ipv4_addr_add(struct in_ifaddr *ifa)
+{
+	trace_mark(net_insert_ifa_ipv4, "label %s address #4u%u",
+		ifa->ifa_label, (unsigned int)ifa->ifa_address);
+}
+
+static void probe_ipv4_addr_del(struct in_ifaddr *ifa)
+{
+	trace_mark(net_del_ifa_ipv4, "label %s address #4u%u",
+		ifa->ifa_label, (unsigned int)ifa->ifa_address);
+}
+
+static void probe_ipv6_addr_add(struct inet6_ifaddr *ifa)
+{
+	__u8 *addr = ifa->addr.s6_addr;
+
+	trace_mark(net_insert_ifa_ipv6, "label %s "
+	"a15 #1x%c a14 #1x%c a13 #1x%c a12 #1x%c "
+	"a11 #1x%c a10 #1x%c a9 #1x%c a8 #1x%c "
+	"a7 #1x%c a6 #1x%c a5 #1x%c a4 #1x%c "
+	"a3 #1x%c a2 #1x%c a1 #1x%c a0 #1x%c",
+	ifa->idev->dev->name,
+	addr[15], addr[14], addr[13], addr[12],
+	addr[11], addr[10], addr[9], addr[8],
+	addr[7], addr[6], addr[5], addr[4],
+	addr[3], addr[2], addr[1], addr[0]);
+}
+
+static void probe_ipv6_addr_del(struct inet6_ifaddr *ifa)
+{
+	__u8 *addr = ifa->addr.s6_addr;
+
+	trace_mark(net_insert_ifa_ipv6, "label %s "
+	"a15 #1x%c a14 #1x%c a13 #1x%c a12 #1x%c "
+	"a11 #1x%c a10 #1x%c a9 #1x%c a8 #1x%c "
+	"a7 #1x%c a6 #1x%c a5 #1x%c a4 #1x%c "
+	"a3 #1x%c a2 #1x%c a1 #1x%c a0 #1x%c",
+	ifa->idev->dev->name,
+	addr[15], addr[14], addr[13], addr[12],
+	addr[11], addr[10], addr[9], addr[8],
+	addr[7], addr[6], addr[5], addr[4],
+	addr[3], addr[2], addr[1], addr[0]);
+}
+
+static void probe_socket_sendmsg(struct socket *sock, struct msghdr *msg,
+		size_t size, int ret)
+{
+	trace_mark(net_socket_sendmsg,
+		"sock %p family %d type %d protocol %d size %zu",
+		sock, sock->sk->sk_family, sock->sk->sk_type,
+		sock->sk->sk_protocol, size);
+}
+
+static void probe_socket_recvmsg(struct socket *sock, struct msghdr *msg,
+		size_t size, int flags, int ret)
+{
+	trace_mark(net_socket_recvmsg,
+		"sock %p family %d type %d protocol %d size %zu",
+		sock, sock->sk->sk_family, sock->sk->sk_type,
+		sock->sk->sk_protocol, size);
+}
+
+static void probe_socket_create(struct socket *sock, int fd)
+{
+	trace_mark(net_socket_create,
+		"sock %p family %d type %d protocol %d fd %d",
+		sock, sock->sk->sk_family, sock->sk->sk_type,
+		sock->sk->sk_protocol, fd);
+}
+
+static void probe_socket_call(int call, unsigned long a0)
+{
+	trace_mark(net_socket_call, "call %d a0 %lu", call, a0);
+}
+
+int __init net_trace_init(void)
+{
+	int ret;
+
+	ret = register_trace_net_dev_xmit(probe_net_dev_xmit);
+	WARN_ON(ret);
+	ret = register_trace_net_dev_receive(probe_net_dev_receive);
+	WARN_ON(ret);
+	ret = register_trace_ipv4_addr_add(probe_ipv4_addr_add);
+	WARN_ON(ret);
+	ret = register_trace_ipv4_addr_del(probe_ipv4_addr_del);
+	WARN_ON(ret);
+	ret = register_trace_ipv6_addr_add(probe_ipv6_addr_add);
+	WARN_ON(ret);
+	ret = register_trace_ipv6_addr_del(probe_ipv6_addr_del);
+	WARN_ON(ret);
+	ret = register_trace_socket_sendmsg(probe_socket_sendmsg);
+	WARN_ON(ret);
+	ret = register_trace_socket_recvmsg(probe_socket_recvmsg);
+	WARN_ON(ret);
+	ret = register_trace_socket_create(probe_socket_create);
+	WARN_ON(ret);
+	ret = register_trace_socket_call(probe_socket_call);
+	WARN_ON(ret);
+
+	return 0;
+}
+
+module_init(net_trace_init);
+
+void __exit net_trace_exit(void)
+{
+	unregister_trace_socket_call(probe_socket_call);
+	unregister_trace_socket_create(probe_socket_create);
+	unregister_trace_socket_recvmsg(probe_socket_recvmsg);
+	unregister_trace_socket_sendmsg(probe_socket_sendmsg);
+	unregister_trace_ipv6_addr_del(probe_ipv6_addr_del);
+	unregister_trace_ipv6_addr_add(probe_ipv6_addr_add);
+	unregister_trace_ipv4_addr_del(probe_ipv4_addr_del);
+	unregister_trace_ipv4_addr_add(probe_ipv4_addr_add);
+	unregister_trace_net_dev_receive(probe_net_dev_receive);
+	unregister_trace_net_dev_xmit(probe_net_dev_xmit);
+}
+
+module_exit(net_trace_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Mathieu Desnoyers");
+MODULE_DESCRIPTION("Net Tracepoint Probes");
-- 
1.5.5.1

