From 804b495a592a63a7e6d94285b18cda00c3fe607b Mon Sep 17 00:00:00 2001
From: Fei Wu <fei.wu@windriver.com>
Date: Wed, 21 Jan 2009 10:21:47 +0800
Subject: [PATCH] ARM dump LTTng syscall table

Provide a way for LTTng to look up the name of ARM syscall handlers
at runtime, so lttv can show the syscall names instead of ids.

Signed-off-by: Fei Wu <fei.wu@windriver.com>
---
 arch/arm/Kconfig              |    1 +
 arch/arm/include/asm/unistd.h |    2 ++
 arch/arm/kernel/traps.c       |   26 ++++++++++++++++++++++++++
 3 files changed, 29 insertions(+), 0 deletions(-)

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 0e9745d..483923d 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -13,6 +13,7 @@ config ARM
 	select SYS_SUPPORTS_APM_EMULATION
 	select HAVE_OPROFILE
 	select HAVE_ARCH_KGDB
+	select HAVE_LTT_DUMP_TABLES
 	select HAVE_KPROBES if (!XIP_KERNEL)
 	select HAVE_KRETPROBES if (HAVE_KPROBES)
 	select HAVE_FTRACE if (!XIP_KERNEL)
diff --git a/arch/arm/include/asm/unistd.h b/arch/arm/include/asm/unistd.h
index 0c3cf8b..219924f 100644
--- a/arch/arm/include/asm/unistd.h
+++ b/arch/arm/include/asm/unistd.h
@@ -388,6 +388,8 @@
 #define __NR_pipe2			(__NR_SYSCALL_BASE+359)
 #define __NR_inotify_init1		(__NR_SYSCALL_BASE+360)
 
+#define __NR_syscalls			361
+
 /*
  * The following SWIs are ARM private.
  */
diff --git a/arch/arm/kernel/traps.c b/arch/arm/kernel/traps.c
index 0e6fabc..f9569a0 100644
--- a/arch/arm/kernel/traps.c
+++ b/arch/arm/kernel/traps.c
@@ -748,3 +748,29 @@ void __init early_trap_init(void)
 	flush_icache_range(vectors, vectors + PAGE_SIZE);
 	modify_domain(DOMAIN_USER, DOMAIN_CLIENT);
 }
+
+
+void ltt_dump_sys_call_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+
+	extern unsigned long sys_call_table[];
+	for (i = 0; i < __NR_syscalls; i++) {
+		sprint_symbol(namebuf, sys_call_table[i]);
+		__trace_mark(0, statedump_sys_call_table, call_data,
+			"id %d address %p symbol %s",
+			i + __NR_SYSCALL_BASE, (void *)sys_call_table[i], namebuf);
+	}
+}
+EXPORT_SYMBOL_GPL(ltt_dump_sys_call_table);
+
+/*
+ * This function should be defined and exported if CONFIG_HAVE_LTT_DUMP_TABLES
+ * is enabled. It's not implemented because currently the userspace tools don't
+ * use this information.
+ */
+void ltt_dump_idt_table(void *call_data)
+{
+}
+EXPORT_SYMBOL_GPL(ltt_dump_idt_table);
-- 
1.6.0.3

