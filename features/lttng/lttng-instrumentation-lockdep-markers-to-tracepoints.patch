From 2e84928436cd7824059d1e91adf69f93202008c6 Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Tue, 15 Jul 2008 14:57:09 -0400
Subject: [PATCH] g lttng-instrumentation-lockdep-markers-to-tracepoints.patch

This is an automatic import of patch lttng-instrumentation-lockdep-markers-to-tracepoints.patch, no headers were
detected and a default message was constructed
---
 kernel/lockdep.c |   21 +++++++--------------
 1 files changed, 7 insertions(+), 14 deletions(-)

diff --git a/kernel/lockdep.c b/kernel/lockdep.c
index 2981578..dd08c0a 100644
--- a/kernel/lockdep.c
+++ b/kernel/lockdep.c
@@ -39,7 +39,7 @@
 #include <linux/irqflags.h>
 #include <linux/utsname.h>
 #include <linux/hash.h>
-#include <linux/marker.h>
+#include "lockdep-trace.h"
 
 #include <asm/sections.h>
 
@@ -2019,8 +2019,7 @@ void trace_hardirqs_on(void)
 	struct task_struct *curr = current;
 	unsigned long ip;
 
-	_trace_mark(locking_hardirqs_on, "ip #p%lu",
-		(unsigned long) __builtin_return_address(0));
+	_trace_kernel_hardirqs_on(__builtin_return_address(0));
 
 	if (unlikely(!debug_locks || current->lockdep_recursion))
 		return;
@@ -2069,8 +2068,7 @@ void trace_hardirqs_off(void)
 {
 	struct task_struct *curr = current;
 
-	_trace_mark(locking_hardirqs_off, "ip #p%lu",
-		(unsigned long) __builtin_return_address(0));
+	_trace_kernel_hardirqs_off(__builtin_return_address(0));
 
 	if (unlikely(!debug_locks || current->lockdep_recursion))
 		return;
@@ -2099,8 +2097,7 @@ void trace_softirqs_on(unsigned long ip)
 {
 	struct task_struct *curr = current;
 
-	_trace_mark(locking_softirqs_on, "ip #p%lu",
-		(unsigned long) __builtin_return_address(0));
+	_trace_kernel_softirqs_on(__builtin_return_address(0));
 
 	if (unlikely(!debug_locks))
 		return;
@@ -2136,8 +2133,7 @@ void trace_softirqs_off(unsigned long ip)
 {
 	struct task_struct *curr = current;
 
-	_trace_mark(locking_softirqs_off, "ip #p%lu",
-		(unsigned long) __builtin_return_address(0));
+	_trace_kernel_softirqs_off(__builtin_return_address(0));
 
 	if (unlikely(!debug_locks))
 		return;
@@ -2371,9 +2367,7 @@ static int __lock_acquire(struct lockdep_map *lock, unsigned int subclass,
 	int chain_head = 0;
 	u64 chain_key;
 
-	_trace_mark(locking_lock_acquire,
-		"ip #p%lu subclass %u lock %p trylock %d",
-		ip, subclass, lock, trylock);
+	_trace_kernel_lock_acquire(ip, subclass, lock, trylock);
 
 	if (!prove_locking)
 		check = 1;
@@ -2648,8 +2642,7 @@ __lock_release(struct lockdep_map *lock, int nested, unsigned long ip)
 {
 	struct task_struct *curr = current;
 
-	_trace_mark(locking_lock_release, "ip #p%lu lock %p nested %d",
-		ip, lock, nested);
+	_trace_kernel_lock_release(ip, lock, nested);
 
 	if (!check_unlock(curr, lock, ip))
 		return;
-- 
1.5.5.1

