From e797c78897bdbc02502750b47934debbb6488bbe Mon Sep 17 00:00:00 2001
From: Vu Tran <vu.tran@windriver.com>
Date: Wed, 5 Nov 2008 18:53:18 -0500
Subject: [PATCH] sparc64 lttng user space hooks

Add SPARC64 LTTng user space hooks.

Signed-off-by: Vu Tran <vu.tran@windriver.com>
Signed-off-by: Hong H. Pham <hong.pham@windriver.com>
---
 arch/sparc/include/asm/thread_info_64.h |    2 ++
 arch/sparc64/Kconfig                    |    1 +
 arch/sparc64/kernel/signal.c            |   14 ++++++++++++++
 include/linux/sched.h                   |   10 ++++++++++
 4 files changed, 27 insertions(+), 0 deletions(-)

diff --git a/arch/sparc/include/asm/thread_info_64.h b/arch/sparc/include/asm/thread_info_64.h
index 28522eb..ca9c5a4 100644
--- a/arch/sparc/include/asm/thread_info_64.h
+++ b/arch/sparc/include/asm/thread_info_64.h
@@ -224,16 +224,17 @@ register struct thread_info *current_thread_info_reg asm("g6");
 #define TIF_NEED_RESCHED	3	/* rescheduling necessary */
 #define TIF_PERFCTR		4	/* performance counters active */
 #define TIF_UNALIGNED		5	/* allowed to do unaligned accesses */
 /* flag bit 6 is available */
 #define TIF_32BIT		7	/* 32-bit binary */
 #define TIF_KERNEL_TRACE	8	/* kernel trace active */
 #define TIF_SECCOMP		9	/* secure computing */
 #define TIF_SYSCALL_AUDIT	10	/* syscall auditing active */
+#define TIF_MARKER_PENDING	11	/* marker update pending */
 /* flag bit 11 is available */
 /* NOTE: Thread flags >= 12 should be ones we have no interest
  *       in using in assembly, else we can't use the mask as
  *       an immediate value in instructions such as andcc.
  */
 #define TIF_ABI_PENDING		12
 #define TIF_MEMDIE		13
 #define TIF_POLLING_NRFLAG	14
@@ -243,16 +244,17 @@ register struct thread_info *current_thread_info_reg asm("g6");
 #define _TIF_SIGPENDING		(1<<TIF_SIGPENDING)
 #define _TIF_NEED_RESCHED	(1<<TIF_NEED_RESCHED)
 #define _TIF_PERFCTR		(1<<TIF_PERFCTR)
 #define _TIF_UNALIGNED		(1<<TIF_UNALIGNED)
 #define _TIF_32BIT		(1<<TIF_32BIT)
 #define _TIF_KERNEL_TRACE	(1<<TIF_KERNEL_TRACE)
 #define _TIF_SECCOMP		(1<<TIF_SECCOMP)
 #define _TIF_SYSCALL_AUDIT	(1<<TIF_SYSCALL_AUDIT)
+#define _TIF_MARKER_PENDING	(1 << TIF_MARKER_PENDING)
 #define _TIF_ABI_PENDING	(1<<TIF_ABI_PENDING)
 #define _TIF_POLLING_NRFLAG	(1<<TIF_POLLING_NRFLAG)
 
 #define _TIF_USER_WORK_MASK	((0xff << TI_FLAG_WSAVED_SHIFT) | \
 				 _TIF_DO_NOTIFY_RESUME_MASK | \
 				 _TIF_NEED_RESCHED | _TIF_PERFCTR)
 #define _TIF_DO_NOTIFY_RESUME_MASK	(_TIF_NOTIFY_RESUME | _TIF_SIGPENDING)
 
diff --git a/arch/sparc64/Kconfig b/arch/sparc64/Kconfig
index 1341ede..c73657c 100644
--- a/arch/sparc64/Kconfig
+++ b/arch/sparc64/Kconfig
@@ -11,16 +11,17 @@ config SPARC
 config SPARC64
 	bool
 	default y
 	select HAVE_DYNAMIC_FTRACE
 	select HAVE_FTRACE
 	select HAVE_IDE
 	select HAVE_GET_CYCLES
 	select HAVE_LMB
+	select HAVE_MARKERS_ABI
 	select HAVE_ARCH_KGDB
 	select USE_GENERIC_SMP_HELPERS if SMP
 	select HAVE_ARCH_TRACEHOOK
 	select HAVE_TRACE_CLOCK
 	select HAVE_IMMEDIATE
 
 config GENERIC_TIME
 	bool
diff --git a/arch/sparc64/kernel/signal.c b/arch/sparc64/kernel/signal.c
index ec82d76..56d9fd5 100644
--- a/arch/sparc64/kernel/signal.c
+++ b/arch/sparc64/kernel/signal.c
@@ -609,9 +609,23 @@ static void do_signal(struct pt_regs *regs, unsigned long orig_i0)
 void do_notify_resume(struct pt_regs *regs, unsigned long orig_i0, unsigned long thread_info_flags)
 {
 	if (thread_info_flags & _TIF_SIGPENDING)
 		do_signal(regs, orig_i0);
 	if (thread_info_flags & _TIF_NOTIFY_RESUME) {
 		clear_thread_flag(TIF_NOTIFY_RESUME);
 		tracehook_notify_resume(regs);
 	}
+#ifdef CONFIG_MARKERS_USERSPACE
+	/* Pending marker update ? */
+	if (thread_info_flags & _TIF_MARKER_PENDING) {
+		/*
+		 * marker_update_process can sleep because it writes to
+		 * userspace and because it takes a mutex. While locking could
+		 * be changed to a non-blocking scheme, it is good do do not
+		 * fail on userspace page faults.
+		 */
+		local_irq_enable();
+		marker_update_process();
+		local_irq_disable();
+	}
+#endif
 }
diff --git a/include/linux/sched.h b/include/linux/sched.h
index d467b68..6249847 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1312,16 +1312,26 @@ struct task_struct {
 	struct latency_record latency_record[LT_SAVECOUNT];
 #endif
 #ifdef CONFIG_INTERPEAK
 	unsigned short  vr;  /* Virtual router */
         void *proc;
         void (*proc_destruct)(void *proc);
 #endif
 
+#ifdef CONFIG_MARKERS_USERSPACE
+	/*
+	 * user_markers and user_markers_sequence updates are protected
+	 * by the per process user_markers_mutex nested in the markers_mutex.
+	 * Taking one of these mutexes is enough to insure coherent read.
+	 */
+	struct mutex user_markers_mutex;
+	struct hlist_head user_markers;
+	unsigned long user_markers_sequence;
+#endif
 };
 
 /*
  * Priority of a process goes from 0..MAX_PRIO-1, valid RT
  * priority is 0..MAX_RT_PRIO-1, and SCHED_NORMAL/SCHED_BATCH
  * tasks are in the range MAX_RT_PRIO..MAX_PRIO-1. Priority
  * values are inverted: lower p->prio value means higher priority.
  *
-- 
1.5.5.1

