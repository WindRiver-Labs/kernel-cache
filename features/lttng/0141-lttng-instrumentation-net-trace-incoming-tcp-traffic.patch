From 07a693760f6f1398772f4de5fbd8f69fb8cd79bd Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Wed, 18 May 2011 18:42:21 -0400
Subject: [PATCH 141/248] lttng-instrumentation-net-trace-incoming-tcp-traffic

LTTng instrumentation net: trace incoming TCP traffic

Add a tracepoint to determine if a received packet contains a TCP segment.

Signed-off-by: Benjamin Poirier <benjamin.poirier@polymtl.ca>
Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 include/trace/net.h |    3 +++
 net/ipv4/tcp_ipv4.c |    6 ++++++
 2 files changed, 9 insertions(+), 0 deletions(-)

diff --git a/include/trace/net.h b/include/trace/net.h
index c33b136..43b5779 100644
--- a/include/trace/net.h
+++ b/include/trace/net.h
@@ -10,6 +10,9 @@ DECLARE_TRACE(net_dev_xmit,
 DECLARE_TRACE(net_dev_receive,
 	TP_PROTO(struct sk_buff *skb),
 	TP_ARGS(skb));
+DECLARE_TRACE(net_tcpv4_rcv,
+	TP_PROTO(struct sk_buff *skb),
+	TP_ARGS(skb));
 
 /*
  * Note these first 2 traces are actually in __napi_schedule and net_rx_action
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index 0cb86ce..c1c937f 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -84,6 +84,9 @@
 
 #include <linux/crypto.h>
 #include <linux/scatterlist.h>
+#include <trace/net.h>
+
+DEFINE_TRACE(net_tcpv4_rcv);
 
 int sysctl_tcp_tw_reuse __read_mostly;
 int sysctl_tcp_low_latency __read_mostly;
@@ -1595,6 +1598,9 @@ static __sum16 tcp_v4_checksum_init(struct sk_buff *skb)
 int tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
 {
 	struct sock *rsk;
+
+	trace_net_tcpv4_rcv(skb);
+
 #ifdef CONFIG_TCP_MD5SIG
 	/*
 	 * We really want to reject the packet as early as possible
-- 
1.7.0.4

