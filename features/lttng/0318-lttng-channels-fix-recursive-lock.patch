From 5ce7be00873e6ff96d5de2e0daeacb123f0549c8 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:28:06 -0400
Subject: [PATCH 318/391] lttng-channels-fix-recursive-lock

lttng channels fix recursive lock

Do channel ID compaction outside of the outer channel mutex, because it itself
takes the channel mutex.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 include/linux/ltt-channels.h |    2 +-
 kernel/marker.c              |   24 +++++++++++++++---------
 ltt/ltt-channels.c           |   14 ++++++++++----
 3 files changed, 26 insertions(+), 14 deletions(-)

diff --git a/include/linux/ltt-channels.h b/include/linux/ltt-channels.h
index 4d5bd81..5cecd4f 100644
--- a/include/linux/ltt-channels.h
+++ b/include/linux/ltt-channels.h
@@ -41,7 +41,7 @@ struct ltt_channel_setting {
 };
 
 int ltt_channels_register(const char *name);
-int ltt_channels_unregister(const char *name);
+int ltt_channels_unregister(const char *name, int compacting);
 int ltt_channels_set_default(const char *name,
 			     unsigned int subbuf_size,
 			     unsigned int subbuf_cnt);
diff --git a/kernel/marker.c b/kernel/marker.c
index b304c0a..6643fc1 100644
--- a/kernel/marker.c
+++ b/kernel/marker.c
@@ -461,7 +461,8 @@ static struct marker_entry *add_marker(const char *channel, const char *name,
  * held. Parameter "registered" indicates if the channel registration has been
  * performed.
  */
-static int remove_marker(const char *channel, const char *name, int registered)
+static int remove_marker(const char *channel, const char *name, int registered,
+			 int compacting)
 {
 	struct hlist_head *head;
 	struct hlist_node *node;
@@ -491,7 +492,7 @@ static int remove_marker(const char *channel, const char *name, int registered)
 	hlist_del(&e->hlist);
 	hlist_del(&e->id_list);
 	if (registered) {
-		ret = ltt_channels_unregister(e->channel);
+		ret = ltt_channels_unregister(e->channel, compacting);
 		WARN_ON(ret);
 	}
 	if (e->format_allocated)
@@ -889,10 +890,10 @@ int marker_probe_register(const char *channel, const char *name,
 	goto end;
 
 error_unregister_channel:
-	ret_err = ltt_channels_unregister(channel);
+	ret_err = ltt_channels_unregister(channel, 1);
 	WARN_ON(ret_err);
 error_remove_marker:
-	ret_err = remove_marker(channel, name, 0);
+	ret_err = remove_marker(channel, name, 0, 0);
 	WARN_ON(ret_err);
 end:
 	mutex_unlock(&markers_mutex);
@@ -933,8 +934,10 @@ int marker_probe_unregister(const char *channel, const char *name,
 
 	mutex_lock(&markers_mutex);
 	entry = get_marker(channel, name);
-	if (!entry)
+	if (!entry) {
+		ret = 0;	/* concurrent compaction removed it. */
 		goto end;
+	}
 	if (entry->rcu_pending)
 		rcu_barrier_sched();
 	entry->oldptr = old;
@@ -942,7 +945,7 @@ int marker_probe_unregister(const char *channel, const char *name,
 	/* write rcu_pending before calling the RCU callback */
 	smp_wmb();
 	call_rcu_sched(&entry->rcu, free_old_closure);
-	remove_marker(channel, name, 1);	/* Ignore busy error message */
+	remove_marker(channel, name, 1, 0);	/* Ignore busy error message */
 	ret = 0;
 end:
 	mutex_unlock(&markers_mutex);
@@ -1019,8 +1022,10 @@ int marker_probe_unregister_private_data(marker_probe_func *probe,
 
 	mutex_lock(&markers_mutex);
 	entry = get_marker(channel, name);
-	if (!entry)
+	if (!entry) {
+		ret = 0;	/* concurrent compaction removed it. */
 		goto end;
+	}
 	if (entry->rcu_pending)
 		rcu_barrier_sched();
 	entry->oldptr = old;
@@ -1029,7 +1034,7 @@ int marker_probe_unregister_private_data(marker_probe_func *probe,
 	smp_wmb();
 	call_rcu_sched(&entry->rcu, free_old_closure);
 	/* Ignore busy error message */
-	remove_marker(channel, name, 1);
+	remove_marker(channel, name, 1, 0);
 end:
 	mutex_unlock(&markers_mutex);
 	kfree(channel);
@@ -1140,7 +1145,8 @@ void markers_compact_event_ids(void)
 		head = &marker_table[i];
 		hlist_for_each_entry_safe(entry, node, next, head, hlist) {
 			if (!entry->refcount) {
-				remove_marker(entry->channel, entry->name, 1);
+				remove_marker(entry->channel, entry->name,
+					      1, 1);
 				continue;
 			}
 			ret = ltt_channels_get_index_from_name(entry->channel);
diff --git a/ltt/ltt-channels.c b/ltt/ltt-channels.c
index e690cc0..94e5ec8 100644
--- a/ltt/ltt-channels.c
+++ b/ltt/ltt-channels.c
@@ -66,7 +66,6 @@ static void release_channel_setting(struct kref *kref)
 			iter->index = free_index++;
 			iter->free_event_id = 0;
 		}
-		markers_compact_event_ids();
 	}
 }
 
@@ -81,6 +80,8 @@ static void release_trace_channel(struct kref *kref)
 
 	list_for_each_entry_safe(iter, n, &ltt_channels, list)
 		release_channel_setting(&iter->kref);
+	if (atomic_read(&index_kref.refcount) == 0)
+		markers_compact_event_ids();
 }
 
 /*
@@ -134,23 +135,28 @@ EXPORT_SYMBOL_GPL(ltt_channels_register);
 /**
  * ltt_channels_unregister - Unregister a trace channel.
  * @name: channel name
+ * @compacting: performing compaction
  *
  * Must be called with markers mutex held.
  */
-int ltt_channels_unregister(const char *name)
+int ltt_channels_unregister(const char *name, int compacting)
 {
 	struct ltt_channel_setting *setting;
 	int ret = 0;
 
-	mutex_lock(&ltt_channel_mutex);
+	if (!compacting)
+		mutex_lock(&ltt_channel_mutex);
 	setting = lookup_channel(name);
 	if (!setting || atomic_read(&setting->kref.refcount) == 0) {
 		ret = -ENOENT;
 		goto end;
 	}
 	kref_put(&setting->kref, release_channel_setting);
+	if (!compacting && atomic_read(&index_kref.refcount) == 0)
+			markers_compact_event_ids();
 end:
-	mutex_unlock(&ltt_channel_mutex);
+	if (!compacting)
+		mutex_unlock(&ltt_channel_mutex);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(ltt_channels_unregister);
-- 
1.6.5.2

