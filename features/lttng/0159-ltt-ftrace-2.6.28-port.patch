From df57571ab9332c43ac877f6755d3fd93e6b25aaf Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:26:42 -0400
Subject: [PATCH 159/391] ltt-ftrace-2.6.28-port

LTT ftrace 2.6.28 port

Port LTTng function tracer support to 2.6.28. Add marker probe argument and
depend on CONFIG_FUNCTION_TRACER rather than CONFIG_FTRACE.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 ltt/Kconfig      |   10 +++++-----
 ltt/ltt-ftrace.c |   19 ++++++++++++-------
 2 files changed, 17 insertions(+), 12 deletions(-)

diff --git a/ltt/Kconfig b/ltt/Kconfig
index c0cc79f..f01f203 100644
--- a/ltt/Kconfig
+++ b/ltt/Kconfig
@@ -177,11 +177,11 @@ config LTT_STATEDUMP
 	  into the trace buffers along with the ongoing tracing information.
 
 config LTT_FTRACE
-	bool "Linux Trace Toolkit Ftrace Support"
-	depends on LTT_TRACER
-	depends on LTT_TRACE_CONTROL=y
-	depends on FTRACE
-	default y
+	bool "Linux Trace Toolkit Function Tracer Support"
+	depends on LTT_SERIALIZE
+	depends on LTT_MARKER_CONTROL
+	select FUNCTION_TRACER
+	default n
 	help
 	  Integration of function entry trace with LTTng. Connect the
 	  ftrace_cpu_start and ftrace_cpu_stop probes to markers to start/stop
diff --git a/ltt/ltt-ftrace.c b/ltt/ltt-ftrace.c
index c6288e9..6d1eaea 100644
--- a/ltt/ltt-ftrace.c
+++ b/ltt/ltt-ftrace.c
@@ -40,14 +40,15 @@ ltt_tracer_call(unsigned long ip, unsigned long parent_ip)
 	trace_mark(ftrace_entry, "ip 0x%lX parent_ip 0x%lX", ip, parent_ip);
 }
 
-static notrace void ltt_tap_marker(void *probe_data, void *call_data,
+static notrace void ltt_tap_marker(const struct marker *mdata,
+	void *probe_data, void *call_data,
 	const char *fmt, va_list *args)
 {
 	int cpu = raw_smp_processor_id();
 	if (likely(!per_cpu(tracing_cpu, cpu)
 			&& !atomic_read(&system_trace_refcount)))
 		return;
-	ltt_vtrace(probe_data, call_data, fmt, args);
+	ltt_vtrace(mdata, probe_data, call_data, fmt, args);
 }
 
 struct ltt_available_probe ltt_tap_marker_probe = {
@@ -61,7 +62,8 @@ static struct ftrace_ops trace_ops __read_mostly =
 	.func = ltt_tracer_call,
 };
 
-static notrace void ftrace_cpu_start(void *probe_data, void *call_data,
+static notrace void ftrace_cpu_start(const struct marker *mdata,
+	void *probe_data, void *call_data,
 	const char *fmt, va_list *args)
 {
 	int cpu = raw_smp_processor_id();
@@ -74,7 +76,8 @@ struct ltt_available_probe ftrace_cpu_start_probe = {
 	.probe_func = ftrace_cpu_start,
 };
 
-static notrace void ftrace_cpu_stop(void *probe_data, void *call_data,
+static notrace void ftrace_cpu_stop(const struct marker *mdata,
+	void *probe_data, void *call_data,
 	const char *fmt, va_list *args)
 {
 	int cpu = raw_smp_processor_id();
@@ -87,7 +90,8 @@ struct ltt_available_probe ftrace_cpu_stop_probe = {
 	.probe_func = ftrace_cpu_stop,
 };
 
-static notrace void ftrace_system_start(void *probe_data, void *call_data,
+static notrace void ftrace_system_start(const struct marker *mdata,
+	void *probe_data, void *call_data,
 	const char *fmt, va_list *args)
 {
 	int cpu = raw_smp_processor_id();
@@ -102,7 +106,8 @@ struct ltt_available_probe ftrace_system_start_probe = {
 	.probe_func = ftrace_system_start,
 };
 
-static notrace void ftrace_system_stop(void *probe_data, void *call_data,
+static notrace void ftrace_system_stop(const struct marker *mdata,
+	void *probe_data, void *call_data,
 	const char *fmt, va_list *args)
 {
 	int cpu = raw_smp_processor_id();
@@ -169,4 +174,4 @@ module_exit(ltt_ftrace_exit);
 
 MODULE_LICENSE("GPL and additional rights");
 MODULE_AUTHOR("Mathieu Desnoyers");
-MODULE_DESCRIPTION("Linux Trace Toolkit Ftrace");
+MODULE_DESCRIPTION("Linux Trace Toolkit Function Tracer Support");
-- 
1.6.5.2

