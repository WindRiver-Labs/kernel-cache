From 550a00dfe3086662366cce81ce87105c5735a922 Mon Sep 17 00:00:00 2001
From: Fei Wu <fei.wu@windriver.com>
Date: Wed, 21 Jan 2009 10:21:50 +0800
Subject: [PATCH] PowerPC dump LTTng syscall table

Provide a way for LTTng to look up the name of PowerPC syscall handlers
at runtime, so lttv can show the syscall names instead of ids.

Signed-off-by: Fei Wu <fei.wu@windriver.com>
---
 arch/powerpc/Kconfig        |    1 +
 arch/powerpc/kernel/traps.c |   46 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 47 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/Kconfig b/arch/powerpc/Kconfig
index 1c992ec..6c28dab 100644
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@ -126,6 +126,7 @@ config PPC
 	select HAVE_SYSCALL_WRAPPERS if PPC64
 	select HAVE_GET_CYCLES if PPC64
 	select HAVE_IMMEDIATE
+	select HAVE_LTT_DUMP_TABLES
 
 config EARLY_PRINTK
 	bool
diff --git a/arch/powerpc/kernel/traps.c b/arch/powerpc/kernel/traps.c
index 19c3514..74cc478 100644
--- a/arch/powerpc/kernel/traps.c
+++ b/arch/powerpc/kernel/traps.c
@@ -36,6 +36,7 @@
 #include <linux/kdebug.h>
 #include <linux/ltt-core.h>
 #include <trace/trap.h>
+#include <linux/kallsyms.h>
 
 #include <asm/pgtable.h>
 #include <asm/uaccess.h>
@@ -1307,3 +1308,48 @@ void kernel_bad_stack(struct pt_regs *regs)
 void __init trap_init(void)
 {
 }
+
+#ifdef CONFIG_PPC32
+extern unsigned long sys_call_table[];
+void ltt_dump_sys_call_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+
+	for (i = 0; i < NR_syscalls; i++) {
+		sprint_symbol(namebuf, sys_call_table[i]);
+		__trace_mark(0, statedump_sys_call_table, call_data,
+			"id %d address %p symbol %s",
+			i, (void *)sys_call_table[i], namebuf);
+	}
+}
+#else
+extern unsigned long *sys_call_table;
+void ltt_dump_sys_call_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+
+	for (i = 0; i < NR_syscalls; i++) {
+		sprint_symbol(namebuf, sys_call_table[2 * i]);
+		__trace_mark(0, statedump_sys_call_table, call_data,
+			"id %d address %p symbol %s",
+			i, (void *)sys_call_table[2 * i], namebuf);
+		sprint_symbol(namebuf, sys_call_table[2 * i + 1]);
+		__trace_mark(0, statedump_sys_call_table, call_data,
+			"id %d address %p symbol %s",
+			i, (void *)sys_call_table[2 * i + 1], namebuf);
+	}
+}
+#endif
+EXPORT_SYMBOL_GPL(ltt_dump_sys_call_table);
+
+/*
+ * This function should be defined and exported if CONFIG_HAVE_LTT_DUMP_TABLES
+ * is enabled. It's not implemented because currently the userspace tools don't
+ * use this information.
+ */
+void ltt_dump_idt_table(void *call_data)
+{
+}
+EXPORT_SYMBOL_GPL(ltt_dump_idt_table);
-- 
1.6.0.3

