From 6f552b31a5fa74dfeca862cf597e473c1089a6fe Mon Sep 17 00:00:00 2001
From: yzhu1 <yanjun.zhu@windriver.com>
Date: Fri, 7 Sep 2012 09:56:50 +0800
Subject: [PATCH] PowerPC dump LTTng syscall table

Provide a way for LTTng to look up the name of PowerPC syscall handlers
at runtime, so lttv can show the syscall names instead of ids.

Signed-off-by:Yanjun.zhu <Yanjun.zhu@windriver.com>
---
 arch/powerpc/Kconfig        |    1 +
 arch/powerpc/kernel/traps.c |   45 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 46 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/Kconfig b/arch/powerpc/Kconfig
index 8308496..bd8d4e4 100644
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@ -150,6 +150,7 @@ config PPC
 	select HAVE_PERF_EVENTS
 	select HAVE_GET_CYCLES if PPC64
 	select HAVE_IMMEDIATE
+	select HAVE_LTT_DUMP_TABLES
 
 config EARLY_PRINTK
 	bool
diff --git a/arch/powerpc/kernel/traps.c b/arch/powerpc/kernel/traps.c
index 277add0..5df42c2 100644
--- a/arch/powerpc/kernel/traps.c
+++ b/arch/powerpc/kernel/traps.c
@@ -36,6 +36,7 @@
 #include <linux/debugfs.h>
 #include <linux/ltt-core.h>
 #include <trace/trap.h>
+#include <linux/kallsyms.h>
 #include <linux/uaccess.h>
 
 #include <asm/emulated_ops.h>
@@ -1496,6 +1497,50 @@ void __init trap_init(void)
 {
 }
 
+#ifdef CONFIG_PPC32
+extern unsigned long sys_call_table[];
+void ltt_dump_sys_call_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+
+	for (i = 0; i < NR_syscalls; i++) {
+		sprint_symbol(namebuf, sys_call_table[i]);
+		__trace_mark(0, syscall_state, sys_call_table, call_data,
+			"id %d address %p symbol %s",
+			i, (void *)sys_call_table[i], namebuf);
+	}
+}
+#else
+extern unsigned long *sys_call_table;
+void ltt_dump_sys_call_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+
+	for (i = 0; i < NR_syscalls; i++) {
+		sprint_symbol(namebuf, sys_call_table[2 * i]);
+		__trace_mark(0, syscall_state, sys_call_table, call_data,
+			"id %d address %p symbol %s",
+			i, (void *)sys_call_table[2 * i], namebuf);
+		sprint_symbol(namebuf, sys_call_table[2 * i + 1]);
+		__trace_mark(0, syscall_state, sys_call_table, call_data,
+			"id %d address %p symbol %s",
+			i, (void *)sys_call_table[2 * i + 1], namebuf);
+	}
+}
+#endif
+EXPORT_SYMBOL_GPL(ltt_dump_sys_call_table);
+
+/*
+ * This function should be defined and exported if CONFIG_HAVE_LTT_DUMP_TABLES
+ * is enabled. It's not implemented because currently the userspace tools don't
+ * use this information.
+ */
+void ltt_dump_idt_table(void *call_data)
+{
+}
+EXPORT_SYMBOL_GPL(ltt_dump_idt_table);
 
 #ifdef CONFIG_PPC_EMULATED_STATS
 
-- 
1.7.0

