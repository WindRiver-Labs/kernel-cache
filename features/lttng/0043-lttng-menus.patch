From 66bc14ae897d3c801818a22b65288e2829193c78 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date: Thu, 2 Oct 2008 01:43:40 -0400
Subject: [PATCH] lttng-menus

LTTng menus

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 ltt/Kconfig  |  131 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ltt/Makefile |   11 +++++
 2 files changed, 142 insertions(+), 0 deletions(-)

diff --git a/ltt/Kconfig b/ltt/Kconfig
index 659fc84..c8e9e72 100644
--- a/ltt/Kconfig
+++ b/ltt/Kconfig
@@ -17,4 +17,135 @@ config HAVE_LTT_SYNTHETIC_TSC
 	default y if (!HAVE_LTT_CLOCK)
 	default n if HAVE_LTT_CLOCK
 
+config LTT
+	bool "Linux Trace Toolkit Instrumentation Support"
+	depends on EXPERIMENTAL
+	depends on TRACEPOINTS
+	depends on MARKERS
+	depends on LTT_TIMESTAMP
+	default y
+	help
+	  It is possible for the kernel to log important events to a trace
+	  facility. Doing so enables the use of the generated traces in order
+	  to reconstruct the dynamic behavior of the kernel, and hence the
+	  whole system.
+
+	  The tracing process contains 4 parts :
+	      1) The logging of events by key parts of the kernel.
+	      2) The tracer that keeps the events in a data buffer (uses
+	         relay).
+	      3) A trace daemon that interacts with the tracer and is
+	         notified every time there is a certain quantity of data to
+	         read from the tracer.
+	      4) A trace event data decoder that reads the accumulated data
+	         and formats it in a human-readable format.
+
+	  If you say Y, the first component will be built into the kernel.
+
+	  For more information on kernel tracing, lttctl, lttd or lttv,
+	  please check the following address :
+	       http://ltt.polymtl.ca
+
+config LTT_RELAY
+	tristate "Linux Trace Toolkit Relay+DebugFS Support"
+	select DEBUG_FS
+	depends on LTT_TRACER
+	default y
+	help
+	  Support using relay and debugfs to log the data obtained through LTT.
+
+	  If you don't have special hardware, you almost certainly want
+	  to say Y here.
+
+config LTT_RELAY_CHECK_RANDOM_ACCESS
+	bool "Debug check for random access in ltt relay buffers"
+	depends on LTT_RELAY
+	default n
+	help
+	  Add checks for random access to LTTng relay buffers. Given those
+	  buffers are a linked list, such access are rather slow. Rare accesses
+	  are OK; they can be caused by large writes (more than a page large) or
+	  by reentrancy (e.g. interrupt nesting over the tracing code).
+
+config LTT_SERIALIZE
+	tristate "Linux Trace Toolkit Serializer"
+	default y
+	depends on LTT
+	help
+	  Library for serializing information from format string and argument
+	  list to the trace buffers.
+
+config LTT_MARKER_CONTROL
+	tristate "Linux Trace Toolkit Marker Control"
+	depends on LTT_SERIALIZE
+	default y
+	help
+	  Interface (/proc/ltt) to enable markers.
+
+config LTT_TRACER
+	tristate "Linux Trace Toolkit Tracer"
+	depends on LTT
+	depends on LTT_MARKER_CONTROL
+	default y
+	help
+	  If you enable this option, the Linux Trace Toolkit Tracer will be
+	  either built in the kernel or as module.
+
+	  Critical parts of the kernel will call upon the kernel tracing
+	  function. The data is then recorded by the tracer if a trace daemon
+	  is running in user-space and has issued a "start" command.
+
+	  For more information on kernel tracing, the trace daemon or the event
+	  decoder, please check the following address :
+	       http://www.opersys.com/ltt
+	  See also the experimental page of the project :
+	       http://ltt.polymtl.ca
+
+config LTT_ALIGNMENT
+	bool "Align Linux Trace Toolkit Traces"
+	depends on LTT
+	default y
+	help
+	  This option enables dynamic alignment of data in buffers. The
+	  alignment is made on the smallest size between architecture size
+	  and the size of the value to be written.
+
+	  Dynamically calculating the offset of the data has a performance cost,
+	  but it is more efficient on some architectures (especially 64 bits) to
+	  align data than to write it unaligned.
+
+config LTT_VMCORE
+	bool "Support trace extraction from crash dump"
+	depends on LTT
+	default y
+	help
+	  If you enable this option, the Linux Trace Toolkit Tracer will
+	  support extacting ltt log from vmcore, which can be generated with
+	  kdump or LKCD tools.
+
+	  Special crash extension should be used to extract ltt buffers.
+
+config LTT_HEARTBEAT
+	bool "Write heartbeat event to shrink traces (EXPERIMENTAL)"
+	depends on EXPERIMENTAL
+	depends on LTT
+	default n
+	help
+	  The Linux Trace Toolkit Heartbeat Timer fires at an interval small
+	  enough to guarantee that the 32 bits truncated TSC won't overflow
+	  between two timer executions. An event is written in the active
+	  traces each time the timer is executed.
+
+	  Note : it is currently broken with CPU hotplug and does not support
+	  trace stop / restart correctly.
+
+config LTT_NETLINK_CONTROL
+	tristate "Linux Trace Toolkit Netlink Controller"
+	depends on LTT_TRACER
+	depends on NET
+	default m
+	help
+	  If you enable this option, the Linux Trace Toolkit Netlink Controller
+	  will be either built in the kernel or as module.
+
 endmenu
diff --git a/ltt/Makefile b/ltt/Makefile
index 908218c..bfe2d09 100644
--- a/ltt/Makefile
+++ b/ltt/Makefile
@@ -1,2 +1,13 @@
+#
+# Makefile for the LTT objects.
+#
 obj-$(CONFIG_HAVE_LTT_SYNTHETIC_TSC)	+= ltt-timestamp.o
+obj-$(CONFIG_LTT)			+= ltt-core.o
+obj-$(CONFIG_LTT_HEARTBEAT)		+= ltt-heartbeat.o
+obj-$(CONFIG_LTT_TRACER)		+= ltt-tracer.o
+obj-$(CONFIG_LTT_RELAY)			+= ltt-relay.o ltt-relay-alloc.o
+obj-$(CONFIG_LTT_NETLINK_CONTROL)	+= ltt-control.o
+obj-$(CONFIG_LTT_SERIALIZE)		+= ltt-serialize.o
+obj-$(CONFIG_LTT_STATEDUMP)		+= ltt-statedump.o
 obj-$(CONFIG_HAVE_LTT_UNSTABLE_TSC)	+= ltt-test-tsc.o
+obj-$(CONFIG_LTT_MARKER_CONTROL)	+= ltt-marker-control.o
-- 
1.5.5.1

