From 7bb88981eebb086880ab6b8de5692cabfc768d53 Mon Sep 17 00:00:00 2001
From: Lans Zhang <jia.zhang@windriver.com>
Date: Tue, 24 Jul 2012 09:56:30 +0800
Subject: [PATCH] lttng: fix clock_gettime() obtaining the CPU-time of the
 process.

clock_getcpuclockid() allows to obtain ID of a process CPU-time clock,
and then we can call clock_gettime() with the clockid_t returned by
clock_getcpuclockid() to obtain the CPU-time of a process. The
clockid_t returned is not a constant like CLOCK_*. We can see it
via strace:

clock_getres(0xfffffff2 /* CLOCK_??? */, NULL) = 0
clock_gettime(0xfffffff2 /* CLOCK_??? */, {1, 231067818}) = 0

So the check with clockid_t for a process should be passed through
instead. Otherwise, clock_gettime() with a ID of a process CPU-time
clock will don't work any more. A testcase below can capture such
this kind of issue:

int main(int argc, char *argv[])
{
	clockid_t clockid;
	struct timespec ts = {.tv_sec = 1, .tv_nsec = 1};

	if (argc != 2) {
		fprintf(stderr, "%s <process-ID>\n", argv[0]);
		exit(EXIT_FAILURE);
	}

	if (clock_getcpuclockid(atoi(argv[1]), &clockid) != 0) {
		perror("clock_getcpuclockid");
		exit(EXIT_FAILURE);
	}

	if (clock_gettime(clockid, &ts) == -1) {
		perror("clock_gettime");
		exit(EXIT_FAILURE);
	}

	printf("CPU-time clock for PID %s is %ld.%09ld seconds\n",
		argv[1], (long)ts.tv_sec, (long)ts.tv_nsec);
	exit(EXIT_SUCCESS);
}

If both ts.tv_sec and ts.tv_nsec return 1, the issue is addressed.

Signed-off-by: Lans Zhang <jia.zhang@windriver.com>
---
 arch/x86/vdso/vclock_gettime.c |    2 --
 1 file changed, 2 deletions(-)

diff --git a/arch/x86/vdso/vclock_gettime.c b/arch/x86/vdso/vclock_gettime.c
index 268df2e..507326f 100644
--- a/arch/x86/vdso/vclock_gettime.c
+++ b/arch/x86/vdso/vclock_gettime.c
@@ -213,8 +213,6 @@ notrace int __vdso_clock_gettime(clockid_t clock, struct timespec *ts)
 		return do_trace_clock(ts);
 	case CLOCK_TRACE_FREQ:
 		return do_trace_clock_freq(ts);
-	default:
-		return -EINVAL;
 	}
 
 	if (ret == VCLOCK_NONE)
-- 
1.7.9.7

