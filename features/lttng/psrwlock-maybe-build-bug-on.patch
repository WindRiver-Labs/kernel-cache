From 41df3e982cf243d94c39b99a659e47debfd5b6e8 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:28:13 -0400
Subject: [PATCH 334/391] psrwlock-maybe-build-bug-on

psrwlock maybe build bug on

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 include/linux/psrwlock-api.h       |   18 +++++++++---------
 include/linux/psrwlock-debug-api.h |   18 +++++++++---------
 include/linux/psrwlock-types.h     |    2 +-
 3 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/include/linux/psrwlock-api.h b/include/linux/psrwlock-api.h
index 890993b..082285f 100644
--- a/include/linux/psrwlock-api.h
+++ b/include/linux/psrwlock-api.h
@@ -36,7 +36,7 @@ static inline void psread_lock_irq(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_IRQ));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_IRQ));
 	uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
 	if (likely(!uc))
 		return;
@@ -48,7 +48,7 @@ static inline int psread_trylock_irq(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_IRQ));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_IRQ));
 	uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
 	if (likely(!uc))
 		return 1;
@@ -64,7 +64,7 @@ static inline void psread_lock_bh(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_BH));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_BH));
 	uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
 	if (likely(!uc))
 		return;
@@ -76,7 +76,7 @@ static inline int psread_trylock_bh(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_BH));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_BH));
 	uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
 	if (likely(!uc))
 		return 1;
@@ -93,7 +93,7 @@ static inline void psread_lock_inatomic(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_NPTHREAD));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_NPTHREAD));
 	uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
 	if (likely(!uc))
 		return;
@@ -105,7 +105,7 @@ static inline int psread_trylock_inatomic(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_NPTHREAD));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_NPTHREAD));
 	uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
 	if (likely(!uc))
 		return 1;
@@ -122,7 +122,7 @@ static inline void psread_lock(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
 	uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
 	if (likely(!uc))
 		return;
@@ -134,7 +134,7 @@ static inline int psread_lock_interruptible(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
 	uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
 	if (likely(!uc))
 		return 0;
@@ -146,7 +146,7 @@ static inline int psread_trylock(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
 	uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
 	if (likely(!uc))
 		return 1;
diff --git a/include/linux/psrwlock-debug-api.h b/include/linux/psrwlock-debug-api.h
index 93e1e82..dd85372 100644
--- a/include/linux/psrwlock-debug-api.h
+++ b/include/linux/psrwlock-debug-api.h
@@ -29,7 +29,7 @@ static inline void psread_lock_irq(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_IRQ));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_IRQ));
 	uc = atomic_read(&rwlock->uc);
 	psread_lock_slow_irq(uc, rwlock);
 }
@@ -39,7 +39,7 @@ static inline int psread_trylock_irq(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_IRQ));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_IRQ));
 	uc = atomic_read(&rwlock->uc);
 	return psread_trylock_slow_irq(uc, rwlock);
 }
@@ -53,7 +53,7 @@ static inline void psread_lock_bh(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_BH));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_BH));
 	uc = atomic_read(&rwlock->uc);
 	psread_lock_slow_bh(uc, rwlock);
 }
@@ -63,7 +63,7 @@ static inline int psread_trylock_bh(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_BH));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_BH));
 	uc = atomic_read(&rwlock->uc);
 	return psread_trylock_slow_bh(uc, rwlock);
 }
@@ -78,7 +78,7 @@ static inline void psread_lock_inatomic(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_NPTHREAD));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_NPTHREAD));
 	uc = atomic_read(&rwlock->uc);
 	psread_lock_slow_inatomic(uc, rwlock);
 }
@@ -88,7 +88,7 @@ static inline int psread_trylock_inatomic(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_NPTHREAD));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_NPTHREAD));
 	uc = atomic_read(&rwlock->uc);
 	return psread_trylock_slow_inatomic(uc, rwlock);
 }
@@ -103,7 +103,7 @@ static inline void psread_lock(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
 	uc = atomic_read(&rwlock->uc);
 	psread_lock_slow(uc, rwlock);
 }
@@ -113,7 +113,7 @@ static inline int psread_lock_interruptible(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
 	uc = atomic_read(&rwlock->uc);
 	return psread_lock_interruptible_slow(uc, rwlock);
 }
@@ -123,7 +123,7 @@ static inline int psread_trylock(psrwlock_t *rwlock,
 {
 	unsigned int uc;
 
-	BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
+	MAYBE_BUILD_BUG_ON(!(rctx & PSR_PTHREAD));
 	uc = atomic_read(&rwlock->uc);
 	return psread_trylock_slow(uc, rwlock);
 }
diff --git a/include/linux/psrwlock-types.h b/include/linux/psrwlock-types.h
index 5606857..b61d3c7 100644
--- a/include/linux/psrwlock-types.h
+++ b/include/linux/psrwlock-types.h
@@ -132,7 +132,7 @@ do {									\
 #define CHECK_PSRWLOCK_MAP(x, wctx, rctx)				\
 	static inline void __psrwlock_bad_context_map_##x(void)		\
 	{								\
-		BUILD_BUG_ON((~(~0UL << (wctx))) & (rctx));		\
+		MAYBE_BUILD_BUG_ON((~(~0UL << (wctx))) & (rctx));	\
 	}
 
 extern void __psrwlock_init(struct psrwlock *lock, const char *name,
-- 
1.6.5.2

