From 35beea515c602ba40cefb7a2c29ea7bc3c4e08a2 Mon Sep 17 00:00:00 2001
From: Vu Tran <vu.tran@windriver.com>
Date: Wed, 7 Jan 2009 11:23:24 -0500
Subject: [PATCH] sparc64 dump lttng syscall table

Provide a way for LTTng to look up the name of SPARC64 syscall handlers
at runtime.

Signed-off-by: Vu Tran <vu.tran@windriver.com>
Signed-off-by: Hong H. Pham <hong.pham@windriver.com>
---
 arch/sparc64/Kconfig         |    1 +
 arch/sparc64/kernel/traps.c  |   61 ++++++++++++++++++++++++++++++++++++++++++
 arch/sparc64/kernel/ttable.S |    3 ++
 3 files changed, 65 insertions(+), 0 deletions(-)

diff --git a/arch/sparc64/Kconfig b/arch/sparc64/Kconfig
index ddff05b..beae7fe 100644
--- a/arch/sparc64/Kconfig
+++ b/arch/sparc64/Kconfig
@@ -16,6 +16,7 @@ config SPARC64
 	select HAVE_IDE
 	select HAVE_GET_CYCLES
 	select HAVE_LMB
+	select HAVE_LTT_DUMP_TABLES
 	select HAVE_MARKERS_ABI
 	select HAVE_ARCH_KGDB
 	select USE_GENERIC_SMP_HELPERS if SMP
diff --git a/arch/sparc64/kernel/traps.c b/arch/sparc64/kernel/traps.c
index b21a3b5..04f97d4 100644
--- a/arch/sparc64/kernel/traps.c
+++ b/arch/sparc64/kernel/traps.c
@@ -39,6 +39,7 @@
 #include <asm/timer.h>
 #include <asm/head.h>
 #include <asm/prom.h>
+#include <linux/kallsyms.h>
 
 #include "entry.h"
 #include "kstack.h"
@@ -2573,3 +2574,63 @@ void __init trap_init(void)
 	atomic_inc(&init_mm.mm_count);
 	current->active_mm = &init_mm;
 }
+
+/*
+ * Dump all syscall symbols to lttng core. The sys_call_table is
+ * defined in systbls.S.
+ */
+extern int sys_call_table[NR_SYSCALLS];
+
+void ltt_dump_sys_call_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+	unsigned long syscall_addr;
+
+	for (i = 0; i < NR_SYSCALLS; i++) {
+		syscall_addr = (unsigned long)sys_call_table[i];
+		sprint_symbol(namebuf, syscall_addr);
+       	__trace_mark(0, statedump_sys_call_table, call_data,
+					"id %d address %p symbol %s",
+					i, (void *)syscall_addr, namebuf);
+	}
+}
+EXPORT_SYMBOL_GPL(ltt_dump_sys_call_table);
+
+/*
+ * Dump to lttng core all trap handler symbols which are defined in
+ * ttable.S. The sparc64_ttable_tl0 or sparc64_ttable_tl1 table have
+ * max of 512 entry. Each entry contains the first 32 bytes instructions
+ * of the handler.
+ */
+extern unsigned long sparc64_ttable_tl0;
+extern unsigned long sparc64_ttable_tl1;
+extern unsigned long tl0_end;
+extern unsigned long tl1_end;
+
+void ltt_dump_idt_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+	unsigned long traphandler_addr;
+
+	traphandler_addr = (unsigned long)&sparc64_ttable_tl0;
+	for (i = 0; (i < 512) && (traphandler_addr < (unsigned long)&tl0_end); i++) {
+		sprint_symbol(namebuf, traphandler_addr);
+		__trace_mark(0, statedump_idt_table, call_data,
+					"tt %d address %p symbol %s",
+					i, (void *)traphandler_addr, namebuf);
+		traphandler_addr = traphandler_addr + 32;
+	}
+
+	traphandler_addr = (unsigned long)&sparc64_ttable_tl1;
+	for (i = 512; (i < 1024) && (traphandler_addr < (unsigned long)&tl1_end); i++) {
+		sprint_symbol(namebuf, traphandler_addr);
+		__trace_mark(0, statedump_idt_table, call_data,
+					"tt %d address %p symbol %s",
+					i, (void *)traphandler_addr, namebuf);
+		 traphandler_addr = traphandler_addr + 32;
+	}
+}
+EXPORT_SYMBOL_GPL(ltt_dump_idt_table);
+
diff --git a/arch/sparc64/kernel/ttable.S b/arch/sparc64/kernel/ttable.S
index 1ade3d6..fa9a206 100644
--- a/arch/sparc64/kernel/ttable.S
+++ b/arch/sparc64/kernel/ttable.S
@@ -11,6 +11,7 @@
 	.globl	tl0_cee, tl1_cee
 	.globl	tl0_iae, tl1_iae
 	.globl	tl0_dae, tl1_dae
+	.globl	tl0_end, tl1_end
 
 sparc64_ttable_tl0:
 tl0_resv000:	BOOT_KERNEL BTRAP(0x1) BTRAP(0x2) BTRAP(0x3)
@@ -171,6 +172,7 @@ tl0_resv1c0:	BTRAPS(0x1c0) BTRAPS(0x1c8)
 tl0_resv1d0:	BTRAPS(0x1d0) BTRAPS(0x1d8)
 tl0_resv1e0:	BTRAPS(0x1e0) BTRAPS(0x1e8)
 tl0_resv1f0:	BTRAPS(0x1f0) BTRAPS(0x1f8)
+tl0_end:
 
 sparc64_ttable_tl1:
 tl1_resv000:	BOOT_KERNEL    BTRAPTL1(0x1) BTRAPTL1(0x2) BTRAPTL1(0x3)
@@ -264,3 +266,4 @@ tl1_f4o:	FILL_4_OTHER
 tl1_f5o:	FILL_5_OTHER
 tl1_f6o:	FILL_6_OTHER
 tl1_f7o:	FILL_7_OTHER
+tl1_end:
-- 
1.6.0.3

