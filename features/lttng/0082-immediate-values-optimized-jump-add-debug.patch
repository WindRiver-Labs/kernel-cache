From 911efae38e07cad1c17442c49a3ca21c69386d3a Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date: Thu, 2 Oct 2008 14:36:19 -0400
Subject: [PATCH] immediate-values-optimized-jump-add-debug

Immedate Values Optimized Jump Add Debug

Add some debugging to optimized values jump optimization.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 arch/x86/kernel/immediate.c |   31 ++++++++++++++++++++++++++-----
 1 files changed, 26 insertions(+), 5 deletions(-)

diff --git a/arch/x86/kernel/immediate.c b/arch/x86/kernel/immediate.c
index 44dc825..d1708f3 100644
--- a/arch/x86/kernel/immediate.c
+++ b/arch/x86/kernel/immediate.c
@@ -84,12 +84,12 @@
 #define BREAKPOINT_INS_LEN	1
 #define NR_NOPS			10
 
-/*#define DEBUG_IMMEDIATE 1*/
+/* #define DEBUG_IMMEDIATE 1 */
 
 #ifdef DEBUG_IMMEDIATE
 #define printk_dbg printk
 #else
-#define printk_dbg(fmt , a...)
+#define printk_dbg(fmt, a...)
 #endif
 
 static unsigned long target_after_int3;	/* EIP of the target after the int3 */
@@ -309,6 +309,24 @@ static inline int detect_mov_test_je(uint8_t *addr, uint8_t **opcode,
 
 static int static_early;
 
+#ifdef DEBUG_IMMEDIATE
+static inline void print_dbg_bytes(const char *msg,
+		uint8_t *addr, int size)
+{
+	int i;
+
+	printk_dbg(KERN_DEBUG "%s (%d) : ", msg, size);
+	for (i = 0; i < size; i++)
+		printk_dbg("%02x ", (addr)[i]);
+	printk_dbg("\n");
+
+}
+#else
+static inline void print_dbg_bytes(const char *msg, uint8_t *addr, int size)
+{
+}
+#endif
+
 /*
  * Marked noinline because we prefer to have only one _imv_bypass. Not that it
  * is required, but there is no need to edit two bypasses.
@@ -321,8 +339,8 @@ static noinline int replace_instruction_safe(uint8_t *addr, uint8_t *newcode,
 	int len;
 	int ret;
 
-	/* bypass is 10 bytes long for x86_64 long */
-	WARN_ON(size > 10);
+	/* bypass is NR_NOPS bytes long for x86_64 long */
+	WARN_ON(size > NR_NOPS);
 
 	_imv_bypass(&bypass_eip, &bypass_after_int3);
 
@@ -338,6 +356,7 @@ static noinline int replace_instruction_safe(uint8_t *addr, uint8_t *newcode,
 		 * Use a single page : 10 bytes are aligned on 16 bytes
 		 * boundaries.
 		 */
+		print_dbg_bytes("inserting code", (uint8_t *)addr, size);
 		pages[0] = virt_to_page((void *)bypass_eip);
 		vaddr = vmap(pages, 1, VM_MAP, PAGE_KERNEL);
 		BUG_ON(!vaddr);
@@ -350,8 +369,10 @@ static noinline int replace_instruction_safe(uint8_t *addr, uint8_t *newcode,
 		add_nops((void *)
 			&vaddr[(bypass_eip & ~PAGE_MASK) + size],
 			len);
+		print_dbg_bytes("inserted nops",
+			&vaddr[(bypass_eip & ~PAGE_MASK) + size], len);
 		vunmap(vaddr);
-
+		print_dbg_bytes("bypass code", (uint8_t *)bypass_eip, NR_NOPS);
 		target_after_int3 = (unsigned long)addr + BREAKPOINT_INS_LEN;
 		/* register_die_notifier has memory barriers */
 		register_die_notifier(&imv_notify);
-- 
1.5.5.1

