From 35d296867d37b4970846b3d43c493921e0aa75c0 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:26:56 -0400
Subject: [PATCH 189/391] markers-get-name-and-fmt-from-session-permanent-eID

struct marker_entry is permanent, we introduce two APIs for
getting name and fmt from eIDs.

struct marker_entry is permanent for the duration of active tracing
sessions. That means : as long as a struct marker_entry channel and
event IDs can be seen by an active tracing session, it stays valid until
all tracing sessions end.

Signed-off-by: Lai Jiangshan <laijs@cn.fujitsu.com>
Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 include/linux/marker.h |    3 +++
 kernel/marker.c        |   34 ++++++++++++++++++++++++++++++++++
 2 files changed, 37 insertions(+), 0 deletions(-)

diff --git a/include/linux/marker.h b/include/linux/marker.h
index 33162df..2d78113 100644
--- a/include/linux/marker.h
+++ b/include/linux/marker.h
@@ -237,6 +237,9 @@ extern int marker_probe_unregister_private_data(marker_probe_func *probe,
 extern void *marker_get_private_data(const char *channel, const char *name,
 	marker_probe_func *probe, int num);
 
+const char *marker_get_name_form_id(u16 channel_id, u16 event_id);
+const char *marker_get_fmt_form_id(u16 channel_id, u16 event_id);
+
 /*
  * marker_synchronize_unregister must be called between the last marker probe
  * unregistration and the first one of
diff --git a/kernel/marker.c b/kernel/marker.c
index 861af5e..ac8ec9f 100644
--- a/kernel/marker.c
+++ b/kernel/marker.c
@@ -999,6 +999,40 @@ void *marker_get_private_data(const char *channel, const char *name,
 }
 EXPORT_SYMBOL_GPL(marker_get_private_data);
 
+static struct marker_entry *get_entry_from_id(u16 channel_id, u16 event_id)
+{
+	struct hlist_head *head;
+	struct hlist_node *node;
+	struct marker_entry *e, *found = NULL;
+	u32 hash = hash_32((channel_id << 16) | event_id, MARKER_HASH_BITS);
+
+	mutex_lock(&markers_mutex);
+	head = id_table + hash;
+	hlist_for_each_entry(e, node, head, id_list) {
+		if (e->channel_id == channel_id && e->event_id == event_id) {
+			found = e;
+			break;
+		}
+	}
+	mutex_unlock(&markers_mutex);
+	return found;
+}
+
+/* must call when ids/marker_entry are kept alive */
+const char *marker_get_name_form_id(u16 channel_id, u16 event_id)
+{
+	struct marker_entry *e = get_entry_from_id(channel_id, event_id);
+	return e ? e->name : NULL;
+}
+EXPORT_SYMBOL_GPL(marker_get_name_form_id);
+
+const char *marker_get_fmt_form_id(u16 channel_id, u16 event_id)
+{
+	struct marker_entry *e = get_entry_from_id(channel_id, event_id);
+	return e ? e->format : NULL;
+}
+EXPORT_SYMBOL_GPL(marker_get_fmt_form_id);
+
 /**
  * markers_compact_event_ids - Compact markers event IDs and reassign channels
  *
-- 
1.6.5.2

