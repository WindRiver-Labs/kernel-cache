From dc74e8408a288c060e298ac7fccc218456194e49 Mon Sep 17 00:00:00 2001
From: Fei Wu <fei.wu@windriver.com>
Date: Wed, 4 Feb 2009 09:48:34 +0800
Subject: [PATCH] MIPS dump LTTng syscall table

Provide a way for LTTng to look up the name of MIPS syscall handlers
at runtime, so lttv can show the syscall names instead of ids.

In order to support all syscall ABIs on MIPS, this patch exports all
of their syscall tables. And because CONFIG_32BIT and CONFIG_MIPS32_O32
are mutual exclusive, it's safe to share the same symbol sys_call_table.

Signed-off-by: Fei Wu <fei.wu@windriver.com>
---
 arch/mips/Kconfig              |    1 +
 arch/mips/kernel/scall64-64.S  |    1 +
 arch/mips/kernel/scall64-o32.S |    2 +-
 arch/mips/kernel/traps.c       |   55 ++++++++++++++++++++++++++++++++++++++++
 4 files changed, 58 insertions(+), 1 deletions(-)

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index fa1881b..af8c217 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -8,6 +8,7 @@ config MIPS
 	# Horrible source of confusion.  Die, die, die ...
 	select EMBEDDED
 	select RTC_CLASS
+	select HAVE_LTT_DUMP_TABLES
 
 mainmenu "Linux/MIPS Kernel Configuration"
 
diff --git a/arch/mips/kernel/scall64-64.S b/arch/mips/kernel/scall64-64.S
index 0367443..ec1369f 100644
--- a/arch/mips/kernel/scall64-64.S
+++ b/arch/mips/kernel/scall64-64.S
@@ -200,6 +200,7 @@ bad_alignment:
 
 	.align	3
 sys_call_table:
+EXPORT(sys64_call_table)
 	PTR	sys_read			/* 5000 */
 	PTR	sys_write
 	PTR	sys_open
diff --git a/arch/mips/kernel/scall64-o32.S b/arch/mips/kernel/scall64-o32.S
index 0495a0f..c232029 100644
--- a/arch/mips/kernel/scall64-o32.S
+++ b/arch/mips/kernel/scall64-o32.S
@@ -203,7 +203,7 @@ einval:	li	v0, -EINVAL
 
 	.align	3
 	.type	sys_call_table,@object
-sys_call_table:
+EXPORT(sys_call_table)
 	PTR	sys32_syscall			/* 4000 */
 	PTR	sys_exit
 	PTR	sys_fork
diff --git a/arch/mips/kernel/traps.c b/arch/mips/kernel/traps.c
index 1c142ef..6fa59ac 100644
--- a/arch/mips/kernel/traps.c
+++ b/arch/mips/kernel/traps.c
@@ -25,6 +25,7 @@
 #include <linux/ptrace.h>
 #include <linux/kgdb.h>
 #include <linux/kdebug.h>
+#include <linux/unistd.h>
 #include <trace/trap.h>
 
 #include <asm/bootinfo.h>
@@ -1707,3 +1708,57 @@ void __init trap_init(void)
 
 	sort_extable(__start___dbe_table, __stop___dbe_table);
 }
+
+struct sys_call_table {
+	unsigned long func;
+#ifdef CONFIG_32BIT
+	long nargs;
+#endif
+};
+
+extern struct sys_call_table sys_call_table[];
+extern struct sys_call_table sysn32_call_table[];
+extern struct sys_call_table sys64_call_table[];
+
+void ltt_dump_sys_call_table(void *call_data)
+{
+	int i, j;
+	char namebuf[KSYM_NAME_LEN];
+	struct {
+		struct sys_call_table *table;
+		int base;
+		int num;
+	} syscall_abi[] = {
+#if defined(CONFIG_32BIT) || defined(CONFIG_MIPS32_O32)
+		{sys_call_table, __NR_O32_Linux, __NR_O32_Linux_syscalls},
+#endif
+#ifdef CONFIG_MIPS32_N32
+		{sysn32_call_table, __NR_N32_Linux, __NR_N32_Linux_syscalls},
+#endif
+#ifdef CONFIG_64BIT
+		{sys64_call_table, __NR_64_Linux, __NR_64_Linux_syscalls},
+#endif
+		{NULL, 0, 0}
+	};
+
+
+	for (i = 0; syscall_abi[i].table; i++)
+		for (j = 0; j < syscall_abi[i].num; j++) {
+			sprint_symbol(namebuf, syscall_abi[i].table[j].func);
+			__trace_mark(0, statedump_sys_call_table, call_data,
+				"id %d address %p symbol %s",
+				j + syscall_abi[i].base,
+				(void *)syscall_abi[i].table[j].func, namebuf);
+		}
+}
+EXPORT_SYMBOL_GPL(ltt_dump_sys_call_table);
+
+/*
+ * This function should be defined and exported if CONFIG_HAVE_LTT_DUMP_TABLES
+ * is enabled. It's not implemented because currently the userspace tools don't
+ * use this information.
+ */
+void ltt_dump_idt_table(void *call_data)
+{
+}
+EXPORT_SYMBOL_GPL(ltt_dump_idt_table);
-- 
1.6.0.3

