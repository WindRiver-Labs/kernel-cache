From cbf844197e7f46a9cc6435a5da6adfdb271ab9aa Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:27:50 -0400
Subject: [PATCH 286/391] ltt-relay-lockless-count-events

LTT relay lockless count events

Count events in lockless relay.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 ltt/ltt-relay-lockless.c |   22 ++++++++++++++++++++++
 ltt/ltt-relay-lockless.h |    2 ++
 2 files changed, 24 insertions(+), 0 deletions(-)

diff --git a/ltt/ltt-relay-lockless.c b/ltt/ltt-relay-lockless.c
index 3b1467e..5a2a4e4 100644
--- a/ltt/ltt-relay-lockless.c
+++ b/ltt/ltt-relay-lockless.c
@@ -762,6 +762,24 @@ static ssize_t ltt_relay_file_splice_read(struct file *in,
 	return ret;
 }
 
+static void ltt_relay_print_written(
+		struct ltt_channel_struct *ltt_chan,
+		long cons_off, unsigned int cpu)
+{
+	struct rchan *rchan = ltt_chan->trans_channel_data;
+	struct ltt_channel_buf_struct *ltt_buf = rchan->buf[cpu]->chan_private;
+	long cons_idx, events_count;
+
+	cons_idx = SUBBUF_INDEX(cons_off, rchan);
+	events_count = local_read(&ltt_buf->commit_count[cons_idx].events);
+
+	if (events_count)
+		printk(KERN_INFO
+			"LTT: %lu events written in channel %s "
+			"(cpu %u, index %lu)\n",
+			events_count, ltt_chan->channel_name, cpu, cons_idx);
+}
+
 static void ltt_relay_print_subbuffer_errors(
 		struct ltt_channel_struct *ltt_chan,
 		long cons_off, unsigned int cpu)
@@ -809,6 +827,9 @@ static void ltt_relay_print_errors(struct ltt_trace_struct *trace,
 	 */
 	if (!rchan)
 		return;
+	for (cons_off = 0; cons_off < rchan->alloc_size;
+	     cons_off = SUBBUF_ALIGN(cons_off, rchan))
+		ltt_relay_print_written(ltt_chan, cons_off, cpu);
 	for (cons_off = atomic_long_read(&ltt_buf->consumed);
 			(SUBBUF_TRUNC(local_read(&ltt_buf->offset),
 				      rchan)
@@ -893,6 +914,7 @@ static int ltt_relay_create_buffer(struct ltt_trace_struct *trace,
 	for (j = 0; j < n_subbufs; j++) {
 		local_set(&ltt_buf->commit_count[j].cc, 0);
 		local_set(&ltt_buf->commit_count[j].cc_sb, 0);
+		local_set(&ltt_buf->commit_count[j].events, 0);
 	}
 	init_waitqueue_head(&ltt_buf->write_wait);
 	init_waitqueue_head(&ltt_buf->read_wait);
diff --git a/ltt/ltt-relay-lockless.h b/ltt/ltt-relay-lockless.h
index 01128ca..45d1aac 100644
--- a/ltt/ltt-relay-lockless.h
+++ b/ltt/ltt-relay-lockless.h
@@ -69,6 +69,7 @@
 struct commit_counters {
 	local_t cc;
 	local_t cc_sb;			/* Incremented _once_ at sb switch */
+	local_t events;			/* Event count */
 };
 
 /* LTTng lockless logging buffer info */
@@ -480,6 +481,7 @@ static __inline__ void ltt_commit_slot(
 	barrier();
 #endif
 	local_add(slot_size, &ltt_buf->commit_count[endidx].cc);
+	local_inc(&ltt_buf->commit_count[endidx].events);
 	/*
 	 * commit count read can race with concurrent OOO commit count updates.
 	 * This is only needed for ltt_check_deliver (for non-polling delivery
-- 
1.6.5.2

