From c55220193fc62ed1e2cb9972218a5b51bf92f07c Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date: Tue, 12 Aug 2008 13:05:43 -0400
Subject: [PATCH] [PATCH] lttng-instrumentation-lockdep-probes

From 2ab6a0075938e0a70b774f9013b512c3b17e81a8 Mon Sep 17 00:00:00 2001
Subject: [PATCH] lttng-instrumentation-lockdep-probes
---
 kernel/Makefile        |    1 +
 kernel/lockdep-trace.c |   84 ++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 85 insertions(+), 0 deletions(-)
 create mode 100644 kernel/lockdep-trace.c

diff --git a/kernel/Makefile b/kernel/Makefile
index 79de767..5b7da78 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -88,6 +88,7 @@ obj-$(USE_IMMEDIATE) += immediate.o
 obj-$(CONFIG_MARKERS) += marker.o
 obj-$(CONFIG_TRACEPOINTS) += tracepoint.o
 obj-$(CONFIG_TRACEPROBES) += kernel-trace.o
+obj-$(CONFIG_TRACEPROBES) += lockdep-trace.o
 obj-$(CONFIG_LATENCYTOP) += latencytop.o
 obj-$(CONFIG_HAVE_GENERIC_DMA_COHERENT) += dma-coherent.o
 obj-$(CONFIG_FTRACE) += trace/
diff --git a/kernel/lockdep-trace.c b/kernel/lockdep-trace.c
new file mode 100644
index 0000000..ff6c3ac
--- /dev/null
+++ b/kernel/lockdep-trace.c
@@ -0,0 +1,84 @@
+/*
+ * kernel/lockdep-trace.c
+ *
+ * lockdep tracepoint probes.
+ */
+
+#include <linux/module.h>
+#include <linux/lockdep.h>
+#include <trace/lockdep.h>
+
+static void probe_lockdep_hardirqs_on(void *retaddr)
+{
+	trace_mark(lockdep_hardirqs_on, "retaddr %p", retaddr);
+}
+
+static void probe_lockdep_hardirqs_off(void *retaddr)
+{
+	trace_mark(lockdep_hardirqs_off, "retaddr %p", retaddr);
+}
+
+static void probe_lockdep_softirqs_on(void *retaddr)
+{
+	trace_mark(lockdep_softirqs_on, "retaddr %p", retaddr);
+}
+
+static void probe_lockdep_softirqs_off(void *retaddr)
+{
+	trace_mark(lockdep_softirqs_off, "retaddr %p", retaddr);
+}
+
+static void probe_lockdep_lock_acquire(unsigned long retaddr,
+		unsigned int subclass, struct lockdep_map *lock, int trylock)
+{
+	trace_mark(lockdep_lock_acquire,
+		"retaddr %lu subclass %u lock %p trylock %d",
+		retaddr, subclass, lock, trylock);
+}
+
+static void probe_lockdep_lock_release(unsigned long retaddr,
+		struct lockdep_map *lock, int nested)
+{
+	trace_mark(lockdep_lock_release,
+		"retaddr %lu lock %p nested %d",
+		retaddr, lock, nested);
+}
+
+int __init lockdep_trace_init(void)
+{
+	int ret;
+
+	ret = register_trace_lockdep_hardirqs_on(probe_lockdep_hardirqs_on);
+	WARN_ON(ret);
+	ret = register_trace_lockdep_hardirqs_off(probe_lockdep_hardirqs_off);
+	WARN_ON(ret);
+	ret = register_trace_lockdep_softirqs_on(probe_lockdep_softirqs_on);
+	WARN_ON(ret);
+	ret = register_trace_lockdep_softirqs_off(probe_lockdep_softirqs_off);
+	WARN_ON(ret);
+	ret = register_trace_lockdep_lock_acquire(probe_lockdep_lock_acquire);
+	WARN_ON(ret);
+	ret = register_trace_lockdep_lock_release(probe_lockdep_lock_release);
+	WARN_ON(ret);
+
+	return 0;
+}
+
+module_init(lockdep_trace_init);
+
+void __exit lockdep_trace_exit(void)
+{
+	unregister_trace_lockdep_lock_release(probe_lockdep_lock_release);
+	unregister_trace_lockdep_lock_acquire(probe_lockdep_lock_acquire);
+	unregister_trace_lockdep_softirqs_off(probe_lockdep_softirqs_off);
+	unregister_trace_lockdep_softirqs_on(probe_lockdep_softirqs_on);
+	unregister_trace_lockdep_hardirqs_off(probe_lockdep_hardirqs_off);
+	unregister_trace_lockdep_hardirqs_on(probe_lockdep_hardirqs_on);
+	tracepoint_synchronize_unregister();
+}
+
+module_exit(lockdep_trace_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Mathieu Desnoyers");
+MODULE_DESCRIPTION("lockdep Tracepoint Probes");
-- 
1.5.5.1

