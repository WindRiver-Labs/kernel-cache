From 881b91f182dcd30a6f5ad65129bdb1bea4460945 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date: Thu, 30 Oct 2008 23:26:59 -0400
Subject: [PATCH] lttng-menus

LTTng menus

LTTng build Kconfig and makefiles.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 ltt/Kconfig  |  141 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ltt/Makefile |   13 +++++
 2 files changed, 154 insertions(+), 0 deletions(-)
 create mode 100644 ltt/Kconfig
 create mode 100644 ltt/Makefile

diff --git a/ltt/Kconfig b/ltt/Kconfig
new file mode 100644
index 0000000..88398d2
--- /dev/null
+++ b/ltt/Kconfig
@@ -0,0 +1,141 @@
+menu "Linux Trace Toolkit"
+
+config LTT
+	bool "Linux Trace Toolkit Instrumentation Support"
+	depends on EXPERIMENTAL
+	depends on TRACEPOINTS
+	depends on MARKERS
+	default y
+	help
+	  It is possible for the kernel to log important events to a trace
+	  facility. Doing so enables the use of the generated traces in order
+	  to reconstruct the dynamic behavior of the kernel, and hence the
+	  whole system.
+
+	  The tracing process contains 4 parts :
+	      1) The logging of events by key parts of the kernel.
+	      2) The tracer that keeps the events in a data buffer (uses
+	         relay).
+	      3) A trace daemon that interacts with the tracer and is
+	         notified every time there is a certain quantity of data to
+	         read from the tracer.
+	      4) A trace event data decoder that reads the accumulated data
+	         and formats it in a human-readable format.
+
+	  If you say Y, the first component will be built into the kernel.
+
+	  For more information on kernel tracing, lttctl, lttd or lttv,
+	  please check the following address :
+	       http://ltt.polymtl.ca
+
+config LTT_RELAY_ALLOC
+	def_bool n
+
+config LTT_RELAY
+	tristate "Linux Trace Toolkit High-speed Lockless Data Relay"
+	select DEBUG_FS
+	select LTT_RELAY_ALLOC
+	depends on LTT_TRACER
+	default y
+	help
+	  Support using the fast lockless algorithm to log the data obtained
+	  through LTT.
+
+	  If you don't have special hardware, you almost certainly want
+	  to say Y here.
+
+config LTT_RELAY_LOCKED
+	tristate "Linux Trace Toolkit Lock-Protected Data Relay"
+	select DEBUG_FS
+	select LTT_RELAY_ALLOC
+	depends on LTT_TRACER
+	default n
+	help
+	  Support using the slow spinlock and interrupt disable algorithm to log
+	  the data obtained through LTT.
+
+config LTT_RELAY_CHECK_RANDOM_ACCESS
+	bool "Debug check for random access in ltt relay buffers"
+	depends on LTT_RELAY
+	default n
+	help
+	  Add checks for random access to LTTng relay buffers. Given those
+	  buffers are a linked list, such access are rather slow. Rare accesses
+	  are OK; they can be caused by large writes (more than a page large) or
+	  by reentrancy (e.g. interrupt nesting over the tracing code).
+
+config LTT_SERIALIZE
+	tristate "Linux Trace Toolkit Serializer"
+	default y
+	depends on LTT
+	help
+	  Library for serializing information from format string and argument
+	  list to the trace buffers.
+
+config LTT_MARKER_CONTROL
+	tristate "Linux Trace Toolkit Marker Control"
+	depends on LTT_SERIALIZE
+	default y
+	help
+	  Interface (/proc/ltt) to enable markers.
+
+config LTT_TRACER
+	tristate "Linux Trace Toolkit Tracer"
+	depends on LTT
+	depends on LTT_MARKER_CONTROL
+	default y
+	help
+	  If you enable this option, the Linux Trace Toolkit Tracer will be
+	  either built in the kernel or as module.
+
+	  Critical parts of the kernel will call upon the kernel tracing
+	  function. The data is then recorded by the tracer if a trace daemon
+	  is running in user-space and has issued a "start" command.
+
+	  For more information on kernel tracing, the trace daemon or the event
+	  decoder, please check the following address :
+	       http://www.opersys.com/ltt
+	  See also the experimental page of the project :
+	       http://ltt.polymtl.ca
+
+config LTT_ALIGNMENT
+	bool "Align Linux Trace Toolkit Traces"
+	depends on LTT
+	default y
+	help
+	  This option enables dynamic alignment of data in buffers. The
+	  alignment is made on the smallest size between architecture size
+	  and the size of the value to be written.
+
+	  Dynamically calculating the offset of the data has a performance cost,
+	  but it is more efficient on some architectures (especially 64 bits) to
+	  align data than to write it unaligned.
+
+config LTT_DEBUG_EVENT_SIZE
+	bool "Add event size field to LTT events for tracer debugging"
+	depends on LTT
+	default n
+	help
+	  Tracer-internal option to help debugging event type encoding problems.
+
+config LTT_VMCORE
+	bool "Support trace extraction from crash dump"
+	depends on LTT
+	default y
+	help
+	  If you enable this option, the Linux Trace Toolkit Tracer will
+	  support extacting ltt log from vmcore, which can be generated with
+	  kdump or LKCD tools.
+
+	  Special crash extension should be used to extract ltt buffers.
+
+config LTT_NETLINK_CONTROL
+	tristate "Linux Trace Toolkit Netlink Controller"
+	depends on LTT_TRACER
+	depends on NET
+	default m
+	help
+	  If you enable this option, the Linux Trace Toolkit Netlink Controller
+	  will be either built in the kernel or as module.
+
+endmenu
diff --git a/ltt/Makefile b/ltt/Makefile
new file mode 100644
index 0000000..fb84a80
--- /dev/null
+++ b/ltt/Makefile
@@ -0,0 +1,13 @@
+#
+# Makefile for the LTT objects.
+#
+
+obj-$(CONFIG_LTT)			+= ltt-core.o
+obj-$(CONFIG_LTT_TRACER)		+= ltt-tracer.o
+obj-$(CONFIG_LTT_RELAY)			+= ltt-relay.o
+obj-$(CONFIG_LTT_RELAY_LOCKED)		+= ltt-relay-locked.o
+obj-$(CONFIG_LTT_RELAY_ALLOC)		+= ltt-relay-alloc.o
+obj-$(CONFIG_LTT_NETLINK_CONTROL)	+= ltt-control.o
+obj-$(CONFIG_LTT_SERIALIZE)		+= ltt-serialize.o
+obj-$(CONFIG_LTT_STATEDUMP)		+= ltt-statedump.o
+obj-$(CONFIG_LTT_MARKER_CONTROL)	+= ltt-marker-control.o
-- 
1.5.5.1

