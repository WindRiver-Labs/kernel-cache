From 71933f7b42d0fbe64e2cf128c860b71c16c1f025 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 3 Aug 2010 21:27:07 -0700
Subject: [PATCH] lttng: fix a redundant free

Obviously, there is a redundant free of chan->buf if ltt_chanbuf_create
return error, which triggered at kref_put by a callback function
	ltt_chan_free -> ltt_chan_alloc_free.
So add a judgement to see if chan->buff is NULL before free them.

Signed-off-by: Jason HU <yongqi.hu@windriver.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com1>
---
 ltt/ltt-relay-alloc.c |   17 ++++++++++-------
 1 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/ltt/ltt-relay-alloc.c b/ltt/ltt-relay-alloc.c
index 5d4bb83..4b93e2d 100644
--- a/ltt/ltt-relay-alloc.c
+++ b/ltt/ltt-relay-alloc.c
@@ -332,6 +332,7 @@ free_bufs:
 		ltt_chanbuf_free(buf);
 	}
 	free_percpu(chan->buf);
+	chan->buf = NULL;
 free_chan:
 	kref_put(&chan->kref, ltt_chan_free);
 	return -ENOMEM;
@@ -375,15 +376,17 @@ void ltt_chan_alloc_remove_files(struct ltt_chan_alloc *chan)
 void ltt_chan_alloc_free(struct ltt_chan_alloc *chan)
 {
 	unsigned int i;
+	if(chan->buf) {
+		for_each_possible_cpu(i) {
+			struct ltt_chanbuf *buf = per_cpu_ptr(chan->buf, i);
 
-	for_each_possible_cpu(i) {
-		struct ltt_chanbuf *buf = per_cpu_ptr(chan->buf, i);
-
-		if (!buf->a.allocated)
-			continue;
-		ltt_chanbuf_free(buf);
+			if (!buf->a.allocated)
+				continue;
+			ltt_chanbuf_free(buf);
+		}
+		free_percpu(chan->buf);
+		chan->buf = NULL;
 	}
-	free_percpu(chan->buf);
 	kref_put(&chan->trace->kref, ltt_release_trace);
 	wake_up_interruptible(&chan->trace->kref_wq);
 }
-- 
1.6.5.2

