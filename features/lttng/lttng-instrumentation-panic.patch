From 41b943a6ad54d006ae0561a95652923fd1ebe7c4 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:27:13 -0400
Subject: [PATCH 217/390] lttng-instrumentation-panic

LTTng instrumentation panic

Instrumentation of following panic and kexec related events are added:
	panic
	kernel_kexec
	crash_kexec

It is useful for build flight-recorder program based on lttng infrastructure.

From: Zhao Lei <zhaolei@cn.fujitsu.com>
Signed-off-by: Zhao Lei <zhaolei@cn.fujitsu.com>
Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 include/trace/kernel.h |   12 ++++++++++++
 kernel/kexec.c         |    8 ++++++++
 kernel/panic.c         |    7 +++++++
 3 files changed, 27 insertions(+), 0 deletions(-)

diff --git a/include/trace/kernel.h b/include/trace/kernel.h
index 2b54cce..ca61c54 100644
--- a/include/trace/kernel.h
+++ b/include/trace/kernel.h
@@ -2,6 +2,9 @@
 #define _TRACE_KERNEL_H
 
 #include <linux/tracepoint.h>
+#include <linux/kexec.h>
+
+struct kimage;
 
 DECLARE_TRACE(kernel_printk,
 	TP_PROTO(unsigned long retaddr),
@@ -15,5 +18,14 @@ DECLARE_TRACE(kernel_module_free,
 DECLARE_TRACE(kernel_module_load,
 	TP_PROTO(struct module *mod),
 		TP_ARGS(mod));
+DECLARE_TRACE(kernel_panic,
+	TP_PROTO(const char *fmt, va_list args),
+		TP_ARGS(fmt, args));
+DECLARE_TRACE(kernel_kernel_kexec,
+	TP_PROTO(struct kimage *image),
+		TP_ARGS(image));
+DECLARE_TRACE(kernel_crash_kexec,
+	TP_PROTO(struct kimage *image, struct pt_regs *regs),
+		TP_ARGS(image, regs));
 
 #endif
diff --git a/kernel/kexec.c b/kernel/kexec.c
index 474a847..d828626 100644
--- a/kernel/kexec.c
+++ b/kernel/kexec.c
@@ -33,6 +33,7 @@
 #include <linux/vmalloc.h>
 #include <linux/swap.h>
 #include <linux/kmsg_dump.h>
+#include <trace/kernel.h>
 
 #include <asm/page.h>
 #include <asm/uaccess.h>
@@ -40,6 +41,9 @@
 #include <asm/system.h>
 #include <asm/sections.h>
 
+DEFINE_TRACE(kernel_kernel_kexec);
+DEFINE_TRACE(kernel_crash_kexec);
+
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t __percpu *crash_notes;
 
@@ -1064,6 +1068,8 @@ asmlinkage long compat_sys_kexec_load(unsigned long entry,
 
 void crash_kexec(struct pt_regs *regs)
 {
+	trace_kernel_crash_kexec(kexec_crash_image, regs);
+
 	/* Take the kexec_mutex here to prevent sys_kexec_load
 	 * running on one cpu from replacing the crash kernel
 	 * we are using after a panic on a different cpu.
@@ -1492,6 +1498,8 @@ int kernel_kexec(void)
 {
 	int error = 0;
 
+	trace_kernel_kernel_kexec(kexec_image);
+
 	if (!mutex_trylock(&kexec_mutex))
 		return -EBUSY;
 	if (!kexec_image) {
diff --git a/kernel/panic.c b/kernel/panic.c
index 13d966b..b8e61d4 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -23,6 +23,9 @@
 #include <linux/init.h>
 #include <linux/nmi.h>
 #include <linux/dmi.h>
+#include <trace/kernel.h>
+
+DEFINE_TRACE(kernel_panic);
 
 int panic_on_oops;
 static unsigned long tainted_mask;
@@ -80,6 +83,10 @@ NORET_TYPE void panic(const char * fmt, ...)
 	va_list args;
 	long i;
 
+	va_start(args, fmt);
+	trace_kernel_panic(fmt, args);
+	va_end(args);
+
 	/*
 	 * It's possible to come here directly from a panic-assertion and
 	 * not have preempt disabled. Some functions called from here want
-- 
1.6.5.2

