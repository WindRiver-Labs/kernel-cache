From 9708c500a77e72e98374192854e18f4874794ac2 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date: Thu, 2 Oct 2008 14:36:37 -0400
Subject: [PATCH] lttng-export-irq_desc

Export IRQ descriptor structure on every architectures.

Currently, only a few architectures export the irq_desc structure. This is
useful for loadable modules which are not part of the kernel but need to iterate
on the irq descriptors to list them.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 arch/powerpc/kernel/irq.c       |    2 --
 arch/powerpc/kernel/ppc_ksyms.c |    1 -
 arch/sh/kernel/sh_ksyms_32.c    |    1 -
 kernel/irq/handle.c             |    1 +
 4 files changed, 1 insertions(+), 4 deletions(-)

diff --git a/arch/powerpc/kernel/irq.c b/arch/powerpc/kernel/irq.c
index d972dec..a1928d6 100644
--- a/arch/powerpc/kernel/irq.c
+++ b/arch/powerpc/kernel/irq.c
@@ -84,8 +84,6 @@ extern int tau_interrupts(int);
 #endif /* CONFIG_PPC32 */
 
 #ifdef CONFIG_PPC64
-EXPORT_SYMBOL(irq_desc);
-
 int distribute_irqs = 1;
 
 static inline notrace unsigned long get_hard_enabled(void)
diff --git a/arch/powerpc/kernel/ppc_ksyms.c b/arch/powerpc/kernel/ppc_ksyms.c
index e1ea4fe..33272d8 100644
--- a/arch/powerpc/kernel/ppc_ksyms.c
+++ b/arch/powerpc/kernel/ppc_ksyms.c
@@ -165,7 +165,6 @@ EXPORT_SYMBOL(screen_info);
 
 #ifdef CONFIG_PPC32
 EXPORT_SYMBOL(timer_interrupt);
-EXPORT_SYMBOL(irq_desc);
 EXPORT_SYMBOL(tb_ticks_per_jiffy);
 EXPORT_SYMBOL(cacheable_memcpy);
 #endif
diff --git a/arch/sh/kernel/sh_ksyms_32.c b/arch/sh/kernel/sh_ksyms_32.c
index 6e1b1c2..1ddbf78 100644
--- a/arch/sh/kernel/sh_ksyms_32.c
+++ b/arch/sh/kernel/sh_ksyms_32.c
@@ -23,7 +23,6 @@ extern struct hw_interrupt_type no_irq_type;
 /* platform dependent support */
 EXPORT_SYMBOL(dump_fpu);
 EXPORT_SYMBOL(kernel_thread);
-EXPORT_SYMBOL(irq_desc);
 EXPORT_SYMBOL(no_irq_type);
 
 EXPORT_SYMBOL(strlen);
diff --git a/kernel/irq/handle.c b/kernel/irq/handle.c
index 1e584ea..4a9480c 100644
--- a/kernel/irq/handle.c
+++ b/kernel/irq/handle.c
@@ -60,6 +60,7 @@ struct irq_desc irq_desc[NR_IRQS] __cacheline_aligned_in_smp = {
 #endif
 	}
 };
+EXPORT_SYMBOL(irq_desc);
 
 /*
  * What should we do if we get a hw irq event on an illegal vector?
-- 
1.5.5.1

