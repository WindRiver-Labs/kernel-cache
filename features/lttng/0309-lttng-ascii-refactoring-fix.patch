From 920a3a41e03483d49bec6781a43126741a644524 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:28:01 -0400
Subject: [PATCH 309/391] lttng-ascii-refactoring-fix

---
 ltt/ltt-ascii.c |   75 ++++++++++++++++++++++++++++++++----------------------
 1 files changed, 44 insertions(+), 31 deletions(-)

diff --git a/ltt/ltt-ascii.c b/ltt/ltt-ascii.c
index 61f6f29..4014b5f 100644
--- a/ltt/ltt-ascii.c
+++ b/ltt/ltt-ascii.c
@@ -10,6 +10,12 @@
 /*
  * TODO
  *
+ * Move to new switch behavior: Wait for data for the duration of the
+ * timer interval + safety, if none is coming, consider that no activity occured
+ * in the buffer.
+ *
+ * Fix case when having a text file open and destroying trace.
+ *
  * - Automate periodical switch:
  *
  * The debugfs file "switch_timer" receives a timer period as parameter
@@ -84,10 +90,12 @@ struct ltt_relay_iter {
 static int is_subbuffer_offset_end(struct ltt_relay_cpu_iter *citer,
 				   long offset)
 {
-	long sub_offset = SUBBUF_OFFSET(offset, citer->buf->chan);
+	struct ltt_chan *chan = container_of(citer->buf->a.chan,
+					     struct ltt_chan, a);
+	long sub_offset = SUBBUF_OFFSET(offset, chan);
 
 	return (sub_offset + citer->header->lost_size
-			>= citer->buf->chan->sb_size);
+		>= citer->buf->a.chan->sb_size);
 }
 
 static u64 calculate_tsc(u64 pre_tsc, u64 read_tsc, unsigned int rflags)
@@ -128,7 +136,7 @@ static void update_new_event(struct ltt_relay_cpu_iter *citer, long hdr_offset)
 
 	WARN_ON_ONCE(hdr_offset != citer->hdr_offset);
 
-	tmp_offset = ltt_read_event_header(&citer->buf.a, hdr_offset,
+	tmp_offset = ltt_read_event_header(&citer->buf->a, hdr_offset,
 					   &read_tsc, &citer->data_size,
 					   &citer->eID, &rflags);
 	citer->payload_offset = calculate_payload_offset(tmp_offset,
@@ -176,24 +184,18 @@ static int subbuffer_start(struct ltt_relay_cpu_iter *citer, long *offset)
 
 	ret = ltt_chanbuf_get_subbuf(citer->buf, offset);
 	if (!ret) {
-		citer->header = ltt_relay_read_offset_address(&citer->buf.a,
+		citer->header = ltt_relay_read_offset_address(&citer->buf->a,
 							      *offset);
-		citer->hdr_offset = (*offset) + ltt_subbuffer_header_size();
+		citer->hdr_offset = (*offset) + ltt_sb_header_size();
 		citer->tsc = citer->header->cycle_count_begin;
 		iter->nr_refs++;
 		citer->sb_ref = 1;
 		return 0;
 	} else {
-		if (is_finalized(citer->buf)) {
-			/*
-			 * Currently, kill the iterator for
-			 * this cpu buffer (TODO resume support)
-			 */
-			ltt_chanbuf_release_read(citer->buf);
-			citer->buf = NULL;
+		if (ltt_chanbuf_is_finalized(citer->buf))
 			return -ENODATA;
-		}
-		return -EAGAIN;
+		else
+			return -EAGAIN;
 	}
 }
 
@@ -220,19 +222,20 @@ static void ltt_relay_advance_cpu_iter(struct ltt_relay_cpu_iter *citer)
 	if (unlikely(is_subbuffer_offset_end(citer,
 					     old_offset + citer->data_size))) {
 		DEBUGP(KERN_DEBUG "LTT ASCII stop cpu %d offset %lX\n",
-		       citer->buf->cpu, citer->read_sb_offset);
+		       citer->buf->a.cpu, citer->read_sb_offset);
 		subbuffer_stop(citer, citer->read_sb_offset);
 		for (;;) {
 			ret = subbuffer_start(citer, &citer->read_sb_offset);
 			DEBUGP(KERN_DEBUG
 			       "LTT ASCII start cpu %d ret %d offset %lX\n",
-			       citer->buf->cpu, ret, citer->read_sb_offset);
+			       citer->buf->a.cpu, ret, citer->read_sb_offset);
 			if (!ret || ret == -ENODATA) {
 				break;	/* got data, or finalized */
 			} else {	/* -EAGAIN */
 				if (signal_pending(current))
 					break;
 				schedule_timeout_interruptible(1);
+				//TODO: check for no-data delay. take ref. break
 			}
 		}
 	} else {
@@ -240,7 +243,7 @@ static void ltt_relay_advance_cpu_iter(struct ltt_relay_cpu_iter *citer)
 		citer->hdr_offset = new_offset + ltt_align(new_offset, sizeof(struct ltt_event_header));
 		DEBUGP(KERN_DEBUG
 		       "LTT ASCII old_offset %lX new_offset %lX cpu %d\n",
-		       old_offset, new_offset, citer->buf->cpu);
+		       old_offset, new_offset, citer->buf->a.cpu);
 	}
 
 	update_cpu_iter(citer, citer->hdr_offset);
@@ -269,7 +272,7 @@ static void ltt_relay_advance_iter(struct ltt_relay_iter *iter)
 	for_each_possible_cpu(i) {
 		curr = &iter->iter_cpu[i];
 
-		if (!curr->buf || !curr->header)
+		if (!curr->buf->a.allocated || !curr->header)
 			continue;
 
 		if (cpu_iter_eof(curr))
@@ -381,14 +384,14 @@ static int ltt_relay_iter_open_channel(struct ltt_relay_iter *iter,
 				       struct ltt_chan *chan)
 {
 	int i, ret;
-	u16 chID = ltt_channels_get_index_from_name(ltt_channel->channel_name);
+	u16 chID = ltt_channels_get_index_from_name(chan->a.filename);
 
 	/* we don't need lock relay_channels_mutex */
 	for_each_possible_cpu(i) {
 		struct ltt_relay_cpu_iter *citer = &iter->iter_cpu[i];
 
-		citer->buf = per_cpu_ptr(chan.a->buf, i);
-		if (!citer->buf)
+		citer->buf = per_cpu_ptr(chan->a.buf, i);
+		if (!citer->buf->a.allocated)
 			continue;
 
 		citer->iter = iter;	/* easy lazy parent info */
@@ -407,7 +410,7 @@ static int ltt_relay_iter_open_channel(struct ltt_relay_iter *iter,
 			DEBUGP(KERN_DEBUG
 				"LTT ASCII open start "
 				"cpu %d ret %d offset %lX\n",
-				citer->buf->cpu, ret, citer->read_sb_offset);
+				citer->buf->a.cpu, ret, citer->read_sb_offset);
 			if (!ret || ret == -ENODATA) {
 				break;	/* got data, or finalized */
 			} else {	/* -EAGAIN */
@@ -426,12 +429,16 @@ error:
 	for_each_possible_cpu(i) {
 		struct ltt_relay_cpu_iter *citer = &iter->iter_cpu[i];
 
-		if (citer->buf)
+		if (!citer->buf)
+			break;
+
+		if (citer->buf->a.allocated)
 			ltt_chanbuf_release_read(citer->buf);
 	}
 	return ret;
 }
 
+/* FIXME : cpu hotplug support */
 static int ltt_relay_iter_release_channel(struct ltt_relay_iter *iter)
 {
 	int i;
@@ -440,14 +447,14 @@ static int ltt_relay_iter_release_channel(struct ltt_relay_iter *iter)
 		struct ltt_relay_cpu_iter *citer = &iter->iter_cpu[i];
 
 		if (citer->sb_ref) {
-			WARN_ON_ONCE(!citer->buf);
+			WARN_ON_ONCE(!citer->buf->a.allocated);
 			DEBUGP(KERN_DEBUG
 				"LTT ASCII release stop cpu %d offset %lX\n",
-				citer->buf->cpu, citer->read_sb_offset);
+				citer->buf->a.cpu, citer->read_sb_offset);
 			subbuffer_stop(&iter->iter_cpu[i],
 				       citer->read_sb_offset);
 		}
-		if (citer->buf)
+		if (citer->buf->a.allocated)
 			ltt_chanbuf_release_read(citer->buf);
 	}
 	WARN_ON_ONCE(iter->nr_refs);
@@ -505,17 +512,23 @@ int ltt_ascii_create(struct ltt_chan *chan)
 
 	dentry = debugfs_create_file(chan->a.filename,
 				     S_IRUSR | S_IRGRP,
-				     trace->dentry.ascii_root,
+				     chan->trace->dentry.ascii_root,
 				     chan, &ltt_ascii_fops);
-	if (dentry)
-		dentry->d_inode->i_private = chan;
-	return PTR_ERR(dentry);
+	if (IS_ERR(dentry))
+		return PTR_ERR(dentry);
+
+	if (!dentry)
+		return -EEXIST;
+
+	chan->a.ascii_dentry = dentry;
+	dentry->d_inode->i_private = chan;
+	return 0;
 }
 EXPORT_SYMBOL_GPL(ltt_ascii_create);
 
 void ltt_ascii_remove(struct ltt_chan *chan)
 {
-	debugfs_remove(chan->ascii_dentry);
+	debugfs_remove(chan->a.ascii_dentry);
 }
 EXPORT_SYMBOL_GPL(ltt_ascii_remove);
 
-- 
1.6.5.2

