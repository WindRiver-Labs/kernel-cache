From 094f2ebe3595cade698ec3a1159a50911b07dd97 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 13 May 2010 19:28:24 -0400
Subject: [PATCH 352/390] idle-notifier-x86_32-fix

idle notifier x86_32 fix

- Comment cleanup
- Fix apm.c for 32-bit. Need to include asm/idle.h and need __exit_idle symbol.
  Therefore, x86 64 __exit_idle must become non-static too.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 arch/x86/include/asm/idle.h  |    1 +
 arch/x86/kernel/apm_32.c     |    9 ++++++---
 arch/x86/kernel/process_32.c |   10 ++++++----
 arch/x86/kernel/process_64.c |    2 +-
 4 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/arch/x86/include/asm/idle.h b/arch/x86/include/asm/idle.h
index c288e3c..778b3a1 100644
--- a/arch/x86/include/asm/idle.h
+++ b/arch/x86/include/asm/idle.h
@@ -2,6 +2,7 @@
 #define _ASM_X86_IDLE_H
 
 void enter_idle(void);
+void __exit_idle(void);
 void exit_idle(void);
 
 void c1e_remove_cpu(int cpu);
diff --git a/arch/x86/kernel/apm_32.c b/arch/x86/kernel/apm_32.c
index 8f8a0a6..6fe90a5 100644
--- a/arch/x86/kernel/apm_32.c
+++ b/arch/x86/kernel/apm_32.c
@@ -236,6 +236,7 @@
 #include <asm/olpc.h>
 #include <asm/paravirt.h>
 #include <asm/reboot.h>
+#include <asm/idle.h>
 
 #if defined(CONFIG_APM_DISPLAY_BLANK) && defined(CONFIG_VT)
 extern int (*console_blank_hook)(int);
@@ -953,9 +954,11 @@ recalc:
 			original_pm_idle();
 		else
 			default_idle();
-		/* In many cases the interrupt that ended idle
-		   has already called exit_idle. But some idle
-		   loops can be woken up without interrupt. */
+		/*
+		 * In many cases the interrupt that ended idle
+		 * has already called exit_idle. But some idle
+		 * loops can be woken up without interrupt.
+		 */
 		__exit_idle();
 		local_irq_disable();
 		jiffies_since_last_check = jiffies - last_jiffies;
diff --git a/arch/x86/kernel/process_32.c b/arch/x86/kernel/process_32.c
index b9a72d3..59a13a2 100644
--- a/arch/x86/kernel/process_32.c
+++ b/arch/x86/kernel/process_32.c
@@ -75,7 +75,7 @@ void enter_idle(void)
 	notify_idle(IDLE_START);
 }
 
-static void __exit_idle(void)
+void __exit_idle(void)
 {
 	if (x86_test_and_clear_bit_percpu(0, is_idle) == 0)
 		return;
@@ -145,9 +145,11 @@ void cpu_idle(void)
 			stop_critical_timings();
 			pm_idle();
 			start_critical_timings();
-			/* In many cases the interrupt that ended idle
-			   has already called exit_idle. But some idle
-			   loops can be woken up without interrupt. */
+			/*
+			 * In many cases the interrupt that ended idle
+			 * has already called exit_idle. But some idle
+			 * loops can be woken up without interrupt.
+			 */
 			__exit_idle();
 		}
 		tick_nohz_restart_sched_tick();
diff --git a/arch/x86/kernel/process_64.c b/arch/x86/kernel/process_64.c
index 59b1b8a..6b5fb67 100644
--- a/arch/x86/kernel/process_64.c
+++ b/arch/x86/kernel/process_64.c
@@ -73,7 +73,7 @@ void enter_idle(void)
 	notify_idle(IDLE_START);
 }
 
-static void __exit_idle(void)
+void __exit_idle(void)
 {
 	if (x86_test_and_clear_bit_percpu(0, is_idle) == 0)
 		return;
-- 
1.6.5.2

