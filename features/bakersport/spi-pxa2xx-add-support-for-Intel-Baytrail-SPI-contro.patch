From fa04fb7054f12972e06467e942964af2924eadd0 Mon Sep 17 00:00:00 2001
From: fupan li <fupan.li@windriver.com>
Date: Thu, 31 Oct 2013 18:35:08 +0800
Subject: [PATCH 13/13] spi-pxa2xx: add support for Intel Baytrail SPI
 controller

Intel Baytrail has 1 SPI controller which can be PCI or ACPI enumerated.
This patch is picked from meta-baytrail of YP BSP. It can be accessed from
https://s3-us-west-2.amazonaws.com/isg-downloads/betav2/index.html

Signed-off-by: Chang, Rebecca Swee Fun <rebecca.swee.fun.chang@intel.com>
Signed-off-by: fupan li <fupan.li@windriver.com>
---
 drivers/spi/spi-pxa2xx-pci.c | 86 ++++++++++++++++++++++++++++++++++++--------
 1 file changed, 71 insertions(+), 15 deletions(-)

diff --git a/drivers/spi/spi-pxa2xx-pci.c b/drivers/spi/spi-pxa2xx-pci.c
index 74bc187..7bd4d59 100644
--- a/drivers/spi/spi-pxa2xx-pci.c
+++ b/drivers/spi/spi-pxa2xx-pci.c
@@ -7,10 +7,52 @@
 #include <linux/of_device.h>
 #include <linux/module.h>
 #include <linux/spi/pxa2xx_spi.h>
+#include <linux/clk.h>
 
-static int ce4100_spi_probe(struct pci_dev *dev,
+static bool use_dma = 1;
+module_param(use_dma, bool, 0);
+MODULE_PARM_DESC(use_dma, "use_dma=1 (enable DMA)/use_dma=0(disable DMA)");
+
+enum {
+	PORT_CE4100,
+	PORT_BYT,
+};
+
+struct pxa2xx_spi_pci_config {
+	enum pxa_ssp_type type;
+	int num_cs;
+	int bus_num;
+	int tx_slave_id;
+	int tx_chan_id;
+	int rx_slave_id;
+	int rx_chan_id;
+};
+
+static struct pxa2xx_spi_pci_config spi_pci_configs[] = {
+	[PORT_CE4100] = {
+		.type = PXA25x_SSP,
+		.num_cs =  -1,
+		.bus_num = -1,
+		.tx_slave_id = -1,
+		.tx_chan_id = -1,
+		.rx_slave_id = -1,
+		.rx_chan_id = -1,
+	},
+	[PORT_BYT] = {
+		.type = LPSS_SSP,
+		.num_cs = 1,
+		.bus_num = 0,
+		.tx_slave_id = 0,
+		.tx_chan_id = 0,
+		.rx_slave_id = 1,
+		.rx_chan_id = 1,
+	},
+};
+
+static int pxa2xx_spi_probe(struct pci_dev *dev,
 		const struct pci_device_id *ent)
 {
+	struct pxa2xx_spi_pci_config *c;
 	struct platform_device_info pi;
 	int ret;
 	struct platform_device *pdev;
@@ -25,8 +67,18 @@ static int ce4100_spi_probe(struct pci_dev *dev,
 	if (ret)
 		return ret;
 
+	c = &spi_pci_configs[ent->driver_data];
+
 	memset(&spi_pdata, 0, sizeof(spi_pdata));
-	spi_pdata.num_chipselect = dev->devfn;
+	spi_pdata.num_chipselect = (c->num_cs >= 0) ? c->num_cs : dev->devfn;
+//	spi_pdata.num_chipselect = dev->devfn;
+
+	spi_pdata.tx_slave_id = c->tx_slave_id;
+	spi_pdata.tx_chan_id = c->tx_chan_id;
+	spi_pdata.rx_slave_id = c->rx_slave_id;
+	spi_pdata.rx_chan_id = c->rx_chan_id;
+	if (use_dma)
+	       	spi_pdata.enable_dma = c->rx_slave_id >= 0 && c->tx_slave_id >= 0;
 
 	ssp = &spi_pdata.ssp;
 	ssp->phys_base = pci_resource_start(dev, 0);
@@ -35,9 +87,10 @@ static int ce4100_spi_probe(struct pci_dev *dev,
 		dev_err(&dev->dev, "failed to ioremap() registers\n");
 		return -EIO;
 	}
+	ssp->clk =  devm_clk_get(&dev->dev, NULL);
 	ssp->irq = dev->irq;
-	ssp->port_id = dev->devfn;
-	ssp->type = PXA25x_SSP;
+	ssp->port_id = (c->bus_num >= 0) ? c->bus_num : dev->devfn;
+	ssp->type = c->type;
 
 	memset(&pi, 0, sizeof(pi));
 	pi.parent = &dev->dev;
@@ -55,28 +108,31 @@ static int ce4100_spi_probe(struct pci_dev *dev,
 	return 0;
 }
 
-static void ce4100_spi_remove(struct pci_dev *dev)
+static void pxa2xx_spi_remove(struct pci_dev *dev)
 {
 	struct platform_device *pdev = pci_get_drvdata(dev);
 
 	platform_device_unregister(pdev);
 }
 
-static DEFINE_PCI_DEVICE_TABLE(ce4100_spi_devices) = {
-	{ PCI_DEVICE(PCI_VENDOR_ID_INTEL, 0x2e6a) },
+static DEFINE_PCI_DEVICE_TABLE(pxa2xx_spi_devices) = {
+	{ PCI_DEVICE(PCI_VENDOR_ID_INTEL, 0x2e6a),
+	  .driver_data =  PORT_CE4100 },
+	{ PCI_DEVICE(PCI_VENDOR_ID_INTEL, 0x0f0e),
+	  .driver_data = PORT_BYT },
 	{ },
 };
-MODULE_DEVICE_TABLE(pci, ce4100_spi_devices);
+MODULE_DEVICE_TABLE(pci, pxa2xx_spi_devices);
 
-static struct pci_driver ce4100_spi_driver = {
-	.name           = "ce4100_spi",
-	.id_table       = ce4100_spi_devices,
-	.probe          = ce4100_spi_probe,
-	.remove         = ce4100_spi_remove,
+static struct pci_driver pxa2xx_spi_driver = {
+	.name           = "pxa2xx_spi",
+	.id_table       = pxa2xx_spi_devices,
+	.probe          = pxa2xx_spi_probe,
+	.remove         = pxa2xx_spi_remove,
 };
 
-module_pci_driver(ce4100_spi_driver);
+module_pci_driver(pxa2xx_spi_driver);
 
-MODULE_DESCRIPTION("CE4100 PCI-SPI glue code for PXA's driver");
+MODULE_DESCRIPTION("PCI-SPI glue code for PXA's driver");
 MODULE_LICENSE("GPL v2");
 MODULE_AUTHOR("Sebastian Andrzej Siewior <bigeasy@linutronix.de>");
-- 
1.8.4.93.g57e4c17

