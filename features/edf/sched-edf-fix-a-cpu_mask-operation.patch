From 1daee392467803821528c884d10aa5f7a3c58d63 Mon Sep 17 00:00:00 2001
From: Liang Li <liang.li@windriver.com>
Date: Thu, 24 Jan 2013 14:36:58 +0800
Subject: [PATCH] sched: edf: fix a cpu_mask operation

Taken from
https://github.com/jlelli/sched-deadline.git
commit e6c6e297920602b31a409622c5e542e45ee1bd8a

We introduced bandwidth control for SCHED_DL tasks. The current
cpu_equal code doesn't match with comments.

When running either one of the below situations like:

0. Running a 2 cores SMP machine or,
1. Running 4 cores SMP machine then offline one core or,
2. Running 8 cores SMP machine then offline one core etc etc.

Then run 'schedtool -E -t 500:10000 -e yes' will trigger the case that
the task->cpus_allowed doesn't match/equal with rq->rd->span hence
end with 'EPERM'.

Signed-off-by: Liang Li <liang.li@windriver.com>
---
 kernel/sched/core.c |   11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index ad21e41..e6fc010 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -4594,13 +4594,22 @@ recheck:
 #ifdef CONFIG_SMP
 		if (dl_bandwidth_enabled() && dl_policy(policy)) {
 			const struct cpumask *span = rq->rd->span;
+			cpumask_t act_affinity;
+
+			/*
+			 * cpus_allowed mask is statically initialized with
+			 * CPU_MASK_ALL, span is instead dynamic. Here we
+			 * compute the "dynamic" affinity of a task.
+			 */
+			cpumask_and(&act_affinity, &p->cpus_allowed,
+						cpu_active_mask);
 
 			/*
 			 * Don't allow tasks with an affinity mask smaller than
 			 * the entire root_domain to become SCHED_DEADLINE. We
 			 * will also fail if there's no bandwidth available.
 			 */
-			if (!cpumask_equal(&p->cpus_allowed, span) ||
+			if (!cpumask_equal(&act_affinity, span) ||
 			    rq->rd->dl_bw.bw == 0) {
 				__task_rq_unlock(rq);
 				raw_spin_unlock_irqrestore(&p->pi_lock, flags);
-- 
1.7.9.7

