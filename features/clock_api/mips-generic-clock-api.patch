From bc43c4b8f9a59cafb54afb9050c8787fcdaca960 Mon Sep 17 00:00:00 2001
From: Chunbo Luo <chunbo.luo@windriver.com>
Date: Fri, 12 Sep 2008 10:28:19 +0800
Subject: [PATCH] mips: generic clock api

Generic HWTimer implementation for MIPS architecture.The CP0
COUNT/COMPARE is used as a hardware timer resource. Please
select SYS_R4K_CVET_HWTIMER in Kconfig to enable this feature.

Signed-off-by: Chunbo Luo <chunbo.luo@windriver.com>
---
 arch/mips/Kconfig           |    2 ++
 arch/mips/kernel/cevt-r4k.c |   38 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 40 insertions(+), 0 deletions(-)

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index f3f4cac..b537307 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -1228,6 +1228,8 @@ config SYS_HAS_CPU_RM9000
 config SYS_HAS_CPU_SB1
 	bool
 
+config SYS_R4K_CVET_HWTIMER
+	bool
 #
 # CPU may reorder R->R, R->W, W->R, W->W
 # Reordering beyond LL and SC is handled in WEAK_REORDERING_BEYOND_LLSC
diff --git a/arch/mips/kernel/cevt-r4k.c b/arch/mips/kernel/cevt-r4k.c
index 24a2d90..489f51e 100644
--- a/arch/mips/kernel/cevt-r4k.c
+++ b/arch/mips/kernel/cevt-r4k.c
@@ -13,6 +13,35 @@
 #include <asm/smtc_ipi.h>
 #include <asm/time.h>
 
+#if defined (CONFIG_SYS_R4K_CVET_HWTIMER) && defined (CONFIG_HWTIMER_HOOKS)
+#include <linux/hwtimer.h>
+static int mips_timer_get_freq(void)
+{
+	return HZ;
+}
+
+static struct hwtimer_data mips_timer_data = {
+	.name = "MIPS Generic timer",
+	.desc = "MIPS Generic Kernel jiffy timer",
+	.def_freq = HZ,
+	.min_freq = HZ,
+	.max_freq = HZ
+};
+
+static DECLARE_HWTIMER_LOCK(mips_timer_lock);
+
+static struct hwtimer mips_hwtimer = {
+	.data = &mips_timer_data,
+	.set_freq = NULL,
+	.get_freq = mips_timer_get_freq,
+	.start = NULL,
+	.stop = NULL,
+	.lock = &mips_timer_lock,
+	.hook = NULL,
+	.hook_data = NULL
+};
+#endif
+
 static int mips_next_event(unsigned long delta,
                            struct clock_event_device *evt)
 {
@@ -103,6 +132,12 @@ static irqreturn_t c0_compare_interrupt(int irq, void *dev_id)
 		cd->event_handler(cd);
 	}
 
+#if defined (CONFIG_SYS_R4K_CVET_HWTIMER) && defined (CONFIG_HWTIMER_HOOKS)
+	spin_lock(mips_hwtimer.lock);
+	if (mips_hwtimer.hook != NULL)
+		(mips_hwtimer.hook)(mips_hwtimer.hook_data);
+	spin_unlock(mips_hwtimer.lock);
+#endif
 out:
 	return IRQ_HANDLED;
 }
@@ -243,6 +278,9 @@ int __cpuinit mips_clockevent_init(void)
 	if (!c0_compare_int_usable())
 		return -ENXIO;
 
+#if defined (CONFIG_SYS_R4K_CVET_HWTIMER) && defined (CONFIG_HWTIMER_HOOKS)
+	register_hwtimer(&mips_hwtimer);
+#endif
 	/*
 	 * With vectored interrupts things are getting platform specific.
 	 * get_c0_compare_int is a hook to allow a platform to return the
-- 
1.5.5.1

