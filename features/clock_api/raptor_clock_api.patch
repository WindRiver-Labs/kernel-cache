Add clock API support for broadcom_bcm_ntswics.

wrs_severity: critical
wrs_scope: bsp

Signed-off-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 arch/mips/brcm/bcm56218/time.c |   40 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 40 insertions(+)

--- a/arch/mips/brcm/bcm56218/time.c
+++ b/arch/mips/brcm/bcm56218/time.c
@@ -33,6 +33,36 @@
 #include <asm/brcm/sbmips.h>
 #include <asm/brcm/bcmtime.h>
 
+#ifdef CONFIG_HWTIMER_HOOKS 
+#include <linux/hwtimer.h>
+
+static int raptor_timer_get_freq(void)
+{
+	return HZ;
+}
+
+static struct hwtimer_data raptor_timer_data = {
+	name: "BCM NTSWICS timer",
+	desc: "BCM_NTSWICS Kernel jiffy timer",
+	def_freq: HZ,
+	min_freq: HZ,
+	max_freq: HZ
+};
+
+static DECLARE_HWTIMER_LOCK(raptor_timer_lock);
+
+static struct hwtimer raptor_timer = {
+	data: &raptor_timer_data,
+	set_freq: NULL,
+	get_freq: raptor_timer_get_freq,
+	start: NULL,
+	stop: NULL,
+	lock: &raptor_timer_lock,
+	hook: NULL,
+	hook_data: NULL
+};
+#endif	/* CONFIG_HWTIMER_HOOKS */
+
 extern void *bcm956218_sbh;
 extern spinlock_t bcm956218_sbh_lock;
 
@@ -80,6 +110,13 @@ void __init plat_timer_setup(struct irqa
 static irqreturn_t
 bcm956218_timer_interrupt(int irq, void *dev_id)
 {
+#ifdef CONFIG_HWTIMER_HOOKS
+	spin_lock(raptor_timer.lock);
+	if (raptor_timer.hook != NULL) {
+		(raptor_timer.hook) (raptor_timer.hook_data);
+	}
+	spin_unlock(raptor_timer.lock);
+#endif	/* CONFIG_HWTIMER_HOOKS */
 
 	/* Generic MIPS timer code */
 	timer_interrupt(irq, dev_id);
@@ -102,6 +139,9 @@ static struct irqaction bcm956218_timer_
 
 void __init bcm956218_timer_setup(struct irqaction *irq)
 {
+#ifdef CONFIG_HWTIMER_HOOKS
+	register_hwtimer(&raptor_timer);
+#endif /* CONFIG_HWTIMER_HOOKS */
 	/* Enable the timer interrupt */
 	setup_irq(7, &bcm956218_timer_irqaction);
 }
