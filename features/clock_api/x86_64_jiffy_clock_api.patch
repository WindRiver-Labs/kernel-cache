From 0f4a1ed62b1d1390376046b72ca4dc42280a1e56 Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Thu, 3 Jul 2008 16:27:03 -0400
Subject: [PATCH] ased clock_api timer source for x86_64 timer irq0. Note that

this requires the boot argument "noapictimer" -- otherwise the APIC timer
will replace the irq0 timer on APIC capable boards.
---
 arch/x86/kernel/time_64.c |   46 +++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 46 insertions(+), 0 deletions(-)

diff --git a/arch/x86/kernel/time_64.c b/arch/x86/kernel/time_64.c
index e3d49c5..1a8135f 100644
--- a/arch/x86/kernel/time_64.c
+++ b/arch/x86/kernel/time_64.c
@@ -24,6 +24,42 @@
 #include <asm/time.h>
 #include <asm/timer.h>
 
+#if defined(CONFIG_HWTIMER_HOOKS) && defined(CONFIG_PREEMPT_RT)
+#define HWTIMER_USE_JIFFY 1
+#endif
+
+#ifdef HWTIMER_USE_JIFFY
+
+#include <linux/hwtimer.h>
+
+static int x86_64_timer_get_freq(void)
+{
+	return HZ;
+}
+
+static struct hwtimer_data x86_64_timer_data = {
+	name: "x86_64 timer",
+	desc: "x86_64 kernel jiffy timer",
+	def_freq: HZ,
+	min_freq: HZ,
+	max_freq: HZ
+};
+
+static DECLARE_HWTIMER_LOCK(x86_64_timer_lock);
+
+static struct hwtimer x86_64_timer = {
+	data: &x86_64_timer_data,
+	set_freq: NULL,
+	get_freq: x86_64_timer_get_freq,
+	start: NULL,
+	stop: NULL,
+	lock: &x86_64_timer_lock,
+	hook: NULL,
+	hook_data: NULL
+};
+
+#endif 	/* USE JIFFY */
+
 volatile unsigned long __jiffies __section_jiffies = INITIAL_JIFFIES;
 
 unsigned long profile_pc(struct pt_regs *regs)
@@ -50,6 +86,11 @@ static irqreturn_t timer_event_interrupt(int irq, void *dev_id)
 
 	global_clock_event->event_handler(global_clock_event);
 
+#if defined(HWTIMER_USE_JIFFY)
+	if (x86_64_timer.hook != NULL)
+		(x86_64_timer.hook) (x86_64_timer.hook_data);
+#endif
+
 	return IRQ_HANDLED;
 }
 
@@ -122,5 +163,10 @@ void __init time_init(void)
 	else
 		vgetcpu_mode = VGETCPU_LSL;
 
+
 	late_time_init = choose_time_init();
+
+#if defined(HWTIMER_USE_JIFFY)
+	register_hwtimer(&x86_64_timer);
+#endif
 }
-- 
1.5.5.1

