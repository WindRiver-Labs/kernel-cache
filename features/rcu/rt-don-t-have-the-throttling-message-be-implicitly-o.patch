From c1c34e7ef8998a4bd86ffcc77fcba999ada56a48 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Tue, 22 Apr 2014 14:57:35 -0400
Subject: [PATCH] rt: don't have the throttling message be implicitly one-shot.

If a rogue RT process eats more of its allocated time than it should,
the throttling message is emitted.  However it is currently a one-shot
message, and yet there is nothing indicating that it is one shot.

Meaning that Joe User could see the message, and then adjust his
system configuration, and falsely conclude that he'd "fixed" the
issue since he no longer sees the message.  When in reality, a
reboot is currently required in order to re-enable it.

Here we extend the message to be ratelimited once per 10s.  Plus we
add the ability for the end user to disable/enable the messages
without having to go through a reboot.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/sched/sysctl.h b/include/linux/sched/sysctl.h
index d2bb0ae979d0..72e2cae1e5ba 100644
--- a/include/linux/sched/sysctl.h
+++ b/include/linux/sched/sysctl.h
@@ -83,6 +83,8 @@ static inline unsigned int get_sysctl_timer_migration(void)
 extern unsigned int sysctl_sched_rt_period;
 extern int sysctl_sched_rt_runtime;
 
+extern int sched_rt_throttle_warn;
+
 #ifdef CONFIG_CFS_BANDWIDTH
 extern unsigned int sysctl_sched_cfs_bandwidth_slice;
 #endif
diff --git a/kernel/sched/rt.c b/kernel/sched/rt.c
index 11e91708a4b4..cad5840448da 100644
--- a/kernel/sched/rt.c
+++ b/kernel/sched/rt.c
@@ -8,6 +8,7 @@
 #include <linux/slab.h>
 
 int sched_rr_timeslice = RR_TIMESLICE;
+int sched_rt_throttle_warn = 1;
 
 static int do_sched_rt_period_timer(struct rt_bandwidth *rt_b, int overrun);
 
@@ -878,13 +879,16 @@ static int sched_rt_runtime_exceeded(struct rt_rq *rt_rq)
 		 * but accrue some time due to boosting.
 		 */
 		if (likely(rt_b->rt_runtime)) {
-			static bool once = false;
 
 			rt_rq->rt_throttled = 1;
 
-			if (!once) {
-				once = true;
-				printk_deferred("sched: RT throttling activated\n");
+			if (sched_rt_throttle_warn) {
+				static unsigned long last = INITIAL_JIFFIES;
+
+				if (time_after(jiffies, last + 10*HZ)) {
+					printk_deferred("sched: RT throttling activated\n");
+					last = jiffies;
+				}
 			}
 		} else {
 			/*
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 8c1f378de691..93fbfdbd8273 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -359,6 +359,15 @@ static struct ctl_table kern_table[] = {
 		.proc_handler	= sched_rt_handler,
 	},
 	{
+		.procname	= "sched_rt_throttle_warn",
+		.data		= &sched_rt_throttle_warn,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec_minmax,
+		.extra1		= &zero,
+		.extra2		= &one,
+	},
+	{
 		.procname	= "sched_rr_timeslice_ms",
 		.data		= &sched_rr_timeslice,
 		.maxlen		= sizeof(int),
-- 
2.0.1

