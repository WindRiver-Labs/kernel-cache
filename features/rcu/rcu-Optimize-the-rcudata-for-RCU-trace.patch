From fe99f82ae87a2e307e8a37919127b55b7e249493 Mon Sep 17 00:00:00 2001
From: Michael Wang <wangyun@linux.vnet.ibm.com>
Date: Thu, 20 Sep 2012 08:51:04 +0800
Subject: [PATCH] rcu: Optimize the 'rcudata' for RCU trace

commit 878eda72e24d11e463a25b1dc7097a8d953f17cb upstream.

This patch implements the new 'rcudata' interface under each rsp
directory, by using the 'CPU units sequence reading', thus avoiding loss
of tracing data.

Signed-off-by: Michael Wang <wangyun@linux.vnet.ibm.com>
Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
Signed-off-by: Yang Shi <yang.shi@windriver.com>

diff --git a/kernel/rcutree_trace.c b/kernel/rcutree_trace.c
index 0dfe9b5..a11522f 100644
--- a/kernel/rcutree_trace.c
+++ b/kernel/rcutree_trace.c
@@ -174,6 +174,32 @@ static const struct file_operations rcudata_fops = {
 	.release = single_release,
 };
 
+static int new_show_rcudata(struct seq_file *m, void *v)
+{
+	print_one_rcu_data(m, (struct rcu_data *)v);
+	return 0;
+}
+
+static const struct seq_operations new_rcudate_op = {
+	.start = r_start,
+	.next  = r_next,
+	.stop  = r_stop,
+	.show  = new_show_rcudata,
+};
+
+static int new_rcudata_open(struct inode *inode, struct file *file)
+{
+	return r_open(inode, file, &new_rcudate_op);
+}
+
+static const struct file_operations new_rcudata_fops = {
+	.owner = THIS_MODULE,
+	.open = new_rcudata_open,
+	.read = seq_read,
+	.llseek = no_llseek,
+	.release = seq_release,
+};
+
 static void print_one_rcu_data_csv(struct seq_file *m, struct rcu_data *rdp)
 {
 	if (!rdp->beenonline)
@@ -488,6 +514,11 @@ static int __init rcutree_trace_init(void)
 		rspdir = debugfs_create_dir(rsp->name, rcudir);
 		if (!rspdir)
 			goto free_out;
+
+			retval = debugfs_create_file("rcudata", 0444,
+					rspdir, rsp, &new_rcudata_fops);
+			if (!retval)
+				goto free_out;
 	}
 
 	retval = debugfs_create_file("rcubarrier", 0444, rcudir,
-- 
1.7.5.4

