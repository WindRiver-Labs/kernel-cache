From ed8b1729b5fd1027e3099dbf3007421e6479db15 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 19 Dec 2012 13:22:29 -0500
Subject: [PATCH] rcu: extend no call back to include kfree_call_rcu (lazy)

In commit 3fbfbf7a3b66 ("rcu: Add callback-free CPUs") the
concept of being able to isolate CPUs from some of the RCU
callback overhead was introduced.

This was done by adding a cpu variable to __call_rcu() that
is normally -1 to indicate it should use the current cpu.
If it is not -1, but a number that is one of the cores nominated
for nocb offloading, then the callback is farmed out for some
other (non-nocb) core to handle.

The initial offload was limited to calls of __call_rcu()
within _rcu_barrier() but here we extend that to also include
all the (lazy) callbacks done via kfree_call_rcu() to increase
the isolation effect.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
Signed-off-by: Yang Shi <yang.shi@windriver.com>

diff --git a/kernel/rcutree.c b/kernel/rcutree.c
index 226955e..254a36b 100644
--- a/kernel/rcutree.c
+++ b/kernel/rcutree.c
@@ -2196,7 +2196,7 @@ static void __call_rcu_core(struct rcu_state *rsp, struct rcu_data *rdp,
  * Helper function for call_rcu() and friends.  The cpu argument will
  * normally be -1, indicating "currently running CPU".  It may specify
  * a CPU only if that CPU is a no-CBs CPU.  Currently, only _rcu_barrier()
- * is expected to specify a CPU.
+ * and kfree_call_rcu() specify a CPU.
  */
 static void
 __call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu),
diff --git a/kernel/rcutree_plugin.h b/kernel/rcutree_plugin.h
index d288fc0..a9fb1da 100644
--- a/kernel/rcutree_plugin.h
+++ b/kernel/rcutree_plugin.h
@@ -1041,11 +1041,18 @@ static void rcu_preempt_check_callbacks(int cpu)
  * function may only be called from __kfree_rcu().
  *
  * Because there is no preemptible RCU, we use RCU-sched instead.
+ * If a core is nominated as nocb, we don't bother that core with
+ * any of the kfree lazy work.
  */
 void kfree_call_rcu(struct rcu_head *head,
 		    void (*func)(struct rcu_head *rcu))
 {
-	__call_rcu(head, func, &rcu_sched_state, -1, 1);
+	int cpu = smp_processor_id();
+
+	if (!is_nocb_cpu(cpu))
+		cpu = -1;
+
+	__call_rcu(head, func, &rcu_sched_state, cpu, 1);
 }
 EXPORT_SYMBOL_GPL(kfree_call_rcu);
 
-- 
1.7.5.4

