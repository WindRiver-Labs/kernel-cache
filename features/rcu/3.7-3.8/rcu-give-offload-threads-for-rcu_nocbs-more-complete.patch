From 727828dcb8c34e1be4ee3a4ec39dc9f055ea6f0a Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Mon, 17 Dec 2012 13:50:51 -0500
Subject: [PATCH] rcu: give offload threads for rcu_nocbs more complete names

The ability to isolate cores from rcu callbacks creates two
or three threads per offloaded core, for each flavour of
callback (bh, sched, preempt).  But each thread is currently
just named with "rcuo%d" (o=offload, %d=core).  Since we have
the type conveniently available to us, append the type to the
name, so we don't get "Why do I have three of these?" type
questions.  With this change, the offloads appear as follows:

	$ cat /proc/cmdline
	ro root=/dev/sda1 rcu_nocbs=1
	$ ps ax|grep rcu
	    9 ?        S      0:00 [rcu_bh]
	   10 ?        D      0:00 [rcuo1_bh]
	   11 ?        S      0:00 [rcu_sched]
	   12 ?        D      0:00 [rcuo1_sched]

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
Signed-off-by: Yang Shi <yang.shi@windriver.com>

diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index 919b329..a12bd20 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -2366,7 +2366,7 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 			In kernels built with CONFIG_RCU_NOCB_CPU=y, set
 			the specified list of CPUs to be no-callback CPUs.
 			Invocation of these CPUs' RCU callbacks will
-			be offloaded to "rcuoN" kthreads created for
+			be offloaded to "rcuoN_*" kthreads created for
 			that purpose.  This reduces OS jitter on the
 			offloaded CPUs, which can be useful for HPC and
 			real-time workloads.  It can also improve energy
diff --git a/init/Kconfig b/init/Kconfig
index e483d86..624f5df 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -603,8 +603,9 @@ config RCU_NOCB_CPU
 
 	  This option offloads callback invocation from the set of
 	  CPUs specified at boot time by the rcu_nocbs parameter.
-	  For each such CPU, a kthread ("rcuoN") will be created to
+	  For each such CPU, several kthread ("rcuoN*") are created to
 	  invoke callbacks, where the "N" is the CPU being offloaded.
+	  The suffix for "*" above will be _bh, _sched, or _preempt.
 	  Nothing prevents this kthread from running on the specified
 	  CPUs, but (1) the kthreads may be preempted between each
 	  callback, and (2) affinity or cgroups can be used to force
diff --git a/kernel/rcutree_plugin.h b/kernel/rcutree_plugin.h
index 7f895a2..c532711 100644
--- a/kernel/rcutree_plugin.h
+++ b/kernel/rcutree_plugin.h
@@ -2432,7 +2432,8 @@ static void __init rcu_spawn_nocb_kthreads(struct rcu_state *rsp)
 		return;
 	for_each_cpu(cpu, rcu_nocb_mask) {
 		rdp = per_cpu_ptr(rsp->rda, cpu);
-		t = kthread_run(rcu_nocb_kthread, rdp, "rcuo%d", cpu);
+		t = kthread_run(rcu_nocb_kthread, rdp, "rcuo%d%s", cpu,
+				rsp->name + 3); /* +3 -> skip rcu prefix */
 		BUG_ON(IS_ERR(t));
 		ACCESS_ONCE(rdp->nocb_kthread) = t;
 	}
-- 
1.7.5.4

