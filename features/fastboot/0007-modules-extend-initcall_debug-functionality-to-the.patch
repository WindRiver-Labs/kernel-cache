From 713e002b72ddf14ddbd1f8828e06501769afd59c Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan@linux.intel.com>
Date: Thu, 17 Jul 2008 12:24:06 -0700
Subject: [PATCH] modules: extend initcall_debug functionality to the module loader

The kernel has this really nice facility where if you put "initcall_debug"
on the kernel commandline, it'll print which function it's going to execute
just before calling an initcall, and then after the call completes it will
1) print if it had an error code
2) checks for a few simple bugs (like leaving irqs off)
and
3) print how long the init call took in milliseconds.

While trying to optimize the boot speed of my laptop, I have been loving
number 3 to figure out what to optimize...
... and then I wished that the same thing was done for module loading.

This patch makes the module loader use this exact same functionality;
it's a logical extension in my view (since modules are just sort of
late binding initcalls anyway) and so far I've found it quite useful
in finding where things are too slow in my boot.

Signed-off-by: Arjan van de Ven <arjan@linux.intel.com>
Signed-off-by: Ingo Molnar <mingo@elte.hu>
---
 include/linux/init.h |    2 ++
 init/main.c          |    2 ++
 2 files changed, 4 insertions(+), 0 deletions(-)

diff --git a/include/linux/init.h b/include/linux/init.h
index 548a0cd..b6201c0 100644
--- a/include/linux/init.h
+++ b/include/linux/init.h
@@ -143,6 +143,8 @@ extern int do_one_initcall(initcall_t fn);
 extern char __initdata boot_command_line[];
 extern char *saved_command_line;
 extern unsigned int reset_devices;
+extern int do_one_initcall(initcall_t fn);
+
 
 /* used by init/main.c */
 void setup_arch(char **);
diff --git a/init/main.c b/init/main.c
index 6bf2706..625a750 100644
--- a/init/main.c
+++ b/init/main.c
@@ -410,6 +410,8 @@ static void __init setup_per_cpu_areas(void)
 		memcpy(ptr, __per_cpu_start, __per_cpu_end - __per_cpu_start);
 		ptr += size;
 	}
+
+	return result;
 }
 #endif /* CONFIG_HAVE_SETUP_PER_CPU_AREA */
 
-- 
1.5.5.1

