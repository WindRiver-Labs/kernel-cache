From b5baffe82028179e6ec69acdee9c194a29adc560 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Fri, 1 Nov 2002 14:55:58 +0000
Subject: [PATCH] Added /proc/fusion/fusionees. Minor cleanup. Added locking to fusionee code.

---
 drivers/char/fusion/fusiondev.c |   57 +++++++-----
 drivers/char/fusion/fusionee.c  |  182 +++++++++++++++++++++++++++++++++++++--
 drivers/char/fusion/fusionee.h  |   17 +++-
 drivers/char/fusion/list.h      |    3 +
 drivers/char/fusion/ref.c       |   41 +++++----
 drivers/char/fusion/ref.h       |   18 +++-
 6 files changed, 259 insertions(+), 59 deletions(-)

diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index eca0c91..023ac7d 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -40,13 +40,14 @@ struct proc_dir_entry *proc_fusion_dir;
 static int
 fusion_open (struct inode *inode, struct file *file)
 {
-  Fusionee *fusionee;
+  int ret;
+  int fusion_id;
 
-  fusionee = fusionee_new();
-  if (!fusionee)
-    return -ENOMEM;
+  ret = fusionee_new (&fusion_id);
+  if (ret)
+    return ret;
 
-  file->private_data = fusionee;
+  file->private_data = (void*) fusion_id;
 
   return 0;
 }
@@ -54,11 +55,9 @@ fusion_open (struct inode *inode, struct file *file)
 static int
 fusion_release (struct inode *inode, struct file *file)
 {
-  Fusionee *fusionee = (Fusionee*) file->private_data;
-
-  fusion_ref_clear_all_local (fusionee);
+  int fusion_id = (int) file->private_data;
 
-  fusionee_destroy (fusionee);
+  fusionee_destroy (fusion_id);
 
   return 0;
 }
@@ -67,15 +66,15 @@ static int
 fusion_ioctl (struct inode *inode, struct file *file,
               unsigned int cmd, unsigned long arg)
 {
-  int       id;
-  int       ret;
-  int       refs;
-  Fusionee *fusionee = (Fusionee*) file->private_data;
+  int id;
+  int ret;
+  int refs;
+  int fusion_id = (int) file->private_data;
 
   switch (cmd)
     {
     case FUSION_GET_ID:
-      put_user (fusionee->fusion_id, (int*) arg);
+      put_user (fusion_id, (int*) arg);
       break;
 
     case FUSION_REF_NEW:
@@ -89,22 +88,22 @@ fusion_ioctl (struct inode *inode, struct file *file,
     case FUSION_REF_UP:
       get_user (id, (int*) arg);
 
-      return fusion_ref_up (id, fusionee);
+      return fusion_ref_up (id, fusion_id);
 
     case FUSION_REF_UP_GLOBAL:
       get_user (id, (int*) arg);
 
-      return fusion_ref_up (id, NULL);
+      return fusion_ref_up (id, 0);
 
     case FUSION_REF_DOWN:
       get_user (id, (int*) arg);
 
-      return fusion_ref_down (id, fusionee);
+      return fusion_ref_down (id, fusion_id);
 
     case FUSION_REF_DOWN_GLOBAL:
       get_user (id, (int*) arg);
 
-      return fusion_ref_down (id, NULL);
+      return fusion_ref_down (id, 0);
 
     case FUSION_REF_ZERO_LOCK:
       get_user (id, (int*) arg);
@@ -164,18 +163,29 @@ fusion_init(void)
 
   proc_fusion_dir = proc_mkdir ("fusion", NULL);
 
+  ret = fusionee_init();
+  if (ret)
+    goto error_fusionee;
+
   ret = fusion_ref_init();
   if (ret)
-    return ret;
+    goto error_ref;
 
   ret = misc_register (&fusion_miscdev);
   if (ret)
-    {
-      fusion_ref_cleanup();
-      return ret;
-    }
+    goto error_misc;
 
   return 0;
+
+
+ error_misc:
+  fusion_ref_cleanup();
+
+ error_ref:
+  fusionee_cleanup();
+
+ error_fusionee:
+  return ret;
 }
 
 static void __exit
@@ -184,6 +194,7 @@ fusion_exit(void)
   misc_deregister (&fusion_miscdev);
   
   fusion_ref_cleanup();
+  fusionee_cleanup();
 }
 
 module_init(fusion_init);
diff --git a/drivers/char/fusion/fusionee.c b/drivers/char/fusion/fusionee.c
index be1c9d1..05e8ce2 100644
--- a/drivers/char/fusion/fusionee.c
+++ b/drivers/char/fusion/fusionee.c
@@ -20,26 +20,192 @@
 
 #include <linux/fusion.h>
 
+#include "list.h"
+#include "fusiondev.h"
 #include "fusionee.h"
+#include "ref.h"
 
-static int fid = 1;
 
-Fusionee *
-fusionee_new()
+typedef struct {
+  FusionLink link;
+
+  spinlock_t lock;
+
+  int        id;
+  int        pid;
+} Fusionee;
+
+
+/******************************************************************************/
+
+static Fusionee *lookup_fusionee (int id);
+
+static Fusionee *lock_fusionee   (int id);
+static void      unlock_fusionee (Fusionee *fusionee);
+
+/******************************************************************************/
+
+static int         ids            = 1;
+static FusionLink *fusionees      = NULL;
+static spinlock_t  fusionees_lock = SPIN_LOCK_UNLOCKED;
+
+/******************************************************************************/
+
+static int
+fusionees_read_proc(char *buf, char **start, off_t offset,
+                    int len, int *eof, void *private)
+{
+  FusionLink *l;
+  int written = 0;
+
+  spin_lock (&fusionees_lock);
+
+  fusion_list_foreach (l, fusionees)
+    {
+      Fusionee *fusionee = (Fusionee*) l;
+
+      written += sprintf(buf+written, "(%5d) 0x%08x\n",
+                         fusionee->pid, fusionee->id);
+      if (written < offset)
+        {
+          offset -= written;
+          written = 0;
+        }
+
+      if (written >= len)
+        break;
+    }
+
+  spin_unlock (&fusionees_lock);
+
+  *start = buf + offset;
+  written -= offset;
+  if(written > len)
+    {
+      *eof = 0;
+      return len;
+    }
+
+  *eof = 1;
+  return (written<0) ? 0 : written;
+}
+
+int
+fusionee_init()
+{
+  create_proc_read_entry("fusionees", 0, proc_fusion_dir,
+                         fusionees_read_proc, NULL);
+
+  return 0;
+}
+
+void
+fusionee_cleanup()
+{
+  FusionLink *l = fusionees;
+
+  while (l)
+    {
+      FusionLink *next     = l->next;
+      Fusionee   *fusionee = (Fusionee *) l;
+
+      kfree (fusionee);
+
+      l = next;
+    }
+
+  fusionees = NULL;
+
+  remove_proc_entry ("fusionees", proc_fusion_dir);
+}
+
+/******************************************************************************/
+
+int
+fusionee_new (int *id)
 {
   Fusionee *fusionee;
 
   fusionee = kmalloc (sizeof(Fusionee), GFP_KERNEL);
   if (!fusionee)
-    return NULL;
+    return -ENOMEM;
 
-  fusionee->fusion_id = fid++;
+  memset (fusionee, 0, sizeof(Fusionee));
 
-  return fusionee;
+  spin_lock (&fusionees_lock);
+
+  fusionee->id   = ids++;
+  fusionee->pid  = current->pid;
+  fusionee->lock = SPIN_LOCK_UNLOCKED;
+
+  fusion_list_prepend (&fusionees, &fusionee->link);
+
+  spin_unlock (&fusionees_lock);
+
+  *id = fusionee->id;
+
+  return 0;
 }
 
-void
-fusionee_destroy (Fusionee *fusionee)
+int
+fusionee_destroy (int id)
 {
+  Fusionee *fusionee = lookup_fusionee (id);
+
+  if (!fusionee)
+    return -EINVAL;
+
+  spin_lock (&fusionee->lock);
+
+  fusion_list_remove (&fusionees, &fusionee->link);
+
+  fusion_ref_clear_all_local (id);
+
+  spin_unlock (&fusionees_lock);
+
   kfree (fusionee);
+
+  return 0;
+}
+
+/******************************************************************************/
+
+static Fusionee *
+lookup_fusionee (int id)
+{
+  FusionLink *l;
+
+  spin_lock (&fusionees_lock);
+
+  fusion_list_foreach (l, fusionees)
+    {
+      Fusionee *fusionee = (Fusionee *) l;
+
+      if (fusionee->id == id)
+        return fusionee;
+    }
+
+  spin_unlock (&fusionees_lock);
+
+  return NULL;
+}
+
+static Fusionee *
+lock_fusionee (int id)
+{
+  Fusionee *fusionee = lookup_fusionee (id);
+
+  if (fusionee)
+    {
+      spin_lock (&fusionee->lock);
+      spin_unlock (&fusionees_lock);
+    }
+
+  return fusionee;
+}
+
+static void
+unlock_fusionee (Fusionee *fusionee)
+{
+  spin_unlock (&fusionee->lock);
 }
diff --git a/drivers/char/fusion/fusionee.h b/drivers/char/fusion/fusionee.h
index acfff2a..0ab2b25 100644
--- a/drivers/char/fusion/fusionee.h
+++ b/drivers/char/fusion/fusionee.h
@@ -15,12 +15,19 @@
 #ifndef __FUSIONEE_H__
 #define __FUSIONEE_H__
 
-typedef struct {
-  int fusion_id;
-} Fusionee;
+#include "types.h"
 
-Fusionee *fusionee_new (void);
-void      fusionee_destroy (Fusionee *fusionee);
+
+/* module init/cleanup */
+
+int  fusionee_init (void);
+void fusionee_cleanup (void);
+
+
+/* internal functions */
+
+int fusionee_new (int *id);
+int fusionee_destroy (int id);
 
 
 
diff --git a/drivers/char/fusion/list.h b/drivers/char/fusion/list.h
index 7268d47..7db6dca 100644
--- a/drivers/char/fusion/list.h
+++ b/drivers/char/fusion/list.h
@@ -15,6 +15,9 @@
 #ifndef __FUSION__LIST_H__
 #define __FUSION__LIST_H__
 
+#include "types.h"
+
+
 typedef struct _FusionLink {
   struct _FusionLink *next;
   struct _FusionLink *prev;
diff --git a/drivers/char/fusion/ref.c b/drivers/char/fusion/ref.c
index 4b97620..8166f4e 100644
--- a/drivers/char/fusion/ref.c
+++ b/drivers/char/fusion/ref.c
@@ -28,7 +28,7 @@
 
 typedef struct {
   FusionLink  link;
-  Fusionee   *fusionee;
+  int         fusion_id;
   int         refs;
 } LocalRef;
 
@@ -57,8 +57,8 @@ static FusionRef *lookup_ref     (int id);
 static FusionRef *lock_ref       (int id);
 static void       unlock_ref     (FusionRef *ref);
 
-static int        add_local      (FusionRef *ref, Fusionee *fusionee, int add);
-static void       clear_local    (FusionRef *ref, Fusionee *fusionee);
+static int        add_local      (FusionRef *ref, int fusion_id, int add);
+static void       clear_local    (FusionRef *ref, int fusion_id);
 static void       free_all_local (FusionRef *ref);
 
 /******************************************************************************/
@@ -76,6 +76,8 @@ fusion_ref_read_proc(char *buf, char **start, off_t offset,
   FusionLink *l;
   int written = 0;
 
+  spin_lock (&refs_lock);
+
   fusion_list_foreach (l, refs)
     {
       FusionRef *ref = (FusionRef*) l;
@@ -93,6 +95,8 @@ fusion_ref_read_proc(char *buf, char **start, off_t offset,
         break;
     }
 
+  spin_unlock (&refs_lock);
+
   *start = buf + offset;
   written -= offset;
   if(written > len)
@@ -108,7 +112,8 @@ fusion_ref_read_proc(char *buf, char **start, off_t offset,
 int
 fusion_ref_init()
 {
-  create_proc_read_entry("refs", 0, proc_fusion_dir, fusion_ref_read_proc, NULL);
+  create_proc_read_entry("refs", 0, proc_fusion_dir,
+                         fusion_ref_read_proc, NULL);
 
   return 0;
 }
@@ -166,7 +171,7 @@ fusion_ref_new (int *id)
 }
 
 int
-fusion_ref_up (int id, Fusionee *fusionee)
+fusion_ref_up (int id, int fusion_id)
 {
   FusionRef *ref = lock_ref (id);
 
@@ -179,11 +184,11 @@ fusion_ref_up (int id, Fusionee *fusionee)
       return -EAGAIN;
     }
 
-  if (fusionee)
+  if (fusion_id)
     {
       int ret;
 
-      ret = add_local (ref, fusionee, 1);
+      ret = add_local (ref, fusion_id, 1);
       if (ret)
         {
           unlock_ref (ref);
@@ -201,7 +206,7 @@ fusion_ref_up (int id, Fusionee *fusionee)
 }
 
 int
-fusion_ref_down (int id, Fusionee *fusionee)
+fusion_ref_down (int id, int fusion_id)
 {
   FusionRef *ref = lock_ref (id);
 
@@ -214,14 +219,14 @@ fusion_ref_down (int id, Fusionee *fusionee)
       return -EAGAIN;
     }
 
-  if (fusionee)
+  if (fusion_id)
     {
       int ret;
 
       if (!ref->local)
         return -EIO;
 
-      ret = add_local (ref, fusionee, -1);
+      ret = add_local (ref, fusion_id, -1);
       if (ret)
         {
           unlock_ref (ref);
@@ -362,7 +367,7 @@ fusion_ref_destroy (int id)
 }
 
 void
-fusion_ref_clear_all_local (Fusionee *fusionee)
+fusion_ref_clear_all_local (int fusion_id)
 {
   FusionLink *l;
 
@@ -372,7 +377,7 @@ fusion_ref_clear_all_local (Fusionee *fusionee)
     {
       FusionRef *ref = (FusionRef *) l;
 
-      clear_local (ref, fusionee);
+      clear_local (ref, fusion_id);
     }
 
   spin_unlock (&refs_lock);
@@ -421,7 +426,7 @@ unlock_ref (FusionRef *ref)
 }
 
 static int
-add_local (FusionRef *ref, Fusionee *fusionee, int add)
+add_local (FusionRef *ref, int fusion_id, int add)
 {
   FusionLink *l;
   LocalRef   *local;
@@ -430,7 +435,7 @@ add_local (FusionRef *ref, Fusionee *fusionee, int add)
     {
       local = (LocalRef *) l;
 
-      if (local->fusionee == fusionee)
+      if (local->fusion_id == fusion_id)
         {
           if (local->refs + add < 0)
             return -EIO;
@@ -444,8 +449,8 @@ add_local (FusionRef *ref, Fusionee *fusionee, int add)
   if (!local)
     return -ENOMEM;
 
-  local->fusionee = fusionee;
-  local->refs     = add;
+  local->fusion_id = fusion_id;
+  local->refs      = add;
 
   fusion_list_prepend (&ref->local_refs, &local->link);
 
@@ -453,7 +458,7 @@ add_local (FusionRef *ref, Fusionee *fusionee, int add)
 }
 
 static void
-clear_local (FusionRef *ref, Fusionee *fusionee)
+clear_local (FusionRef *ref, int fusion_id)
 {
   FusionLink *l;
 
@@ -463,7 +468,7 @@ clear_local (FusionRef *ref, Fusionee *fusionee)
     {
       LocalRef *local = (LocalRef *) l;
 
-      if (local->fusionee == fusionee)
+      if (local->fusion_id == fusion_id)
         {
           ref->local -= local->refs;
 
diff --git a/drivers/char/fusion/ref.h b/drivers/char/fusion/ref.h
index 4faa8f9..56aada2 100644
--- a/drivers/char/fusion/ref.h
+++ b/drivers/char/fusion/ref.h
@@ -17,19 +17,27 @@
 
 #include "types.h"
 
-int fusion_ref_init (void);
+
+/* module init/cleanup */
+
+int  fusion_ref_init (void);
+void fusion_ref_cleanup (void);
+
+
+/* public API */
 
 int fusion_ref_new (int *id);
-int fusion_ref_up (int id, Fusionee *fusionee);
-int fusion_ref_down (int id, Fusionee *fusionee);
+int fusion_ref_up (int id, int fusion_id);
+int fusion_ref_down (int id, int fusion_id);
 int fusion_ref_zero_lock (int id);
 int fusion_ref_zero_trylock (int id);
 int fusion_ref_unlock (int id);
 int fusion_ref_stat (int id, int *refs);
 int fusion_ref_destroy (int id);
 
-void fusion_ref_clear_all_local (Fusionee *fusionee);
 
-void fusion_ref_cleanup (void);
+/* internal functions */
+
+void fusion_ref_clear_all_local (int fusion_id);
 
 #endif
-- 
1.7.3.3

