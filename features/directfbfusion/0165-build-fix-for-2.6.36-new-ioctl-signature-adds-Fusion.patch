From 85278226cba05e295a080054051b306156f677e1 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@localhost.(none)>
Date: Sun, 3 Oct 2010 12:23:11 +0200
Subject: [PATCH] build fix for 2.6.36 (new ioctl signature), adds FusionDev * to Fusionee structure (now public)

---
 drivers/char/fusion/fusiondev.c |   11 ++++++++++-
 drivers/char/fusion/fusionee.c  |   26 ++------------------------
 drivers/char/fusion/fusionee.h  |   29 +++++++++++++++++++++++++++++
 3 files changed, 41 insertions(+), 25 deletions(-)

diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 2307e9e..2457bc1 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -1029,12 +1029,17 @@ shmpool_ioctl(FusionDev * dev, Fusionee * fusionee,
 	return -ENOSYS;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
+static long
+fusion_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+#else
 static int
 fusion_ioctl(struct inode *inode, struct file *file,
 	     unsigned int cmd, unsigned long arg)
+#endif
 {
 	Fusionee *fusionee = file->private_data;
-	FusionDev *dev = fusion_devs[iminor(inode)];
+	FusionDev *dev = fusionee->fusion_dev;
 
 	DEBUG("fusion_ioctl (0x%08x)\n", cmd);
 
@@ -1109,7 +1114,11 @@ static struct file_operations fusion_fops = {
 	.release = fusion_release,
 	.read = fusion_read,
 	.poll = fusion_poll,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
+	.unlocked_ioctl = fusion_ioctl,
+#else
 	.ioctl = fusion_ioctl,
+#endif
 	.mmap = fusion_mmap
 };
 
diff --git a/drivers/char/fusion/fusionee.c b/drivers/char/fusion/fusionee.c
index ef31f69..7cf2f0a 100644
--- a/drivers/char/fusion/fusionee.c
+++ b/drivers/char/fusion/fusionee.c
@@ -42,30 +42,6 @@
 #define DEBUG(x...)  do {} while (0)
 #endif
 
-struct __Fusion_Fusionee {
-	FusionLink link;
-
-	struct semaphore lock;
-
-	FusionID id;
-	int pid;
-
-	FusionFifo messages;
-	FusionFifo prev_msgs;
-
-	int rcv_total;		/* Total number of messages received. */
-	int snd_total;		/* Total number of messages sent. */
-
-	wait_queue_head_t wait_receive;
-	wait_queue_head_t wait_process;
-
-	bool force_slave;
-
-	struct mm_struct *mm;
-
-	pid_t dispatcher_pid;
-};
-
 typedef struct {
 	FusionLink link;
 
@@ -204,6 +180,8 @@ int fusionee_new(FusionDev * dev, bool force_slave, Fusionee ** ret_fusionee)
 
 	up(&dev->fusionee.lock);
 
+	fusionee->fusion_dev = dev;
+
 	*ret_fusionee = fusionee;
 
 	return 0;
diff --git a/drivers/char/fusion/fusionee.h b/drivers/char/fusion/fusionee.h
index 0ac6a37..98cdb4e 100644
--- a/drivers/char/fusion/fusionee.h
+++ b/drivers/char/fusion/fusionee.h
@@ -19,8 +19,37 @@
 #include <linux/fusion.h>
 
 #include "fusiondev.h"
+#include "fifo.h"
 #include "types.h"
 
+
+struct __Fusion_Fusionee {
+	FusionLink link;
+
+	struct semaphore lock;
+
+	FusionID id;
+	int pid;
+
+	FusionFifo messages;
+	FusionFifo prev_msgs;
+
+	int rcv_total;		/* Total number of messages received. */
+	int snd_total;		/* Total number of messages sent. */
+
+	wait_queue_head_t wait_receive;
+	wait_queue_head_t wait_process;
+
+	bool force_slave;
+
+	struct mm_struct *mm;
+
+	pid_t dispatcher_pid;
+
+	FusionDev *fusion_dev;
+};
+
+
 /* module init/cleanup */
 
 int fusionee_init(FusionDev * dev);
-- 
1.7.3.3

