From aaa7285176a35c98b68c863e1ddad7b39b101e27 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Tue, 14 Oct 2003 07:15:03 +0000
Subject: [PATCH] Added "/proc/fusion/*/stat":

'lease/purchase   cede      attach     detach      ref up   ref down  prevail/swoop dismiss'
'    139068     139068         969        841        1315       1161      186576     186296'

These are total number of calls.
---
 drivers/char/fusion/fusiondev.c |   50 +++++++++++++++++++++++++++++++++++++++
 drivers/char/fusion/fusiondev.h |   14 +++++++++++
 drivers/char/fusion/property.c  |   10 ++++++-
 drivers/char/fusion/reactor.c   |    4 +++
 drivers/char/fusion/ref.c       |    4 +++
 drivers/char/fusion/skirmish.c  |    6 ++++
 6 files changed, 86 insertions(+), 2 deletions(-)

diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 4777859..1ed8507 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -106,6 +106,51 @@ fusion_sleep_on(wait_queue_head_t *q, spinlock_t *lock, signed long *timeout)
 /******************************************************************************/
 
 static int
+fusiondev_stat_read_proc(char *buf, char **start, off_t offset,
+                         int len, int *eof, void *private)
+{
+     FusionDev *dev     = private;
+     int        written = 0;
+
+     written += snprintf( buf, len,
+                          "lease/purchase   cede      attach     detach      "
+                          "ref up   ref down  prevail/swoop dismiss\n" );
+     if (written < offset) {
+          offset -= written;
+          written = 0;
+     }
+     
+     if (written < len) {
+          written += snprintf( buf+written, len - written,
+                               "%10d %10d  %10d %10d  %10d %10d  %10d %10d\n",
+                               dev->stat.property_lease_purchase,
+                               dev->stat.property_cede,
+                               dev->stat.reactor_attach,
+                               dev->stat.reactor_detach,
+                               dev->stat.ref_up,
+                               dev->stat.ref_down,
+                               dev->stat.skirmish_prevail_swoop,
+                               dev->stat.skirmish_dismiss );
+          if (written < offset) {
+               offset -= written;
+               written = 0;
+          }
+     }
+     
+     *start = buf + offset;
+     written -= offset;
+     if (written > len) {
+          *eof = 0;
+          return len;
+     }
+
+     *eof = 1;
+     return(written<0) ? 0 : written;
+}
+
+/******************************************************************************/
+
+static int
 fusiondev_init (FusionDev *dev)
 {
      int ret;
@@ -134,6 +179,9 @@ fusiondev_init (FusionDev *dev)
      if (ret)
           goto error_call;
 
+     create_proc_read_entry("stat", 0, dev->proc_dir,
+                            fusiondev_stat_read_proc, dev);
+     
      return 0;
 
 
@@ -159,6 +207,8 @@ error_fusionee:
 static void
 fusiondev_deinit (FusionDev *dev)
 {
+     remove_proc_entry ("stat", dev->proc_dir);
+     
      fusion_call_deinit (dev);
      fusion_reactor_deinit (dev);
      fusion_property_deinit (dev);
diff --git a/drivers/char/fusion/fusiondev.h b/drivers/char/fusion/fusiondev.h
index 00ff4fe..69c0f56 100644
--- a/drivers/char/fusion/fusiondev.h
+++ b/drivers/char/fusion/fusiondev.h
@@ -25,6 +25,20 @@ typedef struct {
      struct proc_dir_entry *proc_dir;
      
      struct {
+          int         property_lease_purchase;
+          int         property_cede;
+
+          int         reactor_attach;
+          int         reactor_detach;
+
+          int         ref_up;
+          int         ref_down;
+
+          int         skirmish_prevail_swoop;
+          int         skirmish_dismiss;
+     } stat;
+     
+     struct {
           int         ids;
           FusionLink *list;
           spinlock_t  lock;
diff --git a/drivers/char/fusion/property.c b/drivers/char/fusion/property.c
index a3b8508..e3312e5 100644
--- a/drivers/char/fusion/property.c
+++ b/drivers/char/fusion/property.c
@@ -166,6 +166,8 @@ fusion_property_lease (FusionDev *dev, int id, int fusion_id)
      FusionProperty *property;
      signed long     timeout = -1;
 
+     dev->stat.property_lease_purchase++;
+     
      while (true) {
           property = lock_property (dev, id);
           if (!property)
@@ -214,7 +216,7 @@ fusion_property_lease (FusionDev *dev, int id, int fusion_id)
      }
 
      /* won't reach this */
-     return 0;
+     return -1;
 }
 
 int
@@ -223,6 +225,8 @@ fusion_property_purchase (FusionDev *dev, int id, int fusion_id)
      FusionProperty *property;
      signed long     timeout = -1;
 
+     dev->stat.property_lease_purchase++;
+     
      while (true) {
           property = lock_property (dev, id);
           if (!property)
@@ -274,7 +278,7 @@ fusion_property_purchase (FusionDev *dev, int id, int fusion_id)
      }
 
      /* won't reach this */
-     return 0;
+     return -1;
 }
 
 int
@@ -283,6 +287,8 @@ fusion_property_cede (FusionDev *dev, int id, int fusion_id)
      bool            purchased;
      FusionProperty *property = lock_property (dev, id);
 
+     dev->stat.property_cede++;
+     
      if (!property)
           return -EINVAL;
 
diff --git a/drivers/char/fusion/reactor.c b/drivers/char/fusion/reactor.c
index ea6be56..828c0ce 100644
--- a/drivers/char/fusion/reactor.c
+++ b/drivers/char/fusion/reactor.c
@@ -166,6 +166,8 @@ fusion_reactor_attach (FusionDev *dev, int id, int fusion_id)
      ReactorNode   *node;
      FusionReactor *reactor = lock_reactor (dev, id);
 
+     dev->stat.reactor_attach++;
+
      if (!reactor)
           return -EINVAL;
 
@@ -196,6 +198,8 @@ fusion_reactor_detach (FusionDev *dev, int id, int fusion_id)
      ReactorNode   *node;
      FusionReactor *reactor = lock_reactor (dev, id);
 
+     dev->stat.reactor_detach++;
+     
      if (!reactor)
           return -EINVAL;
 
diff --git a/drivers/char/fusion/ref.c b/drivers/char/fusion/ref.c
index 18311d7..d84743d 100644
--- a/drivers/char/fusion/ref.c
+++ b/drivers/char/fusion/ref.c
@@ -181,6 +181,8 @@ fusion_ref_up (FusionDev *dev, int id, int fusion_id)
 {
      FusionRef *ref = lock_ref (dev, id);
 
+     dev->stat.ref_up++;
+     
      if (!ref)
           return -EINVAL;
 
@@ -213,6 +215,8 @@ fusion_ref_down (FusionDev *dev, int id, int fusion_id)
 {
      FusionRef *ref = lock_ref (dev, id);
 
+     dev->stat.ref_down++;
+     
      if (!ref)
           return -EINVAL;
 
diff --git a/drivers/char/fusion/skirmish.c b/drivers/char/fusion/skirmish.c
index 7e6df63..ce1c9fd 100644
--- a/drivers/char/fusion/skirmish.c
+++ b/drivers/char/fusion/skirmish.c
@@ -162,6 +162,8 @@ fusion_skirmish_prevail (FusionDev *dev, int id, int fusion_id)
 {
      FusionSkirmish *skirmish;
 
+     dev->stat.skirmish_prevail_swoop++;
+     
      while (true) {
           skirmish = lock_skirmish (dev, id);
           if (!skirmish)
@@ -197,6 +199,8 @@ fusion_skirmish_swoop (FusionDev *dev, int id, int fusion_id)
 {
      FusionSkirmish *skirmish = lock_skirmish (dev, id);
 
+     dev->stat.skirmish_prevail_swoop++;
+     
      if (!skirmish)
           return -EINVAL;
 
@@ -226,6 +230,8 @@ fusion_skirmish_dismiss (FusionDev *dev, int id, int fusion_id)
 {
      FusionSkirmish *skirmish = lock_skirmish (dev, id);
 
+     dev->stat.skirmish_dismiss++;
+     
      if (!skirmish)
           return -EINVAL;
 
-- 
1.7.3.3

