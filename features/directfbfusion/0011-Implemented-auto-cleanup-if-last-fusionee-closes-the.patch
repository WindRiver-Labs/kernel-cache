From 5d28b37efe1930dd7c8fe90b42adc7a73a8aafa5 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Tue, 12 Nov 2002 21:21:12 +0000
Subject: [PATCH] Implemented auto-cleanup if last fusionee closes the device.

ipc_cleanup script is obsolete now. Simply kill all processes having
/dev/fusion open and everything gets cleaned up.

If it will ever crash... ;)
---
 drivers/char/fusion/fusiondev.c |   35 ++++++++++++++++++++++++++++++++++-
 drivers/char/fusion/fusionee.c  |   15 +++++++++++++--
 drivers/char/fusion/fusionee.h  |    1 +
 drivers/char/fusion/property.c  |   15 +++++++++++++--
 drivers/char/fusion/property.h  |    1 +
 drivers/char/fusion/reactor.c   |   15 +++++++++++++--
 drivers/char/fusion/reactor.h   |    1 +
 drivers/char/fusion/ref.c       |   15 +++++++++++++--
 drivers/char/fusion/ref.h       |    1 +
 drivers/char/fusion/skirmish.c  |   15 +++++++++++++--
 drivers/char/fusion/skirmish.h  |    1 +
 11 files changed, 104 insertions(+), 11 deletions(-)

diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 730ed91..22465f3 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -38,6 +38,21 @@ MODULE_LICENSE("GPL");
 
 struct proc_dir_entry *proc_fusion_dir;
 
+static int        refs      = 0;
+static spinlock_t refs_lock = SPIN_LOCK_UNLOCKED;
+
+/******************************************************************************/
+
+static void
+fusion_reset (void)
+{
+  fusion_reactor_reset();
+  fusion_property_reset();
+  fusion_skirmish_reset();
+  fusion_ref_reset();
+  fusionee_reset();
+}
+
 /******************************************************************************/
 
 static int
@@ -46,9 +61,20 @@ fusion_open (struct inode *inode, struct file *file)
   int ret;
   int fusion_id;
 
+  spin_lock (&refs_lock);
+
   ret = fusionee_new (&fusion_id);
   if (ret)
-    return ret;
+    {
+      spin_unlock (&refs_lock);
+
+      return ret;
+    }
+
+  refs++;
+
+  spin_unlock (&refs_lock);
+
 
   file->private_data = (void*) fusion_id;
 
@@ -62,6 +88,13 @@ fusion_release (struct inode *inode, struct file *file)
 
   fusionee_destroy (fusion_id);
 
+  spin_lock (&refs_lock);
+
+  if (! --refs)
+    fusion_reset();
+
+  spin_unlock (&refs_lock);
+
   return 0;
 }
 
diff --git a/drivers/char/fusion/fusionee.c b/drivers/char/fusion/fusionee.c
index eaba2b9..266bf34 100644
--- a/drivers/char/fusion/fusionee.c
+++ b/drivers/char/fusion/fusionee.c
@@ -117,10 +117,13 @@ fusionee_init()
 }
 
 void
-fusionee_cleanup()
+fusionee_reset()
 {
-  FusionLink *l = fusionees;
+  FusionLink *l;
+
+  spin_lock (&fusionees_lock);
 
+  l = fusionees;
   while (l)
     {
       FusionLink *next     = l->next;
@@ -141,6 +144,14 @@ fusionee_cleanup()
 
   fusionees = NULL;
 
+  spin_unlock (&fusionees_lock);
+}
+
+void
+fusionee_cleanup()
+{
+  fusionee_reset();
+
   remove_proc_entry ("fusionees", proc_fusion_dir);
 }
 
diff --git a/drivers/char/fusion/fusionee.h b/drivers/char/fusion/fusionee.h
index 61645d4..7e4446a 100644
--- a/drivers/char/fusion/fusionee.h
+++ b/drivers/char/fusion/fusionee.h
@@ -23,6 +23,7 @@
 /* module init/cleanup */
 
 int  fusionee_init (void);
+void fusionee_reset (void);
 void fusionee_cleanup (void);
 
 
diff --git a/drivers/char/fusion/property.c b/drivers/char/fusion/property.c
index e2daf27..9b73ce3 100644
--- a/drivers/char/fusion/property.c
+++ b/drivers/char/fusion/property.c
@@ -114,10 +114,13 @@ fusion_property_init()
 }
 
 void
-fusion_property_cleanup()
+fusion_property_reset()
 {
-  FusionLink *l = properties;
+  FusionLink *l;
+
+  spin_lock (&properties_lock);
 
+  l = properties;
   while (l)
     {
       FusionLink     *next     = l->next;
@@ -130,6 +133,14 @@ fusion_property_cleanup()
 
   properties = NULL;
 
+  spin_unlock (&properties_lock);
+}
+
+void
+fusion_property_cleanup()
+{
+  fusion_property_reset();
+
   remove_proc_entry ("properties", proc_fusion_dir);
 }
 
diff --git a/drivers/char/fusion/property.h b/drivers/char/fusion/property.h
index 629f14f..0d26290 100644
--- a/drivers/char/fusion/property.h
+++ b/drivers/char/fusion/property.h
@@ -21,6 +21,7 @@
 /* module init/cleanup */
 
 int  fusion_property_init (void);
+void fusion_property_reset (void);
 void fusion_property_cleanup (void);
 
 
diff --git a/drivers/char/fusion/reactor.c b/drivers/char/fusion/reactor.c
index 777289e..84f38cc 100644
--- a/drivers/char/fusion/reactor.c
+++ b/drivers/char/fusion/reactor.c
@@ -115,10 +115,13 @@ fusion_reactor_init()
 }
 
 void
-fusion_reactor_cleanup()
+fusion_reactor_reset()
 {
-  FusionLink *l = reactors;
+  FusionLink *l;
+
+  spin_lock (&reactors_lock);
 
+  l = reactors;
   while (l)
     {
       FusionLink    *next    = l->next;
@@ -133,6 +136,14 @@ fusion_reactor_cleanup()
 
   reactors = NULL;
 
+  spin_unlock (&reactors_lock);
+}
+
+void
+fusion_reactor_cleanup()
+{
+  fusion_reactor_reset();
+
   remove_proc_entry ("reactors", proc_fusion_dir);
 }
 
diff --git a/drivers/char/fusion/reactor.h b/drivers/char/fusion/reactor.h
index 11f810f..255e1c9 100644
--- a/drivers/char/fusion/reactor.h
+++ b/drivers/char/fusion/reactor.h
@@ -21,6 +21,7 @@
 /* module init/cleanup */
 
 int  fusion_reactor_init (void);
+void fusion_reactor_reset (void);
 void fusion_reactor_cleanup (void);
 
 
diff --git a/drivers/char/fusion/ref.c b/drivers/char/fusion/ref.c
index 8cf2479..f9fe2bd 100644
--- a/drivers/char/fusion/ref.c
+++ b/drivers/char/fusion/ref.c
@@ -118,10 +118,13 @@ fusion_ref_init()
 }
 
 void
-fusion_ref_cleanup()
+fusion_ref_reset()
 {
-  FusionLink *l = refs;
+  FusionLink *l;
+
+  spin_lock (&refs_lock);
 
+  l = refs;
   while (l)
     {
       FusionLink *next = l->next;
@@ -136,6 +139,14 @@ fusion_ref_cleanup()
 
   refs = NULL;
 
+  spin_unlock (&refs_lock);
+}
+
+void
+fusion_ref_cleanup()
+{
+  fusion_ref_reset();
+
   remove_proc_entry ("refs", proc_fusion_dir);
 }
 
diff --git a/drivers/char/fusion/ref.h b/drivers/char/fusion/ref.h
index 56aada2..e736fc8 100644
--- a/drivers/char/fusion/ref.h
+++ b/drivers/char/fusion/ref.h
@@ -21,6 +21,7 @@
 /* module init/cleanup */
 
 int  fusion_ref_init (void);
+void fusion_ref_reset (void);
 void fusion_ref_cleanup (void);
 
 
diff --git a/drivers/char/fusion/skirmish.c b/drivers/char/fusion/skirmish.c
index 7914e51..81e6402 100644
--- a/drivers/char/fusion/skirmish.c
+++ b/drivers/char/fusion/skirmish.c
@@ -106,10 +106,13 @@ fusion_skirmish_init()
 }
 
 void
-fusion_skirmish_cleanup()
+fusion_skirmish_reset()
 {
-  FusionLink *l = skirmishs;
+  FusionLink *l;
+
+  spin_lock (&skirmishs_lock);
 
+  l = skirmishs;
   while (l)
     {
       FusionLink     *next     = l->next;
@@ -122,6 +125,14 @@ fusion_skirmish_cleanup()
 
   skirmishs = NULL;
 
+  spin_unlock (&skirmishs_lock);
+}
+
+void
+fusion_skirmish_cleanup()
+{
+  fusion_skirmish_reset();
+
   remove_proc_entry ("skirmishs", proc_fusion_dir);
 }
 
diff --git a/drivers/char/fusion/skirmish.h b/drivers/char/fusion/skirmish.h
index 3a1fc24..fc16c17 100644
--- a/drivers/char/fusion/skirmish.h
+++ b/drivers/char/fusion/skirmish.h
@@ -21,6 +21,7 @@
 /* module init/cleanup */
 
 int  fusion_skirmish_init (void);
+void fusion_skirmish_reset (void);
 void fusion_skirmish_cleanup (void);
 
 
-- 
1.7.3.3

