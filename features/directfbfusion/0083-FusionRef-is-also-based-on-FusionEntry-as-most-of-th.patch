From 2845c24d56aaf85e78730f262d9b01134ca0d8a7 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Fri, 4 Aug 2006 16:28:01 +0000
Subject: [PATCH] FusionRef is also based on FusionEntry as most of the others are already.

---
 drivers/char/fusion/fusiondev.c |    9 +-
 drivers/char/fusion/fusiondev.h |   10 +-
 drivers/char/fusion/ref.c       |  404 ++++++++++++---------------------------
 drivers/char/fusion/ref.h       |    2 +-
 4 files changed, 132 insertions(+), 293 deletions(-)

diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index bafeb9a..76410b6 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -453,6 +453,9 @@ lounge_ioctl (FusionDev *dev, int fusion_id,
                     case FT_REACTOR:
                          return fusion_entry_set_info (&dev->reactor, &info);
 
+                    case FT_REF:
+                         return fusion_entry_set_info (&dev->ref, &info);
+
                     case FT_SHMPOOL:
                          return fusion_entry_set_info (&dev->shmpool, &info);
 
@@ -477,6 +480,10 @@ lounge_ioctl (FusionDev *dev, int fusion_id,
                          ret = fusion_entry_get_info (&dev->reactor, &info);
                          break;
 
+                    case FT_REF:
+                         ret = fusion_entry_get_info (&dev->ref, &info);
+                         break;
+
                     case FT_SHMPOOL:
                          ret = fusion_entry_get_info (&dev->shmpool, &info);
                          break;
@@ -637,7 +644,7 @@ ref_ioctl (FusionDev *dev, int fusion_id,
                if (get_user (id, (int*) arg))
                     return -EFAULT;
 
-               return fusion_ref_unlock (dev, id, fusion_id);
+               return fusion_ref_zero_unlock (dev, id, fusion_id);
 
           case _IOC_NR(FUSION_REF_STAT):
                if (get_user (id, (int*) arg))
diff --git a/drivers/char/fusion/fusiondev.h b/drivers/char/fusion/fusiondev.h
index 84d2328..347a78f 100644
--- a/drivers/char/fusion/fusiondev.h
+++ b/drivers/char/fusion/fusiondev.h
@@ -66,17 +66,9 @@ typedef struct {
      } fusionee;
 
      FusionEntries  properties;
-
      FusionEntries  reactor;
-
+     FusionEntries  ref;
      FusionEntries  shmpool;
-
-     struct {
-          int                ids;
-          FusionLink        *list;
-          struct semaphore   lock;
-     } ref;
-
      FusionEntries  skirmish;
 } FusionDev;
 
diff --git a/drivers/char/fusion/ref.c b/drivers/char/fusion/ref.c
index 36a451b..a6b262f 100644
--- a/drivers/char/fusion/ref.c
+++ b/drivers/char/fusion/ref.c
@@ -29,171 +29,107 @@
 typedef struct __Fusion_FusionRef FusionRef;
 
 typedef struct {
-     FusionLink  link;
-     int         fusion_id;
-     int         refs;
+     FusionLink     link;
+     int            fusion_id;
+     int            refs;
 } LocalRef;
 
 typedef struct {
-     FusionLink  link;
-     FusionRef  *ref;
+     FusionLink     link;
+     FusionRef     *ref;
 } Inheritor;
 
 struct __Fusion_FusionRef {
-     FusionLink         link;
+     FusionEntry    entry;
 
-     struct semaphore   lock;
+     int            global;
+     int            local;
 
-     int                id;
-     int                pid;
+     int            locked;    /* non-zero fusion id of lock owner */
 
-     int                global;
-     int                local;
+     bool           watched;   /* true if watch has been installed */
+     int            call_id;   /* id of call registered with a watch */
+     int            call_arg;  /* optional call parameter */
 
-     int                locked;    /* non-zero fusion id of lock owner */
+     FusionRef     *inherited;
+     FusionLink    *inheritors;
 
-     bool               watched;   /* true if watch has been installed */
-     int                call_id;   /* id of call registered with a watch */
-     int                call_arg;  /* optional call parameter */
+     FusionLink    *local_refs;
+};
 
-     FusionRef         *inherited;
-     FusionLink        *inheritors;
+/**********************************************************************************************************************/
 
-     FusionLink        *local_refs;
+static int  add_local       ( FusionRef *ref, int fusion_id, int add );
+static void clear_local     ( FusionDev *dev, FusionRef *ref, int fusion_id );
+static void free_all_local  ( FusionRef *ref );
 
-     wait_queue_head_t  wait;
-};
+static int  propagate_local ( FusionDev *dev, FusionRef *ref, int diff );
 
-/******************************************************************************/
+static void notify_ref      ( FusionDev *dev, FusionRef *ref );
 
-static int  lookup_ref (FusionDev *dev, bool locked, int id, FusionRef **ret_ref);
-static int  lock_ref   (FusionDev *dev, bool locked, int id, FusionRef **ret_ref);
-static void unlock_ref (FusionRef *ref);
+static int  add_inheritor   ( FusionRef *ref, FusionRef *from );
+static void remove_inheritor( FusionRef *ref, FusionRef *from );
+static void drop_inheritors ( FusionDev *dev, FusionRef *ref );
 
-static int  add_local       (FusionRef *ref, int fusion_id, int add);
-static void clear_local     (FusionDev *dev, FusionRef *ref, int fusion_id);
-static void free_all_local  (FusionRef *ref);
+/**********************************************************************************************************************/
 
-static int  propagate_local (FusionDev *dev, FusionRef *ref, int diff);
+static void
+fusion_ref_destruct( FusionEntry *entry,
+                     void        *ctx )
+{
+     FusionRef *ref = (FusionRef*) entry;
+     FusionDev *dev = (FusionDev*) ctx;
 
-static void notify_ref      (FusionDev *dev, FusionRef *ref);
+     drop_inheritors( dev, ref );
 
-static int  add_inheritor   (FusionRef *ref, FusionRef *from);
-static void remove_inheritor(FusionRef *ref, FusionRef *from);
-static void drop_inheritors (FusionDev *dev, FusionRef *ref);
+     if (ref->inherited)
+          remove_inheritor( ref, ref->inherited );
 
-/******************************************************************************/
+     free_all_local( ref );
+}
 
 static int
-refs_read_proc(char *buf, char **start, off_t offset,
-               int len, int *eof, void *private)
+fusion_ref_print( FusionEntry *entry,
+                  void        *ctx,
+                  char        *buf )
 {
-     FusionLink *l;
-     FusionDev  *dev     = private;
-     int         written = 0;
-
-     if (down_interruptible (&dev->ref.lock))
-          return -EINTR;
+     FusionRef *ref = (FusionRef*) entry;
 
-     fusion_list_foreach (l, dev->ref.list) {
-          FusionRef *ref = (FusionRef*) l;
-
-          if (ref->locked)
-               written += sprintf(buf+written, "(%5d) 0x%08x %2d %2d (locked by %d)\n",
-                                  ref->pid, ref->id, ref->global, ref->local,
-                                  ref->locked);
-          else
-               written += sprintf(buf+written, "(%5d) 0x%08x %2d %2d\n",
-                                  ref->pid, ref->id, ref->global, ref->local);
-          if (written < offset) {
-               offset -= written;
-               written = 0;
-          }
-
-          if (written >= len)
-               break;
-     }
+     if (ref->locked)
+          return sprintf( buf, "%2d %2d (locked by %d)\n", ref->global, ref->local, ref->locked );
 
-     up (&dev->ref.lock);
+     return sprintf( buf, "%2d %2d\n", ref->global, ref->local );
+}
 
-     *start = buf + offset;
-     written -= offset;
-     if (written > len) {
-          *eof = 0;
-          return len;
-     }
+FUSION_ENTRY_CLASS( FusionRef, ref, NULL,
+                    fusion_ref_destruct, fusion_ref_print );
 
-     *eof = 1;
-     return(written<0) ? 0 : written;
-}
+/**********************************************************************************************************************/
 
 int
-fusion_ref_init (FusionDev *dev)
+fusion_ref_init( FusionDev *dev )
 {
-     init_MUTEX (&dev->ref.lock);
+     fusion_entries_init( &dev->ref, &ref_class, dev );
 
-     create_proc_read_entry("refs", 0, dev->proc_dir,
-                            refs_read_proc, dev);
+     create_proc_read_entry( "refs", 0, dev->proc_dir, fusion_entries_read_proc, &dev->ref );
 
      return 0;
 }
 
 void
-fusion_ref_deinit (FusionDev *dev)
+fusion_ref_deinit( FusionDev *dev )
 {
-     FusionLink *l;
-
-     down (&dev->ref.lock);
-
-     remove_proc_entry ("refs", dev->proc_dir);
-
-     l = dev->ref.list;
-     while (l) {
-          FusionLink *next = l->next;
-          FusionRef  *ref  = (FusionRef *) l;
-
-          free_all_local (ref);
-
-          kfree (ref);
-
-          l = next;
-     }
+     remove_proc_entry( "refs", dev->proc_dir );
 
-     up (&dev->ref.lock);
+     fusion_entries_deinit( &dev->ref );
 }
 
-/******************************************************************************/
+/**********************************************************************************************************************/
 
 int
-fusion_ref_new (FusionDev *dev, int *id)
+fusion_ref_new( FusionDev *dev, int *ret_id )
 {
-     FusionRef *ref;
-
-     ref = kmalloc (sizeof(FusionRef), GFP_KERNEL);
-     if (!ref)
-          return -ENOMEM;
-
-     memset (ref, 0, sizeof(FusionRef));
-
-     if (down_interruptible (&dev->ref.lock)) {
-          kfree (ref);
-          return -EINTR;
-     }
-
-     ref->id   = dev->ref.ids++;
-     ref->pid  = current->pid;
-
-     init_MUTEX (&ref->lock);
-
-     init_waitqueue_head (&ref->wait);
-
-     fusion_list_prepend (&dev->ref.list, &ref->link);
-
-     up (&dev->ref.lock);
-
-     *id = ref->id;
-
-     return 0;
+     return fusion_entry_create( &dev->ref, ret_id, NULL );
 }
 
 int
@@ -202,15 +138,10 @@ fusion_ref_up (FusionDev *dev, int id, int fusion_id)
      int        ret;
      FusionRef *ref;
 
-     ret = lookup_ref (dev, false, id, &ref);
+     ret = fusion_ref_lock( &dev->ref, id, true, &ref );
      if (ret)
           return ret;
 
-     if (down_interruptible (&ref->lock)) {
-          up (&dev->ref.lock);
-          return -EINTR;
-     }
-
      dev->stat.ref_up++;
 
      if (ref->locked) {
@@ -230,8 +161,8 @@ fusion_ref_up (FusionDev *dev, int id, int fusion_id)
 
 
 out:
-     up (&dev->ref.lock);
-     unlock_ref (ref);
+     fusion_ref_unlock( ref );
+     up( &dev->ref.lock );
 
      return ret;
 }
@@ -242,15 +173,10 @@ fusion_ref_down (FusionDev *dev, int id, int fusion_id)
      int        ret;
      FusionRef *ref;
 
-     ret = lookup_ref (dev, false, id, &ref);
+     ret = fusion_ref_lock( &dev->ref, id, true, &ref );
      if (ret)
           return ret;
 
-     if (down_interruptible (&ref->lock)) {
-          up (&dev->ref.lock);
-          return -EINTR;
-     }
-
      dev->stat.ref_down++;
 
      if (ref->locked) {
@@ -283,8 +209,8 @@ fusion_ref_down (FusionDev *dev, int id, int fusion_id)
 
 
 out:
-     up (&dev->ref.lock);
-     unlock_ref (ref);
+     fusion_ref_unlock( ref );
+     up( &dev->ref.lock );
 
      return ret;
 }
@@ -295,26 +221,25 @@ fusion_ref_zero_lock (FusionDev *dev, int id, int fusion_id)
      int        ret;
      FusionRef *ref;
 
-     while (true) {
-          ret = lock_ref (dev, false, id, &ref);
-          if (ret)
-               return ret;
+     ret = fusion_ref_lock( &dev->ref, id, false, &ref );
+     if (ret)
+          return ret;
 
+     while (true) {
           if (ref->watched) {
-               unlock_ref (ref);
+               fusion_ref_unlock( ref );
                return -EACCES;
           }
 
           if (ref->locked) {
-               unlock_ref (ref);
+               fusion_ref_unlock( ref );
                return ref->locked == fusion_id ? -EIO : -EAGAIN;
           }
 
           if (ref->global || ref->local) {
-               fusion_sleep_on (&ref->wait, &ref->lock, 0);
-
-               if (signal_pending(current))
-                    return -EINTR;
+               ret = fusion_ref_wait( ref, NULL );
+               if (ret)
+                    return ret;
           }
           else
                break;
@@ -322,7 +247,7 @@ fusion_ref_zero_lock (FusionDev *dev, int id, int fusion_id)
 
      ref->locked = fusion_id;
 
-     unlock_ref (ref);
+     fusion_ref_unlock( ref );
 
      return 0;
 }
@@ -333,12 +258,12 @@ fusion_ref_zero_trylock (FusionDev *dev, int id, int fusion_id)
      int        ret;
      FusionRef *ref;
 
-     ret = lock_ref (dev, false, id, &ref);
+     ret = fusion_ref_lock( &dev->ref, id, false, &ref );
      if (ret)
           return ret;
 
      if (ref->locked) {
-          unlock_ref (ref);
+          fusion_ref_unlock( ref );
           return ref->locked == fusion_id ? -EIO : -EAGAIN;
      }
 
@@ -347,29 +272,29 @@ fusion_ref_zero_trylock (FusionDev *dev, int id, int fusion_id)
      else
           ref->locked = fusion_id;
 
-     unlock_ref (ref);
+     fusion_ref_unlock( ref );
 
      return ret;
 }
 
 int
-fusion_ref_unlock (FusionDev *dev, int id, int fusion_id)
+fusion_ref_zero_unlock (FusionDev *dev, int id, int fusion_id)
 {
      int        ret;
      FusionRef *ref;
 
-     ret = lock_ref (dev, false, id, &ref);
+     ret = fusion_ref_lock( &dev->ref, id, false, &ref );
      if (ret)
           return ret;
 
      if (ref->locked != fusion_id) {
-          unlock_ref (ref);
+          fusion_ref_unlock( ref );
           return -EIO;
      }
 
      ref->locked = 0;
 
-     unlock_ref (ref);
+     fusion_ref_unlock( ref );
 
      return 0;
 }
@@ -380,13 +305,13 @@ fusion_ref_stat (FusionDev *dev, int id, int *refs)
      int        ret;
      FusionRef *ref;
 
-     ret = lock_ref (dev, false, id, &ref);
+     ret = fusion_ref_lock( &dev->ref, id, false, &ref );
      if (ret)
           return ret;
 
      *refs = ref->global + ref->local;
 
-     unlock_ref (ref);
+     fusion_ref_unlock( ref );
 
      return 0;
 }
@@ -400,22 +325,22 @@ fusion_ref_watch (FusionDev      *dev,
      int        ret;
      FusionRef *ref;
 
-     ret = lock_ref (dev, false, id, &ref);
+     ret = fusion_ref_lock( &dev->ref, id, false, &ref );
      if (ret)
           return ret;
 
-     if (ref->pid != current->pid) {
-          unlock_ref (ref);
+     if (ref->entry.pid != current->pid) {
+          fusion_ref_unlock( ref );
           return -EACCES;
      }
 
      if (ref->global + ref->local == 0) {
-          unlock_ref (ref);
+          fusion_ref_unlock( ref );
           return -EIO;
      }
 
      if (ref->watched) {
-          unlock_ref (ref);
+          fusion_ref_unlock( ref );
           return -EBUSY;
      }
 
@@ -423,9 +348,9 @@ fusion_ref_watch (FusionDev      *dev,
      ref->call_id  = call_id;
      ref->call_arg = call_arg;
 
-     wake_up_interruptible_all (&ref->wait);
+     fusion_ref_notify( ref, true );
 
-     unlock_ref (ref);
+     fusion_ref_unlock( ref );
 
      return 0;
 }
@@ -439,21 +364,26 @@ fusion_ref_inherit (FusionDev *dev,
      FusionRef *ref;
      FusionRef *from = NULL;
 
-     ret = lookup_ref (dev, false, id, &ref);
+     ret = fusion_ref_lock( &dev->ref, id, true, &ref );
      if (ret)
           return ret;
 
-     if (down_interruptible (&ref->lock)) {
-          up (&dev->ref.lock);
-          return -EINTR;
-     }
-
      ret = -EBUSY;
      if (ref->inherited)
           goto out;
 
-     ret = lock_ref (dev, true, from_id, &from);
-     if (ret)
+     ret = -EINVAL;
+     fusion_list_foreach (from, dev->ref.list) {
+          if (from->entry.id == from_id) {
+               if (down_interruptible( &from->entry.lock )) {
+                    ret  = -EINTR;
+                    from = NULL;
+               }
+
+               break;
+          }
+     }
+     if (!from)
           goto out;
 
      ret = add_inheritor( ref, from );
@@ -468,11 +398,10 @@ fusion_ref_inherit (FusionDev *dev,
 
 out:
      if (from)
-          unlock_ref (from);
+          up( &from->entry.lock );
 
-     unlock_ref (ref);
-
-     up (&dev->ref.lock);
+     fusion_ref_unlock( ref );
+     up ( &dev->ref.lock );
 
      return ret;
 }
@@ -480,112 +409,23 @@ out:
 int
 fusion_ref_destroy (FusionDev *dev, int id)
 {
-     int        ret;
-     FusionRef *ref;
-
-     ret = lookup_ref (dev, false, id, &ref);
-     if (ret)
-          return ret;
-
-     if (down_interruptible (&ref->lock)) {
-          up (&dev->ref.lock);
-          return -EINTR;
-     }
-
-     drop_inheritors( dev, ref );
-
-     if (ref->inherited)
-          remove_inheritor( ref, ref->inherited );
-
-     fusion_list_remove (&dev->ref.list, &ref->link);
-
-     wake_up_interruptible_all (&ref->wait);
-
-     up (&dev->ref.lock);
-
-     free_all_local (ref);
-
-     up (&ref->lock);
-
-     kfree (ref);
-
-     return 0;
+     return fusion_entry_destroy( &dev->ref, id );
 }
 
 void
-fusion_ref_clear_all_local (FusionDev *dev, int fusion_id)
-{
-     FusionLink *l;
-
-     down (&dev->ref.lock);
-
-     fusion_list_foreach (l, dev->ref.list) {
-          FusionRef *ref = (FusionRef *) l;
-
-          clear_local (dev, ref, fusion_id);
-     }
-
-     up (&dev->ref.lock);
-}
-
-/******************************************************************************/
-
-static int
-lookup_ref (FusionDev *dev, bool locked, int id, FusionRef **ret_ref)
+fusion_ref_clear_all_local( FusionDev *dev, int fusion_id )
 {
-     FusionLink *l;
-
-     if (!locked && down_interruptible (&dev->ref.lock))
-          return -EINTR;
-
-     fusion_list_foreach (l, dev->ref.list) {
-          FusionRef *ref = (FusionRef *) l;
-
-          if (ref->id == id) {
-               *ret_ref = ref;
-               return 0;
-          }
-     }
-
-     if (!locked)
-          up (&dev->ref.lock);
-
-     return -EINVAL;
-}
-
-static int
-lock_ref (FusionDev *dev, bool locked, int id, FusionRef **ret_ref)
-{
-     int         ret;
      FusionRef *ref;
 
-     ret = lookup_ref (dev, locked, id, &ref);
-     if (ret)
-          return ret;
-
-     if (ref) {
-          fusion_list_move_to_front (&dev->ref.list, &ref->link);
-
-          if (down_interruptible (&ref->lock)) {
-               if (!locked)
-                    up (&dev->ref.lock);
-               return -EINTR;
-          }
-
-          if (!locked)
-               up (&dev->ref.lock);
-     }
+     down( &dev->ref.lock );
 
-     *ret_ref = ref;
+     fusion_list_foreach (ref, dev->ref.list)
+          clear_local( dev, ref, fusion_id );
 
-     return 0;
+     up( &dev->ref.lock );
 }
 
-static void
-unlock_ref (FusionRef *ref)
-{
-     up (&ref->lock);
-}
+/**********************************************************************************************************************/
 
 static int
 add_local (FusionRef *ref, int fusion_id, int add)
@@ -624,11 +464,11 @@ clear_local (FusionDev *dev, FusionRef *ref, int fusion_id)
 {
      FusionLink *l;
 
-     down (&ref->lock);
+     down (&ref->entry.lock);
 
      if (ref->locked == fusion_id) {
           ref->locked = 0;
-          wake_up_interruptible_all (&ref->wait);
+          wake_up_interruptible_all (&ref->entry.wait);
      }
 
      fusion_list_foreach (l, ref->local_refs) {
@@ -645,7 +485,7 @@ clear_local (FusionDev *dev, FusionRef *ref, int fusion_id)
           }
      }
 
-     up (&ref->lock);
+     up (&ref->entry.lock);
 }
 
 static void
@@ -677,7 +517,7 @@ notify_ref (FusionDev *dev, FusionRef *ref)
           fusion_call_execute (dev, 0, &execute);
      }
      else
-          wake_up_interruptible_all (&ref->wait);
+          wake_up_interruptible_all (&ref->entry.wait);
 }
 
 static int
@@ -689,14 +529,14 @@ propagate_local( FusionDev *dev, FusionRef *ref, int diff )
      fusion_list_foreach (l, ref->inheritors) {
           FusionRef *inheritor = ((Inheritor*) l)->ref;
 
-          if (down_interruptible( &inheritor->lock )) {
+          if (down_interruptible( &inheritor->entry.lock )) {
                printk( KERN_ERR "fusion_ref: propagate_local() interrupted!\n" );
                //return -EINTR;
           }
 
           propagate_local( dev, inheritor, diff );
 
-          up( &inheritor->lock );
+          up( &inheritor->entry.lock );
      }
 
      /* Apply difference. */
@@ -730,7 +570,7 @@ remove_inheritor(FusionRef *ref, FusionRef *from)
 {
      FusionLink *l;
 
-     down( &from->lock );
+     down( &from->entry.lock );
 
      fusion_list_foreach (l, from->inheritors) {
           Inheritor *inheritor = (Inheritor*) l;
@@ -743,7 +583,7 @@ remove_inheritor(FusionRef *ref, FusionRef *from)
           }
      }
 
-     up( &from->lock );
+     up( &from->entry.lock );
 }
 
 static void
@@ -755,7 +595,7 @@ drop_inheritors( FusionDev *dev, FusionRef *ref )
           FusionLink *next      = l->next;
           FusionRef  *inheritor = ((Inheritor*) l)->ref;
 
-          if (down_interruptible( &inheritor->lock )) {
+          if (down_interruptible( &inheritor->entry.lock )) {
                printk( KERN_ERR "fusion_ref: drop_inheritors() interrupted!\n" );
                //return;
           }
@@ -764,7 +604,7 @@ drop_inheritors( FusionDev *dev, FusionRef *ref )
 
           inheritor->inherited = NULL;
 
-          up( &inheritor->lock );
+          up( &inheritor->entry.lock );
 
 
           kfree (l);
diff --git a/drivers/char/fusion/ref.h b/drivers/char/fusion/ref.h
index 93ca0cf..1830e13b 100644
--- a/drivers/char/fusion/ref.h
+++ b/drivers/char/fusion/ref.h
@@ -46,7 +46,7 @@ int fusion_ref_zero_trylock (FusionDev      *dev,
                              int             id,
                              int             fusion_id);
 
-int fusion_ref_unlock       (FusionDev      *dev,
+int fusion_ref_zero_unlock  (FusionDev      *dev,
                              int             id,
                              int             fusion_id);
 
-- 
1.7.3.3

