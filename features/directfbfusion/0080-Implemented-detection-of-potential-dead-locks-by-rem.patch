From 6a4d959db2cca25c3dbd218df1ad81d0ad00849e Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Sun, 26 Mar 2006 18:44:19 +0000
Subject: [PATCH] Implemented detection of *potential* dead locks by remembering which locks are already acquired when another one is being acquired. As soon as a twist is detected, a warning will be printed.

The procfs entry for each skirmish shows a list of skirmishs that had ever
been acquired while itself was being acquired (the pre-acquisition list).

Needs to be enabled by setting DEBUG=yes, e.g. "DEBUG=yes sudo make install".

This does not detect dead locks right before they occur. It finds any
theoretically possible future dead lock situation due to lock order switches!
---
 drivers/char/fusion/entries.c   |   10 ++-
 drivers/char/fusion/entries.h   |    4 +-
 drivers/char/fusion/fusiondev.c |    1 +
 drivers/char/fusion/fusiondev.h |    1 +
 drivers/char/fusion/property.c  |    8 +-
 drivers/char/fusion/reactor.c   |    6 +-
 drivers/char/fusion/shmpool.c   |    6 +-
 drivers/char/fusion/skirmish.c  |  152 ++++++++++++++++++++++++++++++++++-----
 8 files changed, 156 insertions(+), 32 deletions(-)

diff --git a/drivers/char/fusion/entries.c b/drivers/char/fusion/entries.c
index 895539e..42773a4 100644
--- a/drivers/char/fusion/entries.c
+++ b/drivers/char/fusion/entries.c
@@ -260,7 +260,7 @@ fusion_entry_set_info( FusionEntries         *entries,
      FUSION_ASSERT( entries != NULL );
      FUSION_ASSERT( info != NULL );
 
-     ret = fusion_entry_lock( entries, info->id, &entry );
+     ret = fusion_entry_lock( entries, info->id, false, &entry );
      if (ret)
           return ret;
 
@@ -281,7 +281,7 @@ fusion_entry_get_info( FusionEntries   *entries,
      FUSION_ASSERT( entries != NULL );
      FUSION_ASSERT( info != NULL );
 
-     ret = fusion_entry_lock( entries, info->id, &entry );
+     ret = fusion_entry_lock( entries, info->id, false, &entry );
      if (ret)
           return ret;
 
@@ -295,6 +295,7 @@ fusion_entry_get_info( FusionEntries   *entries,
 int
 fusion_entry_lock( FusionEntries  *entries,
                    int             id,
+                   bool            keep_entries_lock,
                    FusionEntry   **ret_entry )
 {
      FusionEntry *entry;
@@ -342,7 +343,8 @@ fusion_entry_lock( FusionEntries  *entries,
 #endif
 
      /* Unlock entries. */
-     up( &entries->lock );
+     if (!keep_entries_lock)
+          up( &entries->lock );
 
      /* Return the locked entry. */
      *ret_entry = entry;
@@ -390,7 +392,7 @@ fusion_entry_wait( FusionEntry *entry, long *timeout )
      if (signal_pending(current))
           return -EINTR;
 
-     ret = fusion_entry_lock( entries, id, &entry2 );
+     ret = fusion_entry_lock( entries, id, false, &entry2 );
      switch (ret) {
           case -EINVAL:
                return -EIDRM;
diff --git a/drivers/char/fusion/entries.h b/drivers/char/fusion/entries.h
index 1d6259a..79a6157 100644
--- a/drivers/char/fusion/entries.h
+++ b/drivers/char/fusion/entries.h
@@ -99,6 +99,7 @@ int  fusion_entry_get_info( FusionEntries          *entries,
 
 int  fusion_entry_lock    ( FusionEntries    *entries,
                             int               id,
+                            bool              keep_entries_lock,
                             FusionEntry     **ret_entry );
 
 void fusion_entry_unlock  ( FusionEntry      *entry );
@@ -143,12 +144,13 @@ void fusion_entry_notify  ( FusionEntry      *entry,
                                                                                 \
      static inline int fusion_##name##_lock( FusionEntries  *entries,           \
                                              int             id,                \
+                                             bool            keep,              \
                                              Type          **ret_##name )       \
      {                                                                          \
           int          ret;                                                     \
           FusionEntry *entry;                                                   \
                                                                                 \
-          ret = fusion_entry_lock( entries, id, &entry );                       \
+          ret = fusion_entry_lock( entries, id, keep, &entry );                 \
                                                                                 \
           if (!ret)                                                             \
                *ret_##name = (Type *) entry;                                    \
diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 4421d35..3ac5186 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -279,6 +279,7 @@ fusion_open (struct inode *inode, struct file *file)
           snprintf (buf, 4, "%d", minor);
 
           fusion_devs[minor]->proc_dir = proc_mkdir (buf, proc_fusion_dir);
+          fusion_devs[minor]->index    = minor;
 
           ret = fusiondev_init (fusion_devs[minor]);
           if (ret) {
diff --git a/drivers/char/fusion/fusiondev.h b/drivers/char/fusion/fusiondev.h
index 45d3dfe..84d2328 100644
--- a/drivers/char/fusion/fusiondev.h
+++ b/drivers/char/fusion/fusiondev.h
@@ -25,6 +25,7 @@
 
 typedef struct {
      int                    refs;
+     int                    index;
 
      struct semaphore       enter_lock;
      int                    enter_ok;
diff --git a/drivers/char/fusion/property.c b/drivers/char/fusion/property.c
index 7942e28..eba178d 100644
--- a/drivers/char/fusion/property.c
+++ b/drivers/char/fusion/property.c
@@ -103,7 +103,7 @@ fusion_property_lease( FusionDev *dev, int id, int fusion_id )
 
      dev->stat.property_lease_purchase++;
 
-     ret = fusion_property_lock( &dev->properties, id, &property );
+     ret = fusion_property_lock( &dev->properties, id, false, &property );
      if (ret)
           return ret;
 
@@ -173,7 +173,7 @@ fusion_property_purchase( FusionDev *dev, int id, int fusion_id )
 
      dev->stat.property_lease_purchase++;
 
-     ret = fusion_property_lock( &dev->properties, id, &property );
+     ret = fusion_property_lock( &dev->properties, id, false, &property );
      if (ret)
           return ret;
 
@@ -246,7 +246,7 @@ fusion_property_cede( FusionDev *dev, int id, int fusion_id )
 
      dev->stat.property_cede++;
 
-     ret = fusion_property_lock( &dev->properties, id, &property );
+     ret = fusion_property_lock( &dev->properties, id, false, &property );
      if (ret)
           return ret;
 
@@ -285,7 +285,7 @@ fusion_property_holdup( FusionDev *dev, int id, int fusion_id )
      if (fusion_id > 1)
           return -EPERM;
 
-     ret = fusion_property_lock( &dev->properties, id, &property );
+     ret = fusion_property_lock( &dev->properties, id, false, &property );
      if (ret)
           return ret;
 
diff --git a/drivers/char/fusion/reactor.c b/drivers/char/fusion/reactor.c
index 2379db7..460c0bd 100644
--- a/drivers/char/fusion/reactor.c
+++ b/drivers/char/fusion/reactor.c
@@ -119,7 +119,7 @@ fusion_reactor_attach (FusionDev *dev, int id, int fusion_id)
      ReactorNode   *node;
      FusionReactor *reactor;
 
-     ret = fusion_reactor_lock( &dev->reactor, id, &reactor );
+     ret = fusion_reactor_lock( &dev->reactor, id, false, &reactor );
      if (ret)
           return ret;
 
@@ -153,7 +153,7 @@ fusion_reactor_detach (FusionDev *dev, int id, int fusion_id)
      ReactorNode   *node;
      FusionReactor *reactor;
 
-     ret = fusion_reactor_lock( &dev->reactor, id, &reactor );
+     ret = fusion_reactor_lock( &dev->reactor, id, false, &reactor );
      if (ret)
           return ret;
 
@@ -183,7 +183,7 @@ fusion_reactor_dispatch (FusionDev *dev, int id, int fusion_id,
      FusionLink    *l;
      FusionReactor *reactor;
 
-     ret = fusion_reactor_lock( &dev->reactor, id, &reactor );
+     ret = fusion_reactor_lock( &dev->reactor, id, false, &reactor );
      if (ret)
           return ret;
 
diff --git a/drivers/char/fusion/shmpool.c b/drivers/char/fusion/shmpool.c
index bbd028c..c79e650 100644
--- a/drivers/char/fusion/shmpool.c
+++ b/drivers/char/fusion/shmpool.c
@@ -214,7 +214,7 @@ fusion_shmpool_attach (FusionDev           *dev,
      SHMPoolNode   *node;
      FusionSHMPool *shmpool;
 
-     ret = fusion_shmpool_lock( &dev->shmpool, attach->pool_id, &shmpool );
+     ret = fusion_shmpool_lock( &dev->shmpool, attach->pool_id, false, &shmpool );
      if (ret)
           return ret;
 
@@ -251,7 +251,7 @@ fusion_shmpool_detach (FusionDev *dev, int id, int fusion_id)
      SHMPoolNode   *node;
      FusionSHMPool *shmpool;
 
-     ret = fusion_shmpool_lock( &dev->shmpool, id, &shmpool );
+     ret = fusion_shmpool_lock( &dev->shmpool, id, false, &shmpool );
      if (ret)
           return ret;
 
@@ -286,7 +286,7 @@ fusion_shmpool_dispatch( FusionDev             *dev,
      if (dispatch->size <= 0)
           return -EINVAL;
 
-     ret = fusion_shmpool_lock( &dev->shmpool, dispatch->pool_id, &shmpool );
+     ret = fusion_shmpool_lock( &dev->shmpool, dispatch->pool_id, false, &shmpool );
      if (ret)
           return ret;
 
diff --git a/drivers/char/fusion/skirmish.c b/drivers/char/fusion/skirmish.c
index 5d4117c..6739210 100644
--- a/drivers/char/fusion/skirmish.c
+++ b/drivers/char/fusion/skirmish.c
@@ -27,34 +27,65 @@
 #include "skirmish.h"
 
 
-typedef struct {
-     FusionEntry        entry;
+#define MAX_PRE_ACQUISITIONS  32
 
-     int                lock_fid;  /* non-zero if locked */
-     int                lock_pid;
-     int                lock_count;
 
-     int                lock_total;
-} FusionSkirmish;
+typedef struct __FUSION_FusionSkirmish FusionSkirmish;
+
+struct __FUSION_FusionSkirmish {
+     FusionEntry entry;
+
+     int         lock_fid;  /* non-zero if locked */
+     int         lock_pid;
+     int         lock_count;
+
+     int         lock_total;
+
+#ifdef FUSION_DEBUG_SKIRMISH_DEADLOCK
+     int         pre_acquis[MAX_PRE_ACQUISITIONS];
+
+     bool        outer;
+#endif
+};
 
 static int
 fusion_skirmish_print( FusionEntry *entry,
                        void        *ctx,
                        char        *buf )
 {
-     int             written;
+     int             written  = 0;
      FusionSkirmish *skirmish = (FusionSkirmish*) entry;
 
-     written = sprintf( buf, "%6dx total", skirmish->lock_total );
+#ifdef FUSION_DEBUG_SKIRMISH_DEADLOCK
+     int             i, n;
+
+
+     for (i=0, n=0; i<MAX_PRE_ACQUISITIONS; i++) {
+          if (skirmish->pre_acquis[i]) {
+               n++;
+          }
+     }
+
+     written += sprintf( buf + written, "[%2d]%s", n, skirmish->outer ? "." : " " );
+
+     for (i=0, n=0; i<MAX_PRE_ACQUISITIONS; i++) {
+          if (skirmish->pre_acquis[i]) {
+               written += sprintf( buf + written, "%s%02x", n ? "," : "", skirmish->pre_acquis[i] - 1 );
+
+               n++;
+          }
+     }
+#endif
 
      if (skirmish->lock_fid) {
           if (skirmish->entry.waiters)
-               return sprintf( buf + written, ", %dx [0x%08x] (%d)  %d WAITING\n",
-                               skirmish->lock_count, skirmish->lock_fid, skirmish->lock_pid,
-                               skirmish->entry.waiters ) + written;
+               return sprintf( buf + written, " - %dx [0x%08x] (%d)  %d WAITING\n",
+                               skirmish->lock_count, skirmish->lock_fid,
+                               skirmish->lock_pid, skirmish->entry.waiters ) + written;
           else
-               return sprintf( buf + written, ", %dx [0x%08x] (%d)\n",
-                               skirmish->lock_count, skirmish->lock_fid, skirmish->lock_pid ) + written;
+               return sprintf( buf + written, " - %dx [0x%08x] (%d)\n",
+                               skirmish->lock_count, skirmish->lock_fid,
+                               skirmish->lock_pid ) + written;
      }
 
      return sprintf( buf + written, "\n" ) + written;
@@ -96,10 +127,15 @@ fusion_skirmish_prevail (FusionDev *dev, int id, int fusion_id)
 {
      int             ret;
      FusionSkirmish *skirmish;
+#ifdef FUSION_DEBUG_SKIRMISH_DEADLOCK
+     FusionSkirmish *s;
+     int             i;
+     bool            outer = true;
+#endif
 
      dev->stat.skirmish_prevail_swoop++;
 
-     ret = fusion_skirmish_lock( &dev->skirmish, id, &skirmish );
+     ret = fusion_skirmish_lock( &dev->skirmish, id, true, &skirmish );
      if (ret)
           return ret;
 
@@ -107,9 +143,70 @@ fusion_skirmish_prevail (FusionDev *dev, int id, int fusion_id)
           skirmish->lock_count++;
           skirmish->lock_total++;
           fusion_skirmish_unlock( skirmish );
+          up( &dev->skirmish.lock );
           return 0;
      }
 
+#ifdef FUSION_DEBUG_SKIRMISH_DEADLOCK
+     /* look in currently acquired skirmishs for this one being
+        a pre-acquisition, indicating a potential deadlock */
+     fusion_list_foreach (s, dev->skirmish.list) {
+          if (s->lock_pid != current->pid)
+               continue;
+
+          outer = false;
+
+          for (i=0; i<MAX_PRE_ACQUISITIONS; i++) {
+               if (s->pre_acquis[i] == id + 1) {
+                    printk( KERN_DEBUG "FusionSkirmish: Potential deadlock "
+                            "between locked 0x%x and to be locked 0x%x in world %d!\n",
+                            s->entry.id, skirmish->entry.id, dev->index );
+               }
+          }
+     }
+
+     if (outer)
+          skirmish->outer = true;
+
+     /* remember all previously acquired skirmishs being pre-acquisitions for
+        this one, to detect potential deadlocks due to a lock order twist */
+     fusion_list_foreach (s, dev->skirmish.list) {
+          int free = -1;
+
+          if (s->lock_pid != current->pid)
+               continue;
+
+          for (i=0; i<MAX_PRE_ACQUISITIONS; i++) {
+               if (skirmish->pre_acquis[i]) {
+                    if (skirmish->pre_acquis[i] == s->entry.id + 1) {
+                         break;
+                    }
+               }
+               else
+                    free = i;
+          }
+
+          /* not found? */
+          if (i == MAX_PRE_ACQUISITIONS) {
+               if (free != -1) {
+                    skirmish->pre_acquis[free] = s->entry.id + 1;
+               }
+               else {
+                    printk( KERN_DEBUG "FusionSkirmish: Too many pre-acquisitions to remember.\n" );
+
+                    printk( KERN_DEBUG " [ '%s' ] <- ", skirmish->entry.name );
+
+                    for (i=0; i<MAX_PRE_ACQUISITIONS; i++)
+                         printk( "0x%03x ", skirmish->pre_acquis[i] - 1 );
+
+                    printk( "\n" );
+               }
+          }
+     }
+#endif
+
+     up( &dev->skirmish.lock );
+
      while (skirmish->lock_pid) {
           ret = fusion_skirmish_wait( skirmish, NULL );
           if (ret)
@@ -133,7 +230,7 @@ fusion_skirmish_swoop (FusionDev *dev, int id, int fusion_id)
      int             ret;
      FusionSkirmish *skirmish;
 
-     ret = fusion_skirmish_lock( &dev->skirmish, id, &skirmish );
+     ret = fusion_skirmish_lock( &dev->skirmish, id, false, &skirmish );
      if (ret)
           return ret;
 
@@ -169,7 +266,7 @@ fusion_skirmish_dismiss (FusionDev *dev, int id, int fusion_id)
      int             ret;
      FusionSkirmish *skirmish;
 
-     ret = fusion_skirmish_lock( &dev->skirmish, id, &skirmish );
+     ret = fusion_skirmish_lock( &dev->skirmish, id, false, &skirmish );
      if (ret)
           return ret;
 
@@ -195,6 +292,27 @@ fusion_skirmish_dismiss (FusionDev *dev, int id, int fusion_id)
 int
 fusion_skirmish_destroy (FusionDev *dev, int id)
 {
+#ifdef FUSION_DEBUG_SKIRMISH_DEADLOCK
+     int             i;
+     FusionSkirmish *s;
+
+     /* Lock entries. */
+     if (down_interruptible( &dev->skirmish.lock ))
+          return -EINTR;
+
+     /* remove from all pre-acquisition lists */
+     fusion_list_foreach (s, dev->skirmish.list) {
+          for (i=0; i<MAX_PRE_ACQUISITIONS; i++) {
+               if (s->pre_acquis[i] == id + 1)
+                    s->pre_acquis[i] = 0;
+          }
+     }
+
+     up( &dev->skirmish.lock );
+
+     /* FIXME: gap? */
+#endif
+
      return fusion_entry_destroy( &dev->skirmish, id );
 }
 
-- 
1.7.3.3

