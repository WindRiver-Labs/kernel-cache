From 14761592a41ad19b4c79c99fa890d3deae4d7451 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@shizo.(none)>
Date: Mon, 28 May 2007 19:48:23 +0200
Subject: [PATCH] Added FUSION_SKIRMISH_WAIT and FUSION_SKIRMISH_NOTIFY.

When you hold the lock you can wait until you get notified,
where others can get the lock while you're waiting.

At the moment it requires the notifier to acquire the lock.
---
 drivers/char/fusion/fusiondev.c |   12 +++++
 drivers/char/fusion/fusiondev.h |    2 +
 drivers/char/fusion/skirmish.c  |   90 ++++++++++++++++++++++++++++++++++++---
 drivers/char/fusion/skirmish.h  |    8 +++
 include/linux/fusion.h          |    2 +
 5 files changed, 107 insertions(+), 7 deletions(-)

diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index be8d730..3a7ab54 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -763,6 +763,18 @@ skirmish_ioctl (FusionDev *dev, Fusionee *fusionee,
                     return -EFAULT;
 
                return ret;
+
+          case _IOC_NR(FUSION_SKIRMISH_WAIT):
+               if (get_user (id, (int*) arg))
+                    return -EFAULT;
+
+               return fusion_skirmish_wait_ (dev, id, fusion_id);
+
+          case _IOC_NR(FUSION_SKIRMISH_NOTIFY):
+               if (get_user (id, (int*) arg))
+                    return -EFAULT;
+
+               return fusion_skirmish_notify_ (dev, id, fusion_id);
      }
 
      return -ENOSYS;
diff --git a/drivers/char/fusion/fusiondev.h b/drivers/char/fusion/fusiondev.h
index 6dbc340..73c972f 100644
--- a/drivers/char/fusion/fusiondev.h
+++ b/drivers/char/fusion/fusiondev.h
@@ -47,6 +47,8 @@ struct __Fusion_FusionDev {
 
           int skirmish_prevail_swoop;
           int skirmish_dismiss;
+          int skirmish_wait;
+          int skirmish_notify;
 
           int shmpool_attach;
           int shmpool_detach;
diff --git a/drivers/char/fusion/skirmish.c b/drivers/char/fusion/skirmish.c
index 5c8fa7d..edd8e13 100644
--- a/drivers/char/fusion/skirmish.c
+++ b/drivers/char/fusion/skirmish.c
@@ -35,18 +35,20 @@
 typedef struct __FUSION_FusionSkirmish FusionSkirmish;
 
 struct __FUSION_FusionSkirmish {
-     FusionEntry entry;
+     FusionEntry  entry;
 
-     int         lock_fid;  /* non-zero if locked */
-     int         lock_pid;
-     int         lock_count;
+     int          lock_fid;  /* non-zero if locked */
+     int          lock_pid;
+     int          lock_count;
 
-     int         lock_total;
+     int          lock_total;
+
+     unsigned int notify_count;
 
 #ifdef FUSION_DEBUG_SKIRMISH_DEADLOCK
-     int         pre_acquis[MAX_PRE_ACQUISITIONS];
+     int          pre_acquis[MAX_PRE_ACQUISITIONS];
 
-     bool        outer;
+     bool         outer;
 #endif
 };
 
@@ -343,6 +345,80 @@ fusion_skirmish_destroy (FusionDev *dev, int id)
      return fusion_entry_destroy( &dev->skirmish, id );
 }
 
+int
+fusion_skirmish_wait_ (FusionDev *dev, int id, int fusion_id)
+{
+     int             ret;
+     int             lock_count;
+     unsigned int    notify_count;
+     FusionSkirmish *skirmish;
+
+     ret = fusion_skirmish_lock( &dev->skirmish, id, false, &skirmish );
+     if (ret)
+          return ret;
+
+     dev->stat.skirmish_wait++;
+
+     if (skirmish->lock_pid != current->pid) {
+          fusion_skirmish_unlock( skirmish );
+          return -EIO;
+     }
+
+     lock_count   = skirmish->lock_count;
+     notify_count = skirmish->notify_count;
+
+     skirmish->lock_fid = 0;
+     skirmish->lock_pid = 0;
+
+     fusion_skirmish_notify( skirmish, true );
+
+     while (notify_count == skirmish->notify_count) {
+          ret = fusion_skirmish_wait( skirmish, NULL );
+          if (ret)
+               return ret;
+     }
+
+     while (skirmish->lock_pid) {
+          ret = fusion_skirmish_wait( skirmish, NULL );
+          if (ret)
+               return ret;
+     }
+
+     skirmish->lock_fid   = fusion_id;
+     skirmish->lock_pid   = current->pid;
+     skirmish->lock_count = lock_count;
+
+     fusion_skirmish_unlock( skirmish );
+
+     return 0;
+}
+
+int
+fusion_skirmish_notify_ (FusionDev *dev, int id, int fusion_id)
+{
+     int             ret;
+     FusionSkirmish *skirmish;
+
+     ret = fusion_skirmish_lock( &dev->skirmish, id, false, &skirmish );
+     if (ret)
+          return ret;
+
+     dev->stat.skirmish_notify++;
+
+     if (skirmish->lock_pid != current->pid) {
+          fusion_skirmish_unlock( skirmish );
+          return -EIO;
+     }
+
+     skirmish->notify_count++;
+
+     fusion_skirmish_notify( skirmish, true );
+
+     fusion_skirmish_unlock( skirmish );
+
+     return 0;
+}
+
 void
 fusion_skirmish_dismiss_all (FusionDev *dev, int fusion_id)
 {
diff --git a/drivers/char/fusion/skirmish.h b/drivers/char/fusion/skirmish.h
index 18eaa53..318fec4 100644
--- a/drivers/char/fusion/skirmish.h
+++ b/drivers/char/fusion/skirmish.h
@@ -50,6 +50,14 @@ int fusion_skirmish_dismiss (FusionDev *dev,
 int fusion_skirmish_destroy (FusionDev *dev,
                              int        id);
 
+int fusion_skirmish_wait_   (FusionDev *dev,
+                             int        id,
+                             int        fusion_id);
+
+int fusion_skirmish_notify_ (FusionDev *dev,
+                             int        id,
+                             int        fusion_id);
+
 
 /* internal functions */
 
diff --git a/include/linux/fusion.h b/include/linux/fusion.h
index 12e3d0f..2659b90 100644
--- a/include/linux/fusion.h
+++ b/include/linux/fusion.h
@@ -290,6 +290,8 @@ typedef struct {
 #define FUSION_SKIRMISH_DISMISS              _IOW(FT_SKIRMISH,  0x03, int)
 #define FUSION_SKIRMISH_DESTROY              _IOW(FT_SKIRMISH,  0x04, int)
 #define FUSION_SKIRMISH_LOCK_COUNT           _IOW(FT_SKIRMISH,  0x05, int)
+#define FUSION_SKIRMISH_WAIT                 _IOW(FT_SKIRMISH,  0x06, int)
+#define FUSION_SKIRMISH_NOTIFY               _IOW(FT_SKIRMISH,  0x07, int)
 
 #define FUSION_PROPERTY_NEW                  _IOW(FT_PROPERTY,  0x00, int)
 #define FUSION_PROPERTY_LEASE                _IOW(FT_PROPERTY,  0x01, int)
-- 
1.7.3.3

