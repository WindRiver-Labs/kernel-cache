From 7bf3cb9b21743ddfd710e33c51d6b4ee8f17f036 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@shizo.zion.home>
Date: Tue, 29 May 2007 17:05:01 +0200
Subject: [PATCH] FusionReactorDispatchCallback: If call_ptr is NULL and the dispatched message is of (void*) size and its content points to shared memory, then pass that into the dispatch callback's call_ptr rather than NULL.

---
 drivers/char/fusion/reactor.c |   11 ++++++++++-
 drivers/char/fusion/shmpool.c |    9 +++------
 drivers/char/fusion/shmpool.h |    2 ++
 3 files changed, 15 insertions(+), 7 deletions(-)

diff --git a/drivers/char/fusion/reactor.c b/drivers/char/fusion/reactor.c
index f0cfd9c..549daa8 100644
--- a/drivers/char/fusion/reactor.c
+++ b/drivers/char/fusion/reactor.c
@@ -28,6 +28,7 @@
 #include "fusionee.h"
 #include "list.h"
 #include "reactor.h"
+#include "shmpool.h"
 
 typedef struct {
      FusionLink         link;
@@ -329,6 +330,8 @@ fusion_reactor_dispatch (FusionDev *dev, int id, int channel, Fusionee *fusionee
      }
 
      if (reactor->call_id) {
+          void *ptr = *(void**)msg_data;
+
           dispatch = kmalloc (sizeof(ReactorDispatch), GFP_KERNEL);
           if (!dispatch) {
                fusion_reactor_unlock( reactor );
@@ -338,7 +341,13 @@ fusion_reactor_dispatch (FusionDev *dev, int id, int channel, Fusionee *fusionee
           dispatch->count    = 0;
           dispatch->call_id  = reactor->call_id;
           dispatch->call_arg = channel;
-          dispatch->call_ptr = reactor->call_ptr;
+
+          if (!reactor->call_ptr && msg_size == sizeof(ptr) &&
+              (unsigned long) ptr >= FUSION_SHM_BASE &&
+              (unsigned long) ptr < (FUSION_SHM_BASE+FUSION_SHM_BASE))
+               dispatch->call_ptr = ptr;
+          else
+               dispatch->call_ptr = reactor->call_ptr;
      }
 
      reactor->dispatch_count++;
diff --git a/drivers/char/fusion/shmpool.c b/drivers/char/fusion/shmpool.c
index d8310b7..c53a090 100644
--- a/drivers/char/fusion/shmpool.c
+++ b/drivers/char/fusion/shmpool.c
@@ -29,9 +29,6 @@
 #include "shmpool.h"
 
 
-#define SHM_BASE    0x20010000     /* virtual base address */
-#define SHM_SIZE    0x1FFEF000     /* size of virtual address space */
-
 
 typedef struct {
      FusionLink         link;
@@ -81,7 +78,7 @@ static void         free_all_nodes( FusionSHMPool *shmpool );
 
 static DECLARE_MUTEX (addr_lock);
 static FusionLink    *addr_entries;
-static unsigned long  addr_base = SHM_BASE;
+static unsigned long  addr_base = FUSION_SHM_BASE;
 
 /******************************************************************************/
 
@@ -109,7 +106,7 @@ fusion_shmpool_construct( FusionEntry *entry,
 
      down( &addr_lock );
 
-     if (addr_base + poolnew->max_size >= SHM_BASE + SHM_SIZE) {
+     if (addr_base + poolnew->max_size >= FUSION_SHM_BASE + FUSION_SHM_SIZE) {
           up( &addr_lock );
           printk( KERN_WARNING "%s: virtual address space exhausted! (FIXME)\n", __FUNCTION__ );
           return -ENOSPC;
@@ -146,7 +143,7 @@ fusion_shmpool_destruct( FusionEntry *entry,
       * free trailing address space
       */
 
-     addr_base = SHM_BASE;
+     addr_base = FUSION_SHM_BASE;
 
      fusion_list_foreach (addr_entry, addr_entries) {
           if (addr_entry->next_base > addr_base)
diff --git a/drivers/char/fusion/shmpool.h b/drivers/char/fusion/shmpool.h
index 8f07b82..06c6c38 100644
--- a/drivers/char/fusion/shmpool.h
+++ b/drivers/char/fusion/shmpool.h
@@ -18,6 +18,8 @@
 #include "fusiondev.h"
 #include "types.h"
 
+#define FUSION_SHM_BASE    0x20010000     /* virtual base address */
+#define FUSION_SHM_SIZE    0x1FFEF000     /* size of virtual address space */
 
 /* module init/cleanup */
 
-- 
1.7.3.3

