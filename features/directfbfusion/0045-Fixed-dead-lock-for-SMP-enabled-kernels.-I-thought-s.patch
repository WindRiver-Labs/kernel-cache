From c9ae227573f0316995bdbf75fae1120d36351c5d Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Sat, 4 Oct 2003 15:39:42 +0000
Subject: [PATCH] Fixed dead lock for SMP enabled kernels. I thought spinlocks were recursive.

---
 drivers/char/fusion/fusiondev.c |   14 ++++++++++++++
 drivers/char/fusion/fusionee.c  |   28 +++++++++++++++++++++-------
 2 files changed, 35 insertions(+), 7 deletions(-)

diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 9483c15..4777859 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -35,7 +35,11 @@
 #include "ref.h"
 #include "skirmish.h"
 
+#if 0
 #define DEBUG(x...)  printk (KERN_DEBUG "Fusion: " x)
+#else
+#define DEBUG(x...)  do {} while (0)
+#endif
 
 #ifndef FUSION_MAJOR
 #define FUSION_MAJOR 253
@@ -172,6 +176,8 @@ fusion_open (struct inode *inode, struct file *file)
      int fusion_id;
      int minor = minor(inode->i_rdev);
 
+     DEBUG( "fusion_open\n" );
+
      spin_lock (&devs_lock);
 
      if (!fusion_devs[minor]) {
@@ -239,6 +245,8 @@ fusion_release (struct inode *inode, struct file *file)
      int minor     = minor(inode->i_rdev);
      int fusion_id = (int) file->private_data;
 
+     DEBUG( "fusion_release\n" );
+     
      fusionee_destroy (fusion_devs[minor], fusion_id);
 
      spin_lock (&devs_lock);
@@ -264,6 +272,8 @@ fusion_read (struct file *file, char *buf, size_t count, loff_t *ppos)
      int        fusion_id = (int) file->private_data;
      FusionDev *dev       = fusion_devs[minor(file->f_dentry->d_inode->i_rdev)];
 
+     DEBUG( "fusion_read (%d)\n", count );
+
      return fusionee_get_messages (dev, fusion_id, buf, count,
                                    !(file->f_flags & O_NONBLOCK));
 }
@@ -274,6 +284,8 @@ fusion_poll (struct file *file, poll_table * wait)
      int        fusion_id = (int) file->private_data;
      FusionDev *dev       = fusion_devs[minor(file->f_dentry->d_inode->i_rdev)];
 
+     DEBUG( "fusion_poll\n" );
+     
      return fusionee_poll (dev, fusion_id, file, wait);
 }
 
@@ -294,6 +306,8 @@ fusion_ioctl (struct inode *inode, struct file *file,
      FusionCallExecute      execute;
      FusionCallReturn       call_ret;
 
+     DEBUG( "fusion_ioctl (0x%08x)\n", cmd );
+     
      switch (cmd) {
           case FUSION_GET_ID:
                if (put_user (fusion_id, (int*) arg))
diff --git a/drivers/char/fusion/fusionee.c b/drivers/char/fusion/fusionee.c
index 3af351c..02fb314 100644
--- a/drivers/char/fusion/fusionee.c
+++ b/drivers/char/fusion/fusionee.c
@@ -31,6 +31,11 @@
 #include "ref.h"
 #include "skirmish.h"
 
+#if 0
+#define DEBUG(x...)  printk (KERN_DEBUG "Fusion: " x)
+#else
+#define DEBUG(x...)  do {} while (0)
+#endif
 
 typedef struct {
      FusionLink        link;
@@ -183,20 +188,28 @@ fusionee_send_message (FusionDev *dev, int id, int recipient,
      Fusionee *sender   = NULL;
      Fusionee *fusionee = lock_fusionee (dev, recipient);
 
+     DEBUG( "fusionee_send_message (%d -> %d, type %d, id %d, size %d)\n",
+            id, recipient, msg_type, msg_id, msg_size );
+
      if (!fusionee)
           return -EINVAL;
 
      if (id) {
-          sender = lock_fusionee (dev, id);
-          if (!sender) {
-               unlock_fusionee (fusionee);
-               return -EIO;
+          if (id == recipient) {
+               sender = fusionee;
+          }
+          else {
+               sender = lock_fusionee (dev, id);
+               if (!sender) {
+                    unlock_fusionee (fusionee);
+                    return -EIO;
+               }
           }
      }
 
      message = kmalloc (sizeof(Message) + msg_size, GFP_ATOMIC);
      if (!message) {
-          if (sender)
+          if (sender && sender != fusionee)
                unlock_fusionee (sender);
           unlock_fusionee (fusionee);
           return -ENOMEM;
@@ -208,7 +221,7 @@ fusionee_send_message (FusionDev *dev, int id, int recipient,
           memcpy (message->data, msg_data, msg_size);
      else if (copy_from_user (message->data, msg_data, msg_size)) {
           kfree (message);
-          if (sender)
+          if (sender && sender != fusionee)
                unlock_fusionee (sender);
           unlock_fusionee (fusionee);
           return -EFAULT;
@@ -226,8 +239,9 @@ fusionee_send_message (FusionDev *dev, int id, int recipient,
 
      wake_up_interruptible_all (&fusionee->wait);
 
-     if (sender)
+     if (sender && sender != fusionee)
           unlock_fusionee (sender);
+
      unlock_fusionee (fusionee);
 
      return 0;
-- 
1.7.3.3

