From a2960745e8bb40be02812da15d67897cce95d5be Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Wed, 27 Oct 2010 00:18:32 +0200
Subject: [PATCH] skirmish: allow second transfer, return based on serial

---
 drivers/char/fusion/call.c     |   36 +++++-
 drivers/char/fusion/skirmish.c |  316 +++++++++++++++++++++++++++++++++-------
 drivers/char/fusion/skirmish.h |    4 +-
 3 files changed, 301 insertions(+), 55 deletions(-)

diff --git a/drivers/char/fusion/call.c b/drivers/char/fusion/call.c
index 4c8ca91..1d51d4e 100644
--- a/drivers/char/fusion/call.c
+++ b/drivers/char/fusion/call.c
@@ -42,6 +42,7 @@ typedef struct {
 
 	int call_id;
 	unsigned int serial;
+	int          caller_pid;
 } FusionCallExecution;
 
 typedef struct {
@@ -102,6 +103,31 @@ static void fusion_call_destruct(FusionEntry * entry, void *ctx)
 	free_all_executions(call);
 }
 
+__attribute__((unused))
+static void print_call( FusionCall* call )
+{
+	FusionEntry *entry;
+	FusionLink *e;
+
+	entry = &call->entry;
+
+	printk( KERN_CRIT "%-2d %s, fid:%d, %d calls)",
+		   entry->id,
+		   entry->name[0] ? entry->name : "???",
+		   call->fusion_id,
+		   call->count);
+
+	fusion_list_foreach(e, call->executions) {
+		FusionCallExecution *exec = (FusionCallExecution *) e;
+
+		printk( "/%lx:%s",
+			   exec->caller   ? fusionee_id(exec->caller) : -1,
+			   exec->executed ? "idle" : "busy" );
+	}
+
+	printk("\n");
+}
+
 static void
 fusion_call_print(FusionEntry * entry, void *ctx, struct seq_file *p)
 {
@@ -220,10 +246,12 @@ fusion_call_execute(FusionDev * dev, Fusionee * fusionee,
 	if (execution) {
 		/* Transfer held skirmishs (locks). */
 		fusion_skirmish_transfer_all(dev, call->fusion_id,
-					     fusionee_id(fusionee),
-					     current->pid);
+						fusionee_id(fusionee),
+						current->pid,
+						serial);
 
 		/* Unlock call and wait for execution result. TODO: add timeout? */
+
 		fusion_sleep_on(&execution->wait, &call->entry.lock, 0);
 
 		if (signal_pending(current)) {
@@ -300,6 +328,9 @@ fusion_call_return(FusionDev * dev, int fusion_id, FusionCallReturn * call_ret)
 		/* FIXME: Caller might still have received a signal since check above. */
 		FUSION_ASSERT(execution->caller != NULL);
 
+		/* Return skirmishs. */
+		fusion_skirmish_return_all(dev, fusion_id, execution->caller_pid, execution->serial);
+
 		/* Wake up caller. */
 		wake_up_interruptible(&execution->wait);
 
@@ -402,6 +433,7 @@ static FusionCallExecution *add_execution(FusionCall * call,
 	memset(execution, 0, sizeof(FusionCallExecution));
 
 	execution->caller = caller;
+	execution->caller_pid = current->pid;
 	execution->call_id = call->entry.id;
 	execution->serial = serial;
 
diff --git a/drivers/char/fusion/skirmish.c b/drivers/char/fusion/skirmish.c
index f1f48f9..bcf8d67 100644
--- a/drivers/char/fusion/skirmish.c
+++ b/drivers/char/fusion/skirmish.c
@@ -52,6 +52,13 @@ struct __FUSION_FusionSkirmish {
 	FusionID transfer_from;
 	int transfer_from_pid;
 	int transfer_count;
+	unsigned int transfer_serial;
+
+	FusionID transfer2_to;
+	FusionID transfer2_from;
+	int transfer2_from_pid;
+	int transfer2_count;
+	unsigned int transfer2_serial;
 
 #ifdef FUSION_DEBUG_SKIRMISH_DEADLOCK
 	int pre_acquis[MAX_PRE_ACQUISITIONS];
@@ -69,6 +76,82 @@ struct __FUSION_FusionSkirmish {
 static unsigned int m_pidlocks[PID_MAX_DEFAULT + 1];	/* FIXME: find cleaner, but still fast method */
 static sigset_t m_sigmask;
 
+
+static void
+print_skirmish_internal( FusionSkirmish* skirmish, const char* pHeader )
+{
+	FusionEntry *entry;
+	char p[16];
+	struct timeval now;
+	static int kaboemcount = 100;
+
+	do_gettimeofday(&now);
+
+	entry = &skirmish->entry;
+
+	if (entry->last_lock.tv_sec) {
+		int diff = ((now.tv_sec - entry->last_lock.tv_sec) * 1000 +
+                    (now.tv_usec - entry->last_lock.tv_usec) / 1000);
+
+		if (diff < 1000) {
+			sprintf(p, "%3d  ms  ", diff);
+		} else if (diff < 1000000) {
+			sprintf(p, "%3d.%d s  ", diff / 1000,
+				   (diff % 1000) / 100);
+		} else {
+			diff = (now.tv_sec - entry->last_lock.tv_sec +
+				(now.tv_usec -
+				 entry->last_lock.tv_usec) / 1000000);
+
+			sprintf(p, "%3d.%d h  ", diff / 3600,
+				   (diff % 3600) / 360);
+		}
+	} else
+		sprintf(p, "  -.-    ");
+
+
+	printk( "%s %s %-3ld.%03ld %d %-18s [1] t:%ld f:%ld fpid:%-4d c:%d s:%d [2] t:%ld f:%ld fpid:%-4d c:%d s:%d - c:%d f:%d p:%-4d w:%d\n",
+		   pHeader ? pHeader : " ",
+		   p,
+		   entry->last_lock.tv_sec,
+		   (entry->last_lock.tv_usec)/1000000    ,
+		   entry->id,
+		   entry->name[0] ? entry->name : "???",
+
+		   skirmish->transfer_to,
+		   skirmish->transfer_from,
+		   skirmish->transfer_from_pid,
+		   skirmish->transfer_count,
+		   skirmish->transfer_serial,
+
+		   skirmish->transfer2_to,
+		   skirmish->transfer2_from,
+		   skirmish->transfer2_from_pid,
+		   skirmish->transfer2_count,
+		   skirmish->transfer2_serial,
+
+		   skirmish->lock_count,
+		   skirmish->lock_fid,
+		   skirmish->lock_pid,
+		   skirmish->entry.waiters
+		   );
+
+	if( kaboemcount <= 0 ) {
+		printk( KERN_EMERG "boem !\n" );
+		kill_pgrp(task_pgrp(current), SIGSEGV, 1);
+		while(1) {
+			yield();
+		}
+	}
+}
+
+static void
+print_skirmish( FusionSkirmish* skirmish )
+{
+	print_skirmish_internal( skirmish, KERN_EMERG " skirmish" );
+}
+
+
 #ifdef FUSION_BLOCK_SIGNALS
 static int skirmish_signal_handler(void *ctx)
 {
@@ -77,7 +160,7 @@ static int skirmish_signal_handler(void *ctx)
 		return 1;
 	}
 
-	printk(KERN_DEBUG "FusionSkirmish: Blocking signal for process %d!\n",
+	printk(KERN_EMERG "FusionSkirmish: Blocking signal for process %d!\n",
 	       current->pid);
 
 	return 0;
@@ -111,20 +194,24 @@ fusion_skirmish_print(FusionEntry * entry, void *ctx, struct seq_file *p)
 		}
 	}
 #endif
-
-	if (skirmish->lock_fid) {
-		if (skirmish->entry.waiters)
-			seq_printf(p, " - %dx [0x%08x] (%d)  %d WAITING\n",
-				   skirmish->lock_count, skirmish->lock_fid,
-				   skirmish->lock_pid, skirmish->entry.waiters);
-		else
-			seq_printf(p, " - %dx [0x%08x] (%d)\n",
-				   skirmish->lock_count, skirmish->lock_fid,
-				   skirmish->lock_pid);
-		return;
-	}
-
-	seq_printf(p, "\n");
+	seq_printf(p, "[1] t:%ld, f:%ld, fpid:%d, c:%d s:%d, [2] t:%ld, f:%ld, fpid:%d, c:%d, s:%d",
+				skirmish->transfer_to,
+				skirmish->transfer_from,
+				skirmish->transfer_from_pid,
+				skirmish->transfer_count,
+				skirmish->transfer_serial,
+				skirmish->transfer2_to,
+				skirmish->transfer2_from,
+				skirmish->transfer2_from_pid,
+				skirmish->transfer2_count,
+				skirmish->transfer2_serial
+				);
+	seq_printf(p, ", c:%d, f:0x%08x, p:%d, waiters:%d\n",
+				skirmish->lock_count,
+				skirmish->lock_fid,
+				skirmish->lock_pid,
+				skirmish->entry.waiters
+				);
 }
 
 FUSION_ENTRY_CLASS(FusionSkirmish, skirmish, NULL, NULL, fusion_skirmish_print)
@@ -245,11 +332,14 @@ int fusion_skirmish_prevail(FusionDev * dev, int id, int fusion_id)
 
 	up(&dev->skirmish.lock);
 
-	while (skirmish->lock_pid || (skirmish->transfer_to != 0 &&
-				      fusionee_dispatcher_pid(dev,
-							      skirmish->
-							      transfer_to) !=
-				      current->pid)) {
+
+     while (   skirmish->lock_pid
+            || (    (skirmish->transfer2_to == 0)
+                 &&  skirmish->transfer_to
+                 && (fusionee_dispatcher_pid(dev, skirmish-> transfer_to) != current->pid))
+            || (     skirmish->transfer2_to
+                 && (fusionee_dispatcher_pid(dev, skirmish-> transfer2_to) != current->pid)) )
+     {
 		ret = fusion_skirmish_wait(skirmish, NULL);
 		if (ret)
 			return ret;
@@ -283,11 +373,13 @@ int fusion_skirmish_swoop(FusionDev * dev, int id, int fusion_id)
 
 	dev->stat.skirmish_prevail_swoop++;
 
-	if (skirmish->lock_fid || (skirmish->transfer_to != 0 &&
-				   fusionee_dispatcher_pid(dev,
-							   skirmish->
-							   transfer_to) !=
-				   current->pid)) {
+     if (   skirmish->lock_fid
+         || (    (skirmish->transfer2_to == 0)
+              &&  skirmish->transfer_to
+              && (fusionee_dispatcher_pid(dev, skirmish->transfer_to) != current->pid))
+         || (     skirmish->transfer2_to
+              && (fusionee_dispatcher_pid(dev, skirmish-> transfer2_to) != current->pid)) )
+     {
 		if (skirmish->lock_pid == current->pid) {
 			skirmish->lock_count++;
 			skirmish->lock_total++;
@@ -614,11 +706,27 @@ void fusion_skirmish_dismiss_all(FusionDev * dev, int fusion_id)
 			wake_up_interruptible_all(&skirmish->entry.wait);
 		}
 
+		if (skirmish->transfer2_from == fusion_id) {
+			skirmish->transfer2_to       = 0;
+			skirmish->transfer2_from     = 0;
+			skirmish->transfer2_from_pid = 0;
+			skirmish->transfer2_count    = 0;
+
+			wake_up_interruptible_all(&skirmish->entry.wait);
+		}
+
 		if (skirmish->transfer_from == fusion_id) {
-			skirmish->transfer_to       = 0;
-			skirmish->transfer_from     = 0;
-			skirmish->transfer_from_pid = 0;
-			skirmish->transfer_count    = 0;
+			skirmish->transfer_to       = skirmish->transfer2_to;
+			skirmish->transfer_from     = skirmish->transfer2_from;
+			skirmish->transfer_from_pid = skirmish->transfer2_from_pid;
+			skirmish->transfer_count    = skirmish->transfer2_count;
+
+			if (skirmish->transfer2_to) {
+				skirmish->transfer2_to       = 0;
+				skirmish->transfer2_from     = 0;
+				skirmish->transfer2_from_pid = 0;
+				skirmish->transfer2_count    = 0;
+			}
 
 			wake_up_interruptible_all(&skirmish->entry.wait);
 		}
@@ -650,11 +758,27 @@ void fusion_skirmish_dismiss_all_from_pid(FusionDev * dev, int pid)
 			wake_up_interruptible_all(&skirmish->entry.wait);
 		}
 
+		if (skirmish->transfer2_from_pid == pid) {
+			skirmish->transfer2_to       = 0;
+			skirmish->transfer2_from     = 0;
+			skirmish->transfer2_from_pid = 0;
+			skirmish->transfer2_count    = 0;
+
+			wake_up_interruptible_all(&skirmish->entry.wait);
+		}
+
 		if (skirmish->transfer_from_pid == pid) {
-			skirmish->transfer_to       = 0;
-			skirmish->transfer_from     = 0;
-			skirmish->transfer_from_pid = 0;
-			skirmish->transfer_count    = 0;
+			skirmish->transfer_to       = skirmish->transfer2_to;
+			skirmish->transfer_from     = skirmish->transfer2_from;
+			skirmish->transfer_from_pid = skirmish->transfer2_from_pid;
+			skirmish->transfer_count    = skirmish->transfer2_count;
+
+			if (skirmish->transfer2_to) {
+				skirmish->transfer2_to       = 0;
+				skirmish->transfer2_from     = 0;
+				skirmish->transfer2_from_pid = 0;
+				skirmish->transfer2_count    = 0;
+			}
 
 			wake_up_interruptible_all(&skirmish->entry.wait);
 		}
@@ -667,7 +791,7 @@ void fusion_skirmish_dismiss_all_from_pid(FusionDev * dev, int pid)
 
 void
 fusion_skirmish_transfer_all(FusionDev * dev,
-			     FusionID to, FusionID from, int from_pid)
+                             FusionID to, FusionID from, int from_pid, unsigned int serial)
 {
 	FusionLink *l;
 
@@ -678,22 +802,42 @@ fusion_skirmish_transfer_all(FusionDev * dev,
 
 		down(&skirmish->entry.lock);
 
-		if ( (skirmish->lock_pid == from_pid) && (skirmish->transfer_to == 0) ) {
-			FUSION_ASSERT(skirmish->transfer_from == 0);
-			FUSION_ASSERT(skirmish->transfer_from_pid == 0);
-			FUSION_ASSERT(skirmish->transfer_count == 0);
-			FUSION_ASSERT(skirmish->lock_count > 0);
-
-			skirmish->transfer_to       = to;
-			skirmish->transfer_from     = from;
-			skirmish->transfer_from_pid = from_pid;
-			skirmish->transfer_count    = skirmish->lock_count;
-
-			skirmish->lock_fid   = 0;
-			skirmish->lock_pid   = 0;
-			skirmish->lock_count = 0;
-
-			wake_up_interruptible_all(&skirmish->entry.wait);
+		if (skirmish->lock_pid == from_pid) {
+			if (skirmish->transfer_to == 0) {
+				FUSION_ASSERT(skirmish->transfer_from == 0);
+				FUSION_ASSERT(skirmish->transfer_from_pid == 0);
+				FUSION_ASSERT(skirmish->transfer_count == 0);
+				FUSION_ASSERT(skirmish->lock_count > 0);
+
+				skirmish->transfer_to       = to;
+				skirmish->transfer_from     = from;
+				skirmish->transfer_from_pid = from_pid;
+				skirmish->transfer_count    = skirmish->lock_count;
+				skirmish->transfer_serial   = serial;
+
+				skirmish->lock_fid   = 0;
+				skirmish->lock_pid   = 0;
+				skirmish->lock_count = 0;
+
+				wake_up_interruptible_all(&skirmish->entry.wait);
+			} else if (skirmish->transfer2_to == 0) {
+				FUSION_ASSERT(skirmish->transfer2_from == 0);
+				FUSION_ASSERT(skirmish->transfer2_from_pid == 0);
+				FUSION_ASSERT(skirmish->transfer2_count == 0);
+				FUSION_ASSERT(skirmish->lock_count > 0);
+
+				skirmish->transfer2_to       = to;
+				skirmish->transfer2_from     = from;
+				skirmish->transfer2_from_pid = from_pid;
+				skirmish->transfer2_count    = skirmish->lock_count;
+				skirmish->transfer2_serial   = serial;
+
+				skirmish->lock_fid   = 0;
+				skirmish->lock_pid   = 0;
+				skirmish->lock_count = 0;
+
+				wake_up_interruptible_all(&skirmish->entry.wait);
+			}
 		}
 
 		up(&skirmish->entry.lock);
@@ -713,11 +857,17 @@ void fusion_skirmish_reclaim_all(FusionDev * dev, int from_pid)
 
 		down(&skirmish->entry.lock);
 
-		if (skirmish->transfer_from_pid == from_pid) {
+		if ((skirmish->transfer2_to == 0)
+			   &&  skirmish->transfer_to
+			   && (skirmish->transfer_from_pid == from_pid) )
+		{
 			FUSION_ASSERT(skirmish->transfer_to != 0);
 			FUSION_ASSERT(skirmish->transfer_from != 0);
 			FUSION_ASSERT(skirmish->transfer_count > 0);
-			FUSION_ASSUME(skirmish->lock_pid == 0);
+			if( skirmish->lock_pid != -1 ) {
+				print_skirmish( skirmish );
+			}
+			FUSION_ASSERT(skirmish->lock_pid == -1);
 
 			skirmish->lock_fid   = skirmish->transfer_from;
 			skirmish->lock_pid   = skirmish->transfer_from_pid;
@@ -727,6 +877,67 @@ void fusion_skirmish_reclaim_all(FusionDev * dev, int from_pid)
 			skirmish->transfer_from     = 0;
 			skirmish->transfer_from_pid = 0;
 			skirmish->transfer_count    = 0;
+		} else if (skirmish->transfer2_to
+					 && (skirmish->transfer2_from_pid == from_pid) ) {
+			FUSION_ASSERT(skirmish->transfer2_to != 0);
+			FUSION_ASSERT(skirmish->transfer2_from != 0);
+			FUSION_ASSERT(skirmish->transfer2_count > 0);
+			FUSION_ASSERT(skirmish->lock_pid == -1);
+
+			skirmish->lock_fid   = skirmish->transfer2_from;
+			skirmish->lock_pid   = skirmish->transfer2_from_pid;
+			skirmish->lock_count = skirmish->transfer2_count;
+
+			skirmish->transfer2_to       = 0;
+			skirmish->transfer2_from     = 0;
+			skirmish->transfer2_from_pid = 0;
+			skirmish->transfer2_count    = 0;
+		}
+		up(&skirmish->entry.lock);
+	}
+
+	up(&dev->skirmish.lock);
+}
+
+void fusion_skirmish_return_all(FusionDev * dev, int from_fusion_id, int to_pid, unsigned int serial)
+{
+	FusionLink *l;
+
+	down(&dev->skirmish.lock);
+
+	fusion_list_foreach(l, dev->skirmish.list) {
+		FusionSkirmish *skirmish = (FusionSkirmish *) l;
+
+		down(&skirmish->entry.lock);
+
+		if (skirmish->transfer2_to == 0) {
+			if (skirmish->transfer_to       == from_fusion_id &&
+			    skirmish->transfer_from_pid == to_pid         &&
+			    skirmish->transfer_serial   == serial            )
+			{
+				FUSION_ASSERT(skirmish->transfer_from != 0);
+				FUSION_ASSERT(skirmish->transfer_count > 0);
+				if( skirmish->lock_count != 0 ) {
+					print_skirmish( skirmish );
+				}
+				FUSION_ASSERT(skirmish->lock_count == 0);
+				FUSION_ASSERT(skirmish->lock_fid == 0);
+				FUSION_ASSERT(skirmish->lock_pid == 0);
+
+				skirmish->lock_pid = -1;
+			}
+		}
+		else if (skirmish->transfer2_from_pid == to_pid   &&
+			    skirmish->transfer2_to       == from_fusion_id &&
+			    skirmish->transfer2_serial   == serial            )
+		{
+			FUSION_ASSERT(skirmish->transfer2_from != 0);
+			FUSION_ASSERT(skirmish->transfer2_count > 0);
+			FUSION_ASSERT(skirmish->lock_count == 0);
+			FUSION_ASSERT(skirmish->lock_fid == 0);
+			FUSION_ASSERT(skirmish->lock_pid == 0);
+
+			skirmish->lock_pid = -1;
 		}
 
 		up(&skirmish->entry.lock);
@@ -734,3 +945,4 @@ void fusion_skirmish_reclaim_all(FusionDev * dev, int from_pid)
 
 	up(&dev->skirmish.lock);
 }
+
diff --git a/drivers/char/fusion/skirmish.h b/drivers/char/fusion/skirmish.h
index f68a462..b1c8764 100644
--- a/drivers/char/fusion/skirmish.h
+++ b/drivers/char/fusion/skirmish.h
@@ -50,8 +50,10 @@ void fusion_skirmish_dismiss_all(FusionDev * dev, int fusion_id);
 void fusion_skirmish_dismiss_all_from_pid(FusionDev * dev, int pid);
 
 void fusion_skirmish_transfer_all(FusionDev * dev,
-				  FusionID to, FusionID from, int from_pid);
+				  FusionID to, FusionID from, int from_pid, unsigned int serial);
 
 void fusion_skirmish_reclaim_all(FusionDev * dev, int from_pid);
 
+void fusion_skirmish_return_all(FusionDev * dev, int from_fusion_id, int to_fusion_id, unsigned int serial);
+
 #endif
-- 
1.7.3.3

