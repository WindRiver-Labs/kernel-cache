From 47c910d324c269dc7943bc4284ae45fd3b8dc948 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@cyto.(none)>
Date: Sat, 18 Oct 2008 03:11:48 +0200
Subject: [PATCH] Use zero serial number to indicate call without return. Fail upon invalid return again.

Return EOPNOTSUP if FUSION_CALL_RETURN is attempted with a zero serial.

Return ENOMSG if serial number has not been found.
---
 drivers/char/fusion/call.c |   17 +++++++++++++----
 include/linux/fusion.h     |    2 +-
 2 files changed, 14 insertions(+), 5 deletions(-)

diff --git a/drivers/char/fusion/call.c b/drivers/char/fusion/call.c
index d3d5ee6..b2376cd 100644
--- a/drivers/char/fusion/call.c
+++ b/drivers/char/fusion/call.c
@@ -218,7 +218,9 @@ fusion_call_execute (FusionDev *dev, Fusionee *fusionee, FusionCallExecute *exec
      if (ret)
           return ret;
 
-     serial = ++call->serial;
+     do {
+          serial = ++call->serial;
+     } while (!serial);
 
      /* Add execution to receive the result. */
      if (fusionee && !(execute->flags & FCEF_ONEWAY)) {
@@ -238,7 +240,7 @@ fusion_call_execute (FusionDev *dev, Fusionee *fusionee, FusionCallExecute *exec
      message.call_arg = execute->call_arg;
      message.call_ptr = execute->call_ptr;
 
-     message.serial   = serial;
+     message.serial   = execution ? serial : 0;
 
      /* Put message into queue of callee. */
      ret = fusionee_send_message (dev, fusionee, call->fusion_id, FMT_CALL,
@@ -291,6 +293,9 @@ fusion_call_return (FusionDev *dev, int fusion_id, FusionCallReturn *call_ret)
      FusionLink *l;
      FusionCall *call;
 
+     if (!call_ret->serial)
+          return -EOPNOTSUPP;
+
      /* Lookup and lock call. */
      ret = lock_call (dev, call_ret->call_id, &call);
      if (ret)
@@ -318,6 +323,7 @@ fusion_call_return (FusionDev *dev, int fusion_id, FusionCallReturn *call_ret)
                /* Remove and free execution. */
                remove_execution( call, execution );
                kfree( execution );
+               unlock_call( call );
                return -EIDRM;
           }
 
@@ -334,13 +340,16 @@ fusion_call_return (FusionDev *dev, int fusion_id, FusionCallReturn *call_ret)
           /* Wake up caller. */
           wake_up_interruptible( &execution->wait );
 
-          break;
+          /* Unlock call. */
+          unlock_call (call);
+
+          return 0;
      }
 
      /* Unlock call. */
      unlock_call (call);
 
-     return 0;
+     return -ENOMSG;
 }
 
 int
diff --git a/include/linux/fusion.h b/include/linux/fusion.h
index 442d1cf..9db101d 100644
--- a/include/linux/fusion.h
+++ b/include/linux/fusion.h
@@ -152,7 +152,7 @@ typedef struct {
      int                 call_arg;      /* optional call parameter */
      void               *call_ptr;      /* optional call parameter */
 
-     unsigned int        serial;
+     unsigned int        serial;        /* serial number of call, used for return, zero if nothing shall be returned */
 } FusionCallMessage;
 
 /*
-- 
1.7.3.3

