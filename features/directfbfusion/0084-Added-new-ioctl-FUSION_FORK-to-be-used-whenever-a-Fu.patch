From 2be52fd7eede17bb87030769b96f6b43498d59d2 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Mon, 14 Aug 2006 09:16:54 +0000
Subject: [PATCH] Added new ioctl FUSION_FORK to be used whenever a Fusionee has fork()ed and wants to stay in the world, i.e. without doing exec or similar...

It doubles all local references, reactor and shmpool attach's and gives
the forked Fusionee its own Fusion ID.
---
 drivers/char/fusion/fusiondev.c |   77 ++++++++++++++++++++++++++++--------
 drivers/char/fusion/fusionee.c  |   56 +++++++++++++++++++-------
 drivers/char/fusion/fusionee.h  |   20 ++++++----
 drivers/char/fusion/reactor.c   |   72 ++++++++++++++++++++++++++++++----
 drivers/char/fusion/reactor.h   |   11 +++--
 drivers/char/fusion/ref.c       |   83 +++++++++++++++++++++++++++++++++-----
 drivers/char/fusion/ref.h       |   16 +++++---
 drivers/char/fusion/shmpool.c   |   77 ++++++++++++++++++++++++++++++++----
 drivers/char/fusion/shmpool.h   |   13 ++++--
 include/linux/fusion.h          |   10 ++++-
 10 files changed, 352 insertions(+), 83 deletions(-)

diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 76410b6..af3962f 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -256,11 +256,11 @@ fusiondev_deinit (FusionDev *dev)
 static int
 fusion_open (struct inode *inode, struct file *file)
 {
-     int ret;
-     int fusion_id;
-     int minor = iminor(inode);
+     int      ret;
+     FusionID fusion_id;
+     int      minor = iminor(inode);
 
-     DEBUG( "fusion_open\n" );
+     DEBUG( "fusion_open( %p, %d )\n", file, atomic_read(&file->f_count) );
 
      if (down_interruptible (&devs_lock))
           return -EINTR;
@@ -332,7 +332,7 @@ fusion_release (struct inode *inode, struct file *file)
      int minor     = iminor(inode);
      int fusion_id = (int) file->private_data;
 
-     DEBUG( "fusion_release\n" );
+     DEBUG( "fusion_release( %p, %d )\n", file, atomic_read(&file->f_count) );
 
      ret = fusionee_destroy (fusion_devs[minor], fusion_id);
      if (ret)
@@ -363,7 +363,7 @@ fusion_flush (struct file *file)
 
      (void) fusion_id;
 
-     DEBUG( "fusion_flush (0x%08x %d)\n", fusion_id, current->pid );
+     DEBUG( "fusion_flush( %p, %d, 0x%08x %d )\n", file, atomic_read(&file->f_count), fusion_id, current->pid );
 
      if (current->flags & PF_EXITING)
           fusion_skirmish_dismiss_all_from_pid (dev, current->pid);
@@ -377,7 +377,7 @@ fusion_read (struct file *file, char *buf, size_t count, loff_t *ppos)
      int        fusion_id = (int) file->private_data;
      FusionDev *dev       = fusion_devs[iminor(file->f_dentry->d_inode)];
 
-     DEBUG( "fusion_read (%d)\n", count );
+     DEBUG( "fusion_read( %p, %d, %d )\n", file, atomic_read(&file->f_count), count );
 
      return fusionee_get_messages (dev, fusion_id, buf, count,
                                    !(file->f_flags & O_NONBLOCK));
@@ -389,19 +389,49 @@ fusion_poll (struct file *file, poll_table * wait)
      int        fusion_id = (int) file->private_data;
      FusionDev *dev       = fusion_devs[iminor(file->f_dentry->d_inode)];
 
-     DEBUG( "fusion_poll\n" );
+     DEBUG( "fusion_poll( %p, %d )\n", file, atomic_read(&file->f_count) );
 
      return fusionee_poll (dev, fusion_id, file, wait);
 }
+/*
+static int
+fusion_fork (struct file *file, FusionDev *dev,
+             FusionID fusion_id, FusionID *ret_id)
+{
+     int      ret;
+     FusionID new_id;
+
+     DEBUG( "fusion_fork( %p, %d )\n", file, atomic_read(&file->f_count) );
+
+     if (down_interruptible( &devs_lock ))
+          return -EINTR;
+
+     ret = fusionee_new( dev, &new_id );
+     if (ret) {
+          up( &devs_lock );
+          return ret;
+     }
+
+     dev->refs++;
+
+     up( &devs_lock );
 
+     file->private_data = (void*) new_id;
+
+     *ret_id = new_id;
+
+     return 0;
+}
+*/
 static int
-lounge_ioctl (FusionDev *dev, int fusion_id,
+lounge_ioctl (struct file *file, FusionDev *dev, FusionID fusion_id,
               unsigned int cmd, unsigned long arg)
 {
      int             ret;
      FusionEnter     enter;
      FusionKill      kill;
      FusionEntryInfo info;
+     FusionFork      fork = {0};
 
      switch (_IOC_NR(cmd)) {
           case _IOC_NR(FUSION_ENTER):
@@ -499,13 +529,26 @@ lounge_ioctl (FusionDev *dev, int fusion_id,
                     return -EFAULT;
 
                return 0;
+
+          case _IOC_NR(FUSION_FORK):
+               if (copy_from_user( &fork, (FusionFork*) arg, sizeof(fork) ))
+                    return -EFAULT;
+
+               ret = fusionee_fork( dev, &fork, fusion_id );
+               if (ret)
+                    return ret;
+               
+               if (copy_to_user( (FusionFork*) arg, &fork, sizeof(fork) ))
+                    return -EFAULT;
+
+               return 0;
      }
 
      return -ENOSYS;
 }
 
 static int
-messaging_ioctl (FusionDev *dev, int fusion_id,
+messaging_ioctl (FusionDev *dev, FusionID fusion_id,
                  unsigned int cmd, unsigned long arg)
 {
      FusionSendMessage send;
@@ -530,7 +573,7 @@ messaging_ioctl (FusionDev *dev, int fusion_id,
 }
 
 static int
-call_ioctl (FusionDev *dev, int fusion_id,
+call_ioctl (FusionDev *dev, FusionID fusion_id,
             unsigned int cmd, unsigned long arg)
 {
      int               id;
@@ -583,7 +626,7 @@ call_ioctl (FusionDev *dev, int fusion_id,
 }
 
 static int
-ref_ioctl (FusionDev *dev, int fusion_id,
+ref_ioctl (FusionDev *dev, FusionID fusion_id,
            unsigned int cmd, unsigned long arg)
 {
      int              id;
@@ -679,7 +722,7 @@ ref_ioctl (FusionDev *dev, int fusion_id,
 }
 
 static int
-skirmish_ioctl (FusionDev *dev, int fusion_id,
+skirmish_ioctl (FusionDev *dev, FusionID fusion_id,
                 unsigned int cmd, unsigned long arg)
 {
      int id;
@@ -737,7 +780,7 @@ skirmish_ioctl (FusionDev *dev, int fusion_id,
 }
 
 static int
-property_ioctl (FusionDev *dev, int fusion_id,
+property_ioctl (FusionDev *dev, FusionID fusion_id,
                 unsigned int cmd, unsigned long arg)
 {
      int id;
@@ -790,7 +833,7 @@ property_ioctl (FusionDev *dev, int fusion_id,
 }
 
 static int
-reactor_ioctl (FusionDev *dev, int fusion_id,
+reactor_ioctl (FusionDev *dev, FusionID fusion_id,
                unsigned int cmd, unsigned long arg)
 {
      int                   id;
@@ -848,7 +891,7 @@ reactor_ioctl (FusionDev *dev, int fusion_id,
 }
 
 static int
-shmpool_ioctl (FusionDev *dev, int fusion_id,
+shmpool_ioctl (FusionDev *dev, FusionID fusion_id,
                unsigned int cmd, unsigned long arg)
 {
      int                   id;
@@ -923,7 +966,7 @@ fusion_ioctl (struct inode *inode, struct file *file,
 
      switch (_IOC_TYPE(cmd)) {
           case FT_LOUNGE:
-               return lounge_ioctl( dev, id, cmd, arg );
+               return lounge_ioctl( file, dev, id, cmd, arg );
 
           case FT_MESSAGING:
                return messaging_ioctl( dev, id, cmd, arg );
diff --git a/drivers/char/fusion/fusionee.c b/drivers/char/fusion/fusionee.c
index a294ea9..47dddce 100644
--- a/drivers/char/fusion/fusionee.c
+++ b/drivers/char/fusion/fusionee.c
@@ -43,7 +43,7 @@ typedef struct {
 
      struct semaphore  lock;
 
-     int               id;
+     FusionID          id;
      int               pid;
 
      FusionFifo        messages;
@@ -58,15 +58,15 @@ typedef struct {
      FusionLink         link;
 
      FusionMessageType  type;
-     int                id;
+     FusionID           id;
      int                size;
      void              *data;
 } Message;
 
 /******************************************************************************/
 
-static int  lookup_fusionee (FusionDev *dev, int id, Fusionee **ret_fusionee);
-static int  lock_fusionee   (FusionDev *dev, int id, Fusionee **ret_fusionee);
+static int  lookup_fusionee (FusionDev *dev, FusionID id, Fusionee **ret_fusionee);
+static int  lock_fusionee   (FusionDev *dev, FusionID id, Fusionee **ret_fusionee);
 static void unlock_fusionee (Fusionee *fusionee);
 
 /******************************************************************************/
@@ -85,7 +85,7 @@ fusionees_read_proc(char *buf, char **start, off_t offset,
      fusion_list_foreach (l, dev->fusionee.list) {
           Fusionee *fusionee = (Fusionee*) l;
 
-          written += sprintf(buf+written, "(%5d) 0x%08x (%4d messages waiting, %7d received, %7d sent)\n",
+          written += sprintf(buf+written, "(%5d) 0x%08lx (%4d messages waiting, %7d received, %7d sent)\n",
                              fusionee->pid, fusionee->id, fusionee->messages.count, fusionee->rcv_total, fusionee->snd_total);
           if (written < offset) {
                offset -= written;
@@ -153,7 +153,7 @@ fusionee_deinit (FusionDev *dev)
 /******************************************************************************/
 
 int
-fusionee_new (FusionDev *dev, int *id)
+fusionee_new (FusionDev *dev, FusionID *ret_id)
 {
      Fusionee *fusionee;
 
@@ -179,7 +179,7 @@ fusionee_new (FusionDev *dev, int *id)
 
      up (&dev->fusionee.lock);
 
-     *id = fusionee->id;
+     *ret_id = fusionee->id;
 
      return 0;
 }
@@ -187,7 +187,7 @@ fusionee_new (FusionDev *dev, int *id)
 int
 fusionee_enter (FusionDev   *dev,
                 FusionEnter *enter,
-                int          id)
+                FusionID     id)
 {
      if (enter->api.major != FUSION_API_MAJOR || enter->api.minor > FUSION_API_MINOR)
           return -ENOPROTOOPT;
@@ -216,7 +216,33 @@ fusionee_enter (FusionDev   *dev,
 }
 
 int
-fusionee_send_message (FusionDev *dev, int id, int recipient,
+fusionee_fork( FusionDev  *dev,
+               FusionFork *fork,
+               FusionID    id )
+{
+     int ret;
+
+     ret = fusion_shmpool_fork_all( dev, id, fork->fusion_id );
+     if (ret)
+          return ret;
+
+     ret = fusion_reactor_fork_all( dev, id, fork->fusion_id );
+     if (ret)
+          return ret;
+
+     ret = fusion_ref_fork_all_local( dev, id, fork->fusion_id );
+     if (ret)
+          return ret;
+
+     fork->fusion_id = id;
+
+     return 0;
+}
+
+int
+fusionee_send_message (FusionDev *dev,
+                       FusionID id,
+                       FusionID recipient,
                        FusionMessageType msg_type, int msg_id,
                        int msg_size, const void *msg_data)
 {
@@ -313,7 +339,7 @@ fusionee_send_message (FusionDev *dev, int id, int recipient,
 
 int
 fusionee_get_messages (FusionDev *dev,
-                       int id, void *buf, int buf_size, bool block)
+                       FusionID id, void *buf, int buf_size, bool block)
 {
      int       ret;
      int       written  = 0;
@@ -378,7 +404,7 @@ fusionee_get_messages (FusionDev *dev,
 }
 
 unsigned int
-fusionee_poll (FusionDev *dev, int id, struct file *file, poll_table * wait)
+fusionee_poll (FusionDev *dev, FusionID id, struct file *file, poll_table * wait)
 {
      int       ret;
      Fusionee *fusionee;
@@ -412,7 +438,7 @@ fusionee_poll (FusionDev *dev, int id, struct file *file, poll_table * wait)
 }
 
 int
-fusionee_kill (FusionDev *dev, int id, int target, int signal, int timeout_ms)
+fusionee_kill (FusionDev *dev, FusionID id, int target, int signal, int timeout_ms)
 {
      long timeout = -1;
 
@@ -470,7 +496,7 @@ fusionee_kill (FusionDev *dev, int id, int target, int signal, int timeout_ms)
 }
 
 int
-fusionee_destroy (FusionDev *dev, int id)
+fusionee_destroy (FusionDev *dev, FusionID id)
 {
      int       ret;
      Fusionee *fusionee;
@@ -515,7 +541,7 @@ fusionee_destroy (FusionDev *dev, int id)
 /******************************************************************************/
 
 static int
-lookup_fusionee (FusionDev *dev, int id, Fusionee **ret_fusionee)
+lookup_fusionee (FusionDev *dev, FusionID id, Fusionee **ret_fusionee)
 {
      FusionLink *l;
 
@@ -537,7 +563,7 @@ lookup_fusionee (FusionDev *dev, int id, Fusionee **ret_fusionee)
 }
 
 static int
-lock_fusionee (FusionDev *dev, int id, Fusionee **ret_fusionee)
+lock_fusionee (FusionDev *dev, FusionID id, Fusionee **ret_fusionee)
 {
      int       ret;
      Fusionee *fusionee;
diff --git a/drivers/char/fusion/fusionee.h b/drivers/char/fusion/fusionee.h
index de79ff1..272c395 100644
--- a/drivers/char/fusion/fusionee.h
+++ b/drivers/char/fusion/fusionee.h
@@ -31,39 +31,43 @@ void fusionee_deinit (FusionDev *dev);
 /* internal functions */
 
 int fusionee_new           (FusionDev         *dev,
-                            int               *id);
+                            FusionID          *ret_id);
 
 int fusionee_enter         (FusionDev         *dev,
                             FusionEnter       *enter,
-                            int                id);
+                            FusionID           id);
+
+int fusionee_fork          (FusionDev         *dev,
+                            FusionFork        *fork,
+                            FusionID           id);
 
 int fusionee_send_message  (FusionDev         *dev,
-                            int                id,
-                            int                recipient,
+                            FusionID           id,
+                            FusionID           recipient,
                             FusionMessageType  msg_type,
                             int                msg_id,
                             int                msg_size,
                             const void        *msg_data);
 
 int fusionee_get_messages  (FusionDev         *dev,
-                            int                id,
+                            FusionID           id,
                             void              *buf,
                             int                buf_size,
                             bool               block);
 
 unsigned
 int fusionee_poll          (FusionDev         *dev,
-                            int                id,
+                            FusionID           id,
                             struct file       *file,
                             poll_table        *wait);
 
 int fusionee_kill          (FusionDev         *dev,
-                            int                id,
+                            FusionID           id,
                             int                target,
                             int                signal,
                             int                timeout_ms);
 
 int fusionee_destroy       (FusionDev         *dev,
-                            int                id);
+                            FusionID           id);
 
 #endif
diff --git a/drivers/char/fusion/reactor.c b/drivers/char/fusion/reactor.c
index a06c161..cce504e 100644
--- a/drivers/char/fusion/reactor.c
+++ b/drivers/char/fusion/reactor.c
@@ -45,10 +45,14 @@ typedef struct {
 /******************************************************************************/
 
 static ReactorNode *get_node      ( FusionReactor *reactor,
-                                    int            fusion_id );
+                                    FusionID       fusion_id );
 
 static void         remove_node   ( FusionReactor *reactor,
-                                    int            fusion_id );
+                                    FusionID       fusion_id );
+
+static int          fork_node     ( FusionReactor *reactor,
+                                    FusionID       fusion_id,
+                                    FusionID       from_id );
 
 static void         free_all_nodes( FusionReactor *reactor );
 
@@ -113,7 +117,7 @@ fusion_reactor_new (FusionDev *dev, int *ret_id)
 }
 
 int
-fusion_reactor_attach (FusionDev *dev, int id, int fusion_id)
+fusion_reactor_attach (FusionDev *dev, int id, FusionID fusion_id)
 {
      int            ret;
      ReactorNode   *node;
@@ -147,7 +151,7 @@ fusion_reactor_attach (FusionDev *dev, int id, int fusion_id)
 }
 
 int
-fusion_reactor_detach (FusionDev *dev, int id, int fusion_id)
+fusion_reactor_detach (FusionDev *dev, int id, FusionID fusion_id)
 {
      int            ret;
      ReactorNode   *node;
@@ -176,7 +180,7 @@ fusion_reactor_detach (FusionDev *dev, int id, int fusion_id)
 }
 
 int
-fusion_reactor_dispatch (FusionDev *dev, int id, int fusion_id,
+fusion_reactor_dispatch (FusionDev *dev, int id, FusionID fusion_id,
                          int msg_size, const void *msg_data)
 {
      int            ret;
@@ -211,7 +215,7 @@ fusion_reactor_destroy (FusionDev *dev, int id)
 }
 
 void
-fusion_reactor_detach_all (FusionDev *dev, int fusion_id)
+fusion_reactor_detach_all (FusionDev *dev, FusionID fusion_id)
 {
      FusionLink *l;
 
@@ -226,11 +230,32 @@ fusion_reactor_detach_all (FusionDev *dev, int fusion_id)
      up (&dev->reactor.lock);
 }
 
+int
+fusion_reactor_fork_all (FusionDev *dev, FusionID fusion_id, FusionID from_id)
+{
+     FusionLink *l;
+     int         ret = 0;
+
+     down (&dev->reactor.lock);
+
+     fusion_list_foreach (l, dev->reactor.list) {
+          FusionReactor *reactor = (FusionReactor *) l;
+
+          ret = fork_node (reactor, fusion_id, from_id);
+          if (ret)
+               break;
+     }
+
+     up (&dev->reactor.lock);
+
+     return ret;
+}
+
 /******************************************************************************/
 
 static ReactorNode *
 get_node (FusionReactor *reactor,
-          int            fusion_id)
+          FusionID       fusion_id)
 {
      ReactorNode *node;
 
@@ -243,7 +268,7 @@ get_node (FusionReactor *reactor,
 }
 
 static void
-remove_node (FusionReactor *reactor, int fusion_id)
+remove_node (FusionReactor *reactor, FusionID fusion_id)
 {
      ReactorNode *node;
 
@@ -260,6 +285,37 @@ remove_node (FusionReactor *reactor, int fusion_id)
      up (&reactor->entry.lock);
 }
 
+static int
+fork_node (FusionReactor *reactor, FusionID fusion_id, FusionID from_id)
+{
+     ReactorNode *node;
+
+     down (&reactor->entry.lock);
+
+     fusion_list_foreach (node, reactor->nodes) {
+          if (node->fusion_id == from_id) {
+               ReactorNode *new_node;
+
+               new_node = kmalloc (sizeof(ReactorNode), GFP_KERNEL);
+               if (!new_node) {
+                    up (&reactor->entry.lock);
+                    return -ENOMEM;
+               }
+
+               new_node->fusion_id = fusion_id;
+               new_node->count     = node->count;
+
+               fusion_list_prepend (&reactor->nodes, &new_node->link);
+
+               break;
+          }
+     }
+
+     up (&reactor->entry.lock);
+
+     return 0;
+}
+
 static void
 free_all_nodes (FusionReactor *reactor)
 
diff --git a/drivers/char/fusion/reactor.h b/drivers/char/fusion/reactor.h
index ac14c5e..4e4ba6b 100644
--- a/drivers/char/fusion/reactor.h
+++ b/drivers/char/fusion/reactor.h
@@ -32,15 +32,15 @@ int fusion_reactor_new      (FusionDev  *dev,
 
 int fusion_reactor_attach   (FusionDev  *dev,
                              int         id,
-                             int         fusion_id);
+                             FusionID    fusion_id);
 
 int fusion_reactor_detach   (FusionDev  *dev,
                              int         id,
-                             int         fusion_id);
+                             FusionID    fusion_id);
 
 int fusion_reactor_dispatch (FusionDev  *dev,
                              int         id,
-                             int         fusion_id,
+                             FusionID    fusion_id,
                              int         msg_size,
                              const void *msg_data);
 
@@ -51,6 +51,9 @@ int fusion_reactor_destroy  (FusionDev  *dev,
 /* internal functions */
 
 void fusion_reactor_detach_all (FusionDev *dev,
-                                int        fusion_id);
+                                FusionID   fusion_id);
 
+int  fusion_reactor_fork_all   (FusionDev *dev,
+                                FusionID   fusion_id,
+                                FusionID   from_id);
 #endif
diff --git a/drivers/char/fusion/ref.c b/drivers/char/fusion/ref.c
index a6b262f..7c61624 100644
--- a/drivers/char/fusion/ref.c
+++ b/drivers/char/fusion/ref.c
@@ -30,7 +30,7 @@ typedef struct __Fusion_FusionRef FusionRef;
 
 typedef struct {
      FusionLink     link;
-     int            fusion_id;
+     FusionID       fusion_id;
      int            refs;
 } LocalRef;
 
@@ -59,8 +59,9 @@ struct __Fusion_FusionRef {
 
 /**********************************************************************************************************************/
 
-static int  add_local       ( FusionRef *ref, int fusion_id, int add );
-static void clear_local     ( FusionDev *dev, FusionRef *ref, int fusion_id );
+static int  add_local       ( FusionRef *ref, FusionID fusion_id, int add );
+static void clear_local     ( FusionDev *dev, FusionRef *ref, FusionID fusion_id );
+static int  fork_local      ( FusionDev *dev, FusionRef *ref, FusionID fusion_id, FusionID from_id );
 static void free_all_local  ( FusionRef *ref );
 
 static int  propagate_local ( FusionDev *dev, FusionRef *ref, int diff );
@@ -133,7 +134,7 @@ fusion_ref_new( FusionDev *dev, int *ret_id )
 }
 
 int
-fusion_ref_up (FusionDev *dev, int id, int fusion_id)
+fusion_ref_up (FusionDev *dev, int id, FusionID fusion_id)
 {
      int        ret;
      FusionRef *ref;
@@ -168,7 +169,7 @@ out:
 }
 
 int
-fusion_ref_down (FusionDev *dev, int id, int fusion_id)
+fusion_ref_down (FusionDev *dev, int id, FusionID fusion_id)
 {
      int        ret;
      FusionRef *ref;
@@ -216,7 +217,7 @@ out:
 }
 
 int
-fusion_ref_zero_lock (FusionDev *dev, int id, int fusion_id)
+fusion_ref_zero_lock (FusionDev *dev, int id, FusionID fusion_id)
 {
      int        ret;
      FusionRef *ref;
@@ -253,7 +254,7 @@ fusion_ref_zero_lock (FusionDev *dev, int id, int fusion_id)
 }
 
 int
-fusion_ref_zero_trylock (FusionDev *dev, int id, int fusion_id)
+fusion_ref_zero_trylock (FusionDev *dev, int id, FusionID fusion_id)
 {
      int        ret;
      FusionRef *ref;
@@ -278,7 +279,7 @@ fusion_ref_zero_trylock (FusionDev *dev, int id, int fusion_id)
 }
 
 int
-fusion_ref_zero_unlock (FusionDev *dev, int id, int fusion_id)
+fusion_ref_zero_unlock (FusionDev *dev, int id, FusionID fusion_id)
 {
      int        ret;
      FusionRef *ref;
@@ -413,7 +414,7 @@ fusion_ref_destroy (FusionDev *dev, int id)
 }
 
 void
-fusion_ref_clear_all_local( FusionDev *dev, int fusion_id )
+fusion_ref_clear_all_local( FusionDev *dev, FusionID fusion_id )
 {
      FusionRef *ref;
 
@@ -425,10 +426,29 @@ fusion_ref_clear_all_local( FusionDev *dev, int fusion_id )
      up( &dev->ref.lock );
 }
 
+int
+fusion_ref_fork_all_local( FusionDev *dev, FusionID fusion_id, FusionID from_id )
+{
+     FusionRef *ref;
+     int        ret = 0;
+
+     down( &dev->ref.lock );
+
+     fusion_list_foreach (ref, dev->ref.list) {
+          ret = fork_local( dev, ref, fusion_id, from_id );
+          if (ret)
+               break;
+     }
+
+     up( &dev->ref.lock );
+
+     return ret;
+}
+
 /**********************************************************************************************************************/
 
 static int
-add_local (FusionRef *ref, int fusion_id, int add)
+add_local (FusionRef *ref, FusionID fusion_id, int add)
 {
      FusionLink *l;
      LocalRef   *local;
@@ -447,6 +467,10 @@ add_local (FusionRef *ref, int fusion_id, int add)
           }
      }
 
+     /* Can only create local node if value is positive. */
+     if (add <= 0)
+          return -EIO;
+
      local = kmalloc (sizeof(LocalRef), GFP_KERNEL);
      if (!local)
           return -ENOMEM;
@@ -460,7 +484,7 @@ add_local (FusionRef *ref, int fusion_id, int add)
 }
 
 static void
-clear_local (FusionDev *dev, FusionRef *ref, int fusion_id)
+clear_local (FusionDev *dev, FusionRef *ref, FusionID fusion_id)
 {
      FusionLink *l;
 
@@ -488,6 +512,43 @@ clear_local (FusionDev *dev, FusionRef *ref, int fusion_id)
      up (&ref->entry.lock);
 }
 
+static int
+fork_local (FusionDev *dev, FusionRef *ref, FusionID fusion_id, FusionID from_id)
+{
+     FusionLink *l;
+     int         ret = 0;
+
+     down (&ref->entry.lock);
+
+     fusion_list_foreach (l, ref->local_refs) {
+          LocalRef *local = (LocalRef *) l;
+
+          if (local->fusion_id == from_id) {
+               if (local->refs) {
+                    LocalRef *new_local;
+
+                    new_local = kmalloc (sizeof(LocalRef), GFP_KERNEL);
+                    if (!new_local) {
+                         ret = -ENOMEM;
+                         break;
+                    }
+
+                    new_local->fusion_id = fusion_id;
+                    new_local->refs      = local->refs;
+
+                    fusion_list_prepend( &ref->local_refs, &new_local->link );
+
+                    propagate_local( dev, ref, local->refs );
+               }
+               break;
+          }
+     }
+
+     up (&ref->entry.lock);
+
+     return ret;
+}
+
 static void
 free_all_local (FusionRef *ref)
 {
diff --git a/drivers/char/fusion/ref.h b/drivers/char/fusion/ref.h
index 1830e13b..ba7f303 100644
--- a/drivers/char/fusion/ref.h
+++ b/drivers/char/fusion/ref.h
@@ -32,23 +32,23 @@ int fusion_ref_new          (FusionDev      *dev,
 
 int fusion_ref_up           (FusionDev      *dev,
                              int             id,
-                             int             fusion_id);
+                             FusionID        fusion_id);
 
 int fusion_ref_down         (FusionDev      *dev,
                              int             id,
-                             int             fusion_id);
+                             FusionID        fusion_id);
 
 int fusion_ref_zero_lock    (FusionDev      *dev,
                              int             id,
-                             int             fusion_id);
+                             FusionID        fusion_id);
 
 int fusion_ref_zero_trylock (FusionDev      *dev,
                              int             id,
-                             int             fusion_id);
+                             FusionID        fusion_id);
 
 int fusion_ref_zero_unlock  (FusionDev      *dev,
                              int             id,
-                             int             fusion_id);
+                             FusionID        fusion_id);
 
 int fusion_ref_stat         (FusionDev      *dev,
                              int             id,
@@ -70,6 +70,10 @@ int fusion_ref_destroy      (FusionDev      *dev,
 /* internal functions */
 
 void fusion_ref_clear_all_local (FusionDev *dev,
-                                 int        fusion_id);
+                                 FusionID   fusion_id);
+
+int  fusion_ref_fork_all_local  (FusionDev *dev,
+                                 FusionID   fusion_id,
+                                 FusionID   from_id);
 
 #endif
diff --git a/drivers/char/fusion/shmpool.c b/drivers/char/fusion/shmpool.c
index c79e650..8643a48 100644
--- a/drivers/char/fusion/shmpool.c
+++ b/drivers/char/fusion/shmpool.c
@@ -40,7 +40,7 @@ typedef struct {
 typedef struct {
      FusionLink         link;
 
-     int                fusion_id;
+     FusionID           fusion_id;
 
      int                count;     /* number of attach calls */
 } SHMPoolNode;
@@ -63,10 +63,14 @@ typedef struct {
 /******************************************************************************/
 
 static SHMPoolNode *get_node      ( FusionSHMPool *shmpool,
-                                    int            fusion_id );
+                                    FusionID       fusion_id );
 
 static void         remove_node   ( FusionSHMPool *shmpool,
-                                    int            fusion_id );
+                                    FusionID       fusion_id );
+
+static int          fork_node     ( FusionSHMPool *shmpool,
+                                    FusionID       fusion_id,
+                                    FusionID       from_id );
 
 static void         free_all_nodes( FusionSHMPool *shmpool );
 
@@ -208,7 +212,7 @@ fusion_shmpool_new (FusionDev        *dev,
 int
 fusion_shmpool_attach (FusionDev           *dev,
                        FusionSHMPoolAttach *attach,
-                       int                  fusion_id)
+                       FusionID             fusion_id)
 {
      int            ret;
      SHMPoolNode   *node;
@@ -245,7 +249,7 @@ fusion_shmpool_attach (FusionDev           *dev,
 }
 
 int
-fusion_shmpool_detach (FusionDev *dev, int id, int fusion_id)
+fusion_shmpool_detach (FusionDev *dev, int id, FusionID fusion_id)
 {
      int            ret;
      SHMPoolNode   *node;
@@ -276,7 +280,7 @@ fusion_shmpool_detach (FusionDev *dev, int id, int fusion_id)
 int
 fusion_shmpool_dispatch( FusionDev             *dev,
                          FusionSHMPoolDispatch *dispatch,
-                         int                    fusion_id )
+                         FusionID               fusion_id )
 {
      int                   ret;
      FusionLink           *l;
@@ -319,7 +323,7 @@ fusion_shmpool_destroy (FusionDev *dev, int id)
 }
 
 void
-fusion_shmpool_detach_all (FusionDev *dev, int fusion_id)
+fusion_shmpool_detach_all (FusionDev *dev, FusionID fusion_id)
 {
      FusionLink *l;
 
@@ -334,11 +338,34 @@ fusion_shmpool_detach_all (FusionDev *dev, int fusion_id)
      up (&dev->shmpool.lock);
 }
 
+int
+fusion_shmpool_fork_all( FusionDev *dev,
+                         FusionID   fusion_id,
+                         FusionID   from_id )
+{
+     FusionLink *l;
+     int         ret = 0;
+
+     down (&dev->shmpool.lock);
+
+     fusion_list_foreach (l, dev->shmpool.list) {
+          FusionSHMPool *shmpool = (FusionSHMPool *) l;
+
+          ret = fork_node( shmpool, fusion_id, from_id );
+          if (ret)
+               break;
+     }
+
+     up (&dev->shmpool.lock);
+
+     return ret;
+}
+
 /******************************************************************************/
 
 static SHMPoolNode *
 get_node (FusionSHMPool *shmpool,
-          int            fusion_id)
+          FusionID       fusion_id)
 {
      SHMPoolNode *node;
 
@@ -351,7 +378,7 @@ get_node (FusionSHMPool *shmpool,
 }
 
 static void
-remove_node (FusionSHMPool *shmpool, int fusion_id)
+remove_node (FusionSHMPool *shmpool, FusionID fusion_id)
 {
      SHMPoolNode *node;
 
@@ -367,6 +394,38 @@ remove_node (FusionSHMPool *shmpool, int fusion_id)
      up (&shmpool->entry.lock);
 }
 
+static int
+fork_node (FusionSHMPool *shmpool, FusionID fusion_id, FusionID from_id)
+{
+     int          ret = 0;
+     SHMPoolNode *node;
+
+     down (&shmpool->entry.lock);
+
+     fusion_list_foreach (node, shmpool->nodes) {
+          if (node->fusion_id == from_id) {
+               SHMPoolNode *new_node;
+
+               new_node = kmalloc (sizeof(SHMPoolNode), GFP_KERNEL);
+               if (!new_node) {
+                    ret = -ENOMEM;
+                    break;
+               }
+
+               new_node->fusion_id = fusion_id;
+               new_node->count     = node->count;
+
+               fusion_list_prepend (&shmpool->nodes, &new_node->link);
+
+               break;
+          }
+     }
+
+     up (&shmpool->entry.lock);
+
+     return ret;
+}
+
 static void
 free_all_nodes (FusionSHMPool *shmpool)
 
diff --git a/drivers/char/fusion/shmpool.h b/drivers/char/fusion/shmpool.h
index 5031650..333fd74 100644
--- a/drivers/char/fusion/shmpool.h
+++ b/drivers/char/fusion/shmpool.h
@@ -32,15 +32,15 @@ int fusion_shmpool_new      (FusionDev             *dev,
 
 int fusion_shmpool_attach   (FusionDev             *dev,
                              FusionSHMPoolAttach   *attach,
-                             int                    fusion_id);
+                             FusionID               fusion_id);
 
 int fusion_shmpool_detach   (FusionDev             *dev,
                              int                    id,
-                             int                    fusion_id);
+                             FusionID               fusion_id);
 
 int fusion_shmpool_dispatch (FusionDev             *dev,
                              FusionSHMPoolDispatch *dispatch,
-                             int                    fusion_id );
+                             FusionID               fusion_id );
 
 int fusion_shmpool_destroy  (FusionDev             *dev,
                              int                    id);
@@ -49,6 +49,11 @@ int fusion_shmpool_destroy  (FusionDev             *dev,
 /* internal functions */
 
 void fusion_shmpool_detach_all (FusionDev *dev,
-                                int        fusion_id);
+                                FusionID   fusion_id);
+
+int  fusion_shmpool_fork_all   (FusionDev *dev,
+                                FusionID   fusion_id,
+                                FusionID   from_id);
 
 #endif
+
diff --git a/include/linux/fusion.h b/include/linux/fusion.h
index 6c01a3a..f634e87 100644
--- a/include/linux/fusion.h
+++ b/include/linux/fusion.h
@@ -8,7 +8,7 @@
  * Fusion Kernel Device API Version
  */
 #define FUSION_API_MAJOR      3         /* Increased if backward compatibility is dropped. */
-#define FUSION_API_MINOR      1         /* Increased if new features are added. */
+#define FUSION_API_MINOR      2         /* Increased if new features are added. */
 
 /*
  * The Fusion ID is a unique identifier for one process consisting of threads.
@@ -29,6 +29,12 @@ typedef struct {
      FusionID            fusion_id;     /* Returns the fusion id of the entering process. */
 } FusionEnter;
 
+/*
+ * Forking in world
+ */
+typedef struct {
+     FusionID            fusion_id;     /* Returns the fusion id of the new (forked) fusionee. */
+} FusionFork;
 
 /*
  * Sending a message
@@ -220,6 +226,8 @@ typedef struct {
 #define FUSION_ENTRY_SET_INFO      _IOW(FT_LOUNGE,    0x03, FusionEntryInfo)
 #define FUSION_ENTRY_GET_INFO      _IOW(FT_LOUNGE,    0x04, FusionEntryInfo)
 
+#define FUSION_FORK                _IOW(FT_LOUNGE,    0x05, FusionFork)
+
 #define FUSION_SEND_MESSAGE        _IOW(FT_MESSAGING, 0x00, FusionSendMessage)
 
 #define FUSION_CALL_NEW            _IOW(FT_CALL,      0x00, FusionCallNew)
-- 
1.7.3.3

