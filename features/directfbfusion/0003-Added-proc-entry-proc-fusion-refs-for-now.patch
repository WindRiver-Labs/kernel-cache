From 712d5ba3502c90e7f577ccc6d080f59d745b83fb Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Mon, 28 Oct 2002 17:04:55 +0000
Subject: [PATCH] Added proc entry ("/proc/fusion/refs" for now).

---
 drivers/char/fusion/fusiondev.c |   16 ++++++-
 drivers/char/fusion/fusiondev.h |   22 ++++++++++
 drivers/char/fusion/ref.c       |   89 ++++++++++++++++++++++++++++++---------
 drivers/char/fusion/ref.h       |    2 +
 4 files changed, 107 insertions(+), 22 deletions(-)
 create mode 100644 drivers/char/fusion/fusiondev.h

diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 0a48371..eca0c91 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -19,11 +19,13 @@
 #include <linux/fs.h>
 #include <linux/slab.h>
 #include <linux/miscdevice.h>
+#include <linux/proc_fs.h>
 #include <linux/init.h>
 #include <asm/uaccess.h>
 
 #include <linux/fusion.h>
 
+#include "fusiondev.h"
 #include "fusionee.h"
 #include "ref.h"
 
@@ -31,6 +33,8 @@
 
 MODULE_LICENSE("GPL");
 
+struct proc_dir_entry *proc_fusion_dir;
+
 /******************************************************************************/
 
 static int
@@ -158,11 +162,19 @@ fusion_init(void)
 {
   int ret;
 
-  ret = misc_register (&fusion_miscdev);
-  
+  proc_fusion_dir = proc_mkdir ("fusion", NULL);
+
+  ret = fusion_ref_init();
   if (ret)
     return ret;
 
+  ret = misc_register (&fusion_miscdev);
+  if (ret)
+    {
+      fusion_ref_cleanup();
+      return ret;
+    }
+
   return 0;
 }
 
diff --git a/drivers/char/fusion/fusiondev.h b/drivers/char/fusion/fusiondev.h
new file mode 100644
index 0000000..c3bae45
--- /dev/null
+++ b/drivers/char/fusion/fusiondev.h
@@ -0,0 +1,22 @@
+/*
+ *	Fusion Kernel Module
+ *
+ *	(c) Copyright 2002  convergence integrated media GmbH
+ *
+ *      Written by Denis Oliver Kropp <dok@directfb.org>
+ *
+ *
+ *	This program is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU General Public License
+ *	as published by the Free Software Foundation; either version
+ *	2 of the License, or (at your option) any later version.
+ */
+ 
+#ifndef __FUSIONDEV_H__
+#define __FUSIONDEV_H__
+
+#include <linux/proc_fs.h>
+
+extern struct proc_dir_entry *proc_fusion_dir;
+
+#endif
diff --git a/drivers/char/fusion/ref.c b/drivers/char/fusion/ref.c
index f6ee01b..9087943 100644
--- a/drivers/char/fusion/ref.c
+++ b/drivers/char/fusion/ref.c
@@ -21,6 +21,7 @@
 
 #include <linux/fusion.h>
 
+#include "fusiondev.h"
 #include "fusionee.h"
 #include "list.h"
 #include "ref.h"
@@ -61,6 +62,74 @@ static spinlock_t  refs_lock = SPIN_LOCK_UNLOCKED;
 
 /******************************************************************************/
 
+static int
+fusion_ref_read_proc(char *buf, char **start, off_t offset,
+                     int len, int *eof, void *private)
+{
+  FusionLink *l;
+  int written = 0;
+
+  fusion_list_foreach (l, refs)
+    {
+      FusionRef *ref = (FusionRef*) l;
+
+      written += sprintf(buf+written, "0x%08x %2d %2d %s\n",
+                         ref->id, ref->global, ref->local,
+                         ref->locked ? "(locked)" : "");
+      if (written < offset)
+        {
+          offset -= written;
+          written = 0;
+        }
+
+      if (written >= len)
+        break;
+    }
+
+  *start = buf + offset;
+  written -= offset;
+  if(written > len)
+    {
+      *eof = 0;
+      return len;
+    }
+
+  *eof = 1;
+  return (written<0) ? 0 : written;
+}
+
+int
+fusion_ref_init()
+{
+  create_proc_read_entry("refs", 0, proc_fusion_dir, fusion_ref_read_proc, NULL);
+
+  return 0;
+}
+
+void
+fusion_ref_cleanup()
+{
+  FusionLink *l = refs;
+
+  while (l)
+    {
+      FusionLink *next = l->next;
+      FusionRef  *ref  = (FusionRef *) l;
+
+      free_all_local (ref);
+
+      kfree (ref);
+
+      l = next;
+    }
+
+  refs = NULL;
+
+  remove_proc_entry ("refs", proc_fusion_dir);
+}
+
+/******************************************************************************/
+
 int
 fusion_ref_new (int *id)
 {
@@ -299,26 +368,6 @@ fusion_ref_clear_all_local (Fusionee *fusionee)
   spin_unlock (&refs_lock);
 }
 
-void
-fusion_ref_cleanup()
-{
-  FusionLink *l = refs;
-
-  while (l)
-    {
-      FusionLink *next = l->next;
-      FusionRef  *ref  = (FusionRef *) l;
-
-      free_all_local (ref);
-
-      kfree (ref);
-
-      l = next;
-    }
-
-  refs = NULL;
-}
-
 /******************************************************************************/
 
 static FusionRef *
diff --git a/drivers/char/fusion/ref.h b/drivers/char/fusion/ref.h
index 0490e37..4faa8f9 100644
--- a/drivers/char/fusion/ref.h
+++ b/drivers/char/fusion/ref.h
@@ -17,6 +17,8 @@
 
 #include "types.h"
 
+int fusion_ref_init (void);
+
 int fusion_ref_new (int *id);
 int fusion_ref_up (int id, Fusionee *fusionee);
 int fusion_ref_down (int id, Fusionee *fusionee);
-- 
1.7.3.3

