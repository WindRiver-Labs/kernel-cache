From 407cddc768936e9a147e47d00844765e92f6d998 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Tue, 23 Jan 2007 21:19:25 +0000
Subject: [PATCH] Don't use interruptible locking in fusionee_destroy() called by fusiondev_release(), which must complete.

This should fix left over ghost fusionees which required reloading the module,
causing some badness messages in the proc file system.
---
 drivers/char/fusion/fusiondev.c |    4 +---
 drivers/char/fusion/fusionee.c  |   18 +++++++++++-------
 drivers/char/fusion/fusionee.h  |    2 +-
 3 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 6a77a99..1ca50cc 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -344,9 +344,7 @@ fusion_release (struct inode *inode, struct file *file)
 
      DEBUG( "fusion_release( %p, %d )\n", file, atomic_read(&file->f_count) );
 
-     /* FIXME: is this a good idea? */
-     /*while (*/fusionee_destroy (fusion_devs[minor], fusionee);//)
-          //schedule ();
+     fusionee_destroy (fusion_devs[minor], fusionee);
 
      down (&devs_lock);
 
diff --git a/drivers/char/fusion/fusionee.c b/drivers/char/fusion/fusionee.c
index 45541d2..72292a5 100644
--- a/drivers/char/fusion/fusionee.c
+++ b/drivers/char/fusion/fusionee.c
@@ -475,22 +475,27 @@ fusionee_kill (FusionDev *dev,
      return 0;
 }
 
-int
+void
 fusionee_destroy (FusionDev *dev,
                   Fusionee  *fusionee)
 {
-     if (down_interruptible (&dev->fusionee.lock))
-          return -EINTR;
+     /* Lock list. */
+     down (&dev->fusionee.lock);
 
+     /* Lock fusionee. */
      down (&fusionee->lock);
 
+     /* Remove from list. */
      fusion_list_remove (&dev->fusionee.list, &fusionee->link);
 
+     /* Wake up waiting killer. */
      wake_up_interruptible_all (&dev->fusionee.wait);
 
+     /* Unlock list. */
      up (&dev->fusionee.lock);
 
 
+     /* Release locks, references, ... */
      fusion_call_destroy_all (dev, fusionee->id);
      fusion_skirmish_dismiss_all (dev, fusionee->id);
      fusion_reactor_detach_all (dev, fusionee->id);
@@ -498,20 +503,19 @@ fusionee_destroy (FusionDev *dev,
      fusion_ref_clear_all_local (dev, fusionee->id);
      fusion_shmpool_detach_all (dev, fusionee->id);
 
+     /* Free all pending messages. */
      while (fusionee->messages.count) {
           Message *message = (Message*) fusion_fifo_get (&fusionee->messages);
 
           kfree (message);
      }
 
+     /* Unlock fusionee. */
      up (&fusionee->lock);
 
-     if (fusionee->id == FUSION_ID_MASTER && !dev->enter_ok)
-          wake_up_interruptible_all (&dev->enter_wait);
 
+     /* Free fusionee data. */
      kfree (fusionee);
-
-     return 0;
 }
 
 FusionID
diff --git a/drivers/char/fusion/fusionee.h b/drivers/char/fusion/fusionee.h
index 98028bb..1dc5650 100644
--- a/drivers/char/fusion/fusionee.h
+++ b/drivers/char/fusion/fusionee.h
@@ -67,7 +67,7 @@ int fusionee_kill          (FusionDev         *dev,
                             int                signal,
                             int                timeout_ms);
 
-int fusionee_destroy       (FusionDev         *dev,
+void fusionee_destroy      (FusionDev         *dev,
                             Fusionee          *fusionee);
 
 FusionID fusionee_id( const Fusionee *fusionee );
-- 
1.7.3.3

