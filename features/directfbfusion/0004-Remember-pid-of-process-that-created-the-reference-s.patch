From 19ff20a9858f60efe2177eb375544b753b1a4d6b Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Fri, 1 Nov 2002 13:59:12 +0000
Subject: [PATCH] Remember pid of process that created the reference, shown in /proc/fusion/refs. Added spin_lock() to fusion_ref_destroy() before destroying the reference.

---
 drivers/char/fusion/ref.c |   30 ++++++++++++++++++++----------
 1 files changed, 20 insertions(+), 10 deletions(-)

diff --git a/drivers/char/fusion/ref.c b/drivers/char/fusion/ref.c
index 9087943..4b97620 100644
--- a/drivers/char/fusion/ref.c
+++ b/drivers/char/fusion/ref.c
@@ -33,14 +33,21 @@ typedef struct {
 } LocalRef;
 
 typedef struct {
-  FusionLink  link;
-  spinlock_t  lock;
-  int         id;
-  int         global;
-  int         local;
-  bool        locked;
-  FusionLink *local_refs;
-  wait_queue_head_t wait;
+  FusionLink         link;
+
+  spinlock_t         lock;
+
+  int                id;
+  int                pid;
+
+  int                global;
+  int                local;
+
+  bool               locked;
+
+  FusionLink        *local_refs;
+
+  wait_queue_head_t  wait;
 } FusionRef;
 
 /******************************************************************************/
@@ -73,8 +80,8 @@ fusion_ref_read_proc(char *buf, char **start, off_t offset,
     {
       FusionRef *ref = (FusionRef*) l;
 
-      written += sprintf(buf+written, "0x%08x %2d %2d %s\n",
-                         ref->id, ref->global, ref->local,
+      written += sprintf(buf+written, "(%5d) 0x%08x %2d %2d %s\n",
+                         ref->pid, ref->id, ref->global, ref->local,
                          ref->locked ? "(locked)" : "");
       if (written < offset)
         {
@@ -144,6 +151,7 @@ fusion_ref_new (int *id)
   spin_lock (&refs_lock);
 
   ref->id   = ids++;
+  ref->pid  = current->pid;
   ref->lock = SPIN_LOCK_UNLOCKED;
 
   init_waitqueue_head (&ref->wait);
@@ -338,6 +346,8 @@ fusion_ref_destroy (int id)
   if (!ref)
     return -EINVAL;
 
+  spin_lock (&ref->lock);
+
   fusion_list_remove (&refs, &ref->link);
 
   wake_up_interruptible_all (&ref->wait);
-- 
1.7.3.3

