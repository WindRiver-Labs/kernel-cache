From e78ecf1dfa7402ebf161d4de2c6c0e8087e29972 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@shizo.(none)>
Date: Mon, 28 May 2007 10:50:44 +0200
Subject: [PATCH] API break!

Added serial value to call messages.

Need to specify that serial when returning calls!

+
+     unsigned int        serial;
 } FusionCallReturn;

+
+     unsigned int        serial;
 } FusionCallMessage;
---
 drivers/char/fusion/call.c |   64 +++++++++++++++++++++++++++----------------
 include/linux/fusion.h     |    8 ++++-
 2 files changed, 46 insertions(+), 26 deletions(-)

diff --git a/drivers/char/fusion/call.c b/drivers/char/fusion/call.c
index 882535a..66b37f9 100644
--- a/drivers/char/fusion/call.c
+++ b/drivers/char/fusion/call.c
@@ -38,6 +38,9 @@ typedef struct {
      bool              executed;
 
      wait_queue_head_t wait;
+
+     int               call_id;
+     unsigned int      serial;
 } FusionCallExecution;
 
 typedef struct {
@@ -57,6 +60,8 @@ typedef struct {
      FusionLink        *last;            /* points to the last item of executions */
 
      int                count;    /* number of calls ever made */
+
+     unsigned int       serial;
 } FusionCall;
 
 /******************************************************************************/
@@ -67,7 +72,8 @@ static void unlock_call (FusionCall *call);
 
 static FusionCallExecution *add_execution       (FusionCall          *call,
                                                  Fusionee            *caller,
-                                                 FusionCallExecute   *execute);
+                                                 FusionCallExecute   *execute,
+                                                 unsigned int         serial);
 static void                 remove_execution    (FusionCall          *call,
                                                  FusionCallExecution *execution);
 static void                 free_all_executions (FusionCall          *call);
@@ -202,17 +208,22 @@ fusion_call_execute (FusionDev *dev, Fusionee *fusionee, FusionCallExecute *exec
 {
      int                  ret;
      FusionCall          *call;
-     FusionCallExecution *execution;
+     FusionCallExecution *execution = NULL;
      FusionCallMessage    message;
+     unsigned int         serial;
 
      ret = lock_call (dev, execute->call_id, &call);
      if (ret)
           return ret;
 
-     execution = add_execution (call, fusionee, execute);
-     if (!execution) {
-          unlock_call (call);
-          return -ENOMEM;
+     serial = ++call->serial;
+
+     if (fusionee && !(execute->flags & FCEF_ONEWAY)) {
+          execution = add_execution (call, fusionee, execute, serial);
+          if (!execution) {
+               unlock_call (call);
+               return -ENOMEM;
+          }
      }
 
      /* Send call message. */
@@ -224,18 +235,22 @@ fusion_call_execute (FusionDev *dev, Fusionee *fusionee, FusionCallExecute *exec
      message.call_arg = execute->call_arg;
      message.call_ptr = execute->call_ptr;
 
+     message.serial   = serial;
+
      ret = fusionee_send_message (dev, fusionee, call->fusion_id, FMT_CALL,
                                   call->id, sizeof(message), &message, NULL, NULL, 0);
      if (ret) {
-          remove_execution (call, execution);
-          kfree (execution);
+          if (execution) {
+               remove_execution (call, execution);
+               kfree (execution);
+          }
           unlock_call (call);
           return ret;
      }
 
      call->count++;
 
-     if (fusionee && !(execute->flags & FCEF_ONEWAY)) {
+     if (execution) {
           /* TODO: implement timeout */
           fusion_sleep_on (&execution->wait, &call->lock, 0);
 
@@ -276,31 +291,29 @@ fusion_call_return (FusionDev *dev, int fusion_id, FusionCallReturn *call_ret)
      while (l) {
           FusionCallExecution *execution = (FusionCallExecution*) l;
 
-          if (execution->executed) {
+          if (execution->call_id != call_ret->call_id || execution->serial != call_ret->serial) {
                l = l->prev;
                continue;
           }
 
-          if (execution->caller) {
-               execution->ret_val  = call_ret->val;
-               execution->executed = true;
-
-               wake_up_interruptible_all (&execution->wait);
+          if (execution->executed) {
+               unlock_call (call);
+               return -EIO;
           }
-          else {
-               remove_execution (call, execution);
 
-               kfree (execution);
-          }
+          FUSION_ASSUME (execution->caller != NULL);
 
-          unlock_call (call);
+          execution->ret_val  = call_ret->val;
+          execution->executed = true;
 
-          return 0;
+          wake_up_interruptible_all (&execution->wait);
+
+          break;
      }
 
      unlock_call (call);
 
-     return -EIO;
+     return 0;
 }
 
 int
@@ -428,7 +441,8 @@ unlock_call (FusionCall *call)
 static FusionCallExecution *
 add_execution (FusionCall        *call,
                Fusionee          *caller,
-               FusionCallExecute *execute)
+               FusionCallExecute *execute,
+               unsigned int       serial)
 {
      FusionCallExecution *execution;
 
@@ -440,7 +454,9 @@ add_execution (FusionCall        *call,
      /* Initialize execution. */
      memset (execution, 0, sizeof(FusionCallExecution));
 
-     execution->caller = caller;
+     execution->caller  = caller;
+     execution->call_id = call->id;
+     execution->serial  = serial;
 
      init_waitqueue_head (&execution->wait);
 
diff --git a/include/linux/fusion.h b/include/linux/fusion.h
index a5a6de1..829a6a4 100644
--- a/include/linux/fusion.h
+++ b/include/linux/fusion.h
@@ -6,8 +6,8 @@
 /*
  * Fusion Kernel Device API Version
  */
-#define FUSION_API_MAJOR      3         /* Increased if backward compatibility is dropped. */
-#define FUSION_API_MINOR      3         /* Increased if new features are added. */
+#define FUSION_API_MAJOR      4         /* Increased if backward compatibility is dropped. */
+#define FUSION_API_MINOR      0         /* Increased if new features are added. */
 
 /*
  * The Fusion ID is a unique identifier for one process consisting of threads.
@@ -120,6 +120,8 @@ typedef struct {
      int                 call_id;       /* id of currently executing call */
 
      int                 val;           /* value to return */
+
+     unsigned int        serial;        
 } FusionCallReturn;
 
 typedef struct {
@@ -129,6 +131,8 @@ typedef struct {
      int                 caller;        /* fusion id of the caller or zero if called from Fusion */
      int                 call_arg;      /* optional call parameter */
      void               *call_ptr;      /* optional call parameter */
+
+     unsigned int        serial;
 } FusionCallMessage;
 
 /*
-- 
1.7.3.3

