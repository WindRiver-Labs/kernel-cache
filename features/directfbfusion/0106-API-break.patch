From b3b69edd5668fc19b905b8a86e264cbfc62d0e36 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@shizo.(none)>
Date: Mon, 28 May 2007 17:03:19 +0200
Subject: [PATCH] API break!

Added channel parameter to low level messages and reactors.

Attach, detach, dispatch of reactor require
additional channel number specification now!
---
 drivers/char/fusion/call.c      |    2 +-
 drivers/char/fusion/fusiondev.c |   16 ++++---
 drivers/char/fusion/fusionee.c  |   12 +++--
 drivers/char/fusion/fusionee.h  |    1 +
 drivers/char/fusion/reactor.c   |   95 +++++++++++++++++++++++++++++++-------
 drivers/char/fusion/reactor.h   |    3 +
 drivers/char/fusion/shmpool.c   |    2 +-
 include/linux/fusion.h          |   29 ++++++++++--
 8 files changed, 125 insertions(+), 35 deletions(-)

diff --git a/drivers/char/fusion/call.c b/drivers/char/fusion/call.c
index 66b37f9..064cace 100644
--- a/drivers/char/fusion/call.c
+++ b/drivers/char/fusion/call.c
@@ -238,7 +238,7 @@ fusion_call_execute (FusionDev *dev, Fusionee *fusionee, FusionCallExecute *exec
      message.serial   = serial;
 
      ret = fusionee_send_message (dev, fusionee, call->fusion_id, FMT_CALL,
-                                  call->id, sizeof(message), &message, NULL, NULL, 0);
+                                  call->id, 0, sizeof(message), &message, NULL, NULL, 0);
      if (ret) {
           if (execution) {
                remove_execution (call, execution);
diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 1a3e04e..be8d730 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -551,7 +551,7 @@ messaging_ioctl (FusionDev *dev, Fusionee *fusionee,
                     return -EMSGSIZE;
 
                return fusionee_send_message (dev, fusionee, send.fusion_id, FMT_SEND,
-                                             send.msg_id, send.msg_size, send.msg_data,
+                                             send.msg_id, send.msg_channel, send.msg_size, send.msg_data,
                                              NULL, NULL, 0);
      }
 
@@ -828,6 +828,8 @@ reactor_ioctl (FusionDev *dev, Fusionee *fusionee,
 {
      int                      id;
      int                      ret;
+     FusionReactorAttach      attach;
+     FusionReactorDetach      detach;
      FusionReactorDispatch    dispatch;
      FusionReactorSetCallback callback;
      FusionID                 fusion_id = fusionee_id( fusionee );
@@ -845,16 +847,18 @@ reactor_ioctl (FusionDev *dev, Fusionee *fusionee,
                return 0;
 
           case _IOC_NR(FUSION_REACTOR_ATTACH):
-               if (get_user (id, (int*) arg))
+               if (copy_from_user (&attach,
+                                   (FusionReactorAttach*) arg, sizeof(attach)))
                     return -EFAULT;
 
-               return fusion_reactor_attach (dev, id, fusion_id);
+               return fusion_reactor_attach (dev, attach.reactor_id, attach.channel, fusion_id);
 
           case _IOC_NR(FUSION_REACTOR_DETACH):
-               if (get_user (id, (int*) arg))
+               if (copy_from_user (&detach,
+                                   (FusionReactorDetach*) arg, sizeof(detach)))
                     return -EFAULT;
 
-               return fusion_reactor_detach (dev, id, fusion_id);
+               return fusion_reactor_detach (dev, detach.reactor_id, detach.channel, fusion_id);
 
           case _IOC_NR(FUSION_REACTOR_DISPATCH):
                if (copy_from_user (&dispatch,
@@ -868,7 +872,7 @@ reactor_ioctl (FusionDev *dev, Fusionee *fusionee,
                if (dispatch.msg_size > 0x10000)
                     return -EMSGSIZE;
 
-               return fusion_reactor_dispatch (dev, dispatch.reactor_id,
+               return fusion_reactor_dispatch (dev, dispatch.reactor_id, dispatch.channel,
                                                dispatch.self ? NULL : fusionee,
                                                dispatch.msg_size, dispatch.msg_data);
 
diff --git a/drivers/char/fusion/fusionee.c b/drivers/char/fusion/fusionee.c
index 3982e3f..a0a54c5 100644
--- a/drivers/char/fusion/fusionee.c
+++ b/drivers/char/fusion/fusionee.c
@@ -63,7 +63,8 @@ typedef struct {
      FusionLink         link;
 
      FusionMessageType  type;
-     FusionID           id;
+     int                id;
+     int                channel;
      int                size;
      void              *data;
 
@@ -261,6 +262,7 @@ fusionee_send_message( FusionDev         *dev,
                        FusionID           recipient,
                        FusionMessageType  msg_type,
                        int                msg_id,
+                       int                msg_channel,
                        int                msg_size,
                        const void        *msg_data,
                        MessageCallback    callback,
@@ -316,6 +318,7 @@ fusionee_send_message( FusionDev         *dev,
 
      message->type           = msg_type;
      message->id             = msg_id;
+     message->channel        = msg_channel;
      message->size           = msg_size;
      message->callback       = callback;
      message->callback_ctx   = callback_ctx;
@@ -389,9 +392,10 @@ fusionee_get_messages (FusionDev *dev,
                break;
           }
 
-          header.msg_type = message->type;
-          header.msg_id   = message->id;
-          header.msg_size = message->size;
+          header.msg_type    = message->type;
+          header.msg_id      = message->id;
+          header.msg_channel = message->channel;
+          header.msg_size    = message->size;
 
           if (copy_to_user (buf, &header, sizeof(header)) ||
               copy_to_user (buf + sizeof(header), message->data, message->size))
diff --git a/drivers/char/fusion/fusionee.h b/drivers/char/fusion/fusionee.h
index 572e640..0fdb598 100644
--- a/drivers/char/fusion/fusionee.h
+++ b/drivers/char/fusion/fusionee.h
@@ -46,6 +46,7 @@ int fusionee_send_message  (FusionDev         *dev,
                             FusionID           recipient,
                             FusionMessageType  msg_type,
                             int                msg_id,
+                            int                msg_channel,
                             int                msg_size,
                             const void        *msg_data,
                             MessageCallback    callback,
diff --git a/drivers/char/fusion/reactor.c b/drivers/char/fusion/reactor.c
index f6008a1..f0cfd9c 100644
--- a/drivers/char/fusion/reactor.c
+++ b/drivers/char/fusion/reactor.c
@@ -34,7 +34,8 @@ typedef struct {
 
      int                fusion_id;
 
-     int                count;     /* number of attach calls */
+     int               *counts;     /* number of attach calls */
+     int                num_counts;
 } ReactorNode;
 
 typedef struct {
@@ -144,12 +145,15 @@ fusion_reactor_new (FusionDev *dev, int *ret_id)
 }
 
 int
-fusion_reactor_attach (FusionDev *dev, int id, FusionID fusion_id)
+fusion_reactor_attach (FusionDev *dev, int id, int channel, FusionID fusion_id)
 {
      int            ret;
      ReactorNode   *node;
      FusionReactor *reactor;
 
+     if (channel < 0 || channel > 1023)
+          return -EINVAL;
+
      ret = fusion_reactor_lock( &dev->reactor, id, false, &reactor );
      if (ret)
           return ret;
@@ -163,19 +167,47 @@ fusion_reactor_attach (FusionDev *dev, int id, FusionID fusion_id)
 
      node = get_node (reactor, fusion_id);
      if (!node) {
+          int ncount = channel + 4;
+
           node = kmalloc (sizeof(ReactorNode), GFP_KERNEL);
           if (!node) {
                fusion_reactor_unlock( reactor );
                return -ENOMEM;
           }
 
-          node->fusion_id = fusion_id;
-          node->count     = 1;
+          node->counts = kmalloc( sizeof(int) * ncount, GFP_KERNEL );
+          if (!node->counts) {
+               kfree( node );
+               fusion_reactor_unlock( reactor );
+               return -ENOMEM;
+          }
+
+          node->num_counts = ncount;
+          node->fusion_id  = fusion_id;
+
+          node->counts[channel] = 1;
 
           fusion_list_prepend (&reactor->nodes, &node->link);
      }
-     else
-          node->count++;
+     else {
+          if (node->num_counts <= channel) {
+               int  ncount = channel + 4;
+               int *counts = kmalloc( sizeof(int) * ncount, GFP_KERNEL );
+
+               if (!counts) {
+                    fusion_reactor_unlock( reactor );
+                    return -ENOMEM;
+               }
+
+               memcpy( counts, node->counts, sizeof(int) * node->num_counts );
+               memset( counts + node->num_counts, 0, sizeof(int) * (ncount - node->num_counts) );
+
+               node->counts     = counts;
+               node->num_counts = ncount;
+          }
+
+          node->counts[channel]++;
+     }
 
      fusion_reactor_unlock( reactor );
 
@@ -183,12 +215,15 @@ fusion_reactor_attach (FusionDev *dev, int id, FusionID fusion_id)
 }
 
 int
-fusion_reactor_detach (FusionDev *dev, int id, FusionID fusion_id)
+fusion_reactor_detach (FusionDev *dev, int id, int channel, FusionID fusion_id)
 {
      int            ret;
      ReactorNode   *node;
      FusionReactor *reactor;
 
+     if (channel < 0 || channel > 1023)
+          return -EINVAL;
+
      ret = fusion_reactor_lock( &dev->reactor, id, true, &reactor );
      if (ret)
           return ret;
@@ -196,15 +231,25 @@ fusion_reactor_detach (FusionDev *dev, int id, FusionID fusion_id)
      dev->stat.reactor_detach++;
 
      node = get_node (reactor, fusion_id);
-     if (!node) {
+     if (!node || node->num_counts <= channel) {
           fusion_reactor_unlock( reactor );
           up( &dev->reactor.lock );
           return -EIO;
      }
 
-     if (! --node->count) {
-          fusion_list_remove (&reactor->nodes, &node->link);
-          kfree (node);
+     if (! --node->counts[channel]) {
+          int i;
+
+          for (i=0; i<node->num_counts; i++) {
+               if (node->counts[i])
+                    break;
+          }
+
+          if (i == node->num_counts) {
+               fusion_list_remove (&reactor->nodes, &node->link);
+               kfree (node->counts);
+               kfree (node);
+          }
      }
 
      if (reactor->destroyed && !reactor->nodes)
@@ -262,7 +307,7 @@ dispatch_callback( FusionDev *dev,
 }
 
 int
-fusion_reactor_dispatch (FusionDev *dev, int id, Fusionee *fusionee,
+fusion_reactor_dispatch (FusionDev *dev, int id, int channel, Fusionee *fusionee,
                          int msg_size, const void *msg_data)
 {
      int              ret;
@@ -271,6 +316,9 @@ fusion_reactor_dispatch (FusionDev *dev, int id, Fusionee *fusionee,
      ReactorDispatch *dispatch  = NULL;
      FusionID         fusion_id = fusionee ? fusionee_id( fusionee ) : 0;
 
+     if (channel < 0 || channel > 1023)
+          return -EINVAL;
+
      ret = fusion_reactor_lock( &dev->reactor, id, false, &reactor );
      if (ret)
           return ret;
@@ -289,7 +337,7 @@ fusion_reactor_dispatch (FusionDev *dev, int id, Fusionee *fusionee,
 
           dispatch->count    = 0;
           dispatch->call_id  = reactor->call_id;
-          dispatch->call_arg = 0;/*FIXME CHANNEL*/
+          dispatch->call_arg = channel;
           dispatch->call_ptr = reactor->call_ptr;
      }
 
@@ -298,19 +346,19 @@ fusion_reactor_dispatch (FusionDev *dev, int id, Fusionee *fusionee,
      fusion_list_foreach (l, reactor->nodes) {
           ReactorNode *node = (ReactorNode *) l;
 
-          if (node->fusion_id == fusion_id)
+          if (node->fusion_id == fusion_id || node->num_counts <= channel || !node->counts[channel])
                continue;
 
           if (dispatch) {
                dispatch->count++;
 
                fusionee_send_message (dev, fusionee, node->fusion_id, FMT_REACTOR,
-                                      reactor->entry.id, msg_size, msg_data,
+                                      reactor->entry.id, 0, msg_size, msg_data,
                                       dispatch_callback, dispatch, reactor->entry.id);
           }
           else
                fusionee_send_message (dev, fusionee, node->fusion_id, FMT_REACTOR,
-                                      reactor->entry.id, msg_size, msg_data, NULL, NULL, 0);
+                                      reactor->entry.id, 0, msg_size, msg_data, NULL, NULL, 0);
      }
 
      if (dispatch && !dispatch->count) {
@@ -400,6 +448,7 @@ fusion_reactor_detach_all (FusionDev *dev, FusionID fusion_id)
           fusion_list_foreach (node, reactor->nodes) {
                if (node->fusion_id == fusion_id) {
                     fusion_list_remove (&reactor->nodes, &node->link);
+                    kfree (node->counts);
                     kfree (node);
                     break;
                }
@@ -454,8 +503,17 @@ fork_node (FusionReactor *reactor, FusionID fusion_id, FusionID from_id)
                     return -ENOMEM;
                }
 
-               new_node->fusion_id = fusion_id;
-               new_node->count     = node->count;
+               new_node->counts = kmalloc (sizeof(int) * node->num_counts, GFP_KERNEL);
+               if (!new_node->counts) {
+                    kfree( new_node );
+                    up (&reactor->entry.lock);
+                    return -ENOMEM;
+               }
+
+               new_node->fusion_id  = fusion_id;
+               new_node->num_counts = node->num_counts;
+
+               memcpy( new_node->counts, node->counts, sizeof(int) * node->num_counts );
 
                fusion_list_prepend (&reactor->nodes, &new_node->link);
 
@@ -476,6 +534,7 @@ free_all_nodes (FusionReactor *reactor)
      ReactorNode *node;
 
      fusion_list_foreach_safe (node, n, reactor->nodes) {
+          kfree (node->counts);
           kfree (node);
      }
 
diff --git a/drivers/char/fusion/reactor.h b/drivers/char/fusion/reactor.h
index 6a09e2e..f4920fe 100644
--- a/drivers/char/fusion/reactor.h
+++ b/drivers/char/fusion/reactor.h
@@ -32,14 +32,17 @@ int fusion_reactor_new      (FusionDev  *dev,
 
 int fusion_reactor_attach   (FusionDev  *dev,
                              int         id,
+                             int         channel,
                              FusionID    fusion_id);
 
 int fusion_reactor_detach   (FusionDev  *dev,
                              int         id,
+                             int         channel,
                              FusionID    fusion_id);
 
 int fusion_reactor_dispatch (FusionDev  *dev,
                              int         id,
+                             int         channel,
                              Fusionee   *fusionee,
                              int         msg_size,
                              const void *msg_data);
diff --git a/drivers/char/fusion/shmpool.c b/drivers/char/fusion/shmpool.c
index de7b54e..d8310b7 100644
--- a/drivers/char/fusion/shmpool.c
+++ b/drivers/char/fusion/shmpool.c
@@ -311,7 +311,7 @@ fusion_shmpool_dispatch( FusionDev             *dev,
                continue;
 
           fusionee_send_message (dev, fusionee, node->fusion_id, FMT_SHMPOOL,
-                                 shmpool->entry.id, sizeof(message), &message,
+                                 shmpool->entry.id, 0, sizeof(message), &message,
                                  NULL, NULL, 0);
      }
 
diff --git a/include/linux/fusion.h b/include/linux/fusion.h
index 99168f5..12e3d0f 100644
--- a/include/linux/fusion.h
+++ b/include/linux/fusion.h
@@ -6,7 +6,7 @@
 /*
  * Fusion Kernel Device API Version
  */
-#define FUSION_API_MAJOR      4         /* Increased if backward compatibility is dropped. */
+#define FUSION_API_MAJOR      5         /* Increased if backward compatibility is dropped. */
 #define FUSION_API_MINOR      0         /* Increased if new features are added. */
 
 /*
@@ -42,6 +42,7 @@ typedef struct {
      FusionID            fusion_id;     /* recipient */
 
      int                 msg_id;        /* optional message identifier */
+     int                 msg_channel;   /* optional channel number */
      int                 msg_size;      /* message size, must be greater than zero */
      const void         *msg_data;      /* message data, must not be NULL */
 } FusionSendMessage;
@@ -61,6 +62,7 @@ typedef struct {
 
      int                 msg_id;        /* message id (custom id or call/reactor/pool id) */
      int                 msg_size;      /* size of the following message data */
+     int                 msg_channel;   /* optional or reactor channel */
 
      /* message data follows */
 } FusionReadMessage;
@@ -69,14 +71,31 @@ typedef struct {
  * Dispatching a message via a reactor
  */
 typedef struct {
-     int                 reactor_id;
-     int                 self;
+     int                 reactor_id;    /* id of target reactor */
+     int                 channel;       /* optional reactor channel (0-1023) */
+     int                 self;          /* send to ourself if attached */
 
      int                 msg_size;      /* message size, must be greater than zero */
      const void         *msg_data;      /* message data, must not be NULL */
 } FusionReactorDispatch;
 
 /*
+ * Attaching to a reactor
+ */
+typedef struct {
+     int                 reactor_id;
+     int                 channel;
+} FusionReactorAttach;
+
+/*
+ * Detaching from a reactor
+ */
+typedef struct {
+     int                 reactor_id;
+     int                 channel;
+} FusionReactorDetach;
+
+/*
  * Registering a dispatch callback
  *
  * The call_arg will be set to the channel number
@@ -280,8 +299,8 @@ typedef struct {
 #define FUSION_PROPERTY_DESTROY              _IOW(FT_PROPERTY,  0x05, int)
 
 #define FUSION_REACTOR_NEW                   _IOW(FT_REACTOR,   0x00, int)
-#define FUSION_REACTOR_ATTACH                _IOW(FT_REACTOR,   0x01, int)
-#define FUSION_REACTOR_DETACH                _IOW(FT_REACTOR,   0x02, int)
+#define FUSION_REACTOR_ATTACH                _IOW(FT_REACTOR,   0x01, FusionReactorAttach)
+#define FUSION_REACTOR_DETACH                _IOW(FT_REACTOR,   0x02, FusionReactorDetach)
 #define FUSION_REACTOR_DISPATCH              _IOW(FT_REACTOR,   0x03, FusionReactorDispatch)
 #define FUSION_REACTOR_DESTROY               _IOW(FT_REACTOR,   0x04, int)
 #define FUSION_REACTOR_SET_DISPATCH_CALLBACK _IOW(FT_REACTOR,   0x05, FusionReactorSetCallback)
-- 
1.7.3.3

