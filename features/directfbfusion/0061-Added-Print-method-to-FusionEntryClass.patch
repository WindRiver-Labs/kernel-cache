From 817e5a6aa88a5c4acbfc128fa11efb72e1b2fc50 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Mon, 23 Aug 2004 12:54:32 +0000
Subject: [PATCH] Added Print() method to FusionEntryClass.

Added generic fusion_entries_read_proc() which uses Print() to
write each entry into the buffer.
---
 drivers/char/fusion/entries.c  |   45 ++++++++++++++++++++++
 drivers/char/fusion/entries.h  |   80 ++++++++++++++++++++++------------------
 drivers/char/fusion/property.c |    2 +-
 drivers/char/fusion/skirmish.c |   64 +++++++++-----------------------
 4 files changed, 108 insertions(+), 83 deletions(-)

diff --git a/drivers/char/fusion/entries.c b/drivers/char/fusion/entries.c
index 9654f6d..3e2d9b6 100644
--- a/drivers/char/fusion/entries.c
+++ b/drivers/char/fusion/entries.c
@@ -66,6 +66,51 @@ fusion_entries_deinit( FusionEntries *entries )
      up( &entries->lock );
 }
 
+int
+fusion_entries_read_proc(char *buf, char **start, off_t offset,
+                         int len, int *eof, void *private)
+{
+     FusionEntry      *entry;
+     FusionEntryClass *class;
+     FusionEntries    *entries = private;
+     int               written = 0;
+
+     FUSION_ASSERT( entries != NULL );
+     FUSION_ASSERT( entries->class != NULL );
+
+     class = entries->class;
+
+     if (!class->Print)
+          return -ENOTSUPP;
+
+     if (down_interruptible (&entries->lock))
+          return -EINTR;
+
+     fusion_list_foreach (entry, entries->list) {
+          written += class->Print( entry, entries->ctx, buf + written );
+
+          if (written < offset) {
+               offset -= written;
+               written = 0;
+          }
+
+          if (written >= len)
+               break;
+     }
+
+     up (&entries->lock);
+
+     *start = buf + offset;
+     written -= offset;
+     if (written > len) {
+          *eof = 0;
+          return len;
+     }
+
+     *eof = 1;
+
+     return (written<0) ? 0 : written;
+}
 
 int
 fusion_entry_create( FusionEntries *entries,
diff --git a/drivers/char/fusion/entries.h b/drivers/char/fusion/entries.h
index 9ab008d..72dedf9 100644
--- a/drivers/char/fusion/entries.h
+++ b/drivers/char/fusion/entries.h
@@ -27,6 +27,7 @@ typedef const struct {
 
      int  (*Init)   ( FusionEntry *entry, void *ctx );
      void (*Destroy)( FusionEntry *entry, void *ctx );
+     int  (*Print)  ( FusionEntry *entry, void *ctx, char *buf );
 } FusionEntryClass;
 
 
@@ -64,6 +65,12 @@ void fusion_entries_init  ( FusionEntries    *entries,
 void fusion_entries_deinit( FusionEntries    *entries );
 
 
+/* '/proc' support */
+
+int  fusion_entries_read_proc( char *buf, char **start, off_t offset,
+                               int len, int *eof, void *private );
+
+
 /* Create & Destroy */
 
 int  fusion_entry_create  ( FusionEntries    *entries,
@@ -110,42 +117,43 @@ void fusion_entry_notify  ( FusionEntry      *entry,
                             bool              all );
 
 
-#define FUSION_ENTRY_CLASS( Type, name, init_func, destroy_func )          \
-                                                                           \
-     static FusionEntryClass name##_class = {                              \
-          .object_size = sizeof(Type),                                     \
-          .Init        = init_func,                                        \
-          .Destroy     = destroy_func                                      \
-     };                                                                    \
-                                                                           \
-     static inline int fusion_##name##_lock( FusionEntries  *entries,      \
-                                             int             id,           \
-                                             Type          **ret_##name )  \
-     {                                                                     \
-          int          ret;                                                \
-          FusionEntry *entry;                                              \
-                                                                           \
-          ret = fusion_entry_lock( entries, id, &entry );                  \
-                                                                           \
-          if (!ret)                                                        \
-               *ret_##name = (Type *) entry;                               \
-                                                                           \
-          return ret;                                                      \
-     }                                                                     \
-                                                                           \
-     static inline void fusion_##name##_unlock( Type *name )               \
-     {                                                                     \
-          fusion_entry_unlock( (FusionEntry*) name );                      \
-     }                                                                     \
-                                                                           \
-     static inline int fusion_##name##_wait( Type *name, long *timeout )   \
-     {                                                                     \
-          return fusion_entry_wait( (FusionEntry*) name, timeout );        \
-     }                                                                     \
-                                                                           \
-     static inline void fusion_##name##_notify( Type *name, bool all )     \
-     {                                                                     \
-          fusion_entry_notify( (FusionEntry*) name, all );                 \
+#define FUSION_ENTRY_CLASS( Type, name, init_func, destroy_func, print_func )   \
+                                                                                \
+     static FusionEntryClass name##_class = {                                   \
+          .object_size = sizeof(Type),                                          \
+          .Init        = init_func,                                             \
+          .Destroy     = destroy_func,                                          \
+          .Print       = print_func                                             \
+     };                                                                         \
+                                                                                \
+     static inline int fusion_##name##_lock( FusionEntries  *entries,           \
+                                             int             id,                \
+                                             Type          **ret_##name )       \
+     {                                                                          \
+          int          ret;                                                     \
+          FusionEntry *entry;                                                   \
+                                                                                \
+          ret = fusion_entry_lock( entries, id, &entry );                       \
+                                                                                \
+          if (!ret)                                                             \
+               *ret_##name = (Type *) entry;                                    \
+                                                                                \
+          return ret;                                                           \
+     }                                                                          \
+                                                                                \
+     static inline void fusion_##name##_unlock( Type *name )                    \
+     {                                                                          \
+          fusion_entry_unlock( (FusionEntry*) name );                           \
+     }                                                                          \
+                                                                                \
+     static inline int fusion_##name##_wait( Type *name, long *timeout )        \
+     {                                                                          \
+          return fusion_entry_wait( (FusionEntry*) name, timeout );             \
+     }                                                                          \
+                                                                                \
+     static inline void fusion_##name##_notify( Type *name, bool all )          \
+     {                                                                          \
+          fusion_entry_notify( (FusionEntry*) name, all );                      \
      }
 
 
diff --git a/drivers/char/fusion/property.c b/drivers/char/fusion/property.c
index 40b2538..fec3a57 100644
--- a/drivers/char/fusion/property.c
+++ b/drivers/char/fusion/property.c
@@ -47,7 +47,7 @@ typedef struct {
      int                 count;    /* lock counter */
 } FusionProperty;
 
-FUSION_ENTRY_CLASS( FusionProperty, property, NULL, NULL )
+FUSION_ENTRY_CLASS( FusionProperty, property, NULL, NULL, NULL )
 
 /******************************************************************************/
 
diff --git a/drivers/char/fusion/skirmish.c b/drivers/char/fusion/skirmish.c
index dc614ad..3122236 100644
--- a/drivers/char/fusion/skirmish.c
+++ b/drivers/char/fusion/skirmish.c
@@ -26,6 +26,7 @@
 #include "list.h"
 #include "skirmish.h"
 
+
 typedef struct {
      FusionEntry        entry;
 
@@ -34,61 +35,32 @@ typedef struct {
      int                lock_count;
 } FusionSkirmish;
 
-FUSION_ENTRY_CLASS( FusionSkirmish, skirmish, NULL, NULL )
-
-/******************************************************************************/
-
 static int
-skirmishs_read_proc(char *buf, char **start, off_t offset,
-                    int len, int *eof, void *private)
+fusion_skirmish_print( FusionEntry *entry,
+                       void        *ctx,
+                       char        *buf )
 {
-     FusionLink *l;
-     FusionDev  *dev     = private;
-     int         written = 0;
-
-     if (down_interruptible (&dev->skirmish.lock))
-          return -EINTR;
-
-     fusion_list_foreach (l, dev->skirmish.list) {
-          FusionSkirmish *skirmish = (FusionSkirmish*) l;
-
-          if (skirmish->lock_fid) {
-               written += sprintf(buf+written, "(%5d) 0x%08x (locked 0x%08x "
-                                  "%d)\n", skirmish->entry.pid, skirmish->entry.id,
-                                  skirmish->lock_fid, skirmish->lock_pid);
-          }
-          else {
-               written += sprintf(buf+written, "(%5d) 0x%08x\n",
-                                  skirmish->entry.pid, skirmish->entry.id);
-          }
-          if (written < offset) {
-               offset -= written;
-               written = 0;
-          }
+     FusionSkirmish *skirmish = (FusionSkirmish*) entry;
 
-          if (written >= len)
-               break;
-     }
+     if (skirmish->lock_fid)
+          return sprintf( buf, "(%5d) 0x%08x (locked 0x%08x %d)\n",
+                          skirmish->entry.pid, skirmish->entry.id,
+                          skirmish->lock_fid, skirmish->lock_pid);
 
-     up (&dev->skirmish.lock);
+     return sprintf( buf, "(%5d) 0x%08x\n", skirmish->entry.pid, skirmish->entry.id);
+}
 
-     *start = buf + offset;
-     written -= offset;
-     if (written > len) {
-          *eof = 0;
-          return len;
-     }
+FUSION_ENTRY_CLASS( FusionSkirmish, skirmish, NULL, NULL, fusion_skirmish_print )
 
-     *eof = 1;
-     return(written<0) ? 0 : written;
-}
+/******************************************************************************/
 
 int
 fusion_skirmish_init (FusionDev *dev)
 {
      fusion_entries_init( &dev->skirmish, &skirmish_class, dev );
 
-     create_proc_read_entry( "skirmishs", 0, dev->proc_dir, skirmishs_read_proc, dev );
+     create_proc_read_entry( "skirmishs", 0, dev->proc_dir,
+                             fusion_entries_read_proc, &dev->skirmish );
 
      return 0;
 }
-- 
1.7.3.3

