From 8cea62164c3ec152b0fe4e26f4c2aa486fe59d00 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@shizo.zion.home>
Date: Sat, 26 May 2007 20:39:30 +0200
Subject: [PATCH] Implemented a callback mechanism to get notified when all recipients have processed the dispatched message.

Added FUSION_REACTOR_SET_DISPATCH_CALLBACK ioctl to bind a
FusionCall to a reactor.
---
 drivers/char/fusion/call.c      |    8 +-
 drivers/char/fusion/entries.c   |    2 +-
 drivers/char/fusion/fifo.h      |    8 +++
 drivers/char/fusion/fusiondev.c |   21 +++++--
 drivers/char/fusion/fusiondev.h |    4 +-
 drivers/char/fusion/fusionee.c  |  101 +++++++++++++++++++++++++------
 drivers/char/fusion/fusionee.h  |    5 +-
 drivers/char/fusion/reactor.c   |  122 ++++++++++++++++++++++++++++++++++++--
 drivers/char/fusion/reactor.h   |    6 ++
 drivers/char/fusion/shmpool.c   |    3 +-
 drivers/char/fusion/types.h     |    9 +++-
 include/linux/fusion.h          |  124 ++++++++++++++++++++++-----------------
 12 files changed, 317 insertions(+), 96 deletions(-)

diff --git a/drivers/char/fusion/call.c b/drivers/char/fusion/call.c
index 65805f5..882535a 100644
--- a/drivers/char/fusion/call.c
+++ b/drivers/char/fusion/call.c
@@ -53,8 +53,8 @@ typedef struct {
      void              *handler;
      void              *ctx;
 
-     FusionLink          *executions;      /* prepending! */
-     FusionLink          *last;            /* points to the last item of executions */
+     FusionLink        *executions;      /* prepending! */
+     FusionLink        *last;            /* points to the last item of executions */
 
      int                count;    /* number of calls ever made */
 } FusionCall;
@@ -180,7 +180,7 @@ fusion_call_new (FusionDev *dev, int fusion_id, FusionCallNew *call_new)
           return -EINTR;
      }
 
-     call->id        = dev->call.ids++;
+     call->id        = ++dev->call.ids;
      call->pid       = current->pid;
      call->fusion_id = fusion_id;
      call->handler   = call_new->handler;
@@ -225,7 +225,7 @@ fusion_call_execute (FusionDev *dev, Fusionee *fusionee, FusionCallExecute *exec
      message.call_ptr = execute->call_ptr;
 
      ret = fusionee_send_message (dev, fusionee, call->fusion_id, FMT_CALL,
-                                  call->id, sizeof(message), &message);
+                                  call->id, sizeof(message), &message, NULL, NULL, 0);
      if (ret) {
           remove_execution (call, execution);
           kfree (execution);
diff --git a/drivers/char/fusion/entries.c b/drivers/char/fusion/entries.c
index 0f7c277..d354a69 100644
--- a/drivers/char/fusion/entries.c
+++ b/drivers/char/fusion/entries.c
@@ -173,7 +173,7 @@ fusion_entry_create( FusionEntries *entries,
      }
 
      entry->entries = entries;
-     entry->id      = entries->ids++;
+     entry->id      = ++entries->ids;
      entry->pid     = current->pid;
 
      init_MUTEX( &entry->lock );
diff --git a/drivers/char/fusion/fifo.h b/drivers/char/fusion/fifo.h
index 6dc1817..23b6919 100644
--- a/drivers/char/fusion/fifo.h
+++ b/drivers/char/fusion/fifo.h
@@ -32,5 +32,13 @@ FusionLink *fusion_fifo_get   (FusionFifo *fifo);
 
 int         fusion_fifo_count (FusionFifo *fifo);
 
+
+static inline void
+fusion_fifo_reset( FusionFifo *fifo )
+{
+     fifo->count = 0;
+     fifo->first = fifo->last = NULL;
+}
+
 #endif /* __FUSION__LIST_H__ */
 
diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 4c92e7c..c125b40 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -551,7 +551,8 @@ messaging_ioctl (FusionDev *dev, Fusionee *fusionee,
                     return -EMSGSIZE;
 
                return fusionee_send_message (dev, fusionee, send.fusion_id, FMT_SEND,
-                                             send.msg_id, send.msg_size, send.msg_data);
+                                             send.msg_id, send.msg_size, send.msg_data,
+                                             NULL, NULL, 0);
      }
 
      return -ENOSYS;
@@ -825,10 +826,11 @@ static int
 reactor_ioctl (FusionDev *dev, Fusionee *fusionee,
                unsigned int cmd, unsigned long arg)
 {
-     int                   id;
-     int                   ret;
-     FusionReactorDispatch dispatch;
-     FusionID              fusion_id = fusionee_id( fusionee );
+     int                      id;
+     int                      ret;
+     FusionReactorDispatch    dispatch;
+     FusionReactorSetCallback callback;
+     FusionID                 fusion_id = fusionee_id( fusionee );
 
      switch (_IOC_NR(cmd)) {
           case _IOC_NR(FUSION_REACTOR_NEW):
@@ -875,6 +877,15 @@ reactor_ioctl (FusionDev *dev, Fusionee *fusionee,
                     return -EFAULT;
 
                return fusion_reactor_destroy (dev, id);
+
+          case _IOC_NR(FUSION_REACTOR_SET_DISPATCH_CALLBACK):
+               if (copy_from_user (&callback,
+                                   (FusionReactorSetCallback*) arg, sizeof(callback)))
+                    return -EFAULT;
+
+               return fusion_reactor_set_dispatch_callback (dev, callback.reactor_id,
+                                                            callback.call_id, callback.call_arg,
+                                                            callback.call_ptr);
      }
 
      return -ENOSYS;
diff --git a/drivers/char/fusion/fusiondev.h b/drivers/char/fusion/fusiondev.h
index 347a78f..6dbc340 100644
--- a/drivers/char/fusion/fusiondev.h
+++ b/drivers/char/fusion/fusiondev.h
@@ -23,7 +23,7 @@
 #define FUSION_ASSERT(exp)    if (!(exp)) BUG()
 #define FUSION_ASSUME(exp)    if (!(exp)) printk( KERN_ERR "fusiondev: assumption '" #exp "' failed!\n" )
 
-typedef struct {
+struct __Fusion_FusionDev {
      int                    refs;
      int                    index;
 
@@ -70,7 +70,7 @@ typedef struct {
      FusionEntries  ref;
      FusionEntries  shmpool;
      FusionEntries  skirmish;
-} FusionDev;
+};
 
 /*
  * Special version of interruptible_sleep_on() that unlocks the mutex
diff --git a/drivers/char/fusion/fusionee.c b/drivers/char/fusion/fusionee.c
index 3bba64e..3982e3f 100644
--- a/drivers/char/fusion/fusionee.c
+++ b/drivers/char/fusion/fusionee.c
@@ -49,6 +49,7 @@ struct __Fusion_Fusionee {
      int               pid;
 
      FusionFifo        messages;
+     FusionFifo        prev_msgs;
 
      int               rcv_total;  /* Total number of messages received. */
      int               snd_total;  /* Total number of messages sent. */
@@ -65,6 +66,10 @@ typedef struct {
      FusionID           id;
      int                size;
      void              *data;
+
+     MessageCallback    callback;
+     void              *callback_ctx;
+     int                callback_param;
 } Message;
 
 /******************************************************************************/
@@ -73,6 +78,8 @@ static int  lookup_fusionee (FusionDev *dev, FusionID id, Fusionee **ret_fusione
 static int  lock_fusionee   (FusionDev *dev, FusionID id, Fusionee **ret_fusionee);
 static void unlock_fusionee (Fusionee *fusionee);
 
+static void flush_messages  (FusionDev *dev, FusionFifo *fifo);
+
 /******************************************************************************/
 
 static int
@@ -249,13 +256,16 @@ fusionee_fork( FusionDev  *dev,
 }
 
 int
-fusionee_send_message (FusionDev         *dev,
+fusionee_send_message( FusionDev         *dev,
                        Fusionee          *sender,
                        FusionID           recipient,
                        FusionMessageType  msg_type,
                        int                msg_id,
                        int                msg_size,
-                       const void        *msg_data)
+                       const void        *msg_data,
+                       MessageCallback    callback,
+                       void              *callback_ctx,
+                       int                callback_param )
 {
      int       ret;
      Message  *message;
@@ -304,9 +314,12 @@ fusionee_send_message (FusionDev         *dev,
           return -EFAULT;
      }
 
-     message->type = msg_type;
-     message->id   = msg_id;
-     message->size = msg_size;
+     message->type           = msg_type;
+     message->id             = msg_id;
+     message->size           = msg_size;
+     message->callback       = callback;
+     message->callback_ctx   = callback_ctx;
+     message->callback_param = callback_param;
 
      fusion_fifo_put (&fusionee->messages, &message->link);
 
@@ -331,24 +344,34 @@ fusionee_get_messages (FusionDev *dev,
                        int        buf_size,
                        bool       block)
 {
-     int written = 0;
+     int        written = 0;
+     FusionFifo prev_msgs;
 
      if (down_interruptible (&fusionee->lock))
           return -EINTR;
 
+     prev_msgs = fusionee->prev_msgs;
+
+     fusion_fifo_reset( &fusionee->prev_msgs );
+
      while (!fusionee->messages.count) {
           if (!block) {
                unlock_fusionee (fusionee);
+               flush_messages( dev, &prev_msgs );
                return -EAGAIN;
           }
 
           fusion_sleep_on (&fusionee->wait, &fusionee->lock, 0);
 
-          if (signal_pending(current))
+          if (signal_pending(current)) {
+               flush_messages( dev, &prev_msgs );
                return -EINTR;
+          }
 
-          if (down_interruptible (&fusionee->lock))
+          if (down_interruptible (&fusionee->lock)) {
+               flush_messages( dev, &prev_msgs );
                return -EINTR;
+          }
      }
 
      while (fusionee->messages.count) {
@@ -359,6 +382,7 @@ fusionee_get_messages (FusionDev *dev,
           if (bytes > buf_size) {
                if (!written) {
                     unlock_fusionee (fusionee);
+                    flush_messages( dev, &prev_msgs );
                     return -EMSGSIZE;
                }
 
@@ -370,8 +394,10 @@ fusionee_get_messages (FusionDev *dev,
           header.msg_size = message->size;
 
           if (copy_to_user (buf, &header, sizeof(header)) ||
-              copy_to_user (buf + sizeof(header), message->data, message->size)) {
+              copy_to_user (buf + sizeof(header), message->data, message->size))
+          {
                unlock_fusionee (fusionee);
+               flush_messages( dev, &prev_msgs );
                return -EFAULT;
           }
 
@@ -381,11 +407,16 @@ fusionee_get_messages (FusionDev *dev,
 
           fusion_fifo_get (&fusionee->messages);
 
-          kfree (message);
+          if (message->callback)
+               fusion_fifo_put( &fusionee->prev_msgs, &message->link );
+          else
+               kfree( message );
      }
 
      unlock_fusionee (fusionee);
 
+     flush_messages( dev, &prev_msgs );
+
      return written;
 }
 
@@ -395,11 +426,24 @@ fusionee_poll (FusionDev   *dev,
                struct file *file,
                poll_table  *wait)
 {
-     int      ret;
-     FusionID id = fusionee->id;
+     int        ret;
+     FusionID   id = fusionee->id;
+     FusionFifo prev_msgs;
 
-     poll_wait (file, &fusionee->wait, wait);
+     ret = lock_fusionee (dev, id, &fusionee);
+     if (ret)
+          return POLLERR;
+
+     prev_msgs = fusionee->prev_msgs;
 
+     fusion_fifo_reset( &fusionee->prev_msgs );
+
+     unlock_fusionee (fusionee);
+
+     flush_messages( dev, &prev_msgs );
+
+
+     poll_wait (file, &fusionee->wait, wait);
 
      ret = lock_fusionee (dev, id, &fusionee);
      if (ret)
@@ -479,12 +523,18 @@ void
 fusionee_destroy (FusionDev *dev,
                   Fusionee  *fusionee)
 {
+     FusionFifo prev_msgs;
+     FusionFifo messages;
+
      /* Lock list. */
      down (&dev->fusionee.lock);
 
      /* Lock fusionee. */
      down (&fusionee->lock);
 
+     prev_msgs = fusionee->prev_msgs;
+     messages  = fusionee->messages;
+
      /* Remove from list. */
      fusion_list_remove (&dev->fusionee.list, &fusionee->link);
 
@@ -503,16 +553,12 @@ fusionee_destroy (FusionDev *dev,
      fusion_ref_clear_all_local (dev, fusionee->id);
      fusion_shmpool_detach_all (dev, fusionee->id);
 
-     /* Free all pending messages. */
-     while (fusionee->messages.count) {
-          Message *message = (Message*) fusion_fifo_get (&fusionee->messages);
-
-          kfree (message);
-     }
-
      /* Unlock fusionee. */
      up (&fusionee->lock);
 
+     /* Free all pending messages. */
+     flush_messages( dev, &prev_msgs );
+     flush_messages( dev, &messages );
 
      /* Free fusionee data. */
      kfree (fusionee);
@@ -582,3 +628,18 @@ unlock_fusionee (Fusionee *fusionee)
      up (&fusionee->lock);
 }
 
+/******************************************************************************/
+
+static void
+flush_messages( FusionDev *dev, FusionFifo *fifo )
+{
+     Message *message;
+
+     while ((message = (Message*) fusion_fifo_get( fifo )) != NULL) {
+          if (message->callback)
+               message->callback( dev, message->id, message->callback_ctx, message->callback_param );
+
+          kfree( message );
+     }
+}
+
diff --git a/drivers/char/fusion/fusionee.h b/drivers/char/fusion/fusionee.h
index 1dc5650..572e640 100644
--- a/drivers/char/fusion/fusionee.h
+++ b/drivers/char/fusion/fusionee.h
@@ -47,7 +47,10 @@ int fusionee_send_message  (FusionDev         *dev,
                             FusionMessageType  msg_type,
                             int                msg_id,
                             int                msg_size,
-                            const void        *msg_data);
+                            const void        *msg_data,
+                            MessageCallback    callback,
+                            void              *callback_ctx,
+                            int                callback_param);
 
 int fusionee_get_messages  (FusionDev         *dev,
                             Fusionee          *fusionee,
diff --git a/drivers/char/fusion/reactor.c b/drivers/char/fusion/reactor.c
index 4be7d81..bf0fc2f 100644
--- a/drivers/char/fusion/reactor.c
+++ b/drivers/char/fusion/reactor.c
@@ -23,6 +23,7 @@
 
 #include <linux/fusion.h>
 
+#include "call.h"
 #include "fusiondev.h"
 #include "fusionee.h"
 #include "list.h"
@@ -37,6 +38,14 @@ typedef struct {
 } ReactorNode;
 
 typedef struct {
+     int                count;     /* number of recipients */
+
+     int                call_id;   /* id of call to execute when count reaches zero */
+     int                call_arg;  /* optional parameter of user space */
+     void              *call_ptr;
+} ReactorDispatch;
+
+typedef struct {
      FusionEntry        entry;
 
      FusionLink        *nodes;
@@ -44,6 +53,10 @@ typedef struct {
      int                dispatch_count;
 
      bool               destroyed;
+
+     int                call_id;
+     int                call_arg;
+     void              *call_ptr;
 } FusionReactor;
 
 /******************************************************************************/
@@ -205,14 +218,59 @@ fusion_reactor_detach (FusionDev *dev, int id, FusionID fusion_id)
      return 0;
 }
 
+static void
+dispatch_callback( FusionDev *dev,
+                   int        id,
+                   void      *ctx,
+                   int        arg )
+{
+     FusionLink      *l;
+     FusionReactor   *reactor  = NULL;
+     ReactorDispatch *dispatch = ctx;
+
+     down (&dev->reactor.lock);
+
+     fusion_list_foreach (l, dev->reactor.list) {
+          reactor = (FusionReactor *) l;
+
+          if (reactor->entry.id == id) {
+               down (&reactor->entry.lock);
+
+               if (! --dispatch->count) {
+                    FusionCallExecute execute;
+
+                    execute.call_id  = dispatch->call_id;
+                    execute.call_arg = dispatch->call_arg;
+                    execute.call_ptr = dispatch->call_ptr;
+
+                    fusion_call_execute( dev, NULL, &execute );
+
+                    kfree( dispatch );
+               }
+
+               up (&reactor->entry.lock);
+
+               break;
+          }
+     }
+
+     if (!reactor) {
+          if (! --dispatch->count)
+               kfree( dispatch );
+     }
+
+     up( &dev->reactor.lock );
+}
+
 int
 fusion_reactor_dispatch (FusionDev *dev, int id, Fusionee *fusionee,
                          int msg_size, const void *msg_data)
 {
-     int            ret;
-     FusionLink    *l;
-     FusionReactor *reactor;
-     FusionID       fusion_id = fusionee ? fusionee_id( fusionee ) : 0;
+     int              ret;
+     FusionLink      *l;
+     FusionReactor   *reactor;
+     ReactorDispatch *dispatch  = NULL;
+     FusionID         fusion_id = fusionee ? fusionee_id( fusionee ) : 0;
 
      ret = fusion_reactor_lock( &dev->reactor, id, false, &reactor );
      if (ret)
@@ -223,6 +281,19 @@ fusion_reactor_dispatch (FusionDev *dev, int id, Fusionee *fusionee,
           return -EIDRM;
      }
 
+     if (reactor->call_id) {
+          dispatch = kmalloc (sizeof(ReactorDispatch), GFP_KERNEL);
+          if (!dispatch) {
+               fusion_reactor_unlock( reactor );
+               return -ENOMEM;
+          }
+
+          dispatch->count    = 0;
+          dispatch->call_id  = reactor->call_id;
+          dispatch->call_arg = reactor->call_arg;
+          dispatch->call_ptr = reactor->call_ptr;
+     }
+
      reactor->dispatch_count++;
 
      fusion_list_foreach (l, reactor->nodes) {
@@ -231,10 +302,49 @@ fusion_reactor_dispatch (FusionDev *dev, int id, Fusionee *fusionee,
           if (node->fusion_id == fusion_id)
                continue;
 
-          fusionee_send_message (dev, fusionee, node->fusion_id, FMT_REACTOR,
-                                 reactor->entry.id, msg_size, msg_data);
+          if (dispatch) {
+               dispatch->count++;
+
+               fusionee_send_message (dev, fusionee, node->fusion_id, FMT_REACTOR,
+                                      reactor->entry.id, msg_size, msg_data,
+                                      dispatch_callback, dispatch, reactor->entry.id);
+          }
+          else
+               fusionee_send_message (dev, fusionee, node->fusion_id, FMT_REACTOR,
+                                      reactor->entry.id, msg_size, msg_data, NULL, NULL, 0);
+     }
+
+     if (dispatch && !dispatch->count)
+         kfree( dispatch );
+
+     fusion_reactor_unlock( reactor );
+
+     return 0;
+}
+
+int
+fusion_reactor_set_dispatch_callback (FusionDev  *dev,
+                                      int         id,
+                                      int         call_id,
+                                      int         call_arg,
+                                      void       *call_ptr)
+{
+     int            ret;
+     FusionReactor *reactor;
+
+     ret = fusion_reactor_lock( &dev->reactor, id, false, &reactor );
+     if (ret)
+          return ret;
+
+     if (reactor->destroyed) {
+          fusion_reactor_unlock( reactor );
+          return -EIDRM;
      }
 
+     reactor->call_id  = call_id;
+     reactor->call_arg = call_arg;
+     reactor->call_ptr = call_ptr;
+
      fusion_reactor_unlock( reactor );
 
      return 0;
diff --git a/drivers/char/fusion/reactor.h b/drivers/char/fusion/reactor.h
index 0e4b82c..5c1345d 100644
--- a/drivers/char/fusion/reactor.h
+++ b/drivers/char/fusion/reactor.h
@@ -47,6 +47,12 @@ int fusion_reactor_dispatch (FusionDev  *dev,
 int fusion_reactor_destroy  (FusionDev  *dev,
                              int         id);
 
+int fusion_reactor_set_dispatch_callback (FusionDev  *dev,
+                                          int         id,
+                                          int         call_id,
+                                          int         call_arg,
+                                          void       *call_ptr);
+
 
 /* internal functions */
 
diff --git a/drivers/char/fusion/shmpool.c b/drivers/char/fusion/shmpool.c
index 69d127f..de7b54e 100644
--- a/drivers/char/fusion/shmpool.c
+++ b/drivers/char/fusion/shmpool.c
@@ -311,7 +311,8 @@ fusion_shmpool_dispatch( FusionDev             *dev,
                continue;
 
           fusionee_send_message (dev, fusionee, node->fusion_id, FMT_SHMPOOL,
-                                 shmpool->entry.id, sizeof(message), &message);
+                                 shmpool->entry.id, sizeof(message), &message,
+                                 NULL, NULL, 0);
      }
 
      fusion_shmpool_unlock( shmpool );
diff --git a/drivers/char/fusion/types.h b/drivers/char/fusion/types.h
index 70212b3..4ee9c90 100644
--- a/drivers/char/fusion/types.h
+++ b/drivers/char/fusion/types.h
@@ -24,6 +24,13 @@ typedef enum {
 } bool;
 #endif
 
-typedef struct __Fusion_Fusionee Fusionee;
+typedef struct __Fusion_FusionDev FusionDev;
+typedef struct __Fusion_Fusionee  Fusionee;
+
+
+typedef void (*MessageCallback)( FusionDev *dev,
+                                 int        msg_id,
+                                 void      *ctx,
+                                 int        param );
 
 #endif
diff --git a/include/linux/fusion.h b/include/linux/fusion.h
index d9139fc..a5a6de1 100644
--- a/include/linux/fusion.h
+++ b/include/linux/fusion.h
@@ -7,7 +7,7 @@
  * Fusion Kernel Device API Version
  */
 #define FUSION_API_MAJOR      3         /* Increased if backward compatibility is dropped. */
-#define FUSION_API_MINOR      2         /* Increased if new features are added. */
+#define FUSION_API_MINOR      3         /* Increased if new features are added. */
 
 /*
  * The Fusion ID is a unique identifier for one process consisting of threads.
@@ -77,6 +77,19 @@ typedef struct {
 } FusionReactorDispatch;
 
 /*
+ * Registering a dispatch callback
+ */
+typedef struct {
+     int                 reactor_id;
+
+     int                 call_id;       /* id of the call to execute when a message has been
+                                           processed by all recipients of the dispatch */
+     int                 call_arg;      /* optional call parameter, e.g. the id of a user
+                                           space resource associated with that reference */
+     void               *call_ptr;
+} FusionReactorSetCallback;
+
+/*
  * Calling (synchronous RPC)
  */
 typedef struct {
@@ -218,60 +231,61 @@ typedef struct {
 
 
 
-#define FUSION_ENTER               _IOR(FT_LOUNGE,    0x00, FusionEnter)
-#define FUSION_UNBLOCK             _IO (FT_LOUNGE,    0x01)
-#define FUSION_KILL                _IOW(FT_LOUNGE,    0x02, FusionKill)
-
-#define FUSION_ENTRY_SET_INFO      _IOW(FT_LOUNGE,    0x03, FusionEntryInfo)
-#define FUSION_ENTRY_GET_INFO      _IOW(FT_LOUNGE,    0x04, FusionEntryInfo)
-
-#define FUSION_FORK                _IOW(FT_LOUNGE,    0x05, FusionFork)
-
-#define FUSION_SEND_MESSAGE        _IOW(FT_MESSAGING, 0x00, FusionSendMessage)
-
-#define FUSION_CALL_NEW            _IOW(FT_CALL,      0x00, FusionCallNew)
-#define FUSION_CALL_EXECUTE        _IOW(FT_CALL,      0x01, FusionCallExecute)
-#define FUSION_CALL_RETURN         _IOW(FT_CALL,      0x02, FusionCallReturn)
-#define FUSION_CALL_DESTROY        _IOW(FT_CALL,      0x03, int)
-
-#define FUSION_REF_NEW             _IOW(FT_REF,       0x00, int)
-#define FUSION_REF_UP              _IOW(FT_REF,       0x01, int)
-#define FUSION_REF_UP_GLOBAL       _IOW(FT_REF,       0x02, int)
-#define FUSION_REF_DOWN            _IOW(FT_REF,       0x03, int)
-#define FUSION_REF_DOWN_GLOBAL     _IOW(FT_REF,       0x04, int)
-#define FUSION_REF_ZERO_LOCK       _IOW(FT_REF,       0x05, int)
-#define FUSION_REF_ZERO_TRYLOCK    _IOW(FT_REF,       0x06, int)
-#define FUSION_REF_UNLOCK          _IOW(FT_REF,       0x07, int)
-#define FUSION_REF_STAT            _IOW(FT_REF,       0x08, int)
-#define FUSION_REF_WATCH           _IOW(FT_REF,       0x09, FusionRefWatch)
-#define FUSION_REF_INHERIT         _IOW(FT_REF,       0x0A, FusionRefInherit)
-#define FUSION_REF_DESTROY         _IOW(FT_REF,       0x0B, int)
-
-#define FUSION_SKIRMISH_NEW        _IOW(FT_SKIRMISH,  0x00, int)
-#define FUSION_SKIRMISH_PREVAIL    _IOW(FT_SKIRMISH,  0x01, int)
-#define FUSION_SKIRMISH_SWOOP      _IOW(FT_SKIRMISH,  0x02, int)
-#define FUSION_SKIRMISH_DISMISS    _IOW(FT_SKIRMISH,  0x03, int)
-#define FUSION_SKIRMISH_DESTROY    _IOW(FT_SKIRMISH,  0x04, int)
-#define FUSION_SKIRMISH_LOCK_COUNT _IOW(FT_SKIRMISH,  0x05, int)
-
-#define FUSION_PROPERTY_NEW        _IOW(FT_PROPERTY,  0x00, int)
-#define FUSION_PROPERTY_LEASE      _IOW(FT_PROPERTY,  0x01, int)
-#define FUSION_PROPERTY_PURCHASE   _IOW(FT_PROPERTY,  0x02, int)
-#define FUSION_PROPERTY_CEDE       _IOW(FT_PROPERTY,  0x03, int)
-#define FUSION_PROPERTY_HOLDUP     _IOW(FT_PROPERTY,  0x04, int)
-#define FUSION_PROPERTY_DESTROY    _IOW(FT_PROPERTY,  0x05, int)
-
-#define FUSION_REACTOR_NEW         _IOW(FT_REACTOR,   0x00, int)
-#define FUSION_REACTOR_ATTACH      _IOW(FT_REACTOR,   0x01, int)
-#define FUSION_REACTOR_DETACH      _IOW(FT_REACTOR,   0x02, int)
-#define FUSION_REACTOR_DISPATCH    _IOW(FT_REACTOR,   0x03, FusionReactorDispatch)
-#define FUSION_REACTOR_DESTROY     _IOW(FT_REACTOR,   0x04, int)
-
-#define FUSION_SHMPOOL_NEW         _IOW(FT_SHMPOOL,   0x00, FusionSHMPoolNew)
-#define FUSION_SHMPOOL_ATTACH      _IOW(FT_SHMPOOL,   0x01, FusionSHMPoolAttach)
-#define FUSION_SHMPOOL_DETACH      _IOW(FT_SHMPOOL,   0x02, int)
-#define FUSION_SHMPOOL_DISPATCH    _IOW(FT_SHMPOOL,   0x03, FusionSHMPoolDispatch)
-#define FUSION_SHMPOOL_DESTROY     _IOW(FT_SHMPOOL,   0x04, int)
+#define FUSION_ENTER                         _IOR(FT_LOUNGE,    0x00, FusionEnter)
+#define FUSION_UNBLOCK                       _IO (FT_LOUNGE,    0x01)
+#define FUSION_KILL                          _IOW(FT_LOUNGE,    0x02, FusionKill)
+
+#define FUSION_ENTRY_SET_INFO                _IOW(FT_LOUNGE,    0x03, FusionEntryInfo)
+#define FUSION_ENTRY_GET_INFO                _IOW(FT_LOUNGE,    0x04, FusionEntryInfo)
+
+#define FUSION_FORK                          _IOW(FT_LOUNGE,    0x05, FusionFork)
+
+#define FUSION_SEND_MESSAGE                  _IOW(FT_MESSAGING, 0x00, FusionSendMessage)
+
+#define FUSION_CALL_NEW                      _IOW(FT_CALL,      0x00, FusionCallNew)
+#define FUSION_CALL_EXECUTE                  _IOW(FT_CALL,      0x01, FusionCallExecute)
+#define FUSION_CALL_RETURN                   _IOW(FT_CALL,      0x02, FusionCallReturn)
+#define FUSION_CALL_DESTROY                  _IOW(FT_CALL,      0x03, int)
+
+#define FUSION_REF_NEW                       _IOW(FT_REF,       0x00, int)
+#define FUSION_REF_UP                        _IOW(FT_REF,       0x01, int)
+#define FUSION_REF_UP_GLOBAL                 _IOW(FT_REF,       0x02, int)
+#define FUSION_REF_DOWN                      _IOW(FT_REF,       0x03, int)
+#define FUSION_REF_DOWN_GLOBAL               _IOW(FT_REF,       0x04, int)
+#define FUSION_REF_ZERO_LOCK                 _IOW(FT_REF,       0x05, int)
+#define FUSION_REF_ZERO_TRYLOCK              _IOW(FT_REF,       0x06, int)
+#define FUSION_REF_UNLOCK                    _IOW(FT_REF,       0x07, int)
+#define FUSION_REF_STAT                      _IOW(FT_REF,       0x08, int)
+#define FUSION_REF_WATCH                     _IOW(FT_REF,       0x09, FusionRefWatch)
+#define FUSION_REF_INHERIT                   _IOW(FT_REF,       0x0A, FusionRefInherit)
+#define FUSION_REF_DESTROY                   _IOW(FT_REF,       0x0B, int)
+
+#define FUSION_SKIRMISH_NEW                  _IOW(FT_SKIRMISH,  0x00, int)
+#define FUSION_SKIRMISH_PREVAIL              _IOW(FT_SKIRMISH,  0x01, int)
+#define FUSION_SKIRMISH_SWOOP                _IOW(FT_SKIRMISH,  0x02, int)
+#define FUSION_SKIRMISH_DISMISS              _IOW(FT_SKIRMISH,  0x03, int)
+#define FUSION_SKIRMISH_DESTROY              _IOW(FT_SKIRMISH,  0x04, int)
+#define FUSION_SKIRMISH_LOCK_COUNT           _IOW(FT_SKIRMISH,  0x05, int)
+
+#define FUSION_PROPERTY_NEW                  _IOW(FT_PROPERTY,  0x00, int)
+#define FUSION_PROPERTY_LEASE                _IOW(FT_PROPERTY,  0x01, int)
+#define FUSION_PROPERTY_PURCHASE             _IOW(FT_PROPERTY,  0x02, int)
+#define FUSION_PROPERTY_CEDE                 _IOW(FT_PROPERTY,  0x03, int)
+#define FUSION_PROPERTY_HOLDUP               _IOW(FT_PROPERTY,  0x04, int)
+#define FUSION_PROPERTY_DESTROY              _IOW(FT_PROPERTY,  0x05, int)
+
+#define FUSION_REACTOR_NEW                   _IOW(FT_REACTOR,   0x00, int)
+#define FUSION_REACTOR_ATTACH                _IOW(FT_REACTOR,   0x01, int)
+#define FUSION_REACTOR_DETACH                _IOW(FT_REACTOR,   0x02, int)
+#define FUSION_REACTOR_DISPATCH              _IOW(FT_REACTOR,   0x03, FusionReactorDispatch)
+#define FUSION_REACTOR_DESTROY               _IOW(FT_REACTOR,   0x04, int)
+#define FUSION_REACTOR_SET_DISPATCH_CALLBACK _IOW(FT_REACTOR,   0x05, FusionReactorSetCallback)
+
+#define FUSION_SHMPOOL_NEW                   _IOW(FT_SHMPOOL,   0x00, FusionSHMPoolNew)
+#define FUSION_SHMPOOL_ATTACH                _IOW(FT_SHMPOOL,   0x01, FusionSHMPoolAttach)
+#define FUSION_SHMPOOL_DETACH                _IOW(FT_SHMPOOL,   0x02, int)
+#define FUSION_SHMPOOL_DISPATCH              _IOW(FT_SHMPOOL,   0x03, FusionSHMPoolDispatch)
+#define FUSION_SHMPOOL_DESTROY               _IOW(FT_SHMPOOL,   0x04, int)
 
 #endif
 
-- 
1.7.3.3

