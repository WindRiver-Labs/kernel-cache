From 252015c51b1e6ac399869d0994b5bd1017127d53 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Sun, 14 Nov 2004 06:10:38 +0000
Subject: [PATCH] API version is 1.1 now. Older binaries compiled with the 1.0 API should work with a new 1.1 module.

The generic fusion_entries_read_proc() prints the generic entry information,
while the specific implementation can add further information like lock status.

Take a timestamp whenever an entry is locked (each access) and show the
difference between that and now in the proc view.
his doesn't use the still too expensive do_gettimeofday() which produces
10% overhead here. Instead, just copy the global "struct timeval xtime".

Added FUSION_ENTRY_SET_INFO and FUSION_ENTRY_GET_INFO to store/retrieve
meta information about an entry. Right now there's just a name to set.

This is the full output while running XDirectFB (and some clients)
along with 2x DFBTerm, df_cpuload, df_netload and df_dioload:

:  dok@skunk[~] cat /proc/fusion/0/skirmishs
:    3  ms  ( 5544) 0x00000014  Layer Context
:   13  ms  ( 5544) 0x0000000b  Surface Manager
:   13  ms  ( 5544) 0x00000002  Fusion Reactor Globals
:   24  ms  ( 5544) 0x00000015  Layer Region
:  321.2 s  ( 5544) 0x00000009  Clipboard Core
:  326.3 s  ( 5544) 0x00000000  Shared Memory Pool
:  681.0 s  ( 5544) 0x00000007  Surface Pool
:  681.5 s  ( 5544) 0x00000013  UniQuE Window Pool
:  681.5 s  ( 5544) 0x00000008  Window Pool
:    0.2 h  ( 5544) 0x0000000e  Display Layer 0
:    0.2 h  ( 5544) 0x00000003  Arena 'DirectFB/Core'
:    0.2 h  ( 5544) 0x00000001  Fusion Arenas
:    0.3 h  ( 5544) 0x00000012  UniQuE Context Pool
:    0.3 h  ( 5544) 0x00000005  Layer Region Pool
:    0.3 h  ( 5544) 0x00000004  Layer Context Pool
:    0.3 h  ( 5544) 0x00000011  Display Layer 3
:    0.3 h  ( 5544) 0x00000010  Display Layer 2
:    0.3 h  ( 5544) 0x0000000f  Display Layer 1
:    0.3 h  ( 5544) 0x0000000d  Screen 1
:    0.3 h  ( 5544) 0x0000000c  Screen 0
:    0.3 h  ( 5544) 0x0000000a  Colorhash Core
:    0.3 h  ( 5544) 0x00000006  Palette Pool

Added ":" to avoid white space stripping at the front of each line by logmail.
---
 drivers/char/fusion/entries.c   |   77 +++++++++++++++++++++++++++++++++++++++
 drivers/char/fusion/entries.h   |   13 +++++++
 drivers/char/fusion/fusiondev.c |   46 ++++++++++++++++++++++-
 drivers/char/fusion/property.c  |   61 ++++++++-----------------------
 drivers/char/fusion/skirmish.c  |    7 ++--
 include/linux/fusion.h          |   40 +++++++++++++++------
 6 files changed, 181 insertions(+), 63 deletions(-)

diff --git a/drivers/char/fusion/entries.c b/drivers/char/fusion/entries.c
index 3e2d9b6..db822b0 100644
--- a/drivers/char/fusion/entries.c
+++ b/drivers/char/fusion/entries.c
@@ -18,6 +18,7 @@
 #include <linux/slab.h>
 #include <linux/smp_lock.h>
 #include <linux/sched.h>
+#include <linux/time.h>
 
 #include <linux/fusion.h>
 
@@ -74,6 +75,7 @@ fusion_entries_read_proc(char *buf, char **start, off_t offset,
      FusionEntryClass *class;
      FusionEntries    *entries = private;
      int               written = 0;
+     struct timeval    now;
 
      FUSION_ASSERT( entries != NULL );
      FUSION_ASSERT( entries->class != NULL );
@@ -86,7 +88,36 @@ fusion_entries_read_proc(char *buf, char **start, off_t offset,
      if (down_interruptible (&entries->lock))
           return -EINTR;
 
+     do_gettimeofday( &now );
+
      fusion_list_foreach (entry, entries->list) {
+          if (entry->last_lock.tv_sec) {
+               int diff = ((now.tv_sec  - entry->last_lock.tv_sec) * 1000 +
+                           (now.tv_usec - entry->last_lock.tv_usec) / 1000);
+
+               if (diff < 1000) {
+                    written += sprintf( buf + written, "%3d  ms  ", diff );
+               }
+               else if (diff < 1000000) {
+                    written += sprintf( buf + written, "%3d.%d s  ",
+                                        diff / 1000, (diff % 1000) / 100 );
+               }
+               else {
+                    diff = ( now.tv_sec  - entry->last_lock.tv_sec +
+                            (now.tv_usec - entry->last_lock.tv_usec) / 1000000);
+
+                    written += sprintf( buf + written, "%3d.%d h  ",
+                                        diff / 3600, (diff % 3600) / 360 );
+               }
+          }
+          else
+               written += sprintf( buf + written, "  -.-    " );
+
+
+          written += sprintf( buf + written, "(%5d) 0x%08x  ", entry->pid, entry->id );
+
+          written += sprintf( buf + written, "%-24s  ", entry->name[0] ? entry->name : "" );
+
           written += class->Print( entry, entries->ctx, buf + written );
 
           if (written < offset) {
@@ -217,6 +248,48 @@ fusion_entry_destroy( FusionEntries  *entries,
 }
 
 int
+fusion_entry_set_info( FusionEntries         *entries,
+                       const FusionEntryInfo *info )
+{
+     int          ret;
+     FusionEntry *entry;
+
+     FUSION_ASSERT( entries != NULL );
+     FUSION_ASSERT( info != NULL );
+
+     ret = fusion_entry_lock( entries, info->id, &entry );
+     if (ret)
+          return ret;
+
+     snprintf( entry->name, FUSION_ENTRY_INFO_NAME_LENGTH, info->name );
+
+     fusion_entry_unlock( entry );
+
+     return 0;
+}
+
+int
+fusion_entry_get_info( FusionEntries   *entries,
+                       FusionEntryInfo *info )
+{
+     int          ret;
+     FusionEntry *entry;
+
+     FUSION_ASSERT( entries != NULL );
+     FUSION_ASSERT( info != NULL );
+
+     ret = fusion_entry_lock( entries, info->id, &entry );
+     if (ret)
+          return ret;
+
+     snprintf( info->name, FUSION_ENTRY_INFO_NAME_LENGTH, entry->name );
+
+     fusion_entry_unlock( entry );
+
+     return 0;
+}
+
+int
 fusion_entry_lock( FusionEntries  *entries,
                    int             id,
                    FusionEntry   **ret_entry )
@@ -256,6 +329,10 @@ fusion_entry_lock( FusionEntries  *entries,
      /* Mark as locked. */
      entry->lock_pid = current->pid;
 
+     /* Keep timestamp, but use the slightly
+        inexact version to avoid performance impacts. */
+     entry->last_lock = xtime;
+
      /* Unlock entries. */
      up( &entries->lock );
 
diff --git a/drivers/char/fusion/entries.h b/drivers/char/fusion/entries.h
index 72dedf9..c99f8b3 100644
--- a/drivers/char/fusion/entries.h
+++ b/drivers/char/fusion/entries.h
@@ -53,6 +53,10 @@ struct __FD_FusionEntry {
 
      struct semaphore   lock;
      wait_queue_head_t  wait;
+
+     struct timeval     last_lock;
+
+     char               name[FUSION_ENTRY_INFO_NAME_LENGTH];
 };
 
 
@@ -80,6 +84,15 @@ int  fusion_entry_destroy ( FusionEntries    *entries,
                             int               id );
 
 
+/* Information */
+
+int  fusion_entry_set_info( FusionEntries          *entries,
+                            const FusionEntryInfo  *info );
+
+int  fusion_entry_get_info( FusionEntries          *entries,
+                            FusionEntryInfo        *info );
+
+
 /* Lock & Unlock */
 
 int  fusion_entry_lock    ( FusionEntries    *entries,
diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 18d08fe..bd6fc51 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -375,8 +375,10 @@ static int
 lounge_ioctl (FusionDev *dev, int fusion_id,
               unsigned int cmd, unsigned long arg)
 {
-     FusionEnter enter;
-     FusionKill  kill;
+     int             ret;
+     FusionEnter     enter;
+     FusionKill      kill;
+     FusionEntryInfo info;
 
      switch (_IOC_NR(cmd)) {
           case _IOC_NR(FUSION_ENTER):
@@ -399,6 +401,46 @@ lounge_ioctl (FusionDev *dev, int fusion_id,
 
                return fusionee_kill (dev, fusion_id,
                                      kill.fusion_id, kill.signal, kill.timeout_ms);
+
+          case _IOC_NR(FUSION_ENTRY_SET_INFO):
+               if (copy_from_user (&info, (FusionEntryInfo*) arg, sizeof(info)))
+                    return -EFAULT;
+
+               switch (info.type) {
+                    case FT_SKIRMISH:
+                         return fusion_entry_set_info (&dev->skirmish, &info);
+
+                    case FT_PROPERTY:
+                         return fusion_entry_set_info (&dev->properties, &info);
+
+                    default:
+                         return -ENOSYS;
+               }
+
+          case _IOC_NR(FUSION_ENTRY_GET_INFO):
+               if (copy_from_user (&info, (FusionEntryInfo*) arg, sizeof(info)))
+                    return -EFAULT;
+
+               switch (info.type) {
+                    case FT_SKIRMISH:
+                         ret = fusion_entry_get_info (&dev->skirmish, &info);
+                         break;
+
+                    case FT_PROPERTY:
+                         ret = fusion_entry_get_info (&dev->properties, &info);
+                         break;
+
+                    default:
+                         return -ENOSYS;
+               }
+
+               if (ret)
+                    return ret;
+
+               if (copy_to_user ((FusionEntryInfo*) arg, &info, sizeof(info)))
+                    return -EFAULT;
+
+               return 0;
      }
 
      return -ENOSYS;
diff --git a/drivers/char/fusion/property.c b/drivers/char/fusion/property.c
index fec3a57..a39902e 100644
--- a/drivers/char/fusion/property.c
+++ b/drivers/char/fusion/property.c
@@ -47,64 +47,33 @@ typedef struct {
      int                 count;    /* lock counter */
 } FusionProperty;
 
-FUSION_ENTRY_CLASS( FusionProperty, property, NULL, NULL, NULL )
-
-/******************************************************************************/
-
 static int
-properties_read_proc( char *buf, char **start, off_t offset,
-                      int len, int *eof, void *private )
+fusion_property_print( FusionEntry *entry,
+                       void        *ctx,
+                       char        *buf )
 {
-     FusionLink *l;
-     FusionDev  *dev     = private;
-     int         written = 0;
-
-     if (down_interruptible( &dev->properties.lock ))
-          return -EINTR;
-
-     fusion_list_foreach (l, dev->properties.list) {
-          FusionProperty *property = (FusionProperty*) l;
-
-          if (property->state != FUSION_PROPERTY_AVAILABLE) {
-               written += sprintf(buf+written, "(%5d) 0x%08x %s (0x%08x %d)\n",
-                                  property->entry.pid, property->entry.id,
-                                  property->state == FUSION_PROPERTY_LEASED ?
-                                  "leased" : "purchased", property->fusion_id,
-                                  property->lock_pid);
-          }
-          else {
-               written += sprintf(buf+written, "(%5d) 0x%08x\n",
-                                  property->entry.pid, property->entry.id);
-          }
-
-          if (written < offset) {
-               offset -= written;
-               written = 0;
-          }
+     FusionProperty *property = (FusionProperty*) entry;
 
-          if (written >= len)
-               break;
+     if (property->state != FUSION_PROPERTY_AVAILABLE) {
+          return sprintf( buf, "%s by 0x%08x (%d) %dx\n",
+                          property->state == FUSION_PROPERTY_LEASED ? "leased" : "purchased",
+                          property->fusion_id, property->lock_pid, property->count );
      }
 
-     up( &dev->properties.lock );
+     return sprintf( buf, "\n" );
+}
 
-     *start = buf + offset;
-     written -= offset;
-     if (written > len) {
-          *eof = 0;
-          return len;
-     }
+FUSION_ENTRY_CLASS( FusionProperty, property, NULL, NULL, fusion_property_print )
 
-     *eof = 1;
-     return(written<0) ? 0 : written;
-}
+/******************************************************************************/
 
 int
 fusion_property_init( FusionDev *dev )
 {
      fusion_entries_init( &dev->properties, &property_class, dev );
 
-     create_proc_read_entry( "properties", 0, dev->proc_dir, properties_read_proc, dev );
+     create_proc_read_entry( "properties", 0, dev->proc_dir,
+                             fusion_entries_read_proc, &dev->properties );
 
      return 0;
 }
diff --git a/drivers/char/fusion/skirmish.c b/drivers/char/fusion/skirmish.c
index 3122236..a22fa0c 100644
--- a/drivers/char/fusion/skirmish.c
+++ b/drivers/char/fusion/skirmish.c
@@ -43,11 +43,10 @@ fusion_skirmish_print( FusionEntry *entry,
      FusionSkirmish *skirmish = (FusionSkirmish*) entry;
 
      if (skirmish->lock_fid)
-          return sprintf( buf, "(%5d) 0x%08x (locked 0x%08x %d)\n",
-                          skirmish->entry.pid, skirmish->entry.id,
-                          skirmish->lock_fid, skirmish->lock_pid);
+          return sprintf( buf, "locked by 0x%08x (%d) %dx\n",
+                          skirmish->lock_fid, skirmish->lock_pid, skirmish->lock_count);
 
-     return sprintf( buf, "(%5d) 0x%08x\n", skirmish->entry.pid, skirmish->entry.id);
+     return sprintf( buf, "\n" );
 }
 
 FUSION_ENTRY_CLASS( FusionSkirmish, skirmish, NULL, NULL, fusion_skirmish_print )
diff --git a/include/linux/fusion.h b/include/linux/fusion.h
index c60da3d..ee1108f 100644
--- a/include/linux/fusion.h
+++ b/include/linux/fusion.h
@@ -116,17 +116,6 @@ typedef struct {
                           max. time to wait until the fusionee(s) terminated */
 } FusionKill;
 
-#define FUSION_API_MAJOR   1  /* Increased if backward compatibility is dropped. */
-#define FUSION_API_MINOR   0  /* Increased if new features are added. */
-
-typedef struct {
-     struct {
-          int major;
-          int minor;
-     } api;
-
-     int fusion_id;
-} FusionEnter;
 
 typedef enum {
      FT_LOUNGE,
@@ -139,9 +128,38 @@ typedef enum {
 } FusionType;
 
 
+/*
+ * Set attributes like 'name' for an entry of the specified type.
+ */
+#define FUSION_ENTRY_INFO_NAME_LENGTH   24
+
+typedef struct {
+     FusionType type;
+     int        id;
+
+     char       name[FUSION_ENTRY_INFO_NAME_LENGTH];
+} FusionEntryInfo;
+
+
+typedef struct {
+     struct {
+          int major;
+          int minor;
+     } api;
+
+     int fusion_id;
+} FusionEnter;
+
+#define FUSION_API_MAJOR   1  /* Increased if backward compatibility is dropped. */
+#define FUSION_API_MINOR   1  /* Increased if new features are added. */
+
+
 #define FUSION_ENTER               _IOR(FT_LOUNGE,    0x00, FusionEnter)
 #define FUSION_KILL                _IOW(FT_LOUNGE,    0x01, FusionKill)
 
+#define FUSION_ENTRY_SET_INFO      _IOW(FT_LOUNGE,    0x02, FusionEntryInfo)
+#define FUSION_ENTRY_GET_INFO      _IOW(FT_LOUNGE,    0x03, FusionEntryInfo)
+
 #define FUSION_SEND_MESSAGE        _IOW(FT_MESSAGING, 0x00, FusionSendMessage)
 
 #define FUSION_CALL_NEW            _IOW(FT_CALL,      0x00, FusionCallNew)
-- 
1.7.3.3

