From bc2abeb0ad146c9c240497f4cecdcfa1f68d99fe Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Sat, 20 Jan 2007 04:03:01 +0000
Subject: [PATCH] Implemented waiting for master when entering a world as a slave by setting the O_APPEND flag during open().

Some restructuring was necessary to delay allocation of FusionIDs
until the world is really entered.
---
 drivers/char/fusion/call.c      |   20 ++--
 drivers/char/fusion/call.h      |    3 +-
 drivers/char/fusion/fusiondev.c |  143 ++++++++++++----------------
 drivers/char/fusion/fusionee.c  |  203 ++++++++++++++++++---------------------
 drivers/char/fusion/fusionee.h  |   22 +++--
 drivers/char/fusion/property.c  |    5 +-
 drivers/char/fusion/property.h  |    2 +-
 drivers/char/fusion/reactor.c   |    5 +-
 drivers/char/fusion/reactor.h   |    2 +-
 drivers/char/fusion/shmpool.c   |    5 +-
 drivers/char/fusion/shmpool.h   |    2 +-
 drivers/char/fusion/types.h     |    2 +
 12 files changed, 192 insertions(+), 222 deletions(-)

diff --git a/drivers/char/fusion/call.c b/drivers/char/fusion/call.c
index 2adbbb6..65805f5 100644
--- a/drivers/char/fusion/call.c
+++ b/drivers/char/fusion/call.c
@@ -31,7 +31,7 @@
 typedef struct {
      FusionLink        link;
 
-     int               caller;
+     Fusionee         *caller;
 
      int               ret_val;
 
@@ -66,7 +66,7 @@ static int  lock_call   (FusionDev *dev, int id, FusionCall **ret_call);
 static void unlock_call (FusionCall *call);
 
 static FusionCallExecution *add_execution       (FusionCall          *call,
-                                                 int                  fusion_id,
+                                                 Fusionee            *caller,
                                                  FusionCallExecute   *execute);
 static void                 remove_execution    (FusionCall          *call,
                                                  FusionCallExecution *execution);
@@ -100,7 +100,7 @@ fusion_call_read_proc (char *buf, char **start, off_t offset,
           fusion_list_foreach (e, call->executions) {
                FusionCallExecution *exec = (FusionCallExecution *) e;
 
-               written += sprintf(buf+written, "  [0x%08x]", exec->caller);
+               written += sprintf(buf+written, "  [0x%08lx]", exec->caller ? fusionee_id( exec->caller ) : 0);
           }
 
           written += sprintf(buf+written, "\n");
@@ -198,7 +198,7 @@ fusion_call_new (FusionDev *dev, int fusion_id, FusionCallNew *call_new)
 }
 
 int
-fusion_call_execute (FusionDev *dev, int fusion_id, FusionCallExecute *execute)
+fusion_call_execute (FusionDev *dev, Fusionee *fusionee, FusionCallExecute *execute)
 {
      int                  ret;
      FusionCall          *call;
@@ -209,7 +209,7 @@ fusion_call_execute (FusionDev *dev, int fusion_id, FusionCallExecute *execute)
      if (ret)
           return ret;
 
-     execution = add_execution (call, fusion_id, execute);
+     execution = add_execution (call, fusionee, execute);
      if (!execution) {
           unlock_call (call);
           return -ENOMEM;
@@ -219,12 +219,12 @@ fusion_call_execute (FusionDev *dev, int fusion_id, FusionCallExecute *execute)
      message.handler  = call->handler;
      message.ctx      = call->ctx;
 
-     message.caller   = fusion_id;
+     message.caller   = fusionee ? fusionee_id( fusionee ) : 0;
 
      message.call_arg = execute->call_arg;
      message.call_ptr = execute->call_ptr;
 
-     ret = fusionee_send_message (dev, fusion_id, call->fusion_id, FMT_CALL,
+     ret = fusionee_send_message (dev, fusionee, call->fusion_id, FMT_CALL,
                                   call->id, sizeof(message), &message);
      if (ret) {
           remove_execution (call, execution);
@@ -235,7 +235,7 @@ fusion_call_execute (FusionDev *dev, int fusion_id, FusionCallExecute *execute)
 
      call->count++;
 
-     if (fusion_id && !(execute->flags & FCEF_ONEWAY)) {
+     if (fusionee && !(execute->flags & FCEF_ONEWAY)) {
           /* TODO: implement timeout */
           fusion_sleep_on (&execution->wait, &call->lock, 0);
 
@@ -427,7 +427,7 @@ unlock_call (FusionCall *call)
 
 static FusionCallExecution *
 add_execution (FusionCall        *call,
-               int                fusion_id,
+               Fusionee          *caller,
                FusionCallExecute *execute)
 {
      FusionCallExecution *execution;
@@ -440,7 +440,7 @@ add_execution (FusionCall        *call,
      /* Initialize execution. */
      memset (execution, 0, sizeof(FusionCallExecution));
 
-     execution->caller = fusion_id;
+     execution->caller = caller;
 
      init_waitqueue_head (&execution->wait);
 
diff --git a/drivers/char/fusion/call.h b/drivers/char/fusion/call.h
index 1a5190e..d908c5a 100644
--- a/drivers/char/fusion/call.h
+++ b/drivers/char/fusion/call.h
@@ -32,8 +32,7 @@ int fusion_call_new     (FusionDev         *dev,
                          FusionCallNew     *call);
 
 int fusion_call_execute (FusionDev         *dev,
-                         int                fusion_id, /* zero if call is
-                                                          from Fusion */
+                         Fusionee          *fusionee, /* NULL if call is from kernel */
                          FusionCallExecute *execute);
 
 int fusion_call_return  (FusionDev         *dev,
diff --git a/drivers/char/fusion/fusiondev.c b/drivers/char/fusion/fusiondev.c
index 75e99ea..15a574b 100644
--- a/drivers/char/fusion/fusiondev.c
+++ b/drivers/char/fusion/fusiondev.c
@@ -265,9 +265,9 @@ fusiondev_deinit (FusionDev *dev)
 static int
 fusion_open (struct inode *inode, struct file *file)
 {
-     int      ret;
-     FusionID fusion_id;
-     int      minor = iminor(inode);
+     int       ret;
+     Fusionee *fusionee;
+     int       minor = iminor(inode);
 
      DEBUG( "fusion_open( %p, %d )\n", file, atomic_read(&file->f_count) );
 
@@ -307,7 +307,7 @@ fusion_open (struct inode *inode, struct file *file)
           return -EBUSY;
      }
 
-     ret = fusionee_new (fusion_devs[minor], &fusion_id);
+     ret = fusionee_new (fusion_devs[minor], !!(file->f_flags & O_APPEND), &fusionee);
      if (ret) {
           if (!fusion_devs[minor]->refs) {
                fusiondev_deinit (fusion_devs[minor]);
@@ -329,7 +329,7 @@ fusion_open (struct inode *inode, struct file *file)
      up (&devs_lock);
 
 
-     file->private_data = (void*) fusion_id;
+     file->private_data = fusionee;
 
      return 0;
 }
@@ -337,14 +337,14 @@ fusion_open (struct inode *inode, struct file *file)
 static int
 fusion_release (struct inode *inode, struct file *file)
 {
-     int minor        = iminor(inode);
-     size_t fusion_id = (size_t) file->private_data;
+     int       minor    = iminor(inode);
+     Fusionee *fusionee = file->private_data;
 
      DEBUG( "fusion_release( %p, %d )\n", file, atomic_read(&file->f_count) );
 
      /* FIXME: is this a good idea? */
-     while (fusionee_destroy (fusion_devs[minor], fusion_id))
-          schedule ();
+     /*while (*/fusionee_destroy (fusion_devs[minor], fusionee);//)
+          //schedule ();
 
      down (&devs_lock);
 
@@ -370,12 +370,12 @@ fusion_flush (struct file *file, fl_owner_t id)
 fusion_flush (struct file *file)
 #endif
 {
-     size_t     fusion_id = (size_t) file->private_data;
-     FusionDev *dev       = fusion_devs[iminor(file->f_dentry->d_inode)];
+     Fusionee  *fusionee = file->private_data;
+     FusionDev *dev      = fusion_devs[iminor(file->f_dentry->d_inode)];
 
-     (void) fusion_id;
+     (void) fusionee;
 
-     DEBUG( "fusion_flush( %p, %d, 0x%08x %d )\n", file, atomic_read(&file->f_count), fusion_id, current->pid );
+     DEBUG( "fusion_flush( %p, %d, 0x%08x %d )\n", file, atomic_read(&file->f_count), fusionee_id(fusionee), current->pid );
 
      if (current->flags & PF_EXITING)
           fusion_skirmish_dismiss_all_from_pid (dev, current->pid);
@@ -386,57 +386,28 @@ fusion_flush (struct file *file)
 static ssize_t
 fusion_read (struct file *file, char *buf, size_t count, loff_t *ppos)
 {
-     size_t     fusion_id = (size_t) file->private_data;
-     FusionDev *dev       = fusion_devs[iminor(file->f_dentry->d_inode)];
+     Fusionee  *fusionee = file->private_data;
+     FusionDev *dev      = fusion_devs[iminor(file->f_dentry->d_inode)];
 
      DEBUG( "fusion_read( %p, %d, %d )\n", file, atomic_read(&file->f_count), count );
 
-     return fusionee_get_messages (dev, fusion_id, buf, count,
+     return fusionee_get_messages (dev, fusionee, buf, count,
                                    !(file->f_flags & O_NONBLOCK));
 }
 
 static unsigned int
 fusion_poll (struct file *file, poll_table * wait)
 {
-     size_t     fusion_id = (size_t) file->private_data;
-     FusionDev *dev       = fusion_devs[iminor(file->f_dentry->d_inode)];
+     Fusionee  *fusionee = file->private_data;
+     FusionDev *dev      = fusion_devs[iminor(file->f_dentry->d_inode)];
 
      DEBUG( "fusion_poll( %p, %d )\n", file, atomic_read(&file->f_count) );
 
-     return fusionee_poll (dev, fusion_id, file, wait);
+     return fusionee_poll (dev, fusionee, file, wait);
 }
-/*
-static int
-fusion_fork (struct file *file, FusionDev *dev,
-             FusionID fusion_id, FusionID *ret_id)
-{
-     int      ret;
-     FusionID new_id;
-
-     DEBUG( "fusion_fork( %p, %d )\n", file, atomic_read(&file->f_count) );
-
-     if (down_interruptible( &devs_lock ))
-          return -EINTR;
-
-     ret = fusionee_new( dev, &new_id );
-     if (ret) {
-          up( &devs_lock );
-          return ret;
-     }
-
-     dev->refs++;
-
-     up( &devs_lock );
 
-     file->private_data = (void*) new_id;
-
-     *ret_id = new_id;
-
-     return 0;
-}
-*/
 static int
-lounge_ioctl (struct file *file, FusionDev *dev, FusionID fusion_id,
+lounge_ioctl (struct file *file, FusionDev *dev, Fusionee *fusionee,
               unsigned int cmd, unsigned long arg)
 {
      int             ret;
@@ -450,7 +421,7 @@ lounge_ioctl (struct file *file, FusionDev *dev, FusionID fusion_id,
                if (copy_from_user (&enter, (FusionEnter*) arg, sizeof(enter)))
                     return -EFAULT;
 
-               ret = fusionee_enter( dev, &enter, fusion_id );
+               ret = fusionee_enter( dev, &enter, fusionee );
                if (ret)
                     return ret;
 
@@ -460,7 +431,7 @@ lounge_ioctl (struct file *file, FusionDev *dev, FusionID fusion_id,
                return 0;
 
           case _IOC_NR(FUSION_UNBLOCK):
-               if (fusion_id != FUSION_ID_MASTER)
+               if (fusionee_id( fusionee ) != FUSION_ID_MASTER)
                     return -EPERM;
 
                if (down_interruptible( &dev->enter_lock ))
@@ -478,7 +449,7 @@ lounge_ioctl (struct file *file, FusionDev *dev, FusionID fusion_id,
                if (copy_from_user (&kill, (FusionKill*) arg, sizeof(kill)))
                     return -EFAULT;
 
-               return fusionee_kill (dev, fusion_id,
+               return fusionee_kill (dev, fusionee,
                                      kill.fusion_id, kill.signal, kill.timeout_ms);
 
           case _IOC_NR(FUSION_ENTRY_SET_INFO):
@@ -546,7 +517,7 @@ lounge_ioctl (struct file *file, FusionDev *dev, FusionID fusion_id,
                if (copy_from_user( &fork, (FusionFork*) arg, sizeof(fork) ))
                     return -EFAULT;
 
-               ret = fusionee_fork( dev, &fork, fusion_id );
+               ret = fusionee_fork( dev, &fork, fusionee );
                if (ret)
                     return ret;
 
@@ -560,7 +531,7 @@ lounge_ioctl (struct file *file, FusionDev *dev, FusionID fusion_id,
 }
 
 static int
-messaging_ioctl (FusionDev *dev, FusionID fusion_id,
+messaging_ioctl (FusionDev *dev, Fusionee *fusionee,
                  unsigned int cmd, unsigned long arg)
 {
      FusionSendMessage send;
@@ -577,7 +548,7 @@ messaging_ioctl (FusionDev *dev, FusionID fusion_id,
                if (send.msg_size > 0x10000)
                     return -EMSGSIZE;
 
-               return fusionee_send_message (dev, fusion_id, send.fusion_id, FMT_SEND,
+               return fusionee_send_message (dev, fusionee, send.fusion_id, FMT_SEND,
                                              send.msg_id, send.msg_size, send.msg_data);
      }
 
@@ -585,7 +556,7 @@ messaging_ioctl (FusionDev *dev, FusionID fusion_id,
 }
 
 static int
-call_ioctl (FusionDev *dev, FusionID fusion_id,
+call_ioctl (FusionDev *dev, Fusionee *fusionee,
             unsigned int cmd, unsigned long arg)
 {
      int               id;
@@ -593,6 +564,7 @@ call_ioctl (FusionDev *dev, FusionID fusion_id,
      FusionCallNew     call;
      FusionCallExecute execute;
      FusionCallReturn  call_ret;
+     FusionID          fusion_id = fusionee_id( fusionee );
 
      switch (_IOC_NR(cmd)) {
           case _IOC_NR(FUSION_CALL_NEW):
@@ -613,7 +585,7 @@ call_ioctl (FusionDev *dev, FusionID fusion_id,
                if (copy_from_user (&execute, (FusionCallExecute*) arg, sizeof(execute)))
                     return -EFAULT;
 
-               ret = fusion_call_execute (dev, fusion_id, &execute);
+               ret = fusion_call_execute (dev, fusionee, &execute);
                if (ret)
                     return ret;
 
@@ -638,7 +610,7 @@ call_ioctl (FusionDev *dev, FusionID fusion_id,
 }
 
 static int
-ref_ioctl (FusionDev *dev, FusionID fusion_id,
+ref_ioctl (FusionDev *dev, Fusionee *fusionee,
            unsigned int cmd, unsigned long arg)
 {
      int              id;
@@ -646,6 +618,7 @@ ref_ioctl (FusionDev *dev, FusionID fusion_id,
      int              refs;
      FusionRefWatch   watch;
      FusionRefInherit inherit;
+     FusionID         fusion_id = fusionee_id( fusionee );
 
      switch (_IOC_NR(cmd)) {
           case _IOC_NR(FUSION_REF_NEW):
@@ -734,12 +707,13 @@ ref_ioctl (FusionDev *dev, FusionID fusion_id,
 }
 
 static int
-skirmish_ioctl (FusionDev *dev, FusionID fusion_id,
+skirmish_ioctl (FusionDev *dev, Fusionee *fusionee,
                 unsigned int cmd, unsigned long arg)
 {
-     int id;
-     int ret;
-     int lock_count;
+     int      id;
+     int      ret;
+     int      lock_count;
+     FusionID fusion_id = fusionee_id( fusionee );
 
      switch (_IOC_NR(cmd)) {
           case _IOC_NR(FUSION_SKIRMISH_NEW):
@@ -792,11 +766,12 @@ skirmish_ioctl (FusionDev *dev, FusionID fusion_id,
 }
 
 static int
-property_ioctl (FusionDev *dev, FusionID fusion_id,
+property_ioctl (FusionDev *dev, Fusionee *fusionee,
                 unsigned int cmd, unsigned long arg)
 {
-     int id;
-     int ret;
+     int      id;
+     int      ret;
+     FusionID fusion_id = fusionee_id( fusionee );
 
      switch (_IOC_NR(cmd)) {
           case _IOC_NR(FUSION_PROPERTY_NEW):
@@ -832,7 +807,7 @@ property_ioctl (FusionDev *dev, FusionID fusion_id,
                if (get_user (id, (int*) arg))
                     return -EFAULT;
 
-               return fusion_property_holdup (dev, id, fusion_id);
+               return fusion_property_holdup (dev, id, fusionee);
 
           case _IOC_NR(FUSION_PROPERTY_DESTROY):
                if (get_user (id, (int*) arg))
@@ -845,12 +820,13 @@ property_ioctl (FusionDev *dev, FusionID fusion_id,
 }
 
 static int
-reactor_ioctl (FusionDev *dev, FusionID fusion_id,
+reactor_ioctl (FusionDev *dev, Fusionee *fusionee,
                unsigned int cmd, unsigned long arg)
 {
      int                   id;
      int                   ret;
      FusionReactorDispatch dispatch;
+     FusionID              fusion_id = fusionee_id( fusionee );
 
      switch (_IOC_NR(cmd)) {
           case _IOC_NR(FUSION_REACTOR_NEW):
@@ -889,7 +865,7 @@ reactor_ioctl (FusionDev *dev, FusionID fusion_id,
                     return -EMSGSIZE;
 
                return fusion_reactor_dispatch (dev, dispatch.reactor_id,
-                                               dispatch.self ? 0 : fusion_id,
+                                               dispatch.self ? NULL : fusionee,
                                                dispatch.msg_size, dispatch.msg_data);
 
           case _IOC_NR(FUSION_REACTOR_DESTROY):
@@ -903,7 +879,7 @@ reactor_ioctl (FusionDev *dev, FusionID fusion_id,
 }
 
 static int
-shmpool_ioctl (FusionDev *dev, FusionID fusion_id,
+shmpool_ioctl (FusionDev *dev, Fusionee *fusionee,
                unsigned int cmd, unsigned long arg)
 {
      int                   id;
@@ -911,6 +887,7 @@ shmpool_ioctl (FusionDev *dev, FusionID fusion_id,
      FusionSHMPoolNew      pool;
      FusionSHMPoolAttach   attach;
      FusionSHMPoolDispatch dispatch;
+     FusionID              fusion_id = fusionee_id( fusionee );
 
      switch (_IOC_NR(cmd)) {
           case _IOC_NR(FUSION_SHMPOOL_NEW):
@@ -955,7 +932,7 @@ shmpool_ioctl (FusionDev *dev, FusionID fusion_id,
                                    (FusionSHMPoolDispatch*) arg, sizeof(dispatch)))
                     return -EFAULT;
 
-               return fusion_shmpool_dispatch (dev, &dispatch, fusion_id);
+               return fusion_shmpool_dispatch (dev, &dispatch, fusionee);
 
           case _IOC_NR(FUSION_SHMPOOL_DESTROY):
                if (get_user (id, (int*) arg))
@@ -971,35 +948,35 @@ static int
 fusion_ioctl (struct inode *inode, struct file *file,
               unsigned int cmd, unsigned long arg)
 {
-     size_t     id  = (size_t) file->private_data;
-     FusionDev *dev = fusion_devs[iminor(inode)];
+     Fusionee  *fusionee = file->private_data;
+     FusionDev *dev      = fusion_devs[iminor(inode)];
 
      DEBUG( "fusion_ioctl (0x%08x)\n", cmd );
 
      switch (_IOC_TYPE(cmd)) {
           case FT_LOUNGE:
-               return lounge_ioctl( file, dev, id, cmd, arg );
+               return lounge_ioctl( file, dev, fusionee, cmd, arg );
 
           case FT_MESSAGING:
-               return messaging_ioctl( dev, id, cmd, arg );
+               return messaging_ioctl( dev, fusionee, cmd, arg );
 
           case FT_CALL:
-               return call_ioctl( dev, id, cmd, arg );
+               return call_ioctl( dev, fusionee, cmd, arg );
 
           case FT_REF:
-               return ref_ioctl( dev, id, cmd, arg );
+               return ref_ioctl( dev, fusionee, cmd, arg );
 
           case FT_SKIRMISH:
-               return skirmish_ioctl( dev, id, cmd, arg );
+               return skirmish_ioctl( dev, fusionee, cmd, arg );
 
           case FT_PROPERTY:
-               return property_ioctl( dev, id, cmd, arg );
+               return property_ioctl( dev, fusionee, cmd, arg );
 
           case FT_REACTOR:
-               return reactor_ioctl( dev, id, cmd, arg );
+               return reactor_ioctl( dev, fusionee, cmd, arg );
 
           case FT_SHMPOOL:
-               return shmpool_ioctl( dev, id, cmd, arg );
+               return shmpool_ioctl( dev, fusionee, cmd, arg );
      }
 
      return -ENOSYS;
@@ -1009,8 +986,8 @@ static int
 fusion_mmap( struct file           *file,
              struct vm_area_struct *vma )
 {
-     size_t        fusion_id = (size_t) file->private_data;
-     FusionDev    *dev       = fusion_devs[iminor(file->f_dentry->d_inode)];
+     Fusionee     *fusionee = file->private_data;
+     FusionDev    *dev      = fusion_devs[iminor(file->f_dentry->d_inode)];
      unsigned int  size;
 
      if (vma->vm_pgoff != 0)
@@ -1021,7 +998,7 @@ fusion_mmap( struct file           *file,
           return -EINVAL;
 
      if (!dev->shared_area) {
-          if (fusion_id != 1)
+          if (fusionee_id( fusionee ) != FUSION_ID_MASTER)
                return -EPERM;
 
           dev->shared_area = get_zeroed_page( GFP_KERNEL );
diff --git a/drivers/char/fusion/fusionee.c b/drivers/char/fusion/fusionee.c
index 4255347..45541d2 100644
--- a/drivers/char/fusion/fusionee.c
+++ b/drivers/char/fusion/fusionee.c
@@ -40,7 +40,7 @@
 #define DEBUG(x...)  do {} while (0)
 #endif
 
-typedef struct {
+struct __Fusion_Fusionee {
      FusionLink        link;
 
      struct semaphore  lock;
@@ -54,7 +54,9 @@ typedef struct {
      int               snd_total;  /* Total number of messages sent. */
 
      wait_queue_head_t wait;
-} Fusionee;
+
+     bool              force_slave;
+};
 
 typedef struct {
      FusionLink         link;
@@ -155,7 +157,9 @@ fusionee_deinit (FusionDev *dev)
 /******************************************************************************/
 
 int
-fusionee_new (FusionDev *dev, FusionID *ret_id)
+fusionee_new( FusionDev  *dev,
+              bool        force_slave,
+              Fusionee  **ret_fusionee )
 {
      Fusionee *fusionee;
 
@@ -170,8 +174,8 @@ fusionee_new (FusionDev *dev, FusionID *ret_id)
           return -EINTR;
      }
 
-     fusionee->id  = ++dev->fusionee.last_id;
-     fusionee->pid = current->pid;
+     fusionee->pid         = current->pid;
+     fusionee->force_slave = force_slave;
 
      init_MUTEX (&fusionee->lock);
 
@@ -181,38 +185,41 @@ fusionee_new (FusionDev *dev, FusionID *ret_id)
 
      up (&dev->fusionee.lock);
 
-     *ret_id = fusionee->id;
+     *ret_fusionee = fusionee;
 
      return 0;
 }
 
 int
-fusionee_enter (FusionDev   *dev,
+fusionee_enter( FusionDev   *dev,
                 FusionEnter *enter,
-                FusionID     id)
+                Fusionee    *fusionee )
 {
      if (enter->api.major != FUSION_API_MAJOR || enter->api.minor > FUSION_API_MINOR)
           return -ENOPROTOOPT;
 
-     enter->fusion_id = id;
+     if (down_interruptible( &dev->enter_lock ))
+          return -EINTR;
+
+     if (dev->fusionee.last_id || fusionee->force_slave) {
+          while (!dev->enter_ok) {
+               fusion_sleep_on( &dev->enter_wait, &dev->enter_lock, NULL );
 
-     if (id != FUSION_ID_MASTER) {
-          if (down_interruptible( &dev->enter_lock ))
-               return -EINTR;
+               if (signal_pending(current))
+                    return -EINTR;
 
-          if (dev->enter_ok) {
-               up( &dev->enter_lock );
-               return 0;
+               if (down_interruptible( &dev->enter_lock ))
+                    return -EINTR;
           }
 
-          fusion_sleep_on( &dev->enter_wait, &dev->enter_lock, NULL );
+          FUSION_ASSERT( dev->fusionee.last_id != 0 );
+     }
 
-          if (signal_pending(current))
-               return -EINTR;
+     fusionee->id = ++dev->fusionee.last_id;
 
-          if (!dev->enter_ok)
-               return -EAGAIN;
-     }
+     up( &dev->enter_lock );
+
+     enter->fusion_id = fusionee->id;
 
      return 0;
 }
@@ -220,41 +227,42 @@ fusionee_enter (FusionDev   *dev,
 int
 fusionee_fork( FusionDev  *dev,
                FusionFork *fork,
-               FusionID    id )
+               Fusionee   *fusionee )
 {
      int ret;
 
-     ret = fusion_shmpool_fork_all( dev, id, fork->fusion_id );
+     ret = fusion_shmpool_fork_all( dev, fusionee->id, fork->fusion_id );
      if (ret)
           return ret;
 
-     ret = fusion_reactor_fork_all( dev, id, fork->fusion_id );
+     ret = fusion_reactor_fork_all( dev, fusionee->id, fork->fusion_id );
      if (ret)
           return ret;
 
-     ret = fusion_ref_fork_all_local( dev, id, fork->fusion_id );
+     ret = fusion_ref_fork_all_local( dev, fusionee->id, fork->fusion_id );
      if (ret)
           return ret;
 
-     fork->fusion_id = id;
+     fork->fusion_id = fusionee->id;
 
      return 0;
 }
 
 int
-fusionee_send_message (FusionDev *dev,
-                       FusionID id,
-                       FusionID recipient,
-                       FusionMessageType msg_type, int msg_id,
-                       int msg_size, const void *msg_data)
+fusionee_send_message (FusionDev         *dev,
+                       Fusionee          *sender,
+                       FusionID           recipient,
+                       FusionMessageType  msg_type,
+                       int                msg_id,
+                       int                msg_size,
+                       const void        *msg_data)
 {
      int       ret;
      Message  *message;
-     Fusionee *sender   = NULL;
      Fusionee *fusionee;
 
      DEBUG( "fusionee_send_message (%d -> %d, type %d, id %d, size %d)\n",
-            id, recipient, msg_type, msg_id, msg_size );
+            fusionee->id, recipient, msg_type, msg_id, msg_size );
 
      ret = lookup_fusionee (dev, recipient, &fusionee);
      if (ret)
@@ -265,34 +273,11 @@ fusionee_send_message (FusionDev *dev,
           return -EINTR;
      }
 
-
-     if (id) {
-          if (id == recipient) {
-               sender = fusionee;
-          }
-          else {
-               FusionLink *l;
-
-               fusion_list_foreach (l, dev->fusionee.list) {
-                    Fusionee *f = (Fusionee *) l;
-
-                    if (f->id == id) {
-                         sender = f;
-                         break;
-                    }
-               }
-
-               if (!sender) {
-                    unlock_fusionee (fusionee);
-                    up (&dev->fusionee.lock);
-                    return -EIO;
-               }
-
-               if (down_interruptible (&sender->lock)) {
-                    unlock_fusionee (fusionee);
-                    up (&dev->fusionee.lock);
-                    return -EINTR;
-               }
+     if (sender && sender != fusionee) {
+          if (down_interruptible (&sender->lock)) {
+               unlock_fusionee (fusionee);
+               up (&dev->fusionee.lock);
+               return -EINTR;
           }
      }
 
@@ -341,15 +326,15 @@ fusionee_send_message (FusionDev *dev,
 
 int
 fusionee_get_messages (FusionDev *dev,
-                       FusionID id, void *buf, int buf_size, bool block)
+                       Fusionee  *fusionee,
+                       void      *buf,
+                       int        buf_size,
+                       bool       block)
 {
-     int       ret;
-     int       written  = 0;
-     Fusionee *fusionee;
+     int written = 0;
 
-     ret = lock_fusionee (dev, id, &fusionee);
-     if (ret)
-          return ret;
+     if (down_interruptible (&fusionee->lock))
+          return -EINTR;
 
      while (!fusionee->messages.count) {
           if (!block) {
@@ -362,9 +347,8 @@ fusionee_get_messages (FusionDev *dev,
           if (signal_pending(current))
                return -EINTR;
 
-          ret = lock_fusionee (dev, id, &fusionee);
-          if (ret)
-               return ret;
+          if (down_interruptible (&fusionee->lock))
+               return -EINTR;
      }
 
      while (fusionee->messages.count) {
@@ -406,17 +390,13 @@ fusionee_get_messages (FusionDev *dev,
 }
 
 unsigned int
-fusionee_poll (FusionDev *dev, FusionID id, struct file *file, poll_table * wait)
+fusionee_poll (FusionDev   *dev,
+               Fusionee    *fusionee,
+               struct file *file,
+               poll_table  *wait)
 {
-     int       ret;
-     Fusionee *fusionee;
-
-     ret = lock_fusionee (dev, id, &fusionee);
-     if (ret)
-          return ret;
-
-     unlock_fusionee (fusionee);
-
+     int      ret;
+     FusionID id = fusionee->id;
 
      poll_wait (file, &fusionee->wait, wait);
 
@@ -437,24 +417,25 @@ fusionee_poll (FusionDev *dev, FusionID id, struct file *file, poll_table * wait
 }
 
 int
-fusionee_kill (FusionDev *dev, FusionID id, int target, int signal, int timeout_ms)
+fusionee_kill (FusionDev *dev,
+               Fusionee  *fusionee,
+               FusionID   target,
+               int        signal,
+               int        timeout_ms)
 {
      long timeout = -1;
 
      while (true) {
-          int         ret;
           FusionLink *l;
-          Fusionee   *fusionee;
-          int         killed   = 0;
+          int         killed = 0;
 
-          ret = lookup_fusionee (dev, id, &fusionee);
-          if (ret)
-               return ret;
+          if (down_interruptible (&dev->fusionee.lock))
+               return -EINTR;
 
           fusion_list_foreach (l, dev->fusionee.list) {
                Fusionee *f = (Fusionee*) l;
 
-               if (f->id != id && (!target || target == f->id)) {
+               if (f != fusionee && (!target || target == f->id)) {
                     kill_proc (f->pid, signal, 0);
                     killed++;
                }
@@ -495,14 +476,11 @@ fusionee_kill (FusionDev *dev, FusionID id, int target, int signal, int timeout_
 }
 
 int
-fusionee_destroy (FusionDev *dev, FusionID id)
+fusionee_destroy (FusionDev *dev,
+                  Fusionee  *fusionee)
 {
-     int       ret;
-     Fusionee *fusionee;
-
-     ret = lookup_fusionee (dev, id, &fusionee);
-     if (ret)
-          return ret;
+     if (down_interruptible (&dev->fusionee.lock))
+          return -EINTR;
 
      down (&fusionee->lock);
 
@@ -513,12 +491,12 @@ fusionee_destroy (FusionDev *dev, FusionID id)
      up (&dev->fusionee.lock);
 
 
-     fusion_call_destroy_all (dev, id);
-     fusion_skirmish_dismiss_all (dev, id);
-     fusion_reactor_detach_all (dev, id);
-     fusion_property_cede_all (dev, id);
-     fusion_ref_clear_all_local (dev, id);
-     fusion_shmpool_detach_all (dev, id);
+     fusion_call_destroy_all (dev, fusionee->id);
+     fusion_skirmish_dismiss_all (dev, fusionee->id);
+     fusion_reactor_detach_all (dev, fusionee->id);
+     fusion_property_cede_all (dev, fusionee->id);
+     fusion_ref_clear_all_local (dev, fusionee->id);
+     fusion_shmpool_detach_all (dev, fusionee->id);
 
      while (fusionee->messages.count) {
           Message *message = (Message*) fusion_fifo_get (&fusionee->messages);
@@ -528,19 +506,26 @@ fusionee_destroy (FusionDev *dev, FusionID id)
 
      up (&fusionee->lock);
 
-     kfree (fusionee);
+     if (fusionee->id == FUSION_ID_MASTER && !dev->enter_ok)
+          wake_up_interruptible_all (&dev->enter_wait);
 
+     kfree (fusionee);
 
-     if (id == FUSION_ID_MASTER && !dev->enter_ok)
-          wake_up_interruptible_all (&dev->enter_wait);
+     return 0;
+}
 
-     return ret;
+FusionID
+fusionee_id( const Fusionee *fusionee )
+{
+     return fusionee->id;
 }
 
 /******************************************************************************/
 
 static int
-lookup_fusionee (FusionDev *dev, FusionID id, Fusionee **ret_fusionee)
+lookup_fusionee (FusionDev *dev,
+                 FusionID   id,
+                 Fusionee **ret_fusionee)
 {
      FusionLink *l;
 
@@ -562,7 +547,9 @@ lookup_fusionee (FusionDev *dev, FusionID id, Fusionee **ret_fusionee)
 }
 
 static int
-lock_fusionee (FusionDev *dev, FusionID id, Fusionee **ret_fusionee)
+lock_fusionee (FusionDev *dev,
+               FusionID   id,
+               Fusionee **ret_fusionee)
 {
      int       ret;
      Fusionee *fusionee;
diff --git a/drivers/char/fusion/fusionee.h b/drivers/char/fusion/fusionee.h
index 272c395..98028bb 100644
--- a/drivers/char/fusion/fusionee.h
+++ b/drivers/char/fusion/fusionee.h
@@ -21,7 +21,6 @@
 #include "fusiondev.h"
 #include "types.h"
 
-
 /* module init/cleanup */
 
 int  fusionee_init   (FusionDev *dev);
@@ -31,18 +30,19 @@ void fusionee_deinit (FusionDev *dev);
 /* internal functions */
 
 int fusionee_new           (FusionDev         *dev,
-                            FusionID          *ret_id);
+                            bool               force_slave,
+                            Fusionee         **ret_fusionee);
 
 int fusionee_enter         (FusionDev         *dev,
                             FusionEnter       *enter,
-                            FusionID           id);
+                            Fusionee          *fusionee);
 
 int fusionee_fork          (FusionDev         *dev,
                             FusionFork        *fork,
-                            FusionID           id);
+                            Fusionee          *fusionee);
 
 int fusionee_send_message  (FusionDev         *dev,
-                            FusionID           id,
+                            Fusionee          *fusionee,
                             FusionID           recipient,
                             FusionMessageType  msg_type,
                             int                msg_id,
@@ -50,24 +50,26 @@ int fusionee_send_message  (FusionDev         *dev,
                             const void        *msg_data);
 
 int fusionee_get_messages  (FusionDev         *dev,
-                            FusionID           id,
+                            Fusionee          *fusionee,
                             void              *buf,
                             int                buf_size,
                             bool               block);
 
 unsigned
 int fusionee_poll          (FusionDev         *dev,
-                            FusionID           id,
+                            Fusionee          *fusionee,
                             struct file       *file,
                             poll_table        *wait);
 
 int fusionee_kill          (FusionDev         *dev,
-                            FusionID           id,
-                            int                target,
+                            Fusionee          *fusionee,
+                            FusionID           target,
                             int                signal,
                             int                timeout_ms);
 
 int fusionee_destroy       (FusionDev         *dev,
-                            FusionID           id);
+                            Fusionee          *fusionee);
+
+FusionID fusionee_id( const Fusionee *fusionee );
 
 #endif
diff --git a/drivers/char/fusion/property.c b/drivers/char/fusion/property.c
index 4263475..8180669 100644
--- a/drivers/char/fusion/property.c
+++ b/drivers/char/fusion/property.c
@@ -279,10 +279,11 @@ fusion_property_cede( FusionDev *dev, int id, int fusion_id )
 }
 
 int
-fusion_property_holdup( FusionDev *dev, int id, int fusion_id )
+fusion_property_holdup( FusionDev *dev, int id, Fusionee *fusionee )
 {
      int             ret;
      FusionProperty *property;
+     FusionID        fusion_id = fusionee_id( fusionee );
 
      if (fusion_id > 1)
           return -EPERM;
@@ -297,7 +298,7 @@ fusion_property_holdup( FusionDev *dev, int id, int fusion_id )
                return -EIO;
           }
 
-          fusionee_kill( dev, fusion_id, property->fusion_id, SIGKILL, -1 );
+          fusionee_kill( dev, fusionee, property->fusion_id, SIGKILL, -1 );
      }
 
      fusion_property_unlock( property );
diff --git a/drivers/char/fusion/property.h b/drivers/char/fusion/property.h
index 92790f5..63a403d 100644
--- a/drivers/char/fusion/property.h
+++ b/drivers/char/fusion/property.h
@@ -44,7 +44,7 @@ int fusion_property_cede     (FusionDev *dev,
 
 int fusion_property_holdup   (FusionDev *dev,
                               int        id,
-                              int        fusion_id);
+                              Fusionee  *fusionee);
 
 int fusion_property_destroy  (FusionDev *dev,
                               int        id);
diff --git a/drivers/char/fusion/reactor.c b/drivers/char/fusion/reactor.c
index 8bf5e0d..4be7d81 100644
--- a/drivers/char/fusion/reactor.c
+++ b/drivers/char/fusion/reactor.c
@@ -206,12 +206,13 @@ fusion_reactor_detach (FusionDev *dev, int id, FusionID fusion_id)
 }
 
 int
-fusion_reactor_dispatch (FusionDev *dev, int id, FusionID fusion_id,
+fusion_reactor_dispatch (FusionDev *dev, int id, Fusionee *fusionee,
                          int msg_size, const void *msg_data)
 {
      int            ret;
      FusionLink    *l;
      FusionReactor *reactor;
+     FusionID       fusion_id = fusionee ? fusionee_id( fusionee ) : 0;
 
      ret = fusion_reactor_lock( &dev->reactor, id, false, &reactor );
      if (ret)
@@ -230,7 +231,7 @@ fusion_reactor_dispatch (FusionDev *dev, int id, FusionID fusion_id,
           if (node->fusion_id == fusion_id)
                continue;
 
-          fusionee_send_message (dev, fusion_id, node->fusion_id, FMT_REACTOR,
+          fusionee_send_message (dev, fusionee, node->fusion_id, FMT_REACTOR,
                                  reactor->entry.id, msg_size, msg_data);
      }
 
diff --git a/drivers/char/fusion/reactor.h b/drivers/char/fusion/reactor.h
index 4e4ba6b..0e4b82c 100644
--- a/drivers/char/fusion/reactor.h
+++ b/drivers/char/fusion/reactor.h
@@ -40,7 +40,7 @@ int fusion_reactor_detach   (FusionDev  *dev,
 
 int fusion_reactor_dispatch (FusionDev  *dev,
                              int         id,
-                             FusionID    fusion_id,
+                             Fusionee   *fusionee,
                              int         msg_size,
                              const void *msg_data);
 
diff --git a/drivers/char/fusion/shmpool.c b/drivers/char/fusion/shmpool.c
index 97376b1..69d127f 100644
--- a/drivers/char/fusion/shmpool.c
+++ b/drivers/char/fusion/shmpool.c
@@ -282,12 +282,13 @@ fusion_shmpool_detach (FusionDev *dev, int id, FusionID fusion_id)
 int
 fusion_shmpool_dispatch( FusionDev             *dev,
                          FusionSHMPoolDispatch *dispatch,
-                         FusionID               fusion_id )
+                         Fusionee              *fusionee )
 {
      int                   ret;
      FusionLink           *l;
      FusionSHMPool        *shmpool;
      FusionSHMPoolMessage  message;
+     FusionID              fusion_id = fusionee_id( fusionee );
 
      if (dispatch->size <= 0)
           return -EINVAL;
@@ -309,7 +310,7 @@ fusion_shmpool_dispatch( FusionDev             *dev,
           if (node->fusion_id == fusion_id)
                continue;
 
-          fusionee_send_message (dev, fusion_id, node->fusion_id, FMT_SHMPOOL,
+          fusionee_send_message (dev, fusionee, node->fusion_id, FMT_SHMPOOL,
                                  shmpool->entry.id, sizeof(message), &message);
      }
 
diff --git a/drivers/char/fusion/shmpool.h b/drivers/char/fusion/shmpool.h
index 333fd74..8f07b82 100644
--- a/drivers/char/fusion/shmpool.h
+++ b/drivers/char/fusion/shmpool.h
@@ -40,7 +40,7 @@ int fusion_shmpool_detach   (FusionDev             *dev,
 
 int fusion_shmpool_dispatch (FusionDev             *dev,
                              FusionSHMPoolDispatch *dispatch,
-                             FusionID               fusion_id );
+                             Fusionee              *fusionee );
 
 int fusion_shmpool_destroy  (FusionDev             *dev,
                              int                    id);
diff --git a/drivers/char/fusion/types.h b/drivers/char/fusion/types.h
index a0b1288..70212b3 100644
--- a/drivers/char/fusion/types.h
+++ b/drivers/char/fusion/types.h
@@ -24,4 +24,6 @@ typedef enum {
 } bool;
 #endif
 
+typedef struct __Fusion_Fusionee Fusionee;
+
 #endif
-- 
1.7.3.3

