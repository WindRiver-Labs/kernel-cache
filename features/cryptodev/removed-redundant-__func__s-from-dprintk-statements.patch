From 1932915a108627715dcca42a7a127918d089ea65 Mon Sep 17 00:00:00 2001
From: Jaren Johnston <jaren.johnston>
Date: Fri, 15 Jun 2012 11:16:50 -0700
Subject: [PATCH 217/292] removed redundant __func__s from dprintk statements.

dprink already includes __func__ in its definition.

Change-Id: If98ce72617f1bb54ba0880075c69a3b9d3186007

Signed-off-by: Nikos Mavrogiannopoulos <nmav@gnutls.org>
---
 drivers/staging/crypto/cryptodev/authenc.c  | 12 ++++----
 drivers/staging/crypto/cryptodev/cryptlib.c |  9 ++----
 drivers/staging/crypto/cryptodev/ioctl.c    | 43 +++++++++++++----------------
 drivers/staging/crypto/cryptodev/zc.c       |  8 +++---
 4 files changed, 32 insertions(+), 40 deletions(-)

diff --git a/drivers/staging/crypto/cryptodev/authenc.c b/drivers/staging/crypto/cryptodev/authenc.c
index 70f0f7be5341..0793cbdd99ee 100644
--- a/drivers/staging/crypto/cryptodev/authenc.c
+++ b/drivers/staging/crypto/cryptodev/authenc.c
@@ -63,8 +63,8 @@ static int get_userbuf_tls(struct csession *ses, struct kernel_crypt_auth_op *kc
 
 	if (ses->alignmask) {
 		if (!IS_ALIGNED((unsigned long)caop->dst, ses->alignmask))
-			dprintk(2, KERN_WARNING, "%s: careful - source address %lx is not %d byte aligned\n",
-				__func__, (unsigned long)caop->dst, ses->alignmask + 1);
+			dprintk(2, KERN_WARNING, "careful - source address %lx is not %d byte aligned\n",
+				(unsigned long)caop->dst, ses->alignmask + 1);
 	}
 
 	if (kcaop->dst_len == 0) {
@@ -118,11 +118,11 @@ static int get_userbuf_srtp(struct csession *ses, struct kernel_crypt_auth_op *k
 
 	if (ses->alignmask) {
 		if (!IS_ALIGNED((unsigned long)caop->dst, ses->alignmask))
-			dprintk(2, KERN_WARNING, "%s: careful - source address %lx is not %d byte aligned\n",
-				__func__, (unsigned long)caop->dst, ses->alignmask + 1);
+			dprintk(2, KERN_WARNING, "careful - source address %lx is not %d byte aligned\n",
+				(unsigned long)caop->dst, ses->alignmask + 1);
 		if (!IS_ALIGNED((unsigned long)caop->auth_src, ses->alignmask))
-			dprintk(2, KERN_WARNING, "%s: careful - source address %lx is not %d byte aligned\n",
-				__func__, (unsigned long)caop->auth_src, ses->alignmask + 1);
+			dprintk(2, KERN_WARNING, "careful - source address %lx is not %d byte aligned\n",
+				(unsigned long)caop->auth_src, ses->alignmask + 1);
 	}
 
 	if (unlikely(kcaop->dst_len == 0 || caop->auth_len == 0)) {
diff --git a/drivers/staging/crypto/cryptodev/cryptlib.c b/drivers/staging/crypto/cryptodev/cryptlib.c
index f0317014d1ef..51701b36b18b 100644
--- a/drivers/staging/crypto/cryptodev/cryptlib.c
+++ b/drivers/staging/crypto/cryptodev/cryptlib.c
@@ -65,8 +65,7 @@ int cryptodev_cipher_init(struct cipher_data *out, const char *alg_name,
 
 		out->async.s = crypto_alloc_ablkcipher(alg_name, 0, 0);
 		if (unlikely(IS_ERR(out->async.s))) {
-			dprintk(1, KERN_DEBUG, "%s: Failed to load cipher %s\n",
-				__func__, alg_name);
+			dprintk(1, KERN_DEBUG, "Failed to load cipher %s\n", alg_name);
 				return -EINVAL;
 		}
 
@@ -94,8 +93,7 @@ int cryptodev_cipher_init(struct cipher_data *out, const char *alg_name,
 	} else {
 		out->async.as = crypto_alloc_aead(alg_name, 0, 0);
 		if (unlikely(IS_ERR(out->async.as))) {
-			dprintk(1, KERN_DEBUG, "%s: Failed to load cipher %s\n",
-				__func__, alg_name);
+			dprintk(1, KERN_DEBUG, "Failed to load cipher %s\n", alg_name);
 			return -EINVAL;
 		}
 
@@ -270,8 +268,7 @@ int cryptodev_hash_init(struct hash_data *hdata, const char *alg_name,
 
 	hdata->async.s = crypto_alloc_ahash(alg_name, 0, 0);
 	if (unlikely(IS_ERR(hdata->async.s))) {
-		dprintk(1, KERN_DEBUG, "%s: Failed to load transform for %s\n",
-			__func__, alg_name);
+		dprintk(1, KERN_DEBUG, "Failed to load transform for %s\n", alg_name);
 		return -EINVAL;
 	}
 
diff --git a/drivers/staging/crypto/cryptodev/ioctl.c b/drivers/staging/crypto/cryptodev/ioctl.c
index e3a8397cf12c..74f5363378d9 100644
--- a/drivers/staging/crypto/cryptodev/ioctl.c
+++ b/drivers/staging/crypto/cryptodev/ioctl.c
@@ -148,8 +148,7 @@ crypto_create_session(struct fcrypt *fcr, struct session_op *sop)
 		stream = 1;
 		break;
 	default:
-		dprintk(1, KERN_DEBUG, "%s: bad cipher: %d\n", __func__,
-			sop->cipher);
+		dprintk(1, KERN_DEBUG, "bad cipher: %d\n", sop->cipher);
 		return -EINVAL;
 	}
 
@@ -201,8 +200,7 @@ crypto_create_session(struct fcrypt *fcr, struct session_op *sop)
 		hmac_mode = 0;
 		break;
 	default:
-		dprintk(1, KERN_DEBUG, "%s: bad mac: %d\n", __func__,
-			sop->mac);
+		dprintk(1, KERN_DEBUG, "bad mac: %d\n", sop->mac);
 		return -EINVAL;
 	}
 
@@ -232,8 +230,7 @@ crypto_create_session(struct fcrypt *fcr, struct session_op *sop)
 						sop->keylen, stream, aead);
 		if (ret < 0) {
 			dprintk(1, KERN_DEBUG,
-				"%s: Failed to load cipher for %s\n",
-				__func__, alg_name);
+				"Failed to load cipher for %s\n", alg_name);
 			ret = -EINVAL;
 			goto error_cipher;
 		}
@@ -259,9 +256,7 @@ crypto_create_session(struct fcrypt *fcr, struct session_op *sop)
 		ret = cryptodev_hash_init(&ses_new->hdata, hash_name, hmac_mode,
 							keyp, sop->mackeylen);
 		if (ret != 0) {
-			dprintk(1, KERN_DEBUG,
-			"%s: Failed to load hash for %s\n",
-			__func__, hash_name);
+			dprintk(1, KERN_DEBUG, "Failed to load hash for %s\n", hash_name);
 			ret = -EINVAL;
 			goto error_hash;
 		}
@@ -269,11 +264,11 @@ crypto_create_session(struct fcrypt *fcr, struct session_op *sop)
 
 	ses_new->alignmask = max(ses_new->cdata.alignmask,
 	                                          ses_new->hdata.alignmask);
-	dprintk(2, KERN_DEBUG, "%s: got alignmask %d\n", __func__, ses_new->alignmask);
+	dprintk(2, KERN_DEBUG, "got alignmask %d\n", ses_new->alignmask);
 
 	ses_new->array_size = DEFAULT_PREALLOC_PAGES;
-	dprintk(2, KERN_DEBUG, "%s: preallocating for %d user pages\n",
-			__func__, ses_new->array_size);
+	dprintk(2, KERN_DEBUG, "preallocating for %d user pages\n",
+			ses_new->array_size);
 	ses_new->pages = kzalloc(ses_new->array_size *
 			sizeof(struct page *), GFP_KERNEL);
 	ses_new->sg = kzalloc(ses_new->array_size *
@@ -331,8 +326,8 @@ crypto_destroy_session(struct csession *ses_ptr)
 	dprintk(2, KERN_DEBUG, "Removed session 0x%08X\n", ses_ptr->sid);
 	cryptodev_cipher_deinit(&ses_ptr->cdata);
 	cryptodev_hash_deinit(&ses_ptr->hdata);
-	dprintk(2, KERN_DEBUG, "%s: freeing space for %d user pages\n",
-			__func__, ses_ptr->array_size);
+	dprintk(2, KERN_DEBUG, "freeing space for %d user pages\n",
+			ses_ptr->array_size);
 	kfree(ses_ptr->pages);
 	kfree(ses_ptr->sg);
 	mutex_unlock(&ses_ptr->sem);
@@ -423,8 +418,8 @@ static void cryptask_routine(struct work_struct *work)
 	list_for_each_entry(item, &tmp, __hook) {
 		item->result = crypto_run(&pcr->fcrypt, &item->kcop);
 		if (unlikely(item->result))
-			dprintk(0, KERN_ERR, "%s: crypto_run() failed: %d\n",
-					__func__, item->result);
+			dprintk(0, KERN_ERR, "crypto_run() failed: %d\n",
+					item->result);
 	}
 
 	/* push all handled jobs to the done list at once */
@@ -467,8 +462,8 @@ cryptodev_open(struct inode *inode, struct file *filp)
 		if (!tmp)
 			return -ENOMEM;
 		pcr->itemcount++;
-		dprintk(2, KERN_DEBUG, "%s: allocated new item at %lx\n",
-				__func__, (unsigned long)tmp);
+		dprintk(2, KERN_DEBUG, "allocated new item at %lx\n",
+				(unsigned long)tmp);
 		list_add(&tmp->__hook, &pcr->free.list);
 	}
 
@@ -499,8 +494,8 @@ cryptodev_release(struct inode *inode, struct file *filp)
 	list_splice_tail(&pcr->done.list, &pcr->free.list);
 
 	list_for_each_entry_safe(item, item_safe, &pcr->free.list, __hook) {
-		dprintk(2, KERN_DEBUG, "%s: freeing item at %lx\n",
-				__func__, (unsigned long)item);
+		dprintk(2, KERN_DEBUG, "freeing item at %lx\n",
+				(unsigned long)item);
 		list_del(&item->__hook);
 		kfree(item);
 		items_freed++;
@@ -508,8 +503,8 @@ cryptodev_release(struct inode *inode, struct file *filp)
 	}
 	if (items_freed != pcr->itemcount) {
 		dprintk(0, KERN_ERR,
-		        "%s: freed %d items, but %d should exist!\n",
-		        __func__, items_freed, pcr->itemcount);
+		        "freed %d items, but %d should exist!\n",
+		        items_freed, pcr->itemcount);
 	}
 
 	crypto_finish_all_sessions(&pcr->fcrypt);
@@ -563,8 +558,8 @@ static int crypto_async_run(struct crypt_priv *pcr, struct kernel_crypt_op *kcop
 		item = kzalloc(sizeof(struct todo_list_item), GFP_KERNEL);
 		if (unlikely(!item))
 			return -EFAULT;
-		dprintk(1, KERN_INFO, "%s: increased item count to %d\n",
-				__func__, pcr->itemcount);
+		dprintk(1, KERN_INFO, "increased item count to %d\n",
+				pcr->itemcount);
 	}
 
 	memcpy(&item->kcop, kcop, sizeof(struct kernel_crypt_op));
diff --git a/drivers/staging/crypto/cryptodev/zc.c b/drivers/staging/crypto/cryptodev/zc.c
index c00f7c5b1ba3..c9e6245308b2 100644
--- a/drivers/staging/crypto/cryptodev/zc.c
+++ b/drivers/staging/crypto/cryptodev/zc.c
@@ -146,13 +146,13 @@ int get_userbuf(struct csession *ses,
 	if (!dst && dst_len) { dst_len = 0; }
 
 	if (ses->alignmask && !IS_ALIGNED((unsigned long)src, ses->alignmask)) {
-		dprintk(2, KERN_WARNING, "%s: careful - source address %lx is not %d byte aligned\n",
-				__func__, (unsigned long)src, ses->alignmask + 1);
+		dprintk(2, KERN_WARNING, "careful - source address %lx is not %d byte aligned\n",
+				(unsigned long)src, ses->alignmask + 1);
 	}
 
 	if (ses->alignmask && !IS_ALIGNED((unsigned long)dst, ses->alignmask)) {
-		dprintk(2, KERN_WARNING, "%s: careful - destination address %lx is not %d byte aligned\n",
-				__func__, (unsigned long)dst, ses->alignmask + 1);
+		dprintk(2, KERN_WARNING, "careful - destination address %lx is not %d byte aligned\n",
+				(unsigned long)dst, ses->alignmask + 1);
 	}
 
 	src_pagecount = PAGECOUNT(src, src_len);
-- 
1.8.1.2

