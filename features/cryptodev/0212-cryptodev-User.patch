From be894690599295433f26f17ff16908794841cb17 Mon Sep 17 00:00:00 2001
From: Jaren Johnston <jaren.johnston>
Date: Fri, 15 Jun 2012 08:43:46 +0200
Subject: [PATCH 212/291] cryptodev: User

Previously, would attempt to release user pages even if they failed to
allocate.

Signed-off-by: Nikos Mavrogiannopoulos <nikos@esat.kuleuven.be>
---
 drivers/staging/crypto/cryptodev/authenc.c | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

diff --git a/drivers/staging/crypto/cryptodev/authenc.c b/drivers/staging/crypto/cryptodev/authenc.c
index 698febd24e22..9ceee2d56c11 100644
--- a/drivers/staging/crypto/cryptodev/authenc.c
+++ b/drivers/staging/crypto/cryptodev/authenc.c
@@ -615,6 +615,8 @@ __crypto_auth_run_zc(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcao
 
 		ret = srtp_auth_n_crypt(ses_ptr, kcaop, auth_sg, caop->auth_len, 
 			   dst_sg, caop->len);
+
+		release_user_pages(ses_ptr);
 	} else { /* TLS and normal cases. Here auth data are usually small
 	          * so we just copy them to a free page, instead of trying
 	          * to map them.
@@ -637,7 +639,7 @@ __crypto_auth_run_zc(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcao
 			if (unlikely(copy_from_user(auth_buf, caop->auth_src, caop->auth_len))) {
 				dprintk(1, KERN_ERR, "unable to copy auth data from userspace.\n");
 				ret = -EFAULT;
-				goto fail;
+				goto free_auth_buf;
 			}
 
 			sg_init_one(&tmp, auth_buf, caop->auth_len);
@@ -650,7 +652,7 @@ __crypto_auth_run_zc(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcao
 			ret = get_userbuf_tls(ses_ptr, kcaop, &dst_sg);
 			if (unlikely(ret)) {
 				dprintk(1, KERN_ERR, "get_userbuf_tls(): Error getting user pages.\n");
-				goto fail;
+				goto free_auth_buf;
 			}
 
 			ret = tls_auth_n_crypt(ses_ptr, kcaop, auth_sg, caop->auth_len, 
@@ -664,7 +666,7 @@ __crypto_auth_run_zc(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcao
 			{
 				dprintk(0, KERN_ERR, "Only stream and AEAD ciphers are allowed for authenc\n");
 				ret = -EINVAL;
-				goto fail;
+				goto free_auth_buf;
 			}
 
 			if (caop->op == COP_ENCRYPT) dst_len = caop->len + cryptodev_cipher_get_tag_size(&ses_ptr->cdata);
@@ -674,18 +676,19 @@ __crypto_auth_run_zc(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcao
 					  kcaop->task, kcaop->mm, &src_sg, &dst_sg);
 			if (unlikely(ret)) {
 				dprintk(1, KERN_ERR, "get_userbuf(): Error getting user pages.\n");
-				goto fail;
+				goto free_auth_buf;
 			}
 
 			ret = auth_n_crypt(ses_ptr, kcaop, auth_sg, caop->auth_len, 
 					   src_sg, dst_sg, caop->len);
 		}
 
-fail:
+		release_user_pages(ses_ptr);
+
+free_auth_buf:
 		free_page((unsigned long)auth_buf);
 	}
 
-	release_user_pages(ses_ptr);
 	return ret;
 }
 
-- 
2.1.0

