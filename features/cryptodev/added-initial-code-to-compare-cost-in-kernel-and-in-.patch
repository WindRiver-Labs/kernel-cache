From 4f2559947bc069e80734517b42ae6c7234222f6d Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos <nmav@gnutls.org>
Date: Sun, 4 Dec 2011 17:36:24 +0100
Subject: [PATCH 162/292] added initial code to compare cost in-kernel and in
 userspace encryption.

---
 drivers/staging/crypto/cryptodev/.gitignore      |   1 +
 drivers/staging/crypto/cryptodev/lib/Makefile    |   9 ++
 drivers/staging/crypto/cryptodev/lib/benchmark   | Bin 0 -> 32357 bytes
 drivers/staging/crypto/cryptodev/lib/benchmark.c |  88 ++++++++++++
 drivers/staging/crypto/cryptodev/lib/benchmark.h |  18 +++
 drivers/staging/crypto/cryptodev/lib/combo.c     | 169 +++++++++++++++++++++++
 drivers/staging/crypto/cryptodev/lib/hash.c      | 160 +++++++++++++++++++++
 drivers/staging/crypto/cryptodev/lib/hash.h      |  20 +++
 drivers/staging/crypto/cryptodev/lib/main.c      |  61 ++++++++
 9 files changed, 526 insertions(+)
 create mode 100644 drivers/staging/crypto/cryptodev/lib/Makefile
 create mode 100755 drivers/staging/crypto/cryptodev/lib/benchmark
 create mode 100644 drivers/staging/crypto/cryptodev/lib/benchmark.c
 create mode 100644 drivers/staging/crypto/cryptodev/lib/benchmark.h
 create mode 100644 drivers/staging/crypto/cryptodev/lib/combo.c
 create mode 100644 drivers/staging/crypto/cryptodev/lib/hash.c
 create mode 100644 drivers/staging/crypto/cryptodev/lib/hash.h
 create mode 100644 drivers/staging/crypto/cryptodev/lib/main.c

diff --git a/drivers/staging/crypto/cryptodev/.gitignore b/drivers/staging/crypto/cryptodev/.gitignore
index b5513916f3b7..894394ec7980 100644
--- a/drivers/staging/crypto/cryptodev/.gitignore
+++ b/drivers/staging/crypto/cryptodev/.gitignore
@@ -21,3 +21,4 @@ version.h
 tests/cipher-aead
 tests/fullspeed
 examples/aes
+lib/benchmark
diff --git a/drivers/staging/crypto/cryptodev/lib/Makefile b/drivers/staging/crypto/cryptodev/lib/Makefile
new file mode 100644
index 000000000000..460b4ba41efe
--- /dev/null
+++ b/drivers/staging/crypto/cryptodev/lib/Makefile
@@ -0,0 +1,9 @@
+CFLAGS=-g -O2 -Wall -DDEBUG
+
+all: benchmark
+
+benchmark: benchmark.c hash.c main.c combo.c
+	gcc $(CFLAGS) -o $@ $^ -lssl
+
+clean:
+	rm -f *.o *~ benchmark
diff --git a/drivers/staging/crypto/cryptodev/lib/benchmark b/drivers/staging/crypto/cryptodev/lib/benchmark
new file mode 100755
index 0000000000000000000000000000000000000000..5d4f30e6e37897bf46d6ab170f2e87e1d42ecacf
GIT binary patch
literal 32357
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

literal 0
HcmV?d00001

diff --git a/drivers/staging/crypto/cryptodev/lib/benchmark.c b/drivers/staging/crypto/cryptodev/lib/benchmark.c
new file mode 100644
index 000000000000..37e9adedf669
--- /dev/null
+++ b/drivers/staging/crypto/cryptodev/lib/benchmark.c
@@ -0,0 +1,88 @@
+/*
+ * Copyright (C) 2011 Free Software Foundation, Inc.
+ *
+ * This file is part of GnuTLS.
+ *
+ * GnuTLS is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * GnuTLS is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include <signal.h>
+#include <sys/time.h>
+#include <time.h>
+#include <unistd.h>
+#include "benchmark.h"
+
+int benchmark_must_finish = 0;
+
+static void
+alarm_handler (int signo)
+{
+  benchmark_must_finish = 1;
+}
+
+int start_benchmark(struct benchmark_st * st)
+{
+  int ret;
+  struct itimerval timer;
+  
+  memset(st, 0, sizeof(*st));
+
+  st->old_handler = signal (SIGPROF, alarm_handler);
+
+  ret = gettimeofday (&st->start, NULL);
+  if (ret < 0) {
+    perror("gettimeofday");
+    return -1;
+  }
+
+  benchmark_must_finish = 0;
+
+  memset(&timer, 0, sizeof(timer));
+  timer.it_value.tv_sec = 0;
+  timer.it_value.tv_usec = 100*1000;
+
+  ret = setitimer(ITIMER_PROF, &timer, NULL);
+  if (ret < 0) {
+    perror("setitimer");
+    return -1;
+  }
+  
+  return 0;
+}
+
+/* Returns -1 on error or 0 on success.
+ * elapsed: the elapsed time in milliseconds 
+ */
+int stop_benchmark(struct benchmark_st * st, unsigned long * elapsed)
+{
+  unsigned long msecs;
+  struct timeval stop;
+  int ret;
+
+  signal(SIGPROF, st->old_handler);
+
+  ret = gettimeofday (&stop, NULL);
+  if (ret < 0)
+    return -1;
+
+  msecs = (stop.tv_sec * 1000 + stop.tv_usec / 1000 -
+          (st->start.tv_sec * 1000 + st->start.tv_usec / (1000)));
+          
+  if (elapsed) *elapsed = msecs;
+
+  return 0;
+}
+
diff --git a/drivers/staging/crypto/cryptodev/lib/benchmark.h b/drivers/staging/crypto/cryptodev/lib/benchmark.h
new file mode 100644
index 000000000000..173552ec497f
--- /dev/null
+++ b/drivers/staging/crypto/cryptodev/lib/benchmark.h
@@ -0,0 +1,18 @@
+#include <sys/time.h>
+#include <time.h>
+#include <sys/time.h>
+#include <signal.h>
+
+typedef void (*sighandler_t)(int);
+
+struct benchmark_st
+{
+  struct timeval start;
+  sighandler_t old_handler;
+};
+
+extern int benchmark_must_finish;
+
+int start_benchmark(struct benchmark_st * st);
+int stop_benchmark(struct benchmark_st * st, unsigned long * elapsed);
+
diff --git a/drivers/staging/crypto/cryptodev/lib/combo.c b/drivers/staging/crypto/cryptodev/lib/combo.c
new file mode 100644
index 000000000000..29160ffd4749
--- /dev/null
+++ b/drivers/staging/crypto/cryptodev/lib/combo.c
@@ -0,0 +1,169 @@
+/*
+ * Demo on how to use /dev/crypto device for ciphering.
+ *
+ * Placed under public domain.
+ *
+ */
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <crypto/cryptodev.h>
+#include "benchmark.h"
+#include "hash.h"
+
+int aead_ctx_init(struct cryptodev_ctx* ctx, int cipher, int hash, void* key, int key_size, int cfd)
+{
+#ifdef CIOCGSESSINFO
+	struct session_info_op siop;
+#endif
+
+	memset(ctx, 0, sizeof(*ctx));
+	ctx->cfd = cfd;
+
+	ctx->sess.mac = hash;
+	ctx->sess.cipher = cipher;
+	ctx->sess.key = key;
+	ctx->sess.keylen = key_size;
+
+	if (ioctl(ctx->cfd, CIOCGSESSION, &ctx->sess)) {
+		perror("ioctl(CIOCGSESSION)");
+		return -1;
+	}
+
+#ifdef CIOCGSESSINFO
+	memset(&siop, 0, sizeof(siop));
+	siop.ses = ctx->sess.ses;
+	if (ioctl(ctx->cfd, CIOCGSESSINFO, &siop)) {
+		perror("ioctl(CIOCGSESSINFO)");
+		return -1;
+	}
+	printf("Got %s-%s with drivers %s and %s\n",
+			siop.cipher_info.cra_name, siop.hash_info.cra_name, 
+			siop.cipher_info.cra_driver_name, siop.hash_info.cra_driver_name);
+	/*printf("Alignmask is %x\n", (unsigned int)siop.alignmask);*/
+	ctx->alignmask = siop.alignmask;
+#endif
+	return 0;
+}
+
+void aead_ctx_deinit(struct cryptodev_ctx* ctx) 
+{
+	if (ioctl(ctx->cfd, CIOCFSESSION, &ctx->sess.ses)) {
+		perror("ioctl(CIOCFSESSION)");
+	}
+}
+
+int
+aead_encrypt(struct cryptodev_ctx* ctx, const void* iv, const void* plaintext, void* ciphertext, size_t size, void* digest)
+{
+	struct crypt_auth_op cryp;
+	
+	memset(&cryp, 0, sizeof(cryp));
+
+	/* Encrypt data.in to data.encrypted */
+	cryp.ses = ctx->sess.ses;
+	cryp.len = size;
+	cryp.iv = (void*)iv;
+	cryp.iv_len = 16;
+	cryp.src = (void*)plaintext;
+	cryp.dst = (void*)ciphertext;
+	cryp.flags = COP_FLAG_AEAD_TLS_TYPE;
+
+	if (ioctl(ctx->cfd, CIOCAUTHCRYPT, &cryp)) {
+		perror("ioctl(CIOCAUTHCRYPT)");
+		return -1;
+	}
+
+	return 0;
+}
+
+static const int sizes[] = {64, 256, 512, 1024, 4096, 16*1024};
+
+
+int aead_test(int cipher, int mac, void* ukey, int ukey_size, 
+		void* user_ctx, void (*user_combo)(void* user_ctx, void* plaintext, void* ciphertext, int size, void* res))
+{
+	int cfd = -1, i, ret;
+	struct cryptodev_ctx ctx;
+	uint8_t digest[AALG_MAX_RESULT_LEN];
+	char text[16*1024];
+	char ctext[16*1024];
+	char iv[16];
+	unsigned long elapsed, counted;
+	double t1, t2;
+	struct benchmark_st bst;
+
+	/* Open the crypto device */
+	cfd = open("/dev/crypto", O_RDWR, 0);
+	if (cfd < 0) {
+		perror("open(/dev/crypto)");
+		return -1;
+	}
+
+	aead_ctx_init(&ctx, cipher, mac, ukey, ukey_size, cfd);
+	
+	for (i=0;i<sizeof(sizes)/sizeof(sizes[0]);i++) {
+		counted = 0;
+		ret = start_benchmark(&bst);
+		if (ret < 0) {
+			ret = -1;
+			goto finish;
+		}
+
+		do {
+			if (aead_encrypt(&ctx, iv, text, text, sizes[i], digest) < 0)
+				return -2;
+			counted += sizes[i];
+		} while(benchmark_must_finish==0);
+		
+		ret = stop_benchmark(&bst, &elapsed);
+		if (ret < 0) {
+			ret = -1;
+			goto finish;
+		}
+	
+		t1 = (double)counted/(double)elapsed;
+
+		/* now check the user function */
+		counted = 0;
+		ret = start_benchmark(&bst);
+		if (ret < 0) {
+			ret = -1;
+			goto finish;
+		}
+
+		do {
+			user_combo(user_ctx, text, ctext, sizes[i], digest);
+			counted += sizes[i];
+		} while(benchmark_must_finish==0);
+		
+		ret = stop_benchmark(&bst, &elapsed);
+		if (ret < 0) {
+			ret = -1;
+			goto finish;
+		}
+	
+		t2 = (double)counted/(double)elapsed;
+		
+		if (t1 > t2) {
+			ret = sizes[i];
+			goto finish;
+		}
+#ifdef DEBUG
+		printf("%d: kernel: %.4f bytes/msec, user: %.4f bytes/msec\n", sizes[i], t1, t2);
+#endif
+	}
+	
+	ret = -1;
+finish:
+	aead_ctx_deinit(&ctx);
+
+	/* Close the original descriptor */
+	if (close(cfd)) {
+		perror("close(cfd)");
+		return 1;
+	}
+	return ret;
+}
diff --git a/drivers/staging/crypto/cryptodev/lib/hash.c b/drivers/staging/crypto/cryptodev/lib/hash.c
new file mode 100644
index 000000000000..000d81b01165
--- /dev/null
+++ b/drivers/staging/crypto/cryptodev/lib/hash.c
@@ -0,0 +1,160 @@
+/*
+ * Demo on how to use /dev/crypto device for ciphering.
+ *
+ * Placed under public domain.
+ *
+ */
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <crypto/cryptodev.h>
+#include "hash.h"
+#include "benchmark.h"
+
+int hash_ctx_init(struct cryptodev_ctx* ctx, int hash, int cfd)
+{
+#ifdef CIOCGSESSINFO
+	struct session_info_op siop;
+#endif
+
+	memset(ctx, 0, sizeof(*ctx));
+	ctx->cfd = cfd;
+
+	ctx->sess.mac = hash;
+
+	if (ioctl(ctx->cfd, CIOCGSESSION, &ctx->sess)) {
+		perror("ioctl(CIOCGSESSION)");
+		return -1;
+	}
+
+#ifdef CIOCGSESSINFO
+	siop.ses = ctx->sess.ses;
+	if (ioctl(ctx->cfd, CIOCGSESSINFO, &siop)) {
+		perror("ioctl(CIOCGSESSINFO)");
+		return -1;
+	}
+	printf("Got %s with driver %s\n",
+			siop.hash_info.cra_name, siop.hash_info.cra_driver_name);
+	/*printf("Alignmask is %x\n", (unsigned int)siop.alignmask);*/
+	ctx->alignmask = siop.alignmask;
+#endif
+	return 0;
+}
+
+void hash_ctx_deinit(struct cryptodev_ctx* ctx) 
+{
+	if (ioctl(ctx->cfd, CIOCFSESSION, &ctx->sess.ses)) {
+		perror("ioctl(CIOCFSESSION)");
+	}
+}
+
+int
+hash(struct cryptodev_ctx* ctx, const void* text, size_t size, void* digest)
+{
+	struct crypt_op cryp;
+	
+	memset(&cryp, 0, sizeof(cryp));
+
+	/* Encrypt data.in to data.encrypted */
+	cryp.ses = ctx->sess.ses;
+	cryp.len = size;
+	cryp.src = (void*)text;
+	cryp.mac = digest;
+	if (ioctl(ctx->cfd, CIOCCRYPT, &cryp)) {
+		perror("ioctl(CIOCCRYPT)");
+		return -1;
+	}
+
+	return 0;
+}
+
+static const int sizes[] = {64, 256, 512, 1024, 4096, 16*1024};
+
+/* Worst case running time: around 1.2 secs
+ */
+int hash_test(int algo, void (*user_hash)(void* text, int size, void* res))
+{
+	int cfd = -1, i, ret;
+	struct cryptodev_ctx ctx;
+	uint8_t digest[AALG_MAX_RESULT_LEN];
+	char text[16*1024];
+	unsigned long elapsed, counted;
+	double t1, t2;
+	struct benchmark_st bst;
+
+	/* Open the crypto device */
+	cfd = open("/dev/crypto", O_RDWR, 0);
+	if (cfd < 0) {
+		perror("open(/dev/crypto)");
+		return -1;
+	}
+
+	hash_ctx_init(&ctx, algo, cfd);
+	
+	for (i=0;i<sizeof(sizes)/sizeof(sizes[0]);i++) {
+		counted = 0;
+		ret = start_benchmark(&bst);
+		if (ret < 0) {
+			ret = -1;
+			goto finish;
+		}
+
+		do {
+			hash(&ctx, text, sizes[i], digest);
+			counted += sizes[i];
+		} while(benchmark_must_finish==0);
+		
+		ret = stop_benchmark(&bst, &elapsed);
+		if (ret < 0) {
+			ret = -1;
+			goto finish;
+		}
+printf("counted: %ld\n", counted);
+printf("elapsed: %ld\n", elapsed);
+		t1 = (double)counted/(double)elapsed;
+
+		/* now check the user function */
+		ret = start_benchmark(&bst);
+		if (ret < 0) {
+			ret = -1;
+			goto finish;
+		}
+
+		counted = 0;
+
+		do {
+			user_hash(text, sizes[i], digest);
+			counted += sizes[i];
+		} while(benchmark_must_finish==0);
+		
+		ret = stop_benchmark(&bst, &elapsed);
+		if (ret < 0) {
+			ret = -1;
+			goto finish;
+		}
+	
+		t2 = (double)counted/(double)elapsed;
+		
+		if (t1 > t2) {
+			ret = sizes[i];
+			goto finish;
+		}
+#ifdef DEBUG
+		printf("%d: kernel: %.4f bytes/msec, user: %.4f bytes/msec\n", sizes[i], t1, t2);
+#endif
+	}
+	
+	ret = -1;
+finish:
+	hash_ctx_deinit(&ctx);
+
+	/* Close the original descriptor */
+	if (close(cfd)) {
+		perror("close(cfd)");
+		return 1;
+	}
+	return ret;
+}
+
diff --git a/drivers/staging/crypto/cryptodev/lib/hash.h b/drivers/staging/crypto/cryptodev/lib/hash.h
new file mode 100644
index 000000000000..1883beaaca57
--- /dev/null
+++ b/drivers/staging/crypto/cryptodev/lib/hash.h
@@ -0,0 +1,20 @@
+#ifndef HASH_H
+# define HASH_H
+
+#include <stdint.h>
+
+struct cryptodev_ctx {
+	int cfd;
+	struct session_op sess;
+	uint16_t alignmask;
+};
+
+int hash_ctx_init(struct cryptodev_ctx* ctx, int hash, int cfd);
+void hash_ctx_deinit(struct cryptodev_ctx* ctx);
+int hash(struct cryptodev_ctx* ctx, const void* text, size_t size, void* digest);
+int hash_test(int algo, void (*user_hash)(void* text, int size, void* res));
+
+int aead_test(int cipher, int mac, void* ukey, int ukey_size, 
+		void* user_ctx, void (*user_combo)(void* user_ctx, void* plaintext, void* ciphertext, int size, void* res));
+
+#endif
diff --git a/drivers/staging/crypto/cryptodev/lib/main.c b/drivers/staging/crypto/cryptodev/lib/main.c
new file mode 100644
index 000000000000..4e0474b65edb
--- /dev/null
+++ b/drivers/staging/crypto/cryptodev/lib/main.c
@@ -0,0 +1,61 @@
+/*
+ * Demo on how to use /dev/crypto device for ciphering.
+ *
+ * Placed under public domain.
+ *
+ */
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <crypto/cryptodev.h>
+#include <openssl/sha.h>
+#include <openssl/aes.h>
+#include "hash.h"
+
+void sha_hash(void* text, int size, void* digest)
+{
+SHA_CTX ctx;
+
+	SHA_Init(&ctx);
+	
+	SHA_Update(&ctx, text, size);
+	
+	SHA_Final(digest, &ctx);
+}
+
+void aes_sha_combo(void* ctx, void* plaintext, void* ciphertext, int size, void* tag)
+{
+SHA_CTX sha_ctx;
+uint8_t iv[16];
+AES_KEY* key = ctx;
+
+	SHA_Init(&sha_ctx);
+	
+	SHA_Update(&sha_ctx, plaintext, size);
+	
+	SHA_Final(tag, &sha_ctx);
+	
+	AES_cbc_encrypt(plaintext, ciphertext, size, key, iv, 1);
+}
+
+int main()
+{
+int ret;
+AES_KEY key;
+uint8_t ukey[16];
+
+	ret = hash_test(CRYPTO_SHA1, sha_hash);
+	if (ret > 0)
+		printf("SHA1 in kernel outperforms user-space after %d input bytes\n", ret);
+	
+	memset(ukey, 0xaf, sizeof(ukey));
+	AES_set_encrypt_key(ukey, 16, &key);
+	
+	ret = aead_test(CRYPTO_AES_CBC, CRYPTO_SHA1, ukey, 16, &key, aes_sha_combo);
+	if (ret > 0)
+		printf("AES-SHA1 in kernel outperforms user-space after %d input bytes\n", ret);
+	
+	return 0;
+}
-- 
1.8.1.2

