From a7de6ee00c2c61b801c60d5f0a7a3b4c18208b1d Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos <nmav@gnutls.org>
Date: Fri, 24 Feb 2012 23:09:34 +0100
Subject: [PATCH 191/291] cryptodev: return

---
 drivers/staging/crypto/cryptodev/NEWS      |  6 ++++++
 drivers/staging/crypto/cryptodev/authenc.c | 12 ++++++------
 2 files changed, 12 insertions(+), 6 deletions(-)

diff --git a/drivers/staging/crypto/cryptodev/NEWS b/drivers/staging/crypto/cryptodev/NEWS
index 3de07b2ec246..d574d025e1b8 100644
--- a/drivers/staging/crypto/cryptodev/NEWS
+++ b/drivers/staging/crypto/cryptodev/NEWS
@@ -1,3 +1,9 @@
+Version 1.3 (unreleased)
+
+* Return EBADMSG instead of ECANCELED on tag verification
+failure in authenc modes.
+
+
 Version 1.2 (released 2012-02-24)
 
 * In kernels that do not distinguish between hw 
diff --git a/drivers/staging/crypto/cryptodev/authenc.c b/drivers/staging/crypto/cryptodev/authenc.c
index ae04de2b1e35..122bcfc390e7 100644
--- a/drivers/staging/crypto/cryptodev/authenc.c
+++ b/drivers/staging/crypto/cryptodev/authenc.c
@@ -308,7 +308,7 @@ static int verify_tls_record_pad( struct scatterlist *dst_sg, int len, int block
 
 	if (pad_size+1 > len) {
 		dprintk(1, KERN_ERR, "Pad size: %d\n", pad_size);
-		return -ECANCELED;
+		return -EBADMSG;
 	}
 
 	scatterwalk_map_and_copy(pad, dst_sg, len-pad_size-1, pad_size+1, 0);
@@ -316,14 +316,14 @@ static int verify_tls_record_pad( struct scatterlist *dst_sg, int len, int block
 	for (i=0;i<pad_size;i++)
 		if (pad[i] != pad_size) {
 			dprintk(1, KERN_ERR, "Pad size: %d, pad: %d\n", pad_size, (int)pad[i]);
-			return -ECANCELED;
+			return -EBADMSG;
 		}
 
 	return pad_size+1;
 }
 
 /* Authenticate and encrypt the TLS way (also perform padding). 
- * During decryption it verifies the pad and tag and returns -ECANCELED on error.
+ * During decryption it verifies the pad and tag and returns -EBADMSG on error.
  */
 static int
 tls_auth_n_crypt(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcaop,
@@ -436,7 +436,7 @@ tls_auth_n_crypt(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcaop,
 
 			if (memcmp(vhash, hash_output, caop->tag_len) != 0 || fail != 0) {
 				dprintk(2, KERN_ERR, "MAC verification failed (tag_len: %d)\n", caop->tag_len);
-				return -ECANCELED;
+				return -EBADMSG;
 			}
 		}
 	}
@@ -445,7 +445,7 @@ tls_auth_n_crypt(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcaop,
 }
 
 /* Authenticate and encrypt the SRTP way. During decryption
- * it verifies the tag and returns -ECANCELED on error.
+ * it verifies the tag and returns -EBADMSG on error.
  */
 static int
 srtp_auth_n_crypt(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcaop,
@@ -516,7 +516,7 @@ srtp_auth_n_crypt(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcaop,
 
 			if (memcmp(vhash, hash_output, caop->tag_len) != 0 || fail != 0) {
 				dprintk(2, KERN_ERR, "MAC verification failed\n");
-				return -ECANCELED;
+				return -EBADMSG;
 			}
 		}
 
-- 
2.1.0

