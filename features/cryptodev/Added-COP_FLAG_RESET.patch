From fb69be74c939a129e8d380021bc9edfa45000906 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos <nmav@gnutls.org>
Date: Tue, 21 Feb 2012 18:53:11 +0100
Subject: [PATCH 180/292] Added COP_FLAG_RESET

---
 drivers/staging/crypto/cryptodev/NEWS               |  3 +++
 drivers/staging/crypto/cryptodev/crypto/cryptodev.h |  1 +
 drivers/staging/crypto/cryptodev/main.c             | 15 +++++++++++++--
 3 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/crypto/cryptodev/NEWS b/drivers/staging/crypto/cryptodev/NEWS
index 1a38772086b0..7ccc3bffc22f 100644
--- a/drivers/staging/crypto/cryptodev/NEWS
+++ b/drivers/staging/crypto/cryptodev/NEWS
@@ -6,6 +6,9 @@ flag unconditionally.
 
 * camelia was renamed to camellia.
 
+* Added COP_FLAG_RESET to allow resetting the state
+in multi-update.
+
 
 Version 1.1 (released 2012-02-20)
 
diff --git a/drivers/staging/crypto/cryptodev/crypto/cryptodev.h b/drivers/staging/crypto/cryptodev/crypto/cryptodev.h
index ebd61690a2c3..32c1c6e56829 100644
--- a/drivers/staging/crypto/cryptodev/crypto/cryptodev.h
+++ b/drivers/staging/crypto/cryptodev/crypto/cryptodev.h
@@ -213,6 +213,7 @@ struct crypt_auth_op {
                                           * TLS protocol rules */
 #define COP_FLAG_AEAD_SRTP_TYPE  (1 << 5) /* authenticate and encrypt using the 
                                            * SRTP protocol rules */
+#define COP_FLAG_RESET		(1 << 6) /* multi-update reset the state */
 
 
 /* Stuff for bignum arithmetic and public key
diff --git a/drivers/staging/crypto/cryptodev/main.c b/drivers/staging/crypto/cryptodev/main.c
index bea9fb7669d8..0302f3ca0429 100644
--- a/drivers/staging/crypto/cryptodev/main.c
+++ b/drivers/staging/crypto/cryptodev/main.c
@@ -113,8 +113,10 @@ __crypto_run_std(struct csession *ses_ptr, struct crypt_op *cop)
 	nbytes = cop->len;
 	data = (char *)__get_free_page(GFP_KERNEL);
 
-	if (unlikely(!data))
+	if (unlikely(!data)) {
+		dprintk(1, KERN_ERR, "Error getting free page.\n");
 		return -ENOMEM;
+        }
 
 	bufsize = PAGE_SIZE < nbytes ? PAGE_SIZE : nbytes;
 
@@ -125,6 +127,7 @@ __crypto_run_std(struct csession *ses_ptr, struct crypt_op *cop)
 		size_t current_len = nbytes > bufsize ? bufsize : nbytes;
 
 		if (unlikely(copy_from_user(data, src, current_len))) {
+ 		        dprintk(1, KERN_ERR, "Error copying %d bytes from user address %p.\n", (int)current_len, src);
 			ret = -EFAULT;
 			break;
 		}
@@ -133,11 +136,14 @@ __crypto_run_std(struct csession *ses_ptr, struct crypt_op *cop)
 
 		ret = hash_n_crypt(ses_ptr, cop, &sg, &sg, current_len);
 
-		if (unlikely(ret))
+		if (unlikely(ret)) {
+ 		        dprintk(1, KERN_ERR, "hash_n_crypt failed.\n");
 			break;
+                }
 
 		if (ses_ptr->cdata.init != 0) {
 			if (unlikely(copy_to_user(dst, data, current_len))) {
+         		        dprintk(1, KERN_ERR, "could not copy to user.\n");
 				ret = -EFAULT;
 				break;
 			}
@@ -201,6 +207,11 @@ int crypto_run(struct fcrypt *fcr, struct kernel_crypt_op *kcop)
 				"error in cryptodev_hash_reset()\n");
 			goto out_unlock;
 		}
+		
+		if (cop->flags & COP_FLAG_RESET) {
+		        ret = 0;
+                        goto out_unlock;
+                }
 	}
 
 	if (ses_ptr->cdata.init != 0) {
-- 
1.8.1.2

