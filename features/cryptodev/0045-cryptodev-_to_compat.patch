From 523997653e05bd472399a867a9c2ae825e684ffc Mon Sep 17 00:00:00 2001
From: Phil Sutter <phil.sutter@viprinet.com>
Date: Thu, 17 Jun 2010 11:40:07 +0200
Subject: [PATCH 045/291] cryptodev: *_to_compat,

In order to warning-free convert a 32bit integer into a 64bit pointer,
casting in two steps is needed: first to adjust the variable size to
64bit, then to actually convert the integer into a pointer. The other
direction is easier: after converting the pointer to an integer,
assignment to a smaller variable can be done without warning.
---
 drivers/staging/crypto/cryptodev/cryptodev_main.c | 24 +++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/drivers/staging/crypto/cryptodev/cryptodev_main.c b/drivers/staging/crypto/cryptodev/cryptodev_main.c
index 858970b39bfb..291627f680fa 100644
--- a/drivers/staging/crypto/cryptodev/cryptodev_main.c
+++ b/drivers/staging/crypto/cryptodev/cryptodev_main.c
@@ -586,9 +586,9 @@ static inline void
 compat_to_session_op(struct compat_session_op *compat, struct session_op *sop)
 {
 	memcpy(sop, compat, sizeof(uint32_t) * 3);
-	sop->key       = (uint8_t *)compat->key;
+	sop->key       = (uint8_t *)(unsigned long)compat->key;
 	sop->mackeylen = compat->mackeylen;
-	sop->mackey    = (uint8_t *)compat->mackey;
+	sop->mackey    = (uint8_t *)(unsigned long)compat->mackey;
 	sop->ses       = compat->ses;
 }
 
@@ -596,9 +596,9 @@ static inline void
 session_op_to_compat(struct session_op *sop, struct compat_session_op *compat)
 {
 	memcpy(compat, sop, sizeof(uint32_t) * 3);
-	compat->key       = (uint32_t)sop->key;
+	compat->key       = (unsigned long)sop->key;
 	compat->mackeylen = sop->mackeylen;
-	compat->mackey    = (uint32_t)sop->mackey;
+	compat->mackey    = (unsigned long)sop->mackey;
 	compat->ses       = sop->ses;
 }
 
@@ -606,20 +606,20 @@ static inline void
 compat_to_crypto_op(struct compat_crypt_op *compat, struct crypt_op *cop)
 {
 	memcpy(cop, compat, sizeof(uint32_t) * 2 + sizeof(uint16_t) * 2);
-	cop->src = (uint8_t *)compat->src;
-	cop->dst = (uint8_t *)compat->dst;
-	cop->mac = (uint8_t *)compat->mac;
-	cop->iv  = (uint8_t *)compat->iv;
+	cop->src = (uint8_t *)(unsigned long)compat->src;
+	cop->dst = (uint8_t *)(unsigned long)compat->dst;
+	cop->mac = (uint8_t *)(unsigned long)compat->mac;
+	cop->iv  = (uint8_t *)(unsigned long)compat->iv;
 }
 
 static inline void
 crypto_op_to_compat(struct crypt_op *cop, struct compat_crypt_op *compat)
 {
 	memcpy(compat, cop, sizeof(uint32_t) * 2 + sizeof(uint16_t) * 2);
-	compat->src = (uint32_t)cop->src;
-	compat->dst = (uint32_t)cop->dst;
-	compat->mac = (uint32_t)cop->mac;
-	compat->iv  = (uint32_t)cop->iv;
+	compat->src = (unsigned long)cop->src;
+	compat->dst = (unsigned long)cop->dst;
+	compat->mac = (unsigned long)cop->mac;
+	compat->iv  = (unsigned long)cop->iv;
 }
 
 static long
-- 
2.1.0

