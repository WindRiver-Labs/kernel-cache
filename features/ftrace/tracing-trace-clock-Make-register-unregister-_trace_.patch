From 86d3c107b029ca5ed7174e6db803c8698ba7c9bb Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Thu, 30 Sep 2010 03:26:18 -0700
Subject: [PATCH 3/4] tracing/trace-clock: Make {register, unregister}_trace_clock() robust

Refer to the calling of {get, put}_trace_clock() in ltt/ltt-tracer.c,
necessary mutex lock and cpu-hotplug disabling are added for {register,
unregister}_trace_clock().

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 kernel/trace/trace_clock.c |   25 +++++++++++++++++++++++--
 1 files changed, 23 insertions(+), 2 deletions(-)

diff --git a/kernel/trace/trace_clock.c b/kernel/trace/trace_clock.c
index 709aaa9..11efc61 100644
--- a/kernel/trace/trace_clock.c
+++ b/kernel/trace/trace_clock.c
@@ -150,31 +150,52 @@ static bool trace_clock_registered __read_mostly;
 static bool sched_clock_has_hres __read_mostly;
 static bool trace_clock_read64_ns_has_hres __read_mostly;
 
+static DEFINE_MUTEX(trace_clock_mutex);
+/*
+ * trace_clock_lock/trace_clock_unlock also disables cpu hotplug.
+ */
+void trace_clock_lock(void)
+{
+	mutex_lock(&trace_clock_mutex);
+	get_online_cpus();
+}
+
+void trace_clock_unlock(void)
+{
+	put_online_cpus();
+	mutex_unlock(&trace_clock_mutex);
+}
+
 void notrace register_trace_clock(void)
 {
+	trace_clock_lock();
 	if (trace_clock_registered)
-		return;
+		goto out;
 	/*
 	 * If there is a high resolution sched_clock(), no need to
 	 * register another one.
 	 */
 	if (sched_clock_has_hres)
-		return;
+		goto out;
 
 	if (trace_clock_read64_ns_has_hres) {
 		get_trace_clock();
 		ftrace_trace_clock = trace_clock_read64_ns;
 		trace_clock_registered = 1;
 	}
+out:
+	trace_clock_unlock();
 }
 
 void notrace unregister_trace_clock(void)
 {
+	trace_clock_lock();
 	if (trace_clock_registered) {
 		trace_clock_registered = 0;
 		ftrace_trace_clock = sched_clock;
 		put_trace_clock();
 	}
+	trace_clock_unlock();
 }
 
 static int __init check_res_of_trace_clock(void)
-- 
1.6.5.2

