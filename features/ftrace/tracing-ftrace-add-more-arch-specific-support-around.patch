From 4d9daf17700710e970290513fb4b4df016077068 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Thu, 2 Sep 2010 03:52:27 -0700
Subject: [PATCH 1/2] tracing/ftrace: add more arch specific support around modifying code

ftrace_arch_code_modify_prepare/post_process() are added to do arch
specific operations before/after modifying code in kernel, Similarly,
this patch adds ftrace_arch_module_modify_prepare/post_process()
before/after modifying the code in module.

To distinguish the different opertions for different commands, the
command argument is passed to ftrace_arch_code_modify_post_process() and
accordingly, the command flags are moved to ftrace.h for the archs.

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 arch/x86/kernel/ftrace.c |    2 +-
 include/linux/ftrace.h   |   13 ++++++++++++-
 kernel/trace/ftrace.c    |   46 ++++++++++++++++++++++++++++++++--------------
 3 files changed, 45 insertions(+), 16 deletions(-)

diff --git a/arch/x86/kernel/ftrace.c b/arch/x86/kernel/ftrace.c
index cd37469..88b241b 100644
--- a/arch/x86/kernel/ftrace.c
+++ b/arch/x86/kernel/ftrace.c
@@ -53,7 +53,7 @@ int ftrace_arch_code_modify_prepare(void)
 	return 0;
 }
 
-int ftrace_arch_code_modify_post_process(void)
+int ftrace_arch_code_modify_post_process(void *data)
 {
 	modifying_code = 0;
 	set_kernel_text_ro();
diff --git a/include/linux/ftrace.h b/include/linux/ftrace.h
index 01e6ade..7eb50a7 100644
--- a/include/linux/ftrace.h
+++ b/include/linux/ftrace.h
@@ -42,6 +42,17 @@ enum ftrace_tracing_type_t {
 /* Current tracing type, default is FTRACE_TYPE_ENTER */
 extern enum ftrace_tracing_type_t ftrace_tracing_type;
 
+/* Tracing command flags */
+enum {
+	FTRACE_ENABLE_CALLS		= (1 << 0),
+	FTRACE_DISABLE_CALLS		= (1 << 1),
+	FTRACE_UPDATE_TRACE_FUNC	= (1 << 2),
+	FTRACE_ENABLE_MCOUNT		= (1 << 3),
+	FTRACE_DISABLE_MCOUNT		= (1 << 4),
+	FTRACE_START_FUNC_RET		= (1 << 5),
+	FTRACE_STOP_FUNC_RET		= (1 << 6),
+};
+
 /**
  * ftrace_stop - stop function tracer.
  *
@@ -108,7 +119,7 @@ struct ftrace_func_command {
 #ifdef CONFIG_DYNAMIC_FTRACE
 
 int ftrace_arch_code_modify_prepare(void);
-int ftrace_arch_code_modify_post_process(void);
+int ftrace_arch_code_modify_post_process(void *data);
 
 struct seq_file;
 
diff --git a/kernel/trace/ftrace.c b/kernel/trace/ftrace.c
index 2404b59..ee79207 100644
--- a/kernel/trace/ftrace.c
+++ b/kernel/trace/ftrace.c
@@ -851,16 +851,6 @@ struct ftrace_func_probe {
 	struct rcu_head		rcu;
 };
 
-enum {
-	FTRACE_ENABLE_CALLS		= (1 << 0),
-	FTRACE_DISABLE_CALLS		= (1 << 1),
-	FTRACE_UPDATE_TRACE_FUNC	= (1 << 2),
-	FTRACE_ENABLE_MCOUNT		= (1 << 3),
-	FTRACE_DISABLE_MCOUNT		= (1 << 4),
-	FTRACE_START_FUNC_RET		= (1 << 5),
-	FTRACE_STOP_FUNC_RET		= (1 << 6),
-};
-
 static int ftrace_filtered;
 
 static struct dyn_ftrace *ftrace_new_addrs;
@@ -1101,7 +1091,7 @@ int __weak ftrace_arch_code_modify_prepare(void)
  * archs can override this function if they must do something
  * after the modifying code is performed.
  */
-int __weak ftrace_arch_code_modify_post_process(void)
+int __weak ftrace_arch_code_modify_post_process(void *data)
 {
 	return 0;
 }
@@ -1137,7 +1127,7 @@ static void ftrace_run_update_code(int command)
 
 	stop_machine(__ftrace_modify_code, &command, NULL);
 
-	ret = ftrace_arch_code_modify_post_process();
+	ret = ftrace_arch_code_modify_post_process(&command);
 	FTRACE_WARN_ON(ret);
 }
 
@@ -2629,6 +2619,25 @@ static __init int ftrace_init_dyn_debugfs(struct dentry *d_tracer)
 	return 0;
 }
 
+/*
+ * archs can override this function if they must do something
+ * before the modifying code in module is performed.
+ */
+
+int __weak ftrace_arch_module_modify_prepare(void)
+{
+	return 0;
+}
+
+/*
+ * archs can override this function if they must do something
+ * after the modifying code in module is performed.
+ */
+int __weak ftrace_arch_module_modify_post_process(void)
+{
+	return 0;
+}
+
 static int ftrace_process_locs(struct module *mod,
 			       unsigned long *start,
 			       unsigned long *end)
@@ -2636,6 +2645,7 @@ static int ftrace_process_locs(struct module *mod,
 	unsigned long *p;
 	unsigned long addr;
 	unsigned long flags;
+	int ret = 0;
 
 	mutex_lock(&ftrace_lock);
 	p = start;
@@ -2652,13 +2662,21 @@ static int ftrace_process_locs(struct module *mod,
 		ftrace_record_ip(addr);
 	}
 
+	ret = ftrace_arch_module_modify_prepare();
+	FTRACE_WARN_ON(ret);
+	if (ret)
+		goto out;
+
 	/* disable interrupts to prevent kstop machine */
 	local_irq_save(flags);
 	ftrace_update_code(mod);
 	local_irq_restore(flags);
-	mutex_unlock(&ftrace_lock);
 
-	return 0;
+	ret = ftrace_arch_module_modify_post_process();
+	FTRACE_WARN_ON(ret);
+out:
+	mutex_unlock(&ftrace_lock);
+	return ret;
 }
 
 #ifdef CONFIG_MODULES
-- 
1.6.5.2

