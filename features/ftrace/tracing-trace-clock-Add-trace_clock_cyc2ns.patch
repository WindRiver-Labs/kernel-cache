From 876b09bd33707a66edefeecda25892b2832c39d4 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Mon, 20 Sep 2010 15:24:53 +0800
Subject: [PATCH 1/8] tracing/trace-clock: Add trace_clock_cyc2ns()

The trace-clock framework added by Lttng only return cycles, but some
places may need nanosecs, i.e. Ftrace.

This patch adds trace_clock_cyc2ns() for trace-clock, so, some users can
get the nanosecs via trace_clock_cyc2ns(trace_clock_read64()).

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 kernel/trace/Makefile             |    3 +-
 kernel/trace/trace-clock-cyc2ns.c |   52 +++++++++++++++++++++++++++++++++++++
 2 files changed, 54 insertions(+), 1 deletions(-)
 create mode 100644 kernel/trace/trace-clock-cyc2ns.c

diff --git a/kernel/trace/Makefile b/kernel/trace/Makefile
index caad3d0..d14dbfd 100644
--- a/kernel/trace/Makefile
+++ b/kernel/trace/Makefile
@@ -62,6 +62,7 @@ ifeq ($(CONFIG_TRACING),y)
 obj-$(CONFIG_KGDB_KDB) += trace_kdb.o
 endif
 obj-$(CONFIG_HAVE_TRACE_CLOCK_32_TO_64) += trace-clock-32-to-64.o
-obj-$(CONFIG_HAVE_TRACE_CLOCK_GENERIC) += trace-clock.o
+obj-$(CONFIG_HAVE_TRACE_CLOCK_GENERIC) += trace-clock.o trace-clock-cyc2ns.o
+obj-$(CONFIG_HAVE_TRACE_CLOCK) += trace-clock-cyc2ns.o
 
 libftrace-y := ftrace.o
diff --git a/kernel/trace/trace-clock-cyc2ns.c b/kernel/trace/trace-clock-cyc2ns.c
new file mode 100644
index 0000000..4d80015
--- /dev/null
+++ b/kernel/trace/trace-clock-cyc2ns.c
@@ -0,0 +1,52 @@
+/*
+ * Code for converting cycles to nanosecs
+ *
+ * Copyright (C) 2010 Windriver Systems, Inc.
+ * Author: Wu Zhangjin <wuzhangjin@gmail.com>
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+
+#include <linux/clocksource.h>
+#include <linux/trace-clock.h>
+#include <linux/module.h>
+
+static u32 precalc_mult __read_mostly;
+static u32 precalc_shift __read_mostly;
+
+u64 notrace trace_clock_cyc2ns(u64 cycles)
+{
+	return ((u64) cycles * precalc_mult) >> precalc_shift;
+}
+EXPORT_SYMBOL_GPL(trace_clock_cyc2ns);
+
+/*
+ * The max time in seconds can be recorded in the virutal register
+ * without 64bit-arithmatic overflow.
+ *
+ * Herein, we set it as one year: 365*24*3600, who will trace the kernel
+ * more than one year?
+ */
+
+#define MAX_UPDATE_LENGTH	31536000
+
+/*
+ * precalc_mult_shift: - Precalculates the mult & shift for trace_clock_cyc2ns()
+ */
+static int __init precalc_mult_shift(void)
+{
+	clocks_calc_mult_shift(&precalc_mult, &precalc_shift,
+			trace_clock_frequency() *
+			trace_clock_freq_scale(), NSEC_PER_SEC,
+			MAX_UPDATE_LENGTH);
+
+	pr_info("Init trace_clock_cyc2ns: precalc_mult = %d, precalc_shift = %d\n",
+		precalc_mult, precalc_shift);
+
+	return 0;
+}
+
+/* Before SMP is up */
+early_initcall(precalc_mult_shift);
-- 
1.7.2.1

