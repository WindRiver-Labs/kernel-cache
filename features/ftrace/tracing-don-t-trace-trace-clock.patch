From e820ca7880db188a9672ba113d557fe83d4f0d02 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Mon, 20 Sep 2010 15:24:57 +0800
Subject: [PATCH 5/8] tracing: don't trace trace-clock

trace-clock is used for tracing, to reduce garbage information from the
tracing result, we'd better not trace it.

FYI:

"CFLAGS_REMOVE_trace-clock.o = -pg" prevents the compiler from compiling
the file with -pg and as a result, all of the functions in the related
files will not be traced.

"notrace" tells the compiler not to trace an indicated function.

functions with "_notrace" suffix is the notrace variants of the
functions, will not be traced by the preemptoff tracer.

the "raw_" variants of local_irq_* will not be traced by the irqsoff
tracer.

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 arch/arm/mach-omap2/Makefile                  |    5 +++++
 arch/arm/mach-omap2/trace-clock.c             |   24 ++++++++++++------------
 arch/arm/plat-omap/include/plat/trace-clock.h |    8 ++++----
 arch/x86/kernel/Makefile                      |    1 +
 4 files changed, 22 insertions(+), 16 deletions(-)

diff --git a/arch/arm/mach-omap2/Makefile b/arch/arm/mach-omap2/Makefile
index 6ba5ddd..c654f85 100644
--- a/arch/arm/mach-omap2/Makefile
+++ b/arch/arm/mach-omap2/Makefile
@@ -5,6 +5,11 @@
 # Common support
 obj-y := id.o io.o control.o mux.o devices.o serial.o gpmc.o timer-gp.o
 
+ifdef CONFIG_FUNCTION_TRACER
+# Do not profile debug and lowlevel utilities
+CFLAGS_REMOVE_trace-clock.o = -pg
+endif
+
 omap-2-3-common				= irq.o sdrc.o
 hwmod-common				= omap_hwmod.o \
 					  omap_hwmod_common_data.o
diff --git a/arch/arm/mach-omap2/trace-clock.c b/arch/arm/mach-omap2/trace-clock.c
index 2000a91..d0bfd76 100644
--- a/arch/arm/mach-omap2/trace-clock.c
+++ b/arch/arm/mach-omap2/trace-clock.c
@@ -122,7 +122,7 @@ static void clear_ccnt_ms(unsigned long data)
 	cpu = smp_processor_id();
 	pm_count = &per_cpu(pm_save_count, cpu);
 
-	local_irq_save(flags);
+	raw_local_irq_save(flags);
 
 	if (!pm_count->fast_clock_ready)
 		goto end;
@@ -135,7 +135,7 @@ static void clear_ccnt_ms(unsigned long data)
 	write_ctens(read_ctens() |  (1 << 31));	/* enable counter */
 	isb();
 end:
-	local_irq_restore(flags);
+	raw_local_irq_restore(flags);
 
 	mod_timer_pinned(&pm_count->clear_ccnt_ms_timer,
 		  jiffies + clear_ccnt_interval);
@@ -150,7 +150,7 @@ void save_sync_trace_clock(void)
 	unsigned long flags;
 	int cpu;
 
-	local_irq_save(flags);
+	raw_local_irq_save(flags);
 	cpu = smp_processor_id();
 	pm_count = &per_cpu(pm_save_count, cpu);
 	raw_spin_lock(&pm_count->lock);
@@ -174,7 +174,7 @@ end:
 	 * keeping track of time with ext. clock.
 	 */
 	write_ctens(read_ctens() & ~(1 << 31));	/* disable counter */
-	local_irq_restore(flags);
+	raw_local_irq_restore(flags);
 }
 
 /*
@@ -183,7 +183,7 @@ end:
  * Called after time is saved and before it is resynced.
  * Also used to periodically resync the drifting dvfs clock on external clock.
  */
-u64 _trace_clock_read_slow(void)
+u64 notrace _trace_clock_read_slow(void)
 {
 	struct pm_save_count *pm_count;
 	u64 ref_time;
@@ -228,7 +228,7 @@ void resync_trace_clock(void)
 	u32 regval;
 	int cpu;
 
-	local_irq_save(flags);
+	raw_local_irq_save(flags);
 	cpu = smp_processor_id();
 	pm_count = &per_cpu(pm_save_count, cpu);
 	raw_spin_lock(&pm_count->lock);
@@ -298,7 +298,7 @@ void resync_trace_clock(void)
 	}
 end:
 	raw_spin_unlock(&pm_count->lock);
-	local_irq_restore(flags);
+	raw_local_irq_restore(flags);
 }
 
 /*
@@ -350,7 +350,7 @@ static void clock_resync_timer_fct(unsigned long data)
 	cpu = smp_processor_id();
 	pm_count = &per_cpu(pm_save_count, cpu);
 
-	local_irq_save(flags);
+	raw_local_irq_save(flags);
 	local_fiq_disable();	/* disable fiqs for floor value */
 
 	/* Need to resync if we had more than 1 dvfs event in period */
@@ -359,7 +359,7 @@ static void clock_resync_timer_fct(unsigned long data)
 	pm_count->dvfs_count = 0;
 
 	local_fiq_enable();
-	local_irq_restore(flags);
+	raw_local_irq_restore(flags);
 }
 
 static void prepare_timer(int cpu)
@@ -496,7 +496,7 @@ static int __cpuinit hotcpu_callback(struct notifier_block *nb,
 			local_irq_save(flags);
 			pm_count->ext_32k = clock->read(clock);
 			pm_count->int_fast_clock = trace_clock_read64();
-			local_irq_restore(flags);
+			raw_local_irq_restore(flags);
 			pm_count->refcount = 1;
 			pm_count->dvfs_count = 0;
 			prepare_timer(hotcpu);
@@ -589,7 +589,7 @@ static int cpufreq_trace_clock(struct notifier_block *nb,
 	if (val != CPUFREQ_POSTCHANGE)
 		return 0;
 
-	local_irq_save(flags);
+	raw_local_irq_save(flags);
 	cpu = smp_processor_id();
 	WARN_ON_ONCE(cpu != freq->cpu);
 	pm_count = &per_cpu(pm_save_count, cpu);
@@ -633,7 +633,7 @@ static int cpufreq_trace_clock(struct notifier_block *nb,
 	pm_count->dvfs_count++;
 end:
 	raw_spin_unlock(&pm_count->lock);
-	local_irq_restore(flags);
+	raw_local_irq_restore(flags);
 	return 0;
 }
 
diff --git a/arch/arm/plat-omap/include/plat/trace-clock.h b/arch/arm/plat-omap/include/plat/trace-clock.h
index c4b1ccd..d0911c9 100644
--- a/arch/arm/plat-omap/include/plat/trace-clock.h
+++ b/arch/arm/plat-omap/include/plat/trace-clock.h
@@ -122,12 +122,12 @@ static inline u64 trace_clock_read64(void)
 #ifdef CONFIG_DEBUG_TRACE_CLOCK
 	unsigned long flags;
 
-	local_irq_save(flags);
+	raw_local_irq_save(flags);
 	per_cpu(last_clock_nest, smp_processor_id())++;
 	barrier();
 #endif
 
-	preempt_disable();
+	preempt_disable_notrace();
 	pm_count = &per_cpu(pm_save_count, smp_processor_id());
 	if (likely(pm_count->fast_clock_ready)) {
 		cf = &pm_count->cf[ACCESS_ONCE(pm_count->index)];
@@ -136,12 +136,12 @@ static inline u64 trace_clock_read64(void)
 	} else
 		val = _trace_clock_read_slow();
 	trace_clock_debug(val);
-	preempt_enable();
+	preempt_enable_notrace();
 
 #ifdef CONFIG_DEBUG_TRACE_CLOCK
 	barrier();
 	per_cpu(last_clock_nest, smp_processor_id())--;
-	local_irq_restore(flags);
+	raw_local_irq_restore(flags);
 #endif
 	return val;
 }
diff --git a/arch/x86/kernel/Makefile b/arch/x86/kernel/Makefile
index b114081..172862d 100644
--- a/arch/x86/kernel/Makefile
+++ b/arch/x86/kernel/Makefile
@@ -13,6 +13,7 @@ CFLAGS_REMOVE_rtc.o = -pg
 CFLAGS_REMOVE_paravirt-spinlocks.o = -pg
 CFLAGS_REMOVE_ftrace.o = -pg
 CFLAGS_REMOVE_early_printk.o = -pg
+CFLAGS_REMOVE_trace-clock.o = -pg
 endif
 
 #
-- 
1.7.2.1

