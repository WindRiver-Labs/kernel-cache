From 06ee8e28a4d071430370d9a937ed94b48a511881 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Sun, 21 Jun 2009 17:29:50 -0400
Subject: [PATCH 18/22] softirq: wait for online CPU before starting thread

The softirq threads are started at boot from when a CPU is tagged as
UP_PREPARE, but not necessarily online.  The softirq thread has a check
for cpu_offline, which is meant for thread exit on a CPU removal event.
However on slower hardware, it is possible to make it all the way to
this check before the CPU is marked as online at boot (during the
bogomips calculation).  When this happens, the softirq thread silently
sits in a corner and does nothing, waiting for the kthread_should_stop
that never comes.

Waiting on the CPU to come online before entering the main ksoftird
loop is the fix. The printk on death, while not strictly necessary,
sure would have saved a lot of debugging effort.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 kernel/softirq.c |   11 ++++++++++-
 1 files changed, 10 insertions(+), 1 deletions(-)

diff --git a/kernel/softirq.c b/kernel/softirq.c
index ce0cb85..3dc4097 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -745,6 +745,12 @@ static int run_ksoftirqd(void * __data)
 	current->flags |= PF_SOFTIRQ;
 	set_current_state(TASK_INTERRUPTIBLE);
 
+	/* Called from CPU_UP_PREPARE, CPU might not be online yet */
+	while (cpu_is_offline(data->cpu)) {
+		schedule();
+		set_current_state(TASK_INTERRUPTIBLE);
+	}
+
 	while (!kthread_should_stop()) {
 		preempt_disable();
 		if (!(local_softirq_pending() & mask)) {
@@ -759,8 +765,11 @@ static int run_ksoftirqd(void * __data)
 			/* Preempt disable stops cpu going offline.
 			   If already offline, we'll be on wrong CPU:
 			   don't process */
-			if (cpu_is_offline(data->cpu))
+			if (cpu_is_offline(data->cpu)) {
+				printk("cpu%ld offline, %s awaiting death\n",
+					data->cpu, current->comm);
 				goto wait_to_die;
+			}
 
 			local_irq_disable();
 			set_softirq_pending(local_softirq_pending() & ~mask);
-- 
1.7.0

