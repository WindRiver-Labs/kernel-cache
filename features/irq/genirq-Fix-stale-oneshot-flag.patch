From 162c97ffe986df2b0936772474a9e811059ba8ed Mon Sep 17 00:00:00 2001
From: Thomas Gleixner <tglx@linutronix.de>
Date: Mon, 22 Feb 2010 18:12:30 +0100
Subject: [PATCH 11/22] genirq: Fix stale oneshot flag.

commit ee2bdb55130653718b1b4fdb40d58ddb55bbe78c from linux-2.6-tip

The oneshot flag might be set when the thread starts and cleared later
in handle_edge_irq() - I know it's a hack :)

Check the flags in the irq thread code instead of using a possibly
stale value.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
[context updates for 2.6.34]
Integrated-by: Mark Asselstine <mark.asselstine@windriver.com>
---
 kernel/irq/manage.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/kernel/irq/manage.c b/kernel/irq/manage.c
index 4f92173..7c280ff 100644
--- a/kernel/irq/manage.c
+++ b/kernel/irq/manage.c
@@ -678,7 +678,7 @@ static int irq_thread(void *data)
 	struct sched_param param = { .sched_priority = MAX_USER_RT_PRIO/2, };
 	struct irqaction *action = data;
 	struct irq_desc *desc = irq_to_desc(action->irq);
-	int wake, oneshot = desc->status & IRQ_ONESHOT;
+	int wake;
 
 	sched_setscheduler(current, SCHED_FIFO, &param);
 	current->flags |= PF_HARDIRQ;
@@ -706,7 +706,7 @@ static int irq_thread(void *data)
 
 			action->thread_fn(action->irq, action->dev_id);
 
-			if (oneshot)
+			if (desc->status & IRQ_ONESHOT)
 				irq_finalize_oneshot(action->irq, desc);
 		}
 
-- 
1.7.0

