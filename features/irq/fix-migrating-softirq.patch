From rostedt@goodmis.org Wed Jun 13 14:47:26 2007
Return-Path: <rostedt@goodmis.org>
X-Spam-Checker-Version: SpamAssassin 3.1.7-deb (2006-10-05) on debian
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=unavailable 
	version=3.1.7-deb
Received: from ms-smtp-02.nyroc.rr.com (ms-smtp-02.nyroc.rr.com
	[24.24.2.56]) by mail.tglx.de (Postfix) with ESMTP id AB7B665C3D9 for
	<tglx@linutronix.de>; Wed, 13 Jun 2007 14:47:26 +0200 (CEST)
Received: from [192.168.23.10] (cpe-24-94-51-176.stny.res.rr.com
	[24.94.51.176]) by ms-smtp-02.nyroc.rr.com (8.13.6/8.13.6) with ESMTP id
	l5DClGVg022890; Wed, 13 Jun 2007 08:47:17 -0400 (EDT)
Subject: [PATCH RT] fix migrating softirq [cause of network hang]
From: Steven Rostedt <rostedt@goodmis.org>
To: Ingo Molnar <mingo@elte.hu>
Cc: LKML <linux-kernel@vger.kernel.org>, RT <linux-rt-users@vger.kernel.org>, Thomas Gleixner <tglx@linutronix.de>, john stultz <johnstul@us.ibm.com>
Content-Type: text/plain
Date: Wed, 13 Jun 2007 08:47:16 -0400
Message-Id: <1181738836.10408.54.camel@localhost.localdomain>
Mime-Version: 1.0
X-Mailer: Evolution 2.6.3 
X-Virus-Scanned: Symantec AntiVirus Scan Engine
X-Evolution-Source: imap://tglx%40linutronix.de@localhost:8993/
Content-Transfer-Encoding: 8bit

Softirqs are bound to a single CPU.  That is to say, that once a softirq
function starts to run, it will stay on the CPU that it is running on
while it's running.

In RT, softirqs are threads, and we have a softirq thread per cpu. Each
softirq thread is bound to a single CPU that it represents.

In order to speed things up and lower context switches in RT, if a
softirq thread is of the same priority as an interrupt thread, then when
the interrupt thread is about to exit, it tests to see if any softirq
threads need to be run on that cpu. Instead of running the softirq
thread, it simply performs the functions for the softirq within the
interrupt thread.

The problem is, nothing prevents the interrupt thread from migrating.

So while the interrupt thread is running the softirq function, it may
migrate to another CPU in the middle of that function. This means that
any CPU data that the softirq is touching can be corrupted.

I was experiencing a network hang that sometimes would come back, and
sometimes not. Using my logdev debugger, I started to debug this
problem.  I came across this at the moment of the hang:


[  389.131279] cpu:0 (IRQ-11:427) tcp_rcv_established:4056 rcv_nxt=-1665585797
[  389.131615] cpu:1 192.168.23.72:22 <== 192.168.23.60:41352 ack:2629381499 seq:1773074099 (----A-) len:0 win:790 end_seq:1773074099
[  389.131626] cpu:1 (IRQ-11:427) ip_finish_output2:187 dst->hh=ffff81003b213080
[  389.131635] cpu:1 (IRQ-11:427) ip_finish_output2:189 hh_output=ffffffff80429009


Here we see IRQ-11 in the process of finishing up the softirq-net-tx
function. In the middle of it, we receive a packet, and that must have
pushed the interrupt thread over to CPU 1, and it finished up the
softirq there.

This patch temporarily binds the hardirq thread on the CPU that it runs
the softirqs on.  With this patch I have not seen my network hang. I ran
it over night, doing compiles and such, and it seems fine. I would be
able to cause the hang with various loads within a minute, now I can't
cause it after several minutes.

I'm assuming that this fix may fix other bugs too.

Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

---
 kernel/irq/manage.c |   22 +++++++++++++++++++---
 1 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/kernel/irq/manage.c b/kernel/irq/manage.c
index bd2b934..3f749ea 100644
--- a/kernel/irq/manage.c
+++ b/kernel/irq/manage.c
@@ -846,7 +846,15 @@ static int do_irqd(void * __desc)
 	struct irq_desc *desc = __desc;
 
 #ifdef CONFIG_SMP
-	set_cpus_allowed(current, desc->affinity);
+	cpumask_t cpus_allowed, mask;
+
+	cpus_allowed = desc->affinity;
+	/*
+	 * Restrict it to one cpu so we avoid being migrated inside of
+	 * do_softirq_from_hardirq()
+	 */
+	mask = cpumask_of_cpu(first_cpu(desc->affinity));
+	set_cpus_allowed(current, mask);
 #endif
 	current->flags |= PF_NOFREEZE | PF_HARDIRQ;
 
@@ -870,8 +878,16 @@ static int do_irqd(void * __desc)
 		/*
 		 * Did IRQ affinities change?
 		 */
-		if (!cpus_equal(current->cpus_allowed, desc->affinity))
-			set_cpus_allowed(current, desc->affinity);
+		if (!cpus_equal(cpus_allowed, desc->affinity)) {
+			cpus_allowed = desc->affinity;
+			/*
+			 * Restrict it to one cpu so we avoid being
+			 * migrated inside of
+			 * do_softirq_from_hardirq()
+			 */
+			mask = cpumask_of_cpu(first_cpu(desc->affinity));
+			set_cpus_allowed(current, mask);
+		}
 #endif
 		schedule();
 	}
