From 75b22cb89b6ccdf80c9017d0170fde6a5952b2e5 Mon Sep 17 00:00:00 2001
From: Ashok Kumar <ashoks@broadcom.com>
Date: Thu, 8 Aug 2013 19:42:30 +0530
Subject: [PATCH 0148/1532] RevertMe: cop2: COP2 save/restore using pt_regs
 trapframe.

This needs to be cleaned up and proper save/restore infrastructure
should be added.
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/include/asm/ptrace.h     |   9 +++
 arch/mips/include/asm/stackframe.h |  17 ++++-
 arch/mips/kernel/asm-offsets.c     |   9 +++
 arch/mips/kernel/r4k_switch.S      |   4 ++
 arch/mips/kernel/traps.c           |   5 ++
 arch/mips/netlogic/Kconfig         |   9 +++
 arch/mips/netlogic/xlp/Makefile    |   1 +
 arch/mips/netlogic/xlp/cop2.S      | 127 +++++++++++++++++++++++++++++++++++++
 8 files changed, 180 insertions(+), 1 deletion(-)
 create mode 100644 arch/mips/netlogic/xlp/cop2.S

diff --git a/arch/mips/include/asm/ptrace.h b/arch/mips/include/asm/ptrace.h
index 5e6cd09..fa95cd8 100644
--- a/arch/mips/include/asm/ptrace.h
+++ b/arch/mips/include/asm/ptrace.h
@@ -46,6 +46,15 @@ struct pt_regs {
 	unsigned long long mpl[3];	  /* MTM{0,1,2} */
 	unsigned long long mtp[3];	  /* MTP{0,1,2} */
 #endif
+#ifdef CONFIG_NLM_ENABLE_COP2
+	unsigned long long tx_buf[4];
+	unsigned long long rx_buf[4];
+	unsigned int tx_msg_status;
+	unsigned int rx_msg_status;
+	unsigned int misc_status;
+	unsigned int msg_config;
+	unsigned int msg_err;
+#endif
 } __aligned(8);
 
 struct task_struct;
diff --git a/arch/mips/include/asm/stackframe.h b/arch/mips/include/asm/stackframe.h
index 1728933..c881f61 100644
--- a/arch/mips/include/asm/stackframe.h
+++ b/arch/mips/include/asm/stackframe.h
@@ -205,6 +205,14 @@
 		LONG_S	$31, PT_R31(sp)
 		ori	$28, sp, _THREAD_MASK
 		xori	$28, _THREAD_MASK
+#ifdef CONFIG_NLM_ENABLE_COP2
+		.set    mips64
+		dla k0, nlm_cop2_save
+		jalr k0
+		nop
+		LONG_L  ra, PT_R31(sp)
+		LONG_L  k0, PT_R29(sp)
+#endif
 #ifdef CONFIG_CPU_CAVIUM_OCTEON
 		.set	mips64
 		pref	0, 0($28)	/* Prefetch the current pointer */
@@ -356,7 +364,14 @@
 		ori	a0, STATMASK
 		xori	a0, STATMASK
 		mtc0	a0, CP0_STATUS
-		li	v1, 0xff00
+#ifdef CONFIG_NLM_ENABLE_COP2
+		dla v1, nlm_cop2_restore
+		jalr v1
+		nop
+		li  v1, 0xff00|ST0_CU2
+#else 
+		li  v1, 0xff00
+#endif
 		and	a0, v1
 		LONG_L	v0, PT_STATUS(sp)
 		nor	v1, $0, v1
diff --git a/arch/mips/kernel/asm-offsets.c b/arch/mips/kernel/asm-offsets.c
index 0845091..bac2dff 100644
--- a/arch/mips/kernel/asm-offsets.c
+++ b/arch/mips/kernel/asm-offsets.c
@@ -70,6 +70,15 @@ void output_ptreg_defines(void)
 	OFFSET(PT_MPL, pt_regs, mpl);
 	OFFSET(PT_MTP, pt_regs, mtp);
 #endif /* CONFIG_CPU_CAVIUM_OCTEON */
+#ifdef CONFIG_NLM_ENABLE_COP2
+	OFFSET(NLM_COP2_TX_BUF, pt_regs, tx_buf);
+	OFFSET(NLM_COP2_RX_BUF, pt_regs, rx_buf);
+	OFFSET(NLM_COP2_TX_MSG_STATUS, pt_regs, tx_msg_status);
+	OFFSET(NLM_COP2_RX_MSG_STATUS, pt_regs, rx_msg_status);
+	OFFSET(NLM_COP2_MISC_STATUS, pt_regs, misc_status);
+	OFFSET(NLM_COP2_MSG_CONFIG, pt_regs, msg_config);
+	OFFSET(NLM_COP2_MSG_ERR, pt_regs, msg_err);
+#endif
 	DEFINE(PT_SIZE, sizeof(struct pt_regs));
 	BLANK();
 }
diff --git a/arch/mips/kernel/r4k_switch.S b/arch/mips/kernel/r4k_switch.S
index 5e51219..4381dc3 100644
--- a/arch/mips/kernel/r4k_switch.S
+++ b/arch/mips/kernel/r4k_switch.S
@@ -90,7 +90,11 @@
 	move	ra,t1
 #endif /* CONFIG_MIPS_MT_SMTC */
 	mfc0	t1, CP0_STATUS		/* Do we really need this? */
+#ifdef CONFIG_NLM_ENABLE_COP2
+	li	a3, 0xff01|ST0_CU2
+#else
 	li	a3, 0xff01
+#endif
 	and	t1, a3
 	LONG_L	a2, THREAD_STATUS(a1)
 	nor	a3, $0, a3
diff --git a/arch/mips/kernel/traps.c b/arch/mips/kernel/traps.c
index 072ab3a..c27187e 100644
--- a/arch/mips/kernel/traps.c
+++ b/arch/mips/kernel/traps.c
@@ -1683,6 +1683,11 @@ void __cpuinit per_cpu_trap_init(bool is_boot_cpu)
 	if (cpu_has_dsp)
 		status_set |= ST0_MX;
 
+#ifdef CONFIG_NLM_ENABLE_COP2
+	/* Enable Cop2 Access */
+	status_set |= ST0_CU2;
+#endif
+
 	change_c0_status(ST0_CU|ST0_MX|ST0_RE|ST0_FR|ST0_BEV|ST0_TS|ST0_KX|ST0_SX|ST0_UX,
 			 status_set);
 
diff --git a/arch/mips/netlogic/Kconfig b/arch/mips/netlogic/Kconfig
index bc5272b..e0f73d8 100644
--- a/arch/mips/netlogic/Kconfig
+++ b/arch/mips/netlogic/Kconfig
@@ -86,6 +86,15 @@ endif
 config NLM_COMMON
 	bool
 
+if NLM_XLP_BOARD
+config NLM_ENABLE_COP2
+	bool "Enable Cop2 Access "
+	depends on CPU_XLP && 64BIT
+	default n
+	help
+	  This option enables cop2 access for both user and kernel space.
+endif
+
 config IOMMU_HELPER
 	bool
 
diff --git a/arch/mips/netlogic/xlp/Makefile b/arch/mips/netlogic/xlp/Makefile
index a9e0ef8..690f755 100644
--- a/arch/mips/netlogic/xlp/Makefile
+++ b/arch/mips/netlogic/xlp/Makefile
@@ -8,3 +8,4 @@ obj-$(subst m,y,$(CONFIG_SATA_AHCI))	+= ahci-init-xlp2.o
 
 obj-$(CONFIG_NUMA)		+= numa.o
 obj-$(CONFIG_NLM_FASTSYSCALL)	+= fastsyscall.o
+obj-$(CONFIG_NLM_ENABLE_COP2)	+= cop2.o
diff --git a/arch/mips/netlogic/xlp/cop2.S b/arch/mips/netlogic/xlp/cop2.S
new file mode 100644
index 0000000..eddcc99
--- /dev/null
+++ b/arch/mips/netlogic/xlp/cop2.S
@@ -0,0 +1,127 @@
+/*-
+ * Copyright (c) 2003-2013 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+
+#include <asm/addrspace.h>
+#include <asm/asm.h>
+#include <asm/mipsregs.h>
+#include <asm/regdef.h>
+#include <asm/stackframe.h>
+#include <asm/netlogic/interrupt.h>
+#include <asm/asm-offsets.h>
+
+#ifdef CONFIG_NLM_ENABLE_COP2
+/*
+ * void nlm_cop2_save()
+ * sp is assumed to point to a struct pt_regs
+ *
+ * NOTE: This is called in SAVE_SOME in stackframe.h. It can only
+ *       safely modify k0 and k1.
+ */
+	.align	7
+	.set push
+	.set noreorder
+	LEAF(nlm_cop2_save)
+	/*msgring tx buf reg*/
+	dmfc2 k0, $0, 0
+	LONG_S  k0, NLM_COP2_TX_BUF(sp)
+	dmfc2 k0, $0, 1
+	LONG_S  k0, (NLM_COP2_TX_BUF+8)(sp)
+	dmfc2 k0, $0, 2
+	LONG_S k0, (NLM_COP2_TX_BUF+16)(sp)
+	dmfc2 k0, $0, 3
+	LONG_S k0, (NLM_COP2_TX_BUF+24)(sp)
+
+	/*msgring rx buf reg*/
+	dmfc2 k0, $1, 0
+	LONG_S  k0, NLM_COP2_RX_BUF(sp)
+	dmfc2 k0, $1, 1
+	LONG_S  k0, (NLM_COP2_RX_BUF+8)(sp)
+	dmfc2 k0, $1, 2
+	LONG_S  k0, (NLM_COP2_RX_BUF+16)(sp)
+	dmfc2 k0, $1, 3
+	LONG_S  k0, (NLM_COP2_RX_BUF+24)(sp)
+
+	mfc2 k0, $2, 0
+	sw  k0, NLM_COP2_TX_MSG_STATUS(sp)
+
+	mfc2 k0, $3, 0
+	jr	ra
+	sw k0, NLM_COP2_RX_MSG_STATUS(sp)
+
+	END(nlm_cop2_save)
+	.set pop
+
+/*
+ * void nlm_cop2_restore()
+ * sp is assumed to point to a struct pt_regs
+ *
+ * NOTE: This is called in RESTORE_SOME in stackframe.h.
+ */
+	.align	7
+	.set push
+	.set noreorder
+	LEAF(nlm_cop2_restore)
+	/*msgring tx buf reg*/
+	LONG_L  v1, NLM_COP2_TX_BUF(sp)
+	dmtc2 v1, $0, 0
+	LONG_L  v1, (NLM_COP2_TX_BUF+8)(sp)
+	dmtc2 v1, $0, 1
+	LONG_L  v1, (NLM_COP2_TX_BUF+16)(sp)
+	dmtc2 v1, $0, 2
+	LONG_L  v1, (NLM_COP2_TX_BUF+24)(sp)
+	dmtc2 v1, $0, 3
+
+	/*msgring rx buf reg*/
+	LONG_L  v1, NLM_COP2_RX_BUF(sp)
+	dmtc2 v1, $1, 0
+	LONG_L  v1, (NLM_COP2_RX_BUF+8)(sp)
+	dmtc2 v1, $1, 1
+	LONG_L  v1, (NLM_COP2_RX_BUF+16)(sp)
+	dmtc2 v1, $1, 2
+	LONG_L  v1, (NLM_COP2_RX_BUF+24)(sp)
+	dmtc2 v1, $1, 3
+	lw  v1, NLM_COP2_TX_MSG_STATUS(sp)
+	mtc2 v1, $2, 0
+
+	/*leave bits 28-31 up to date*/
+	li k0, 0xf0000000
+	lw v1, NLM_COP2_RX_MSG_STATUS(sp)
+	or v1, k0, v1
+	xor v1, k0, v1
+	mfc2 k0, $3, 0
+	srl k0, k0, 28
+	sll k0, k0, 28
+	or v1, k0, v1
+	jr	ra
+	mtc2 v1, $3, 0
+	END(nlm_cop2_restore)
+	.set pop
+#endif
+
-- 
1.9.1

