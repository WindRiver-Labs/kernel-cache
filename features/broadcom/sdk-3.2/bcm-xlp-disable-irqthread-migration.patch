From 2422e45e2698eda219871484a804077660c7ce0b Mon Sep 17 00:00:00 2001
From: Quanyang Wang <quanyang.wang@windriver.com>
Date: Tue, 31 Mar 2015 11:28:28 +0800
Subject: [PATCH 04/14] bcm-xlp: disable irqthread migration

In XLP processor, use CPU local registers EIMR/EIRR to
mask/unmask interrupt.When enable irqthread and in default
ONESHOT mode, CPU0 is interrupted, mask interrupt in CPU0
and wakeup a irqthread in CPU2. When CPU2 finish the irq
thread_fn and run unmask function, it only enable the
interrupt in CPU2 but not CPU0,so CPU0 will never accept
interrupt again.So we disable irqthread migration and
force the irqthread run in the CPU which is interrupted.

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/common/irq.c |   16 ++++++++++++++++
 1 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/arch/mips/netlogic/common/irq.c b/arch/mips/netlogic/common/irq.c
index 5c09061..00f5e03 100644
--- a/arch/mips/netlogic/common/irq.c
+++ b/arch/mips/netlogic/common/irq.c
@@ -132,12 +132,23 @@ static void xlp_pic_unmask(struct irq_data *d)
 	nlm_pic_ack(pd->node->picbase, pd->irt);
 }
 
+static int xlp_pic_fake_set_affinity(struct irq_data *d,
+				const struct cpumask *dest, bool force)
+{
+	/* check irq affinity for irq thread can't migrate because of EIRR */
+	if (!cpumask_equal(dest, cpumask_of(0)))
+		return -EINVAL;
+	return IRQ_SET_MASK_OK;
+}
 static struct irq_chip xlp_pic = {
 	.name		= "XLP-PIC",
 	.irq_enable	= xlp_pic_enable,
 	.irq_disable	= xlp_pic_disable,
 	.irq_mask_ack	= xlp_pic_mask_ack,
 	.irq_unmask	= xlp_pic_unmask,
+#ifdef CONFIG_SMP
+	.irq_set_affinity = xlp_pic_fake_set_affinity,
+#endif
 };
 
 static void cpuintr_disable(struct irq_data *d)
@@ -218,6 +229,11 @@ static void nlm_init_node_irqs(int node)
 	int i, irt;
 
 	pr_info("Init IRQ for node %d\n", node);
+#ifdef CONFIG_SMP
+	/* Set the default affinity to the boot cpu. */
+	cpumask_clear(irq_default_affinity);
+	cpumask_set_cpu(smp_processor_id(), irq_default_affinity);
+#endif
 	nodep = nlm_get_node(node);
 	nodep->irqmask = PERCPU_IRQ_MASK;
 	for (i = PIC_IRT_FIRST_IRQ; i <= PIC_IRT_LAST_IRQ; i++) {
-- 
1.7.5.4

