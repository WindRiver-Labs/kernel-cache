From 8629cfa14ec4bf7f303bab4a2edcae3324d77b8a Mon Sep 17 00:00:00 2001
From: Abhishek Joshi <abjoshi@broadcom.com>
Date: Thu, 5 Sep 2013 14:12:51 +0530
Subject: [PATCH 0785/1532] replaced all usage of VSEMI to PMA2P0

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/lib/netlib/include/netsoc_dev.h |  64 +-
 .../netlogic/lib/netlib/include/netsoc_haliface.h  |  28 +-
 arch/mips/netlogic/lib/netlib/include/netsoc_nae.h |  38 +-
 .../lib/netlib/include/nlm_hal_pma2p0_data.h       |  31 +
 .../lib/netlib/include/nlm_hal_vsemi_data.h        |  31 -
 arch/mips/netlogic/lib/netlib/src/netsoc_pcs.c     | 346 ++++----
 arch/mips/netlogic/lib/netlib/src/nlm_hal_nae.c    | 254 +++---
 .../lib/netlib/src/nlm_hal_pma2p0_config.c         | 935 +++++++++++++++++++++
 .../netlogic/lib/netlib/src/nlm_hal_vsemi_config.c | 935 ---------------------
 9 files changed, 1331 insertions(+), 1331 deletions(-)
 create mode 100644 arch/mips/netlogic/lib/netlib/include/nlm_hal_pma2p0_data.h
 delete mode 100644 arch/mips/netlogic/lib/netlib/include/nlm_hal_vsemi_data.h
 create mode 100644 arch/mips/netlogic/lib/netlib/src/nlm_hal_pma2p0_config.c
 delete mode 100644 arch/mips/netlogic/lib/netlib/src/nlm_hal_vsemi_config.c

diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h b/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h
index 58b587c..17f1d86 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h
@@ -552,40 +552,40 @@ enum {
 #define MAX_CPLX_BLOCK                  5
 #define MAX_LANE_PER_CPLX               4
 
-/*PRM: VSEMI  CONFIG REGISTERS*/
-#define VSEMI_CMD 			0x9
-#define VSEMI_CTL0			0xA
-	#define VSEMI_CTL_POR			(1<<9)
-	#define VSEMI_CTL_SYNTH_RST		(1<<10)
-	#define VSEMI_CTL_RTHR			(0xf<<12)	
-#define VSEMI_CTL1			0xB
-
-	#define VSEMI_CTL_MASK_DR	(0x7)
-	#define VSEMI_CTL_RXAUI_10G_DR	(0x3)
-	#define VSEMI_CTL_XAUI_16G_DR	(0x3)
-	#define VSEMI_CTL_XAUI_12G_DR	(0x3)
-	#define VSEMI_CTL_XAUI_DR	(0x2)
-	#define VSEMI_CTL_SGMII_DR	(0x1)
-
-       #define VSEMI_CTL_XFI_DR        (0x3)
-       #define VSEMI_CTL_XLAUI_DR      (0x3)
-       #define VSEMI_CTL_XLAUI_ILK     (0x3)
-
-
-	#define VSEMI_CTL_MASK_DW	(0x70)
-	#define VSEMI_CTL_RXAUI_10G_DW	(0x30)
-	#define VSEMI_CTL_XAUI_16G_DW	(0x10)
-	#define VSEMI_CTL_XAUI_12G_DW	(0x10)
-	#define VSEMI_CTL_XAUI_DW	(0x10)
-	#define VSEMI_CTL_SGMII_DW	(0x10)
-        #define VSEMI_CTL_XFI_DW        (0x5<<4)
-        #define VSEMI_CTL_XLAUI_DW      (0x5<<4)
-        #define VSEMI_CTL_ILK_DW        (0x3<<4)
+/*PRM: PMA2P0  CONFIG REGISTERS*/
+#define PMA2P0_CMD 			0x9
+#define PMA2P0_CTL0			0xA
+	#define PMA2P0_CTL_POR			(1<<9)
+	#define PMA2P0_CTL_SYNTH_RST		(1<<10)
+	#define PMA2P0_CTL_RTHR			(0xf<<12)	
+#define PMA2P0_CTL1			0xB
+
+	#define PMA2P0_CTL_MASK_DR	(0x7)
+	#define PMA2P0_CTL_RXAUI_10G_DR	(0x3)
+	#define PMA2P0_CTL_XAUI_16G_DR	(0x3)
+	#define PMA2P0_CTL_XAUI_12G_DR	(0x3)
+	#define PMA2P0_CTL_XAUI_DR	(0x2)
+	#define PMA2P0_CTL_SGMII_DR	(0x1)
+
+       #define PMA2P0_CTL_XFI_DR        (0x3)
+       #define PMA2P0_CTL_XLAUI_DR      (0x3)
+       #define PMA2P0_CTL_XLAUI_ILK     (0x3)
+
+
+	#define PMA2P0_CTL_MASK_DW	(0x70)
+	#define PMA2P0_CTL_RXAUI_10G_DW	(0x30)
+	#define PMA2P0_CTL_XAUI_16G_DW	(0x10)
+	#define PMA2P0_CTL_XAUI_12G_DW	(0x10)
+	#define PMA2P0_CTL_XAUI_DW	(0x10)
+	#define PMA2P0_CTL_SGMII_DW	(0x10)
+        #define PMA2P0_CTL_XFI_DW        (0x5<<4)
+        #define PMA2P0_CTL_XLAUI_DW      (0x5<<4)
+        #define PMA2P0_CTL_ILK_DW        (0x3<<4)
 
 	
-#define VSEMI_STATUS			0xC
-#define VSEMI_PINCTRL			0xD
-#define VSEMI_PIN_STS			0XE
+#define PMA2P0_STATUS			0xC
+#define PMA2P0_PINCTRL			0xD
+#define PMA2P0_PIN_STS			0XE
 		
  
 
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h b/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
index f2100b9..03f02a3 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
@@ -95,26 +95,26 @@ extern int __netsoc_config_nae_l2parser_perport(nae_t *nae, l2_parser_config_t *
 extern int __netsoc_config_nae_l2parser(nae_t *nae, l2_parser_config_t *l2);
 extern int __netsoc_config_nae_l3parser(nae_t *nae, l3_parser_config_t *l3_cfg, int entry);
 extern int __netsoc_config_nae_l4parser(nae_t *nae, l4_parser_config_t *l4_cfg, int entry);
-extern unsigned char vsemi_mem_sgmii_4page [256];
-extern unsigned char vsemi_mem_sgmii [256];
+extern unsigned char pma2p0_mem_sgmii_4page [256];
+extern unsigned char pma2p0_mem_sgmii [256];
 
-extern unsigned char vsemi_mem_xaui_4page [256];
-extern unsigned char vsemi_mem_xaui [256];
+extern unsigned char pma2p0_mem_xaui_4page [256];
+extern unsigned char pma2p0_mem_xaui [256];
 
-extern unsigned char vsemi_mem_rxaui_4page [256];
-extern unsigned char vsemi_mem_rxaui [256];
+extern unsigned char pma2p0_mem_rxaui_4page [256];
+extern unsigned char pma2p0_mem_rxaui [256];
 
-extern unsigned char vsemi_mem_12G_4page [256];
-extern unsigned char vsemi_mem_12G [256];
+extern unsigned char pma2p0_mem_12G_4page [256];
+extern unsigned char pma2p0_mem_12G [256];
 
-extern unsigned char vsemi_mem_16G_4page [256];
-extern unsigned char vsemi_mem_16G [256];
+extern unsigned char pma2p0_mem_16G_4page [256];
+extern unsigned char pma2p0_mem_16G [256];
 
-extern unsigned char vsemi_mem_10G_lane[256];
-extern unsigned char vsemi_mem_10G_lane_4page[256];
+extern unsigned char pma2p0_mem_10G_lane[256];
+extern unsigned char pma2p0_mem_10G_lane_4page[256];
 
-extern void vsemi_mem_init_sgmii_125Mhzrefclk(void);
-extern void nlm_hal_config_vsemi_mem_sgmii_4page_125Mhz(void);
+extern void pma2p0_mem_init_sgmii_125Mhzrefclk(void);
+extern void nlm_hal_config_pma2p0_mem_sgmii_4page_125Mhz(void);
 
 extern void update_netsoc_msgiface(int version);
 #endif
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_nae.h b/arch/mips/netlogic/lib/netlib/include/netsoc_nae.h
index 8d4a323..0448aac 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_nae.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_nae.h
@@ -203,45 +203,45 @@ static inline void __netsoc_reset_nae(nae_t *nae)
 }
 
 
-static int __netsoc_vsemi_cmd_poll_pend(uint64_t mac_base)
+static int __netsoc_pma2p0_cmd_poll_pend(uint64_t mac_base)
 {
-        uint32_t vsemi_cmd=0;
+        uint32_t pma2p0_cmd=0;
         uint32_t  retries=0;
         /*wait for command to clear*/
         while(retries<100){
-                vsemi_cmd = netsoc_read_mac_reg(mac_base, VSEMI_CMD);
-                if( vsemi_cmd & (1<<31)){
+                pma2p0_cmd = netsoc_read_mac_reg(mac_base, PMA2P0_CMD);
+                if( pma2p0_cmd & (1<<31)){
                         retries++;
                         nlm_mdelay(1);
                         continue;
                 }else{  
-                        //nlm_print("VSEMI cmd pend clear\n");  
+                        //nlm_print("PMA2P0 cmd pend clear\n");  
                         break;
                 }
         }
 
         if(retries==100){
-                nlm_print("VSEMI cmd  clear NOT OK: VSEMI Configuration may not work\n");
+                nlm_print("PMA2P0 cmd  clear NOT OK: PMA2P0 Configuration may not work\n");
                 return 0;
         }
 
-        return (vsemi_cmd&0xff);
+        return (pma2p0_cmd&0xff);
 }
 
-static inline void __netsoc_write_vsemi_reg(uint64_t base, uint32_t lane_no, uint32_t addr, uint32_t data)
+static inline void __netsoc_write_pma2p0_reg(uint64_t base, uint32_t lane_no, uint32_t addr, uint32_t data)
 {   
     uint32_t tmp_data;
     tmp_data = (0x2 << 29) | (lane_no << 21) | ((addr & 0x1fff) << 8) | (data & 0xff);
-    netsoc_write_mac_reg(base, VSEMI_CMD, tmp_data);
-    __netsoc_vsemi_cmd_poll_pend(base);
+    netsoc_write_mac_reg(base, PMA2P0_CMD, tmp_data);
+    __netsoc_pma2p0_cmd_poll_pend(base);
 }
 
-static inline uint32_t __netsoc_read_vsemi_reg(uint64_t base, uint32_t lane_no, uint32_t addr)
+static inline uint32_t __netsoc_read_pma2p0_reg(uint64_t base, uint32_t lane_no, uint32_t addr)
 {   
     uint32_t tmp_data, rd_data;
     tmp_data = (0x3 << 29) | (lane_no << 21) | ((addr & 0x1fff) << 8);
-    netsoc_write_mac_reg(base, VSEMI_CMD, tmp_data);
-    rd_data = __netsoc_vsemi_cmd_poll_pend(base);
+    netsoc_write_mac_reg(base, PMA2P0_CMD, tmp_data);
+    rd_data = __netsoc_pma2p0_cmd_poll_pend(base);
     return (rd_data & 0xFF);
 }
 
@@ -262,19 +262,19 @@ static inline uint32_t __netsoc_indirect_pma_register_read(nae_t *nae, int block
         return (val&0xff);
 }
 
-#ifdef VSEMI_DEBUG
-static void __netsoc_display_vsemi_indirect_reg(uint64_t base, int block)
+#ifdef PMA2P0_DEBUG
+static void __netsoc_display_pma2p0_indirect_reg(uint64_t base, int block)
 {
     uint32_t rd_data, reg_addr, lane_no;
     for (reg_addr=101; reg_addr <111; reg_addr++) {
         for (lane_no=0; lane_no < 4; lane_no++) {
-            rd_data = __netsoc_read_vsemi_reg(base,  lane_no, reg_addr);
-            nlm_print("VSEMI::  lane:%0d addr: 0x%x rd_data: 0x%02x\n",lane_no, reg_addr, rd_data);
+            rd_data = __netsoc_read_pma2p0_reg(base,  lane_no, reg_addr);
+            nlm_print("PMA2P0::  lane:%0d addr: 0x%x rd_data: 0x%02x\n",lane_no, reg_addr, rd_data);
         }
     }
     for (reg_addr=101; reg_addr <165; reg_addr++) {
-        rd_data = __netsoc_read_vsemi_reg(base, 4, reg_addr);
-        nlm_print("VSEMI:: common lane addr: 0x%x rd_data: 0x%02x\n", reg_addr, rd_data);
+        rd_data = __netsoc_read_pma2p0_reg(base, 4, reg_addr);
+        nlm_print("PMA2P0:: common lane addr: 0x%x rd_data: 0x%02x\n", reg_addr, rd_data);
     }
 
 }
diff --git a/arch/mips/netlogic/lib/netlib/include/nlm_hal_pma2p0_data.h b/arch/mips/netlogic/lib/netlib/include/nlm_hal_pma2p0_data.h
new file mode 100644
index 0000000..b6b4139
--- /dev/null
+++ b/arch/mips/netlogic/lib/netlib/include/nlm_hal_pma2p0_data.h
@@ -0,0 +1,31 @@
+#ifndef _NLM_HAL_PMA2P0_DATA_H_
+#define _NLM_HAL_PMA2P0_DATA_H_
+
+
+/*156 Mhz related functions*/
+extern void nlm_hal_config_pma2p0_mem_16G_4page(void);
+extern void nlm_hal_config_pma2p0_mem_16G(void);
+extern void nlm_hal_config_pma2p0_mem_12G_4page(void);
+extern void nlm_hal_config_pma2p0_mem_12G(void);
+extern void nlm_hal_config_pma2p0_mem_xaui(void);
+extern void nlm_hal_config_pma2p0_mem_xaui_4page(void);
+
+extern void nlm_hal_config_pma2p0_mem_rxaui(void);
+extern void nlm_hal_config_pma2p0_mem_rxaui_4page(void);
+
+void nlm_hal_config_pma2p0_mem_10G_lane(void);   
+void nlm_hal_config_pma2p0_mem_10G_lane_4page(void);     
+void nlm_hal_config_pma2p0_mem_sgmii_4page(void);
+void nlm_hal_config_pma2p0_mem_sgmii(void);
+
+
+/*125 Mhz related functions*/
+void nlm_hal_config_pma2p0_mem_16G_4page_125(void);
+void nlm_hal_config_pma2p0_mem_16G_125(void);
+void nlm_hal_config_pma2p0_mem_12G_4page_125(void);
+void nlm_hal_config_pma2p0_mem_12G_125(void);
+void nlm_hal_config_pma2p0_mem_xaui_4page_125(void);
+void nlm_hal_config_pma2p0_mem_xaui_125(void);	
+#endif
+
+
diff --git a/arch/mips/netlogic/lib/netlib/include/nlm_hal_vsemi_data.h b/arch/mips/netlogic/lib/netlib/include/nlm_hal_vsemi_data.h
deleted file mode 100644
index 3ffa75a..0000000
--- a/arch/mips/netlogic/lib/netlib/include/nlm_hal_vsemi_data.h
+++ /dev/null
@@ -1,31 +0,0 @@
-#ifndef _NLM_HAL_VESMI_DATA_H_
-#define _NLM_HAL_VSEMI_DATA_H_
-
-
-/*156 Mhz related functions*/
-extern void nlm_hal_config_vsemi_mem_16G_4page(void);
-extern void nlm_hal_config_vsemi_mem_16G(void);
-extern void nlm_hal_config_vsemi_mem_12G_4page(void);
-extern void nlm_hal_config_vsemi_mem_12G(void);
-extern void nlm_hal_config_vsemi_mem_xaui(void);
-extern void nlm_hal_config_vsemi_mem_xaui_4page(void);
-
-extern void nlm_hal_config_vsemi_mem_rxaui(void);
-extern void nlm_hal_config_vsemi_mem_rxaui_4page(void);
-
-void nlm_hal_config_vsemi_mem_10G_lane(void);   
-void nlm_hal_config_vsemi_mem_10G_lane_4page(void);     
-void nlm_hal_config_vsemi_mem_sgmii_4page(void);
-void nlm_hal_config_vsemi_mem_sgmii(void);
-
-
-/*125 Mhz related functions*/
-void nlm_hal_config_vsemi_mem_16G_4page_125(void);
-void nlm_hal_config_vsemi_mem_16G_125(void);
-void nlm_hal_config_vsemi_mem_12G_4page_125(void);
-void nlm_hal_config_vsemi_mem_12G_125(void);
-void nlm_hal_config_vsemi_mem_xaui_4page_125(void);
-void nlm_hal_config_vsemi_mem_xaui_125(void);	
-#endif
-
-
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_pcs.c b/arch/mips/netlogic/lib/netlib/src/netsoc_pcs.c
index 2aea9c7..6ecc6f0 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_pcs.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_pcs.c
@@ -30,7 +30,7 @@
 #include "nlm_hal.h"
 #include "nlm_nae.h"
 #include "nlm_hal_sys.h"
-#include "nlm_hal_vsemi_data.h"
+#include "nlm_hal_pma2p0_data.h"
 #include "netsoc_nae.h"
 #include "netsoc_haliface.h"
 #include "netsoc_libiface.h"
@@ -38,68 +38,68 @@
 
 #if !defined(XLP_SIM) || defined(NLM_BOARD)
 
-void xlp2xx_nae_program_vsemi(uint64_t mac_base, int block, int xaui_speed, int phy_mode)
+void xlp2xx_nae_program_pma2p0(uint64_t mac_base, int block, int xaui_speed, int phy_mode)
 {
         uint32_t reg_addr, lane_no;
-        uint32_t vsemi_cmd=0;
+        uint32_t pma2p0_cmd=0;
 
         for (reg_addr=101; reg_addr <111; reg_addr++){
                 for (lane_no=0; lane_no<4; lane_no++) {
-                        vsemi_cmd=0;
+                        pma2p0_cmd=0;
                         if(xaui_speed==16){
-                                vsemi_cmd |= vsemi_mem_16G_4page[reg_addr];
+                                pma2p0_cmd |= pma2p0_mem_16G_4page[reg_addr];
                         }
                         if(xaui_speed==12){
-                                vsemi_cmd |= vsemi_mem_12G_4page[reg_addr];
+                                pma2p0_cmd |= pma2p0_mem_12G_4page[reg_addr];
                         }
                         if((xaui_speed==10)) {
-                                vsemi_cmd |= vsemi_mem_xaui_4page[reg_addr];
-                                //nlm_print("vsemi cmd: xaui 4page: [%X]:%X\n", reg_addr, vsemi_cmd);
+                                pma2p0_cmd |= pma2p0_mem_xaui_4page[reg_addr];
+                                //nlm_print("pma2p0 cmd: xaui 4page: [%X]:%X\n", reg_addr, pma2p0_cmd);
                         }
                         if(phy_mode==PHYMODE_SGMII){
-                                vsemi_cmd |= vsemi_mem_sgmii_4page[reg_addr];
+                                pma2p0_cmd |= pma2p0_mem_sgmii_4page[reg_addr];
                         }
-                        __netsoc_write_vsemi_reg(mac_base, lane_no, reg_addr, vsemi_cmd);
+                        __netsoc_write_pma2p0_reg(mac_base, lane_no, reg_addr, pma2p0_cmd);
                 }
         }
         /*configure only page 4*/
         for (reg_addr=101; reg_addr <165; reg_addr++){
-                vsemi_cmd=0;
+                pma2p0_cmd=0;
                 if(xaui_speed==16){
-                        vsemi_cmd |= vsemi_mem_16G[reg_addr];
+                        pma2p0_cmd |= pma2p0_mem_16G[reg_addr];
                 }
                 if(xaui_speed==12){
-                        vsemi_cmd |= vsemi_mem_12G[reg_addr];
+                        pma2p0_cmd |= pma2p0_mem_12G[reg_addr];
                 }
                 if(xaui_speed==10) {
-                        vsemi_cmd |= vsemi_mem_xaui[reg_addr];
-                        //nlm_print("vsemi cmd: mem xaui [%X]:%X\n", reg_addr, vsemi_cmd);
+                        pma2p0_cmd |= pma2p0_mem_xaui[reg_addr];
+                        //nlm_print("pma2p0 cmd: mem xaui [%X]:%X\n", reg_addr, pma2p0_cmd);
                 }
                 if(phy_mode==PHYMODE_SGMII){
-                        vsemi_cmd |= vsemi_mem_sgmii[reg_addr];
+                        pma2p0_cmd |= pma2p0_mem_sgmii[reg_addr];
                 }
-                __netsoc_write_vsemi_reg(mac_base, 4, reg_addr, vsemi_cmd);
+                __netsoc_write_pma2p0_reg(mac_base, 4, reg_addr, pma2p0_cmd);
         }
 
         for (lane_no=0; lane_no<4; lane_no++) {
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 21, 0xd9);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 22, 0x0);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 23, 0x0);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 87, 0x1f);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 21, 0xd9);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 22, 0x0);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 23, 0x0);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 87, 0x1f);
         }
 
         for (lane_no=0; lane_no<4; lane_no++) {
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 24, 0x2);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 25, 0x0);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 26, 0x08);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 27, 0x78);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 28, 0x0);
-                vsemi_cmd = __netsoc_read_vsemi_reg(mac_base, lane_no, 86);
-                vsemi_cmd &= ~(1<<3);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 86, vsemi_cmd);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 24, 0x2);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 25, 0x0);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 26, 0x08);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 27, 0x78);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 28, 0x0);
+                pma2p0_cmd = __netsoc_read_pma2p0_reg(mac_base, lane_no, 86);
+                pma2p0_cmd &= ~(1<<3);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 86, pma2p0_cmd);
         }
 
-        nlm_print("VSEMI configuration is OK \n");
+        nlm_print("PMA2P0 configuration is OK \n");
 }
 
 
@@ -589,8 +589,8 @@ static void xlp8xx_ilk_reset_pll(nae_t *nae, int ilk_block_base, int ilk_num_lan
 void xlp9xx_nae_write_pma2p0_mem(uint64_t mac_base, int block, int xgmii_speed, int phy_mode)
 {
         uint32_t reg_addr, lane_no, max_lanes =4;  
-        uint32_t vsemi_cmd=0;
-	uint32_t delay, vsemi_config;
+        uint32_t pma2p0_cmd=0;
+	uint32_t delay, pma2p0_config;
 	uint32_t lwidth = 1;
 	
 	uint32_t lane_speed = XAUI_TYPE_LANE;
@@ -604,90 +604,90 @@ void xlp9xx_nae_write_pma2p0_mem(uint64_t mac_base, int block, int xgmii_speed,
 
         for (reg_addr=101; reg_addr <111; reg_addr++){
                 for (lane_no=0; lane_no<max_lanes; lane_no++) {
-                        vsemi_cmd=0;
+                        pma2p0_cmd=0;
                         if((xgmii_speed==16 ) && (lane_speed ==XAUI_TYPE_LANE)){
-                                vsemi_cmd |= vsemi_mem_16G_4page[reg_addr];
+                                pma2p0_cmd |= pma2p0_mem_16G_4page[reg_addr];
                         }
                         if((xgmii_speed==12 ) && (lane_speed ==XAUI_TYPE_LANE)){
-                                vsemi_cmd |= vsemi_mem_12G_4page[reg_addr];
+                                pma2p0_cmd |= pma2p0_mem_12G_4page[reg_addr];
                         }
                         if((xgmii_speed==10 ) && (lane_speed ==XAUI_TYPE_LANE) && (phy_mode == PHYMODE_RXAUI)){
-                                vsemi_cmd |= vsemi_mem_rxaui_4page[reg_addr];
+                                pma2p0_cmd |= pma2p0_mem_rxaui_4page[reg_addr];
                         }else  if((xgmii_speed==10 ) && (lane_speed ==XAUI_TYPE_LANE)){
-                                vsemi_cmd |= vsemi_mem_xaui_4page[reg_addr];
+                                pma2p0_cmd |= pma2p0_mem_xaui_4page[reg_addr];
 			}
                         else if((xgmii_speed==10 ) && (lane_speed ==XFI_TYPE_LANE)){
-				 vsemi_cmd |= vsemi_mem_10G_lane_4page[reg_addr];	
+				 pma2p0_cmd |= pma2p0_mem_10G_lane_4page[reg_addr];	
 			}
                         if(phy_mode==PHYMODE_SGMII){
-                                vsemi_cmd |= vsemi_mem_sgmii_4page[reg_addr];
+                                pma2p0_cmd |= pma2p0_mem_sgmii_4page[reg_addr];
                         }
-                        __netsoc_write_vsemi_reg(mac_base, lane_no, reg_addr, vsemi_cmd);
+                        __netsoc_write_pma2p0_reg(mac_base, lane_no, reg_addr, pma2p0_cmd);
                 }
         }
         /*configure only page 4*/
         for (reg_addr=101; reg_addr <165; reg_addr++){
-                vsemi_cmd=0;
+                pma2p0_cmd=0;
                 if((xgmii_speed==16 ) && (lane_speed ==XAUI_TYPE_LANE)){
-                        vsemi_cmd |= vsemi_mem_16G[reg_addr];
+                        pma2p0_cmd |= pma2p0_mem_16G[reg_addr];
                 }
                 if((xgmii_speed==12 ) && (lane_speed ==XAUI_TYPE_LANE)){
-                        vsemi_cmd |= vsemi_mem_12G[reg_addr];
+                        pma2p0_cmd |= pma2p0_mem_12G[reg_addr];
                 }
 		if((xgmii_speed==10 ) && (lane_speed ==XAUI_TYPE_LANE) && (phy_mode == PHYMODE_RXAUI)){
-                        vsemi_cmd |= vsemi_mem_rxaui[reg_addr];
+                        pma2p0_cmd |= pma2p0_mem_rxaui[reg_addr];
 		}else if((xgmii_speed==10 ) && (lane_speed ==XAUI_TYPE_LANE)){
-                        vsemi_cmd |= vsemi_mem_xaui[reg_addr];
+                        pma2p0_cmd |= pma2p0_mem_xaui[reg_addr];
                 }
                 if((xgmii_speed==10 ) && (lane_speed ==XFI_TYPE_LANE)){
-			vsemi_cmd |= vsemi_mem_10G_lane[reg_addr];	
+			pma2p0_cmd |= pma2p0_mem_10G_lane[reg_addr];	
 		}
                 if(phy_mode==PHYMODE_SGMII){
-                        vsemi_cmd |= vsemi_mem_sgmii[reg_addr];
+                        pma2p0_cmd |= pma2p0_mem_sgmii[reg_addr];
                 }
-                __netsoc_write_vsemi_reg(mac_base, 4, reg_addr, vsemi_cmd);
+                __netsoc_write_pma2p0_reg(mac_base, 4, reg_addr, pma2p0_cmd);
         }
 
 	// Extra configuration for XFI
 	if(phy_mode == PHYMODE_XFI){
-		vsemi_cmd = __netsoc_read_vsemi_reg(mac_base, 4, 0x37);
-		vsemi_cmd &= 0x80;
-		vsemi_cmd |= 0x15;
-		 __netsoc_write_vsemi_reg(mac_base, 4, 0x37, vsemi_cmd);
+		pma2p0_cmd = __netsoc_read_pma2p0_reg(mac_base, 4, 0x37);
+		pma2p0_cmd &= 0x80;
+		pma2p0_cmd |= 0x15;
+		 __netsoc_write_pma2p0_reg(mac_base, 4, 0x37, pma2p0_cmd);
 	}
 	
 	// Extra configuration for XLAUI
 	if(phy_mode == PHYMODE_XLAUI){ 
-		vsemi_cmd = __netsoc_read_vsemi_reg(mac_base, 4, 0x37);
-		vsemi_cmd &= 0x80;
-		vsemi_cmd |= 0x10;
-		 __netsoc_write_vsemi_reg(mac_base, 4, 0x37, vsemi_cmd);
+		pma2p0_cmd = __netsoc_read_pma2p0_reg(mac_base, 4, 0x37);
+		pma2p0_cmd &= 0x80;
+		pma2p0_cmd |= 0x10;
+		 __netsoc_write_pma2p0_reg(mac_base, 4, 0x37, pma2p0_cmd);
 	}
 	
         for (lane_no=0; lane_no<max_lanes; lane_no++) {
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 21, 0xd9);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 22, 0x0);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 23, 0x0);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 87, 0x1f);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 21, 0xd9);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 22, 0x0);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 23, 0x0);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 87, 0x1f);
         }
 
         for (lane_no=0; lane_no<max_lanes; lane_no++) {
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 24, 0x2);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 25, 0x0);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 26, 0x08);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 27, 0x78);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 28, 0x0);
-                vsemi_cmd = __netsoc_read_vsemi_reg(mac_base, lane_no, 86);
-                vsemi_cmd &= ~(1<<3);
-                __netsoc_write_vsemi_reg(mac_base, lane_no, 86, vsemi_cmd);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 24, 0x2);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 25, 0x0);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 26, 0x08);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 27, 0x78);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 28, 0x0);
+                pma2p0_cmd = __netsoc_read_pma2p0_reg(mac_base, lane_no, 86);
+                pma2p0_cmd &= ~(1<<3);
+                __netsoc_write_pma2p0_reg(mac_base, lane_no, 86, pma2p0_cmd);
         }
 	
 	if((phy_mode == PHYMODE_XLAUI) || (phy_mode == PHYMODE_XFI)){ 
 		for (lane_no=0; lane_no<max_lanes; lane_no++) {
-			__netsoc_write_vsemi_reg(mac_base, lane_no, 0x15, 0xd9);
-			__netsoc_write_vsemi_reg(mac_base, lane_no, 0x16, 0x07);
-			__netsoc_write_vsemi_reg(mac_base, lane_no, 0x1c, 0xc0);
-			__netsoc_write_vsemi_reg(mac_base, lane_no, 0x1b, 0x70);
+			__netsoc_write_pma2p0_reg(mac_base, lane_no, 0x15, 0xd9);
+			__netsoc_write_pma2p0_reg(mac_base, lane_no, 0x16, 0x07);
+			__netsoc_write_pma2p0_reg(mac_base, lane_no, 0x1c, 0xc0);
+			__netsoc_write_pma2p0_reg(mac_base, lane_no, 0x1b, 0x70);
              }
 	}
 
@@ -695,151 +695,151 @@ void xlp9xx_nae_write_pma2p0_mem(uint64_t mac_base, int block, int xgmii_speed,
 	for(delay=0; delay<10000; delay++);
 
     	// De-assert hard reset
-	vsemi_config = netsoc_read_mac_reg(mac_base, VSEMI_CTL0);
-	vsemi_config &= ~(VSEMI_CTL_POR | VSEMI_CTL_SYNTH_RST | VSEMI_CTL_RTHR);
-	netsoc_write_mac_reg(mac_base, VSEMI_CTL0, vsemi_config);
+	pma2p0_config = netsoc_read_mac_reg(mac_base, PMA2P0_CTL0);
+	pma2p0_config &= ~(PMA2P0_CTL_POR | PMA2P0_CTL_SYNTH_RST | PMA2P0_CTL_RTHR);
+	netsoc_write_mac_reg(mac_base, PMA2P0_CTL0, pma2p0_config);
     
 	for(delay=0; delay<10000; delay++);
 	
 	netsoc_api_print(NETSOC_APIDBG_PORT,"Waiting for block %d PCSOUTSYNTH_READY\n", block);
 	
-	vsemi_cmd = __netsoc_read_vsemi_reg(mac_base, 0x4, 0x4);
-	while((vsemi_cmd& 0x1) != 0x1){
-		vsemi_cmd = __netsoc_read_vsemi_reg(mac_base, 0x4, 0x4);
+	pma2p0_cmd = __netsoc_read_pma2p0_reg(mac_base, 0x4, 0x4);
+	while((pma2p0_cmd& 0x1) != 0x1){
+		pma2p0_cmd = __netsoc_read_pma2p0_reg(mac_base, 0x4, 0x4);
 	}
 	
     	for (lane_no=0; lane_no<max_lanes; lane_no=lane_no+lwidth) {
-		netsoc_api_print(NETSOC_APIDBG_PORT,"VSEMI: Waiting for block %d lane %d PCSOUT_RX_READY\n", block, lane_no);
-		vsemi_cmd = __netsoc_read_vsemi_reg(mac_base, lane_no, 11);
-		while((vsemi_cmd & 0x1) != 0x1){
-			vsemi_cmd = __netsoc_read_vsemi_reg(mac_base, lane_no, 11);
+		netsoc_api_print(NETSOC_APIDBG_PORT,"PMA2P0: Waiting for block %d lane %d PCSOUT_RX_READY\n", block, lane_no);
+		pma2p0_cmd = __netsoc_read_pma2p0_reg(mac_base, lane_no, 11);
+		while((pma2p0_cmd & 0x1) != 0x1){
+			pma2p0_cmd = __netsoc_read_pma2p0_reg(mac_base, lane_no, 11);
 		}
 	}	
     	
 	for (lane_no=0; lane_no<max_lanes; lane_no=lane_no+lwidth) {
-		netsoc_api_print(NETSOC_APIDBG_PORT,"VSEMI: Waiting for block %d lane %d PCSOUT_TX_READY\n", block, lane_no);
-		vsemi_cmd = __netsoc_read_vsemi_reg(mac_base, lane_no, 11);
-		while((vsemi_cmd & 0x4) != 0x4){
-			vsemi_cmd = __netsoc_read_vsemi_reg(mac_base, lane_no, 11);
+		netsoc_api_print(NETSOC_APIDBG_PORT,"PMA2P0: Waiting for block %d lane %d PCSOUT_TX_READY\n", block, lane_no);
+		pma2p0_cmd = __netsoc_read_pma2p0_reg(mac_base, lane_no, 11);
+		while((pma2p0_cmd & 0x4) != 0x4){
+			pma2p0_cmd = __netsoc_read_pma2p0_reg(mac_base, lane_no, 11);
 		}
 	}	
-        nlm_print("VSEMI configuration is OK \n");
+        nlm_print("PMA2P0 configuration is OK \n");
 }
 
-static void xlp9xx_config_pma2p0_serdes(nae_t *nae, uint32_t block, uint32_t vsemi_por , uint32_t speed, uint32_t phymode)
+static void xlp9xx_config_pma2p0_serdes(nae_t *nae, uint32_t block, uint32_t pma2p0_por , uint32_t speed, uint32_t phymode)
 {
 
-	uint32_t delay, vsemi_config;
+	uint32_t delay, pma2p0_config;
 	uint64_t mac_base = netsoc_get_macreg_base_for_phy(nae->mac_base, block);
 
-	       	if(!vsemi_por){
-                        vsemi_config = netsoc_read_mac_reg(netsoc_get_macreg_base_for_phy(nae->mac_base, 2), VSEMI_CTL0);
-                        vsemi_config &= ~VSEMI_CTL_POR;
-                        netsoc_write_mac_reg(netsoc_get_macreg_base_for_phy(nae->mac_base, 2), VSEMI_CTL0, vsemi_config);
+	       	if(!pma2p0_por){
+                        pma2p0_config = netsoc_read_mac_reg(netsoc_get_macreg_base_for_phy(nae->mac_base, 2), PMA2P0_CTL0);
+                        pma2p0_config &= ~PMA2P0_CTL_POR;
+                        netsoc_write_mac_reg(netsoc_get_macreg_base_for_phy(nae->mac_base, 2), PMA2P0_CTL0, pma2p0_config);
                	}
                
-		vsemi_config = netsoc_read_mac_reg(mac_base, VSEMI_CTL0);
-                vsemi_config &= 0xFFFF01FF;
-                vsemi_config |= VSEMI_CTL_POR | VSEMI_CTL_SYNTH_RST | VSEMI_CTL_RTHR;
-                netsoc_write_mac_reg(mac_base, VSEMI_CTL0, vsemi_config);
+		pma2p0_config = netsoc_read_mac_reg(mac_base, PMA2P0_CTL0);
+                pma2p0_config &= 0xFFFF01FF;
+                pma2p0_config |= PMA2P0_CTL_POR | PMA2P0_CTL_SYNTH_RST | PMA2P0_CTL_RTHR;
+                netsoc_write_mac_reg(mac_base, PMA2P0_CTL0, pma2p0_config);
 
                 for(delay=0; delay<1000000; delay++);
 
-                vsemi_config = netsoc_read_mac_reg(mac_base, VSEMI_CTL0);
-                vsemi_config &= ~VSEMI_CTL_POR;
-                vsemi_config &= 0xFFFFFE00;
-                netsoc_write_mac_reg(mac_base, VSEMI_CTL0, vsemi_config);
+                pma2p0_config = netsoc_read_mac_reg(mac_base, PMA2P0_CTL0);
+                pma2p0_config &= ~PMA2P0_CTL_POR;
+                pma2p0_config &= 0xFFFFFE00;
+                netsoc_write_mac_reg(mac_base, PMA2P0_CTL0, pma2p0_config);
 
                 for(delay=0; delay<1000000; delay++);
  
-                vsemi_config = netsoc_read_mac_reg(mac_base, VSEMI_CTL1);
-                vsemi_config &= ~((0x7<<4) | 0x7);
+                pma2p0_config = netsoc_read_mac_reg(mac_base, PMA2P0_CTL1);
+                pma2p0_config &= ~((0x7<<4) | 0x7);
 
 		if (phymode == PHYMODE_SGMII)
-	                vsemi_config |= VSEMI_CTL_SGMII_DR | VSEMI_CTL_SGMII_DW;
+	                pma2p0_config |= PMA2P0_CTL_SGMII_DR | PMA2P0_CTL_SGMII_DW;
 		else if((PHYMODE_RXAUI==phymode) || (PHYMODE_XAUI==phymode)){
 			if(speed==16)
-                                 vsemi_config |= VSEMI_CTL_XAUI_16G_DR | VSEMI_CTL_XAUI_16G_DW;
+                                 pma2p0_config |= PMA2P0_CTL_XAUI_16G_DR | PMA2P0_CTL_XAUI_16G_DW;
                         else if(speed==12)
-                                 vsemi_config |= VSEMI_CTL_XAUI_12G_DR | VSEMI_CTL_XAUI_12G_DW;
+                                 pma2p0_config |= PMA2P0_CTL_XAUI_12G_DR | PMA2P0_CTL_XAUI_12G_DW;
                         else if((PHYMODE_RXAUI==phymode) && (speed==10)) {
-                                 vsemi_config |= VSEMI_CTL_RXAUI_10G_DR | VSEMI_CTL_RXAUI_10G_DW;
+                                 pma2p0_config |= PMA2P0_CTL_RXAUI_10G_DR | PMA2P0_CTL_RXAUI_10G_DW;
                         }
                         else //XAUII/10G
-                                 vsemi_config = VSEMI_CTL_XAUI_DR | VSEMI_CTL_XAUI_DW;
+                                 pma2p0_config = PMA2P0_CTL_XAUI_DR | PMA2P0_CTL_XAUI_DW;
 		}else if(PHYMODE_XFI==phymode){
-			vsemi_config |= VSEMI_CTL_XFI_DR | VSEMI_CTL_XFI_DW;	
+			pma2p0_config |= PMA2P0_CTL_XFI_DR | PMA2P0_CTL_XFI_DW;	
 		}else if(PHYMODE_XLAUI==phymode){
-			vsemi_config |= VSEMI_CTL_XLAUI_DW | VSEMI_CTL_XLAUI_DR;	
+			pma2p0_config |= PMA2P0_CTL_XLAUI_DW | PMA2P0_CTL_XLAUI_DR;	
 		}else if (PHYMODE_IL==phymode){
-			 vsemi_config |= VSEMI_CTL_XLAUI_ILK | VSEMI_CTL_ILK_DW;	
+			 pma2p0_config |= PMA2P0_CTL_XLAUI_ILK | PMA2P0_CTL_ILK_DW;	
 		}
 		
 		for(delay=0; delay<1000000; delay++);
 
-                netsoc_write_mac_reg(mac_base, VSEMI_CTL1, vsemi_config);
+                netsoc_write_mac_reg(mac_base, PMA2P0_CTL1, pma2p0_config);
 
                 xlp9xx_nae_write_pma2p0_mem(mac_base, block, speed, phymode);
-#ifdef VSEMI_DEBUG
-		__netsoc_display_vsemi_indirect_reg(mac_base, block);	
+#ifdef PMA2P0_DEBUG
+		__netsoc_display_pma2p0_indirect_reg(mac_base, block);	
 #endif
 
 }
 
-static void xlp2xx_config_block_vsemi(nae_t *nae, uint32_t block, uint32_t vsemi_por , uint32_t speed, uint32_t phymode)
+static void xlp2xx_config_block_pma2p0(nae_t *nae, uint32_t block, uint32_t pma2p0_por , uint32_t speed, uint32_t phymode)
 {
-	uint32_t delay, vsemi_config;
+	uint32_t delay, pma2p0_config;
 	uint64_t mac_base = netsoc_get_macreg_base_for_phy(nae->mac_base, block);
 
 	if(is_nlm_xlp2xx()){
-	       	if(!vsemi_por){
-                        vsemi_config = netsoc_read_mac_reg(netsoc_get_macreg_base_for_phy(nae->mac_base, block+1), VSEMI_CTL0);
-                        vsemi_config &= ~VSEMI_CTL_POR;
-                        netsoc_write_mac_reg(netsoc_get_macreg_base_for_phy(nae->mac_base, block+1), VSEMI_CTL0, vsemi_config);
+	       	if(!pma2p0_por){
+                        pma2p0_config = netsoc_read_mac_reg(netsoc_get_macreg_base_for_phy(nae->mac_base, block+1), PMA2P0_CTL0);
+                        pma2p0_config &= ~PMA2P0_CTL_POR;
+                        netsoc_write_mac_reg(netsoc_get_macreg_base_for_phy(nae->mac_base, block+1), PMA2P0_CTL0, pma2p0_config);
                	}
                
-		vsemi_config = netsoc_read_mac_reg(mac_base, VSEMI_CTL0);
-                vsemi_config &= 0xFFFF01FF;
-                vsemi_config |= VSEMI_CTL_POR | VSEMI_CTL_SYNTH_RST | VSEMI_CTL_RTHR;
-                netsoc_write_mac_reg(mac_base, VSEMI_CTL0, vsemi_config);
+		pma2p0_config = netsoc_read_mac_reg(mac_base, PMA2P0_CTL0);
+                pma2p0_config &= 0xFFFF01FF;
+                pma2p0_config |= PMA2P0_CTL_POR | PMA2P0_CTL_SYNTH_RST | PMA2P0_CTL_RTHR;
+                netsoc_write_mac_reg(mac_base, PMA2P0_CTL0, pma2p0_config);
 
                 for(delay=0; delay<1000000; delay++);
 
-                vsemi_config = netsoc_read_mac_reg(mac_base, VSEMI_CTL0);
-                vsemi_config &= ~VSEMI_CTL_POR;
-                vsemi_config &= 0xFFFFFE00;
-                netsoc_write_mac_reg(mac_base, VSEMI_CTL0, vsemi_config);
+                pma2p0_config = netsoc_read_mac_reg(mac_base, PMA2P0_CTL0);
+                pma2p0_config &= ~PMA2P0_CTL_POR;
+                pma2p0_config &= 0xFFFFFE00;
+                netsoc_write_mac_reg(mac_base, PMA2P0_CTL0, pma2p0_config);
 
                 for(delay=0; delay<1000000; delay++);
  
-                vsemi_config = netsoc_read_mac_reg(mac_base, VSEMI_CTL1);
-                vsemi_config &= ~((0x7<<4) | 0x7);
+                pma2p0_config = netsoc_read_mac_reg(mac_base, PMA2P0_CTL1);
+                pma2p0_config &= ~((0x7<<4) | 0x7);
 
 		if (phymode == PHYMODE_SGMII)
-	                vsemi_config |= VSEMI_CTL_SGMII_DR | VSEMI_CTL_SGMII_DW;
+	                pma2p0_config |= PMA2P0_CTL_SGMII_DR | PMA2P0_CTL_SGMII_DW;
 		else {
 			if(speed==16)
-                                 vsemi_config = VSEMI_CTL_XAUI_16G_DR | VSEMI_CTL_XAUI_16G_DW;
+                                 pma2p0_config = PMA2P0_CTL_XAUI_16G_DR | PMA2P0_CTL_XAUI_16G_DW;
                         else if(speed==12)
-                                 vsemi_config = VSEMI_CTL_XAUI_12G_DR | VSEMI_CTL_XAUI_12G_DW;
+                                 pma2p0_config = PMA2P0_CTL_XAUI_12G_DR | PMA2P0_CTL_XAUI_12G_DW;
                         else if((PHYMODE_RXAUI==phymode) && (speed==10)) {
-                                 vsemi_config = VSEMI_CTL_RXAUI_10G_DR | VSEMI_CTL_RXAUI_10G_DW;
+                                 pma2p0_config = PMA2P0_CTL_RXAUI_10G_DR | PMA2P0_CTL_RXAUI_10G_DW;
                         }
                         else //XAUII/10G
-                                 vsemi_config = VSEMI_CTL_XAUI_DR | VSEMI_CTL_XAUI_DW;
+                                 pma2p0_config = PMA2P0_CTL_XAUI_DR | PMA2P0_CTL_XAUI_DW;
 		}
 		for(delay=0; delay<1000000; delay++);
 
-                netsoc_write_mac_reg(mac_base, VSEMI_CTL1, vsemi_config);
+                netsoc_write_mac_reg(mac_base, PMA2P0_CTL1, pma2p0_config);
 
-                xlp2xx_nae_program_vsemi(mac_base, block, speed, phymode);
-#ifdef VSEMI_DEBUG
-                display_vsemi_indirect_reg(node, block);
+                xlp2xx_nae_program_pma2p0(mac_base, block, speed, phymode);
+#ifdef PMA2P0_DEBUG
+                display_pma2p0_indirect_reg(node, block);
 #endif
 
-                vsemi_config = netsoc_read_mac_reg(mac_base, VSEMI_CTL0);
-                vsemi_config &= ~(VSEMI_CTL_POR | VSEMI_CTL_SYNTH_RST | VSEMI_CTL_RTHR);
-                netsoc_write_mac_reg(mac_base, VSEMI_CTL0, vsemi_config);
+                pma2p0_config = netsoc_read_mac_reg(mac_base, PMA2P0_CTL0);
+                pma2p0_config &= ~(PMA2P0_CTL_POR | PMA2P0_CTL_SYNTH_RST | PMA2P0_CTL_RTHR);
+                netsoc_write_mac_reg(mac_base, PMA2P0_CTL0, pma2p0_config);
 	}
 }
 
@@ -912,7 +912,7 @@ static void __netsoc_xlp_nae_config_lane_gmac(nae_t *nae, int cplx_mask)
                 }
 
                 if(is_nlm_xlp2xx()){
-			xlp2xx_config_block_vsemi(nae, block, nae->serdes_init_cnt, 0, PHYMODE_SGMII);
+			xlp2xx_config_block_pma2p0(nae, block, nae->serdes_init_cnt, 0, PHYMODE_SGMII);
 			nae->serdes_init_cnt++; 
                 }
 		if(is_nlm_xlp9xx()){
@@ -941,16 +941,16 @@ static void __netsoc_xlp_nae_config_lane_gmac(nae_t *nae, int cplx_mask)
 static void xlp2xx_sgmii_pcs_init(nae_t *nae, uint32_t sgmii_cplx_mask)
 {
 
-	vsemi_mem_init_sgmii_125Mhzrefclk();
-        nlm_hal_config_vsemi_mem_sgmii_4page_125Mhz();
+	pma2p0_mem_init_sgmii_125Mhzrefclk();
+        nlm_hal_config_pma2p0_mem_sgmii_4page_125Mhz();
         __netsoc_xlp_nae_config_lane_gmac(nae, sgmii_cplx_mask);
         netsoc_api_print(NETSOC_APIDBG_PORT,"Net:   Completed XLP2XX SGMII PCS Configuration\n");
 }
 
 static void xlp9xx_sgmii_pcs_init(nae_t *nae, uint32_t sgmii_cplx_mask)
 {
-        nlm_hal_config_vsemi_mem_sgmii();
-        nlm_hal_config_vsemi_mem_sgmii_4page();
+        nlm_hal_config_pma2p0_mem_sgmii();
+        nlm_hal_config_pma2p0_mem_sgmii_4page();
         __netsoc_xlp_nae_config_lane_gmac(nae, sgmii_cplx_mask);
         netsoc_api_print(NETSOC_APIDBG_PORT,"Net: Completed XLP9XX SGMII PCS Configuration\n");
 }
@@ -1078,22 +1078,22 @@ static void xlp2xx_xaui_pcs_init(nae_t *nae, uint32_t xaui_cplx_mask, uint32_t p
                 }
 
 		if(xaui_speed==16){
-       	 	        netsoc_api_print(NETSOC_APIDBG_PORT,"VSEMI: config data for 16G XAUI \n");
-                        nlm_hal_config_vsemi_mem_16G_4page_125();
-                        nlm_hal_config_vsemi_mem_16G_125();
+       	 	        netsoc_api_print(NETSOC_APIDBG_PORT,"PMA2P0: config data for 16G XAUI \n");
+                        nlm_hal_config_pma2p0_mem_16G_4page_125();
+                        nlm_hal_config_pma2p0_mem_16G_125();
                 }
                 else if(xaui_speed==12){
-                        netsoc_api_print(NETSOC_APIDBG_PORT,"VSEMI: config data for 12G XAUI \n");
-                        nlm_hal_config_vsemi_mem_12G_4page_125();
-                        nlm_hal_config_vsemi_mem_12G_125();
+                        netsoc_api_print(NETSOC_APIDBG_PORT,"PMA2P0: config data for 12G XAUI \n");
+                        nlm_hal_config_pma2p0_mem_12G_4page_125();
+                        nlm_hal_config_pma2p0_mem_12G_125();
                 }
                 else {
-                        netsoc_api_print(NETSOC_APIDBG_PORT,"VSEMI: config data for 10G XAUI/RXAUI \n");
-                        nlm_hal_config_vsemi_mem_xaui_4page_125();
-                        nlm_hal_config_vsemi_mem_xaui_125();
+                        netsoc_api_print(NETSOC_APIDBG_PORT,"PMA2P0: config data for 10G XAUI/RXAUI \n");
+                        nlm_hal_config_pma2p0_mem_xaui_4page_125();
+                        nlm_hal_config_pma2p0_mem_xaui_125();
                 }
 		
-		xlp2xx_config_block_vsemi(nae, block, nae->serdes_init_cnt, xaui_speed, 0);
+		xlp2xx_config_block_pma2p0(nae, block, nae->serdes_init_cnt, xaui_speed, 0);
 		nae->serdes_init_cnt++;	
 
                 for( lane_ctrl = PHY_LANE_0_CTRL; lane_ctrl <= PHY_LANE_3_CTRL; lane_ctrl++){
@@ -1177,26 +1177,26 @@ static void xlp9xx_xaui_pcs_init(nae_t *nae, uint32_t xaui_cplx_mask, uint32_t p
                 }
 
 		if(xaui_speed==16){
-       	 	        netsoc_api_print(NETSOC_APIDBG_PORT,"VSEMI: config data for 16G XAUI \n");
-                        nlm_hal_config_vsemi_mem_16G_4page_125();
-                        nlm_hal_config_vsemi_mem_16G_125();
+       	 	        netsoc_api_print(NETSOC_APIDBG_PORT,"PMA2P0: config data for 16G XAUI \n");
+                        nlm_hal_config_pma2p0_mem_16G_4page_125();
+                        nlm_hal_config_pma2p0_mem_16G_125();
                 }
                 else if(xaui_speed==12){
-                        netsoc_api_print(NETSOC_APIDBG_PORT,"VSEMI: config data for 12G XAUI \n");
-                        nlm_hal_config_vsemi_mem_12G_4page_125();
-                        nlm_hal_config_vsemi_mem_12G_125();
+                        netsoc_api_print(NETSOC_APIDBG_PORT,"PMA2P0: config data for 12G XAUI \n");
+                        nlm_hal_config_pma2p0_mem_12G_4page_125();
+                        nlm_hal_config_pma2p0_mem_12G_125();
                 }
 		else if(phymode==PHYMODE_RXAUI){
-                        netsoc_api_print(NETSOC_APIDBG_PORT,"VSEMI: config data for 10G RXAUI \n");
-                        //nlm_hal_config_vsemi_mem_xaui_4page();
-                        //nlm_hal_config_vsemi_mem_xaui();
-                        nlm_hal_config_vsemi_mem_rxaui_4page();
-                        nlm_hal_config_vsemi_mem_rxaui();
+                        netsoc_api_print(NETSOC_APIDBG_PORT,"PMA2P0: config data for 10G RXAUI \n");
+                        //nlm_hal_config_pma2p0_mem_xaui_4page();
+                        //nlm_hal_config_pma2p0_mem_xaui();
+                        nlm_hal_config_pma2p0_mem_rxaui_4page();
+                        nlm_hal_config_pma2p0_mem_rxaui();
 		}
                 else {
-                        netsoc_api_print(NETSOC_APIDBG_PORT,"VSEMI: config data for 10G XAUI \n");
-                        nlm_hal_config_vsemi_mem_xaui_4page();
-                        nlm_hal_config_vsemi_mem_xaui();
+                        netsoc_api_print(NETSOC_APIDBG_PORT,"PMA2P0: config data for 10G XAUI \n");
+                        nlm_hal_config_pma2p0_mem_xaui_4page();
+                        nlm_hal_config_pma2p0_mem_xaui();
                 }
 		
 		/*config PMA2P0 block */
@@ -1280,8 +1280,8 @@ static void xlp9xx_10G_lane_pcs_init(nae_t *nae, uint32_t cplx_mask, uint32_t ph
                 if ((cplx_mask & (1 << block)) == 0) {
                         continue;
                 }
-		nlm_hal_config_vsemi_mem_10G_lane_4page();
-		nlm_hal_config_vsemi_mem_10G_lane();
+		nlm_hal_config_pma2p0_mem_10G_lane_4page();
+		nlm_hal_config_pma2p0_mem_10G_lane();
 		//TODO: If HIGIG pass XGMII speed.
 		xlp9xx_config_pma2p0_serdes(nae, block, nae->serdes_init_cnt, 10, phymode);
 		nae->serdes_init_cnt++;	
diff --git a/arch/mips/netlogic/lib/netlib/src/nlm_hal_nae.c b/arch/mips/netlogic/lib/netlib/src/nlm_hal_nae.c
index 192ff37..27cada9 100644
--- a/arch/mips/netlogic/lib/netlib/src/nlm_hal_nae.c
+++ b/arch/mips/netlogic/lib/netlib/src/nlm_hal_nae.c
@@ -36,7 +36,7 @@
 #include "libfdt.h"
 #include "fdt_helper.h"
 #include "nlm_evp_cpld.h"
-#include "nlm_hal_vsemi_data.h"
+#include "nlm_hal_pma2p0_data.h"
 #include "nlm_hal_fmn_dp.h"
 
 #define VAL_UCORE_RESET(x) ( ( (x) &0xffff) << 8)
@@ -66,19 +66,19 @@ static inline void nlm_hal_PMFF_ALL_workaround(int node, int block, int lane_ctr
 
 uint32_t *cntx2port[NLM_MAX_NODES];
 
-extern unsigned char vsemi_mem_sgmii_4page [256];
-extern unsigned char vsemi_mem_sgmii [256];
+extern unsigned char pma2p0_mem_sgmii_4page [256];
+extern unsigned char pma2p0_mem_sgmii [256];
 
-extern unsigned char vsemi_mem_xaui_4page [256];
-extern unsigned char vsemi_mem_xaui [256];
+extern unsigned char pma2p0_mem_xaui_4page [256];
+extern unsigned char pma2p0_mem_xaui [256];
 
-extern unsigned char vsemi_mem_12G_4page [256];
-extern unsigned char vsemi_mem_12G [256];
+extern unsigned char pma2p0_mem_12G_4page [256];
+extern unsigned char pma2p0_mem_12G [256];
 
-extern unsigned char vsemi_mem_16G_4page [256];
-extern unsigned char vsemi_mem_16G [256];
-extern void vsemi_mem_init_sgmii_125Mhzrefclk(void);
-extern void nlm_hal_config_vsemi_mem_sgmii_4page_125Mhz(void);
+extern unsigned char pma2p0_mem_16G_4page [256];
+extern unsigned char pma2p0_mem_16G [256];
+extern void pma2p0_mem_init_sgmii_125Mhzrefclk(void);
+extern void nlm_hal_config_pma2p0_mem_sgmii_4page_125Mhz(void);
 
 #define CHECK_SOC_VERSION	if (is_nlm_xlp9xx())
 
@@ -89,7 +89,7 @@ extern void nlm_hal_config_vsemi_mem_sgmii_4page_125Mhz(void);
 #else
 #define NAE_DEBUG(...)
 #endif
-#undef VSEMI_DEBUG
+#undef PMA2P0_DEBUG
 uint32_t nae_vfbid_tbl[NLM_MAX_NODES][MAX_NAE_BLOCKS][MAX_VFBID_ENTRIES];
 
 //#define NAE_SH_INFO_DBG 1
@@ -693,128 +693,128 @@ int nlm_hal_mdio_reset(int node, int type, int bus)
 	}
 }
 
-static int nlm_hal_vsemi_cmd_poll_pend(int node, int block)
+static int nlm_hal_pma2p0_cmd_poll_pend(int node, int block)
 {
-	uint32_t vsemi_cmd=0; 
+	uint32_t pma2p0_cmd=0; 
 	uint32_t  retries=0;
 	/*wait for command to clear*/	
 	while(retries<100){
-		vsemi_cmd = nlm_hal_read_mac_reg(node, block, PHY, VSEMI_CMD);
-		if( vsemi_cmd & (1<<31)){
+		pma2p0_cmd = nlm_hal_read_mac_reg(node, block, PHY, PMA2P0_CMD);
+		if( pma2p0_cmd & (1<<31)){
 			retries++;
 			nlm_mdelay(100);	
 			continue;
 		}else{
-			//nlm_print("VSEMI cmd pend clear\n");	
+			//nlm_print("PMA2P0 cmd pend clear\n");	
 			break;
 		}
 	}
 	
 	if(retries==100){
-		nlm_print("VSEMI cmd  clear NOT OK: VSEMI Configuration may not work\n");
+		nlm_print("PMA2P0 cmd  clear NOT OK: PMA2P0 Configuration may not work\n");
 		return 0;
 	}
 
-	return (vsemi_cmd&0xff);
+	return (pma2p0_cmd&0xff);
 }
 
-void write_vsemi_reg(int node, int block, uint32_t lane_no, uint32_t addr, uint32_t data) {
+void write_pma2p0_reg(int node, int block, uint32_t lane_no, uint32_t addr, uint32_t data) {
     uint32_t tmp_data;
     tmp_data = (0x2 << 29) | (lane_no << 21) | ((addr & 0x1fff) << 8) | (data & 0xff);
-    nlm_hal_write_mac_reg(node, block, PHY, VSEMI_CMD, tmp_data);
-    nlm_hal_vsemi_cmd_poll_pend(node, block);	
+    nlm_hal_write_mac_reg(node, block, PHY, PMA2P0_CMD, tmp_data);
+    nlm_hal_pma2p0_cmd_poll_pend(node, block);	
 } 
 
-static uint32_t read_vsemi_reg(int node, int block, uint32_t lane_no, uint32_t addr)
+static uint32_t read_pma2p0_reg(int node, int block, uint32_t lane_no, uint32_t addr)
 {
     uint32_t tmp_data, rd_data;
     tmp_data = (0x3 << 29) | (lane_no << 21) | ((addr & 0x1fff) << 8);
-    nlm_hal_write_mac_reg(node, block, PHY, VSEMI_CMD, tmp_data);
-    rd_data = nlm_hal_vsemi_cmd_poll_pend(node, block);
+    nlm_hal_write_mac_reg(node, block, PHY, PMA2P0_CMD, tmp_data);
+    rd_data = nlm_hal_pma2p0_cmd_poll_pend(node, block);
     return (rd_data & 0xFF);
 }
 
-#ifdef VSEMI_DEBUG
-static void display_vsemi_indirect_reg(int node, int block) 
+#ifdef PMA2P0_DEBUG
+static void display_pma2p0_indirect_reg(int node, int block) 
 {
      uint32_t rd_data, reg_addr, lane_no;
     for (reg_addr=101; reg_addr <111; reg_addr++) {
         for (lane_no=0; lane_no < 4; lane_no++) {
-            rd_data = read_vsemi_reg(node, block, lane_no, reg_addr);
-            nlm_print("VSEMI::  lane:%0d addr: 0x%x rd_data: 0x%02x\n",lane_no, reg_addr, rd_data);
+            rd_data = read_pma2p0_reg(node, block, lane_no, reg_addr);
+            nlm_print("PMA2P0::  lane:%0d addr: 0x%x rd_data: 0x%02x\n",lane_no, reg_addr, rd_data);
         }
     }
     for (reg_addr=101; reg_addr <165; reg_addr++) {
-        rd_data = read_vsemi_reg(node, block, 4, reg_addr);
-        nlm_print("VSEMI:: common lane addr: 0x%x rd_data: 0x%02x\n", reg_addr, rd_data);
+        rd_data = read_pma2p0_reg(node, block, 4, reg_addr);
+        nlm_print("PMA2P0:: common lane addr: 0x%x rd_data: 0x%02x\n", reg_addr, rd_data);
     }
 
 	
 }
-#endif //VSEMI_DEBUG
+#endif //PMA2P0_DEBUG
 
-void nlm_hal_xlp2xx_nae_program_vsemi(int node, int block, int xaui_speed, int phy_mode)
+void nlm_hal_xlp2xx_nae_program_pma2p0(int node, int block, int xaui_speed, int phy_mode)
 {
 	uint32_t reg_addr, lane_no;
-	uint32_t vsemi_cmd=0; 
+	uint32_t pma2p0_cmd=0; 
 	for (reg_addr=101; reg_addr <111; reg_addr++){
 		for (lane_no=0; lane_no<4; lane_no++) { 
-			vsemi_cmd=0; 
+			pma2p0_cmd=0; 
 			if(xaui_speed==16){
-				vsemi_cmd |= vsemi_mem_16G_4page[reg_addr];		
+				pma2p0_cmd |= pma2p0_mem_16G_4page[reg_addr];		
 			}
 			if(xaui_speed==12){
-				vsemi_cmd |= vsemi_mem_12G_4page[reg_addr];		
+				pma2p0_cmd |= pma2p0_mem_12G_4page[reg_addr];		
 			}
 			if((xaui_speed==10)) {
-				vsemi_cmd |= vsemi_mem_xaui_4page[reg_addr];		
-				//nlm_print("vsemi cmd: xaui 4page: [%X]:%X\n", reg_addr, vsemi_cmd);
+				pma2p0_cmd |= pma2p0_mem_xaui_4page[reg_addr];		
+				//nlm_print("pma2p0 cmd: xaui 4page: [%X]:%X\n", reg_addr, pma2p0_cmd);
 			}
 			if(phy_mode==PHYMODE_SGMII){
-				vsemi_cmd |= vsemi_mem_sgmii_4page[reg_addr]; 
+				pma2p0_cmd |= pma2p0_mem_sgmii_4page[reg_addr]; 
 			}
-			write_vsemi_reg(node, block, lane_no, reg_addr, vsemi_cmd);
+			write_pma2p0_reg(node, block, lane_no, reg_addr, pma2p0_cmd);
 		}
 	}
 	
 	/*configure only page 4*/
 	for (reg_addr=101; reg_addr <165; reg_addr++){
-		vsemi_cmd=0; 
+		pma2p0_cmd=0; 
 		if(xaui_speed==16){
-			vsemi_cmd |= vsemi_mem_16G[reg_addr];		
+			pma2p0_cmd |= pma2p0_mem_16G[reg_addr];		
 		}
 		if(xaui_speed==12){
-			vsemi_cmd |= vsemi_mem_12G[reg_addr];		
+			pma2p0_cmd |= pma2p0_mem_12G[reg_addr];		
 		}
 		if(xaui_speed==10) {
-			vsemi_cmd |= vsemi_mem_xaui[reg_addr];		
-			//nlm_print("vsemi cmd: mem xaui [%X]:%X\n", reg_addr, vsemi_cmd);
+			pma2p0_cmd |= pma2p0_mem_xaui[reg_addr];		
+			//nlm_print("pma2p0 cmd: mem xaui [%X]:%X\n", reg_addr, pma2p0_cmd);
 		}
 		if(phy_mode==PHYMODE_SGMII){
-			vsemi_cmd |= vsemi_mem_sgmii[reg_addr]; 
+			pma2p0_cmd |= pma2p0_mem_sgmii[reg_addr]; 
 		}
-		write_vsemi_reg(node, block, 4, reg_addr, vsemi_cmd);
+		write_pma2p0_reg(node, block, 4, reg_addr, pma2p0_cmd);
 	}
 
 	for (lane_no=0; lane_no<4; lane_no++) {
-		write_vsemi_reg(node, block, lane_no, 21, 0xd9);
-		write_vsemi_reg(node, block, lane_no, 22, 0x0);
-		write_vsemi_reg(node, block, lane_no, 23, 0x0);
-		write_vsemi_reg(node, block, lane_no, 87, 0x1f);
+		write_pma2p0_reg(node, block, lane_no, 21, 0xd9);
+		write_pma2p0_reg(node, block, lane_no, 22, 0x0);
+		write_pma2p0_reg(node, block, lane_no, 23, 0x0);
+		write_pma2p0_reg(node, block, lane_no, 87, 0x1f);
 	}
 
 	for (lane_no=0; lane_no<4; lane_no++) {
-		write_vsemi_reg(node, block, lane_no, 24, 0x2);
-		write_vsemi_reg(node, block, lane_no, 25, 0x0);
-		write_vsemi_reg(node, block, lane_no, 26, 0x08);
-		write_vsemi_reg(node, block, lane_no, 27, 0x78);
-		write_vsemi_reg(node, block, lane_no, 28, 0x0);
-		vsemi_cmd = read_vsemi_reg(node, block, lane_no, 86);
-		vsemi_cmd &= ~(1<<3);
-		write_vsemi_reg(node, block, lane_no, 86, vsemi_cmd);
+		write_pma2p0_reg(node, block, lane_no, 24, 0x2);
+		write_pma2p0_reg(node, block, lane_no, 25, 0x0);
+		write_pma2p0_reg(node, block, lane_no, 26, 0x08);
+		write_pma2p0_reg(node, block, lane_no, 27, 0x78);
+		write_pma2p0_reg(node, block, lane_no, 28, 0x0);
+		pma2p0_cmd = read_pma2p0_reg(node, block, lane_no, 86);
+		pma2p0_cmd &= ~(1<<3);
+		write_pma2p0_reg(node, block, lane_no, 86, pma2p0_cmd);
 	}
 
-	nlm_print("VSEMI configuration is OK \n");
+	nlm_print("PMA2P0 configuration is OK \n");
 }
 
 static uint32_t indirect_pma_register_read(int node, int block, int lane_ctrl, int pma_reg_addr)
@@ -1149,8 +1149,8 @@ static void xlp_nae_config_lane_gmac(int node, int cplx_mask)
 {
 	int block, lane_ctrl;
 	int cplx_lane_enable = LM_SGMII | (LM_SGMII << 4) | (LM_SGMII << 8) | (LM_SGMII << 12);
-	int lane_enable = 0, vsemi_config=0;
-	static int vsemi_por=0;
+	int lane_enable = 0, pma2p0_config=0;
+	static int pma2p0_por=0;
 
 	/*  Lane mode progamming
 	 */
@@ -1201,39 +1201,39 @@ static void xlp_nae_config_lane_gmac(int node, int cplx_mask)
 		if(is_nlm_xlp2xx()){
 			int delay;
 //#if 0
-			if(!vsemi_por){			
-				vsemi_config = nlm_hal_read_mac_reg(node, block+1, PHY, VSEMI_CTL0);
-				vsemi_config &= ~VSEMI_CTL_POR;
-				nlm_hal_write_mac_reg(node, block+1, PHY, VSEMI_CTL0, vsemi_config);
-				vsemi_por++;
+			if(!pma2p0_por){			
+				pma2p0_config = nlm_hal_read_mac_reg(node, block+1, PHY, PMA2P0_CTL0);
+				pma2p0_config &= ~PMA2P0_CTL_POR;
+				nlm_hal_write_mac_reg(node, block+1, PHY, PMA2P0_CTL0, pma2p0_config);
+				pma2p0_por++;
 			}
 //#endif
-			vsemi_config = nlm_hal_read_mac_reg(node, block, PHY, VSEMI_CTL0);
-			vsemi_config &= 0xFFFF01FF;
-			vsemi_config |= VSEMI_CTL_POR | VSEMI_CTL_SYNTH_RST | VSEMI_CTL_RTHR;
-			nlm_hal_write_mac_reg(node, block, PHY, VSEMI_CTL0, vsemi_config);
+			pma2p0_config = nlm_hal_read_mac_reg(node, block, PHY, PMA2P0_CTL0);
+			pma2p0_config &= 0xFFFF01FF;
+			pma2p0_config |= PMA2P0_CTL_POR | PMA2P0_CTL_SYNTH_RST | PMA2P0_CTL_RTHR;
+			nlm_hal_write_mac_reg(node, block, PHY, PMA2P0_CTL0, pma2p0_config);
     			
 			for(delay=0; delay<1000000; delay++);
 			
-			vsemi_config = nlm_hal_read_mac_reg(node, block, PHY, VSEMI_CTL0);
-			vsemi_config &= ~VSEMI_CTL_POR;
-			vsemi_config &= 0xFFFFFE00;
-			nlm_hal_write_mac_reg(node, block, PHY, VSEMI_CTL0, vsemi_config);
+			pma2p0_config = nlm_hal_read_mac_reg(node, block, PHY, PMA2P0_CTL0);
+			pma2p0_config &= ~PMA2P0_CTL_POR;
+			pma2p0_config &= 0xFFFFFE00;
+			nlm_hal_write_mac_reg(node, block, PHY, PMA2P0_CTL0, pma2p0_config);
     			
 			for(delay=0; delay<1000000; delay++);
-			vsemi_config = nlm_hal_read_mac_reg(node, block, PHY, VSEMI_CTL1);
-			vsemi_config &= ~((0x7<<4) | 0x7);
-			vsemi_config |= VSEMI_CTL_SGMII_DR | VSEMI_CTL_SGMII_DW;
-			nlm_hal_write_mac_reg(node, block, PHY, VSEMI_CTL1, vsemi_config);
-
-			nlm_hal_xlp2xx_nae_program_vsemi(node, block, 0, PHYMODE_SGMII);
-#ifdef VSEMI_DEBUG
-			display_vsemi_indirect_reg(node, block);
+			pma2p0_config = nlm_hal_read_mac_reg(node, block, PHY, PMA2P0_CTL1);
+			pma2p0_config &= ~((0x7<<4) | 0x7);
+			pma2p0_config |= PMA2P0_CTL_SGMII_DR | PMA2P0_CTL_SGMII_DW;
+			nlm_hal_write_mac_reg(node, block, PHY, PMA2P0_CTL1, pma2p0_config);
+
+			nlm_hal_xlp2xx_nae_program_pma2p0(node, block, 0, PHYMODE_SGMII);
+#ifdef PMA2P0_DEBUG
+			display_pma2p0_indirect_reg(node, block);
 #endif
 			
-			vsemi_config = nlm_hal_read_mac_reg(node, block, PHY, VSEMI_CTL0);
-			vsemi_config &= ~(VSEMI_CTL_POR | VSEMI_CTL_SYNTH_RST | VSEMI_CTL_RTHR);
-			nlm_hal_write_mac_reg(node, block, PHY, VSEMI_CTL0, vsemi_config);
+			pma2p0_config = nlm_hal_read_mac_reg(node, block, PHY, PMA2P0_CTL0);
+			pma2p0_config &= ~(PMA2P0_CTL_POR | PMA2P0_CTL_SYNTH_RST | PMA2P0_CTL_RTHR);
+			nlm_hal_write_mac_reg(node, block, PHY, PMA2P0_CTL0, pma2p0_config);
 		}
 
 		for( lane_ctrl = PHY_LANE_0_CTRL; lane_ctrl <= PHY_LANE_3_CTRL; lane_ctrl++){
@@ -1276,8 +1276,8 @@ void nlm_hal_sgmii_pcs_init(int node, int sgmii_cplx_mask)
 {
 	if( is_nlm_xlp2xx() )
 	{
-		vsemi_mem_init_sgmii_125Mhzrefclk();
-		nlm_hal_config_vsemi_mem_sgmii_4page_125Mhz();
+		pma2p0_mem_init_sgmii_125Mhzrefclk();
+		nlm_hal_config_pma2p0_mem_sgmii_4page_125Mhz();
 	}
 
 #if !defined(XLP_SIM) || defined(NLM_BOARD)
@@ -4537,12 +4537,12 @@ void nlm_hal_rxaui_nlp1042c2_init(int port, int rxaui_mode)
 */
 void nlm_hal_xaui_pcs_init(int node, nlm_nae_config_ptr nae_cfg)
 {
-	/*TODO: include vsemi programming here for HIGIG */
-	int block, lane_ctrl, lane_status, vsemi_config=0;
+	/*TODO: include pma2p0 programming here for HIGIG */
+	int block, lane_ctrl, lane_status, pma2p0_config=0;
 	int cplx_lane_enable = LM_XAUI | (LM_XAUI << 4) | (LM_XAUI << 8) | (LM_XAUI << 12);
 	int lane_enable = 0;
 	int phy_mode = (nae_cfg->rxaui_complex_map) ?  PHYMODE_RXAUI : PHYMODE_XAUI;
-	static int vsemi_por=0;
+	static int pma2p0_por=0;
 	int xaui_cplx_mask = nae_cfg->xaui_complex_map | nae_cfg->rxaui_complex_map;
 	
 
@@ -4594,66 +4594,66 @@ void nlm_hal_xaui_pcs_init(int node, nlm_nae_config_ptr nae_cfg)
 			int delay;
 			int xaui_speed = nae_cfg->xgmii_speed[block];
 			if(xaui_speed==16){
-				nlm_print("VSEMI: config data for 16G XAUI \n");
-				nlm_hal_config_vsemi_mem_16G_4page_125();
-				nlm_hal_config_vsemi_mem_16G_125();
+				nlm_print("PMA2P0: config data for 16G XAUI \n");
+				nlm_hal_config_pma2p0_mem_16G_4page_125();
+				nlm_hal_config_pma2p0_mem_16G_125();
 			}	
 			else if(xaui_speed==12){
-				nlm_print("VSEMI: config data for 12G XAUI \n");
-				nlm_hal_config_vsemi_mem_12G_4page_125();
-				nlm_hal_config_vsemi_mem_12G_125();
+				nlm_print("PMA2P0: config data for 12G XAUI \n");
+				nlm_hal_config_pma2p0_mem_12G_4page_125();
+				nlm_hal_config_pma2p0_mem_12G_125();
 			}	
 			else {
-				nlm_print("VSEMI: config data for 10G XAUI/RXAUI \n");
-				nlm_hal_config_vsemi_mem_xaui_4page_125();
-				nlm_hal_config_vsemi_mem_xaui_125();	
+				nlm_print("PMA2P0: config data for 10G XAUI/RXAUI \n");
+				nlm_hal_config_pma2p0_mem_xaui_4page_125();
+				nlm_hal_config_pma2p0_mem_xaui_125();	
 			}
 			
 			
-			if(!vsemi_por){			
-				vsemi_config = nlm_hal_read_mac_reg(node, block+1, PHY, VSEMI_CTL0);
-				vsemi_config &= ~VSEMI_CTL_POR;
-				nlm_hal_write_mac_reg(node, block+1, PHY, VSEMI_CTL0, vsemi_config);
-				vsemi_por++;
+			if(!pma2p0_por){			
+				pma2p0_config = nlm_hal_read_mac_reg(node, block+1, PHY, PMA2P0_CTL0);
+				pma2p0_config &= ~PMA2P0_CTL_POR;
+				nlm_hal_write_mac_reg(node, block+1, PHY, PMA2P0_CTL0, pma2p0_config);
+				pma2p0_por++;
 			}
 			
-			vsemi_config = nlm_hal_read_mac_reg(node, block, PHY, VSEMI_CTL0);
-			vsemi_config &= 0xFFFF01FF;
-			vsemi_config |= VSEMI_CTL_POR | VSEMI_CTL_SYNTH_RST | VSEMI_CTL_RTHR;
-			nlm_hal_write_mac_reg(node, block, PHY, VSEMI_CTL0, vsemi_config);
+			pma2p0_config = nlm_hal_read_mac_reg(node, block, PHY, PMA2P0_CTL0);
+			pma2p0_config &= 0xFFFF01FF;
+			pma2p0_config |= PMA2P0_CTL_POR | PMA2P0_CTL_SYNTH_RST | PMA2P0_CTL_RTHR;
+			nlm_hal_write_mac_reg(node, block, PHY, PMA2P0_CTL0, pma2p0_config);
     			
 			for(delay=0; delay<1000000; delay++);
 			
-			vsemi_config = nlm_hal_read_mac_reg(node, block, PHY, VSEMI_CTL0);
-			vsemi_config &= ~VSEMI_CTL_POR;
-			vsemi_config &= 0xFFFFFE00;
-			nlm_hal_write_mac_reg(node, block, PHY, VSEMI_CTL0, vsemi_config);
+			pma2p0_config = nlm_hal_read_mac_reg(node, block, PHY, PMA2P0_CTL0);
+			pma2p0_config &= ~PMA2P0_CTL_POR;
+			pma2p0_config &= 0xFFFFFE00;
+			nlm_hal_write_mac_reg(node, block, PHY, PMA2P0_CTL0, pma2p0_config);
 
 			
-			vsemi_config = nlm_hal_read_mac_reg(node, block, PHY, VSEMI_CTL1);
-			vsemi_config &= ~((0x7<<4) | 0x7);
+			pma2p0_config = nlm_hal_read_mac_reg(node, block, PHY, PMA2P0_CTL1);
+			pma2p0_config &= ~((0x7<<4) | 0x7);
 
 			if(xaui_speed==16)
-				 vsemi_config = VSEMI_CTL_XAUI_16G_DR | VSEMI_CTL_XAUI_16G_DW;
+				 pma2p0_config = PMA2P0_CTL_XAUI_16G_DR | PMA2P0_CTL_XAUI_16G_DW;
 			else if(xaui_speed==12)
-				 vsemi_config = VSEMI_CTL_XAUI_12G_DR | VSEMI_CTL_XAUI_12G_DW;
+				 pma2p0_config = PMA2P0_CTL_XAUI_12G_DR | PMA2P0_CTL_XAUI_12G_DW;
 			else if((PHYMODE_RXAUI==phy_mode) && (xaui_speed==10)) {
-				 vsemi_config = VSEMI_CTL_RXAUI_10G_DR | VSEMI_CTL_RXAUI_10G_DW;
+				 pma2p0_config = PMA2P0_CTL_RXAUI_10G_DR | PMA2P0_CTL_RXAUI_10G_DW;
 			}
 			else //XAUII/10G
-				 vsemi_config = VSEMI_CTL_XAUI_DR | VSEMI_CTL_XAUI_DW;
+				 pma2p0_config = PMA2P0_CTL_XAUI_DR | PMA2P0_CTL_XAUI_DW;
 			
 			for(delay=0; delay<1000000; delay++);
-			nlm_hal_write_mac_reg(node, block, PHY, VSEMI_CTL1, vsemi_config);
+			nlm_hal_write_mac_reg(node, block, PHY, PMA2P0_CTL1, pma2p0_config);
 				
-			nlm_hal_xlp2xx_nae_program_vsemi(node, block, xaui_speed, 0);
+			nlm_hal_xlp2xx_nae_program_pma2p0(node, block, xaui_speed, 0);
 			
-#ifdef VSEMI_DEBUG
-			display_vsemi_indirect_reg(node, block);
+#ifdef PMA2P0_DEBUG
+			display_pma2p0_indirect_reg(node, block);
 #endif
-			vsemi_config = nlm_hal_read_mac_reg(node, block, PHY, VSEMI_CTL0);
-			vsemi_config &= ~(VSEMI_CTL_POR | VSEMI_CTL_SYNTH_RST | VSEMI_CTL_RTHR);
-			nlm_hal_write_mac_reg(node, block, PHY, VSEMI_CTL0, vsemi_config);
+			pma2p0_config = nlm_hal_read_mac_reg(node, block, PHY, PMA2P0_CTL0);
+			pma2p0_config &= ~(PMA2P0_CTL_POR | PMA2P0_CTL_SYNTH_RST | PMA2P0_CTL_RTHR);
+			nlm_hal_write_mac_reg(node, block, PHY, PMA2P0_CTL0, pma2p0_config);
 			
 		}
 
diff --git a/arch/mips/netlogic/lib/netlib/src/nlm_hal_pma2p0_config.c b/arch/mips/netlogic/lib/netlib/src/nlm_hal_pma2p0_config.c
new file mode 100644
index 0000000..7713aad
--- /dev/null
+++ b/arch/mips/netlogic/lib/netlib/src/nlm_hal_pma2p0_config.c
@@ -0,0 +1,935 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include "nlm_hal_pma2p0_data.h"
+
+unsigned char pma2p0_mem_sgmii_4page [256];
+unsigned char pma2p0_mem_sgmii [256];
+
+unsigned char pma2p0_mem_xaui_4page [256];
+unsigned char pma2p0_mem_xaui [256];
+
+unsigned char pma2p0_mem_rxaui_4page [256];
+unsigned char pma2p0_mem_rxaui [256];
+
+unsigned char pma2p0_mem_12G_4page [256];
+unsigned char pma2p0_mem_12G [256];
+unsigned char pma2p0_mem_16G_4page [256];
+unsigned char pma2p0_mem_16G [256];
+
+/* For 10G/lane configuration*/
+unsigned char pma2p0_mem_10G_lane_4page[256];
+unsigned char pma2p0_mem_10G_lane[256];
+
+void nlm_hal_config_pma2p0_mem_16G_4page(void)
+{
+
+	pma2p0_mem_16G_4page[101] = 0xB7;
+	pma2p0_mem_16G_4page[102] = 0xB7;
+	pma2p0_mem_16G_4page[103] = 0xC;
+	pma2p0_mem_16G_4page[104] = 0xC;
+	pma2p0_mem_16G_4page[105] = 0x1A;
+	pma2p0_mem_16G_4page[106] = 0x1A;
+	pma2p0_mem_16G_4page[107] = 0x2;
+	pma2p0_mem_16G_4page[108] = 0x2;
+	pma2p0_mem_16G_4page[109] = 0x11;
+	pma2p0_mem_16G_4page[110] = 0x0;
+	
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_16G_4page_125(void)
+{
+	pma2p0_mem_16G_4page[101] = 0xBF;
+	pma2p0_mem_16G_4page[102] = 0xBF;
+	pma2p0_mem_16G_4page[103] = 0xA;
+	pma2p0_mem_16G_4page[104] = 0xA;
+	pma2p0_mem_16G_4page[105] = 0xE;
+	pma2p0_mem_16G_4page[106] = 0xE;
+	pma2p0_mem_16G_4page[107] = 0x1;
+	pma2p0_mem_16G_4page[108] = 0x1;
+	pma2p0_mem_16G_4page[109] = 0x11;
+	pma2p0_mem_16G_4page[110] = 0x0;
+
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_16G(void)
+{
+	
+	pma2p0_mem_16G[101] = 0x99;
+	pma2p0_mem_16G[102] = 0x0;
+	pma2p0_mem_16G[103] = 0x76;
+	pma2p0_mem_16G[104] = 0xB7;
+	pma2p0_mem_16G[105] = 0xB7;
+	pma2p0_mem_16G[106] = 0xC;
+	pma2p0_mem_16G[107] = 0xC;
+	pma2p0_mem_16G[108] = 0x1A;
+	pma2p0_mem_16G[109] = 0x1A;
+	pma2p0_mem_16G[110] = 0x6;
+	pma2p0_mem_16G[111] = 0x16;
+	pma2p0_mem_16G[112] = 0x8;
+	pma2p0_mem_16G[113] = 0x0;
+	pma2p0_mem_16G[114] = 0x8;
+	pma2p0_mem_16G[115] = 0x0;
+	pma2p0_mem_16G[116] = 0xFF;
+	pma2p0_mem_16G[117] = 0xB3;
+	pma2p0_mem_16G[118] = 0xF6;
+	pma2p0_mem_16G[119] = 0xD0;
+	pma2p0_mem_16G[120] = 0xEF;
+	pma2p0_mem_16G[121] = 0xFB;
+	pma2p0_mem_16G[122] = 0xFF;
+	pma2p0_mem_16G[123] = 0xFF;
+	pma2p0_mem_16G[124] = 0xFF;
+	pma2p0_mem_16G[125] = 0xFF;
+	pma2p0_mem_16G[126] = 0xFF;
+	pma2p0_mem_16G[127] = 0xD3;
+	pma2p0_mem_16G[128] = 0xD3;
+	pma2p0_mem_16G[129] = 0xE2;
+	pma2p0_mem_16G[130] = 0xEF;
+	pma2p0_mem_16G[131] = 0xFB;
+	pma2p0_mem_16G[132] = 0xFB;
+	pma2p0_mem_16G[133] = 0xFF;
+	pma2p0_mem_16G[134] = 0xEF;
+	pma2p0_mem_16G[135] = 0xFF;
+	pma2p0_mem_16G[136] = 0xFF;
+	pma2p0_mem_16G[137] = 0xD3;
+	pma2p0_mem_16G[138] = 0xD3;
+	pma2p0_mem_16G[139] = 0xE2;
+	pma2p0_mem_16G[140] = 0xEF;
+	pma2p0_mem_16G[141] = 0xFB;
+	pma2p0_mem_16G[142] = 0xFB;
+	pma2p0_mem_16G[143] = 0xFF;
+	pma2p0_mem_16G[144] = 0xEF;
+	pma2p0_mem_16G[145] = 0xFF;
+	pma2p0_mem_16G[146] = 0xFF;
+	pma2p0_mem_16G[147] = 0xFB;
+	pma2p0_mem_16G[148] = 0xFF;
+	pma2p0_mem_16G[149] = 0x3F;
+	pma2p0_mem_16G[150] = 0x0;
+	pma2p0_mem_16G[151] = 0x64;
+	pma2p0_mem_16G[152] = 0x0;
+	pma2p0_mem_16G[153] = 0x4;
+	pma2p0_mem_16G[154] = 0x2;
+	pma2p0_mem_16G[155] = 0x5;
+	pma2p0_mem_16G[156] = 0x5;
+	pma2p0_mem_16G[157] = 0x4;
+	pma2p0_mem_16G[158] = 0x0;
+	pma2p0_mem_16G[159] = 0x0;
+	pma2p0_mem_16G[160] = 0x8;
+	pma2p0_mem_16G[161] = 0x4;
+	pma2p0_mem_16G[162] = 0x0;
+	pma2p0_mem_16G[163] = 0x0;
+	pma2p0_mem_16G[164] = 0x4;
+
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_16G_125(void)
+{
+
+	pma2p0_mem_16G[101] = 0xAA;
+	pma2p0_mem_16G[102] = 0x0;
+	pma2p0_mem_16G[103] = 0x57;
+	pma2p0_mem_16G[104] = 0xBF;
+	pma2p0_mem_16G[105] = 0xBF;
+	pma2p0_mem_16G[106] = 0xA;
+	pma2p0_mem_16G[107] = 0xA;
+	pma2p0_mem_16G[108] = 0xE;
+	pma2p0_mem_16G[109] = 0xE;
+	pma2p0_mem_16G[110] = 0x4;
+	pma2p0_mem_16G[111] = 0x17;
+	pma2p0_mem_16G[112] = 0x10;
+	pma2p0_mem_16G[113] = 0x0;
+	pma2p0_mem_16G[114] = 0x10;
+	pma2p0_mem_16G[115] = 0x0;
+	pma2p0_mem_16G[116] = 0xFF;
+	pma2p0_mem_16G[117] = 0xC3;
+	pma2p0_mem_16G[118] = 0xF5;
+	pma2p0_mem_16G[119] = 0xD9;
+	pma2p0_mem_16G[120] = 0xF2;
+	pma2p0_mem_16G[121] = 0xFC;
+	pma2p0_mem_16G[122] = 0xFE;
+	pma2p0_mem_16G[123] = 0xFF;
+	pma2p0_mem_16G[124] = 0xFF;
+	pma2p0_mem_16G[125] = 0xFF;
+	pma2p0_mem_16G[126] = 0xFF;
+	pma2p0_mem_16G[127] = 0xDB;
+	pma2p0_mem_16G[128] = 0xE9;
+	pma2p0_mem_16G[129] = 0xC2;
+	pma2p0_mem_16G[130] = 0xF2;
+	pma2p0_mem_16G[131] = 0xFC;
+	pma2p0_mem_16G[132] = 0xFE;
+	pma2p0_mem_16G[133] = 0xF2;
+	pma2p0_mem_16G[134] = 0xF2;
+	pma2p0_mem_16G[135] = 0xFF;
+	pma2p0_mem_16G[136] = 0xFF;
+	pma2p0_mem_16G[137] = 0xDB;
+	pma2p0_mem_16G[138] = 0xE9;
+	pma2p0_mem_16G[139] = 0xC2;
+	pma2p0_mem_16G[140] = 0xF2;
+	pma2p0_mem_16G[141] = 0xFC;
+	pma2p0_mem_16G[142] = 0xFE;
+	pma2p0_mem_16G[143] = 0xF2;
+	pma2p0_mem_16G[144] = 0xF2;
+	pma2p0_mem_16G[145] = 0xFF;
+	pma2p0_mem_16G[146] = 0xFF;
+	pma2p0_mem_16G[147] = 0xFF;
+	pma2p0_mem_16G[148] = 0xF2;
+	pma2p0_mem_16G[149] = 0x3F;
+	pma2p0_mem_16G[150] = 0x0;
+	pma2p0_mem_16G[151] = 0x64;
+	pma2p0_mem_16G[152] = 0x0;
+	pma2p0_mem_16G[153] = 0x2;
+	pma2p0_mem_16G[154] = 0x1;
+	pma2p0_mem_16G[155] = 0x5;
+	pma2p0_mem_16G[156] = 0x5;
+	pma2p0_mem_16G[157] = 0x4;
+	pma2p0_mem_16G[158] = 0x0;
+	pma2p0_mem_16G[159] = 0x0;
+	pma2p0_mem_16G[160] = 0x8;
+	pma2p0_mem_16G[161] = 0x4;
+	pma2p0_mem_16G[162] = 0x0;
+	pma2p0_mem_16G[163] = 0x0;
+	pma2p0_mem_16G[164] = 0x4;
+
+}
+
+void nlm_hal_config_pma2p0_mem_12G_4page(void)
+{
+	pma2p0_mem_12G_4page[101] = 0xC3;
+	pma2p0_mem_12G_4page[102] = 0xC3;
+	pma2p0_mem_12G_4page[103] = 0x11;
+	pma2p0_mem_12G_4page[104] = 0x11;
+	pma2p0_mem_12G_4page[105] = 0x12;
+	pma2p0_mem_12G_4page[106] = 0x12;
+	pma2p0_mem_12G_4page[107] = 0x2;
+	pma2p0_mem_12G_4page[108] = 0x2;
+	pma2p0_mem_12G_4page[109] = 0x0;
+	pma2p0_mem_12G_4page[110] = 0x0;
+
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_12G_4page_125(void)
+{
+	pma2p0_mem_12G_4page[101] = 0xBA;
+	pma2p0_mem_12G_4page[102] = 0xBA;
+	pma2p0_mem_12G_4page[103] = 0xD;
+	pma2p0_mem_12G_4page[104] = 0xD;
+	pma2p0_mem_12G_4page[105] = 0x18;
+	pma2p0_mem_12G_4page[106] = 0x18;
+	pma2p0_mem_12G_4page[107] = 0x2;
+	pma2p0_mem_12G_4page[108] = 0x2;
+	pma2p0_mem_12G_4page[109] = 0x0;
+	pma2p0_mem_12G_4page[110] = 0x0;
+	
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_12G(void)
+{
+	pma2p0_mem_12G[101] = 0x99;
+	pma2p0_mem_12G[102] = 0x0;
+	pma2p0_mem_12G[103] = 0x76;
+	pma2p0_mem_12G[104] = 0xC3;
+	pma2p0_mem_12G[105] = 0xC3;
+	pma2p0_mem_12G[106] = 0x11;
+	pma2p0_mem_12G[107] = 0x11;
+	pma2p0_mem_12G[108] = 0x12;
+	pma2p0_mem_12G[109] = 0x12;
+	pma2p0_mem_12G[110] = 0x6;
+	pma2p0_mem_12G[111] = 0x16;
+	pma2p0_mem_12G[112] = 0x8;
+	pma2p0_mem_12G[113] = 0x0;
+	pma2p0_mem_12G[114] = 0x8;
+	pma2p0_mem_12G[115] = 0x0;
+	pma2p0_mem_12G[116] = 0xFF;
+	pma2p0_mem_12G[117] = 0xB3;
+	pma2p0_mem_12G[118] = 0xF6;
+	pma2p0_mem_12G[119] = 0xD0;
+	pma2p0_mem_12G[120] = 0xEF;
+	pma2p0_mem_12G[121] = 0xFB;
+	pma2p0_mem_12G[122] = 0xFF;
+	pma2p0_mem_12G[123] = 0xFF;
+	pma2p0_mem_12G[124] = 0xFF;
+	pma2p0_mem_12G[125] = 0xFF;
+	pma2p0_mem_12G[126] = 0xFF;
+	pma2p0_mem_12G[127] = 0xD3;
+	pma2p0_mem_12G[128] = 0xD3;
+	pma2p0_mem_12G[129] = 0xE2;
+	pma2p0_mem_12G[130] = 0xEF;
+	pma2p0_mem_12G[131] = 0xFB;
+	pma2p0_mem_12G[132] = 0xFB;
+	pma2p0_mem_12G[133] = 0xFF;
+	pma2p0_mem_12G[134] = 0xEF;
+	pma2p0_mem_12G[135] = 0xFF;
+	pma2p0_mem_12G[136] = 0xFF;
+	pma2p0_mem_12G[137] = 0xD3;
+	pma2p0_mem_12G[138] = 0xD3;
+	pma2p0_mem_12G[139] = 0xE2;
+	pma2p0_mem_12G[140] = 0xEF;
+	pma2p0_mem_12G[141] = 0xFB;
+	pma2p0_mem_12G[142] = 0xFB;
+	pma2p0_mem_12G[143] = 0xFF;
+	pma2p0_mem_12G[144] = 0xEF;
+	pma2p0_mem_12G[145] = 0xFF;
+	pma2p0_mem_12G[146] = 0xFF;
+	pma2p0_mem_12G[147] = 0xFB;
+	pma2p0_mem_12G[148] = 0xFF;
+	pma2p0_mem_12G[149] = 0x3F;
+	pma2p0_mem_12G[150] = 0x0;
+	pma2p0_mem_12G[151] = 0x64;
+	pma2p0_mem_12G[152] = 0x0;
+	pma2p0_mem_12G[153] = 0x4;
+	pma2p0_mem_12G[154] = 0x2;
+	pma2p0_mem_12G[155] = 0xA;
+	pma2p0_mem_12G[156] = 0x5;
+	pma2p0_mem_12G[157] = 0x4;
+	pma2p0_mem_12G[158] = 0x0;
+	pma2p0_mem_12G[159] = 0x0;
+	pma2p0_mem_12G[160] = 0x8;
+	pma2p0_mem_12G[161] = 0x4;
+	pma2p0_mem_12G[162] = 0x0;
+	pma2p0_mem_12G[163] = 0x0;
+	pma2p0_mem_12G[164] = 0x4;
+
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_12G_125(void)
+{
+	pma2p0_mem_12G[101] = 0x99;
+	pma2p0_mem_12G[102] = 0x0;
+	pma2p0_mem_12G[103] = 0x57;
+	pma2p0_mem_12G[104] = 0xBA;
+	pma2p0_mem_12G[105] = 0xBA;
+	pma2p0_mem_12G[106] = 0xD;
+	pma2p0_mem_12G[107] = 0xD;
+	pma2p0_mem_12G[108] = 0x18;
+	pma2p0_mem_12G[109] = 0x18;
+	pma2p0_mem_12G[110] = 0x4;
+	pma2p0_mem_12G[111] = 0x17;
+	pma2p0_mem_12G[112] = 0x8;
+	pma2p0_mem_12G[113] = 0x0;
+	pma2p0_mem_12G[114] = 0x8;
+	pma2p0_mem_12G[115] = 0x0;
+	pma2p0_mem_12G[116] = 0xFF;
+	pma2p0_mem_12G[117] = 0xC3;
+	pma2p0_mem_12G[118] = 0xF5;
+	pma2p0_mem_12G[119] = 0xD9;
+	pma2p0_mem_12G[120] = 0xF2;
+	pma2p0_mem_12G[121] = 0xFC;
+	pma2p0_mem_12G[122] = 0xFE;
+	pma2p0_mem_12G[123] = 0xFF;
+	pma2p0_mem_12G[124] = 0xFF;
+	pma2p0_mem_12G[125] = 0xFF;
+	pma2p0_mem_12G[126] = 0xFF;
+	pma2p0_mem_12G[127] = 0xDB;
+	pma2p0_mem_12G[128] = 0xE9;
+	pma2p0_mem_12G[129] = 0xC2;
+	pma2p0_mem_12G[130] = 0xF2;
+	pma2p0_mem_12G[131] = 0xFC;
+	pma2p0_mem_12G[132] = 0xFE;
+	pma2p0_mem_12G[133] = 0xF2;
+	pma2p0_mem_12G[134] = 0xF2;
+	pma2p0_mem_12G[135] = 0xFF;
+	pma2p0_mem_12G[136] = 0xFF;
+	pma2p0_mem_12G[137] = 0xDB;
+	pma2p0_mem_12G[138] = 0xE9;
+	pma2p0_mem_12G[139] = 0xC2;
+	pma2p0_mem_12G[140] = 0xF2;
+	pma2p0_mem_12G[141] = 0xFC;
+	pma2p0_mem_12G[142] = 0xFE;
+	pma2p0_mem_12G[143] = 0xF2;
+	pma2p0_mem_12G[144] = 0xF2;
+	pma2p0_mem_12G[145] = 0xFF;
+	pma2p0_mem_12G[146] = 0xFF;
+	pma2p0_mem_12G[147] = 0xFF;
+	pma2p0_mem_12G[148] = 0xF2;
+	pma2p0_mem_12G[149] = 0x3F;
+	pma2p0_mem_12G[150] = 0x0;
+	pma2p0_mem_12G[151] = 0x64;
+	pma2p0_mem_12G[152] = 0x0;
+	pma2p0_mem_12G[153] = 0x4;
+	pma2p0_mem_12G[154] = 0x2;
+	pma2p0_mem_12G[155] = 0xA;
+	pma2p0_mem_12G[156] = 0x5;
+	pma2p0_mem_12G[157] = 0x4;
+	pma2p0_mem_12G[158] = 0x0;
+	pma2p0_mem_12G[159] = 0x0;
+	pma2p0_mem_12G[160] = 0x8;
+	pma2p0_mem_12G[161] = 0x4;
+	pma2p0_mem_12G[162] = 0x0;
+	pma2p0_mem_12G[163] = 0x0;
+	pma2p0_mem_12G[164] = 0x4;
+
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_xaui(void)
+{
+	pma2p0_mem_xaui[101] = 0xAA;
+	pma2p0_mem_xaui[102] = 0x0;
+	pma2p0_mem_xaui[103] = 0x6C;
+	pma2p0_mem_xaui[104] = 0xBF;
+	pma2p0_mem_xaui[105] = 0xBF;
+	pma2p0_mem_xaui[106] = 0xA;
+	pma2p0_mem_xaui[107] = 0xA;
+	pma2p0_mem_xaui[108] = 0xE;
+	pma2p0_mem_xaui[109] = 0xE;
+	pma2p0_mem_xaui[110] = 0x7;
+	pma2p0_mem_xaui[111] = 0xC;
+	pma2p0_mem_xaui[112] = 0x10;
+	pma2p0_mem_xaui[113] = 0x0;
+	pma2p0_mem_xaui[114] = 0x10;
+	pma2p0_mem_xaui[115] = 0x0;
+	pma2p0_mem_xaui[116] = 0xFF;
+	pma2p0_mem_xaui[117] = 0xB3;
+	pma2p0_mem_xaui[118] = 0xF6;
+	pma2p0_mem_xaui[119] = 0xD0;
+	pma2p0_mem_xaui[120] = 0xEF;
+	pma2p0_mem_xaui[121] = 0xFB;
+	pma2p0_mem_xaui[122] = 0xFF;
+	pma2p0_mem_xaui[123] = 0xFF;
+	pma2p0_mem_xaui[124] = 0xFF;
+	pma2p0_mem_xaui[125] = 0xFF;
+	pma2p0_mem_xaui[126] = 0xFF;
+	pma2p0_mem_xaui[127] = 0xD3;
+	pma2p0_mem_xaui[128] = 0xD3;
+	pma2p0_mem_xaui[129] = 0xE2;
+	pma2p0_mem_xaui[130] = 0xEF;
+	pma2p0_mem_xaui[131] = 0xFB;
+	pma2p0_mem_xaui[132] = 0xFB;
+	pma2p0_mem_xaui[133] = 0xFF;
+	pma2p0_mem_xaui[134] = 0xEF;
+	pma2p0_mem_xaui[135] = 0xFF;
+	pma2p0_mem_xaui[136] = 0xFF;
+	pma2p0_mem_xaui[137] = 0xD3;
+	pma2p0_mem_xaui[138] = 0xD3;
+	pma2p0_mem_xaui[139] = 0xE2;
+	pma2p0_mem_xaui[140] = 0xEF;
+	pma2p0_mem_xaui[141] = 0xFB;
+	pma2p0_mem_xaui[142] = 0xFB;
+	pma2p0_mem_xaui[143] = 0xFF;
+	pma2p0_mem_xaui[144] = 0xEF;
+	pma2p0_mem_xaui[145] = 0xFF;
+	pma2p0_mem_xaui[146] = 0xFF;
+	pma2p0_mem_xaui[147] = 0xFB;
+	pma2p0_mem_xaui[148] = 0xFF;
+	pma2p0_mem_xaui[149] = 0x3F;
+	pma2p0_mem_xaui[150] = 0x0;
+	pma2p0_mem_xaui[151] = 0x64;
+	pma2p0_mem_xaui[152] = 0x0;
+	pma2p0_mem_xaui[153] = 0x2;
+	pma2p0_mem_xaui[154] = 0x1;
+	pma2p0_mem_xaui[155] = 0x5;
+	pma2p0_mem_xaui[156] = 0x5;
+	pma2p0_mem_xaui[157] = 0x4;
+	pma2p0_mem_xaui[158] = 0x0;
+	pma2p0_mem_xaui[159] = 0x0;
+	pma2p0_mem_xaui[160] = 0x8;
+	pma2p0_mem_xaui[161] = 0x4;
+	pma2p0_mem_xaui[162] = 0x0;
+	pma2p0_mem_xaui[163] = 0x0;
+	pma2p0_mem_xaui[164] = 0x4;
+
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_xaui_125(void)
+{
+	pma2p0_mem_xaui[101] = 0xAA;
+	pma2p0_mem_xaui[102] = 0x0;
+	pma2p0_mem_xaui[103] = 0x57;
+	pma2p0_mem_xaui[104] = 0xBF;
+	pma2p0_mem_xaui[105] = 0xBF;
+	pma2p0_mem_xaui[106] = 0x8;
+	pma2p0_mem_xaui[107] = 0x8;
+	pma2p0_mem_xaui[108] = 0x13;
+	pma2p0_mem_xaui[109] = 0x13;
+	pma2p0_mem_xaui[110] = 0x4;
+	pma2p0_mem_xaui[111] = 0x17;
+	pma2p0_mem_xaui[112] = 0x10;
+	pma2p0_mem_xaui[113] = 0x0;
+	pma2p0_mem_xaui[114] = 0x10;
+	pma2p0_mem_xaui[115] = 0x0;
+	pma2p0_mem_xaui[116] = 0xFF;
+	pma2p0_mem_xaui[117] = 0xC3;
+	pma2p0_mem_xaui[118] = 0xF5;
+	pma2p0_mem_xaui[119] = 0xD9;
+	pma2p0_mem_xaui[120] = 0xF2;
+	pma2p0_mem_xaui[121] = 0xFC;
+	pma2p0_mem_xaui[122] = 0xFE;
+	pma2p0_mem_xaui[123] = 0xFF;
+	pma2p0_mem_xaui[124] = 0xFF;
+	pma2p0_mem_xaui[125] = 0xFF;
+	pma2p0_mem_xaui[126] = 0xFF;
+	pma2p0_mem_xaui[127] = 0xDB;
+	pma2p0_mem_xaui[128] = 0xE9;
+	pma2p0_mem_xaui[129] = 0xC2;
+	pma2p0_mem_xaui[130] = 0xF2;
+	pma2p0_mem_xaui[131] = 0xFC;
+	pma2p0_mem_xaui[132] = 0xFE;
+	pma2p0_mem_xaui[133] = 0xF2;
+	pma2p0_mem_xaui[134] = 0xF2;
+	pma2p0_mem_xaui[135] = 0xFF;
+	pma2p0_mem_xaui[136] = 0xFF;
+	pma2p0_mem_xaui[137] = 0xDB;
+	pma2p0_mem_xaui[138] = 0xE9;
+	pma2p0_mem_xaui[139] = 0xC2;
+	pma2p0_mem_xaui[140] = 0xF2;
+	pma2p0_mem_xaui[141] = 0xFC;
+	pma2p0_mem_xaui[142] = 0xFE;
+	pma2p0_mem_xaui[143] = 0xF2;
+	pma2p0_mem_xaui[144] = 0xF2;
+	pma2p0_mem_xaui[145] = 0xFF;
+	pma2p0_mem_xaui[146] = 0xFF;
+	pma2p0_mem_xaui[147] = 0xFF;
+	pma2p0_mem_xaui[148] = 0xF2;
+	pma2p0_mem_xaui[149] = 0x3F;
+	pma2p0_mem_xaui[150] = 0x0;
+	pma2p0_mem_xaui[151] = 0x64;
+	pma2p0_mem_xaui[152] = 0x0;
+	pma2p0_mem_xaui[153] = 0x2;
+	pma2p0_mem_xaui[154] = 0x1;
+	pma2p0_mem_xaui[155] = 0x5;
+	pma2p0_mem_xaui[156] = 0x5;
+	pma2p0_mem_xaui[157] = 0x4;
+	pma2p0_mem_xaui[158] = 0x0;
+	pma2p0_mem_xaui[159] = 0x0;
+	pma2p0_mem_xaui[160] = 0x8;
+	pma2p0_mem_xaui[161] = 0x4;
+	pma2p0_mem_xaui[162] = 0x0;
+	pma2p0_mem_xaui[163] = 0x0;
+	pma2p0_mem_xaui[164] = 0x4;
+
+}
+
+
+void nlm_hal_config_pma2p0_mem_xaui_4page(void)
+{
+	pma2p0_mem_xaui_4page[101] = 0xBF;
+	pma2p0_mem_xaui_4page[102] = 0xBF;
+	pma2p0_mem_xaui_4page[103] = 0xA;
+	pma2p0_mem_xaui_4page[104] = 0xA;
+	pma2p0_mem_xaui_4page[105] = 0xE;
+	pma2p0_mem_xaui_4page[106] = 0xE;
+	pma2p0_mem_xaui_4page[107] = 0x1;
+	pma2p0_mem_xaui_4page[108] = 0x1;
+	pma2p0_mem_xaui_4page[109] = 0x22;
+	pma2p0_mem_xaui_4page[110] = 0xF;
+
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_rxaui_4page(void)
+{
+	pma2p0_mem_rxaui_4page[101] = 0xBF;
+	pma2p0_mem_rxaui_4page[102] = 0xBF;
+	pma2p0_mem_rxaui_4page[103] = 0xA;
+	pma2p0_mem_rxaui_4page[104] = 0xA;
+	pma2p0_mem_rxaui_4page[105] = 0xE;
+	pma2p0_mem_rxaui_4page[106] = 0xE;
+	pma2p0_mem_rxaui_4page[107] = 0x1;
+	pma2p0_mem_rxaui_4page[108] = 0x1;
+	pma2p0_mem_rxaui_4page[109] = 0x22;
+	pma2p0_mem_rxaui_4page[110] = 0x0;
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_rxaui(void)
+{
+	pma2p0_mem_rxaui[101] = 0xAA;
+	pma2p0_mem_rxaui[102] = 0x0;
+	pma2p0_mem_rxaui[103] = 0x6C;
+	pma2p0_mem_rxaui[104] = 0xBF;
+	pma2p0_mem_rxaui[105] = 0xBF;
+	pma2p0_mem_rxaui[106] = 0xA;
+	pma2p0_mem_rxaui[107] = 0xA;
+	pma2p0_mem_rxaui[108] = 0xE;
+	pma2p0_mem_rxaui[109] = 0xE;
+	pma2p0_mem_rxaui[110] = 0x7;
+	pma2p0_mem_rxaui[111] = 0xC;
+	pma2p0_mem_rxaui[112] = 0x10;
+	pma2p0_mem_rxaui[113] = 0x0;
+	pma2p0_mem_rxaui[114] = 0x10;
+	pma2p0_mem_rxaui[115] = 0x0;
+	pma2p0_mem_rxaui[116] = 0xFF;
+	pma2p0_mem_rxaui[117] = 0xB3;
+	pma2p0_mem_rxaui[118] = 0xF6;
+	pma2p0_mem_rxaui[119] = 0xD0;
+	pma2p0_mem_rxaui[120] = 0xEF;
+	pma2p0_mem_rxaui[121] = 0xFB;
+	pma2p0_mem_rxaui[122] = 0xFF;
+	pma2p0_mem_rxaui[123] = 0xFF;
+	pma2p0_mem_rxaui[124] = 0xFF;
+	pma2p0_mem_rxaui[125] = 0xFF;
+	pma2p0_mem_rxaui[126] = 0xFF;
+	pma2p0_mem_rxaui[127] = 0xD3;
+	pma2p0_mem_rxaui[128] = 0xD3;
+	pma2p0_mem_rxaui[129] = 0xE2;
+	pma2p0_mem_rxaui[130] = 0xEF;
+	pma2p0_mem_rxaui[131] = 0xFB;
+	pma2p0_mem_rxaui[132] = 0xFB;
+	pma2p0_mem_rxaui[133] = 0xFF;
+	pma2p0_mem_rxaui[134] = 0xEF;
+	pma2p0_mem_rxaui[135] = 0xFF;
+	pma2p0_mem_rxaui[136] = 0xFF;
+	pma2p0_mem_rxaui[137] = 0xD3;
+	pma2p0_mem_rxaui[138] = 0xD3;
+	pma2p0_mem_rxaui[139] = 0xE2;
+	pma2p0_mem_rxaui[140] = 0xEF;
+	pma2p0_mem_rxaui[141] = 0xFB;
+	pma2p0_mem_rxaui[142] = 0xFB;
+	pma2p0_mem_rxaui[143] = 0xFF;
+	pma2p0_mem_rxaui[144] = 0xEF;
+	pma2p0_mem_rxaui[145] = 0xFF;
+	pma2p0_mem_rxaui[146] = 0xFF;
+	pma2p0_mem_rxaui[147] = 0xFB;
+	pma2p0_mem_rxaui[148] = 0xFF;
+	pma2p0_mem_rxaui[149] = 0x3F;
+	pma2p0_mem_rxaui[150] = 0x0;
+	pma2p0_mem_rxaui[151] = 0x32;
+	pma2p0_mem_rxaui[152] = 0x0;
+	pma2p0_mem_rxaui[153] = 0x2;
+	pma2p0_mem_rxaui[154] = 0x1;
+	pma2p0_mem_rxaui[155] = 0x5;
+	pma2p0_mem_rxaui[156] = 0x5;
+	pma2p0_mem_rxaui[157] = 0x4;
+	pma2p0_mem_rxaui[158] = 0x0;
+	pma2p0_mem_rxaui[159] = 0x0;
+	pma2p0_mem_rxaui[160] = 0x8;
+	pma2p0_mem_rxaui[161] = 0x4;
+	pma2p0_mem_rxaui[162] = 0x0;
+	pma2p0_mem_rxaui[163] = 0x0;
+	pma2p0_mem_rxaui[164] = 0x4;
+}
+
+
+void nlm_hal_config_pma2p0_mem_xaui_4page_125(void)
+{
+	pma2p0_mem_xaui_4page[101] = 0xBF;
+	pma2p0_mem_xaui_4page[102] = 0xBF;
+	pma2p0_mem_xaui_4page[103] = 0x8;
+	pma2p0_mem_xaui_4page[104] = 0x8;
+	pma2p0_mem_xaui_4page[105] = 0x13;
+	pma2p0_mem_xaui_4page[106] = 0x13;
+	pma2p0_mem_xaui_4page[107] = 0x1;
+	pma2p0_mem_xaui_4page[108] = 0x1;
+	pma2p0_mem_xaui_4page[109] = 0x22;
+	pma2p0_mem_xaui_4page[110] = 0xF;
+
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_sgmii(void)
+{
+	pma2p0_mem_sgmii[101] = 0x99;
+	pma2p0_mem_sgmii[102] = 0x0;
+	pma2p0_mem_sgmii[103] = 0x6C;
+	pma2p0_mem_sgmii[104] = 0xB7;
+	pma2p0_mem_sgmii[105] = 0xB7;
+	pma2p0_mem_sgmii[106] = 0xC;
+	pma2p0_mem_sgmii[107] = 0xC;
+	pma2p0_mem_sgmii[108] = 0x1A;
+	pma2p0_mem_sgmii[109] = 0x1A;
+	pma2p0_mem_sgmii[110] = 0x7;
+	pma2p0_mem_sgmii[111] = 0xC;
+	pma2p0_mem_sgmii[112] = 0x8;
+	pma2p0_mem_sgmii[113] = 0x0;
+	pma2p0_mem_sgmii[114] = 0x8;
+    pma2p0_mem_sgmii[115] = 0x0;
+    pma2p0_mem_sgmii[116] = 0xFF;
+    pma2p0_mem_sgmii[117] = 0xB3;
+    pma2p0_mem_sgmii[118] = 0xF6;
+    pma2p0_mem_sgmii[119] = 0xD0;
+    pma2p0_mem_sgmii[120] = 0xEF;
+    pma2p0_mem_sgmii[121] = 0xFB;
+    pma2p0_mem_sgmii[122] = 0xFF;
+    pma2p0_mem_sgmii[123] = 0xFF;
+    pma2p0_mem_sgmii[124] = 0xFF;
+    pma2p0_mem_sgmii[125] = 0xFF;
+    pma2p0_mem_sgmii[126] = 0xFF;
+    pma2p0_mem_sgmii[127] = 0xD3;
+    pma2p0_mem_sgmii[128] = 0xD3;
+    pma2p0_mem_sgmii[129] = 0xE2;
+    pma2p0_mem_sgmii[130] = 0xEF;
+    pma2p0_mem_sgmii[131] = 0xFB;
+    pma2p0_mem_sgmii[132] = 0xFB;
+    pma2p0_mem_sgmii[133] = 0xFF;
+    pma2p0_mem_sgmii[134] = 0xEF;
+    pma2p0_mem_sgmii[135] = 0xFF;
+    pma2p0_mem_sgmii[136] = 0xFF;
+    pma2p0_mem_sgmii[137] = 0xD3;
+    pma2p0_mem_sgmii[138] = 0xD3;
+    pma2p0_mem_sgmii[139] = 0xE2;
+    pma2p0_mem_sgmii[140] = 0xEF;
+    pma2p0_mem_sgmii[141] = 0xFB;
+    pma2p0_mem_sgmii[142] = 0xFB;
+    pma2p0_mem_sgmii[143] = 0xFF;
+    pma2p0_mem_sgmii[144] = 0xEF;
+    pma2p0_mem_sgmii[145] = 0xFF;
+    pma2p0_mem_sgmii[146] = 0xFF;
+    pma2p0_mem_sgmii[147] = 0xFB;
+    pma2p0_mem_sgmii[148] = 0xFF;
+    pma2p0_mem_sgmii[149] = 0x3F;
+    pma2p0_mem_sgmii[150] = 0x0;
+    pma2p0_mem_sgmii[151] = 0x64;
+    pma2p0_mem_sgmii[152] = 0x0;
+    pma2p0_mem_sgmii[153] = 0x4;
+    pma2p0_mem_sgmii[154] = 0x2;
+    pma2p0_mem_sgmii[155] = 0x5;
+    pma2p0_mem_sgmii[156] = 0x5;
+    pma2p0_mem_sgmii[157] = 0x4;
+    pma2p0_mem_sgmii[158] = 0x0;
+    pma2p0_mem_sgmii[159] = 0x0;
+    pma2p0_mem_sgmii[160] = 0x8;
+    pma2p0_mem_sgmii[161] = 0x4;
+    pma2p0_mem_sgmii[162] = 0x0;
+    pma2p0_mem_sgmii[163] = 0x0;
+    pma2p0_mem_sgmii[164] = 0x4;
+
+}
+
+void pma2p0_mem_init_sgmii_125Mhzrefclk(void)
+{
+	pma2p0_mem_sgmii[101] = 0xAA;
+	pma2p0_mem_sgmii[102] = 0x0;
+	pma2p0_mem_sgmii[103] = 0x57;
+	pma2p0_mem_sgmii[104] = 0xBF;
+	pma2p0_mem_sgmii[105] = 0xBF;
+	pma2p0_mem_sgmii[106] = 0xA;
+	pma2p0_mem_sgmii[107] = 0xA;
+	pma2p0_mem_sgmii[108] = 0xE;
+	pma2p0_mem_sgmii[109] = 0xE;
+	pma2p0_mem_sgmii[110] = 0x4;
+	pma2p0_mem_sgmii[111] = 0x17;
+	pma2p0_mem_sgmii[112] = 0x10;
+	pma2p0_mem_sgmii[113] = 0x0;
+	pma2p0_mem_sgmii[114] = 0x10;
+	pma2p0_mem_sgmii[115] = 0x0;
+	pma2p0_mem_sgmii[116] = 0xFF;
+	pma2p0_mem_sgmii[117] = 0xC3;
+	pma2p0_mem_sgmii[118] = 0xF5;
+	pma2p0_mem_sgmii[119] = 0xD9;
+	pma2p0_mem_sgmii[120] = 0xF2;
+	pma2p0_mem_sgmii[121] = 0xFC;
+	pma2p0_mem_sgmii[122] = 0xFE;
+	pma2p0_mem_sgmii[123] = 0xFF;
+	pma2p0_mem_sgmii[124] = 0xFF;
+	pma2p0_mem_sgmii[125] = 0xFF;
+	pma2p0_mem_sgmii[126] = 0xFF;
+	pma2p0_mem_sgmii[127] = 0xDB;
+	pma2p0_mem_sgmii[128] = 0xE9;
+	pma2p0_mem_sgmii[129] = 0xC2;
+	pma2p0_mem_sgmii[130] = 0xF2;
+	pma2p0_mem_sgmii[131] = 0xFC;
+	pma2p0_mem_sgmii[132] = 0xFE;
+	pma2p0_mem_sgmii[133] = 0xF2;
+	pma2p0_mem_sgmii[134] = 0xF2;
+	pma2p0_mem_sgmii[135] = 0xFF;
+	pma2p0_mem_sgmii[136] = 0xFF;
+	pma2p0_mem_sgmii[137] = 0xDB;
+	pma2p0_mem_sgmii[138] = 0xE9;
+	pma2p0_mem_sgmii[139] = 0xC2;
+	pma2p0_mem_sgmii[140] = 0xF2;
+	pma2p0_mem_sgmii[141] = 0xFC;
+	pma2p0_mem_sgmii[142] = 0xFE;
+	pma2p0_mem_sgmii[143] = 0xF2;
+	pma2p0_mem_sgmii[144] = 0xF2;
+	pma2p0_mem_sgmii[145] = 0xFF;
+	pma2p0_mem_sgmii[146] = 0xFF;
+	pma2p0_mem_sgmii[147] = 0xFF;
+	pma2p0_mem_sgmii[148] = 0xF2;
+	pma2p0_mem_sgmii[149] = 0x3F;
+	pma2p0_mem_sgmii[150] = 0x0;
+	pma2p0_mem_sgmii[151] = 0x64;
+	pma2p0_mem_sgmii[152] = 0x0;
+	pma2p0_mem_sgmii[153] = 0x2;
+	pma2p0_mem_sgmii[154] = 0x1;
+	pma2p0_mem_sgmii[155] = 0x5;
+	pma2p0_mem_sgmii[156] = 0x5;
+	pma2p0_mem_sgmii[157] = 0x4;
+	pma2p0_mem_sgmii[158] = 0x0;
+	pma2p0_mem_sgmii[159] = 0x0;
+	pma2p0_mem_sgmii[160] = 0x8;
+	pma2p0_mem_sgmii[161] = 0x4;
+	pma2p0_mem_sgmii[162] = 0x0;
+	pma2p0_mem_sgmii[163] = 0x0;
+	pma2p0_mem_sgmii[164] = 0x4;
+}
+
+void nlm_hal_config_pma2p0_mem_sgmii_4page(void)
+{    
+	pma2p0_mem_sgmii_4page[101] = 0xB7;
+	pma2p0_mem_sgmii_4page[102] = 0xB7;
+	pma2p0_mem_sgmii_4page[103] = 0xC;
+	pma2p0_mem_sgmii_4page[104] = 0xC;
+	pma2p0_mem_sgmii_4page[105] = 0x1A;
+	pma2p0_mem_sgmii_4page[106] = 0x1A;
+	pma2p0_mem_sgmii_4page[107] = 0x2;
+	pma2p0_mem_sgmii_4page[108] = 0x2;
+	pma2p0_mem_sgmii_4page[109] = 0x11;
+	pma2p0_mem_sgmii_4page[110] = 0xF;
+}
+
+void nlm_hal_config_pma2p0_mem_sgmii_4page_125Mhz(void)
+{
+	pma2p0_mem_sgmii_4page[101] = 0xBF;
+	pma2p0_mem_sgmii_4page[102] = 0xBF;
+	pma2p0_mem_sgmii_4page[103] = 0xA;
+	pma2p0_mem_sgmii_4page[104] = 0xA;
+	pma2p0_mem_sgmii_4page[105] = 0xE;
+	pma2p0_mem_sgmii_4page[106] = 0xE;
+	pma2p0_mem_sgmii_4page[107] = 0x1;
+	pma2p0_mem_sgmii_4page[108] = 0x1;
+	pma2p0_mem_sgmii_4page[109] = 0x11;
+	pma2p0_mem_sgmii_4page[110] = 0xF;
+}
+
+/*Ref CLK is 156.25 MHz for XLAUI and XFI*/
+void nlm_hal_config_pma2p0_mem_10G_lane_4page(void)
+{
+	pma2p0_mem_10G_lane_4page[101] = 0xBD;
+	pma2p0_mem_10G_lane_4page[102] = 0xBD;
+	pma2p0_mem_10G_lane_4page[103] = 0x6;
+	pma2p0_mem_10G_lane_4page[104] = 0x6;
+	pma2p0_mem_10G_lane_4page[105] = 0x1B;
+	pma2p0_mem_10G_lane_4page[106] = 0x1B;
+	pma2p0_mem_10G_lane_4page[107] = 0x1;
+	pma2p0_mem_10G_lane_4page[108] = 0x1;
+	pma2p0_mem_10G_lane_4page[109] = 0x77;
+	pma2p0_mem_10G_lane_4page[110] = 0x0;
+	return;
+}
+
+void nlm_hal_config_pma2p0_mem_10G_lane(void)
+{
+	pma2p0_mem_10G_lane[101] = 0xAA;
+	pma2p0_mem_10G_lane[102] = 0x0;
+	pma2p0_mem_10G_lane[103] = 0x6C;
+	pma2p0_mem_10G_lane[104] = 0xBD;
+	pma2p0_mem_10G_lane[105] = 0xBD;
+	pma2p0_mem_10G_lane[106] = 0x6;
+	pma2p0_mem_10G_lane[107] = 0x6;
+	pma2p0_mem_10G_lane[108] = 0x1B;
+	pma2p0_mem_10G_lane[109] = 0x1B;
+	pma2p0_mem_10G_lane[110] = 0x7;
+	pma2p0_mem_10G_lane[111] = 0xC;
+	pma2p0_mem_10G_lane[112] = 0x10;
+	pma2p0_mem_10G_lane[113] = 0x0;
+	pma2p0_mem_10G_lane[114] = 0x10;
+	pma2p0_mem_10G_lane[115] = 0x0;
+	pma2p0_mem_10G_lane[116] = 0xFF;
+	pma2p0_mem_10G_lane[117] = 0xB3;
+	pma2p0_mem_10G_lane[118] = 0xF6;
+	pma2p0_mem_10G_lane[119] = 0xD0;
+	pma2p0_mem_10G_lane[120] = 0xEF;
+	pma2p0_mem_10G_lane[121] = 0xFB;
+	pma2p0_mem_10G_lane[122] = 0xFF;
+	pma2p0_mem_10G_lane[123] = 0xFF;
+	pma2p0_mem_10G_lane[124] = 0xFF;
+	pma2p0_mem_10G_lane[125] = 0xFF;
+	pma2p0_mem_10G_lane[126] = 0xFF;
+	pma2p0_mem_10G_lane[127] = 0xD3;
+	pma2p0_mem_10G_lane[128] = 0xD3;
+	pma2p0_mem_10G_lane[129] = 0xE2;
+	pma2p0_mem_10G_lane[130] = 0xEF;
+	pma2p0_mem_10G_lane[131] = 0xFB;
+	pma2p0_mem_10G_lane[132] = 0xFB;
+	pma2p0_mem_10G_lane[133] = 0xFF;
+	pma2p0_mem_10G_lane[134] = 0xEF;
+	pma2p0_mem_10G_lane[135] = 0xFF;
+	pma2p0_mem_10G_lane[136] = 0xFF;
+	pma2p0_mem_10G_lane[137] = 0xD3;
+	pma2p0_mem_10G_lane[138] = 0xD3;
+	pma2p0_mem_10G_lane[139] = 0xE2;
+	pma2p0_mem_10G_lane[140] = 0xEF;
+	pma2p0_mem_10G_lane[141] = 0xFB;
+	pma2p0_mem_10G_lane[142] = 0xFB;
+	pma2p0_mem_10G_lane[143] = 0xFF;
+	pma2p0_mem_10G_lane[144] = 0xEF;
+	pma2p0_mem_10G_lane[145] = 0xFF;
+	pma2p0_mem_10G_lane[146] = 0xFF;
+	pma2p0_mem_10G_lane[147] = 0xFB;
+	pma2p0_mem_10G_lane[148] = 0xFF;
+	pma2p0_mem_10G_lane[149] = 0x3F;
+	pma2p0_mem_10G_lane[150] = 0x0;
+	pma2p0_mem_10G_lane[151] = 0x19;
+	pma2p0_mem_10G_lane[152] = 0x11;
+	pma2p0_mem_10G_lane[153] = 0x2;
+	pma2p0_mem_10G_lane[154] = 0x1;
+	pma2p0_mem_10G_lane[155] = 0x0;
+	pma2p0_mem_10G_lane[156] = 0x0;
+	pma2p0_mem_10G_lane[157] = 0x4;
+	pma2p0_mem_10G_lane[158] = 0x0;
+	pma2p0_mem_10G_lane[159] = 0x0;
+	pma2p0_mem_10G_lane[160] = 0x8;
+	pma2p0_mem_10G_lane[161] = 0x4;
+	pma2p0_mem_10G_lane[162] = 0x0;
+	pma2p0_mem_10G_lane[163] = 0x0;
+	pma2p0_mem_10G_lane[164] = 0x4;
+	return;
+}
+
+#ifdef NLM_HAL_LINUX_KERNEL
+#include <linux/types.h>
+#include <linux/module.h>
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_16G_4page);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_16G_4page_125);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_16G);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_16G_125);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_12G_4page);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_12G_4page_125);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_12G);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_12G_125);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_xaui);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_xaui_125);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_xaui_4page);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_xaui_4page_125);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_sgmii);
+EXPORT_SYMBOL(pma2p0_mem_init_sgmii_125Mhzrefclk);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_sgmii_4page);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_sgmii_4page_125Mhz);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_10G_lane_4page);
+EXPORT_SYMBOL(nlm_hal_config_pma2p0_mem_10G_lane);
+EXPORT_SYMBOL(pma2p0_mem_xaui_4page);
+EXPORT_SYMBOL(pma2p0_mem_rxaui_4page);
+EXPORT_SYMBOL(pma2p0_mem_16G);
+EXPORT_SYMBOL(pma2p0_mem_sgmii);
+EXPORT_SYMBOL(pma2p0_mem_12G);
+EXPORT_SYMBOL(pma2p0_mem_12G_4page);
+EXPORT_SYMBOL(pma2p0_mem_sgmii_4page);
+EXPORT_SYMBOL(pma2p0_mem_16G_4page);
+EXPORT_SYMBOL(pma2p0_mem_xaui);
+EXPORT_SYMBOL(pma2p0_mem_rxaui);
+EXPORT_SYMBOL(pma2p0_mem_10G_lane);
+EXPORT_SYMBOL(pma2p0_mem_10G_lane_4page);
+#endif
diff --git a/arch/mips/netlogic/lib/netlib/src/nlm_hal_vsemi_config.c b/arch/mips/netlogic/lib/netlib/src/nlm_hal_vsemi_config.c
deleted file mode 100644
index da559af..0000000
--- a/arch/mips/netlogic/lib/netlib/src/nlm_hal_vsemi_config.c
+++ /dev/null
@@ -1,935 +0,0 @@
-/*-
- * Copyright (c) 2003-2012 Broadcom Corporation
- * All Rights Reserved
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- * #BRCM_2# */
-
-#include "nlm_hal_vsemi_data.h"
-
-unsigned char vsemi_mem_sgmii_4page [256];
-unsigned char vsemi_mem_sgmii [256];
-
-unsigned char vsemi_mem_xaui_4page [256];
-unsigned char vsemi_mem_xaui [256];
-
-unsigned char vsemi_mem_rxaui_4page [256];
-unsigned char vsemi_mem_rxaui [256];
-
-unsigned char vsemi_mem_12G_4page [256];
-unsigned char vsemi_mem_12G [256];
-unsigned char vsemi_mem_16G_4page [256];
-unsigned char vsemi_mem_16G [256];
-
-/* For 10G/lane configuration*/
-unsigned char vsemi_mem_10G_lane_4page[256];
-unsigned char vsemi_mem_10G_lane[256];
-
-void nlm_hal_config_vsemi_mem_16G_4page(void)
-{
-
-	vsemi_mem_16G_4page[101] = 0xB7;
-	vsemi_mem_16G_4page[102] = 0xB7;
-	vsemi_mem_16G_4page[103] = 0xC;
-	vsemi_mem_16G_4page[104] = 0xC;
-	vsemi_mem_16G_4page[105] = 0x1A;
-	vsemi_mem_16G_4page[106] = 0x1A;
-	vsemi_mem_16G_4page[107] = 0x2;
-	vsemi_mem_16G_4page[108] = 0x2;
-	vsemi_mem_16G_4page[109] = 0x11;
-	vsemi_mem_16G_4page[110] = 0x0;
-	
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_16G_4page_125(void)
-{
-	vsemi_mem_16G_4page[101] = 0xBF;
-	vsemi_mem_16G_4page[102] = 0xBF;
-	vsemi_mem_16G_4page[103] = 0xA;
-	vsemi_mem_16G_4page[104] = 0xA;
-	vsemi_mem_16G_4page[105] = 0xE;
-	vsemi_mem_16G_4page[106] = 0xE;
-	vsemi_mem_16G_4page[107] = 0x1;
-	vsemi_mem_16G_4page[108] = 0x1;
-	vsemi_mem_16G_4page[109] = 0x11;
-	vsemi_mem_16G_4page[110] = 0x0;
-
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_16G(void)
-{
-	
-	vsemi_mem_16G[101] = 0x99;
-	vsemi_mem_16G[102] = 0x0;
-	vsemi_mem_16G[103] = 0x76;
-	vsemi_mem_16G[104] = 0xB7;
-	vsemi_mem_16G[105] = 0xB7;
-	vsemi_mem_16G[106] = 0xC;
-	vsemi_mem_16G[107] = 0xC;
-	vsemi_mem_16G[108] = 0x1A;
-	vsemi_mem_16G[109] = 0x1A;
-	vsemi_mem_16G[110] = 0x6;
-	vsemi_mem_16G[111] = 0x16;
-	vsemi_mem_16G[112] = 0x8;
-	vsemi_mem_16G[113] = 0x0;
-	vsemi_mem_16G[114] = 0x8;
-	vsemi_mem_16G[115] = 0x0;
-	vsemi_mem_16G[116] = 0xFF;
-	vsemi_mem_16G[117] = 0xB3;
-	vsemi_mem_16G[118] = 0xF6;
-	vsemi_mem_16G[119] = 0xD0;
-	vsemi_mem_16G[120] = 0xEF;
-	vsemi_mem_16G[121] = 0xFB;
-	vsemi_mem_16G[122] = 0xFF;
-	vsemi_mem_16G[123] = 0xFF;
-	vsemi_mem_16G[124] = 0xFF;
-	vsemi_mem_16G[125] = 0xFF;
-	vsemi_mem_16G[126] = 0xFF;
-	vsemi_mem_16G[127] = 0xD3;
-	vsemi_mem_16G[128] = 0xD3;
-	vsemi_mem_16G[129] = 0xE2;
-	vsemi_mem_16G[130] = 0xEF;
-	vsemi_mem_16G[131] = 0xFB;
-	vsemi_mem_16G[132] = 0xFB;
-	vsemi_mem_16G[133] = 0xFF;
-	vsemi_mem_16G[134] = 0xEF;
-	vsemi_mem_16G[135] = 0xFF;
-	vsemi_mem_16G[136] = 0xFF;
-	vsemi_mem_16G[137] = 0xD3;
-	vsemi_mem_16G[138] = 0xD3;
-	vsemi_mem_16G[139] = 0xE2;
-	vsemi_mem_16G[140] = 0xEF;
-	vsemi_mem_16G[141] = 0xFB;
-	vsemi_mem_16G[142] = 0xFB;
-	vsemi_mem_16G[143] = 0xFF;
-	vsemi_mem_16G[144] = 0xEF;
-	vsemi_mem_16G[145] = 0xFF;
-	vsemi_mem_16G[146] = 0xFF;
-	vsemi_mem_16G[147] = 0xFB;
-	vsemi_mem_16G[148] = 0xFF;
-	vsemi_mem_16G[149] = 0x3F;
-	vsemi_mem_16G[150] = 0x0;
-	vsemi_mem_16G[151] = 0x64;
-	vsemi_mem_16G[152] = 0x0;
-	vsemi_mem_16G[153] = 0x4;
-	vsemi_mem_16G[154] = 0x2;
-	vsemi_mem_16G[155] = 0x5;
-	vsemi_mem_16G[156] = 0x5;
-	vsemi_mem_16G[157] = 0x4;
-	vsemi_mem_16G[158] = 0x0;
-	vsemi_mem_16G[159] = 0x0;
-	vsemi_mem_16G[160] = 0x8;
-	vsemi_mem_16G[161] = 0x4;
-	vsemi_mem_16G[162] = 0x0;
-	vsemi_mem_16G[163] = 0x0;
-	vsemi_mem_16G[164] = 0x4;
-
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_16G_125(void)
-{
-
-	vsemi_mem_16G[101] = 0xAA;
-	vsemi_mem_16G[102] = 0x0;
-	vsemi_mem_16G[103] = 0x57;
-	vsemi_mem_16G[104] = 0xBF;
-	vsemi_mem_16G[105] = 0xBF;
-	vsemi_mem_16G[106] = 0xA;
-	vsemi_mem_16G[107] = 0xA;
-	vsemi_mem_16G[108] = 0xE;
-	vsemi_mem_16G[109] = 0xE;
-	vsemi_mem_16G[110] = 0x4;
-	vsemi_mem_16G[111] = 0x17;
-	vsemi_mem_16G[112] = 0x10;
-	vsemi_mem_16G[113] = 0x0;
-	vsemi_mem_16G[114] = 0x10;
-	vsemi_mem_16G[115] = 0x0;
-	vsemi_mem_16G[116] = 0xFF;
-	vsemi_mem_16G[117] = 0xC3;
-	vsemi_mem_16G[118] = 0xF5;
-	vsemi_mem_16G[119] = 0xD9;
-	vsemi_mem_16G[120] = 0xF2;
-	vsemi_mem_16G[121] = 0xFC;
-	vsemi_mem_16G[122] = 0xFE;
-	vsemi_mem_16G[123] = 0xFF;
-	vsemi_mem_16G[124] = 0xFF;
-	vsemi_mem_16G[125] = 0xFF;
-	vsemi_mem_16G[126] = 0xFF;
-	vsemi_mem_16G[127] = 0xDB;
-	vsemi_mem_16G[128] = 0xE9;
-	vsemi_mem_16G[129] = 0xC2;
-	vsemi_mem_16G[130] = 0xF2;
-	vsemi_mem_16G[131] = 0xFC;
-	vsemi_mem_16G[132] = 0xFE;
-	vsemi_mem_16G[133] = 0xF2;
-	vsemi_mem_16G[134] = 0xF2;
-	vsemi_mem_16G[135] = 0xFF;
-	vsemi_mem_16G[136] = 0xFF;
-	vsemi_mem_16G[137] = 0xDB;
-	vsemi_mem_16G[138] = 0xE9;
-	vsemi_mem_16G[139] = 0xC2;
-	vsemi_mem_16G[140] = 0xF2;
-	vsemi_mem_16G[141] = 0xFC;
-	vsemi_mem_16G[142] = 0xFE;
-	vsemi_mem_16G[143] = 0xF2;
-	vsemi_mem_16G[144] = 0xF2;
-	vsemi_mem_16G[145] = 0xFF;
-	vsemi_mem_16G[146] = 0xFF;
-	vsemi_mem_16G[147] = 0xFF;
-	vsemi_mem_16G[148] = 0xF2;
-	vsemi_mem_16G[149] = 0x3F;
-	vsemi_mem_16G[150] = 0x0;
-	vsemi_mem_16G[151] = 0x64;
-	vsemi_mem_16G[152] = 0x0;
-	vsemi_mem_16G[153] = 0x2;
-	vsemi_mem_16G[154] = 0x1;
-	vsemi_mem_16G[155] = 0x5;
-	vsemi_mem_16G[156] = 0x5;
-	vsemi_mem_16G[157] = 0x4;
-	vsemi_mem_16G[158] = 0x0;
-	vsemi_mem_16G[159] = 0x0;
-	vsemi_mem_16G[160] = 0x8;
-	vsemi_mem_16G[161] = 0x4;
-	vsemi_mem_16G[162] = 0x0;
-	vsemi_mem_16G[163] = 0x0;
-	vsemi_mem_16G[164] = 0x4;
-
-}
-
-void nlm_hal_config_vsemi_mem_12G_4page(void)
-{
-	vsemi_mem_12G_4page[101] = 0xC3;
-	vsemi_mem_12G_4page[102] = 0xC3;
-	vsemi_mem_12G_4page[103] = 0x11;
-	vsemi_mem_12G_4page[104] = 0x11;
-	vsemi_mem_12G_4page[105] = 0x12;
-	vsemi_mem_12G_4page[106] = 0x12;
-	vsemi_mem_12G_4page[107] = 0x2;
-	vsemi_mem_12G_4page[108] = 0x2;
-	vsemi_mem_12G_4page[109] = 0x0;
-	vsemi_mem_12G_4page[110] = 0x0;
-
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_12G_4page_125(void)
-{
-	vsemi_mem_12G_4page[101] = 0xBA;
-	vsemi_mem_12G_4page[102] = 0xBA;
-	vsemi_mem_12G_4page[103] = 0xD;
-	vsemi_mem_12G_4page[104] = 0xD;
-	vsemi_mem_12G_4page[105] = 0x18;
-	vsemi_mem_12G_4page[106] = 0x18;
-	vsemi_mem_12G_4page[107] = 0x2;
-	vsemi_mem_12G_4page[108] = 0x2;
-	vsemi_mem_12G_4page[109] = 0x0;
-	vsemi_mem_12G_4page[110] = 0x0;
-	
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_12G(void)
-{
-	vsemi_mem_12G[101] = 0x99;
-	vsemi_mem_12G[102] = 0x0;
-	vsemi_mem_12G[103] = 0x76;
-	vsemi_mem_12G[104] = 0xC3;
-	vsemi_mem_12G[105] = 0xC3;
-	vsemi_mem_12G[106] = 0x11;
-	vsemi_mem_12G[107] = 0x11;
-	vsemi_mem_12G[108] = 0x12;
-	vsemi_mem_12G[109] = 0x12;
-	vsemi_mem_12G[110] = 0x6;
-	vsemi_mem_12G[111] = 0x16;
-	vsemi_mem_12G[112] = 0x8;
-	vsemi_mem_12G[113] = 0x0;
-	vsemi_mem_12G[114] = 0x8;
-	vsemi_mem_12G[115] = 0x0;
-	vsemi_mem_12G[116] = 0xFF;
-	vsemi_mem_12G[117] = 0xB3;
-	vsemi_mem_12G[118] = 0xF6;
-	vsemi_mem_12G[119] = 0xD0;
-	vsemi_mem_12G[120] = 0xEF;
-	vsemi_mem_12G[121] = 0xFB;
-	vsemi_mem_12G[122] = 0xFF;
-	vsemi_mem_12G[123] = 0xFF;
-	vsemi_mem_12G[124] = 0xFF;
-	vsemi_mem_12G[125] = 0xFF;
-	vsemi_mem_12G[126] = 0xFF;
-	vsemi_mem_12G[127] = 0xD3;
-	vsemi_mem_12G[128] = 0xD3;
-	vsemi_mem_12G[129] = 0xE2;
-	vsemi_mem_12G[130] = 0xEF;
-	vsemi_mem_12G[131] = 0xFB;
-	vsemi_mem_12G[132] = 0xFB;
-	vsemi_mem_12G[133] = 0xFF;
-	vsemi_mem_12G[134] = 0xEF;
-	vsemi_mem_12G[135] = 0xFF;
-	vsemi_mem_12G[136] = 0xFF;
-	vsemi_mem_12G[137] = 0xD3;
-	vsemi_mem_12G[138] = 0xD3;
-	vsemi_mem_12G[139] = 0xE2;
-	vsemi_mem_12G[140] = 0xEF;
-	vsemi_mem_12G[141] = 0xFB;
-	vsemi_mem_12G[142] = 0xFB;
-	vsemi_mem_12G[143] = 0xFF;
-	vsemi_mem_12G[144] = 0xEF;
-	vsemi_mem_12G[145] = 0xFF;
-	vsemi_mem_12G[146] = 0xFF;
-	vsemi_mem_12G[147] = 0xFB;
-	vsemi_mem_12G[148] = 0xFF;
-	vsemi_mem_12G[149] = 0x3F;
-	vsemi_mem_12G[150] = 0x0;
-	vsemi_mem_12G[151] = 0x64;
-	vsemi_mem_12G[152] = 0x0;
-	vsemi_mem_12G[153] = 0x4;
-	vsemi_mem_12G[154] = 0x2;
-	vsemi_mem_12G[155] = 0xA;
-	vsemi_mem_12G[156] = 0x5;
-	vsemi_mem_12G[157] = 0x4;
-	vsemi_mem_12G[158] = 0x0;
-	vsemi_mem_12G[159] = 0x0;
-	vsemi_mem_12G[160] = 0x8;
-	vsemi_mem_12G[161] = 0x4;
-	vsemi_mem_12G[162] = 0x0;
-	vsemi_mem_12G[163] = 0x0;
-	vsemi_mem_12G[164] = 0x4;
-
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_12G_125(void)
-{
-	vsemi_mem_12G[101] = 0x99;
-	vsemi_mem_12G[102] = 0x0;
-	vsemi_mem_12G[103] = 0x57;
-	vsemi_mem_12G[104] = 0xBA;
-	vsemi_mem_12G[105] = 0xBA;
-	vsemi_mem_12G[106] = 0xD;
-	vsemi_mem_12G[107] = 0xD;
-	vsemi_mem_12G[108] = 0x18;
-	vsemi_mem_12G[109] = 0x18;
-	vsemi_mem_12G[110] = 0x4;
-	vsemi_mem_12G[111] = 0x17;
-	vsemi_mem_12G[112] = 0x8;
-	vsemi_mem_12G[113] = 0x0;
-	vsemi_mem_12G[114] = 0x8;
-	vsemi_mem_12G[115] = 0x0;
-	vsemi_mem_12G[116] = 0xFF;
-	vsemi_mem_12G[117] = 0xC3;
-	vsemi_mem_12G[118] = 0xF5;
-	vsemi_mem_12G[119] = 0xD9;
-	vsemi_mem_12G[120] = 0xF2;
-	vsemi_mem_12G[121] = 0xFC;
-	vsemi_mem_12G[122] = 0xFE;
-	vsemi_mem_12G[123] = 0xFF;
-	vsemi_mem_12G[124] = 0xFF;
-	vsemi_mem_12G[125] = 0xFF;
-	vsemi_mem_12G[126] = 0xFF;
-	vsemi_mem_12G[127] = 0xDB;
-	vsemi_mem_12G[128] = 0xE9;
-	vsemi_mem_12G[129] = 0xC2;
-	vsemi_mem_12G[130] = 0xF2;
-	vsemi_mem_12G[131] = 0xFC;
-	vsemi_mem_12G[132] = 0xFE;
-	vsemi_mem_12G[133] = 0xF2;
-	vsemi_mem_12G[134] = 0xF2;
-	vsemi_mem_12G[135] = 0xFF;
-	vsemi_mem_12G[136] = 0xFF;
-	vsemi_mem_12G[137] = 0xDB;
-	vsemi_mem_12G[138] = 0xE9;
-	vsemi_mem_12G[139] = 0xC2;
-	vsemi_mem_12G[140] = 0xF2;
-	vsemi_mem_12G[141] = 0xFC;
-	vsemi_mem_12G[142] = 0xFE;
-	vsemi_mem_12G[143] = 0xF2;
-	vsemi_mem_12G[144] = 0xF2;
-	vsemi_mem_12G[145] = 0xFF;
-	vsemi_mem_12G[146] = 0xFF;
-	vsemi_mem_12G[147] = 0xFF;
-	vsemi_mem_12G[148] = 0xF2;
-	vsemi_mem_12G[149] = 0x3F;
-	vsemi_mem_12G[150] = 0x0;
-	vsemi_mem_12G[151] = 0x64;
-	vsemi_mem_12G[152] = 0x0;
-	vsemi_mem_12G[153] = 0x4;
-	vsemi_mem_12G[154] = 0x2;
-	vsemi_mem_12G[155] = 0xA;
-	vsemi_mem_12G[156] = 0x5;
-	vsemi_mem_12G[157] = 0x4;
-	vsemi_mem_12G[158] = 0x0;
-	vsemi_mem_12G[159] = 0x0;
-	vsemi_mem_12G[160] = 0x8;
-	vsemi_mem_12G[161] = 0x4;
-	vsemi_mem_12G[162] = 0x0;
-	vsemi_mem_12G[163] = 0x0;
-	vsemi_mem_12G[164] = 0x4;
-
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_xaui(void)
-{
-	vsemi_mem_xaui[101] = 0xAA;
-	vsemi_mem_xaui[102] = 0x0;
-	vsemi_mem_xaui[103] = 0x6C;
-	vsemi_mem_xaui[104] = 0xBF;
-	vsemi_mem_xaui[105] = 0xBF;
-	vsemi_mem_xaui[106] = 0xA;
-	vsemi_mem_xaui[107] = 0xA;
-	vsemi_mem_xaui[108] = 0xE;
-	vsemi_mem_xaui[109] = 0xE;
-	vsemi_mem_xaui[110] = 0x7;
-	vsemi_mem_xaui[111] = 0xC;
-	vsemi_mem_xaui[112] = 0x10;
-	vsemi_mem_xaui[113] = 0x0;
-	vsemi_mem_xaui[114] = 0x10;
-	vsemi_mem_xaui[115] = 0x0;
-	vsemi_mem_xaui[116] = 0xFF;
-	vsemi_mem_xaui[117] = 0xB3;
-	vsemi_mem_xaui[118] = 0xF6;
-	vsemi_mem_xaui[119] = 0xD0;
-	vsemi_mem_xaui[120] = 0xEF;
-	vsemi_mem_xaui[121] = 0xFB;
-	vsemi_mem_xaui[122] = 0xFF;
-	vsemi_mem_xaui[123] = 0xFF;
-	vsemi_mem_xaui[124] = 0xFF;
-	vsemi_mem_xaui[125] = 0xFF;
-	vsemi_mem_xaui[126] = 0xFF;
-	vsemi_mem_xaui[127] = 0xD3;
-	vsemi_mem_xaui[128] = 0xD3;
-	vsemi_mem_xaui[129] = 0xE2;
-	vsemi_mem_xaui[130] = 0xEF;
-	vsemi_mem_xaui[131] = 0xFB;
-	vsemi_mem_xaui[132] = 0xFB;
-	vsemi_mem_xaui[133] = 0xFF;
-	vsemi_mem_xaui[134] = 0xEF;
-	vsemi_mem_xaui[135] = 0xFF;
-	vsemi_mem_xaui[136] = 0xFF;
-	vsemi_mem_xaui[137] = 0xD3;
-	vsemi_mem_xaui[138] = 0xD3;
-	vsemi_mem_xaui[139] = 0xE2;
-	vsemi_mem_xaui[140] = 0xEF;
-	vsemi_mem_xaui[141] = 0xFB;
-	vsemi_mem_xaui[142] = 0xFB;
-	vsemi_mem_xaui[143] = 0xFF;
-	vsemi_mem_xaui[144] = 0xEF;
-	vsemi_mem_xaui[145] = 0xFF;
-	vsemi_mem_xaui[146] = 0xFF;
-	vsemi_mem_xaui[147] = 0xFB;
-	vsemi_mem_xaui[148] = 0xFF;
-	vsemi_mem_xaui[149] = 0x3F;
-	vsemi_mem_xaui[150] = 0x0;
-	vsemi_mem_xaui[151] = 0x64;
-	vsemi_mem_xaui[152] = 0x0;
-	vsemi_mem_xaui[153] = 0x2;
-	vsemi_mem_xaui[154] = 0x1;
-	vsemi_mem_xaui[155] = 0x5;
-	vsemi_mem_xaui[156] = 0x5;
-	vsemi_mem_xaui[157] = 0x4;
-	vsemi_mem_xaui[158] = 0x0;
-	vsemi_mem_xaui[159] = 0x0;
-	vsemi_mem_xaui[160] = 0x8;
-	vsemi_mem_xaui[161] = 0x4;
-	vsemi_mem_xaui[162] = 0x0;
-	vsemi_mem_xaui[163] = 0x0;
-	vsemi_mem_xaui[164] = 0x4;
-
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_xaui_125(void)
-{
-	vsemi_mem_xaui[101] = 0xAA;
-	vsemi_mem_xaui[102] = 0x0;
-	vsemi_mem_xaui[103] = 0x57;
-	vsemi_mem_xaui[104] = 0xBF;
-	vsemi_mem_xaui[105] = 0xBF;
-	vsemi_mem_xaui[106] = 0x8;
-	vsemi_mem_xaui[107] = 0x8;
-	vsemi_mem_xaui[108] = 0x13;
-	vsemi_mem_xaui[109] = 0x13;
-	vsemi_mem_xaui[110] = 0x4;
-	vsemi_mem_xaui[111] = 0x17;
-	vsemi_mem_xaui[112] = 0x10;
-	vsemi_mem_xaui[113] = 0x0;
-	vsemi_mem_xaui[114] = 0x10;
-	vsemi_mem_xaui[115] = 0x0;
-	vsemi_mem_xaui[116] = 0xFF;
-	vsemi_mem_xaui[117] = 0xC3;
-	vsemi_mem_xaui[118] = 0xF5;
-	vsemi_mem_xaui[119] = 0xD9;
-	vsemi_mem_xaui[120] = 0xF2;
-	vsemi_mem_xaui[121] = 0xFC;
-	vsemi_mem_xaui[122] = 0xFE;
-	vsemi_mem_xaui[123] = 0xFF;
-	vsemi_mem_xaui[124] = 0xFF;
-	vsemi_mem_xaui[125] = 0xFF;
-	vsemi_mem_xaui[126] = 0xFF;
-	vsemi_mem_xaui[127] = 0xDB;
-	vsemi_mem_xaui[128] = 0xE9;
-	vsemi_mem_xaui[129] = 0xC2;
-	vsemi_mem_xaui[130] = 0xF2;
-	vsemi_mem_xaui[131] = 0xFC;
-	vsemi_mem_xaui[132] = 0xFE;
-	vsemi_mem_xaui[133] = 0xF2;
-	vsemi_mem_xaui[134] = 0xF2;
-	vsemi_mem_xaui[135] = 0xFF;
-	vsemi_mem_xaui[136] = 0xFF;
-	vsemi_mem_xaui[137] = 0xDB;
-	vsemi_mem_xaui[138] = 0xE9;
-	vsemi_mem_xaui[139] = 0xC2;
-	vsemi_mem_xaui[140] = 0xF2;
-	vsemi_mem_xaui[141] = 0xFC;
-	vsemi_mem_xaui[142] = 0xFE;
-	vsemi_mem_xaui[143] = 0xF2;
-	vsemi_mem_xaui[144] = 0xF2;
-	vsemi_mem_xaui[145] = 0xFF;
-	vsemi_mem_xaui[146] = 0xFF;
-	vsemi_mem_xaui[147] = 0xFF;
-	vsemi_mem_xaui[148] = 0xF2;
-	vsemi_mem_xaui[149] = 0x3F;
-	vsemi_mem_xaui[150] = 0x0;
-	vsemi_mem_xaui[151] = 0x64;
-	vsemi_mem_xaui[152] = 0x0;
-	vsemi_mem_xaui[153] = 0x2;
-	vsemi_mem_xaui[154] = 0x1;
-	vsemi_mem_xaui[155] = 0x5;
-	vsemi_mem_xaui[156] = 0x5;
-	vsemi_mem_xaui[157] = 0x4;
-	vsemi_mem_xaui[158] = 0x0;
-	vsemi_mem_xaui[159] = 0x0;
-	vsemi_mem_xaui[160] = 0x8;
-	vsemi_mem_xaui[161] = 0x4;
-	vsemi_mem_xaui[162] = 0x0;
-	vsemi_mem_xaui[163] = 0x0;
-	vsemi_mem_xaui[164] = 0x4;
-
-}
-
-
-void nlm_hal_config_vsemi_mem_xaui_4page(void)
-{
-	vsemi_mem_xaui_4page[101] = 0xBF;
-	vsemi_mem_xaui_4page[102] = 0xBF;
-	vsemi_mem_xaui_4page[103] = 0xA;
-	vsemi_mem_xaui_4page[104] = 0xA;
-	vsemi_mem_xaui_4page[105] = 0xE;
-	vsemi_mem_xaui_4page[106] = 0xE;
-	vsemi_mem_xaui_4page[107] = 0x1;
-	vsemi_mem_xaui_4page[108] = 0x1;
-	vsemi_mem_xaui_4page[109] = 0x22;
-	vsemi_mem_xaui_4page[110] = 0xF;
-
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_rxaui_4page(void)
-{
-	vsemi_mem_rxaui_4page[101] = 0xBF;
-	vsemi_mem_rxaui_4page[102] = 0xBF;
-	vsemi_mem_rxaui_4page[103] = 0xA;
-	vsemi_mem_rxaui_4page[104] = 0xA;
-	vsemi_mem_rxaui_4page[105] = 0xE;
-	vsemi_mem_rxaui_4page[106] = 0xE;
-	vsemi_mem_rxaui_4page[107] = 0x1;
-	vsemi_mem_rxaui_4page[108] = 0x1;
-	vsemi_mem_rxaui_4page[109] = 0x22;
-	vsemi_mem_rxaui_4page[110] = 0x0;
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_rxaui(void)
-{
-	vsemi_mem_rxaui[101] = 0xAA;
-	vsemi_mem_rxaui[102] = 0x0;
-	vsemi_mem_rxaui[103] = 0x6C;
-	vsemi_mem_rxaui[104] = 0xBF;
-	vsemi_mem_rxaui[105] = 0xBF;
-	vsemi_mem_rxaui[106] = 0xA;
-	vsemi_mem_rxaui[107] = 0xA;
-	vsemi_mem_rxaui[108] = 0xE;
-	vsemi_mem_rxaui[109] = 0xE;
-	vsemi_mem_rxaui[110] = 0x7;
-	vsemi_mem_rxaui[111] = 0xC;
-	vsemi_mem_rxaui[112] = 0x10;
-	vsemi_mem_rxaui[113] = 0x0;
-	vsemi_mem_rxaui[114] = 0x10;
-	vsemi_mem_rxaui[115] = 0x0;
-	vsemi_mem_rxaui[116] = 0xFF;
-	vsemi_mem_rxaui[117] = 0xB3;
-	vsemi_mem_rxaui[118] = 0xF6;
-	vsemi_mem_rxaui[119] = 0xD0;
-	vsemi_mem_rxaui[120] = 0xEF;
-	vsemi_mem_rxaui[121] = 0xFB;
-	vsemi_mem_rxaui[122] = 0xFF;
-	vsemi_mem_rxaui[123] = 0xFF;
-	vsemi_mem_rxaui[124] = 0xFF;
-	vsemi_mem_rxaui[125] = 0xFF;
-	vsemi_mem_rxaui[126] = 0xFF;
-	vsemi_mem_rxaui[127] = 0xD3;
-	vsemi_mem_rxaui[128] = 0xD3;
-	vsemi_mem_rxaui[129] = 0xE2;
-	vsemi_mem_rxaui[130] = 0xEF;
-	vsemi_mem_rxaui[131] = 0xFB;
-	vsemi_mem_rxaui[132] = 0xFB;
-	vsemi_mem_rxaui[133] = 0xFF;
-	vsemi_mem_rxaui[134] = 0xEF;
-	vsemi_mem_rxaui[135] = 0xFF;
-	vsemi_mem_rxaui[136] = 0xFF;
-	vsemi_mem_rxaui[137] = 0xD3;
-	vsemi_mem_rxaui[138] = 0xD3;
-	vsemi_mem_rxaui[139] = 0xE2;
-	vsemi_mem_rxaui[140] = 0xEF;
-	vsemi_mem_rxaui[141] = 0xFB;
-	vsemi_mem_rxaui[142] = 0xFB;
-	vsemi_mem_rxaui[143] = 0xFF;
-	vsemi_mem_rxaui[144] = 0xEF;
-	vsemi_mem_rxaui[145] = 0xFF;
-	vsemi_mem_rxaui[146] = 0xFF;
-	vsemi_mem_rxaui[147] = 0xFB;
-	vsemi_mem_rxaui[148] = 0xFF;
-	vsemi_mem_rxaui[149] = 0x3F;
-	vsemi_mem_rxaui[150] = 0x0;
-	vsemi_mem_rxaui[151] = 0x32;
-	vsemi_mem_rxaui[152] = 0x0;
-	vsemi_mem_rxaui[153] = 0x2;
-	vsemi_mem_rxaui[154] = 0x1;
-	vsemi_mem_rxaui[155] = 0x5;
-	vsemi_mem_rxaui[156] = 0x5;
-	vsemi_mem_rxaui[157] = 0x4;
-	vsemi_mem_rxaui[158] = 0x0;
-	vsemi_mem_rxaui[159] = 0x0;
-	vsemi_mem_rxaui[160] = 0x8;
-	vsemi_mem_rxaui[161] = 0x4;
-	vsemi_mem_rxaui[162] = 0x0;
-	vsemi_mem_rxaui[163] = 0x0;
-	vsemi_mem_rxaui[164] = 0x4;
-}
-
-
-void nlm_hal_config_vsemi_mem_xaui_4page_125(void)
-{
-	vsemi_mem_xaui_4page[101] = 0xBF;
-	vsemi_mem_xaui_4page[102] = 0xBF;
-	vsemi_mem_xaui_4page[103] = 0x8;
-	vsemi_mem_xaui_4page[104] = 0x8;
-	vsemi_mem_xaui_4page[105] = 0x13;
-	vsemi_mem_xaui_4page[106] = 0x13;
-	vsemi_mem_xaui_4page[107] = 0x1;
-	vsemi_mem_xaui_4page[108] = 0x1;
-	vsemi_mem_xaui_4page[109] = 0x22;
-	vsemi_mem_xaui_4page[110] = 0xF;
-
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_sgmii(void)
-{
-	vsemi_mem_sgmii[101] = 0x99;
-	vsemi_mem_sgmii[102] = 0x0;
-	vsemi_mem_sgmii[103] = 0x6C;
-	vsemi_mem_sgmii[104] = 0xB7;
-	vsemi_mem_sgmii[105] = 0xB7;
-	vsemi_mem_sgmii[106] = 0xC;
-	vsemi_mem_sgmii[107] = 0xC;
-	vsemi_mem_sgmii[108] = 0x1A;
-	vsemi_mem_sgmii[109] = 0x1A;
-	vsemi_mem_sgmii[110] = 0x7;
-	vsemi_mem_sgmii[111] = 0xC;
-	vsemi_mem_sgmii[112] = 0x8;
-	vsemi_mem_sgmii[113] = 0x0;
-	vsemi_mem_sgmii[114] = 0x8;
-    vsemi_mem_sgmii[115] = 0x0;
-    vsemi_mem_sgmii[116] = 0xFF;
-    vsemi_mem_sgmii[117] = 0xB3;
-    vsemi_mem_sgmii[118] = 0xF6;
-    vsemi_mem_sgmii[119] = 0xD0;
-    vsemi_mem_sgmii[120] = 0xEF;
-    vsemi_mem_sgmii[121] = 0xFB;
-    vsemi_mem_sgmii[122] = 0xFF;
-    vsemi_mem_sgmii[123] = 0xFF;
-    vsemi_mem_sgmii[124] = 0xFF;
-    vsemi_mem_sgmii[125] = 0xFF;
-    vsemi_mem_sgmii[126] = 0xFF;
-    vsemi_mem_sgmii[127] = 0xD3;
-    vsemi_mem_sgmii[128] = 0xD3;
-    vsemi_mem_sgmii[129] = 0xE2;
-    vsemi_mem_sgmii[130] = 0xEF;
-    vsemi_mem_sgmii[131] = 0xFB;
-    vsemi_mem_sgmii[132] = 0xFB;
-    vsemi_mem_sgmii[133] = 0xFF;
-    vsemi_mem_sgmii[134] = 0xEF;
-    vsemi_mem_sgmii[135] = 0xFF;
-    vsemi_mem_sgmii[136] = 0xFF;
-    vsemi_mem_sgmii[137] = 0xD3;
-    vsemi_mem_sgmii[138] = 0xD3;
-    vsemi_mem_sgmii[139] = 0xE2;
-    vsemi_mem_sgmii[140] = 0xEF;
-    vsemi_mem_sgmii[141] = 0xFB;
-    vsemi_mem_sgmii[142] = 0xFB;
-    vsemi_mem_sgmii[143] = 0xFF;
-    vsemi_mem_sgmii[144] = 0xEF;
-    vsemi_mem_sgmii[145] = 0xFF;
-    vsemi_mem_sgmii[146] = 0xFF;
-    vsemi_mem_sgmii[147] = 0xFB;
-    vsemi_mem_sgmii[148] = 0xFF;
-    vsemi_mem_sgmii[149] = 0x3F;
-    vsemi_mem_sgmii[150] = 0x0;
-    vsemi_mem_sgmii[151] = 0x64;
-    vsemi_mem_sgmii[152] = 0x0;
-    vsemi_mem_sgmii[153] = 0x4;
-    vsemi_mem_sgmii[154] = 0x2;
-    vsemi_mem_sgmii[155] = 0x5;
-    vsemi_mem_sgmii[156] = 0x5;
-    vsemi_mem_sgmii[157] = 0x4;
-    vsemi_mem_sgmii[158] = 0x0;
-    vsemi_mem_sgmii[159] = 0x0;
-    vsemi_mem_sgmii[160] = 0x8;
-    vsemi_mem_sgmii[161] = 0x4;
-    vsemi_mem_sgmii[162] = 0x0;
-    vsemi_mem_sgmii[163] = 0x0;
-    vsemi_mem_sgmii[164] = 0x4;
-
-}
-
-void vsemi_mem_init_sgmii_125Mhzrefclk(void)
-{
-	vsemi_mem_sgmii[101] = 0xAA;
-	vsemi_mem_sgmii[102] = 0x0;
-	vsemi_mem_sgmii[103] = 0x57;
-	vsemi_mem_sgmii[104] = 0xBF;
-	vsemi_mem_sgmii[105] = 0xBF;
-	vsemi_mem_sgmii[106] = 0xA;
-	vsemi_mem_sgmii[107] = 0xA;
-	vsemi_mem_sgmii[108] = 0xE;
-	vsemi_mem_sgmii[109] = 0xE;
-	vsemi_mem_sgmii[110] = 0x4;
-	vsemi_mem_sgmii[111] = 0x17;
-	vsemi_mem_sgmii[112] = 0x10;
-	vsemi_mem_sgmii[113] = 0x0;
-	vsemi_mem_sgmii[114] = 0x10;
-	vsemi_mem_sgmii[115] = 0x0;
-	vsemi_mem_sgmii[116] = 0xFF;
-	vsemi_mem_sgmii[117] = 0xC3;
-	vsemi_mem_sgmii[118] = 0xF5;
-	vsemi_mem_sgmii[119] = 0xD9;
-	vsemi_mem_sgmii[120] = 0xF2;
-	vsemi_mem_sgmii[121] = 0xFC;
-	vsemi_mem_sgmii[122] = 0xFE;
-	vsemi_mem_sgmii[123] = 0xFF;
-	vsemi_mem_sgmii[124] = 0xFF;
-	vsemi_mem_sgmii[125] = 0xFF;
-	vsemi_mem_sgmii[126] = 0xFF;
-	vsemi_mem_sgmii[127] = 0xDB;
-	vsemi_mem_sgmii[128] = 0xE9;
-	vsemi_mem_sgmii[129] = 0xC2;
-	vsemi_mem_sgmii[130] = 0xF2;
-	vsemi_mem_sgmii[131] = 0xFC;
-	vsemi_mem_sgmii[132] = 0xFE;
-	vsemi_mem_sgmii[133] = 0xF2;
-	vsemi_mem_sgmii[134] = 0xF2;
-	vsemi_mem_sgmii[135] = 0xFF;
-	vsemi_mem_sgmii[136] = 0xFF;
-	vsemi_mem_sgmii[137] = 0xDB;
-	vsemi_mem_sgmii[138] = 0xE9;
-	vsemi_mem_sgmii[139] = 0xC2;
-	vsemi_mem_sgmii[140] = 0xF2;
-	vsemi_mem_sgmii[141] = 0xFC;
-	vsemi_mem_sgmii[142] = 0xFE;
-	vsemi_mem_sgmii[143] = 0xF2;
-	vsemi_mem_sgmii[144] = 0xF2;
-	vsemi_mem_sgmii[145] = 0xFF;
-	vsemi_mem_sgmii[146] = 0xFF;
-	vsemi_mem_sgmii[147] = 0xFF;
-	vsemi_mem_sgmii[148] = 0xF2;
-	vsemi_mem_sgmii[149] = 0x3F;
-	vsemi_mem_sgmii[150] = 0x0;
-	vsemi_mem_sgmii[151] = 0x64;
-	vsemi_mem_sgmii[152] = 0x0;
-	vsemi_mem_sgmii[153] = 0x2;
-	vsemi_mem_sgmii[154] = 0x1;
-	vsemi_mem_sgmii[155] = 0x5;
-	vsemi_mem_sgmii[156] = 0x5;
-	vsemi_mem_sgmii[157] = 0x4;
-	vsemi_mem_sgmii[158] = 0x0;
-	vsemi_mem_sgmii[159] = 0x0;
-	vsemi_mem_sgmii[160] = 0x8;
-	vsemi_mem_sgmii[161] = 0x4;
-	vsemi_mem_sgmii[162] = 0x0;
-	vsemi_mem_sgmii[163] = 0x0;
-	vsemi_mem_sgmii[164] = 0x4;
-}
-
-void nlm_hal_config_vsemi_mem_sgmii_4page(void)
-{    
-	vsemi_mem_sgmii_4page[101] = 0xB7;
-	vsemi_mem_sgmii_4page[102] = 0xB7;
-	vsemi_mem_sgmii_4page[103] = 0xC;
-	vsemi_mem_sgmii_4page[104] = 0xC;
-	vsemi_mem_sgmii_4page[105] = 0x1A;
-	vsemi_mem_sgmii_4page[106] = 0x1A;
-	vsemi_mem_sgmii_4page[107] = 0x2;
-	vsemi_mem_sgmii_4page[108] = 0x2;
-	vsemi_mem_sgmii_4page[109] = 0x11;
-	vsemi_mem_sgmii_4page[110] = 0xF;
-}
-
-void nlm_hal_config_vsemi_mem_sgmii_4page_125Mhz(void)
-{
-	vsemi_mem_sgmii_4page[101] = 0xBF;
-	vsemi_mem_sgmii_4page[102] = 0xBF;
-	vsemi_mem_sgmii_4page[103] = 0xA;
-	vsemi_mem_sgmii_4page[104] = 0xA;
-	vsemi_mem_sgmii_4page[105] = 0xE;
-	vsemi_mem_sgmii_4page[106] = 0xE;
-	vsemi_mem_sgmii_4page[107] = 0x1;
-	vsemi_mem_sgmii_4page[108] = 0x1;
-	vsemi_mem_sgmii_4page[109] = 0x11;
-	vsemi_mem_sgmii_4page[110] = 0xF;
-}
-
-/*Ref CLK is 156.25 MHz for XLAUI and XFI*/
-void nlm_hal_config_vsemi_mem_10G_lane_4page(void)
-{
-	vsemi_mem_10G_lane_4page[101] = 0xBD;
-	vsemi_mem_10G_lane_4page[102] = 0xBD;
-	vsemi_mem_10G_lane_4page[103] = 0x6;
-	vsemi_mem_10G_lane_4page[104] = 0x6;
-	vsemi_mem_10G_lane_4page[105] = 0x1B;
-	vsemi_mem_10G_lane_4page[106] = 0x1B;
-	vsemi_mem_10G_lane_4page[107] = 0x1;
-	vsemi_mem_10G_lane_4page[108] = 0x1;
-	vsemi_mem_10G_lane_4page[109] = 0x77;
-	vsemi_mem_10G_lane_4page[110] = 0x0;
-	return;
-}
-
-void nlm_hal_config_vsemi_mem_10G_lane(void)
-{
-	vsemi_mem_10G_lane[101] = 0xAA;
-	vsemi_mem_10G_lane[102] = 0x0;
-	vsemi_mem_10G_lane[103] = 0x6C;
-	vsemi_mem_10G_lane[104] = 0xBD;
-	vsemi_mem_10G_lane[105] = 0xBD;
-	vsemi_mem_10G_lane[106] = 0x6;
-	vsemi_mem_10G_lane[107] = 0x6;
-	vsemi_mem_10G_lane[108] = 0x1B;
-	vsemi_mem_10G_lane[109] = 0x1B;
-	vsemi_mem_10G_lane[110] = 0x7;
-	vsemi_mem_10G_lane[111] = 0xC;
-	vsemi_mem_10G_lane[112] = 0x10;
-	vsemi_mem_10G_lane[113] = 0x0;
-	vsemi_mem_10G_lane[114] = 0x10;
-	vsemi_mem_10G_lane[115] = 0x0;
-	vsemi_mem_10G_lane[116] = 0xFF;
-	vsemi_mem_10G_lane[117] = 0xB3;
-	vsemi_mem_10G_lane[118] = 0xF6;
-	vsemi_mem_10G_lane[119] = 0xD0;
-	vsemi_mem_10G_lane[120] = 0xEF;
-	vsemi_mem_10G_lane[121] = 0xFB;
-	vsemi_mem_10G_lane[122] = 0xFF;
-	vsemi_mem_10G_lane[123] = 0xFF;
-	vsemi_mem_10G_lane[124] = 0xFF;
-	vsemi_mem_10G_lane[125] = 0xFF;
-	vsemi_mem_10G_lane[126] = 0xFF;
-	vsemi_mem_10G_lane[127] = 0xD3;
-	vsemi_mem_10G_lane[128] = 0xD3;
-	vsemi_mem_10G_lane[129] = 0xE2;
-	vsemi_mem_10G_lane[130] = 0xEF;
-	vsemi_mem_10G_lane[131] = 0xFB;
-	vsemi_mem_10G_lane[132] = 0xFB;
-	vsemi_mem_10G_lane[133] = 0xFF;
-	vsemi_mem_10G_lane[134] = 0xEF;
-	vsemi_mem_10G_lane[135] = 0xFF;
-	vsemi_mem_10G_lane[136] = 0xFF;
-	vsemi_mem_10G_lane[137] = 0xD3;
-	vsemi_mem_10G_lane[138] = 0xD3;
-	vsemi_mem_10G_lane[139] = 0xE2;
-	vsemi_mem_10G_lane[140] = 0xEF;
-	vsemi_mem_10G_lane[141] = 0xFB;
-	vsemi_mem_10G_lane[142] = 0xFB;
-	vsemi_mem_10G_lane[143] = 0xFF;
-	vsemi_mem_10G_lane[144] = 0xEF;
-	vsemi_mem_10G_lane[145] = 0xFF;
-	vsemi_mem_10G_lane[146] = 0xFF;
-	vsemi_mem_10G_lane[147] = 0xFB;
-	vsemi_mem_10G_lane[148] = 0xFF;
-	vsemi_mem_10G_lane[149] = 0x3F;
-	vsemi_mem_10G_lane[150] = 0x0;
-	vsemi_mem_10G_lane[151] = 0x19;
-	vsemi_mem_10G_lane[152] = 0x11;
-	vsemi_mem_10G_lane[153] = 0x2;
-	vsemi_mem_10G_lane[154] = 0x1;
-	vsemi_mem_10G_lane[155] = 0x0;
-	vsemi_mem_10G_lane[156] = 0x0;
-	vsemi_mem_10G_lane[157] = 0x4;
-	vsemi_mem_10G_lane[158] = 0x0;
-	vsemi_mem_10G_lane[159] = 0x0;
-	vsemi_mem_10G_lane[160] = 0x8;
-	vsemi_mem_10G_lane[161] = 0x4;
-	vsemi_mem_10G_lane[162] = 0x0;
-	vsemi_mem_10G_lane[163] = 0x0;
-	vsemi_mem_10G_lane[164] = 0x4;
-	return;
-}
-
-#ifdef NLM_HAL_LINUX_KERNEL
-#include <linux/types.h>
-#include <linux/module.h>
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_16G_4page);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_16G_4page_125);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_16G);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_16G_125);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_12G_4page);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_12G_4page_125);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_12G);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_12G_125);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_xaui);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_xaui_125);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_xaui_4page);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_xaui_4page_125);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_sgmii);
-EXPORT_SYMBOL(vsemi_mem_init_sgmii_125Mhzrefclk);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_sgmii_4page);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_sgmii_4page_125Mhz);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_10G_lane_4page);
-EXPORT_SYMBOL(nlm_hal_config_vsemi_mem_10G_lane);
-EXPORT_SYMBOL(vsemi_mem_xaui_4page);
-EXPORT_SYMBOL(vsemi_mem_rxaui_4page);
-EXPORT_SYMBOL(vsemi_mem_16G);
-EXPORT_SYMBOL(vsemi_mem_sgmii);
-EXPORT_SYMBOL(vsemi_mem_12G);
-EXPORT_SYMBOL(vsemi_mem_12G_4page);
-EXPORT_SYMBOL(vsemi_mem_sgmii_4page);
-EXPORT_SYMBOL(vsemi_mem_16G_4page);
-EXPORT_SYMBOL(vsemi_mem_xaui);
-EXPORT_SYMBOL(vsemi_mem_rxaui);
-EXPORT_SYMBOL(vsemi_mem_10G_lane);
-EXPORT_SYMBOL(vsemi_mem_10G_lane_4page);
-#endif
-- 
1.9.1

