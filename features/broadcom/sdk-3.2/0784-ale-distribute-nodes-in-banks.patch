From 1cd1f6605f7fca8216bd11d825dec78a63fc5ee4 Mon Sep 17 00:00:00 2001
From: yan sun <yansun@broadcom.com>
Date: Thu, 5 Sep 2013 18:23:19 -0700
Subject: [PATCH 0784/1532] ale: distribute nodes in banks

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/lib/alelib/ale_api.c       | 19 +++++------
 arch/mips/netlogic/lib/alelib/ale_node_db.c   | 46 +++++++++++++++++++++------
 arch/mips/netlogic/lib/alelib/ale_sw_search.c |  3 --
 3 files changed, 45 insertions(+), 23 deletions(-)

diff --git a/arch/mips/netlogic/lib/alelib/ale_api.c b/arch/mips/netlogic/lib/alelib/ale_api.c
index 08d0ccd..b8c76b7 100644
--- a/arch/mips/netlogic/lib/alelib/ale_api.c
+++ b/arch/mips/netlogic/lib/alelib/ale_api.c
@@ -356,13 +356,14 @@ ale_create_db(ale_t *ale,
               int prefix_num){
 
     ale_db_entry_t* ale_db_hw = NULL;
+    int node_cnt, shift;
 
     if (ale)
         ale_db_hw = (!ale->active_db) ? ale->node_base_addr[1] : ale->node_base_addr[0];
 
-    int node_cnt = ale_create_db_internal(prefix_table, prefix_num, ale_db_hw);
-
-    int shift = node_cnt/ALE_NODE_PER_BANK + ((node_cnt % ALE_NODE_PER_BANK == 0) ? 0 : 1);
+    node_cnt = ale_create_db_internal(prefix_table, prefix_num, ale_db_hw);
+    ale_print(ALE_DBG_INFO, "%s: node_cnt=%d\n", __func__, node_cnt);
+    shift = node_cnt/ALE_NODE_PER_BANK + ((node_cnt % ALE_NODE_PER_BANK == 0) ? 0 : 1);
     uint8_t mask = 0x3f >> ((shift >= ALE_NODE_BANK_NUM) ? 0 : (ALE_NODE_BANK_NUM - shift));
 
     if (ale_db_hw) {
@@ -391,15 +392,13 @@ int
 ale_insert_prefix(ale_t* ale, uint16_t fb_vc, ale_prefix_t* prefix, int update_num, int last_update){
 
     int i;
+    uint8_t mask;
 
     if(update_num > 1)
         for(i = 0; i < update_num - 1; i++)
             ale_insert_prefix_internal(ale, prefix++, 0);
     
-    int node_cnt = ale_insert_prefix_internal(ale, prefix, last_update);
-
-    int shift = node_cnt/ALE_NODE_PER_BANK + ((node_cnt % ALE_NODE_PER_BANK == 0) ? 0 : 1);
-    uint8_t mask = 0x3f >> ((shift >= ALE_NODE_BANK_NUM) ? 0 : (ALE_NODE_BANK_NUM - shift));
+    mask = ale_insert_prefix_internal(ale, prefix, last_update);
 
     if(last_update){
         ale_db_entry_t* ale_db_hw;
@@ -432,15 +431,13 @@ int
 ale_delete_prefix(ale_t* ale, uint16_t fb_vc, ale_prefix_t* prefix, int update_num, int last_update){
 
     int i;
+    uint8_t mask;
 
     if(update_num > 1)
         for(i = 0; i < update_num - 1; i++)
             ale_delete_prefix_internal(ale, prefix++, 0);
 
-    int node_cnt = ale_delete_prefix_internal(ale, prefix, last_update);
-
-    int shift = node_cnt/ALE_NODE_PER_BANK + ((node_cnt % ALE_NODE_PER_BANK == 0) ? 0 : 1);
-    uint8_t mask = 0x3f >> ((shift >= ALE_NODE_BANK_NUM) ? 0 : (ALE_NODE_BANK_NUM - shift));
+    mask = ale_delete_prefix_internal(ale, prefix, last_update);
 
     if(last_update){
         ale_db_entry_t* ale_db_hw;
diff --git a/arch/mips/netlogic/lib/alelib/ale_node_db.c b/arch/mips/netlogic/lib/alelib/ale_node_db.c
index c39167e..53168c0 100644
--- a/arch/mips/netlogic/lib/alelib/ale_node_db.c
+++ b/arch/mips/netlogic/lib/alelib/ale_node_db.c
@@ -55,6 +55,7 @@ ale_create_btree(ale_btree_node_t* btree,
     int i, j;
     unsigned int current_node = 0;
     unsigned int node_cnt = 1;
+    int long_prefix = 0;
 
     for(i = 0; i < prefix_cnt; i++) {        
         for(j = 0; j < prefix[i].pfx_len; j++) {            
@@ -73,6 +74,32 @@ ale_create_btree(ale_btree_node_t* btree,
         }
         btree[current_node].index = i + 1; //prefix starts from 1
         current_node = 0;
+        if(prefix[i].pfx_len > 32)
+           long_prefix++;  
+    }
+    if(prefix_cnt < 400){//insert dummy prefixes
+        uint32_t prefix_string[4];
+        for(i = prefix_cnt; i < 2 * ALE_NODE_PER_BANK - 3 * long_prefix; i++){
+            prefix_string[0] = i;
+            prefix_string[1] = i;
+            prefix_string[2] = i;
+            prefix_string[3] = i;    
+            for(j = 0; j < 128; j++) {            
+                if(prefix_string[j/32] & (1 << (31 - j%32))){
+                    if(btree[current_node].right == 0) {
+                        btree[current_node].right = node_cnt++;
+                    }
+                    current_node = btree[current_node].right;
+                }
+                else{
+                    if(btree[current_node].left == 0){
+                        btree[current_node].left = node_cnt++;
+                    }
+                    current_node = btree[current_node].left;
+                }
+            }            
+            current_node = 0;
+        }    
     }
     prefix_index = prefix_cnt + 1;
     return node_cnt;
@@ -342,6 +369,8 @@ ale_create_db_internal(ale_prefix_t *prefix_table,
                        int prefix_num,
                        ale_db_entry_t* ale_db_hw){
 
+    int db_idx_tmp = 0;
+
     /* allocate and build prefix binary tree for ALE lookup verification */
     btree = (ale_btree_node_t*)ale_calloc(ALE_MAX_NODE, sizeof(ale_btree_node_t));
     if(!btree){
@@ -380,14 +409,14 @@ ale_create_db_internal(ale_prefix_t *prefix_table,
     ale_create_node_db(ale_db_hw, node_table, ale_db, result_buf[0]);
 
     result_idx = 1;
-    int db_idx_tmp = db_idx;
+    db_idx_tmp = db_idx;
     db_idx = 0;
     ale_db_hw_internal = ale_db_hw;
 
     return db_idx_tmp;
 }
 
-int ale_update_db(ale_db_entry_t* ale_db_hw,
+uint8_t ale_update_db(ale_db_entry_t* ale_db_hw,
                    ale_node_table_t* node_table, 
                    ale_node_t* ale_db, 
                    int* result_buf){
@@ -396,6 +425,7 @@ int ale_update_db(ale_db_entry_t* ale_db_hw,
     int i, j, k;
     int max_SPARSE_node = (1 << (ALE_STRIDE-1)); //32
     int idx = 0;
+    uint8_t mask = 0;
    
     //generate index changing table
     for(i = 0; i < node_table_idx; i++){
@@ -458,6 +488,7 @@ int ale_update_db(ale_db_entry_t* ale_db_hw,
                                       (((uint64_t)ale_db[db_idx].BM2[8] & 1) << 2) |
                                       ((uint64_t)tmp_BM2 >> 62);
             ale_db_hw[db_idx].db[0] = 0;
+            mask |= 1 << (db_idx/ALE_NODE_PER_BANK);
         }
         db_idx++;
         Dequeue(node_queue);
@@ -466,15 +497,14 @@ int ale_update_db(ale_db_entry_t* ale_db_hw,
     }
     ale_free(node_table);
     node_table_idx = 0;
-    result_idx = 1;
-    int db_idx_tmp = db_idx;
+    result_idx = 1; 
     db_idx = 0;
-    return db_idx_tmp;
+    return mask;
 }
 
 int ale_insert_prefix_internal(ale_t* ale, ale_prefix_t* prefix, int last_update){
 
-    int i, j, update_node_cnt;
+    int i, j, update_node_cnt = 0;
     unsigned int current_node = 0; 
     
   
@@ -532,12 +562,10 @@ int ale_insert_prefix_internal(ale_t* ale, ale_prefix_t* prefix, int last_update
 
 int ale_delete_prefix_internal(ale_t* ale, ale_prefix_t* prefix, int last_update){
 
-    int i, j, update_node_cnt, total_result = 0, delete_idx = 0;
-   //int  db_found;
+    int i, update_node_cnt = 0;
     unsigned int current_node = 0;
     unsigned int latest_node = 0;
   
-    ale_node_table_t node_found;
     for(i=0; i < btree_node_cnt; i++){
         btree[i].node_type = 0;
         btree[i].node_index = 0;  
diff --git a/arch/mips/netlogic/lib/alelib/ale_sw_search.c b/arch/mips/netlogic/lib/alelib/ale_sw_search.c
index 72c97d6..68236fe 100644
--- a/arch/mips/netlogic/lib/alelib/ale_sw_search.c
+++ b/arch/mips/netlogic/lib/alelib/ale_sw_search.c
@@ -233,8 +233,6 @@ unsigned int ale_string_search_internal(ale_prefix_t* prefix, ale_node_t* ale_db
     int i, j, length, OneCount, Ibit;
     int level = 0;
     unsigned int TempResultPtr, ResultPtr=0;
-    unsigned int  IntCnode = 0;
-    unsigned int  IntVal = 0;    
     int max_SPARSE_node = (1 << (ALE_STRIDE - 1));
     int node = 0; //search from Root
     unsigned int BitPos[2 * max_SPARSE_node];
@@ -242,7 +240,6 @@ unsigned int ale_string_search_internal(ale_prefix_t* prefix, ale_node_t* ale_db
     unsigned int SbmIdx[2 * max_SPARSE_node];
     unsigned int EbmIdx;
     unsigned int IbmIdx;
-    int newbit;
    
     length = prefix->pfx_len; 
 
-- 
1.9.1

