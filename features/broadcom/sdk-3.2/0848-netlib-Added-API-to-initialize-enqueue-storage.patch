From 16e2ae301ab2f436989bc4df5049b5ec1c126f5d Mon Sep 17 00:00:00 2001
From: Jayanthi A <jayanthi.annadurai@broadcom.com>
Date: Sun, 17 Nov 2013 21:18:40 -0800
Subject: [PATCH 0848/1532] netlib: Added API to initialize enqueue storage

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 .../netlogic/lib/netlib/include/netsoc_haliface.h  |  1 +
 .../netlogic/lib/netlib/include/netsoc_libiface.h  |  1 +
 .../mips/netlogic/lib/netlib/include/nlm_hal_nae.h |  2 +-
 arch/mips/netlogic/lib/netlib/src/netsoc_api.c     |  5 ++
 arch/mips/netlogic/lib/netlib/src/netsoc_poe.c     | 85 ++++++++++++++++++++++
 5 files changed, 93 insertions(+), 1 deletion(-)

diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h b/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
index d70e9f9..1ae5968 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
@@ -97,6 +97,7 @@ extern int __netsoc_config_nae_l2parser_perport(nae_t *nae, l2_parser_config_t *
 extern int __netsoc_config_nae_l2parser(nae_t *nae, l2_parser_config_t *l2);
 extern int __netsoc_config_nae_l3parser(nae_t *nae, l3_parser_config_t *l3_cfg, int entry);
 extern int __netsoc_config_nae_l4parser(nae_t *nae, l4_parser_config_t *l4_cfg, int entry);
+extern int __netsoc_alloc_poe_enq_storage(poe_t *poe);
 extern unsigned char pma2p0_mem_sgmii_4page [256];
 extern unsigned char pma2p0_mem_sgmii [256];
 
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h b/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
index b9af132..bea5df3 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
@@ -581,4 +581,5 @@ extern int netsoc_config_ucore_memtype(nae_t *nae, uint32_t type);
 extern int netsoc_enable_wred_perclass(nae_t *nae, uint32_t class_num, uint32_t thres_lo, uint32_t thres_hi);
 extern int netsoc_disable_wred_perclass(nae_t *nae, uint32_t class_num);
 extern int netsoc_print_nae_config(nae_t *);
+extern int netsoc_alloc_poe_enq_storage(poe_t *poe);
 #endif
diff --git a/arch/mips/netlogic/lib/netlib/include/nlm_hal_nae.h b/arch/mips/netlogic/lib/netlib/include/nlm_hal_nae.h
index d614956..7ab767f 100644
--- a/arch/mips/netlogic/lib/netlib/include/nlm_hal_nae.h
+++ b/arch/mips/netlogic/lib/netlib/include/nlm_hal_nae.h
@@ -56,7 +56,7 @@
 #define NUM_DESC_PER_CACHELINE	12
 
 #define XLP_MAX_FLOWS       (64 << 10)
-
+#define XLP3XX_MAX_FLOWS	(32 << 10)
 #define XLP9XX_MAX_FLOWS    (32 << 10)
 
 #define SGMII_CAL_SLOTS         3
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_api.c b/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
index 3e6874d..ddd6eb8 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
@@ -1271,6 +1271,11 @@ int netsoc_config_poe_ext_storage(poe_t *poe, uint64_t fbp_base_phys, uint64_t f
 	return __netsoc_init_poe_ext_storage(poe, fbp_base_phys, fbp_base_virt, msg_base_phys, msg_base_virt);
 }
 
+
+int netsoc_alloc_poe_enq_storage(poe_t *poe)
+{
+	return __netsoc_alloc_poe_enq_storage(poe);
+}	
 /**
 * @brief netsoc_config_poe_distvec function is used to configure POE distribution vector
 * 
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c b/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
index 486829b..9a430fe 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
@@ -43,6 +43,91 @@
 
 #define POE_DIST_VEC0 0x100
 
+int __netsoc_alloc_poe_enq_storage(poe_t *poe)
+{       
+        uint32_t addr, num_messages;
+        uint64_t ldata, a, mdata, poe_pcie_base;
+        uint64_t *vaddr_fbp, *vaddr_msg;
+        int i, max_flows = -1;
+	uint64_t fbp_base_phys, msg_base_phys;
+        uint64_t *fbp_base_virt, *msg_base_virt;
+        uint32_t mbase_hi, mbase_lo, fbp_hi, fbp_lo, fbp_sp_init;
+        
+        poe_pcie_base = poe->pcie_base; 
+
+	msg_base_phys = 0;
+
+	msg_base_virt = netsoc_api_contig_malloc(XLP_CACHE_LINE_SIZE, 16384 * 64);
+        if (msg_base_virt == NULL)
+             return -1;
+        msg_base_phys = netsoc_api_virttophys(msg_base_virt);
+
+	fbp_base_virt = netsoc_api_contig_malloc(XLP_CACHE_LINE_SIZE, 16384 * 2);
+	if (fbp_base_virt == NULL)
+             return -1;
+	fbp_base_phys = netsoc_api_virttophys(fbp_base_virt);
+	
+	mbase_hi = (msg_base_phys >> 32) & 0xffffffff;
+        mbase_lo = msg_base_phys & 0xffffffff;
+        fbp_hi = (fbp_base_phys >> 32) & 0xffffffff;
+        fbp_lo = fbp_base_phys & 0xffffffff;
+
+        netsoc_api_print (1, " POE Free Buffer Pool config ...\n");
+
+        if (is_nlm_xlp3xx() || is_nlm_xlp2xx() || is_nlm_xlp9xx()) {
+                a = (uint64_t)XLP3XX_EXT_FBP_START_ADDR;
+                num_messages = XLP3XX_MAX_POE_EXT_MSG_STORAGE;
+                fbp_sp_init = XLP3XX_POE_FBP_SP_INIT;
+		max_flows = XLP3XX_MAX_FLOWS;
+        }
+        else {
+                a = (uint64_t)EXT_FBP_START_ADDR;
+                num_messages = MAX_POE_EXT_MSG_STORAGE;
+                fbp_sp_init = POE_FBP_SP_INIT;
+		max_flows = XLP_MAX_FLOWS;
+        }
+
+	vaddr_fbp = fbp_base_virt;
+        /* initialize free buffer pool with 16-bit storage indexes */
+        for (i = 0; i < (num_messages / 4); i++) {
+                ldata = ((a+3) << 48) | ((a+2) << 32) | ((a+1) << 16) | a;
+                netsoc_api_writeq(fbp_base_phys, i, ldata);
+                //*vaddr_fbp = ldata;
+                a += 4;
+		vaddr_fbp++;
+	}
+
+	mdata = 0ULL;
+	vaddr_msg = msg_base_virt;
+        /* initialize storage memory area with zero */
+        for (i = 0; i < (num_messages * 8); i++) {
+               netsoc_api_writeq(msg_base_phys, i , mdata);
+                //*vaddr_msg = mdata;               
+                vaddr_msg++;
+        }
+	
+       /* Configuring Message base pointer */
+        addr = MSG_STORAGE_BASE_ADR_L;
+        nlm_print ("POE Configuring Message base pointer base_lo 0x%x hi 0x%x \n",mbase_lo, mbase_hi);
+        netsoc_write_poe_pcie_reg(poe_pcie_base, addr, mbase_lo);
+        addr++;
+        netsoc_write_poe_pcie_reg(poe_pcie_base, addr, mbase_hi);
+
+        /* Configuring FBP base pointer */
+        addr = FBP_BASE_ADR_L;
+        nlm_print ("POE Configuring FBP base pointer fbp_lo 0x%x hi 0x%x \n",fbp_lo, fbp_hi);
+        netsoc_write_poe_pcie_reg(poe_pcie_base, addr, fbp_lo);
+        addr++;
+        netsoc_write_poe_pcie_reg(poe_pcie_base, addr, fbp_hi);
+
+        /* Configuring FBP SP */
+        addr = POE_FBP_SP;
+        nlm_print ("POE Configuring FBP stack pointer 0x%x\n", fbp_sp_init);
+        netsoc_write_poe_pcie_reg(poe_pcie_base, addr, fbp_sp_init);
+        return max_flows;
+
+}
+
 /**
 * @brief nlm_hal_init_poe_distvec function can be used to set the POE distribution vectors.
 *
-- 
1.9.1

