From 57b6138da8b446a96c03298cd0d8423f37a750b9 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Thu, 12 Sep 2013 21:12:16 -0700
Subject: [PATCH 0792/1532] nae: shared freein-fifo get for xlp9xx

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c | 206 ++-----------------------
 1 file changed, 10 insertions(+), 196 deletions(-)

diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c b/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c
index 4df3fca..3177fc0 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c
@@ -300,200 +300,6 @@ void fdt_extract_dom_nae_node_freein_fifo_info(void *fdt, int dom_id, nae_t *nae
 
 }
 
-static void xlp9xx_fdt_derive_cpu_to_freein_fifo_map(nae_t *nae,
-                unsigned int *phys_cpu_map,
-                unsigned int freein_fifo_mask, unsigned int *cpu_2_freein_fifo_map)
-{
-        int i=0, j =0, filled = 0, index = 0, pcpu, fifo, cpumapindex = 0;
-        unsigned char lcpu_2_pcpu[XLP_NCPUS_PER_NODE], pcpu_2_fifo[NLM_NCPUS_PER_NODE];
-        int frin_total_queue = __netsoc_get_frin_total_queue(nae);
-
-        if(freein_fifo_mask == 0)
-                return;
-
-        memset(lcpu_2_pcpu, 0, sizeof(lcpu_2_pcpu));
-        memset(pcpu_2_fifo, 0, sizeof(pcpu_2_fifo));
-
-        while(i < XLP_NCPUS_PER_NODE){
-                for(j=0; j < XLP_NCPUS_PER_NODE && i < NLM_NCPUS_PER_NODE; j++){
-                        cpumapindex = j / 32;
-                        if(!(phys_cpu_map[cpumapindex] & (1 << j)))
-                                continue;
-                        lcpu_2_pcpu[i] = j;
-                        i++;
-                }
-        }
-        i = 0;
-        while(filled < XLP_NCPUS_PER_NODE) {
-                for(j = 0; j < frin_total_queue && filled < XLP_NCPUS_PER_NODE;) {
-                        if(!(freein_fifo_mask & (1 << j))) {
-                                j++;
-                                continue;
-                        }
-
-                        pcpu = lcpu_2_pcpu[i];
-                        if(pcpu_2_fifo[pcpu] & 0x80) {
-                                fifo = pcpu_2_fifo[pcpu] & 0x1f;
-                        } else {
-                                fifo = j;
-                                pcpu_2_fifo[pcpu] = 0x80 | fifo;
-                                j++;
-                        }
-                        cpu_2_freein_fifo_map[i] = fifo;
-                        i += NLM_NUM_THREADS_PER_CORE;
-                        if(i >= XLP_NCPUS_PER_NODE)
-                                i = ++index;
-                        filled++;
-                }
-        }
-}
-
-int xlp9xx_prepare_nae_shared_info(void *fdt, int dom_id, nae_t *nae_cfg)
-{
-#if 0
-        char dom_node_str[128];
-        int nodeoffset;
-        unsigned int *pval;
-        int plen, i, j;
-        int pos, bitoff, max;
-#define XLP_NCPUS_PER_NODE_NENT		XLP_NCPUS_PER_NODE/ 32
-        unsigned int map[NLM_MAX_NODES][XLP_NCPUS_PER_NODE_NENT], fmask[NLM_MAX_NODES], node = nae_cfg->node;
-        struct nlm_nae_shinfo shinfo;
-        static int shdomains[MAX_NAE_BLOCKS][NLM_NAE_MAX_SHARED_DOMS], shdom_extracted[MAX_NAE_BLOCKS] = {0, 0};
-        int domid = dom_id, cnt = 0, nae_id = nae_cfg->nae_id;
-        int frin_total_queue = __netsoc_get_frin_total_queue(nae_cfg);
-        unsigned int lcpu_2_pcpu[XLP_NCPUS_PER_NODE], cpu_2_fifo[XLP_NCPUS_PER_NODE];
-        unsigned int cpusonline[NLM_MAX_NODES];
-        unsigned int nodeindex,cpumapindex;
-
-        if(!shdom_extracted[nae_id]) {
-                for(i = 0; i < NLM_NAE_MAX_SHARED_DOMS; i++)
-                        shdomains[nae_id][i] = -1;
-                get_dom_nae_property(fdt, dom_id, nae_cfg->nae_id, "sh-domains", (unsigned int *)shdomains[nae_id], sizeof(shdomains[nae_id]));
-                shdom_extracted[nae_id] = 1;
-        }
-
-start_for_dom:
-
-        for(i = 0; i<XLP_NCPUS_PER_NODE_NENT; i++)
-             map[node][i] = 0;
-
-        for(i = 0; i < NLM_MAX_NODES; i++) {
-                cpusonline[i] = 0;
-                fmask[i] = (1 << frin_total_queue) - 1;/* Ownes all fifos by default*/
-        }
-
-        memset((char *)&shinfo, 0, sizeof(shinfo));
-        memset(lcpu_2_pcpu, 0, sizeof(lcpu_2_pcpu));
-
-        sprintf(dom_node_str, "/doms/dom@%d/cpu", domid);
-        nodeoffset = fdt_path_offset(fdt, dom_node_str);
-        if(nodeoffset >= 0) {
-                pval = (unsigned int *)fdt_getprop(fdt, nodeoffset, "onlinemask", &plen);
-                if(pval != NULL) {
-                        if(plen > sizeof(map))
-                                plen = sizeof(map);
-                        /* cpu mask is from msb to lsb, but we require in lsb to msb */
-                        max = (plen / sizeof(unsigned int)) - 1;
-                        for(i = 0; i < plen / sizeof(unsigned int); i++, max--) {
-                                nodeindex = i / XLP_NCPUS_PER_NODE_NENT;
-                                cpumapindex = i % XLP_NCPUS_PER_NODE_NENT;
-                                map[nodeindex][cpumapindex] = fdt32_to_cpu(pval[max]);
-                                if (map[nodeindex][cpumapindex] != 0)
-                                     cpusonline[nodeindex] |= 1;
-#ifdef NAE_SH_INFO_DBG
-                        netsoc_api_print(NETSOC_APIDBG_FDT,"%s domid %d node %d cpumask %d: 0x%x \n", __FUNCTION__, domid, nodeindex,
-                                            cpumapindex, map[nodeindex][cpumapindex]);
-#endif
-                        }
-                }
-                pval = (unsigned int *)fdt_getprop(fdt, nodeoffset, "nae-rx-vc", &plen);
-                if(pval)
-                        shinfo.rxvc = fdt32_to_cpu(pval[0]);
-                else
-                        goto err;
-        }
-
-        /* Extract free in fifo mask mask */
-        get_dom_nae_property(fdt, domid, nae_cfg->nae_id, "freein-fifo-mask", fmask, sizeof(fmask));
-
-#ifdef NAE_SH_INFO_DBG
-        netsoc_api_print(NETSOC_APIDBG_FDT,"%s domid %d node %d fmask %x\n", __FUNCTION__, domid, node,
-                        fmask[node]);
-#endif
-
-        if (!(cpusonline[node] && fmask[node]))
-             goto err;
-
-        if (cpusonline[node]) {
-                i = 0;
-                while(i < XLP_NCPUS_PER_NODE){
-                        for(j=0; j < XLP_NCPUS_PER_NODE && i < XLP_NCPUS_PER_NODE; j++){
-                                cpumapindex = j / 32;
-                                if(!(map[node][cpumapindex] & (1 << j)))
-                                        continue;
-                                pos = i / NAEV1_SH_LCPU_TO_MAP_NVALS_PER_ENTRY;
-                                bitoff = (i % NAEV1_SH_LCPU_TO_MAP_NVALS_PER_ENTRY) *
-                                        NAEV1_SH_LCPU_TO_MAP_SNG_VAL_SZ;
-                                shinfo.lcpu_2_pcpu_map[pos] |= (j << bitoff);
-                                lcpu_2_pcpu[i] = j;
-                                i++;
-                        }
-                }
-
-#ifdef NAE_SH_INFO_DBG
-                for(i = 0; i < XLP_NCPUS_PER_NODE; i++) {
-                        pos = i / NAEV1_SH_LCPU_TO_MAP_NVALS_PER_ENTRY;
-                        bitoff = (i % NAEV1_SH_LCPU_TO_MAP_NVALS_PER_ENTRY) *
-                                NAEV1_SH_LCPU_TO_MAP_SNG_VAL_SZ;
-                        netsoc_api_print(NETSOC_APIDBG_FDT,"domid %d node %d lcpu %d pcpu %d (%d)\n", domid,
-                                        node, i, (shinfo.lcpu_2_pcpu_map[pos] >> bitoff) & 0x1f, lcpu_2_pcpu[i]);
-                }
-#endif
-        }
-
-              /* We need to avoid usage same fifo in different cores if possible. Also the filling should
-        be physical cpu id based, as the application knows only phys cpu id
-         */
-        if(fmask[node]) {
-                if (cpusonline[node])
-                     xlp9xx_fdt_derive_cpu_to_freein_fifo_map(nae_cfg, map[nae_cfg->node], fmask[nae_cfg->node], cpu_2_fifo);
-                for(i = 0; i < XLP_NCPUS_PER_NODE; i++) {
-                        pos = i / NAEV1_SH_LCPU_TO_MAP_NVALS_PER_ENTRY;
-                        bitoff = (i % NAEV1_SH_LCPU_TO_MAP_NVALS_PER_ENTRY) *
-                                NAEV1_SH_LCPU_TO_MAP_SNG_VAL_SZ;
-                        shinfo.cpu_2_freeinfifo_map[pos] |= (cpu_2_fifo[i] << bitoff);
-                }
-#ifdef NAE_SH_INFO_DBG
-                for(i = 0; i < XLP_NCPUS_PER_NODE; i++) {
-                        pos = i / NAEV1_SH_LCPU_TO_MAP_NVALS_PER_ENTRY;
-                        bitoff = (i % NAEV1_SH_LCPU_TO_MAP_NVALS_PER_ENTRY) *
-                                NAEV1_SH_LCPU_TO_MAP_SNG_VAL_SZ;
-                        netsoc_api_print(NETSOC_APIDBG_FDT,"domid %d node %d lcpu %d rxfifo %d\n", domid,
-                                        node, i, (shinfo.cpu_2_freeinfifo_map[pos] >> bitoff) & 0x1f);
-                }
-#endif
-
-        }
-
-        shinfo.domid = domid;
-        shinfo.valid = 1;
-        memcpy((char *)&nae_cfg->shinfo[cnt], (char *)&shinfo, sizeof(shinfo));
-err:
-
-        while(cnt < NLM_NAE_MAX_SHARED_DOMS) {
-                if((domid = shdomains[nae_id][cnt]) >= 0)
-                        break;
-                cnt++;
-        }
-        if(cnt < NLM_NAE_MAX_SHARED_DOMS)  {
-                cnt++;
-                goto start_for_dom;
-        }
-#endif
-        return 0;
-}
-
 static inline int get_num_cpus_per_node(void)
 {
 	
@@ -528,6 +334,7 @@ static inline void right_shift_int_array(unsigned int *val, int sbit, int nbits)
  Extracts the paddr and desc information */
 static int retrieve_shared_freein_fifo_info(void *fdt,
 		int shared_dom_id,
+		int nae_id,
 		struct nlm_nae_shinfo *shinfo)
 {
 	char nae_node_str[64];
@@ -538,7 +345,14 @@ static int retrieve_shared_freein_fifo_info(void *fdt,
 	int plen, pnode;
 
 	shinfo->owner_replenish = 0;
-	sprintf(nae_node_str, "/doms/dom@%d/nae", shared_dom_id);
+
+	if (socnet_version_v0) {
+		sprintf(nae_node_str, "/doms/dom@%d/nae", shared_dom_id);
+	}
+	else {
+		sprintf(nae_node_str, "/doms/dom@%d/nae-%d", shared_dom_id, nae_id);
+	}
+
 
 	pnode = fdt_path_offset(fdt, nae_node_str);
 	if (pnode < 0) {
@@ -717,7 +531,7 @@ start_for_dom:
 		}
 #endif
 		
-		retrieve_shared_freein_fifo_info(fdt, domid, &shinfo);
+		retrieve_shared_freein_fifo_info(fdt, domid, nae_cfg->nae_id, &shinfo);
 
         shinfo.domid = domid;
         shinfo.valid = 1;
-- 
1.9.1

