From 012b3682588ca55a5071ef3755b4039f2857531f Mon Sep 17 00:00:00 2001
From: Vikas Gupta <vikas.gupta@broadcom.com>
Date: Fri, 31 May 2013 21:09:57 -0700
Subject: [PATCH 0703/1532] working code for netior

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_config.c |   1 +
 .../netlogic/lib/netlib/external/ext_phy_bcm.c     |   4 +-
 .../netlogic/lib/netlib/include/netsoc_common.h    |   3 +-
 .../mips/netlogic/lib/netlib/include/nlm_hal_nae.h |   3 +-
 arch/mips/netlogic/lib/netlib/src/netsoc_nae.c     |   4 +-
 arch/mips/netlogic/lib/netlib/src/netsoc_pcs.c     |   2 +
 .../netlogic/lib/netlib/src/nlm_hal_vsemi_config.c | 255 +++++++++++----------
 arch/mips/netlogic/lib/syslib/include/nlm_hal.h    |  55 +++++
 .../netlogic/lib/syslib/include/nlm_hal_xlp_dev.h  |   2 +-
 arch/mips/netlogic/lib/syslib/src/nlm_hal.c        |  44 +++-
 10 files changed, 230 insertions(+), 143 deletions(-)

diff --git a/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_config.c b/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_config.c
index be5de5f..2babd03b 100644
--- a/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_config.c
+++ b/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_config.c
@@ -980,6 +980,7 @@ int nlm_hal_setup_outq(int node, int max_nodes)
 				val = (1ULL << 63) | (qid << 6) | (qid << 0);
 
 #if !defined(NLM_HAL_UBOOT) && !defined(NLM_HAL_NETLBOOT)
+#error "compile"
 				/* spills, maximum spill per VC: 64 * 4KB = 256KB,
 				 * In our configuration, each VC: 4KB
 				 */
diff --git a/arch/mips/netlogic/lib/netlib/external/ext_phy_bcm.c b/arch/mips/netlogic/lib/netlib/external/ext_phy_bcm.c
index 4119c02..6756034 100644
--- a/arch/mips/netlogic/lib/netlib/external/ext_phy_bcm.c
+++ b/arch/mips/netlogic/lib/netlib/external/ext_phy_bcm.c
@@ -185,14 +185,14 @@ static void bcm_start_an(net_port_t *netport)
                 count++;
                 status = __netsoc_mdio_rd(nae, NLM_HAL_INT_MDIO, 0, int_inf, 0x1);
                 if(status & (1<<5)){ /* check for autonegotiation to be completed */
-        //              netsoc_api_print(NETSOC_APIDBG_DEFAULT,"Autonegotiation is OK with PHY-SGMII =0x%x \n", int_inf);
+                      netsoc_api_print(NETSOC_APIDBG_DEFAULT,"Autonegotiation is OK with PHY-SGMII =0x%x \n", int_inf);
                         return;
                 }
                 status = __netsoc_mdio_rd(nae, NLM_HAL_INT_MDIO, 0, int_inf,  0x0);
                 __netsoc_mdio_wr(nae, NLM_HAL_INT_MDIO, 0, int_inf, 0x00, status|(1<<9)); // Restart XLP AN
         }while(count<100);
 
-        //netsoc_api_print(NETSOC_APIDBG_DEFAULT,"Autonegotiation is NOT OK for PHY-SGMII inf=0x%x int_inf =0x%x\n", phyaddr, int_inf);
+        netsoc_api_print(NETSOC_APIDBG_DEFAULT,"Autonegotiation is NOT OK for PHY-SGMII inf=0x%x int_inf =0x%x\n", phyaddr, int_inf);
         return;
 }
 
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_common.h b/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
index b99e796..8a44eb2 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
@@ -65,7 +65,8 @@
 
 
 #define DEFAULT_SGMII_CAL_SLOTS         3
-#define DEFAULT_XAUI_CAL_SLOTS          13
+//#define DEFAULT_XAUI_CAL_SLOTS          13
+#define DEFAULT_XAUI_CAL_SLOTS          5
 #define DEFAULT_ILK_CAL_SLOTS           26
 #define DEFAULT_XFI_CAL_SLOTS          7
 #define DEFAULT_XLAUI_CAL_SLOTS                13
diff --git a/arch/mips/netlogic/lib/netlib/include/nlm_hal_nae.h b/arch/mips/netlogic/lib/netlib/include/nlm_hal_nae.h
index 6b14aff..c48549d 100644
--- a/arch/mips/netlogic/lib/netlib/include/nlm_hal_nae.h
+++ b/arch/mips/netlogic/lib/netlib/include/nlm_hal_nae.h
@@ -58,7 +58,8 @@
 #define XLP_MAX_FLOWS       (64 << 10)
 
 #define SGMII_CAL_SLOTS         3
-#define XAUI_CAL_SLOTS          13
+//#define XAUI_CAL_SLOTS          13
+#define XAUI_CAL_SLOTS          5
 #define ILK_CAL_SLOTS           26
 
 #define MAX_PORTS_PERBLOCK	4
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
index fa1bd7b..f168d1e 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
@@ -2359,8 +2359,8 @@ void __netsoc_init_egress(nae_t *nae)
 	uint64_t nae_base = nae->nae_base;
         uint32_t tx_cfg =  netsoc_read_nae_reg(nae_base, TX_CONFIG);
 
-        if ((is_nlm_xlp3xx()) || is_nlm_xlp2xx() || (is_nlm_xlp8xx_bx())) {
-                netsoc_write_nae_reg(nae_base, TX_CONFIG, tx_cfg | NAE_TX_ENABLE | NAE_TX_ACE  | NAE_TX_COMPATIBLE | (1 << 3));
+        if ((is_nlm_xlp3xx()) || is_nlm_xlp2xx() || is_nlm_xlp9xx() || (is_nlm_xlp8xx_bx())) {
+                netsoc_write_nae_reg(nae_base, TX_CONFIG, tx_cfg | NAE_TX_ENABLE | NAE_TX_ACE  | NAE_TX_COMPATIBLE | (1 << 3) | );
         }
         else {
                 netsoc_write_nae_reg(nae_base, TX_CONFIG, tx_cfg | NAE_TX_ENABLE | NAE_TX_ACE);
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_pcs.c b/arch/mips/netlogic/lib/netlib/src/netsoc_pcs.c
index 2d05846..a95a985 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_pcs.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_pcs.c
@@ -611,11 +611,13 @@ void xlp9xx_nae_write_pma2p0_mem(uint64_t mac_base, int block, int xgmii_speed,
 				 vsemi_cmd |= vsemi_mem_10G_lane_4page[reg_addr];	
 			}
                         if(phy_mode==PHYMODE_SGMII){
+				printf("xlp9xx_nae_write_pma2p0_mem vsemi_mem_sgmii_4page[%d]= 0x%x\n", reg_addr ,vsemi_mem_sgmii_4page[reg_addr]);
                                 vsemi_cmd |= vsemi_mem_sgmii_4page[reg_addr];
                         }
                         __netsoc_write_vsemi_reg(mac_base, lane_no, reg_addr, vsemi_cmd);
                 }
         }
+	printf("SGMII 4 page programming done\n");
         /*configure only page 4*/
         for (reg_addr=101; reg_addr <165; reg_addr++){
                 vsemi_cmd=0;
diff --git a/arch/mips/netlogic/lib/netlib/src/nlm_hal_vsemi_config.c b/arch/mips/netlogic/lib/netlib/src/nlm_hal_vsemi_config.c
index 81386ac..e365c8d 100644
--- a/arch/mips/netlogic/lib/netlib/src/nlm_hal_vsemi_config.c
+++ b/arch/mips/netlogic/lib/netlib/src/nlm_hal_vsemi_config.c
@@ -393,69 +393,69 @@ void nlm_hal_config_vsemi_mem_12G_125(void)
 void nlm_hal_config_vsemi_mem_xaui(void)
 {
 	vsemi_mem_xaui[101] = 0xAA;
-	vsemi_mem_xaui[102] = 0x0;
-	vsemi_mem_xaui[103] = 0x76;
-	vsemi_mem_xaui[104] = 0xBF;
-	vsemi_mem_xaui[105] = 0xBF;
-	vsemi_mem_xaui[106] = 0xA;
-	vsemi_mem_xaui[107] = 0xA;
-	vsemi_mem_xaui[108] = 0xE;
-	vsemi_mem_xaui[109] = 0xE;
-	vsemi_mem_xaui[110] = 0x6;
-	vsemi_mem_xaui[111] = 0x16;
-	vsemi_mem_xaui[112] = 0x10;
-	vsemi_mem_xaui[113] = 0x0;
-	vsemi_mem_xaui[114] = 0x10;
-	vsemi_mem_xaui[115] = 0x0;
-	vsemi_mem_xaui[116] = 0xFF;
-	vsemi_mem_xaui[117] = 0xB3;
-	vsemi_mem_xaui[118] = 0xF6;
-	vsemi_mem_xaui[119] = 0xD0;
-	vsemi_mem_xaui[120] = 0xEF;
-	vsemi_mem_xaui[121] = 0xFB;
-	vsemi_mem_xaui[122] = 0xFF;
-	vsemi_mem_xaui[123] = 0xFF;
-	vsemi_mem_xaui[124] = 0xFF;
-	vsemi_mem_xaui[125] = 0xFF;
-	vsemi_mem_xaui[126] = 0xFF;
-	vsemi_mem_xaui[127] = 0xD3;
-	vsemi_mem_xaui[128] = 0xD3;
-	vsemi_mem_xaui[129] = 0xE2;
-	vsemi_mem_xaui[130] = 0xEF;
-	vsemi_mem_xaui[131] = 0xFB;
-	vsemi_mem_xaui[132] = 0xFB;
-	vsemi_mem_xaui[133] = 0xFF;
-	vsemi_mem_xaui[134] = 0xEF;
-	vsemi_mem_xaui[135] = 0xFF;
-	vsemi_mem_xaui[136] = 0xFF;
-	vsemi_mem_xaui[137] = 0xD3;
-	vsemi_mem_xaui[138] = 0xD3;
-	vsemi_mem_xaui[139] = 0xE2;
-	vsemi_mem_xaui[140] = 0xEF;
-	vsemi_mem_xaui[141] = 0xFB;
-	vsemi_mem_xaui[142] = 0xFB;
-	vsemi_mem_xaui[143] = 0xFF;
-	vsemi_mem_xaui[144] = 0xEF;
-	vsemi_mem_xaui[145] = 0xFF;
-	vsemi_mem_xaui[146] = 0xFF;
-	vsemi_mem_xaui[147] = 0xFB;
-	vsemi_mem_xaui[148] = 0xFF;
-	vsemi_mem_xaui[149] = 0x3F;
-	vsemi_mem_xaui[150] = 0x0;
-	vsemi_mem_xaui[151] = 0x64;
-	vsemi_mem_xaui[152] = 0x0;
-	vsemi_mem_xaui[153] = 0x2;
-	vsemi_mem_xaui[154] = 0x1;
-	vsemi_mem_xaui[155] = 0x5;
-	vsemi_mem_xaui[156] = 0x5;
-	vsemi_mem_xaui[157] = 0x4;
-	vsemi_mem_xaui[158] = 0x0;
-	vsemi_mem_xaui[159] = 0x0;
-	vsemi_mem_xaui[160] = 0x8;
-	vsemi_mem_xaui[161] = 0x4;
-	vsemi_mem_xaui[162] = 0x0;
-	vsemi_mem_xaui[163] = 0x0;
-	vsemi_mem_xaui[164] = 0x4;
+    vsemi_mem_xaui[102] = 0x0;
+    vsemi_mem_xaui[103] = 0x6C;
+    vsemi_mem_xaui[104] = 0xBF;
+    vsemi_mem_xaui[105] = 0xBF;
+    vsemi_mem_xaui[106] = 0xA;
+    vsemi_mem_xaui[107] = 0xA;
+    vsemi_mem_xaui[108] = 0xE;
+    vsemi_mem_xaui[109] = 0xE;
+    vsemi_mem_xaui[110] = 0x7;
+    vsemi_mem_xaui[111] = 0xC;
+    vsemi_mem_xaui[112] = 0x10;
+    vsemi_mem_xaui[113] = 0x0;
+    vsemi_mem_xaui[114] = 0x10;
+    vsemi_mem_xaui[115] = 0x0;
+    vsemi_mem_xaui[116] = 0xFF;
+    vsemi_mem_xaui[117] = 0xB3;
+    vsemi_mem_xaui[118] = 0xF6;
+    vsemi_mem_xaui[119] = 0xD0;
+    vsemi_mem_xaui[120] = 0xEF;
+    vsemi_mem_xaui[121] = 0xFB;
+    vsemi_mem_xaui[122] = 0xFF;
+    vsemi_mem_xaui[123] = 0xFF;
+    vsemi_mem_xaui[124] = 0xFF;
+    vsemi_mem_xaui[125] = 0xFF;
+    vsemi_mem_xaui[126] = 0xFF;
+    vsemi_mem_xaui[127] = 0xD3;
+    vsemi_mem_xaui[128] = 0xD3;
+    vsemi_mem_xaui[129] = 0xE2;
+    vsemi_mem_xaui[130] = 0xEF;
+    vsemi_mem_xaui[131] = 0xFB;
+    vsemi_mem_xaui[132] = 0xFB;
+    vsemi_mem_xaui[133] = 0xFF;
+    vsemi_mem_xaui[134] = 0xEF;
+    vsemi_mem_xaui[135] = 0xFF;
+    vsemi_mem_xaui[136] = 0xFF;
+    vsemi_mem_xaui[137] = 0xD3;
+    vsemi_mem_xaui[138] = 0xD3;
+    vsemi_mem_xaui[139] = 0xE2;
+    vsemi_mem_xaui[140] = 0xEF;
+    vsemi_mem_xaui[141] = 0xFB;
+    vsemi_mem_xaui[142] = 0xFB;
+    vsemi_mem_xaui[143] = 0xFF;
+    vsemi_mem_xaui[144] = 0xEF;
+    vsemi_mem_xaui[145] = 0xFF;
+    vsemi_mem_xaui[146] = 0xFF;
+    vsemi_mem_xaui[147] = 0xFB;
+    vsemi_mem_xaui[148] = 0xFF;
+    vsemi_mem_xaui[149] = 0x3F;
+    vsemi_mem_xaui[150] = 0x0;
+    vsemi_mem_xaui[151] = 0x64;
+    vsemi_mem_xaui[152] = 0x0;
+    vsemi_mem_xaui[153] = 0x2;
+    vsemi_mem_xaui[154] = 0x1;
+    vsemi_mem_xaui[155] = 0x5;
+    vsemi_mem_xaui[156] = 0x5;
+    vsemi_mem_xaui[157] = 0x4;
+    vsemi_mem_xaui[158] = 0x0;
+    vsemi_mem_xaui[159] = 0x0;
+    vsemi_mem_xaui[160] = 0x8;
+    vsemi_mem_xaui[161] = 0x4;
+    vsemi_mem_xaui[162] = 0x0;
+    vsemi_mem_xaui[163] = 0x0;
+    vsemi_mem_xaui[164] = 0x4;
 
 	return;
 }
@@ -564,70 +564,71 @@ void nlm_hal_config_vsemi_mem_xaui_4page_125(void)
 
 void nlm_hal_config_vsemi_mem_sgmii(void)
 {
-	vsemi_mem_sgmii[101] = 0x99;
-	vsemi_mem_sgmii[102] = 0x0;
-	vsemi_mem_sgmii[103] = 0x76;
-	vsemi_mem_sgmii[104] = 0xB7;
-	vsemi_mem_sgmii[105] = 0xB7;
-	vsemi_mem_sgmii[106] = 0xC;
-	vsemi_mem_sgmii[107] = 0xC;
-	vsemi_mem_sgmii[108] = 0x1A;
-	vsemi_mem_sgmii[109] = 0x1A;
-	vsemi_mem_sgmii[110] = 0x6;
-	vsemi_mem_sgmii[111] = 0x16;
-	vsemi_mem_sgmii[112] = 0x8;
-	vsemi_mem_sgmii[113] = 0x0;
-	vsemi_mem_sgmii[114] = 0x8;
-	vsemi_mem_sgmii[115] = 0x0;
-	vsemi_mem_sgmii[116] = 0xFF;
-	vsemi_mem_sgmii[117] = 0xB3;
-	vsemi_mem_sgmii[118] = 0xF6;
-	vsemi_mem_sgmii[119] = 0xD0;
-	vsemi_mem_sgmii[120] = 0xEF;
-	vsemi_mem_sgmii[121] = 0xFB;
-	vsemi_mem_sgmii[122] = 0xFF;
-	vsemi_mem_sgmii[123] = 0xFF;
-	vsemi_mem_sgmii[124] = 0xFF;
-	vsemi_mem_sgmii[125] = 0xFF;
-	vsemi_mem_sgmii[126] = 0xFF;
-	vsemi_mem_sgmii[127] = 0xD3;
-	vsemi_mem_sgmii[128] = 0xD3;
-	vsemi_mem_sgmii[129] = 0xE2;
-	vsemi_mem_sgmii[130] = 0xEF;
-	vsemi_mem_sgmii[131] = 0xFB;
-	vsemi_mem_sgmii[132] = 0xFB;
-	vsemi_mem_sgmii[133] = 0xFF;
-	vsemi_mem_sgmii[134] = 0xEF;
-	vsemi_mem_sgmii[135] = 0xFF;
-	vsemi_mem_sgmii[136] = 0xFF;
-	vsemi_mem_sgmii[137] = 0xD3;
-	vsemi_mem_sgmii[138] = 0xD3;
-	vsemi_mem_sgmii[139] = 0xE2;
-	vsemi_mem_sgmii[140] = 0xEF;
-	vsemi_mem_sgmii[141] = 0xFB;
-	vsemi_mem_sgmii[142] = 0xFB;
-	vsemi_mem_sgmii[143] = 0xFF;
-	vsemi_mem_sgmii[144] = 0xEF;
-	vsemi_mem_sgmii[145] = 0xFF;
-	vsemi_mem_sgmii[146] = 0xFF;
-	vsemi_mem_sgmii[147] = 0xFB;
-	vsemi_mem_sgmii[148] = 0xFF;
-	vsemi_mem_sgmii[149] = 0x3F;
-	vsemi_mem_sgmii[150] = 0x0;
-	vsemi_mem_sgmii[151] = 0x64;
-	vsemi_mem_sgmii[152] = 0x0;
-	vsemi_mem_sgmii[153] = 0x4;
-	vsemi_mem_sgmii[154] = 0x2;
-	vsemi_mem_sgmii[155] = 0x5;
-	vsemi_mem_sgmii[156] = 0x5;
-	vsemi_mem_sgmii[157] = 0x4;
-	vsemi_mem_sgmii[158] = 0x0;
-	vsemi_mem_sgmii[159] = 0x0;
-	vsemi_mem_sgmii[160] = 0x8;
-	vsemi_mem_sgmii[161] = 0x4;
-	vsemi_mem_sgmii[162] = 0x0;
-	vsemi_mem_sgmii[163] = 0x0;
-	vsemi_mem_sgmii[164] = 0x4;
+    vsemi_mem_sgmii[101] = 0x99;
+    vsemi_mem_sgmii[102] = 0x0;
+    vsemi_mem_sgmii[103] = 0x6C;
+    vsemi_mem_sgmii[104] = 0xB7;
+    vsemi_mem_sgmii[105] = 0xB7;
+    vsemi_mem_sgmii[106] = 0xC;
+    vsemi_mem_sgmii[107] = 0xC;
+    vsemi_mem_sgmii[108] = 0x1A;
+    vsemi_mem_sgmii[109] = 0x1A;
+    vsemi_mem_sgmii[110] = 0x7;
+    vsemi_mem_sgmii[111] = 0xC;
+    vsemi_mem_sgmii[112] = 0x8;
+    vsemi_mem_sgmii[113] = 0x0;
+    vsemi_mem_sgmii[114] = 0x8;
+    vsemi_mem_sgmii[115] = 0x0;
+    vsemi_mem_sgmii[116] = 0xFF;
+    vsemi_mem_sgmii[117] = 0xB3;
+    vsemi_mem_sgmii[118] = 0xF6;
+    vsemi_mem_sgmii[119] = 0xD0;
+    vsemi_mem_sgmii[120] = 0xEF;
+    vsemi_mem_sgmii[121] = 0xFB;
+    vsemi_mem_sgmii[122] = 0xFF;
+    vsemi_mem_sgmii[123] = 0xFF;
+    vsemi_mem_sgmii[124] = 0xFF;
+    vsemi_mem_sgmii[125] = 0xFF;
+    vsemi_mem_sgmii[126] = 0xFF;
+    vsemi_mem_sgmii[127] = 0xD3;
+    vsemi_mem_sgmii[128] = 0xD3;
+    vsemi_mem_sgmii[129] = 0xE2;
+    vsemi_mem_sgmii[130] = 0xEF;
+    vsemi_mem_sgmii[131] = 0xFB;
+    vsemi_mem_sgmii[132] = 0xFB;
+    vsemi_mem_sgmii[133] = 0xFF;
+    vsemi_mem_sgmii[134] = 0xEF;
+    vsemi_mem_sgmii[135] = 0xFF;
+    vsemi_mem_sgmii[136] = 0xFF;
+    vsemi_mem_sgmii[137] = 0xD3;
+    vsemi_mem_sgmii[138] = 0xD3;
+    vsemi_mem_sgmii[139] = 0xE2;
+    vsemi_mem_sgmii[140] = 0xEF;
+    vsemi_mem_sgmii[141] = 0xFB;
+    vsemi_mem_sgmii[142] = 0xFB;
+    vsemi_mem_sgmii[143] = 0xFF;
+    vsemi_mem_sgmii[144] = 0xEF;
+    vsemi_mem_sgmii[145] = 0xFF;
+    vsemi_mem_sgmii[146] = 0xFF;
+    vsemi_mem_sgmii[147] = 0xFB;
+    vsemi_mem_sgmii[148] = 0xFF;
+    vsemi_mem_sgmii[149] = 0x3F;
+    vsemi_mem_sgmii[150] = 0x0;
+    vsemi_mem_sgmii[151] = 0x64;
+    vsemi_mem_sgmii[152] = 0x0;
+    vsemi_mem_sgmii[153] = 0x4;
+    vsemi_mem_sgmii[154] = 0x2;
+    vsemi_mem_sgmii[155] = 0x5;
+    vsemi_mem_sgmii[156] = 0x5;
+    vsemi_mem_sgmii[157] = 0x4;
+    vsemi_mem_sgmii[158] = 0x0;
+    vsemi_mem_sgmii[159] = 0x0;
+    vsemi_mem_sgmii[160] = 0x8;
+    vsemi_mem_sgmii[161] = 0x4;
+    vsemi_mem_sgmii[162] = 0x0;
+    vsemi_mem_sgmii[163] = 0x0;
+    vsemi_mem_sgmii[164] = 0x4;
+
 }
 
 void vsemi_mem_init_sgmii_125Mhzrefclk(void)
diff --git a/arch/mips/netlogic/lib/syslib/include/nlm_hal.h b/arch/mips/netlogic/lib/syslib/include/nlm_hal.h
index e2a12c6..5ff3545 100644
--- a/arch/mips/netlogic/lib/syslib/include/nlm_hal.h
+++ b/arch/mips/netlogic/lib/syslib/include/nlm_hal.h
@@ -198,6 +198,61 @@ static inline uint32_t get_xlp3xx_epid(void)
         return epid;
 }
 
+#define DEFAULT_CPU_IO_BASE 0xffffffffb8000000ULL
+#define HDR_OFFSET 0x100
+#define BDF2OFFSET(bus, dev, func)  (((bus) << 20) | ((dev) << 15) | ((func) << 12))
+#define XLP_XKPHYS_UNCACHED       0x9000000000000000ULL
+
+#define BRIDGE BDF2OFFSET(0, 0, 0)
+
+inline static u32 xlp9xx_get_node_id(void)
+{
+        u32 node = 0;
+        __asm__ __volatile__(          \
+                " .set    push         \n" \
+                " .set    noreorder    \n" \
+                "   mfc0  %0, $15, 1   \n" \
+                "   srl   %0, 7        \n" \
+                "   and   %0, 7        \n" \
+                " .set pop             \n" \
+                : "=r" (node):: );
+
+        return node;
+}
+
+//node<0: use current cpu nodeid
+inline static volatile u32* xlp9xx_cpu_io_mmio(int node, u32 offset)
+{
+        if(node <0 ) node = xlp9xx_get_node_id();
+
+        volatile u32 * pCmu = (volatile u32*)(DEFAULT_CPU_IO_BASE + ( (node&0x7) << 12) );
+        if( offset == BRIDGE ) return pCmu + 0x40;
+
+        u32 busno = (pCmu[6] >> 8 ) & 0xFF;  //get secondary bus number
+
+        return (volatile u32 *)(DEFAULT_CPU_IO_BASE + (busno<<20) + (offset) + HDR_OFFSET);
+}
+//get device's mem bar0/1 and convert to 64bits uncached virtual memory
+
+inline static volatile u32* xlp9xx_cpu_mem_base(u32 node, u32 offset)
+{
+	volatile u32* mmio = xlp9xx_cpu_io_mmio(node, offset);
+	mmio -= HDR_OFFSET/sizeof(u32);
+	u64 phy = mmio[4] ;
+	if( phy&1 ) phy &= ~((u64)3);	//io bar
+	else
+	{
+		//64bits physical address
+		if( ((phy>>1) & 3) == 2 )  phy |= (u64)mmio[5] << 32;
+		phy &= ~((u64)0x7F);
+	}
+
+	phy &= 0xFFFFFFFFFFULL; //40 bits phy addr
+	return (volatile u32*)(XLP_XKPHYS_UNCACHED + phy );
+}
+
+
+
 #endif /* __ASSEMBLY__ */
 
 #endif /* #ifndef _NLM_HAL_H_ */
diff --git a/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h b/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h
index a564a38..58dc355 100644
--- a/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h
+++ b/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h
@@ -496,7 +496,7 @@ extern int is_nlm_xlp(unsigned int chipid, unsigned int rev,  unsigned int ext);
 
 #define XLP_MAXDEV_PERNODE		8
 
-#define XLP_CFG_BASE(node, SOC)		((((node * XLP_MAXDEV_PERNODE) + SOC##_DEVICE) << 15) | (SOC##_FUNC << 12))
+#define XLP_CFG_BASE(SOC)		(((SOC##_DEVICE) << 15) | (SOC##_FUNC << 12))
 
 
 #ifndef __ASSEMBLY__
diff --git a/arch/mips/netlogic/lib/syslib/src/nlm_hal.c b/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
index 256e8e6..b014bc4 100644
--- a/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
+++ b/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
@@ -418,25 +418,50 @@ __inline__ void nlm_hal_init(void)
 		} else 
 #endif
 		{
-			xlp_fmn_base[node] = mask & nlm_hal_read_32bit_reg((0x18000000 + XLP_CFG_BASE(node, XLP_FMN)), PCI_MEM_BAR_0);
+			//xlp_fmn_base[node] = mask & nlm_hal_read_32bit_reg((0x18000000 + XLP_CFG_BASE(node, XLP_FMN)), PCI_MEM_BAR_0);
 
-			xlp_mac_base[node] = mask & nlm_hal_read_32bit_reg((0x18000000 + XLP_CFG_BASE(node, XLP_NAE)), PCI_MEM_BAR_0); //0x18018000
-		//printf("Node:%d NAE_MAC_Base:%lX\n", node, xlp_mac_base[node]);
+			//xlp_mac_base[node] = mask & nlm_hal_read_32bit_reg((0x18000000 + XLP_CFG_BASE(node, XLP_NAE)), PCI_MEM_BAR_0); //0x18018000
+		
 			xlp_nae_base[node] = xlp_mac_base[node] + 0xe000;
 
-			xlp_poe_base_pcim[node] = mask & nlm_hal_read_32bit_reg((0x18000000 + XLP_CFG_BASE(node, XLP_POE)), PCI_MEM_BAR_0);	//0x18019000
+			xlp_fmn_base[node] = (1<<20)+ 0x18000000 + (4<<15)  ;
+			xlp_mac_base[node] = (1<<20)+ 0x18000000 + (3<<15) ;
+			xlp_nae_base[node] = xlp_mac_base[node] + 0xe000;
+		printf("Node:%d NAE_fmn_Base:%lX\n", node, xlp_fmn_base[node]);
+		printf("Node:%d NAE_NAE_Base:%lX\n", node, xlp_nae_base[node]);
+		printf("Node:%d NAE_MAC_Base:%lX\n", node, xlp_mac_base[node]);
+
+			xlp_mac_base[node] = xlp9xx_cpu_mem_base(-1, XLP_CFG_BASE(XLP_NAE));
+			xlp_fmn_base[node] = xlp9xx_cpu_mem_base(-1, XLP_CFG_BASE(XLP_FMN));
+			xlp_nae_base[node] = xlp_mac_base[node] + 0xe000;
+		printf("After Node:%d NAE_fmn_Base:%lX\n", node, xlp_fmn_base[node]);
+		printf("Node:%d NAE_NAE_Base:%lX\n", node, xlp_nae_base[node]);
+		printf("Node:%d NAE_MAC_Base:%lX\n", node, xlp_mac_base[node]);
+			
+
+
+			xlp_poe_base_pcim[node] = mask & nlm_hal_read_32bit_reg(( (1<<20) +0x18000000 + XLP_CFG_BASE( XLP_POE)), PCI_MEM_BAR_0);	//0x18019000
+			xlp_poe_base_pcim[node] = (1<<20)+ 0x18000000 + (3<<15) + (1<<12) +0;	//0x18019000
+			xlp_poe_base_pcim[node] = xlp9xx_cpu_mem_base(-1, XLP_CFG_BASE(XLP_POE));
+			
+		printf("After modify xlp_xlp_poe_base_pcim is = 0x%llx\n", xlp_poe_base_pcim);
 		}
 
-		xlp_poe_base_pcie[node] = (xlp_io_base | XLP_CFG_BASE(node, XLP_POE)) & 0x1fffffff; /* For now . Will be fixed soon.*/
+		xlp_poe_base_pcie[node] = xlp_io_base | XLP_CFG_BASE(XLP_POE) & 0x1fffffff; /* For now . Will be fixed soon.*/
+		xlp_poe_base_pcie[node] = xlp_io_base + xlp_poe_base_pcim[node] & 0x1fffffff; 
+		printf("xlp_poe_base_pcie is = 0x%llx\n", xlp_poe_base_pcie);
 
-		xlp_sys_base[node] = (xlp_io_base | XLP_CFG_BASE(node, XLP_SYS)) & 0x1fffffff; /*For now . Will be fixed soon.*/
-		xlp_sae_base[node] = (xlp_io_base | XLP_CFG_BASE(node, XLP_SAE)) & 0x1fffffff; /* For now . Will be fixed soon.*/
+		xlp_sys_base[node] = (xlp_io_base | XLP_CFG_BASE( XLP_SYS)) & 0x1fffffff; /*For now . Will be fixed soon.*/
+		xlp_sys_base[node] = xlp_io_base | (unsigned long long)xlp9xx_cpu_mem_base(-1, XLP_CFG_BASE( XLP_SYS));
+		printf("xlp_sys_base[node] is = 0x%llx\n", xlp_sys_base);
+		
+		//xlp_sae_base[node] = (xlp_io_base | XLP_CFG_BASE(node, XLP_SAE)) & 0x1fffffff; /* For now . Will be fixed soon.*/
 	}
 
+#if 0
         xlp_rsa_base = (xlp_io_base | XLP_CFG_BASE(0, XLP_RSA)) & 0x1fffffff; /* For now . Will be fixed soon.*/
-
 	if ( is_nlm_xlp3xx() || is_nlm_xlp2xx() ) {
-		xlp_regex_base_pcie = (xlp_io_base | (XLP_CFG_BASE(0, XLP_3XX_REGEX))) & 0x1fffffff;
+		xlp_regex_base_pcie = (xlp_io_base | (XLP_CFG_BASE( XLP_3XX_REGEX))) & 0x1fffffff;
 	        xlp_regex_base_pcim = mask & nlm_hal_read_32bit_reg((0x18000000 + XLP_CFG_BASE(0, XLP_3XX_REGEX)), PCI_MEM_BAR_0);
 		nlm_print("xlp3xx/2xx Regex (netl7) vendor_device id:%#x\n"
 			"xlp_regex_base_pcim:%#lx\n"
@@ -444,6 +469,7 @@ __inline__ void nlm_hal_init(void)
 			nlm_hal_read_32bit_reg(xlp_regex_base_pcie, 0),
 			xlp_regex_base_pcim, xlp_regex_base_pcie);
        	}
+#endif
 
 #if !defined(NLM_HAL_UBOOT)
 #ifndef CONFIG_N511
-- 
1.9.1

