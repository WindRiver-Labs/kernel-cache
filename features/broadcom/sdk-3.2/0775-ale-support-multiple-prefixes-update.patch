From 94efdb5fde15729512a50d5350e0770fa70ecdba Mon Sep 17 00:00:00 2001
From: yan sun <yansun@broadcom.com>
Date: Tue, 20 Aug 2013 12:22:38 -0700
Subject: [PATCH 0775/1532] ale: support multiple prefixes update

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/lib/alelib/ale_api.c     | 49 +++++++++++++++++++++--------
 arch/mips/netlogic/lib/alelib/ale_api.h     |  4 +--
 arch/mips/netlogic/lib/alelib/ale_node_db.c | 49 ++++++-----------------------
 3 files changed, 47 insertions(+), 55 deletions(-)

diff --git a/arch/mips/netlogic/lib/alelib/ale_api.c b/arch/mips/netlogic/lib/alelib/ale_api.c
index 1b0e7e3..9684f0c 100644
--- a/arch/mips/netlogic/lib/alelib/ale_api.c
+++ b/arch/mips/netlogic/lib/alelib/ale_api.c
@@ -377,30 +377,35 @@ ale_create_db(ale_t *ale,
  * @param [in] ale ale pointer
  * @param [in] fb_vc VC ID
  * @param [in] prefix, 128 bit at most
- * @param [in] root node of database tree
- * @param [in] last_update if set, ALE will build and switch to a new database after this update
+ * @param [in] update_num number of prefixes will be updated
+ * @param [in] last_update if set, ALE will build and switch to a new database after these updates
  * 
  * @return
  *  - On success, returns 0
  *  - On failure, returns -1
  */
 int
-ale_insert_prefix(ale_t* ale, uint16_t fb_vc, ale_prefix_t* prefix, int last_update){
-   
+ale_insert_prefix(ale_t* ale, uint16_t fb_vc, ale_prefix_t* prefix, int update_num, int last_update){
+
+    int i;
+
+    if(update_num > 1)
+        for(i = 0; i < update_num - 1; i++)
+            ale_insert_prefix_internal(ale, prefix++, 0);
+    
+    ale_insert_prefix_internal(ale, prefix, last_update);
+
     if(last_update){
         ale_db_entry_t* ale_db_hw;
-
-        ale_insert_prefix_internal(ale, prefix, last_update);
+        
         if(ale){
           ale_db_hw = (!ale->active_db) ? ale->node_base_addr[1] : ale->node_base_addr[0]; 
           ale_print(ALE_DBG_INFO, "%s: ale_db_hw = %llx\n",
                     __func__, (long long unsigned int)ale_virt_to_phys(ale_db_hw));
           ale_download_node_bank(ale, fb_vc, 0x3f, ale_virt_to_phys(ale_db_hw), (uint64_t)NULL);
         }
-        return 0;
     }
-    else
-        return ale_insert_prefix_internal(ale, prefix, last_update);
+    return 0;
 }
 
 
@@ -410,17 +415,35 @@ ale_insert_prefix(ale_t* ale, uint16_t fb_vc, ale_prefix_t* prefix, int last_upd
  * @param [in] ale ale pointer
  * @param [in] fb_vc VC ID
  * @param [in] prefix 128 bit prefix at most
- * @param [in] root node of database tree
- * @param [in] last_update if set, ALE will build and switch to a new database after this update
+ * @param [in] update_num number of prefixes will be updated
+ * @param [in] last_update if set, ALE will build and switch to a new database after these updates
  *
  * @return
  *  - On success, returns 0
  *  - On failure, returns -1
  */
 int
-ale_delete_prefix(ale_t* ale, uint16_t fb_vc, ale_prefix_t* prefix, int last_update){
+ale_delete_prefix(ale_t* ale, uint16_t fb_vc, ale_prefix_t* prefix, int update_num, int last_update){
+
+    int i;
+
+    if(update_num > 1)
+        for(i = 0; i < update_num - 1; i++)
+            ale_delete_prefix_internal(ale, prefix++, 0);
+
+    ale_delete_prefix_internal(ale, prefix, last_update);
 
-    return ale_delete_prefix_internal(ale, prefix, last_update);
+    if(last_update){
+        ale_db_entry_t* ale_db_hw;
+       
+        if(ale){
+          ale_db_hw = (!ale->active_db) ? ale->node_base_addr[1] : ale->node_base_addr[0]; 
+          ale_print(ALE_DBG_INFO, "%s: ale_db_hw = %llx\n",
+                    __func__, (long long unsigned int)ale_virt_to_phys(ale_db_hw));
+          ale_download_node_bank(ale, fb_vc, 0x3f, ale_virt_to_phys(ale_db_hw), (uint64_t)NULL);
+        }
+    }
+    return 0;
 }
 
 
diff --git a/arch/mips/netlogic/lib/alelib/ale_api.h b/arch/mips/netlogic/lib/alelib/ale_api.h
index 8457326..651711c 100644
--- a/arch/mips/netlogic/lib/alelib/ale_api.h
+++ b/arch/mips/netlogic/lib/alelib/ale_api.h
@@ -475,7 +475,7 @@ extern uint32_t ale_string_search(ale_prefix_t* prefix);
 extern int ale_get_prefix_index(uint32_t ale_index);
 extern int ale_get_prefix_index_from_ale_desc(uint64_t desc);
 extern int ale_get_prefix_index_from_nae_desc(uint64_t desc);
-extern int ale_insert_prefix(ale_t* ale, uint16_t vc, ale_prefix_t* prefix, int last_update);
-extern int ale_delete_prefix(ale_t* ale, uint16_t vc, ale_prefix_t* prefix, int last_update);
+extern int ale_insert_prefix(ale_t* ale, uint16_t vc, ale_prefix_t* prefix, int update_num, int last_update);
+extern int ale_delete_prefix(ale_t* ale, uint16_t vc, ale_prefix_t* prefix, int update_num, int last_update);
 
 #endif /* _ALE_API_H_ */
diff --git a/arch/mips/netlogic/lib/alelib/ale_node_db.c b/arch/mips/netlogic/lib/alelib/ale_node_db.c
index ffa33f0..b0597b3 100644
--- a/arch/mips/netlogic/lib/alelib/ale_node_db.c
+++ b/arch/mips/netlogic/lib/alelib/ale_node_db.c
@@ -176,6 +176,10 @@ ale_set_dense_subtree(ale_btree_node_t* btree,
     return 1;
 }
 
+static int ale_encode_node(ale_btree_node_t* ,
+                ale_node_table_t* ,
+                unsigned int, unsigned int);
+
 static unsigned int
 ale_encode_dense_subtree(ale_btree_node_t* btree,
                          ale_node_table_t* node_table,
@@ -195,11 +199,11 @@ ale_encode_dense_subtree(ale_btree_node_t* btree,
     }
 
     if(btree[node].left){
-        flagL = ale_encode_dense_subtree(btree, node_table, btree[node].left, level + 1);
+        flagL = ale_encode_node(btree, node_table, btree[node].left, level + 1);
     }
 
     if(btree[node].right){
-        flagR = ale_encode_dense_subtree(btree, node_table, btree[node].right, level + 1);
+        flagR = ale_encode_node(btree, node_table, btree[node].right, level + 1);
     }
     return flagL && flagR;
 }
@@ -730,6 +734,7 @@ int ale_delete_prefix_internal(ale_t* ale, ale_prefix_t* prefix, int last_update
     }
     //delete from binary tree    
     btree[current_node].index = 0;
+    prefix_index--;
     
     if(last_update){  
         for(i = 0; i < ALE_MAX_NODE; i++){
@@ -746,49 +751,13 @@ int ale_delete_prefix_internal(ale_t* ale, ale_prefix_t* prefix, int last_update
             ale_print(ALE_DBG_ERR, "ale node_table calloc FAILED!\n");
         }        
         ale_encode_node(btree, node_table, 0, 0);
+        if(ale)
+            ale_db_hw_internal = (!ale->active_db) ? ale->node_base_addr[1] : ale->node_base_addr[0];  
         ale_update_db(ale_db_hw_internal, node_table, ale_db, result_buf); 
     }
 
     return 0;
 
-    //found node in node table
-    node_found = node_table[btree[latest_node].node_index];
-    //delete from node table
-    for(i = 0; i < (1<<ALE_STRIDE); i++){
-        if(node_table[btree[latest_node].node_index].result_buf[i])
-            total_result++;
-        if(node_table[btree[latest_node].node_index].result_buf[i] == prefix->index){
-            delete_idx = total_result - 1;
-            if(node_found.node_type == ALE_NODE_TYPE_SPARSE)
-                node_table[btree[latest_node].node_index].BM2[i] = 0;
-            else
-                node_table[btree[latest_node].node_index].BM1[i] = 0;             
-        }
-    }
-
-    
-    for(i = 0; i < db_idx; i++){
-        if(result_buf[ale_db[i].rptr] == btree[latest_node].index){    
-            break;
-        }
-    }
-
-    //delete from result buffer
-    if(total_result > 1){
-        for(j = ale_db[i].rptr + delete_idx; j < ale_db[i].rptr + total_result - 1; j++)
-            result_buf[j] = result_buf[j + 1];
-    }
-    
-    //delete from database
-    for(j = 0; j < 1<<ALE_STRIDE; j++){
-        if(result_buf[node_found.rptr + j] == btree[latest_node].index){
-            if(ale_db[i].node_type == ALE_NODE_TYPE_DENSE)
-                ale_db[i].BM1[j/8] = ale_db[j].BM1[j/8] | (1 << j%8); 
-            else
-                ale_db[i].BM2[j/8] = ale_db[j].BM2[j/8] | (1 << j%8); 
-        }   
-    }
-    return 0;
 }
 
 unsigned int
-- 
1.9.1

