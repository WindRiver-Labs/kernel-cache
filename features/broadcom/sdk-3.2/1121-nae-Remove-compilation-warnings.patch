From 15857cf4f8903a89a008033defc23d5b9c0d55b9 Mon Sep 17 00:00:00 2001
From: Alok Agrawat <alok@broadcom.com>
Date: Wed, 26 Sep 2012 03:44:28 -0700
Subject: [PATCH 1121/1532] nae: Remove compilation warnings

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/misc/netlogic/nlm_cde/nlm_cde.c | 36 +++++++++++++++++----------------
 1 file changed, 19 insertions(+), 17 deletions(-)

diff --git a/drivers/misc/netlogic/nlm_cde/nlm_cde.c b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
index 76593a6..6add2b4 100644
--- a/drivers/misc/netlogic/nlm_cde/nlm_cde.c
+++ b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
@@ -63,6 +63,7 @@ ssize_t xlp_cde_write(struct file *filp, const char __user *buf, size_t count, l
 static int xlp_cde_mmap(struct file * filp, struct vm_area_struct * vma);
 static unsigned char* cde_mem_start = NULL, *cde_mem_start_1, *cde_mem_start_2, *cde_mem_start_3, *cde_mem_start_4, *cde_mem_start_5, *cde_input_mem, *cde_output_mem, *cde_inf_input_mem, *cde_inf_output_mem, *cde_inf_mem_start;
 static unsigned int cde_mem_size, cde_mem_size_1, cde_mem_size_2, cde_mem_size_3, cde_mem_size_4, cde_mem_size_5;
+//static void test(void);
 
 struct nlm_cde_op
 {
@@ -79,7 +80,7 @@ volatile fr_page page_array[MAX_NUM_PAGES]    __attribute__((aligned(32)));
 volatile char *(page_array_tmp_data_array[MAX_NUM_PAGES])__attribute__((aligned(32)));
 
 //#define CDE_DEBUG 1
-//#ifdef CDE_DEBUG
+#ifdef CDE_DEBUG
 static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg)
 {
     int k = 0;
@@ -92,7 +93,7 @@ static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg
     }
     printk("\n");
 }
-//#endif
+#endif
 
 static void *
 get_cache_aligned_mem(size_t size)
@@ -263,7 +264,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
   type = 1;
   if(cmp_data->src_size > MAX_INPUT_BUFFER_SIZE)
   {
-	  printk("ERROR:src_size = %d if more than %d. No space to store\n", cmp_data->src_size, MAX_INPUT_BUFFER_SIZE);
+	  printk("ERROR:src_size = %d if more than %d. No space to store\n", (int)cmp_data->src_size, (int)MAX_INPUT_BUFFER_SIZE);
 	  return 0;
   }
   num_desc = (cmp_data->src_size/CMP_PAGE_SIZE) + ((cmp_data->src_size %CMP_PAGE_SIZE)?1:0);
@@ -431,6 +432,7 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
 }
 
 
+volatile uint64_t used_fd[NUM_FREE_DESCRIPTORS] __attribute__((aligned(32)));
 void return_free_descriptors(msg *msg_list, int msg_index)
 {
   int i, j, k, status, num_desc;
@@ -439,7 +441,6 @@ void return_free_descriptors(msg *msg_list, int msg_index)
   uint64_t dest_desc;
   int used_fd_index = 0;
 
-  volatile uint64_t used_fd[NUM_FREE_DESCRIPTORS] __attribute__((aligned(32)));
 
   for (i = 0; i < msg_index; i++) {
 
@@ -493,7 +494,8 @@ static int nlm_hal_cde_read_cmp_msg(char *buffer, uint64_t payload)
   return offset;
 }
 
-
+/* Due compiler warning it is declraed globally */
+struct msgrng_msg msg_list_g[MAX_NUM_MESSAGES]; 
 static void
 nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
         uint32_t size, uint32_t code,
@@ -503,7 +505,6 @@ nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
   struct msgrng_msg *msg, temp_msg;
   int last = 0; 
   int msg_index = 0; 
-  struct msgrng_msg msg_list[MAX_NUM_MESSAGES]; 
   int offset = cmp_data->target_size;
 
 #ifdef CDE_DEBUG
@@ -528,9 +529,9 @@ nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
   dump_buffer((char *) (cmp_data->target + offset), cmp_data->target_size, "returned data:");
 #endif
 
-  memcpy((void *)&msg_list[msg_index++],(void *)msg, sizeof(struct msgrng_msg));
+  memcpy((void *)&msg_list_g[msg_index++],(void *)msg, sizeof(struct msgrng_msg));
 
-  return_free_descriptors(msg_list, msg_index); 
+  return_free_descriptors(msg_list_g, msg_index); 
 #ifdef CDE_DEBUG
   printk("[\n%s@%d]:end of phnx_msgring_comp_int_handler\n", __FUNCTION__, __LINE__);
 #endif
@@ -538,7 +539,6 @@ nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
 
 cmp_data_t* nlm_cde_init()
 {
-  unsigned int size;
   cmp_data = (cmp_data_t *) kmalloc(sizeof(cmp_data_t), GFP_KERNEL);
   if (!cmp_data)
     return NULL;
@@ -659,11 +659,11 @@ void nlm_cde_cleanup(cmp_data_t *cmp_data)
 	  kfree(cmp_data->scratch_inf);
   if (cmp_data)
     kfree(cmp_data);
-  free_pages(cde_mem_start_1, get_order(cde_mem_size_1));
-  free_pages(cde_mem_start_2, get_order(cde_mem_size_2));
-  free_pages(cde_mem_start_3, get_order(cde_mem_size_3));
-  free_pages(cde_mem_start_4, get_order(cde_mem_size_4));
-  free_pages(cde_mem_start_5, get_order(cde_mem_size_5));
+  free_pages((ulong)cde_mem_start_1, get_order(cde_mem_size_1));
+  free_pages((ulong)cde_mem_start_2, get_order(cde_mem_size_2));
+  free_pages((ulong)cde_mem_start_3, get_order(cde_mem_size_3));
+  free_pages((ulong)cde_mem_start_4, get_order(cde_mem_size_4));
+  free_pages((ulong)cde_mem_start_5, get_order(cde_mem_size_5));
 
     cmp_data->src = NULL;
     cmp_data->target = NULL;
@@ -833,7 +833,6 @@ int xlp_cde_ioctl(struct inode *inode, struct file *filp,
 	      unsigned int cmd, unsigned long arg)
 {
   int err = 0, i = 0;
-  static int k = 0;
   struct nlm_cde_op *cde;
   unsigned int input_size = 0, output_size = 0, size;
   unsigned char *input_mem, *output_mem, *mem_start;
@@ -882,6 +881,9 @@ int xlp_cde_ioctl(struct inode *inode, struct file *filp,
 //dump_buffer(cmp_data->scratch_inf, SCRATCH_SIZE, "Inf Scratch:");
   return err;
 }
+
+
+#if 0
 static unsigned strtonum(char c)
 {
         if(c >= '0' && c <= '9')
@@ -893,10 +895,9 @@ static unsigned strtonum(char c)
         if(c >= 'a' && c <= 'f')
                 return (c - 'a' + 10);
 }
-
 static void test()
 {
-  int err = 0, i = 0;
+  int i = 0;
   unsigned int input_size = 0, output_size = 0, size;
   unsigned char *input_mem, *output_mem, *mem_start;
   
@@ -922,6 +923,7 @@ static void test()
 //dump_buffer(output_mem, size, "output:");
 
 }
+#endif
 
 static int __init xlp_cde_init(void)
 {
-- 
1.9.1

