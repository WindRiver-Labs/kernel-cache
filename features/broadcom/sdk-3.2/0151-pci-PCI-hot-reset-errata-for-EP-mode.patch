From 98b7bb54bae0309e31edb0a87ea6dd8be5de59eb Mon Sep 17 00:00:00 2001
From: Ajesh <ajesh@broadcom.com>
Date: Sat, 24 May 2014 18:41:57 +0530
Subject: [PATCH 0151/1532] pci: PCI hot reset errata for EP mode

When XLP is in Device mode (i.e. the XLP PCI controller is in endpoint
mode), the controller has to be reset from software for it to work.
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/xlp/Makefile        |   2 +
 arch/mips/netlogic/xlp/pci-hot-reset.c | 183 +++++++++++++++++++++++++++++++++
 2 files changed, 185 insertions(+)
 create mode 100644 arch/mips/netlogic/xlp/pci-hot-reset.c

diff --git a/arch/mips/netlogic/xlp/Makefile b/arch/mips/netlogic/xlp/Makefile
index 12b355e..dc17346 100644
--- a/arch/mips/netlogic/xlp/Makefile
+++ b/arch/mips/netlogic/xlp/Makefile
@@ -11,3 +11,5 @@ obj-$(CONFIG_NUMA)		+= numa.o
 obj-$(CONFIG_NLM_FASTSYSCALL)	+= fastsyscall.o
 obj-$(CONFIG_NLM_ENABLE_COP2)	+= cop2.o
 obj-$(CONFIG_KGDB)		+= nmi.o
+
+obj-y				+= pci-hot-reset.o
diff --git a/arch/mips/netlogic/xlp/pci-hot-reset.c b/arch/mips/netlogic/xlp/pci-hot-reset.c
new file mode 100644
index 0000000..a495c99
--- /dev/null
+++ b/arch/mips/netlogic/xlp/pci-hot-reset.c
@@ -0,0 +1,183 @@
+/*
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the Broadcom
+ * license below:
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <linux/delay.h>
+
+#include <asm/io.h>
+
+#include <asm/netlogic/interrupt.h>
+#include <asm/netlogic/haldefs.h>
+#include <asm/netlogic/common.h>
+#include <asm/netlogic/mips-extns.h>
+
+#include <asm/netlogic/xlp-hal/iomap.h>
+#include <asm/netlogic/xlp-hal/xlp.h>
+#include <asm/netlogic/xlp-hal/pic.h>
+#include <asm/netlogic/xlp-hal/sys.h>
+#include <asm/netlogic/xlp-hal/pcibus.h>
+#include <asm/netlogic/xlp-hal/bridge.h>
+
+static void modify_def_value(void)
+{
+	uint64_t sysbase = nlm_get_sys_regbase(0);
+	uint32_t sysreg = nlm_read_sys_reg(sysbase,SYS_POWER_ON_RESET_CFG);	
+	uint32_t pcfg = (sysreg >> 12) & 0x3;
+	uint64_t pciebase = nlm_get_pcie_base(0,0);
+	uint32_t pcicontrol, link;
+
+	switch(pcfg)
+	{
+		case 1:
+			link = nlm_read_pci_reg(pciebase, 0x1f);
+			nlm_write_pci_reg(pciebase, 0x1f, ((link & 0xfffffc0f) | 0x20));
+			break;
+		case 2:
+		case 3:
+		    link = nlm_read_pci_reg(pciebase, 0x1f);
+			nlm_write_pci_reg(pciebase, 0x1f, ((link & 0xfffffc0f) | 0x10));
+			break;
+		default:
+			break;
+	}
+
+	nlm_write_pci_reg(pciebase, 0x5f, 0x00000000);
+
+	pcicontrol = nlm_read_pci_reg(pciebase, 0x240);
+	nlm_write_pci_reg(pciebase, 0x240,(pcicontrol | (1 << 21)));
+
+	pcicontrol = nlm_read_pci_reg(pciebase,0x65);
+	nlm_write_pci_reg(pciebase,0x65,((pcicontrol & 0xf) | 0x3ff1));
+
+	pcicontrol = nlm_read_pci_reg(pciebase, 0x240);
+	nlm_write_pci_reg(pciebase, 0x240, (pcicontrol & ~(1 << 21)));
+}
+static irqreturn_t xlp_pcie_hot_reset_handler(int irq, void *dev_id)
+{
+	uint64_t pciebase;
+	uint32_t pciint, pcicontrol;
+
+	pr_err("In Int Handler\n");
+	pciebase = nlm_get_pcie_base(0,0);
+
+	pciint = nlm_read_pci_reg(pciebase, PCIE_INT_STATUS1);
+
+	if(pciint & 0x1)
+	{
+		if(((nlm_read_pci_reg(pciebase, 0x1e)) & (0x1 << 21)) != 0)
+		{
+			pr_info("Transaction Pending \n");
+			pcicontrol = nlm_read_pci_reg(pciebase, 0x240);
+			nlm_write_pci_reg(pciebase, 0x240, pcicontrol | (0x3 << 27));
+		}
+		
+		pcicontrol = nlm_read_pci_reg(pciebase, 0x240);
+		nlm_write_pci_reg(pciebase, 0x240, pcicontrol & ~(0x1 << 3));
+
+		while(((nlm_read_pci_reg(pciebase, 0x1e)) & (0x1 << 21)) != 0)
+		{
+			//udelay(200);
+		}
+		pr_err("Transaction Cleared\n");
+
+		pcicontrol = nlm_read_pci_reg(pciebase, 0x240);
+        nlm_write_pci_reg(pciebase, 0x240, pcicontrol & ~(0x1));
+
+		pcicontrol = nlm_read_pci_reg(pciebase, 0x241);
+		nlm_write_pci_reg(pciebase, 0x241, pcicontrol | (0x1 << 17));
+		udelay(1000);
+
+		nlm_write_pci_reg(pciebase, 0x241, pcicontrol & ~(0x1 << 17));
+
+		pcicontrol = nlm_read_pci_reg(pciebase, 0x240);
+        nlm_write_pci_reg(pciebase, 0x240, pcicontrol | (0x9));
+
+		pciint = nlm_read_pci_reg(pciebase, PCIE_INT_STATUS1);
+		nlm_write_pci_reg(pciebase, PCIE_INT_STATUS1, pciint | 0x1);
+
+		modify_def_value();
+
+		pr_info("Hot Reset Interrupt handled \n");
+	}
+	else
+	{
+		pr_info("spurious Interrupt PCIe hot Reset \n");
+	}
+	return IRQ_HANDLED;
+}
+
+static int __init xlp_pci_hot_reset_init(void)
+{
+	uint64_t sysbase = nlm_get_sys_regbase(0);
+	uint32_t sysreg = nlm_read_sys_reg(sysbase,SYS_POWER_ON_RESET_CFG);	
+	uint64_t pciebase = nlm_get_pcie_base(0,0);
+	uint64_t picbase, picreg;
+	uint32_t irq, pciintenable;
+
+	if((read_c0_prid() & PRID_IMP_MASK) == PRID_IMP_NETLOGIC_XLP2XX)
+	  {
+		  pr_err("Hot Reset not handled\n");
+		  return 0;
+	  }
+	pr_info("Sysreg is 0x%x \n", sysreg);
+	if(((sysreg >> 8) & 0xf) & 0x1)
+	{
+		pr_err("PCIE in RC Mode \n");
+		return 0;
+	}
+	pr_info("PCIE in EP mode 0x%x\n", sysreg);
+	pciintenable = nlm_read_pci_reg(pciebase, PCIE_INT_EN1);
+	pciintenable |= 0x1;
+	nlm_write_pci_reg(pciebase,PCIE_INT_EN1, pciintenable);
+
+	pr_err("PCIE in Mode \n");
+	pciintenable = nlm_read_pci_reg(pciebase, PCIE_INT_EN1);
+	picbase = nlm_get_pic_pcibase(0);
+	/* enable the link interrupt */
+	picreg = nlm_read_pic_reg(picbase, PIC_IRT(PIC_IRT_PCIE_LINK_0_INDEX));
+	nlm_write_pic_reg(picbase, PIC_IRT(PIC_IRT_PCIE_LINK_0_INDEX), picreg | (1u << 31));
+
+	irq = PIC_PCIE_LINK_LEGACY_IRQ_BASE;
+	if(request_irq(irq, xlp_pcie_hot_reset_handler,0,"PCIE_HOTRESET",NULL))
+		{
+			pr_info("Could not register PCIe hot Reset interrupt handler \n");
+			return 0;
+		}
+	//pr_err("PCIE in Mode 2\n");
+	return 0;
+}
+late_initcall(xlp_pci_hot_reset_init);
-- 
1.9.1

