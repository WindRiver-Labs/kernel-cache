From 0134a5d2385bb2f95baa92d9cb879a6fc56596c1 Mon Sep 17 00:00:00 2001
From: Rahul Jain <rajain@netlogicmicro.com>
Date: Thu, 30 Jun 2011 17:35:16 +0530
Subject: [PATCH 0245/1532] Added snort ucore, nae.dts file. Increases memory
 in helinux

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/boot/dts/helinux.dts   |   9 +-
 arch/mips/boot/dts/snort-nae.dts | 217 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 223 insertions(+), 3 deletions(-)
 create mode 100644 arch/mips/boot/dts/snort-nae.dts

diff --git a/arch/mips/boot/dts/helinux.dts b/arch/mips/boot/dts/helinux.dts
index 8b48f45..d383376 100644
--- a/arch/mips/boot/dts/helinux.dts
+++ b/arch/mips/boot/dts/helinux.dts
@@ -39,7 +39,7 @@
 			};
 			memory {
 				reg = <0x01000000 0x0B000000	// 176M at 16M
-					0x20000000 0x20000000>;  // 512M at 512M
+					0xE0000000 0xC0000000>;  // 3GB @ 3.5GB
 			};
                         fmn {
                                 node_0_vc_mask = <0x66666666 0x66666666 0x66666666 0x66666666>;
@@ -55,7 +55,7 @@
 			device_type = "domain";
 			os = "netos";
 
-			heap-size = <0x0 0x2000000>; // 32M
+			heap-size = <0x0 0x8000000>; // 128M
 			shared-mem = <0x0 0x40000000 0x0 0x10000000>; // 128M @ 1GB
 
 			#address-cells = <1>;
@@ -76,7 +76,7 @@
 			};
 
 			cpu {
-				onlinemask = <0xff>;
+				onlinemask = <0xffffffff>;
                                 nae-rx-vc = <0>;
                                 nae-fb-vc = <3>;
                                 /* Setting this to '1' makes NAE driver to skip buf alloction and initial
@@ -89,6 +89,9 @@
 			memory {
 				reg = <0x60000000 0x60000000>;  // 1.5GB @ 1.5GB
 			};
+			app-param{
+				onlinemask = <0xffffffff>;
+			};
 
                         fmn {
                                 node_0_vc_mask = <0x99999999 0x99999999 0x99999999 0x99999999>;
diff --git a/arch/mips/boot/dts/snort-nae.dts b/arch/mips/boot/dts/snort-nae.dts
new file mode 100644
index 0000000..666d179
--- /dev/null
+++ b/arch/mips/boot/dts/snort-nae.dts
@@ -0,0 +1,217 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP8XX NAE CFG";
+	compatible = "NETL,XLP8XX_A0";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	frequency = <500>;
+
+	// VFBID MAP: Upto 127 entries
+	// (each entry is a pair of (vfbid , dest-vc)
+	// Legal range: (vfbid (0 - 126), dest-vc (0 - 4095))
+	vfbid-map = <
+		     // NAE -> CPU mapping 
+		     // Each thread uses vc 1 as freeback VC.
+		     // This is tied with fb-vc field.
+			0 2 1 6 2 10 3 14
+			4 18 5 22 6 26 7 30
+			8 34 9 38 10 42 11 46
+			12 50 13 54 14 58 15 62
+			16 66 17 70 18 74 19 78
+			20 82 21 86 22 90 23 94
+			24 98 25 102 26 106 27 110
+			28 114 29 118 30 122 31 126
+/*
+		     // NAE -> CPU mapping 
+		     // Freeback VC = 0
+		      0   0  1   4  2   8  3  12
+		      4  16  5  20  6  24  7  28
+		      8  32  9  36 10  40 11  44
+	 	     12  48 13  52 14  56 15  60
+		     16  64 17  68 18  72 19  76
+		     20  80 21  84 22  88 23  92
+		     24  96 25 100 26 104 27 108
+		     28 112 29 116 30 120 31 124
+*/
+		     // NAE -> NAE mapping 
+		     32	1000 33 1001 34 1002 35 1003
+		     36	1004 37 1005 38 1006 39 1007
+		     40	1008 41 1009 42 1010 43 1011
+		     44	1012 45 1013 46 1014 47 1015
+		     48	1016 49 1017 50 1018 51 1019
+
+		     // NULL FBID Should map to cpu0 to detect NAE send message errors 
+		     127 0
+		>;
+
+        // FLOW Table Generation: CRC16 polynomial
+  	flow_crc_poly = <0xffff>;
+
+	ucore {
+		src@1 {
+			file = "default.c";
+			mask = <0xffff>;
+		};
+	};
+
+	// Packet Ordering Engine (POE)
+	poe {	
+	
+		// Supported modes are 'enque', 'serial', 'bypass'
+		mode = "bypass";
+
+		// Each vector is 512 bit with masb indicating vc 512 and lsb indicating vc 0
+		// Format : 512-bit-vector is specified as 16 32-bit words
+		// Left most word has the vc range 511-479 right most word has vc range 31 - 0
+		// Each word has the MSB select higer vc number and LSB select lower vc num
+		distribution_vectors {
+				     dv0  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x1>;
+				     dv1  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv2  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv3  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv4  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv5  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv6  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv7  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv8  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv9  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv10 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv11 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv12 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv13 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv14 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv15 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+		};
+
+	};
+
+	complex@0 {
+		device_type = "nae-complex";
+		mode = "xaui";
+		loopback_mode = <0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <55>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		parser_sequence_fifo_sizes = <225>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+//		num_channels = <4>;
+//		rx_buffer_sizes = <240 240 240 240>;
+		num_channels = <1>;
+		rx_buffer_sizes = <944>;
+
+		// Max available descriptors are 1024  (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <150>;
+		free_desc_sizes = <2048>;
+		ucore_mask = <0xffff>;
+	};
+	complex@1 {
+		device_type = "nae-complex";
+		mode = "xaui";
+		loopback_mode = <0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <55>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		parser_sequence_fifo_sizes = <225>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+//		num_channels = <4>;
+//		rx_buffer_sizes = <240 240 240 240>;
+		num_channels = <1>;
+		rx_buffer_sizes = <944>;
+
+		// Max available descriptors are 1024  (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <150>;
+		free_desc_sizes = <2048>;
+		ucore_mask = <0xffff>;
+	};
+	complex@2 {
+		device_type = "nae-complex";
+		mode = "xaui";
+		loopback_mode = <0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <55>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		parser_sequence_fifo_sizes = <225>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+//		num_channels = <4>;
+//		rx_buffer_sizes = <240 240 240 240>;
+		num_channels = <1>;
+		rx_buffer_sizes = <944>;
+
+		// Max available descriptors are 1024  (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <150>;
+		free_desc_sizes = <2048>;
+		ucore_mask = <0xffff>;
+	};
+	complex@3 {
+		device_type = "nae-complex";
+		mode = "xaui";
+		loopback_mode = <0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <55>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		parser_sequence_fifo_sizes = <225>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+//		num_channels = <4>;
+//		rx_buffer_sizes = <240 240 240 240>;
+		num_channels = <1>;
+		rx_buffer_sizes = <944>;
+
+		// Max available descriptors are 1024  (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <150>;
+		free_desc_sizes = <2048>;
+		ucore_mask = <0xffff>;
+	};
+	complex@4 {
+		device_type = "nae-complex";
+		mode = "sgmii";
+
+		loopback_mode = <0 0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <13 13>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		num_channels = <1 1>;
+		parser_sequence_fifo_sizes = <62 62>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+		rx_buffer_sizes = <128 128>;
+				   
+
+		// Max available descriptors are 1024 (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <52 52>;
+		free_desc_sizes = <2048 2048>;
+		ucore_mask = <0xffff 0xffff>;
+	};
+};
-- 
1.9.1

