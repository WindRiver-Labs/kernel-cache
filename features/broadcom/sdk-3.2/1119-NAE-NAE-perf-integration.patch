From 65eb89c1f42adfd4953d9da744f9d5f6dd807da2 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Fri, 13 Apr 2012 13:49:02 +0530
Subject: [PATCH 1119/1532] NAE & NAE-perf integration

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/misc/netlogic/nae-perf/Makefile     |   13 -
 drivers/misc/netlogic/nae-perf/init_nae.c   |  338 -----
 drivers/misc/netlogic/nae-perf/net_common.h |  256 ----
 drivers/misc/netlogic/nae-perf/reg.h        |   40 -
 drivers/misc/netlogic/nae-perf/xlp_hw.c     |  519 --------
 drivers/misc/netlogic/nae-perf/xlp_nae.c    | 1831 ---------------------------
 drivers/misc/netlogic/nae-perf/xlp_nae.h    |  173 ---
 7 files changed, 3170 deletions(-)
 delete mode 100644 drivers/misc/netlogic/nae-perf/Makefile
 delete mode 100644 drivers/misc/netlogic/nae-perf/init_nae.c
 delete mode 100644 drivers/misc/netlogic/nae-perf/net_common.h
 delete mode 100644 drivers/misc/netlogic/nae-perf/reg.h
 delete mode 100755 drivers/misc/netlogic/nae-perf/xlp_hw.c
 delete mode 100755 drivers/misc/netlogic/nae-perf/xlp_nae.c
 delete mode 100644 drivers/misc/netlogic/nae-perf/xlp_nae.h

diff --git a/drivers/misc/netlogic/nae-perf/Makefile b/drivers/misc/netlogic/nae-perf/Makefile
deleted file mode 100644
index 3f7b127..0000000
--- a/drivers/misc/netlogic/nae-perf/Makefile
+++ /dev/null
@@ -1,13 +0,0 @@
-
-################################################################################
-
-#
-# Makefile for xlp_nae network driver
-#
-
-#EXTRA_CFLAGS := -Werror
-EXTRA_CFLAGS := -DNLM_HAL_LINUX_KERNEL -Iarch/mips/include/asm/netlogic/hal
-EXTRA_CFLAGS += -Iarch/mips/netlogic/boot
-
-obj-m 		+= nae-perf.o
-nae-perf-objs 	:= xlp_nae.o init_nae.o xlp_hw.o
diff --git a/drivers/misc/netlogic/nae-perf/init_nae.c b/drivers/misc/netlogic/nae-perf/init_nae.c
deleted file mode 100644
index c224ffd..0000000
--- a/drivers/misc/netlogic/nae-perf/init_nae.c
+++ /dev/null
@@ -1,338 +0,0 @@
-#include <linux/types.h>
-#include <linux/kernel.h>
-#include <linux/mm.h>
-#include <linux/delay.h>
-#include <linux/skbuff.h>
-#include <linux/netdevice.h>
-#include <linux/etherdevice.h>
-#include <linux/inet_lro.h>
-#include <asm/netlogic/msgring.h>
-#include <asm/netlogic/cpumask.h>
-#include <asm/netlogic/hal/nlm_hal_fmn.h>
-#include <asm/netlogic/hal/nlm_hal_nae.h>
-#include <asm/netlogic/hal/nlm_hal_xlp_dev.h>
-#include <ops.h>
-#include <asm/netlogic/xlp.h>
-#include "net_common.h"
-#include "xlp_nae.h"
-
-unsigned int cpu_2_normal_frfifo[NLM_MAX_NODES][NLM_NCPUS_PER_NODE];
-unsigned int cpu_2_jumbo_frfifo[NLM_MAX_NODES][NLM_NCPUS_PER_NODE];
-static unsigned int lnx_normal_mask;
-static unsigned int lnx_jumbo_mask;
-extern int num_descs_perq; 	
-
-struct nlm_nae_linux_shinfo {
-	int valid;
-	int rxvc;
-	int domid;
-	int mode;
-	int jumbo_enabled;
-	int node;
-	/* logical cpu to physical cpu map */
-	unsigned int lcpu_2_pcpu_map[NLM_NAE_SH_LCPU_TO_MAP_SZ];
-	/* cpu to freein fifo map */
-	unsigned int cpu_2_freeinfifo_map[NLM_NAE_SH_LCPU_TO_MAP_SZ];
-	unsigned int cpu_2_jumbo_freeinfifo_map[NLM_NAE_SH_LCPU_TO_MAP_SZ];
-};
-
-struct nlm_nae_linux_shinfo lnx_shinfo[NLM_NAE_MAX_SHARED_DOMS + 1]; //1 extra for owned domain
-
-
-/* As there is a port level fifo checkup done in NAE h/w, we need to fill up the port
- fifos ( 0, 4, 8, 12 & 16) with some dummy entries if it is not owned by linux. 
- If these owned by an app, these dummy entries need to be cleared by the app before reinitializing it
- */
-static int init_dummy_entries_for_port_fifos(int node, nlm_nae_config_ptr nae_cfg, int jumbo_enabled)
-{
-	static unsigned long long msg;
-	int __attribute__ ((unused)) mflags, code;
-	int rv = 0, vc_index, i, j, ret;
-
-	if(!nae_cfg->dummy_pktdata_addr)
-		return 0;
-
-	msg = (unsigned long long)nae_cfg->dummy_pktdata_addr & 0xffffffffffULL;
-
-	msgrng_access_enable(mflags);
-	for(i = 0; i < nae_cfg->frin_total_queue; i += 4) {
-		/* nothing to do, if it is owned by linux */
-		if((1 << i) & nae_cfg->freein_fifo_dom_mask) 
-			continue;
-
-		vc_index = i + nae_cfg->frin_queue_base;
-
-		for(j = 0; j < 4; j++) {
-			if ( (ret = nlm_hal_send_msg1(vc_index, code, msg)) & 0x7) {
-				print_fmn_send_error(__func__, ret);
-				printk("Unable to send configured free desc, check freein carving (qid=%d)\n", vc_index);
-				rv = -1;
-				goto err;
-			}
-		}
-	}
-err:
-	msgrng_access_disable(mflags);
-	return rv;
-}
-
-
-static int nlm_initialize_vfbid(int node, nlm_nae_config_ptr nae_cfg)
-{
-	int cpu =0, tblidx, i = 0;
-	uint32_t vfbid_tbl[128];
-	int start = nae_cfg->vfbtbl_sw_offset;
-	int end = start + nae_cfg->vfbtbl_sw_nentries;
-	int frin_q_base = nlm_node_cfg.nae_cfg[0]->frin_queue_base;
-	
-	/* For s/w replenishment, each nodes tx completes can send to his own node cpus only */
-	for (tblidx = start; tblidx < end ; tblidx++, cpu++) {
-		vfbid_tbl[tblidx] = (cpu * 4) + nae_cfg->fb_vc + (node * 1024);
-	}
-	nlm_config_vfbid_table(node, start, end - start, &vfbid_tbl[start]);
-	/* For h/w replenishment, each node fills up 20 entries for all other nodes
-	starting from node0's queue-id. Software should offset the hw-offset + rx-node id
-	to get the actual index 
-	 */
-	start = nae_cfg->vfbtbl_hw_offset;
-	end = start + nae_cfg->vfbtbl_hw_nentries;
-	for(tblidx = start; tblidx < end; tblidx++, i++) {
-		if(i >= NLM_NAE_MAX_FREEIN_FIFOS_PER_NODE) {
-			i = 0;
-			frin_q_base = 1024 + frin_q_base;
-		}
-		vfbid_tbl[tblidx] = frin_q_base + i;
-	}
-	nlm_config_vfbid_table(node, start, end - start, &vfbid_tbl[start]);
-
-	/* NULL FBID Should map to cpu0 to detect NAE send message errors*/
-	vfbid_tbl[127] = 0;
-	nlm_config_vfbid_table(node, 127, 1, &vfbid_tbl[127]);
-	return 0;
-}
-
-static void dump_lnx_shinfo(int node)
-{
-	int i, pos, bitoff;
-	return;
-	printk("%s(node %d) in, valid %d rxvc %d domid %d jumbo-en %d mode %d node %d\n", 
-			__FUNCTION__, node,
-			lnx_shinfo[0].valid, lnx_shinfo[0].rxvc, lnx_shinfo[0].domid,
-			lnx_shinfo[0].jumbo_enabled, lnx_shinfo[0].mode,  lnx_shinfo[0].node);
-	for(i = 0; i < NLM_NCPUS_PER_NODE; i++) {
-		pos = i / NLM_NAE_SH_LCPU_TO_MAP_SZ;
-		bitoff = (i % NLM_NAE_SH_LCPU_TO_MAP_NVALS_PER_ENTRY) * 
-			NLM_NAE_SH_LCPU_TO_MAP_SNG_VAL_SZ;
-		printk(" node %d lcpu %d pcpu %d rxfifo %d jumbo-rxfifo %d \n", 
-				node, i, (lnx_shinfo[0].lcpu_2_pcpu_map[pos] >> bitoff) & 0x1f,
-				(lnx_shinfo[0].cpu_2_freeinfifo_map[pos] >> bitoff) & 0x1f,
-				(lnx_shinfo[0].cpu_2_jumbo_freeinfifo_map[pos] >> bitoff) & 0x1f
-				);
-	}
-	for(i = 0; i < NLM_NCPUS_PER_NODE; i++) {
-		printk(" node %d cpu %d cpu2nor-fr %d cpu2jum-fr %d\n", node, i, cpu_2_normal_frfifo[node][i],
-				cpu_2_jumbo_frfifo[node][i]);
-	}
-}
-         
-
-int initialize_nae(unsigned int *phys_cpu_map, int mode, int *jumbo_enabled)
-{
-	int dom_id = 0;
-	int node = 0;
-	unsigned long __attribute__ ((unused)) mflags;
-	int i,pos, bitoff;
-	int rv = -1;
-	nlm_nae_config_ptr nae_cfg;
-
-	msgrng_access_enable(mflags);
-
-	nlm_hal_init_nae(fdt, dom_id);
-
-	for(node = 0; node < NLM_MAX_NODES; node++) {
-		nae_cfg = nlm_node_cfg.nae_cfg[node];
-		if (nae_cfg == NULL) 
-			continue;
-		
-		/* This driver works only with freein-fifo shared mode */
-		if(!nae_cfg->freein_fifo_shared) {
-			printk("%s, Error, Driver works only with freein fifo shared mode\n", __FUNCTION__);
-			goto err;
-		}
-		
-
-		for(i = 0; i <= NLM_NAE_MAX_SHARED_DOMS; i++) {
-			lnx_shinfo[i].valid = nae_cfg->shinfo[i].valid;
-			lnx_shinfo[i].rxvc = nae_cfg->shinfo[i].rxvc;
-			lnx_shinfo[i].domid = nae_cfg->shinfo[i].domid;
-			memcpy(&lnx_shinfo[i].lcpu_2_pcpu_map, nae_cfg->shinfo[i].lcpu_2_pcpu_map, 
-					sizeof(nae_cfg->shinfo[i].lcpu_2_pcpu_map));
-			memcpy(&lnx_shinfo[i].cpu_2_freeinfifo_map, nae_cfg->shinfo[i].cpu_2_freeinfifo_map, 
-					sizeof(nae_cfg->shinfo[i].cpu_2_freeinfifo_map));
-		}
-
-		lnx_normal_mask = nae_cfg->freein_fifo_dom_mask;
-
-		/* if jumbo enabled , we use half of the linux owned freein fifos for jumbo skbs */
-		if(*jumbo_enabled) {
-			int mine = 1;
-			for(i = 0; i < nae_cfg->frin_total_queue; i++) {
-				if((1 << i) & nae_cfg->freein_fifo_dom_mask) {
-					if(mine) {
-						mine = 0;
-						continue;
-					}
-					lnx_normal_mask &= (~(1 << i));
-					lnx_jumbo_mask |= (1 << i);
-					mine = 1;
-				}
-			}
-			if(lnx_jumbo_mask) {
-				nlm_hal_derive_cpu_to_freein_fifo_map(node, phys_cpu_map[node],
-					       	lnx_normal_mask, cpu_2_normal_frfifo[node]);
-				nlm_hal_derive_cpu_to_freein_fifo_map(node, phys_cpu_map[node],
-					       	lnx_jumbo_mask, cpu_2_jumbo_frfifo[node]);
-				memset(lnx_shinfo[0].cpu_2_freeinfifo_map, 0, 
-						sizeof(lnx_shinfo[0].cpu_2_freeinfifo_map));
-				for(i = 0; i < NLM_NCPUS_PER_NODE; i++) {
-					pos = i / NLM_NAE_SH_LCPU_TO_MAP_SZ;
-					bitoff = (i % NLM_NAE_SH_LCPU_TO_MAP_NVALS_PER_ENTRY) * 
-						NLM_NAE_SH_LCPU_TO_MAP_SNG_VAL_SZ;
-					lnx_shinfo[0].cpu_2_freeinfifo_map[pos] |= (cpu_2_normal_frfifo[node][i] << bitoff);
-					lnx_shinfo[0].cpu_2_jumbo_freeinfifo_map[pos] |= (cpu_2_jumbo_frfifo[node][i] << bitoff);
-				}
-			} else {
-				printk("Disabling Jumbo because of unavailability of freein-fifo\n");
-				*jumbo_enabled = 0;
-			}
-		} 
-		if(*jumbo_enabled == 0) {
-			for(i = 0; i < NLM_NCPUS_PER_NODE; i++) {
-				pos = i / NLM_NAE_SH_LCPU_TO_MAP_SZ;
-				bitoff = (i % NLM_NAE_SH_LCPU_TO_MAP_NVALS_PER_ENTRY) *
-					NLM_NAE_SH_LCPU_TO_MAP_SNG_VAL_SZ;
-				cpu_2_normal_frfifo[node][i] = (lnx_shinfo[0].cpu_2_freeinfifo_map[pos] >> bitoff) & 0x1f;
-			}
-		}
-
-		lnx_shinfo[0].mode = mode;
-		lnx_shinfo[0].jumbo_enabled = *jumbo_enabled;
-		lnx_shinfo[0].node = node;
-		if(nae_cfg->owned) {
-			nlm_hal_write_ucore_shared_mem(node, (unsigned int *)lnx_shinfo, sizeof(lnx_shinfo)/sizeof(uint32_t));
-			nlm_hal_restart_ucore(node, fdt);
-		}
-
-		dump_lnx_shinfo(node);
-	}
-
-	for(node = 0; node < NLM_MAX_NODES; node++) {
-		nae_cfg = nlm_node_cfg.nae_cfg[node];
-		if (nae_cfg == NULL) 
-			continue;
-		/* initialize my vfbid table */
-		if(!(nae_cfg->flags & VFBID_FROM_FDT))
-			nlm_initialize_vfbid(node, nae_cfg);
-		
-		if(nae_cfg->owned == 0)
-			continue;
-
-		/* Update RX_CONFIG for desc size */
-		if(*jumbo_enabled)
-			nlm_hal_init_ingress (node, (ETH_JUMBO_DATA_LEN+ETH_HLEN+ETH_FCS_LEN+SMP_CACHE_BYTES) & ~(SMP_CACHE_BYTES - 1));
-		else
-			nlm_hal_init_ingress (node, (ETH_DATA_LEN+ETH_HLEN+ETH_FCS_LEN+SMP_CACHE_BYTES) & ~(SMP_CACHE_BYTES - 1));
-
-		if(init_dummy_entries_for_port_fifos(node, nae_cfg, *jumbo_enabled) != 0)
-			goto err;
-
-	}
-	rv = 0;
-err:
-	msgrng_access_disable(mflags);
-	return rv;
-}
-
-static int nlm_replenish_per_cpu_buffer(int node, nlm_nae_config_ptr nae_cfg, int qindex, int bufcnt)
-{
-	int i, port;
-	int vc_index = 0;
-	int __attribute__ ((unused)) mflags, code;
-	struct xlp_msg msg;
-	struct sk_buff * skb;
-	int ret = 0;
-	int size = NLM_RX_ETH_BUF_SIZE;
-
-	if((1 << qindex) & lnx_jumbo_mask)
-		size = NLM_RX_JUMBO_BUF_SIZE;
-
-	/* For queue index 16 and 17, we still use  the port level descriptor info */
-	if(qindex >= 16) {
-		for(port = 0; port < nae_cfg->num_ports; port++) {
-			if(nae_cfg->ports[port].hw_port_id == qindex)
-				bufcnt = nae_cfg->ports[port].num_free_desc;
-	 	}
-	}
-
-	for(i = 0; i < bufcnt; i++)
-	{
-		vc_index = qindex + nae_cfg->frin_queue_base;
-		skb = nlm_xlp_alloc_skb_atomic(size);
-		if(!skb)
-		{
-			printk("[%s] alloc skb failed\n",__FUNCTION__);
-			break;
-		}
-		/* Store skb in back_ptr */
-		mac_put_skb_back_ptr(skb);
-		code = 0;
-
-		/* Send the free Rx desc to the MAC */
-		msgrng_access_enable(mflags);
-		msg.entry[0] = (unsigned long long)virt_to_bus(skb->data) & 0xffffffffffULL;
-		msg.entry[1]= msg.entry[2] = msg.entry[3] = 0;
-		/* Send the packet to nae rx  */
-		__sync();
-
-		if ( (ret = nlm_hal_send_msg1(vc_index, code, msg.entry[0])) & 0x7)
-		{
-			print_fmn_send_error(__func__, ret);
-			printk("Unable to send configured free desc, check freein carving (qid=%d)\n", vc_index);
-			/* free the buffer and return! */
-			dev_kfree_skb_any(skb);
-
-			msgrng_access_disable(mflags);
-			ret = -EBUSY;
-			break;
-		}
-		msgrng_access_disable(mflags);
-	}
-	printk("Send %d descriptors for queue %d(vc %d) of length %d\n", bufcnt, qindex, vc_index, size);
-	return ret;
-}
-
-
-int replenish_freein_fifos(void)
-{
-	int node, i, rv;
-	nlm_nae_config_ptr nae_cfg;
-	int max_descs_pqueue, num_descs;
-
-	for(node = 0; node < NLM_MAX_NODES; node++) {
-		nae_cfg = nlm_node_cfg.nae_cfg[node];
-		if (nae_cfg == NULL) 
-			continue;
-
-		/* configure the descs */
-		max_descs_pqueue = nae_cfg->freein_fifo_onchip_num_descs +  nae_cfg->freein_fifo_spill_num_descs;
-		num_descs = num_descs_perq <= max_descs_pqueue ? num_descs_perq : max_descs_pqueue;
-
-		for(i = 0; i < nae_cfg->frin_total_queue; i++) {
-			if(((1 << i) & lnx_normal_mask) || ((1 << i) & lnx_jumbo_mask)) 
-				rv = nlm_replenish_per_cpu_buffer(node, nae_cfg, i, num_descs);
-		}
-		if(rv != 0)
-			break;
-	}
-	return rv;
-}
diff --git a/drivers/misc/netlogic/nae-perf/net_common.h b/drivers/misc/netlogic/nae-perf/net_common.h
deleted file mode 100644
index d14131f..0000000
--- a/drivers/misc/netlogic/nae-perf/net_common.h
+++ /dev/null
@@ -1,256 +0,0 @@
-#ifndef NET_COMMON_H
-#define NET_COMMON_H
-
-#include <nlm_hal_nae.h>
-
-#define MAX_FMN_CODE            -1
-#define FMN_CREDIT_DEFAULT      8
-#define FMN_POE_CREDIT_DEFAULT      9
-#define MAX_FMN_ARRAY               50
-#define SUCCESS                 0
-#define FAIL                    -1
-#define CPU0_VC                 0
-
-#define CPU_Q_ID(cpu, vid) (cpu)
-
-#define MAX_DEST_QID            50
-
-
-#if 1
-#include <asm/atomic.h>
-
-#define STATS_SET(x,v)  //atomic64_set((atomic64_t *)&(x), (v))
-#define STATS_ADD(x,v)  //atomic64_add((long)(v), (atomic64_t *)&(x))
-#define STATS_INC(x)    //atomic64_inc((atomic64_t *)&(x))
-#define STATS_READ(x)   (x)//atomic64_read((atomic64_t *)&(x))
-#else
-#define STATS_SET(x,v)  do { (x) = (v); } while (0)
-#define STATS_ADD(x,v)  do { (x) += (v); } while (0)
-#define STATS_INC(x)    do { (x) += 1; } while (0)
-#define STATS_READ(x)   (x)
-#endif
-
-#define XLP_SOC_MAC_DRIVER "XLP Mac Driver"
-
-/* On-Chip NAE PCI Header */
-#undef PCI_NETL_VENDOR
-#define PCI_NETL_VENDOR			0xfecc
-#define PCI_DEVID_BASE			0
-#define PCI_DEVID_OFF_NET		0
-
-#define MAX_GMAC_PORT               	18
-#define XLP_SGMII_RCV_CONTEXT_NUM	8
-
-
-#define  DUMP_PKT(str, x, y)	if (debug == 2)  {	\
-	int i;      					\
-        printk(" %s \n", str);                  	\
-        for(i = 0; i < y; i++)				\
-        {						\
-                printk("%02x ", (x)[i]);		\
-                if( i % 16 == 15)			\
-                        printk("\n");			\
-        }						\
-	printk("\n"); }
-
-
-#define NUM_XLP8XX_MGMT_PORTS	2
-
-#define MAX_TSO_SKB_PEND_REQS	200
-#define MAX_PACKET_SZ_PER_MSG	16384
-#define P2P_EXTRA_DESCS		((PAGE_SIZE / MAX_PACKET_SZ_PER_MSG) + 4)
-#define P2P_SKB_OFF		(MAX_SKB_FRAGS + P2P_EXTRA_DESCS - 1)
-#define tso_dbg(fmt, args...)	//printk(fmt, ##args);
-#define RX_UNCLASSIFIED_PKT 	(1<<5)
-#define RX_IP_CSUM_VALID 	(1<<3)
-#define RX_TCP_CSUM_VALID 	(1<<2)
-
-struct p2p_desc_mem {
-	void *mem;
-	uint64_t dsize;
-	uint64_t pad[6];
-};
-
-enum msc_opcodes { IP_CHKSUM = 1,
-	TCP_CHKSUM,
-	UDP_CHKSUM,
-	SCTP_CRC,
-	FCOE_CRC,
-	IP_TCP_CHKSUM,
-	TSO_IP_TCP_CHKSUM,
-	IP_UDP_CHKSUM,
-	IP_CHKSUM_SCTP_CRC
-};
-
-#define ETHER_FRAME_MIN_LEN	64
-
-/* Use index of 8 as the offset because of n64 abi and 64B cacheline size */
-#define CPU_INDEX(cpu) ((cpu) * 8)
-
-
-#define napi_dbg(fmt, args...) { }
-
-typedef struct fmn_credit_struct {
-   unsigned int   s_qid;
-   unsigned int   d_qid;
-   unsigned int   flag;
-   #define SET_UP_QUEUE         0x1
-   #define SET_UP_CREDITS       0x2
-   #define SET_UP_MULTI_DEST    0x4
-   #define SET_UP_MULTI_SRC     0x8
-   unsigned int   q_len;
-#define FMN_QLEN_USE_DEFAULT      0
-   unsigned int   credit;
-} fmn_credit_type;
-
-extern int init_gmac(unsigned int inf);
-extern int init_tx_if_credit( /*uint32_t*/__u32 credit_val, unsigned int if_bmask);
-extern int init_ucore(uint32_t ucore_mask, int if_num);
-extern void init_ingress(void);
-extern void init_egress(void);
-extern int fmn_init(const fmn_credit_type *credit);
-extern void *xlp_init_buffer( size_t size,
-			      size_t pbase ,
-			      uint64_t *vaddr_base);
-
-extern void *init_nae_free_pool(int num_queue,
-				unsigned char *pktmem ,
-				int num_bytes,
-				int num_desc);
-extern void print_netreg(void);
-
-#define DBG        1
-#ifdef DBG
-    #define log_dbg     printk
-    #define log_pkt     printk
-#else
-    #define log_dbg(...)
-    #define log_pkt(...)
-//    #define log_err(...)
-#endif
-#define log_err
-#define log_info   printk
-
-#ifdef DBG
-static __inline__ void press_key_to_continue(void) {
-	log_dbg("press <enter> to continue...\n");
-/*	getchar();*/
-}
-#else
-#define press_key_to_continue()
-#endif
-
-#define NAE_RX_ENABLE 0x1
-#define NAE_TX_ENABLE 0x1
-
-struct xlp_msg {
-	uint64_t entry[4];
-};
-
-static __inline__ void msg_print(uint32_t size, uint32_t code, uint32_t dest, struct xlp_msg *msg) {
-	int i;
-	log_dbg("  size = %u\n"
-	       "  code = %u (0x%x)\n"
-	       "  dest = %u (0x%x)\n",
-	       size, code, code, dest, dest);
-	for (i = 0; i < size && size <= 4; ++i) {
-		log_dbg("  msg.entry%d = 0x%016llx\n",
-		       i, msg->entry[i]);
-	}
-}
-
-static __inline__ void poe_print(uint64_t msg0) {
-	log_dbg("POE nextfid  = %llu (0x%llx)\n"
-	       "    nextdist = %llu (0x%llx)\n"
-	       "    nextdest = %llu (0x%llx)\n"
-	       "    msgaddr  = 0x%llx\n"
-	       "    fid      = %llu (0x%llx)\n",
-	       (msg0 >> 48) & 0xffff, (msg0 >> 48) & 0xffff,
-	       (msg0 >> 44) & 0xf, (msg0 >> 44) & 0xf,
-	       (msg0 >> 32) & 0xfff, (msg0 >> 32) & 0xfff,
-	       (msg0 >> 16) & 0xffff,
-	       (msg0) & 0xffff, (msg0) & 0xffff);
-}
-
-static __inline__ void rx_print(uint64_t msg0) {
-	log_dbg("RX  context = %llu\n"
-	       "    length  = %llu (0x%llx)\n"
-	       "    address = 0x%010llx\n"
-	       "    unclass = %llu\n"
-	       "    err     = %llu\n"
-	       "    IPcksm  = %llu\n"
-	       "    TCPcksm = %llu\n"
-	       "    prepad  = %llu\n"
-	       "    p2p     = %llu\n",
-	       (msg0 >> 54) & 0x3ff,
-	       (msg0 >> 40) & 0x3fff, (msg0 >> 40) & 0x3fff,
-	       (msg0) & 0xffffffffc0ULL,
-	       (msg0 >> 5) & 0x1,
-	       (msg0 >> 4) & 0x1,
-	       (msg0 >> 3) & 0x1,
-	       (msg0 >> 2) & 0x1,
-	       (msg0 >> 1) & 0x1,
-	       (msg0) & 0x1);
-}
-
-static __inline__ void buf_print(unsigned char *buf, unsigned long len) {
-	unsigned long i;
-	for (i = 0; i < len; ++i) {
-		log_dbg(" %02x", buf[i]);
-		if (i % 8 == 7) log_dbg(" ");
-		if (i % 32 == 31) log_dbg("\n");
-	}
-	log_dbg("\n");
-}
-
-#define CRC_LEN 4
-#define BYTE_OFFSET 2
-
-#define NULL_VFBID 127
-
-static __inline__ uint64_t nae_tx_desc(unsigned int type,
-	unsigned int rdex, unsigned int fbid, unsigned int len, uint64_t addr) {
-	return ((uint64_t)(type & 0x3) << 62) |
-	       ((uint64_t)(rdex & 0x1) << 61) |
-	       ((uint64_t)(fbid & 0x7f) << 54) |
-	       ((uint64_t)(len & 0x3fff) << 40) |
-	       (addr&0xffffffffffULL);
-}
-
-static __inline__ void tx_print(uint64_t msg0) {
-	log_dbg("TX  type    = %llu\n"
-	       "    rdex    = %llu\n"
-	       "    vfbid   = %llu\n"
-	       "    length  = %llu (0x%llx)\n"
-	       "    address = 0x%010llx\n",
-	       ((msg0 >> 62) & 0x3),
-	       ((msg0 >> 61) & 0x1),
-	       ((msg0 >> 54) & 0x7f),
-	       ((msg0 >> 40) & 0x3fff), ((msg0 >> 40) & 0x3fff),
-	       (msg0) & 0xffffffffffULL);
-}
-
-extern void *fdt;
-
-struct nae_port {
-	int  valid;
-	int  mgmt;
-        int  num_free_desc;
-        int  txq_range[2];
-        int  rxq;
-        int  hw_port_id;
-};
-
-struct nae_config {
-	int fb_vc;
-        int rx_vc;
-	int num_ports;
-	struct nae_port ports[18];
-};
-
-extern int initialize_nae(unsigned int *phys_cpu_map, int mode, int *jumbo_enabled);
-extern void nlm_xlp_msgring_int_handler(unsigned int irq, struct pt_regs *regs);
-extern int replenish_freein_fifos(void);
-
-
-#endif
diff --git a/drivers/misc/netlogic/nae-perf/reg.h b/drivers/misc/netlogic/nae-perf/reg.h
deleted file mode 100644
index d97fa53..0000000
--- a/drivers/misc/netlogic/nae-perf/reg.h
+++ /dev/null
@@ -1,40 +0,0 @@
-#ifndef REG_H
-#define REG_H
-
-// Reg info
-#define INF_MAC_CONFIG1                     0
-#define INF_MAC_CONFIG2                     1
-#define INF_NETWK_INF_CTRL_REG              0x7f
-
-#define NETIOR_MISC_REG1_ADDR       0x39
-/* BAR address          */
-
-#define NAE_BAR_ADDRESS             0
-#define NETIOR_SOFTRESET            0x3
-    //NETWORK INF CTRL REG(non of the values match PRM)
-#define SOFTRESET(x)                        (x<<11)
-#define STATS_EN(x)                         (x<<16)
-#define TX_EN(x)                            (x<<2)
-#define SPEED(x)                            (x&0x3)
-    //MAC_CONFIG1
-#define INF_SOFTRESET(x)                    (x<< 31)
-#define INF_LOOP_BACK(x)                    (x<< 8)
-#define INF_RX_ENABLE(x)                    (x<< 2)
-#define INF_TX_ENABLE(x)                    (0x1)
-    //MAC_CONFIG2
-
-#define INF_PREMBL_LEN(x)                   ((x & 0xf)<<12)
-#define INF_IFMODE(x)                       ((x & 0x3) << 8)
-#define INF_LENCHK(x)                       (((x & 0x1)) << 4)
-#define INF_PADCRCEN(x)                     ((x&0x1)<<2)
-#define INF_PADCRC(x)                       ((x&0x1)<<1)
-#define INF_FULLDUP(x)                      (x&0x1)
-#define NETIOR_MISC_REG2_ADDR               (0x3a)
-#define NAE_REG_ADDRS(r)              (NAE_BAR_ADDRESS&(0xffffff00000)|0x7<<13| ((r &0x3ff)<<2))
-#define NAE_REG_TX_CONFIG              0x11
-#define NAE_REG_TXIORCRDT_INIT         0x59
-#define TXINITIORCR(x)                 (x & 0x7ffff) << 8
-
-
-
-#endif
diff --git a/drivers/misc/netlogic/nae-perf/xlp_hw.c b/drivers/misc/netlogic/nae-perf/xlp_hw.c
deleted file mode 100755
index cee8158..0000000
--- a/drivers/misc/netlogic/nae-perf/xlp_hw.c
+++ /dev/null
@@ -1,519 +0,0 @@
-/*********************************************************************
-
-  Copyright 2003-2010 Netlogic Microsystem, Inc. ("Netlogic"). All rights
-  reserved.
-
-  Redistribution and use in source and binary forms, with or without
-  modification, are permitted provided that the following conditions
-  are met:
-
-  1. Redistributions of source code must retain the above copyright
-  notice, this list of conditions and the following disclaimer.
-  2. Redistributions in binary form must reproduce the above copyright
-  notice, this list of conditions and the following disclaimer in
-  the documentation and/or other materials provided with the
-  distribution.
-
-  THIS SOFTWARE IS PROVIDED BY Netlogic Microsystems, Inc. ``AS IS'' AND
-  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RMI OR CONTRIBUTORS BE LIABLE
-  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
-  THE POSSIBILITY OF SUCH DAMAGE.
-
-  *****************************#NLM_2#**********************************/
-
-#include <linux/types.h>
-#include <linux/module.h>
-#include <linux/kernel.h>
-#include <linux/init.h>
-
-#include <linux/netdevice.h>
-#include <linux/etherdevice.h>
-#include <linux/mii.h>
-#include <linux/inet_lro.h>
-
-#include <asm/netlogic/xlr_mac.h>
-#include <asm/netlogic/hal/nlm_hal_nae.h>
-#include "xlp_nae.h"
-
-
-#define NLM_NUM_REG_DUMP 9 /* Register 0xa0 to 0xa8 */
-#define NLM_ETHTOOL_REG_LEN (NLM_NUM_REG_DUMP * 4)
-#define PHY_STATUS_RETRIES 25000
-
-#define DRV_NAME	"xlp_nae"
-#define DRV_VERSION     "0.1"
-
-static void nlm_xlp_mac_mii_write(struct dev_data *priv, int regidx, uint16_t regval);
-static unsigned int nlm_xlp_mac_mii_read(struct dev_data *priv, int regidx);
-void nlm_xlp_mac_set_enable(struct dev_data *priv, int flag);
-static int xlp_enable_autoneg(struct net_device *dev, u32 adv);
-static int xlp_set_link_speed(struct net_device *dev, int speed, int duplex);
-
-static int xlp_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
-{
-	struct dev_data *priv = netdev_priv(dev);
-	int mii_status;
-
-	if (priv->type != SGMII_IF) {
-		cmd->supported = SUPPORTED_FIBRE|SUPPORTED_10000baseT_Full;
-		cmd->advertising = SUPPORTED_FIBRE|SUPPORTED_10000baseT_Full;
-		cmd->speed = SPEED_10000;
-		cmd->port = PORT_FIBRE;
-		cmd->duplex = DUPLEX_FULL;
-		cmd->phy_address = priv->port;
-		cmd->autoneg = AUTONEG_DISABLE;
-		cmd->maxtxpkt = 0;
-		cmd->maxrxpkt = 0;
-
-	}else{
-
-		cmd->supported = SUPPORTED_10baseT_Full |
-			SUPPORTED_10baseT_Half |
-			SUPPORTED_100baseT_Full | SUPPORTED_100baseT_Half |
-			SUPPORTED_1000baseT_Full | SUPPORTED_MII |
-			SUPPORTED_Autoneg | SUPPORTED_TP;
-
-		cmd->advertising = priv->advertising;
-
-		mii_status = nlm_xlp_mac_mii_read(priv, MII_NCONFIG);
-		priv->speed = (mii_status >> 3) & 0x03;
-
-		cmd->speed = (priv->speed == xlp_mac_speed_1000) ? SPEED_1000 :
-		(priv->speed == xlp_mac_speed_100) ? SPEED_100: SPEED_10;
-
-		cmd->duplex = (mii_status >> 5) & 0x1;
-		cmd->port = PORT_TP;
-		cmd->phy_address = priv->port;
-		cmd->transceiver = XCVR_INTERNAL;
-		cmd->autoneg = (~(mii_status >> 14)) & 0x1;
-		cmd->maxtxpkt = 0;
-		cmd->maxrxpkt = 0;
-	}
-
-	return 0;
-}
-static int xlp_enable_autoneg(struct net_device *dev, u32 adv)
-{
-	struct dev_data *priv = netdev_priv(dev);
-	int mii_status;
-	u32 adv1, adv2;
-	unsigned long flags;
-
-	spin_lock_irqsave(&priv->lock, flags);
-	nlm_xlp_mac_set_enable(priv, 0);
-	/* advertising for 10/100 Mbps */
-	adv1 = nlm_xlp_mac_mii_read(priv, MII_ADVERTISE);
-	adv1 &= ~(ADVERTISE_ALL | ADVERTISE_100BASE4);
-	/* advertising for 1000 Mbps */
-	adv2 = nlm_xlp_mac_mii_read(priv, 0x9);
-	adv2 &= ~(0x300);
-
-	if(adv & ADVERTISED_10baseT_Half)
-		adv1 |= ADVERTISE_10HALF;
-	if(adv & ADVERTISED_10baseT_Full)
-		adv1 |= ADVERTISE_10FULL;
-	if(adv & ADVERTISED_100baseT_Full)
-		adv1 |= ADVERTISE_100FULL;
-	if(adv & ADVERTISED_100baseT_Half)
-		adv1 |= ADVERTISE_100HALF;
-
-	if(adv & ADVERTISED_1000baseT_Full)
-		adv2 |= 0x200;
-	if(adv & ADVERTISED_1000baseT_Half)
-		adv2 |= 0x100;
-
-	/* Set the advertising parameters */
-	nlm_xlp_mac_mii_write(priv, MII_ADVERTISE, adv1);
-	nlm_xlp_mac_mii_write(priv, 0x9, adv2);
-
-	priv->advertising = adv1 | adv2;
-
-	mii_status = nlm_xlp_mac_mii_read(priv, MII_BMCR);
-	/* enable autoneg and force restart autoneg */
-	mii_status |= (BMCR_ANENABLE | BMCR_ANRESTART);
-	nlm_xlp_mac_mii_write(priv, MII_BMCR, mii_status);
-
-	nlm_xlp_mac_set_enable(priv, 1);
-	spin_unlock_irqrestore(&priv->lock, flags);
-
-	return 0;
-}
-
-static int xlp_set_link_speed(struct net_device *dev, int speed, int duplex)
-{
-	u32 adv;
-	int ret =0;
-
-	switch(speed) {
-		case SPEED_10:
-			if ( duplex == DUPLEX_FULL )
-				adv = ADVERTISED_10baseT_Full;
-			else
-				adv = ADVERTISED_10baseT_Half;
-			break;
-		case SPEED_100:
-			if ( duplex == DUPLEX_FULL )
-				adv = ADVERTISED_100baseT_Full;
-			else
-				adv = ADVERTISED_100baseT_Half;
-			break;
-		case SPEED_1000:
-			if ( duplex == DUPLEX_FULL )
-				adv = ADVERTISED_1000baseT_Full;
-			else
-				adv = ADVERTISED_1000baseT_Half;
-			break;
-		default:
-			ret = -EINVAL;
-			return ret;
-	}
-	ret = xlp_enable_autoneg( dev,adv);
-	return ret;
-
-}
-
-static int xlp_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
-{
-	int ret;
-	struct dev_data *priv = netdev_priv(dev);
-
-	if (priv->type != SGMII_IF) {
-		return -EIO;
-	}
-	if (cmd->autoneg == AUTONEG_ENABLE) {
-		ret = xlp_enable_autoneg(dev, cmd->advertising);
-	}else {
-		ret = xlp_set_link_speed(dev, cmd->speed, cmd->duplex);
-	}
-	return ret;
-}
-
-static void xlp_get_drvinfo(struct net_device *dev,
-				struct ethtool_drvinfo *info)
-{
-	strcpy(info->driver, DRV_NAME);
-	strcpy(info->version, DRV_VERSION);
-}
-
-static int xlp_get_regs_len(struct net_device *dev)
-{
-	return NLM_ETHTOOL_REG_LEN;
-}
-static void xlp_get_regs(struct net_device *dev,
-				struct ethtool_regs *regs, void *p)
-{
-	u32 *data = (u32 *)p;
-	int i;
-	struct dev_data *priv = netdev_priv(dev);
-	unsigned long flags;
-
-	memset((void *)data, 0, NLM_ETHTOOL_REG_LEN);
-
-	spin_lock_irqsave(&priv->lock, flags);
-	for(i=0; i <= NLM_NUM_REG_DUMP; i++)
-		*(data + i) = nlm_hal_read_mac_reg(priv->node, priv->block, priv->index,  R_TX_CONTROL + i);
-	spin_unlock_irqrestore(&priv->lock, flags);
-}
-static u32 xlp_get_msglevel(struct net_device *dev)
-{
-	return 0; //mac_debug;
-}
-static void xlp_set_msglevel(struct net_device *dev, u32 value)
-{
-//	mac_debug = value;
-}
-
-static int xlp_nway_reset(struct net_device *dev)
-{
-	struct dev_data *priv = netdev_priv(dev);
-	int mii_status;
-	unsigned long flags;
-	int ret = -EINVAL;
-
-	if (priv->type != SGMII_IF)
-		return -EIO;
-
-	spin_lock_irqsave(&priv->lock, flags);
-	mii_status = nlm_xlp_mac_mii_read(priv, MII_BMCR);
-	if(mii_status & BMCR_ANENABLE)
-	{
-		nlm_xlp_mac_mii_write(priv,
-				MII_BMCR, BMCR_ANRESTART | mii_status);
-		ret = 0;
-	}
-	spin_unlock_irqrestore(&priv->lock, flags);
-	return ret;
-}
-
-static u32 xlp_get_link(struct net_device *dev)
-{
-	struct dev_data *priv = netdev_priv(dev);
-	int mii_status;
-	unsigned long flags;
-	if (priv->type != SGMII_IF)
-		return -EIO;
-
-	spin_lock_irqsave(&priv->lock, flags);
-	mii_status = nlm_xlp_mac_mii_read(priv, MII_BMSR);
-
-	spin_unlock_irqrestore(&priv->lock, flags);
-
-	if(mii_status & BMSR_LSTATUS)
-		return 1;
-	return 0;
-}
-#define NLM_STATS_KEY_LEN  \
-		(sizeof(struct net_device_stats) / sizeof(unsigned long))
-static struct {
-	        const char string[ETH_GSTRING_LEN];
-} xlp_ethtool_stats_keys[NLM_STATS_KEY_LEN] = {
-	{ "rx_packets" },
-	{ "tx_packets" },
-	{ "rx_bytes" },
-	{ "tx_bytes" },
-	{ "rx_errors" },
-	{ "tx_errors" },
-	{ "rx_dropped" },
-	{ "tx_dropped" },
-	{ "multicast" },
-	{ "collisions" },
-	{ "rx_length_errors" },
-	{ "rx_over_errors" },
-	{ "rx_crc_errors" },
-	{ "rx_frame_errors" },
-	{ "rx_fifo_errors" },
-	{ "rx_missed_errors" },
-	{ "tx_aborted_errors" },
-	{ "tx_carrier_errors" },
-	{ "tx_fifo_errors" },
-	{ "tx_heartbeat_errors" },
-	{ "tx_window_errors" },
-	{ "rx_compressed" },
-	{ "tx_compressed" }
-};
-static int xlp_get_stats_count (struct net_device *dev)
-{
-	return NLM_STATS_KEY_LEN;
-}
-
-static void xlp_get_strings (struct net_device *dev, u32 stringset, u8 *buf)
-{
-	switch (stringset) {
-	case ETH_SS_STATS:
-		memcpy(buf, &xlp_ethtool_stats_keys,
-				sizeof(xlp_ethtool_stats_keys));
-		break;
-	default:
-		printk(KERN_WARNING "%s: Invalid stringset %d\n",
-				__func__, stringset);
-		break;
-	}
-}
-
-
-/**********************************************************************
- * xlp_get_mac_stats -  collect stats info from Mac stats register
- * @dev   -  this is per device based function
- * @stats -  net device stats structure
- **********************************************************************/
-void xlp_get_mac_stats(struct net_device *dev, struct net_device_stats *stats)
-{
-	struct dev_data *priv = netdev_priv(dev);
-	unsigned long long val;
-
-	if (priv->type == INTERLAKEN_IF)
-		return;
-
-	stats->tx_packets = nlm_hal_read_mac_reg(priv->node, priv->block, priv->index, TX_PACKET_COUNTER);
-#ifdef CONFIG_64BIT
-	val = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, 0x1f);
-	stats->tx_packets |= ( val << 32);
-#endif
-
-	stats->rx_packets = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, RX_PACKET_COUNTER);
-#ifdef CONFIG_64BIT
-	val = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, 0x1f);
-	stats->rx_packets |= ( val << 32);
-#endif
-
-	stats->tx_bytes = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, TX_BYTE_COUNTER);
-#ifdef CONFIG_64BIT
-	val = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, 0x1f);
-	stats->tx_bytes |= ( val << 32);
-#endif
-
-	stats->rx_bytes = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, RX_BYTE_COUNTER);
-#ifdef CONFIG_64BIT
-	val = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, 0x1f);
-	stats->rx_bytes |= ( val << 32);
-#endif
-
-	stats->tx_errors = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, TX_FCS_ERROR_COUNTER);
-	stats->rx_dropped = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, RX_DROP_PACKET_COUNTER);
-	stats->tx_dropped = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, TX_DROP_FRAME_COUNTER);
-
-	stats->multicast = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, RX_MULTICAST_PACKET_COUNTER);
-#ifdef CONFIG_64BIT
-	val = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, 0x1f);
-	stats->multicast |= ( val << 32);
-#endif
-
-	stats->collisions = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, TX_TOTAL_COLLISION_COUNTER);
-	stats->rx_length_errors = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, RX_FRAME_LENGTH_ERROR_COUNTER);
-	stats->rx_over_errors = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, RX_DROP_PACKET_COUNTER);
-	stats->rx_crc_errors = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, RX_FCS_ERROR_COUNTER);
-	stats->rx_frame_errors = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, RX_ALIGNMENT_ERROR_COUNTER);
-	stats->rx_fifo_errors = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index,RX_DROP_PACKET_COUNTER);
-	stats->rx_missed_errors = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index,RX_CARRIER_SENSE_ERROR_COUNTER);
-	stats->rx_errors = (stats->rx_over_errors + stats->rx_crc_errors + stats->rx_frame_errors + stats->rx_fifo_errors +stats->rx_missed_errors);
-	stats->tx_aborted_errors = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, TX_EXCESSIVE_COLLISION_PACKET_COUNTER);
-	/*
-	stats->tx_carrier_errors = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, TX_DROP_FRAME_COUNTER);
-	stats->tx_fifo_errors = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, TX_DROP_FRAME_COUNTER);
-	*/
-	return;
-}
-
-/**********************************************************************
- * xlp_get_ethtool_stats -  part of ethtool_ops member function
- * @dev   -  this is per device based function
- * @stats -  net device stats structure
- **********************************************************************/
-static void xlp_get_ethtool_stats (struct net_device *dev,
-			struct ethtool_stats *estats, u64 *stats)
-{
-	int i;
-	struct dev_data *priv = netdev_priv(dev);
-	unsigned long flags;
-	unsigned long *tmp_stats;
-
-	spin_lock_irqsave(&priv->lock, flags);
-
-	xlp_get_mac_stats(dev, &priv->stats);
-
-
-	spin_unlock_irqrestore(&priv->lock, flags);
-
-	tmp_stats = (unsigned long *)&priv->stats;
-	for(i=0; i < NLM_STATS_KEY_LEN; i++) {
-		*stats = (u64)*tmp_stats;
-		stats++;
-		tmp_stats++;
-	}
-}
-
-/**********************************************************************
- *  nlm_xlp_mac_mii_read - Read mac mii phy register
- *
- *  Input parameters:
- *  	   priv - priv structure
- *  	   phyaddr - PHY's address
- *  	   regidx = index of register to read
- *
- *  Return value:
- *  	   value read (16 bits), or 0xffffffff if an error occurred.
- ********************************************************************* */
-static unsigned int nlm_xlp_mac_mii_read(struct dev_data *priv, int regidx)
-{
-        return nlm_hal_mdio_read(priv->node, NLM_HAL_EXT_MDIO, 0, BLOCK_7, LANE_CFG, priv->phy.addr, regidx);
-}
-
-/**********************************************************************
- *  nlm_xlp_mac_mii_write -Write mac mii PHY register.
- *
- *  Input parameters:
- *  	   priv - priv structure
- *  	   regidx - register within the PHY
- *  	   regval - data to write to register
- *
- *  Return value:
- *  	   nothing
- ********************************************************************* */
-static void nlm_xlp_mac_mii_write(struct dev_data *priv, int regidx, uint16_t regval)
-{
-	nlm_hal_mdio_write(priv->node, NLM_HAL_EXT_MDIO, 0, BLOCK_7, LANE_CFG, priv->phy.addr, regidx, regval);
-	return;
-}
-
-static struct ethtool_ops xlp_ethtool_ops= {
-        .get_settings           = xlp_get_settings,
-        .set_settings           = xlp_set_settings,
-        .get_drvinfo            = xlp_get_drvinfo,
-        .get_regs_len           = xlp_get_regs_len,
-        .get_regs               = xlp_get_regs,
-        .get_msglevel           = xlp_get_msglevel,
-        .set_msglevel           = xlp_set_msglevel,
-        .nway_reset             = xlp_nway_reset,
-        .get_link               = xlp_get_link,
-        .get_strings            = xlp_get_strings,
-        .get_stats_count        = xlp_get_stats_count,
-        .get_ethtool_stats      = xlp_get_ethtool_stats,
-};
-
-void xlp_set_ethtool_ops(struct net_device *netdev)
-{
-	SET_ETHTOOL_OPS(netdev, &xlp_ethtool_ops);
-}
-
-
-/**********************************************************************
- **********************************************************************/
-void nlm_xlp_mac_set_enable(struct dev_data *priv, int flag)
-{
-	int inf;
-	uint32_t speed = 0, duplex = 0, ifmode = 0;
-	uint32_t netwk_inf = 0, mac_cfg2 = 0;
-
-
-	if ((priv->type != SGMII_IF) && (priv->type != XAUI_IF))
-		return;
-	switch(priv->type) {
-		case SGMII_IF:
-			inf = (priv->block * 4) + priv->index;
-			break;
-		case XAUI_IF:
-		case INTERLAKEN_IF:
-			inf = priv->block;
-			break;
-		default:
-			return;
-	}
-
-	if (flag) {
-		if (priv->type == SGMII_IF) {
-			if (nlm_hal_get_phy_status(priv->node, inf, &speed, &duplex)) {
-				//nlm_print("mac set enable speed %d duplex %d\n",speed, duplex);
-				ifmode = ((speed == 2) ? 2: 1);
-				nlm_hal_mac_disable(priv->node, inf, priv->type);
-			        netwk_inf  = read_gmac_reg(priv->node, inf, NETWK_INF_CTRL_REG);
-				netwk_inf &= (~(0x3));
-				write_gmac_reg(priv->node, inf , NETWK_INF_CTRL_REG, netwk_inf | speed);
-				mac_cfg2 = read_gmac_reg(priv->node, inf, MAC_CONF2);
-				mac_cfg2 &= (~((0x3 << 8) | 1));
-				write_gmac_reg(priv->node, inf , MAC_CONF2,
-					              mac_cfg2 | (ifmode << 8) | duplex);
-			}
-		}
-		nlm_hal_mac_enable(priv->node, inf, priv->type);
-	} else {
-		nlm_hal_mac_disable(priv->node, inf, priv->type);
-	}
-}
-
-int nlm_xlp_link_up(struct dev_data *priv, int phy)
-{
-        uint16_t extstatus;
-
-	if (priv->type != SGMII_IF)
-                return -EIO;
-        nlm_hal_mdio_write(priv->node, NLM_HAL_EXT_MDIO, 0, BLOCK_7, LANE_CFG, priv->phy.addr, 22, 0);
-        extstatus = nlm_hal_mdio_read(priv->node, NLM_HAL_EXT_MDIO, 0, BLOCK_7, LANE_CFG, priv->phy.addr, 17);
-        return ((extstatus & 0x0400) ? 1 : 0 );
-}
diff --git a/drivers/misc/netlogic/nae-perf/xlp_nae.c b/drivers/misc/netlogic/nae-perf/xlp_nae.c
deleted file mode 100755
index cfeee3d..0000000
--- a/drivers/misc/netlogic/nae-perf/xlp_nae.c
+++ /dev/null
@@ -1,1831 +0,0 @@
-/********************************************************************
-
-  Copyright 2003-2010 Netlogic Microsystem, Inc. ("Netlogic"). All rights
-  reserved.
-
-  Redistribution and use in source and binary forms, with or without
-  modification, are permitted provided that the following conditions
-  are met:
-
-  1. Redistributions of source code must retain the above copyright
-  notice, this list of conditions and the following disclaimer.
-  2. Redistributions in binary form must reproduce the above copyright
-  notice, this list of conditions and the following disclaimer in
-  the documentation and/or other materials provided with the
-  distribution.
-
-  THIS SOFTWARE IS PROVIDED BY Netlogic Microsystems, Inc. ``AS IS'' AND
-  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RMI OR CONTRIBUTORS BE LIABLE
-  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
-  THE POSSIBILITY OF SUCH DAMAGE.
-
-  *****************************#NLM_2#**********************************/
-
-#include <linux/types.h>
-#include <linux/module.h>
-#include <linux/moduleparam.h>
-#include <linux/kernel.h>
-#include <linux/init.h>
-#include <linux/interrupt.h>
-
-#include <linux/netdevice.h>
-#include <linux/etherdevice.h>
-#include <linux/sched.h>
-#include <linux/slab.h>
-#include <linux/fs.h>
-#include <linux/errno.h>
-#include <linux/proc_fs.h>
-#include <linux/fcntl.h>
-#include <linux/mman.h>
-#include <linux/mm.h>
-#include <linux/pci.h>
-#include <linux/kthread.h>
-#include <linux/inet_lro.h>
-
-#include <net/ip.h>
-
-#include <asm/current.h>
-#include <asm/system.h>
-#include <asm/uaccess.h>
-#include <asm/netlogic/msgring.h>
-#include <asm/netlogic/cpumask.h>
-
-#include <asm/netlogic/hal/nlm_hal_fmn.h>
-#include <asm/netlogic/hal/nlm_hal_nae.h>
-#include <asm/netlogic/xlp.h>
-#include <asm/netlogic/xlp_irq.h>
-#include <asm/netlogic/hal/nlm_eeprom.h>
-
-#include "net_common.h"
-#include "xlp_nae.h"
-
-#define NLM_TCP_MODE	1
-#define NLM_RT_MODE	2
-
-/* Applicable only in tcp mode */
-#define TSO_ENABLED 	1
-
-/*Enable sanity checks while receiving or transmitting buffer */
-#undef ENABLE_SANITY_CHECKS
-
-
-int debug = 0;
-/* Module Parameters */
-
-static int perf_mode= NLM_TCP_MODE;
-module_param(perf_mode, int, 0);
-
-static int enable_lro =  0;
-module_param(enable_lro, int, 0);
-
-static int enable_napi =  0;
-module_param(enable_napi, int, 0);
-
-int num_descs_perq = 500;
-module_param(num_descs_perq, int, 0);
-
-static int enable_jumbo = 0;
-module_param(enable_jumbo, int, 0);
-
-/***************************************************************
- *
- * Below parameters are set during FDT file parsing
- */
-
-extern uint32_t nae_rx_vc;
-extern uint32_t nae_fb_vc;
-static uint32_t napi_vc_mask;
-/***************************************************************/
-
-unsigned char eth_hw_addr[NLM_MAX_NODES][MAX_GMAC_PORT][6];
-static unsigned int phys_cpu_map[NLM_MAX_NODES];
-extern uint32_t cpu_2_normal_frfifo[NLM_MAX_NODES][NLM_NCPUS_PER_NODE];
-extern uint32_t cpu_2_jumbo_frfifo[NLM_MAX_NODES][NLM_NCPUS_PER_NODE];
-
-static uint64_t nlm_mode[NR_CPUS*8] ____cacheline_aligned;
-static struct sk_buff *last_rcvd_skb[NR_CPUS * 8] ____cacheline_aligned;
-static uint32_t last_rcvd_len[NR_CPUS * 8] ____cacheline_aligned;
-static uint32_t last_rcvd_node[NR_CPUS * 8] ____cacheline_aligned;
-static uint64_t last_rcvd_skb_phys[NR_CPUS * 8] ____cacheline_aligned;
-static uint64_t receive_count[NR_CPUS * 8] __cacheline_aligned;
-static uint64_t fast_replenish_count[NR_CPUS * 8] __cacheline_aligned;
-static uint64_t slow_replenish_count[NR_CPUS * 8] __cacheline_aligned;
-static uint64_t err_replenish_count[NR_CPUS * 8] __cacheline_aligned;
-static struct net_device *per_cpu_netdev[NLM_MAX_NODES][NR_CPUS][24] __cacheline_aligned;
-static struct pci_device_id soc_pci_table[] __devinitdata = {
-        {PCI_NETL_VENDOR, PCI_DEVID_BASE + PCI_DEVID_OFF_NET,
-         PCI_ANY_ID, PCI_ANY_ID, 0},
-        {}
-};
-static uint64_t dummy_pktdata_addr[NLM_MAX_NODES];
-static uint64_t dbg_tcp_rx_cons[NR_CPUS * 8] __cacheline_aligned;
-static uint64_t p2p_dynamic_alloc_cnt[NR_CPUS * 8] __cacheline_aligned;
-static struct p2p_desc_mem p2p_desc_mem[NR_CPUS] __cacheline_aligned;
-static struct net_device_stats *nlm_xlp_mac_get_stats(struct net_device *dev);
-static struct net_device *dev_mac[NLM_MAX_NODES][MAX_GMAC_PORT];
-
-extern void xlp_set_ethtool_ops(struct net_device *netdev);
-extern void xlp_get_mac_stats(struct net_device* dev, struct net_device_stats* stats);
-static void nlm_xlp_nae_init(void);
-static int xlp_mac_proc_read(char *page, char **start, off_t off,int count, int *eof, void *data);
-static int  nlm_xlp_nae_open (struct net_device *dev);
-static int  nlm_xlp_nae_stop (struct net_device *dev);
-static int  nlm_xlp_nae_start_xmit (struct sk_buff *skb, struct net_device *dev);
-static void  nlm_xlp_set_multicast_list (struct net_device *dev);
-static int  nlm_xlp_nae_ioctl (struct net_device *dev, struct ifreq *rq, int cmd);
-static int  nlm_xlp_nae_change_mtu(struct net_device *dev, int new_mtu);
-static void  nlm_xlp_nae_tx_timeout (struct net_device *dev);
-static void xlp_mac_setup_hwaddr(struct dev_data *priv);
-static int nlm_xlp_nae_set_hwaddr(struct net_device *dev, void *p);
-extern void nlm_xlp_mac_set_enable(struct dev_data *priv, int flag);
-extern struct proc_dir_entry *nlm_root_proc;
-extern struct eeprom_data * get_nlm_eeprom(void);
-#ifdef  ENABLE_NAE_PIC_INT
-static irqreturn_t nlm_xlp_nae_int_handler(int irq, void * dev_id);
-#endif
-
-#define Message(fmt, args...) { }
-//#define Message(fmt, args...) printk(fmt, ##args)
-
-
-static unsigned short  nlm_select_queue(struct net_device *dev, struct sk_buff *skb)
-{
-	        return (unsigned short)smp_processor_id();
-}
-
-static const struct net_device_ops nlm_xlp_nae_ops = {
-	.ndo_open			= nlm_xlp_nae_open,
-	.ndo_stop			= nlm_xlp_nae_stop,
-	.ndo_start_xmit			= nlm_xlp_nae_start_xmit,
-	.ndo_set_multicast_list		= nlm_xlp_set_multicast_list,
-	.ndo_do_ioctl			= nlm_xlp_nae_ioctl,
-	.ndo_tx_timeout 		= nlm_xlp_nae_tx_timeout,
-	.ndo_change_mtu			= nlm_xlp_nae_change_mtu,
-	.ndo_set_mac_address		= nlm_xlp_nae_set_hwaddr,
-	.ndo_get_stats 			= nlm_xlp_mac_get_stats,
-	.ndo_select_queue		= nlm_select_queue,
-};
-
-static __inline__ void cpu_halt(void)
-{
-	__asm__ volatile (".set push\n"
-			  ".set noreorder\n"
-			  "   wait\n"
-			  "1: b    1b\n"
-			  "   nop\n"
-			  ".set pop\n"
-		);
-}
-
-static void gen_mac_address(void)
-{
-	struct eeprom_data *nlm_eeprom=NULL;
-	unsigned char mac_base[6],temp,buf_write[2],buf0_read[2],buf1_read[2];
-	int if_mac_set=0,mac0_set=0, mac1_set=0;
-	int i,j;
-	buf_write[0]= MAC_MAGIC_BYTE0;
-	buf_write[1]= MAC_MAGIC_BYTE1;
-
-	memset(mac_base, '0', 6);
-	nlm_eeprom = get_nlm_eeprom();
-
-	eeprom_get_magic_bytes(nlm_eeprom,buf0_read,0);/* signature*/
-	eeprom_get_magic_bytes(nlm_eeprom,buf1_read,1);
-
-	if((buf0_read[0]==buf_write[0]) && (buf0_read[1]==buf_write[1]))/*match the signature*/
-	{
-		mac0_set=1;
-		eeprom_get_mac_addr(nlm_eeprom, mac_base,0);/* get the mac address*/
-	}
-	else if((buf1_read[0]==buf_write[0]) && (buf1_read[1]==buf_write[1]))
-	{
-		mac1_set=1;
-		eeprom_get_mac_addr(nlm_eeprom, mac_base,1);/* get the mac address*/
-	}
-
-	for(temp=0;temp<6;temp++)
-	{
-		if(mac_base[temp]!=0)
-		{
-			if_mac_set=1;
-		}
-	}
-	if( ((mac0_set | mac1_set) && if_mac_set) == 0){
-		random_ether_addr(mac_base);
-	}
-	for(i=0 ; i<NLM_MAX_NODES; i++){ /*poppulate the eth_hw_add array according to the get mac address*/
-		for(j=0;j<18;j++){
-			memcpy(eth_hw_addr[i][j], mac_base, 6);
-			mac_base[5] += 1;
-		}
-	}
-}
-
-
-
-static __inline__ struct sk_buff *mac_get_skb_back_ptr(uint64_t addr)
-{
-        uint64_t *back_ptr = (uint64_t *)(addr - SKB_BACK_PTR_SIZE);
-        /* this function should be used only for newly allocated packets. It assumes
-         * the first cacheline is for the back pointer related book keeping info
-         */
-        return (struct sk_buff *)(*back_ptr);
-}
-
-
-#define CACHELINE_ALIGNED_ADDR(addr) (((unsigned long)(addr)) & ~(CACHELINE_SIZE-1))
-
-/**********************************************************************
- * cacheline_aligned_kmalloc -  64 bits cache aligned kmalloc
- * return -  buffer address
- *
- **********************************************************************/
-static __inline__ void *cacheline_aligned_kmalloc(int size, int gfp_mask)
-{
-        void *buf = kmalloc(size + CACHELINE_SIZE, gfp_mask);
-        if (buf)
-                buf =(void*)(CACHELINE_ALIGNED_ADDR((unsigned long)buf +
-						    CACHELINE_SIZE));
-        return buf;
-}
-
-/*********************************************************************
-  * set tso enable features in the dev list
- **********************************************************************/
-static __inline__ int tso_enable(struct net_device *dev, u32 data)
-{
-	int rv;
-	rv = ethtool_op_set_tso(dev, data);
-	if(rv == 0)
-		rv = ethtool_op_set_tx_csum(dev, data);
-	if(rv == 0)
-		rv = ethtool_op_set_sg(dev, data);
-	dev->features |= NETIF_F_FRAGLIST | NETIF_F_HIGHDMA;
-	return rv;
-}
-
-static int p2p_desc_mem_init(void)
-{
-	int cpu, cnt;
-	int dsize, tsize;
-	void *buf;
-	/* MAX_SKB_FRAGS + 4.  Out of 4, 2 will be used for skb and freeback storage */
-	dsize = ((((MAX_SKB_FRAGS + P2P_EXTRA_DESCS) * sizeof(uint64_t)) + CACHELINE_SIZE - 1) & (~((CACHELINE_SIZE)-1)));
-	tsize = dsize * MAX_TSO_SKB_PEND_REQS;
-
-	printk("%s in, dsize %d tsize %d \n", __FUNCTION__, dsize, tsize);
-
-	for(cpu = 0; cpu < NR_CPUS; cpu++) {
-		buf = cacheline_aligned_kmalloc(tsize, GFP_KERNEL);
-		if (!buf)
-			return -ENOMEM;
-		p2p_desc_mem[cpu].mem = buf;
-		for(cnt = 1; cnt < MAX_TSO_SKB_PEND_REQS; cnt++) {
-			*(unsigned long *)buf = (unsigned long)(buf + dsize);
-			buf += dsize;
-			*(unsigned long *)buf = 0;
-		}
-		p2p_desc_mem[cpu].dsize = dsize;
-	}
-	return 0;
-}
-
-static inline void *alloc_p2p_desc_mem(int cpu)
-{
-	void *buf;
-	buf = p2p_desc_mem[cpu].mem;
-	if(buf) {
-		p2p_desc_mem[cpu].mem = (void *)*(unsigned long *)(buf);
-	} else {
-		buf = cacheline_aligned_kmalloc(p2p_desc_mem[cpu].dsize, GFP_KERNEL);
-		p2p_dynamic_alloc_cnt[CPU_INDEX(cpu)]++;
-	}
-	return buf;
-}
-
-static inline void free_p2p_desc_mem(int cpu, void *buf)
-{
-	*(unsigned long *)buf = (unsigned long)p2p_desc_mem[cpu].mem;
-	p2p_desc_mem[cpu].mem = buf;
-
-}
-
-static inline int create_p2p_desc(uint64_t paddr, uint64_t len, uint64_t *p2pmsg, int idx)
-{
-	int plen;
-	do {
-		plen = len >= MAX_PACKET_SZ_PER_MSG ? (MAX_PACKET_SZ_PER_MSG - 64): len;
-		p2pmsg[idx] = cpu_to_be64(nae_tx_desc(P2D_NEOP, 0, NULL_VFBID, plen, paddr));
-		len -= plen;
-		paddr += plen;
-		idx++;
-	} while(len > 0);
-	return idx;
-}
-
-static inline void create_last_p2p_desc(uint64_t *p2pmsg, struct sk_buff *skb, int idx)
-{
-	p2pmsg[idx -1 ] = cpu_to_be64(be64_to_cpu(p2pmsg[idx - 1]) | ((uint64_t)P2D_EOP << 62));
-	p2pmsg[P2P_SKB_OFF] = (uint64_t)skb;
-}
-
-uint16_t pseuodo_chksum(uint16_t *ipsrc, uint16_t proto)
-{
-	uint32_t sum = 0;
-	sum += ipsrc[0];
-	sum += ipsrc[1];
-	sum += ipsrc[2];
-	sum += ipsrc[3];
-	sum += proto;
-	while(sum >> 16)
-		sum = (sum & 0xffff)  + (sum >> 16);
-	//      sum = ~sum;
-	return (uint16_t)sum;
-}
-
-static __inline__ uint64_t nae_tso_desc0(
-		unsigned int type,
-		unsigned int subtype,
-		unsigned int opcode,
-		unsigned int l3hdroff,
-		unsigned int l4hdroff,
-		unsigned int l3chksumoff,
-		unsigned int pseudohdrchksum,
-		unsigned int l4chksumoff,
-		unsigned int pyldoff)
-{
-
-	return ((uint64_t)(type & 0x3) << 62) |
-		((uint64_t)(subtype & 3) << 60) |
-		((uint64_t)(opcode & 0xf) << 56) |
-		((uint64_t)(l3hdroff & 0x3f) << 43) |
-		((uint64_t)(l4hdroff & 0x7f) << 36) |
-		((uint64_t)(l3chksumoff & 0x1f) << 31) |
-		((uint64_t)(pseudohdrchksum & 0xffff) << 15) |
-		((uint64_t)(l4chksumoff & 0x7f) << 8) |
-		((uint64_t)(pyldoff & 0xff));
-}
-
-static __inline__ uint64_t nae_tso_desc1(
-		unsigned int type,
-		unsigned int subtype,
-		unsigned int poly,
-		unsigned int mss,
-		unsigned int crcstopoff,
-		unsigned int crcinsoff)
-{
-	return ((uint64_t)(type & 0x3) << 62) |
-		((uint64_t)(subtype & 3) << 60) |
-		((uint64_t)(poly & 0x3) << 48) |
-		((uint64_t)(mss & 0xffff) << 32) |
-		((uint64_t)(crcstopoff & 0xffff) << 16) |
-		((uint64_t)(crcinsoff & 0xffff));
-
-}
-
-#define NUM_VC_PER_THREAD 4
-#define NUM_CPU_VC	  128
-#define RX_PARSER_EN 	1
-#define RX_PPAD_EN 	0
-#define RX_PPAD_SZ	3
-static void nlm_enable_l3_l4_parser(int node)
-{
-	int l2proto = 1; //ethernet
-	int port = 0, i, ipchk = 1;
-	uint32_t val = 0;
-	uint32_t naereg;
-
-	//enabling hardware parser
-	naereg = nlm_hal_read_nae_reg(node, RX_CONFIG);
-	nlm_hal_write_nae_reg(node, RX_CONFIG, (naereg | RX_PARSER_EN << 12 | RX_PPAD_EN << 13 | RX_PPAD_SZ << 22));
-	//printk("Enabling parser, reg content = %x\n", nlm_hal_read_nae_reg(node, RX_CONFIG));
-
-	/* enabling extraction of data */
-	for(i=0; i<16;i++)
-		nlm_hal_write_nae_reg(node, L2_TYPE_0 + i, l2proto);
-
-	nlm_hal_write_nae_reg(node, L3_CTABLE_MASK_0, port | 0 << 5 | 1 << 6); // l2proto and ethtype included
-
-	val = ((0 << 26) | (9 << 20) | (ipchk << 18) | (1 << 16) | (0x800));
-	nlm_hal_write_nae_reg(node, L3_CTABLE_0_0, val);
-	val =   (12 << 26) | (4 << 21) | (16 << 15) | (4 << 10); /* extract sourceip and dstip */
-	nlm_hal_write_nae_reg(node, L3_CTABLE_0_1, val);
-
-	nlm_hal_write_nae_reg(node, L4_CTABLE_0_0, 1 << 17 | 0x6); /* ip_proto = tcp */
-	val = ((0 << 21) | (2 << 17) | (2 << 11) | (2 << 7)); /* extract source and dst port*/
-	nlm_hal_write_nae_reg(node, L4_CTABLE_0_1, val);
-
-}
-
-static int lro_get_skb_hdr(struct sk_buff *skb, void **iphdr, void **tcph,
-		u64 *hdr_flags, void *priv)
-{
-	skb_reset_network_header(skb);
-	skb_set_transport_header(skb, ip_hdrlen(skb));
-
-	if(ip_hdr(skb)->protocol != 0x6)
-		return -1;
-
-	*iphdr = ip_hdr(skb);
-	*tcph = tcp_hdr(skb);
-
-	*hdr_flags = LRO_IPV4 | LRO_TCP;
-
-	return 0;
-}
-
-void lro_init(struct net_device *dev)
-{
-	struct dev_data* priv;
-	static int done = 0;
-	int cpu;
-	priv = netdev_priv(dev);
-
-#ifdef CONFIG_INET_LRO
-	if(enable_lro) {
-		printk("LRO is enabled \n");
-		dev->features |= NETIF_F_LRO;
-		for (cpu=0; cpu<NR_CPUS; cpu++) {
-			memset(&priv->lro_mgr[cpu], 0, sizeof(struct net_lro_mgr));
-			priv->lro_mgr[cpu].max_aggr = 48;
-			priv->lro_mgr[cpu].max_desc = LRO_MAX_DESCS;
-			priv->lro_mgr[cpu].get_skb_header = lro_get_skb_hdr;
-			priv->lro_mgr[cpu].features = LRO_F_NAPI;
-			priv->lro_mgr[cpu].dev = dev;
-			priv->lro_mgr[cpu].ip_summed = CHECKSUM_UNNECESSARY;
-			priv->lro_mgr[cpu].ip_summed_aggr = CHECKSUM_UNNECESSARY;
-			priv->lro_mgr[cpu].lro_arr = cacheline_aligned_kmalloc(
-					sizeof(struct net_lro_desc) * LRO_MAX_DESCS, GFP_KERNEL);
-			memset(priv->lro_mgr[cpu].lro_arr, 0, sizeof(struct net_lro_desc) * LRO_MAX_DESCS);
-		}
-	}
-#endif
-	if(!done) {
-		done = 1;
-		nlm_enable_l3_l4_parser(priv->node);
-	}
-}
-
-#if 0
-static void dump_skbuff (struct sk_buff *skb)
-{
-	int cpu = hard_smp_processor_id();
-	char buf[512];
-	int blen = 0, i, len = 64;
-	unsigned char *data = skb->data;
-
-	for(i = 0; i < len;) {
-		if(i != 0 && (i % 16 == 0))
-			blen += sprintf(&buf[blen], "\n");
-		blen += sprintf(&buf[blen], "%02x ", data[i]);
-		i++;
-	}
-	printk("data recived on cpu %d len %d = \n%s\n", cpu, len, buf);
-}
-#endif
-
-#ifdef CONFIG_NLM_NET_OPTS
-/* Get the hardware replenishment queue id */
-static int get_hw_frfifo_queue_id(int rxnode, nlm_nae_config_ptr nae_cfg, int cpu, unsigned int truesize)
-{
-	int qid;
-	int node_cpu = cpu % NLM_NCPUS_PER_NODE;
-
-	qid = cpu_2_normal_frfifo[rxnode][node_cpu];
-	if (enable_jumbo)
-	{
-		if(truesize > NLM_RX_JUMBO_BUF_SIZE) 
-			qid = cpu_2_jumbo_frfifo[rxnode][node_cpu];
-	}
-	/* all the nodes vfbtable should be filled with starting node of 0 to ending node 
-	 with 20 entries each */
-	return nae_cfg->vfbtbl_hw_offset + (rxnode * NLM_NAE_MAX_FREEIN_FIFOS_PER_NODE) + qid;
-}
-#endif
-
-static int mac_refill_frin_skb(int node, int cpu, uint64_t paddr, unsigned int bufsize)
-{
-	int ret, code, qid;
-	nlm_nae_config_ptr nae_cfg;
-	int node_cpu = cpu % NLM_NCPUS_PER_NODE;
-
-	qid = (bufsize >= NLM_RX_JUMBO_BUF_SIZE) ? cpu_2_jumbo_frfifo[node][node_cpu] : cpu_2_normal_frfifo[node][node_cpu];
-	
-	nae_cfg = nlm_node_cfg.nae_cfg[node];
-	if(nae_cfg == NULL) {
-		printk("%s Error, Invalid node id %d\n", __FUNCTION__, node);
-		return -1;
-	}
-	Message("%s in cpu %d bufsize %d node %d qid %d qbase %d\n", __FUNCTION__, cpu, bufsize, node, qid,  nae_cfg->frin_queue_base);
-
-	ret = 0;
-	qid = nae_cfg->frin_queue_base + qid;
-
-	/* Assumption: SKB is all set to go */
-	/* Send the free Rx desc to the MAC */
-	code = 0;
-
-	/* Send the packet to nae rx  */
-	for(;;) {
-	  ret = nlm_hal_send_msg1(qid, code, (paddr & 0xffffffffffULL) );
-	  if (!ret) break;
-	}
-
-	return ret;
-}
-
-static int mac_refill_frin_one_buffer(struct net_device *dev, int cpu, unsigned int truesize)
-{
-	struct dev_data* priv = netdev_priv(dev);
-	struct sk_buff * skb;
-	int buf_size = NLM_RX_ETH_BUF_SIZE;
-
-	if (enable_jumbo)
-	{
-		if(truesize > NLM_RX_JUMBO_BUF_SIZE) 
-			buf_size = NLM_RX_JUMBO_BUF_SIZE; 
-	}
-
-	skb = nlm_xlp_alloc_skb_atomic(buf_size);
-	if(!skb)
-	{
-		printk("[%s] alloc skb failed\n",__FUNCTION__);
-		panic("panic...");
-		return -ENOMEM;
-	}
-
-	skb->dev = dev;
-
-	mac_put_skb_back_ptr(skb);
-
-	return mac_refill_frin_skb(priv->node, cpu, (unsigned long long)virt_to_bus(skb->data), buf_size);
-}
-
-static int nae_proc_read(char *page, char **start, off_t off,
-			     int count, int *eof, void *data)
-{
-	int len = 0;
-	int i = 0;
-	uint64_t total_err = 0, total_fast = 0, total_slow = 0, total_recv = 0;
-
-	for(i=0; i<32; i++){
-		printk("cpu%d, recv %ld fast_repl %ld, slow_repl %ld, err_repl %ld tcprxcons %lld p2pdalloc %lld\n",i,
-			(unsigned long)receive_count[CPU_INDEX(i)],
-			(unsigned long)fast_replenish_count[CPU_INDEX(i)],
-			(unsigned long)slow_replenish_count[CPU_INDEX(i)],
-			(unsigned long)err_replenish_count[CPU_INDEX(i)],
-			dbg_tcp_rx_cons[CPU_INDEX(i)],
-			p2p_dynamic_alloc_cnt[CPU_INDEX(i)]);
-
-		total_err += err_replenish_count[CPU_INDEX(i)];
-		total_fast += fast_replenish_count[CPU_INDEX(i)];
-		total_slow += slow_replenish_count[CPU_INDEX(i)];
-		total_recv += receive_count[CPU_INDEX(i)];
-
-		dbg_tcp_rx_cons[CPU_INDEX(i)] = 0;
-		p2p_dynamic_alloc_cnt[CPU_INDEX(i)] = 0;
-		slow_replenish_count[CPU_INDEX(i)] = 0;
-		fast_replenish_count[CPU_INDEX(i)] = 0;
-		err_replenish_count[CPU_INDEX(i)] = 0;
-		receive_count[CPU_INDEX(i)] = 0;
-	}
-	/*check how many hash are empty...*/
-	printk("TOTAL_FAST_REPL %ld, TOTAL_SLOW_REPL %ld, TOTAL_ERR_REPL %ld TOTAL_RECV %ld\n",
-			(unsigned long)total_fast,
-			(unsigned long)total_slow,
-			(unsigned long)total_err,
-			(unsigned long)total_recv);
-
-	*eof = 1;
-	return len;
-}
-
-static inline void nlm_enable_msgring_intr(void)
-{
-	uint32_t val;
-	/* Need write vc into the register */
-	val =  _read_32bit_cp2_register(XLP_MSG_STATUS1_REG);
-	val |= (napi_vc_mask << 16);
-	_write_32bit_cp2_register(XLP_MSG_STATUS1_REG, val);
-
-}
-
-/*
- * NAE poll function on upper four buckets
-*/
-static void
-xlp_poll_upper(int cpu)
-{
-	unsigned int status;
-	uint64_t msg0 = 0, addr;
-	uint32_t src_id, size, code, context, port, node;
-	struct sk_buff* skb;
-	struct dev_data *priv;
-#ifdef TSO_ENABLED
-	uint64_t *p2pfbdesc;
-#endif
-
-	while (1) {
-			status = xlp_message_receive_1(nae_fb_vc, &src_id, &size, &code, &msg0);
-
-			if(status) break;
-			__sync();
-
-			Message("poll upper cpu %d src_id %d size %d\n", cpu, src_id, size);
-			/* Process Transmit Complete, addr is the skb pointer */
-			addr = msg0 & 0xffffffffffULL;
-
-			/* drop u-boot packets */
-			if ( (addr >= (192<<20)) && (addr < (256 << 20)) ){
-				printk("Dropping firmware TXC packet (addr=%llx)!\n", addr);
-				return;
-			}
-
-			/* context field is currently unused */
-			context = (msg0 >> 40) & 0x3fff;
-			node = (src_id >> 10) & 0x3;
-			port = *(cntx2port[node] + context);
-
-#ifdef TSO_ENABLED
-			if(nlm_mode[CPU_INDEX(cpu)] == NLM_TCP_MODE){
-				p2pfbdesc = bus_to_virt(addr);
-				skb = (struct sk_buff *)(p2pfbdesc[P2P_SKB_OFF]);
-				free_p2p_desc_mem(cpu, p2pfbdesc);
-			} else
-#endif
-				skb = (struct sk_buff *)bus_to_virt(addr);
-
-			if(skb)
-			{
-				priv = netdev_priv(skb->dev);
-				if (debug) {
-					printk("[%s][TXC] addr=%llx, skb=%p, context=%d, port=%d\n",
-								__func__, addr, skb, context, port);
-				}
-				dev_kfree_skb_any(skb);
-				//priv->cpu_stats[cpu].txc_packets++;
-			}
-			else {
-				printk("[%s]: [txc] Null skb? paddr = %llx (halting cpu!)\n", __func__, addr);
-				cpu_halt();
-			}
-	} /* closing while (1) */
-}
-
-/*
- * NAE poll function on lower four buckets
- */
-static int xlp_poll_lower(int budget, int cpu)
-{
-	int err ;
-	int status;
-	uint64_t msg0, msg1;
-	int no_rx_pkt_rcvd = 0;
-	uint64_t addr;
-	uint32_t len, context;
-	int port, node;
-	struct net_device *pdev;
-	struct dev_data *priv = NULL;
-	uint64_t vaddr;
-	struct sk_buff* skb;
-	uint32_t src_id, size, code, truesize;
-
-#ifdef CONFIG_INET_LRO
-	int lro_flush_priv_cnt = 0, i;
-	char lro_flush_needed[20] = { 0 };
-	struct dev_data *lro_flush_priv[20];
-#endif
-	while (budget--) {
-
-		status = xlp_message_receive_2(nae_rx_vc, &src_id, &size, &code, &msg0, &msg1);
-
-		if(status) {
-			if(enable_napi)
-				break;
-			continue;
-		}
-
-		no_rx_pkt_rcvd++;
-#ifdef ENABLE_SANITY_CHECKS
-		if(size != 2) {
-			printk("Unexpected single entry packet in poll_lower\n");
-			continue;
-		}
-#endif
-
-		err = (msg1 >> 4) & 0x1;
-
-		/* Rx packet */
-		addr	= msg1 & 0xffffffffc0ULL;
-		len	= (msg1 >> 40) & 0x3fff;
-		context = (msg1 >> 54) & 0x3ff;
-		node = (src_id >> 10) & 0x3;
-
-		Message("poll lower cpu %d src_id %d size %d len %d context %d node %d err %d\n", 
-				cpu, src_id, size, len, context, node, err);
-		if (err) {
-
-			vaddr = (uint64_t)bus_to_virt(addr);
-			skb = mac_get_skb_back_ptr(vaddr);
-			mac_refill_frin_skb(node, cpu, addr, skb->truesize);
-			/*
-			Commenting as priv is not available here
-			STATS_INC(priv->stats.rx_errors);
-			STATS_INC(priv->stats.rx_dropped);
-			*/
-			err_replenish_count[CPU_INDEX(cpu)]++;
-			continue;
-		}
-
-		if (addr == dummy_pktdata_addr[node]){
-			printk("Dropping firmware RX packet (addr=%llx)!\n", addr);
-			continue;
-		}
-		port = *(cntx2port[node] + context);
-
-#ifdef ENABLE_SANITY_CHECKS
-		if(port >= MAX_GMAC_PORT)
-		{
-			printk("[%s]: bad port=%d, context=%d\n", __func__, port, context);
-			/*TODO: Where to replenish this packet ???? Context is out of range!*/
-			continue;
-		}
-#endif
-		pdev = per_cpu_netdev[node][cpu][port];
-#ifdef ENABLE_SANITY_CHECKS
-		if(!pdev) {
-			printk("[%s]: [rx] wrong port=%d(context=%d)? pdev = NULL!\n", __func__, port, context);
-			continue;
-		}
-#endif
-		priv = netdev_priv(pdev);
-
-		vaddr = (uint64_t)bus_to_virt(addr);
-
-		len = len  - ETH_FCS_LEN;
-
-		skb = mac_get_skb_back_ptr(vaddr);
-
-#ifdef ENABLE_SANITY_CHECKS
-		if (!skb) {
-			STATS_INC(priv->stats.rx_dropped);
-			printk("[%s] Null skb? addr=%llx, vaddr=%llx, dropping it and losing one buffer!\n",
-					__func__, addr, vaddr);
-			STATS_INC(priv->stats.rx_dropped);
-			err_replenish_count[CPU_INDEX(cpu)]++;
-			continue;
-		}
-#endif
-
-		skb->dev = pdev;
-		skb_put(skb, len);
-		skb->protocol = eth_type_trans(skb, pdev);
-
-		/* We use jumbo rx buffers if the ethernet type is not ip, see perf_nae ucore file */
-		truesize = skb->truesize;
-		if(skb->protocol != htons(ETH_P_IP))
-			truesize = NLM_RX_JUMBO_BUF_SIZE + sizeof(struct sk_buff);
-
-		/* Pass the packet to Network stack */
-		last_rcvd_skb[CPU_INDEX(cpu)] = skb;
-		last_rcvd_skb_phys[CPU_INDEX(cpu)] = addr;
-		last_rcvd_len[CPU_INDEX(cpu)] = len;
-		last_rcvd_node[CPU_INDEX(cpu)] = node;
-
-#ifdef CONFIG_INET_LRO
-		if((skb->dev->features & NETIF_F_LRO) &&
-				(msg1 & RX_IP_CSUM_VALID) && (msg1 & RX_TCP_CSUM_VALID)) {
-
-			skb->ip_summed = CHECKSUM_UNNECESSARY;
-			lro_receive_skb(&priv->lro_mgr[cpu], skb, (void *)msg1);
-			if(!lro_flush_needed[port]) {
-				lro_flush_priv[lro_flush_priv_cnt] = priv;
-				lro_flush_needed[port] = 1;
-				lro_flush_priv_cnt++;
-			}
-		} else
-#endif
-		{
-			netif_receive_skb(skb);
-		}
-
-		/* Update Stats */
-		STATS_ADD(priv->stats.rx_bytes, len);
-		STATS_INC(priv->stats.rx_packets);
-		//priv->cpu_stats[cpu].rx_packets++;
-		receive_count[CPU_INDEX(cpu)]++;
-
-		if (last_rcvd_skb[CPU_INDEX(cpu)]) {
-			//printk("[%s@%d]: Unwanted buffer allocation in driver data path!\n", __FILE__, __LINE__);
-			slow_replenish_count[CPU_INDEX(cpu)]++;
-			mac_refill_frin_one_buffer(pdev, cpu, truesize);
-			last_rcvd_skb[CPU_INDEX(cpu)] = NULL;
-			last_rcvd_len[CPU_INDEX(cpu)] = 0;
-		}
-	}
-
-#ifdef CONFIG_INET_LRO
-	for(i = 0; i < lro_flush_priv_cnt; i++)
-		lro_flush_all(&lro_flush_priv[i]->lro_mgr[cpu]);
-#endif
-	return no_rx_pkt_rcvd;
-}
-
-/*
- * Main NAE poll loop
- */
-
-static int xlp_nae_napi_poll(struct napi_struct *napi, int budget)
-{
-	int rx_pkts = 0;
-	int cpu = hard_smp_processor_id();
-
-	napi_dbg("%s in budget %d\n", __FUNCTION__, budget);
-
-	xlp_poll_upper(cpu);
-	rx_pkts = xlp_poll_lower(budget, cpu);
-
-	if(rx_pkts < budget) {
-		napi_complete(napi);
-
-		nlm_enable_msgring_intr();
-	}
-
-	return rx_pkts;
-}
-
-static int xlp_nae_poll(void *buf)
-{
-	//unsigned int count=0;
-	int rx_pkts = 0;
-	int cpu = hard_smp_processor_id();
-	int budget = 96;
-
-	if(perf_mode == NLM_RT_MODE)
-		budget = 300000;
-
-	while (1) {
-
-		local_bh_disable();
-		xlp_poll_upper(cpu);
-		rx_pkts = xlp_poll_lower(budget, cpu);
-		local_bh_enable();
-
-
-		schedule();
-	}
-	return 0;
-}
-
-void nlm_spawn_kthread(void)
-{
-    unsigned int i = 0, nr_cpus;
-    char buf[20];
-    static struct task_struct *task[NR_CPUS];
-
-    nr_cpus = nlm_node_cfg.num_nodes * NLM_NCPUS_PER_NODE;	
-    /*Spawn kthread*/
-    for(i=0; i<nr_cpus; i++){
-	if(!cpu_isset(i, cpu_present_map))
-		continue;
-        sprintf(buf,"nae_task_%d",i);
-        task[i] = kthread_create(xlp_nae_poll, (void *)(long)i, (void *)&buf);
-        if(!task[i])
-            break;
-    }
-    if(i == nr_cpus){
-        for(i=0; i<nr_cpus; i++){
-	    if(!cpu_isset(i, cpu_present_map))
-		    continue;
-            kthread_bind(task[i], i);
-            wake_up_process(task[i]);
-        }
-    }
-
-}
-
-
-/*
- * Setup XLP NAPI subsystem
- */
-static int napi_weight = 300;
-/* XLP_NAPI global data strucutre */
-struct net_device xlp_napi_dummy_dev;
-DEFINE_PER_CPU(struct napi_struct, xlp_napi_poll_struct);
-
-/* XLR NAPI per CPU packet counter */
-DEFINE_PER_CPU(unsigned long long, xlp_napi_rx_count);
-
-
-static void napi_msgint_handler(int vc)
-{
-	struct napi_struct *napi;
-
-	napi_dbg("%s in vc %d cpu %d\n", __FUNCTION__, vc, hard_smp_processor_id());
-
-	napi = &__get_cpu_var(xlp_napi_poll_struct);
-	napi_schedule(napi);
-}
-
-extern int nlm_xlp_register_vc_handler(int nae_rx_vc, void (*napi_msgint_handler)(int));
-
-static int nlm_xlp_napi_setup(void)
-{
-	int i, cpu_count;
-	struct napi_struct *napi;
-	int weight_p = napi_weight;
-
-	printk("MSGRING_NAPI: Initializing NLM NAPI subsystem\n");
-
-	init_dummy_netdev(&xlp_napi_dummy_dev);
-
-	for (cpu_count = 0; cpu_count < NR_CPUS; cpu_count++)
-	{
-		napi = &per_cpu(xlp_napi_poll_struct, cpu_count);
-		memset(napi, 0, sizeof(*napi));
-		netif_napi_add(&xlp_napi_dummy_dev, napi, xlp_nae_napi_poll, weight_p);
-		napi_enable(napi);
-	}
-
-	for (i = 0; i < NR_CPUS; i++) {
-		per_cpu(xlp_napi_rx_count, i) = 0;
-	}
-
-	napi_vc_mask = (1 << nae_rx_vc) | (1 << nae_fb_vc);
-	nlm_xlp_register_vc_handler(nae_rx_vc, napi_msgint_handler);
-	nlm_xlp_register_vc_handler(nae_fb_vc, napi_msgint_handler);
-
-	return 0;
-}
-
-/**********************************************************************
- * nlm_xlp_nae_init -  xlp_nae device driver init function
- * @dev  -  this is per device based function
- *
- **********************************************************************/
-
-static void nlm_xlp_nae_init(void)
-{
-	struct net_device *dev = NULL;
-	struct dev_data *priv;
-	int i, node = 0, maxnae;
-	struct proc_dir_entry *entry;
-	int cpu = 0;
-	unsigned char *mode_str[3] = {"INVALID","TCP_PERF","ROUTE_PERF"};
-	nlm_nae_config_ptr nae_cfg;
-
-	if(!(perf_mode == NLM_TCP_MODE || perf_mode == NLM_RT_MODE)){
-		printk("Invalid perf mode passed -- Using TCP_PERF mode\n");
-		perf_mode = NLM_TCP_MODE;
-	}
-
-	printk("======= Module Parameters =========\n");
-	printk("num_descs_perq=%d perf_mode=%s enable_napi=%d enable_lro=%d enable_jumbo=%d\n",
-	       num_descs_perq, mode_str[perf_mode], enable_napi, enable_lro, enable_jumbo);
-
-	/* msgring intr may not work in [8421]xxAx parts, disabling the napi */
-	if(is_nlm_xlp8xx_ax() && enable_napi) {
-		printk("NAPI cannot be enabled on XLP Ax parts\n");
-		enable_napi = 0;
-	}
-	
-	for(i=0; i<NR_CPUS; i++)
-		nlm_mode[CPU_INDEX(i)] = perf_mode;
-
-	/*Disable interrupts for VC - 0-127*/
-	for(i=0; i<NR_CPUS; i++){
-	        if(!cpu_isset(cpu, phys_cpu_present_map))
-                        continue;
-		phys_cpu_map[i / NLM_NCPUS_PER_NODE] |= (1 << (i % NLM_NCPUS_PER_NODE));
-	}
-
-	if(perf_mode == NLM_TCP_MODE)
-		p2p_desc_mem_init();
-
-	gen_mac_address();
-
-	if (initialize_nae(phys_cpu_map, perf_mode, &enable_jumbo))
-		return;
-
-	maxnae = nlm_node_cfg.num_nodes;	
-	for(node = 0; node < maxnae; node++) {
-		nae_cfg = nlm_node_cfg.nae_cfg[node];
-		if (nae_cfg == NULL)
-			continue;
-
-		for(i = 0; i < nae_cfg->num_ports; i++)
-		{
-			/* Register only valid ports which are management */
-			if (!nae_cfg->ports[i].valid)
-				continue;
-
-			dev = alloc_etherdev_mq(sizeof(struct dev_data), maxnae * NLM_NCPUS_PER_NODE);
-			if(!dev)
-				return;
-
-			ether_setup(dev);
-			dev->tx_queue_len = 0;	/* routing gives good performance with tx_queue_len = 0; */
-
-			priv = netdev_priv(dev);
-			spin_lock_init(&priv->lock);
-			priv->dev 	= dev;
-			dev->netdev_ops = &nlm_xlp_nae_ops;
-
-			/* set ethtool_ops which is inside xlp_ethtool.c file*/
-			xlp_set_ethtool_ops(dev);
-
-			dev->dev_addr 	= eth_hw_addr[node][i];
-			priv->port	= i;
-			priv->hw_port_id = nae_cfg->ports[i].hw_port_id;
-
-			priv->inited	= 0;
-			priv->node 	= node;
-			priv->block	= nae_cfg->ports[i].hw_port_id / 4;
-			priv->type	= nae_cfg->ports[i].iftype;
-
-			switch(nae_cfg->ports[i].iftype) {
-				case SGMII_IF:
-					priv->index = nae_cfg->ports[i].hw_port_id & 0x3;
-					priv->phy.addr = nae_cfg->ports[i].hw_port_id;
-					break;
-				case XAUI_IF:
-					nlm_hal_write_mac_reg(priv->node, (nae_cfg->ports[i].hw_port_id / 4),
-							XGMAC, XAUI_MAX_FRAME_LEN , 0x01800600);
-					priv->index = XGMAC;
-					break;
-				case INTERLAKEN_IF:
-					priv->index = INTERLAKEN;
-					priv->phy.addr = nae_cfg->ports[i].ext_phy_addr;
-					if (nae_cfg->ports[i].hw_port_id == 0) {
-						if (dev_alloc_name(dev, "ilk0-%d") < 0)
-							printk("alloc name failed \n");
-					}
-					else {
-						if (dev_alloc_name(dev, "ilk8-%d") < 0)
-							printk("alloc name failed \n");
-					}
-					break;
-				default:
-					priv->index=0;
-					break;
-			}
-			//nlm_print("port%d hw %d block %d index %d type %d \n",i, nae_cfg->ports[i].hw_port_id,
-			//							priv->block, priv->index, priv->type);
-			priv->nae_tx_qid	= nae_cfg->ports[i].txq;
-			priv->nae_rx_qid 	= nae_cfg->ports[i].rxq;
-			dev->features 		|= NETIF_F_LLTX;
-
-			register_netdev(dev);
-
-			dev_mac[node][i] = dev;
-			xlp_mac_setup_hwaddr(priv);
-
-			dummy_pktdata_addr[node] = nae_cfg->dummy_pktdata_addr;
-
-			for(cpu = 0; cpu<NR_CPUS; cpu++){
-				per_cpu_netdev[node][cpu][i] = dev;
-			}
-
-		}
-	}
-
-	entry = create_proc_read_entry("mac_stats", 0 /* def mode */ ,
-				       nlm_root_proc /* parent */ ,
-				       xlp_mac_proc_read /* proc read function */ ,
-				       0	/* no client data */);
-	if (!entry) {
-		printk("[%s]: Unable to create proc read entry for xlp_mac!\n",
-		       __FUNCTION__);
-	}
-	entry = create_proc_read_entry("nae_stat", 0, nlm_root_proc, nae_proc_read, 0);
-	if (!entry) {
-		printk("[%s]: Unable to create proc read entry for nae_proc!\n",
-		       __FUNCTION__);
-	}
-
-	if(!enable_napi) {
-		/*spawn percpu kthread*/
-		nlm_spawn_kthread();
-	}
-
-	if(replenish_freein_fifos() != 0) {
-		printk("Replenishmemt of freein fifos failed\n");
-	}
-	return;
-}
-
-/**********************************************************************
- * nlm_xlp_nae_open -  called when bring up a device interface
- * @dev  -  this is per device based function
- *
- **********************************************************************/
-static int  nlm_xlp_nae_open (struct net_device *dev)
-{
-	struct dev_data *priv = netdev_priv(dev);
-	int i;
-	int ret = 0;
-	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
-
-	if(perf_mode == NLM_TCP_MODE) {
-#ifdef TSO_ENABLED
-		tso_enable(dev, 1);
-#endif
-		lro_init(dev);
-	}
-
-	if (priv->inited) {
-		spin_lock_irq(&priv->lock);
-		if(nae_cfg->owned)
-			nlm_xlp_mac_set_enable(priv, 1);
-		netif_tx_wake_all_queues(dev);
-		spin_unlock_irq(&priv->lock);
-		return 0;
-	}
-
-#ifdef ENABLE_NAE_PIC_INT
-	{
-		int port = priv->port;
-		irq  = irt_irq_table[PIC_IRT_NA_INDEX(port)][0];
-		if(request_irq( irq, nlm_xlp_nae_int_handler, IRQF_SHARED,dev->name, dev)){
-			ret = -EBUSY;
-			printk("can't get mac interrupt line (%d)\n",dev->irq);
-		}
-		dump_irt_entry(PIC_IRT_NA_INDEX(port));
-	}
-#endif
-
-	netif_tx_start_all_queues(dev);
-
-	STATS_SET(priv->stats.tx_packets, 0);
-	STATS_SET(priv->stats.tx_errors, 0);
-	STATS_SET(priv->stats.tx_bytes, 0);
-	STATS_SET(priv->stats.tx_dropped, 0);
-	STATS_SET(priv->stats.rx_packets, 0);
-	STATS_SET(priv->stats.rx_errors, 0);
-	STATS_SET(priv->stats.rx_bytes, 0);
-	STATS_SET(priv->stats.rx_dropped, 0);
-	STATS_SET(priv->stats.multicast, 0);
-	STATS_SET(priv->stats.collisions, 0);
-
-	for(i = 0; i < NR_CPUS; i++)
-	{
-		priv->cpu_stats[i].tx_packets	= 0;
-		priv->cpu_stats[i].txc_packets	= 0;
-		priv->cpu_stats[i].rx_packets	= 0;
-		priv->cpu_stats[i].interrupts	= 0;
-
-	}
-
-	priv->inited = 1;
-
-	if(nae_cfg->owned)
-		nlm_xlp_mac_set_enable(priv, 1);
-
-	return ret;
-}
-
-/**********************************************************************
- * nlm_xlp_nae_stop -  called when bring down the interface
- * @dev  -  this is per device based function
- *
- **********************************************************************/
-static int  nlm_xlp_nae_stop (struct net_device *dev)
-{
-	struct dev_data *priv = netdev_priv(dev);
-	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
-
-	spin_lock_irq(&priv->lock);
-
-	if(nae_cfg->owned)
-		nlm_xlp_mac_set_enable(priv, 0);
-	priv->inited = 0;
-	netif_tx_stop_all_queues(dev);
-
-	spin_unlock_irq(&priv->lock);
-	return 0;
-}
-
-/*This macro resets first 164 (offsetof(struct sk_buff, tail))bytes of skb header.*/
-#define fast_reset_skbptrs(skb) \
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 0) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 1) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 2) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 3) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 4) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 5) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 6) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 7) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 8) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 9) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 10) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 11) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 12) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 13) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 14) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 15) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 16) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 17) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 18) = 0;\
-		*(uint64_t *)(unsigned long)((uint64_t *)skb + 19) = 0;\
-		*(uint32_t *)(unsigned long)((uint64_t *)skb + 20) = 0;\
-/*
- * This helper macro resets SKB data pointers for reuse
- * as free-in buffer
-*/
-#define skb_reset_ptrs(skb) \
-do { \
-	struct skb_shared_info *shinfo; \
-	\
-	shinfo = skb_shinfo(skb); \
-	\
-	\
-	/* Now reinitialize old skb, cut & paste from dev_alloc_skb */ \
-	/*memset(skb, 0, offsetof(struct sk_buff, tail));*/ \
-	fast_reset_skbptrs(skb);\
-	skb->data = skb->head;  \
-	skb_reset_tail_pointer(skb);\
-	\
-	atomic_set(&shinfo->dataref, 1); \
-	shinfo->nr_frags  = 0; \
-	shinfo->gso_size = 0; \
-	shinfo->gso_segs = 0; \
-	shinfo->gso_type = 0; \
-	shinfo->ip6_frag_id = 0; \
-	shinfo->frag_list = NULL; \
-} while (0)
-
-static inline int tso_xmit_skb(struct sk_buff *skb, struct net_device *dev)
-{
-	int mss  = 0, idx = 0, len, i ;
-	struct skb_shared_info *sp = skb_shinfo(skb);
-	struct iphdr *iph;
-	struct dev_data *priv = netdev_priv(dev);
-	uint64_t msg, mscmsg0, mscmsg1;
-	//unsigned int mflags;
-	uint64_t *p2pdesc = NULL;
-	int cpu = hard_smp_processor_id();
-	int  ret, retry_cnt = 0, qid;
-	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
-
-	p2pdesc = alloc_p2p_desc_mem(cpu);
-	if(p2pdesc == NULL) {
-		goto out_unlock;
-	}
-	tso_dbg("%s in gso_size %d nrfrags %d len %d p2pdesc %llx skb %llx headlen %d\n", __FUNCTION__,
-			sp->gso_size, sp->nr_frags, skb->len, (uint64_t)p2pdesc, (uint64_t)skb, skb_headlen(skb));
-
-
-	if (((mss = sp->gso_size) != 0) || (skb->ip_summed == CHECKSUM_PARTIAL)) {
-		u32 iphdroff, tcphdroff, pyldoff, pcsum, tcp_packet = 1;
-
-		if (skb_header_cloned(skb) &&
-				pskb_expand_head(skb, 0, 0, GFP_ATOMIC)) {
-			goto out_unlock;
-		}
-
-		iph = ip_hdr(skb);
-		iphdroff = (char *)iph - (char *)skb->data;
-		tcphdroff = iphdroff + ip_hdrlen(skb);
-		if(ip_hdr(skb)->protocol == 0x6) {
-			pyldoff = iphdroff + ip_hdrlen(skb) + sizeof(struct tcphdr) + tcp_optlen(skb);
-			pcsum = pseuodo_chksum((uint16_t *)((char *)iph + 12), 0x6);
-			tcp_hdr(skb)->check = 0;
-		} else if(ip_hdr(skb)->protocol == 0x11) {
-			pyldoff = iphdroff + ip_hdrlen(skb) + sizeof(struct udphdr);
-			pcsum = pseuodo_chksum((uint16_t *)((char *)iph + 12), 0x11);
-			udp_hdr(skb)->check = 0;
-			tcp_packet = 0;
-		} else {
-			printk("Invalid packet in %s\n", __FUNCTION__);
-			goto out_unlock;
-		}
-
-		tso_dbg("iphdroff %d tcphdroff %d pyldoff %d\n", iphdroff, tcphdroff, pyldoff);
-		if(mss) {
-			iph->check = 0;
-			iph->tot_len = 0;
-			mscmsg0 = nae_tso_desc0(MSC, 1, TSO_IP_TCP_CHKSUM,
-				iphdroff, tcphdroff, (iphdroff + 10),
-				pcsum, tcphdroff + 16, pyldoff);
-			mscmsg1 = nae_tso_desc1(MSC, 2, 0, mss, 0, 0);
-		} else if(tcp_packet) {
-			mscmsg0 = nae_tso_desc0(MSC, 0, TCP_CHKSUM,
-				iphdroff, tcphdroff, (iphdroff + 10),
-				pcsum, tcphdroff + 16, pyldoff);
-		} else {
-			mscmsg0 = nae_tso_desc0(MSC, 0, UDP_CHKSUM,
-				iphdroff, tcphdroff, (iphdroff + 10),
-				pcsum, tcphdroff + 6, pyldoff);
-		}
-
-	}
-
-	if((len = skb_headlen(skb)) != 0) {
-		idx = create_p2p_desc(virt_to_bus((char *)skb->data), len, p2pdesc, idx);
-	}
-
-	for (i = 0; i < sp->nr_frags; i++)  {
-		skb_frag_t *fp = &sp->frags[i];
-		tso_dbg("frags %d pageaddr %lx off %x size %d\n", i, (long)page_address(fp->page),
-				fp->page_offset, fp->size);
-		idx = create_p2p_desc(virt_to_bus(((char *)page_address(fp->page)) + fp->page_offset),
-				fp->size, p2pdesc, idx);
-	}
-
-	create_last_p2p_desc(p2pdesc, skb, idx);
-
-	qid = nae_cfg->vfbtbl_sw_offset + (cpu % NLM_NCPUS_PER_NODE);
-	msg = nae_tx_desc(P2P, 0, qid, idx, virt_to_bus(p2pdesc));
-
-	tso_dbg("msg0 %llx p2pdesc0 %llx p2pdesc1 %llx p2pdesc2 %llx idx %d\n",
-			msg, p2pdesc[0], p2pdesc[1], p2pdesc[2], idx);
-
-	__sync();
-retry_send:
-	if(mss)
-		ret = nlm_hal_send_msg3(priv->nae_tx_qid, 0, mscmsg0, mscmsg1, msg);
-	else if(skb->ip_summed == CHECKSUM_PARTIAL)
-		ret = nlm_hal_send_msg2(priv->nae_tx_qid, 0, mscmsg0, msg);
-	else
-		ret = nlm_hal_send_msg1(priv->nae_tx_qid, 0, msg);
-	if(ret)	{
-		xlp_poll_upper(cpu);
-		retry_cnt++;
-		if(retry_cnt >= 128) {
-			goto out_unlock;
-		}
-		goto retry_send;
-	}
-
-	dev->trans_start = jiffies;
-	STATS_ADD(priv->stats.tx_bytes, skb->len);
-	STATS_ADD(priv->stats.tx_packets, idx);
-	priv->cpu_stats[cpu].tx_packets += idx;
-
-	return NETDEV_TX_OK;
-out_unlock:
-
-	dev_kfree_skb_any(skb);
-	if(p2pdesc)
-		free_p2p_desc_mem(cpu, p2pdesc);
-	return NETDEV_TX_OK;
-}
-
-
-
-/**********************************************************************
- * nlm_xlp_nae_start_xmit -  transmit a packet from buffer
- * @dev  -  this is per device based function
- * @skb  -  data buffer to send
- **********************************************************************/
-static int nlm_xlp_nae_start_xmit(struct sk_buff *skb, struct net_device *dev)
-{
-	struct dev_data *priv = netdev_priv(dev);
-	int cpu = hard_smp_processor_id(), ret = 0;
-	uint64_t msg0, msg1;
-	int retry_count = 128;
-	volatile int hw_repl = 0;
-	int  offset, qid;
-	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
-
-
-#ifdef ENABLE_SANITY_CHECKS
-	if(!skb)
-	{
-		printk("[%s] skb is NULL\n",__FUNCTION__);
-		return -1;
-	}
-	if(skb->len == 0)
-	{
-		printk("[%s] skb empty packet\n",__FUNCTION__);
-		return -1;
-	}
-#endif
-#ifdef TSO_ENABLED
-	if(nlm_mode[CPU_INDEX(cpu)] == NLM_TCP_MODE){
-		return tso_xmit_skb(skb, dev);
-	}
-#endif
-
-#ifdef CONFIG_NLM_NET_OPTS
-	if(skb->netl_skb && (last_rcvd_skb[CPU_INDEX(cpu)] == skb->netl_skb)
-		&& !skb_shared(skb) && (last_rcvd_len[CPU_INDEX(cpu)] == skb->len)
-		&& !skb_cloned(skb) && nae_cfg->vfbtbl_hw_nentries)
-	{
-		last_rcvd_skb[CPU_INDEX(cpu)] = NULL;
-		last_rcvd_len[CPU_INDEX(cpu)] = 0;
-
-		qid = get_hw_frfifo_queue_id(last_rcvd_node[CPU_INDEX(cpu)], nae_cfg, cpu, skb->truesize);
-		msg0 = nae_tx_desc(P2D_NEOP, 0, qid,
-				0, last_rcvd_skb_phys[CPU_INDEX(cpu)]);
-		hw_repl = 1;
-
-		Message("Inside fast replensh cpu %d len %d qid %d\n", cpu, skb->len, qid);
-
-		fast_replenish_count[CPU_INDEX(cpu)]++;
-	}
-	else 
-#endif
-	{
-		qid = nae_cfg->vfbtbl_sw_offset + (cpu % NLM_NCPUS_PER_NODE);
-		msg0 = nae_tx_desc(P2D_NEOP, 0, qid, 0, virt_to_bus(skb));
-
-		Message("Inside slow replensh cpu %d len %d qid %d\n", cpu, skb->len, qid);
-	}
-	msg1 = nae_tx_desc(P2D_EOP, 0, NULL_VFBID, skb->len,
-		       virt_to_bus(skb->data));
-	if(hw_repl) {
-		/* reset the skb for next rx */
-#ifndef DRV_LOOPBACK
-		/* Leak no dsk entries! */
-		//dst_release((struct dst_entry *)skb->_skb_dst);
-		skb_dst_drop(skb);
-#endif
-		/* Reset all fields to 0, reset data pointers */
-		skb_reset_ptrs(skb);
-
-		offset = (((unsigned long)skb->data + CACHELINE_SIZE) & ~(CACHELINE_SIZE - 1));
-		skb_reserve(skb, (offset - (unsigned long)skb->data));
-
-		/*this buffer already has backptr...
-		mac_put_skb_back_ptr(skb); */
-		skb_reserve(skb, SKB_BACK_PTR_SIZE);
-	}
-
-
-retry_send:
-	ret = nlm_hal_send_msg2(priv->nae_tx_qid, 0, msg0, msg1);
-
-	if (ret)
-	{
-		retry_count--;
-		if(retry_count){
-			xlp_poll_upper(cpu);
-			goto retry_send;
-		}
-		//print_fmn_send_error(__func__, ret);
-		//printk("[%s] HACK ALERT! dropping packet(skb=%p)!\n", __func__, skb);
-		dev_kfree_skb_any(skb);
-        }
-//	dev->trans_start = jiffies;
-
-	STATS_ADD(priv->stats.tx_bytes, skb->len);
-	STATS_INC(priv->stats.tx_packets);
-//	priv->cpu_stats[cpu].tx_packets++;
-
-	return NETDEV_TX_OK;
-}
-
-/**********************************************************************
- * nlm_xlp_set_multicast_list
- *
- **********************************************************************/
-static void  nlm_xlp_set_multicast_list (struct net_device *dev)
-{
-	if (dev->flags & IFF_ALLMULTI) {
-		/*
-		 * Enable ALL multicasts.  Do this by inverting the
-		 * multicast enable bit.
-		 */
-		return;
-	}
-	return;
-}
-
-static void xlp_mac_setup_hwaddr(struct dev_data *priv)
-{
-        struct net_device *dev = priv->dev;
-
-        nlm_hal_write_mac_reg(priv->node, priv->block, priv->index, MAC_ADDR0_LO, (dev->dev_addr[5] << 24) |
-				(dev->dev_addr[4] << 16) | (dev->dev_addr[3] << 8) | (dev->dev_addr[2]));
-
-	nlm_hal_write_mac_reg(priv->node, priv->block, priv->index, MAC_ADDR0_HI, (dev->dev_addr[1] << 24) |
-				(dev->dev_addr[0] << 16));
-
-	nlm_hal_write_mac_reg(priv->node, priv->block, priv->index, MAC_ADDR0_MASK_LO, 0xFFFFFFFF);
-	nlm_hal_write_mac_reg(priv->node, priv->block, priv->index, MAC_ADDR0_MASK_HI, 0xFFFFFFFF);
-
-        nlm_hal_write_mac_reg(priv->node, priv->block, priv->index, MAC_FILTER_CONFIG, (1 << MAC_FILTER_BCAST_EN_POS) |
-						 (1 << MAC_FILTER_MCAST_EN_POS) | (1 << MAC_FILTER_ADDR0_VALID_POS) );
-
-}
-
-
-/**********************************************************************
- * nlm_xlp_nae_ioctl
- *
- **********************************************************************/
-static int  nlm_xlp_nae_ioctl (struct net_device *dev, struct ifreq *rq, int cmd)
-{
-	int rc = 0;
-	switch (cmd) {
-	default:
-		rc = -EOPNOTSUPP;
-		break;
-	}
-
-	return rc;
-}
-
-/**********************************************************************
- * nlm_xlp_nae_change_mtu
- * @dev   -  this is per device based function
- * @new_mtu -  this is new mtu to be set for the device
- **********************************************************************/
-static int nlm_xlp_nae_change_mtu(struct net_device *dev, int new_mtu)
-{
-	struct dev_data *priv = netdev_priv(dev);
-	unsigned long flags;
-	unsigned long local_mtu;
-	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
-
-	if (enable_jumbo && (new_mtu > ETH_JUMBO_DATA_LEN || new_mtu < ETH_ZLEN)) {
-		printk ("MTU should be between %d and %d\n", ETH_ZLEN, ETH_JUMBO_DATA_LEN);
-		return -EINVAL;
-	}
-
-	if (!enable_jumbo && (new_mtu > ETH_DATA_LEN || new_mtu < ETH_ZLEN)) {
-		printk ("MTU should be between %d and %d\n", ETH_ZLEN, ETH_DATA_LEN);
-		return -EINVAL;
-	}
-
-	spin_lock_irqsave(&priv->lock, flags);
-
-	local_mtu = (new_mtu+ETH_HLEN+ETH_FCS_LEN+SMP_CACHE_BYTES) & ~(SMP_CACHE_BYTES - 1);
-	if (netif_running(dev))
-	{
-		netif_tx_stop_all_queues (dev);
-		if(nae_cfg->owned)
-			nlm_xlp_mac_set_enable(priv, 0); /* Disable MAC TX/RX */
-	}
-
-	if(priv->type==SGMII_IF){
-		nlm_hal_set_sgmii_framesize(priv->node, priv->block, priv->index, local_mtu);
-	}
-	else if(priv->type==XAUI_IF){
-		nlm_hal_set_xaui_framesize(priv->node, priv->block, local_mtu, local_mtu);
-	}
-	else if(priv->type==INTERLAKEN_IF){
-		nlm_hal_set_ilk_framesize(priv->node, priv->block, priv->phy.addr, local_mtu);
-	}
-	else {
-		spin_unlock_irqrestore(&priv->lock, flags);
-		return -1;
-	}
-
-	dev->mtu = new_mtu;
-
-	if (netif_running(dev))
-	{
-		netif_tx_start_all_queues (dev);
-		if(nae_cfg->owned)
-			nlm_xlp_mac_set_enable(priv, 1);
-	}
-
-	spin_unlock_irqrestore(&priv->lock, flags);
-	return 0;
-}
-
-/**********************************************************************
- * nlm_xlp_mac_get_stats - wrap function for xlp_get_mac_stats
- * @dev   -  this is per device based function
- **********************************************************************/
-static struct net_device_stats *nlm_xlp_mac_get_stats(struct net_device *dev)
-{
-	struct dev_data *priv = netdev_priv(dev);
-	unsigned long flags;
-
-	spin_lock_irqsave(&priv->lock, flags);
-
-	xlp_get_mac_stats(dev, &priv->stats);
-
-	/* XXX update other stats here */
-	spin_unlock_irqrestore(&priv->lock, flags);
-
-	return &priv->stats;
-}
-
-/**********************************************************************
- * nlm_xlp_nae_tx_timeout -  called when transmiter timeout
- * @dev  -  this is per device based function
- *
- **********************************************************************/
-static void  nlm_xlp_nae_tx_timeout (struct net_device *dev)
-{
-	struct dev_data *priv = netdev_priv(dev);
-
-	spin_lock_irq(&priv->lock);
-
-	priv->stats.tx_errors++;
-
-	spin_unlock_irq(&priv->lock);
-
-	netif_tx_wake_all_queues(dev);
-
-	printk(KERN_WARNING "%s: Transmit timed out\n", dev->name);
-	return;
-}
-
-static int nlm_xlp_nae_set_hwaddr(struct net_device *dev, void *p)
-{
-	struct sockaddr *addr = (struct sockaddr *)p;
-	struct dev_data *priv = netdev_priv(dev);
-	int rc = 0;
-
-	rc = eth_mac_addr(dev, p);
-
-	if (rc)
-		return rc;
-
-	if (priv->type == SGMII_IF)
-	{
-	  nlm_hal_write_mac_reg(priv->node,priv->block, priv->index, MAC_ADDR0_LO,
-				(addr->sa_data[5] << 24) |
-				(addr->sa_data[4] << 16) |
-				(addr->sa_data[3] << 8) |
-				(addr->sa_data[2]));
-
-	  nlm_hal_write_mac_reg(priv->node,priv->block, priv->index, MAC_ADDR0_HI,
-				(addr->sa_data[1] << 24) |
-				(addr->sa_data[0] << 16));
-	}
-
-	return rc;
-}
-
-#ifdef ENABLE_NAE_PIC_INT
-/**********************************************************************
- * nlm_xlp_nae_int_handler -  interrupt handler
- * @irq     -  irq number
- * @dev_id  -  this device
- *
- **********************************************************************/
-static irqreturn_t nlm_xlp_nae_int_handler(int irq, void *dev_id)
-{
-        struct net_device *dev;
-        struct dev_data *priv;
-	int i;
-	int cpu = 0;
-
-	cpu = hard_smp_processor_id();
-	priv->cpu_stats[cpu].interrupts++;
-
-	if(!dev_id)
-	{
-		printk("[%s]: NULL dev_id \n", __FUNCTION__ );
-		return IRQ_HANDLED;
-	}
-	dev = (struct net_device*)dev_id;
-	priv = netdev_priv(dev);
-
-	i = find_irt_from_irq(irq);
-
-
-	return IRQ_HANDLED;
-}
-#endif
-
-/**********************************************************************
- * xlp_mac_proc_read -  proc file system read routine
- * @page     -  buffer address
- * @dev_id  -  this device
- *
- **********************************************************************/
-static int xlp_mac_proc_read(char *page, char **start, off_t off,
-			     int count, int *eof, void *data)
-{
-	int len = 0;
-	off_t begin = 0;
-	int i = 0, cpu = 0, node;
-	struct net_device *dev = 0;
-	struct dev_data *priv = 0;
-
-	for(node = 0; node < NLM_MAX_NODES; node++) {
-		for (i = 0; i < MAX_GMAC_PORT; i++) {
-
-			dev = dev_mac[node][i];
-
-			if(dev == 0) continue;
-
-			priv = netdev_priv(dev);
-
-			len += sprintf(page + len, "=============== port@%d ==================\n", i);
-
-			len += sprintf(page + len,
-					"per port@%d: %lu(rxp) %lu(rxb) %lu(txp) %lu(txb)\n",
-					i,
-					STATS_READ(priv->stats.rx_packets),
-					STATS_READ(priv->stats.rx_bytes),
-					STATS_READ(priv->stats.tx_packets),
-					STATS_READ(priv->stats.tx_bytes));
-
-			for (cpu = 0; cpu < NR_CPUS ; cpu++) {
-				unsigned long tx = priv->cpu_stats[cpu].tx_packets;
-				unsigned long txc = priv->cpu_stats[cpu].txc_packets;
-				unsigned long rx = priv->cpu_stats[cpu].rx_packets;
-				unsigned long ints = priv->cpu_stats[cpu].interrupts;
-
-				if (!tx && !txc && !rx && !ints) continue;
-
-				len += sprintf(page + len, "per cpu@%d: %lu(txp) %lu(txcp) %lu(rxp) %lu(int)\n",
-						cpu, tx, txc, rx, ints);
-			}
-		}
-	}
-
-	*eof = 1;
-
-	*start = page + (off - begin);
-	len -= (off - begin);
-	if (len > count)
-		len = count;
-	if (len < 0)
-		len = 0;
-
-	return len;
-}
-
-
-
-static int __devinit nlm_xlp_nae_pci_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
-{
-        int result = 0;
-
-        result = pci_enable_device(pdev);
-	return result;
-}
-
-/**********************************************************************
- * nlm_xlp_nae_remove - driver remove routine
- * @pdev - pci device.
- **********************************************************************/
-static void nlm_xlp_nae_remove(void)
-{
-	int i;
-	struct net_device *dev = 0;
-        struct dev_data *priv = 0;
-	int node = 0;
-
-	for(node = 0; node < NLM_MAX_NODES; node++) {
-		for (i = 0; i < MAX_GMAC_PORT; i++)
-		{
-			dev = dev_mac[node][i];
-
-			if (dev == 0) continue;
-
-			priv = netdev_priv(dev);
-			unregister_netdev(dev);
-			free_netdev(dev);
-		}
-	}
-
-	remove_proc_entry("mac_stats", nlm_root_proc /* parent dir*/ );
-
-}
-
-static struct pci_driver soc_driver = {
-	.name             = XLP_SOC_MAC_DRIVER,
-	.id_table         = soc_pci_table,
-	.probe            = nlm_xlp_nae_pci_probe,
-	.remove		  = NULL,
-};
-
-static int __init nlm_xlp_mac_init(void)
-{
-#ifndef CONFIG_NLM_NET_OPTS
-	printk("Wrong config option. Recompile linux kernel using build_linux_kernel_no_preempt command\n");
-	return -1;
-#endif
-
-	nlm_xlp_nae_init();
-
-	if(enable_napi)
-		nlm_xlp_napi_setup();
-
-	return pci_register_driver(&soc_driver);
-}
-
-static void __exit nlm_xlp_mac_exit(void)
-{
-	/* unregister mac driver */
-
-
-	nlm_xlp_nae_remove();
-
-	pci_unregister_driver(&soc_driver);
-}
-
-module_init(nlm_xlp_mac_init);
-module_exit(nlm_xlp_mac_exit);
-
-MODULE_AUTHOR("Netlogic Microsystems");
-MODULE_DESCRIPTION("Netlogic XLP SoC Network driver ");
-MODULE_LICENSE("GPL");
-MODULE_VERSION("0.1");
diff --git a/drivers/misc/netlogic/nae-perf/xlp_nae.h b/drivers/misc/netlogic/nae-perf/xlp_nae.h
deleted file mode 100644
index f0e2b32..0000000
--- a/drivers/misc/netlogic/nae-perf/xlp_nae.h
+++ /dev/null
@@ -1,173 +0,0 @@
-#ifndef _XLP_NAE_H
-#define _XLP_NAE_H
-
-#if 0
-/*
- *      IEEE 802.3 Ethernet magic constants.  The frame sizes omit the preamble
- *      and FCS/CRC (frame check sequence).
- */
-
-#define ETH_ALEN        6               /* Octets in one ethernet addr   */
-#define ETH_HLEN        14              /* Total octets in header.       */
-#define ETH_ZLEN        60              /* Min. octets in frame sans FCS */
-#define ETH_DATA_LEN    1500            /* Max. octets in payload        */
-#define ETH_FRAME_LEN   1514            /* Max. octets in frame sans FCS */
-#define ETH_FCS_LEN     4               /* Octets in the FCS             */
-#endif
-
-#define MAC_PREPAD		0
-#define BYTE_OFFSET		2
-#define ETH_JUMBO_DATA_LEN	16000
-
-#define CACHELINE_SIZE		(1ULL << 6)
-#define CACHELINE_ALIGNED(addr)	( ((addr) + (CACHELINE_SIZE-1)) & ~(CACHELINE_SIZE-1) )
-
-#define SKB_BACK_PTR_SIZE	CACHELINE_SIZE
-
-#define NLM_RX_ETH_BUF_SIZE	(ETH_DATA_LEN+ETH_HLEN+ETH_FCS_LEN+BYTE_OFFSET+MAC_PREPAD+SKB_BACK_PTR_SIZE+CACHELINE_SIZE)
-#define NLM_RX_JUMBO_BUF_SIZE	(ETH_JUMBO_DATA_LEN+ETH_HLEN+ETH_FCS_LEN+BYTE_OFFSET+MAC_PREPAD+SKB_BACK_PTR_SIZE+CACHELINE_SIZE)
-
-extern unsigned long long netlib_vaddrb;
-extern unsigned long long netlib_paddrb;
-#define INIT_VBASE( vbase, pbase) {netlib_vaddrb = vbase ; netlib_paddrb = pbase;}
-#define PHYS_TO_VIRT(paddr) 	(uint64_t)((paddr) - (netlib_paddrb) + (netlib_vaddrb))
-#define VIRT_TO_PHYS(vaddr) 	(uint64_t)((vaddr) - (netlib_vaddrb) + (netlib_paddrb))
-
-#define PADDR_BASE		0x100000ULL
-#define PADDR_SIZE		0x200000
-#define LRO_MAX_DESCS		8
-
-struct cpu_stat {
-        unsigned long tx_packets;
-        unsigned long txc_packets;
-        unsigned long rx_packets;
-        unsigned long interrupts;
-};
-
-typedef enum xlp_net_types { TYPE_XLP_GMAC = 0, TYPE_XLP_XGMAC, TYPE_XLP_XAUI, TYPE_XLP_INTERLAKEN, MAX_XLP_NET_TYPES }xlp_interface_t;
-
-typedef enum { xlp_mac_speed_10, xlp_mac_speed_100,
-               xlp_mac_speed_1000, xlp_mac_speed_rsvd
-} xlp_mac_speed_t;
-
-typedef enum { xlp_mac_duplex_auto, xlp_mac_duplex_half,
-               xlp_mac_duplex_full
-} xlp_mac_duplex_t;
-
-typedef enum { xlp_mac_fc_auto, xlp_mac_fc_disabled, xlp_mac_fc_frame,
-               xlp_mac_fc_collision, xlp_mac_fc_carrier
-} xlp_mac_fc_t;
-
-struct phy_info {
-        int addr;
-        int mode;
-        uint32_t *mii_addr;
-        uint32_t *pcs_addr;
-        uint32_t *serdes_addr;
-};
-
-struct dev_data
-{
-        struct net_device *dev;
-        struct net_device_stats stats;
-        struct cpu_stat cpu_stats[NR_CPUS];
-        struct timer_list link_timer;
-        struct napi_struct napi;
-        spinlock_t lock;
-        unsigned short port;
-	unsigned short inited;
-	unsigned short node;
-        unsigned short block;
-        unsigned short index;
-        unsigned short type;
-        struct sk_buff* skb;
-        int phy_oldlinkstat;
-        atomic64_t frin_to_be_sent;
-	atomic64_t num_replenishes;
-	atomic64_t total_frin_sent;
-        __u8 hwaddr[6];
-
-        xlp_mac_speed_t speed;  /* current speed */
-        xlp_mac_duplex_t duplex;        /* current duplex */
-        xlp_mac_fc_t flow_ctrl; /* current flow control setting */
-        int advertising;
-        struct phy_info phy;
-        int nae_rx_qid;
-        int nae_tx_qid;
-	int hw_port_id;
-	struct net_lro_mgr lro_mgr[NR_CPUS];
-	struct net_lro_desc lro_arr[NR_CPUS][LRO_MAX_DESCS];
-};
-
-static inline void prefetch_local(const void *addr)
-{
-        __asm__ __volatile__(
-        "       .set    mips4           \n"
-        "       pref    %0, (%1)        \n"
-        "       .set    mips0           \n"
-        :
-        : "i" (Pref_StoreStreamed), "r" (addr));
-}
-
-/**********************************************************************
- * nlm_xlp_alloc_skb_atomic -  Atomically allocates 64 bits cache aligned skb buffer
- * return - skb buffer address
- *
- **********************************************************************/
-static __inline__ struct sk_buff *nlm_xlp_alloc_skb_atomic(int size)
-{
-        int offset = 0;
-        struct sk_buff *skb = __dev_alloc_skb(size, GFP_ATOMIC);
-
-        if (!skb) {
-                return NULL;
-        }
-
-        /* align the data to the next cache line */
-        offset = ((unsigned long)skb->data + CACHELINE_SIZE) &
-                ~(CACHELINE_SIZE - 1);
-        skb_reserve(skb, (offset - (unsigned long)skb->data));
-#ifdef CONFIG_NLM_NET_OPTS
-        skb->netl_skb = skb;
-#endif
-        return skb;
-}
-
-static __inline__ void mac_put_skb_back_ptr(struct sk_buff *skb)
-{
-        uint64_t *back_ptr = (uint64_t *)skb->data;
-
-        /* this function should be used only for newly allocated packets. It assumes
-         * the first cacheline is for the back pointer related book keeping info
-         */
-        skb_reserve(skb, SKB_BACK_PTR_SIZE);
-        *back_ptr = (uint64_t)skb;
-}
-
-/* FMN send failure errors */
-#define MSG_DST_FC_FAIL                 0x01
-#define MSG_INFLIGHT_MSG_EX             0x02
-#define MSG_TXQ_FULL                    0x04
-
-static __inline__ void print_fmn_send_error(const char *str, uint32_t send_result)
-{
-	extern int debug;
-	if (debug < 1) return;
-
-	if(send_result & MSG_DST_FC_FAIL)
-	{
-		printk("[%s] Msg Destination flow control credit fail(send_result=%08x)\n",
-		       str, send_result);
-	}
-	else if (send_result & MSG_INFLIGHT_MSG_EX) {
-		printk("[%s] MSG_INFLIGHT_MSG_EX(send_result=%08x)\n", __func__, send_result);
-	}
-	else if (send_result & MSG_TXQ_FULL) {
-		printk("[%s] TX message Q full(send_result=%08x)\n", __func__, send_result);
-	}
-	else {
-		printk("[%s] Unknown send error type(send_result=%08x)\n", __func__, send_result);
-	}
-}
-
-#endif
-- 
1.9.1

