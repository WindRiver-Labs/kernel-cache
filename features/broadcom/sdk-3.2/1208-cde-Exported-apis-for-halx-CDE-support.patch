From 943e1627c071d6467ecc5bf61fb68343e756f071 Mon Sep 17 00:00:00 2001
From: Debayan Ghosh <debayan.ghosh@broadcom.com>
Date: Thu, 13 Mar 2014 10:15:47 +0530
Subject: [PATCH 1208/1532] cde: Exported apis for halx CDE support

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/misc/netlogic/nlm_cde/nlm_cde.c        | 76 ++++++++++++++------------
 drivers/misc/netlogic/nlm_cde/nlm_cde.h        | 16 +-----
 drivers/misc/netlogic/nlm_cde/nlm_cde_api.h    |  5 ++
 drivers/misc/netlogic/nlm_cde/nlm_cde_common.h | 47 ++++++++++++++++
 4 files changed, 95 insertions(+), 49 deletions(-)
 create mode 100644 drivers/misc/netlogic/nlm_cde/nlm_cde_common.h

diff --git a/drivers/misc/netlogic/nlm_cde/nlm_cde.c b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
index f572dd6..05c362f 100644
--- a/drivers/misc/netlogic/nlm_cde/nlm_cde.c
+++ b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
@@ -652,6 +652,12 @@ nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
 
 cmp_data_t* nlm_cde_init()
 {
+	if(cmp_data != NULL && cmp_data->src != NULL) 
+	{
+		printk("CDE already initialized. Returning\n");
+		return cmp_data;
+	}
+
 	cmp_data = (cmp_data_t *) kmalloc(sizeof(cmp_data_t), GFP_KERNEL);
 	if (!cmp_data)
 		return NULL;
@@ -756,41 +762,43 @@ int xlp_cde_open(struct inode *inode, struct file *filp)
 }
 
 
-void nlm_cde_cleanup(cmp_data_t *cmp_data)
+void nlm_cde_cleanup(cmp_data_t *t_cmp_data)
 {
-	int i;
-	if (cmp_data->src)
-		free_pages ((ulong)cmp_data->src, get_order (MAX_INPUT_BUFFER_SIZE));
-	if (cmp_data->target)
-		free_pages ((ulong)cmp_data->target, get_order (MAX_BUFFER_SIZE));
-	if (cmp_data->src_desc)
-		kfree(cmp_data->src_desc);
-	if (cmp_data->scratch)
-		kfree(cmp_data->scratch);
-	if (cmp_data->scratch_inf)
-		kfree(cmp_data->scratch_inf);
-
-	free_pages((ulong)cde_mem_start_1, get_order(cde_mem_size_1));
-	free_pages((ulong)cde_mem_start_2, get_order(cde_mem_size_2));
-	free_pages((ulong)cde_mem_start_3, get_order(cde_mem_size_3));
-	free_pages((ulong)cde_mem_start_4, get_order(cde_mem_size_4));
-	free_pages((ulong)cde_mem_start_5, get_order(cde_mem_size_5));
-
-	cmp_data->src = NULL;
-	cmp_data->target = NULL;
-	cmp_data->src_desc = NULL;
-	cmp_data->scratch = NULL;
-	cmp_data->scratch_inf = NULL;
-
-	if (cmp_data)
-		kfree(cmp_data);
-
-	for (i = 0; i < NUM_FREE_DESCRIPTORS; i++) {
-		if (page_array[i].data_array)	{
-			free_cache_aligned_mem((void*)page_array[i].data_array);
-			page_array[i].data_array = NULL;
-		}
-	}
+        int i;
+        if (t_cmp_data->src)
+                free_pages ((ulong)t_cmp_data->src, get_order (MAX_INPUT_BUFFER_SIZE));
+        if (t_cmp_data->target)
+                free_pages ((ulong)t_cmp_data->target, get_order (MAX_BUFFER_SIZE));
+        if (t_cmp_data->src_desc)
+                kfree(t_cmp_data->src_desc);
+        if (t_cmp_data->scratch)
+                kfree(t_cmp_data->scratch);
+        if (t_cmp_data->scratch_inf)
+                kfree(t_cmp_data->scratch_inf);
+
+        free_pages((ulong)cde_mem_start_1, get_order(cde_mem_size_1));
+        free_pages((ulong)cde_mem_start_2, get_order(cde_mem_size_2));
+        free_pages((ulong)cde_mem_start_3, get_order(cde_mem_size_3));
+        free_pages((ulong)cde_mem_start_4, get_order(cde_mem_size_4));
+        free_pages((ulong)cde_mem_start_5, get_order(cde_mem_size_5));
+
+        t_cmp_data->src = NULL;
+        t_cmp_data->target = NULL;
+        t_cmp_data->src_desc = NULL;
+        t_cmp_data->scratch = NULL;
+        t_cmp_data->scratch_inf = NULL;
+
+        if (t_cmp_data)
+                kfree(t_cmp_data);
+
+        for (i = 0; i < NUM_FREE_DESCRIPTORS; i++) {
+                if (page_array[i].data_array)   {
+                        free_cache_aligned_mem((void*)page_array[i].data_array);
+                        page_array[i].data_array = NULL;
+                }
+        }
+		
+	cmp_data = NULL;
 }
 
 
diff --git a/drivers/misc/netlogic/nlm_cde/nlm_cde.h b/drivers/misc/netlogic/nlm_cde/nlm_cde.h
index a35a7b6..3a4369f 100644
--- a/drivers/misc/netlogic/nlm_cde/nlm_cde.h
+++ b/drivers/misc/netlogic/nlm_cde/nlm_cde.h
@@ -29,6 +29,7 @@
 
 #ifndef _NLM_CDE_H_
 #define _NLM_CDE_H_
+#include "nlm_cde_common.h"
 
 #define NUM_VC 8
 #define NLM_CDE_VC_BASE 297
@@ -72,21 +73,6 @@ extern void *fdt;
 
 unsigned char src_gz_data[] = {"edc13101000000c2a0f54f6d085fae03"};
 
-typedef struct cmp_data_structure {
-  char *src;    // source data
-  char *target; // inflated or deflated result
-  unsigned long long *src_desc;  // source descriptors
-  unsigned long long *scratch;    // scratch page
-  unsigned long long *scratch_inf;    // scratch page
-  unsigned long long src_size;    //size of source data
-  unsigned long long target_size; // size of result
-  unsigned long long num_desc;    // number of source descriptors including scratch desc
-  short op;                       // to deflate or inflate
-  unsigned int compression_type;
-  unsigned int sof;
-  unsigned int eof;
-  unsigned int offset;
-} cmp_data_t;
 
 typedef enum {
 	CDE_READ_DONE = 0,
diff --git a/drivers/misc/netlogic/nlm_cde/nlm_cde_api.h b/drivers/misc/netlogic/nlm_cde/nlm_cde_api.h
index 7467d7c..3acc4f2 100644
--- a/drivers/misc/netlogic/nlm_cde/nlm_cde_api.h
+++ b/drivers/misc/netlogic/nlm_cde/nlm_cde_api.h
@@ -64,4 +64,9 @@ unsigned int nlm_cde_receive_response(cmp_data_t *cmp_data,
 						unsigned int count);
 void nlm_cde_cleanup(cmp_data_t *cmp_data);
 
+
+EXPORT_SYMBOL (nlm_cde_init);
+EXPORT_SYMBOL (nlm_cde_send_request);
+EXPORT_SYMBOL (nlm_cde_receive_response);
+EXPORT_SYMBOL (nlm_cde_cleanup);
 #endif
diff --git a/drivers/misc/netlogic/nlm_cde/nlm_cde_common.h b/drivers/misc/netlogic/nlm_cde/nlm_cde_common.h
new file mode 100644
index 0000000..d6b5ecb
--- /dev/null
+++ b/drivers/misc/netlogic/nlm_cde/nlm_cde_common.h
@@ -0,0 +1,47 @@
+/*-
+ ** Copyright (c) 2003-2013 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ ** #BRCM_2# */
+
+
+
+typedef struct cmp_data_structure {
+  char *src;    // source data
+  char *target; // inflated or deflated result
+  unsigned long long *src_desc;  // source descriptors
+  unsigned long long *scratch;    // scratch page
+  unsigned long long *scratch_inf;    // scratch page
+  unsigned long long src_size;    //size of source data
+  unsigned long long target_size; // size of result
+  unsigned long long num_desc;    // number of source descriptors including scratch desc
+  short op;                       // to deflate or inflate
+  unsigned int compression_type;
+  unsigned int sof;
+  unsigned int eof;
+  unsigned int offset;
+} cmp_data_t;
+
-- 
1.9.1

