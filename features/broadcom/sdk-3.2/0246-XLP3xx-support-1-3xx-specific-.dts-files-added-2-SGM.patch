From 9d1a67f5265f2e664610b317cbc7530370d00ba3 Mon Sep 17 00:00:00 2001
From: Vikas Gupta <vikasg@lnx3-234.(none)>
Date: Thu, 16 Jun 2011 20:49:43 -0700
Subject: [PATCH 0246/1532] XLP3xx support 1) 3xx specific .dts files added 2)
 SGMII support 3) NAE support 4) Backward compatibility changes

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/boot/dts/he100-linux-nae.dts  | 131 +++++++++++++++++++
 arch/mips/boot/dts/he100-linux.dts      |  78 ++++++++++++
 arch/mips/boot/dts/he100-nae-4linux.dts | 131 +++++++++++++++++++
 arch/mips/boot/dts/he100-tiny-nae.dts   | 112 ++++++++++++++++
 arch/mips/boot/dts/he100-tiny.dts       |  50 ++++++++
 arch/mips/boot/dts/helinux.dts          |   2 +-
 arch/mips/boot/dts/hybrid-nae.dts       |   2 +
 arch/mips/boot/dts/linux-he100.dts      |  78 ++++++++++++
 arch/mips/boot/dts/nae.dts              |   3 +
 arch/mips/boot/dts/perf-nae.dts         |   4 +-
 arch/mips/boot/dts/storm-linux-nae.dts  | 156 +++++++++++++++++++++++
 arch/mips/boot/dts/storm-linux.dts      |  78 ++++++++++++
 arch/mips/boot/dts/storm-nae-4linux.dts | 156 +++++++++++++++++++++++
 arch/mips/boot/dts/storm-nae.dts        | 112 ++++++++++++++++
 arch/mips/boot/dts/storm-tiny-nae.dts   | 114 +++++++++++++++++
 arch/mips/boot/dts/storm-tiny.dts       |  50 ++++++++
 arch/mips/boot/dts/xlpev-linux-nae.dts  | 219 ++++++++++++++++++++++++++++++++
 arch/mips/boot/dts/xlpev-linux.dts      |  78 ++++++++++++
 arch/mips/boot/dts/xlpev-tiny-nae.dts   |  89 +++++++++++++
 arch/mips/boot/dts/xlpev-tiny.dts       |  50 ++++++++
 20 files changed, 1691 insertions(+), 2 deletions(-)
 create mode 100644 arch/mips/boot/dts/he100-linux-nae.dts
 create mode 100644 arch/mips/boot/dts/he100-linux.dts
 create mode 100644 arch/mips/boot/dts/he100-nae-4linux.dts
 create mode 100644 arch/mips/boot/dts/he100-tiny-nae.dts
 create mode 100644 arch/mips/boot/dts/he100-tiny.dts
 create mode 100644 arch/mips/boot/dts/linux-he100.dts
 create mode 100644 arch/mips/boot/dts/storm-linux-nae.dts
 create mode 100644 arch/mips/boot/dts/storm-linux.dts
 create mode 100644 arch/mips/boot/dts/storm-nae-4linux.dts
 create mode 100644 arch/mips/boot/dts/storm-nae.dts
 create mode 100644 arch/mips/boot/dts/storm-tiny-nae.dts
 create mode 100644 arch/mips/boot/dts/storm-tiny.dts
 create mode 100644 arch/mips/boot/dts/xlpev-linux-nae.dts
 create mode 100644 arch/mips/boot/dts/xlpev-linux.dts
 create mode 100644 arch/mips/boot/dts/xlpev-tiny-nae.dts
 create mode 100644 arch/mips/boot/dts/xlpev-tiny.dts

diff --git a/arch/mips/boot/dts/he100-linux-nae.dts b/arch/mips/boot/dts/he100-linux-nae.dts
new file mode 100644
index 0000000..13b2208
--- /dev/null
+++ b/arch/mips/boot/dts/he100-linux-nae.dts
@@ -0,0 +1,131 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX NAE CFG";
+	compatible = "NETL,XLP3XX_A0";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	frequency = <250>;
+
+	// VFBID MAP: Upto 127 entries
+	// (each entry is a pair of (vfbid , dest-vc)
+	// Legal range: (vfbid (0 - 126), dest-vc (0 - 4095))
+	vfbid-map = <
+
+		     // NAE -> CPU mapping 
+		     // Freeback VC = 0
+		      0   1  1   5  2   9  3  13
+		      4  17  5  21  6  25  7  29
+		      8  33  9  37 10  41 11  45
+	 	     12  49 13  53 14  57 15  61
+
+		     // NAE -> NAE mapping 
+		     32	496 33 497 34 498 35 499
+		     36	500 37 501 38 502 39 503
+
+		     // NULL FBID Should map to cpu0 to detect NAE send message errors 
+		     127 0
+
+
+		>;
+        // FLOW Table Generation: CRC16 polynomial
+  	flow_crc_poly = <0xffff>;
+
+	ucore {
+		src@1 {
+			file = "storm-linux-default.c";
+			mask = <0xff>;
+		};
+	};
+
+	// Packet Ordering Engine (POE)
+	poe {	
+	
+		// Supported modes are 'enque', 'serial', 'bypass'
+		mode = "bypass";
+
+		// Each vector is 512 bit with masb indicating vc 512 and lsb indicating vc 0
+		// Format : 512-bit-vector is specified as 16 32-bit words
+		// Left most word has the vc range 511-479 right most word has vc range 31 - 0
+		// Each word has the MSB select higer vc number and LSB select lower vc num
+                distribution_vectors {
+                                     dv0  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x1>;
+                                     dv1  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv2  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv3  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv4  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv5  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv6  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv7  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv8  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv9  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv10 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv11 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv12 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv13 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv14 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv15 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                };
+
+	};
+/*
+	complex@0 {
+                device_type = "nae-complex";
+                mode = "xaui";
+
+                loopback_mode = <0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <52>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = < 1>;
+                parser_sequence_fifo_sizes = <120>;
+                //parser_sequence_fifo_sizes = <62 >;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <944>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = < 150 >;
+                free_desc_sizes = < 2048 >;
+                ucore_mask = <0xff >;
+        };
+*/
+	complex@1 {
+                device_type = "nae-complex";
+                mode = "sgmii";
+
+                loopback_mode = <0 0 0 0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <13 13 13 13>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = <1 1 1 1>;
+                parser_sequence_fifo_sizes = <30 30 30 30>;
+                //parser_sequence_fifo_sizes = <62 62 62 62>;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <128 128 128 128>;
+	
+		//ext phy addresses	
+                ext_phy_addr = <16 6 7 4>;
+                //ext_phy_addr = <9 10 11 8>;
+                ext_phy_bus = <0 0 0 0>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = <52 52 52 52>;
+                free_desc_sizes = <2048 2048 2048 2048>;
+                ucore_mask = <0xff 0xff 0xff 0xff>;
+        };
+};
diff --git a/arch/mips/boot/dts/he100-linux.dts b/arch/mips/boot/dts/he100-linux.dts
new file mode 100644
index 0000000..832d533
--- /dev/null
+++ b/arch/mips/boot/dts/he100-linux.dts
@@ -0,0 +1,78 @@
+/* XLP8XX Device Tree Source
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX";
+	compatible = "NETL,XLP3XX_A0";
+
+	#address-cells = <1>;
+	#size-cells = <1>;
+
+	hypervisor {
+		hypervisor-name = "Xen";
+		alloc_dom0_memory = <0>;
+		bootargs = "ncores=8 dom0_loadaddr=0x72000000 dom0_size=0x1c000000 dom0_cpumask=0xffffffff -- ";
+		domain_heap = <0x80000000 0x20000000>;
+	};
+	doms {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		dom@0 {
+			device_type = "domain";
+			os = "linux";
+
+			#address-cells = <1>;
+			#size-cells = <1>;
+
+			cpu {
+				onlinemask = <0xffff>;
+                                nae-rx-vc = <0>;
+                                nae-fb-vc = <1>;
+			};
+			uart {
+				id = <0>;
+				owner = <1>;
+				sharedcfg = <0x1f000000>;
+			};
+			memory {
+				reg = <0x01000000 0x0B000000	// 176M at 16M
+					0x20000000 0x60000000>;  // 1536M at 512M
+			};
+                        fmn {
+                                node_0_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_1_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_2_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_3_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                        };
+			pic {
+			};
+		};
+	};
+
+	chosen {
+		bootargs = " xlp_noi2c console=ttyS0,115200 rdinit=/sbin/init ";
+	};
+
+	/* These binaries are downloaded at the resp physical memory locations
+	 * by their corresponding bootstrapping loaders. For example,
+	 * u-boot is loaded by x-load at 193M, sysconfig is loaded by u-boot
+	 * at 1M, hypervisor by u-boot hypervisor at 136M.
+	 * On simulator all these binaries are pre-loaded by using '-F' option
+	 * for convenience. On silicon, they will be loaded by their corresponding
+	 * temporary download locations the stage-1/stage-2 firmware
+	 */
+	firmware-download {
+		u-boot        = <0x0c100000 0x3f00000>;  /* 63M @ 193M */
+		sysconfig     = <0x00100000 0x00100000>; /* 1M @ 1M */
+		hypervisor    = <0x08800000 0x00800000>; /* 8M @ 136M */
+		dom0          = <0x09000000 0x03000000>; /* 48M @ 144M */
+		domU-ramdisk  = <0x60000000 0x60800000>; /* 8M @ 1536M */
+	};
+
+	soc {
+
+	};
+};
+
diff --git a/arch/mips/boot/dts/he100-nae-4linux.dts b/arch/mips/boot/dts/he100-nae-4linux.dts
new file mode 100644
index 0000000..13b2208
--- /dev/null
+++ b/arch/mips/boot/dts/he100-nae-4linux.dts
@@ -0,0 +1,131 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX NAE CFG";
+	compatible = "NETL,XLP3XX_A0";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	frequency = <250>;
+
+	// VFBID MAP: Upto 127 entries
+	// (each entry is a pair of (vfbid , dest-vc)
+	// Legal range: (vfbid (0 - 126), dest-vc (0 - 4095))
+	vfbid-map = <
+
+		     // NAE -> CPU mapping 
+		     // Freeback VC = 0
+		      0   1  1   5  2   9  3  13
+		      4  17  5  21  6  25  7  29
+		      8  33  9  37 10  41 11  45
+	 	     12  49 13  53 14  57 15  61
+
+		     // NAE -> NAE mapping 
+		     32	496 33 497 34 498 35 499
+		     36	500 37 501 38 502 39 503
+
+		     // NULL FBID Should map to cpu0 to detect NAE send message errors 
+		     127 0
+
+
+		>;
+        // FLOW Table Generation: CRC16 polynomial
+  	flow_crc_poly = <0xffff>;
+
+	ucore {
+		src@1 {
+			file = "storm-linux-default.c";
+			mask = <0xff>;
+		};
+	};
+
+	// Packet Ordering Engine (POE)
+	poe {	
+	
+		// Supported modes are 'enque', 'serial', 'bypass'
+		mode = "bypass";
+
+		// Each vector is 512 bit with masb indicating vc 512 and lsb indicating vc 0
+		// Format : 512-bit-vector is specified as 16 32-bit words
+		// Left most word has the vc range 511-479 right most word has vc range 31 - 0
+		// Each word has the MSB select higer vc number and LSB select lower vc num
+                distribution_vectors {
+                                     dv0  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x1>;
+                                     dv1  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv2  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv3  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv4  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv5  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv6  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv7  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv8  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv9  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv10 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv11 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv12 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv13 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv14 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv15 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                };
+
+	};
+/*
+	complex@0 {
+                device_type = "nae-complex";
+                mode = "xaui";
+
+                loopback_mode = <0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <52>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = < 1>;
+                parser_sequence_fifo_sizes = <120>;
+                //parser_sequence_fifo_sizes = <62 >;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <944>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = < 150 >;
+                free_desc_sizes = < 2048 >;
+                ucore_mask = <0xff >;
+        };
+*/
+	complex@1 {
+                device_type = "nae-complex";
+                mode = "sgmii";
+
+                loopback_mode = <0 0 0 0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <13 13 13 13>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = <1 1 1 1>;
+                parser_sequence_fifo_sizes = <30 30 30 30>;
+                //parser_sequence_fifo_sizes = <62 62 62 62>;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <128 128 128 128>;
+	
+		//ext phy addresses	
+                ext_phy_addr = <16 6 7 4>;
+                //ext_phy_addr = <9 10 11 8>;
+                ext_phy_bus = <0 0 0 0>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = <52 52 52 52>;
+                free_desc_sizes = <2048 2048 2048 2048>;
+                ucore_mask = <0xff 0xff 0xff 0xff>;
+        };
+};
diff --git a/arch/mips/boot/dts/he100-tiny-nae.dts b/arch/mips/boot/dts/he100-tiny-nae.dts
new file mode 100644
index 0000000..bebb1a4
--- /dev/null
+++ b/arch/mips/boot/dts/he100-tiny-nae.dts
@@ -0,0 +1,112 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX NAE CFG";
+	compatible = "NETL,XLP3XX";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	frequency = <500>;
+
+	// VFBID MAP: Upto 127 entries
+	// (each entry is a pair of (vfbid , dest-vc)
+	// Legal range: (vfbid (0 - 126), dest-vc (0 - 4095))
+	vfbid-map = <
+                     0    0    1   1   2   2   3   3		
+/*
+		     // NAE -> CPU mapping 
+		     // Freeback VC = 0
+		      0   0  1   4  2   8  3  12
+		      4  16  5  20  6  24  7  28
+		      8  32  9  36 10  40 11  44
+	 	     12  48 13  52 14  56 15  60
+		     16  64 17  68 18  72 19  76
+		     20  80 21  84 22  88 23  92
+		     24  96 25 100 26 104 27 108
+		     28 112 29 116 30 120 31 124
+		     // NAE -> NAE mapping 
+		     32	1000 33 1001 34 1002 35 1003
+		     36	1004 37 1005 38 1006 39 1007
+		     40	1008 41 1009 42 1010 43 1011
+		     44	1012 45 1013 46 1014 47 1015
+		     48	1016 49 1017 50 1018 51 1019
+
+		     // NULL FBID Should map to cpu0 to detect NAE send message errors 
+		     127 0
+
+*/
+		>;
+        // FLOW Table Generation: CRC16 polynomial
+  	flow_crc_poly = <0xffff>;
+
+	ucore {
+		src@1 {
+			file = "default.c";
+			mask = <0xff>;
+		};
+	};
+
+	// Packet Ordering Engine (POE)
+	poe {	
+	
+		// Supported modes are 'enque', 'serial', 'bypass'
+		mode = "bypass";
+
+		// Each vector is 512 bit with masb indicating vc 512 and lsb indicating vc 0
+		// Format : 512-bit-vector is specified as 16 32-bit words
+		// Left most word has the vc range 511-479 right most word has vc range 31 - 0
+		// Each word has the MSB select higer vc number and LSB select lower vc num
+                distribution_vectors {
+                                     dv0  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x1>;
+                                     dv1  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv2  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv3  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv4  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv5  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv6  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv7  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv8  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv9  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv10 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv11 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv12 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv13 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv14 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv15 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                };
+
+	};
+	
+	complex@1 {
+                device_type = "nae-complex";
+                mode = "sgmii";
+
+                loopback_mode = <0 0 0 0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <13 13 13 13>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = <1 1 1 1>;
+                parser_sequence_fifo_sizes = <30 30 30 30>;
+                //parser_sequence_fifo_sizes = <62 62 62 62>;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <128 128 128 128>;
+	
+		//ext phy addresses	
+                ext_phy_addr = <16 10 11 8>;
+                ext_phy_bus = <0 0 0 0>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = <52 52 52 52>;
+                free_desc_sizes = <2048 2048 2048 2048>;
+                ucore_mask = <0xff 0xff 0xff 0xff>;
+        };
+
+};
diff --git a/arch/mips/boot/dts/he100-tiny.dts b/arch/mips/boot/dts/he100-tiny.dts
new file mode 100644
index 0000000..e9e6d26
--- /dev/null
+++ b/arch/mips/boot/dts/he100-tiny.dts
@@ -0,0 +1,50 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX";
+	compatible = "NETL,XLP3XX_A0";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	doms {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		dom@0 {
+			device_type = "domain";
+			heap-size = <0x0 0x4000000>;
+			shared-mem = <0x0 0x80000000 0x0 0x20000000>;
+			#address-cells = <1>;
+			#size-cells = <1>;
+			cpu {
+				onlinemask = <0xf>;
+				nae-rx-vc = <0>;
+				nae-fb-vc = <3>;
+			};
+			uart {
+				id = <0>;
+			};
+			memory {
+				reg = <0x00100000 0x0FF00000	// 255M at 1M
+					   0x20000000 0x20000000>;  // 512M at 512M
+			};
+			pic {
+			};
+		};
+	};
+
+	chosen {
+		bootargs = "xlp_noi2c console=ttyS0,115200 rdinit=/sbin/init";
+	};
+
+	soc {
+		fmn {
+			spill-base-hi   = <0x00000000>;
+			spill-base-low  = <0xE0000000>;
+			spill-size  	= <0x1000000>;
+			tx-vc       	= <524>;
+			credit      	= <50>;
+		};
+	};
+};
diff --git a/arch/mips/boot/dts/helinux.dts b/arch/mips/boot/dts/helinux.dts
index d383376..9e920cc 100644
--- a/arch/mips/boot/dts/helinux.dts
+++ b/arch/mips/boot/dts/helinux.dts
@@ -27,7 +27,7 @@
 			#size-cells = <1>;
 
 			cpu {
-				onlinemask = <0xffffffff>;
+				onlinemask = <0xffff>;
                                 nae-rx-vc = <1>;
                                 nae-fb-vc = <2>;
 
diff --git a/arch/mips/boot/dts/hybrid-nae.dts b/arch/mips/boot/dts/hybrid-nae.dts
index fb23a8f..5c1ea9e 100644
--- a/arch/mips/boot/dts/hybrid-nae.dts
+++ b/arch/mips/boot/dts/hybrid-nae.dts
@@ -191,6 +191,8 @@
 		// Since rx_buffer is per context, we can have a few different ways
 		//  to populate the operand
 		rx_buffer_sizes = <160 160>;
+                ext_phy_addr = <9 10>;
+                ext_phy_bus = <0 0> ;
 				   
 
 		// Max available descriptors are 1024 (across all complexes).
diff --git a/arch/mips/boot/dts/linux-he100.dts b/arch/mips/boot/dts/linux-he100.dts
new file mode 100644
index 0000000..832d533
--- /dev/null
+++ b/arch/mips/boot/dts/linux-he100.dts
@@ -0,0 +1,78 @@
+/* XLP8XX Device Tree Source
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX";
+	compatible = "NETL,XLP3XX_A0";
+
+	#address-cells = <1>;
+	#size-cells = <1>;
+
+	hypervisor {
+		hypervisor-name = "Xen";
+		alloc_dom0_memory = <0>;
+		bootargs = "ncores=8 dom0_loadaddr=0x72000000 dom0_size=0x1c000000 dom0_cpumask=0xffffffff -- ";
+		domain_heap = <0x80000000 0x20000000>;
+	};
+	doms {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		dom@0 {
+			device_type = "domain";
+			os = "linux";
+
+			#address-cells = <1>;
+			#size-cells = <1>;
+
+			cpu {
+				onlinemask = <0xffff>;
+                                nae-rx-vc = <0>;
+                                nae-fb-vc = <1>;
+			};
+			uart {
+				id = <0>;
+				owner = <1>;
+				sharedcfg = <0x1f000000>;
+			};
+			memory {
+				reg = <0x01000000 0x0B000000	// 176M at 16M
+					0x20000000 0x60000000>;  // 1536M at 512M
+			};
+                        fmn {
+                                node_0_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_1_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_2_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_3_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                        };
+			pic {
+			};
+		};
+	};
+
+	chosen {
+		bootargs = " xlp_noi2c console=ttyS0,115200 rdinit=/sbin/init ";
+	};
+
+	/* These binaries are downloaded at the resp physical memory locations
+	 * by their corresponding bootstrapping loaders. For example,
+	 * u-boot is loaded by x-load at 193M, sysconfig is loaded by u-boot
+	 * at 1M, hypervisor by u-boot hypervisor at 136M.
+	 * On simulator all these binaries are pre-loaded by using '-F' option
+	 * for convenience. On silicon, they will be loaded by their corresponding
+	 * temporary download locations the stage-1/stage-2 firmware
+	 */
+	firmware-download {
+		u-boot        = <0x0c100000 0x3f00000>;  /* 63M @ 193M */
+		sysconfig     = <0x00100000 0x00100000>; /* 1M @ 1M */
+		hypervisor    = <0x08800000 0x00800000>; /* 8M @ 136M */
+		dom0          = <0x09000000 0x03000000>; /* 48M @ 144M */
+		domU-ramdisk  = <0x60000000 0x60800000>; /* 8M @ 1536M */
+	};
+
+	soc {
+
+	};
+};
+
diff --git a/arch/mips/boot/dts/nae.dts b/arch/mips/boot/dts/nae.dts
index be1e709..9c136dc 100644
--- a/arch/mips/boot/dts/nae.dts
+++ b/arch/mips/boot/dts/nae.dts
@@ -197,6 +197,9 @@
 
 		// Max ingress fifo size 256 units (size of one unit is 64 byte)
 		iface_fifo_sizes = <13 13>;
+                
+		ext_phy_addr = <17 16>;
+                ext_phy_bus = <0 0>;
 
 		// Max parser sequence fifo size 1024 packets 
 		// (if 1588 Timestamp is not required, then max size increases to 2048)
diff --git a/arch/mips/boot/dts/perf-nae.dts b/arch/mips/boot/dts/perf-nae.dts
index ebac977..94cda41 100644
--- a/arch/mips/boot/dts/perf-nae.dts
+++ b/arch/mips/boot/dts/perf-nae.dts
@@ -182,8 +182,10 @@
 		// Since rx_buffer is per context, we can have a few different ways
 		//  to populate the operand
 		rx_buffer_sizes = <160 160>;
+                
+		ext_phy_addr = <17 16>;
+                ext_phy_bus = <0 0 >;
 				   
-
 		// Max available descriptors are 1024 (across all complexes).
 		// Per port num_free_descriptors must be even number
 		num_free_descs = <52 52>;
diff --git a/arch/mips/boot/dts/storm-linux-nae.dts b/arch/mips/boot/dts/storm-linux-nae.dts
new file mode 100644
index 0000000..71574de
--- /dev/null
+++ b/arch/mips/boot/dts/storm-linux-nae.dts
@@ -0,0 +1,156 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX NAE CFG";
+	compatible = "NETL,XLP3XX";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	frequency = <500>;
+
+	// VFBID MAP: Upto 127 entries
+	// (each entry is a pair of (vfbid , dest-vc)
+	// Legal range: (vfbid (0 - 126), dest-vc (0 - 4095))
+	vfbid-map = <
+/*
+		     // NAE -> CPU mapping 
+		     // Freeback VC = 0
+		      0   1  1   5  2   9  3  13
+		      4  17  5  21  6  25  7  29
+		      8  33  9  37 10  41 11  45
+	 	     12  49 13  53 14  57 15  61
+*/
+		     // NAE -> NAE mapping 
+		     32	496 33 497 34 498 35 499
+		     36	500 37 501 38 502 39 503
+
+		     // NULL FBID Should map to cpu0 to detect NAE send message errors 
+		     127 0
+
+
+		>;
+        // FLOW Table Generation: CRC16 polynomial
+  	flow_crc_poly = <0xffff>;
+
+	ucore {
+		src@1 {
+			file = "storm-linux-default.c";
+			mask = <0xff>;
+		};
+	};
+
+	// Packet Ordering Engine (POE)
+	poe {	
+	
+		// Supported modes are 'enque', 'serial', 'bypass'
+		mode = "bypass";
+
+		// Each vector is 512 bit with masb indicating vc 512 and lsb indicating vc 0
+		// Format : 512-bit-vector is specified as 16 32-bit words
+		// Left most word has the vc range 511-479 right most word has vc range 31 - 0
+		// Each word has the MSB select higer vc number and LSB select lower vc num
+                distribution_vectors {
+                                     dv0  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x1>;
+                                     dv1  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv2  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv3  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv4  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv5  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv6  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv7  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv8  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv9  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv10 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv11 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv12 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv13 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv14 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv15 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                };
+
+	};
+/*
+	complex@0 {
+                device_type = "nae-complex";
+                mode = "xaui";
+
+                loopback_mode = <0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <52>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = < 1>;
+                parser_sequence_fifo_sizes = <120>;
+                //parser_sequence_fifo_sizes = <62 >;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <944>;
+	
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = < 150 >;
+                free_desc_sizes = < 2048 >;
+                ucore_mask = <0xff >;
+        };
+	complex@0 {
+                device_type = "nae-complex";
+                mode = "sgmii";
+
+                loopback_mode = <0 0 0 0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <13 13 13 13>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = <1 1 1 1>;
+                parser_sequence_fifo_sizes = <30 30 30 30>;
+                //parser_sequence_fifo_sizes = <62 62 62 62>;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <128 128 128 128>;
+	
+		//ext phy addresses	
+                ext_phy_addr = <5 6 7 4>;
+                //ext_phy_addr = <9 10 11 8>;
+                ext_phy_bus = <0 0 0 0>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = <52 52 52 52>;
+                free_desc_sizes = <2048 2048 2048 2048>;
+                ucore_mask = <0xff 0xff 0xff 0xff>;
+        };
+*/
+        complex@1 {
+                device_type = "nae-complex";
+                mode = "xaui";
+
+                loopback_mode = <0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <52>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = < 1>;
+                parser_sequence_fifo_sizes = <120>;
+                //parser_sequence_fifo_sizes = <62 >;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <944>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = < 150 >;
+                free_desc_sizes = < 2048 >;
+                ucore_mask = <0xff>;
+        };
+};
diff --git a/arch/mips/boot/dts/storm-linux.dts b/arch/mips/boot/dts/storm-linux.dts
new file mode 100644
index 0000000..2ac7aa4
--- /dev/null
+++ b/arch/mips/boot/dts/storm-linux.dts
@@ -0,0 +1,78 @@
+/* XLP8XX Device Tree Source
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX";
+	compatible = "NETL,XLP3XX_A0";
+
+	#address-cells = <1>;
+	#size-cells = <1>;
+
+	hypervisor {
+		hypervisor-name = "Xen";
+		alloc_dom0_memory = <0>;
+		bootargs = "ncores=8 dom0_loadaddr=0x72000000 dom0_size=0x1c000000 dom0_cpumask=0xffffffff -- ";
+		domain_heap = <0x80000000 0x20000000>;
+	};
+	doms {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		dom@0 {
+			device_type = "domain";
+			os = "linux";
+
+			#address-cells = <1>;
+			#size-cells = <1>;
+
+			cpu {
+				onlinemask = <0xffff>;
+                                nae-rx-vc = <0>;
+                                nae-fb-vc = <1>;
+			};
+			uart {
+				id = <0>;
+				owner = <1>;
+				sharedcfg = <0x1f000000>;
+			};
+			memory {
+				reg = <0x01000000 0x0B000000	// 176M at 16M
+					0x20000000 0xa0000000>;  // 2586M at 512M
+			};
+                        fmn {
+                                node_0_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_1_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_2_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_3_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                        };
+			pic {
+			};
+		};
+	};
+
+	chosen {
+		bootargs = " xlp_noi2c console=ttyS0,115200 rdinit=/sbin/init mem=512m@3584m ";
+	};
+
+	/* These binaries are downloaded at the resp physical memory locations
+	 * by their corresponding bootstrapping loaders. For example,
+	 * u-boot is loaded by x-load at 193M, sysconfig is loaded by u-boot
+	 * at 1M, hypervisor by u-boot hypervisor at 136M.
+	 * On simulator all these binaries are pre-loaded by using '-F' option
+	 * for convenience. On silicon, they will be loaded by their corresponding
+	 * temporary download locations the stage-1/stage-2 firmware
+	 */
+	firmware-download {
+		u-boot        = <0x0c100000 0x3f00000>;  /* 63M @ 193M */
+		sysconfig     = <0x00100000 0x00100000>; /* 1M @ 1M */
+		hypervisor    = <0x08800000 0x00800000>; /* 8M @ 136M */
+		dom0          = <0x09000000 0x03000000>; /* 48M @ 144M */
+		domU-ramdisk  = <0x60000000 0x60800000>; /* 8M @ 1536M */
+	};
+
+	soc {
+
+	};
+};
+
diff --git a/arch/mips/boot/dts/storm-nae-4linux.dts b/arch/mips/boot/dts/storm-nae-4linux.dts
new file mode 100644
index 0000000..71574de
--- /dev/null
+++ b/arch/mips/boot/dts/storm-nae-4linux.dts
@@ -0,0 +1,156 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX NAE CFG";
+	compatible = "NETL,XLP3XX";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	frequency = <500>;
+
+	// VFBID MAP: Upto 127 entries
+	// (each entry is a pair of (vfbid , dest-vc)
+	// Legal range: (vfbid (0 - 126), dest-vc (0 - 4095))
+	vfbid-map = <
+/*
+		     // NAE -> CPU mapping 
+		     // Freeback VC = 0
+		      0   1  1   5  2   9  3  13
+		      4  17  5  21  6  25  7  29
+		      8  33  9  37 10  41 11  45
+	 	     12  49 13  53 14  57 15  61
+*/
+		     // NAE -> NAE mapping 
+		     32	496 33 497 34 498 35 499
+		     36	500 37 501 38 502 39 503
+
+		     // NULL FBID Should map to cpu0 to detect NAE send message errors 
+		     127 0
+
+
+		>;
+        // FLOW Table Generation: CRC16 polynomial
+  	flow_crc_poly = <0xffff>;
+
+	ucore {
+		src@1 {
+			file = "storm-linux-default.c";
+			mask = <0xff>;
+		};
+	};
+
+	// Packet Ordering Engine (POE)
+	poe {	
+	
+		// Supported modes are 'enque', 'serial', 'bypass'
+		mode = "bypass";
+
+		// Each vector is 512 bit with masb indicating vc 512 and lsb indicating vc 0
+		// Format : 512-bit-vector is specified as 16 32-bit words
+		// Left most word has the vc range 511-479 right most word has vc range 31 - 0
+		// Each word has the MSB select higer vc number and LSB select lower vc num
+                distribution_vectors {
+                                     dv0  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x1>;
+                                     dv1  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv2  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv3  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv4  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv5  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv6  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv7  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv8  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv9  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv10 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv11 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv12 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv13 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv14 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv15 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                };
+
+	};
+/*
+	complex@0 {
+                device_type = "nae-complex";
+                mode = "xaui";
+
+                loopback_mode = <0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <52>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = < 1>;
+                parser_sequence_fifo_sizes = <120>;
+                //parser_sequence_fifo_sizes = <62 >;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <944>;
+	
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = < 150 >;
+                free_desc_sizes = < 2048 >;
+                ucore_mask = <0xff >;
+        };
+	complex@0 {
+                device_type = "nae-complex";
+                mode = "sgmii";
+
+                loopback_mode = <0 0 0 0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <13 13 13 13>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = <1 1 1 1>;
+                parser_sequence_fifo_sizes = <30 30 30 30>;
+                //parser_sequence_fifo_sizes = <62 62 62 62>;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <128 128 128 128>;
+	
+		//ext phy addresses	
+                ext_phy_addr = <5 6 7 4>;
+                //ext_phy_addr = <9 10 11 8>;
+                ext_phy_bus = <0 0 0 0>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = <52 52 52 52>;
+                free_desc_sizes = <2048 2048 2048 2048>;
+                ucore_mask = <0xff 0xff 0xff 0xff>;
+        };
+*/
+        complex@1 {
+                device_type = "nae-complex";
+                mode = "xaui";
+
+                loopback_mode = <0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <52>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = < 1>;
+                parser_sequence_fifo_sizes = <120>;
+                //parser_sequence_fifo_sizes = <62 >;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <944>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = < 150 >;
+                free_desc_sizes = < 2048 >;
+                ucore_mask = <0xff>;
+        };
+};
diff --git a/arch/mips/boot/dts/storm-nae.dts b/arch/mips/boot/dts/storm-nae.dts
new file mode 100644
index 0000000..48e9684
--- /dev/null
+++ b/arch/mips/boot/dts/storm-nae.dts
@@ -0,0 +1,112 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX NAE CFG";
+	compatible = "NETL,XLP3XX";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	frequency = <500>;
+
+	// VFBID MAP: Upto 127 entries
+	// (each entry is a pair of (vfbid , dest-vc)
+	// Legal range: (vfbid (0 - 126), dest-vc (0 - 4095))
+	vfbid-map = <
+                     0    0    1   1   2   2   3   3		
+/*
+		     // NAE -> CPU mapping 
+		     // Freeback VC = 0
+		      0   0  1   4  2   8  3  12
+		      4  16  5  20  6  24  7  28
+		      8  32  9  36 10  40 11  44
+	 	     12  48 13  52 14  56 15  60
+		     16  64 17  68 18  72 19  76
+		     20  80 21  84 22  88 23  92
+		     24  96 25 100 26 104 27 108
+		     28 112 29 116 30 120 31 124
+		     // NAE -> NAE mapping 
+		     32	1000 33 1001 34 1002 35 1003
+		     36	1004 37 1005 38 1006 39 1007
+		     40	1008 41 1009 42 1010 43 1011
+		     44	1012 45 1013 46 1014 47 1015
+		     48	1016 49 1017 50 1018 51 1019
+
+		     // NULL FBID Should map to cpu0 to detect NAE send message errors 
+		     127 0
+
+*/
+		>;
+        // FLOW Table Generation: CRC16 polynomial
+  	flow_crc_poly = <0xffff>;
+
+	ucore {
+		src@1 {
+			file = "default.c";
+			mask = <0xff>;
+		};
+	};
+
+	// Packet Ordering Engine (POE)
+	poe {	
+	
+		// Supported modes are 'enque', 'serial', 'bypass'
+		mode = "bypass";
+
+		// Each vector is 512 bit with masb indicating vc 512 and lsb indicating vc 0
+		// Format : 512-bit-vector is specified as 16 32-bit words
+		// Left most word has the vc range 511-479 right most word has vc range 31 - 0
+		// Each word has the MSB select higer vc number and LSB select lower vc num
+                distribution_vectors {
+                                     dv0  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x1>;
+                                     dv1  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv2  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv3  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv4  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv5  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv6  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv7  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv8  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv9  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv10 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv11 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv12 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv13 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv14 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv15 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                };
+
+	};
+	
+	complex@0 {
+                device_type = "nae-complex";
+                mode = "sgmii";
+
+                loopback_mode = <0 0 0 0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <13 13 13 13>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = <1 1 1 1>;
+                parser_sequence_fifo_sizes = <30 30 30 30>;
+                //parser_sequence_fifo_sizes = <62 62 62 62>;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <128 128 128 128>;
+	
+		//ext phy addresses	
+                ext_phy_addr = <5 6 7 4>;
+                ext_phy_bus = <0 0 0 0>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = <52 52 52 52>;
+                free_desc_sizes = <2048 2048 2048 2048>;
+                ucore_mask = <0xff 0xff 0xff 0xff>;
+        };
+
+};
diff --git a/arch/mips/boot/dts/storm-tiny-nae.dts b/arch/mips/boot/dts/storm-tiny-nae.dts
new file mode 100644
index 0000000..a3b3bbf
--- /dev/null
+++ b/arch/mips/boot/dts/storm-tiny-nae.dts
@@ -0,0 +1,114 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX NAE CFG";
+	compatible = "NETL,XLP3XX";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	frequency = <500>;
+
+	// VFBID MAP: Upto 127 entries
+	// (each entry is a pair of (vfbid , dest-vc)
+	// Legal range: (vfbid (0 - 126), dest-vc (0 - 4095))
+	vfbid-map = <
+                     0    0    1   1   2   2   3   3		
+/*
+		     // NAE -> CPU mapping 
+		     // Freeback VC = 0
+		      0   0  1   4  2   8  3  12
+		      4  16  5  20  6  24  7  28
+		      8  32  9  36 10  40 11  44
+	 	     12  48 13  52 14  56 15  60
+		     16  64 17  68 18  72 19  76
+		     20  80 21  84 22  88 23  92
+		     24  96 25 100 26 104 27 108
+		     28 112 29 116 30 120 31 124
+		     // NAE -> NAE mapping 
+		     32	1000 33 1001 34 1002 35 1003
+		     36	1004 37 1005 38 1006 39 1007
+		     40	1008 41 1009 42 1010 43 1011
+		     44	1012 45 1013 46 1014 47 1015
+		     48	1016 49 1017 50 1018 51 1019
+
+		     // NULL FBID Should map to cpu0 to detect NAE send message errors 
+		     127 0
+
+*/
+		>;
+        // FLOW Table Generation: CRC16 polynomial
+  	flow_crc_poly = <0xffff>;
+
+	ucore {
+		src@1 {
+			file = "default.c";
+			mask = <0xff>;
+		};
+	};
+
+	// Packet Ordering Engine (POE)
+	poe {	
+	
+		// Supported modes are 'enque', 'serial', 'bypass'
+		mode = "bypass";
+
+		// Each vector is 512 bit with masb indicating vc 512 and lsb indicating vc 0
+		// Format : 512-bit-vector is specified as 16 32-bit words
+		// Left most word has the vc range 511-479 right most word has vc range 31 - 0
+		// Each word has the MSB select higer vc number and LSB select lower vc num
+                distribution_vectors {
+                                     dv0  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x1>;
+                                     dv1  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv2  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv3  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv4  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv5  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv6  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv7  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv8  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv9  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv10 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv11 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv12 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv13 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv14 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                                     dv15 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+                };
+
+	};
+	
+	complex@0 {
+                device_type = "nae-complex";
+                mode = "sgmii";
+
+                loopback_mode = <0 0 0 0>;
+
+                // Max ingress fifo size 256 units (size of one unit is 64 byte)
+                iface_fifo_sizes = <13 13 13 13>;
+
+                // Max parser sequence fifo size 1024 packets
+                // (if 1588 Timestamp is not required, then max size increases to 2048)
+                num_channels = <1 1 1 1>;
+                parser_sequence_fifo_sizes = <30 30 30 30>;
+                //parser_sequence_fifo_sizes = <62 62 62 62>;
+
+                // Since rx_buffer is per context, we can have a few different ways
+                //  to populate the operand
+                rx_buffer_sizes = <128 128 128 128>;
+	
+		//ext phy addresses	
+                ext_phy_addr = <5 6 7 4>;
+                //ext_phy_addr = <9 10 11 0>;
+                //ext_phy_addr = <9 10 11 8>;
+                ext_phy_bus = <0 0 0 0>;
+
+                // Max available descriptors are 1024 (across all complexes).
+                // Per port num_free_descriptors must be even number
+                num_free_descs = <52 52 52 52>;
+                free_desc_sizes = <2048 2048 2048 2048>;
+                ucore_mask = <0xff 0xff 0xff 0xff>;
+        };
+
+};
diff --git a/arch/mips/boot/dts/storm-tiny.dts b/arch/mips/boot/dts/storm-tiny.dts
new file mode 100644
index 0000000..e9e6d26
--- /dev/null
+++ b/arch/mips/boot/dts/storm-tiny.dts
@@ -0,0 +1,50 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP3XX";
+	compatible = "NETL,XLP3XX_A0";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	doms {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		dom@0 {
+			device_type = "domain";
+			heap-size = <0x0 0x4000000>;
+			shared-mem = <0x0 0x80000000 0x0 0x20000000>;
+			#address-cells = <1>;
+			#size-cells = <1>;
+			cpu {
+				onlinemask = <0xf>;
+				nae-rx-vc = <0>;
+				nae-fb-vc = <3>;
+			};
+			uart {
+				id = <0>;
+			};
+			memory {
+				reg = <0x00100000 0x0FF00000	// 255M at 1M
+					   0x20000000 0x20000000>;  // 512M at 512M
+			};
+			pic {
+			};
+		};
+	};
+
+	chosen {
+		bootargs = "xlp_noi2c console=ttyS0,115200 rdinit=/sbin/init";
+	};
+
+	soc {
+		fmn {
+			spill-base-hi   = <0x00000000>;
+			spill-base-low  = <0xE0000000>;
+			spill-size  	= <0x1000000>;
+			tx-vc       	= <524>;
+			credit      	= <50>;
+		};
+	};
+};
diff --git a/arch/mips/boot/dts/xlpev-linux-nae.dts b/arch/mips/boot/dts/xlpev-linux-nae.dts
new file mode 100644
index 0000000..44c56b9
--- /dev/null
+++ b/arch/mips/boot/dts/xlpev-linux-nae.dts
@@ -0,0 +1,219 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP8XX NAE CFG";
+	compatible = "NETL,XLP8XX_A0";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	frequency = <500>;
+
+	// VFBID MAP: Upto 127 entries
+	// (each entry is a pair of (vfbid , dest-vc)
+	// Legal range: (vfbid (0 - 126), dest-vc (0 - 4095))
+	vfbid-map = <
+		     // NAE -> CPU mapping 
+		     // Each thread uses vc 1 as freeback VC.
+		     // This is tied with fb-vc field.
+		      0    1    1    5    2   9    3    13 
+		      4    17   5    21   6   25   7    29
+                      8    33   9    37   10  41   11   45
+                      12   49   13   53   14  57   15   61
+		      16   65   17   69   18  73   19   77
+                      20   81   21   85   22  89   23   93
+		      24   97   25  101   26 105   27  109
+		      28  113   29  117   30 121   31  125	  
+/*
+		     // NAE -> CPU mapping 
+		     // Freeback VC = 0
+		      0   0  1   4  2   8  3  12
+		      4  16  5  20  6  24  7  28
+		      8  32  9  36 10  40 11  44
+	 	     12  48 13  52 14  56 15  60
+		     16  64 17  68 18  72 19  76
+		     20  80 21  84 22  88 23  92
+		     24  96 25 100 26 104 27 108
+		     28 112 29 116 30 120 31 124
+		     // NAE -> NAE mapping 
+		     32	1000 33 1001 34 1002 35 1003
+		     36	1004 37 1005 38 1006 39 1007
+		     40	1008 41 1009 42 1010 43 1011
+		     44	1012 45 1013 46 1014 47 1015
+		     48	1016 49 1017 50 1018 51 1019
+
+		     // NULL FBID Should map to cpu0 to detect NAE send message errors 
+		     127 0
+*/
+		>;
+
+        // FLOW Table Generation: CRC16 polynomial
+  	flow_crc_poly = <0xffff>;
+
+	ucore {
+		src@1 {
+			file = "default.c";
+			mask = <0xffff>;
+		};
+	};
+
+	// Packet Ordering Engine (POE)
+	poe {	
+	
+		// Supported modes are 'enque', 'serial', 'bypass'
+		mode = "bypass";
+
+		// Each vector is 512 bit with masb indicating vc 512 and lsb indicating vc 0
+		// Format : 512-bit-vector is specified as 16 32-bit words
+		// Left most word has the vc range 511-479 right most word has vc range 31 - 0
+		// Each word has the MSB select higer vc number and LSB select lower vc num
+		distribution_vectors {
+				     dv0  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x1>;
+				     dv1  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv2  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv3  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv4  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv5  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv6  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv7  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv8  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv9  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv10 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv11 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv12 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv13 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv14 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv15 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+		};
+
+	};
+
+	complex@0 {
+		device_type = "nae-complex";
+		mode = "xaui";
+		loopback_mode = <0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <55>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		parser_sequence_fifo_sizes = <225>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+//		num_channels = <4>;
+//		rx_buffer_sizes = <240 240 240 240>;
+		num_channels = <1>;
+		rx_buffer_sizes = <944>;
+
+		// Max available descriptors are 1024  (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <150>;
+		free_desc_sizes = <2048>;
+		ucore_mask = <0xffff>;
+	};
+	complex@1 {
+		device_type = "nae-complex";
+		mode = "xaui";
+		loopback_mode = <0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <55>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		parser_sequence_fifo_sizes = <225>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+//		num_channels = <4>;
+//		rx_buffer_sizes = <240 240 240 240>;
+		num_channels = <1>;
+		rx_buffer_sizes = <944>;
+
+		// Max available descriptors are 1024  (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <150>;
+		free_desc_sizes = <2048>;
+		ucore_mask = <0xffff>;
+	};
+	complex@2 {
+		device_type = "nae-complex";
+		mode = "xaui";
+		loopback_mode = <0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <55>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		parser_sequence_fifo_sizes = <225>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+//		num_channels = <4>;
+//		rx_buffer_sizes = <240 240 240 240>;
+		num_channels = <1>;
+		rx_buffer_sizes = <944>;
+
+		// Max available descriptors are 1024  (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <150>;
+		free_desc_sizes = <2048>;
+		ucore_mask = <0xffff>;
+	};
+	complex@3 {
+		device_type = "nae-complex";
+		mode = "xaui";
+		loopback_mode = <0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <55>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		parser_sequence_fifo_sizes = <225>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+//		num_channels = <4>;
+//		rx_buffer_sizes = <240 240 240 240>;
+		num_channels = <1>;
+		rx_buffer_sizes = <944>;
+
+		// Max available descriptors are 1024  (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <150>;
+		free_desc_sizes = <2048>;
+		ucore_mask = <0xffff>;
+	};
+	complex@4 {
+		device_type = "nae-complex";
+		mode = "sgmii";
+
+		loopback_mode = <0 0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <13 13>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		num_channels = <1 1>;
+		parser_sequence_fifo_sizes = <62 62>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+		rx_buffer_sizes = <128 128>;
+				   
+                ext_phy_addr = <17 16>;
+                ext_phy_bus = <0 0 >;
+
+		// Max available descriptors are 1024 (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <52 52>;
+		free_desc_sizes = <2048 2048>;
+		ucore_mask = <0xffff 0xffff>;
+	};
+};
diff --git a/arch/mips/boot/dts/xlpev-linux.dts b/arch/mips/boot/dts/xlpev-linux.dts
new file mode 100644
index 0000000..9ee37ef
--- /dev/null
+++ b/arch/mips/boot/dts/xlpev-linux.dts
@@ -0,0 +1,78 @@
+/* XLP8XX Device Tree Source
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP8XX";
+	compatible = "NETL,XLP8XX_A0";
+
+	#address-cells = <1>;
+	#size-cells = <1>;
+
+	hypervisor {
+		hypervisor-name = "Xen";
+		alloc_dom0_memory = <0>;
+		bootargs = "ncores=8 dom0_loadaddr=0x72000000 dom0_size=0x1c000000 dom0_cpumask=0xffffffff -- ";
+		domain_heap = <0x80000000 0x20000000>;
+	};
+	doms {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		dom@0 {
+			device_type = "domain";
+			os = "linux";
+
+			#address-cells = <1>;
+			#size-cells = <1>;
+
+			cpu {
+				onlinemask = <0xffffffff>;
+                                nae-rx-vc = <0>;
+                                nae-fb-vc = <1>;
+			};
+			uart {
+				id = <0>;
+				owner = <1>;
+				sharedcfg = <0x1f000000>;
+			};
+			memory {
+				reg = <0x01000000 0x0B000000	// 176M at 16M
+					0x20000000 0xa0000000>;  // 2586M at 512M
+			};
+                        fmn {
+                                node_0_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_1_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_2_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                                node_3_vc_mask = <0xffffffff 0xffffffff 0xffffffff 0xffffffff>;
+                        };
+			pic {
+			};
+		};
+	};
+
+	chosen {
+		bootargs = " xlp_noi2c console=ttyS0,115200 rdinit=/sbin/init mem=512m@3584m ";
+	};
+
+	/* These binaries are downloaded at the resp physical memory locations
+	 * by their corresponding bootstrapping loaders. For example,
+	 * u-boot is loaded by x-load at 193M, sysconfig is loaded by u-boot
+	 * at 1M, hypervisor by u-boot hypervisor at 136M.
+	 * On simulator all these binaries are pre-loaded by using '-F' option
+	 * for convenience. On silicon, they will be loaded by their corresponding
+	 * temporary download locations the stage-1/stage-2 firmware
+	 */
+	firmware-download {
+		u-boot        = <0x0c100000 0x3f00000>;  /* 63M @ 193M */
+		sysconfig     = <0x00100000 0x00100000>; /* 1M @ 1M */
+		hypervisor    = <0x08800000 0x00800000>; /* 8M @ 136M */
+		dom0          = <0x09000000 0x03000000>; /* 48M @ 144M */
+		domU-ramdisk  = <0x60000000 0x60800000>; /* 8M @ 1536M */
+	};
+
+	soc {
+
+	};
+};
+
diff --git a/arch/mips/boot/dts/xlpev-tiny-nae.dts b/arch/mips/boot/dts/xlpev-tiny-nae.dts
new file mode 100644
index 0000000..b96e193
--- /dev/null
+++ b/arch/mips/boot/dts/xlpev-tiny-nae.dts
@@ -0,0 +1,89 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP8XX NAE CFG";
+	compatible = "NETL,XLP8XX_A0";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	frequency = <500>;
+
+	// VFBID MAP: Upto 127 entries
+	// (each entry is a pair of (vfbid , dest-vc)
+	// Legal range: (vfbid (0 - 126), dest-vc (0 - 4095))
+	vfbid-map = <
+                     0    0    1   1   2   2   3   3		
+		>;
+
+        // FLOW Table Generation: CRC16 polynomial
+  	flow_crc_poly = <0xffff>;
+
+	ucore {
+		src@1 {
+			file = "default.c";
+			mask = <0xffff>;
+		};
+	};
+
+	// Packet Ordering Engine (POE)
+	poe {	
+	
+		// Supported modes are 'enque', 'serial', 'bypass'
+		mode = "bypass";
+
+		// Each vector is 512 bit with masb indicating vc 512 and lsb indicating vc 0
+		// Format : 512-bit-vector is specified as 16 32-bit words
+		// Left most word has the vc range 511-479 right most word has vc range 31 - 0
+		// Each word has the MSB select higer vc number and LSB select lower vc num
+		distribution_vectors {
+				     dv0  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x1>;
+				     dv1  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv2  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv3  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv4  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv5  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv6  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv7  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv8  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv9  = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv10 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv11 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv12 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv13 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv14 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+				     dv15 = <0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>;
+		};
+
+	};
+
+	complex@4 {
+		device_type = "nae-complex";
+		mode = "sgmii";
+
+		loopback_mode = <0 0>;
+
+		// Max ingress fifo size 256 units (size of one unit is 64 byte)
+		iface_fifo_sizes = <13 13>;
+
+		// Max parser sequence fifo size 1024 packets 
+		// (if 1588 Timestamp is not required, then max size increases to 2048)
+		num_channels = <1 1>;
+		parser_sequence_fifo_sizes = <62 62>;
+
+		// Since rx_buffer is per context, we can have a few different ways
+		//  to populate the operand
+		rx_buffer_sizes = <128 128>;
+                
+		ext_phy_addr = <17 16>;
+                ext_phy_bus = <0 0>;
+				   
+
+		// Max available descriptors are 1024 (across all complexes).
+		// Per port num_free_descriptors must be even number
+		num_free_descs = <52 52>;
+		free_desc_sizes = <2048 2048>;
+		ucore_mask = <0xffff 0xffff>;
+	};
+};
diff --git a/arch/mips/boot/dts/xlpev-tiny.dts b/arch/mips/boot/dts/xlpev-tiny.dts
new file mode 100644
index 0000000..fc5abad
--- /dev/null
+++ b/arch/mips/boot/dts/xlpev-tiny.dts
@@ -0,0 +1,50 @@
+/* XLP8XX Device Tree Source 
+ *
+ */
+
+/dts-v1/;
+/ {
+	model = "MIPS,XLP8XX";
+	compatible = "NETL,XLP8XX_A0";
+	#address-cells = <1>;
+	#size-cells = <1>;
+	doms {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		dom@0 {
+			device_type = "domain";
+			heap-size = <0x0 0x4000000>;
+			shared-mem = <0x0 0x80000000 0x0 0x20000000>;
+			#address-cells = <1>;
+			#size-cells = <1>;
+			cpu {
+				onlinemask = <0xf>;
+				nae-rx-vc = <0>;
+				nae-fb-vc = <3>;
+			};
+			uart {
+				id = <0>;
+			};
+			memory {
+				reg = <0x00100000 0x0FF00000	// 255M at 1M
+					   0x20000000 0x20000000>;  // 512M at 512M
+			};
+			pic {
+			};
+		};
+	};
+
+	chosen {
+		bootargs = "xlp_noi2c console=ttyS0,115200 rdinit=/sbin/init";
+	};
+
+	soc {
+		fmn {
+			spill-base-hi   = <0x00000000>;
+			spill-base-low  = <0xE0000000>;
+			spill-size  	= <0x1000000>;
+			tx-vc       	= <524>;
+			credit      	= <50>;
+		};
+	};
+};
-- 
1.9.1

