From ca3bd7d2302252dc846044e737469274b962d02e Mon Sep 17 00:00:00 2001
From: reshmic <reshmic@netlogicmicro.com>
Date: Fri, 16 Dec 2011 22:49:28 +0530
Subject: [PATCH 1487/1532] exclusive fdt parameter for ipsec

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/crypto/sae/nlm_aead.c   |  4 ++--
 drivers/crypto/sae/nlm_async.h  |  3 ++-
 drivers/crypto/sae/nlm_auth.c   | 10 +++++-----
 drivers/crypto/sae/nlm_crypto.c | 28 +++++++++++++++++++++-------
 drivers/crypto/sae/nlm_enc.c    |  4 +++-
 5 files changed, 33 insertions(+), 16 deletions(-)

diff --git a/drivers/crypto/sae/nlm_aead.c b/drivers/crypto/sae/nlm_aead.c
index 593d7e4..9a812ac 100755
--- a/drivers/crypto/sae/nlm_aead.c
+++ b/drivers/crypto/sae/nlm_aead.c
@@ -721,7 +721,7 @@ static int aead_crypt_3des(struct aead_request *req, unsigned int op)
 	tx_id = (uint64_t)async;
 
 	//construct pkt, send to engine and receive reply
-	err = nlm_hal_send_msg3(NLM_CRYPTO_VC_BASE, 0 /*code */ , entry0, entry1, tx_id);
+	err = nlm_hal_send_msg3(crypto_vc_base, 0 /*code */ , entry0, entry1, tx_id);
 	if(err){
 		printk("err\n");
 		return -EIO;
@@ -841,7 +841,7 @@ static int aead_crypt(struct aead_request *req, unsigned int op)
 	tx_id = (uint64_t)async;
 
 	//construct pkt, send to engine and receive reply
-	err = nlm_hal_send_msg3(NLM_CRYPTO_VC_BASE, 0 /*code */ , entry0, entry1, tx_id);
+	err = nlm_hal_send_msg3(crypto_vc_base, 0 /*code */ , entry0, entry1, tx_id);
 	if(err){
 		printk("err\n");
 		return -EIO;
diff --git a/drivers/crypto/sae/nlm_async.h b/drivers/crypto/sae/nlm_async.h
index 5ed501b..639805a 100644
--- a/drivers/crypto/sae/nlm_async.h
+++ b/drivers/crypto/sae/nlm_async.h
@@ -25,7 +25,6 @@ THE POSSIBILITY OF SUCH DAMAGE.
 #ifndef __NLM_ASYNC_H
 #define __NLM_ASYNC_H
 struct nlm_async_crypto;
-#define NLM_CRYPTO_VC_BASE 281 
 #define MAX_CPU 32
 extern int crypto_get_fb_vc(void);
 
@@ -81,5 +80,7 @@ struct nlm_crypto_stat
 	uint64_t auth_tbytes[AUTH_MAX_STAT];
 };
 
+extern int crypto_vc_base;
+extern int crypto_vc_limit;
 
 #endif
diff --git a/drivers/crypto/sae/nlm_auth.c b/drivers/crypto/sae/nlm_auth.c
index 3234370..db2fdf3 100644
--- a/drivers/crypto/sae/nlm_auth.c
+++ b/drivers/crypto/sae/nlm_auth.c
@@ -59,7 +59,6 @@ extern int auth_mode_key_len[NLM_HASH_MAX][NLM_HASH_MODE_MAX];
 #define malloc(a) kmalloc(a, GFP_KERNEL)
 #define free kfree
 #define NLM_AUTH_MAX_FRAGS	(20)
-#define NLM_CRYPTO_SYNC_VC 3
 
 
 struct nlm_auth_ctx
@@ -168,10 +167,10 @@ static int
 crypto_get_sync_fb_vc(void)
 {
     int cpu;
-    extern int sae_rx_sync_vc;
+    extern int ipsec_sync_vc;
 
     cpu = hard_smp_processor_id();      //processor_id();
-    cpu = cpu * 4 + sae_rx_sync_vc;
+    cpu = cpu * 4 + ipsec_sync_vc;
 
     return cpu;
 }
@@ -190,6 +189,7 @@ xlp_auth_final(struct shash_desc *desc, uint8_t *out)
 	uint32_t size,code,src;
 	uint16_t stat = auth_ctx->stat;
 	int cpu = nlm_processor_id();
+        extern int ipsec_sync_vc;
 
 	nlm_crypto_fill_auth_pkt_param(ctrl,pkt_param,
 			0,auth_pkt_desc->total_len,0,out); 
@@ -208,11 +208,11 @@ xlp_auth_final(struct shash_desc *desc, uint8_t *out)
 #endif
 
 	//construct pkt, send to engine and receive reply
-	xlp_message_send_block_fast_3(0, NLM_CRYPTO_VC_BASE, entry0, entry1, tx_id);
+	xlp_message_send_block_fast_3(0, crypto_vc_base, entry0, entry1, tx_id);
 	timeout = 0;
 	do {
 		timeout++;
-		nlm_hal_recv_msg2(NLM_CRYPTO_SYNC_VC, &src, &size, &code, &entry0, &entry1);
+		nlm_hal_recv_msg2(ipsec_sync_vc, &src, &size, &code, &entry0, &entry1);
 	} while(entry0 != tx_id && timeout < 0xffffffff) ;
 	
 
diff --git a/drivers/crypto/sae/nlm_crypto.c b/drivers/crypto/sae/nlm_crypto.c
index f50eca6..42116d4 100644
--- a/drivers/crypto/sae/nlm_crypto.c
+++ b/drivers/crypto/sae/nlm_crypto.c
@@ -82,6 +82,9 @@ static int xlp_sae_open(struct inode *, struct file *);
 static int xlp_sae_release(struct inode *, struct file *);
 
 struct nlm_crypto_stat crypto_stat[MAX_CPU];
+int crypto_vc_base;
+int crypto_vc_limit;
+
 
 
 /*
@@ -413,10 +416,11 @@ int
 crypto_get_fb_vc(void)
 {
     int cpu;
-    extern int sae_rx_vc;
+    extern int ipsec_async_vc;
+
 
     cpu = hard_smp_processor_id();	//processor_id();
-    cpu = cpu * 4 + sae_rx_vc;
+    cpu = cpu * 4 + ipsec_async_vc;
 
     return cpu;
 }
@@ -542,22 +546,25 @@ nlm_crypto_init(void)
 	    ret = -EINVAL;
     }
 
+   nlm_hal_get_crypto_vc_nums(&crypto_vc_base, &crypto_vc_limit); 
+
     if (register_xlp_msgring_handler
 		    (XLP_MSG_HANDLE_CRYPTO, nlm_xlp_sae_msgring_handler, NULL)) {
 	    panic("can't register msgring handler for TX_STN_GMAC0");
     }
     reset_crypto_stats();
 
+
+
     return ret;
 }
 
     static int __init
 xlp_sae_init(void)
 {
-    extern int sae_rx_vc, sae_rx_sync_vc;
+    extern int ipsec_sync_vc;
+    extern int ipsec_async_vc;
     printk(KERN_ERR ",\n XLP SAE/Crypto Initialization \n");
-	printk("sae_rx_vc %d\n",sae_rx_vc);
-	printk("sae_rx_sync_vc %d\n",sae_rx_sync_vc);
 
     xlp_sae_major = register_chrdev(0, "NLM_XLP_SAE", &xlp_sae_fops);
     if (xlp_sae_major < 0) {
@@ -565,11 +572,18 @@ xlp_sae_init(void)
 	return xlp_sae_major;
     }
     //  printk (KERN_ERR ",XLP SAE MAJOR %d\n", xlp_sae_major);
-
+    if ( (ipsec_async_vc == 1) && (ipsec_sync_vc == -1) )  {
+		printk(KERN_ERR "XLP_SAE - cannot be loaeded,Please set ipsec-async-vc and ipsec-sync-vc in the dts file\n");
+    }
+	
     nlm_crypto_init();
     xlp_crypt_alg_init();
-    xlp_auth_alg_init();
     xlp_aead_alg_init();
+    if ( ipsec_sync_vc == -1 ) {
+	printk(KERN_ERR "Cannot perform auth operation, Please exclude ipsec_sync_vc from the node-vc-mask in dts\n");	
+	return 0;
+    }
+    xlp_auth_alg_init();
 
     return 0;
 }
diff --git a/drivers/crypto/sae/nlm_enc.c b/drivers/crypto/sae/nlm_enc.c
index d90b013..2d2dc93 100755
--- a/drivers/crypto/sae/nlm_enc.c
+++ b/drivers/crypto/sae/nlm_enc.c
@@ -33,6 +33,8 @@ THE POSSIBILITY OF SUCH DAMAGE.
 #include <crypto/ctr.h>
 #include "nlmcrypto.h"
 #include <nlm_hal_fmn.h>
+#include <asm/netlogic/hal/nlm_hal.h>
+
 
 /*#include <linux/pci.h>
 #include <linux/pci_ids.h>
@@ -308,7 +310,7 @@ xlp_crypt(struct ablkcipher_request *req, unsigned int enc, int iv_size, struct
 	async->args = &req->base;
 	async->stat = stat; 
 	async->bytes = req->nbytes; 
-	while( nlm_hal_send_msg3(NLM_CRYPTO_VC_BASE, 0 /*code */ , msg0, msg1, (unsigned long )async) != 0 );
+	while( nlm_hal_send_msg3(crypto_vc_base, 0 /*code */ , msg0, msg1, (unsigned long )async) != 0 );
 	return -EINPROGRESS;
 
 }
-- 
1.9.1

