From d48c4b0e5f4a7d15677aa017776a0798924f4c23 Mon Sep 17 00:00:00 2001
From: "P. Sadik" <psadik@broadcom.com>
Date: Wed, 19 Feb 2014 20:22:23 +0530
Subject: [PATCH 1206/1532] cleanup: Remove debug messages.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/misc/netlogic/nlm_cde/nlm_cde.c       | 12 ++++--------
 drivers/misc/netlogic/soc_interface/on_chip.c | 22 ++++++++--------------
 2 files changed, 12 insertions(+), 22 deletions(-)

diff --git a/drivers/misc/netlogic/nlm_cde/nlm_cde.c b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
index b930c7f..f572dd6 100644
--- a/drivers/misc/netlogic/nlm_cde/nlm_cde.c
+++ b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
@@ -270,7 +270,7 @@ static int send_free_desc(void)
 
 		if(is_nlm_xlp2xx())
 			status = send_message_1(MSGRNG_2XX_STNID_CMP1, &fd_msg);
-		else if(is_nlm_xlp9xx())	
+		else if(is_nlm_xlp9xx())
 			status = send_message_1(MSGRNG_9XX_STNID_CMP1, &fd_msg);
 		else
 			status = send_message_1(MSGRNG_STNID_CMP1, &fd_msg);
@@ -373,7 +373,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
 
 		//if (cpu_is_xlp9xx())
 		if (is_nlm_xlp9xx())
-		{	
+		{
 			stid = nlm_hal_9xxcde_make_cmp_msg((uint64_t*)&cmp_msg[i].msg0, (uint64_t*)&cmp_msg[i].msg1, 0, cmp_data->op, rtn_bkt,
 					cur_desc, (uint64_t)virt_to_phys(cmp_data->src_desc + desc_idx));
 #ifdef CDE_DEBUG
@@ -1069,7 +1069,7 @@ static void test()
 
 }
 #endif
-void xlp_cde_dev_initialize(void) 
+void xlp_cde_dev_initialize(void)
 {
 	int i =0;
 	unsigned int ret;
@@ -1080,7 +1080,7 @@ void xlp_cde_dev_initialize(void)
 	{
 		if(is_nlm_xlp9xx())
 			ret = nlm_hal_9xx_read_cde_reg(CMP_REG_RESET_REG(i));
-		else	
+		else
 			ret = nlm_hal_read_cde_reg(CMP_REG_RESET_REG(i));
 #ifdef CDE_DEBUG
 		printk("reset_reg = ret = %x\n", ret);
@@ -1123,14 +1123,11 @@ void xlp_cde_dev_initialize(void)
 //static struct class *dev_class;
 static int __init xlp_cde_init(void)
 {
-	printk(KERN_ERR ",\n XLP CDE Initialization \n");
-
 	xlp_cde_major = register_chrdev(0, "NLM_XLP_CDE", &xlp_cde_fops);
 	if (xlp_cde_major < 0) {
 		printk(KERN_ERR "XLP_CDE - cannot register device\n");
 		return xlp_cde_major;
 	}
-	printk (KERN_ERR ",XLP CDE MAJOR NUMBER %d\n", xlp_cde_major);
 #if 0
 	if(0){
 		dev_t dev = MKDEV(xlp_cde_major, 0);
@@ -1146,7 +1143,6 @@ static int __init xlp_cde_init(void)
 			(XLP_MSG_HANDLE_CMP, nlm_xlp_cde_msgring_handler, NULL)) {
 		panic("can't register msgring handler for XLP_MSG_HANDLE_CMP");
 	}
-	printk("xlp_cde_init done\n\n");
 	if(is_nlm_xlp2xx())
 		num_cde_engine = NUM_CDE_ENGINE_XLP2XX;
 	else if (cpu_is_xlp9xx())
diff --git a/drivers/misc/netlogic/soc_interface/on_chip.c b/drivers/misc/netlogic/soc_interface/on_chip.c
index 87ab320..b86c2cd 100644
--- a/drivers/misc/netlogic/soc_interface/on_chip.c
+++ b/drivers/misc/netlogic/soc_interface/on_chip.c
@@ -75,7 +75,7 @@ extern void *fdt;
 // EXPORT_SYMBOL(fdt);
 
 uint32_t msgring_global_thread_mask = 0;
-uint32_t nlm_cpu_vc_mask[NLM_MAX_CPU_NODE_9XX*NLM_MAX_CPU_PER_NODE_9XX] = {0}; 
+uint32_t nlm_cpu_vc_mask[NLM_MAX_CPU_NODE_9XX*NLM_MAX_CPU_PER_NODE_9XX] = {0};
 /* nlm_cpu_vc_mask is superset and will work in other chip type too. for eg in xlp8xx case it will use just 4x32 fields */
 
 uint32_t nlm_l1_lock[NR_CPUS/4] = {0};
@@ -374,7 +374,7 @@ static uint16_t xlp9xx_vc_to_handle_map[MAX_VC_9XX] = {
 	[1752 ... 1753] = XLP_MSG_HANDLE_INVALID,
 	[1754 ... 1755] = XLP_MSG_HANDLE_ALE,
 	[1756 ... 2047]= XLP_MSG_HANDLE_INVALID,
-	
+
 	/* NODE 2 */
 	[2048 ... 2063] = XLP_MSG_HANDLE_CPU0,
 	[2064 ... 2079] = XLP_MSG_HANDLE_CPU1,
@@ -424,7 +424,7 @@ static uint16_t xlp9xx_vc_to_handle_map[MAX_VC_9XX] = {
 	[2776 ... 2777] = XLP_MSG_HANDLE_INVALID,
 	[2778 ... 2779] = XLP_MSG_HANDLE_ALE,
 	[2780 ... 3071]= XLP_MSG_HANDLE_INVALID,
-	
+
 	/* NODE 3 */
 	[3072 ... 3087] = XLP_MSG_HANDLE_CPU0,
 	[3088 ... 3103] = XLP_MSG_HANDLE_CPU1,
@@ -474,7 +474,7 @@ static uint16_t xlp9xx_vc_to_handle_map[MAX_VC_9XX] = {
 	[3800 ... 3801] = XLP_MSG_HANDLE_INVALID,
 	[3802 ... 3803] = XLP_MSG_HANDLE_ALE,
 	[3804 ... 4095]= XLP_MSG_HANDLE_INVALID,
-	
+
 	/* NODE 4 */
 	[4096 ... 4111] = XLP_MSG_HANDLE_CPU0,
 	[4112 ... 4127] = XLP_MSG_HANDLE_CPU1,
@@ -839,7 +839,7 @@ void nlm_xlp_msgring_int_handler(unsigned int irq, struct pt_regs *regs)
 			for(vc = 0; vc < 4; vc++) {
 				if(!(vcmask & (1<<vc)))
 					continue;
-				/*Don't acknowledge MSG RING interrupt when 
+				/*Don't acknowledge MSG RING interrupt when
 				  intr_vc_handler returns 1*/
 				if(xlp_intr_vc_handler(vc) == 1){
 					pop_vc_mask = pop_vc_mask & ~(1<<vc);
@@ -1219,7 +1219,6 @@ static int xlp_napi_fmn_setup(void)
 	int weight_p = 300;
 
 	xlp_napi_vc_count = num_ones(xlp_napi_vc_mask);
-	printk("MSGRING_NAPI: Initializing NLM NAPI subsystem\n");
 
 	init_dummy_netdev(&xlp_napi_fmn_dummy_dev);
 
@@ -1267,7 +1266,6 @@ static int __init nlm_proc_setup(void)
         if (!nlm_root_proc)
                 return -ENOMEM;
 
-	pr_info("proc setup done\n");
         return 0;
 }
 
@@ -1319,7 +1317,7 @@ static void parse_fmn_config(void)
 void initialize_cpumask_new_9xx(int node, big_mask_t *onlinemask)
 {
 	onlinemask->map[node][0] = 0xffffffffffffffff;	/* 64 cpu */
-	onlinemask->map[node][1] = 0xffff;		/* 16 cpu */	
+	onlinemask->map[node][1] = 0xffff;		/* 16 cpu */
 }
 
 static void parse_fmn_config_9xx(void)
@@ -1428,7 +1426,6 @@ static void parse_fdt_sae_vc_config(void)
 
 		}
 	}
-	pr_info("parse fdt node %p\n", node);
 
 	return;
 }
@@ -1436,7 +1433,7 @@ static void parse_fdt_sae_vc_config(void)
 
 static long fmn_config(void *arg)
 {
-        pr_info("Doing fmn init from cpu %d for node %d fdt %p\n", hard_smp_processor_id(), (int)(long)arg, fdt);
+        pr_info("Doing fmn init from cpu %d for node %d\n", hard_smp_processor_id(), (int)(long)arg);
         nlm_hal_fmn_init(fdt, (int)(long)arg);
         return 0;
 }
@@ -1454,7 +1451,7 @@ static int __init nlm_fmn_init(void)
         /* Better to do node level fmn initialization */
 	fmn_owner_mask = get_dom_fmn_node_ownership(fdt, 0);
         if(fmn_owner_mask) {
-                for(node = 0; node < max_nodes; node++) 
+                for(node = 0; node < max_nodes; node++)
 		{
 			if(!(fmn_owner_mask & (1<<node)))
                                 continue;
@@ -1493,7 +1490,6 @@ static int __init on_chip_init(void)
 		pr_err("Null FDT blob\n");
 		return -ENODEV;
 	}
-	pr_info("Init at %p\n", fdt);
 	fdt_init(fdt);
 
 	cpumask_clear(&phys_cpu_present_map);
@@ -1510,10 +1506,8 @@ static int __init on_chip_init(void)
 	else {
 		parse_fmn_config();
 	}
-	pr_info("parse done\n");
 
 	parse_fdt_sae_vc_config();
-	pr_info("parse vc done\n");
 
 	/* Set netlogic_io_base to the run time value */
 #ifdef CONFIG_XLP_FMN_SUPPORT
-- 
1.9.1

