From bfa1f72916aeaee3de2d72a54836225e76599fb8 Mon Sep 17 00:00:00 2001
From: Venu Vadapalli <vvadapalli@netlogicmicro.com>
Date: Sat, 2 Oct 2010 18:00:48 -0700
Subject: [PATCH 1304/1532] Use atomic counters for free desc replenishment

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/broadcom/nae/xlp_nae.c | 42 ++++++++++++++++++-----------
 drivers/net/ethernet/broadcom/nae/xlp_nae.h |  6 ++---
 2 files changed, 29 insertions(+), 19 deletions(-)

diff --git a/drivers/net/ethernet/broadcom/nae/xlp_nae.c b/drivers/net/ethernet/broadcom/nae/xlp_nae.c
index 7dcc7cf..a8913e8 100755
--- a/drivers/net/ethernet/broadcom/nae/xlp_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlp_nae.c
@@ -65,8 +65,6 @@
 #define PCI_DEVID_BASE			0
 #define PCI_DEVID_OFF_NET		0
 
-#define MIN_FRIN_DESC_THRESHD		16
-
 #define MAX_NET_INF             	1
 #define MAX_GMAC_PORT               	18
 #define XLP_SGMII_RCV_CONTEXT_NUM	8
@@ -110,6 +108,10 @@ module_param(naecfg_hack, int, 0);
  */
 int netif_ports = 0;
 uint32_t max_num_desc = 32;
+/* Keep this 3/4th of max_num_desc. This gets initialized after
+ * FDT processing
+ */
+uint32_t frin_desc_thres = 24;
 uint32_t nae_rx_vc = 0;
 uint32_t nae_fb_vc = 0;
 /***************************************************************/
@@ -327,10 +329,9 @@ static void mac_refill_frin_desc(unsigned long dev)
 	priv = netdev_priv(ndev);
 	ret = 0;
 
-	priv->num_replenishes++;
+	atomic64_inc(&priv->num_replenishes);
 
-	/* TODO ALERT: priv->num_desc access needs to atomic */
-	limit = max_num_desc - priv->num_desc;
+	limit = atomic64_read(&priv->frin_to_be_sent);
 
 	for(i = 0; i < limit; i++)
 	{
@@ -362,8 +363,10 @@ static void mac_refill_frin_desc(unsigned long dev)
 			goto retry_send;
                 }
 		msgrng_access_disable(mflags);
-		priv->num_desc += 1;
-		priv->frin_sent++;
+
+		atomic64_dec(&priv->frin_to_be_sent);
+
+		atomic64_inc(&priv->total_frin_sent);
 	}
         return;
 }
@@ -395,6 +398,9 @@ static void nlm_xlp_nae_init(void)
 
 	initialize_nae();
 
+	/* max_num_desc is set through FDT */
+	frin_desc_thres = (max_num_desc * 3) / 4;
+
 	for(i = 0; i < netif_ports; i++)
 	{
 		dev = alloc_etherdev(sizeof(struct dev_data));
@@ -414,9 +420,11 @@ static void nlm_xlp_nae_init(void)
 
 		dev->dev_addr = eth_hw_addr[i];
 		priv->port	= i;
-		priv->num_desc  = 0;
-		priv->num_replenishes = 0;
-		priv->frin_sent  = 0;
+
+		atomic64_set(&priv->frin_to_be_sent, max_num_desc);
+		atomic64_set(&priv->num_replenishes, 0);
+		atomic64_set(&priv->total_frin_sent, 0);
+
 		priv->inited	= 0;
 		priv->block 	=(i & 0xff) >> 2;
 		priv->index 	= i & 0x3;
@@ -427,7 +435,7 @@ static void nlm_xlp_nae_init(void)
 		dev_mac_type[priv->type][priv->port] = dev;
 		dev_mac[i] = dev;
 
-		tasklet_init(&mac_refill_task[priv->port],mac_refill_frin_desc,(unsigned long)dev);
+		tasklet_init(&mac_refill_task[priv->port], mac_refill_frin_desc,(unsigned long)dev);
 	}
 
 	entry = create_proc_read_entry("mac_stats", 0 /* def mode */ ,
@@ -859,8 +867,7 @@ static void nlm_xlp_nae_msgring_handler(uint32_t vc, uint32_t src_id,
 			priv->stats.rx_packets++;
 			priv->cpu_stats[cpu].rx_packets++;
 
-			priv->num_desc -= 1;
-			if( priv->num_desc < MIN_FRIN_DESC_THRESHD)
+			if (atomic64_inc_return(&priv->frin_to_be_sent) > frin_desc_thres);
 			{
 				tasklet_schedule(&mac_refill_task[port]);
 				//mac_refill_frin_desc((unsigned long) skb->dev) ;
@@ -909,8 +916,10 @@ static int xlp_mac_proc_read(char *page, char **start, off_t off,
 
 		priv = netdev_priv(dev);
 
-		len += sprintf(page + len, "per port@%d: num_desc = %ld num_replenishes = %ld frin_sent = %ld\n",
-			       i, priv->num_desc, priv->num_replenishes, priv->frin_sent);
+		len += sprintf(page + len, "per port@%d: frin_to_be_sent = %ld num_replenishes = %ld frin_sent = %ld\n",
+			       i, atomic64_read(&priv->frin_to_be_sent),
+			       atomic64_read(&priv->num_replenishes),
+			       atomic64_read(&priv->total_frin_sent));
 
 		len += sprintf(page + len,
 			       "per port@%d: %lu(rxp) %lu(rxb) %lu(txp) %lu(txb)\n",
@@ -943,7 +952,6 @@ static int xlp_mac_proc_read(char *page, char **start, off_t off,
 	return len;
 }
 
-
 extern void nlm_xlp_msgring_int_handler(unsigned int irq, struct pt_regs *regs);
 /**********************************************************************
  * nlm_xlp_mac_timer - interrupt handler routine
@@ -956,6 +964,8 @@ static void nlm_xlp_mac_timer(unsigned long data)
         struct dev_data *priv = netdev_priv(dev);
         int next_tick = HZ / 100; /* 10ms */
 
+	//if (port == 0) mac_refill_frin_desc((unsigned long)dev) ;
+
 	/* printk("[%s] A0 Workaround, forcing FMN int handling \n",__func__); */
 	nlm_xlp_msgring_int_handler(IRQ_MSGRING, NULL);
 
diff --git a/drivers/net/ethernet/broadcom/nae/xlp_nae.h b/drivers/net/ethernet/broadcom/nae/xlp_nae.h
index bddbb96..3b3d480 100644
--- a/drivers/net/ethernet/broadcom/nae/xlp_nae.h
+++ b/drivers/net/ethernet/broadcom/nae/xlp_nae.h
@@ -64,9 +64,9 @@ struct dev_data
         unsigned short type;
         struct sk_buff* skb;
         int phy_oldlinkstat;
-        unsigned long num_desc;
-	unsigned long num_replenishes;
-	unsigned long frin_sent;
+        atomic64_t frin_to_be_sent;
+	atomic64_t num_replenishes;
+	atomic64_t total_frin_sent;
         __u8 hwaddr[6];
 
         xlp_mac_speed_t speed;  /* current speed */
-- 
1.9.1

