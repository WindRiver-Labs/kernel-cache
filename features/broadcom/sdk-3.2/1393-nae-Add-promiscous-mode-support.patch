From 7956f2dd6ab3f813b555b7fdaaba29d84d35c90c Mon Sep 17 00:00:00 2001
From: kopal <kopal@broadcom.com>
Date: Thu, 31 Jan 2013 16:34:41 +0530
Subject: [PATCH 1393/1532] nae: Add promiscous mode support.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/broadcom/nae/xlpge_nae.c | 67 +++++++++++++++++++++------
 1 file changed, 52 insertions(+), 15 deletions(-)

diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
index 0b14f64..15a1f93 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
@@ -661,7 +661,6 @@ void nlm_xlp_mac_set_enable(struct dev_data *priv, int flag)
 	uint32_t speed = 0, duplex = 0, ifmode = 0;
 	uint32_t netwk_inf = 0, mac_cfg2 = 0;
 	struct nlm_hal_mii_info mii_info;
-
 	if ((priv->type != SGMII_IF) && (priv->type != XAUI_IF))
 		return;
 	switch (priv->type) {
@@ -686,7 +685,7 @@ void nlm_xlp_mac_set_enable(struct dev_data *priv, int flag)
 				ifmode = ((speed == 2) ? 2: 1);
 				nlm_hal_mac_disable(priv->node, inf,
 					priv->type);
-			        netwk_inf  = read_gmac_reg(priv->node, inf,
+				netwk_inf  = read_gmac_reg(priv->node, inf,
 					NETWK_INF_CTRL_REG);
 				netwk_inf &= (~(0x3));
 				write_gmac_reg(priv->node, inf,
@@ -902,7 +901,7 @@ int mac_refill_frin_skb(int node, int cpu, uint64_t paddr,
 	/* Send the free Rx desc to the MAC */
 	code = 0;
 
-	/* Send the packet to nae rx  */
+	//* Send the packet to nae rx  */
 	msgrng_access_enable(mflags);
 	for (;;) {
 	  ret = nlm_hal_send_msg1(qid, code, (paddr & 0xffffffffffULL));
@@ -951,7 +950,6 @@ static int  nlm_xlp_nae_open (struct net_device *dev)
 	int ret = 0;
 	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
 	static int done = 0;
-
 	if (perf_mode == NLM_TCP_MODE) {
 #ifdef TSO_ENABLED
 		tso_enable(dev, 1);
@@ -1032,21 +1030,53 @@ static int  nlm_xlp_nae_stop (struct net_device *dev)
  **********************************************************************/
 static void  nlm_xlp_set_multicast_list (struct net_device *dev)
 {
-	if (dev->flags & IFF_ALLMULTI) {
-		/*
-		 * Enable ALL multicasts.  Do this by inverting the
-		 * multicast enable bit.
-		 */
-		return;
+	struct dev_data *priv = netdev_priv(dev);
+        int reg_val=0;
+	
+	if ((dev->flags & IFF_PROMISC)) {
+		reg_val=nlm_hal_read_mac_reg(priv->node, priv->block, priv->index,
+						MAC_FILTER_CONFIG);
+		reg_val |= ((1 << MAC_FILTER_MCAST_EN_POS)|
+						(1 << MAC_FILTER_ALL_UCAST_EN));
+		nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+                	                        MAC_FILTER_CONFIG,reg_val);
+		
+		reg_val=nlm_hal_read_mac_reg(priv->node, priv->block, priv->index,
+						NETIOR_VLANTYPE_FILTER);
+		reg_val &= ~(1<<VLAN_RxPAC);
+        	nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+						NETIOR_VLANTYPE_FILTER,reg_val);	
 	}
+	else {
+		reg_val=nlm_hal_read_mac_reg(priv->node, priv->block, priv->index,
+                        		        MAC_FILTER_CONFIG);
+		if(dev->flags & IFF_ALLMULTI) {
+			reg_val |= (1<<MAC_FILTER_MCAST_EN_POS);
+			reg_val &= ~(1<<MAC_FILTER_ALL_UCAST_EN);
+			nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+                          			MAC_FILTER_CONFIG,reg_val);
+		}
+		else {
+			reg_val &= ~((1<<MAC_FILTER_MCAST_EN_POS)|(1 << MAC_FILTER_ALL_UCAST_EN));
+			nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+                                MAC_FILTER_CONFIG,reg_val);
+		}
+	
+        	reg_val  = nlm_hal_read_mac_reg(priv->node, priv->block, priv->index,
+						NETIOR_VLANTYPE_FILTER);
+		reg_val |= (1<<VLAN_RxPAC);
+        	nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+						NETIOR_VLANTYPE_FILTER,reg_val);
+	}	
 	return;
 }
 
 static void xlp_mac_setup_hwaddr(struct dev_data *priv)
 {
         struct net_device *dev = priv->dev;
-
-        nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+	int reg_val=0;
+	
+	nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
 				MAC_ADDR0_LO,
 				(dev->dev_addr[5] << 24) |
 				(dev->dev_addr[4] << 16) |
@@ -1065,11 +1095,17 @@ static void xlp_mac_setup_hwaddr(struct dev_data *priv)
 				MAC_ADDR0_MASK_HI,
 				0xFFFFFFFF);
 
-        nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+        
+	nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
 				MAC_FILTER_CONFIG,
 				(1 << MAC_FILTER_BCAST_EN_POS) |
-				(1 << MAC_FILTER_MCAST_EN_POS) |
-				(1 << MAC_FILTER_ADDR0_VALID_POS));
+                                (1 << MAC_FILTER_ADDR0_VALID_POS));
+                                					
+	reg_val=nlm_hal_read_mac_reg(priv->node, priv->block, priv->index,
+				NETIOR_VLANTYPE_FILTER);
+        reg_val |=(1<<VLAN_RxPAC);
+        nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+				NETIOR_VLANTYPE_FILTER,reg_val);	
 
 }
 
@@ -1453,3 +1489,4 @@ void nlm_xlp_nae_init(void)
 	if (enable_napi)
 		nlm_xlp_enable_napi();
 }
+	
-- 
1.9.1

