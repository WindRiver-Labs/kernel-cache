From dfbe626916109c471f7a658abdd9d9dc5c9fa646 Mon Sep 17 00:00:00 2001
From: Jayachandran C <jchandra@broadcom.com>
Date: Tue, 17 Jun 2014 05:05:10 +0530
Subject: [PATCH 0112/1532] cache: do aggressive icache flush

Hookup flush page and flush range for XLP
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/mm/c-netlogic.c | 35 ++++++++++++++++++++---------------
 1 file changed, 20 insertions(+), 15 deletions(-)

diff --git a/arch/mips/mm/c-netlogic.c b/arch/mips/mm/c-netlogic.c
index 3fd3052..b83516d 100644
--- a/arch/mips/mm/c-netlogic.c
+++ b/arch/mips/mm/c-netlogic.c
@@ -91,6 +91,8 @@ static inline void cacheop_sync_istream(void)
 
 #endif /* CONFIG_CPU_XLR */
 
+static int icache_size, dcache_size;
+
 static inline void nlm_flush_l1_icache(void)
 {
 	blast_icache32();
@@ -99,7 +101,7 @@ static inline void nlm_flush_l1_icache(void)
 
 static inline void nlm_flush_l1_icache_page(void *addr)
 {
-	blast_icache32_page((unsigned long)addr);
+	blast_icache32();
 	cacheop_sync_istream();
 }
 
@@ -161,7 +163,7 @@ static inline void nlm_flush_l1_dcache(void)
 static inline void nlm_flush_l1_dcache_page(void *addr)
 {
 	if (cpu_is_xlpii())
-		blast_dcache32_page((unsigned long)addr);
+		blast_dcache32();
 	else
 		nlm_flush_l1_dcache_hack();
 
@@ -171,7 +173,7 @@ static inline void nlm_flush_l1_dcache_page(void *addr)
 static inline void nlm_flush_l1_dcache_range(unsigned long vaddr, int size)
 {
 	if (cpu_is_xlpii())
-		blast_dcache_range(vaddr, vaddr + size);
+		blast_dcache32();
 	else
 		nlm_flush_l1_dcache_hack();
 
@@ -215,7 +217,8 @@ static inline void local_nlm_flush_cache_range(void *args)
 	if (!(has_valid_asid(vma->vm_mm)))
 		return;
 
-	nlm_flush_l1_dcache();
+	if (cpu_has_dc_aliases)
+		nlm_flush_l1_dcache();
 
 	if (exec)
 		nlm_flush_l1_icache();
@@ -227,7 +230,7 @@ static void nlm_flush_cache_range(struct vm_area_struct *vma,
 {
 	int exec = vma->vm_flags & VM_EXEC;
 
-	if (cpu_has_dc_aliases || (exec && !cpu_has_ic_fills_f_dc))
+	if (cpu_has_dc_aliases || exec)
 		on_each_cpu(local_nlm_flush_cache_range, vma, 1);
 }
 
@@ -244,7 +247,8 @@ static inline void local_nlm_flush_cache_page(void *args)
 
 	addr &= PAGE_MASK;
 
-	nlm_flush_l1_dcache_page((void *)addr);
+	if (cpu_has_dc_aliases)
+		nlm_flush_l1_dcache_page((void *)addr);
 
 	if (exec)
 		nlm_flush_l1_icache_page((void *)addr);
@@ -255,6 +259,9 @@ static void nlm_flush_cache_page(struct vm_area_struct *vma,
 {
 	struct flush_cache_page_args args;
 
+	if ((vma->vm_flags & VM_EXEC) == 0 && !cpu_has_dc_aliases)
+		return;
+
 	args.vma = vma;
 	args.addr = addr;
 	args.pfn = pfn;
@@ -314,12 +321,10 @@ static void nlm_flush_cache_vmap_range(unsigned long vaddr, int size)
 
 static void nlm_local_flush_icache_range(unsigned long start, unsigned long end)
 {
-	unsigned long addr;
-	int icache_linesz = cpu_icache_line_size();
-
-	start &= ~((unsigned long)(icache_linesz - 1));
-	for (addr = start; addr < end; addr += icache_linesz)
-		protected_flush_icache_line(addr);
+	if (end - start > icache_size)
+		blast_icache32();
+	else
+		protected_blast_icache_range(start, end);
 	cacheop_sync_istream();
 }
 
@@ -377,7 +382,7 @@ static __cpuinit void probe_l1_cache(void)
 {
 	struct cpuinfo_mips *c = &current_cpu_data;
 	unsigned int config1 = read_c0_config1();
-	int lsize, icache_size, dcache_size;
+	int lsize;
 
 	lsize = (config1 >> 19) & 7;
 	if (lsize != 0)
@@ -506,8 +511,8 @@ void __cpuinit nlm_cache_init(void)
 #endif
 	{
 		flush_cache_mm = (void (*)(struct mm_struct *))nlm_noflush;
-		flush_cache_range = (void *) nlm_noflush;
-		flush_cache_page = (void *) nlm_noflush;
+		flush_cache_range = (void *) nlm_flush_cache_range;
+		flush_cache_page = (void *) nlm_flush_cache_page;
 
 		/*
 		 * flush_icache_page: flush_dcache_page + update_mmu_cache
-- 
1.9.1

