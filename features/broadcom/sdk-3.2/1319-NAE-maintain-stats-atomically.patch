From 87993da8077d3ec930580c6a174d53376b473ab0 Mon Sep 17 00:00:00 2001
From: Zi Shen Lim <zlim@netlogicmicro.com>
Date: Thu, 9 Dec 2010 14:22:42 -0800
Subject: [PATCH 1319/1532] NAE: maintain stats atomically

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/broadcom/nae/xlp_nae.c | 60 ++++++++++++++++++-----------
 1 file changed, 38 insertions(+), 22 deletions(-)

diff --git a/drivers/net/ethernet/broadcom/nae/xlp_nae.c b/drivers/net/ethernet/broadcom/nae/xlp_nae.c
index d807ae1..57064dd 100755
--- a/drivers/net/ethernet/broadcom/nae/xlp_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlp_nae.c
@@ -62,6 +62,20 @@
 #include "net_common.h"
 #include "xlp_nae.h"
 
+#if 1
+#include <asm/atomic.h>
+
+#define STATS_SET(x,v)  atomic64_set((atomic64_t *)&(x), (v))
+#define STATS_ADD(x,v)  atomic64_add((long)(v), (atomic64_t *)&(x))
+#define STATS_INC(x)    atomic64_inc((atomic64_t *)&(x))
+#define STATS_READ(x)   atomic64_read((atomic64_t *)&(x))
+#else
+#define STATS_SET(x,v)  do { (x) = (v); } while (0)
+#define STATS_ADD(x,v)  do { (x) += (v); } while (0)
+#define STATS_INC(x)    do { (x) += 1; } while (0)
+#define STATS_READ(x)   (x)
+#endif
+
 #define XLP_SOC_MAC_DRIVER "XLP Mac Driver"
 
 /* On-Chip NAE PCI Header */
@@ -300,8 +314,8 @@ static inline void nlm_xlp_free_skb(struct xlp_msg *msg)
 
 	/* release the skb and update statistics outside the spinlock */
 	priv = netdev_priv(skb->dev);
-	priv->stats.tx_packets++;
-	priv->stats.tx_bytes += skb->len;
+	STATS_INC(priv->stats.tx_packets);
+	STATS_ADD(priv->stats.tx_bytes, skb->len);
 	priv->cpu_stats[cpu].txc_packets++;
 
 
@@ -506,16 +520,16 @@ static int  nlm_xlp_nae_open (struct net_device *dev)
 
 /*	napi_enable(&priv->napi);*/
 
-	priv->stats.tx_packets	= 0;
-	priv->stats.tx_errors	= 0;
-	priv->stats.tx_bytes	= 0;
-	priv->stats.tx_dropped	= 0;
-	priv->stats.rx_packets	= 0;
-	priv->stats.rx_errors	= 0;
-	priv->stats.rx_bytes	= 0;
-	priv->stats.rx_dropped	= 0;
-	priv->stats.multicast	= 0;
-	priv->stats.collisions	= 0;
+	STATS_SET(priv->stats.tx_packets, 0);
+	STATS_SET(priv->stats.tx_errors, 0);
+	STATS_SET(priv->stats.tx_bytes, 0);
+	STATS_SET(priv->stats.tx_dropped, 0);
+	STATS_SET(priv->stats.rx_packets, 0);
+	STATS_SET(priv->stats.rx_errors, 0);
+	STATS_SET(priv->stats.rx_bytes, 0);
+	STATS_SET(priv->stats.rx_dropped, 0);
+	STATS_SET(priv->stats.multicast, 0);
+	STATS_SET(priv->stats.collisions, 0);
 
 	for(i = 0; i < NR_CPUS; i++)
 	{
@@ -610,8 +624,8 @@ static int nlm_xlp_nae_start_xmit(struct sk_buff *skb, struct net_device *dev)
 	msgrng_access_disable(mflags);
 	dev->trans_start = jiffies;
 
-	priv->stats.tx_bytes += skb->len;
-	priv->stats.tx_packets++;
+	STATS_ADD(priv->stats.tx_bytes, skb->len);
+	STATS_INC(priv->stats.tx_packets);
 	priv->cpu_stats[cpu].tx_packets++;
 
 	return NETDEV_TX_OK;
@@ -861,8 +875,8 @@ static void nlm_xlp_nae_msgring_handler(uint32_t vc, uint32_t src_id,
 
 		skb = mac_get_skb_back_ptr(vaddr);
 		if (!skb) {
-			priv->stats.rx_errors++;
-			priv->stats.rx_dropped++;
+			STATS_INC(priv->stats.rx_errors);
+			STATS_INC(priv->stats.rx_dropped);
 			printk("[%s] Null skb? addr=%llx, vaddr=%llx, drop it!\n",
 			       __func__, addr, vaddr);
 			cpu_halt();
@@ -884,8 +898,8 @@ static void nlm_xlp_nae_msgring_handler(uint32_t vc, uint32_t src_id,
 		}
 
 		if (bad_pkt) {
-			priv->stats.rx_errors++;
-			priv->stats.rx_dropped++;
+			STATS_INC(priv->stats.rx_errors);
+			STATS_INC(priv->stats.rx_dropped);
 
 			dev_kfree_skb_any(skb);
 			goto out;
@@ -900,8 +914,8 @@ static void nlm_xlp_nae_msgring_handler(uint32_t vc, uint32_t src_id,
 		netif_rx (skb);
 
 		/* Update Stats */
-		priv->stats.rx_bytes += len;
-		priv->stats.rx_packets++;
+		STATS_ADD(priv->stats.rx_bytes, len);
+		STATS_INC(priv->stats.rx_packets);
 		priv->cpu_stats[cpu].rx_packets++;
 
 	out:
@@ -952,8 +966,10 @@ static int xlp_mac_proc_read(char *page, char **start, off_t off,
 		len += sprintf(page + len,
 			       "per port@%d: %lu(rxp) %lu(rxb) %lu(txp) %lu(txb)\n",
 			       i,
-			       priv->stats.rx_packets, priv->stats.rx_bytes,
-			       priv->stats.tx_packets, priv->stats.tx_bytes);
+			       STATS_READ(priv->stats.rx_packets),
+			       STATS_READ(priv->stats.rx_bytes),
+			       STATS_READ(priv->stats.tx_packets),
+			       STATS_READ(priv->stats.tx_bytes));
 
 		for (cpu = 0; cpu < NR_CPUS ; cpu++) {
 			unsigned long tx = priv->cpu_stats[cpu].tx_packets;
-- 
1.9.1

