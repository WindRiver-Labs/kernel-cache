From 9e72a8ff038ee867eefa2eb12b06fd95841390f4 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Thu, 8 Mar 2012 18:09:13 +0530
Subject: [PATCH 1491/1532] Crypto virt_to_phys prototype change

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/crypto/sae/nlm_aead.c      | 48 +++++++++++++++++++-------------------
 drivers/crypto/sae/nlm_auth.c      |  8 +++----
 drivers/crypto/sae/nlm_enc.c       | 12 +++++-----
 drivers/crypto/sae/nlmcrypto_ifc.h | 20 ++++++++++++++++
 4 files changed, 54 insertions(+), 34 deletions(-)

diff --git a/drivers/crypto/sae/nlm_aead.c b/drivers/crypto/sae/nlm_aead.c
index 5b639b2..a7f80a0 100755
--- a/drivers/crypto/sae/nlm_aead.c
+++ b/drivers/crypto/sae/nlm_aead.c
@@ -679,8 +679,8 @@ int fill_aead_aad(struct nlm_crypto_pkt_param *param, struct aead_request *req,
 		scatterwalk_start(&walk, sg);
 		//virt = scatterwalk_map(&walk, 1);
 		virt = page_address(scatterwalk_page(&walk)) + offset_in_page(walk.offset);
-		nlm_crypto_fill_src_seg(param, seg, virt, len);
-		nlm_crypto_fill_dst_seg(param, seg, virt, len);
+		nlm_crypto_fill_src_seg(param, seg, MAX_FRAGS, virt, len);
+		nlm_crypto_fill_dst_seg(param, seg, MAX_FRAGS, virt, len);
 		aad_len -= len;
 	}
 	return seg;
@@ -703,8 +703,8 @@ int fill_aead_crypt(struct aead_request *req, unsigned int cipher_len,
 			len = min(cipher_len, sg->length);
 			scatterwalk_start(&walk, sg);
 			virt = page_address(scatterwalk_page(&walk)) + offset_in_page(walk.offset);
-			nlm_crypto_fill_src_seg(param, seg + index, virt, len);
-			nlm_crypto_fill_dst_seg(param, seg + index, virt, len);
+			nlm_crypto_fill_src_seg(param, seg + index, MAX_FRAGS, virt, len);
+			nlm_crypto_fill_dst_seg(param, seg + index, MAX_FRAGS, virt, len);
 			cipher_len -= len;
 		}
 		*actual_tag = virt + len;
@@ -717,7 +717,7 @@ int fill_aead_crypt(struct aead_request *req, unsigned int cipher_len,
 		len = min(cipher_len, sg->length);
 		scatterwalk_start(&walk, sg);
 		virt = page_address(scatterwalk_page(&walk)) + offset_in_page(walk.offset);
-		nlm_crypto_fill_src_seg(param, seg + index, virt, len);
+		nlm_crypto_fill_src_seg(param, seg + index, MAX_FRAGS, virt, len);
 		cipher_len -= len;
 	}
 
@@ -731,7 +731,7 @@ int fill_aead_crypt(struct aead_request *req, unsigned int cipher_len,
 		len = min(cipher_len, sg->length);
 		scatterwalk_start(&walk, sg);
 		virt = page_address(scatterwalk_page(&walk)) + offset_in_page(walk.offset);
-		nlm_crypto_fill_dst_seg(param, seg + index, virt, len);
+		nlm_crypto_fill_dst_seg(param, seg + index, MAX_FRAGS, virt, len);
 		cipher_len -= len;
 	}
 
@@ -853,8 +853,8 @@ static int aead_crypt_gcm(struct aead_request *req, unsigned int op)
 	hash_source = (op) ? 0 : 1;
 
 	/*Setup NONCE_IV_CTR COMBO*/
-	nlm_crypto_fill_src_seg(param, seg, iv, iv_size);
-	nlm_crypto_fill_dst_seg(param, seg, iv, iv_size);
+	nlm_crypto_fill_src_seg(param, seg, MAX_FRAGS, iv, iv_size);
+	nlm_crypto_fill_dst_seg(param, seg, MAX_FRAGS, iv, iv_size);
 	seg++;
 	
 	/*Setup AAD - SPI/SEQ Number*/
@@ -998,8 +998,8 @@ static int aead_crypt_ccm(struct aead_request *req, unsigned int op)
 
 
 	/*Setup ENCRYPTION IV*/
-	nlm_crypto_fill_src_seg(param, seg, iv, iv_size);
-	nlm_crypto_fill_dst_seg(param, seg, iv, iv_size);
+	nlm_crypto_fill_src_seg(param, seg, MAX_FRAGS, iv, iv_size);
+	nlm_crypto_fill_dst_seg(param, seg, MAX_FRAGS, iv, iv_size);
 	seg++;
 
 	/*	7            Reserved (always zero)
@@ -1029,8 +1029,8 @@ static int aead_crypt_ccm(struct aead_request *req, unsigned int op)
 	/*Setup AUTH IV*/
 	*(uint32_t*)&auth_iv[12] |= (uint32_t )cipher_len;
 
-	nlm_crypto_fill_src_seg(param, seg,auth_iv,auth_iv_frag_len);
-	nlm_crypto_fill_dst_seg(param, seg,auth_iv,auth_iv_frag_len);
+	nlm_crypto_fill_src_seg(param, seg,MAX_FRAGS, auth_iv,auth_iv_frag_len);
+	nlm_crypto_fill_dst_seg(param, seg,MAX_FRAGS, auth_iv,auth_iv_frag_len);
 	seg++;
 
 	//one for cipher iv one for auth iv
@@ -1049,8 +1049,8 @@ static int aead_crypt_ccm(struct aead_request *req, unsigned int op)
 		if ( extralen ) {
 			extralen = AES_BLOCK_SIZE - extralen;
 			memset(auth_iv + 22,0,extralen);
-			nlm_crypto_fill_src_seg(param,seg,(auth_iv+22),extralen);
-			nlm_crypto_fill_dst_seg(param,seg,(auth_iv+22),extralen);
+			nlm_crypto_fill_src_seg(param,seg,MAX_FRAGS, (auth_iv+22),extralen);
+			nlm_crypto_fill_dst_seg(param,seg,MAX_FRAGS, (auth_iv+22),extralen);
 			seg++;
 			cipher_off += extralen;
 		}
@@ -1065,8 +1065,8 @@ static int aead_crypt_ccm(struct aead_request *req, unsigned int op)
 	if ( extralen ) {
 		extralen = AES_BLOCK_SIZE - extralen;
 		memset(auth_iv + 38,0,extralen);
-		nlm_crypto_fill_src_seg(param,seg,(auth_iv+38),extralen);
-		nlm_crypto_fill_dst_seg(param,seg,(auth_iv+38),extralen);
+		nlm_crypto_fill_src_seg(param,seg,MAX_FRAGS, (auth_iv+38),extralen);
+		nlm_crypto_fill_dst_seg(param,seg,MAX_FRAGS, (auth_iv+38),extralen);
 		seg++;
 	}
 	auth_len = cipher_off + cipher_len - 16 + extralen; 
@@ -1176,8 +1176,8 @@ static int aead_crypt_ctr(struct aead_request *req, unsigned int op)
 	cipher_len = op ? req->cryptlen:req->cryptlen - authsize;
 	auth_len = cipher_off - auth_off + cipher_len;
 	hash_source = op;
-	nlm_crypto_fill_src_seg(param, seg, iv, CTR_RFC3686_BLOCK_SIZE);
-	nlm_crypto_fill_dst_seg(param, seg, iv, CTR_RFC3686_BLOCK_SIZE);
+	nlm_crypto_fill_src_seg(param, seg, MAX_FRAGS, iv, CTR_RFC3686_BLOCK_SIZE);
+	nlm_crypto_fill_dst_seg(param, seg, MAX_FRAGS, iv, CTR_RFC3686_BLOCK_SIZE);
 	seg++;
 
 	seg = fill_aead_aad(param, req, req->assoclen,seg);
@@ -1185,8 +1185,8 @@ static int aead_crypt_ctr(struct aead_request *req, unsigned int op)
 		return -1;
 
 	if (ivsize) {
-		nlm_crypto_fill_src_seg(param, seg, iv+CTR_RFC3686_NONCE_SIZE, ivsize);
-		nlm_crypto_fill_dst_seg(param, seg, iv+CTR_RFC3686_NONCE_SIZE, ivsize);
+		nlm_crypto_fill_src_seg(param, seg, MAX_FRAGS, iv+CTR_RFC3686_NONCE_SIZE, ivsize);
+		nlm_crypto_fill_dst_seg(param, seg, MAX_FRAGS, iv+CTR_RFC3686_NONCE_SIZE, ivsize);
 		seg++;
 	}
 
@@ -1293,8 +1293,8 @@ static int aead_crypt_3des(struct aead_request *req, unsigned int op)
 	seg = nr_aad_frags;
 
 	if (ivsize) {
-		nlm_crypto_fill_src_seg(param, seg, req->iv, ivsize);
-		nlm_crypto_fill_dst_seg(param, seg, req->iv, ivsize);
+		nlm_crypto_fill_src_seg(param, seg, MAX_FRAGS, req->iv, ivsize);
+		nlm_crypto_fill_dst_seg(param, seg, MAX_FRAGS, req->iv, ivsize);
 		seg++;
 	}
 
@@ -1421,8 +1421,8 @@ static int aead_crypt(struct aead_request *req, unsigned int op)
 	seg = nr_aad_frags;
 
 	if (ivsize) {
-		nlm_crypto_fill_src_seg(param, seg, req->iv, ivsize);
-		nlm_crypto_fill_dst_seg(param, seg, req->iv, ivsize);
+		nlm_crypto_fill_src_seg(param, seg, MAX_FRAGS, req->iv, ivsize);
+		nlm_crypto_fill_dst_seg(param, seg, MAX_FRAGS, req->iv, ivsize);
 		seg++;
 	}
 
diff --git a/drivers/crypto/sae/nlm_auth.c b/drivers/crypto/sae/nlm_auth.c
index aec0088..474dbb5 100644
--- a/drivers/crypto/sae/nlm_auth.c
+++ b/drivers/crypto/sae/nlm_auth.c
@@ -219,8 +219,8 @@ xlp_auth_update(struct shash_desc *desc,
 	}
 
 	memcpy(data_index,data,length);
-	nlm_crypto_fill_src_seg(pkt_param, index, data_index, length);
-	auth_pkt_desc->curr_index = nlm_crypto_fill_dst_seg(pkt_param, index , data_index, length);
+	nlm_crypto_fill_src_seg(pkt_param, index, MAX_FRAGS, data_index, length);
+	auth_pkt_desc->curr_index = nlm_crypto_fill_dst_seg(pkt_param, index , MAX_FRAGS, data_index, length);
 
 	return 0;
 }
@@ -355,8 +355,8 @@ int hash_key(int alg, int mode, const uint8_t * key, unsigned int keylen, uint8_
 	memcpy(tmp_key,key,keylen);
         nlm_crypto_fill_pkt_ctrl(ctrl,0,alg,mode,0,0,0,NULL,0,NULL,0);
         nlm_crypto_fill_auth_pkt_param(ctrl,pkt_param,0,keylen,0,new_key);
-        nlm_crypto_fill_src_seg(pkt_param,0,tmp_key,keylen);
-        nlm_crypto_fill_dst_seg(pkt_param,0,tmp_key,keylen);
+        nlm_crypto_fill_src_seg(pkt_param,0,MAX_FRAGS,tmp_key,keylen);
+        nlm_crypto_fill_dst_seg(pkt_param,0,MAX_FRAGS,tmp_key,keylen);
 
 
 	msgrng_access_enable(msgrng_flags);
diff --git a/drivers/crypto/sae/nlm_enc.c b/drivers/crypto/sae/nlm_enc.c
index 6ff52c2..1f17c73 100755
--- a/drivers/crypto/sae/nlm_enc.c
+++ b/drivers/crypto/sae/nlm_enc.c
@@ -262,8 +262,8 @@ xlp_crypt(struct ablkcipher_request *req, unsigned int enc, int iv_size, struct
 
 	nlm_crypto_fill_cipher_pkt_param(ctrl, pkt_param, enc,0,iv_size,iv_size ,req->nbytes); 
 
-	nlm_crypto_fill_src_seg(pkt_param,seg,(unsigned char *)req->info,iv_size);
-	nlm_crypto_fill_dst_seg(pkt_param,seg,(unsigned char *)req->info,iv_size);
+	nlm_crypto_fill_src_seg(pkt_param,seg,MAX_FRAGS,(unsigned char *)req->info,iv_size);
+	nlm_crypto_fill_dst_seg(pkt_param,seg,MAX_FRAGS,(unsigned char *)req->info,iv_size);
 	seg++;
 
 	if ( req->src == req->dst) {
@@ -271,8 +271,8 @@ xlp_crypt(struct ablkcipher_request *req, unsigned int enc, int iv_size, struct
 			len = min(cipher_len, sg->length);
 			scatterwalk_start(&walk, sg);
 			virt = page_address(scatterwalk_page(&walk)) + offset_in_page(walk.offset);
-			nlm_crypto_fill_src_seg(pkt_param,seg,virt,len);
-			seg = nlm_crypto_fill_dst_seg(pkt_param,seg,virt,len);
+			nlm_crypto_fill_src_seg(pkt_param,seg,MAX_FRAGS,virt,len);
+			seg = nlm_crypto_fill_dst_seg(pkt_param,seg,MAX_FRAGS,virt,len);
 			if(seg == MAX_FRAGS) {
 				printk("fragments exceeded 0xfff. Cannot handle the packet\n");
 				return 0;
@@ -289,7 +289,7 @@ xlp_crypt(struct ablkcipher_request *req, unsigned int enc, int iv_size, struct
 			len = min(cipher_len, sg->length);
 			scatterwalk_start(&walk, sg);
 			virt = page_address(scatterwalk_page(&walk)) + offset_in_page(walk.offset);
-			index = nlm_crypto_fill_src_seg(pkt_param,index,virt,len);
+			index = nlm_crypto_fill_src_seg(pkt_param,index,MAX_FRAGS,virt,len);
 			cipher_len -= len;
 		}
 		nr_src_frags = index;
@@ -298,7 +298,7 @@ xlp_crypt(struct ablkcipher_request *req, unsigned int enc, int iv_size, struct
 			len = min(cipher_len, sg->length);
 			scatterwalk_start(&walk, sg);
 			virt = page_address(scatterwalk_page(&walk)) + offset_in_page(walk.offset);
-			index = nlm_crypto_fill_dst_seg(pkt_param,index,virt,len);
+			index = nlm_crypto_fill_dst_seg(pkt_param,index,MAX_FRAGS,virt,len);
 			cipher_len -= len;
 		}
 		nr_dst_frags = index;
diff --git a/drivers/crypto/sae/nlmcrypto_ifc.h b/drivers/crypto/sae/nlmcrypto_ifc.h
index d0d89b8..885f81b 100644
--- a/drivers/crypto/sae/nlmcrypto_ifc.h
+++ b/drivers/crypto/sae/nlmcrypto_ifc.h
@@ -43,4 +43,24 @@ static inline void *crypto_phys_to_virt(unsigned long long paddr)
 	return phys_to_virt(paddr);
 }
 
+static inline int crypto_fill_pkt_seg_paddr_len(void *vaddr, unsigned int inlen, 
+	       struct nlm_crypto_pkt_seg_desc *segs, unsigned int s_seg, unsigned int max_segs,
+	       int fillsrc, int filldst, unsigned long long sinitval, unsigned long long dinitval)
+{
+	unsigned int remlen = inlen, sg = 0, len;
+	for(; remlen > 0;) {
+		len = remlen > NLM_CRYPTO_MAX_SEG_LEN ? NLM_CRYPTO_MAX_SEG_LEN : remlen;
+		if(fillsrc)
+			segs[sg].src = ccpu_to_be64(virt_to_phys(vaddr) | 
+					((unsigned long long)(len - 1) << NLM_CRYPTO_SEGS_LEN_OFF) | sinitval);
+		if(filldst)
+			segs[sg].dst = ccpu_to_be64(virt_to_phys(vaddr) | 
+					((unsigned long long)(len - 1) << NLM_CRYPTO_SEGS_LEN_OFF) | dinitval);
+		remlen -= len;
+		vaddr += len;
+		sg++;
+	}
+	return sg;
+}
+
 #endif
-- 
1.9.1

