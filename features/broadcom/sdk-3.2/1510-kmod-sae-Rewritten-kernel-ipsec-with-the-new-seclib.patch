From 7f9d34097db39c43a025146247483e86322a2bfa Mon Sep 17 00:00:00 2001
From: reshmic <reshmic@broadcom.com>
Date: Tue, 18 Jun 2013 11:36:02 +0530
Subject: [PATCH 1510/1532] kmod/sae: Rewritten kernel ipsec with the new
 seclib

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/crypto/sae/cryptosoc_lib_ifc.h  | 81 +++++++++++++++++++++++++++++++++
 drivers/crypto/sae/cryptosoc_lib_priv.h | 51 +++++++++++++++++++++
 drivers/crypto/sae/nlm_aead.c           | 36 ++++++---------
 drivers/crypto/sae/nlm_async.h          |  5 +-
 drivers/crypto/sae/nlm_auth.c           | 11 ++---
 drivers/crypto/sae/nlm_crypto.c         |  8 ++--
 drivers/crypto/sae/nlm_enc.c            |  8 ++--
 drivers/crypto/sae/nlmcrypto_ifc.h      | 53 ---------------------
 8 files changed, 159 insertions(+), 94 deletions(-)
 create mode 100644 drivers/crypto/sae/cryptosoc_lib_ifc.h
 create mode 100644 drivers/crypto/sae/cryptosoc_lib_priv.h
 delete mode 100644 drivers/crypto/sae/nlmcrypto_ifc.h

diff --git a/drivers/crypto/sae/cryptosoc_lib_ifc.h b/drivers/crypto/sae/cryptosoc_lib_ifc.h
new file mode 100644
index 0000000..90fc20e
--- /dev/null
+++ b/drivers/crypto/sae/cryptosoc_lib_ifc.h
@@ -0,0 +1,81 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#ifndef _SAESOC_LIB_IFC_H
+#define _SAESOC_LIB_IFC_H
+
+extern void *nlm_crypto_vbase;
+extern _uint64_t nlm_crypto_pbase;
+
+
+/* This app is going to support on all the processor varients */
+#define SAESOC_PTYPE_GEN_ALL_SUPPORT 1
+
+#ifndef SAESOC_PTYPE_GEN_ALL_SUPPORT
+/* Otherwise declare the specific ones here */
+#define SAESOC_PTYPE_GEN2_SUPPORT 1
+#define SAESOC_PTYPE_GEN1_SUPPORT 1
+#define RSASOC_PTYPE_GEN1_SUPPORT 1
+#endif
+
+/* Application specific private size for lib-params, 
+*  session & data descriptors */
+#define SAESOC_SESSION_DESC_APP_PRIV_SZ 64
+#define SAESOC_DATA_DESC_APP_PRIV_SZ	64
+#define RSASOC_REQ_DESC_APP_PRIV_SZ     64
+#define ECCSOC_REQ_DESC_APP_PRIV_SZ             64
+
+#define CRYPTOSOC_MAX_PENDING_REQS_PER_CTX 64
+#define CRYPTOSOC_CTX_APP_PRIV_SZ       64
+
+static inline _uint64_t cryptosoc_virt_to_phys(unsigned long vaddr) 
+{
+	return virt_to_phys((void *)vaddr);
+}
+
+
+static inline unsigned long cryptosoc_phys_to_virt(_uint64_t paddr) 
+{
+	return (unsigned long) phys_to_virt(paddr);
+}
+
+#ifdef NLM_LINUXU
+extern void *contig_mem_align(size_t align, size_t size);
+extern void *contig_mem_free(void *ptr);
+#define crypto_malign(align, size) contig_mem_align(align, size)
+#define crypto_mfree(p) contig_mem_free(p)
+#else
+extern void *contig_malign(size_t align, size_t size);
+extern void contig_free(void *ptr);
+#define crypto_malign(align, size) contig_malign(align, size)
+#define crypto_mfree(p) contig_free(p)
+#endif
+
+/* see crypto_app_lib_init() also */
+#endif
diff --git a/drivers/crypto/sae/cryptosoc_lib_priv.h b/drivers/crypto/sae/cryptosoc_lib_priv.h
new file mode 100644
index 0000000..b6828ae
--- /dev/null
+++ b/drivers/crypto/sae/cryptosoc_lib_priv.h
@@ -0,0 +1,51 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * http://www.gnu.org/licenses/gpl-2.0.txt  
+ * or the Broadcom license below:
+
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_4# */
+
+#ifndef _CRYPTOSOC_LIB_PRIV_H
+#define _CRYPTOSOC_LIB_PRIV_H
+
+static inline int crypto_ctxt_shrd_wait_for_response(int fd)
+{
+	return CRYPTOSOC_OK;
+}
+
+
+extern int crypto_ctxt_alloc(struct cryptosoc_ctx *ctx);
+extern int crypto_ctxt_free(struct cryptosoc_ctx *ctx);
+extern int crypto_get_soc_vc_numbers(enum cryptosoc_soc_type soc, int *basevc, int *lmtvc);
+extern int cryptosoc_lib_priv_init(void);
+extern int cryptosoc_lib_priv_finish(void);
+
+#endif
diff --git a/drivers/crypto/sae/nlm_aead.c b/drivers/crypto/sae/nlm_aead.c
index c6c042d..f0f8ccd 100755
--- a/drivers/crypto/sae/nlm_aead.c
+++ b/drivers/crypto/sae/nlm_aead.c
@@ -76,13 +76,6 @@ struct nlm_aead_ctx
 #define IV_AEAD_PADDING         128 
 #define TAG_LEN			64
 
-/*
- 						PACKET DESC MEMORY LAYOUT
-	 ------------------------------------------------------------------------------------------------------
-	|  64 bytes	 | struct nlm_crypto_pkt_param +  | 64bytes for   | struct nlm_async_crypto | 64 bytes |
-	|  for alignment | 18 * (2*64)			  | for alignment |			    | for hash |
-	 ------------------------------------------------------------------------------------------------------
- */
 #define PACKET_DESC_SIZE        (64 + sizeof(struct saesoc_data_desc) + (MAX_FRAGS*8) + sizeof(struct nlm_async_crypto) + TAG_LEN + IV_AEAD_PADDING + 128)
 #define NLM_CRYPTO_DATA_DESC(addr)  (struct saesoc_data_desc *) (((unsigned long)addr + 63) & ~0x3fUL)
 #define NLM_ASYNC_PTR_PARAM_OFFSET(addr)        (((unsigned long)addr +  sizeof(struct saesoc_data_desc) + (MAX_FRAGS*8) + 63) & ~0x3fUL)
@@ -103,9 +96,6 @@ extern struct nlm_crypto_stat crypto_stat[MAX_CPU];
 /*
    All extern declaration goes here.
  */
-extern int alloc_pkt_param( struct nlm_async_crypto * async,struct nlm_crypto_pkt_param ** pkt_param, int max_frags );
-
-
 
 static int no_of_alg_registered = 0;
 
@@ -896,8 +886,8 @@ static void aead_request_callback(struct nlm_async_crypto *async, uint64_t msg1)
 	crypto_stat[cpu].enc_tbytes[enc] += async->bytes;
 	crypto_stat[cpu].auth_tbytes[auth] += async->bytes;
 #endif
-	if ( async->pkt_param)
-		kfree(async->pkt_param);
+	if ( async->ddesc)
+		kfree(async->ddesc);
 	base->complete(base, err);
 	return;
 }
@@ -926,7 +916,7 @@ static int aead_crypt(struct aead_request *req, unsigned int op)
 
 	authsize = crypto_aead_authsize(tfm);
 	maxauthsize= aead->maxauthsize;
-	async->pkt_param = NULL;
+	async->ddesc = NULL;
 	async->src = req->src;
 	async->dst = req->dst;
 	if ( op )
@@ -999,7 +989,7 @@ static int aead_crypt_gcm(struct aead_request *req, unsigned int op)
 	struct saesoc_session_desc *s_desc ;
 	authsize = crypto_aead_authsize(tfm);
 	maxauthsize= aead->maxauthsize;
-	async->pkt_param = NULL; 
+	async->ddesc = NULL; 
 	async->src = req->src;
 	async->dst = req->dst; 
 	if ( op )
@@ -1105,7 +1095,7 @@ static int aead_crypt_ccm(struct aead_request *req, unsigned int op)
 
 	authsize = crypto_aead_authsize(tfm);
 	maxauthsize= aead->maxauthsize;
-	async->pkt_param = NULL;
+	async->ddesc = NULL;
 	async->src = req->src;
 	async->dst = req->dst;
 
@@ -1252,7 +1242,7 @@ static int aead_crypt_ctr(struct aead_request *req, unsigned int op)
 	int node;
 	struct saesoc_extra_req_send_params mparam;
 	struct saesoc_session_desc *s_desc ;
-	async->pkt_param = NULL;
+	async->ddesc = NULL;
 	if ( op )
 		s_desc = &ctx->enc_s_desc;
 	else
@@ -1260,7 +1250,7 @@ static int aead_crypt_ctr(struct aead_request *req, unsigned int op)
 
 	authsize = crypto_aead_authsize(tfm);
 	maxauthsize= aead->maxauthsize;
-	async->pkt_param = NULL;
+	async->ddesc = NULL;
 	async->src = req->src;
 	async->dst = req->dst;
 	saesoc_new_data_desc(s_desc, &d_desc, MAX_FRAGS , NULL);
@@ -1399,7 +1389,7 @@ int xlp_aes_cbc_givencrypt(struct aead_givcrypt_request *req)
 
 	//TODO: Get the IV from random pool
 	memcpy(req->giv, nlm_ctx->iv_buf, nlm_ctx->iv_len);
-	*(uint64_t *)req->giv += ccpu_to_be64(req->seq);
+	*(uint64_t *)req->giv += cpu_to_be64(req->seq);
 	memcpy(req->areq.iv, req->giv, nlm_ctx->iv_len);
 
 	return xlp_aes_cbc_encrypt(&req->areq);
@@ -1411,7 +1401,7 @@ static int xlp_3des_cbc_givencrypt(struct aead_givcrypt_request *req)
 	struct nlm_aead_ctx *nlm_ctx = (struct nlm_aead_ctx *)nlm_crypto_aead_ctx(tfm);
 
 	memcpy(req->giv, nlm_ctx->iv_buf, nlm_ctx->iv_len);
-	*(uint64_t *)req->giv += ccpu_to_be64(req->seq);
+	*(uint64_t *)req->giv += cpu_to_be64(req->seq);
 	memcpy(req->areq.iv, req->giv, nlm_ctx->iv_len);
 
 	return xlp_3des_cbc_encrypt(&req->areq);
@@ -1423,7 +1413,7 @@ static int xlp_des_cbc_givencrypt(struct aead_givcrypt_request *req)
 	struct nlm_aead_ctx *nlm_ctx = (struct nlm_aead_ctx *)nlm_crypto_aead_ctx(tfm);
 	
 	memcpy(req->giv, nlm_ctx->iv_buf, nlm_ctx->iv_len);
-	*(uint64_t *)req->giv += ccpu_to_be64(req->seq);
+	*(uint64_t *)req->giv += cpu_to_be64(req->seq);
 	memcpy(req->areq.iv, req->giv, nlm_ctx->iv_len);
 
 	return xlp_des_cbc_encrypt(&req->areq);
@@ -1438,7 +1428,7 @@ static int xlp_aes_gcm_givencrypt(struct aead_givcrypt_request *req)
 	int ret;
 
 	memcpy(req->giv, nlm_ctx->iv_buf + GCM_RFC4106_NONCE_SIZE,nlm_ctx->iv_len);
-	*(uint64_t *)req->giv += ccpu_to_be64(req->seq);
+	*(uint64_t *)req->giv += cpu_to_be64(req->seq);
 
 	areq->iv = req->giv;
 	ret = xlp_aes_gcm_encrypt(&req->areq);
@@ -1455,7 +1445,7 @@ static int xlp_aes_ccm_givencrypt(struct aead_givcrypt_request *req)
 	int ret;
 
 	memcpy(req->giv, nlm_ctx->iv_buf + CCM_RFC4309_NONCE_SIZE, nlm_ctx->iv_len);
-	*(uint64_t *)req->giv += ccpu_to_be64(req->seq);
+	*(uint64_t *)req->giv += cpu_to_be64(req->seq);
 
 	areq->iv = req->giv;
 	ret = xlp_aes_ccm_encrypt(&req->areq);
@@ -1469,7 +1459,7 @@ int xlp_aes_ctr_givencrypt(struct aead_givcrypt_request *req)
 	struct nlm_aead_ctx *nlm_ctx = (struct nlm_aead_ctx *)nlm_crypto_aead_ctx(tfm);
 	void *iv = (uint8_t *)NLM_IV_OFFSET(aead_request_ctx(&req->areq));
 	memcpy(req->giv, nlm_ctx->iv_buf+CTR_RFC3686_NONCE_SIZE, nlm_ctx->iv_len);
-	*(uint64_t *)req->giv += ccpu_to_be64(req->seq);
+	*(uint64_t *)req->giv += cpu_to_be64(req->seq);
 
 	memcpy(iv,  nlm_ctx->iv_buf, CTR_RFC3686_NONCE_SIZE);
 	iv += CTR_RFC3686_NONCE_SIZE;
diff --git a/drivers/crypto/sae/nlm_async.h b/drivers/crypto/sae/nlm_async.h
index 235aa2c..0f6a894 100644
--- a/drivers/crypto/sae/nlm_async.h
+++ b/drivers/crypto/sae/nlm_async.h
@@ -16,7 +16,7 @@
 #define __NLM_ASYNC_H
 
 #include <crypto/scatterwalk.h>
-#include "nlmcrypto.h"
+#include <linux/byteorder/generic.h>
 
 struct nlm_async_crypto;
 #define MAX_CPU 128
@@ -32,7 +32,7 @@ struct nlm_async_crypto
 	int op;
 	int authsize;
 	uint8_t *hash_addr;
-	uint8_t * pkt_param;
+	uint8_t * ddesc;
 	struct scatterlist * src;
 	struct scatterlist * dst;
 	uint16_t stat;
@@ -74,7 +74,6 @@ extern int crypto_vc_base;
 extern int crypto_vc_limit;
 extern int nlm_crypto_sae_num_seg_reqd(void *data, unsigned int buflen);
 extern int nlm_crypto_calc_rem_len(struct scatterlist *sg, unsigned int cipher_len);
-extern int alloc_pkt_param( struct nlm_async_crypto * async,struct nlm_crypto_pkt_param ** pkt_param , int max_frags);
 
 extern struct saesoc_data_desc    * fill_src_dst_sg(struct saesoc_session_desc *s_desc,
 		struct saesoc_data_desc    *d_desc,struct nlm_async_crypto *async, 
diff --git a/drivers/crypto/sae/nlm_auth.c b/drivers/crypto/sae/nlm_auth.c
index caf6aaf..42ad496 100644
--- a/drivers/crypto/sae/nlm_auth.c
+++ b/drivers/crypto/sae/nlm_auth.c
@@ -81,9 +81,6 @@ struct app_data_priv
 /*
    All extern declaration goes here.
  */
-extern void print_cntl_instr(uint64_t cntl_desc);
-extern void print_crypto_msg_desc(uint64_t entry1, uint64_t entry2, uint64_t entry3);
-extern void print_pkt_desc(struct nlm_crypto_pkt_param * pkt_param, int index);
 extern struct nlm_crypto_stat crypto_stat[MAX_CPU];
 
 
@@ -209,7 +206,7 @@ xlp_auth_final(struct ahash_request *areq)
 
 	saesoc_set_payload_len(d_desc,d_priv->total_len);
 	saesoc_set_tag_dstaddr(d_desc,areq->result);
-	async->pkt_param = NULL;
+	async->ddesc = NULL;
 		
 	preempt_disable();
 	async->callback =  auth_request_callback;
@@ -254,8 +251,8 @@ static void auth_request_callback(struct nlm_async_crypto *async, uint64_t msg1)
 	crypto_stat[cpu].auth_tbytes[stat] += async->bytes;
 #endif
 
-	if ( async->pkt_param)
-		kfree(async->pkt_param);
+	if ( async->ddesc)
+		kfree(async->ddesc);
 	base->complete(base, err);
 	return;
 }
@@ -523,7 +520,7 @@ static int xlp_auth_digest(struct ahash_request *areq)
 		return 0;
 	}
 	saesoc_new_data_desc(&auth_ctx->s_desc, &d_desc, MAX_FRAGS , NULL);
-	async->pkt_param = NULL;
+	async->ddesc = NULL;
 
 	d_desc= fill_src_dst_sg(s_desc,d_desc,async,areq->src,areq->src,&nfrags,areq->nbytes);
 	saesoc_set_payload_len(d_desc,areq->nbytes);
diff --git a/drivers/crypto/sae/nlm_crypto.c b/drivers/crypto/sae/nlm_crypto.c
index 2001ab8..95ea6b1 100644
--- a/drivers/crypto/sae/nlm_crypto.c
+++ b/drivers/crypto/sae/nlm_crypto.c
@@ -83,13 +83,13 @@ int alloc_data_desc( struct nlm_async_crypto * async,struct saesoc_data_desc  **
 {
 	uint8_t * new_data_desc = NULL;
 
-	if ( async->pkt_param ) {
-		kfree(async->pkt_param);
+	if ( async->ddesc ) {
+		kfree(async->ddesc);
 	}
 
-	async->pkt_param = kmalloc((sizeof (struct saesoc_data_desc) + ( max_frags * 8 )+ 64),GFP_KERNEL);
+	async->ddesc = kmalloc((sizeof (struct saesoc_data_desc) + ( max_frags * 8 )+ 64),GFP_KERNEL);
 
-	new_data_desc = (uint8_t * )(((unsigned long)async->pkt_param + 64) & ~0x3fUL);
+	new_data_desc = (uint8_t * )(((unsigned long)async->ddesc + 64) & ~0x3fUL);
 
 	*d_desc = (struct saesoc_data_desc  *)new_data_desc;
 
diff --git a/drivers/crypto/sae/nlm_enc.c b/drivers/crypto/sae/nlm_enc.c
index 735aa88..602ba54 100755
--- a/drivers/crypto/sae/nlm_enc.c
+++ b/drivers/crypto/sae/nlm_enc.c
@@ -202,7 +202,7 @@ xlp_aes_setkey(struct crypto_ablkcipher *tfm, const u8 *in_key,
 		crypto_ablkcipher_set_flags(tfm,flags);
 		return -EINVAL;
 	}
-	if ( mode == NLM_CIPHER_MODE_CTR )
+	if ( mode == SAESOC_CIPHER_MODE_CTR )
 		stat += 3;
 
 	return xlp_setkey(tfm, stat);
@@ -249,8 +249,8 @@ void enc_request_callback(struct nlm_async_crypto *async, uint64_t msg1 )
 	crypto_stat[cpu].enc[stat]++;
 	crypto_stat[cpu].enc_tbytes[stat]+= async->bytes;
 #endif
-	if ( async->pkt_param)
-		kfree(async->pkt_param);
+	if ( async->ddesc)
+		kfree(async->ddesc);
 	base->complete(base, err);
 }
 
@@ -276,7 +276,7 @@ xlp_crypt(struct ablkcipher_request *req, unsigned int enc, int iv_size, uint16_
 	else
 		s_desc = &nlm_ctx->dec_s_desc; 
 
-	async->pkt_param = NULL;
+	async->ddesc = NULL;
 	saesoc_add_frags(d_desc,req->info,iv_size,req->info,iv_size);
 
 
diff --git a/drivers/crypto/sae/nlmcrypto_ifc.h b/drivers/crypto/sae/nlmcrypto_ifc.h
deleted file mode 100644
index 1a17cc1..0000000
--- a/drivers/crypto/sae/nlmcrypto_ifc.h
+++ /dev/null
@@ -1,53 +0,0 @@
-/*-
- * Copyright 2003-2012 Broadcom Corporation
- *
- * This is a derived work from software originally provided by the entity or
- * entities identified below. The licensing terms, warranty terms and other
- * terms specified in the header of the original work apply to this derived work
- *
- * #BRCM_1# */
-
-/* This software is available to you under the terms of the GNU General Public
- * License (GPL) Version 2, available from the file 
- * http://www.gnu.org/licenses/gpl-2.0.txt
-*/
-
-#ifndef _NLM_CRYPTO_IFC_H
-#define _NLM_CRYPTO_IFC_H
-extern void *linuxu_shvaddr;
-extern unsigned long long linuxu_shoff ;
-
-static inline unsigned long long crypto_virt_to_phys(void *vaddr)
-{
-	return virt_to_phys(vaddr);
-}
-
-static inline void *crypto_phys_to_virt(unsigned long long paddr)
-{
-	return phys_to_virt(paddr);
-}
-
-static inline int crypto_fill_pkt_seg_paddr_len(void *vaddr, unsigned int inlen, 
-	       struct nlm_crypto_pkt_seg_desc *segs, unsigned int s_seg, unsigned int max_segs,
-	       int fillsrc, int filldst, unsigned long long sinitval, unsigned long long dinitval)
-{
-	unsigned int remlen = inlen, sg = 0, len;
-	for(; remlen > 0;) {
-		if ( sg >= max_segs ) 
-			return -1;
-			
-		len = remlen > NLM_CRYPTO_MAX_SEG_LEN ? NLM_CRYPTO_MAX_SEG_LEN : remlen;
-		if(fillsrc)
-			segs[sg].src = ccpu_to_be64((virt_to_phys(vaddr) | 
-					((unsigned long long)(len - 1) << NLM_CRYPTO_SEGS_LEN_OFF) | sinitval));
-		if(filldst)
-			segs[sg].dst = ccpu_to_be64((virt_to_phys(vaddr) | 
-					((unsigned long long)(len - 1) << NLM_CRYPTO_SEGS_LEN_OFF) | dinitval));
-		remlen -= len;
-		vaddr += len;
-		sg++;
-	}
-	return sg;
-}
-
-#endif
-- 
1.9.1

