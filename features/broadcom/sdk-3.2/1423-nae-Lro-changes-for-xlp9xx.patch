From 9e11ed747c7128c09cf586b13dbc6ad076808c61 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Tue, 17 Sep 2013 23:20:38 -0700
Subject: [PATCH 1423/1532] nae : Lro changes for xlp9xx

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/broadcom/nae/xlpge.h     | 16 ----------------
 drivers/net/ethernet/broadcom/nae/xlpge_nae.c | 17 +++++++++++++----
 drivers/net/ethernet/broadcom/nae/xlpge_rx.c  | 12 +++++++++---
 3 files changed, 22 insertions(+), 23 deletions(-)

diff --git a/drivers/net/ethernet/broadcom/nae/xlpge.h b/drivers/net/ethernet/broadcom/nae/xlpge.h
index 16a6b89..b6c4242 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge.h
+++ b/drivers/net/ethernet/broadcom/nae/xlpge.h
@@ -295,22 +295,6 @@ struct dev_data
 };
 
 
-/*
- * This strucutre has been referenced in templates/hybrid_nae and
- * ucore/hybrid_nae. So when you modify, modify the above places also.
- */
-
-struct nlm_nae_linux_shinfo {
-	unsigned int flags;
-	int rxvc;
-	int domid;
-	int mode;
-	int node;
-	int num_cpus;
-	/* variable sizes depending on the num cpus */
-	unsigned int fwd_info[0]; 
-};
-
 struct p2p_desc_mem {
 	void *mem;
 	uint64_t dsize;
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
index d4479ce..16ae038 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
@@ -45,6 +45,7 @@
 
 static uint32_t cpu_2_normal_frfifo[NLM_MAX_NODES][MAX_NAE_PERNODE][NR_CPUS];
 static uint32_t cpu_2_jumbo_frfifo[NLM_MAX_NODES][MAX_NAE_PERNODE][NR_CPUS];
+static int phys_cpu_to_log_map[NLM_MAX_NODES][MAX_NAE_PERNODE][NR_CPUS];
 int lcpu_2_pcpu[NR_CPUS];
 static unsigned int fmem[NR_CPUS];
 int num_cpus_per_node;
@@ -264,7 +265,7 @@ static int nlm_configure_shared_freein_fifo(int node,
 		desc_info = nae_cfg->shinfo[shdom].desc_info;
 		desc_info_len = nae_cfg->shinfo[shdom].desc_info_len;
 
-		printk("shind %d dom %d repl %d paddr %lx len %d desc %lx dlen %d\n",
+		printk("shind %d dom %d repl %d paddr_ptr %lx len %d desc_ptr %lx dlen %d\n",
 				shdom, nae_cfg->shinfo[shdom].domid, owner_replenish,
 				(long)paddr_info, paddr_info_len, (long)desc_info, desc_info_len);
 
@@ -387,11 +388,16 @@ static int initialize_nae_per_node(nae_t * nae_cfg, uint32_t *phys_cpu_map, int
 		lnx_shinfo[i]->flags  = nae_cfg->shinfo[i].valid ? NLM_NAE_LNX_SHINFO_FL_VALID : 0;
 		lnx_shinfo[i]->rxvc = nae_cfg->shinfo[i].rxvc;
 		lnx_shinfo[i]->domid = nae_cfg->shinfo[i].domid;
+		lnx_shinfo[i]->naeid = nae_id;
 		lnx_shinfo[i]->num_cpus = nae_cfg->shinfo[i].num_cpus;
 		lnx_shinfo[i]->node = node;
 		for(cpus = 0; cpus < lnx_shinfo[i]->num_cpus; cpus++)  {
+			int phys_cpu;
 			lnx_shinfo[i]->fwd_info[cpus] = nae_cfg->shinfo[i].fwd_info[cpus];
 			printk("cpu %d value %08x\n", cpus, nae_cfg->shinfo[i].fwd_info[cpus]);
+			phys_cpu = (lnx_shinfo[i]->fwd_info[cpus] >> NLM_NAE_LNX_SHINFO_FWD_INFO_LCPU_2_PCPU_OFF) &
+				NLM_NAE_LNX_SHINFO_FWD_INFO_LCPU_2_PCPU_MASK;
+			phys_cpu_to_log_map[node][nae_id][phys_cpu] = cpus;
 		}
 		mem += sizeof(struct nlm_nae_linux_shinfo) + (sizeof(unsigned int) * cpus);
 	}
@@ -469,6 +475,9 @@ static int initialize_nae_per_node(nae_t * nae_cfg, uint32_t *phys_cpu_map, int
 #endif
 	lnx_shinfo[0]->mode |= mode;
 	lnx_shinfo[0]->flags |= (*jumbo_enabled) ? NLM_NAE_LNX_SHINFO_FL_JUMBO_EN : 0;
+	if(is_nlm_xlp9xx()) {
+		lnx_shinfo[0]->flags |= NLM_NAE_LNX_SHINFO_FL_VER_1 | NLM_NAE_LNX_SHINFO_FL_ALE_BYPASS;
+	}
 	if (nae_cfg->owned) {
 		if(netsoc_write_ucore_shmem(nae_cfg,
 			(uint32_t *)lnx_shinfo[0],  size/sizeof(uint32_t)) != 0) {
@@ -1012,10 +1021,10 @@ int mac_refill_frin_skb(nae_t* nae_cfg, int cpu, uint64_t paddr,
 	 * indexed by logical cpu id
 	 */
 	int ret, code, qid;
-	int node_cpu = __cpu_number_map[cpu] % num_cpus_per_node;
 	ulong __attribute__ ((unused)) mflags;
 	int node = nae_cfg->node;
 	int nae_id = nae_cfg->nae_id;
+	int node_cpu = phys_cpu_to_log_map[node][nae_id][cpu];
 
 	if (nae_cfg == NULL) {
 		printk("%s Error, Invalid node id %d\n", __FUNCTION__, node);
@@ -1029,9 +1038,9 @@ int mac_refill_frin_skb(nae_t* nae_cfg, int cpu, uint64_t paddr,
 		cpu_2_jumbo_frfifo[node][nae_id][node_cpu] :
 		cpu_2_normal_frfifo[node][nae_id][node_cpu];
 
-	Message("%s in cpu %d bufsize %d node %d qid %d qbase %d\n",
+	Message("%s in cpu %d bufsize %d node %d qid %d qbase %d node_cpu %d nae_id %d\n",
 		__FUNCTION__, cpu, bufsize, node, qid,
-		nae_cfg->frin_queue_base);
+		nae_cfg->frin_queue_base, node_cpu, nae_id);
 
 	ret = 0;
 	qid = nae_cfg->frin_queue_base + qid;
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
index 9cc4576..bf1f815 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
@@ -1008,9 +1008,15 @@ int nlm_xlp_enable_napi(void)
 
 #ifdef CONFIG_INET_LRO
 	if (enable_lro) {
-		printk("Registering napi final handler\n");
-		nlm_xlp_register_napi_final_handler(XLP_MSG_HANDLE_NAE_0,
-			xlp_napi_lro_flush, NULL);
+		printk("Registering poe0->cpu napi final handler\n");
+		nlm_xlp_register_napi_final_handler(XLP_MSG_HANDLE_POE_0,
+				xlp_napi_lro_flush, NULL);
+
+		if(is_nlm_xlp9xx()){
+			printk("Registering poe1->cpu napi final handler\n");
+			nlm_xlp_register_napi_final_handler(XLP_MSG_HANDLE_POE_1,
+					xlp_napi_lro_flush, NULL);
+		}
 	}
 #endif
 
-- 
1.9.1

