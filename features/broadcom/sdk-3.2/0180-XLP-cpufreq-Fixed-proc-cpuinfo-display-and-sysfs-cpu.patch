From d1ff8ca181140477cf8abedd4dd9b75a51f1004c Mon Sep 17 00:00:00 2001
From: Prem Mallappa <pmallapp@broadcom.com>
Date: Mon, 15 Dec 2014 23:31:41 +0530
Subject: [PATCH 0180/1532] XLP: cpufreq: Fixed /proc/cpuinfo display and sysfs
 cpufrequency scaling

Signed-off-by: Prem Mallappa <pmallapp@broadcom.com>
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/kernel/proc.c         |  2 +-
 arch/mips/netlogic/common/clk.c | 10 +++-------
 drivers/cpufreq/xlp-cpufreq.c   |  6 ++++--
 3 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/arch/mips/kernel/proc.c b/arch/mips/kernel/proc.c
index 19ff18d..6a26825 100644
--- a/arch/mips/kernel/proc.c
+++ b/arch/mips/kernel/proc.c
@@ -44,7 +44,7 @@ static int show_cpuinfo(struct seq_file *m, void *v)
 	}
 
 	seq_printf(m, "processor\t\t: %ld\n", n);
-#ifdef CONFIG_MIPS_CPUFREQ
+#ifdef CONFIG_CPU_FREQ
 	freq = cpufreq_quick_get(n)/1000;
 #else
 	freq = mips_hpt_frequency / (1000 * 1000);
diff --git a/arch/mips/netlogic/common/clk.c b/arch/mips/netlogic/common/clk.c
index 777837a..915b9cd 100644
--- a/arch/mips/netlogic/common/clk.c
+++ b/arch/mips/netlogic/common/clk.c
@@ -152,7 +152,7 @@ static int xlpii_clk_set_rate(struct clk_hw *hw, unsigned long rate,
 {
 	struct clk_xlp *cxlp = to_clk_xlp(hw);
 	int ctrl1, chg_ctrl, node = cxlp->nodeid;
-	uint32_t timeout = 1000000, div, core = 0;
+	uint32_t timeout = 1000000, div, core = cxlp->coreid;
 	u64 sysbase = nlm_get_node(cxlp->nodeid)->sysbase;
 	int64_t  nfreq;
 
@@ -164,7 +164,6 @@ static int xlpii_clk_set_rate(struct clk_hw *hw, unsigned long rate,
 
 	if (cpu_is_xlp9xx()) {
 		__xlp_sys_write_reg(node, ctrl1, div);
-		__xlp_sys_write_reg(node, chg_ctrl, (0x1 << core));
 
 		while (timeout-- &&
 		       ! (__xlp_sys_read_reg(node, chg_ctrl) & BIT(core))) {}
@@ -224,7 +223,7 @@ build_xlpii_freq_table(unsigned long min, unsigned long max,
 		table[i].div = ((min * 3)/CLK_100MHZ) & 0x1f;
 	}
 }
-#if 1
+
 static void __init
 build_xlp_freq_table(unsigned long min, unsigned long max,
 		     struct clk_xlp_div_table *table, int table_sz)
@@ -254,7 +253,6 @@ build_xlp_freq_table(unsigned long min, unsigned long max,
 		idx++;
 	}
 }
-#endif
 
 static long xlp_clk_round_rate(struct clk_hw *hw, unsigned long rate,
 			       unsigned long *prate)
@@ -337,8 +335,7 @@ unsigned int nlm_get_core_frequency(int node, int core)
 {
 	if (cpu_is_xlpii())
 		return __nlm_xlpii_get_core_frequency(node, core);
-	else
-	/* Frequency returned in HZ */
+
 	return __nlm_xlp_get_core_frequency(node, core);
 }
 
@@ -346,7 +343,6 @@ static unsigned long
 xlp_clk_recalc_rate(struct clk_hw *hw, unsigned long parent_rate)
 {
 	struct clk_xlp *cxlp = to_clk_xlp(hw);
-
 	/* Freq expected in KHZ */
 	return nlm_get_core_frequency(cxlp->nodeid, cxlp->coreid) / CLK_1KHZ;
 }
diff --git a/drivers/cpufreq/xlp-cpufreq.c b/drivers/cpufreq/xlp-cpufreq.c
index ca828d4..9aba997 100644
--- a/drivers/cpufreq/xlp-cpufreq.c
+++ b/drivers/cpufreq/xlp-cpufreq.c
@@ -291,6 +291,7 @@ static int xlp_cpufreq_set_target(struct cpufreq_policy *policy,
 	ret = xlp_freq_set(policy->cur, target_freq, policy->cpu);
 	if (ret != 0)  goto errout;
 
+	cpufreq_notify_transition(policy, &freq, CPUFREQ_POSTCHANGE);
 
 #ifdef CONFIG_REGULATOR
 	if (vdd_xlp && freq.new < freq.old) {
@@ -306,8 +307,8 @@ static int xlp_cpufreq_set_target(struct cpufreq_policy *policy,
 	return 0;
 
 errout:
-	pr_err("Setting cpufrequency failed\n");
 	cpufreq_notify_transition(policy, &freq, CPUFREQ_POSTCHANGE);
+	pr_err("Setting cpufrequency failed\n");
 	return ret;
 }
 
@@ -330,7 +331,7 @@ static unsigned int xlp_get_cpufreq(unsigned int cpu)
 
 	freq = clk_get_rate(clk); /* Converted from KHz to Hz */
 
-	return freq / CLK_1KHZ;
+	return freq;
 }
 
 static int xlp_cpufreq_driver_init(struct cpufreq_policy *policy)
@@ -375,6 +376,7 @@ static struct freq_attr *xlp_cpufreq_attr[] = {
 	NULL,
 };
 
+
 static struct cpufreq_driver xlp_cpufreq_driver = {
 	.owner		= THIS_MODULE,
 	.flags		= 0,
-- 
1.9.1

