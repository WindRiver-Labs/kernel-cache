From bec77a390707a364eca0e0fb0c47f912b301eed8 Mon Sep 17 00:00:00 2001
From: Saswat Kumar Dash <saswat.dash@broadcom.com>
Date: Sun, 7 Dec 2014 21:03:23 -0800
Subject: [PATCH 0168/1532] multinode: fmn_spill memory allocation for
 multinode

used alloc_bootmem_node for allocating spill memory on available nodes
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/xlp/dt.c | 86 +++++++++++++++++++++++----------------------
 1 file changed, 44 insertions(+), 42 deletions(-)

diff --git a/arch/mips/netlogic/xlp/dt.c b/arch/mips/netlogic/xlp/dt.c
index 57d05cb..b5e0250 100644
--- a/arch/mips/netlogic/xlp/dt.c
+++ b/arch/mips/netlogic/xlp/dt.c
@@ -99,7 +99,7 @@ unsigned long frin_fifo_size;
 EXPORT_SYMBOL(frin_fifo_size);
 unsigned long spill_mem_size;
 EXPORT_SYMBOL(spill_mem_size);
-unsigned long spill_mem_address;
+unsigned long spill_mem_address[NLM_NR_NODES];
 EXPORT_SYMBOL(spill_mem_address);
 
 static int __init xlp_reserve_memory(unsigned long node, const char *uname,
@@ -116,62 +116,64 @@ static int __init xlp_reserve_memory(unsigned long node, const char *uname,
 
 	/* Reserve memory for packet mem kernel module */
 	p = of_get_flat_dt_prop(node, "netlogic,reserve-mem", &size);
-	if (p == NULL)
-		return 0;
-
-	val = be32_to_cpup(p);
-	pktmem_size = val * 1024 * 1024;
-	for (i = 0; i < NLM_NR_NODES; i++) {
-		if (!nlm_node_present(i))
-			continue;
-		addr = alloc_bootmem_node(NODE_DATA(i), pktmem_size);
-		if (addr == NULL) {
-			pr_err("Alloc bootmem failed for %ld MB on node %d\n",
-				pktmem_size, i);
-			return 0;
+	if (p != NULL) {
+		val = be32_to_cpup(p);
+		pktmem_size = val * 1024 * 1024;
+		for (i = 0; i < NLM_NR_NODES; i++) {
+			if (!nlm_node_present(i))
+				continue;
+			addr = alloc_bootmem_node(NODE_DATA(i), pktmem_size);
+			if (addr == NULL) {
+				pr_err("Alloc bootmem failed for %ld MB on node %d\n",
+					val, i);
+				continue;
+			}
+			pktmem_start_address[i] = virt_to_phys(addr);
+			pr_info("Reserved %ld MB at %p on node %d for pktmem\n",
+				val, addr, i);
 		}
-		pktmem_start_address[i] = virt_to_phys(addr);
-		pr_info("Reserved %ld MB at %p on node %d for pktmem\n",
-			val, addr, i);
 	}
 
 	/* Reserve memory for NAE FIFO usage */
 	p = of_get_flat_dt_prop(node, "netlogic,frfifo-mem", &size);
-	if (p == NULL)
-		return 0;
-
-	val = be32_to_cpup(p);
-	frin_fifo_size = val * 1024 * 1024;
-	addr = alloc_bootmem(frin_fifo_size);
-	if (addr == NULL) {
-		pr_err("Alloc freein fifo failed for %ld MB\n", val);
-		return 0;
+	if (p != NULL) {
+		val = be32_to_cpup(p);
+		frin_fifo_size = val * 1024 * 1024;
+		addr = alloc_bootmem(frin_fifo_size);
+		if (addr == NULL) {
+			pr_err("Alloc freein fifo failed for %ld MB\n", val);
+		} else {
+			frin_fifo_address = virt_to_phys(addr);
+			pr_info("Reserved %ld MB at %p for freein_fifo\n", val, addr);
+		}
 	}
-	frin_fifo_address = virt_to_phys(addr);
-	pr_info("Reserved %ld MB at %p for freein_fifo\n", val, addr);
 
 	/* Reserve memory for fmn spill */
 	p = of_get_flat_dt_prop(node, "netlogic,spill-mem", &size);
 	if (p == NULL)
 		return 0;
+
 	val = be32_to_cpup(p);
-	if (val == 0UL) {
-		spill_mem_address = 0;
-		spill_mem_size = 0;
-		return 0;
-	}
-	if (val > 512) {
-		pr_info("Allocating maximum allowed spill_mem\n");
+
+	if (val > 512)
 		val = 512;
-	}
 	spill_mem_size = val * 1024 * 1024;
-	addr = alloc_bootmem(spill_mem_size);
-	if (addr == NULL) {
-		pr_err("Alloc spill-mem failed for %ld MB\n", val);
-		return 0;
+
+	for (i = 0; i < NLM_NR_NODES; i++) {
+		if (!nlm_node_present(i))
+			continue;
+
+		addr = alloc_bootmem_node(NODE_DATA(i), spill_mem_size);
+		if (addr == NULL) {
+			pr_err("Alloc spill-mem failed for %ld MB on node %d\n",
+				val, i);
+			continue;
+		}
+
+		spill_mem_address[i] = virt_to_phys(addr);
+		pr_info("Reserved %ld MB at %p on node %d for fmn spill\n",
+			val, addr, i);
 	}
-	spill_mem_address = virt_to_phys(addr);
-	pr_info("Reserved %ld MB at %p for fmn spill\n", val, addr);
 
 	return 0;
 }
-- 
1.9.1

