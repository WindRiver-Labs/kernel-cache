From e2f7e44e574a7533f5ad4462263e512fe55b4090 Mon Sep 17 00:00:00 2001
From: Jayachandran C <jchandra@broadcom.com>
Date: Tue, 8 Apr 2014 16:42:08 +0530
Subject: [PATCH 0108/1532] MIPS: Netlogic: Add XLR/XLP cache code

The Netlogic XLR/XLP caches are very similar to the r4k implementation,
but has minor differences. Add a custom cache implementation for it.
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/include/asm/cpu-features.h               |   3 +
 .../asm/mach-netlogic/cpu-feature-overrides.h      |   2 +-
 arch/mips/mm/Makefile                              |   2 +
 arch/mips/mm/c-netlogic.c                          | 308 +++++++++++++++++++++
 arch/mips/mm/cache.c                               |   5 +
 5 files changed, 319 insertions(+), 1 deletion(-)
 create mode 100644 arch/mips/mm/c-netlogic.c

diff --git a/arch/mips/include/asm/cpu-features.h b/arch/mips/include/asm/cpu-features.h
index e5ec8fc..8607043 100644
--- a/arch/mips/include/asm/cpu-features.h
+++ b/arch/mips/include/asm/cpu-features.h
@@ -41,6 +41,9 @@
 #ifndef cpu_has_octeon_cache
 #define cpu_has_octeon_cache	0
 #endif
+#ifndef cpu_has_netlogic_cache
+#define cpu_has_netlogic_cache	0
+#endif
 #ifndef cpu_has_fpu
 #define cpu_has_fpu		(current_cpu_data.options & MIPS_CPU_FPU)
 #define raw_cpu_has_fpu		(raw_current_cpu_data.options & MIPS_CPU_FPU)
diff --git a/arch/mips/include/asm/mach-netlogic/cpu-feature-overrides.h b/arch/mips/include/asm/mach-netlogic/cpu-feature-overrides.h
index 091deb17..65bdd48 100644
--- a/arch/mips/include/asm/mach-netlogic/cpu-feature-overrides.h
+++ b/arch/mips/include/asm/mach-netlogic/cpu-feature-overrides.h
@@ -10,7 +10,7 @@
 #define __ASM_MACH_NETLOGIC_CPU_FEATURE_OVERRIDES_H
 
 #define cpu_has_4kex		1
-#define cpu_has_4k_cache	1
+#define cpu_has_netlogic_cache	1
 #define cpu_has_watch		1
 #define cpu_has_mips16		0
 #define cpu_has_counter		1
diff --git a/arch/mips/mm/Makefile b/arch/mips/mm/Makefile
index 7f4f93a..63f8c54 100644
--- a/arch/mips/mm/Makefile
+++ b/arch/mips/mm/Makefile
@@ -17,6 +17,8 @@ obj-$(CONFIG_CPU_R8000)		+= c-r4k.o cex-gen.o tlb-r8k.o
 obj-$(CONFIG_CPU_SB1)		+= c-r4k.o cerr-sb1.o cex-sb1.o tlb-r4k.o
 obj-$(CONFIG_CPU_TX39XX)	+= c-tx39.o tlb-r3k.o
 obj-$(CONFIG_CPU_CAVIUM_OCTEON) += c-octeon.o cex-oct.o tlb-r4k.o
+obj-$(CONFIG_CPU_XLR)		+= c-netlogic.o tlb-r4k.o cex-gen.o
+obj-$(CONFIG_CPU_XLP)		+= c-netlogic.o tlb-r4k.o cex-gen.o
 
 obj-$(CONFIG_IP22_CPU_SCACHE)	+= sc-ip22.o
 obj-$(CONFIG_R5000_CPU_SCACHE)	+= sc-r5k.o
diff --git a/arch/mips/mm/c-netlogic.c b/arch/mips/mm/c-netlogic.c
new file mode 100644
index 0000000..f0b6e74
--- /dev/null
+++ b/arch/mips/mm/c-netlogic.c
@@ -0,0 +1,308 @@
+/*
+ * Copyright (C) 1996 David S. Miller (dm@engr.sgi.com)
+ * Copyright (C) 1997, 2001 Ralf Baechle (ralf@gnu.org)
+ * Copyright (C) 2011 Netlogic Microsystems.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ */
+#include <linux/init.h>
+#include <asm/asm.h>
+#include <asm/mmu_context.h>
+#include <asm/bootinfo.h>
+#include <asm/cacheops.h>
+#include <asm/cpu.h>
+#include <asm/page.h>
+#include <asm/uaccess.h>
+#include <asm/r4kcache.h>
+#include <asm/traps.h>
+
+#include <linux/bug.h>
+#include <linux/smp.h>
+#include <linux/kallsyms.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+
+#ifdef CPU_XLR
+static inline void sync_istream(void)
+{
+	__asm__ __volatile__ (
+		"	.set	push\n"
+		"	.set	noreorder\n"
+		"	nop;nop;nop;nop;nop\n"
+		"	nop;nop;nop;nop;nop\n"
+		"	.set	pop\n"
+	);
+}
+
+static inline void cacheop_hazard(void)
+{
+	__asm__ __volatile__ (
+		"	.set	push\n"
+		"	.set	noreorder\n"
+		"	nop;nop;nop;nop\n"
+		"	nop;nop;nop;nop\n"
+		"	.set	pop\n"
+	);
+}
+
+static inline void cacheop_sync_istream(void)
+{
+	cacheop_hazard();
+	sync_istream();
+}
+#else
+static inline void sync_istream(void)
+{
+	instruction_hazard();
+}
+
+static inline void cacheop_hazard(void)
+{
+	instruction_hazard();
+}
+
+static inline void cacheop_sync_istream(void)
+{
+	instruction_hazard();
+}
+#endif
+
+/*
+ * These routines support Generic Kernel cache flush requirements
+ */
+
+static void nlm_local_flush_icache_range(unsigned long start, unsigned long end)
+{
+	unsigned long addr;
+	int icache_linesz = cpu_icache_line_size();
+
+	start &= ~((unsigned long)(icache_linesz - 1));
+	for (addr = start; addr < end; addr += icache_linesz)
+		protected_flush_icache_line(addr);
+	cacheop_sync_istream();
+}
+
+struct flush_icache_range_args {
+	unsigned long start;
+	unsigned long end;
+};
+
+static void nlm_flush_icache_range_ipi(void *info)
+{
+	struct flush_icache_range_args *args = info;
+
+	nlm_local_flush_icache_range(args->start, args->end);
+}
+
+void nlm_flush_icache_range(unsigned long start, unsigned long end)
+{
+	struct flush_icache_range_args args;
+
+	WARN_ON((end - start) > PAGE_SIZE);
+	args.start = start;
+	args.end = end;
+	on_each_cpu(nlm_flush_icache_range_ipi, &args, 1);
+}
+
+static void nlm_flush_cache_sigtramp_ipi(void *info)
+{
+	unsigned long addr = (unsigned long)info;
+
+	addr = addr & ~(cpu_icache_line_size() - 1);
+	protected_flush_icache_line(addr);
+	cacheop_sync_istream();
+}
+
+static void nlm_flush_cache_sigtramp(unsigned long addr)
+{
+	on_each_cpu(nlm_flush_cache_sigtramp_ipi, (void *)addr, 1);
+}
+
+/*
+ * These routines support MIPS specific cache flush requirements.
+ * These are called only during bootup or special system calls
+ */
+
+static void nlm_local_flush_icache(void)
+{
+	int i = 0;
+	unsigned long base = CKSEG0;
+	unsigned int lines;
+
+	lines = current_cpu_data.icache.ways *
+				current_cpu_data.icache.sets;
+
+	/* Index Invalidate all the lines and the ways */
+	for (i = 0; i < lines; i++) {
+		flush_icache_line(base);
+		base += cpu_icache_line_size();
+	}
+	cacheop_sync_istream();
+}
+
+static void nlm_local_flush_dcache(void)
+{
+	int i = 0;
+	unsigned long base = CKSEG0;
+	unsigned int lines;
+
+	lines = current_cpu_data.dcache.ways * current_cpu_data.dcache.sets;
+
+	/* Index Invalidate all the lines and the ways */
+	for (i = 0; i < lines; i++) {
+		flush_dcache_line(base);
+		base += current_cpu_data.dcache.linesz;
+	}
+	cacheop_hazard();
+}
+
+static void nlm_flush_l1_caches_ipi(void *info)
+{
+	nlm_local_flush_dcache();
+	nlm_local_flush_icache();
+}
+
+static void nlm_flush_l1_caches(void)
+{
+	pr_err("CACHE FLUSH: flushing L1 caches on all cpus!\n");
+	on_each_cpu(nlm_flush_l1_caches_ipi, (void *)NULL, 1);
+}
+
+static void nlm_noflush(void)
+{
+}
+
+static __cpuinit void probe_l1_cache(void)
+{
+	struct cpuinfo_mips *c = &current_cpu_data;
+	unsigned int config1 = read_c0_config1();
+	int lsize, icache_size, dcache_size;
+
+	lsize = (config1 >> 19) & 7;
+	if (lsize != 0)
+		c->icache.linesz = 2 << lsize;
+	else
+		c->icache.linesz = lsize;
+	c->icache.sets = 64 << ((config1 >> 22) & 7);
+	c->icache.ways = 1 + ((config1 >> 16) & 7);
+
+	icache_size = c->icache.sets *
+		c->icache.ways * c->icache.linesz;
+	c->icache.waybit = ffs(icache_size/c->icache.ways) - 1;
+
+	c->dcache.flags = 0;
+
+	lsize = (config1 >> 10) & 7;
+	if (lsize != 0)
+		c->dcache.linesz = 2 << lsize;
+	else
+		c->dcache.linesz = lsize;
+	c->dcache.sets = 64 << ((config1 >> 13) & 7);
+	c->dcache.ways = 1 + ((config1 >> 7) & 7);
+
+	dcache_size = c->dcache.sets *
+		c->dcache.ways * c->dcache.linesz;
+	c->dcache.waybit = ffs(dcache_size/c->dcache.ways) - 1;
+
+	if (smp_processor_id() == 0) {
+		pr_info("Primary instruction cache %dkB, %d-way, linesize"
+			" %d bytes.\n", icache_size >> 10, c->icache.ways,
+			c->icache.linesz);
+		pr_info("Primary data cache %dkB %d-way, linesize %d bytes.\n",
+			dcache_size >> 10, c->dcache.ways, c->dcache.linesz);
+	}
+}
+
+static void coherency_setup(void)
+{
+	int cca = 3;
+
+	_page_cachable_default = cca << _CACHE_SHIFT;
+	change_c0_config(CONF_CM_CMASK, cca);
+}
+
+void __cpuinit nlm_cache_init(void)
+{
+	/* update cpu_data */
+	probe_l1_cache();
+	if (smp_processor_id() != 0) {
+		nlm_local_flush_icache();
+		coherency_setup();
+		return;
+	}
+
+	/*
+	 * When does this function get called? Looks like MIPS has some syscalls
+	 * to flush the caches.
+	 */
+	__flush_cache_all = nlm_flush_l1_caches;
+
+	/* flush_cache_all: makes all kernel data coherent.
+	 * This gets called just before changing or removing
+	 * a mapping in the page-table-mapped kernel segment (kmap).
+	 * Physical Cache -> do nothing
+	 */
+	flush_cache_all = nlm_noflush;
+
+	/* flush_icache_range: makes the range of addresses coherent w.r.t
+	 * I-cache and D-cache. This gets called after the instructions are
+	 * written to memory. All addresses are valid kernel or mapped
+	 * user-space virtual addresses
+	 */
+	flush_icache_range = nlm_flush_icache_range;
+
+	/* flush_cache_{mm, range, page}: make these memory locations, that
+	 * may have been written by a user process, coherent. These get called
+	 * when virtual->physical translation of a user address space is about
+	 * to be changed. These are closely related to TLB coherency
+	 * (flush_tlb_{mm, range, page})
+	 */
+	flush_cache_mm = (void (*)(struct mm_struct *))nlm_noflush;
+	flush_cache_range = (void *) nlm_noflush;
+	flush_cache_page = (void *) nlm_noflush;
+
+	/*
+	 * flush_icache_page: flush_dcache_page + update_mmu_cache takes care
+	 * of this
+	 */
+	flush_data_cache_page = (void *) nlm_noflush;
+
+	/*
+	 * flush_cache_sigtramp: flush the single I-cache line with the proper
+	 * fixup code
+	 */
+	flush_cache_sigtramp = nlm_flush_cache_sigtramp;
+
+	/*
+	 * flush_icache_all: This should get called only for Virtuall Tagged
+	 * I-Caches
+	 */
+	flush_icache_all = (void *)nlm_noflush;
+
+	local_flush_icache_range = nlm_local_flush_icache_range;
+	local_flush_data_cache_page	= (void *)nlm_noflush;
+
+	__flush_cache_vmap = (void *)nlm_noflush;
+	__flush_cache_vunmap = (void *)nlm_noflush;
+
+	/* memcpy((void *)(nlm_common_ebase + 0x100), &except_vec2_generic, 0x80); */
+
+	build_clear_page();
+	build_copy_page();
+
+	nlm_local_flush_icache();
+	coherency_setup();
+	board_cache_error_setup = NULL;
+}
diff --git a/arch/mips/mm/cache.c b/arch/mips/mm/cache.c
index 2cd5ab7..e68a23a 100644
--- a/arch/mips/mm/cache.c
+++ b/arch/mips/mm/cache.c
@@ -226,6 +226,11 @@ void __cpuinit cpu_cache_init(void)
 
 		octeon_cache_init();
 	}
+	if (cpu_has_netlogic_cache) {
+		extern void __weak nlm_cache_init(void);
+
+		nlm_cache_init();
+	}
 
 	setup_protection_map();
 }
-- 
1.9.1

