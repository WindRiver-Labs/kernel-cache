From 2c56f7017f778cac2a145e3f703921f1d526430d Mon Sep 17 00:00:00 2001
From: yan sun <yansun@broadcom.com>
Date: Tue, 10 Sep 2013 19:31:07 -0700
Subject: [PATCH 0791/1532] ale: modify cpu threshold and clean up compilation
 warnings

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/lib/alelib/ale_api.c       |  5 +++--
 arch/mips/netlogic/lib/alelib/ale_api.h       |  2 +-
 arch/mips/netlogic/lib/alelib/ale_fdt.c       |  4 ++--
 arch/mips/netlogic/lib/alelib/ale_node_db.c   | 11 ++---------
 arch/mips/netlogic/lib/alelib/ale_sw_search.c |  4 ++--
 5 files changed, 10 insertions(+), 16 deletions(-)

diff --git a/arch/mips/netlogic/lib/alelib/ale_api.c b/arch/mips/netlogic/lib/alelib/ale_api.c
index b8c76b7..5faf335 100644
--- a/arch/mips/netlogic/lib/alelib/ale_api.c
+++ b/arch/mips/netlogic/lib/alelib/ale_api.c
@@ -41,7 +41,7 @@
 
 
 static ale_t* xlp_ale[NLM_MAX_NODES][MAX_ALE_BLOCKS] = {{0}};
-void *(*ale_contig_alloc)(uint32_t align, uint32_t size);
+void *(*ale_contig_alloc)(size_t align, size_t size);
 void (*ale_contig_free)(void *ptr);
 uint64_t (*ale_virt_to_phys)(void *);
 void *(*ale_phys_to_virt)(uint64_t);
@@ -357,6 +357,7 @@ ale_create_db(ale_t *ale,
 
     ale_db_entry_t* ale_db_hw = NULL;
     int node_cnt, shift;
+    uint8_t mask;
 
     if (ale)
         ale_db_hw = (!ale->active_db) ? ale->node_base_addr[1] : ale->node_base_addr[0];
@@ -364,7 +365,7 @@ ale_create_db(ale_t *ale,
     node_cnt = ale_create_db_internal(prefix_table, prefix_num, ale_db_hw);
     ale_print(ALE_DBG_INFO, "%s: node_cnt=%d\n", __func__, node_cnt);
     shift = node_cnt/ALE_NODE_PER_BANK + ((node_cnt % ALE_NODE_PER_BANK == 0) ? 0 : 1);
-    uint8_t mask = 0x3f >> ((shift >= ALE_NODE_BANK_NUM) ? 0 : (ALE_NODE_BANK_NUM - shift));
+    mask = 0x3f >> ((shift >= ALE_NODE_BANK_NUM) ? 0 : (ALE_NODE_BANK_NUM - shift));
 
     if (ale_db_hw) {
         ale_print(ALE_DBG_INFO, "%s: ALE node base addr=%llx\n",
diff --git a/arch/mips/netlogic/lib/alelib/ale_api.h b/arch/mips/netlogic/lib/alelib/ale_api.h
index 6dfe355..5afeb94 100644
--- a/arch/mips/netlogic/lib/alelib/ale_api.h
+++ b/arch/mips/netlogic/lib/alelib/ale_api.h
@@ -108,7 +108,7 @@ extern uint64_t (*ale_virt_to_phys)(void *);
 #endif
 
 typedef struct ale_lib_param_s {
-        void *(*contig_alloc)(uint32_t align, uint32_t size);
+        void *(*contig_alloc)(size_t align, size_t size);
         void (*contig_free)(void *ptr);
         uint64_t (*virt_to_phys)(void *);
         void *(*phys_to_virt)(uint64_t);
diff --git a/arch/mips/netlogic/lib/alelib/ale_fdt.c b/arch/mips/netlogic/lib/alelib/ale_fdt.c
index 6b564c5..670f2cf 100644
--- a/arch/mips/netlogic/lib/alelib/ale_fdt.c
+++ b/arch/mips/netlogic/lib/alelib/ale_fdt.c
@@ -68,7 +68,7 @@ fdt_get_ale_cpu_threshold(void *fdt, ale_t *ale)
                         ale->cpu_threshold = fdt32_to_cpu(*pval);
                 }
                 else {
-                        ale->cpu_threshold = 20;
+                        ale->cpu_threshold = 32;
                 }
         }
         return 0;
@@ -90,7 +90,7 @@ fdt_get_ale_nae_threshold(void *fdt, ale_t *ale)
                         ale->nae_threshold = fdt32_to_cpu(*pval);
                 }
                 else {
-                        ale->nae_threshold = 80;
+                        ale->nae_threshold = 96;
                 }
         }
         return 0;
diff --git a/arch/mips/netlogic/lib/alelib/ale_node_db.c b/arch/mips/netlogic/lib/alelib/ale_node_db.c
index 0ae4a8d..bcb42a6 100644
--- a/arch/mips/netlogic/lib/alelib/ale_node_db.c
+++ b/arch/mips/netlogic/lib/alelib/ale_node_db.c
@@ -564,7 +564,6 @@ int ale_delete_prefix_internal(ale_t* ale, ale_prefix_t* prefix, int last_update
 
     int i, update_node_cnt = 0;
     unsigned int current_node = 0;
-    unsigned int latest_node = 0;
   
     for(i=0; i < btree_node_cnt; i++){
         btree[i].node_type = 0;
@@ -576,19 +575,13 @@ int ale_delete_prefix_internal(ale_t* ale, ale_prefix_t* prefix, int last_update
             if(btree[current_node].right == 0){
                 ale_print(ALE_DBG_ERR, "Can not find the prefix\n");                      
             }
-            current_node = btree[current_node].right;
-            if(btree[current_node].node_index){
-                latest_node = current_node;                
-            }
+            current_node = btree[current_node].right;            
         }
         else{
             if(btree[current_node].left == 0){
                 ale_print(ALE_DBG_ERR, "Can not find the prefix\n");                      
             }
-            current_node = btree[current_node].left;
-            if(btree[current_node].node_index){
-                latest_node = current_node;
-            }
+            current_node = btree[current_node].left;            
         }        
     }
     //delete from binary tree    
diff --git a/arch/mips/netlogic/lib/alelib/ale_sw_search.c b/arch/mips/netlogic/lib/alelib/ale_sw_search.c
index 68236fe..4942fd7 100644
--- a/arch/mips/netlogic/lib/alelib/ale_sw_search.c
+++ b/arch/mips/netlogic/lib/alelib/ale_sw_search.c
@@ -146,7 +146,7 @@ unsigned int search_SPARSE(ale_prefix_t* prefix, ale_node_t* ale_db) {
 
     int i, j, length, OneCount, Ibit;
     int level = 0;
-    unsigned int TempResultPtr, ResultPtr=0;
+    unsigned int TempResultPtr = 0, ResultPtr = 0;
     int max_SPARSE_node = (1 << (ALE_STRIDE - 1));
     int node = 0; //search from Root
     unsigned int BitPos[2 * max_SPARSE_node];
@@ -232,7 +232,7 @@ unsigned int ale_string_search_internal(ale_prefix_t* prefix, ale_node_t* ale_db
 
     int i, j, length, OneCount, Ibit;
     int level = 0;
-    unsigned int TempResultPtr, ResultPtr=0;
+    unsigned int TempResultPtr = 0, ResultPtr = 0;
     int max_SPARSE_node = (1 << (ALE_STRIDE - 1));
     int node = 0; //search from Root
     unsigned int BitPos[2 * max_SPARSE_node];
-- 
1.9.1

