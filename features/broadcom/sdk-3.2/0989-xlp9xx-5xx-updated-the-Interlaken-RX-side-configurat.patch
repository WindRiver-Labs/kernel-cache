From d8ddded43215625f1681b2a7f57ef22d502c5ded Mon Sep 17 00:00:00 2001
From: Vikas Gupta <vikas.gupta@broadcom.com>
Date: Fri, 11 Jul 2014 15:43:14 +0530
Subject: [PATCH 0989/1532] xlp9xx/5xx: updated the Interlaken RX side
 configuration.

[Based on SDK 3.2]
Change from "DEFAULT_XLP9XX_XAUI_RXFIFO_SZ/2;" to "return DEFAULT_XLP9XX_XAUI_RXFIFO_SZ/2;"
because the error as below:
arch/mips/netlogic/lib/netlib/include/netsoc_common.h:414:4: note: in expansion of macro 'DEFAULT_XLP9XX_XAUI_RXFIFO_SZ'
    DEFAULT_XLP9XX_XAUI_RXFIFO_SZ/2;
    ^

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 .../mips/netlogic/lib/netlib/include/netsoc_common.h | 20 +++++++++++++++-----
 arch/mips/netlogic/lib/netlib/src/netsoc_nae.c       | 14 ++++++++++----
 2 files changed, 25 insertions(+), 9 deletions(-)

diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_common.h b/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
index 5820556..efeb6c6 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
@@ -68,6 +68,7 @@
 #define DEFAULT_XAUI_CAL_SLOTS          13
 #define DEFAULT_RXAUI_CAL_SLOTS         5 
 #define DEFAULT_ILK_CAL_SLOTS           26
+#define DEFAULT_XLP9XX_ILK_CAL_SLOTS           10
 #define DEFAULT_XFI_CAL_SLOTS           7
 #define DEFAULT_XLAUI_CAL_SLOTS         13
 
@@ -262,7 +263,7 @@ static inline uint32_t get_numfree_desc(uint32_t intf_type)
 static inline int get_slots_required(int intf_type)
 {
         if (intf_type == SGMII_IF){
-		if (is_nlm_xlp9xx())
+		if (IS_NLM_XLP9XX_FAMILY)
                 		return DEFAULT_XLP9XX_SGMII_CAL_SLOTS;
                 	return DEFAULT_SGMII_CAL_SLOTS;
 		}
@@ -270,8 +271,11 @@ static inline int get_slots_required(int intf_type)
                 return DEFAULT_XAUI_CAL_SLOTS;
         else if (intf_type == RXAUI_IF)
                 return DEFAULT_RXAUI_CAL_SLOTS;
-        else if (intf_type == INTERLAKEN_IF)
-                return DEFAULT_ILK_CAL_SLOTS;
+        else if (intf_type == INTERLAKEN_IF){
+			if (IS_NLM_XLP9XX_FAMILY)
+                		return DEFAULT_XLP9XX_ILK_CAL_SLOTS;
+                	return DEFAULT_ILK_CAL_SLOTS;
+		}
         else if (intf_type == XFI_IF)
                 return DEFAULT_XFI_CAL_SLOTS;
         else if (intf_type == XLAUI_IF)
@@ -327,7 +331,7 @@ static inline uint32_t get_prsr_seq_fifo_size(int block, uint32_t intf_type)
 {
         switch(intf_type) {
 	case SGMII_IF:
- 		if (is_nlm_xlp9xx()){
+ 		if (IS_NLM_XLP9XX_FAMILY){
 			if(block==2){
 				return(current_netsoc->ingress.max_parseq_fifo	- (2*DEFAULT_XLP9XX_XAUI_PARSERSEQFIFO_SZ));
 			} else
@@ -350,6 +354,9 @@ static inline uint32_t get_prsr_seq_fifo_size(int block, uint32_t intf_type)
                 	return DEFAULT_XLP9XX_XAUI_PARSERSEQFIFO_SZ/2;
                 return DEFAULT_XAUI_PARSERSEQFIFO_SZ;
         case INTERLAKEN_IF:
+ 		if (IS_NLM_XLP9XX_FAMILY){
+			return DEFAULT_XAUI_PARSERSEQFIFO_SZ/2;
+		}	
                 return DEFAULT_ILK_PARSERSEQFIFO_SZ;
         default:
                 return DEFAULT_SGMII_PARSERSEQFIFO_SZ;
@@ -401,6 +408,9 @@ static inline uint32_t get_rx_buf_size(int block, uint32_t intf_type)
                 	return DEFAULT_XLP9XX_XAUI_RXFIFO_SZ/2;
                 return DEFAULT_XAUI_RXFIFO_SZ;
         case INTERLAKEN_IF:
+ 		if (IS_NLM_XLP9XX_FAMILY){
+			return DEFAULT_XLP9XX_XAUI_RXFIFO_SZ/2;	
+		}
                 return DEFAULT_ILK_RXFIFO_SZ;
         default:
                 return DEFAULT_SGMII_RXFIFO_SZ;
@@ -417,7 +427,7 @@ static inline uint32_t get_max_lanes(uint32_t intf_type)
 		return 4;
 	}
 	else if(INTERLAKEN_IF==intf_type){
-		return 8;	
+		return 1;	
 	}else if((SGMII_IF==intf_type) || (XFI_IF==intf_type)){
 		return 1;
 	}else
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
index 700f5a7..8d63d12 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
@@ -1447,7 +1447,13 @@ void __netsoc_config_ingress_fifo(nae_t *nae)
 			rx_buf_size = nae->ports[port].rx_buf_size;
 			break;
 		   case INTERLAKEN_IF:
-			fifo_xoff_thresh = 12;
+			thrgrp = 4;
+			if(IS_NLM_XLP9XX_FAMILY)
+				fifo_xoff_thresh = 12*2;
+			else
+				fifo_xoff_thresh = 12;
+				
+			rx_buf_size = nae->ports[port].rx_buf_size;
  			break;
 		    default:
 			fifo_xoff_thresh = 0;
@@ -2566,7 +2572,7 @@ static int __netsoc_init_netior(nae_t *nae)
 
 	sgmii_ifcredit = get_iface_credit(SGMII_IF);
 	xaui_ifcredit =  get_iface_credit(XAUI_IF);
-	ilk_ifcredit = 7; //get_iface_credit(INTERLAKEN_IF);
+	ilk_ifcredit = get_iface_credit(XAUI_IF); //get_iface_credit(INTERLAKEN_IF);
 
         netsoc_write_nae_iface_reg(nae_base, NETIOR_SOFTRESET, 0);
 
@@ -3115,9 +3121,9 @@ int __netsoc_config_frame_size(net_port_t *netport, uint32_t size)
 			break;
                 case INTERLAKEN_IF:
                         if(nae->nae_id)
-                                return cortina_set_max_framesize(netport->hw_port_id+8, (netport->hw_port_id/MAX_PORTS_PERBLOCK), size);
+                                return cortina_set_max_framesize(netport->hw_port_id+8, (netport->ext_phy_addr), size);
                         else
-                                return cortina_set_max_framesize(netport->hw_port_id, (netport->hw_port_id/MAX_PORTS_PERBLOCK), size);
+                                return cortina_set_max_framesize(netport->hw_port_id, (netport->ext_phy_addr), size);
                         break;
 
 		default:
-- 
1.9.1

