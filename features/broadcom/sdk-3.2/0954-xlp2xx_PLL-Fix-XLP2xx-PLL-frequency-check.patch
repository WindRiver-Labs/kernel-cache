From f6eb48ac54a5e66b51a5d22e4d7372e48ec66229 Mon Sep 17 00:00:00 2001
From: johuang <john.huang@broadcom.com>
Date: Fri, 11 Apr 2014 09:30:24 -0700
Subject: [PATCH 0954/1532] xlp2xx_PLL: Fix XLP2xx PLL frequency check.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/lib/syslib/src/nlm_hal_sys.c | 81 ++++++++++++++-----------
 1 file changed, 46 insertions(+), 35 deletions(-)

diff --git a/arch/mips/netlogic/lib/syslib/src/nlm_hal_sys.c b/arch/mips/netlogic/lib/syslib/src/nlm_hal_sys.c
index cd1e2fd..3aca5db 100644
--- a/arch/mips/netlogic/lib/syslib/src/nlm_hal_sys.c
+++ b/arch/mips/netlogic/lib/syslib/src/nlm_hal_sys.c
@@ -675,41 +675,56 @@ static inline uint8_t xlp2xx_get_clkdev_div(int node, soc_device_id_t dev_type)
 	return  1<< (( nlm_hal_read_sys_reg(node, XLP2XX_SYS_CLK_DEV_DIV_REG) >> (dev_idx*2) ) & 0x3);
 }	
 
+static u32 xlp2xx_pll_Rate2Div(u32 reg)
+{
+	u32 div = 1;
+	reg = (reg>>24) & 7;
+	switch( reg )
+	{
+	case 0:  div = 1;  break;
+	case 1:  div = 2;  break;
+	case 3:  div = 4;  break;
+	case 7:  div = 8;  break;
+	case 6:  div = 16; break;
+	}
+
+	return div;
+}
+
 uint64_t nlm_hal_xlp2xx_get_pllfreq_dyn(int node, uint8_t pll_type)
 {
-        uint32_t pll_mult = 0; /* [5:0] */
-        uint64_t ref_clk_num;
+	uint32_t pll_mult = 0; /* [5:0] */
+	uint64_t ref_clk_num;
 	uint32_t ref_clk_den;
-        uint32_t reg_ctrl;
-	int plf = xlp2xx_get_plf(node)+1;
-        switch(pll_type)
-        {
-                case CORE0_PLL:
-                case CORE1_PLL:
-                        reg_ctrl = XLP2XX_CORE0_PLL_CTRL1+pll_type*4;
-                break;
-                case SYS_PLL:
-                case DMC_PLL:
-                case DEV0_PLL:
-                case DEV1_PLL:
-                case DEV2_PLL:
-                        reg_ctrl = XLP2XX_SYS_PLL_CTRL1+(pll_type-SYS_PLL)*4;
-                break;
-                default:
-                        nlm_print("Unknown PLL type:%d\n", pll_type);
-                        return 0;
-        }
-        pll_mult = nlm_hal_read_sys_reg(node, reg_ctrl) & (0x3f);
-        ref_clk_num =  (REF_CLK_NUM_100 * pll_mult);
-        ref_clk_den = REF_CLK_DEN;
-        NLM_HAL_DO_DIV(ref_clk_num, ref_clk_den);
-        ref_clk_num +=  REF_CLK_NUM_400;
-
-        if(pll_type != DMC_PLL) {
-		NLM_HAL_DO_DIV(ref_clk_num, plf);
+	uint32_t reg_ctrl0, reg_ctrl;
+        
+	switch(pll_type)
+	{
+		case CORE0_PLL:
+		case CORE1_PLL:
+			reg_ctrl0 = XLP2XX_CORE0_PLL_CTRL0+pll_type*4;
+			reg_ctrl = XLP2XX_CORE0_PLL_CTRL1+pll_type*4;
+			break;
+		case SYS_PLL:
+		case DMC_PLL:
+		case DEV0_PLL:
+		case DEV1_PLL:
+		case DEV2_PLL:
+			reg_ctrl0 = XLP2XX_SYS_PLL_CTRL0+(pll_type-SYS_PLL)*4;
+			reg_ctrl = XLP2XX_SYS_PLL_CTRL1+(pll_type-SYS_PLL)*4;
+			break;
+		default:
+			nlm_print("Unknown PLL type:%d\n", pll_type);
+			return 0;
 	}
-
-        return ref_clk_num;
+	pll_mult = nlm_hal_read_sys_reg(node, reg_ctrl) & (0x3f);
+	ref_clk_num =  (REF_CLK_NUM_100 * pll_mult);
+	ref_clk_den = REF_CLK_DEN;
+	NLM_HAL_DO_DIV(ref_clk_num, ref_clk_den);
+	ref_clk_num +=  REF_CLK_NUM_400;
+	NLM_HAL_DO_DIV(ref_clk_num, xlp2xx_pll_Rate2Div(reg_ctrl0));
+
+	return ref_clk_num;
 }
 
 uint64_t nlm_hal_xlp2xx_set_pllfreq_dyn(int node, uint8_t pll_type, uint64_t freq)
@@ -719,10 +734,6 @@ uint64_t nlm_hal_xlp2xx_set_pllfreq_dyn(int node, uint8_t pll_type, uint64_t fre
 	uint64_t clk_base_freq_num = 100*1000000;
 	uint32_t clk_base_freq_den = 3;
 	uint32_t reg_ctrl,reg_chg,chg_mask;
-	int plf = xlp2xx_get_plf(node)+1;
-
-	if(pll_type!=DMC_PLL)
-		freq*=plf;
 
 	if(freq<400*1000000){
 	        nlm_print("Freq for PLL cant be less than 400 Mhz\n");
-- 
1.9.1

