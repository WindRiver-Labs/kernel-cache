From 46eb39bd23a7aaae0c1392d6aac1afb05923214e Mon Sep 17 00:00:00 2001
From: Yonghong Song <ysong@broadcom.com>
Date: Wed, 1 May 2013 09:53:07 -0700
Subject: [PATCH 0677/1532] syslib: add is_nlm_xlp9xx and nlm_hal_get_cpuinfo
 support for xlp9xx

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 .../netlogic/lib/syslib/include/nlm_hal_xlp_dev.h  |  2 +-
 .../netlogic/lib/syslib/src/nlm_hal_cpu_info.c     | 79 ++++++++++++++++------
 2 files changed, 58 insertions(+), 23 deletions(-)

diff --git a/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h b/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h
index f985a78..903010a 100644
--- a/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h
+++ b/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h
@@ -59,7 +59,6 @@
 #define CHIP_PROCESSOR_ID_XLP_8_4_XX 0x10
 #define CHIP_PROCESSOR_ID_XLP_3XX    0x11
 #define CHIP_PROCESSOR_ID_XLP_2XX    0x12
-#define CHIP_PROCESSOR_ID_XLP_1XX    0x13
 #define CHIP_PROCESSOR_ID_XLP_9XX    0x15
 
 /*XLP 8XX  A0,A1,A2 chip support*/
@@ -204,6 +203,7 @@ extern int is_nlm_xlp(unsigned int chipid, unsigned int rev,  unsigned int ext);
 #define is_nlm_xlp3xx_lite()  (is_nlm_xlp3xx() && (!is_nlm_xlp3xx_B(XLP_REVISION_ANY)) )
 
 #define is_nlm_xlp2xx()	    is_nlm_xlp(0x2000, XLP_REVISION_ANY,  0)
+#define is_nlm_xlp9xx()	    is_nlm_xlp(0x9000, XLP_REVISION_ANY,  0)
 
 #endif /*__XLP_CHIPID_MACROS__ */
 
diff --git a/arch/mips/netlogic/lib/syslib/src/nlm_hal_cpu_info.c b/arch/mips/netlogic/lib/syslib/src/nlm_hal_cpu_info.c
index 883b345..cac02e3 100644
--- a/arch/mips/netlogic/lib/syslib/src/nlm_hal_cpu_info.c
+++ b/arch/mips/netlogic/lib/syslib/src/nlm_hal_cpu_info.c
@@ -66,17 +66,17 @@ __inline__ uint32_t efuse_cfg0(void)
         return  nlm_hal_read_32bit_reg(SYS_REG_BASE , (SYS_REG_INDEX(EFUSE_DEVICE_CFG0)));
 }
 
- __inline__ uint32_t efuse_cfg1(void)
+__inline__ uint32_t efuse_cfg1(void)
 {
         return  nlm_hal_read_32bit_reg(SYS_REG_BASE , (SYS_REG_INDEX(EFUSE_DEVICE_CFG1)));
 }
 
- __inline__ uint32_t efuse_cfg2(void)
+__inline__ uint32_t efuse_cfg2(void)
 {
         return  nlm_hal_read_32bit_reg(SYS_REG_BASE , (SYS_REG_INDEX(EFUSE_DEVICE_CFG2)));
 }
 
- __inline__ uint32_t efuse_cfg3(void)
+__inline__ uint32_t efuse_cfg3(void)
 {
         return  nlm_hal_read_32bit_reg(SYS_REG_BASE , (SYS_REG_INDEX(EFUSE_DEVICE_CFG3)));
 }
@@ -87,25 +87,25 @@ __inline__ uint32_t efuse_cfg6(void)
 }
 
 
-__inline__ int nlm_xlp2xx_has_cmp(void)
+static __inline__ int nlm_xlp2xx_has_cmp(void)
 {
     unsigned int cfg1 = efuse_cfg1();
     return !(cfg1 & (1 << XLP2XX_CMP_BLOCK_INDEX));
 }
 
-__inline__ int nlm_xlp2xx_has_crypto(void)
+static __inline__ int nlm_xlp2xx_has_crypto(void)
 {
     unsigned int cfg1 = efuse_cfg1();
     return !(cfg1 & (1 << XLP2XX_CRYPTO_BLOCK_INDEX));
 }
 
-__inline__ int nlm_xlp2xx_has_rsa(void)
+static __inline__ int nlm_xlp2xx_has_rsa(void)
 {
     unsigned int cfg2 = efuse_cfg2();
     return !(cfg2 & (1 << XLP2XX_RSA_BLOCK_INDEX));
 }
 
-__inline__ int nlm_xlp2xx_has_regx(void)
+static __inline__ int nlm_xlp2xx_has_regx(void)
 {
     unsigned int cfg2 = efuse_cfg2();
     return !(cfg2 & (1 << XLP2XX_REGX_BLOCK_INDEX));
@@ -127,12 +127,17 @@ __inline uint32_t get_proc_id(void)
 	return prid;
 }
 
-__inline__ int get_nlm_xlp8xx_rev(void)
+static __inline__ int get_nlm_xlp9xx_rev(void)
 {
 	return nlm_read_prid() & 0xff;
 }
 
-__inline__ int get_nlm_xlp3xx_rev(void)
+static __inline__ int get_nlm_xlp8xx_rev(void)
+{
+	return nlm_read_prid() & 0xff;
+}
+
+static __inline__ int get_nlm_xlp3xx_rev(void)
 {
 	int hw_rev = nlm_read_prid() & 0xff;
 	int sw_rev;
@@ -143,7 +148,7 @@ __inline__ int get_nlm_xlp3xx_rev(void)
 	return sw_rev;
 }
 
-__inline__ int get_nlm_xlp2xx_rev(void)
+static __inline__ int get_nlm_xlp2xx_rev(void)
 {
 	return nlm_read_prid() & 0xff;
 }
@@ -154,7 +159,7 @@ __inline__ int get_nlm_xlp2xx_rev(void)
 		single match: XLP_REVISION_A0 etc
 		multi-match:  XLP_REVISION_AX/_BX/_XX
 ****************************************************************************************/
-__inline__ int is_nlm_xlp8xx_rev_xx(uint32_t rev)
+static __inline__ int is_nlm_xlp8xx_rev_xx(uint32_t rev)
 {
 	int sw_rev=get_nlm_xlp8xx_rev();
 	uint32_t rev_b0 = XLP_REVISION_B0;
@@ -171,7 +176,7 @@ __inline__ int is_nlm_xlp8xx_rev_xx(uint32_t rev)
 		single match: XLP_REVISION_A0 etc
 		multi-match:  XLP_REVISION_AX/_BX/_XX
 ****************************************************************************************/
-__inline__ int is_nlm_xlp3xx_rev_xx(uint32_t rev)
+static __inline__ int is_nlm_xlp3xx_rev_xx(uint32_t rev)
 {
 	int sw_rev=get_nlm_xlp3xx_rev();
 	uint32_t rev_b0 = XLP_REVISION_B0;
@@ -184,7 +189,7 @@ __inline__ int is_nlm_xlp3xx_rev_xx(uint32_t rev)
 }
 
 
-__inline__ int is_nlm_xlp2xx_rev_xx(uint32_t rev)
+static __inline__ int is_nlm_xlp2xx_rev_xx(uint32_t rev)
 {
 	int sw_rev=get_nlm_xlp2xx_rev();
 	uint32_t rev_b0 = XLP_REVISION_B0;
@@ -201,7 +206,7 @@ match legacy eagle Ax: xlp832, xlp816, xlp432, xlp416, xlp408, xlp208, xlp204, x
 chipid: 832, 816, 432, 416, 408, 208, 204, 104; match any of the chip in eagle Ax
 rev:    revision
 ***************************************************************************************/
-inline int is_xlp8xx_legacy(int chipid, uint32_t rev)
+static inline int is_xlp8xx_legacy(int chipid, uint32_t rev)
 {
 	uint32_t pid=get_proc_id();
 	uint32_t sw_rev = get_nlm_xlp8xx_rev();
@@ -225,7 +230,7 @@ inline int is_xlp8xx_legacy(int chipid, uint32_t rev)
  * rev:  chip revision,
  */
 #define CPU_NUM_ANY  0 /* any cpu number will be matched */
-inline int is_xlp8xx(uint8_t num_cpu, uint32_t rev)
+static inline int is_xlp8xx(uint8_t num_cpu, uint32_t rev)
 {
 	uint32_t pid, core_mask, cfg1;
 	int ret, hw_cpu_num;
@@ -252,7 +257,7 @@ inline int is_xlp8xx(uint8_t num_cpu, uint32_t rev)
  * num_cpu: 32-xlp832, 24-xlp824, 16-xlp816, 0xff any cpu number is valid match
  * rev:  chip revision,
  */
-inline int is_xlp4xx(uint8_t num_cpu, uint32_t rev)
+static inline int is_xlp4xx(uint8_t num_cpu, uint32_t rev)
 {
 	uint32_t pid, core_mask, cfg1;
 	int ret, hw_cpu_num;
@@ -290,7 +295,7 @@ inline int is_xlp4xx(uint8_t num_cpu, uint32_t rev)
  * xlp201a  1x1 trheads
  * xlp101a  1x1 trheads
  */
-inline int xlp3xx_get_num_of_threads_per_core(uint32_t core_mask, uint32_t epid)
+static inline int xlp3xx_get_num_of_threads_per_core(uint32_t core_mask, uint32_t epid)
 {
 	int nthreads=1;
 	switch(epid) {
@@ -310,7 +315,7 @@ inline int xlp3xx_get_num_of_threads_per_core(uint32_t core_mask, uint32_t epid)
 	return nthreads;
 }
 
-inline int xlp3xx_get_num_of_cores(uint32_t core_mask, uint32_t epid)
+static inline int xlp3xx_get_num_of_cores(uint32_t core_mask, uint32_t epid)
 {
 	int ncores=1;
 	switch(epid) {
@@ -334,7 +339,7 @@ inline int xlp3xx_get_num_of_cores(uint32_t core_mask, uint32_t epid)
 	return ncores;
 }
 
-inline int is_xlp3xx(uint8_t num_cores, uint8_t num_threads, uint32_t rev, uint32_t exttype)
+static inline int is_xlp3xx(uint8_t num_cores, uint8_t num_threads, uint32_t rev, uint32_t exttype)
 {
 	uint32_t pid, cfg0, core_mask;
 	uint8_t epid;
@@ -368,7 +373,7 @@ inline int is_xlp3xx(uint8_t num_cores, uint8_t num_threads, uint32_t rev, uint3
  * num_cpu: 8-xlp208, 4-xlp204;  0xff any cpu number is valid match
  * rev:  chip revision,
  */
-inline int is_xlp2xx(uint8_t num_cores, uint8_t num_threads, uint32_t rev)
+static inline int is_xlp2xx(uint8_t num_cores, uint8_t num_threads, uint32_t rev)
 {
 	uint32_t pid, cfg0, core_mask;
 	int ret, ncores, nthreads;
@@ -390,6 +395,16 @@ inline int is_xlp2xx(uint8_t num_cores, uint8_t num_threads, uint32_t rev)
 	return 0;
 }
 
+static inline int is_xlp9xx(uint8_t num_cpus, uint32_t rev)
+{
+	uint32_t pid;
+	pid = get_proc_id();
+	if (pid == CHIP_PROCESSOR_ID_XLP_9XX)
+		return 1;
+	return 0;
+
+}
+
 /*
  * match xlpxx
  * chipid: 832, 316, 308, 208, etc, 800: any in 8xx group, 0 for all xlp group
@@ -415,6 +430,12 @@ int is_nlm_xlp(unsigned int chipid, unsigned int rev, unsigned int exttype)
 	uint8_t num_cpu=num_cores*num_threads_per_core;
 	int b_rc=0;
 
+	if (group == 9)
+	{
+		b_rc = is_xlp9xx(num_cpu, rev);
+		if( b_rc == 1 )	return 1;
+	}
+
 	if ( group==8 )
 	{
 		b_rc=is_xlp8xx(num_cpu, rev);
@@ -447,7 +468,7 @@ int is_nlm_xlp(unsigned int chipid, unsigned int rev, unsigned int exttype)
 }
 
 
-int  nlm_hal_get_chipid(void)
+static int  nlm_hal_get_chipid(void)
 {
 	int xlp2xx_threads_tbl[4] = { 4, 2, 2, 1 };
 	int chipid=-1, ncores, nthreads;
@@ -480,6 +501,12 @@ int  nlm_hal_get_chipid(void)
 		chipid = (0x2000 + (ncores<<4) + nthreads);
 		return chipid;
 	}
+	if (pid == CHIP_PROCESSOR_ID_XLP_9XX)
+	{
+		chipid = 0x9100;
+		return chipid;
+	}
+
 	/* eagle 8xx AX */
 	switch(pid)
 	{
@@ -529,6 +556,8 @@ static const char*  nlm_hal_get_chipid_str(void)
 	if(is_nlm_xlp201()) return "XLP201";
 	if(is_nlm_xlp101()) return "XLP101";
 
+	if(is_nlm_xlp9xx()) return "XLP9XX";
+
 	return "XLP???";
 }
 
@@ -552,7 +581,13 @@ int  nlm_hal_get_cpuinfo(struct nlm_netl_proc_info* cpu_info)
 	}
 	chipid_str = nlm_hal_get_chipid_str();
 
-	if( pid == CHIP_PROCESSOR_ID_XLP_2XX )
+	if (pid == CHIP_PROCESSOR_ID_XLP_9XX ) {
+		sw_rev = get_nlm_xlp9xx_rev();
+		cpu_info->revision= sw_rev;
+		sprintf(cpu_info->cpu_info_str, "%s Rev %c%1d",
+			chipid_str,(char)('A'+sw_rev/XLP_REVISION_B0), sw_rev%XLP_REVISION_B0);
+	}
+	else if( pid == CHIP_PROCESSOR_ID_XLP_2XX )
 	{
 		sw_rev = get_nlm_xlp2xx_rev();
 		cpu_info->revision= sw_rev;
-- 
1.9.1

