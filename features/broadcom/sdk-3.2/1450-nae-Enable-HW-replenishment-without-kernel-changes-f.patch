From b6fd7e816fc68a0901817454b41dde534414b479 Mon Sep 17 00:00:00 2001
From: PUNYA BHEEMESH <bheemesh@broadcom.com>
Date: Thu, 17 Jul 2014 18:37:21 +0530
Subject: [PATCH 1450/1532] nae: Enable HW replenishment without kernel changes
 for route mode.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/broadcom/nae/xlpge.h     | 36 +++++++++------------------
 drivers/net/ethernet/broadcom/nae/xlpge_nae.c |  1 +
 drivers/net/ethernet/broadcom/nae/xlpge_rx.c  |  5 +++-
 drivers/net/ethernet/broadcom/nae/xlpge_tx.c  |  8 ++++--
 4 files changed, 23 insertions(+), 27 deletions(-)

diff --git a/drivers/net/ethernet/broadcom/nae/xlpge.h b/drivers/net/ethernet/broadcom/nae/xlpge.h
index ec2cc46..9ea61aa 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge.h
+++ b/drivers/net/ethernet/broadcom/nae/xlpge.h
@@ -29,6 +29,9 @@
 
 #ifndef	__XLPGE_H__
 #define	__XLPGE_H__
+
+#define CONFIG_NLM_NET_OPTS
+
 #include <asm/atomic.h>
 //#include <nlm_hal_nae.h>
 
@@ -142,27 +145,14 @@
  *  of skb header
  */
 #define fast_reset_skbptrs(skb) \
-		*(uint64_t *)(ulong)((uint64_t *)skb + 0) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 1) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 2) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 3) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 4) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 5) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 6) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 7) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 8) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 9) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 10) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 11) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 12) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 13) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 14) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 15) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 16) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 17) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 18) = 0;		\
-		*(uint64_t *)(ulong)((uint64_t *)skb + 19) = 0;		\
-		*(uint32_t *)(ulong)((uint64_t *)skb + 20) = 0;
+		{\
+			int i;\
+			int len = (offsetof(struct sk_buff, tail))/8;\
+			for(i=0; i<len ; i++)\
+				*(uint64_t *)(ulong)((uint64_t *)skb + i) = 0;\
+			if( (len * 8) != (offsetof(struct sk_buff, tail)))\
+				*(uint32_t *)(ulong)((uint64_t *)skb + i) = 0;\
+		}\
 /*
  * This helper macro resets SKB data pointers for reuse
  * as free-in buffer
@@ -391,9 +381,6 @@ static __inline__ struct sk_buff *nlm_xlp_alloc_skb_atomic(int length, int node)
 	/* align the data to the next cache line */
 	offset = ((ulong)skb->data + CACHELINE_SIZE) & ~(CACHELINE_SIZE - 1);
 	skb_reserve(skb, (offset - (ulong)skb->data));
-#ifdef CONFIG_NLM_NET_OPTS
-	skb->netl_skb = skb;
-#endif
 	return skb;
 }
 
@@ -583,6 +570,7 @@ extern int load_balance_timer_run;
 #ifdef CONFIG_NLM_NET_OPTS
 extern struct sk_buff *last_rcvd_skb[NR_CPUS * 8] ____cacheline_aligned;
 extern uint32_t last_rcvd_len[NR_CPUS * 8] ____cacheline_aligned;
+extern uint32_t last_rcvd_true_size[NR_CPUS * 8] ____cacheline_aligned;
 extern uint32_t last_rcvd_node[NR_CPUS * 8] ____cacheline_aligned;
 extern uint64_t last_rcvd_skb_phys[NR_CPUS * 8] ____cacheline_aligned;
 extern int get_hw_frfifo_queue_id(int rxnode, nlm_nae_config_ptr nae_cfg,
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
index 8a00ac6..b8ec618 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
@@ -127,6 +127,7 @@ static const struct file_operations nae_proc_info_ops = {
 #ifdef CONFIG_NLM_NET_OPTS
 struct sk_buff *last_rcvd_skb[NR_CPUS * 8] ____cacheline_aligned;
 uint32_t last_rcvd_len[NR_CPUS * 8] ____cacheline_aligned;
+uint32_t last_rcvd_true_size[NR_CPUS * 8] ____cacheline_aligned;
 uint32_t last_rcvd_node[NR_CPUS * 8] ____cacheline_aligned;
 uint64_t last_rcvd_skb_phys[NR_CPUS * 8] ____cacheline_aligned;
 #endif
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
index d484e8b..4900624 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
@@ -59,6 +59,7 @@ static uint32_t cpu_weight[NR_CPUS];
 #ifdef CONFIG_NLM_NET_OPTS
 extern struct sk_buff *last_rcvd_skb[NR_CPUS * 8] ____cacheline_aligned;
 extern uint32_t last_rcvd_len[NR_CPUS * 8] ____cacheline_aligned;
+extern uint32_t last_rcvd_true_size[NR_CPUS * 8] ____cacheline_aligned;
 extern uint32_t last_rcvd_node[NR_CPUS * 8] ____cacheline_aligned;
 extern uint64_t last_rcvd_skb_phys[NR_CPUS * 8] ____cacheline_aligned;
 struct dev_data *last_rcvd_priv[NR_CPUS * 8] ____cacheline_aligned;
@@ -306,7 +307,7 @@ static void setup_search_path(void)
 			len = strlen(buf);
 		}
 		sprintf(buf + len,"\n");
-		nae_print(NAE_DBG_TRACE, (buf);
+		nae_print(NAE_DBG_TRACE, (buf));
 	}
 #endif
 	return;
@@ -782,6 +783,7 @@ static inline void process_rx_packets(void *arg, int cpu, unsigned int src_id,
 	last_rcvd_len[CPU_INDEX(cpu)] = len;
 	last_rcvd_node[CPU_INDEX(cpu)] = node;
 	last_rcvd_priv[CPU_INDEX(cpu)] = priv;
+	last_rcvd_true_size[CPU_INDEX(cpu)] = truesize;
 #endif
 
 #ifndef CONFIG_NLM_NET_OPTS
@@ -823,6 +825,7 @@ static inline void process_rx_packets(void *arg, int cpu, unsigned int src_id,
 		mac_refill_frin_one_buffer(pdev, cpu, truesize);
 		last_rcvd_skb[CPU_INDEX(cpu)] = NULL;
 		last_rcvd_len[CPU_INDEX(cpu)] = 0;
+		last_rcvd_true_size[CPU_INDEX(cpu)] = 0;
 	}
 #else
 	slow_replenish_count[CPU_INDEX(cpu)]++;
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_tx.c b/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
index ceacfc1..4d99ea3 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
@@ -135,18 +135,22 @@ int nlm_xlp_nae_start_xmit(struct sk_buff *skb, struct net_device *dev)
 		return tso_xmit_skb(skb, dev);
 #endif
 
+//	printk("skb: %llx, last_rcvd_skb: %llx, len: %llx, last_rcvd_len:  %llx, truesize: %llx, last_rcvd_true_size: %llx\n",
+//			skb, last_rcvd_skb[CPU_INDEX(cpu)], skb->len, last_rcvd_len[CPU_INDEX(cpu)], skb->truesize, last_rcvd_true_size[CPU_INDEX(cpu)]);
 #ifdef CONFIG_NLM_NET_OPTS
-	if (skb->netl_skb && (last_rcvd_skb[CPU_INDEX(cpu)] == skb->netl_skb)
+	if((last_rcvd_skb[CPU_INDEX(cpu)] == skb)
 		&& !skb_shared(skb)
 		&& (last_rcvd_len[CPU_INDEX(cpu)] == skb->len)
+		&& (last_rcvd_true_size[CPU_INDEX(cpu)] == skb->truesize)
 		&& !skb_cloned(skb) && nae_cfg->vfbtbl_hw_nentries) {
 		struct dev_data *rpriv = (struct dev_data *)last_rcvd_priv[CPU_INDEX(cpu)];
 		last_rcvd_skb[CPU_INDEX(cpu)] = NULL;
 		last_rcvd_len[CPU_INDEX(cpu)] = 0;
+		last_rcvd_true_size[CPU_INDEX(cpu)] = 0;
 
 		qid = get_hw_frfifo_queue_id(last_rcvd_node[CPU_INDEX(cpu)],
 			nae_cfg, cpu, skb->truesize, rpriv->hw_port_id);
-		msg0 = nae_tx_desc(DESC_TYPE_P2DNEOP, 0, last_rcvd_skb_phys[CPU_INDEX(cpu)]);
+		msg0 = nae_tx_desc(DESC_TYPE_P2DNEOP, qid, 0, last_rcvd_skb_phys[CPU_INDEX(cpu)]);
 		hw_repl = 1;
 
 		Message("Tx, tx complete to nae, cpu %d len %d qid %d\n",
-- 
1.9.1

