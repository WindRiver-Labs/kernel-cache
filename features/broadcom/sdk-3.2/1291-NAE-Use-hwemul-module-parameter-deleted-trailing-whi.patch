From 357beb9d252820f1452741cd94aa65c81526e308 Mon Sep 17 00:00:00 2001
From: Venu Vadapalli <vvadapalli@netlogicmicro.com>
Date: Sat, 4 Sep 2010 17:31:44 -0700
Subject: [PATCH 1291/1532] NAE: Use hwemul module parameter, deleted trailing
 whitespace, hooked up txc/interrupts proc stats

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/broadcom/nae/xlp_nae.c | 63 +++++++++++------------------
 1 file changed, 24 insertions(+), 39 deletions(-)

diff --git a/drivers/net/ethernet/broadcom/nae/xlp_nae.c b/drivers/net/ethernet/broadcom/nae/xlp_nae.c
index 18419a3..275ed60 100755
--- a/drivers/net/ethernet/broadcom/nae/xlp_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlp_nae.c
@@ -81,8 +81,6 @@
 #define ETH_MTU_SIZE		 	2048
 #define MIN_ETH_FRAME_SIZE		64
 
-#define  DUMP_RCV_PKT				0
-#define  DUMP_XMIT_PKT				0
 #define  DUMP_PKT(x, y)	if (debug == 2)  {	\
 	int i;      				\
         for(i = 0; i < y; i++)			\
@@ -93,11 +91,10 @@
         }					\
 	printk("\n"); }
 
-#define RUN_ON_SIM_ONLY			 	0
-#define IP_HEADER_4BYTE_ALIGN_WKAROUND 		0
-
+/* Module Parameters */
 static int debug = 0;
 module_param(debug, int, 0);
+
 static int hwemul = 0;
 module_param(hwemul, int, 0);
 
@@ -136,8 +133,6 @@ spinlock_t  nlm_xlp_nae_lock;
 static void nlm_xlp_sgmii_setcontext(void);
 static void nlm_xlp_nae_init(void);
 static int xlp_mac_proc_read(char *page, char **start, off_t off,int count, int *eof, void *data);
-static int nlm_xlp_nae_fill_rxfr(struct net_device *dev, unsigned int intf);
-static void mac_send_one_desc(unsigned long dev);
 static int  nlm_xlp_nae_open (struct net_device *dev);
 static int  nlm_xlp_nae_stop (struct net_device *dev);
 static int  nlm_xlp_nae_start_xmit (struct sk_buff *skb, struct net_device *dev);
@@ -153,13 +148,11 @@ static void nlm_xlp_nae_msgring_handler(uint32_t vc, uint32_t src_id,
 					uint64_t msg2, uint64_t msg3, void* data);
 
 static void nlm_xlp_mac_timer(unsigned long data);
-static void  nlm_xlp_nae_rx(struct sk_buff* skb, struct net_device *dev);
 static struct net_device_stats *nlm_xlp_mac_get_stats(struct net_device *dev);
 
 static struct net_device *dev_mac[MAX_GMAC_PORT];
 struct net_device *dev_mac_type[MAX_XLP_NET_TYPES][MAX_GMAC_PORT];
 
-
 extern struct proc_dir_entry *nlm_root_proc;
 static struct tasklet_struct mac_refill_task[MAX_GMAC_PORT];
 static void mac_refill_frin_desc(unsigned long dev);
@@ -180,8 +173,7 @@ static const struct net_device_ops nlm_xlp_nae_ops = {
 
 static __inline__ struct sk_buff *mac_get_skb_back_ptr(uint64_t addr)
 {
-        uint64_t *back_ptr =
-                (uint64_t *)(addr - CACHELINE_SIZE);
+        uint64_t *back_ptr = (uint64_t *)(addr - CACHELINE_SIZE);
         /* this function should be used only for newly allocated packets. It assumes
          * the first cacheline is for the back pointer related book keeping info
          */
@@ -432,14 +424,12 @@ static void nlm_xlp_nae_init(void)
 	printk("======= Module Parameters =========\n");
 	printk("debug = %d, hwemul=%d\n", debug, hwemul);
 
-#define HW_EMULATOR                            1
-#ifdef HW_EMULATOR
-	unsigned long mflags = 0;
-	msgrng_access_enable(mflags);
-        nlm_hal_fmn_init(0xE0000000ULL, 0x1000000, 50);
-	// nlm_hal_dump_outq();
-	msgrng_access_disable(mflags);
-#endif
+	if (hwemul) {
+		unsigned long mflags = 0;
+		msgrng_access_enable(mflags);
+		nlm_hal_fmn_init(0xE0000000ULL, 0x1000000, 50);
+		msgrng_access_disable(mflags);
+	}
 
 	if(xlp_sgmii_ports <= 0 || xlp_sgmii_ports > MAX_GMAC_PORT)
 	{
@@ -459,10 +449,6 @@ static void nlm_xlp_nae_init(void)
 		/* init_gmac(i); */
 		nlm_hal_open_if(GMAC_IF, i);
 	}
-#if 0
-	/* init tx if credit */
-	init_tx_if_credit( 0, 0x7FFFF );
-#endif
 
 	for (i = 0; i < 1 /*MAX_NET_INF*/; i++ )
 	{
@@ -471,11 +457,6 @@ static void nlm_xlp_nae_init(void)
 
 	ucore_load_apps(0xffffUL);
 
-#if 0
-	/*  init egress and igress interface */
-	init_ingress();
-	init_egress();
-#endif
 	spin_unlock_irq(&nlm_xlp_nae_lock);
 
 	for(i = 0; i< xlp_sgmii_ports /*MAX_GMAC_PORT*/; i++)
@@ -489,6 +470,7 @@ static void nlm_xlp_nae_init(void)
 		priv = netdev_priv(dev);
 		priv->dev 	= dev;
 		dev->netdev_ops = &nlm_xlp_nae_ops;
+
 		/* set ethtool_ops which is inside xlp_ethtool.c file*/
 		xlp_set_ethtool_ops(dev);
 
@@ -510,7 +492,7 @@ static void nlm_xlp_nae_init(void)
 		tasklet_init(&mac_refill_task[priv->port],mac_refill_frin_desc,(unsigned long)dev);
 	}
 
-	entry = create_proc_read_entry("nlm_mac_stats", 0 /* def mode */ ,
+	entry = create_proc_read_entry("mac_stats", 0 /* def mode */ ,
 				       nlm_root_proc /* parent */ ,
 				       xlp_mac_proc_read /* proc read function */ ,
 				       0	/* no client data */
@@ -593,7 +575,7 @@ static int  nlm_xlp_nae_open (struct net_device *dev)
 {
 	struct dev_data *priv = netdev_priv(dev);
 	int port = priv->port;
-	int ret  = 0, i;
+	int i;
 
 	if (priv->inited) return 0;
 
@@ -620,12 +602,9 @@ static int  nlm_xlp_nae_open (struct net_device *dev)
 	priv->link_timer.function = &nlm_xlp_mac_timer;
 	priv->phy_oldlinkstat = -1;
 
-#ifdef RUN_ON_SIM_ONLY
 	add_timer(&priv->link_timer);
-#endif
-/*	napi_enable(&priv->napi);*/
-
 
+/*	napi_enable(&priv->napi);*/
 
 	priv->stats.tx_packets	= 0;
 	priv->stats.tx_errors	= 0;
@@ -706,7 +685,7 @@ static int nlm_xlp_nae_start_xmit(struct sk_buff *skb, struct net_device *dev)
 
 	msg.entry[2] = msg.entry[3] = 0;
 
-	DUMP_PKT(skb->data, skb->len)
+	DUMP_PKT(skb->data, skb->len);
 
 	__sync();
 
@@ -873,6 +852,10 @@ static irqreturn_t nlm_xlp_nae_int_handler(int irq, void * dev_id)
         struct net_device *dev;
         struct dev_data *priv;
 	int i;
+	int cpu = 0;
+
+	cpu = hard_smp_processor_id();
+	priv->cpu_stats[cpu].interrupts++;
 
 	if(!dev_id)
 	{
@@ -901,12 +884,13 @@ static void nlm_xlp_nae_msgring_handler(uint32_t vc, uint32_t src_id,
 {
         struct net_device *pdev;
         struct dev_data *priv;
-	unsigned int len, port = 0, cpu, context;
+	unsigned int len, port = 0, context;
         unsigned char* buf;
         uint64_t addr , vaddr;
 	struct sk_buff* skb;
+	int cpu = 0;
 
-	cpu = vc >> 4;
+	cpu = hard_smp_processor_id();
 	vc = vc & 0x03;
 
        if (debug) {
@@ -942,6 +926,8 @@ static void nlm_xlp_nae_msgring_handler(uint32_t vc, uint32_t src_id,
 				       __func__, addr, skb, context, port);
 			}
 			dev_kfree_skb_any(skb);
+
+			priv->cpu_stats[cpu].txc_packets++;
 		}
 		else {
 			printk("[%s]: [txc] wrong addr = %llx\n", __func__, addr);
@@ -1051,7 +1037,6 @@ static int xlp_mac_proc_read(char *page, char **start, off_t off,
 
 		priv = netdev_priv(dev);
 
-
 		len += sprintf(page + len,
 			       "per port:  %d %lx %lx %lx %lx\n",
 			       i,
@@ -1123,7 +1108,7 @@ static void nlm_xlp_nae_remove(struct net_device * dev)
 		free_netdev(dev);
 	}
 
-	remove_proc_entry("nlm_mac_stats", nlm_root_proc /* parent dir*/ );
+	remove_proc_entry("mac_stats", nlm_root_proc /* parent dir*/ );
 
 }
 
-- 
1.9.1

