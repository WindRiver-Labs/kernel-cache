From a305578ff8b0f743dd94ec204beeeb992a26a4e5 Mon Sep 17 00:00:00 2001
From: Sreenidhi B R <sreenira@broadcom.com>
Date: Sat, 4 May 2013 15:15:39 +0530
Subject: [PATCH 0681/1532] fmnlib: add new register definitions, r/w functions
 and datapath APIs with guest ID.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_dp.h     | 156 +++++++++++++++++++++
 .../netlogic/lib/syslib/include/nlm_hal_xlp_dev.h  |   2 +
 2 files changed, 158 insertions(+)

diff --git a/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_dp.h b/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_dp.h
index 57c0785..fac7029 100644
--- a/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_dp.h
+++ b/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_dp.h
@@ -124,6 +124,7 @@ do {                                                                    \
 
 #define xlp_read_tx_status() _read_32bit_cp2_register(XLP_MSG_TXSTATUS_REG)
 #define xlp_read_rx_status() _read_32bit_cp2_register(XLP_MSG_RXSTATUS_REG)
+#define xlp_read_rx_status2() _read_32bit_cp2_register_sel(XLP_MSG_RXSTATUS_REG, 1)
 
 #define xlp_read_status1()   _read_32bit_cp2_register(XLP_MSG_STATUS1_REG)
 #define xlp_write_status1(value)   _write_32bit_cp2_register(XLP_MSG_STATUS1_REG, value)
@@ -131,9 +132,18 @@ do {                                                                    \
 #define xlp_read_config()       _read_32bit_cp2_register(XLP_MSG_CONFIG_REG)
 #define xlp_write_config(value) _write_32bit_cp2_register(XLP_MSG_CONFIG_REG, value)
 
+#define xlp_read_msg_ecc_status()  _read_32bit_cp2_register(XLP_MSG_ECC_STATUS)
+#define xlp_write_msg_ecc_status() _write_32bit_cp2_register(XLP_MSG_ECC_STATUS, value)
+
+#define xlp_read_msg_ecc_config()  _read_32bit_cp2_register_sel(XLP_MSG_ECC_STATUS, 1)
+#define xlp_write_msg_ecc_config() _write_32bit_cp2_register_sel(XLP_MSG_ECC_STATUS, value, 1)
+
 #define xlp_read_msg_int()	_read_32bit_cp2_register(XLP_MSG_INT_REG)
 #define xlp_write_msg_int(value)	_write_32bit_cp2_register(XLP_MSG_INT_REG, value)
 
+#define xlp_read_oq_credit_status() _read_64bit_cp2_register_sel(XLP_MSG_Q_CNT_STATUS, 0)
+#define xlp_read_iq_credit_status() _read_64bit_cp2_register_sel(XLP_MSG_Q_CNT_STATUS, 1)
+
 #define xlp_load_rx_msg0() _read_64bit_cp2_register_sel(XLP_RX_BUF_REG, 0)
 #define xlp_load_rx_msg1() _read_64bit_cp2_register_sel(XLP_RX_BUF_REG, 1)
 #define xlp_load_rx_msg2() _read_64bit_cp2_register_sel(XLP_RX_BUF_REG, 2)
@@ -950,6 +960,152 @@ static inline int xlp_message_receive(uint32_t vc, uint32_t *src_id,
 	return 0;
 }
 
+/**
+* @brief xlp_message_receive_gid_1 function is used to receive a single entry message from a VC of the CPU. It also reads the 8b guest ID. Size should be used to determine how other 64b messages were available with data.
+*
+* @param [in]  vc 		:VC mailbox of the CPU (1 to 4)
+* @param [out]  src_id		:Source Message Queue Number
+* @param [out]  size		:# of messages returned (1 to 4)
+* @param [out]  code		:8b SW code of the received message
+* @param [out]  msg0 		:64b data value for the received message
+* @param [out]  gid             :8b guest ID
+*
+* @return
+*  - "0" on receive success, "-1" on failure
+*
+* @ingroup hal_fmn
+*
+*/
+static inline int xlp_message_receive_gid_1(uint32_t vc, uint32_t *src_id,
+	uint32_t *size, uint32_t *code,	uint64_t *msg0, uint64_t *gid)
+{
+	unsigned int status;
+
+	if (!xlp_receive(vc))
+		return -1;
+
+	status = xlp_read_rx_status();
+	*size = ((status >> 26) & 0x3) + 1;
+	*code = (status >> 18) & 0xff;
+	*src_id = (status >> 4) & 0xfff;
+	*msg0 = xlp_load_rx_msg0();
+	*gid = (xlp_read_rx_status2()) & 0xff;
+	return 0;
+}
+/**
+* @brief xlp_message_receive_gid_2 function is used to receive a single entry message from a VC of the CPU. It also reads the 8b guest ID. Size should be used to determine how many of msg0-msg1 have valid data and if there were more messages available.
+*
+* @param [in]  vc 		:VC mailbox of the CPU (1 to 4)
+* @param [out]  src_id		:Source Message Queue Number
+* @param [out]  size		:# of messages that were in this received message (1 to 4)
+* @param [out]  code		:8b SW code of the received message
+* @param [out]  msg0 		:64b data value for the first received message
+* @param [out]  msg1 		:64b data value for the second received message
+* @param [out]  gid             :8b guest ID
+*
+* @return
+*  - "0" on receive success, "-1" on failure, "1" on load failure, "2" on pop failure
+*
+* @ingroup hal_fmn
+*
+*/
+static inline int xlp_message_receive_gid_2(uint32_t vc, uint32_t *src_id,
+	uint32_t *size, uint32_t *code, uint64_t *msg0, uint64_t *msg1, uint64_t *gid)
+{
+	unsigned int status;
+
+	if (!xlp_receive(vc))
+		return -1;
+
+	status = xlp_read_rx_status();
+	*size = ((status >> 26) & 0x3) + 1;
+	*code = (status >> 18) & 0xff;
+	*src_id = (status >> 4) & 0xfff;
+	*msg0 = xlp_load_rx_msg0();
+	*msg1 = xlp_load_rx_msg1();
+	*gid = (xlp_read_rx_status2()) & 0xff;
+	return (status & 0x3);
+}
+
+/**
+* @brief xlp_message_receive_gid_3 function is used to receive three entry message from a VC of the CPU. It also reads the 8b guest ID. Size should be used to determine how many of msg0-msg2 have valid data and if there were more messages available.
+*
+* @param [in]  vc               :VC mailbox of the CPU (1 to 4)
+* @param [out]  src_id          :Source Message Queue Number
+* @param [out]  size            :# of messages that were in this received message (1 to 4)
+* @param [out]  code            :8b SW code of the received message
+* @param [out]  msg0            :64b data value for the first received message
+* @param [out]  msg1            :64b data value for the second received message
+* @param [out]  msg2            :64b data value for the third received message
+* @param [out]  gid             :8b guest ID
+*
+* @return
+*  - "0" on receive success, "-1" on failure, "1" on load failure, "2" on pop failure
+*
+* @ingroup hal_fmn
+*
+*/
+static inline int xlp_message_receive_gid_3(uint32_t vc, uint32_t *src_id,
+        uint32_t *size, uint32_t *code, uint64_t *msg0, uint64_t *msg1, uint64_t *msg2,
+	uint64_t *gid)
+{
+        unsigned int status;
+
+        if (!xlp_receive(vc))
+                return -1;
+
+        status = xlp_read_rx_status();
+        *size = ((status >> 26) & 0x3) + 1;
+        *code = (status >> 18) & 0xff;
+        *src_id = (status >> 4) & 0xfff;
+        *msg0 = xlp_load_rx_msg0();
+        *msg1 = xlp_load_rx_msg1();
+        *msg2 = xlp_load_rx_msg2();
+	*gid = (xlp_read_rx_status2()) & 0xff;
+        return (status & 0x3);
+}
+
+/* */
+/**
+* @brief xlp_message_receive_gid function is used to receive a four entry message from a VC of the CPU.  It also reads the 8b guest ID. Size should be used to determine how many of msg0-msg3 have valid data.
+*
+* @param [in]  vc 		:VC mailbox of the CPU (1 to 4)
+* @param [out]  src_id		:Source Message Queue Number
+* @param [out]  size		:# of messages that were in this received message (1 to 4)
+* @param [out]  code		:8b SW code of the received message
+* @param [out]  msg0 		:64b data value for the first received message
+* @param [out]  msg1 		:64b data value for the second received message
+* @param [out]  msg2 		:64b data value for the third received message
+* @param [out]  msg3 		:64b data value for the fourth received message
+* @param [out]  gid             :8b guest ID
+*
+* @return
+*  - "0" on receive success, "-1" on failure
+*
+* @ingroup hal_fmn
+*
+*/
+static inline int xlp_message_receive_gid(uint32_t vc, uint32_t *src_id,
+	uint32_t *size, uint32_t *code, uint64_t *msg0, uint64_t *msg1,
+	uint64_t *msg2, uint64_t *msg3, uint64_t *gid)
+{
+	unsigned int status;
+
+	if (!xlp_receive(vc))
+		return -1;
+
+	status = xlp_read_rx_status();
+	*size = ((status >> 26) & 0x3) + 1;
+	*code = (status >> 18) & 0xff;
+	*src_id = (status >> 4) & 0xfff;
+	*msg0 = xlp_load_rx_msg0();
+	*msg1 = xlp_load_rx_msg1();
+	*msg2 = xlp_load_rx_msg2();
+	*msg3 = xlp_load_rx_msg3();
+	*gid = (xlp_read_rx_status2()) & 0xff;
+	return 0;
+}
+
 /* */
 /* Generic Messaging API */
 /* */
diff --git a/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h b/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h
index 903010a..bccbb52 100644
--- a/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h
+++ b/arch/mips/netlogic/lib/syslib/include/nlm_hal_xlp_dev.h
@@ -403,7 +403,9 @@ extern int is_nlm_xlp(unsigned int chipid, unsigned int rev,  unsigned int ext);
 #define XLP_MSG_STATUS1_REG	$4
 #define XLP_MSG_CONFIG_REG	$5
 #define XLP_MSG_CONFIG1_REG	$6
+#define XLP_MSG_ECC_STATUS     $7
 #define XLP_MSG_INT_REG		$8
+#define XLP_MSG_Q_CNT_STATUS   $9
 
 /*sys register offset in pcie config space*/
 #define XLP_PCIE_NODE0_SYSOFFSET        0x35000
-- 
1.9.1

