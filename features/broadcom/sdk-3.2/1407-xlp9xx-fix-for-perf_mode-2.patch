From 4dcb6c3b8b2080ece63444e31c3a2dfd5eca65cc Mon Sep 17 00:00:00 2001
From: Vikas Gupta <vikas.gupta@broadcom.com>
Date: Wed, 5 Jun 2013 16:46:09 -0700
Subject: [PATCH 1407/1532] xlp9xx: fix for perf_mode=2.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/broadcom/nae/xlpge.h     | 17 +++++++++++++----
 drivers/net/ethernet/broadcom/nae/xlpge_nae.c | 10 +++++-----
 drivers/net/ethernet/broadcom/nae/xlpge_rx.c  | 21 +++++++++++++--------
 drivers/net/ethernet/broadcom/nae/xlpge_tx.c  |  2 +-
 4 files changed, 32 insertions(+), 18 deletions(-)

diff --git a/drivers/net/ethernet/broadcom/nae/xlpge.h b/drivers/net/ethernet/broadcom/nae/xlpge.h
index b6ddf94..d16bffe 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge.h
+++ b/drivers/net/ethernet/broadcom/nae/xlpge.h
@@ -80,6 +80,7 @@
 #define	ETH_JUMBO_DATA_LEN		16000
 #define	CACHELINE_SIZE			(1ULL << 6)
 #define	SKB_BACK_PTR_SIZE		CACHELINE_SIZE
+#define NAE_BACK_PTR_SIZE		CACHELINE_SIZE
 #define	LRO_MAX_DESCS			8
 #define MSG_DST_FC_FAIL			0x01
 #define	MSG_INFLIGHT_MSG_EX		0x02
@@ -120,10 +121,10 @@
 
 #define	NLM_RX_ETH_BUF_SIZE		(ETH_DATA_LEN + ETH_HLEN + 	\
 	ETH_FCS_LEN + BYTE_OFFSET + PREPAD_LEN + SKB_BACK_PTR_SIZE +	\
-	CACHELINE_SIZE)
+	CACHELINE_SIZE + NAE_BACK_PTR_SIZE)
 #define	NLM_RX_JUMBO_BUF_SIZE		(ETH_JUMBO_DATA_LEN +		\
 	ETH_HLEN + ETH_FCS_LEN + BYTE_OFFSET + PREPAD_LEN +		\
-	SKB_BACK_PTR_SIZE + CACHELINE_SIZE)
+	SKB_BACK_PTR_SIZE + CACHELINE_SIZE + NAE_BACK_PTR_SIZE)
 
 #define	CACHELINE_ALIGNED_ADDR(addr)	\
 	(((ulong)(addr)) & ~(CACHELINE_SIZE - 1))
@@ -337,6 +338,12 @@ static __inline__ struct sk_buff *mac_get_skb_back_ptr(uint64_t addr)
 	return (struct sk_buff *)(ulong)(*back_ptr);
 }
 
+static __inline__ nae_t *mac_get_nae_back_ptr(uint64_t addr)
+{
+	uint64_t *back_ptr = (uint64_t *)(ulong)(addr - SKB_BACK_PTR_SIZE  + sizeof(void*));
+	return (nae_t*)(ulong)(*back_ptr);
+}
+
 /**********************************************************************
  * cacheline_aligned_kmalloc -  64 bits cache aligned kmalloc
  * return -  buffer address
@@ -380,12 +387,14 @@ static __inline__ struct sk_buff *nlm_xlp_alloc_skb_atomic(int length, int node)
 	return skb;
 }
 
-static __inline__ void mac_put_skb_back_ptr(struct sk_buff *skb)
+static __inline__ void mac_put_skb_back_ptr(struct sk_buff *skb, nae_t* naeptr)
 {
 	uint64_t *back_ptr = (uint64_t *)skb->data;
 
 	skb_reserve(skb, SKB_BACK_PTR_SIZE);
 	*back_ptr = (uint64_t)(ulong)skb;
+	back_ptr++;	
+	*back_ptr = (uint64_t)(ulong)naeptr;
 }
 
 static __inline__ void print_fmn_send_error(const char *str,
@@ -480,7 +489,7 @@ extern uint64_t err_replenish_count[NR_CPUS * 8] __cacheline_aligned;
 extern uint64_t p2p_dynamic_alloc_cnt[NR_CPUS * 8] __cacheline_aligned;
 extern struct net_device *xlp_dev_mac[NLM_MAX_NODES][MAX_GMAC_PORT];
 extern struct net_device *
-	per_cpu_netdev[NLM_MAX_NODES][NR_CPUS][24] __cacheline_aligned;
+	per_cpu_netdev[NLM_MAX_NODES][NR_CPUS][2][24] __cacheline_aligned;
 extern int lro_flush_priv_cnt[NR_CPUS];
 extern int lro_flush_needed[NR_CPUS][20];
 extern struct dev_data *lro_flush_priv[NR_CPUS][20];
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
index 54a53c0..23f31c5 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
@@ -50,7 +50,7 @@ struct nlm_nae_linux_shinfo lnx_shinfo[NLM_NAE_MAX_SHARED_DOMS + 1];
 uint64_t p2p_dynamic_alloc_cnt[NR_CPUS * 8] __cacheline_aligned;
 struct net_device *xlp_dev_mac[NLM_MAX_NODES][MAX_GMAC_PORT];
 struct net_device *
-	per_cpu_netdev[NLM_MAX_NODES][NR_CPUS][24] __cacheline_aligned;
+	per_cpu_netdev[NLM_MAX_NODES][NR_CPUS][2][24] __cacheline_aligned;
 int exclusive_vc = 0;
 module_param(exclusive_vc, int, 0);
 #ifdef CONFIG_NLM_ENABLE_LOAD_BALANCING
@@ -474,7 +474,7 @@ static int initialize_nae_per_node(nae_t * nae_cfg, uint32_t *phys_cpu_map, int
 	//if (nlm_configure_shared_freein_fifo(node, nae_cfg) != 0)
 	//	goto err;
 
-	//init_dummy_entries_for_port_fifos(nae_cfg);
+	init_dummy_entries_for_port_fifos(nae_cfg);
 
 #if 0
 	if (is_nlm_xlp2xx()) {
@@ -583,7 +583,7 @@ static int nlm_replenish_per_cpu_buffer(nae_t* nae_cfg,
 		}
 
 		/* Store skb in back_ptr */
-		mac_put_skb_back_ptr(skb);
+		mac_put_skb_back_ptr(skb, nae_cfg);
 		code = 0;
 
 		/* Send the free Rx desc to the MAC */
@@ -1010,7 +1010,7 @@ int mac_refill_frin_one_buffer(struct net_device *dev, int cpu,
 
 	skb->dev = dev;
 
-	mac_put_skb_back_ptr(skb);
+	mac_put_skb_back_ptr(skb, nae_cfg);
 
 	return mac_refill_frin_skb(nae_cfg, cpu, (uint64_t)virt_to_bus(skb->data), buf_size, priv->hw_port_id);
 }
@@ -1476,7 +1476,7 @@ static int nlm_per_port_nae_init(nae_t* nae_cfg, int port, int maxnae)
 
 
 	for (cpu = 0; cpu < NR_CPUS; cpu++)
-		per_cpu_netdev[node][cpu][port] = dev;
+		per_cpu_netdev[node][cpu][nae_cfg->nae_id][port] = dev;
 
 	return 0;
 }
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
index 0ce7ee5..9d0e0df 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
@@ -70,7 +70,7 @@ inline void process_tx_complete(int cpu, uint32_t src_id, uint64_t msg0)
         uint64_t addr;
         uint32_t context, port, node;
 
-        printk("%s cpu %d src_id %d\n", __FUNCTION__, cpu, src_id);
+        Message("%s cpu %d src_id %d\n", __FUNCTION__, cpu, src_id);
 
         /* Process Transmit Complete, addr is the skb pointer */
         addr = msg0 & 0xffffffffffULL;
@@ -616,7 +616,7 @@ static inline void process_rx_packets(int cpu, unsigned int src_id,
 		
 	node = (src_id >> 10) & 0x3;
 
-	printk("%s in cpu %d src_id %d len %d context %d node %d err %d\n",
+	Message("%s in cpu %d src_id %d len %d context %d node %d err %d\n",
 		__func__, cpu, src_id, len, context, node, err);
 
 
@@ -630,7 +630,15 @@ static inline void process_rx_packets(int cpu, unsigned int src_id,
 		return;
 	}
 #endif
-	pdev = per_cpu_netdev[node][cpu][port];
+	vaddr = (uint64_t)(unsigned long)bus_to_virt(addr);
+	nae_cfg = (uint64_t*)mac_get_nae_back_ptr(vaddr);
+
+#ifdef ENABLE_SANITY_CHECKS
+	if(nae_cfg->nae_id!=0 && nae_cfg->nae_id !=1)
+		printk("Ooops.....NAE ID is wrong\n");
+#endif
+	pdev = per_cpu_netdev[node][cpu][nae_cfg->nae_id][port];
+	 
 #ifdef ENABLE_SANITY_CHECKS
 	if (!pdev) {
 		printk("[%s]: [rx] wrong port=%d(context=%d)? pdev = NULL!\n",
@@ -641,16 +649,13 @@ static inline void process_rx_packets(int cpu, unsigned int src_id,
 	priv = netdev_priv(pdev);
 
 	if (err) {
-
 		vaddr = (uint64_t)(unsigned long)bus_to_virt(addr);
 		skb = mac_get_skb_back_ptr(vaddr);
-		mac_refill_frin_skb(node, cpu, addr, skb->truesize, priv->hw_port_id);
+		mac_refill_frin_skb(nae_cfg, cpu, addr, skb->truesize, priv->hw_port_id);
 		err_replenish_count[CPU_INDEX(cpu)]++;
 		return;
 	}
 
-
-	vaddr = (uint64_t)(unsigned long)bus_to_virt(addr);
 	
 	len = len  - ETH_FCS_LEN - nlm_prepad_len;
 
@@ -864,7 +869,7 @@ static void nlm_xlp_nae_msgring_handler(uint32_t vc, uint32_t src_id,
 {
 	int cpu = hard_smp_processor_id();
 
-	if (vc == nae_rx_vc && size == 2)
+	if (vc == nae_rx_vc && size >= 2)
 		 process_rx_packets(cpu, src_id, msg0, msg1, msg2);
 	else if (vc == nae_fb_vc && size == 1)
 		process_tx_complete(cpu, src_id, msg0);
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_tx.c b/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
index b7810c8..de93ba1 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
@@ -108,7 +108,7 @@ int nlm_xlp_nae_start_xmit(struct sk_buff *skb, struct net_device *dev)
 		qid = nae_cfg->vfbtbl_sw_offset + (cpu % NLM_NCPUS_PER_NODE);
 		msg0 = nae_tx_desc(DESC_TYPE_P2DNEOP, qid, 0, virt_to_bus(skb));
 
-		printk("Tx, tx complete to cpu, cpu %d len %d qid %d\n",
+		Message("Tx, tx complete to cpu, cpu %d len %d qid %d\n",
 			cpu, skb->len, qid);
 	}
 	
-- 
1.9.1

