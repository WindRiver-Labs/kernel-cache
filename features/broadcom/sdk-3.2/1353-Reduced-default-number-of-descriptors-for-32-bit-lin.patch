From cd253cf88bfa435806d7c366d9dc9e4ee8a7ec03 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Fri, 20 Apr 2012 16:25:22 +0530
Subject: [PATCH 1353/1532] Reduced default number of descriptors for 32 bit
 linux support

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/broadcom/nae/init_nae.c | 14 ++++++++++----
 drivers/net/ethernet/broadcom/nae/xlp_nae.c  | 14 ++++++++------
 drivers/net/ethernet/broadcom/nae/xlp_nae.h  |  4 ----
 3 files changed, 18 insertions(+), 14 deletions(-)

diff --git a/drivers/net/ethernet/broadcom/nae/init_nae.c b/drivers/net/ethernet/broadcom/nae/init_nae.c
index 654e74f..a4b02ce 100644
--- a/drivers/net/ethernet/broadcom/nae/init_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/init_nae.c
@@ -20,7 +20,8 @@ unsigned int cpu_2_normal_frfifo[NLM_MAX_NODES][NLM_NCPUS_PER_NODE];
 unsigned int cpu_2_jumbo_frfifo[NLM_MAX_NODES][NLM_NCPUS_PER_NODE];
 static unsigned int lnx_normal_mask;
 static unsigned int lnx_jumbo_mask;
-extern int num_descs_perq; 	
+extern int num_descs_per_normalq; 	
+extern int num_descs_per_jumboq; 	
 
 struct nlm_nae_linux_shinfo {
 	int valid;
@@ -325,11 +326,16 @@ int replenish_freein_fifos(void)
 
 		/* configure the descs */
 		max_descs_pqueue = nae_cfg->freein_fifo_onchip_num_descs +  nae_cfg->freein_fifo_spill_num_descs;
-		num_descs = num_descs_perq <= max_descs_pqueue ? num_descs_perq : max_descs_pqueue;
 
 		for(i = 0; i < nae_cfg->frin_total_queue; i++) {
-			if(((1 << i) & lnx_normal_mask) || ((1 << i) & lnx_jumbo_mask)) 
-				rv = nlm_replenish_per_cpu_buffer(node, nae_cfg, i, num_descs);
+			if((1 << i) & lnx_normal_mask)
+				num_descs = num_descs_per_normalq <= max_descs_pqueue ? num_descs_per_normalq : max_descs_pqueue;
+			else if((1 << i) & lnx_jumbo_mask)
+				num_descs = num_descs_per_jumboq <= max_descs_pqueue ? num_descs_per_jumboq : max_descs_pqueue;
+			else 
+				continue;
+				
+			rv = nlm_replenish_per_cpu_buffer(node, nae_cfg, i, num_descs);
 		}
 		if(rv != 0)
 			break;
diff --git a/drivers/net/ethernet/broadcom/nae/xlp_nae.c b/drivers/net/ethernet/broadcom/nae/xlp_nae.c
index 1f589b4..8d292b0 100755
--- a/drivers/net/ethernet/broadcom/nae/xlp_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlp_nae.c
@@ -83,11 +83,11 @@ module_param(perf_mode, int, 0);
 static int enable_lro =  0;
 module_param(enable_lro, int, 0);
 
-static int enable_napi =  1;
-module_param(enable_napi, int, 0);
+int num_descs_per_normalq = 64;
+module_param(num_descs_per_normalq, int, 0);
 
-int num_descs_perq = 500;
-module_param(num_descs_perq, int, 0);
+int num_descs_per_jumboq = 32;
+module_param(num_descs_per_jumboq, int, 0);
 
 static int enable_jumbo = 0;
 module_param(enable_jumbo, int, 0);
@@ -103,6 +103,8 @@ extern uint32_t nae_rx_vc;
 extern uint32_t nae_fb_vc;
 /***************************************************************/
 
+static int enable_napi =  1;
+
 unsigned char eth_hw_addr[NLM_MAX_NODES][MAX_GMAC_PORT][6];
 static unsigned int phys_cpu_map[NLM_MAX_NODES];
 extern uint32_t cpu_2_normal_frfifo[NLM_MAX_NODES][NLM_NCPUS_PER_NODE];
@@ -1039,8 +1041,8 @@ static void nlm_xlp_nae_init(void)
 	}
 
 	printk("======= Module Parameters =========\n");
-	printk("num_descs_perq=%d perf_mode=%s enable_napi=%d enable_lro=%d enable_jumbo=%d\n",
-	       num_descs_perq, mode_str[perf_mode], enable_napi, enable_lro, enable_jumbo);
+	printk("num_descs_per_normalq=%d num_descs_per_jumboq=%d perf_mode=%s enable_lro=%d enable_jumbo=%d\n",
+	       num_descs_per_normalq, num_descs_per_jumboq, mode_str[perf_mode], enable_lro, enable_jumbo);
 
 	/* msgring intr may not work in [8421]xxAx parts, disabling the napi */
 	if(is_nlm_xlp8xx_ax() && enable_napi) {
diff --git a/drivers/net/ethernet/broadcom/nae/xlp_nae.h b/drivers/net/ethernet/broadcom/nae/xlp_nae.h
index fb27dd5..f299dd2 100644
--- a/drivers/net/ethernet/broadcom/nae/xlp_nae.h
+++ b/drivers/net/ethernet/broadcom/nae/xlp_nae.h
@@ -116,11 +116,7 @@ static __inline__ struct sk_buff *nlm_xlp_alloc_skb_atomic(int length, int node)
         int offset = 0;
 	gfp_t gfp_mask = GFP_ATOMIC;
 
-#if defined(CONFIG_NLM_COMMON) && defined(CONFIG_64BIT)
-	struct sk_buff *skb = __alloc_skb(length + NET_SKB_PAD, gfp_mask|GFP_DMA, 0, node);
-#else
 	struct sk_buff *skb = __alloc_skb(length + NET_SKB_PAD, gfp_mask, 0, node);
-#endif
         if (!skb) 
                 return NULL;
 
-- 
1.9.1

