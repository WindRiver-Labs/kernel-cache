From 194bff6e613e182bce138bf278775e6137ac4c48 Mon Sep 17 00:00:00 2001
From: Prem Mallappa <pmallapp@broadcom.com>
Date: Fri, 28 Mar 2014 15:02:53 +0530
Subject: [PATCH 1216/1532] cde: Serialize cde access from userspace.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/misc/netlogic/nlm_cde/nlm_cde.c | 67 +++++++++++++++++++--------------
 1 file changed, 39 insertions(+), 28 deletions(-)

diff --git a/drivers/misc/netlogic/nlm_cde/nlm_cde.c b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
index 05c362f..a7f294d 100644
--- a/drivers/misc/netlogic/nlm_cde/nlm_cde.c
+++ b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
@@ -43,7 +43,7 @@
 #include <linux/poll.h>		/* for POLLIN, etc. */
 #include <nlm_msgring.h>
 #include <nlm_hal.h>
-#include <asm/mutex.h>
+#include <linux/mutex.h>
 
 #include <nlm_xlp.h>
 #include <nlm_hal_fmn.h>
@@ -54,6 +54,8 @@
 #include "nlm_cde.h"
 #include "nlm_cde_api.h"
 
+DEFINE_MUTEX(cde_lock);
+
 #define printf(a, b...) printk(KERN_ERR a, ##b)
 #define malloc(a) kmalloc(a, GFP_ATOMIC)
 #define free kfree
@@ -69,6 +71,9 @@ struct msgrng_msg {
 		__u64 msg3;
 };
 
+static int is_9xx;
+static int is_2xx;
+
 static int xlp_cde_major;
 int xlp_cde_open(struct inode *, struct file *);
 int xlp_cde_release(struct inode *, struct file *);
@@ -98,7 +103,7 @@ volatile fr_page page_array[MAX_NUM_PAGES]    __attribute__((aligned(32)));
 volatile char *(page_array_tmp_data_array[MAX_NUM_PAGES])__attribute__((aligned(32)));
 
 //#define CDE_DEBUG 1
-#ifdef CDE_DEBUG
+#ifdef CDE_DEBUG_DUMP_DATA
 static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg)
 {
 	int k = 0;
@@ -112,6 +117,11 @@ static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg
 	}
 	printk("\n");
 }
+#else
+static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg)
+{
+
+}
 #endif
 
 static void *
@@ -189,21 +199,21 @@ static int config_cmp(void)
 	for(i = 0; i < num_cde_engine; i++)
 	{
 		unsigned int val;
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 			val = nlm_hal_9xx_read_cde_reg(CMP_REG_CTRL_REG(i));
 		else
 			val = nlm_hal_read_cde_reg(CMP_REG_CTRL_REG(i));
 #ifdef CDE_DEBUG
 		printk("config_cmp i = %d cntrl_reg val = %x\n", i, val);
 #endif
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 			val = nlm_hal_9xx_read_cde_reg(CMP_REG_SCRATCH_PAGE(i));
 		else
 			val = nlm_hal_read_cde_reg(CMP_REG_SCRATCH_PAGE(i));
 #ifdef CDE_DEBUG
 		printk("config_cmp i = %d scratch_reg val = %x\n", i, val);
 #endif
-		if(is_nlm_xlp9xx()){
+		if(is_9xx){
 			nlm_hal_9xx_write_cde_reg(CMP_REG_CTRL_REG(i), ((0x0012 << 16) | FD_CMP_PAGE_SIZE)); //16'h{CMP_PAGE_SIZE}
 			nlm_hal_9xx_write_cde_reg(CMP_REG_SCRATCH_PAGE(i), ((SCRATCH_SIZE/64 << 17) | (16 << 9)));
 		}
@@ -270,7 +280,7 @@ static int send_free_desc(void)
 
 		if(is_nlm_xlp2xx())
 			status = send_message_1(MSGRNG_2XX_STNID_CMP1, &fd_msg);
-		else if(is_nlm_xlp9xx())
+		else if(is_9xx)
 			status = send_message_1(MSGRNG_9XX_STNID_CMP1, &fd_msg);
 		else
 			status = send_message_1(MSGRNG_STNID_CMP1, &fd_msg);
@@ -372,7 +382,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
 		}
 
 		//if (cpu_is_xlp9xx())
-		if (is_nlm_xlp9xx())
+		if (is_9xx)
 		{
 			stid = nlm_hal_9xxcde_make_cmp_msg((uint64_t*)&cmp_msg[i].msg0, (uint64_t*)&cmp_msg[i].msg1, 0, cmp_data->op, rtn_bkt,
 					cur_desc, (uint64_t)virt_to_phys(cmp_data->src_desc + desc_idx));
@@ -392,7 +402,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
 	}
 
 
-	//    if (is_nlm_xlp9xx())
+	//    if (is_9xx)
 	//	num_messages = 2;
 	// returns the number of messages created
 	return (num_messages);
@@ -490,7 +500,7 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
 		}
 
 		//if (cpu_is_xlp9xx())
-		if (is_nlm_xlp9xx())
+		if (is_9xx)
 		{
 			stid = nlm_hal_9xxcde_make_cmp_msg((uint64_t*)&cmp_msg[i].msg0,(uint64_t*)&cmp_msg[i].msg1, 0, cmp_data->op, rtn_bkt,
 					cur_desc, (uint64_t)virt_to_phys(cmp_data->src_desc + desc_idx));
@@ -511,7 +521,7 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
 		desc_idx = desc_idx + cur_desc;
 	}
 
-	//if (is_nlm_xlp9xx())
+	//if (is_9xx)
 	//	num_messages = 2;
 	// returns the number of messages created
 	return (num_messages);
@@ -532,7 +542,7 @@ void return_free_descriptors(msg *msg_list, int msg_index)
 
 		memcpy ((void *) &return_msg, (void *)(msg_list+i), sizeof(msg));
 
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 		{
 			used_fd[used_fd_index++] = ((uint64_t) return_msg.msg0 & 0xffffffffffUll);
 			num_desc = (return_msg.msg0>>40 & 0xffff);
@@ -543,7 +553,7 @@ void return_free_descriptors(msg *msg_list, int msg_index)
 			num_desc = (return_msg.msg1>>40 & 0xffff);
 		}
 
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 			temp_desc = (uint64_t *) phys_to_virt(return_msg.msg0 & 0xffffffffffUll);
 		else
 			temp_desc = (uint64_t *) phys_to_virt(return_msg.msg1 & 0xffffffffffUll);
@@ -559,7 +569,7 @@ void return_free_descriptors(msg *msg_list, int msg_index)
 				fd_msg.msg0 = ((uint64_t) used_fd[k]);
 				if(is_nlm_xlp2xx())
 					status = send_message_1(MSGRNG_2XX_STNID_CMP1, &fd_msg);
-				else if(is_nlm_xlp9xx())
+				else if(is_9xx)
 					status = send_message_1(MSGRNG_9XX_STNID_CMP1, &fd_msg);
 				else
 					status = send_message_1(MSGRNG_STNID_CMP1, &fd_msg);
@@ -652,7 +662,7 @@ nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
 
 cmp_data_t* nlm_cde_init()
 {
-	if(cmp_data != NULL && cmp_data->src != NULL) 
+	if(cmp_data != NULL && cmp_data->src != NULL)
 	{
 		printk("CDE already initialized. Returning\n");
 		return cmp_data;
@@ -754,11 +764,8 @@ cmp_data_t* nlm_cde_init()
 
 int xlp_cde_open(struct inode *inode, struct file *filp)
 {
-#ifdef CDE_DEBUG
-	printk("xlp_cde_open \n");
-#endif
-
-		return 0;
+	mutex_lock(&cde_lock);
+	return 0;
 }
 
 
@@ -797,7 +804,7 @@ void nlm_cde_cleanup(cmp_data_t *t_cmp_data)
                         page_array[i].data_array = NULL;
                 }
         }
-		
+
 	cmp_data = NULL;
 }
 
@@ -859,6 +866,7 @@ int xlp_cde_release(struct inode *inode, struct file *filp)
 	cmp_data->offset = 0;
 	memset(cmp_data->scratch, 0,  SCRATCH_SIZE);
 	memset(cmp_data->scratch_inf, 0, SCRATCH_SIZE);
+	mutex_unlock(&cde_lock);
 	return 0;
 }
 
@@ -935,7 +943,7 @@ unsigned int nlm_cde_send_request(cmp_data_t *cmp_data, unsigned int op,
 		if(is_nlm_xlp2xx())
 			status =  send_message_1(MSGRNG_2XX_STNID_CMP0, (struct msgrng_msg *) (cmp_msg + i));
 		else
-			if(is_nlm_xlp9xx())
+			if(is_9xx)
 				status =  send_message_2(MSGRNG_9XX_STNID_CMP0, (struct msgrng_msg *) (cmp_msg + i));
 			else
 				status =  send_message_1(MSGRNG_STNID_CMP0, (struct msgrng_msg *) (cmp_msg + i));
@@ -954,6 +962,7 @@ ssize_t xlp_cde_write(struct file *filp, const char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	unsigned char temp_buf[count+1];
+
 	if (copy_from_user(temp_buf, buf, count)) {
 		printk("copy from user failed \n");
 		return -EFAULT;
@@ -1086,19 +1095,19 @@ void xlp_cde_dev_initialize(void)
 
 	for(i = 0; i < num_cde_engine; i++)
 	{
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 			ret = nlm_hal_9xx_read_cde_reg(CMP_REG_RESET_REG(i));
 		else
 			ret = nlm_hal_read_cde_reg(CMP_REG_RESET_REG(i));
 #ifdef CDE_DEBUG
 		printk("reset_reg = ret = %x\n", ret);
 #endif
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 			nlm_hal_9xx_write_cde_reg(CMP_REG_RESET_REG(i), 0x8);
 		else
 			nlm_hal_write_cde_reg(CMP_REG_RESET_REG(i), 0x8);
 		do {
-			if(is_nlm_xlp9xx())
+			if(is_9xx)
 				ret = nlm_hal_9xx_read_cde_reg(CMP_REG_RESET_REG(i));
 			else
 				ret = nlm_hal_read_cde_reg(CMP_REG_RESET_REG(i));
@@ -1114,7 +1123,7 @@ void xlp_cde_dev_initialize(void)
 		//printk("\n CDE Frequency = %d\n",frequency);
 		//nlm_hal_set_cde_freq(node, frequency);
 
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 		{
 			nlm_hal_9xx_write_cde_reg(CMP_REG_RESET_REG(i), 0x01);
 			nlm_hal_9xx_write_cde_reg(CMP_REG_RESET_REG(i), 0x00);
@@ -1151,11 +1160,13 @@ static int __init xlp_cde_init(void)
 			(XLP_MSG_HANDLE_CMP, nlm_xlp_cde_msgring_handler, NULL)) {
 		panic("can't register msgring handler for XLP_MSG_HANDLE_CMP");
 	}
-	if(is_nlm_xlp2xx())
+	if(is_nlm_xlp2xx()) {
+		is_2xx = 1;
 		num_cde_engine = NUM_CDE_ENGINE_XLP2XX;
-	else if (cpu_is_xlp9xx())
+	}else if (is_nlm_xlp9xx()) {
+		is_9xx = 1;
 		num_cde_engine = NUM_CDE_ENGINE_XLP9XX;
-	else
+	}else
 		num_cde_engine = NUM_CDE_ENGINE;
 
 	xlp_cde_dev_initialize();
-- 
1.9.1

