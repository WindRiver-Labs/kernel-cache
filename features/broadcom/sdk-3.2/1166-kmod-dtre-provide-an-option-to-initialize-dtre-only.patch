From 14c47081a2b30992d6a51f105b36ef9c868f5c12 Mon Sep 17 00:00:00 2001
From: Yonghong Song <ysong@broadcom.com>
Date: Sat, 13 Jul 2013 23:16:46 -0700
Subject: [PATCH 1166/1532] kmod: dtre: provide an option to initialize dtre
 only

  o Currently, the option is to specify /doms/dom@0/dtre:dtre_init_only=1.
    The default value is dtre_init_only=0 to preserve old behavior.
  o Also enable kvm_io_manager to enable virtualization for a particular block
    if /hypervisor:guest_use_<ioblock>=1 is specified.
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/misc/netlogic/dtre/nlm_adma.c | 32 +++++++++++++++++++++++++++++++-
 1 file changed, 31 insertions(+), 1 deletion(-)

diff --git a/drivers/misc/netlogic/dtre/nlm_adma.c b/drivers/misc/netlogic/dtre/nlm_adma.c
index 860532d..8ef95d9 100644
--- a/drivers/misc/netlogic/dtre/nlm_adma.c
+++ b/drivers/misc/netlogic/dtre/nlm_adma.c
@@ -46,6 +46,7 @@
 #include <linux/kernel.h>
 #include "nlm_hal_fmn.h"
 #include "nlm_hal_fmn_dp.h"
+#include "libfdt.h"
 
 uint64_t nlm_dtre_debug = 0;
 static unsigned int nlm_dtre_min_vc = 0;
@@ -63,6 +64,8 @@ extern int register_xlp_msgring_handler(int major,
 struct nlm_adma_device nlm_adma_raid_device;
 struct page * nlm_dtre_null_page;
 
+static int dtre_init_only = 0;
+
 #define CACHELINE_ALIGNED_ADDR(addr) (((unsigned long)(addr)) & ~(SMP_CACHE_BYTES-1))
 
 static __inline__ void *cacheline_aligned_kzalloc(int size, int gfp_mask)
@@ -1678,15 +1681,42 @@ static int __init nlm_add_dma_dev(void)
         return ret;
 }
 
+static int __init is_dtre_init_only(void)
+{
+	int prop_len;
+	const void *pbuf;
+	int node;
+
+        node = fdt_path_offset(fdt, "/doms/dom@0/dtre");
+        if (node < 0)
+                return 0;
+
+        pbuf = (char *)fdt_getprop(fdt, node, "dtre_init_only", &prop_len);
+        if (pbuf == NULL)
+                return 0;
+
+	return *(int *)pbuf;
+}
+
 static int __init nlm_adma_init (void)
 {
+	if (is_dtre_init_only()) {
+		printk("DTRE Driver: Initialization only\n");
+		dtre_init_only = 1;
+		nlm_hal_dtr_init(fdt);
+		return 0;
+	}
+
 	platform_driver_register(&nlm_adma_driver);
 	nlm_add_dma_dev();
-	return;
+	return 0;
 }
 
 static void __exit nlm_adma_exit (void)
 {
+	if (dtre_init_only == 1)
+		return;
+
 	platform_driver_unregister(&nlm_adma_driver);
 	return;
 }
-- 
1.9.1

