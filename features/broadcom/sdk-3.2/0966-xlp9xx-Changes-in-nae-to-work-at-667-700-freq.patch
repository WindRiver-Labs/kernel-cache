From c9f7754cd2e65d32105a7ed63e1d1cc1401fbd73 Mon Sep 17 00:00:00 2001
From: Vikas Gupta <vikas.gupta@broadcom.com>
Date: Thu, 8 May 2014 02:06:11 -0700
Subject: [PATCH 0966/1532] xlp9xx: Changes in nae to work at 667/700 freq.

        1) syslib: Added API to change dev PLL freq.
        2) netlib: Fix for RX path fifos-configuration.
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 .../netlogic/lib/netlib/include/netsoc_common.h    | 32 ++++++++++++------
 arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c     |  8 ++---
 arch/mips/netlogic/lib/netlib/src/netsoc_nae.c     | 29 +++++++++++++----
 arch/mips/netlogic/lib/syslib/include/xlp9xx_sys.h | 38 ++++++++++++++--------
 arch/mips/netlogic/lib/syslib/src/nlm_hal.c        |  4 +++
 5 files changed, 78 insertions(+), 33 deletions(-)

diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_common.h b/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
index 9349f3d..5820556 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
@@ -66,13 +66,14 @@
 
 #define DEFAULT_SGMII_CAL_SLOTS         3
 #define DEFAULT_XAUI_CAL_SLOTS          13
+#define DEFAULT_RXAUI_CAL_SLOTS         5 
 #define DEFAULT_ILK_CAL_SLOTS           26
 #define DEFAULT_XFI_CAL_SLOTS           7
 #define DEFAULT_XLAUI_CAL_SLOTS         13
 
-#define DEFAULT_XLP9XX_XAUI_IFACEFIFO_SZ	110
-#define DEFAULT_XLP9XX_XAUI_RXFIFO_SZ         	1888
-#define DEFAULT_XLP9XX_XAUI_PARSERSEQFIFO_SZ	944  /*assuming 2048 ptp disabled.*/
+#define DEFAULT_XLP9XX_XAUI_IFACEFIFO_SZ	120
+#define DEFAULT_XLP9XX_XAUI_RXFIFO_SZ         2032	
+#define DEFAULT_XLP9XX_XAUI_PARSERSEQFIFO_SZ	1008 
 #define DEFAULT_XLP9XX_XAUI_NUM_FREEDESC	300
 
 #define DEFAULT_XLP9XX_SGMII_CAL_SLOTS         1
@@ -268,7 +269,7 @@ static inline int get_slots_required(int intf_type)
         else if (intf_type == XAUI_IF)
                 return DEFAULT_XAUI_CAL_SLOTS;
         else if (intf_type == RXAUI_IF)
-                return DEFAULT_XAUI_CAL_SLOTS;
+                return DEFAULT_RXAUI_CAL_SLOTS;
         else if (intf_type == INTERLAKEN_IF)
                 return DEFAULT_ILK_CAL_SLOTS;
         else if (intf_type == XFI_IF)
@@ -322,14 +323,20 @@ static inline uint32_t get_iface_credit(uint32_t intf_type)
 	 return (size - 1);	
 }
 
-static inline uint32_t get_prsr_seq_fifo_size(uint32_t intf_type)
+static inline uint32_t get_prsr_seq_fifo_size(int block, uint32_t intf_type)
 {
         switch(intf_type) {
 	case SGMII_IF:
+ 		if (is_nlm_xlp9xx()){
+			if(block==2){
+				return(current_netsoc->ingress.max_parseq_fifo	- (2*DEFAULT_XLP9XX_XAUI_PARSERSEQFIFO_SZ));
+			} else
+				return DEFAULT_XLP9XX_XAUI_PARSERSEQFIFO_SZ/4;
+		}else	
+                	return DEFAULT_SGMII_PARSERSEQFIFO_SZ;
 	case XFI_IF:
 		if (IS_NLM_XLP9XX_FAMILY)
 			return DEFAULT_XLP9XX_XAUI_PARSERSEQFIFO_SZ/4;
-                return DEFAULT_XAUI_PARSERSEQFIFO_SZ/4;
         case XAUI_IF:
         case XLAUI_IF:
 		if (IS_NLM_XLP9XX_FAMILY)
@@ -368,13 +375,18 @@ static inline uint32_t update_intf_buf_size(nae_t *nae, uint32_t *size)
         return 0;
 }
 
-static inline uint32_t get_rx_buf_size(uint32_t intf_type)
+static inline uint32_t get_rx_buf_size(int block, uint32_t intf_type)
 {
         switch(intf_type) {
-	case XFI_IF:
 	case SGMII_IF:
- 		if (IS_NLM_XLP9XX_FAMILY)
- 			return DEFAULT_XLP9XX_XAUI_RXFIFO_SZ/4;
+ 		if (IS_NLM_XLP9XX_FAMILY){
+			if(block==2){
+				return ((current_netsoc->ingress.max_rx_fifo>>2) - (2*DEFAULT_XLP9XX_XAUI_RXFIFO_SZ));
+			}else
+	 			return DEFAULT_XLP9XX_XAUI_RXFIFO_SZ/4;
+		}else
+			return DEFAULT_SGMII_RXFIFO_SZ;
+	case XFI_IF:
                 return DEFAULT_XAUI_RXFIFO_SZ/4;
         case XAUI_IF:
         case XLAUI_IF:
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c b/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c
index 45b0495..b8a5ec4 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c
@@ -787,7 +787,7 @@ int fdt_parse_vfbid_config(void *fdt, nae_t *nae_cfg)
         return 0;
 }
 
-static void extract_complex_params(void *fdt, int intf_type, char *nae_port_str, struct nae_complex_config *cmplx)
+static void extract_complex_params(void *fdt, int intf_type, char *nae_port_str, int block, struct nae_complex_config *cmplx)
 {
         int i = 0;
         memset(cmplx, 0, sizeof(struct nae_complex_config));
@@ -814,11 +814,11 @@ static void extract_complex_params(void *fdt, int intf_type, char *nae_port_str,
 #endif
 
         if (GET_PORT_PROP("parser-sequence-fifo-size", &cmplx->prsr_seq_fifo_size, sizeof(cmplx->prsr_seq_fifo_size)) < 0) {
-		update_default_config(intf_type, cmplx->prsr_seq_fifo_size, get_prsr_seq_fifo_size(intf_type));
+		update_default_config(intf_type, cmplx->prsr_seq_fifo_size, get_prsr_seq_fifo_size(block, intf_type));
 	}
 
         if (GET_PORT_PROP("rx-buffer-size", &cmplx->rx_buf_size, sizeof(cmplx->rx_buf_size)) < 0) {
-		update_default_config(intf_type, cmplx->rx_buf_size, get_rx_buf_size(intf_type));
+		update_default_config(intf_type, cmplx->rx_buf_size, get_rx_buf_size(block, intf_type));
 	}
 
         if (GET_PORT_PROP("ucore-mask",&cmplx->ucore_mask, sizeof(cmplx->ucore_mask)) < 0) {
@@ -1079,7 +1079,7 @@ static int fdt_parse_port_config(void *fdt, nae_t *nae_cfg, struct netsoc_lib_pa
                 }
 
                 num_ports = get_num_ports(block, intf_type);
-                extract_complex_params(fdt, intf_type, nae_port_str, &cmplx_cfg);
+                extract_complex_params(fdt, intf_type, nae_port_str, block, &cmplx_cfg);
 
                 if(intf_type == XFI_IF || intf_type == XLAUI_IF)
 		{
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
index c55633e..a5e2c1d 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
@@ -1361,6 +1361,7 @@ void __netsoc_config_parserfifo(nae_t *nae, int hw_port_id, uint32_t start, uint
 		if (IS_NLM_XLP9XX_FAMILY) {
                         xoff = size - 30 ;
                         xon = xoff/2;
+	
                         val = (xoff<<12) | (xon);
                 }
                 else {
@@ -2303,14 +2304,23 @@ static void __netsoc_config_xaui(net_port_t *netport)
         val = netsoc_read_mac_reg(mac_base, NETIOR_XGMAC_CTRL3);
 
         val &= ~(0x1f << 10);
-	if(IS_NLM_XLP9XX_FAMILY)
-        	val |= (7 << 10);
+	if(IS_NLM_XLP9XX_FAMILY){
+		if(rxaui_en)
+	        	val |= ((5 << 10) & 0x00007c00);
+		else 
+	        	val |= ((7 << 10) & 0x00007c00); 
+	}
 	else{
         	val |= (15 << 10);
 	}
+        netsoc_write_mac_reg(mac_base, NETIOR_XGMAC_CTRL3, val); 
+        
+	val = netsoc_read_mac_reg(mac_base, NETIOR_XGMAC_CTRL3);
+	val &= 0xfffffc00;
 	val |= netport->context_base;
 
-        netsoc_write_mac_reg(mac_base, NETIOR_XGMAC_CTRL3, val); netsoc_api_print(NETSOC_APIDBG_PORT, "%s XAUI Config Complete block %d \n", __func__, netport->hw_port_id >> 2); return;
+        netsoc_write_mac_reg(mac_base, NETIOR_XGMAC_CTRL3, val); 
+	netsoc_api_print(NETSOC_APIDBG_PORT, "%s XAUI Config Complete block %d \n", __func__, netport->hw_port_id >> 2); return;
 }
 
 static void __netsoc_set_xlgmac_pause_config(net_port_t *netport)
@@ -2364,7 +2374,8 @@ static void __netsoc_config_xlgmac(net_port_t *netport)
 		val = netsoc_read_nae_reg(nae->nae_base, CH_CLASS_USE_VLAN_PRI);
 		netsoc_write_nae_reg(nae->nae_base,  CH_CLASS_USE_VLAN_PRI, val | (1<<netport->hw_port_id));
 	}
-
+	if(!nae->str_fwd_enabled)
+		 nae->str_fwd_enabled = 1;
 
 	netsoc_api_print(NETSOC_APIDBG_PORT,"XLAUI Rd XLGMAC3_CTL : 0x%x\n",  netsoc_read_mac_reg(mac_base, XLGMAC3_CTL));
 	netsoc_api_print(NETSOC_APIDBG_PORT,"XLAUI Rd XLGMAC_STATUS : 0x%x\n",  netsoc_read_mac_reg(mac_base, XLGMAC_STATUS));
@@ -2390,6 +2401,8 @@ static void __netsoc_config_xfi(net_port_t *netport)
 	uint64_t netior_base = netsoc_get_macreg_base_for_lanecfg(netport->nae->mac_base);
 	nae_t *nae = netport->nae;
 
+	if(!nae->str_fwd_enabled)
+		 nae->str_fwd_enabled = 1;
 	// Apply a soft reset.
 	__netsoc_xfi_softreset(mac_base, 0x2);
 	__netsoc_xfi_softreset(mac_base, 0x0);
@@ -3215,8 +3228,12 @@ int __netsoc_config_flow_control(net_port_t *netport, uint32_t enable)
                         	        val |= (1 << NETIOR_XGMAC_TX_PAUSE_POS);
 					netsoc_write_mac_reg(mac_base, NETIOR_XGMAC_CTRL1, val);
 				}
-				if(is_nlm_xlp9xx())
-        				netsoc_write_nae_iface_reg(nae_base, XGMAC_PFC_REPEAT , (unsigned int)((0x3 << 22) | 0x8000));
+				if(is_nlm_xlp9xx()){
+					if(netport->iftype != XFI_IF)	
+	        				netsoc_write_nae_iface_reg(nae_base, XGMAC_PFC_REPEAT , (unsigned int)((0x3 << 22) | 0x70000));
+					else
+	        				netsoc_write_nae_iface_reg(nae_base, XGMAC_PFC_REPEAT , (unsigned int)((0x3 << 22) | 0x8000));
+				}	
                         }
                         else {
 			        if (netport->iftype != XFI_IF) {
diff --git a/arch/mips/netlogic/lib/syslib/include/xlp9xx_sys.h b/arch/mips/netlogic/lib/syslib/include/xlp9xx_sys.h
index 28c4ca5..74c4bfc 100644
--- a/arch/mips/netlogic/lib/syslib/include/xlp9xx_sys.h
+++ b/arch/mips/netlogic/lib/syslib/include/xlp9xx_sys.h
@@ -118,19 +118,6 @@ enum xlp9xx_dev_sys {
 #define syssoc_write_reg(base, reg, val)	nlm_hal_write_32bit_reg(base, reg, val)
 #define syssoc_read_reg(base, reg)		nlm_hal_read_32bit_reg(base, reg)
 
-/* 
-    Following are the selections for clock source selector
-    0 - 133 MHz (Ref clock)
-    1 - 500 MHz (Dev 0 PLL clock)
-    2 - 667 MHz (Dev 1 PLL clock)
-    3 - 767 MHz (Dev 2 PLL clock)
-
-    Following are the selections for clock divide selector
-    0 - divide by 1
-    1 - divide by 2
-    2 - divide by 4
-    3 - divide by 8
-*/
 
 extern unsigned long  xlp9xx_sys_clk_base[];
 
@@ -171,6 +158,30 @@ static inline void xlp9xx_set_clkdev(int node, int dev_id, int sel, int div)
                         break;
                 }
         }
+static void inline xlp9xx_setup_devpll(uint64_t sys_clk_base, int dev_pll, int freq)
+{
+        volatile uint32_t pll_change, mul;
+	switch (freq) {
+        case 400: mul = 0 ; break; 
+        case 500: mul = 3 ; break; 
+        case 667: mul = 8 ; break; 
+        case 700: mul = 0x9 ; break; 
+        case 767: mul = 0xb ; break; 
+        default: 
+		mul=0; break;
+	}
+	nlm_print("dev _pll = %d frq= %d mul = %d\n", dev_pll, freq, mul);
+     
+        syssoc_write_reg(sys_clk_base, DEV_PLLCTRL_1 + (4*dev_pll), mul);
+        syssoc_write_reg(sys_clk_base, XLP9XX_SYS_PLLCHG_CTRL, (1<<(2+dev_pll)));
+        pll_change = (1<<(2+dev_pll));
+        while (pll_change != 0) {
+            pll_change = syssoc_read_reg(sys_clk_base, XLP9XX_SYS_PLLCHG_CTRL);
+            //nlm_print("CLK_REG_SYSPLLCHGCTRL_ADDR = 0x%x\n", pll_change);
+        }
+        mul = syssoc_read_reg(sys_clk_base, DEV_PLLCTRL_1 + (4*dev_pll));
+        nlm_print("DEV PLL[%d] freq changed to =%d\n", dev_pll, 400 + 33*mul);
+
 }
 
 static inline uint64_t get_nae_frequency(int node) 
@@ -527,6 +538,7 @@ static inline int xlp9xx_config_dev_freq(int node, unsigned int freq, int *devcl
 			}
 		}
 	}
+	nlm_print("Error: Finding match for freq sel = %d and div= %d\n", sel, division);	
 
 	/* 0: syclk; devclk0=1; devclk1=2; devclk2=3 */
 	*devclock = 1;
diff --git a/arch/mips/netlogic/lib/syslib/src/nlm_hal.c b/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
index f5192ae..271a0a6 100644
--- a/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
+++ b/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
@@ -672,6 +672,10 @@ __inline__ void nlm_hal_init(void)
 
 			xlp_sae_base[node] = (xlp_io_base | XLP9XX_SAE_RSA_BUS_NUM | XLP9XX_PCIE_DEV_BASE(XLP_SAE)) & 0x1fffffff; /*For now . Will be fixed soon.*/
 			xlp_rsa_base[node] = (xlp_io_base | XLP9XX_SAE_RSA_BUS_NUM | XLP9XX_PCIE_DEV_BASE(XLP_RSA)) & 0x1fffffff; /* For now . Will be fixed soon.*/
+			/*set dev pll*/
+			nlm_print("xlp9xx_sys_clk_base %d is =0x%lx\n", node, xlp9xx_sys_clk_base[node]);
+                        //xlp9xx_setup_devpll(xlp9xx_sys_clk_base[0], 2, 700);
+
 		} else
 		{
 			xlp_fmn_base[node] = mask & nlm_hal_read_32bit_reg((0x18000000 + XLP_PCIE_DEV_BASE(node, XLP_FMN)), PCI_MEM_BAR_0);
-- 
1.9.1

