From 323df5f3e9d39024487912a3b009c2bccac0541b Mon Sep 17 00:00:00 2001
From: Alok Agrawat <alok@broadcom.com>
Date: Thu, 3 Oct 2013 03:33:45 -0700
Subject: [PATCH 0145/1532] ethtool: modified ethtool to have support for
 macsec.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 include/linux/ethtool.h      |  4 +++
 include/uapi/linux/ethtool.h | 19 +++++++++++++
 net/core/ethtool.c           | 64 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 87 insertions(+)

diff --git a/include/linux/ethtool.h b/include/linux/ethtool.h
index c8e3e7e3..7067302 100644
--- a/include/linux/ethtool.h
+++ b/include/linux/ethtool.h
@@ -188,6 +188,10 @@ static inline u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
  * of the generic netdev features interface.
  */
 struct ethtool_ops {
+	int     (*msec_tx_config)(struct net_device *, struct ethtool_cmd *);
+        int     (*msec_tx_mem_config)(struct net_device *, struct ethtool_cmd *);
+        int     (*msec_rx_config)(struct net_device *, struct ethtool_cmd *);
+        int     (*msec_rx_mem_config)(struct net_device *, struct ethtool_cmd *);
 	int	(*get_settings)(struct net_device *, struct ethtool_cmd *);
 	int	(*set_settings)(struct net_device *, struct ethtool_cmd *);
 	void	(*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *);
diff --git a/include/uapi/linux/ethtool.h b/include/uapi/linux/ethtool.h
index 0c9b448..e9928f9 100644
--- a/include/uapi/linux/ethtool.h
+++ b/include/uapi/linux/ethtool.h
@@ -47,6 +47,19 @@ struct ethtool_cmd {
 				   * link should be renegotiated if necessary
 				   */
 	__u32	lp_advertising;	/* Features the link partner advertises */
+/* MAC SEC related params */
+        __u8    node;
+        __u8    num_nae;
+        __u8    port_enable;
+        __u8    index;
+        __u8    tci;
+        __u16   preamble_len;
+        __u32   packet_num;
+        __u32   win_size_thrshld;
+        __u64   sci;
+        __u64   sci_mask;
+        unsigned char key[16];
+/* End MAC SEC */
 	__u32	reserved[2];
 };
 
@@ -901,6 +914,12 @@ enum ethtool_sfeatures_retval_bits {
 #define ETHTOOL_GEEE		0x00000044 /* Get EEE settings */
 #define ETHTOOL_SEEE		0x00000045 /* Set EEE settings */
 
+#define ETHTOOL_MAC_SEC_TX      0x0000F001 /* MACSec TX config to device */
+#define ETHTOOL_MAC_SEC_TX_MEM  0x0000F002 /* MACSec TX mem config to device */
+#define ETHTOOL_MAC_SEC_RX      0x0000F003 /* MACSec RX config to device */
+#define ETHTOOL_MAC_SEC_RX_MEM  0x0000F004 /* MACSec RX mem config to device */
+
+
 /* compatibility with older code */
 #define SPARC_ETH_GSET		ETHTOOL_GSET
 #define SPARC_ETH_SSET		ETHTOOL_SSET
diff --git a/net/core/ethtool.c b/net/core/ethtool.c
index ce91766..cbe182c 100644
--- a/net/core/ethtool.c
+++ b/net/core/ethtool.c
@@ -353,6 +353,58 @@ static int ethtool_set_settings(struct net_device *dev, void __user *useraddr)
 	return dev->ethtool_ops->set_settings(dev, &cmd);
 }
 
+static int ethtool_msec_tx_config(struct net_device *dev, void __user *useraddr)
+{
+        struct ethtool_cmd cmd;
+
+        if (!dev->ethtool_ops->set_settings)
+                return -EOPNOTSUPP;
+
+        if (copy_from_user(&cmd, useraddr, sizeof(cmd)))
+                return -EFAULT;
+
+        return dev->ethtool_ops->msec_tx_config(dev, &cmd);
+}
+
+static int ethtool_msec_tx_mem_config(struct net_device *dev, void __user *useraddr)
+{
+        struct ethtool_cmd cmd;
+
+        if (!dev->ethtool_ops->set_settings)
+                return -EOPNOTSUPP;
+
+        if (copy_from_user(&cmd, useraddr, sizeof(cmd)))
+                return -EFAULT;
+
+        return dev->ethtool_ops->msec_tx_mem_config(dev, &cmd);
+}
+
+static int ethtool_msec_rx_config(struct net_device *dev, void __user *useraddr)
+{
+        struct ethtool_cmd cmd;
+
+        if (!dev->ethtool_ops->set_settings)
+                return -EOPNOTSUPP;
+
+        if (copy_from_user(&cmd, useraddr, sizeof(cmd)))
+                return -EFAULT;
+
+        return dev->ethtool_ops->msec_rx_config(dev, &cmd);
+}
+static int ethtool_msec_rx_mem_config(struct net_device *dev, void __user *useraddr)
+{
+        struct ethtool_cmd cmd;
+
+        if (!dev->ethtool_ops->set_settings)
+                return -EOPNOTSUPP;
+
+        if (copy_from_user(&cmd, useraddr, sizeof(cmd)))
+                return -EFAULT;
+
+        return dev->ethtool_ops->msec_rx_mem_config(dev, &cmd);
+}
+
+
 static noinline_for_stack int ethtool_get_drvinfo(struct net_device *dev,
 						  void __user *useraddr)
 {
@@ -1475,6 +1527,18 @@ int dev_ethtool(struct net *net, struct ifreq *ifr)
 	old_features = dev->features;
 
 	switch (ethcmd) {
+	case ETHTOOL_MAC_SEC_TX:
+                rc = ethtool_msec_tx_config(dev, useraddr);
+                break;
+        case ETHTOOL_MAC_SEC_TX_MEM:
+                rc = ethtool_msec_tx_mem_config(dev, useraddr);
+                break;
+        case ETHTOOL_MAC_SEC_RX:
+                rc = ethtool_msec_rx_config(dev, useraddr);
+                break;
+        case ETHTOOL_MAC_SEC_RX_MEM:
+                rc = ethtool_msec_rx_mem_config(dev, useraddr);
+                break;
 	case ETHTOOL_GSET:
 		rc = ethtool_get_settings(dev, useraddr);
 		break;
-- 
1.9.1

