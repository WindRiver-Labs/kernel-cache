From c5546db978c9de92e026791c351622d471f32263 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 7 Mar 2014 15:34:58 -0800
Subject: [PATCH 106/122] MIPS/OCTEON: Quit doing non-cn78XX operations on
 cn78XX

Source: Cavium Networks, Inc.
MR: 00000
Type: Integration
Disposition: Merged from Octeon Tree
ChangeID: 8d718c11b3f561b6c77b6fa437aeae2c8dda2014
Description:

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from Cavium SDK 3.1.1 525]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 arch/mips/cavium-octeon/setup.c |  4 +--
 arch/mips/cavium-octeon/smp.c   | 62 ++++-------------------------------------
 2 files changed, 8 insertions(+), 58 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index f110930..1150cf4 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -521,7 +521,7 @@ void octeon_user_io_init(void)
 		/* 4096 cycles */
 		nm_tim.s.nw_tim = 3;
 		cvmx_write_csr(CVMX_SSO_NW_TIM, nm_tim.u64);
-	} else {
+	} else if (!OCTEON_IS_MODEL(OCTEON_CN78XX)) {
 		union cvmx_pow_nw_tim nm_tim;
 		nm_tim.u64 = 0;
 		/* 4096 cycles */
@@ -726,7 +726,7 @@ void __init prom_init(void)
 	if (OCTEON_IS_MODEL(OCTEON_CN38XX_PASS2) ||
 	    OCTEON_IS_MODEL(OCTEON_CN31XX))
 		cvmx_write_csr(CVMX_CIU_SOFT_BIST, 0);
-	else
+	else if (!OCTEON_IS_MODEL(OCTEON_CN78XX))
 		cvmx_write_csr(CVMX_CIU_SOFT_BIST, 1);
 
 	/* Default to 64MB in the simulator to speed things up */
diff --git a/arch/mips/cavium-octeon/smp.c b/arch/mips/cavium-octeon/smp.c
index 46c85ae..50489b6 100644
--- a/arch/mips/cavium-octeon/smp.c
+++ b/arch/mips/cavium-octeon/smp.c
@@ -206,7 +206,6 @@ static void octeon_smp_setup(void)
 #ifdef CONFIG_HOTPLUG_CPU
 	unsigned int num_cores = cvmx_octeon_num_cores();
 	struct cvmx_app_hotplug_global *hgp;
-	char hexstr[CVMX_MIPS_MAX_CORES/4+1];
 	unsigned long t;
 #endif
 
@@ -272,13 +271,13 @@ static void octeon_smp_setup(void)
 		octeon_hotplug_entry_addr = 0;
 		return;
 	}
-
+#if 0
 	/* Convert coremask to string for printing */
 	cvmx_coremask_bmp2str(&hgp->avail_coremask, hexstr);
 
 	/* Print the available coremask on to the console */
 	pr_info("Cavium Hotplug: Available coremask 0x%s\n", hexstr);
-
+#endif
 	/* Set global ptr for use by other functions */
 	octeon_hotplug_global_ptr = hgp;
 #endif
@@ -379,7 +378,6 @@ static void octeon_cpus_done(void)
 {
 #ifdef CONFIG_HOTPLUG_CPU
 	struct cvmx_app_hotplug_global *hgp;
-	char hexstr[CVMX_MIPS_MAX_CORES/4+1];
 	unsigned int cpu;
 
 	hgp = octeon_hotplug_global_ptr;
@@ -395,13 +393,14 @@ static void octeon_cpus_done(void)
 		if (!cpu_online(cpu))
 			set_cpu_present(cpu, true);
 	}
-
+#if 0
 	/* Convert coremask to string for printing */
 	cvmx_coremask_bmp2str(&hgp->avail_coremask, hexstr);
 
 	/* Print the available coremask on to the console */
 	pr_info("Cavium Hotplug: Available coremask 0x%s\n", hexstr);
 #endif
+#endif
 }
 
 #ifdef CONFIG_HOTPLUG_CPU
@@ -409,54 +408,6 @@ static void octeon_cpus_done(void)
 /* State of each CPU. */
 DEFINE_PER_CPU(int, cpu_state);
 
-/*
- * Convert coremask to a printable hex string
- * Same function by name and purpose is also found in cvmx-coremask.c
- * but with a different implementation.
- */
-int cvmx_coremask_bmp2str(const cvmx_coremask_t *pcm, char *hexstr)
-{
-	int core;
-	char *p;
-	unsigned int i;
-	unsigned int nibbles;
-	unsigned int num_cores = cvmx_octeon_num_cores();
-	static const char hextab[16] = {
-		'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
-		'a', 'b', 'c', 'd', 'e', 'f'};
-
-	if (num_cores >= CVMX_MIPS_MAX_CORES)
-		return -1;
-
-	p = hexstr;
-
-	/* round-up num_cores to modulus 4 */
-	num_cores += 3;
-	num_cores &= ~3;
-
-	/* Calculate nibble count */
-	nibbles = num_cores >> 2;
-
-	/* Clear the buffer */
-	for (i = 0; i <= nibbles; i++)
-		p[i] = '\0';
-
-	/* Place core bits into nibbles, 4 bits per nibble */
-	for (core = num_cores - 1; core >= 0; core--) {
-		if (cvmx_coremask_is_core_set(pcm, core))
-			p[nibbles - (core>>2) - 1] |= 1 << (core & 3);
-	}
-
-	/* Convert each nibble into a hex char */
-	for (i = 0; i < nibbles; i++)
-		p[i] = hextab[p[i] & 0xf];
-
-	p[i] = '\0';
-
-	/* return the number if buffer bytes touched */
-	return nibbles+1;
-}
-
 static int octeon_cpu_disable(void)
 {
 	unsigned int cpu = smp_processor_id();
@@ -478,7 +429,6 @@ static void octeon_cpu_die(unsigned int cpu)
 	int coreid = cpu_logical_map(cpu);
 	int node;
 	struct cvmx_app_hotplug_global *hgp = octeon_hotplug_global_ptr;
-	char hexstr[CVMX_MIPS_MAX_CORES/4+3];
 
 	BUG_ON(!hgp);
 
@@ -490,11 +440,11 @@ static void octeon_cpu_die(unsigned int cpu)
 	cvmx_spinlock_unlock(&hgp->hotplug_global_lock);
 
 	mb();
-
+#if 0
 	/* Convert coremask to string for printing */
 	cvmx_coremask_bmp2str(&hgp->avail_coremask, hexstr);
 	pr_info("Reset core %d. Available Coremask = 0x%s\n", coreid, hexstr);
-
+#endif
 	/* Covert coreid to node/core spec and send NMI to target core */
 	node = cvmx_coremask_core_to_node(coreid);
 	coreid = cvmx_coremask_core_on_node(coreid);
-- 
1.8.2.1

