From a82040035b6420f3646d73ef1df11604f21e19d2 Mon Sep 17 00:00:00 2001
From: Carlos Munoz <carlos.munoz@caviumnetworks.com>
Date: Fri, 7 Mar 2014 10:48:22 -0800
Subject: [PATCH 105/122] MIPS/OCTEON: extern ciu3 chip function.

Source: Cavium Networks, Inc.
MR: 00000
Type: Integration
Disposition: Merged from Octeon Tree
ChangeID: 6ee882038924f378c979305a81351356c48d91d8
Description:

Extern ciu3 chip function.

Signed-off-by: Carlos Munoz <carlos.munoz@caviumnetworks.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from Cavium SDK 3.1.1 525]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 arch/mips/cavium-octeon/octeon-irq.c  | 78 ++++++++++++++++++++---------------
 arch/mips/include/asm/octeon/octeon.h | 33 +++++++++++++++
 2 files changed, 78 insertions(+), 33 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-irq.c b/arch/mips/cavium-octeon/octeon-irq.c
index 868767f..0886d52 100644
--- a/arch/mips/cavium-octeon/octeon-irq.c
+++ b/arch/mips/cavium-octeon/octeon-irq.c
@@ -64,21 +64,6 @@ struct octeon_irq_ciu_domain_data {
 
 static __read_mostly u8 octeon_irq_ciu_to_irq[8][64];
 
-struct octeon_ciu_chip_data {
-	union {
-		struct {		/* only used for ciu3 */
-			u64 ciu3_addr;
-			unsigned int intsn;
-		};
-		struct {		/* only used for ciu/ciu2 */
-			u8 line;
-			u8 bit;
-			u8 gpio_line;
-		};
-	};
-	int current_cpu;	/* Next CPU expected to take this irq */
-};
-
 struct octeon_core_chip_data {
 	struct mutex core_irq_mutex;
 	bool current_en;
@@ -110,7 +95,7 @@ static int octeon_irq_set_ciu_mapping(int irq, int line, int bit, int gpio_line,
 	return 0;
 }
 
-static void octeon_irq_free_cd(struct irq_domain *d, unsigned int irq)
+void octeon_irq_free_cd(struct irq_domain *d, unsigned int irq)
 {
 	struct irq_data *data = irq_get_irq_data(irq);
 	struct octeon_ciu_chip_data *cd = irq_data_get_irq_chip_data(data);
@@ -2042,7 +2027,7 @@ err:
 	return r;
 }
 
-static void octeon_irq_ciu3_enable(struct irq_data *data)
+void octeon_irq_ciu3_enable(struct irq_data *data)
 {
 	int cpu;
 	union cvmx_ciu3_iscx_ctl isc_ctl;
@@ -2067,7 +2052,7 @@ static void octeon_irq_ciu3_enable(struct irq_data *data)
 	cvmx_read_csr(isc_ctl_addr);
 }
 
-static void octeon_irq_ciu3_disable(struct irq_data *data)
+void octeon_irq_ciu3_disable(struct irq_data *data)
 {
 	u64 isc_ctl_addr;
 	union cvmx_ciu3_iscx_w1c isc_w1c;
@@ -2085,7 +2070,7 @@ static void octeon_irq_ciu3_disable(struct irq_data *data)
 	cvmx_read_csr(isc_ctl_addr);
 }
 
-static void octeon_irq_ciu3_ack(struct irq_data *data)
+void octeon_irq_ciu3_ack(struct irq_data *data)
 {
 	u64 isc_w1c_addr;
 	union cvmx_ciu3_iscx_w1c isc_w1c;
@@ -2109,7 +2094,7 @@ static void octeon_irq_ciu3_ack(struct irq_data *data)
 	cvmx_read_csr(isc_w1c_addr);
 }
 
-static void octeon_irq_ciu3_mask(struct irq_data *data)
+void octeon_irq_ciu3_mask(struct irq_data *data)
 {
 	union cvmx_ciu3_iscx_w1c isc_w1c;
 	u64 isc_w1c_addr;
@@ -2125,7 +2110,7 @@ static void octeon_irq_ciu3_mask(struct irq_data *data)
 	cvmx_read_csr(isc_w1c_addr);
 }
 
-static void octeon_irq_ciu3_mask_ack(struct irq_data *data)
+void octeon_irq_ciu3_mask_ack(struct irq_data *data)
 {
 	union cvmx_ciu3_iscx_w1c isc_w1c;
 	u64 isc_w1c_addr;
@@ -2150,8 +2135,8 @@ static void octeon_irq_ciu3_mask_ack(struct irq_data *data)
 }
 
 #ifdef CONFIG_SMP
-static int octeon_irq_ciu3_set_affinity(struct irq_data *data,
-					const struct cpumask *dest, bool force)
+int octeon_irq_ciu3_set_affinity(struct irq_data *data,
+				 const struct cpumask *dest, bool force)
 {
 	union cvmx_ciu3_iscx_ctl isc_ctl;
 	union cvmx_ciu3_iscx_w1c isc_w1c;
@@ -2198,12 +2183,12 @@ static struct irq_chip octeon_irq_chip_ciu3 = {
 #endif
 };
 
-static int octeon_irq_ciu3_xlat(struct irq_domain *d,
-				struct device_node *node,
-				const u32 *intspec,
-				unsigned int intsize,
-				unsigned long *out_hwirq,
-				unsigned int *out_type)
+int octeon_irq_ciu3_xlat(struct irq_domain *d,
+			 struct device_node *node,
+			 const u32 *intspec,
+			 unsigned int intsize,
+			 unsigned long *out_hwirq,
+			 unsigned int *out_type)
 {
 	struct octeon_ciu3_info *ciu3_info = d->host_data;
 	unsigned int hwirq, type, intsn_major;
@@ -2243,8 +2228,8 @@ static int octeon_irq_ciu3_xlat(struct irq_domain *d,
 	return 0;
 }
 
-static int octeon_irq_ciu3_map(struct irq_domain *d,
-			       unsigned int virq, irq_hw_number_t hw)
+int octeon_irq_ciu3_mapx(struct irq_domain *d, unsigned int virq,
+			 irq_hw_number_t hw, struct irq_chip *chip)
 {
 	struct octeon_ciu3_info *ciu3_info = d->host_data;
 	struct octeon_ciu_chip_data *cd = kzalloc_node(sizeof(*cd), GFP_KERNEL,
@@ -2255,13 +2240,18 @@ static int octeon_irq_ciu3_map(struct irq_domain *d,
 	cd->current_cpu = -1;
 	cd->ciu3_addr = ciu3_info->ciu3_addr;
 
-	irq_set_chip_and_handler(virq, &octeon_irq_chip_ciu3,
-				 octeon_irq_handle_trigger);
+	irq_set_chip_and_handler(virq, chip, octeon_irq_handle_trigger);
 	irq_set_chip_data(virq, cd);
 
 	return 0;
 }
 
+static int octeon_irq_ciu3_map(struct irq_domain *d,
+			       unsigned int virq, irq_hw_number_t hw)
+{
+	return octeon_irq_ciu3_mapx(d, virq, hw, &octeon_irq_chip_ciu3);
+}
+
 static struct irq_domain_ops octeon_dflt_domain_ciu3_ops = {
 	.map = octeon_irq_ciu3_map,
 	.unmap = octeon_irq_free_cd,
@@ -2650,3 +2640,25 @@ void octeon_fixup_irqs(void)
 }
 
 #endif /* CONFIG_HOTPLUG_CPU */
+
+void *octeon_irq_get_ciu3_info(int node)
+{
+	return octeon_ciu3_info_per_node[node & CVMX_NODE_MASK];
+}
+
+void octeon_irq_add_block_domain(int node, uint8_t block,
+				 struct irq_domain *domain)
+{
+	struct octeon_ciu3_info *ciu3_info;
+
+	ciu3_info = octeon_ciu3_info_per_node[node & CVMX_NODE_MASK];
+	ciu3_info->domain[block] = domain;
+}
+
+struct irq_domain *octeon_irq_get_block_domain(int node, uint8_t block)
+{
+	struct octeon_ciu3_info *ciu3_info;
+
+	ciu3_info = octeon_ciu3_info_per_node[node & CVMX_NODE_MASK];
+	return ciu3_info->domain[block];
+}
diff --git a/arch/mips/include/asm/octeon/octeon.h b/arch/mips/include/asm/octeon/octeon.h
index 9d42eac..25787cc 100644
--- a/arch/mips/include/asm/octeon/octeon.h
+++ b/arch/mips/include/asm/octeon/octeon.h
@@ -9,6 +9,7 @@
 #define __ASM_OCTEON_OCTEON_H
 
 #include <asm/octeon/cvmx.h>
+#include <linux/irq.h>
 
 extern uint64_t octeon_bootmem_alloc_range_phys(uint64_t size,
 						uint64_t alignment,
@@ -209,6 +210,21 @@ union octeon_cvmemctl {
 	} s;
 };
 
+struct octeon_ciu_chip_data {
+	union {
+		struct {		/* only used for ciu3 */
+			u64 ciu3_addr;
+			unsigned int intsn;
+		};
+		struct {		/* only used for ciu/ciu2 */
+			u8 line;
+			u8 bit;
+			u8 gpio_line;
+		};
+	};
+	int current_cpu;	/* Next CPU expected to take this irq */
+};
+
 extern void octeon_write_lcd(const char *s);
 extern void octeon_check_cpu_bist(void);
 extern int octeon_get_boot_debug_flag(void);
@@ -261,6 +277,23 @@ int octeon_request_ipi_handler(octeon_message_fn_t fn);
 void octeon_send_ipi_single(int cpu, unsigned int action);
 void octeon_release_ipi_handler(int action);
 void octeon_ciu3_mbox_send(int cpu, unsigned int mbox);
+void octeon_irq_ciu3_enable(struct irq_data *data);
+void octeon_irq_ciu3_disable(struct irq_data *data);
+void octeon_irq_ciu3_mask(struct irq_data *data);
+void octeon_irq_ciu3_ack(struct irq_data *data);
+void octeon_irq_ciu3_mask_ack(struct irq_data *data);
+int octeon_irq_ciu3_set_affinity(struct irq_data *data,
+				 const struct cpumask *dest, bool force);
+void octeon_irq_free_cd(struct irq_domain *d, unsigned int irq);
+int octeon_irq_ciu3_xlat(struct irq_domain *d, struct device_node *node,
+			 const u32 *intspec, unsigned int intsize,
+			 unsigned long *out_hwirq, unsigned int *out_type);
+int octeon_irq_ciu3_mapx(struct irq_domain *d, unsigned int virq,
+			 irq_hw_number_t hw, struct irq_chip *chip);
+void *octeon_irq_get_ciu3_info(int node);
+void octeon_irq_add_block_domain(int node, uint8_t block,
+				 struct irq_domain *domain);
+struct irq_domain *octeon_irq_get_block_domain(int node, uint8_t block);
 
 #if IS_ENABLED(CONFIG_CAVIUM_OCTEON_ERROR_TREE)
 int octeon_error_tree_enable(enum cvmx_error_groups group, int unit);
-- 
1.8.2.1

