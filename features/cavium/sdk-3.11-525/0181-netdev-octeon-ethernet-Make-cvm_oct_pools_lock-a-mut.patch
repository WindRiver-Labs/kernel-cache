From 4e57b96d1e74ed4349322d2c0a71cc6eb67501e8 Mon Sep 17 00:00:00 2001
From: Corey Minyard <cminyard@mvista.com>
Date: Mon, 29 Jul 2013 19:56:06 -0500
Subject: [PATCH 181/518] netdev: octeon-ethernet: Make cvm_oct_pools_lock a
 mutex

Source: Cavium Networks, Inc.
MR: 00000
Type: Integration
Disposition: Merged from Octeon Tree
ChangeID: bca8fc57e8f3ab3385c6f79cb6db7ea3b4017593
Description:

kmem_cache_create() was called while cvm_oct_pools_lock was held,
and kmem_cache_create() shouldn't be called from an atomic
context.  I could find no compelling reason for that lock to be
a spinlock, so I converted it to a mutex.

Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from Cavium SDK 3.1.1 525]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/octeon/ethernet-mem.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/octeon/ethernet-mem.c b/drivers/net/ethernet/octeon/ethernet-mem.c
index 67d907d..6e0a22f 100644
--- a/drivers/net/ethernet/octeon/ethernet-mem.c
+++ b/drivers/net/ethernet/octeon/ethernet-mem.c
@@ -45,7 +45,7 @@ struct fpa_pool {
 	int (*empty)(struct fpa_pool *p, int num);
 };
 
-static DEFINE_SPINLOCK(cvm_oct_pools_lock);
+static DEFINE_MUTEX(cvm_oct_pools_lock);
 /* Eight pools. */
 static struct fpa_pool cvm_oct_pools[] = {
 	{-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}
@@ -193,12 +193,12 @@ void cvm_oct_mem_cleanup(void)
 {
 	int i;
 
-	spin_lock(&cvm_oct_pools_lock);
+	mutex_lock(&cvm_oct_pools_lock);
 
 	for (i = 0; i < ARRAY_SIZE(cvm_oct_pools); i++)
 		if (cvm_oct_pools[i].kmem)
 			kmem_cache_shrink(cvm_oct_pools[i].kmem);
-	spin_unlock(&cvm_oct_pools_lock);
+	mutex_unlock(&cvm_oct_pools_lock);
 }
 EXPORT_SYMBOL(cvm_oct_mem_cleanup);
 
@@ -217,7 +217,7 @@ int cvm_oct_alloc_fpa_pool(int pool, int size)
 	if (pool >= (int)ARRAY_SIZE(cvm_oct_pools) || size < 128)
 		return -EINVAL;
 
-	spin_lock(&cvm_oct_pools_lock);
+	mutex_lock(&cvm_oct_pools_lock);
 
 	if (pool >= 0) {
 		if (cvm_oct_pools[pool].pool != -1) {
@@ -283,7 +283,7 @@ int cvm_oct_alloc_fpa_pool(int pool, int size)
 	}
 	ret = pool;
 out:
-	spin_unlock(&cvm_oct_pools_lock);
+	mutex_unlock(&cvm_oct_pools_lock);
 	return ret;
 }
 EXPORT_SYMBOL(cvm_oct_alloc_fpa_pool);
@@ -303,7 +303,7 @@ int cvm_oct_release_fpa_pool(int pool)
 	if (pool < 0 || pool >= (int)ARRAY_SIZE(cvm_oct_pools))
 		return ret;
 
-	spin_lock(&cvm_oct_pools_lock);
+	mutex_lock(&cvm_oct_pools_lock);
 
 	if (cvm_oct_pools[pool].users <= 0) {
 		pr_err("Error: Unbalanced FPA pool allocation\n");
@@ -316,7 +316,7 @@ int cvm_oct_release_fpa_pool(int pool)
 
 	ret = 0;
 out:
-	spin_unlock(&cvm_oct_pools_lock);
+	mutex_unlock(&cvm_oct_pools_lock);
 	return ret;
 }
 EXPORT_SYMBOL(cvm_oct_release_fpa_pool);
-- 
1.9.1

