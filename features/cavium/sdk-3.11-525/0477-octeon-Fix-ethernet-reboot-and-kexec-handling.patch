From 4e26f0d4dcb5627ffdd0c3712a36566f64c90755 Mon Sep 17 00:00:00 2001
From: Corey Minyard <cminyard@mvista.com>
Date: Tue, 27 May 2014 16:02:49 -0500
Subject: [PATCH 477/518] octeon: Fix ethernet reboot and kexec handling

Source: Cavium Networks, Inc
MR: 10872
Type: Defect Fix
Disposition: Local
ChangeID: f792e0774aeef5329c83130edad14e7df140343f
Description:

The previous fix for Bug 9761 caused issues on reboot, as it called
kfree when that was no longer available and thus would panic.  So
remove the reboot handler for this, which was unnecessary and
redundant.

Also, modify the code to not call kfree() in the kdump case.  That's
probably not safe.

Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from Cavium SDK 3.1.1 525]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/octeon/ethernet-mem.c | 14 +++++++----
 drivers/net/ethernet/octeon/ethernet.c     | 37 +++++++++++++++---------------
 2 files changed, 27 insertions(+), 24 deletions(-)

diff --git a/drivers/net/ethernet/octeon/ethernet-mem.c b/drivers/net/ethernet/octeon/ethernet-mem.c
index 78dc46d..301f888 100644
--- a/drivers/net/ethernet/octeon/ethernet-mem.c
+++ b/drivers/net/ethernet/octeon/ethernet-mem.c
@@ -100,9 +100,11 @@ static int cvm_oct_free_hw_skbuff(struct fpa_pool *pool, int elements)
 		memory = cvmx_fpa1_alloc(pool_num);
 		if (!memory)
 			break;
-		skb = *cvm_oct_packet_to_skb(memory);
-		elements--;
-		dev_kfree_skb(skb);
+		if (elements > 0) {
+			skb = *cvm_oct_packet_to_skb(memory);
+			elements--;
+			dev_kfree_skb(skb);
+		}
 	}
 
 	if (elements > 0)
@@ -151,8 +153,10 @@ static int cvm_oct_free_hw_kmem(struct fpa_pool *pool, int elements)
 		fpa = cvmx_fpa1_alloc(pool->pool);
 		if (!fpa)
 			break;
-		elements--;
-		kmem_cache_free(pool->kmem, fpa);
+		if (elements > 0) {
+			elements--;
+			kmem_cache_free(pool->kmem, fpa);
+		}
 	}
 
 	if (elements > 0)
diff --git a/drivers/net/ethernet/octeon/ethernet.c b/drivers/net/ethernet/octeon/ethernet.c
index 514142f..20b7b6d 100644
--- a/drivers/net/ethernet/octeon/ethernet.c
+++ b/drivers/net/ethernet/octeon/ethernet.c
@@ -272,23 +272,21 @@ static void cvm_oct_set_pko_multiqueue(void)
 static int num_devices_extra_wqe;
 #define PER_DEVICE_EXTRA_WQE (MAX_OUT_QUEUE_DEPTH)
 
-static void cleanup_fpa_pools(void)
+static void kexec_cleanup_fpa_pools(void)
 {
 	/* Free the HW pools */
-	cvm_oct_mem_empty_fpa(packet_pool, num_packet_buffers);
+	cvm_oct_mem_empty_fpa(packet_pool, -1);
 	cvm_oct_release_fpa_pool(packet_pool);
 
-	cvm_oct_mem_empty_fpa(wqe_pool,
-			      num_packet_buffers + num_devices_extra_wqe * PER_DEVICE_EXTRA_WQE);
+	cvm_oct_mem_empty_fpa(wqe_pool, -1);
 	cvm_oct_release_fpa_pool(wqe_pool);
 
-	cvm_oct_mem_empty_fpa(output_pool,
-				cvm_oct_num_output_buffers);
+	cvm_oct_mem_empty_fpa(output_pool, -1);
 	cvm_oct_release_fpa_pool(output_pool);
 }
 
-static int cvm_reboot_handler(struct notifier_block *nb,
-			      unsigned long action, void *data)
+static int cvm_kexec_handler(struct notifier_block *nb,
+			     unsigned long action, void *data)
 {
 	/*
 	 * Clean things up to a point where a new kernel can take over.
@@ -299,21 +297,15 @@ static int cvm_reboot_handler(struct notifier_block *nb,
 	cvm_oct_rx_shutdown0(true);
 	cvmx_helper_shutdown_packet_io_global();
 	cvm_oct_rx_shutdown1(true);
-	cleanup_fpa_pools();
+	kexec_cleanup_fpa_pools();
 	cvmx_pko_queue_free_all();
 	cvmx_pko_internal_ports_range_free_all();
 	__cvmx_export_app_config_cleanup();
 	return NOTIFY_DONE;
 }
 
-static struct notifier_block cvm_reboot_notify = {
-	.notifier_call = cvm_reboot_handler,
-	.next = NULL,
-	.priority = 0
-};
-
 static struct notifier_block cvm_kexec_crash_notify = {
-	.notifier_call = cvm_reboot_handler,
+	.notifier_call = cvm_kexec_handler,
 	.next = NULL,
 	.priority = 0
 };
@@ -388,7 +380,6 @@ static int cvm_oct_configure_common_hw(void)
 		cvmx_helper_setup_red(num_packet_buffers / 4,
 				      num_packet_buffers / 8);
 
-	register_reboot_notifier(&cvm_reboot_notify);
 	register_kexec_crash_notifier(&cvm_kexec_crash_notify);
 
 	return 0;
@@ -1169,9 +1160,17 @@ static int cvm_oct_remove(struct platform_device *pdev)
 	destroy_workqueue(cvm_oct_poll_queue);
 
 	unregister_kexec_crash_notifier(&cvm_kexec_crash_notify);
-	unregister_reboot_notifier(&cvm_reboot_notify);
 
-	cleanup_fpa_pools();
+	cvm_oct_mem_empty_fpa(packet_pool, num_packet_buffers);
+	cvm_oct_release_fpa_pool(packet_pool);
+
+	cvm_oct_mem_empty_fpa(wqe_pool,
+			      num_packet_buffers + num_devices_extra_wqe * PER_DEVICE_EXTRA_WQE);
+	cvm_oct_release_fpa_pool(wqe_pool);
+
+	cvm_oct_mem_empty_fpa(output_pool,
+				cvm_oct_num_output_buffers);
+	cvm_oct_release_fpa_pool(output_pool);
 
 	cvm_oct_mem_cleanup();
 
-- 
1.9.1

