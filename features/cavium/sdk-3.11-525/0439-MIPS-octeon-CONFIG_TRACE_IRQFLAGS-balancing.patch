From e5e44400d1f1b6d4fb35160bec3f3bdf4e310f22 Mon Sep 17 00:00:00 2001
From: Peter Swain <peter.swain@cavium.com>
Date: Mon, 14 Apr 2014 00:02:41 -0700
Subject: [PATCH 439/518] MIPS: octeon CONFIG_TRACE_IRQFLAGS balancing

Source: Cavium Networks, Inc.
MR: 00000
Type: Integration
Disposition: Merged from Octeon Tree
ChangeID: 4145e5d581a83a3b00c6730b5f0ef99356fcd089
Description:

octeon custom trap handling had missing TRACE_IRQFLAGS support,
and would complain of
  WARNING: at kernel/lockdep.c:3535 check_flags+0x1ac/0x208()
  DEBUG_LOCKS_WARN_ON(current->hardirqs_enabled)
  ...
  possible reason: unannotated irqs-off.

No code changed unless CONFIG_TRACE_IRQFLAGS=y

Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from Cavium SDK 3.1.1 525]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/kernel/entry.S | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/arch/mips/kernel/entry.S b/arch/mips/kernel/entry.S
index e578685..1b6ee6e 100644
--- a/arch/mips/kernel/entry.S
+++ b/arch/mips/kernel/entry.S
@@ -31,6 +31,9 @@
 #ifndef CONFIG_PREEMPT
 FEXPORT(ret_from_exception)
 	local_irq_disable			# preempt stop
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	b	__ret_from_irq
 #endif
 FEXPORT(ret_from_irq)
@@ -49,6 +52,9 @@ resume_userspace:
 	local_irq_disable		# make sure we dont miss an
 					# interrupt setting need_resched
 					# between sampling and return
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	LONG_L	a2, TI_FLAGS($28)	# current->work
 	andi	t0, a2, _TIF_WORK_MASK	# (ignoring syscall_trace)
 	bnez	t0, work_pending
@@ -57,6 +63,9 @@ resume_userspace:
 #ifdef CONFIG_PREEMPT
 resume_kernel:
 	local_irq_disable
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	lw	t0, TI_PRE_COUNT($28)
 	bnez	t0, restore_all
 need_resched:
@@ -83,6 +92,9 @@ FEXPORT(syscall_exit)
 	local_irq_disable		# make sure need_resched and
 					# signals dont change between
 					# sampling and return
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	LONG_L	a2, TI_FLAGS($28)	# current->work
 	li	t0, _TIF_ALLWORK_MASK
 	and	t0, a2, t0
@@ -161,6 +173,9 @@ work_resched:
 	local_irq_disable		# make sure need_resched and
 					# signals dont change between
 					# sampling and return
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	LONG_L	a2, TI_FLAGS($28)
 	andi	t0, a2, _TIF_WORK_MASK	# is there any work to be done
 					# other than syscall tracing?
@@ -178,6 +193,9 @@ work_notifysig:				# deal with pending signals and
 FEXPORT(syscall_exit_partial)
 	local_irq_disable		# make sure need_resched doesn't
 					# change between and return
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	LONG_L	a2, TI_FLAGS($28)	# current->work
 	li	t0, _TIF_ALLWORK_MASK
 	and	t0, a2
@@ -192,6 +210,9 @@ syscall_exit_work:
 	beqz	t0, work_pending	# trace bit set?
 	local_irq_enable		# could let syscall_trace_leave()
 					# call schedule() instead
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_on
+#endif
 	move	a0, sp
 	jal	syscall_trace_leave
 	b	resume_userspace
-- 
1.9.1

