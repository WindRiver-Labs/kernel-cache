From a1108189a3f75978552c9c9a7342068cb339148a Mon Sep 17 00:00:00 2001
From: Chad Reese <kreese@caviumnetworks.com>
Date: Fri, 14 May 2010 14:23:06 -0700
Subject: [PATCH 074/518] RapidIO: Add interface to memory map rapidio device
 memory.

Source: Cavium Networks, Inc.
MR: 00000
Type: Integration
Disposition: Merged from Octeon Tree
ChangeID: cc43ce2b627df088c3148ac8322f916262861501
Description:

The rapidio system needs a standard interface to allow drivers access
to memory mapped addresses on devices. Add a map/unamp calls to
create kernel pointers for accessing this remote memory.

Signed-off-by: Chad Reese <kreese@caviumnetworks.com>
Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from Cavium SDK 3.1.1 525]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/rapidio/rio-sysfs.c | 83 +++++++++++++++++++++++++++++++++++++++++++++
 drivers/rapidio/rio.c       | 45 ++++++++++++++++++++++++
 include/linux/rio.h         |  7 ++++
 include/linux/rio_drv.h     |  3 ++
 4 files changed, 138 insertions(+)

diff --git a/drivers/rapidio/rio-sysfs.c b/drivers/rapidio/rio-sysfs.c
index 66d4acd..a3d068a 100644
--- a/drivers/rapidio/rio-sysfs.c
+++ b/drivers/rapidio/rio-sysfs.c
@@ -241,6 +241,54 @@ static struct bin_attribute rio_config_attr = {
 	.write = rio_write_config,
 };
 
+static ssize_t
+rio_read_memory(struct file *_, struct kobject *kobj,
+		struct bin_attribute *bin_attr,
+		char *buf, loff_t off, size_t count)
+{
+	struct rio_dev *dev =
+		to_rio_dev(container_of(kobj, struct device, kobj));
+	void *map;
+
+	if (off >= bin_attr->size)
+		return 0;
+	if (off + count > bin_attr->size)
+		count = bin_attr->size - off;
+
+	map = rio_map_memory(dev, off, count);
+	if (!map) {
+		dev_err(&dev->dev, "Unable to map RapidIO device resource\n");
+		return 0;
+	}
+	memcpy(buf, map, count);
+	rio_unmap_memory(dev, off, count, map);
+	return count;
+}
+
+static ssize_t
+rio_write_memory(struct file *_, struct kobject *kobj,
+		 struct bin_attribute *bin_attr,
+		 char *buf, loff_t off, size_t count)
+{
+	struct rio_dev *dev =
+		to_rio_dev(container_of(kobj, struct device, kobj));
+	void *map;
+
+	if (off >= bin_attr->size)
+		return 0;
+	if (off + count > bin_attr->size)
+		count = bin_attr->size - off;
+
+	map = rio_map_memory(dev, off, count);
+	if (!map) {
+		dev_err(&dev->dev, "Unable to map RapidIO device resource\n");
+		return 0;
+	}
+	memcpy(map, buf, count);
+	rio_unmap_memory(dev, off, count, map);
+	return count;
+}
+
 /**
  * rio_create_sysfs_dev_files - create RIO specific sysfs files
  * @rdev: device whose entries should be created
@@ -251,6 +299,7 @@ int rio_create_sysfs_dev_files(struct rio_dev *rdev)
 {
 	int err = 0;
 
+
 	err = device_create_bin_file(&rdev->dev, &rio_config_attr);
 
 	if (!err && (rdev->pef & RIO_PEF_SWITCH)) {
@@ -265,6 +314,33 @@ int rio_create_sysfs_dev_files(struct rio_dev *rdev)
 		pr_warning("RIO: Failed to create attribute file(s) for %s\n",
 			   rio_name(rdev));
 
+	err = sysfs_create_bin_file(&rdev->dev.kobj, &rio_config_attr);
+	if (err)
+		return err;
+
+	rdev->memory.attr.name = "memory";
+	rdev->memory.attr.mode = S_IRUGO | S_IWUSR;
+	rdev->memory.read = rio_read_memory;
+	rdev->memory.write = rio_write_memory;
+	rdev->memory.private = NULL;
+
+	/* Prefer 50 bit addressing as it fits in kernel variables on a 64 bit
+		machine. Support for addressing 66 bits will need to be
+		revisited if anyone actually uses it */
+	if (rdev->pef & RIO_PEF_ADDR_50)
+		rdev->memory.size = (sizeof(rdev->memory.size) == 4) ? 1<<31 : 1ul << 50;
+	else if (rdev->pef & RIO_PEF_ADDR_66)
+		rdev->memory.size = (sizeof(rdev->memory.size) == 4) ? 1<<31 : 1ul << 63;
+	else if (rdev->pef & RIO_PEF_ADDR_34)
+		rdev->memory.size = (sizeof(rdev->memory.size) == 4) ? 1<<31 : 1ul << 34;
+	else
+		rdev->memory.size = 0;
+
+	if (rdev->memory.size) {
+		err = sysfs_create_bin_file(&rdev->dev.kobj, &rdev->memory);
+		if (err)
+			rdev->memory.size = 0;
+	}
 	return err;
 }
 
@@ -284,6 +360,13 @@ void rio_remove_sysfs_dev_files(struct rio_dev *rdev)
 		if (rdev->rswitch->sw_sysfs)
 			rdev->rswitch->sw_sysfs(rdev, RIO_SW_SYSFS_REMOVE);
 	}
+
+	sysfs_remove_bin_file(&rdev->dev.kobj, &rio_config_attr);
+
+	if (rdev->memory.size) {
+		sysfs_remove_bin_file(&rdev->dev.kobj, &rdev->memory);
+		rdev->memory.size = 0;
+	}
 }
 
 static ssize_t bus_scan_store(struct bus_type *bus, const char *buf,
diff --git a/drivers/rapidio/rio.c b/drivers/rapidio/rio.c
index cb1c089..36d95d2 100644
--- a/drivers/rapidio/rio.c
+++ b/drivers/rapidio/rio.c
@@ -472,6 +472,51 @@ void rio_unmap_inb_region(struct rio_mport *mport, dma_addr_t lstart)
 EXPORT_SYMBOL_GPL(rio_unmap_inb_region);
 
 /**
+ * rio_map_memory - Map a RIO memory address to a kernel pointer.
+ * @rdev: RapidIO device the map is for
+ * @offset: RapidIO memory address offset into the device
+ * @length: Length of the mapped range
+ *
+ * Returns a kernel pointer to a memory mapped interface for a remote RapidIO
+ * device.
+ */
+void *rio_map_memory(struct rio_dev *rdev,
+		     u64 offset, u64 length)
+{
+	phys_t physical;
+	struct rio_mport *mport = rdev->net->hport;
+
+	if (!mport->ops->map)
+		return NULL;
+	physical = mport->ops->map(mport, rdev, offset, length);
+	if (physical)
+		return phys_to_virt(physical);
+	else
+		return NULL;
+}
+EXPORT_SYMBOL_GPL(rio_map_memory);
+
+/**
+ * rio_unmap_memory - Unmap a RIO device mapped using rio_map_memory().
+ * @rdev: RapidIO device the resource is for
+ * @offset: RapidIO memory address offset of the map
+ * @length: Length of the mapped range
+ * @map: Kernel virtual address the resource was mapped at
+ */
+void rio_unmap_memory(struct rio_dev *rdev,
+		      u64 offset, u64 length, void *map)
+{
+	phys_t physical;
+	struct rio_mport *mport = rdev->net->hport;
+
+	if (!mport->ops->map)
+		return;
+	physical = virt_to_phys(map);
+	mport->ops->unmap(mport, rdev, offset, length, physical);
+}
+EXPORT_SYMBOL_GPL(rio_unmap_memory);
+
+/**
  * rio_mport_get_physefb - Helper function that returns register offset
  *                      for Physical Layer Extended Features Block.
  * @port: Master port to issue transaction
diff --git a/include/linux/rio.h b/include/linux/rio.h
index 18e0993..348c097 100644
--- a/include/linux/rio.h
+++ b/include/linux/rio.h
@@ -177,6 +177,7 @@ struct rio_dev {
 	struct device dev;	/* LDM device structure */
 	struct resource riores[RIO_MAX_DEV_RESOURCES];
 	int (*pwcback) (struct rio_dev *rdev, union rio_pw_msg *msg, int step);
+	struct bin_attribute memory;	/* Sysfs file for memory access */
 	u16 destid;
 	u8 hopcount;
 	struct rio_dev *prev;
@@ -320,6 +321,8 @@ struct rio_net {
  * @get_inb_message: Callback to get a message from an inbound mailbox queue.
  * @map_inb: Callback to map RapidIO address region into local memory space.
  * @unmap_inb: Callback to unmap RapidIO address region mapped with map_inb().
+ * @map: Callback to map a remote device's memory range to the local system.
+ * @unmap: Callback to unmap a previously mapped range.
  */
 struct rio_ops {
 	int (*lcread) (struct rio_mport *mport, int index, u32 offset, int len,
@@ -345,6 +348,10 @@ struct rio_ops {
 	int (*map_inb)(struct rio_mport *mport, dma_addr_t lstart,
 			u64 rstart, u32 size, u32 flags);
 	void (*unmap_inb)(struct rio_mport *mport, dma_addr_t lstart);
+	phys_t (*map) (struct rio_mport *mport, struct rio_dev *rdev,
+			u64 offset, u64 length);
+	void (*unmap) (struct rio_mport *mport, struct rio_dev *rdev,
+			u64 offset, u64 length, phys_t map);
 };
 
 #define RIO_RESOURCE_MEM	0x00000100
diff --git a/include/linux/rio_drv.h b/include/linux/rio_drv.h
index 5059994..41f8235 100644
--- a/include/linux/rio_drv.h
+++ b/include/linux/rio_drv.h
@@ -365,6 +365,9 @@ void rio_release_regions(struct rio_dev *);
 int rio_request_region(struct rio_dev *, int, char *);
 void rio_release_region(struct rio_dev *, int);
 
+void *rio_map_memory(struct rio_dev *rdev, u64 offset, u64 length);
+void rio_unmap_memory(struct rio_dev *rdev, u64 offset, u64 length, void *map);
+
 /* Memory mapping functions */
 extern int rio_map_inb_region(struct rio_mport *mport, dma_addr_t local,
 			u64 rbase, u32 size, u32 rflags);
-- 
1.9.1

