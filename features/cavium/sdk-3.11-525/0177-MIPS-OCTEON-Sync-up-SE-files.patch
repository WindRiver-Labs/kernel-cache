From f3b956897017d866d7645ffa97e12b39e892243f Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Mon, 29 Jul 2013 14:53:36 -0700
Subject: [PATCH 177/518] MIPS:OCTEON: Sync up SE files.

Source: Cavium Networks, Inc.
MR: 00000
Type: Integration
Disposition: Merged from Octeon Tree
ChangeID: 1a8bed7349db141e5a11a918ae6b40b0c457aee1
Description:

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from Cavium SDK 3.1.1 525]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/cavium-octeon/executive/Makefile         |    3 +-
 arch/mips/cavium-octeon/executive/cvmx-debug.c     |    8 +-
 .../cavium-octeon/executive/cvmx-helper-board.c    |  148 +-
 .../mips/cavium-octeon/executive/cvmx-helper-cfg.c |   65 +-
 .../mips/cavium-octeon/executive/cvmx-helper-ilk.c |  269 +-
 .../cavium-octeon/executive/cvmx-helper-sgmii.c    |  120 +-
 .../cavium-octeon/executive/cvmx-helper-util.c     |  181 +-
 arch/mips/cavium-octeon/executive/cvmx-helper.c    |   38 +-
 arch/mips/cavium-octeon/executive/cvmx-ilk.c       |  353 +-
 arch/mips/cavium-octeon/executive/cvmx-pki.c       |  729 +++-
 arch/mips/include/asm/octeon/cvmx-ase-defs.h       |  789 ++--
 arch/mips/include/asm/octeon/cvmx-asm.h            |   10 +-
 arch/mips/include/asm/octeon/cvmx-bgxx-defs.h      | 3811 +++++++++-----------
 arch/mips/include/asm/octeon/cvmx-ciu-defs.h       |    2 +-
 arch/mips/include/asm/octeon/cvmx-debug.h          |   20 +-
 arch/mips/include/asm/octeon/cvmx-fpa.h            |   28 +-
 .../include/asm/octeon/cvmx-global-resources.h     |    1 +
 arch/mips/include/asm/octeon/cvmx-gpio-defs.h      |   25 +-
 arch/mips/include/asm/octeon/cvmx-gserx-defs.h     |  666 +++-
 arch/mips/include/asm/octeon/cvmx-helper-board.h   |   17 +-
 arch/mips/include/asm/octeon/cvmx-helper-cfg.h     |   50 +-
 arch/mips/include/asm/octeon/cvmx-helper-ilk.h     |   31 +
 arch/mips/include/asm/octeon/cvmx-helper-util.h    |   26 +-
 arch/mips/include/asm/octeon/cvmx-helper.h         |   15 +-
 arch/mips/include/asm/octeon/cvmx-ilk-defs.h       |   12 +-
 arch/mips/include/asm/octeon/cvmx-ilk.h            |    7 +-
 arch/mips/include/asm/octeon/cvmx-iob-defs.h       |   73 +-
 arch/mips/include/asm/octeon/cvmx-iobn-defs.h      |   73 +-
 arch/mips/include/asm/octeon/cvmx-l2c-defs.h       |   85 +-
 arch/mips/include/asm/octeon/cvmx-lmcx-defs.h      |   67 +-
 arch/mips/include/asm/octeon/cvmx-mio-defs.h       |   47 +-
 arch/mips/include/asm/octeon/cvmx-mpi-defs.h       |   12 +-
 arch/mips/include/asm/octeon/cvmx-oclax-defs.h     |   30 +-
 arch/mips/include/asm/octeon/cvmx-ocx-defs.h       |   18 +-
 arch/mips/include/asm/octeon/cvmx-osm-defs.h       |  127 +-
 arch/mips/include/asm/octeon/cvmx-pcieepx-defs.h   |  221 +-
 arch/mips/include/asm/octeon/cvmx-pciercx-defs.h   |  176 +-
 arch/mips/include/asm/octeon/cvmx-pemx-defs.h      |   29 +-
 arch/mips/include/asm/octeon/cvmx-pki.h            |  546 ++-
 arch/mips/include/asm/octeon/cvmx-pko-defs.h       |  362 +-
 arch/mips/include/asm/octeon/cvmx-pow-defs.h       |   12 +-
 arch/mips/include/asm/octeon/cvmx-rst-defs.h       |   19 +-
 arch/mips/include/asm/octeon/cvmx-sli-defs.h       |   17 +-
 arch/mips/include/asm/octeon/cvmx-sso-defs.h       |    9 +-
 arch/mips/include/asm/octeon/cvmx-uctlx-defs.h     |  320 +-
 45 files changed, 5858 insertions(+), 3809 deletions(-)

diff --git a/arch/mips/cavium-octeon/executive/Makefile b/arch/mips/cavium-octeon/executive/Makefile
index a3b60fc..4871387 100644
--- a/arch/mips/cavium-octeon/executive/Makefile
+++ b/arch/mips/cavium-octeon/executive/Makefile
@@ -19,7 +19,8 @@ obj-y += cvmx-pko.o cvmx-spi.o cvmx-cmd-queue.o cvmx-helper-cfg.o	\
 	cvmx-pko-internal-ports-range.o cvmx-helper-agl.o \
 	cvmx-helper-board.o cvmx-helper.o cvmx-helper-xaui.o \
 	cvmx-helper-rgmii.o cvmx-helper-sgmii.o cvmx-helper-npi.o \
-	cvmx-helper-loop.o cvmx-helper-spi.o cvmx-helper-util.o
+	cvmx-helper-loop.o cvmx-helper-spi.o cvmx-helper-util.o	\
+	cvmx-pki-resources.o
 
 obj-y += cvmx-helper-errata.o cvmx-helper-jtag.o
 obj-y += cvmx-pcie.o
diff --git a/arch/mips/cavium-octeon/executive/cvmx-debug.c b/arch/mips/cavium-octeon/executive/cvmx-debug.c
index 51e25e6..6974935 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-debug.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-debug.c
@@ -354,7 +354,7 @@ void cvmx_debug_init(void)
 		state = cvmx_debug_get_state();
 #ifdef CVMX_BUILD_FOR_LINUX_KERNEL
 		{
-		uint32_t coremask = cvmx_coremask_get32(pcm);
+		uint64_t coremask = cvmx_coremask_get64(pcm);
 		state.known_cores |= coremask;
 		state.core_finished &= ~coremask;
 		}
@@ -381,7 +381,7 @@ void cvmx_debug_init(void)
 		state.step_isr = 1;
 		/* COMMAND_NOP might not be 0. */
 		state.command = COMMAND_NOP;
-		cvmx_debug_printf("Known cores at init: 0x%x\n", (int)state.known_cores);
+		cvmx_debug_printf("Known cores at init: 0x%llx\n", (long long)state.known_cores);
 		cvmx_debug_update_state(state);
 
 		/* Initialize __cvmx_debug_stack_top_all. */
@@ -1133,8 +1133,8 @@ static void cvmx_debug_sync_up_cores(void)
 	   and we don't change the array. */
 	do {
 asm("": : :	"memory");
-	} while (cvmx_debug_globals->state[offsetof(cvmx_debug_state_t, step_all) / sizeof(uint32_t)]
-		 && cvmx_debug_globals->state[offsetof(cvmx_debug_state_t, handler_cores) / sizeof(uint32_t)] != 0);
+	} while (cvmx_debug_globals->state[offsetof(cvmx_debug_state_t, step_all) / sizeof(uint64_t)]
+		 && cvmx_debug_globals->state[offsetof(cvmx_debug_state_t, handler_cores) / sizeof(uint64_t)] != 0);
 }
 
 /* Delay the focus core a little if it is likely another core needs to steal
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-board.c b/arch/mips/cavium-octeon/executive/cvmx-helper-board.c
index 84f5085..a26c57c 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-board.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-board.c
@@ -1,5 +1,5 @@
 /***********************license start***************
- * Copyright (c) 2003-2011  Cavium Inc. (support@cavium.com). All rights
+ * Copyright (c) 2003-2013  Cavium Inc. (support@cavium.com). All rights
  * reserved.
  *
  *
@@ -56,6 +56,7 @@
 #include <asm/octeon/cvmx-helper.h>
 #include <asm/octeon/cvmx-helper-util.h>
 #include <asm/octeon/cvmx-helper-board.h>
+#include <asm/octeon/cvmx-helper-cfg.h>
 #include <asm/octeon/cvmx-twsi.h>
 #else
 #include "cvmx.h"
@@ -66,6 +67,7 @@
 #include "cvmx-helper.h"
 #include "cvmx-helper-util.h"
 #include "cvmx-helper-board.h"
+#include "cvmx-helper-cfg.h"
 #include "cvmx-gpio.h"
 #include "octeon_mem_map.h"
 #include "cvmx-bootmem.h"
@@ -124,16 +126,16 @@ int __pip_eth_node(const void *fdt_addr, int aliases, int ipd_port)
 
 	/* The following are not found in the device tree */
 	switch (interface_mode) {
-		case CVMX_HELPER_INTERFACE_MODE_ILK:
-		case CVMX_HELPER_INTERFACE_MODE_LOOP:
-		case CVMX_HELPER_INTERFACE_MODE_SRIO:
-			cvmx_dprintf("ERROR: No node expected for interface: %d, port: %d, mode: %s\n",
-				     interface_index,
-				     ipd_port,
-				     cvmx_helper_interface_mode_to_string(interface_mode));
-			return -1;
-		default:
-			break;
+	case CVMX_HELPER_INTERFACE_MODE_ILK:
+	case CVMX_HELPER_INTERFACE_MODE_LOOP:
+	case CVMX_HELPER_INTERFACE_MODE_SRIO:
+		cvmx_dprintf("ERROR: No node expected for interface: %d, port: %d, mode: %s\n",
+			     interface_index,
+			     ipd_port,
+			     cvmx_helper_interface_mode_to_string(interface_mode));
+		return -1;
+	default:
+		break;
 	}
 	pip_path = fdt_getprop(fdt_addr, aliases, "pip", NULL);
 	if (!pip_path) {
@@ -384,6 +386,7 @@ int __cvmx_helper_board_get_port_from_dt(void *fdt_addr, int ipd_port)
         case CVMX_HELPER_INTERFACE_MODE_SPI:
         case CVMX_HELPER_INTERFACE_MODE_XAUI:
         case CVMX_HELPER_INTERFACE_MODE_SGMII:
+	case CVMX_HELPER_INTERFACE_MODE_QSGMII:
         case CVMX_HELPER_INTERFACE_MODE_RXAUI:
 		aliases = 1;
 		break;
@@ -546,6 +549,10 @@ int __get_phy_info_from_dt(cvmx_phy_info_t *phy_info, int ipd_port)
 			phy_info->host_mode = CVMX_PHY_HOST_MODE_XAUI;
 		} else if (strcmp(host_mode_str, "sgmii") == 0) {
 			phy_info->host_mode = CVMX_PHY_HOST_MODE_SGMII;
+		} else if (strcmp(host_mode_str, "qsgmii") == 0) {
+			phy_info->host_mode = CVMX_PHY_HOST_MODE_QSGMII;
+		} else {
+			cvmx_dprintf("Unknown PHY host mode\n");
 		}
 	}
 
@@ -553,7 +560,8 @@ int __get_phy_info_from_dt(cvmx_phy_info_t *phy_info, int ipd_port)
 	   though a MUX and for them direct_connect_to_phy will be 0 */
 	phy_parent = fdt_parent_offset(fdt_addr, phy);
 	if (phy_parent < 0) {
-		cvmx_dprintf("ERROR : cannot find phy parent for ipd_port=%d ret=%d\n", ipd_port, phy_parent);
+		cvmx_dprintf("ERROR : cannot find phy parent for ipd_port=%d ret=%d\n",
+			     ipd_port, phy_parent);
 		return -1;
 	}
 	/* For multi-phy devices and devices on a MUX, go to the parent */
@@ -1310,8 +1318,17 @@ cvmx_helper_link_info_t __cvmx_helper_board_link_get_from_dt(int ipd_port)
 	}
 
 	if (__get_phy_info_from_dt(&phy_info, ipd_port) < 0) {
-		cvmx_dprintf("%s: Failed to get phy info for ipd port %d\n",
-			     __func__, ipd_port);
+		/* If we can't get the PHY info from the device tree then try
+		 * the inband state.
+		 */
+		if (OCTEON_IS_OCTEON1() || OCTEON_IS_MODEL(OCTEON_CN58XX) ||
+		    OCTEON_IS_MODEL(OCTEON_CN50XX)) {
+			result = __get_inband_link_state(ipd_port);
+		} else {
+			result.s.full_duplex = 1;
+			result.s.link_up = 1;
+			result.s.speed = 1000;
+		}
 		return result;
 	}
 
@@ -1342,8 +1359,21 @@ cvmx_helper_link_info_t __cvmx_helper_board_link_get_from_dt(int ipd_port)
 	case CORTINA_PHY:
 		result = __cvmx_get_cortina_phy_link_state(phy_info.phy_addr);
 		break;
+	case INBAND_PHY:
 	default:
-		result = __get_inband_link_state(ipd_port);
+		if (OCTEON_IS_OCTEON1() ||
+		    OCTEON_IS_MODEL(OCTEON_CN58XX) ||
+		    OCTEON_IS_MODEL(OCTEON_CN50XX))
+			/*
+			 * We don't have a PHY address, so attempt to use
+			 * in-band status. It is really important that boards
+			 * not supporting in-band status never get
+			 * here. Reading broken in-band status tends to do bad
+			 * things.
+			 */
+			result = __get_inband_link_state(ipd_port);
+		else
+			return cvmx_helper_link_get(ipd_port);
 	}
 	return result;
 
@@ -1876,3 +1906,91 @@ int __cvmx_helper_board_usb_get_num_ports(int supported_ports)
 
 	return supported_ports;
 }
+
+#ifndef CVMX_BUILD_FOR_LINUX_KERNEL
+/**
+ * @INTERNAL
+ * This function outputs the port flags for the specified interface and port.
+ *
+ * @param interface interface to get the port flags for
+ * @param index     port on interface to get the port flags for
+ * @param[out] pflags port flags for the specified port.  Not modified if the
+ *		      data is unavailable.
+ *
+ * @return 0 for success, -1 if info no available.
+ */
+int __cvmx_helper_board_get_port_flags(int interface, int index)
+{
+	static void *fdt_addr;
+	int ipd_port;
+	int aliases, eth;
+	cvmx_helper_interface_mode_t interface_mode =
+				cvmx_helper_interface_get_mode(interface);
+
+	switch (interface_mode) {
+	case CVMX_HELPER_INTERFACE_MODE_ILK:
+	case CVMX_HELPER_INTERFACE_MODE_LOOP:
+	case CVMX_HELPER_INTERFACE_MODE_SRIO:
+	case CVMX_HELPER_INTERFACE_MODE_PCIE:
+	case CVMX_HELPER_INTERFACE_MODE_NPI:
+		/* These interface types have no device tree entries */
+		return 0;
+	case CVMX_HELPER_INTERFACE_MODE_AGL:
+		/* Their is no device tree for agl interface when running
+		   on simulator. */
+		if (cvmx_sysinfo_get()->board_type == CVMX_BOARD_TYPE_SIM)
+			return 0;
+		break;
+	default:
+		break;
+	}
+
+	if (fdt_addr == 0)
+		fdt_addr = __cvmx_phys_addr_to_ptr(cvmx_sysinfo_get()->fdt_addr,
+						   OCTEON_FDT_MAX_SIZE);
+
+	if (!fdt_addr) {
+		cvmx_dprintf("No device tree found.\n");
+		return -1;
+	}
+
+	aliases = fdt_path_offset(fdt_addr, "/aliases");
+	if (aliases < 0) {
+		cvmx_dprintf("Error: no /aliases node in device tree.\n");
+		return -1;
+	}
+
+	ipd_port = cvmx_helper_get_ipd_port(interface, index);
+	eth = __pip_eth_node(fdt_addr, aliases, ipd_port);
+	if (eth < 0)
+		return 0;
+
+	if (fdt_getprop(fdt_addr, eth, "cavium,sgmii-mac-phy-mode", NULL))
+		cvmx_helper_set_mac_phy_mode(interface, index, true);
+	else
+		cvmx_helper_set_mac_phy_mode(interface, index, false);
+
+	if (fdt_getprop(fdt_addr, eth, "cavium,sgmii-mac-1000x-mode", NULL))
+		cvmx_helper_set_1000x_mode(interface, index, true);
+	else
+		cvmx_helper_set_1000x_mode(interface, index, false);
+
+	return 0;
+}
+#endif
+/**
+ * @INTERNAL
+ * This function outputs the port flags for the specified interface and port.
+ *
+ * @param interface interface to get the port flags for
+ * @param[out] iflags interface flags for the specified port.  Not modified if
+ *		      the data is unavailable.
+ *
+ * @return 0 for success, -1 if info no available.
+ *
+ * NOTE: As of 6/21/2013 no interface flags have been defined.
+ */
+int __cvmx_helper_board_get_interface_flags(int interface, uint32_t *iflags)
+{
+	return 0;
+}
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c b/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c
index ea92c52..6f52a70 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c
@@ -1,5 +1,5 @@
 /***********************license start***************
- * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights
+ * Copyright (c) 2003-2013  Cavium Inc. (support@cavium.com). All rights
  * reserved.
  *
  *
@@ -82,7 +82,9 @@
 CVMX_SHARED struct cvmx_cfg_port_param cvmx_cfg_port[CVMX_HELPER_MAX_IFACE][CVMX_HELPER_CFG_MAX_PORT_PER_IFACE] =
 	{[0 ... CVMX_HELPER_MAX_IFACE - 1] = {[0 ... CVMX_HELPER_CFG_MAX_PORT_PER_IFACE - 1] =
 					      { CVMX_HELPER_CFG_INVALID_VALUE, CVMX_HELPER_CFG_INVALID_VALUE,
-						CVMX_HELPER_CFG_INVALID_VALUE, CVMX_HELPER_CFG_INVALID_VALUE}}};
+						CVMX_HELPER_CFG_INVALID_VALUE, CVMX_HELPER_CFG_INVALID_VALUE,
+						CVMX_HELPER_CFG_INVALID_VALUE, CVMX_HELPER_CFG_INVALID_VALUE,
+						CVMX_HELPER_CFG_INVALID_VALUE}}};
 /*
  * Indexed by the pko_port number
  */
@@ -478,6 +480,7 @@ void cvmx_helper_cfg_set_jabber_and_frame_max()
 
 		switch (imode) {
 		case CVMX_HELPER_INTERFACE_MODE_SGMII:
+		case CVMX_HELPER_INTERFACE_MODE_QSGMII:
 		case CVMX_HELPER_INTERFACE_MODE_XAUI:
 		case CVMX_HELPER_INTERFACE_MODE_RXAUI:
 			for (port = 0; port < num_ports; port++)
@@ -677,10 +680,55 @@ static int cvmx_helper_cfg_init_pko_iports_and_queues_using_static_config(void)
 	return rv;
 }
 
+/**
+ * Returns if port is valid for a given interface
+ *
+ * @param interface  interface to check
+ * @param index      port index in the interface
+ *
+ * @return status of the port present or not.
+ */
+int cvmx_helper_is_port_valid(int interface, int index)
+{
+	return  cvmx_cfg_port[interface][index].valid;
+}
+EXPORT_SYMBOL(cvmx_helper_is_port_valid);
+
+void cvmx_helper_set_port_valid(int interface, int index, bool valid)
+{
+	cvmx_cfg_port[interface][index].valid = valid;
+}
+EXPORT_SYMBOL(cvmx_helper_set_port_valid);
+
+void cvmx_helper_set_mac_phy_mode(int interface, int index, bool valid)
+{
+	cvmx_cfg_port[interface][index].sgmii_phy_mode = valid;
+}
+EXPORT_SYMBOL(cvmx_helper_set_mac_phy_mode);
+
+bool cvmx_helper_get_mac_phy_mode(int interface, int index)
+{
+	return cvmx_cfg_port[interface][index].sgmii_phy_mode;
+}
+EXPORT_SYMBOL(cvmx_helper_get_mac_phy_mode);
+
+void cvmx_helper_set_1000x_mode(int interface, int index, bool valid)
+{
+	cvmx_cfg_port[interface][index].sgmii_1000x_mode = valid;
+}
+EXPORT_SYMBOL(cvmx_helper_set_1000x_mode);
+
+bool cvmx_helper_get_1000x_mode(int interface, int index)
+{
+	return cvmx_cfg_port[interface][index].sgmii_1000x_mode;
+}
+EXPORT_SYMBOL(cvmx_helper_get_1000x_mode);
+
 int __cvmx_helper_init_port_valid(void)
 {
 #ifndef CVMX_BUILD_FOR_LINUX_KERNEL
 	int i, j, n;
+	bool valid;
 
 	for (i = 0; i < cvmx_helper_get_number_of_interfaces(); i++) {
 		static void *fdt_addr = 0;
@@ -691,10 +739,9 @@ int __cvmx_helper_init_port_valid(void)
 		n = cvmx_helper_interface_enumerate(i);
 		for (j = 0; j < n; j++) {
 			int ipd_port = cvmx_helper_get_ipd_port(i, j);
-			if (__cvmx_helper_board_get_port_from_dt(fdt_addr, ipd_port) == 1)
-				cvmx_helper_set_port_valid(i, j, true);
-			else
-				cvmx_helper_set_port_valid(i, j, false);
+			valid = (__cvmx_helper_board_get_port_from_dt(fdt_addr,
+								      ipd_port) == 1);
+			cvmx_helper_set_port_valid(i, j, valid);
 		}
 	}
 #endif
@@ -819,6 +866,12 @@ int __cvmx_helper_init_port_config_data(void)
 
 		for (port = 0; port < num_ports; port++) {
 			bool init_req = false;
+
+#ifndef CVMX_BUILD_FOR_LINUX_KERNEL
+
+			if (__cvmx_helper_board_get_port_flags(interface, port))
+				continue;
+#endif
 			if (octeon_has_feature(OCTEON_FEATURE_PKND)) {
 				port_base = __cvmx_helper_cfg_pko_port_base(interface, port);
 				if (port_base == CVMX_HELPER_CFG_INVALID_VALUE)
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-ilk.c b/arch/mips/cavium-octeon/executive/cvmx-helper-ilk.c
index 8a417bb..eff5c58 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-ilk.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-ilk.c
@@ -78,6 +78,270 @@ int __cvmx_helper_ilk_enumerate(int interface)
 
 /**
  * @INTERNAL
+ * Initialize all calendar entries to the xoff state. This
+ * means no data is sent or received.
+ *
+ * @param interface Interface whose calendar are to be initialized.
+ */
+void __cvmx_ilk_init_cal(int interface)
+{
+	cvmx_ilk_txx_idx_cal_t	tx_idx;
+	cvmx_ilk_txx_mem_cal0_t tx_cal0;
+	cvmx_ilk_txx_mem_cal1_t tx_cal1;
+	cvmx_ilk_rxx_idx_cal_t	rx_idx;
+	cvmx_ilk_rxx_mem_cal0_t rx_cal0;
+	cvmx_ilk_rxx_mem_cal1_t rx_cal1;
+	int			i;
+
+	/*
+	 * First we initialize the tx calendar starting from entry 0,
+	 * incrementing the entry with every write.
+	 */
+	tx_idx.u64 = 0;
+	tx_idx.s.inc = 1;
+	cvmx_write_csr(CVMX_ILK_TXX_IDX_CAL(interface), tx_idx.u64);
+
+	/* Set state to xoff for all entries */
+	tx_cal0.u64 = 0;
+	tx_cal0.s.entry_ctl0 = XOFF;
+	tx_cal0.s.entry_ctl1 = XOFF;
+	tx_cal0.s.entry_ctl2 = XOFF;
+	tx_cal0.s.entry_ctl3 = XOFF;
+
+	tx_cal1.u64 = 0;
+	tx_cal1.s.entry_ctl4 = XOFF;
+	tx_cal1.s.entry_ctl5 = XOFF;
+	tx_cal1.s.entry_ctl6 = XOFF;
+	tx_cal1.s.entry_ctl7 = XOFF;
+
+	/* Write all 288 entries */
+	for (i = 0; i < CVMX_ILK_MAX_CAL_IDX; i++) {
+		cvmx_write_csr(CVMX_ILK_TXX_MEM_CAL0(interface), tx_cal0.u64);
+		cvmx_write_csr(CVMX_ILK_TXX_MEM_CAL1(interface), tx_cal1.u64);
+	}
+
+	/*
+	 * Next we initialize the rx calendar starting from entry 0,
+	 * incrementing the entry with every write.
+	 */
+	rx_idx.u64 = 0;
+	rx_idx.s.inc = 1;
+	cvmx_write_csr(CVMX_ILK_RXX_IDX_CAL(interface), rx_idx.u64);
+
+	/* Set state to xoff for all entries */
+	rx_cal0.u64 = 0;
+	rx_cal0.s.entry_ctl0 = XOFF;
+	rx_cal0.s.entry_ctl1 = XOFF;
+	rx_cal0.s.entry_ctl2 = XOFF;
+	rx_cal0.s.entry_ctl3 = XOFF;
+
+	rx_cal1.u64 = 0;
+	rx_cal1.s.entry_ctl4 = XOFF;
+	rx_cal1.s.entry_ctl5 = XOFF;
+	rx_cal1.s.entry_ctl6 = XOFF;
+	rx_cal1.s.entry_ctl7 = XOFF;
+
+	/* Write all 288 entries */
+	for (i = 0; i < CVMX_ILK_MAX_CAL_IDX; i++) {
+		cvmx_write_csr(CVMX_ILK_RXX_MEM_CAL0(interface), rx_cal0.u64);
+		cvmx_write_csr(CVMX_ILK_RXX_MEM_CAL1(interface), rx_cal1.u64);
+	}
+}
+
+/**
+ * @INTERNAL
+ * Setup the channel's tx calendar entry.
+ *
+ * @param interface Interface channel belongs to
+ * @param channel Channel whose calendar entry is to be updated
+ * @param bpid Bpid assigned to the channel
+ */
+void __cvmx_ilk_write_tx_cal_entry(int			interface,
+				   int			channel,
+				   unsigned char	bpid)
+{
+	cvmx_ilk_txx_idx_cal_t	tx_idx;
+	cvmx_ilk_txx_mem_cal0_t	tx_cal0;
+	cvmx_ilk_txx_mem_cal1_t	tx_cal1;
+	int			entry;
+	int			window;
+	int			window_entry;
+#if 1
+
+	/*
+	 * The calendar has 288 entries. Each calendar entry represents a
+	 * channel's flow control state or the link flow control state.
+	 * Starting with the first entry, every sixteenth entry is used for the
+	 * link flow control state. The other 15 entries are used for the
+	 * channels flow control state:
+	 * entry 0   ----> link flow control state
+	 * entry 1   ----> channel 0 flow control state
+	 * entry 2   ----> channel 1 flow control state
+	 * ...
+	 * entry 15  ----> channel 14 flow control state
+	 * entry 16  ----> link flow control state
+	 * entry 17  ----> channel 15 flow control state
+	 *
+	 * Also, the calendar is accessed via windows into it. Each window maps
+	 * to 8 entries.
+	 */
+	entry = 1 + channel + (channel / 15);
+	window = entry / 8;
+	window_entry = entry % 8;
+
+	/* Indicate the window we need to access */
+	tx_idx.u64 = 0;
+	tx_idx.s.index = window;
+	cvmx_write_csr(CVMX_ILK_TXX_IDX_CAL(interface), tx_idx.u64);
+
+	/* Get the window's current value */
+	tx_cal0.u64 = cvmx_read_csr(CVMX_ILK_TXX_MEM_CAL0(interface));
+	tx_cal1.u64 = cvmx_read_csr(CVMX_ILK_TXX_MEM_CAL1(interface));
+
+	/* Force every sixteenth entry as link flow control state */
+	if ((window & 1) == 0)
+		tx_cal0.s.entry_ctl0 = LINK;
+
+	/* Update the entry */
+	switch (window_entry) {
+	case 0:
+		tx_cal0.s.entry_ctl0 = 0;
+		tx_cal0.s.bpid0 = bpid;
+		break;
+	case 1:
+		tx_cal0.s.entry_ctl1 = 0;
+		tx_cal0.s.bpid1 = bpid;
+		break;
+	case 2:
+		tx_cal0.s.entry_ctl2 = 0;
+		tx_cal0.s.bpid2 = bpid;
+		break;
+	case 3:
+		tx_cal0.s.entry_ctl3 = 0;
+		tx_cal0.s.bpid3 = bpid;
+		break;
+	case 4:
+		tx_cal1.s.entry_ctl4 = 0;
+		tx_cal1.s.bpid4 = bpid;
+		break;
+	case 5:
+		tx_cal1.s.entry_ctl5 = 0;
+		tx_cal1.s.bpid5 = bpid;
+		break;
+	case 6:
+		tx_cal1.s.entry_ctl6 = 0;
+		tx_cal1.s.bpid6 = bpid;
+		break;
+	case 7:
+		tx_cal1.s.entry_ctl7 = 0;
+		tx_cal1.s.bpid7 = bpid;
+		break;
+	}
+
+	/* Write the window new value */
+	cvmx_write_csr(CVMX_ILK_TXX_MEM_CAL0(interface), tx_cal0.u64);
+	cvmx_write_csr(CVMX_ILK_TXX_MEM_CAL1(interface), tx_cal1.u64);
+#endif
+}
+
+/**
+ * @INTERNAL
+ * Setup the channel's rx calendar entry.
+ *
+ * @param interface Interface channel belongs to
+ * @param channel Channel whose calendar entry is to be updated
+ * @param pipe PKO assigned to the channel
+ */
+void __cvmx_ilk_write_rx_cal_entry(int			interface,
+				   int			channel,
+				   unsigned char	pipe)
+{
+#if 1
+	cvmx_ilk_rxx_idx_cal_t	rx_idx;
+	cvmx_ilk_rxx_mem_cal0_t	rx_cal0;
+	cvmx_ilk_rxx_mem_cal1_t	rx_cal1;
+	int			entry;
+	int			window;
+	int			window_entry;
+
+	/*
+	 * The calendar has 288 entries. Each calendar entry represents a
+	 * channel's flow control state or the link flow control state.
+	 * Starting with the first entry, every sixteenth entry is used for the
+	 * link flow control state. The other 15 entries are used for the
+	 * channels flow control state:
+	 * entry 0   ----> link flow control state
+	 * entry 1   ----> channel 0 flow control state
+	 * entry 2   ----> channel 1 flow control state
+	 * ...
+	 * entry 15  ----> channel 14 flow control state
+	 * entry 16  ----> link flow control state
+	 * entry 17  ----> channel 15 flow control state
+	 *
+	 * Also, the calendar is accessed via windows into it. Each window maps
+	 * to 8 entries.
+	 */
+	entry = 1 + channel + (channel / 15);
+	window = entry / 8;
+	window_entry = entry % 8;
+
+	/* Indicate the window we need to access */
+	rx_idx.u64 = 0;
+	rx_idx.s.index = window;
+	cvmx_write_csr(CVMX_ILK_RXX_IDX_CAL(interface), rx_idx.u64);
+
+	/* Get the window's current value */
+	rx_cal0.u64 = cvmx_read_csr(CVMX_ILK_RXX_MEM_CAL0(interface));
+	rx_cal1.u64 = cvmx_read_csr(CVMX_ILK_RXX_MEM_CAL1(interface));
+
+	/* Force every sixteenth entry as link flow control state */
+	if ((window & 1) == 0)
+		rx_cal0.s.entry_ctl0 = LINK;
+
+	/* Update the entry */
+	switch (window_entry) {
+	case 0:
+		rx_cal0.s.entry_ctl0 = 0;
+		rx_cal0.s.port_pipe0 = pipe;
+		break;
+	case 1:
+		rx_cal0.s.entry_ctl1 = 0;
+		rx_cal0.s.port_pipe1 = pipe;
+		break;
+	case 2:
+		rx_cal0.s.entry_ctl2 = 0;
+		rx_cal0.s.port_pipe2 = pipe;
+		break;
+	case 3:
+		rx_cal0.s.entry_ctl3 = 0;
+		rx_cal0.s.port_pipe3 = pipe;
+		break;
+	case 4:
+		rx_cal1.s.entry_ctl4 = 0;
+		rx_cal1.s.port_pipe4 = pipe;
+		break;
+	case 5:
+		rx_cal1.s.entry_ctl5 = 0;
+		rx_cal1.s.port_pipe5 = pipe;
+		break;
+	case 6:
+		rx_cal1.s.entry_ctl6 = 0;
+		rx_cal1.s.port_pipe6 = pipe;
+		break;
+	case 7:
+		rx_cal1.s.entry_ctl7 = 0;
+		rx_cal1.s.port_pipe7 = pipe;
+		break;
+	}
+
+	/* Write the window new value */
+	cvmx_write_csr(CVMX_ILK_RXX_MEM_CAL0(interface), rx_cal0.u64);
+	cvmx_write_csr(CVMX_ILK_RXX_MEM_CAL1(interface), rx_cal1.u64);
+#endif
+}
+
+/**
+ * @INTERNAL
  * Probe a ILK interface and determine the number of ports
  * connected to it. The ILK interface should still be down
  * after this call.
@@ -114,7 +378,7 @@ int __cvmx_helper_ilk_probe(int interface)
 
 static int __cvmx_helper_ilk_init_port(int interface)
 {
-	int i, j, num_pknd, res = -1;
+	int i, j, res = -1;
 	static int pipe_base = 0, pknd_base = 0;
 	static cvmx_ilk_pipe_chan_t *pch = NULL, *tmp;
 	static cvmx_ilk_chan_pknd_t *chpknd = NULL, *tmp1;
@@ -203,8 +467,7 @@ static int __cvmx_helper_ilk_init_port(int interface)
 		tmp1++;
 	}
 
-	num_pknd = cvmx_ilk_chans[interface];
-	res = cvmx_ilk_rx_set_pknd(interface, chpknd, num_pknd);
+	res = cvmx_ilk_rx_set_pknd(interface, chpknd, cvmx_ilk_chans[interface]);
 	if (res < 0) {
 		pipe_base -= cvmx_ilk_chans[interface];
 		res = 0;
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-sgmii.c b/arch/mips/cavium-octeon/executive/cvmx-helper-sgmii.c
index c747423..2a45fe4 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-sgmii.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-sgmii.c
@@ -43,7 +43,7 @@
  * Functions for SGMII initialization, configuration,
  * and monitoring.
  *
- * <hr>$Revision: 84582 $<hr>
+ * <hr>$Revision: 86446 $<hr>
  */
 #ifdef CVMX_BUILD_FOR_LINUX_KERNEL
 #include <asm/octeon/cvmx.h>
@@ -91,26 +91,21 @@ static int __cvmx_helper_sgmii_hardware_init_one_time(int interface, int index)
 	gmxx_prtx_cfg.s.en = 0;
 	cvmx_write_csr(CVMX_GMXX_PRTX_CFG(index, interface), gmxx_prtx_cfg.u64);
 
-#if 0
-	/* This really should be called here but it doesn't work for some reason
-	 */
-	/* The Cortina PHY runs in 1000base-X mode */
-	if (cvmx_sysinfo_get()->board_type == CVMX_BOARD_TYPE_NIC68_4) {
-		union cvmx_pcsx_miscx_ctl_reg pcsx_miscx_ctl_reg;
-
-		pcsx_miscx_ctl_reg.u64 =
-			 cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface));
-		pcsx_miscx_ctl_reg.s.mode = 1;
-		cvmx_write_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface),
-			       pcsx_miscx_ctl_reg.u64);
-	}
-#endif
 	/*
 	 * Write PCS*_LINK*_TIMER_COUNT_REG[COUNT] with the
 	 * appropriate value. 1000BASE-X specifies a 10ms
 	 * interval. SGMII specifies a 1.6ms interval.
 	 */
-	pcsx_miscx_ctl_reg.u64 = cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface));
+	pcsx_miscx_ctl_reg.u64 = cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG(index,
+								       interface));
+	/* Adjust the MAC mode if requested by device tree */
+	pcsx_miscx_ctl_reg.s.mac_phy =
+		cvmx_helper_get_mac_phy_mode(interface, index);
+	pcsx_miscx_ctl_reg.s.mode =
+		cvmx_helper_get_1000x_mode(interface, index);
+	cvmx_write_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface),
+		       pcsx_miscx_ctl_reg.u64);
+
 	pcsx_linkx_timer_count_reg.u64 = cvmx_read_csr(CVMX_PCSX_LINKX_TIMER_COUNT_REG(index, interface));
 	if (pcsx_miscx_ctl_reg.s.mode)
 		/* 1000BASE-X */
@@ -142,19 +137,6 @@ static int __cvmx_helper_sgmii_hardware_init_one_time(int interface, int index)
 		cvmx_write_csr(CVMX_PCSX_ANX_ADV_REG(index, interface),
 			       pcsx_anx_adv_reg.u64);
 	} else {
-#ifdef CVMX_HELPER_CONFIG_NO_PHY
-		/*
-		 * If the interface does not have PHY, then set
-		 * explicitly in PHY mode so that link will be set
-		 * during auto negotiation.
-		 */
-		if (!pcsx_miscx_ctl_reg.s.mac_phy) {
-			cvmx_dprintf("SGMII%d%d: Forcing PHY mode as PHY address is not set\n",
-				     interface, index);
-			pcsx_miscx_ctl_reg.s.mac_phy = 1;
-			cvmx_write_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface), pcsx_miscx_ctl_reg.u64);
-		}
-#endif
 		if (pcsx_miscx_ctl_reg.s.mac_phy) {
 			/* PHY Mode */
 			union cvmx_pcsx_sgmx_an_adv_reg pcsx_sgmx_an_adv_reg;
@@ -196,9 +178,13 @@ static int __cvmx_helper_need_g15618(void)
 static int __cvmx_helper_sgmii_hardware_init_link(int interface, int index)
 {
 	union cvmx_pcsx_mrx_control_reg control_reg;
+	union cvmx_pcsx_miscx_ctl_reg pcsx_miscx_ctl_reg;
+	bool phy_mode;
+	bool mode_1000x;
 
 	if (!cvmx_helper_is_port_valid(interface, index))
 		return 0;
+
 	/*
 	 * Take PCS through a reset sequence.
 	 * PCS*_MR*_CONTROL_REG[PWR_DN] should be cleared to zero.
@@ -232,15 +218,19 @@ static int __cvmx_helper_sgmii_hardware_init_link(int interface, int index)
 		       control_reg.u64);
 
 	/* The Cortina PHY runs in 1000base-X mode */
-	if (cvmx_sysinfo_get()->board_type == CVMX_BOARD_TYPE_NIC68_4) {
-		union cvmx_pcsx_miscx_ctl_reg pcsx_miscx_ctl_reg;
+	phy_mode = cvmx_helper_get_mac_phy_mode(interface, index);
+	mode_1000x = cvmx_helper_get_1000x_mode(interface, index);
+	pcsx_miscx_ctl_reg.u64 =
+		cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface));
+	pcsx_miscx_ctl_reg.s.mode = mode_1000x;
+	pcsx_miscx_ctl_reg.s.mac_phy = phy_mode;
+	cvmx_write_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface), pcsx_miscx_ctl_reg.u64);
+	if (phy_mode)
+		/* In PHY mode we can't query the link status so we just
+		 * assume that the link is up.
+		 */
+		return 0;
 
-		pcsx_miscx_ctl_reg.u64 =
-			 cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface));
-		pcsx_miscx_ctl_reg.s.mode = 1;
-		cvmx_write_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface),
-			       pcsx_miscx_ctl_reg.u64);
-	}
 	/*
 	 * Wait for PCS*_MR*_STATUS_REG[AN_CPT] to be set, indicating
 	 * that sgmii autonegotiation is complete. In MAC mode this
@@ -251,7 +241,7 @@ static int __cvmx_helper_sgmii_hardware_init_link(int interface, int index)
 	    CVMX_WAIT_FOR_FIELD64(CVMX_PCSX_MRX_STATUS_REG(index, interface),
 				  union cvmx_pcsx_mrx_status_reg, an_cpt, ==, 1,
 				  10000)) {
-		/* cvmx_dprintf("SGMII%d: Port %d link timeout\n", interface, index); */
+		cvmx_dprintf("SGMII%d: Port %d link timeout\n", interface, index);
 		return -1;
 	}
 	return 0;
@@ -434,7 +424,7 @@ static int __cvmx_helper_sgmii_hardware_init(int interface, int num_ports)
 #endif
 		if (do_link_set)
 			__cvmx_helper_sgmii_link_set(ipd_port,
-						     __cvmx_helper_sgmii_link_get(ipd_port));
+					__cvmx_helper_sgmii_link_get(ipd_port));
 	}
 
 	return 0;
@@ -556,7 +546,7 @@ int __cvmx_helper_sgmii_enable(int interface)
 		union cvmx_gmxx_qsgmii_ctl qsgmii_ctl;
 		qsgmii_ctl.u64 = 0;
 		qsgmii_ctl.s.disparity = 1;
-		cvmx_write_csr(CVMX_GMXX_QSGMII_CTL(interface), qsgmii_ctl.u64);	
+		cvmx_write_csr(CVMX_GMXX_QSGMII_CTL(interface), qsgmii_ctl.u64);
 	}
 
 	for (index = 0; index < num_ports; index++) {
@@ -600,7 +590,6 @@ cvmx_helper_link_info_t __cvmx_helper_sgmii_link_get(int ipd_port)
 	int interface = cvmx_helper_get_interface_num(ipd_port);
 	int index = cvmx_helper_get_interface_index_num(ipd_port);
 	union cvmx_pcsx_mrx_control_reg pcsx_mrx_control_reg;
-	union cvmx_pcsx_mrx_status_reg pcsx_mrx_status_reg;
 	int speed = 1000;
 	int qlm;
 
@@ -640,53 +629,16 @@ cvmx_helper_link_info_t __cvmx_helper_sgmii_link_get(int ipd_port)
 		return result;
 	}
 
-	pcsx_miscx_ctl_reg.u64 = cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface));
+	pcsx_miscx_ctl_reg.u64 =
+		cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface));
 	if (pcsx_miscx_ctl_reg.s.mac_phy) {
 		/* PHY Mode */
 		/* Note that this also works for 1000base-X mode */
-		union cvmx_pcsx_anx_results_reg pcsx_anx_results_reg;
 
-		/*
-		 * Don't bother continuing if the SERTES low
-		 * level link is down.
-		 */
-		pcsx_mrx_status_reg.u64 = cvmx_read_csr(CVMX_PCSX_MRX_STATUS_REG(index, interface));
-		if (pcsx_mrx_status_reg.s.lnk_st == 0)
-			if (__cvmx_helper_sgmii_hardware_init_link(interface, index) != 0)
-				return result;
-
-		/* Read the autoneg results */
-		pcsx_anx_results_reg.u64 = cvmx_read_csr(CVMX_PCSX_ANX_RESULTS_REG(index, interface));
-		if (pcsx_anx_results_reg.s.an_cpt) {
-			/*
-			 * Auto negotiation is complete. Set
-			 * status accordingly.
-			 */
-			result.s.full_duplex = pcsx_anx_results_reg.s.dup;
-			result.s.link_up = pcsx_anx_results_reg.s.link_ok;
-			switch (pcsx_anx_results_reg.s.spd) {
-			case 0:
-				result.s.speed = speed / 100;
-				break;
-			case 1:
-				result.s.speed = speed / 10;
-				break;
-			case 2:
-				result.s.speed = speed;
-				break;
-			default:
-				result.s.speed = 0;
-				result.s.link_up = 0;
-				break;
-			}
-		} else {
-			/*
-			 * Auto negotiation isn't
-			 * complete. Return link down.
-			 */
-			result.s.speed = 0;
-			result.s.link_up = 0;
-		}
+		result.s.speed = speed;
+		result.s.full_duplex = 1;
+		result.s.link_up = 1;
+		return result;
 	} else {
 		/* MAC Mode */
 		result = __cvmx_helper_board_link_get(ipd_port);
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-util.c b/arch/mips/cavium-octeon/executive/cvmx-helper-util.c
index bc0277e..04957d4 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-util.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-util.c
@@ -78,6 +78,77 @@
 #endif
 
 
+/**
+ * @INTERNAL
+ * These are the interface types needed to convert interface numbers to ipd
+ * ports.
+ *
+ * @param GMII
+ *	This type is used for sgmii, rgmii, xaui and rxaui interfaces.
+ * @param ILK
+ *	This type is used for ilk interfaces.
+ * @param NPI
+ *	This type is used for npi interfaces.
+ * @param LB
+ *	This type is used for loopback interfaces.
+ */
+typedef enum {
+	GMII,
+	ILK,
+	NPI,
+	LB
+} port_map_if_type_t;
+
+/**
+ * @INTERNAL
+ * This structure is used to map interface numbers to ipd ports.
+ *
+ * @param type
+ *	Interface type
+ * @param first_ipd_port
+ *	First IPD port number assigned to this interface.
+ * @param last_ipd_port
+ *	Last IPD port number assigned to this interface.
+ */
+struct ipd_port_map {
+	port_map_if_type_t	type;
+	int			first_ipd_port;
+	int			last_ipd_port;
+};
+
+/**
+ * @INTERNAL
+ * Interface number to ipd port map for the octeon 68xx.
+ */
+static const struct ipd_port_map ipd_port_map_68xx[CVMX_HELPER_MAX_IFACE] = {
+	{GMII,	0x800,	0x8ff},		/* Interface 0 */
+	{GMII,	0x900,	0x9ff},		/* Interface 1 */
+	{GMII,	0xa00,	0xaff},		/* Interface 2 */
+	{GMII,	0xb00,	0xbff},		/* Interface 3 */
+	{GMII,	0xc00,	0xcff},		/* Interface 4 */
+	{ILK,	0x400,	0x4ff},		/* Interface 5 */
+	{ILK,	0x500,	0x5ff},		/* Interface 6 */
+	{NPI,	0x100,	0x120},		/* Interface 7 */
+	{LB,	0x000,	0x008},		/* Interface 8 */
+};
+
+/**
+ * @INTERNAL
+ * Interface number to ipd port map for the octeon 78xx.
+ */
+static const struct ipd_port_map ipd_port_map_78xx[CVMX_HELPER_MAX_IFACE] = {
+	{GMII,	0x800,	0x8ff},		/* Interface 0 */
+	{GMII,	0x900,	0x9ff},		/* Interface 1 */
+	{GMII,	0xa00,	0xaff},		/* Interface 2 */
+	{GMII,	0xb00,	0xbff},		/* Interface 3 */
+	{GMII,	0xc00,	0xcff},		/* Interface 4 */
+	{GMII,	0xd00,	0xdff},		/* Interface 5 */
+	{ILK,	0x400,	0x4ff},		/* Interface 6 */
+	{ILK,	0x500,	0x5ff},		/* Interface 7 */
+	{NPI,	0x100,	0x120},		/* Interface 8 */
+	{LB,	0x000,	0x008},		/* Interface 9 */
+};
+
 struct cvmx_iface {
 	int cvif_ipd_nports;
 	int cvif_has_fcs;	/* PKO fcs for this interface. */
@@ -91,11 +162,6 @@ struct cvmx_iface {
  */
 static CVMX_SHARED struct cvmx_iface cvmx_interfaces[CVMX_HELPER_MAX_IFACE];
 
-CVMX_SHARED bool __cvmx_helper_port_invalid[CVMX_HELPER_MAX_IFACE][CVMX_HELPER_MAX_PORTS] = {[0 ... (CVMX_HELPER_MAX_IFACE - 1)] = {[0 ... (CVMX_HELPER_MAX_PORTS - 1)] = 1}};
-#ifdef CVMX_BUILD_FOR_LINUX_KERNEL
-EXPORT_SYMBOL(__cvmx_helper_port_invalid);
-#endif
-
 #ifndef CVMX_BUILD_FOR_LINUX_KERNEL
 /**
  * Get the version of the CVMX libraries.
@@ -496,11 +562,13 @@ int __cvmx_helper_setup_gmx(int interface, int num_ports)
 	 * Tell GMX the number of RX ports on this interface.  This only applies
 	 * to *GMII and XAUI ports.
 	 */
-	if (cvmx_helper_interface_get_mode(interface) == CVMX_HELPER_INTERFACE_MODE_RGMII ||
-	    cvmx_helper_interface_get_mode(interface) == CVMX_HELPER_INTERFACE_MODE_SGMII ||
-	    cvmx_helper_interface_get_mode(interface) == CVMX_HELPER_INTERFACE_MODE_GMII ||
-	    cvmx_helper_interface_get_mode(interface) == CVMX_HELPER_INTERFACE_MODE_XAUI ||
-	    cvmx_helper_interface_get_mode(interface) == CVMX_HELPER_INTERFACE_MODE_RXAUI) {
+	switch (cvmx_helper_interface_get_mode(interface)) {
+	case CVMX_HELPER_INTERFACE_MODE_RGMII:
+	case CVMX_HELPER_INTERFACE_MODE_SGMII:
+	case CVMX_HELPER_INTERFACE_MODE_QSGMII:
+	case CVMX_HELPER_INTERFACE_MODE_GMII:
+	case CVMX_HELPER_INTERFACE_MODE_XAUI:
+	case CVMX_HELPER_INTERFACE_MODE_RXAUI:
 		if (num_ports > 4) {
 			cvmx_dprintf("__cvmx_helper_setup_gmx: Illegal num_ports\n");
 			return -1;
@@ -509,6 +577,10 @@ int __cvmx_helper_setup_gmx(int interface, int num_ports)
 		gmx_rx_prts.u64 = cvmx_read_csr(CVMX_GMXX_RX_PRTS(interface));
 		gmx_rx_prts.s.prts = num_ports;
 		cvmx_write_csr(CVMX_GMXX_RX_PRTS(interface), gmx_rx_prts.u64);
+		break;
+
+	default:
+		break;
 	}
 
 	/*
@@ -611,21 +683,34 @@ EXPORT_SYMBOL(cvmx_helper_get_pko_port);
 int cvmx_helper_get_ipd_port(int interface, int port)
 {
 	if (octeon_has_feature(OCTEON_FEATURE_PKND)) {
-		if (interface >= 0 && interface <= 4) {
-			cvmx_helper_interface_mode_t mode = cvmx_helper_interface_get_mode(interface);
+		const struct ipd_port_map	*port_map;
+		int				ipd_port;
+
+		if (OCTEON_IS_MODEL(OCTEON_CN68XX))
+			port_map = ipd_port_map_68xx;
+		else if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			port_map = ipd_port_map_78xx;
+		else
+			return -1;
+
+		ipd_port = port_map[interface].first_ipd_port;
+		if (port_map[interface].type == GMII) {
+			cvmx_helper_interface_mode_t mode =
+				cvmx_helper_interface_get_mode(interface);
 			if (mode == CVMX_HELPER_INTERFACE_MODE_XAUI ||
 			    mode == CVMX_HELPER_INTERFACE_MODE_RXAUI)
-				return 0x840 + (interface * 0x100);
+				return ipd_port + 0x40;
 			else
-				return 0x800 + (interface * 0x100) + (port * 16);
-		} else if (interface == 5 || interface == 6)
-			return 0x400 + (interface - 5) * 0x100 + port;
-		else if (interface == 7)
-			return 0x100 + port;
-		else if (interface == 8)
-			return port;
+				return ipd_port + (port * 16);
+		} else if (port_map[interface].type == ILK)
+			return ipd_port + port;
+		else if (port_map[interface].type == NPI)
+			return ipd_port + port;
+		else if (port_map[interface].type == LB)
+			return ipd_port + port;
 		else
 			return -1;
+
 	} else if (cvmx_helper_interface_get_mode(interface) ==
 			CVMX_HELPER_INTERFACE_MODE_AGL) {
 		return 24;
@@ -865,24 +950,24 @@ void cvmx_helper_show_stats(int port)
 int cvmx_helper_get_interface_num(int ipd_port)
 {
 	if (octeon_has_feature(OCTEON_FEATURE_PKND)) {
-		if (ipd_port >= 0x800 && ipd_port < 0x900)
-			return 0;
-		else if (ipd_port >= 0x900 && ipd_port < 0xa00)
-			return 1;
-		else if (ipd_port >= 0xa00 && ipd_port < 0xb00)
-			return 2;
-		else if (ipd_port >= 0xb00 && ipd_port < 0xc00)
-			return 3;
-		else if (ipd_port >= 0xc00 && ipd_port < 0xd00)
-			return 4;
-		else if (ipd_port >= 0x400 && ipd_port < 0x500)
-			return 5;
-		else if (ipd_port >= 0x500 && ipd_port < 0x600)
-			return 6;
-		else if (ipd_port >= 0x100 && ipd_port < 0x120)
-			return 7;
-		else if (ipd_port < 8)
-			return 8;
+		const struct ipd_port_map	*port_map;
+		int				i;
+
+		if (OCTEON_IS_MODEL(OCTEON_CN68XX))
+			port_map = ipd_port_map_68xx;
+		else if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			port_map = ipd_port_map_78xx;
+		else
+			return -1;
+
+		for (i = 0; i < CVMX_HELPER_MAX_IFACE; i++) {
+			if (ipd_port >= port_map[i].first_ipd_port &&
+			    ipd_port <= port_map[i].last_ipd_port)
+				return i;
+		}
+
+		return -1;
+
 	} else if (OCTEON_IS_MODEL(OCTEON_CN70XX) && ipd_port == 24) {
 		return 4;
 	} else {
@@ -948,23 +1033,3 @@ int cvmx_helper_get_interface_index_num(int ipd_port)
 	return -1;
 }
 EXPORT_SYMBOL(cvmx_helper_get_interface_index_num);
-
-/**
- * Returns if port is valid for a given interface
- *
- * @param interface  interface to check
- * @param index      port index in the interface
- *
- * @return status of the port present or not.
- */
-int cvmx_helper_is_port_valid(int interface, int index)
-{
-	return  !__cvmx_helper_port_invalid[interface][index];
-}
-EXPORT_SYMBOL(cvmx_helper_is_port_valid);
-
-void cvmx_helper_set_port_valid(int interface, int index, bool valid)
-{
-	__cvmx_helper_port_invalid[interface][index] = !valid;
-}
-EXPORT_SYMBOL(cvmx_helper_set_port_valid);
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper.c b/arch/mips/cavium-octeon/executive/cvmx-helper.c
index 2239409..d100d39 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper.c
@@ -118,6 +118,17 @@ CVMX_SHARED void (*cvmx_override_pko_queue_priority) (int ipd_port, uint64_t *pr
 EXPORT_SYMBOL(cvmx_override_pko_queue_priority);
 
 /**
+ * cvmx_override_iface_phy_mode(int interface, int index) is a function pointer.
+ * It is meant to allow customization of interfaces which do not have a PHY.
+ *
+ * @returns 0 if MAC decides TX_CONFIG_REG or 1 if PHY decides  TX_CONFIG_REG.
+ *
+ * If this function pointer is NULL then it defaults to the MAC.
+ */
+CVMX_SHARED int (*cvmx_override_iface_phy_mode) (int interface, int index);
+EXPORT_SYMBOL(cvmx_override_iface_phy_mode);
+
+/**
  * cvmx_override_ipd_port_setup(int ipd_port) is a function
  * pointer. It is meant to allow customization of the IPD
  * port/port kind setup before packet input/output comes online.
@@ -155,7 +166,7 @@ int cvmx_helper_get_number_of_interfaces(void)
 	else if (OCTEON_IS_MODEL(OCTEON_CN70XX))
 		return 5;
 	else if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-		return 9;
+		return 10;
 	else
 		return 3;
 }
@@ -216,11 +227,11 @@ static cvmx_helper_interface_mode_t __cvmx_get_mode_cn70xx(int interface)
 		inf_mode.u64 = cvmx_read_csr(CVMX_GMXX_INF_MODE(interface));
 
 		switch(inf_mode.s.mode) {
-		case 1:	
+		case 1:
 			return CVMX_HELPER_INTERFACE_MODE_SGMII;
-		case 2:	
+		case 2:
 			return CVMX_HELPER_INTERFACE_MODE_QSGMII;
-		case 3:	
+		case 3:
 			return CVMX_HELPER_INTERFACE_MODE_RXAUI;
 		default:
 			return CVMX_HELPER_INTERFACE_MODE_DISABLED;
@@ -251,16 +262,17 @@ static cvmx_helper_interface_mode_t __cvmx_get_mode_cn78xx(int interface)
 	case 2:
 	case 3:
 	case 4:
+	case 5:
 		return CVMX_HELPER_INTERFACE_MODE_DISABLED;
 
-	case 5:
 	case 6:
+	case 7:
 		return CVMX_HELPER_INTERFACE_MODE_ILK;
 
-	case 7:
+	case 8:
 		return CVMX_HELPER_INTERFACE_MODE_DISABLED;
 
-	case 8:
+	case 9:
 		return CVMX_HELPER_INTERFACE_MODE_LOOP;
 
 	default:
@@ -1190,6 +1202,8 @@ int __cvmx_helper_backpressure_is_misaligned(void)
  * aren't sent out partially setup hardware.
  *
  * @param interface Interface to enable
+ * @param iflags Interface flags
+ * @param pflags Array of flags, one per port on the interface
  *
  * @return Zero on success, negative on failure
  */
@@ -1261,6 +1275,7 @@ int cvmx_helper_ipd_and_packet_input_enable(void)
 {
 	int num_interfaces;
 	int interface;
+	int num_ports;
 
 	/* Enable IPD */
 	cvmx_ipd_enable();
@@ -1272,7 +1287,8 @@ int cvmx_helper_ipd_and_packet_input_enable(void)
 	 */
 	num_interfaces = cvmx_helper_get_number_of_interfaces();
 	for (interface = 0; interface < num_interfaces; interface++) {
-		if (cvmx_helper_ports_on_interface(interface) > 0)
+		num_ports = cvmx_helper_ports_on_interface(interface);
+		if (num_ports > 0)
 			__cvmx_helper_packet_hardware_enable(interface);
 	}
 
@@ -1304,10 +1320,10 @@ int cvmx_initialize_sso_78xx(void)
 	cvmx_sso_nw_tim_t nw_tim;
 	cvmx_sso_aw_cfg_t aw_cfg;
 
-	cvmx_fpa_pool_stack_init(node, SSO_POOL_NUM, 0, MAX_SSO_ENTRIES,
-				 FPA_NATURAL_ALIGNMENT, 4096);
+	cvmx_fpa_pool_stack_init(node, SSO_POOL_NUM, "SSO Pool", 0,
+			MAX_SSO_ENTRIES, FPA_NATURAL_ALIGNMENT, 4096);
 	cvmx_fpa_assign_aura(node, SSO_AURA_NUM, SSO_POOL_NUM);
-	cvmx_fpa_aura_init(node, aura, 0, num_blocks, 0);
+	cvmx_fpa_aura_init(node, aura, "SSO Aura", 0, num_blocks, 0);
 
 	/* Initialize the 256 group/qos queues */
 	for (grp=0; grp<256; grp++)
diff --git a/arch/mips/cavium-octeon/executive/cvmx-ilk.c b/arch/mips/cavium-octeon/executive/cvmx-ilk.c
index 7f9348c..ae85e7c 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-ilk.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-ilk.c
@@ -54,6 +54,7 @@
 #include <asm/octeon/cvmx-ilk-defs.h>
 #include <asm/octeon/cvmx-helper-util.h>
 #include <asm/octeon/cvmx-helper-ilk.h>
+#include <asm/octeon/cvmx-gserx-defs.h>
 #include <asm/octeon/cvmx-pip-defs.h>
 #else
 #include "cvmx.h"
@@ -91,7 +92,7 @@ CVMX_SHARED cvmx_ilk_LA_mode_t cvmx_ilk_LA_mode[CVMX_NUM_ILK_INTF] = {{0, 0},
 
 void cvmx_ilk_config_set_LA_mode(int interface, int mode)
 {
-	if(interface > CVMX_NUM_ILK_INTF || interface < 0)
+	if(interface >= CVMX_NUM_ILK_INTF || interface < 0)
 		cvmx_dprintf("ERROR: Invalid interface=%d in cvmx_ilk_config_set_LA_mode\n",
 			     interface);
 	else
@@ -100,7 +101,7 @@ void cvmx_ilk_config_set_LA_mode(int interface, int mode)
 
 void cvmx_ilk_config_set_LA_mode_cal(int interface, int mode)
 {
-	if(interface > CVMX_NUM_ILK_INTF || interface < 0)
+	if(interface >= CVMX_NUM_ILK_INTF || interface < 0)
 		cvmx_dprintf("ERROR: Invalid interface=%d in cvmx_ilk_config_set_LA_mode_cal\n",
 			     interface);
 	else
@@ -109,7 +110,7 @@ void cvmx_ilk_config_set_LA_mode_cal(int interface, int mode)
 
 void cvmx_ilk_config_set_lane_mask(int interface, unsigned char mask)
 {
-	if(interface > CVMX_NUM_ILK_INTF || interface < 0)
+	if(interface >= CVMX_NUM_ILK_INTF || interface < 0)
 		cvmx_dprintf("ERROR: Invalid interface=%d in cvmx_ilk_set_lane_mask\n",
 			     interface);
 	else
@@ -118,7 +119,7 @@ void cvmx_ilk_config_set_lane_mask(int interface, unsigned char mask)
 
 void cvmx_ilk_config_set_max_channels(int interface, unsigned char channels)
 {
-	if(interface > CVMX_NUM_ILK_INTF || interface < 0) {
+	if(interface >= CVMX_NUM_ILK_INTF || interface < 0) {
 		cvmx_dprintf("ERROR: Invalid interface=%d in cvmx_ilk_config_set_max_channels\n",
 			     interface);
 		return;
@@ -249,8 +250,11 @@ int cvmx_ilk_start_interface(int interface, unsigned short lane_mask)
 		}
 	}
 	if (OCTEON_IS_MODEL(OCTEON_CN78XX)) {
-		uint8_t qlm, i;
-		cvmx_mio_qlmx_cfg_t mio_qlmx_cfg[4];
+		uint8_t 		qlm, i;
+		cvmx_mio_qlmx_cfg_t 	mio_qlmx_cfg[4];
+		cvmx_gserx_cfg_t	cvmx_gserx_cfg;
+		cvmx_gserx_phy_ctl_t	cvmx_gserx_phy_ctl;
+
 		for (i = 0, qlm = CVMX_ILK_QLM_BASE(); i < 4; i++, qlm++)
 			mio_qlmx_cfg[i].u64 = cvmx_read_csr(CVMX_MIO_QLMX_CFG(qlm));
 
@@ -279,6 +283,25 @@ int cvmx_ilk_start_interface(int interface, unsigned short lane_mask)
 				return res;
 			} 
 		}
+
+		/*
+		 * Configure the GSER.
+		 * For now, we configured the minimum needed to work with the
+		 * simulator. TODO
+		 */
+		qlm = CVMX_ILK_QLM_BASE() + interface;
+		cvmx_gserx_phy_ctl.u64 = cvmx_read_csr(CVMX_GSERX_PHY_CTL(qlm));
+		cvmx_gserx_phy_ctl.s.phy_pd = 0;
+		cvmx_gserx_phy_ctl.s.phy_reset = 1;
+		cvmx_write_csr(CVMX_GSERX_PHY_CTL(qlm), cvmx_gserx_phy_ctl.u64);
+
+		cvmx_gserx_cfg.u64 = cvmx_read_csr(CVMX_GSERX_CFG(qlm));
+		cvmx_gserx_cfg.s.ila = 1;
+		cvmx_write_csr(CVMX_GSERX_CFG(qlm), cvmx_gserx_cfg.u64);
+
+		cvmx_gserx_phy_ctl.u64 = cvmx_read_csr(CVMX_GSERX_PHY_CTL(qlm));
+		cvmx_gserx_phy_ctl.s.phy_reset = 0;
+		cvmx_write_csr(CVMX_GSERX_PHY_CTL(qlm), cvmx_gserx_phy_ctl.u64);
 	}
 
 	/* power up the serdes */
@@ -339,6 +362,9 @@ int cvmx_ilk_start_interface(int interface, unsigned short lane_mask)
 		}
 	}
 
+	/* Initialize all calendar entries to xoff state */
+	__cvmx_ilk_init_cal(interface);
+
 	/* Enable ILK LA mode if configured. */
 	if (OCTEON_IS_MODEL(OCTEON_CN68XX)) {
 		if (cvmx_ilk_use_la_mode(interface, 0)) {
@@ -532,12 +558,9 @@ int cvmx_ilk_rx_set_pknd(int interface, cvmx_ilk_chan_pknd_t * chpknd, unsigned
  */
 int cvmx_ilk_rx_cal_conf(int interface, int cal_depth, cvmx_ilk_cal_entry_t * pent)
 {
-	int res = -1, num_grp, num_rest, i, j;
+	int res = -1, i;
 	cvmx_ilk_rxx_cfg0_t ilk_rxx_cfg0;
-	cvmx_ilk_rxx_idx_cal_t ilk_rxx_idx_cal;
-	cvmx_ilk_rxx_mem_cal0_t ilk_rxx_mem_cal0;
-	cvmx_ilk_rxx_mem_cal1_t ilk_rxx_mem_cal1;
-	unsigned long int tmp;
+	int num_entries;
 
 	if (!(OCTEON_IS_MODEL(OCTEON_CN68XX)) &&
 	    !(OCTEON_IS_MODEL(OCTEON_CN78XX)))
@@ -557,132 +580,29 @@ int cvmx_ilk_rx_cal_conf(int interface, int cal_depth, cvmx_ilk_cal_entry_t * pe
 			pent->ent_ctrl = LINK;
 #endif
 
-	/* set the depth */
 	if (OCTEON_IS_MODEL(OCTEON_CN68XX)) {
+		/* Update the calendar for each channel */
+		if ((cvmx_ilk_use_la_mode(interface, 0) == 0) ||
+		    (cvmx_ilk_use_la_mode(interface, 0) && 
+		     cvmx_ilk_la_mode_enable_rx_calendar(interface))) {
+			for (i = 0; i < cal_depth; i++) {
+				__cvmx_ilk_write_rx_cal_entry(interface, i,
+							     pent[i].pipe_bpid);
+			}
+		}
+
+		/* Update the depth */
 		ilk_rxx_cfg0.u64 = cvmx_read_csr(CVMX_ILK_RXX_CFG0(interface));
+		num_entries = 1 + cal_depth + (cal_depth - 1) / 15;
+		ilk_rxx_cfg0.s.cal_depth = num_entries;
 		if (cvmx_ilk_use_la_mode(interface, 0)) {
 			ilk_rxx_cfg0.s.mproto_ign = 1;
 			ilk_rxx_cfg0.s.lnk_stats_ena = 1;
 			ilk_rxx_cfg0.s.lnk_stats_wrap = 1;
-			if (cvmx_ilk_la_mode_enable_rx_calendar(interface)) {
-				ilk_rxx_cfg0.s.cal_depth = cvmx_ilk_use_la_mode(interface, 1) ? 2 : 1;
-				ilk_rxx_cfg0.s.cal_ena = 1;
-			} else {
-				ilk_rxx_cfg0.s.cal_depth = 0;
-				ilk_rxx_cfg0.s.cal_ena = 0;
-			}
-		} else
-			ilk_rxx_cfg0.s.cal_depth = cal_depth;
-	
-		cvmx_write_csr(CVMX_ILK_RXX_CFG0(interface), ilk_rxx_cfg0.u64);
-	
-		/* set the calendar index */
-		num_grp = cal_depth / CVMX_ILK_CAL_GRP_SZ;
-		num_rest = cal_depth % CVMX_ILK_CAL_GRP_SZ;
-		ilk_rxx_idx_cal.u64 = 0;
-		ilk_rxx_idx_cal.s.inc = 1;
-		cvmx_write_csr(CVMX_ILK_RXX_IDX_CAL(interface), ilk_rxx_idx_cal.u64);
-	
-		/* Note that calendar support is somewhat broken through pass 2.0 */
-		if (cvmx_ilk_use_la_mode(interface, 0)) {
-			ilk_rxx_mem_cal0.u64 = 0;
-			ilk_rxx_mem_cal1.u64 = 0;
-	
-			if (cvmx_ilk_la_mode_enable_rx_calendar(interface)) {
-				ilk_rxx_mem_cal0.s.entry_ctl0 = pent->ent_ctrl;
-				ilk_rxx_mem_cal0.s.port_pipe0 = pent->pipe_bpid;
-				pent++;
-	
-				if (cvmx_ilk_use_la_mode(interface, 1)) {
-					ilk_rxx_mem_cal0.s.entry_ctl1 = pent->ent_ctrl;
-					ilk_rxx_mem_cal0.s.port_pipe1 = pent->pipe_bpid;
-				} else
-					ilk_rxx_mem_cal0.s.entry_ctl1 = XOFF;
-				pent++;
-	
-				ilk_rxx_mem_cal0.s.entry_ctl2 = XOFF;
-				ilk_rxx_mem_cal0.s.entry_ctl3 = XOFF;
-				ilk_rxx_mem_cal1.s.entry_ctl4 = XOFF;
-				ilk_rxx_mem_cal1.s.entry_ctl5 = XOFF;
-				ilk_rxx_mem_cal1.s.entry_ctl6 = XOFF;
-				ilk_rxx_mem_cal1.s.entry_ctl7 = XOFF;
-			}
-			cvmx_write_csr(CVMX_ILK_RXX_MEM_CAL0(interface), ilk_rxx_mem_cal0.u64);
-			cvmx_write_csr(CVMX_ILK_RXX_MEM_CAL1(interface), ilk_rxx_mem_cal1.u64);
-			cvmx_read_csr(CVMX_ILK_RXX_MEM_CAL1(interface));
-			ilk_rxx_idx_cal.u64 = cvmx_read_csr(CVMX_ILK_RXX_IDX_CAL(interface));
-	
-			return 0;
 		}
-	
-		/* set the calendar entries. each group has both cal0 and cal1 registers */
-		for (i = 0; i < num_grp; i++) {
-			ilk_rxx_mem_cal0.u64 = 0;
-			for (j = 0; j < CVMX_ILK_CAL_GRP_SZ / 2; j++) {
-				tmp = 0;
-				tmp = pent->pipe_bpid & ~(~tmp << CVMX_ILK_PIPE_BPID_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * j;
-				ilk_rxx_mem_cal0.u64 |= tmp;
-	
-				tmp = 0;
-				tmp = pent->ent_ctrl & ~(~tmp << CVMX_ILK_ENT_CTRL_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * j + CVMX_ILK_PIPE_BPID_SZ;
-				ilk_rxx_mem_cal0.u64 |= tmp;
-				pent++;
-			}
-			cvmx_write_csr(CVMX_ILK_RXX_MEM_CAL0(interface), ilk_rxx_mem_cal0.u64);
-	
-			ilk_rxx_mem_cal1.u64 = 0;
-			for (j = 0; j < CVMX_ILK_CAL_GRP_SZ / 2; j++) {
-				tmp = 0;
-				tmp = pent->pipe_bpid & ~(~tmp << CVMX_ILK_PIPE_BPID_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * j;
-				ilk_rxx_mem_cal1.u64 |= tmp;
-	
-				tmp = 0;
-				tmp = pent->ent_ctrl & ~(~tmp << CVMX_ILK_ENT_CTRL_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * j + CVMX_ILK_PIPE_BPID_SZ;
-				ilk_rxx_mem_cal1.u64 |= tmp;
-				pent++;
-			}
-			cvmx_write_csr(CVMX_ILK_RXX_MEM_CAL1(interface), ilk_rxx_mem_cal1.u64);
-		}
-	
-		/* set the calendar entries, the fraction of a group. but both cal0 and
-		 * cal1 must be written */
-		ilk_rxx_mem_cal0.u64 = 0;
-		ilk_rxx_mem_cal1.u64 = 0;
-		for (i = 0; i < num_rest; i++) {
-			if (i < CVMX_ILK_CAL_GRP_SZ / 2) {
-				tmp = 0;
-				tmp = pent->pipe_bpid & ~(~tmp << CVMX_ILK_PIPE_BPID_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * i;
-				ilk_rxx_mem_cal0.u64 |= tmp;
-	
-				tmp = 0;
-				tmp = pent->ent_ctrl & ~(~tmp << CVMX_ILK_ENT_CTRL_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * i + CVMX_ILK_PIPE_BPID_SZ;
-				ilk_rxx_mem_cal0.u64 |= tmp;
-				pent++;
-			}
-	
-			if (i >= CVMX_ILK_CAL_GRP_SZ / 2) {
-				tmp = 0;
-				tmp = pent->pipe_bpid & ~(~tmp << CVMX_ILK_PIPE_BPID_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * (i - CVMX_ILK_CAL_GRP_SZ / 2);
-				ilk_rxx_mem_cal1.u64 |= tmp;
-	
-				tmp = 0;
-				tmp = pent->ent_ctrl & ~(~tmp << CVMX_ILK_ENT_CTRL_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * (i - CVMX_ILK_CAL_GRP_SZ / 2) + CVMX_ILK_PIPE_BPID_SZ;
-				ilk_rxx_mem_cal1.u64 |= tmp;
-				pent++;
-			}
-		}
-		cvmx_write_csr(CVMX_ILK_RXX_MEM_CAL0(interface), ilk_rxx_mem_cal0.u64);
-		cvmx_write_csr(CVMX_ILK_RXX_MEM_CAL1(interface), ilk_rxx_mem_cal1.u64);
-		cvmx_read_csr(CVMX_ILK_RXX_MEM_CAL1(interface));
+		cvmx_write_csr(CVMX_ILK_RXX_CFG0(interface), ilk_rxx_cfg0.u64);
 	}
+
 	if (OCTEON_IS_MODEL(OCTEON_CN78XX)) {
 		cvmx_ilk_rxx_cal_entryx_t rxx_cal_entryx;
 
@@ -827,13 +747,9 @@ EXPORT_SYMBOL(cvmx_ilk_cal_setup_rx);
  */
 int cvmx_ilk_tx_cal_conf(int interface, int cal_depth, cvmx_ilk_cal_entry_t * pent)
 {
-	int res = -1, num_grp, num_rest, i, j;
+	int res = -1, i;
 	cvmx_ilk_txx_cfg0_t ilk_txx_cfg0;
-	cvmx_ilk_txx_idx_cal_t ilk_txx_idx_cal;
-	cvmx_ilk_txx_mem_cal0_t ilk_txx_mem_cal0;
-	cvmx_ilk_txx_mem_cal1_t ilk_txx_mem_cal1;
-	unsigned long int tmp;
-	cvmx_ilk_cal_entry_t *ent_tmp;
+	int num_entries;
 
 	if (!(OCTEON_IS_MODEL(OCTEON_CN68XX)) &&
 	    !(OCTEON_IS_MODEL(OCTEON_CN78XX)))
@@ -854,100 +770,19 @@ int cvmx_ilk_tx_cal_conf(int interface, int cal_depth, cvmx_ilk_cal_entry_t * pe
 #endif
 
 	if (OCTEON_IS_MODEL(OCTEON_CN68XX)) {
-		if (cvmx_ilk_use_la_mode(interface, 0)) {
-			ilk_txx_idx_cal.u64 = cvmx_read_csr(CVMX_ILK_TXX_IDX_CAL(interface));
-			ilk_txx_idx_cal.s.inc = 1;
-			ilk_txx_idx_cal.s.index = 0;	/* channel */
-			cvmx_write_csr(CVMX_ILK_TXX_IDX_CAL(interface), ilk_txx_idx_cal.u64);
-	
-			ilk_txx_mem_cal0.u64 = 0;
-			ilk_txx_mem_cal1.u64 = 0;
-			ilk_txx_mem_cal0.s.entry_ctl0 = pent->ent_ctrl;
-			ilk_txx_mem_cal0.s.bpid0 = pent->pipe_bpid;
-	
-			pent++;
-			if (cvmx_ilk_use_la_mode(interface, 1)) {
-				ilk_txx_mem_cal0.s.entry_ctl1 = pent->ent_ctrl;
-				ilk_txx_mem_cal0.s.bpid1 = pent->pipe_bpid;
-			} else {
-				ilk_txx_mem_cal0.s.entry_ctl1 = XOFF;
-			}
-			pent++;
-			ilk_txx_mem_cal0.s.entry_ctl2 = XOFF;
-			ilk_txx_mem_cal0.s.entry_ctl3 = XOFF;
-			ilk_txx_mem_cal1.s.entry_ctl4 = XOFF;
-			ilk_txx_mem_cal1.s.entry_ctl5 = XOFF;
-			ilk_txx_mem_cal1.s.entry_ctl6 = XOFF;
-			ilk_txx_mem_cal1.s.entry_ctl7 = XOFF;
-	
-			cvmx_write_csr(CVMX_ILK_TXX_MEM_CAL0(interface), ilk_txx_mem_cal0.u64);
-			cvmx_write_csr(CVMX_ILK_TXX_MEM_CAL1(interface), ilk_txx_mem_cal1.u64);
-			cvmx_read_csr(CVMX_ILK_TXX_MEM_CAL1(interface));
-	
-			ilk_txx_cfg0.u64 = cvmx_read_csr(CVMX_ILK_TXX_CFG0(interface));
-			ilk_txx_cfg0.s.cal_depth = 8;
-			ilk_txx_cfg0.s.lnk_stats_ena = 1;
-			cvmx_write_csr(CVMX_ILK_TXX_CFG0(interface), ilk_txx_cfg0.u64);
-	
-			return 0;
-		}
-	
-		/* tx calendar depth must be a multiple of 8 */
-		num_grp = (cal_depth - 1) / CVMX_ILK_CAL_GRP_SZ + 1;
-		num_rest = cal_depth % CVMX_ILK_CAL_GRP_SZ;
-		if (num_rest != 0) {
-			ent_tmp = pent + cal_depth;
-			for (i = num_rest; i < 8; i++, ent_tmp++) {
-				ent_tmp->pipe_bpid = 0;
-				ent_tmp->ent_ctrl = XOFF;
-			}
+		/* Update the calendar for each channel */
+		for (i = 0; i < cal_depth; i++) {
+			__cvmx_ilk_write_tx_cal_entry(interface, i,
+						      pent[i].pipe_bpid);
 		}
-		cal_depth = num_grp * 8;
-	
-		/* set the depth */
+
+		/* Set the depth (must be multiple of 8)*/
 		ilk_txx_cfg0.u64 = cvmx_read_csr(CVMX_ILK_TXX_CFG0(interface));
-		ilk_txx_cfg0.s.cal_depth = cal_depth;
+		num_entries = 1 + cal_depth + (cal_depth - 1) / 15;
+		ilk_txx_cfg0.s.cal_depth = (num_entries + 7) & ~7;
 		cvmx_write_csr(CVMX_ILK_TXX_CFG0(interface), ilk_txx_cfg0.u64);
-	
-		/* set the calendar index */
-		ilk_txx_idx_cal.u64 = 0;
-		ilk_txx_idx_cal.s.inc = 1;
-		cvmx_write_csr(CVMX_ILK_TXX_IDX_CAL(interface), ilk_txx_idx_cal.u64);
-	
-		/* set the calendar entries. each group has both cal0 and cal1 registers */
-		for (i = 0; i < num_grp; i++) {
-			ilk_txx_mem_cal0.u64 = 0;
-			for (j = 0; j < CVMX_ILK_CAL_GRP_SZ / 2; j++) {
-				tmp = 0;
-				tmp = pent->pipe_bpid & ~(~tmp << CVMX_ILK_PIPE_BPID_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * j;
-				ilk_txx_mem_cal0.u64 |= tmp;
-	
-				tmp = 0;
-				tmp = pent->ent_ctrl & ~(~tmp << CVMX_ILK_ENT_CTRL_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * j + CVMX_ILK_PIPE_BPID_SZ;
-				ilk_txx_mem_cal0.u64 |= tmp;
-				pent++;
-			}
-			cvmx_write_csr(CVMX_ILK_TXX_MEM_CAL0(interface), ilk_txx_mem_cal0.u64);
-	
-			ilk_txx_mem_cal1.u64 = 0;
-			for (j = 0; j < CVMX_ILK_CAL_GRP_SZ / 2; j++) {
-				tmp = 0;
-				tmp = pent->pipe_bpid & ~(~tmp << CVMX_ILK_PIPE_BPID_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * j;
-				ilk_txx_mem_cal1.u64 |= tmp;
-	
-				tmp = 0;
-				tmp = pent->ent_ctrl & ~(~tmp << CVMX_ILK_ENT_CTRL_SZ);
-				tmp <<= (CVMX_ILK_PIPE_BPID_SZ + CVMX_ILK_ENT_CTRL_SZ) * j + CVMX_ILK_PIPE_BPID_SZ;
-				ilk_txx_mem_cal1.u64 |= tmp;
-				pent++;
-			}
-			cvmx_write_csr(CVMX_ILK_TXX_MEM_CAL1(interface), ilk_txx_mem_cal1.u64);
-		}
-		cvmx_read_csr(CVMX_ILK_TXX_MEM_CAL1(interface));
 	}
+
 	if (OCTEON_IS_MODEL(OCTEON_CN78XX)) {
 		cvmx_ilk_txx_cal_entryx_t txx_cal_entryx;
 
@@ -969,49 +804,6 @@ int cvmx_ilk_tx_cal_conf(int interface, int cal_depth, cvmx_ilk_cal_entry_t * pe
 }
 
 /**
- * configure backpressure for tx
- *
- * @param interface The identifier of the packet interface to configure and
- *                  use as a ILK interface. cn68xx has 2 interfaces: ilk0 and
- *                  ilk1.
- *
- * @param cal_depth the number of calendar entries
- * @param pent      pointer to calendar entries
- *
- * @return Zero on success, negative on failure.
- */
-int cvmx_ilk_bp_conf(int interface, int cal_depth, cvmx_ilk_cal_entry_t * pent)
-{
-	int res = -1, i;
-	cvmx_ipd_ctl_status_t ipd_ctl_status;
-	cvmx_ilk_cal_entry_t *tmp;
-	unsigned char bpid;
-	cvmx_ipd_bpidx_mbuf_th_t ipd_bpidx_mbuf_th;
-
-	/* enable bp for the interface */
-	if (OCTEON_IS_MODEL(OCTEON_CN68XX)) {
-		ipd_ctl_status.u64 = cvmx_read_csr(CVMX_IPD_CTL_STATUS);
-		ipd_ctl_status.s.pbp_en = 1;
-		cvmx_write_csr(CVMX_IPD_CTL_STATUS, ipd_ctl_status.u64);
-	
-		/* enable bp for each id */
-		for (i = 0, tmp = pent; i < cal_depth; i++, tmp++) {
-			bpid = tmp->pipe_bpid;
-			ipd_bpidx_mbuf_th.u64 = cvmx_read_csr(CVMX_IPD_BPIDX_MBUF_TH(bpid));
-			ipd_bpidx_mbuf_th.s.page_cnt = 1;	/* 256 buffers */
-			ipd_bpidx_mbuf_th.s.bp_enb = 1;
-			cvmx_write_csr(CVMX_IPD_BPIDX_MBUF_TH(bpid), ipd_bpidx_mbuf_th.u64);
-		}
-		res = 0;
-	}
-	if (OCTEON_IS_MODEL(OCTEON_CN78XX)) {
-		/* TODO: need to add this one */
-	}
-
-	return res;
-}
-
-/**
  * enable calendar for tx
  *
  * @param interface The identifier of the packet interface to configure and
@@ -1072,18 +864,13 @@ int cvmx_ilk_cal_setup_tx(int interface, int cal_depth, cvmx_ilk_cal_entry_t * p
 	if (res < 0)
 		return res;
 
-#ifdef CVMX_ILK_BP_CONF_ENA
-	res = cvmx_ilk_bp_conf(interface, cal_depth, pent);
-	if (res < 0)
-		return res;
-#endif
-
 	res = cvmx_ilk_tx_cal_ena(interface, cal_ena);
 	return res;
 }
 
 EXPORT_SYMBOL(cvmx_ilk_cal_setup_tx);
 
+//#define CVMX_ILK_STATS_ENA 1
 #ifdef CVMX_ILK_STATS_ENA
 static void cvmx_ilk_reg_dump_rx(int interface)
 {
@@ -1149,7 +936,7 @@ static void cvmx_ilk_reg_dump_rx(int interface)
 
 		for (i = 0; i < CHAN_NUM_DBG; i++) {
 			rxx_chax.u64 = cvmx_read_csr(CVMX_ILK_RXX_CHAX(i, interface));
-			cvmx_dprintf("ilk chan: %d  pki chan: 0x%x\n", i, rxx_chax.port_kind);
+			cvmx_dprintf("ilk chan: %d  pki chan: 0x%x\n", i, rxx_chax.s.port_kind);
 		}
 	}
 
@@ -1330,7 +1117,6 @@ void cvmx_ilk_runtime_status(int interface)
  *
  * @return Zero on success, negative on failure.
  */
-//#define CVMX_ILK_STATS_ENA 1
 int cvmx_ilk_enable(int interface)
 {
 	int res = -1;
@@ -1370,7 +1156,6 @@ int cvmx_ilk_enable(int interface)
 			ilk_txx_cfg1.s.tx_link_fc_jam = 1;
 		}
 	}
-	ilk_txx_cfg1.s.rx_link_fc_ign = 1;	/* cannot use link fc workaround */
 	cvmx_write_csr(CVMX_ILK_TXX_CFG1(interface), ilk_txx_cfg1.u64);
 	cvmx_read_csr(CVMX_ILK_TXX_CFG1(interface));
 
@@ -1652,7 +1437,9 @@ void cvmx_ilk_show_stats(int interface, cvmx_ilk_stats_ctrl_t * pstats)
 				rxx_pkt_cntx.u64 = cvmx_read_csr(CVMX_ILK_RXX_PKT_CNTX(*pstats->chan_list, interface));
 				rxx_byte_cntx.u64 = cvmx_read_csr(CVMX_ILK_RXX_BYTE_CNTX(*pstats->chan_list, interface));
 				cvmx_dprintf("ILK%d Channel%d Rx: %llu packets %llu bytes\n", interface,
-					     *pstats->chan_list, (uint64_t)rxx_pkt_cntx.s.rx_pkt, (uint64_t)rxx_byte_cntx.s.rx_bytes);
+					     *pstats->chan_list, 
+					     (unsigned long long)rxx_pkt_cntx.s.rx_pkt,
+					     (unsigned long long)rxx_byte_cntx.s.rx_bytes);
 			}
 
 			if (OCTEON_IS_MODEL(OCTEON_CN68XX)) {
@@ -1680,7 +1467,9 @@ void cvmx_ilk_show_stats(int interface, cvmx_ilk_stats_ctrl_t * pstats)
 				txx_pkt_cntx.u64 = cvmx_read_csr(CVMX_ILK_TXX_PKT_CNTX(*pstats->chan_list, interface));
 				txx_byte_cntx.u64 = cvmx_read_csr(CVMX_ILK_TXX_BYTE_CNTX(*pstats->chan_list, interface));
 				cvmx_dprintf("ILK%d Channel%d Tx: %llu packets %llu bytes\n", interface,
-					     *pstats->chan_list, (uint64_t)txx_pkt_cntx.s.tx_pkt, (uint64_t)txx_byte_cntx.s.tx_bytes);
+					     *pstats->chan_list,
+					     (unsigned long long)txx_pkt_cntx.s.tx_pkt,
+					     (unsigned long long)txx_byte_cntx.s.tx_bytes);
 			}
 
 			pstats++;
@@ -1734,12 +1523,14 @@ void cvmx_ilk_show_stats(int interface, cvmx_ilk_stats_ctrl_t * pstats)
 			rxx_pkt_cntx.u64 = cvmx_read_csr(CVMX_ILK_RXX_PKT_CNTX(i, interface));
 			rxx_byte_cntx.u64 = cvmx_read_csr(CVMX_ILK_RXX_BYTE_CNTX(i, interface));
 			cvmx_dprintf("ILK%d Channel%d Rx: %llu packets %llu bytes\n", interface,
-				     i, (uint64_t)rxx_pkt_cntx.s.rx_pkt, (uint64_t)rxx_byte_cntx.s.rx_bytes);
+				     i, (unsigned long long)rxx_pkt_cntx.s.rx_pkt,
+				     (unsigned long long)rxx_byte_cntx.s.rx_bytes);
 
 			txx_pkt_cntx.u64 = cvmx_read_csr(CVMX_ILK_TXX_PKT_CNTX(i, interface));
 			txx_byte_cntx.u64 = cvmx_read_csr(CVMX_ILK_TXX_BYTE_CNTX(i, interface));
 			cvmx_dprintf("ILK%d Channel%d Tx: %llu packets %llu bytes\n", interface,
-				     i, (uint64_t)txx_pkt_cntx.s.tx_pkt, (uint64_t)txx_byte_cntx.s.tx_bytes);
+				     i, (unsigned long long)txx_pkt_cntx.s.tx_pkt,
+				     (unsigned long long)txx_byte_cntx.s.tx_bytes);
 		}
 	}
 
diff --git a/arch/mips/cavium-octeon/executive/cvmx-pki.c b/arch/mips/cavium-octeon/executive/cvmx-pki.c
index c286059..d91be0e 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-pki.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-pki.c
@@ -47,6 +47,9 @@
 #include <asm/octeon/cvmx.h>
 #include <asm/octeon/cvmx-pki-defs.h>
 #include <asm/octeon/cvmx-pki.h>
+#include <asm/octeon/cvmx-fpa.h>
+#include <asm/octeon/cvmx-pki-cluster.h>
+#include <asm/octeon/cvmx-pki-resources.h>
 #else
 #include "cvmx.h"
 #include "cvmx-version.h"
@@ -54,11 +57,12 @@
 #include "cvmx-pki-defs.h"
 #include "cvmx-pki.h"
 #include "cvmx-fpa.h"
-#endif
-
 #include "cvmx-pki-cluster.h"
+#include "cvmx-pki-resources.h"
+#endif
 
 CVMX_SHARED struct cvmx_pki_config pki_config[CVMX_MAX_NODES];
+CVMX_SHARED struct cvmx_pki_profiles pki_profiles[CVMX_MAX_NODES];
 
 /**
  * This function enables pki
@@ -106,7 +110,6 @@ EXPORT_SYMBOL(cvmx_pki_disable);
  */
 int cvmx_pki_setup_clusters(int node)
 {
-
 	int i;
 	for(i=0; i< cvmx_pki_cluster_code_length; i++)
 		cvmx_write_csr_node(node, CVMX_PKI_IMEMX(i),cvmx_pki_cluster_code_default[i]);
@@ -230,8 +233,6 @@ void cvmx_pki_write_style(int node, uint64_t style, uint64_t cluster_mask,
 	cvmx_pki_clx_stylex_alg_t style_alg_reg;
 	cvmx_pki_stylex_buf_t     style_buf_reg;
 	int cluster = 0;
-	int num_entry;
-	int index;
 
 	//vinita to_do break it differnt functions
 	while( cluster < CVMX_PKI_NUM_CLUSTERS) {
@@ -245,7 +246,7 @@ void cvmx_pki_write_style(int node, uint64_t style, uint64_t cluster_mask,
 			//style_cfg_reg.s.fcs_chk = style_cfg.en_FCS_chk;
 			//style_cfg_reg.s.strip_FCS = style_cfg.strip_l2_FCS;
 			//style_cfg_reg.s.minmax_sel = style_cfg.max_min_frame_sel;
-			style_cfg_reg.s.qpg_base = style_cfg.qpg_cfg.base_offset;
+			style_cfg_reg.s.qpg_base = style_cfg.qpg_base_offset;
 			style_cfg_reg.s.qpg_dis_padd = style_cfg.qpg_calc_port_addr;
 			style_cfg_reg.s.qpg_dis_aura = style_cfg.qpg_calc_aura;
 			style_cfg_reg.s.qpg_dis_grp = style_cfg.qpg_calc_group;
@@ -285,21 +286,12 @@ void cvmx_pki_write_style(int node, uint64_t style, uint64_t cluster_mask,
 		cluster++;
 	}
 	style_buf_reg.u64 = cvmx_read_csr_node(node, CVMX_PKI_STYLEX_BUF(style));
-	style_buf_reg.s.first_skip = style_cfg.first_mbuf_skip;
-	style_buf_reg.s.later_skip = style_cfg.later_mbuf_skip;
+	style_buf_reg.s.first_skip = (style_cfg.first_mbuf_skip)/8;
+	style_buf_reg.s.later_skip = style_cfg.later_mbuf_skip/8;
 	style_buf_reg.s.opc_mode = style_cfg.cache_mode;
-	style_buf_reg.s.mb_size = style_cfg.mbuff_size;
+	style_buf_reg.s.mb_size = (style_cfg.mbuff_size)/8;
 	style_buf_reg.s.dis_wq_dat = 0;
 	cvmx_write_csr_node(node,CVMX_PKI_STYLEX_BUF(style), style_buf_reg.u64);
-
-	num_entry = style_cfg.qpg_cfg.num_entries;
-	index = style_cfg.qpg_cfg.base_offset;
-	while(num_entry--) {
-		cvmx_pki_write_qpg_entry(node, index, style_cfg.qpg_cfg.qpg_entry[num_entry].port_add,
-					   style_cfg.qpg_cfg.qpg_entry[num_entry].aura, style_cfg.qpg_cfg.qpg_entry[num_entry].grp_ok,
-					   style_cfg.qpg_cfg.qpg_entry[num_entry].grp_bad);
-		index++;
-	}
 }
 
 
@@ -384,7 +376,7 @@ int cvmx_pki_enable_aura_qos(int node, int aura, bool ena_red,
 	pki_aura_cfg.s.ena_red = ena_red;
 	pki_aura_cfg.s.ena_drop = ena_drop;
 	pki_aura_cfg.s.ena_bp = ena_bp;
-	cvmx_write_csr_node(node, CVMX_PKI_AURAX_CFG(aura),pki_aura_cfg.u64 );
+	cvmx_write_csr_node(node, CVMX_PKI_AURAX_CFG(aura),pki_aura_cfg.u64);
 	return 0;
 }
 
@@ -452,7 +444,7 @@ int cvmx_pki_frame_len_check(int node, int id, int maxframesize, int minframesiz
 	return 0;
 }
 
-int cvmx_pki_config_l2_frame_len(int node, uint64_t maxframesize, uint64_t minframesize)
+int cvmx_pki_set_l2_frame_len(int node, uint64_t maxframesize, uint64_t minframesize)
 {
 	if (cvmx_pki_frame_len_check(node,0,maxframesize, minframesize)) {
 		if (cvmx_pki_frame_len_check(node,1,maxframesize, minframesize)) {
@@ -465,66 +457,722 @@ int cvmx_pki_config_l2_frame_len(int node, uint64_t maxframesize, uint64_t minfr
 		return 0;
 }
 
+/**
+ * This function finds if cluster profile with name already exist
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	profile index in cluster list on SUCCESS
+                -1 if profile not found in cluster list
+ */
+int cvmx_pki_cluster_profile_exist(int node, char *name)
+{
+	int index = pki_profiles[node].cl_profile_list.index;
+
+	while(index--)
+	{
+		if(strcmp(name,pki_profiles[node].cl_profile_list.cl_profile[index].name) == 0)
+			return index;
+	}
+	return -1;
+}
+
+/**
+ * This function finds cluster mask associated with
+ * given cluster profile name.
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	cluster_mask on SUCCESS
+                -1 if profile not found in cluster list
+ */
+int cvmx_pki_find_cluster_mask(int node, char *name)
+{
+	int index;
+	int cl_grp;
+
+	if((index = cvmx_pki_cluster_profile_exist(node,name)) == -1)
+		return -1;
+
+	cl_grp = pki_profiles[node].cl_profile_list.cl_profile[index].cluster_group;
+	return pki_config[node].cluster_cfg[cl_grp].cluster_mask;
+
+}
+
+/**
+ * This function finds cluster group associated with
+ * given cluster profile name
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	cluster group number on SUCCESS
+                -1 if profile not found in cluster list
+ */
+int cvmx_pki_find_cluster_group(int node, char *name)
+{
+	int index;
+
+	if((index = cvmx_pki_cluster_profile_exist(node,name)) == -1)
+		return -1;
+	return pki_profiles[node].cl_profile_list.cl_profile[index].cluster_group;
+}
+
+/**
+ * This function finds if fpa pool profile with
+ * name already exist
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	profile index in pool list on SUCCESS
+                -1 if profile not found in pool list
+ */
+int cvmx_pki_pool_profile_exist(int node, char *name)
+{
+	int index = pki_profiles[node].pool_profile_list.index;
+
+	while(index--)
+	{
+		if(strcmp(name,pki_profiles[node].pool_profile_list.pool_profile[index].pool_name) == 0) {
+			return index;
+		}
+	}
+	return -1;
+}
+
+/**
+ * This function finds if fpa pool number associated with
+ * given profile name
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	pool number on SUCCESS
+                -1 if profile not found in pool list
+ */
+int cvmx_pki_find_pool(int node, char *name)
+{
+	int index;
 
-int cvmx_pki_config_cluster_group(int node, char *name, int cluster_group, uint64_t cluster_mask)
+	if((index = cvmx_pki_pool_profile_exist(node,name)) == -1)
+		return -1;
+	return pki_profiles[node].pool_profile_list.pool_profile[index].pool_cfg.pool_num;
+}
+
+/**
+ * This function finds if fpa aura with given name
+ * exist in aura list
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	aura index in aura list on SUCCESS
+                -1 if profile not found in aura list
+ */
+int cvmx_pki_aura_profile_exist(int node, char *name)
+{
+	int index = pki_profiles[node].aura_profile_list.index;
+
+	while(index--)
+	{
+		if(strcmp(name,pki_profiles[node].aura_profile_list.aura_profile[index].aura_name) == 0)
+			return index;
+	}
+	return -1;
+}
+
+/**
+ * This function finds aura number associated with
+ * given aura name.
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	aura number in aura list on SUCCESS
+                -1 if profile not found in aura list
+ */
+int cvmx_pki_find_aura(int node, char *name)
+{
+	int index;
+
+	if((index = cvmx_pki_aura_profile_exist(node,name)) == -1)
+		return -1;
+	return pki_profiles[node].aura_profile_list.aura_profile[index].aura_num;
+}
+
+/**
+ * This function finds if group with given name
+ * exist in group list
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	index in group list on SUCCESS
+                -1 if profile not found in group list
+ */
+int cvmx_pki_group_profile_exist(int node, char *name)
+{
+	int index = pki_profiles[node].group_profile_list.index;
+
+	while(index--)
+	{
+		if(strcmp(name,pki_profiles[node].group_profile_list.group_profile[index].group_name) == 0)
+			return index;
+	}
+	return -1;
+}
+
+/**
+ * This function finds group number associated with
+ * given group profile name
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	group number on SUCCESS
+                -1 if profile not found in group list
+ */
+int cvmx_pki_find_group(int node, char *name)
 {
 	int index;
 
+	if((index = cvmx_pki_group_profile_exist(node,name)) == -1)
+		return -1;
+	return pki_profiles[node].group_profile_list.group_profile[index].group_num;
+}
+
+/**
+ * This function finds if qpg profile with given name
+ * exist in qpg list
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	index in qpg list on SUCCESS
+                -1 if profile not found in qpg list
+ */
+int cvmx_pki_qpg_profile_exist(int node, char *name)
+{
+	int index = pki_profiles[node].qpg_profile_list.index;
+
+	while(index--)
+	{
+		if(strcmp(name,pki_profiles[node].qpg_profile_list.qpg_profile[index].qpg_name) == 0)
+			return index;
+	}
+	return -1;
+}
+
+/**
+ * This function finds qpg base offset associated with
+ * given qpg profile name.
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	qpg base offset on SUCCESS
+                -1 if profile not found in qpg list
+ */
+int cvmx_pki_find_qpg_base_offset(int node, char *name)
+{
+	int index;
+
+	if((index = cvmx_pki_qpg_profile_exist(node,name)) == -1)
+		return -1;
+	return pki_profiles[node].qpg_profile_list.qpg_profile[index].base_offset;
+}
+
+/**
+ * This function get the buffer size of the given pool number
+ * @param node  node number
+ * @param pool  fpa pool number
+ * @return 	buffer size SUCCESS
+                -1 if pool number is not found in pool list
+ */
+int cvmx_pki_get_pool_buffer_size(int node,int pool)
+{
+	int index = pki_profiles[node].aura_profile_list.index;
+
+	while(index--)
+	{
+		if(pki_profiles[node].pool_profile_list.pool_profile[index].pool_cfg.pool_num == pool) {
+			return pki_profiles[node].pool_profile_list.pool_profile[index].pool_cfg.buffer_size;
+		}
+	}
+	return -1;
+}
+
+/**
+ * This function get the buffer size of the given aura number
+ * @param node  node number
+ * @param pool  fpa aura number
+ * @return 	buffer size SUCCESS
+                -1 if aura number is not found in aura list
+ */
+int cvmx_pki_get_aura_buffer_size(int node, int aura)
+{
+	int index = pki_profiles[node].aura_profile_list.index;
+	int pool_num;
+
+	while(index--)
+	{
+		if(pki_profiles[node].aura_profile_list.aura_profile[index].aura_num == aura) {
+			pool_num = pki_profiles[node].aura_profile_list.aura_profile[index].pool_num;
+			return cvmx_pki_get_pool_buffer_size(node,pool_num);
+		}
+	}
+	return -1;
+}
+
+int cvmx_pki_get_mbuff_size (int node, int base_offset)
+{
+	int index = pki_profiles[node].qpg_profile_list.index;
+	int aura;
+	int min_size;
+	int aura_size;
+	int i;
+
+	while(index--)
+	{
+		if(pki_profiles[node].qpg_profile_list.qpg_profile[index].base_offset == base_offset) {
+			int num_entry = pki_profiles[node].qpg_profile_list.qpg_profile[index].num_entries;
+			aura = pki_config[node].qpg_cfg[base_offset].aura;
+			min_size = cvmx_pki_get_aura_buffer_size(node,aura);
+			for(i=1; i < num_entry; i++) {
+				aura = pki_config[node].qpg_cfg[base_offset+i].aura;
+				aura_size = cvmx_pki_get_aura_buffer_size(node,aura);
+				if(min_size > aura_size)
+					min_size = aura_size;
+			}
+			return min_size;
+		}
+	}
+	return -1;
+}
+
+/**
+ * This function finds if style profile with given name
+ * exist in style list
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	index into style list on SUCCESS
+                -1 if profile not found in style list
+ */
+int cvmx_pki_style_profile_exist(int node, char *name)
+{
+	int index = pki_profiles[node].style_profile_list.index;
+
+	while(index--)
+	{
+		if(strcmp(name,pki_profiles[node].style_profile_list.style_profile[index].name) == 0)
+			return index;
+	}
+	return -1;
+}
+
+/**
+ * This function finds style number associated with
+ * given style profile name.
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	style number on SUCCESS
+                -1 if profile not found in style list
+ */
+int cvmx_pki_find_style(int node, char *name)
+{
+	int index;
+
+	if((index = cvmx_pki_style_profile_exist(node,name)) == -1)
+		return -1;
+	return pki_profiles[node].style_profile_list.style_profile[index].style_num;
+}
+
+/**
+ * This function stores the cluster configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param name  	name associated with this config
+ * @param cl_profile    structure containing cluster profile parameters below
+ * 			-cluster_group (-1 if needs to be allocated)
+ * 			-num_cluster   (number of cluster in the cluster group)
+ * 			-parsing_mask  (parsing mask for the cluster group)
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_cluster_config(int node, struct cvmx_pki_cluster_profile cl_profile)
+{
+	int index;
+	int cluster_group;
+	uint64_t cluster_mask;
+
 	if(node >= CVMX_MAX_NODES) {
 		cvmx_dprintf("Invalid node number %d",node);
 		return -1;
 	}
+	if(cvmx_pki_cluster_profile_exist(node,cl_profile.name) >= 0) {
+		cvmx_dprintf("ERROR:cluster profile already exist with name %s",cl_profile.name);
+		return -1;
+	}
+	if((cluster_group = cvmx_pki_alloc_cluster_group(node, cl_profile.cluster_group,
+	    cl_profile.num_clusters, cl_profile.parsing_mask, &cluster_mask)) == -1) {
+		cvmx_dprintf("ERROR:allocating cluster_group\n");
+		return -1;
+	}
+	cl_profile.cluster_group = cluster_group;
 	//spinlock it
-	index = pki_config[node].cluster_list.index;
+	index = pki_profiles[node].cl_profile_list.index;
 
 	if(index >= CVMX_PKI_MAX_CLUSTER_PROFILES) {
 		cvmx_dprintf("ERROR: Max cluster profiles %d reached\n", index);
 		return -1;
 	}
+	pki_profiles[node].cl_profile_list.index++;
+	//spinlock free
+
+	pki_profiles[node].cl_profile_list.cl_profile[index] = cl_profile;
+	pki_config[node].cluster_cfg[cluster_group].cluster_mask = cluster_mask;
+	return 0;
+}
+
+/**
+ * This function stores the pool configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param pool_name  	name associated with this config
+ * @param pool_numb     pool number (-1 if need to be allocated)
+ * @param buffer_size	size of buffers in specified pool
+ * @param num_buffers	numberof buffers in specified pool
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_pool_config(int node, char* pool_name, int pool_num,
+			     uint64_t buffer_size, uint64_t num_buffers)
+{
+	uint64_t index;
+	struct cvmx_pki_pool_profile* pool_profile;
+
+	if(node >= CVMX_MAX_NODES) {
+		cvmx_dprintf("Invalid node number %d",node);
+		return -1;
+	}
+	if(cvmx_pki_pool_profile_exist(node, pool_name) >= 0) {
+		cvmx_dprintf("ERROR:pool profile already exist with name %s",pool_name);
+		return -1;
+	}
+	if(cvmx_fpa_allocate_fpa_pools(node,&pool_num,1) == -1) {
+		cvmx_dprintf("ERROR:allocating pool for pool_config\n");
+		return -1;
+	}
+
+	//spinlock it
+	index = pki_profiles[node].pool_profile_list.index;
+	if(index >= CVMX_PKI_MAX_POOL_PROFILES) {
+		cvmx_dprintf("ERROR: Max pool profile %d reached\n", (int)index);
+		return -1;
+
+	}
+	pki_profiles[node].pool_profile_list.index++;
 	//spinlock free
-	pki_config[node].cluster_list.cl_profile[index].cl_group = (uint64_t)cluster_group;
-	pki_config[node].cluster_list.cl_profile[index].cl_mask = cluster_mask;
-	if(strlen(name) > CVMX_PKI_MAX_NAME) {
-		cvmx_dprintf("ERROR: cluster profile name exceeds max length of %d\n",
-			     (int)CVMX_PKI_MAX_NAME);
+
+	pool_profile = &pki_profiles[node].pool_profile_list.pool_profile[index];
+	strcpy(pool_profile->pool_name, pool_name);
+	pool_profile->pool_cfg.pool_num = pool_num;
+	pool_profile->pool_cfg.buffer_size = buffer_size;
+	pool_profile->pool_cfg.buffer_count = num_buffers;
+	return 0;
+}
+
+/**
+ * This function stores the aura configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param aura_name  	name associated with this config
+ * @param aura_num      aura number (-1 if need to be allocated)
+ * @param pool  	pool to which aura is mapped
+ * @param num_buffers	number of buffers to allocate to aura.
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_aura_config(int node, char* aura_name, int aura_num, int pool,
+			      int num_buffers)
+{
+	uint64_t index;
+	struct cvmx_pki_aura_profile* aura_profile;
+
+	if(node >= CVMX_MAX_NODES) {
+		cvmx_dprintf("Invalid node number %d",node);
+		return -1;
+	}
+	if(cvmx_pki_aura_profile_exist(node,aura_name) >= 0) {
+		cvmx_dprintf("ERROR:aura profile already exist with name %s",aura_name);
 		return -1;
 	}
-	strcpy(pki_config[node].cluster_list.cl_profile[index].name, name);
-	pki_config[node].cluster_list.index++;
+	if((aura_num = cvmx_fpa_allocate_auras(node,&aura_num,1)) == -1) {
+		cvmx_dprintf("ERROR:allocating aura for aura_config\n");
+		return -1;
+	}
+	//spinlock it
+	index = pki_profiles[node].aura_profile_list.index;
+	if(index >= CVMX_PKI_MAX_AURA_PROFILES) {
+		cvmx_dprintf("ERROR: Max aura profile %d reached\n", (int)index);
+		return -1;
+
+	}
+	pki_profiles[node].aura_profile_list.index++;
+	//spinlock free
+
+	aura_profile = &pki_profiles[node].aura_profile_list.aura_profile[index];
+	strcpy(aura_profile->aura_name, aura_name);
+	aura_profile->aura_num = aura_num;
+	aura_profile->pool_num = pool;
+	aura_profile->buffer_count = num_buffers;
 	return 0;
 }
 
-int cvmx_pki_pcam_config_entry(int node,uint64_t cl_mask,
-			       struct cvmx_pki_pcam_input input,
-			       struct cvmx_pki_pcam_action action)
+/**
+ * This function stores the group configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param aura_name  	name associated with this config
+ * @param group		SSO group number (-1 if needs to be allocated)
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_group_config(int node, char *name, int group)
 {
 	uint64_t index;
+	struct cvmx_pki_group_profile* group_profile;
 
 	if(node >= CVMX_MAX_NODES) {
 		cvmx_dprintf("Invalid node number %d",node);
 		return -1;
 	}
+	if(cvmx_pki_group_profile_exist(node, name) >= 0) {
+		cvmx_dprintf("ERROR:group profile already exist with name %s",name);
+		return -1;
+	}
+#if 0 //vinita_to_do uncomment when group_alloc is ready
+	if((group = cvmx_pki_allocate_group(node,group)) == -1) {
+		cvmx_dprintf("ERROR:allocating group for group_config\n");
+		return -1;
+	}
+#endif
 
 	//spinlock it
-	index = pki_config[node].pcam_list.index;
-	if(index >= CVMX_PKI_TOTAL_PCAM_ENTRY) {
-		cvmx_dprintf("ERROR: Max pcam lists %d reached\n", (int)index);
+	index = pki_profiles[node].group_profile_list.index;
+	if(index >= CVMX_PKI_MAX_GROUP_PROFILES) {
+		cvmx_dprintf("ERROR: Max group profile %d reached\n", (int)index);
 		return -1;
 
 	}
+	pki_profiles[node].group_profile_list.index++;
 	//spinlock free
 
-	pki_config[node].pcam_list.pcam_cfg[index].cluster_mask = cl_mask;
-	pki_config[node].pcam_list.pcam_cfg[index].pcam_input = input;
-	pki_config[node].pcam_list.pcam_cfg[index].pcam_action = action;
-	pki_config[node].pcam_list.index++;
+	group_profile = &pki_profiles[node].group_profile_list.group_profile[index];
+	strcpy(group_profile->group_name, name);
+	group_profile->group_num = group;
 	return 0;
+
 }
 
-int cvmx_pki_config_QPG_entry(void)
+/**
+ * This function stores the qpg configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param name  	name associated with this config
+ * @param base_offset	offset in QPG table (-1 if needs to be allocated)
+ * @param num_entries	total number of indexes needs to be allocated from
+ *                      base_offset.
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_qpg_profile(int node, char* name, int base_offset, int num_entries)
 {
+	int64_t index;
+	struct cvmx_pki_qpg_profile* qpg_profile;
+
+	if(node >= CVMX_MAX_NODES) {
+		cvmx_dprintf("Invalid node number %d",node);
+		return -1;
+	}
+	if(cvmx_pki_qpg_profile_exist(node,name) >= 0) {
+		cvmx_dprintf("ERROR:qpg profile already exist with name %s",name);
+		return -1;
+	}
+	if((base_offset = cvmx_pki_alloc_qpg_entry(node,base_offset,num_entries)) == -1) {
+		cvmx_dprintf("ERROR:allocating entry for qpg_table\n");
+		return -1;
+	}
+
+	//spinlock it
+	index = pki_profiles[node].qpg_profile_list.index;
+	if(index >= CVMX_PKI_MAX_QPG_PROFILES) {
+		cvmx_dprintf("ERROR: Max qpg profile %d reached\n", (int)index);
+		return -1;
+
+	}
+	pki_profiles[node].qpg_profile_list.index++;
+	//spinlock free
+
+	qpg_profile = &pki_profiles[node].qpg_profile_list.qpg_profile[index];
+	strcpy(qpg_profile->qpg_name, name);
+	qpg_profile->base_offset = base_offset;
+	qpg_profile->num_entries = num_entries;
 	return 0;
+}
 
+/**
+ * This function stores the group configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param aura_name  	name associated with this config
+ * @param group		SSO group number (-1 if needs to be allocated)
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_qpg_config(int node, char* name, int entry_start,
+			    int entry_end, struct cvmx_pki_qpg_config qpg_config)
+{
+	int index;
+	int base_offset;
+	int num_entry;
+
+	if(node >= CVMX_MAX_NODES) {
+		cvmx_dprintf("Invalid node number %d",node);
+		return -1;
+	}
+	if((index = cvmx_pki_qpg_profile_exist(node,name)) < 0) {
+		cvmx_dprintf("ERROR:qpg profile %s not found\n",name);
+		return -1;
+	}
+	if ((base_offset = pki_profiles[node].qpg_profile_list.qpg_profile[index].base_offset) < 0) {
+		cvmx_dprintf("ERROR: invalid base offset %d in qpg profile %s",base_offset,name);
+		return -1;
+	}
+	num_entry = pki_profiles[node].qpg_profile_list.qpg_profile[index].num_entries;
+	if(entry_start > num_entry || entry_end > num_entry) {
+		cvmx_dprintf("ERROR: start_entry %llu or end_entry %llu is > %llu for qpg_profile %s",
+			     (unsigned long long)entry_start,(unsigned long long)entry_end,(unsigned long long)num_entry,name);
+	}
+	while(entry_start <= entry_end) {
+		pki_config[node].qpg_cfg[base_offset + entry_start] = qpg_config;
+		entry_start++;
+	}
+	return 0;
+}
+
+/**
+ * This function stores the style configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param aura_name  	name associated with this config
+ * @param style_num	style number (-1 if needs to be allocated)
+ * @param style_cfg	pointer to struct which has parameters related
+ *                      to style config
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_style_config(int node, char* style_name, int style_num,
+			       struct cvmx_pki_style_config* style_cfg)
+{
+	uint64_t index;
+	struct cvmx_pki_style_profile* style_profile;
+
+	if(node >= CVMX_MAX_NODES) {
+		cvmx_dprintf("Invalid node number %d",node);
+		return -1;
+	}
+	if(cvmx_pki_style_profile_exist(node,style_name) > 0) {
+		cvmx_dprintf("ERROR: style profile already exist with name %s",style_name);
+		return -1;
+	}
+	if((style_num = cvmx_pki_alloc_style(node,style_num)) == -1) {
+		cvmx_dprintf("ERROR:allocating style for style_config\n");
+		return -1;
+	}
+
+	//spinlock it
+	index = pki_profiles[node].style_profile_list.index;
+	if(index >= CVMX_PKI_MAX_STYLE_PROFILES) {
+		cvmx_dprintf("ERROR: Max style profile %d reached\n", (int)index);
+		return -1;
+
+	}
+	pki_profiles[node].style_profile_list.index++;
+	//spinlock free
+
+	style_profile = &pki_profiles[node].style_profile_list.style_profile[index];
+	strcpy(style_profile->name, style_name);
+	style_profile->style_num = style_num;
+	memcpy(&pki_config[node].style_cfg[style_num], style_cfg, sizeof(struct cvmx_pki_style_config));
+	return index;
+}
+
+/**
+ * This function stores the pkind style configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param pkind  	pkind number
+ * @param style		style number which need to be assigned to pkind
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_pkind_style(int node, int pkind, int style)
+{
+	pki_config[node].pkind_cfg[pkind].initial_style = style;
+	pki_config[node].style_cfg[style].cluster_mask = pki_config[node].pkind_cfg[pkind].cluster_mask;
+	return 0;
+}
+
+/**
+ * This function stores the pkind initial parse mode in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param pkind  	pkind number
+ * @param parse_mode    parse mode to assign to specified pkind.
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+void cvmx_pki_set_pkind_initial_parse_mode(int node, int pkind, int parse_mode)
+{
+	pki_config[node].pkind_cfg[pkind].parsing_mode=parse_mode;
+}
+
+/**
+ * This function stores the pkind cluster configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param pkind  	pkind number
+ * @param style_name	pointer to style name which need to be assigned to pkind
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+void cvmx_pki_set_pkind_cluster_config(int node, int pkind,
+					   int cl_grp, uint64_t cl_mask)
+{
+	pki_config[node].pkind_cfg[pkind].cluster_grp = cl_grp;
+	pki_config[node].pkind_cfg[pkind].cluster_mask = cl_mask;
+
+}
+
+/**
+ * This function stores the pcam entry in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param pcam_index	which pcam entry to configure (-1 to allocate from available entries)
+ * @param cluster_mask	Mask of clusters on which the entry meeds to be appiled.
+ * @param input		structure of pcam input parameter which defines matching creteria.
+ * @param action	structure of pcam action parameters which aill be applied if match is found.
+ * @return              0 on scuccess
+ *			-1 on failure
+ */
+int cvmx_pki_set_pcam_entry(int node, int pcam_index, uint64_t cl_mask,
+			       struct cvmx_pki_pcam_input input,
+			       struct cvmx_pki_pcam_action action)
+{
+	uint64_t index;
+
+	if(node >= CVMX_MAX_NODES) {
+		cvmx_dprintf("Invalid node number %d",node);
+		return -1;
+	}
+
+	//spinlock it
+	index = pki_profiles[node].pcam_list.index;
+	if(index >= CVMX_PKI_TOTAL_PCAM_ENTRY) {
+		cvmx_dprintf("ERROR: Max pcam lists %d reached\n", (int)index);
+		return -1;
+
+	}
+	pki_profiles[node].pcam_list.index++;
+	//spinlock free
+
+	pki_profiles[node].pcam_list.pcam_cfg[index].cluster_mask = cl_mask;
+	pki_profiles[node].pcam_list.pcam_cfg[index].entry_num = pcam_index;
+	pki_profiles[node].pcam_list.pcam_cfg[index].pcam_input = input;
+	pki_profiles[node].pcam_list.pcam_cfg[index].pcam_action = action;
+	return 0;
 }
 
 /**
@@ -597,3 +1245,4 @@ void cvmx_pki_show_valid_pcam_entries(int node)
 	}
 }
 
+
diff --git a/arch/mips/include/asm/octeon/cvmx-ase-defs.h b/arch/mips/include/asm/octeon/cvmx-ase-defs.h
index 514c394..3e5199a 100644
--- a/arch/mips/include/asm/octeon/cvmx-ase-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-ase-defs.h
@@ -375,28 +375,21 @@ static inline uint64_t CVMX_ASE_SPARE_FUNC(void)
 /**
  * cvmx_ase_backdoor_req_ctl
  *
- * Used to configure and trigger backdoor requests.
- * Backdoor requests can be inserted at any time. They will be inserted into
- * the request stream from LAP.
- *
- * The request packet needs to be written to ASE_BACKDOOR_REQ_DATA*
- * need to be written before VALID is triggerd.
- * Both CNT and VALID can be written same cycle.
- *
- * The hardware will clear the VALID bit when the request is sent.
- * If another VALID=1 is written before the bit is cleared,
- * it will not trigger another SOP.
- *
- * Software should take care to wait for the RSP before issuing another REQ.
- * Hardware will deassert ASE_BACKDOOR_RSP_CTL[VALID] when VALID is triggered.
+ * This register is used to configure and trigger backdoor requests. Backdoor requests can be
+ * inserted at any time. They are inserted into the request stream from LAP. The request packet
+ * needs to be written to ASE_BACKDOOR_REQ_DATA(0..15), and must be written before VALID is
+ * triggered. Both CNT and VALID can be written in the same cycle. The hardware clears the VALID
+ * bit when the request is sent. If another VALID=1 is written before the bit is cleared, it will
+ * not trigger another SOP. Software should take care to wait for the response before issuing
+ * another request. Hardware deasserts ASE_BACKDOOR_RSP_CTL[VALID] when VALID is triggered.
  */
 union cvmx_ase_backdoor_req_ctl {
 	uint64_t u64;
 	struct cvmx_ase_backdoor_req_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t valid                        : 1;  /**< Writing 1 triggers CNT beats to be sent as a packet into ASE. */
+	uint64_t valid                        : 1;  /**< Valid. Writing 1 triggers CNT beats to be sent as a packet into ASE. */
 	uint64_t reserved_4_62                : 59;
-	uint64_t cnt                          : 4;  /**< Number of DATA beats to send. Valid values: 2 to 10.
+	uint64_t cnt                          : 4;  /**< Number of DATA beats to send. Valid values are 0x2 - 0xB.
                                                          INTERNAL: Value of 0x0 will send 16 beats. */
 #else
 	uint64_t cnt                          : 4;
@@ -411,9 +404,9 @@ typedef union cvmx_ase_backdoor_req_ctl cvmx_ase_backdoor_req_ctl_t;
 /**
  * cvmx_ase_backdoor_req_data#
  *
- * Lowest address is first beat (aka control word) and will have SOP.
- * Next address is next beat, etc. CNTth address will have EOP.
- * See further documentation in ASE_BACKDOOR_REQ_CTL.
+ * The lowest address is first beat (aka control word) and has the SOP. The next address is next
+ * beat, etc. The ASE_BACKDOOR_REQ_CTL[CNT]th address has the EOP. See further information in
+ * ASE_BACKDOOR_REQ_CTL.
  */
 union cvmx_ase_backdoor_req_datax {
 	uint64_t u64;
@@ -431,21 +424,19 @@ typedef union cvmx_ase_backdoor_req_datax cvmx_ase_backdoor_req_datax_t;
 /**
  * cvmx_ase_backdoor_rsp_ctl
  *
- * Used to indicate backdoor response complete.
- * See description in ASE_BACKDOOR_REQ_CTL.
- *
- * Hardware will assert VALID when the full response packet has been received
- * and has been posted to CNT and ASE_BACKDOOR_RSP_DATA*.
- * Hardware will not change CNT and ASE_BACKDOOR_RSP_DATA* while VALID is asserted.
- * Hardware will deassert VALID when ASE_BACKDOOR_REQ_CTL[VALID] is triggered.
+ * This register is used to indicate that the backdoor response is complete. See description in
+ * ASE_BACKDOOR_REQ_CTL. Hardware asserts VALID when the full response packet has been received
+ * and has been posted to CNT and ASE_BACKDOOR_RSP_DATA(0..7). Hardware does not change CNT and
+ * ASE_BACKDOOR_RSP_DATA(0..7) while VALID is asserted. Hardware deasserts VALID when
+ * ASE_BACKDOOR_REQ_CTL[VALID] is triggered.
  */
 union cvmx_ase_backdoor_rsp_ctl {
 	uint64_t u64;
 	struct cvmx_ase_backdoor_rsp_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t valid                        : 1;  /**< Asserted means there is valid response packet data. */
+	uint64_t valid                        : 1;  /**< Valid. Asserted means there is valid response packet data. */
 	uint64_t reserved_3_62                : 60;
-	uint64_t cnt                          : 3;  /**< Number of DATA beats received. Valid values: 2 to 5. */
+	uint64_t cnt                          : 3;  /**< Number of DATA beats received. Valid values are 2 to 5. */
 #else
 	uint64_t cnt                          : 3;
 	uint64_t reserved_3_62                : 60;
@@ -459,8 +450,9 @@ typedef union cvmx_ase_backdoor_rsp_ctl cvmx_ase_backdoor_rsp_ctl_t;
 /**
  * cvmx_ase_backdoor_rsp_data#
  *
- * Lowest address is first beat (aka control word) and will have SOP.
- * Next address is next beat, etc. CNTth address will have EOP.
+ * The lowest address is first beat (aka control word) and has the SOP. The next address is next
+ * beat, etc. The ASE_BACKDOOR_RSP_CTL[CNT]th address has the EOP. See further information in
+ * ASE_BACKDOOR_RSP_CTL.
  */
 union cvmx_ase_backdoor_rsp_datax {
 	uint64_t u64;
@@ -478,7 +470,7 @@ typedef union cvmx_ase_backdoor_rsp_datax cvmx_ase_backdoor_rsp_datax_t;
 /**
  * cvmx_ase_bist_status0
  *
- * BIST status register.
+ * This is BIST status register 0.
  *
  */
 union cvmx_ase_bist_status0 {
@@ -486,7 +478,7 @@ union cvmx_ase_bist_status0 {
 	struct cvmx_ase_bist_status0_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_60_63               : 4;
-	uint64_t lue_rmc_ndone                : 4;  /**< Combined 'BIST is not complete' for the LUE RMC[3..0] RAMs. */
+	uint64_t lue_rmc_ndone                : 4;  /**< Combined `BIST is not complete' for the LUE RMC[3..0] RAMs. */
 	uint64_t reserved_51_55               : 5;
 	uint64_t lue_rft_ndone                : 1;  /**< BIST is not complete for the LUE HST RFT RAM. */
 	uint64_t lue_tat_ndone                : 1;  /**< BIST is not complete for the LUE HST TAT RAM. */
@@ -543,7 +535,7 @@ typedef union cvmx_ase_bist_status0 cvmx_ase_bist_status0_t;
 /**
  * cvmx_ase_bist_status1
  *
- * BIST status register. Per LUE RMC engine.
+ * This is the per-LUE RMC engine BIST status register 1.
  *
  */
 union cvmx_ase_bist_status1 {
@@ -594,7 +586,7 @@ typedef union cvmx_ase_bist_status1 cvmx_ase_bist_status1_t;
 /**
  * cvmx_ase_config
  *
- * General configuration for the ASE block.
+ * This is the general configuration register for the ASE block.
  *
  */
 union cvmx_ase_config {
@@ -602,14 +594,13 @@ union cvmx_ase_config {
 	struct cvmx_ase_config_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_7_63                : 57;
-	uint64_t endian_mode                  : 2;  /**< See ASE_ENDIAN_E. Endian swapping only applies to LU_REQ header data and KEY_RSP match result. */
+	uint64_t endian_mode                  : 2;  /**< See ASE_ENDIAN_E. Endian swapping only applies to lookup request header data and KEY_RSP
+                                                         match result. */
 	uint64_t reserved_2_4                 : 3;
-	uint64_t div2_clken                   : 1;  /**< Enable conditional sclk/2 in ASE.
-                                                         This only enables the sclk/2 domain, not the sclk.
-                                                         Turn this on if you want to do lookup requests. */
-	uint64_t div1_clken                   : 1;  /**< Enable conditional sclk in ASE.
-                                                         This only enables the sclk domain, not the sclk/2.
-                                                         Turn this on if you want to do lookup requests OR if you want to access OSM. */
+	uint64_t div2_clken                   : 1;  /**< Enable conditional SCLK/2 in ASE. This only enables the SCLK/2 domain, not the SCLK. Turn
+                                                         this on if you want to do lookup requests. */
+	uint64_t div1_clken                   : 1;  /**< Enable conditional SCLK in ASE. This only enables the SCLK domain, not the SCLK/2. Turn
+                                                         this on if you want to do lookup requests or if you want to access OSM. */
 #else
 	uint64_t div1_clken                   : 1;
 	uint64_t div2_clken                   : 1;
@@ -626,48 +617,46 @@ typedef union cvmx_ase_config cvmx_ase_config_t;
  * cvmx_ase_ecc_ctl
  *
  * This register can be used to disable ECC checks, insert ECC errors.
- *
- * Fields *ECC_DIS: Disables SBE detection/correction and DBE detection.
- * If ECC_DIS is 0x1, then no errors are detected.
- *
- * Fields *ECC_FLIP_SYND:  Flip the syndrom<1:0> bits to generate 1-bit/2-bits error for testing.
- *   0x0: normal operation
- *   0x1: SBE on bit<0>
- *   0x2: SBE on bit<1>
- *   0x3: DBE on bit<1:0>
+ * Fields *ECC_DIS Disable SBE detection/correction and DBE detection. If ECC_DIS is 0x1, then no
+ * errors are detected.
+ * Fields *ECC_FLIP_SYND flip the syndrome<1:0> bits to generate 1-bit/2-bits error for testing.
+ * 0x0 = normal operation
+ * 0x1 = SBE on bit<0>
+ * 0x2 = SBE on bit<1>
+ * 0x3 = DBE on bit<1:0>
  */
 union cvmx_ase_ecc_ctl {
 	uint64_t u64;
 	struct cvmx_ase_ecc_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_54_63               : 10;
-	uint64_t lue_kdt_ecc_flip_synd        : 2;  /**< Flip syndrome in LUE RMC Key Data Transfer Buffer. */
-	uint64_t lue_rul_ecc_flip_synd        : 2;  /**< Flip syndrome in LUE RMC Buffer Aligner Wrapper Rule FIFO. */
-	uint64_t lue_rft_ecc_flip_synd        : 2;  /**< Flip syndrome in LUE HST and RMC Rule Format Tables.
+	uint64_t lue_kdt_ecc_flip_synd        : 2;  /**< Flip syndrome in LUE RMC key data transfer buffer. */
+	uint64_t lue_rul_ecc_flip_synd        : 2;  /**< Flip syndrome in LUE RMC buffer aligner wrapper rule FIFO. */
+	uint64_t lue_rft_ecc_flip_synd        : 2;  /**< Flip syndrome in LUE HST and RMC rule format tables.
                                                          INTERNAL: RFT replicated 5 times for timing purposes, controls all copies. */
-	uint64_t lue_tat_ecc_flip_synd        : 2;  /**< Flip syndrome in LUE HST Tree Access Table. */
-	uint64_t lue_kdb_ecc_flip_synd        : 2;  /**< Flip syndrome in LUE KRQ Key Data Buffer. */
+	uint64_t lue_tat_ecc_flip_synd        : 2;  /**< Flip syndrome in LUE HST ruleDB access table. */
+	uint64_t lue_kdb_ecc_flip_synd        : 2;  /**< Flip syndrome in LUE KRQ key data buffer. */
 	uint64_t reserved_37_43               : 7;
-	uint64_t lue_kdt_ecc_dis              : 1;  /**< Disable ECC for LUE RMC Key Data Transfer Buffer. */
-	uint64_t lue_rul_ecc_dis              : 1;  /**< Disable ECC for LUE RMC Buffer Aligner Wrapper Rule FIFO. */
-	uint64_t lue_rft_ecc_dis              : 1;  /**< Disable ECC for LUE HST and RMC Rule Format Tables.
+	uint64_t lue_kdt_ecc_dis              : 1;  /**< Disable ECC for LUE RMC key data transfer buffer. */
+	uint64_t lue_rul_ecc_dis              : 1;  /**< Disable ECC for LUE RMC buffer aligner wrapper rule FIFO. */
+	uint64_t lue_rft_ecc_dis              : 1;  /**< Disable ECC for LUE HST and RMC rule format tables.
                                                          INTERNAL: RFT replicated 5 times for timing purposes, controls all copies. */
-	uint64_t lue_tat_ecc_dis              : 1;  /**< Disable ECC for LUE HST Tree Access Table. */
-	uint64_t lue_kdb_ecc_dis              : 1;  /**< Disable ECC for LUE KRQ Key Data Buffer. */
+	uint64_t lue_tat_ecc_dis              : 1;  /**< Disable ECC for LUE HST ruleDB access table. */
+	uint64_t lue_kdb_ecc_dis              : 1;  /**< Disable ECC for LUE KRQ key data buffer. */
 	uint64_t reserved_26_31               : 6;
-	uint64_t lop_txb_ecc_flip_synd        : 2;  /**< Flip syndrome in LOP TXBUFF Data Memory. */
+	uint64_t lop_txb_ecc_flip_synd        : 2;  /**< Flip syndrome in LOP TXBUFF data memory. */
 	uint64_t reserved_17_23               : 7;
-	uint64_t lop_txb_ecc_dis              : 1;  /**< Disable ECC for LOP TXBUFF Data Memory. */
+	uint64_t lop_txb_ecc_dis              : 1;  /**< Disable ECC for LOP TXBUFF data memory. */
 	uint64_t reserved_14_15               : 2;
-	uint64_t lip_newq_ecc_flip_synd       : 2;  /**< Flip syndrome in LIP New Queue. */
-	uint64_t lip_pht_ecc_flip_synd        : 2;  /**< Flip syndrome in LIP Packet Header Table. */
-	uint64_t lip_gdt_ecc_flip_synd        : 2;  /**< Flip syndrome in LIP Global Definition Table. */
-	uint64_t lip_isf_ecc_flip_synd        : 2;  /**< Flip syndrome in LIP Input Skid FIFO. */
+	uint64_t lip_newq_ecc_flip_synd       : 2;  /**< Flip syndrome in LIP new queue. */
+	uint64_t lip_pht_ecc_flip_synd        : 2;  /**< Flip syndrome in LIP packet header table. */
+	uint64_t lip_gdt_ecc_flip_synd        : 2;  /**< Flip syndrome in LIP group definition table. */
+	uint64_t lip_isf_ecc_flip_synd        : 2;  /**< Flip syndrome in LIP input skid FIFO. */
 	uint64_t reserved_4_5                 : 2;
-	uint64_t lip_newq_ecc_dis             : 1;  /**< Disable ECC for LIP New Queue. */
-	uint64_t lip_pht_ecc_dis              : 1;  /**< Disable ECC for LIP Packet Header Table. */
-	uint64_t lip_gdt_ecc_dis              : 1;  /**< Disable ECC for LIP Global Definition Table. */
-	uint64_t lip_isf_ecc_dis              : 1;  /**< Disable ECC for LIP Input Skid FIFO. */
+	uint64_t lip_newq_ecc_dis             : 1;  /**< Disable ECC for LIP new queue. */
+	uint64_t lip_pht_ecc_dis              : 1;  /**< Disable ECC for LIP packet header table. */
+	uint64_t lip_gdt_ecc_dis              : 1;  /**< Disable ECC for LIP group definition table. */
+	uint64_t lip_isf_ecc_dis              : 1;  /**< Disable ECC for LIP input skid FIFO. */
 #else
 	uint64_t lip_isf_ecc_dis              : 1;
 	uint64_t lip_gdt_ecc_dis              : 1;
@@ -704,66 +693,54 @@ typedef union cvmx_ase_ecc_ctl cvmx_ase_ecc_ctl_t;
 /**
  * cvmx_ase_ecc_int
  *
- * Interrupt status for ECC failures.
- *
- * In all cases below EXCEPT LUE_KDT_*, any request that generates an
- * error will have its response marked as errored.
- * The LUE_KDT_DBE error will not be indicated in the response packet;
- * the only indication of this error is the interrupt mechanism.
- * INTERNAL: Therefore, most of these interrupts are for diagnostic use, not for error handling.
- *
- * For all the LUE* errors below, additional information can be obtained
- * by reading the ASE_LUE_ERROR_LOG. For all the LIP* /LOP* errors below, additional
- * information can be obtained by reading the ASE_LUF_ERROR_LOG CSR.
+ * This register contains the interrupt status for ECC failures. In all cases below EXCEPT
+ * LUE_KDT_*, any request that generates an error has its response marked as errored. The
+ * LUE_KDT_DBE error is not indicated in the response packet; the only indication of this error
+ * is the interrupt mechanism.
+ * For all the LUE* errors below, additional information can be obtained by reading the
+ * ASE_LUE_ERROR_LOG. For all the LIP* /LOP* errors below, additional information can be obtained
+ * by reading ASE_LUF_ERROR_LOG.
  */
 union cvmx_ase_ecc_int {
 	uint64_t u64;
 	struct cvmx_ase_ecc_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_44_63               : 20;
-	uint64_t lue_kdt_dbe                  : 1;  /**< Detected Double-Bit Error on LUE RMC Key Data Tranfer Buffer. */
-	uint64_t lue_kdt_sbe                  : 1;  /**< Detected and corrected Single-Bit Error on LUE RMC Key Data Transfer Buffer. */
-	uint64_t lue_rul_dbe                  : 1;  /**< Detected Double-Bit Error on LUE RMC Buffer Aligner Wrapper Rule FIFO. */
-	uint64_t lue_rul_sbe                  : 1;  /**< Detected and corrected Single-Bit Error on LUE RMC Buffer Aligner Wrapper Rule FIFO. */
+	uint64_t lue_kdt_dbe                  : 1;  /**< Detected double-bit error on LUE RMC key data transfer buffer. */
+	uint64_t lue_kdt_sbe                  : 1;  /**< Detected and corrected single-bit error on LUE RMC key data transfer buffer. */
+	uint64_t lue_rul_dbe                  : 1;  /**< Detected double-bit error on LUE RMC buffer aligner wrapper rule FIFO. */
+	uint64_t lue_rul_sbe                  : 1;  /**< Detected and corrected single-bit error on LUE RMC buffer aligner wrapper rule FIFO. */
 	uint64_t reserved_38_39               : 2;
-	uint64_t lue_rft_dbe                  : 1;  /**< Detected Double-Bit Error on LUE HST and RMC Rule Format Tables.
-                                                         This bit will not be set for software accesses to the RFT, it will only get set for lookup
-                                                         accesses.
+	uint64_t lue_rft_dbe                  : 1;  /**< Detected double-bit error on LUE HST and RMC rule format tables. This bit is not set for
+                                                         software accesses to the RFT; it is only set for lookup accesses.
                                                          INTERNAL: RFT replicated 5 times for timing purposes, this indicates error for any of the
                                                          RFT. */
-	uint64_t lue_rft_sbe                  : 1;  /**< Detected and corrected Single-Bit Error on LUE HST and RMC Rule Format Tables.
-                                                         This bit will not be set for software accesses to the RFT, it will only get set for lookup
-                                                         accesses.
+	uint64_t lue_rft_sbe                  : 1;  /**< Detected and corrected single-bit error on LUE HST and RMC rule format tables. This bit is
+                                                         not set for software accesses to the RFT; it only gets set for lookup accesses.
                                                          INTERNAL: RFT replicated 5 times for timing purposes, this indicates error for any of the
                                                          RFT. */
-	uint64_t lue_tat_dbe                  : 1;  /**< Detected Double-Bit Error on LUE HST Tree Access Table.
-                                                         This bit will not be set for software accesses to the TAT, it will only get set for lookup
-                                                         accesses. */
-	uint64_t lue_tat_sbe                  : 1;  /**< Detected and corrected Single-Bit Error on LUE HST Tree Access Table.
-                                                         This bit will not be set for software accesses to the TAT, it will only get set for lookup
-                                                         accesses. */
-	uint64_t lue_kdb_dbe                  : 1;  /**< Detected Double-Bit Error on LUE KRQ Key Data Buffer. */
-	uint64_t lue_kdb_sbe                  : 1;  /**< Detected and corrected Single-Bit Error on LUE KRQ Key Data Buffer. */
+	uint64_t lue_tat_dbe                  : 1;  /**< Detected double-bit error on LUE HST ruleDB access table. This bit is not set for software
+                                                         accesses to the TAT; it only gets set for lookup accesses. */
+	uint64_t lue_tat_sbe                  : 1;  /**< Detected and corrected single-bit error on LUE HST ruleDB access table. This bit is not
+                                                         set for software accesses to the TAT; it only gets set for lookup accesses. */
+	uint64_t lue_kdb_dbe                  : 1;  /**< Detected double-bit error on LUE KRQ key data buffer. */
+	uint64_t lue_kdb_sbe                  : 1;  /**< Detected and corrected single-bit error on LUE KRQ key data buffer. */
 	uint64_t reserved_18_31               : 14;
-	uint64_t lop_txb_dbe                  : 1;  /**< Detected Bouble-Bit Error on LOP's TXBUFF ram read. */
-	uint64_t lop_txb_sbe                  : 1;  /**< Detected and corrected Single-Bit Error on LOP's TXBUFF ram read. */
+	uint64_t lop_txb_dbe                  : 1;  /**< Detected double-bit error on LOP's TXBUFF RAM read. */
+	uint64_t lop_txb_sbe                  : 1;  /**< Detected and corrected single-bit error on LOP's TXBUFF RAM read. */
 	uint64_t reserved_8_15                : 8;
-	uint64_t lip_newq_dbe                 : 1;  /**< Detected Double-Bit Error on LIP's New Queue. */
-	uint64_t lip_newq_sbe                 : 1;  /**< Detected and corrected Single-Bit Error on LIP's New Queue. */
-	uint64_t lip_pht_dbe                  : 1;  /**< Detected Double-Bit Error on LIP's Packet Header Table.
-                                                         This bit will not be set for software accesses to the GDT, it will only get set for lookup
-                                                         accesses. */
-	uint64_t lip_pht_sbe                  : 1;  /**< Detected and corrected Single-Bit Error on LIP's Packet Header Table.
-                                                         This bit will not be set for software accesses to the GDT, it will only get set for lookup
-                                                         accesses. */
-	uint64_t lip_gdt_dbe                  : 1;  /**< Detected Double-Bit Error on LIP's Global Definition Table.
-                                                         This bit will not be set for software accesses to the GDT, it will only get set for lookup
-                                                         accesses. */
-	uint64_t lip_gdt_sbe                  : 1;  /**< Detected and corrected Single-Bit Error on LIP's Global Definition Table.
-                                                         This bit will not be set for software accesses to the GDT, it will only get set for lookup
-                                                         accesses. */
-	uint64_t lip_isf_dbe                  : 1;  /**< Detected Double-Bit Error on LIP's Input Skid FIFO. */
-	uint64_t lip_isf_sbe                  : 1;  /**< Detected and corrected Single-Bit Error on LIP's Input Skid FIFO. */
+	uint64_t lip_newq_dbe                 : 1;  /**< Detected double-bit error on LIP's new queue. */
+	uint64_t lip_newq_sbe                 : 1;  /**< Detected and corrected single-bit error on LIP's new queue. */
+	uint64_t lip_pht_dbe                  : 1;  /**< Detected double-bit error on LIP's packet header table. This bit is not set for software
+                                                         accesses to the GDT; it only gets set for lookup accesses. */
+	uint64_t lip_pht_sbe                  : 1;  /**< Detected and corrected single-bit error on LIP's packet header table. This bit is not set
+                                                         for software accesses to the GDT; it only gets set for lookup accesses. */
+	uint64_t lip_gdt_dbe                  : 1;  /**< Detected double-bit error on LIP's group definition table. This bit is not set for
+                                                         software accesses to the GDT; it only gets set for lookup accesses. */
+	uint64_t lip_gdt_sbe                  : 1;  /**< Detected and corrected single-bit error on LIP's group definition table. This bit is not
+                                                         set for software accesses to the GDT; it only gets set for lookup accesses. */
+	uint64_t lip_isf_dbe                  : 1;  /**< Detected double-bit error on LIP's input skid FIFO. */
+	uint64_t lip_isf_sbe                  : 1;  /**< Detected and corrected single-bit error on LIP's input skid FIFO. */
 #else
 	uint64_t lip_isf_sbe                  : 1;
 	uint64_t lip_isf_dbe                  : 1;
@@ -798,62 +775,53 @@ typedef union cvmx_ase_ecc_int cvmx_ase_ecc_int_t;
 /**
  * cvmx_ase_gen_int
  *
- * Interrupt status for general ASE interrupts.
- *
- * Errors reported in bit positions <38:32>, <7:2>, and <0> are most likely
- * due to software programming errors.
- *
- * In all LUE* cases below, any request that generates an error will have its response marked as
+ * This register contains the interrupt status for general ASE interrupts. Errors reported in bit
+ * positions <38:32>, <7:2>, and <0> are most likely due to software programming errors.
+ * In all LUE* cases below, any request that generates an error has its response marked as
  * errored. These LUE* interrupts are for diagnostic use, not for error handling. For all the
- * LUE* errors below, additional information can be obtained by reading the ASE_LUE_ERROR_LOG
- * CSR.
+ * LUE* errors below, additional information can be obtained by reading ASE_LUE_ERROR_LOG.
  */
 union cvmx_ase_gen_int {
 	uint64_t u64;
 	struct cvmx_ase_gen_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_40_63               : 24;
-	uint64_t lue_rme_fatal                : 1;  /**< One or more of the Rule Match Engines detected a fatal error.
-                                                         INTERNAL: It is expected that error recovery will require resetting
-                                                         the ASE and loading corrected software into OSM. */
-	uint64_t lue_invalid_req              : 1;  /**< An invalid access during a lookup request was observed.
-                                                         The cause is one of:
-                                                         * Remote request
-                                                         * Migration request
-                                                         * Insufficient key data provided for a new lookup request
-                                                         INTERNAL: It is expected that error recovery will require resetting
-                                                         the ASE and loading corrected software into OSM. */
-	uint64_t lue_hr_err_log               : 1;  /**< An error occurred for a Host request and generated a Host Response with error. */
+	uint64_t lue_rme_fatal                : 1;  /**< One or more of the lookup engines detected a fatal error. It is expected that error
+                                                         recovery will require resetting the ASE and loading corrected software into OSM.
+                                                         INTERNAL: 'Lookup engine' refers to 'Rule Match Engine.' */
+	uint64_t lue_invalid_req              : 1;  /**< Insufficient key data was provided for a new lookup request. It is expected that error
+                                                         recovery will require resetting the ASE and loading corrected software into OSM.
+                                                         INTERNAL: The cause could also be a remote request or migration request. */
+	uint64_t lue_hr_err_log               : 1;  /**< An error occurred for a host request and generated a host response with error. */
 	uint64_t reserved_35_36               : 2;
-	uint64_t lue_tic_bad_write            : 1;  /**< Data was loaded in to the TIC that results in a wrap condition.
-                                                         Either the TAT row pointed to by the TIC entry is invalid, or
-                                                         the starting TAT row and the increment value points beyond the
-                                                         end of the TAT. */
-	uint64_t lue_tic_multi_hit            : 1;  /**< A TIC lookup request resulted in multiple entries reporting a hit. */
-	uint64_t lue_tic_miss                 : 1;  /**< A TIC lookup request did not match a valid entry. */
+	uint64_t lue_tic_bad_write            : 1;  /**< Data was loaded in to the TIC that results in a wrap condition. Either the TAT row pointed
+                                                         to by the TIC entry is invalid, or the starting TAT row and the increment value points
+                                                         beyond the send of the TAT. It is expected that error recovery will require loading
+                                                         corrected software into the TIC. */
+	uint64_t lue_tic_multi_hit            : 1;  /**< A TIC lookup request resulted in multiple entries reporting a hit. It is expected that
+                                                         error recovery will require resetting the ASE and loading corrected software into the TIC. */
+	uint64_t lue_tic_miss                 : 1;  /**< A TIC lookup request did not match a valid entry. It is expected that error recovery will
+                                                         require resetting the ASE and loading corrected software into the TIC. */
 	uint64_t reserved_8_31                : 24;
-	uint64_t lip_tbf_missing_eop          : 1;  /**< The incoming TBL command did not indicate EOP on the correct beat,
-                                                         or the incoming LU command did not indicate EOP before the 12th beat.
-                                                         The request will be marked FATAL. */
+	uint64_t lip_tbf_missing_eop          : 1;  /**< The incoming TBL command did not indicate EOP on the correct beat, or the incoming lookup
+                                                         command did not indicate EOP before the 12th beat. The request will be marked FATAL. */
 	uint64_t lip_tbf_early_eop            : 1;  /**< The incoming TBL write command did not have enough write data beats to match the command.
-                                                         The write will be marked FATAL. */
-	uint64_t lip_obf_missing_eop          : 1;  /**< The incoming OSM command did not indicate EOP on the correct beat.
-                                                         The request will be marked FATAL. */
+                                                         The write is marked FATAL. */
+	uint64_t lip_obf_missing_eop          : 1;  /**< The incoming OSM command did not indicate EOP on the correct beat. The request is marked FATAL. */
 	uint64_t lip_obf_early_eop            : 1;  /**< The incoming OSM Write command did not have enough write data beats to match the command.
-                                                         The write will be marked FATAL. */
-	uint64_t lip_obf_drop_unkn_cmd        : 1;  /**< The incoming Control Word at LIP OSM Bypass Splitter does not decode to a valid command.
-                                                         The packet will be dropped since we can't trust the command to figure out what kind of
-                                                         response to send to LAP. We depend on LAP timeouts to inform software. */
-	uint64_t lip_obf_drop_malformed       : 1;  /**< LIP OSM Bypass Splitter dropped a beat because it was expecting a
-                                                         start-of-packet beat and didn't see the SOP indication, or it saw both
-                                                         SOP and EOP indication. */
-	uint64_t lip_obf_drop_cmd_dbe         : 1;  /**< LIP OSM Bypass Splitter sees the incoming Control Word is marked as having a
-                                                         Double Bit Error. The packet will be dropped since we can't trust the LID to
-                                                         send even an error response to LAP. We depend on LAP timeouts to inform software. */
-	uint64_t lip_isf_drop_full            : 1;  /**< LIP Input Skid FIFO dropped a beat because it was full. This only happens if
-                                                         LAP issues request beats but has no ase__lap1_credit<0>'s to do so; this indicates LAP
-                                                         credits are mis-programmed. If this interrupt fires, the software has to reset LAP1
-                                                         and ASE to recover, as the credits are out of sync. */
+                                                         The write is marked FATAL. */
+	uint64_t lip_obf_drop_unkn_cmd        : 1;  /**< The incoming control word at LIP OSM bypass splitter does not decode to a valid command.
+                                                         The packet is dropped since we can't trust the command to figure out what kind of response
+                                                         to send to LAP. We depend on LAP timeouts to inform software. */
+	uint64_t lip_obf_drop_malformed       : 1;  /**< LIP OSM bypass splitter dropped a beat because it was expecting a start-of-packet beat and
+                                                         didn't see the SOP indication, or it saw both SOP and EOP indication. */
+	uint64_t lip_obf_drop_cmd_dbe         : 1;  /**< LIP OSM bypass splitter sees the incoming control word is marked as having a double-bit
+                                                         error. The packet is dropped since we can't trust the LID to send even an error response
+                                                         to LAP. We depend on LAP timeouts to inform software. */
+	uint64_t lip_isf_drop_full            : 1;  /**< LIP Input Skid FIFO dropped a beat because it was full. This only happens if LAP issues
+                                                         request beats but has no ase__lap1_credit<0>s to do so; this indicates LAP credits are
+                                                         misprogrammed. If this interrupt fires, the software has to reset LAP1 and ASE to recover,
+                                                         as the credits are out of sync. */
 #else
 	uint64_t lip_isf_drop_full            : 1;
 	uint64_t lip_obf_drop_cmd_dbe         : 1;
@@ -881,7 +849,7 @@ typedef union cvmx_ase_gen_int cvmx_ase_gen_int_t;
 /**
  * cvmx_ase_lip_config
  *
- * Configuration for LIP.
+ * This register provides configuration for the LIP.
  *
  */
 union cvmx_ase_lip_config {
@@ -889,16 +857,15 @@ union cvmx_ase_lip_config {
 	struct cvmx_ase_lip_config_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
-	uint64_t drop_xoff_en                 : 1;  /**< If enabled, LIP pays attention to the LAP's DROP_XOFF indication and may drop the
-                                                         indicated LU_REQ packets.
-                                                         If disabled, LIP ignores DROP_XOFF and will not drop packets. */
-	uint64_t gen_xon_en                   : 1;  /**< If enabled, LIP generates XON indication to LAP when LU_REQ's are backpressured.
-                                                         If disabled, LIP does not assert XON. */
+	uint64_t drop_xoff_en                 : 1;  /**< If enabled, the LIP pays attention to the LAP's DROP_XOFF indication and may drop the
+                                                         indicated lookup request packets. If disabled, the LIP ignores DROP_XOFF and does not drop
+                                                         packets. */
+	uint64_t gen_xon_en                   : 1;  /**< If enabled, the LIP generates XON indication to the LAP when lookup requests are
+                                                         backpressured. If disabled, the LIP does not assert XON. */
 	uint64_t reserved_1_1                 : 1;
-	uint64_t hst_osm_hw_ecc_bypass        : 1;  /**< If enabled, Host accesses to the OSM memory will bypass hardware ECC
-                                                         generation and calculation/correction/detection.
-                                                         If disabled, Host accesses will use hardware ECC
-                                                         generation and calculation/correction/detection. */
+	uint64_t hst_osm_hw_ecc_bypass        : 1;  /**< If enabled, host accesses to the OSM memory bypass hardware ECC generation and
+                                                         calculation/correction/detection. If disabled, host accesses use hardware ECC generation
+                                                         and calculation/correction/detection. */
 #else
 	uint64_t hst_osm_hw_ecc_bypass        : 1;
 	uint64_t reserved_1_1                 : 1;
@@ -933,7 +900,7 @@ typedef union cvmx_ase_lip_spare cvmx_ase_lip_spare_t;
 /**
  * cvmx_ase_lop_config
  *
- * Configuration for LOP.
+ * This register provides configuration for the LOP.
  *
  */
 union cvmx_ase_lop_config {
@@ -941,19 +908,19 @@ union cvmx_ase_lop_config {
 	struct cvmx_ase_lop_config_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_8_63                : 56;
-	uint64_t rsp_pri                      : 4;  /**< Response output priority.
-                                                         <7>: LUE Key response
-                                                         <6>: LUF table response
-                                                         <5>: LUE table response
-                                                         <4>: OSM write/read response
-                                                         There are 2 priority levels per response type: 1 -  higher priority; 0 - lower priority.
-                                                         RR is used among the responses with higher priority to send back to LAP or CSR. When there
-                                                         is no response with higher priority left,
-                                                         RR is used to choose a response with lower priority to send back to LAP or CSR. */
+	uint64_t rsp_pri                      : 4;  /**< Response output priority as follows:
+                                                         <7> LUE key response
+                                                         <6> LUF table response
+                                                         <5> LUE table response
+                                                         <4> OSM write/read response
+                                                         There are two priority levels per response type: 1 = higher priority;
+                                                         0 = lower priority. Round robin is used among the responses with higher priority to send
+                                                         back to the LAP or CSR. When there is no response with higher priority left, round robin
+                                                         is used to choose a response with lower priority to send back to LAP or CSR. */
 	uint64_t reserved_1_3                 : 3;
-	uint64_t rsp_dis                      : 1;  /**< If set, LOP will not send response(s) to LAP/CSR. It is only used for diagnosis purpose.
-                                                         For example, it can be used to built up back-pressure to LUE/LIP/LAP/OSM.
-                                                         In normal operation, it must not be set. */
+	uint64_t rsp_dis                      : 1;  /**< If set, the LOP does not send response(s) to the LAP/CSR. It is only used for diagnosis
+                                                         purposes. For example, it can be used to build up backpressure to LUE/LIP/LAP/OSM. In
+                                                         normal operation, it must not be set. */
 #else
 	uint64_t rsp_dis                      : 1;
 	uint64_t reserved_1_3                 : 3;
@@ -987,7 +954,7 @@ typedef union cvmx_ase_lop_spare cvmx_ase_lop_spare_t;
 /**
  * cvmx_ase_lue_config
  *
- * Configuration for LUE.
+ * This register provides configuration for the LUE.
  *
  */
 union cvmx_ase_lue_config {
@@ -995,40 +962,29 @@ union cvmx_ase_lue_config {
 	struct cvmx_ase_lue_config_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_34_63               : 30;
-	uint64_t pfcache_en                   : 1;  /**< Enable Bucket Entry PFLEN Caching
-                                                         When clear, if PFLEN < OCM-Line, PFLEN BE caching is disabled,
-                                                         and a BEREQ is made for each PFLEN group of BEs processed.
-                                                         When set, if PFLEN < OCM-Line, only a single BEREQ is made
-                                                         for the OCM-line which caches all of the BEs. */
-	uint64_t pfab_en                      : 1;  /**< Enable Bucket Entry Pre-fetch Phase A/B Request Scheme
-                                                         When clear, each Bucket Walk Engine is allowed to have a
-                                                         maximum of 8 outstanding Rule read requests in progress
-                                                         at a time.
-                                                         When set, each Bucket Walk Engine is allowed to have a
-                                                         maximum of 16 outstanding Rule read requests in progress at
-                                                         a time, split in to two groups of 8 (Phases A and B).
-                                                         After the initial 8 Bucket Entries, the next set of [up to]
-                                                         8 Bucket Entries are speculatively read and submitted to the
-                                                         Rule Walk Engine.
-                                                         Subsequent speculative reads are performed once all
-                                                         outstanding requests for a Phase have completed. */
+	uint64_t pfcache_en                   : 1;  /**< Enable bucket entry PFLEN caching. When clear, if PFLEN < OSM-line, PFLEN BE caching is
+                                                         disabled, and a BEREQ is made for each PFLEN group of BEs processed. When set, if PFLEN <
+                                                         OSM-line, only a single BEREQ is made for the OSM-line which caches all of the BEs. */
+	uint64_t pfab_en                      : 1;  /**< Enable bucket entry prefetch phase A/B request scheme. When clear, each Bucket Walk Engine
+                                                         is allowed to have a maximum of 8 outstanding rule read requests in progress at a time.
+                                                         When set, each Bucket Walk Engine is allowed to have a maximum of 16 outstanding rule read
+                                                         requests in progress at a time, split in to two groups of 8 (Phases A and B). After the
+                                                         initial 8 bucket entries, the next set of [up to] 8 bucket entries are speculatively read
+                                                         and submitted to the Rule Walk Engine. Subsequent speculative reads are performed once all
+                                                         outstanding requests for a phase have completed. */
 	uint64_t reserved_20_31               : 12;
-	uint64_t twc_strspsta_rr              : 1;  /**< Within the TWC block, configures the arbiter which selects
-                                                         between Pending TWE or BWE STRSPs. When clear, fixed priority
-                                                         arbitration is selected, which gives BWEs higher priority over TWEs.
-                                                         When set, round robin arbitration is selected which ensures fairness
-                                                         across the TWE and BWE STRSPs.
-                                                         If enabled, use round-robin. If disabled, use fixed priority. */
-	uint64_t tta_req_rr                   : 1;  /**< Within the TTA blocks, configures the arbiter which selects
-                                                         between Host access requests and Lookup requests. When configured
-                                                         for fixed priority, Host accesses have higher priority.
-                                                         If enabled, use round-robin. If disabled, use fixed priority. */
-	uint64_t rft_req_rr                   : 1;  /**< Within the RFT access logic, configures the arbiter which selects
-                                                         between Host access requests and Lookup requests. When configured
-                                                         for fixed priority, Host accesses have higher priority.
-                                                         If enabled, use round-robin. If disabled, use fixed priority. */
+	uint64_t twc_strspsta_rr              : 1;  /**< Within the TWC block, configures the arbiter which selects between Pending TWE or BWE
+                                                         STRSPs. When clear, fixed priority arbitration is selected, which gives BWEs higher
+                                                         priority over TWEs. When set, round robin arbitration is selected which ensures fairness
+                                                         across the TWE and BWE STRSPs. */
+	uint64_t tta_req_rr                   : 1;  /**< Within the TTA blocks, configures the arbiter which selects between host access requests
+                                                         and lookup requests. When configured for fixed priority, host accesses have higher
+                                                         priority. If enabled, use round robin. If disabled, use fixed priority. */
+	uint64_t rft_req_rr                   : 1;  /**< Within the RFT access logic, configures the arbiter which selects between host access
+                                                         requests and lookup requests. When configured for fixed priority, host accesses have
+                                                         higher priority. If enabled, use round-robin. If disabled, use fixed priority. */
 	uint64_t reserved_4_16                : 13;
-	uint64_t rme_enable                   : 4;  /**< Each bit, when set, enables Rule processing by a local Rule Match Engine. */
+	uint64_t rme_enable                   : 4;  /**< Each bit, when set, enables rule processing by a local Rule Match Engine. */
 #else
 	uint64_t rme_enable                   : 4;
 	uint64_t reserved_4_16                : 13;
@@ -1048,15 +1004,12 @@ typedef union cvmx_ase_lue_config cvmx_ase_lue_config_t;
 /**
  * cvmx_ase_lue_dbg_ctl0
  *
- * Select engines for debug observations for the LUE's 4 16-bit debug muxes.
- *
- * INTERNAL: We are not rewiring the NSP's 16-bit debug bus. Instead we are duplicating that mux
- * 4 times to give Octeon better observability.
- *
- * And select context for observation.
- *
- * INTERNAL: LUE DBGCTX is a DOR daisy-chained through the TWE and BWE engines, it can't be moved
- * to a straight Octeon-style debug bus without rewriting the whole thing.
+ * We are not rewiring the NSP's 16-bit debug bus. Instead we are duplicating that mux 4 times to
+ * give OCTEON better observability.
+ * LUE DBGCTX is a DOR daisy-chained through the TWE and BWE engines, it can't be moved to a
+ * straight OCTEON-style debug bus without rewriting the whole thing.
+ * This register selects engines for debug observations for the LUE's four 16-bit debug muxes and
+ * selects context for observation.
  */
 union cvmx_ase_lue_dbg_ctl0 {
 	uint64_t u64;
@@ -1071,17 +1024,17 @@ union cvmx_ase_lue_dbg_ctl0 {
 	uint64_t reserved_39_39               : 1;
 	uint64_t sel0                         : 7;  /**< Debug select for LUE's mux 0. */
 	uint64_t reserved_20_31               : 12;
-	uint64_t ctx_col_dbg                  : 4;  /**< 32-bit column of context information to display in the ASE_LUE_CTX debug field.
+	uint64_t ctx_col_dbg                  : 4;  /**< Context column debug. 32-bit column of context information to display in the ASE_LUE_CTX
+                                                         debug field.
                                                          TWE: Valid column values 0-12.
                                                          BWE: Valid column values 0-2.
                                                          RWE: Valid column values 0-8. */
 	uint64_t reserved_13_15               : 3;
-	uint64_t ctx_eng_dbg                  : 5;  /**< Engine ID from which context information will be made
-                                                         available in the ASE_LUE_CTX debug field.
-                                                         Valid values are 0-19. */
+	uint64_t ctx_eng_dbg                  : 5;  /**< Engine ID from which context information will be made available in the ASE_LUE_CTX debug
+                                                         field. Must be 0 to 19. */
 	uint64_t reserved_2_7                 : 6;
-	uint64_t ctx_src_dbg                  : 2;  /**< Engine type from which context information will be made
-                                                         available in the ASE_LUE_CTX debug field.
+	uint64_t ctx_src_dbg                  : 2;  /**< Engine type from which context information will be made available in the ASE_LUE_CTX debug
+                                                         field.
                                                          0 = Tree Walk Engine
                                                          1 = Bucket Walk Engine
                                                          2 = Rule Walk Engine
@@ -1110,60 +1063,43 @@ typedef union cvmx_ase_lue_dbg_ctl0 cvmx_ase_lue_dbg_ctl0_t;
 /**
  * cvmx_ase_lue_dbg_ctl1
  *
- * Select engines for debug observations for the LUE's 4 16-bit debug muxes.
- * INTERNAL: The per-engine filtering from NSP is not really worth moving to DTX-style
- * addressing.
- * INTERNAL: We are not rewiring the NSP's 16-bit debug bus. Instead we are duplicating that mux
- * 4 times to give Octeon better observability.
+ * The per-engine filtering from NSP is not really worth moving to DTX-style addressing.
+ * We are not rewiring the NSP's 16-bit debug bus. Instead we are duplicating that mux 4 times to
+ * give OCTEON better observability.
+ * This register selects engines for debug observations for the LUE's four 16-bit debug muxes.
  */
 union cvmx_ase_lue_dbg_ctl1 {
 	uint64_t u64;
 	struct cvmx_ase_lue_dbg_ctl1_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_62_63               : 2;
-	uint64_t rmc_dbg3                     : 2;  /**< Mux 3.
-                                                         Selects which of the 4 RMC modules will present signals
-                                                         on the debug bus when a RMC signal group is selected for
-                                                         observation. */
+	uint64_t rmc_dbg3                     : 2;  /**< Mux 3. Selects which of the four RMC modules will present signals on the debug bus when a
+                                                         RMC signal group is selected for observation. */
 	uint64_t reserved_58_59               : 2;
-	uint64_t rmc_dbg2                     : 2;  /**< Mux 2.
-                                                         Selects which of the 4 RMC modules will present signals
-                                                         on the debug bus when a RMC signal group is selected for
-                                                         observation. */
+	uint64_t rmc_dbg2                     : 2;  /**< Mux 2. Selects which of the four RMC modules will present signals on the debug bus when a
+                                                         RMC signal group is selected for observation. */
 	uint64_t reserved_54_55               : 2;
-	uint64_t rmc_dbg1                     : 2;  /**< Mux 1.
-                                                         Selects which of the 4 RMC modules will present signals
-                                                         on the debug bus when a RMC signal group is selected for
-                                                         observation. */
+	uint64_t rmc_dbg1                     : 2;  /**< Mux 1. Selects which of the four RMC modules will present signals on the debug bus when a
+                                                         RMC signal group is selected for observation. */
 	uint64_t reserved_50_51               : 2;
-	uint64_t rmc_dbg0                     : 2;  /**< Mux 0.
-                                                         Selects which of the 4 RMC modules will present signals
-                                                         on the debug bus when a RMC signal group is selected for
-                                                         observation. */
+	uint64_t rmc_dbg0                     : 2;  /**< Mux 0. Selects which of the four RMC modules will present signals on the debug bus when a
+                                                         RMC signal group is selected for observation. */
 	uint64_t reserved_29_47               : 19;
-	uint64_t eng_id_dbg3                  : 5;  /**< Mux 3.
-                                                         Selects which Tree Walk Engine or Bucket Walk Engine will
-                                                         present signals on the debug bus when a TWC or BWC signal
-                                                         group is selected for observation.
-                                                         Valid values are 0-19. */
+	uint64_t eng_id_dbg3                  : 5;  /**< Mux 3. Selects which Tree Walk Engine or Bucket Walk Engine will present signals on the
+                                                         debug bus when a TWC or BWC signal group is selected for observation. Valid values are
+                                                         0-19. */
 	uint64_t reserved_21_23               : 3;
-	uint64_t eng_id_dbg2                  : 5;  /**< Mux 2.
-                                                         Selects which Tree Walk Engine or Bucket Walk Engine will
-                                                         present signals on the debug bus when a TWC or BWC signal
-                                                         group is selected for observation.
-                                                         Valid values are 0-19. */
+	uint64_t eng_id_dbg2                  : 5;  /**< Mux 2. Selects which Tree Walk Engine or Bucket Walk Engine will present signals on the
+                                                         debug bus when a TWC or BWC signal group is selected for observation. Valid values are
+                                                         0-19. */
 	uint64_t reserved_13_15               : 3;
-	uint64_t eng_id_dbg1                  : 5;  /**< Mux 1.
-                                                         Selects which Tree Walk Engine or Bucket Walk Engine will
-                                                         present signals on the debug bus when a TWC or BWC signal
-                                                         group is selected for observation.
-                                                         Valid values are 0-19. */
+	uint64_t eng_id_dbg1                  : 5;  /**< Mux 1. Selects which Tree Walk Engine or Bucket Walk Engine will present signals on the
+                                                         debug bus when a TWC or BWC signal group is selected for observation. Valid values are
+                                                         0-19. */
 	uint64_t reserved_5_7                 : 3;
-	uint64_t eng_id_dbg0                  : 5;  /**< Mux 0.
-                                                         Selects which Tree Walk Engine or Bucket Walk Engine will
-                                                         present signals on the debug bus when a TWC or BWC signal
-                                                         group is selected for observation.
-                                                         Valid values are 0-19. */
+	uint64_t eng_id_dbg0                  : 5;  /**< Mux 0. Selects which Tree Walk Engine or Bucket Walk Engine will present signals on the
+                                                         debug bus when a TWC or BWC signal group is selected for observation. Valid values are
+                                                         0-19. */
 #else
 	uint64_t eng_id_dbg0                  : 5;
 	uint64_t reserved_5_7                 : 3;
@@ -1190,56 +1126,41 @@ typedef union cvmx_ase_lue_dbg_ctl1 cvmx_ase_lue_dbg_ctl1_t;
 /**
  * cvmx_ase_lue_error_log
  *
- * "
- * Logs information to help diagnose LUE errors indicated in ASE_*_INT[LUE*].
- *
- * Information is only logged to this CSR if the bit corresponding to the ERROR_ID
- * is set in ASE_LUE_ERROR_LOG_ENABLE.
- *
- * The contents of this CSR are invalid if no fields are set in ASE_*_INT[LUE*].
- *
- * The contents of this CSR are retained until all the bits in the ASE_*_INT[LUE*]
- * are cleared, or an error occurs that is of higher-priority than the error for
+ * This register logs information to help diagnose LUE errors indicated in ASE_*_INT[LUE*].
+ * Information is only logged to this register if the bit corresponding to the ERROR_ID is set in
+ * ASE_LUE_ERROR_LOG_ENABLE. The contents of this register are invalid if no fields are set in
+ * ASE_*_INT[LUE*]. The contents of this register are retained until all the bits in the
+ * ASE_*_INT[LUE*] are cleared, or an error occurs that is of higher-priority than the error for
  * which information is currently logged by this CSR.
- *
- * The priority of the error is encoded by the enumerated values in ASE_LUE_ERROR_ID_E.
- * The highest priority error is KDT_DBE, the lowest is RFT_SBE.
- * For RFT errors, if multiple errors of equal weight are reported
- * during a clock cycle, the error on the local RFT is reported with highest
- * priority, followed by RMC0, RMC1, RMC2, RMC3.
- *
- * Only interrupts listed in ASE_LUE_ERROR_ID_E log errors.
- * "
+ * The priority of the error is encoded by the enumerated values in ASE_LUE_ERROR_ID_E. The
+ * highest priority error is KDT_DBE, the lowest is RFT_SBE. For RFT errors, if multiple errors
+ * of equal weight are reported during a clock cycle, the error on the local RFT is reported with
+ * highest priority, followed by RMC0, RMC1, RMC2, RMC3. Only interrupts listed in
+ * ASE_LUE_ERROR_ID_E log errors.
  */
 union cvmx_ase_lue_error_log {
 	uint64_t u64;
 	struct cvmx_ase_lue_error_log_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_62_63               : 2;
-	uint64_t error_id                     : 6;  /**< Type of error logged. See ASE_LUE_ERROR_ID_E.
-                                                         If ERROR_ID == HR_ERR_LOG, see HR_ERR_ID for how to decode the DATA field.
-                                                         Otherwise, ERROR_ID indicates how to decode the DATA field. */
+	uint64_t error_id                     : 6;  /**< Type of error logged. See ASE_LUE_ERROR_ID_E. If ERROR_ID == HR_ERR_LOG, see HR_ERR_ID for
+                                                         how to decode the DATA field. Otherwise, ERROR_ID indicates how to decode the DATA field. */
 	uint64_t reserved_54_55               : 2;
-	uint64_t hr_err_id                    : 6;  /**< Type of Host error logged. See ASE_LUE_ERROR_ID_E.
-                                                         Ignore HR_ERR_ID if ERROR_ID != HR_ERR_LOG.
-                                                         Indicates how to decode the DATA field if ERROR_ID == HR_ERR_LOG. */
-	uint64_t data                         : 48; /**< "
-                                                         Error Logging Information
-                                                         The information in this field takes on different meanings
-                                                         depending on the type of error that is latched in the
-                                                         ASE_*_INT[LUE*] fields.
-                                                         Decode this field based on ERROR_ID and HR_ERR_ID:
-                                                           TIC_MISS or TIC_MULTI_HIT: see ASE_LUE_ERROR_LOG_TIC_S.
-                                                           TIC_BAD_WRITE: see ASE_LUE_ERROR_LOG_TIC_BAD_WRITE_S.
-                                                           INVALID_TBL_ACC: see ASE_LUE_ERROR_LOG_INVTBLACC_S.
-                                                           INVALID_REQ: see ASE_LUE_ERROR_LOG_INVREQ_S.
-                                                           RME_FATAL: see ASE_LUE_ERROR_LOG_RME_FATAL_S.
-                                                           KDB_*BE: see ASE_LUE_ERROR_LOG_KDB_ECC_S.
-                                                           TAT_*BE: see ASE_LUE_ERROR_LOG_TAT_ECC_S.
-                                                           RFT_*BE: see ASE_LUE_ERROR_LOG_RFT_ECC_S.
-                                                           RUL_*BE: see ASE_LUE_ERROR_LOG_RUL_ECC_S.
-                                                           KDT_*BE: see ASE_LUE_ERROR_LOG_KDT_ECC_S.
-                                                         " */
+	uint64_t hr_err_id                    : 6;  /**< Type of host error logged. See ASE_LUE_ERROR_ID_E. Ignore HR_ERR_ID if ERROR_ID !=
+                                                         HR_ERR_LOG. Indicates how to decode the DATA field if ERROR_ID == HR_ERR_LOG. */
+	uint64_t data                         : 48; /**< Error logging information. The information in this field takes on different meanings
+                                                         depending on the type of error that is latched in the ASE_*_INT[LUE*] fields. Decode this
+                                                         field based on ERROR_ID and HR_ERR_ID:
+                                                         TIC_MISS or TIC_MULTI_HIT, see ASE_LUE_ERROR_LOG_TIC_S.
+                                                         TIC_BAD_WRITE, see ASE_LUE_ERROR_LOG_TIC_BAD_WRITE_S.
+                                                         INVALID_TBL_ACC, see ASE_LUE_ERROR_LOG_INVTBLACC_S.
+                                                         INVALID_REQ, see ASE_LUE_ERROR_LOG_INVREQ_S.
+                                                         RME_FATAL, see ASE_LUE_ERROR_LOG_RME_FATAL_S.
+                                                         KDB_*BE, see ASE_LUE_ERROR_LOG_KDB_ECC_S.
+                                                         TAT_*BE, see ASE_LUE_ERROR_LOG_TAT_ECC_S.
+                                                         RFT_*BE: see ASE_LUE_ERROR_LOG_RFT_ECC_S.
+                                                         RUL_*BE, see ASE_LUE_ERROR_LOG_RUL_ECC_S.
+                                                         KDT_*BE, see ASE_LUE_ERROR_LOG_KDT_ECC_S. */
 #else
 	uint64_t data                         : 48;
 	uint64_t hr_err_id                    : 6;
@@ -1255,8 +1176,8 @@ typedef union cvmx_ase_lue_error_log cvmx_ase_lue_error_log_t;
 /**
  * cvmx_ase_lue_error_log_enable
  *
- * Each field in this CSR, when set, allows the corresponding field in the
- * ASE_*_INT[LUE*] to log information in the ASE_LUE_ERROR_LOG CSR upon assertion.
+ * Each field in this register, when set, allows the corresponding field in the ASE_*_INT[LUE*]
+ * to log information in ASE_LUE_ERROR_LOG upon assertion.
  */
 union cvmx_ase_lue_error_log_enable {
 	uint64_t u64;
@@ -1314,7 +1235,7 @@ typedef union cvmx_ase_lue_error_log_enable cvmx_ase_lue_error_log_enable_t;
 /**
  * cvmx_ase_lue_perf_filt
  *
- * Filters for performance counter events.
+ * This register contains filters for performance counter events.
  *
  */
 union cvmx_ase_lue_perf_filt {
@@ -1322,35 +1243,27 @@ union cvmx_ase_lue_perf_filt {
 	struct cvmx_ase_lue_perf_filt_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_49_63               : 15;
-	uint64_t hst_tta_tic_id               : 9;  /**< Lookups to the TTA in the HST module will trigger a
-                                                         performance event if the lookup is for the TIC ID value
-                                                         indicated in this field. See ASE_TBLDAT_TIC_S for
-                                                         description of TIC_ID. */
+	uint64_t hst_tta_tic_id               : 9;  /**< Lookups to the TTA in the HST module will trigger a performance event if the lookup is for
+                                                         the TIC ID value indicated in this field. See ASE_TBLDAT_TIC_S for description of TIC_ID. */
 	uint64_t reserved_38_39               : 2;
-	uint64_t hst_rft_kftidx               : 6;  /**< Lookups to the RFT in the HST module will trigger a
-                                                         performance event if the lookup is for the KFTIDX value
-                                                         indicated in this field. */
+	uint64_t hst_rft_kftidx               : 6;  /**< Lookups to the RFT in the HST module will trigger a performance event if the lookup is for
+                                                         the KFTIDX value indicated in this field. */
 	uint64_t reserved_26_31               : 6;
-	uint64_t sel_all_perf                 : 1;  /**< Disable Filtering.
-                                                         When set, overrides the setting of SEL_ID_PERF for some
-                                                         performance counter events.
-                                                         This field is used by the TWC, BWC, and STR modules. */
-	uint64_t sel_id_perf                  : 1;  /**< Selects how the value in the ENG_KID_ID_PERF field is interpreted.
-                                                         This field is used by the TWC, BWC, and STR modules. */
+	uint64_t sel_all_perf                 : 1;  /**< Disable Filtering. When set, overrides the setting of SEL_ID_PERF for some performance
+                                                         counter events. This field is used by the TWC, BWC, and STR modules. */
+	uint64_t sel_id_perf                  : 1;  /**< Selects how the value in the ENG_KID_ID_PERF field is interpreted. This field is used by
+                                                         the TWC, BWC, and STR modules. */
 	uint64_t reserved_22_23               : 2;
-	uint64_t eng_kid_id_perf              : 6;  /**< When SEL_ID_PERF is clear, this field is interpreted as an 8-bit KID.
-                                                         When SEL_ID_PERF is set, the lower five bits of this field are
-                                                         interpreted as the Engine ID and the upper three bits are ignored,
-                                                         and valid values are 0-19.
-                                                         This field is used by the TWC, BWC, and STR modules. */
+	uint64_t eng_kid_id_perf              : 6;  /**< When SEL_ID_PERF is clear, this field is interpreted as an 8-bit KID. When SEL_ID_PERF is
+                                                         set, the lower five bits of this field are interpreted as the Engine ID and the upper
+                                                         three bits are ignored, and valid values are 0-19. This field is used by the TWC, BWC, and
+                                                         STR modules. */
 	uint64_t reserved_14_15               : 2;
 	uint64_t rmc_perf                     : 2;  /**< RMC to monitor for performance events. */
 	uint64_t reserved_11_11               : 1;
-	uint64_t perf_bwc_eng                 : 5;  /**< BWE to monitor for performance events.
-                                                         Valid values are 0-19. */
+	uint64_t perf_bwc_eng                 : 5;  /**< BWE to monitor for performance events. Valid values are 0-19. */
 	uint64_t reserved_5_5                 : 1;
-	uint64_t perf_twc_eng                 : 5;  /**< TWE to monitor for performance events.
-                                                         Valid values are 0-19. */
+	uint64_t perf_twc_eng                 : 5;  /**< TWE to monitor for performance events. Valid values are 0-19. */
 #else
 	uint64_t perf_twc_eng                 : 5;
 	uint64_t reserved_5_5                 : 1;
@@ -1376,35 +1289,34 @@ typedef union cvmx_ase_lue_perf_filt cvmx_ase_lue_perf_filt_t;
 /**
  * cvmx_ase_lue_performance_control#
  *
- * A write to a LUE_PERFORMANCE_CONTROL* CSR which sets the ENABLE or
- * field to 0x1 must not change the values of any other fields in the CSR.
+ * A write to LUE_PERFORMANCE_CONTROL*, which sets the ENABLE field to 0x1 must not change the
+ * values of any other fields in the CSR.
  */
 union cvmx_ase_lue_performance_controlx {
 	uint64_t u64;
 	struct cvmx_ase_lue_performance_controlx_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_32_63               : 32;
-	uint64_t frozen                       : 1;  /**< Indicates that the counter is frozen (i.e one shot
-                                                         event occurred) Remains frozen until the clear bit
-                                                         written. */
-	uint64_t clear                        : 1;  /**< Writing 1 to this bit will generate a hardware pulse
-                                                         that will clear the LUE_PERFOMANCE_COUNTER and
-                                                         field FROZEN of this register. */
-	uint64_t enable                       : 1;  /**< Enable the counter. This bit is set to 1 to use
-                                                         the corresponding counter. */
+	uint64_t frozen                       : 1;  /**< Indicates that the counter is frozen (i.e one shot event occurred) and remains frozen
+                                                         until the clear bit written. */
+	uint64_t clear                        : 1;  /**< Writing 1 to this bit generates a hardware pulse that clears the LUE_PERFOMANCE_COUNTER
+                                                         and field FROZEN of this register. */
+	uint64_t enable                       : 1;  /**< Enable the counter. This bit is set to 1 to use the corresponding counter. */
 	uint64_t reserved_27_28               : 2;
-	uint64_t mode                         : 3;  /**< Performance Counter Mode.
-                                                         Bit[24] - '1' Event counted SEL0 | SEL1 | SEL2
-                                                                   '0' Event counted SEL0 & SEL1 & SEL2
-                                                         Bits[26:25] - 2'b00 - Pos Edge
-                                                                       2'b01 - Neg Edge
-                                                                       2'b10 - Level
-                                                                       2'b11 - One shot */
-	uint64_t sel2                         : 8;  /**< Performance Counter Event Select, third mux.
+	uint64_t mode                         : 3;  /**< Performance counter mode.
+                                                         Bit<24>:
+                                                         1 = Event counted SEL0 | SEL1 | SEL2.
+                                                         0 = Event counted SEL0 & SEL1 & SEL2.
+                                                         Bits<26:25>:
+                                                         0x0 = Pos Edge.
+                                                         0x1 = Neg Edge.
+                                                         0x2 = Level.
+                                                         0x3 = One shot. */
+	uint64_t sel2                         : 8;  /**< Performance counter event select, third mux.
                                                          INTERNAL: For details of mapping of events to selects, see lue.perf. */
-	uint64_t sel1                         : 8;  /**< Performance Counter Event Select, second mux.
+	uint64_t sel1                         : 8;  /**< Performance counter event select, second mux.
                                                          INTERNAL: For details of mapping of events to selects, see lue.perf. */
-	uint64_t sel0                         : 8;  /**< Performance Counter Event Select, first mux.
+	uint64_t sel0                         : 8;  /**< Performance counter event select, first mux.
                                                          INTERNAL: For details of mapping of events to selects, see lue.perf. */
 #else
 	uint64_t sel0                         : 8;
@@ -1425,39 +1337,36 @@ typedef union cvmx_ase_lue_performance_controlx cvmx_ase_lue_performance_control
 /**
  * cvmx_ase_lue_performance_control0
  *
- * A write to a LUE_PERFORMANCE_CONTROL* CSR which sets the ENABLE
- * field to 0x1 must not change the values of any other fields in the CSR.
+ * A write to LUE_PERFORMANCE_CONTROL*, which sets the ENABLE field to 0x1 must not change the
+ * values of any other fields in the CSR.
  */
 union cvmx_ase_lue_performance_control0 {
 	uint64_t u64;
 	struct cvmx_ase_lue_performance_control0_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_32_63               : 32;
-	uint64_t frozen                       : 1;  /**< Indicates that the counter is frozen (i.e one shot
-                                                         event occurred) Remains frozen until the clear bit
-                                                         written. */
-	uint64_t clear                        : 1;  /**< Writing 1 to this bit will generate a hardware pulse
-                                                         that will clear the LUE_PERFOMANCE_COUNTER and
-                                                         field FROZEN of this register. */
-	uint64_t enable                       : 1;  /**< Enable the counter. This bit is set to 1 to use
-                                                         the corresponding counter. */
-	uint64_t global_stop                  : 1;  /**< Writing a 1 to this bit stops all the counters in
-                                                         the group of eight counters. This bit is only
-                                                         implemented in the first control register of a
-                                                         counter group. */
+	uint64_t frozen                       : 1;  /**< Indicates that the counter is frozen (i.e one shot event occurred) and remains frozen
+                                                         until the clear bit written. */
+	uint64_t clear                        : 1;  /**< Writing 1 to this bit generates a hardware pulse that clears the LUE_PERFOMANCE_COUNTER
+                                                         and field FROZEN of this register. */
+	uint64_t enable                       : 1;  /**< Enable the counter. This bit is set to 1 to use the corresponding counter. */
+	uint64_t global_stop                  : 1;  /**< Writing a 1 to this bit stops all the counters in the group of eight counters. This bit is
+                                                         only implemented in the first control register of a counter group. */
 	uint64_t reserved_27_27               : 1;
-	uint64_t mode                         : 3;  /**< Performance Counter Mode.
-                                                         Bit[24] - '1' Event counted SEL0 | SEL1 | SEL2
-                                                                   '0' Event counted SEL0 & SEL1 & SEL2
-                                                         Bits[26:25] - 2'b00 - Pos Edge
-                                                                       2'b01 - Neg Edge
-                                                                       2'b10 - Level
-                                                                       2'b11 - One shot */
-	uint64_t sel2                         : 8;  /**< Performance Counter Event Select, third mux.
+	uint64_t mode                         : 3;  /**< Performance counter mode.
+                                                         Bit<24>:
+                                                         1 = Event counted SEL0.
+                                                         0 = Event counted SEL0 & SEL1 & SEL2.
+                                                         Bits<26:25>:
+                                                         0x0 = Pos Edge.
+                                                         0x1 = Neg Edge.
+                                                         0x2 = Level.
+                                                         0x3 = One shot. */
+	uint64_t sel2                         : 8;  /**< Performance counter event select, third mux.
                                                          INTERNAL: For details of mapping of events to selects, see lue.perf. */
-	uint64_t sel1                         : 8;  /**< Performance Counter Event Select, second mux.
+	uint64_t sel1                         : 8;  /**< Performance counter event select, second mux.
                                                          INTERNAL: For details of mapping of events to selects, see lue.perf. */
-	uint64_t sel0                         : 8;  /**< Performance Counter Event Select, first mux.
+	uint64_t sel0                         : 8;  /**< Performance counter event select, first mux.
                                                          INTERNAL: For details of mapping of events to selects, see lue.perf. */
 #else
 	uint64_t sel0                         : 8;
@@ -1479,42 +1388,37 @@ typedef union cvmx_ase_lue_performance_control0 cvmx_ase_lue_performance_control
 /**
  * cvmx_ase_lue_performance_control1
  *
- * A write to a LUE_PERFORMANCE_CONTROL* CSR which sets the ENABLE or
- * GLOBAL_ENABLE fields to 0x1 must not change the values of any other
- * fields in the CSR.
+ * A write to LUE_PERFORMANCE_CONTROL*, which sets the ENABLE or GLOBAL_ENABLE fields to 0x1 must
+ * not change the values of any other fields in the CSR.
  */
 union cvmx_ase_lue_performance_control1 {
 	uint64_t u64;
 	struct cvmx_ase_lue_performance_control1_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_32_63               : 32;
-	uint64_t frozen                       : 1;  /**< Indicates that the counter is frozen (i.e one shot
-                                                         event occurred) Remains frozen until the clear bit
-                                                         written. */
-	uint64_t clear                        : 1;  /**< Writing 1 to this bit will generate a hardware pulse
-                                                         that will clear the LUE_PERFOMANCE_COUNTER and
-                                                         field FROZEN of this register. */
-	uint64_t enable                       : 1;  /**< Enable the counter. This bit is set to 1 to use
-                                                         the corresponding counter. */
-	uint64_t global_enable                : 1;  /**< Writing a 1 to this bit starts all the counters in
-                                                         the group of eight counters. This bit is only
-                                                         implemented in the second control register of a
-                                                         counter group.
-                                                         Counters are enabled by the OR of the individual ENABLEs
-                                                         and GLOBAL_ENABLE. */
+	uint64_t frozen                       : 1;  /**< Indicates that the counter is frozen (i.e one shot event occurred) and remains frozen
+                                                         until the clear bit written. */
+	uint64_t clear                        : 1;  /**< Writing 1 to this bit generates a hardware pulse that clears the LUE_PERFOMANCE_COUNTER
+                                                         and field FROZEN of this register. */
+	uint64_t enable                       : 1;  /**< Enable the counter. This bit is set to 1 to use the corresponding counter. */
+	uint64_t global_enable                : 1;  /**< Writing a 1 to this bit starts all the counters in the group of eight counters. This bit
+                                                         is only implemented in the second control register of a counter group. Counters are
+                                                         enabled by the OR of the individual ENABLEs and GLOBAL_ENABLE. */
 	uint64_t reserved_27_27               : 1;
-	uint64_t mode                         : 3;  /**< Performance Counter Mode.
-                                                         Bit[24] - '1' Event counted SEL0 | SEL1 | SEL2
-                                                                   '0' Event counted SEL0 & SEL1 & SEL2
-                                                         Bits[26:25] - 2'b00 - Pos Edge
-                                                                       2'b01 - Neg Edge
-                                                                       2'b10 - Level
-                                                                       2'b11 - One shot */
-	uint64_t sel2                         : 8;  /**< Performance Counter Event Select, third mux.
+	uint64_t mode                         : 3;  /**< Performance counter mode.
+                                                         Bit<24>:
+                                                         1 = Event counted SEL0 | SEL1 | SEL2
+                                                         0 = Event counted SEL0 & SEL1 & SEL2
+                                                         Bits<26:25>:
+                                                         0x0 = Pos Edge.
+                                                         0x1 = Neg Edge.
+                                                         0x2 = Level.
+                                                         0x3 = One shot. */
+	uint64_t sel2                         : 8;  /**< Performance counter event select, third mux.
                                                          INTERNAL: For details of mapping of events to selects, see lue.perf. */
-	uint64_t sel1                         : 8;  /**< Performance Counter Event Select, second mux.
+	uint64_t sel1                         : 8;  /**< Performance counter event select, second mux.
                                                          INTERNAL: For details of mapping of events to selects, see lue.perf. */
-	uint64_t sel0                         : 8;  /**< Performance Counter Event Select, first mux.
+	uint64_t sel0                         : 8;  /**< Performance counter event select, first mux.
                                                          INTERNAL: For details of mapping of events to selects, see lue.perf. */
 #else
 	uint64_t sel0                         : 8;
@@ -1535,18 +1439,13 @@ typedef union cvmx_ase_lue_performance_control1 cvmx_ase_lue_performance_control
 
 /**
  * cvmx_ase_lue_performance_counter#
- *
- * A write to a LUE_PERFORMANCE_CONTROL* CSR which sets the ENABLE or
- * GLOBAL_ENABLE fields to 0x1 must not at the same time
- * change the values of any other fields in the CSR.
  */
 union cvmx_ase_lue_performance_counterx {
 	uint64_t u64;
 	struct cvmx_ase_lue_performance_counterx_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t perf_cnt                     : 48; /**< Reflect the value of the perfomance counter.
-                                                         Please see LUE_PERFOMANCE_CONTROL register. */
+	uint64_t perf_cnt                     : 48; /**< Reflect the value of the performance counter. See ASE_LUE_PERFORMANCE_CONTROL* registers. */
 #else
 	uint64_t perf_cnt                     : 48;
 	uint64_t reserved_48_63               : 16;
@@ -1578,7 +1477,7 @@ typedef union cvmx_ase_lue_spare cvmx_ase_lue_spare_t;
 /**
  * cvmx_ase_lue_twe_bwe_enable
  *
- * Enable tree/bucket walk engines.
+ * This register enables the tree/bucket walk engines.
  *
  */
 union cvmx_ase_lue_twe_bwe_enable {
@@ -1586,12 +1485,11 @@ union cvmx_ase_lue_twe_bwe_enable {
 	struct cvmx_ase_lue_twe_bwe_enable_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_52_63               : 12;
-	uint64_t bwe_en                       : 20; /**< Each bit enables a Bucket Walk Engine to accept a thread
-                                                         graduation from a TWE.
-                                                         Meaning of enable bits: [BWE19 ... BWE0]. */
+	uint64_t bwe_en                       : 20; /**< Each bit enables a bucket walk engine to accept a thread graduation from a TWE. Meaning of
+                                                         enable bits: [BWE19 ... BWE0]. */
 	uint64_t reserved_20_31               : 12;
-	uint64_t twe_en                       : 20; /**< Each bit enables a Tree Walk Engine to accept new Lookup requests.
-                                                         Meaning of enable bits: [TWE19 ... TWE0]. */
+	uint64_t twe_en                       : 20; /**< Each bit enables a tree walk engine to accept new lookup requests. Meaning of enable bits:
+                                                         [TWE19 ... TWE0]. */
 #else
 	uint64_t twe_en                       : 20;
 	uint64_t reserved_20_31               : 12;
@@ -1606,36 +1504,25 @@ typedef union cvmx_ase_lue_twe_bwe_enable cvmx_ase_lue_twe_bwe_enable_t;
 /**
  * cvmx_ase_luf_error_log
  *
- * "
- * Logs information to help diagnose Look Up Frontend (LookUp Input/Output
- * Pre/Postprocessor) errors as indicated in ASE_*_INT[LIP* /LOP*].
- *
- * The contents of this CSR are invalid if no fields are set in ASE_*_INT[LIP* /LOP*].
- *
- * The contents of this CSR are retained until all the bits in the ASE_*_INT[LIP* /LOP*]
- * are cleared, or an error occurs that is of higher-priority than the error for
- * which information is currently logged by this CSR.
- *
- * The priority of the error is encoded by the enumerated values in ASE_LUF_ERROR_ID_E.
- * Only interrupts listed in ASE_LUF_ERROR_ID_E log errors.
- * "
+ * The information logged in this register helps diagnose lookup front end (LUF) (look up
+ * input/output pre/postprocessor) errors as indicated in ASE_*_INT[LIP* /LOP*]. The contents of
+ * this CSR are invalid if no fields are set in ASE_*_INT[LIP* /LOP*]. The contents of this CSR
+ * are retained until all the bits in the ASE_*_INT[LIP* /LOP*] are cleared, or an error occurs
+ * that is of higher-priority than the error for which information is currently logged by this
+ * CSR. The priority of the error is encoded by the enumerated values in ASE_LUF_ERROR_ID_E. Only
+ * interrupts listed in ASE_LUF_ERROR_ID_E log errors.
  */
 union cvmx_ase_luf_error_log {
 	uint64_t u64;
 	struct cvmx_ase_luf_error_log_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_60_63               : 4;
-	uint64_t error_id                     : 4;  /**< Type of error logged. See ASE_LUF_ERROR_ID_E.
-                                                         Also indicates how to decode the DATA field. */
-	uint64_t data                         : 56; /**< "
-                                                         Error Logging Information
-                                                         The information in this field takes on different meanings
-                                                         depending on the type of error that is latched in the
-                                                         ASE_*_INT[LIP* /LOP*] fields.
+	uint64_t error_id                     : 4;  /**< Type of error logged. See ASE_LUF_ERROR_ID_E. Also indicates how to decode the DATA field. */
+	uint64_t data                         : 56; /**< Error logging information. The information in this field takes on different meanings
+                                                         depending on the type of error that is latched in the ASE_*_INT[LIP* /LOP*] fields.
                                                          Decode this field based on ERROR_ID.
-                                                           LIP_*_*BE: see ASE_LUF_ERROR_LOG_LIP_ECC_S.
-                                                           LOP_TXB_*BE: see ASE_LUF_ERROR_LOG_LOP_ECC_S.
-                                                         " */
+                                                         For LIP_*_*BE, see ASE_LUF_ERROR_LOG_LIP_ECC_S.
+                                                         For LOP_TXB_*BE, see ASE_LUF_ERROR_LOG_LOP_ECC_S. */
 #else
 	uint64_t data                         : 56;
 	uint64_t error_id                     : 4;
@@ -1649,7 +1536,7 @@ typedef union cvmx_ase_luf_error_log cvmx_ase_luf_error_log_t;
 /**
  * cvmx_ase_sft_rst
  *
- * Allows soft reset.
+ * This register allows soft reset.
  *
  */
 union cvmx_ase_sft_rst {
@@ -1659,9 +1546,9 @@ union cvmx_ase_sft_rst {
 	uint64_t busy                         : 1;  /**< When 1, ASE is busy completing reset. No access except the reading of this bit should
                                                          occur to the ASE until this is clear. */
 	uint64_t reserved_1_62                : 62;
-	uint64_t rst                          : 1;  /**< When set to 1 by software, ASE gets a short reset pulse (eight cycles in duration).
-                                                         Everything but the RSL interface is reset (including CSRs).
-                                                         Hardware will clear this bit when the reset is complete. */
+	uint64_t rst                          : 1;  /**< When set to 1 by software, ASE gets a short reset pulse (32 cycles in duration).
+                                                         Everything but the RSL interface is reset (including CSRs). Hardware clears this bit when
+                                                         the reset is complete. */
 #else
 	uint64_t rst                          : 1;
 	uint64_t reserved_1_62                : 62;
diff --git a/arch/mips/include/asm/octeon/cvmx-asm.h b/arch/mips/include/asm/octeon/cvmx-asm.h
index 659632f..2755a0f 100644
--- a/arch/mips/include/asm/octeon/cvmx-asm.h
+++ b/arch/mips/include/asm/octeon/cvmx-asm.h
@@ -42,7 +42,7 @@
  *
  * This is file defines ASM primitives for the executive.
 
- * <hr>$Revision: 84791 $<hr>
+ * <hr>$Revision: 86220 $<hr>
  *
  *
  */
@@ -66,6 +66,7 @@
 #define COP0_ENTRYLO0	$2,0	/* TLB entryLo0 */
 #define COP0_ENTRYLO1	$3,0	/* TLB entryLo1 */
 #define COP0_CONTEXT	$4,0	/* Context */
+#define COP0_USERLOCAL	$4,2	/* User Local (OCTEON II and later) */
 #define COP0_PAGEMASK	$5,0	/* TLB pagemask */
 #define COP0_PAGEGRAIN	$5,1	/* TLB config for max page sizes */
 #define COP0_WIRED	$6,0	/* TLB number of wired entries */
@@ -89,6 +90,8 @@
 #define COP0_CONFIG1	$16,1	/* Misc config options */
 #define COP0_CONFIG2	$16,2	/* Misc config options */
 #define COP0_CONFIG3	$16,3	/* Misc config options */
+#define COP0_CONFIG4	$16,4	/* Misc config options (OCTEON III and later) */
+#define COP0_CONFIG5	$16,5	/* Misc config options (OCTEON III and later) */
 #define COP0_WATCHLO0	$18,0	/* Address watch registers */
 #define COP0_WATCHLO1	$18,1	/* Address watch registers */
 #define COP0_WATCHHI0	$19,0	/* Address watch registers */
@@ -113,7 +116,10 @@
 #define COP0_DATAHID	$29,3	/* ? */
 #define COP0_ERROREPC	$30,0	/* Error PC */
 #define COP0_DESAVE	$31,0	/* Debug scratch area */
-
+#define COP0_KSCRATCH1	$31,2	/* KScratch 1 (OCTEON II and later) */
+#define COP0_KSCRATCH2	$31,3	/* KScratch 2 (OCTEON II and later) */
+#define COP0_KSCRATCH3	$31,4	/* KScratch 3 (OCTEON III and later) */
+#define COP0_KSCRATCH4	$31,5	/* KScratch 3 (OCTEON III and later) */
 #define COP1_FIR	$0	/* Floating point implementation register */
 #define COP1_FCSR	$31	/* Floating point control and status register */
 
diff --git a/arch/mips/include/asm/octeon/cvmx-bgxx-defs.h b/arch/mips/include/asm/octeon/cvmx-bgxx-defs.h
index 5139b4a..9dc33d2 100644
--- a/arch/mips/include/asm/octeon/cvmx-bgxx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-bgxx-defs.h
@@ -1904,10 +1904,39 @@ static inline uint64_t CVMX_BGXX_SPU_SDSX_STATES(unsigned long offset, unsigned
 /**
  * cvmx_bgx#_cmr#_config
  *
- * "***************************************************************
- * BGX Global per lmac related CSR (may be sent to any of GMP, SMU, SPU)
- * ***************************************************************
- * Logical PCS and MAC Configuration"
+ * Logical MAC/PCS configuration registers; one per LMAC. The maximum number of LMACs (and
+ * maximum LMAC ID) that can be enabled by these registers is limited by
+ * BGX(0..5)_CMR_RX_LMACS[LMACS] and BGX(0..5)_CMR_TX_LMACS[LMACS]. When multiple LMACs are
+ * enabled, they must be configured with the same [LMAC_TYPE] value.
+ * Typical configurations:
+ *   ---------------------------------------------------------------------------
+ *   Configuration           LMACS  Register             [ENABLE]    [LMAC_TYPE]
+ *   ---------------------------------------------------------------------------
+ *   1x40GBASE-R4            1      BGXn_CMR0_CONFIG     1           4
+ *                                  BGXn_CMR1_CONFIG     0           --
+ *                                  BGXn_CMR2_CONFIG     0           --
+ *                                  BGXn_CMR3_CONFIG     0           --
+ *   ---------------------------------------------------------------------------
+ *   4x10GBASE-R             4      BGXn_CMR0_CONFIG     1           3
+ *                                  BGXn_CMR1_CONFIG     1           3
+ *                                  BGXn_CMR2_CONFIG     1           3
+ *                                  BGXn_CMR3_CONFIG     1           3
+ *   ---------------------------------------------------------------------------
+ *   2xRXAUI                 2      BGXn_CMR0_CONFIG     1           2
+ *                                  BGXn_CMR1_CONFIG     1           2
+ *                                  BGXn_CMR2_CONFIG     0           --
+ *                                  BGXn_CMR3_CONFIG     0           --
+ *   ---------------------------------------------------------------------------
+ *   1x10GBASE-X/XAUI/DXAUI  1      BGXn_CMR0_CONFIG     1           1
+ *                                  BGXn_CMR1_CONFIG     0           --
+ *                                  BGXn_CMR2_CONFIG     0           --
+ *                                  BGXn_CMR3_CONFIG     0           --
+ *   ---------------------------------------------------------------------------
+ *   4xSGMII/1000BASE-X      4      BGXn_CMR0_CONFIG     1           0
+ *                                  BGXn_CMR1_CONFIG     1           0
+ *                                  BGXn_CMR2_CONFIG     1           0
+ *                                  BGXn_CMR3_CONFIG     1           0
+ *   ---------------------------------------------------------------------------
  */
 union cvmx_bgxx_cmrx_config {
 	uint64_t u64;
@@ -1933,35 +1962,36 @@ union cvmx_bgxx_cmrx_config {
                                                          during normal operation. When set, the LMAC's PCS layer ignores RXVALID and
                                                          TXREADY/TXCREDIT from the associated serdes lane(s), internally generates fake (idle)
                                                          RXVALID and TXCREDIT pulses, and suppresses transmission to the serdes */
-	uint64_t mix_en                       : 1;  /**< Managmenet enable(for 2 LMACs, namely
-                                                         0 and 1 only). Setting this will pipe the
-                                                         lmac to and from the MIX inteface. For
-                                                         these LMACs LMAC_TYPE should be 0(SGMII) */
+	uint64_t mix_en                       : 1;  /**< Managemenet enable. This bit is used by LMACs 0 and 1 only, and should be kept clear for
+                                                         LMACs 2 and 3. Setting it will pipe the LMAC to and from the MIX inteface (LMAC0 to/from
+                                                         MIX0, LMAC1 to/from MIX1). LMAC_TYPE must be 0 (SGMII) then this bit is set. Note that at
+                                                         most one BGX can be attached to each of MIX0 and MIX1, i.e. at most one
+                                                         BGX(0..5)_CMR0_CONFIG[MIX_EN] bit and one BGX(0..5)_CMR1_CONFIG[MIX_EN] bit can be set. */
 	uint64_t lmac_type                    : 3;  /**< Logical MAC/PCS Type:
-                                                         ----------+----------------------------------------------------------
-                                                         LMAC_TYPE | Name         Description                NUM_PCS_LANES
-                                                         ----------+----------------------------------------------------------
-                                                         0         | SGMII      SGMII/1000BASE-X             1
-                                                         1         | XAUI       10GBASE-X/XAUI or DXAUI      4
-                                                         2         | RXAUI      Reduced XAUI                 2
-                                                         3         | 10G_R      10GBASE-R                    1
-                                                         4         | 40G_R      40GBASE-R                    4
-                                                         Other     | -          Reserved                     -
-                                                         ----------+----------------------------------------------------------
+                                                           ----------+----------------------------------------------------------
+                                                           LMAC_TYPE | Name         Description                NUM_PCS_LANES
+                                                           ----------+----------------------------------------------------------
+                                                           0         | SGMII      SGMII/1000BASE-X             1
+                                                           1         | XAUI       10GBASE-X/XAUI or DXAUI      4
+                                                           2         | RXAUI      Reduced XAUI                 2
+                                                           3         | 10G_R      10GBASE-R                    1
+                                                           4         | 40G_R      40GBASE-R                    4
+                                                           Other     | -          Reserved                     -
+                                                           ----------+----------------------------------------------------------
                                                          NUM_PCS_LANES specifies the number of of PCS lanes that are valid for
                                                          each type. Each valid PCS lane is mapped to a physical serdes lane
-                                                         based on the programming of the LANE_TO_SDS field below. */
+                                                         based on the programming of [LANE_TO_SDS]. */
 	uint64_t lane_to_sds                  : 8;  /**< "PCS Lane to Serdes Mapping
                                                          This is an array of 2-bit values that map each logical PCS Lane to a
                                                          physical serdes lane, as follows:
-                                                         ----------+----------------------------------------------------------
-                                                         Bits     | Description                     Reset value
-                                                         ----------+----------------------------------------------------------
-                                                         <7:6>    | PCS Lane 3 Serdes ID            0x3
-                                                         <5:4>    | PCS Lane 2 Serdes ID            0x2
-                                                         <3:2>    | PCS Lane 1 Serdes ID            0x1
-                                                         <1:0>    | PCS Lane 0 Serdes ID            0x0
-                                                         ----------+----------------------------------------------------------
+                                                           ----------+----------------------------------------------------------
+                                                           Bits     | Description                     Reset value
+                                                           ----------+----------------------------------------------------------
+                                                           <7:6>    | PCS Lane 3 Serdes ID            0x3
+                                                           <5:4>    | PCS Lane 2 Serdes ID            0x2
+                                                           <3:2>    | PCS Lane 1 Serdes ID            0x1
+                                                           <1:0>    | PCS Lane 0 Serdes ID            0x0
+                                                           ----------+----------------------------------------------------------
                                                          PCS lanes 0 through NUM_PCS_LANES-1 are valid, where NUM_PCS_LANES is
                                                          a function of the logical MAC/PCS type (see definition of
                                                          LMAC_TYPE field in this register). For example, when LMAC_TYPE =
@@ -2003,9 +2033,9 @@ union cvmx_bgxx_cmrx_int {
 	struct cvmx_bgxx_cmrx_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_3_63                : 61;
-	uint64_t pko_nxc                      : 1;  /**< TX channel out-of-range from PKO Interface */
-	uint64_t overflw                      : 1;  /**< RX Overflow */
-	uint64_t pause_drp                    : 1;  /**< RX Pause packet was dropped due to full RXB FIFO */
+	uint64_t pko_nxc                      : 1;  /**< TX channel out-of-range from PKO interface */
+	uint64_t overflw                      : 1;  /**< RX overflow. */
+	uint64_t pause_drp                    : 1;  /**< RX PAUSE packet was dropped due to full RXB FIFO. */
 #else
 	uint64_t pause_drp                    : 1;
 	uint64_t overflw                      : 1;
@@ -2019,17 +2049,18 @@ typedef union cvmx_bgxx_cmrx_int cvmx_bgxx_cmrx_int_t;
 
 /**
  * cvmx_bgx#_cmr#_prt_cbfc_ctl
+ *
+ * See XOFF definition listed under BGX(0..5)_SMU(0..3)_CBFC_CTL.
+ *
  */
 union cvmx_bgxx_cmrx_prt_cbfc_ctl {
 	uint64_t u64;
 	struct cvmx_bgxx_cmrx_prt_cbfc_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_32_63               : 32;
-	uint64_t phys_bp                      : 16; /**< When BGX_SMU_CBFC_CTL[RX_EN] is set and the HW is backpressuring any
-                                                         lmacs (from either PFC/CBFC pause packets or the
-                                                         BGX_CMR_TX_OVR_BP[TX_CHAN_BP] register) and all lmacs
-                                                         indiciated by PHYS_BP are backpressured, simulate
-                                                         physical backpressure by defering all packets on
+	uint64_t phys_bp                      : 16; /**< When BGXn_SMUm_CBFC_CTL[RX_EN] is set and the hardware is backpressuring any LMACs (from
+                                                         either PFC/CBFC PAUSE packets or BGXn_CMR_TX_OVR_BP[TX_CHAN_BP]) and all LMACs indicated
+                                                         by PHYS_BP are backpressured, simulate physical backpressure by deferring all packets on
                                                          the transmitter. */
 	uint64_t reserved_0_15                : 16;
 #else
@@ -2050,17 +2081,17 @@ union cvmx_bgxx_cmrx_rx_adr_ctl {
 	struct cvmx_bgxx_cmrx_rx_adr_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
-	uint64_t cam_accept                   : 1;  /**< Allow or deny DMAC address filter
-                                                         0 = reject the packet on DMAC CAM address match
-                                                         1 = accept the packet on DMAC CAM address match */
-	uint64_t mcst_mode                    : 2;  /**< Multicast Mode
-                                                         0 = Force reject all multicast packets
-                                                         1 = Force accept all multicast packets
-                                                         2 = Use the Address Filter CAM
-                                                         3 = Reserved. */
-	uint64_t bcst_accept                  : 1;  /**< Allow or deny broadcast Packets
-                                                         0 = reject all broadcast Packets
-                                                         1 = accept all broadcast Packets */
+	uint64_t cam_accept                   : 1;  /**< Allow or deny DMAC address filter.
+                                                         0 = Reject the packet on DMAC CAM address match
+                                                         1 = Accept the packet on DMAC CAM address match */
+	uint64_t mcst_mode                    : 2;  /**< Multicast mode.
+                                                         0x0 = Force reject all multicast packets
+                                                         0x1 = Force accept all multicast packets
+                                                         0x2 = Use the address filter CAM
+                                                         0x3 = Reserved */
+	uint64_t bcst_accept                  : 1;  /**< Allow or deny broadcast packets.
+                                                         0 = Reject all broadcast packets
+                                                         1 = Accept all broadcast Packets */
 #else
 	uint64_t bcst_accept                  : 1;
 	uint64_t mcst_mode                    : 2;
@@ -2080,12 +2111,11 @@ union cvmx_bgxx_cmrx_rx_bp_drop {
 	struct cvmx_bgxx_cmrx_rx_bp_drop_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_7_63                : 57;
-	uint64_t mark                         : 7;  /**< Number of 8B cycles to reserve in the RX FIFO.
-                                                         When the FIFO exceeds this count, packets will
-                                                         be dropped and not buffered.
-                                                         MARK should typically be programmed to BGX_CMR_RX_LMACS[LMACS]+1.
-                                                         Failure to program correctly can lead to system
-                                                         instability. */
+	uint64_t mark                         : 7;  /**< Number of eight-byte cycles to reserve in the RX FIFO. When the FIFO exceeds this count,
+                                                         packets are dropped and not buffered. MARK should typically be programmed to
+                                                         BGX*_CMR*_RX_LMACS[LMACS] + 1. Failure to program correctly can lead to system
+                                                         instability.
+                                                         MARK should be set considering FIFO partitioning established by BGX_CMR_RX_LMACS[LMACS]. */
 #else
 	uint64_t mark                         : 7;
 	uint64_t reserved_7_63                : 57;
@@ -2103,7 +2133,7 @@ union cvmx_bgxx_cmrx_rx_bp_off {
 	struct cvmx_bgxx_cmrx_rx_bp_off_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_7_63                : 57;
-	uint64_t mark                         : 7;  /**< Water mark (8B cycles to deassert backpressure) */
+	uint64_t mark                         : 7;  /**< Low watermark (number of eight-byte cycles to deassert backpressure). */
 #else
 	uint64_t mark                         : 7;
 	uint64_t reserved_7_63                : 57;
@@ -2121,16 +2151,14 @@ union cvmx_bgxx_cmrx_rx_bp_on {
 	struct cvmx_bgxx_cmrx_rx_bp_on_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_12_63               : 52;
-	uint64_t mark                         : 12; /**< Hiwater mark (number of 8B cycles to assert bp)
-                                                         Each register is for an individual lmac.
-                                                         BGX_CMR_RX_BP_ON(MARK) must satisfy
-                                                         BP_OFF <= BP_ON < (FIFO_SIZE - BP_DROP)
-                                                         A value of zero will immediately assert back
-                                                         pressure.
-                                                         Recommended value is 1/4th the size of the per
-                                                         lmac RX FIFO_SIZE as determined by BGX_CMR_RX_LMACS[LMACS].
-                                                         For example, with 4 lmacs of type SGMII where
-                                                         BGX_CMR_RX_LMACS[LMACS]=4, MARK=0x100(reset value) */
+	uint64_t mark                         : 12; /**< High watermark (number of eight-byte cycles to assert backpressure). Each register is for
+                                                         an individual LMAC. MARK must satisfy:
+                                                         BGX(0..5)_CMR(0..3)_RX_BP_OFF[MARK] <= MARK <
+                                                         (FIFO_SIZE - BGX(0..5)_CMR(0..3)_RX_BP_DROP[MARK]).
+                                                         A value of 0x0 immediately asserts backpressure.
+                                                         The recommended value is 1/4th the size of the per-LMAC RX FIFO_SIZE as determined by
+                                                         GX_CMR_RX_LMACS[LMACS]. For example in SGMII mode with four LMACs of type SGMII where
+                                                         BGX*_CMR*_RX_LMACS[LMACS]=0x4, MARK = 0x100 (the reset value. */
 #else
 	uint64_t mark                         : 12;
 	uint64_t reserved_12_63               : 52;
@@ -2148,9 +2176,9 @@ union cvmx_bgxx_cmrx_rx_bp_status {
 	struct cvmx_bgxx_cmrx_rx_bp_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_1_63                : 63;
-	uint64_t bp                           : 1;  /**< Per lmac backpressure status
-                                                         0=lmac is not backpressued
-                                                         1=lmac is backpressured */
+	uint64_t bp                           : 1;  /**< Per-LMAC backpressure status.
+                                                         0 = LMAC is not backpressured
+                                                         1 = LMAC is backpressured */
 #else
 	uint64_t bp                           : 1;
 	uint64_t reserved_1_63                : 63;
@@ -2168,7 +2196,7 @@ union cvmx_bgxx_cmrx_rx_fifo_len {
 	struct cvmx_bgxx_cmrx_rx_fifo_len_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_13_63               : 51;
-	uint64_t fifo_len                     : 13; /**< Per lmac fifo length. Useful for determining if fifo is empty when bringing an lmac down. */
+	uint64_t fifo_len                     : 13; /**< Per-LMAC FIFO length. Useful for determining if FIFO is empty when bringing an LMAC down. */
 #else
 	uint64_t fifo_len                     : 13;
 	uint64_t reserved_13_63               : 51;
@@ -2181,26 +2209,22 @@ typedef union cvmx_bgxx_cmrx_rx_fifo_len cvmx_bgxx_cmrx_rx_fifo_len_t;
 /**
  * cvmx_bgx#_cmr#_rx_id_map
  *
- * "**************************************************************
- * BGX CMR RXB related CSR per lmac
- * **************************************************************
- * BGX_CMR_RX_ID_MAP = RX LMAC ID mapping for X2P/PKI"
+ * These registers set the RX LMAC ID mapping for X2P/PKI.
+ *
  */
 union cvmx_bgxx_cmrx_rx_id_map {
 	uint64_t u64;
 	struct cvmx_bgxx_cmrx_rx_id_map_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_15_63               : 49;
-	uint64_t rid                          : 7;  /**< "Reassembly ID for this LMAC:
-                                                         A shared pool of 96 reassembly ids (RIDs) exists for all MACs. See
-                                                         description of RIDs in TBD.
-                                                         The RID for this LMAC must be constrained such that it does not
-                                                         overlap with any other MAC in the system. Its reset value has been
-                                                         chosen such that this condition is satisified:
+	uint64_t rid                          : 7;  /**< Reassembly ID map for this LMAC. A shared pool of 96 reassembly IDs (RIDs) exists for all
+                                                         MACs. See description of RIDs in .
+                                                         The RID for this LMAC must be constrained such that it does not overlap with any other MAC
+                                                         in the system. Its reset value has been chosen such that this condition is satisfied:
                                                          RID reset value = 4*(BGX_ID + 1) + LMAC_ID
-                                                         Changes to RID must only occur when the LMAC is quiescent (i.e. the
-                                                         LMAC receive interface is down and the RX fifo is empty)." */
-	uint64_t pknd                         : 8;  /**< Port Kind for this LMAC. */
+                                                         Changes to RID must only occur when the LMAC is quiescent (i.e. the LMAC receive interface
+                                                         is down and the RX FIFO is empty). */
+	uint64_t pknd                         : 8;  /**< Port kind for this LMAC */
 #else
 	uint64_t pknd                         : 8;
 	uint64_t rid                          : 7;
@@ -2219,10 +2243,10 @@ union cvmx_bgxx_cmrx_rx_logl_xoff {
 	struct cvmx_bgxx_cmrx_rx_logl_xoff_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t xoff                         : 16; /**< Together with BGX(0..5)_CMR(0..3)_RX_LOGL_XON defines type of channel backpressure to
-                                                         apply to the SMU.  Do not write when HiGig2 is enabled.
-                                                         Writing 1 sets the same physical register as that which is cleared by XON.
-                                                         An XOFF value of 1 will cause a backpressure on SMU. */
+	uint64_t xoff                         : 16; /**< Together with BGX(0..5)_CMR(0..3)_RX_LOGL_XON, defines type of channel backpressure to
+                                                         apply to the SMU. Do not write when HiGig2 is enabled. Writing 1 sets the same physical
+                                                         register as that which is cleared by XON. An XOFF value of 1 will cause a backpressure on
+                                                         SMU. */
 #else
 	uint64_t xoff                         : 16;
 	uint64_t reserved_16_63               : 48;
@@ -2241,9 +2265,9 @@ union cvmx_bgxx_cmrx_rx_logl_xon {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
 	uint64_t xon                          : 16; /**< Together with BGX(0..5)_CMR(0..3)_RX_LOGL_XOFF defines type of channel backpressure to
-                                                         apply.  Do not write when HiGig2 is enabled.
-                                                         Writing 1 clears the same physical register as that which is set by XOFF.
-                                                         An XON value of 1 means only PKI channel BP can cause a backpressure on SMU. */
+                                                         apply. Do not write when HiGig2 is enabled. Writing 1 clears the same physical register as
+                                                         that which is set by XOFF. An XON value of 1 means only PKI channel BP can cause a
+                                                         backpressure on SMU. */
 #else
 	uint64_t xon                          : 16;
 	uint64_t reserved_16_63               : 48;
@@ -2261,7 +2285,7 @@ union cvmx_bgxx_cmrx_rx_pause_drop_time {
 	struct cvmx_bgxx_cmrx_rx_pause_drop_time_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t pause_time                   : 16; /**< Time extracted from the PAUSE packet dropped due to RXB fifo full */
+	uint64_t pause_time                   : 16; /**< Time extracted from the dropped PAUSE packet dropped due to RXB FIFO full */
 #else
 	uint64_t pause_time                   : 16;
 	uint64_t reserved_16_63               : 48;
@@ -2274,20 +2298,19 @@ typedef union cvmx_bgxx_cmrx_rx_pause_drop_time cvmx_bgxx_cmrx_rx_pause_drop_tim
 /**
  * cvmx_bgx#_cmr#_rx_stat0
  *
- * Count of received packets - packets that are:
- * 1. not recognized as PAUSE packets
- * 2. not dropped due the DMAC filtering
- * 3. not dropped due FIFO full status
- * 4. not have have any other OPCODE (FCS, Length, etc).
- * Note: late collision packets (those signaled after eop) will be counted here
- * even though they are dropped by the CMR.
+ * These registers provide a count of received packets that meet the following conditions:
+ * are not recognized as PAUSE packets
+ * are not dropped due DMAC filtering
+ * are not dropped due FIFO full status
+ * do not have any other OPCODE (FCS, Length, etc).
  */
 union cvmx_bgxx_cmrx_rx_stat0 {
 	uint64_t u64;
 	struct cvmx_bgxx_cmrx_rx_stat0_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t cnt                          : 48; /**< Count of received packets */
+	uint64_t cnt                          : 48; /**< Count of received packets. CNT will wrap and is cleared if LMAC is disabled with
+                                                         BGX*_CMR*_CONFIG[ENABLE]=0. */
 #else
 	uint64_t cnt                          : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2300,7 +2323,7 @@ typedef union cvmx_bgxx_cmrx_rx_stat0 cvmx_bgxx_cmrx_rx_stat0_t;
 /**
  * cvmx_bgx#_cmr#_rx_stat1
  *
- * Count of octets of recieved packets, refer to details above in STAT0 definition
+ * These registers provide a count of octets of received packets.
  *
  */
 union cvmx_bgxx_cmrx_rx_stat1 {
@@ -2308,7 +2331,8 @@ union cvmx_bgxx_cmrx_rx_stat1 {
 	struct cvmx_bgxx_cmrx_rx_stat1_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t cnt                          : 48; /**< Octet count of received packets */
+	uint64_t cnt                          : 48; /**< Octet count of received packets. CNT will wrap and is cleared if LMAC is disabled with
+                                                         BGX*_CMR*_CONFIG[ENABLE]=0. */
 #else
 	uint64_t cnt                          : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2321,19 +2345,19 @@ typedef union cvmx_bgxx_cmrx_rx_stat1 cvmx_bgxx_cmrx_rx_stat1_t;
 /**
  * cvmx_bgx#_cmr#_rx_stat2
  *
- * Count of all packets received that were recognized as Flow Control or
- * PAUSE packets.  PAUSE packets with any kind of error are counted in
- * BGX_CMR_RX_STAT8(error stats register).  Pause packets
- * will never be counted in BGX_CMR_RX_STAT0. Pause packets dropped due to the dmac
- * filter will be counted in BGX_CMR_RX_STAT4 and not here.  Pause packets dropped due
- * full receive fifo will be counted in BGX_CMR_RX_STAT6 and not here.
+ * These registers provide a count of all packets received that were recognized as flow-control
+ * or PAUSE packets. PAUSE packets with any kind of error are counted in BGX*_CMR*_RX_STAT8
+ * (error stats register). Pause packets can be optionally dropped or forwarded based on
+ * BGX_SMU_RX_FRM_CTL[CTL_DRP]. This count increments regardless of whether the packet is
+ * dropped. PAUSE packets are never counted in BGX*_CMR*_RX_STAT0.
  */
 union cvmx_bgxx_cmrx_rx_stat2 {
 	uint64_t u64;
 	struct cvmx_bgxx_cmrx_rx_stat2_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t cnt                          : 48; /**< Count of received pause packets */
+	uint64_t cnt                          : 48; /**< Count of received PAUSE packets. CNT will wrap and is cleared if LMAC is disabled with
+                                                         BGX*_CMR*_CONFIG[ENABLE]=0. */
 #else
 	uint64_t cnt                          : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2346,7 +2370,7 @@ typedef union cvmx_bgxx_cmrx_rx_stat2 cvmx_bgxx_cmrx_rx_stat2_t;
 /**
  * cvmx_bgx#_cmr#_rx_stat3
  *
- * Count of octets of recieved pause and control packets
+ * These registers provide a count of octets of received PAUSE and control packets.
  *
  */
 union cvmx_bgxx_cmrx_rx_stat3 {
@@ -2354,7 +2378,8 @@ union cvmx_bgxx_cmrx_rx_stat3 {
 	struct cvmx_bgxx_cmrx_rx_stat3_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t cnt                          : 48; /**< Octet count of received pause packets */
+	uint64_t cnt                          : 48; /**< Octet count of received PAUSE packets. CNT will wrap and is cleared if LMAC is disabled
+                                                         with BGX*_CMR*_CONFIG[ENABLE]=0. */
 #else
 	uint64_t cnt                          : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2367,18 +2392,19 @@ typedef union cvmx_bgxx_cmrx_rx_stat3 cvmx_bgxx_cmrx_rx_stat3_t;
 /**
  * cvmx_bgx#_cmr#_rx_stat4
  *
- * Count of all packets received that were dropped by the dmac filter.
- * Packets that match the DMAC will be dropped and counted here regardless
- * of whether they were err packets.  These packets will never be counted in
- * BGX_CMR_RX_STAT0.  DMAC drop packets that are dropped due to full receive fifo
- * will be counted in BGX_CMR_RX_STAT6 and not here.
+ * These registers provide a count of all packets received that were dropped by the DMAC filter.
+ * Packets that match the DMAC are dropped and counted here regardless of whether they were ERR
+ * packets. These packets are never counted in BGX*_CMR*_RX_STAT0. Eight-byte packets as the
+ * result of truncation or other means are not be dropped by CN78XX and will never appear in this
+ * count.
  */
 union cvmx_bgxx_cmrx_rx_stat4 {
 	uint64_t u64;
 	struct cvmx_bgxx_cmrx_rx_stat4_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t cnt                          : 48; /**< Count of filtered dmac packets */
+	uint64_t cnt                          : 48; /**< Count of filtered DMAC packets. CNT will wrap and is cleared if LMAC is disabled with
+                                                         BGX*_CMR*_CONFIG[ENABLE]=0. */
 #else
 	uint64_t cnt                          : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2391,7 +2417,7 @@ typedef union cvmx_bgxx_cmrx_rx_stat4 cvmx_bgxx_cmrx_rx_stat4_t;
 /**
  * cvmx_bgx#_cmr#_rx_stat5
  *
- * Count of octets of filtered dmac packets
+ * These registers provide a count of octets of filtered DMAC packets.
  *
  */
 union cvmx_bgxx_cmrx_rx_stat5 {
@@ -2399,7 +2425,8 @@ union cvmx_bgxx_cmrx_rx_stat5 {
 	struct cvmx_bgxx_cmrx_rx_stat5_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t cnt                          : 48; /**< Octet count of filtered dmac packets */
+	uint64_t cnt                          : 48; /**< Octet count of filtered DMAC packets. CNT will wrap and is cleared if LMAC is disabled
+                                                         with BGX*_CMR*_CONFIG[ENABLE]=0. */
 #else
 	uint64_t cnt                          : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2412,18 +2439,18 @@ typedef union cvmx_bgxx_cmrx_rx_stat5 cvmx_bgxx_cmrx_rx_stat5_t;
 /**
  * cvmx_bgx#_cmr#_rx_stat6
  *
- * Count of all packets received that were dropped due to a full receive FIFO.
- * It does not count any packet that is truncated at the point at the point of overflow
- * and sent on to the PKI.  This counts all entire packets dropped by the FIFO for a
- * given lmac regardless of whether they are errored, dmac drop packets
- * or control packets
+ * These registers provide a count of all packets received that were dropped due to a full
+ * receive FIFO. They do not count any packet that is truncated at the point at the point of
+ * overflow and sent on to the PKI. These registers count all entire packets dropped by the FIFO
+ * for a given LMAC regardless of DMAC or PAUSE type.
  */
 union cvmx_bgxx_cmrx_rx_stat6 {
 	uint64_t u64;
 	struct cvmx_bgxx_cmrx_rx_stat6_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t cnt                          : 48; /**< Count of dropped packets */
+	uint64_t cnt                          : 48; /**< Count of dropped packets. CNT will wrap and is cleared if LMAC is disabled with
+                                                         BGX*_CMR*_CONFIG[ENABLE]=0. */
 #else
 	uint64_t cnt                          : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2436,15 +2463,16 @@ typedef union cvmx_bgxx_cmrx_rx_stat6 cvmx_bgxx_cmrx_rx_stat6_t;
 /**
  * cvmx_bgx#_cmr#_rx_stat7
  *
- * Count of octets of packets received that were dropped due to a full receive FIFO.
- *
+ * These registers provide a count of octets of received packets that were dropped due to a full
+ * receive FIFO.
  */
 union cvmx_bgxx_cmrx_rx_stat7 {
 	uint64_t u64;
 	struct cvmx_bgxx_cmrx_rx_stat7_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t cnt                          : 48; /**< Octet count of dropped packets */
+	uint64_t cnt                          : 48; /**< Octet count of dropped packets. CNT will wrap and is cleared if LMAC is disabled with
+                                                         BGX*_CMR*_CONFIG[ENABLE]=0. */
 #else
 	uint64_t cnt                          : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2457,15 +2485,16 @@ typedef union cvmx_bgxx_cmrx_rx_stat7 cvmx_bgxx_cmrx_rx_stat7_t;
 /**
  * cvmx_bgx#_cmr#_rx_stat8
  *
- * Count of all packets received with some error that were not dropped
- * either due to the dmac filter or lack of room in the receive FIFO.
+ * These registers provide a count of all packets received with some error that were not dropped
+ * either due to the DMAC filter or lack of room in the receive FIFO.
  */
 union cvmx_bgxx_cmrx_rx_stat8 {
 	uint64_t u64;
 	struct cvmx_bgxx_cmrx_rx_stat8_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t cnt                          : 48; /**< Count of error packets */
+	uint64_t cnt                          : 48; /**< Count of error packets. CNT will wrap and is cleared if LMAC is disabled with
+                                                         BGX*_CMR*_CONFIG[ENABLE]=0. */
 #else
 	uint64_t cnt                          : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2483,11 +2512,9 @@ union cvmx_bgxx_cmrx_rx_weight {
 	struct cvmx_bgxx_cmrx_rx_weight_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
-	uint64_t weight                       : 4;  /**< For the weighted round robin algorithm in CMR RXB.
-                                                         Weight to assign for this LMAC relative to other
-                                                         LMAC weights. Defaults to round robin(non weighted
-                                                         minimum setting of 1). A setting of 0 effectively
-                                                         takes the lmac out of eligibility. */
+	uint64_t weight                       : 4;  /**< For the weighted round robin algorithm in CMR RXB, weight to assign for this LMAC relative
+                                                         to other LMAC weights. Defaults to round-robin (non-weighted minimum setting of 0x1). A
+                                                         setting of 0x0 effectively takes the LMAC out of eligibility. */
 #else
 	uint64_t weight                       : 4;
 	uint64_t reserved_4_63                : 60;
@@ -2499,27 +2526,18 @@ typedef union cvmx_bgxx_cmrx_rx_weight cvmx_bgxx_cmrx_rx_weight_t;
 
 /**
  * cvmx_bgx#_cmr#_tx_channel
- *
- * "**************************************************************
- * BGX CMR TXB related CSR
- * **************************************************************
- * BGX_CMR_TX_CHANNEL"
  */
 union cvmx_bgxx_cmrx_tx_channel {
 	uint64_t u64;
 	struct cvmx_bgxx_cmrx_tx_channel_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_32_63               : 32;
-	uint64_t msk                          : 16; /**< BP channel mask
-                                                         BGX can completely ignore the channel BP for
-                                                         channel specified by the MSK field.  Any channel
-                                                         in which MSK == 1, will never send BP information
-                                                         to PKO. */
-	uint64_t dis                          : 16; /**< Credit Return BP disable
-                                                         BGX stops returning channel credits for any channel
-                                                         that is backpressured.  These bits can be used to
-                                                         override that.  DIS == 1 allows channel credits to
-                                                         flow back regardless of the backpressure for that chan */
+	uint64_t msk                          : 16; /**< Backpressure channel mask. BGX can completely ignore the channel backpressure for channel
+                                                         specified by this field. Any channel in which MSK == 1 never sends backpressure
+                                                         information to PKO. */
+	uint64_t dis                          : 16; /**< Credit return backpressure disable. BGX stops returning channel credits for any channel
+                                                         that is backpressured. These bits can be used to override that. DIS == 1 allows channel
+                                                         credits to flow back regardless of the backpressure for that channel. */
 #else
 	uint64_t dis                          : 16;
 	uint64_t msk                          : 16;
@@ -2539,9 +2557,9 @@ union cvmx_bgxx_cmrx_tx_fifo_len {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_14_63               : 50;
 	uint64_t lmac_idle                    : 1;  /**< Idle signal to identify when all credits and other pipeline buffers are also cleared out
-                                                         and lmac can be considered IDLE in the BGX CMR TX. */
-	uint64_t fifo_len                     : 13; /**< Per lmac TXB main fifo length. Useful for determining if main fifo is empty when bringing
-                                                         an lmac down. */
+                                                         and LMAC can be considered IDLE in the BGX CMR TX. */
+	uint64_t fifo_len                     : 13; /**< Per-LMAC TXB main FIFO length. Useful for determining if main FIFO is empty when bringing
+                                                         an LMAC down. */
 #else
 	uint64_t fifo_len                     : 13;
 	uint64_t lmac_idle                    : 1;
@@ -2560,15 +2578,11 @@ union cvmx_bgxx_cmrx_tx_hg2_status {
 	struct cvmx_bgxx_cmrx_tx_hg2_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_32_63               : 32;
-	uint64_t xof                          : 16; /**< 16 bit xof back pressure vector from HiGig2 msg pkt
-                                                         or from PFC/CBFC packets.
-                                                         Non-zero only when logical back pressure is active
-                                                         All bits will be 0 when LGTIM2GO=0 */
-	uint64_t lgtim2go                     : 16; /**< Logical packet flow back pressure time remaining
-                                                         Initial value set from xof time field of HiGig2
-                                                         message packet received or a function of the
-                                                         enabled and current timers for PFC/CBFC packets.
-                                                         Non-zero only when logical back pressure is active */
+	uint64_t xof                          : 16; /**< 16-bit XOF back pressure vector from HiGig2 message packet or from PFC/CBFC packets. Non-
+                                                         zero only when logical back pressure is active. All bits are 0 when LGTIM2GO=0x0. */
+	uint64_t lgtim2go                     : 16; /**< Logical packet flow back pressure time remaining. Initial value set from XOF time field of
+                                                         HiGig2 message packet received or a function of the enabled and current timers for
+                                                         PFC/CBFC packets. Non-zero only when logical back pressure is active. */
 #else
 	uint64_t lgtim2go                     : 16;
 	uint64_t xof                          : 16;
@@ -2587,9 +2601,8 @@ union cvmx_bgxx_cmrx_tx_ovr_bp {
 	struct cvmx_bgxx_cmrx_tx_ovr_bp_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t tx_chan_bp                   : 16; /**< Per channel BP sent to PKO
-                                                         0=Channel is available
-                                                         1=Channel should be back pressured */
+	uint64_t tx_chan_bp                   : 16; /**< Per-channel backpressure status sent to PKO.
+                                                         1 = channel should be backpressured, 0 = channel is available */
 #else
 	uint64_t tx_chan_bp                   : 16;
 	uint64_t reserved_16_63               : 48;
@@ -2607,10 +2620,10 @@ union cvmx_bgxx_cmrx_tx_stat0 {
 	struct cvmx_bgxx_cmrx_tx_stat0_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t xscol                        : 48; /**< Number of packets dropped (never successfully
-                                                         sent) due to excessive collision.  Defined by
-                                                         BGX_GMP_GMI_TX_COL_ATTEMPT[LIMIT].
-                                                         (SGMII/1000Base-X half-duplex only) */
+	uint64_t xscol                        : 48; /**< Number of packets dropped (never successfully sent) due to excessive collision. Defined by
+                                                         BGX_GMP_GMI_TX_COL_ATTEMPT[LIMIT]. SGMII/1000Base-X half-duplex only.
+                                                         Not cleared on read; cleared on a write with 0x0. Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t xscol                        : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2628,9 +2641,10 @@ union cvmx_bgxx_cmrx_tx_stat1 {
 	struct cvmx_bgxx_cmrx_tx_stat1_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t xsdef                        : 48; /**< Number of packets dropped (never successfully
-                                                         sent) due to excessive deferal
-                                                         (SGMII/1000Base-X half-duplex only) */
+	uint64_t xsdef                        : 48; /**< Number of packets dropped (never successfully sent) due to excessive deferral.
+                                                         SGMII/1000BASE-X half-duplex only.
+                                                         Not cleared on read; cleared on a write with 0x0. Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t xsdef                        : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2648,8 +2662,12 @@ union cvmx_bgxx_cmrx_tx_stat10 {
 	struct cvmx_bgxx_cmrx_tx_stat10_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t hist4                        : 48; /**< Number of packets sent with an octet count
-                                                         between 256 and 511 inclusive. */
+	uint64_t hist4                        : 48; /**< Number of packets sent with an octet count between 256-511. Packet length is the sum of
+                                                         all data transmitted on the wire for the given packet including packet data, pad bytes,
+                                                         FCS bytes, PAUSE bytes, and JAM bytes. The octet counts do not include PREAMBLE byte or
+                                                         EXTEND cycles.
+                                                         Not cleared on read; cleared on a write with 0x0.Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t hist4                        : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2667,8 +2685,12 @@ union cvmx_bgxx_cmrx_tx_stat11 {
 	struct cvmx_bgxx_cmrx_tx_stat11_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t hist5                        : 48; /**< Number of packets sent with an octet count
-                                                         between 512 and 1023 inclusive. */
+	uint64_t hist5                        : 48; /**< Number of packets sent with an octet count between 512-1023. Packet length is the sum of
+                                                         all data transmitted on the wire for the given packet including packet data, pad bytes,
+                                                         FCS bytes, PAUSE bytes, and JAM bytes. The octet counts do not include PREAMBLE byte or
+                                                         EXTEND cycles.
+                                                         Not cleared on read; cleared on a write with 0x0.Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t hist5                        : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2686,8 +2708,12 @@ union cvmx_bgxx_cmrx_tx_stat12 {
 	struct cvmx_bgxx_cmrx_tx_stat12_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t hist6                        : 48; /**< Number of packets sent with an octet count
-                                                         between 1024 and 1518 inclusive. */
+	uint64_t hist6                        : 48; /**< Number of packets sent with an octet count between 1024-1518. Packet length is the sum of
+                                                         all data transmitted on the wire for the given packet including packet data, pad bytes,
+                                                         FCS bytes, PAUSE bytes, and JAM bytes. The octet counts do not include PREAMBLE byte or
+                                                         EXTEND cycles.
+                                                         Not cleared on read; cleared on a write with 0x0.Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t hist6                        : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2705,8 +2731,12 @@ union cvmx_bgxx_cmrx_tx_stat13 {
 	struct cvmx_bgxx_cmrx_tx_stat13_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t hist7                        : 48; /**< Number of packets sent with an octet count
-                                                         of > 1518. */
+	uint64_t hist7                        : 48; /**< Number of packets sent with an octet count > 1518. Packet length is the sum of all data
+                                                         transmitted on the wire for the given packet including packet data, pad bytes, FCS bytes,
+                                                         PAUSE bytes, and JAM bytes. The octet counts do not include PREAMBLE byte or EXTEND
+                                                         cycles.
+                                                         Not cleared on read; cleared on a write with 0x0.Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t hist7                        : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2724,8 +2754,13 @@ union cvmx_bgxx_cmrx_tx_stat14 {
 	struct cvmx_bgxx_cmrx_tx_stat14_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t bcst                         : 48; /**< Number of packets sent to broadcast DMAC.
-                                                         Does not include MCST packets. */
+	uint64_t bcst                         : 48; /**< Number of packets sent to multicast DMAC. Does not include MCST packets.
+                                                         Not cleared on read; cleared on a write with 0x0. Counters will wrap.
+                                                         Note that BGX determines if the packet is MCST or BCST from the DMAC of the packet. BGX
+                                                         assumes that the DMAC lies in the first six bytes of the packet as per the 802.3 frame
+                                                         definition. If the system requires additional data before the L2 header, the MCST and BCST
+                                                         counters may not reflect reality and should be ignored by software. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t bcst                         : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2743,8 +2778,13 @@ union cvmx_bgxx_cmrx_tx_stat15 {
 	struct cvmx_bgxx_cmrx_tx_stat15_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t mcst                         : 48; /**< Number of packets sent to multicast DMAC.
-                                                         Does not include BCST packets. */
+	uint64_t mcst                         : 48; /**< Number of packets sent to multicast DMAC. Does not include BCST packets.
+                                                         Not cleared on read; cleared on a write with 0x0. Counters will wrap.
+                                                         Note that BGX determines if the packet is MCST or BCST from the DMAC of the packet. BGX
+                                                         assumes that the DMAC lies in the first six bytes of the packet as per the 802.3 frame
+                                                         definition. If the system requires additional data before the L2 header, then the MCST and
+                                                         BCST counters may not reflect reality and should be ignored by software. Cleared if LMAC
+                                                         is disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t mcst                         : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2762,7 +2802,9 @@ union cvmx_bgxx_cmrx_tx_stat16 {
 	struct cvmx_bgxx_cmrx_tx_stat16_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t undflw                       : 48; /**< Number of underflow packets */
+	uint64_t undflw                       : 48; /**< Number of underflow packets.
+                                                         Not cleared on read; cleared on a write with 0x0. Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t undflw                       : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2780,12 +2822,12 @@ union cvmx_bgxx_cmrx_tx_stat17 {
 	struct cvmx_bgxx_cmrx_tx_stat17_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t ctl                          : 48; /**< Number of Control packets (PAUSE flow control)
-                                                         generated by BGX.  It does not include control
-                                                         packets forwarded or generated by the PP's.
-                                                         CTL will count the number of generated PFC frames.
-                                                         CTL will not track the number of generated HG2
-                                                         messages. */
+	uint64_t ctl                          : 48; /**< Number of control packets (PAUSE flow control) generated by BGX. It does not include
+                                                         control packets forwarded or generated by the cores.
+                                                         CTL counts the number of generated PFC frames and does not track the number of generated
+                                                         HG2 messages.
+                                                         Not cleared on read; cleared on a write with 0x0. Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t ctl                          : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2803,9 +2845,10 @@ union cvmx_bgxx_cmrx_tx_stat2 {
 	struct cvmx_bgxx_cmrx_tx_stat2_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t mcol                         : 48; /**< Number of packets sent with multiple collisions
-                                                         but < BGX_GMP_GMI_TX_COL_ATTEMPT[LIMIT].
-                                                         (SGMII/1000Base-X half-duplex only) */
+	uint64_t mcol                         : 48; /**< Number of packets sent with multiple collisions. Must be less than
+                                                         BGX_GMP_GMI_TX_COL_ATTEMPT[LIMIT]. SGMII/1000BASE-X half-duplex only.
+                                                         Not cleared on read; cleared on a write with 0x0. Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t mcol                         : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2823,8 +2866,9 @@ union cvmx_bgxx_cmrx_tx_stat3 {
 	struct cvmx_bgxx_cmrx_tx_stat3_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t scol                         : 48; /**< Number of packets sent with a single collision
-                                                         (SGMII/1000Base-X half-duplex only) */
+	uint64_t scol                         : 48; /**< Number of packets sent with a single collision. SGMII/1000BASE-X half-duplex only.
+                                                         Not cleared on read; cleared on a write with 0x0. Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t scol                         : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2842,9 +2886,13 @@ union cvmx_bgxx_cmrx_tx_stat4 {
 	struct cvmx_bgxx_cmrx_tx_stat4_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t octs                         : 48; /**< Number of total octets sent on the interface.
-                                                         Does not count octets from frames that were
-                                                         truncated due to collisions in halfdup mode. */
+	uint64_t octs                         : 48; /**< Number of total octets sent on the interface. Does not count octets from frames that were
+                                                         truncated due to collisions in half-duplex mode.
+                                                         Octet counts are the sum of all data transmitted on the wire including packet data, pad
+                                                         bytes, FCS bytes, PAUSE bytes, and JAM bytes. The octet counts do not include PREAMBLE
+                                                         byte or EXTEND cycles.
+                                                         Not cleared on read; cleared on a write with 0x0. Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t octs                         : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2862,9 +2910,10 @@ union cvmx_bgxx_cmrx_tx_stat5 {
 	struct cvmx_bgxx_cmrx_tx_stat5_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t pkts                         : 48; /**< Number of total frames sent on the interface.
-                                                         Does not count frames that were truncated due to
-                                                         collisions in halfdup mode. */
+	uint64_t pkts                         : 48; /**< Number of total frames sent on the interface. Does not count octets from frames that were
+                                                         truncated due to collisions in half-duplex mode.
+                                                         Not cleared on read; cleared on a write with 0x0. Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t pkts                         : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2882,8 +2931,12 @@ union cvmx_bgxx_cmrx_tx_stat6 {
 	struct cvmx_bgxx_cmrx_tx_stat6_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t hist0                        : 48; /**< Number of packets sent with an octet count
-                                                         of < 64. */
+	uint64_t hist0                        : 48; /**< Number of packets sent with an octet count < 64. Packet length is the sum of all data
+                                                         transmitted on the wire for the given packet including packet data, pad bytes, FCS bytes,
+                                                         PAUSE bytes, and JAM bytes. The octet counts do not include PREAMBLE byte or EXTEND
+                                                         cycles.
+                                                         Not cleared on read; cleared on a write with 0x0.Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t hist0                        : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2901,8 +2954,12 @@ union cvmx_bgxx_cmrx_tx_stat7 {
 	struct cvmx_bgxx_cmrx_tx_stat7_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t hist1                        : 48; /**< Number of packets sent with an octet count
-                                                         of 64. */
+	uint64_t hist1                        : 48; /**< Number of packets sent with an octet count of 64. Packet length is the sum of all data
+                                                         transmitted on the wire for the given packet including packet data, pad bytes, FCS bytes,
+                                                         PAUSE bytes, and JAM bytes. The octet counts do not include PREAMBLE byte or EXTEND
+                                                         cycles.
+                                                         Not cleared on read; cleared on a write with 0x0.Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t hist1                        : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2920,8 +2977,12 @@ union cvmx_bgxx_cmrx_tx_stat8 {
 	struct cvmx_bgxx_cmrx_tx_stat8_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t hist2                        : 48; /**< Number of packets sent with an octet count
-                                                         of > 64 and < 128. */
+	uint64_t hist2                        : 48; /**< Number of packets sent with an octet count between 65-127. Packet length is the sum of all
+                                                         data transmitted on the wire for the given packet including packet data, pad bytes, FCS
+                                                         bytes, PAUSE bytes, and JAM bytes. The octet counts do not include PREAMBLE byte or EXTEND
+                                                         cycles.
+                                                         Not cleared on read; cleared on a write with 0x0.Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t hist2                        : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2939,8 +3000,12 @@ union cvmx_bgxx_cmrx_tx_stat9 {
 	struct cvmx_bgxx_cmrx_tx_stat9_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t hist3                        : 48; /**< Number of packets sent with an octet count
-                                                         between 128 and 255 inclusive. */
+	uint64_t hist3                        : 48; /**< Number of packets sent with an octet count between 128-255. Packet length is the sum of
+                                                         all data transmitted on the wire for the given packet including packet data, pad bytes,
+                                                         FCS bytes, PAUSE bytes, and JAM bytes. The octet counts do not include PREAMBLE byte or
+                                                         EXTEND cycles.
+                                                         Not cleared on read; cleared on a write with 0x0.Counters will wrap. Cleared if LMAC is
+                                                         disabled with BGX_CMR_CONFIG[ENABLE]=0. */
 #else
 	uint64_t hist3                        : 48;
 	uint64_t reserved_48_63               : 16;
@@ -2976,33 +3041,24 @@ union cvmx_bgxx_cmr_bist_status {
 	struct cvmx_bgxx_cmr_bist_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_25_63               : 39;
-	uint64_t status                       : 25; /**< "BIST Results.
-                                                          HW sets a bit in BIST for memory that fails. INTERNAL:
-                                                         - 0: bgx#.rxb.infif_gmp
-                                                         - 1: bgx#.rxb.infif_smu
-                                                         - 2: bgx#.rxb.fif_bnk00
-                                                         - 3: bgx#.rxb.fif_bnk01
-                                                         - 4: bgx#.rxb.fif_bnk10
-                                                         - 5: bgx#.rxb.fif_bnk11
-                                                         - 6: bgx#.rxb.skd_fif
-                                                         - 7: bgx#.rxb_mix0_fif
-                                                         - 8: bgx#.rxb_mix1_fif
-                                                         - 9: RAZ
-                                                          - 10: bgx#.txb_fif_bnk0
-                                                          - 11: bgx#.txb_fif_bnk1
-                                                          - 12: bgx#.txb_skd_fif
-                                                          - 13: bgx#.txb_mix0_fif
-                                                          - 14: bgx#.txb_mix1_fif
-                                                          - 15: RAZ
-                                                          - 16: RAZ
-                                                          - 17: RAZ
-                                                          - 18: RAZ
-                                                          - 19: RAZ
-                                                          - 20: RAZ
-                                                          - 21: RAZ
-                                                          - 22: RAZ
-                                                          - 23: RAZ
-                                                          - 24: RAZ" */
+	uint64_t status                       : 25; /**< "BIST results. Hardware sets a bit to 1 for memory that fails; 0 indicates pass or never
+                                                         run. INTERNAL:
+                                                         <0> = bgx#.rxb.infif_gmp
+                                                         <1> = bgx#.rxb.infif_smu
+                                                         <2> = bgx#.rxb.fif_bnk00
+                                                         <3> = bgx#.rxb.fif_bnk01
+                                                         <4> = bgx#.rxb.fif_bnk10
+                                                         <5> = bgx#.rxb.fif_bnk11
+                                                         <6> = bgx#.rxb.skd_fif
+                                                         <7> = bgx#.rxb_mix0_fif
+                                                         <8> = bgx#.rxb_mix1_fif
+                                                         <9> = RAZ
+                                                         <10> = bgx#.txb_fif_bnk0
+                                                         <11> = bgx#.txb_fif_bnk1
+                                                         <12> = bgx#.txb_skd_fif
+                                                         <13> = bgx#.txb_mix0_fif
+                                                         <14> = bgx#.txb_mix1_fif
+                                                         <24:15> = RAZ" */
 #else
 	uint64_t status                       : 25;
 	uint64_t reserved_25_63               : 39;
@@ -3019,17 +3075,16 @@ union cvmx_bgxx_cmr_chan_msk_and {
 	uint64_t u64;
 	struct cvmx_bgxx_cmr_chan_msk_and_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t msk_and                      : 64; /**< Assert physical BP when the BP channel vector
-                                                         combined with MSK_AND indicates BP as follows.
-                                                         phys_bp_msk_and =
-                                                         (CHAN_VECTOR<x:y> & MSK_AND<x:y>) == MSK_AND<x:y>
+	uint64_t msk_and                      : 64; /**< Assert physical backpressure when the backpressure channel vector combined with MSK_AND
+                                                         indicates backpressure as follows:
+                                                         phys_bp_msk_and = (CHAN_VECTOR<x:y> & MSK_AND<x:y>) == MSK_AND<x:y>
                                                          phys_bp = phys_bp_msk_or || phys_bp_msk_and
-                                                         In single LMACS configs, x=63, y=0
-                                                         In multi LMAC configs, x/y are set as follows:
-                                                         LMAC interface0, x=15, y=0
-                                                         LMAC interface1, x=31, y=16
-                                                         LMAC interface2, x=47, y=32
-                                                         LMAC interface3, x=63, y=48 */
+                                                         In single LMAC configurations, x = 63, y = 0
+                                                         In multi-LMAC configurations, x/y are set as follows:
+                                                         LMAC interface 0, x = 15, y = 0
+                                                         LMAC interface 1, x = 31, y = 16
+                                                         LMAC interface 2, x = 47, y = 32
+                                                         LMAC interface 3, x = 63, y = 48 */
 #else
 	uint64_t msk_and                      : 64;
 #endif
@@ -3046,16 +3101,16 @@ union cvmx_bgxx_cmr_chan_msk_or {
 	struct cvmx_bgxx_cmr_chan_msk_or_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t msk_or                       : 64; /**< Assert physical BP when the BP channel vector
-                                                         combined with MSK_OR indicates BP as follows.
-                                                         phys_bp_msk_or =
-                                                         (CHAN_VECTOR<x:y> & MSK_OR<x:y>) != 0
-                                                         phys_bp = phys_bp_msk_or || phys_bp_msk_and
-                                                         In single LMAC config, x=63, y=0
-                                                         In multi LMAC config, x/y are set as follows:
-                                                         LMAC interface0, x=15, y=0
-                                                         LMAC interface1, x=31, y=16
-                                                         LMAC interface2, x=47, y=32
-                                                         LMAC interface3, x=63, y=48 */
+                                                         Assert physical backpressure when the backpressure channel vector combined with MSK_OR
+                                                         indicates backpressure as follows:
+                                                         phys_bp_msk_or = (CHAN_VECTOR<x:y> & MSK_AND<x:y>) != 0
+                                                         phys_bp = phys_bp_msk_or
+                                                         In single LMAC configurations, x = 63, y = 0
+                                                         In multi-LMAC configurations, x/y are set as follows:
+                                                         LMAC interface 0, x = 15, y = 0
+                                                         LMAC interface 1, x = 31, y = 16
+                                                         LMAC interface 2, x = 47, y = 32
+                                                         LMAC interface 3, x = 63, y = 48 */
 #else
 	uint64_t msk_or                       : 64;
 #endif
@@ -3067,38 +3122,45 @@ typedef union cvmx_bgxx_cmr_chan_msk_or cvmx_bgxx_cmr_chan_msk_or_t;
 /**
  * cvmx_bgx#_cmr_global_config
  *
- * "***************************************************************
- * BGX Global related CSR (affects all lmacs and may be sent to any of GMP, SMU, SPU)
- * ***************************************************************
- * Global CMR, PCS and MAC Configuration"
+ * These registers configures the global CMR, PCS, and MAC.
+ *
  */
 union cvmx_bgxx_cmr_global_config {
 	uint64_t u64;
 	struct cvmx_bgxx_cmr_global_config_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_5_63                : 59;
-	uint64_t cmr_mix1_reset               : 1;  /**< If the MIX1 block is reset, software also needs to reset the the MIX interface in the BGX
-                                                         by setting this bit to 1. It resets the MIX interface state in the BGX (mix FIFO and
-                                                         pending requests to MIX) and prevents the RXB FIFOs for all LMACs from pushing data
-                                                         to the interface. Setting this bit to 0 will not reset the MIX interface.
-                                                         After MIX comes out of reset, software should clear CMR_MIX_RESET. */
-	uint64_t cmr_mix0_reset               : 1;  /**< If the MIX0 block is reset, software also needs to reset the the MIX interface in the BGX
-                                                         by setting this bit to 1. It resets the MIX interface state in the BGX (mix FIFO and
-                                                         pending requests to MIX) and prevents the RXB FIFOs for all LMACs from pushing data
-                                                         to the interface. Setting this bit to 0 will not reset the MIX interface.
-                                                         After MIX comes out of reset, software should clear CMR_MIX_RESET. */
-	uint64_t cmr_x2p_reset                : 1;  /**< If the PKI block is reset, software also needs to reset the the X2P interface in the BGX
-                                                         by setting this bit to 1. It resets the X2P interface state in the BGX (skid FIFO and
-                                                         pending requests to PKI) and prevents the RXB FIFOs for all LMACs from pushing data
-                                                         to the interface. Setting this bit to 0 will not reset the X2P interface.
-                                                         After PKI comes out of reset, software should clear CMR_X2P_RESET. */
-	uint64_t bgx_clk_enable               : 1;  /**< The global clock enable for BGX.  Setting this bit will override clock enables set by the
-                                                         BGX_CMR_CONFIG[ENABLE] and BGX_CMR_CONFIG[LMAC_TYPE] register bits, essentially
-                                                         turning on clocks for the entire BGX.  Setting this bit to 0 will result in
-                                                         not overriding clock enables set by BGX_CMR_CONFIG[ENABLE] and
-                                                         BGX_CMR_CONFIG[LMAC_TYPE] register bits. */
-	uint64_t pmux_sds_sel                 : 1;  /**< The global serdes output select for BGX.  Setting this bit to 1 will select serdes output
-                                                         1 Setting this bit to 1 will select serdes output 0. */
+	uint64_t cmr_mix1_reset               : 1;  /**< If the MIX1 block is reset, software also needs to reset the MIX interface in the BGX by
+                                                         setting this bit to 1. It resets the MIX interface state in the BGX (mix FIFO and pending
+                                                         requests to MIX) and prevents the RXB FIFOs for all LMACs from pushing data to the
+                                                         interface. Setting this bit to 0 will not reset the MIX interface. After MIX comes out of
+                                                         reset, software should clear CMR_MIX_RESET. */
+	uint64_t cmr_mix0_reset               : 1;  /**< If the MIX0 block is reset, software also needs to reset the MIX interface in the BGX by
+                                                         setting this bit to 1. It resets the MIX interface state in the BGX (mix FIFO and pending
+                                                         requests to MIX) and prevents the RXB FIFOs for all LMACs from pushing data to the
+                                                         interface. Setting this bit to 0 will not reset the MIX interface. After MIX comes out of
+                                                         reset, software should clear CMR_MIX_RESET. */
+	uint64_t cmr_x2p_reset                : 1;  /**< If the PKI block is reset, software also needs to reset the X2P interface in the BGX by
+                                                         setting this bit to 1. It resets the X2P interface state in the BGX (skid FIFO and pending
+                                                         requests to PKI) and prevents the RXB FIFOs for all LMACs from pushing data to the
+                                                         interface. Setting this bit to 0 does not reset the X2P interface. After PKI comes out of
+                                                         reset, software should clear CMR_X2P_RESET. */
+	uint64_t bgx_clk_enable               : 1;  /**< The global clock enable for BGX. Setting this bit overrides clock enables set by
+                                                         BGX_CMR_CONFIG[ENABLE] and BGX_CMR_CONFIG[LMAC_TYPE], essentially turning on clocks for
+                                                         the entire BGX. Setting this bit to 0 results in not overriding clock enables set by
+                                                         BGX_CMR_CONFIG[ENABLE] and BGX_CMR_CONFIG[LMAC_TYPE]. */
+	uint64_t pmux_sds_sel                 : 1;  /**< Serdes/QLM output select. Specifies which QLM output is selected as the BGX input, as
+                                                         follows:
+                                                           ------+----------------+----------------
+                                                           Block | PMUX_SDS_SEL=0 | PMUX_SDS_SEL=1
+                                                           ------+----------------+----------------
+                                                           BGX0  | QLM0           | QLM2
+                                                           BGX1  | QLM1           | QLM3
+                                                           BGX2  | QLM4           | N/A
+                                                           BGX3  | QLM5           | N/A
+                                                           BGX4  | QLM6           | N/A
+                                                           BGX5  | QLM7           | N/A
+                                                           ------+----------------+---------------- */
 #else
 	uint64_t pmux_sds_sel                 : 1;
 	uint64_t bgx_clk_enable               : 1;
@@ -3120,22 +3182,22 @@ union cvmx_bgxx_cmr_mem_ctrl {
 	struct cvmx_bgxx_cmr_mem_ctrl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_24_63               : 40;
-	uint64_t txb_skid_synd                : 2;  /**< Syndrom to flip and generate 1-bit/2-bits error for RXB SKID FIFO */
-	uint64_t txb_skid_cor_dis             : 1;  /**< ECC correction disable for the RXB SKID FIFO */
-	uint64_t txb_fif_bk1_syn              : 2;  /**< Syndrom to flip and generate 1-bit/2-bits error for TXB main Bank1 */
-	uint64_t txb_fif_bk1_cdis             : 1;  /**< ECC corr disable for the TXB main Bank1 */
-	uint64_t txb_fif_bk0_syn              : 2;  /**< Syndrom to flip and generate 1-bit/2-bits error for TXB main Bank0 */
-	uint64_t txb_fif_bk0_cdis             : 1;  /**< ECC corr disable for the TXB main Bank0 */
-	uint64_t rxb_skid_synd                : 2;  /**< Syndrom to flip and generate 1-bit/2-bits error for RXB SKID FIFO */
-	uint64_t rxb_skid_cor_dis             : 1;  /**< ECC correction disable for the RXB SKID FIFO */
-	uint64_t rxb_fif_bk1_syn1             : 2;  /**< Syndrom to flip and generate 1-bit/2-bits error for RXB main Bank1 srf1 */
-	uint64_t rxb_fif_bk1_cdis1            : 1;  /**< ECC corr disable for the RXB main Bank1 srf1 */
-	uint64_t rxb_fif_bk1_syn0             : 2;  /**< Syndrom to flip and generate 1-bit/2-bits error for RXB main Bank1 srf0 */
-	uint64_t rxb_fif_bk1_cdis0            : 1;  /**< ECC corr disable for the RXB main Bank1 srf0 */
-	uint64_t rxb_fif_bk0_syn1             : 2;  /**< Syndrom to flip and generate 1-bit/2-bits error for RXB main Bank0 srf1 */
-	uint64_t rxb_fif_bk0_cdis1            : 1;  /**< ECC corr disable for the RXB main Bank0 srf1 */
-	uint64_t rxb_fif_bk0_syn0             : 2;  /**< Syndrom to flip and generate 1-bit/2-bits error for RXB main Bank0 srf0 */
-	uint64_t rxb_fif_bk0_cdis0            : 1;  /**< ECC corr disable for the RXB main Bank0 srf0 */
+	uint64_t txb_skid_synd                : 2;  /**< Syndrome to flip and generate single-bit/double-bit for TXB SKID FIFO */
+	uint64_t txb_skid_cor_dis             : 1;  /**< ECC-correction disable for the TXB SKID FIFO */
+	uint64_t txb_fif_bk1_syn              : 2;  /**< Syndrome to flip and generate single-bit/double-bit error for TXB main bank1 */
+	uint64_t txb_fif_bk1_cdis             : 1;  /**< ECC-correction disable for the TXB main bank1 */
+	uint64_t txb_fif_bk0_syn              : 2;  /**< Syndrome to flip and generate single-bit/double-bit error for TXB main bank0 */
+	uint64_t txb_fif_bk0_cdis             : 1;  /**< ECC-correction disable for the TXB main bank0 */
+	uint64_t rxb_skid_synd                : 2;  /**< Syndrome to flip and generate single-bit/double-bit error for RXB SKID FIFO */
+	uint64_t rxb_skid_cor_dis             : 1;  /**< ECC-correction disable for the RXB SKID FIFO */
+	uint64_t rxb_fif_bk1_syn1             : 2;  /**< Syndrome to flip and generate single-bit/double-bit error for RXB main bank1 srf1 */
+	uint64_t rxb_fif_bk1_cdis1            : 1;  /**< ECC-correction disable for the RXB main bank1 srf1 */
+	uint64_t rxb_fif_bk1_syn0             : 2;  /**< Syndrome to flip and generate single-bit/double-bit error for RXB main bank1 srf0 */
+	uint64_t rxb_fif_bk1_cdis0            : 1;  /**< ECC-correction disable for the RXB main bank1 srf0. */
+	uint64_t rxb_fif_bk0_syn1             : 2;  /**< Syndrome to flip and generate single-bit/double-bit error for RXB main bank0 srf1 */
+	uint64_t rxb_fif_bk0_cdis1            : 1;  /**< ECC-correction disable for the RXB main bank0 srf1 */
+	uint64_t rxb_fif_bk0_syn0             : 2;  /**< Syndrome to flip and generate single-bit/double-bit error for RXB main bank0 srf0 */
+	uint64_t rxb_fif_bk0_cdis0            : 1;  /**< ECC-correction disable for the RXB main bank0 srf0 */
 #else
 	uint64_t rxb_fif_bk0_cdis0            : 1;
 	uint64_t rxb_fif_bk0_syn0             : 2;
@@ -3162,35 +3224,30 @@ typedef union cvmx_bgxx_cmr_mem_ctrl cvmx_bgxx_cmr_mem_ctrl_t;
 
 /**
  * cvmx_bgx#_cmr_mem_int
- *
- * "***************************************************************************************
- * BGX CMR related CSR starting here with interrupts, then later RX and TX side registers
- * ***************************************************************************************
- * BGX_CMR_MEM_INT = Memory Interrupt Register"
  */
 union cvmx_bgxx_cmr_mem_int {
 	uint64_t u64;
 	struct cvmx_bgxx_cmr_mem_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_18_63               : 46;
-	uint64_t smu_in_overfl                : 1;  /**< RX SMU INFIFO Overflow */
-	uint64_t gmp_in_overfl                : 1;  /**< RX GMP INFIFO Overflow */
-	uint64_t txb_skid_sbe                 : 1;  /**< TXB SKID FIFO single bit error */
-	uint64_t txb_skid_dbe                 : 1;  /**< TXB SKID FIFO double bit error */
-	uint64_t txb_fif_bk1_sbe              : 1;  /**< TXB Main FIFO Bank1 single bit error */
-	uint64_t txb_fif_bk1_dbe              : 1;  /**< TXB Main FIFO Bank1 double bit error */
-	uint64_t txb_fif_bk0_sbe              : 1;  /**< TXB Main FIFO Bank0 single bit error */
-	uint64_t txb_fif_bk0_dbe              : 1;  /**< TXB Main FIFO Bank0 double bit error */
-	uint64_t rxb_skid_sbe                 : 1;  /**< RXB SKID FIFO single bit error */
-	uint64_t rxb_skid_dbe                 : 1;  /**< RXB SKID FIFO double bit error */
-	uint64_t rxb_fif_bk1_sbe1             : 1;  /**< RXB Main FIFO Bank1 srf1 single bit error */
-	uint64_t rxb_fif_bk1_dbe1             : 1;  /**< RXB Main FIFO Bank1 srf1 double bit error */
-	uint64_t rxb_fif_bk1_sbe0             : 1;  /**< RXB Main FIFO Bank1 srf0 single bit error */
-	uint64_t rxb_fif_bk1_dbe0             : 1;  /**< RXB Main FIFO Bank1 srf0 double bit error */
-	uint64_t rxb_fif_bk0_sbe1             : 1;  /**< RXB Main FIFO Bank0 srf1 single bit error */
-	uint64_t rxb_fif_bk0_dbe1             : 1;  /**< RXB Main FIFO Bank0 srf1 double bit error */
-	uint64_t rxb_fif_bk0_sbe0             : 1;  /**< RXB Main FIFO Bank0 srf0 single bit error */
-	uint64_t rxb_fif_bk0_dbe0             : 1;  /**< RXB Main FIFO Bank0 srf0 double bit error */
+	uint64_t smu_in_overfl                : 1;  /**< RX SMU INFIFO overflow */
+	uint64_t gmp_in_overfl                : 1;  /**< RX GMP INFIFO overflow */
+	uint64_t txb_skid_sbe                 : 1;  /**< TXB SKID FIFO single-bit error */
+	uint64_t txb_skid_dbe                 : 1;  /**< TXB SKID FIFO double-bit error */
+	uint64_t txb_fif_bk1_sbe              : 1;  /**< TXB Main FIFO Bank1 single-bit error */
+	uint64_t txb_fif_bk1_dbe              : 1;  /**< TXB Main FIFO Bank1 double-bit error */
+	uint64_t txb_fif_bk0_sbe              : 1;  /**< TXB Main FIFO Bank0 single-bit error */
+	uint64_t txb_fif_bk0_dbe              : 1;  /**< TXB Main FIFO Bank0 double-bit error */
+	uint64_t rxb_skid_sbe                 : 1;  /**< RXB SKID FIFO single-bit error */
+	uint64_t rxb_skid_dbe                 : 1;  /**< RXB SKID FIFO double-bit error */
+	uint64_t rxb_fif_bk1_sbe1             : 1;  /**< RXB main FIFO bank1 srf1 single-bit error */
+	uint64_t rxb_fif_bk1_dbe1             : 1;  /**< RXB main FIFO bank1 srf1 double-bit error */
+	uint64_t rxb_fif_bk1_sbe0             : 1;  /**< RXB main FIFO bank1 srf0 single-bit error */
+	uint64_t rxb_fif_bk1_dbe0             : 1;  /**< RXB main FIFO bank1 srf0 double-bit error */
+	uint64_t rxb_fif_bk0_sbe1             : 1;  /**< RXB main FIFO bank0 srf1 single-bit error */
+	uint64_t rxb_fif_bk0_dbe1             : 1;  /**< RXB main FIFO bank0 srf1 double-bit error */
+	uint64_t rxb_fif_bk0_sbe0             : 1;  /**< RXB main FIFO bank0 srf0 single-bit error */
+	uint64_t rxb_fif_bk0_dbe0             : 1;  /**< RXB main FIFO bank0 srf0 double-bit error */
 #else
 	uint64_t rxb_fif_bk0_dbe0             : 1;
 	uint64_t rxb_fif_bk0_sbe0             : 1;
@@ -3225,7 +3282,7 @@ union cvmx_bgxx_cmr_nxc_adr {
 	struct cvmx_bgxx_cmr_nxc_adr_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_14_63               : 50;
-	uint64_t lmac_id                      : 2;  /**< Logged LMAC_ID associated with NXC exceptions */
+	uint64_t lmac_id                      : 2;  /**< Logged LMAC ID associated with NXC exceptions */
 	uint64_t channel                      : 12; /**< Logged channel for NXC exceptions */
 #else
 	uint64_t channel                      : 12;
@@ -3240,40 +3297,30 @@ typedef union cvmx_bgxx_cmr_nxc_adr cvmx_bgxx_cmr_nxc_adr_t;
 /**
  * cvmx_bgx#_cmr_rx_adr#_cam
  *
- * "**************************************************************
- * Following regs are not per lane but shared in the BGX CMR RXB
- * **************************************************************
- * BGX_CMR_RX_ADR_CAM = Address Filtering CAM"
+ * These registers provide access to the 32 DMAC CAM entries in BGX.
+ *
  */
 union cvmx_bgxx_cmr_rx_adrx_cam {
 	uint64_t u64;
 	struct cvmx_bgxx_cmr_rx_adrx_cam_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_54_63               : 10;
-	uint64_t id                           : 2;  /**< Logical Mac ID this DMAC CAM address will apply to
-                                                         BGX has 32 DMAC CAM entries that can be accessed
-                                                         with the BGX_CMR_RX_ADR_CAM[0..31] CSRs.
-                                                         These 32 DMAC entries can be used by any of the
-                                                         four SGMII MACs or the 10G/40G MACs using the
-                                                         these register bits. A typical configuration is to
-                                                         provide 8 CAM entries per lmac id which is
-                                                         configured using the following settings:
-                                                         lmac0 BGX_CMR_RX_ADR_CAM[0..7] ID= 2'b00
-                                                         lmac1 BGX_CMR_RX_ADR_CAM[8..15] ID= 2'b01
-                                                         lmac2 BGX_CMR_RX_ADR_CAM[16..23] ID= 2'b10
-                                                         lmac3 BGX_CMR_RX_ADR_CAM[24..31] ID= 2'b11 */
+	uint64_t id                           : 2;  /**< Logical MAC ID that this DMAC CAM address applies to. BGX has 32 DMAC CAM entries that can
+                                                         be accessed with the BGX*_CMR_RX_ADR_CAM(0..31) CSRs. These 32 DMAC entries can be used by
+                                                         any of the four SGMII MACs or the 10G/40G MACs using these register bits.
+                                                         A typical configuration is to provide eight CAM entries per LMAC ID, which is configured
+                                                         using the following settings:
+                                                         LMAC interface 0: BGX(0..5)_CMR_RX_ADR(0..7)_CAM[ID] = 0x0
+                                                         LMAC interface 1: BGX(0..5)_CMR_RX_ADR(8..15)_CAM[ID] = 0x1
+                                                         LMAC interface 2: BGX(0..5)_CMR_RX_ADR(16..23)_CAM[ID] = 0x2
+                                                         LMAC interface 3: BGX(0..5)_CMR_RX_ADR(24..31)_CAM[ID] = 0x3 */
 	uint64_t reserved_49_51               : 3;
-	uint64_t en                           : 1;  /**< CAM Entry Enable for this DMAC Address
-                                                         A value of 1 means include this address in the
-                                                         matching algorithm
-                                                         A value of 0 means dont include this address in
-                                                         matching algorigthm */
-	uint64_t adr                          : 48; /**< DMAC address in the CAM used for matching
-                                                         The CAM matches against unicast or multicast DMAC
-                                                         addresses.
-                                                         ALL BGX_CMR_RX_ADR_CAM[0..31] CSRs may be used
-                                                         in any of the LMAC_TYPE combinations such that any BGX
-                                                         MAC can use any of the 32 common DMAC entries. */
+	uint64_t en                           : 1;  /**< CAM entry enable for this DMAC address.
+                                                         1 = Include this address in the matching algorithm.
+                                                         0 = Don't include this address in the matching algorithm. */
+	uint64_t adr                          : 48; /**< DMAC address in the CAM used for matching. The CAM matches against unicast or multicast
+                                                         DMAC addresses. All BGX*_CMR_RX_ADR_CAM(0..31) CSRs can be used in any of the LMAC_TYPE
+                                                         combinations such that any BGX MAC can use any of the 32 common DMAC entries. */
 #else
 	uint64_t adr                          : 48;
 	uint64_t en                           : 1;
@@ -3297,17 +3344,17 @@ union cvmx_bgxx_cmr_rx_lmacs {
 	uint64_t lmacs                        : 3;  /**< "Number of LMACS: Specifies the number of LMACs that can be enabled.
                                                          This determines the logical RX buffer size per LMAC and the maximum
                                                          LMAC ID that can be used:
-                                                         ----------+---------------------------------------------------
-                                                         LMACS     |   RX buffer           Maximum
-                                                                   |   size per LMAC       LMAC ID
-                                                         ----------+---------------------------------------------------
-                                                         0         |   reserved
-                                                         1         |   64KB                0
-                                                         2         |   32KB                1
-                                                         3         |   16KB                2
-                                                         4         |   16KB                3
-                                                         5-7       |   reserved
-                                                         ----------+---------------------------------------------------
+                                                           ----------+---------------------------------------------------
+                                                           LMACS     |   RX buffer           Maximum
+                                                                         size per LMAC       LMAC ID
+                                                           ----------+---------------------------------------------------
+                                                           0         |   reserved
+                                                           1         |   64KB                0
+                                                           2         |   32KB                1
+                                                           3         |   16KB                2
+                                                           4         |   16KB                3
+                                                           5-7       |   reserved
+                                                           ----------+---------------------------------------------------
                                                          Note: The maximum LMAC ID is determined by the smaller of
                                                          BGX_CMR_RX_LMACS[LMACS] and BGX_CMR_TX_LMACS[LMACS]. The two fields
                                                          should be set to the same value for normal operation." */
@@ -3322,18 +3369,27 @@ typedef union cvmx_bgxx_cmr_rx_lmacs cvmx_bgxx_cmr_rx_lmacs_t;
 
 /**
  * cvmx_bgx#_cmr_rx_ovr_bp
+ *
+ * BGX_CMR_RX_OVR_BP[EN<0>] must be set to one and BGX_CMR_RX_OVR_BP[BP<0>] must be cleared to
+ * zero (to forcibly disable hardware-automatic 802.3 PAUSE packet generation) with the HiGig2
+ * Protocol when BGX_SMU_HG2_CONTROL[HG2TX_EN]=0. (The HiGig2 protocol is indicated by
+ * BGX_SMU_TX_CTL[HG_EN]=1 and BGX_SMU_RX_UDD_SKP[LEN]=16). Hardware can only auto-generate
+ * backpressure through HiGig2 messages (optionally, when BGX_SMU_HG2_CONTROL[HG2TX_EN]=1) with
+ * the HiGig2 protocol.
  */
 union cvmx_bgxx_cmr_rx_ovr_bp {
 	uint64_t u64;
 	struct cvmx_bgxx_cmr_rx_ovr_bp_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_12_63               : 52;
-	uint64_t en                           : 4;  /**< Per lmac Enable back pressure override */
-	uint64_t bp                           : 4;  /**< Per lmac BackPressure status to use
-                                                         0=lmac is available
-                                                         1=lmac should be back pressured */
-	uint64_t ign_fifo_bp                  : 4;  /**< Ignore the RX FIFO BP_ON signal when computing BP.
-                                                         CMR will not backpressure the mac due to the fifo length passing BP_ON mark. */
+	uint64_t en                           : 4;  /**< Per-LMAC enable backpressure override.
+                                                         1 = Enable override, 0 = Don't enable
+                                                         Bit<8> represents LMAC 0, ..., bit<11> represents LMAC 3. */
+	uint64_t bp                           : 4;  /**< Per-LMAC backpressure status to use:
+                                                         1 = LMAC should be backpressured, 0 = LMAC is available
+                                                         Bit<4> represents LMAC 0, ..., bit<7> represents LMAC 3. */
+	uint64_t ign_fifo_bp                  : 4;  /**< Ignore the RX FIFO BP_ON signal when computing backpressure. CMR does not backpressure the
+                                                         MAC due to the FIFO length passing BP_ON mark. */
 #else
 	uint64_t ign_fifo_bp                  : 4;
 	uint64_t bp                           : 4;
@@ -3348,10 +3404,8 @@ typedef union cvmx_bgxx_cmr_rx_ovr_bp cvmx_bgxx_cmr_rx_ovr_bp_t;
 /**
  * cvmx_bgx#_cmr_tx_lmacs
  *
- * "**************************************************************
- * Following regs are not per lane but shared in the BGX CMR TXB
- * **************************************************************
- * BGX_CMR_TX_LMACS = Number of TX lmacs"
+ * Number of transmit LMACs.
+ *
  */
 union cvmx_bgxx_cmr_tx_lmacs {
 	uint64_t u64;
@@ -3361,17 +3415,17 @@ union cvmx_bgxx_cmr_tx_lmacs {
 	uint64_t lmacs                        : 3;  /**< "Number of LMACS: Specifies the number of LMACs that can be enabled.
                                                          This determines the logical TX buffer size per LMAC and the maximum
                                                          LMAC ID that can be used:
-                                                         ----------+---------------------------------------------------
-                                                         LMACS     |   TX buffer           Maximum
-                                                                   |   size per LMAC       LMAC ID
-                                                         ----------+---------------------------------------------------
-                                                         0         |   reserved
-                                                         1         |   32KB                0
-                                                         2         |   16KB                1
-                                                         3         |   8KB                 2
-                                                         4         |   8KB                 3
-                                                         5-7       |   reserved
-                                                         ----------+---------------------------------------------------
+                                                           ----------+---------------------------------------------------
+                                                           LMACS     |   TX buffer           Maximum
+                                                                         size per LMAC       LMAC ID
+                                                           ----------+---------------------------------------------------
+                                                           0         |   reserved
+                                                           1         |   32KB                0
+                                                           2         |   16KB                1
+                                                           3         |   8KB                 2
+                                                           4         |   8KB                 3
+                                                           5-7       |   reserved
+                                                           ----------+---------------------------------------------------
                                                          Note: The maximum LMAC ID is determined by the smaller of
                                                          BGX_CMR_RX_LMACS[LMACS] and BGX_CMR_TX_LMACS[LMACS]. The two fields
                                                          should be set to the same value for normal operation." */
@@ -3386,34 +3440,36 @@ typedef union cvmx_bgxx_cmr_tx_lmacs cvmx_bgxx_cmr_tx_lmacs_t;
 
 /**
  * cvmx_bgx#_gmp_gmi_prt#_cfg
+ *
+ * This register controls the configuration of the LMAC.
+ *
  */
 union cvmx_bgxx_gmp_gmi_prtx_cfg {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_gmi_prtx_cfg_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_14_63               : 50;
-	uint64_t tx_idle                      : 1;  /**< TX Machine is idle */
-	uint64_t rx_idle                      : 1;  /**< RX Machine is idle */
+	uint64_t tx_idle                      : 1;  /**< TX machine is idle. */
+	uint64_t rx_idle                      : 1;  /**< RX machine is idle. */
 	uint64_t reserved_9_11                : 3;
-	uint64_t speed_msb                    : 1;  /**< Link Speed MSB [SPEED_MSB:SPEED]
-                                                         10 = 10Mbs operation
-                                                         00 = 100Mbs operation
-                                                         01 = 1000Mbs operation
+	uint64_t speed_msb                    : 1;  /**< Link speed MSB [SPEED_MSB:SPEED]
+                                                         10 = 10 Mb/s operation
+                                                         00 = 100 Mb/s operation
+                                                         01 = 1000 Mb/s operation
                                                          11 = Reserved
                                                          (SGMII/1000Base-X only) */
 	uint64_t reserved_4_7                 : 4;
-	uint64_t slottime                     : 1;  /**< Slot Time for Half-Duplex operation
-                                                         0 = 512 bitimes (10/100Mbs operation)
-                                                         1 = 4096 bitimes (1000Mbs operation)
+	uint64_t slottime                     : 1;  /**< Slot time for half-duplex operation
+                                                         0 = 512 bit times (10/100 Mb/s operation)
+                                                         1 = 4096 bit times (1000 Mb/s operation)
                                                          (SGMII/1000Base-X only) */
-	uint64_t duplex                       : 1;  /**< Duplex
-                                                         0 = Half Duplex (collisions/extentions/bursts)
-                                                         1 = Full Duplex
+	uint64_t duplex                       : 1;  /**< Duplex mode:
+                                                         0 = half-duplex (collisions/extensions/bursts), 1 = full-duplex.
                                                          (SGMII/1000Base-X only) */
 	uint64_t speed                        : 1;  /**< Link Speed LSB [SPEED_MSB:SPEED]
-                                                         10 = 10Mbs operation
-                                                         00 = 100Mbs operation
-                                                         01 = 1000Mbs operation
+                                                         10 = 10 Mb/s operation
+                                                         00 = 100 Mb/s operation
+                                                         01 = 1000 Mb/s operation
                                                          11 = Reserved
                                                          (SGMII/1000Base-X only) */
 	uint64_t reserved_0_0                 : 1;
@@ -3461,8 +3517,7 @@ union cvmx_bgxx_gmp_gmi_rxx_decision {
 	struct cvmx_bgxx_gmp_gmi_rxx_decision_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_5_63                : 59;
-	uint64_t cnt                          : 5;  /**< The byte count to decide when to accept or filter
-                                                         a packet. */
+	uint64_t cnt                          : 5;  /**< The byte count used to decide when to accept or filter a packet. Refer to GMI Decisions. */
 #else
 	uint64_t cnt                          : 5;
 	uint64_t reserved_5_63                : 59;
@@ -3474,25 +3529,20 @@ typedef union cvmx_bgxx_gmp_gmi_rxx_decision cvmx_bgxx_gmp_gmi_rxx_decision_t;
 
 /**
  * cvmx_bgx#_gmp_gmi_rx#_frm_chk
- *
- * Notes:
- * If BGX_GMP_GMI_RX_UDD_SKP[LEN] != 0, then LENERR will be forced to zero in HW.
- * BGX_GMP_GMI_RX_FRM_CHK = Which frame errors will set the ERR bit of the frame
  */
 union cvmx_bgxx_gmp_gmi_rxx_frm_chk {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_gmi_rxx_frm_chk_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_9_63                : 55;
-	uint64_t skperr                       : 1;  /**< Skipper error */
-	uint64_t rcverr                       : 1;  /**< Frame was received with Data reception error */
+	uint64_t skperr                       : 1;  /**< Skipper error. */
+	uint64_t rcverr                       : 1;  /**< Frame was received with data-reception error. */
 	uint64_t reserved_5_6                 : 2;
-	uint64_t fcserr                       : 1;  /**< Frame was received with FCS/CRC error */
-	uint64_t jabber                       : 1;  /**< Frame was received with length > sys_length */
+	uint64_t fcserr                       : 1;  /**< Frame was received with FCS/CRC error. */
+	uint64_t jabber                       : 1;  /**< Frame was received with length > sys_length. */
 	uint64_t reserved_2_2                 : 1;
-	uint64_t carext                       : 1;  /**< Carrier extend error
-                                                         (SGMII/1000Base-X only) */
-	uint64_t minerr                       : 1;  /**< Pause Frame was received with length<minFrameSize */
+	uint64_t carext                       : 1;  /**< Carrier extend error. SGMII/1000Base-X only. */
+	uint64_t minerr                       : 1;  /**< PAUSE frame was received with length < minFrameSize. */
 #else
 	uint64_t minerr                       : 1;
 	uint64_t carext                       : 1;
@@ -3537,61 +3587,51 @@ union cvmx_bgxx_gmp_gmi_rxx_frm_ctl {
 	struct cvmx_bgxx_gmp_gmi_rxx_frm_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_13_63               : 51;
-	uint64_t ptp_mode                     : 1;  /**< Timestamp mode
-                                                         When PTP_MODE is set, a 64-bit timestamp will be
-                                                         prepended to every incoming packet. The timestamp
-                                                         bytes are added to the packet in such a way as to
-                                                         not modify the packet's receive byte count.  This
-                                                         implies that the BGX_GMP_GMI_RX_JABBER, MINERR,
-                                                         BGX_GMP_GMI_RX_DECISION, BGX_GMP_GMI_RX_UDD_SKP, and the
-                                                         BGX_GMP_GMI_RX_STATS_* do not require any adjustment
-                                                         as they operate on the received packet size.
-                                                         When the packet reaches PKI, its size will
-                                                         reflect the additional bytes and is subject to
-                                                         the restrictions below.
-                                                         If PTP_MODE=1 and PRE_CHK=1, PRE_STRP must be 1.
-                                                         If PTP_MODE=1,
-                                                         PIP_PRT_CFGx[SKIP] should be increased by 8.
-                                                         PIP_PRT_CFGx[HIGIG_EN] should be 0.
-                                                         PIP_FRM_CHKx[MAXLEN] should be increased by 8.
-                                                         PIP_FRM_CHKx[MINLEN] should be increased by 8.
-                                                         PIP_TAG_INCx[EN] should be adjusted.
-                                                         PIP_PRT_CFGBx[ALT_SKP_EN] should be 0. */
+	uint64_t ptp_mode                     : 1;  /**< Timestamp mode. When PTP_MODE is set, a 64-bit timestamp is prepended to every incoming
+                                                         packet.
+                                                         The timestamp bytes are added to the packet in such a way as to not modify the packet's
+                                                         receive byte count. This implies that the BGX(0..5)_GMP_GMI_RX(0..3)_RX_JABBER,
+                                                         BGX(0..5)_GMP_GMI_RX(0..3)_RX_DECISION, BGX(0..5)_GMP_GMI_RX(0..3)_UDD_SKP, and
+                                                         BGX(0..5)_CMR(0..3)_RX_STAT* do not require any adjustment as they operate on the received
+                                                         packet size. When the packet reaches PKI, its size reflects the additional bytes and is
+                                                         subject to the following restrictions:
+                                                         If PTP_MODE = 1 and PRE_CHK = 1, PRE_STRP must be 1.
+                                                         If PTP_MODE = 1
+                                                         PKI_CL(0..3)_PKIND(0..63)_SKIP[FCS_SKIP,INST_SKIP] should be increased by 8.
+                                                         PKI_CL(0..3)_PKIND(0..63)_CFG[HG_EN] should be 0.
+                                                         PKI_FRM_LEN_CHK(0..1)[MAXLEN] should be increased by 8.
+                                                         PKI_FRM_LEN_CHK(0..1)[MINLEN] should be increased by 8.
+                                                         PIP_TAG_INC(0..63)[EN] should be adjusted.
+                                                         PIP_PRT_CFGB(0..63)[ALT_SKP_EN] should be 0. */
 	uint64_t reserved_11_11               : 1;
-	uint64_t null_dis                     : 1;  /**< When set, do not modify the MOD bits on NULL ticks
-                                                         due to PARITAL packets */
-	uint64_t pre_align                    : 1;  /**< When set, PREAMBLE parser aligns the the SFD byte
-                                                         regardless of the number of previous PREAMBLE
-                                                         nibbles.  In this mode, PRE_STRP should be set to
-                                                         account for the variable nature of the PREAMBLE.
-                                                         PRE_CHK must be set to enable this and all
-                                                         PREAMBLE features.
-                                                         (SGMII at 10/100Mbs only) */
+	uint64_t null_dis                     : 1;  /**< When set, do not modify the MOD bits on NULL ticks due to partial packets. */
+	uint64_t pre_align                    : 1;  /**< When set, PREAMBLE parser aligns the SFD byte regardless of the number of previous
+                                                         PREAMBLE nibbles. In this mode, PRE_STRP should be set to account for the variable nature
+                                                         of the PREAMBLE. PRE_CHK must be set to enable this and all PREAMBLE features.
+                                                         SGMII at 10/100Mbs only. */
 	uint64_t reserved_7_8                 : 2;
-	uint64_t pre_free                     : 1;  /**< When set, PREAMBLE checking is  less strict.
-                                                         GMX will begin the frame at the first SFD.
-                                                         PRE_CHK must be set to enable this and all
-                                                         PREAMBLE features.
-                                                         (SGMII/1000Base-X only) */
-	uint64_t ctl_smac                     : 1;  /**< Control Pause Frames can match station SMAC */
-	uint64_t ctl_mcst                     : 1;  /**< Control Pause Frames can match globally assign
-                                                         Multicast address */
-	uint64_t ctl_bck                      : 1;  /**< Forward pause information to TX block */
-	uint64_t ctl_drp                      : 1;  /**< Drop Control Pause Frames */
-	uint64_t pre_strp                     : 1;  /**< Strip off the preamble (when present)
-                                                         0=PREAMBLE+SFD is sent to core as part of frame
-                                                         1=PREAMBLE+SFD is dropped
-                                                         PRE_CHK must be set to enable this and all
-                                                         PREAMBLE features.
-                                                         If PTP_MODE=1 and PRE_CHK=1, PRE_STRP must be 1. */
-	uint64_t pre_chk                      : 1;  /**< This port is configured to send a valid 802.3
-                                                         PREAMBLE to begin every frame. GMX checks that a
-                                                         valid PREAMBLE is received (based on PRE_FREE).
-                                                         When a problem does occur within the PREAMBLE
-                                                         seqeunce, the frame is marked as bad and not sent
-                                                         into the core.  The BGX_GMP_GMI_RX_INT[PCTERR]
-                                                         interrupt is also raised.
-                                                         If PTP_MODE=1 and PRE_CHK=1, PRE_STRP must be 1. */
+	uint64_t pre_free                     : 1;  /**< When set, PREAMBLE checking is less strict. GMX will begin the frame at the first SFD.
+                                                         PRE_CHK must be set to enable this and all PREAMBLE features. SGMII/1000Base-X only. */
+	uint64_t ctl_smac                     : 1;  /**< Control PAUSE frames can match station SMAC. */
+	uint64_t ctl_mcst                     : 1;  /**< Control PAUSE frames can match globally assign multicast address. */
+	uint64_t ctl_bck                      : 1;  /**< Forward PAUSE information to TX block. */
+	uint64_t ctl_drp                      : 1;  /**< Drop control-PAUSE frames. */
+	uint64_t pre_strp                     : 1;  /**< Strip off the preamble (when present).
+                                                         0 = PREAMBLE + SFD is sent to core as part of frame.
+                                                         1 = PREAMBLE + SFD is dropped.
+                                                         [PRE_CHK] must be set to enable this and all PREAMBLE features.
+                                                         If PTP_MODE=1 and PRE_CHK=1, PRE_STRP must be 1.
+                                                         When PRE_CHK is set (indicating that the PREAMBLE will be sent), PRE_STRP determines if
+                                                         the PREAMBLE+SFD bytes are thrown away or sent to the core as part of the packet. In
+                                                         either mode, the PREAMBLE+SFD bytes are not counted toward the packet size when checking
+                                                         against the MIN and MAX bounds. Furthermore, the bytes are skipped when locating the start
+                                                         of the L2 header for DMAC and Control frame recognition. */
+	uint64_t pre_chk                      : 1;  /**< Check the preamble for correctness. This port is configured to send a valid 802.3 PREAMBLE
+                                                         to begin every frame. GMX checks that a valid PREAMBLE is received (based on PRE_FREE).
+                                                         When a problem does occur within the PREAMBLE sequence, the frame is marked as bad and not
+                                                         sent into the core. The BGX(0..5)_SMU(0..3)_RX_INT[PCTERR] interrupt is also raised.
+                                                         When BGX(0..5)_SMU(0..3)_TX_CTL[HG_EN] is set, PRE_CHK must be 0. If PTP_MODE = 1 and
+                                                         PRE_CHK = 1, PRE_STRP must be 1. */
 #else
 	uint64_t pre_chk                      : 1;
 	uint64_t pre_strp                     : 1;
@@ -3615,7 +3655,7 @@ typedef union cvmx_bgxx_gmp_gmi_rxx_frm_ctl cvmx_bgxx_gmp_gmi_rxx_frm_ctl_t;
 /**
  * cvmx_bgx#_gmp_gmi_rx#_ifg
  *
- * BGX_GMP_GMI_RX_IFG = RX Min IFG
+ * This register specifies the minimum number of interframe-gap (IFG) cycles between packets.
  *
  */
 union cvmx_bgxx_gmp_gmi_rxx_ifg {
@@ -3623,13 +3663,11 @@ union cvmx_bgxx_gmp_gmi_rxx_ifg {
 	struct cvmx_bgxx_gmp_gmi_rxx_ifg_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
-	uint64_t ifg                          : 4;  /**< Min IFG (in IFG*8 bits) between packets used to
-                                                         determine IFGERR. Normally IFG is 96 bits.
-                                                         Note in some operating modes, IFG cycles can be
-                                                         inserted or removed in order to achieve clock rate
-                                                         adaptation. For these reasons, the default value
-                                                         is slightly conservative and does not check upto
-                                                         the full 96 bits of IFG.
+	uint64_t ifg                          : 4;  /**< Min IFG (in IFG * 8 bits) between packets used to determine IFGERR. Normally IFG is 96
+                                                         bits.
+                                                         Note that in some operating modes, IFG cycles can be inserted or removed in order to
+                                                         achieve clock rate adaptation. For these reasons, the default value is slightly
+                                                         conservative and does not check up to the full 96 bits of IFG.
                                                          (SGMII/1000Base-X only) */
 #else
 	uint64_t ifg                          : 4;
@@ -3695,28 +3733,30 @@ union cvmx_bgxx_gmp_gmi_rxx_int {
 	struct cvmx_bgxx_gmp_gmi_rxx_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_12_63               : 52;
-	uint64_t ifgerr                       : 1;  /**< Interframe Gap Violation
-                                                         Does not necessarily indicate a failure
-                                                         (SGMII/1000Base-X only) */
-	uint64_t coldet                       : 1;  /**< Collision Detection
-                                                         (SGMII/1000Base-X half-duplex only) */
-	uint64_t falerr                       : 1;  /**< False carrier error or extend error after slottime
-                                                         (SGMII/1000Base-X only) */
-	uint64_t rsverr                       : 1;  /**< Reserved opcodes */
-	uint64_t pcterr                       : 1;  /**< Bad Preamble / Protocol */
-	uint64_t ovrerr                       : 1;  /**< Internal Data Aggregation Overflow ??
-                                                         This interrupt should never assert
-                                                         (SGMII/1000Base-X only) */
-	uint64_t skperr                       : 1;  /**< Skipper error */
-	uint64_t rcverr                       : 1;  /**< Frame was received with Data reception error */
-	uint64_t fcserr                       : 1;  /**< Frame was received with FCS/CRC error */
-	uint64_t jabber                       : 1;  /**< Frame was received with length > sys_length */
+	uint64_t ifgerr                       : 1;  /**< Interframe gap violation. Does not necessarily indicate a failure. SGMII/1000Base-X only. */
+	uint64_t coldet                       : 1;  /**< Collision detection. Collisions can only occur in half-duplex mode. A collision is assumed
+                                                         by the receiver when the slottime (BGX(0..5)_GMP_GMI_PRT(0..3)_CFG[SLOTTIME]) is not
+                                                         satisfied. In 10/100 mode, this will result in a frame < SLOTTIME. In 1000 mode, it could
+                                                         result either in frame < SLOTTIME or a carrier extend error with the SLOTTIME. These
+                                                         conditions are visible by 1) transfer ended before slottime - COLDET or 2) carrier extend
+                                                         error - CAREXT. */
+	uint64_t falerr                       : 1;  /**< False-carrier error, or carrier-extend error after slottime is satisfied. SGMII/1000Base-X only. */
+	uint64_t rsverr                       : 1;  /**< Reserved opcode. */
+	uint64_t pcterr                       : 1;  /**< Bad preamble/protocol error. Checks that the frame begins with a valid PREAMBLE sequence.
+                                                         Does not check the number of PREAMBLE cycles. */
+	uint64_t ovrerr                       : 1;  /**< Internal data aggregation overflow. This interrupt should never assert. SGMII/1000Base-X only. */
+	uint64_t skperr                       : 1;  /**< Skipper error. */
+	uint64_t rcverr                       : 1;  /**< Data-reception error. Frame was received with data-reception error */
+	uint64_t fcserr                       : 1;  /**< FCS/CRC error. Frame was received with FCS/CRC error */
+	uint64_t jabber                       : 1;  /**< System-length error: frame was received with length > sys_length.
+                                                         An RX Jabber error indicates that a packet was received which is longer than the maximum
+                                                         allowed packet as defined by the system. GMX truncates the packet at the JABBER count.
+                                                         Failure to do so could lead to system instability. */
 	uint64_t carext                       : 1;  /**< Carrier extend error
                                                          (SGMII/1000Base-X only) */
-	uint64_t minerr                       : 1;  /**< Pause Frame was received with length<minFrameSize
-                                                         Frame length checks are typically handled in PIP
-                                                         (PIP_INT[MINERR]), but pause frames are
-                                                         normally discarded before being inspected by PIP. */
+	uint64_t minerr                       : 1;  /**< PAUSE frame was received with length < minFrameSize. Frame length checks are typically
+                                                         handled in PKI, but PAUSE frames are normally discarded before being inspected by PKI.
+                                                         Total frame DA+SA+TL+DATA+PAD+FCS < 64. */
 #else
 	uint64_t minerr                       : 1;
 	uint64_t carext                       : 1;
@@ -3755,10 +3795,9 @@ union cvmx_bgxx_gmp_gmi_rxx_jabber {
 	struct cvmx_bgxx_gmp_gmi_rxx_jabber_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t cnt                          : 16; /**< Byte count for jabber check
-                                                         Failing packets set the JABBER interrupt and are
-                                                         optionally sent with opcode==JABBER
-                                                         GMX will truncate the packet to CNT bytes */
+	uint64_t cnt                          : 16; /**< Byte count for jabber check. Failing packets set the JABBER interrupt and are optionally
+                                                         sent with opcode = JABBER. GMI truncates the packet to CNT bytes.
+                                                         CNT must be 8-byte aligned such that CNT<2:0> = 000. */
 #else
 	uint64_t cnt                          : 16;
 	uint64_t reserved_16_63               : 48;
@@ -3797,13 +3836,20 @@ union cvmx_bgxx_gmp_gmi_rxx_udd_skp {
 	struct cvmx_bgxx_gmp_gmi_rxx_udd_skp_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_9_63                : 55;
-	uint64_t fcssel                       : 1;  /**< Include the skip bytes in the FCS calculation
+	uint64_t fcssel                       : 1;  /**< Include the skip bytes in the FCS calculation.
                                                          0 = all skip bytes are included in FCS
-                                                         1 = the skip bytes are not included in FCS */
+                                                         1 = the skip bytes are not included in FCS
+                                                         When BGX(0..5)_GMP_GMI_TX(0..3)_CTL[HG_EN] is set, this field must be 0.
+                                                         The skip bytes are part of the packet and are sent through the IOI packet interface and
+                                                         are handled by PKI. The system can determine if the UDD bytes are included in the FCS
+                                                         check by using the FCSSEL field, if the FCS check is enabled. */
 	uint64_t reserved_7_7                 : 1;
-	uint64_t len                          : 7;  /**< Amount of User-defined data before the start of
-                                                         the L2 data.  Zero means L2 comes first.
-                                                         Max value is 64. */
+	uint64_t len                          : 7;  /**< Amount of user-defined data before the start of the L2C data, in bytes.
+                                                         Setting to 0 means L2C comes first; maximum value is 64.
+                                                         LEN must be 0x0 in half-duplex operation.
+                                                         When BGX(0..5)_GMP_GMI_TX(0..3)_CTL[HG_EN] is set, this field must be set to 12 or 16
+                                                         (depending on HiGig header size) to account for the HiGig header.
+                                                         LEN = 12 selects HiGig/HiGig+; LEN = 16 selects HiGig2. */
 #else
 	uint64_t len                          : 7;
 	uint64_t reserved_7_7                 : 1;
@@ -3823,8 +3869,7 @@ union cvmx_bgxx_gmp_gmi_smacx {
 	struct cvmx_bgxx_gmp_gmi_smacx_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t smac                         : 48; /**< The SMAC field is used for generating and
-                                                         accepting Control Pause packets */
+	uint64_t smac                         : 48; /**< The SMAC field is used for generating and accepting control PAUSE packets. */
 #else
 	uint64_t smac                         : 48;
 	uint64_t reserved_48_63               : 16;
@@ -3842,14 +3887,11 @@ union cvmx_bgxx_gmp_gmi_txx_append {
 	struct cvmx_bgxx_gmp_gmi_txx_append_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
-	uint64_t force_fcs                    : 1;  /**< Append the Ethernet FCS on each pause packet
-                                                         when FCS is clear. Pause packets are normally
-                                                         padded to 60 bytes.
-                                                         If BGX_GMP_GMI_TX_MIN_PKT[MIN_SIZE]
-                                                         exceeds 59, then FORCE_FCS will not be used. */
-	uint64_t fcs                          : 1;  /**< Append the Ethernet FCS on each packet */
-	uint64_t pad                          : 1;  /**< Append PAD bytes such that min sized */
-	uint64_t preamble                     : 1;  /**< Prepend the Ethernet preamble on each transfer */
+	uint64_t force_fcs                    : 1;  /**< Append the Ethernet FCS on each PAUSE packet. PAUSE packets are normally padded to 60
+                                                         bytes. If BGX(0..5)_GMP_GMI_TX(0..3)_MIN_PKT[MIN_SIZE] exceeds 59, then FCS_C is not used. */
+	uint64_t fcs                          : 1;  /**< Append the Ethernet FCS on each packet. */
+	uint64_t pad                          : 1;  /**< Append PAD bytes such that minimum-sized packet is transmitted. */
+	uint64_t preamble                     : 1;  /**< Prepend the Ethernet preamble on each transfer. */
 #else
 	uint64_t preamble                     : 1;
 	uint64_t pad                          : 1;
@@ -3870,11 +3912,11 @@ union cvmx_bgxx_gmp_gmi_txx_burst {
 	struct cvmx_bgxx_gmp_gmi_txx_burst_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t burst                        : 16; /**< Burst (refer to 802.3 to set correctly)
-                                                         Only valid for 1000Mbs half-duplex operation
-                                                         halfdup / 1000Mbs: 0x2000
-                                                         all other modes:   0x0
-                                                         (SGMII/1000Base-X only) */
+	uint64_t burst                        : 16; /**< Burst (refer to 802.3 to set correctly). Only valid for 1000Mb/s half-duplex operation as
+                                                         follows:
+                                                         half duplex/1000Mb/s: 0x2000
+                                                         all other modes: 0x0
+                                                         SGMII/1000Base-X only. */
 #else
 	uint64_t burst                        : 16;
 	uint64_t reserved_16_63               : 48;
@@ -3892,12 +3934,10 @@ union cvmx_bgxx_gmp_gmi_txx_ctl {
 	struct cvmx_bgxx_gmp_gmi_txx_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_2_63                : 62;
-	uint64_t xsdef_en                     : 1;  /**< Enables the excessive deferral check for stats
-                                                         and interrupts
-                                                         (SGMII/1000Base-X half-duplex only) */
-	uint64_t xscol_en                     : 1;  /**< Enables the excessive collision check for stats
-                                                         and interrupts
-                                                         (SGMII/1000Base-X half-duplex only) */
+	uint64_t xsdef_en                     : 1;  /**< Enables the excessive-deferral check for statistics and interrupts. SGMII/1000Base-X half-
+                                                         duplex only. */
+	uint64_t xscol_en                     : 1;  /**< Enables the excessive-collision check for statistics and interrupts. SGMII/1000Base-X
+                                                         half-duplex only. */
 #else
 	uint64_t xscol_en                     : 1;
 	uint64_t xsdef_en                     : 1;
@@ -3916,15 +3956,11 @@ union cvmx_bgxx_gmp_gmi_txx_int {
 	struct cvmx_bgxx_gmp_gmi_txx_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_5_63                : 59;
-	uint64_t ptp_lost                     : 1;  /**< A packet with a PTP request was not able to be
-                                                         sent due to XSCOL */
-	uint64_t late_col                     : 1;  /**< TX Late Collision
-                                                         (SGMII/1000Base-X half-duplex only) */
-	uint64_t xsdef                        : 1;  /**< TX Excessive deferral
-                                                         (SGMII/1000Base-X half-duplex only) */
-	uint64_t xscol                        : 1;  /**< TX Excessive collisions
-                                                         (SGMII/1000Base-X half-duplex only) */
-	uint64_t undflw                       : 1;  /**< TX Underflow */
+	uint64_t ptp_lost                     : 1;  /**< A packet with a PTP request was not able to be sent due to XSCOL. */
+	uint64_t late_col                     : 1;  /**< TX late collision. (SGMII/1000BASE-X half-duplex only) */
+	uint64_t xsdef                        : 1;  /**< TX excessive deferral. (SGMII/1000BASE-X half-duplex only) */
+	uint64_t xscol                        : 1;  /**< TX excessive collisions. (SGMII/1000BASE-X half-duplex only) */
+	uint64_t undflw                       : 1;  /**< TX underflow. */
 #else
 	uint64_t undflw                       : 1;
 	uint64_t xscol                        : 1;
@@ -3940,21 +3976,16 @@ typedef union cvmx_bgxx_gmp_gmi_txx_int cvmx_bgxx_gmp_gmi_txx_int_t;
 
 /**
  * cvmx_bgx#_gmp_gmi_tx#_min_pkt
- *
- * BGX_GMP_GMI_TX_MIN_PKT = Packet TX Min Size Packet (PAD upto min size)
- *
  */
 union cvmx_bgxx_gmp_gmi_txx_min_pkt {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_gmi_txx_min_pkt_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_8_63                : 56;
-	uint64_t min_size                     : 8;  /**< Min frame in bytes before the FCS is applied
-                                                         Padding is only appened when
-                                                         BGX_GMP_GMI_TX_APPEND[PAD] for the coresponding port
-                                                         is set.
-                                                         In SGMII mode, packets will be padded to
-                                                         MIN_SIZE+1. The reset value will pad to 60 bytes. */
+	uint64_t min_size                     : 8;  /**< Minimum frame size in bytes before the FCS is applied.
+                                                         Padding is only appended when BGX(0..5)_GMP_GMI_TX(0..3)_APPEND[PAD] for the corresponding
+                                                         LMAC is set.
+                                                         In SGMII mode, packets are padded to MIN_SIZE+1. The reset value pads to 60 bytes. */
 #else
 	uint64_t min_size                     : 8;
 	uint64_t reserved_8_63                : 56;
@@ -3988,12 +4019,9 @@ union cvmx_bgxx_gmp_gmi_txx_pause_pkt_interval {
 	struct cvmx_bgxx_gmp_gmi_txx_pause_pkt_interval_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t interval                     : 16; /**< Arbitrate for a 802.3 pause packet,
-                                                         or CBFC pause packet every (INTERVAL*512)
-                                                         bit-times.
-                                                         Normally, 0 < INTERVAL < BGX_GMP_GMI_TX_PAUSE_PKT_TIME
-                                                         INTERVAL=0, will only send a single PAUSE packet
-                                                         for each backpressure event */
+	uint64_t interval                     : 16; /**< Arbitrate for a 802.3 PAUSE packet or CBFC PAUSE packet every (INTERVAL * 512) bit-times.
+                                                         Normally, 0 < INTERVAL < BGX(0..5)_GMP_GMI_TX(0..3)_PAUSE_PKT_TIME[TIME].
+                                                         INTERVAL = 0 only sends a single PAUSE packet for each backpressure event. */
 #else
 	uint64_t interval                     : 16;
 	uint64_t reserved_16_63               : 48;
@@ -4005,32 +4033,16 @@ typedef union cvmx_bgxx_gmp_gmi_txx_pause_pkt_interval cvmx_bgxx_gmp_gmi_txx_pau
 
 /**
  * cvmx_bgx#_gmp_gmi_tx#_pause_pkt_time
- *
- * Notes:
- * Choosing proper values of BGX_GMP_GMI_TX_PAUSE_PKT_TIME[TIME] and
- * BGX_GMP_GMI_TX_PAUSE_PKT_INTERVAL[INTERVAL] can be challenging to the system
- * designer.  It is suggested that TIME be much greater than INTERVAL and
- * BGX_GMP_GMI_TX_PAUSE_ZERO[SEND] be set.  This allows a periodic refresh of the PAUSE
- * count and then when the backpressure condition is lifted, a PAUSE packet
- * with TIME==0 will be sent indicating that Octane is ready for additional
- * data.
- * If the system chooses to not set BGX_GMP_GMI_TX_PAUSE_ZERO[SEND], then it is
- * suggested that TIME and INTERVAL are programmed such that they satisify the
- * following rule...
- * INTERVAL <= TIME - (largest_pkt_size + IFG + pause_pkt_size)
- * where largest_pkt_size is that largest packet that the system can send
- * (normally 1518B), IFG is the interframe gap and pause_pkt_size is the size
- * of the PAUSE packet (normally 64B).
  */
 union cvmx_bgxx_gmp_gmi_txx_pause_pkt_time {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_gmi_txx_pause_pkt_time_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t ptime                        : 16; /**< The pause_time field placed in outbnd 802.3 pause
-                                                         packets, or CBFC pause packets.
-                                                         pause_time is in 512 bit-times
-                                                         Normally, TIME > BGX_GMP_GMI_TX_PAUSE_PKT_INTERVAL */
+	uint64_t ptime                        : 16; /**< Provides the pause_time field placed in outbound 802.3 PAUSE packets or CBFC PAUSE packets
+                                                         in 512 bit-times. Normally, P_TIME >
+                                                         BGX(0..5)_GMP_GMI_TX(0..3)_PAUSE_PKT_INTERVAL[INTERVAL]. For programming information see
+                                                         BGX(0..5)_GMP_GMI_TX(0..3)_PAUSE_PKT_INTERVAL. */
 #else
 	uint64_t ptime                        : 16;
 	uint64_t reserved_16_63               : 48;
@@ -4048,8 +4060,7 @@ union cvmx_bgxx_gmp_gmi_txx_pause_togo {
 	struct cvmx_bgxx_gmp_gmi_txx_pause_togo_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t ptime                        : 16; /**< Amount of time remaining to backpressure
-                                                         From the standard 802.3 pause timer */
+	uint64_t ptime                        : 16; /**< Amount of time remaining to backpressure, from the standard 802.3 PAUSE timer. */
 #else
 	uint64_t ptime                        : 16;
 	uint64_t reserved_16_63               : 48;
@@ -4067,9 +4078,8 @@ union cvmx_bgxx_gmp_gmi_txx_pause_zero {
 	struct cvmx_bgxx_gmp_gmi_txx_pause_zero_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_1_63                : 63;
-	uint64_t send                         : 1;  /**< When backpressure condition clear, send PAUSE
-                                                         packet with pause_time of zero to enable the
-                                                         channel */
+	uint64_t send                         : 1;  /**< Send PAUSE-zero enable.When this bit is set, and the backpressure condition is clear, it
+                                                         allows sending a PAUSE packet with pause_time of 0 to enable the channel. */
 #else
 	uint64_t send                         : 1;
 	uint64_t reserved_1_63                : 63;
@@ -4087,26 +4097,17 @@ union cvmx_bgxx_gmp_gmi_txx_sgmii_ctl {
 	struct cvmx_bgxx_gmp_gmi_txx_sgmii_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_1_63                : 63;
-	uint64_t align                        : 1;  /**< Align the transmission to even cycles
-                                                         Recommended value is:
-                                                         ALIGN = !BGX_GMP_GMI_TX_APPEND[PREAMBLE]
-                                                         (See the Transmit Conversion to Code groups
-                                                         section in the SGMII Interface chapter of the
-                                                         HRM for a complete discussion)
-                                                         0 = Data can be sent on any cycle
-                                                         In this mode, the interface will function at
-                                                         maximum bandwidth. It is possible to for the
-                                                         TX PCS machine to drop first byte of the TX
-                                                         frame.  When BGX_GMP_GMI_TX_APPEND[PREAMBLE] is
-                                                         set, the first byte will be a preamble byte
-                                                         which can be dropped to compensate for an
-                                                         extended IPG.
-                                                         1 = Data will only be sent on even cycles.
-                                                         In this mode, there can be bandwidth
-                                                         implications when sending odd-byte packets as
-                                                         the IPG can extend an extra cycle.
-                                                         There will be no loss of data.
-                                                         (SGMII/1000Base-X only) */
+	uint64_t align                        : 1;  /**< Align the transmission to even cycles: (SGMII/1000BASE-X half-duplex only)
+                                                         Recommended value is: ALIGN = !BGXn_GMP_GMI_TXm_APPEND[PREAMBLE].
+                                                         (See Transmit Conversion to Code groups, Transmit Conversion to Code Groups for a complete
+                                                         discussion.)
+                                                         0 = Data can be sent on any cycle. In this mode, the interface functions at maximum
+                                                         bandwidth. It is possible for the TX PCS machine to drop the first byte of the TX frame.
+                                                         When BGXn_GMP_GMI_TXm_APPEND[PREAMBLE] is set, the first byte is a preamble byte, which
+                                                         can be dropped to compensate for an extended IPG.
+                                                         1 = Data is only sent on even cycles. In this mode, there can be bandwidth implications
+                                                         when sending odd-byte packets as the IPG can extend an extra cycle. There will be no loss
+                                                         of data. */
 #else
 	uint64_t align                        : 1;
 	uint64_t reserved_1_63                : 63;
@@ -4124,10 +4125,10 @@ union cvmx_bgxx_gmp_gmi_txx_slot {
 	struct cvmx_bgxx_gmp_gmi_txx_slot_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_10_63               : 54;
-	uint64_t slot                         : 10; /**< Slottime (refer to 802.3 to set correctly)
-                                                         10/100Mbs: 0x40
-                                                         1000Mbs:   0x200
-                                                         (SGMII/1000Base-X only) */
+	uint64_t slot                         : 10; /**< Slottime (refer to Std 802.3 to set correctly):
+                                                         10/100Mbs: set SLOT to 0x40
+                                                         1000Mbs: set SLOT to 0x200
+                                                         SGMII/1000Base-X only. */
 #else
 	uint64_t slot                         : 10;
 	uint64_t reserved_10_63               : 54;
@@ -4139,16 +4140,13 @@ typedef union cvmx_bgxx_gmp_gmi_txx_slot cvmx_bgxx_gmp_gmi_txx_slot_t;
 
 /**
  * cvmx_bgx#_gmp_gmi_tx#_soft_pause
- *
- * BGX_GMP_GMI_TX_SOFT_PAUSE = Packet TX Software Pause
- *
  */
 union cvmx_bgxx_gmp_gmi_txx_soft_pause {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_gmi_txx_soft_pause_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t ptime                        : 16; /**< Back off the TX bus for (TIME*512) bit-times */
+	uint64_t ptime                        : 16; /**< Back off the TX bus for (PTIME * 512) bit-times. */
 #else
 	uint64_t ptime                        : 16;
 	uint64_t reserved_16_63               : 48;
@@ -4160,26 +4158,20 @@ typedef union cvmx_bgxx_gmp_gmi_txx_soft_pause cvmx_bgxx_gmp_gmi_txx_soft_pause_
 
 /**
  * cvmx_bgx#_gmp_gmi_tx#_thresh
- *
- * Per Port
- * BGX_GMP_GMI_TX_THRESH = Packet TX Threshold
  */
 union cvmx_bgxx_gmp_gmi_txx_thresh {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_gmi_txx_thresh_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_9_63                : 55;
-	uint64_t cnt                          : 9;  /**< Number of 128b words to accumulate in the TX FIFO
-                                                         before sending on the packet interface
-                                                         This register should be large enough to prevent
-                                                         underflow on the packet interface and must never
-                                                         be set to zero.
-                                                         10G/40G Mode, CNT == 0x100
-                                                         In all modes, this register cannot exceed the
-                                                         the TX FIFO depth which is...
-                                                         BGX_CMR_TX_LMACS==0,1:  CNT MAX = 0x7FF
-                                                         BGX_CMR_TX_LMACS==2  :  CNT MAX = 0x3FF
-                                                         BGX_CMR_TX_LMACS==3  :  CNT MAX = 0x1FF */
+	uint64_t cnt                          : 9;  /**< Number of 128-bit words to accumulate in the TX FIFO before sending on the packet
+                                                         interface. This field should be large enough to prevent underflow on the packet interface
+                                                         and must never be set to 0x0.
+                                                         10G/40G Mode, CNT = 0x100. In all modes, this register cannot exceed the TX FIFO depth as
+                                                         follows.
+                                                         BGX*_CMR*_TX_LMACS = 0,1:  CNT maximum = 0x7FF
+                                                         BGX*_CMR*_TX_LMACS = 2:     CNT maximum = 0x3FF
+                                                         BGX*_CMR*_TX_LMACS = 3,4:  CNT maximum = 0x1FF */
 #else
 	uint64_t cnt                          : 9;
 	uint64_t reserved_9_63                : 55;
@@ -4197,8 +4189,7 @@ union cvmx_bgxx_gmp_gmi_tx_col_attempt {
 	struct cvmx_bgxx_gmp_gmi_tx_col_attempt_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_5_63                : 59;
-	uint64_t limit                        : 5;  /**< Collision Attempts
-                                                         (SGMII/1000Base-X half-duplex only) */
+	uint64_t limit                        : 5;  /**< Number of collision attempts allowed. (SGMII/1000BASE-X half-duplex only.) */
 #else
 	uint64_t limit                        : 5;
 	uint64_t reserved_5_63                : 59;
@@ -4211,31 +4202,25 @@ typedef union cvmx_bgxx_gmp_gmi_tx_col_attempt cvmx_bgxx_gmp_gmi_tx_col_attempt_
 /**
  * cvmx_bgx#_gmp_gmi_tx_ifg
  *
- * Notes:
- * * Programming IFG1 and IFG2.
- * For 10/100/1000Mbs half-duplex systems that require IEEE 802.3
- * compatibility, IFG1 must be in the range of 1-8, IFG2 must be in the range
- * of 4-12, and the IFG1+IFG2 sum must be 12.
- * For 10/100/1000Mbs full-duplex systems that require IEEE 802.3
- * compatibility, IFG1 must be in the range of 1-11, IFG2 must be in the range
- * of 1-11, and the IFG1+IFG2 sum must be 12.
- * For all other systems, IFG1 and IFG2 can be any value in the range of
- * 1-15.  Allowing for a total possible IFG sum of 2-30.
- * Common BGX_GMP_GMI_TX_IFG = Packet TX Interframe Gap
+ * Consider the following when programming IFG1 and IFG2:
+ * For 10/100/1000 Mb/s half-duplex systems that require IEEE 802.3 compatibility, IFG1 must be
+ * in the range of 1-8, IFG2 must be in the range of 4-12, and the IFG1 + IFG2 sum must be 12.
+ * For 10/100/1000 Mb/s full-duplex systems that require IEEE 802.3 compatibility, IFG1 must be
+ * in the range of 1-11, IFG2 must be in the range of 1-11, and the IFG1 + IFG2 sum must be 12.
+ * For all other systems, IFG1 and IFG2 can be any value in the range of 1-15, allowing for a
+ * total possible IFG sum of 2-30.
  */
 union cvmx_bgxx_gmp_gmi_tx_ifg {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_gmi_tx_ifg_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_8_63                : 56;
-	uint64_t ifg2                         : 4;  /**< 1/3 of the interframe gap timing (in IFG2*8 bits)
-                                                         If CRS is detected during IFG2, then the
-                                                         interFrameSpacing timer is not reset and a frame
-                                                         is transmited once the timer expires. */
-	uint64_t ifg1                         : 4;  /**< 2/3 of the interframe gap timing (in IFG1*8 bits)
-                                                         If CRS is detected during IFG1, then the
-                                                         interFrameSpacing timer is reset and a frame is
-                                                         not transmited. */
+	uint64_t ifg2                         : 4;  /**< Remainder of interFrameGap timing, equal to interFrameGap - IFG1 (in IFG2 * 8 bits). If
+                                                         CRS is detected during IFG2, the interFrameSpacing timer is not reset and a frame is
+                                                         transmitted once the timer expires. */
+	uint64_t ifg1                         : 4;  /**< First portion of interFrameGap timing, in the range of 0 to 2/3 (in IFG2 * 8 bits). If CRS
+                                                         is detected during IFG1, the interFrameSpacing timer is reset and a frame is not
+                                                         transmitted. */
 #else
 	uint64_t ifg1                         : 4;
 	uint64_t ifg2                         : 4;
@@ -4249,7 +4234,7 @@ typedef union cvmx_bgxx_gmp_gmi_tx_ifg cvmx_bgxx_gmp_gmi_tx_ifg_t;
 /**
  * cvmx_bgx#_gmp_gmi_tx_jam
  *
- * BGX_GMP_GMI_TX_JAM = Packet TX Jam Pattern
+ * This register provides the pattern used in JAM bytes.
  *
  */
 union cvmx_bgxx_gmp_gmi_tx_jam {
@@ -4257,8 +4242,7 @@ union cvmx_bgxx_gmp_gmi_tx_jam {
 	struct cvmx_bgxx_gmp_gmi_tx_jam_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_8_63                : 56;
-	uint64_t jam                          : 8;  /**< Jam pattern
-                                                         (SGMII/1000Base-X half-duplex only) */
+	uint64_t jam                          : 8;  /**< JAM pattern. (SGMII/1000BASE-X half-duplex only.) */
 #else
 	uint64_t jam                          : 8;
 	uint64_t reserved_8_63                : 56;
@@ -4270,16 +4254,17 @@ typedef union cvmx_bgxx_gmp_gmi_tx_jam cvmx_bgxx_gmp_gmi_tx_jam_t;
 
 /**
  * cvmx_bgx#_gmp_gmi_tx_lfsr
+ *
+ * This register shows the contents of the linear feedback shift register (LFSR), which is used
+ * to implement truncated binary exponential backoff.
  */
 union cvmx_bgxx_gmp_gmi_tx_lfsr {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_gmi_tx_lfsr_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t lfsr                         : 16; /**< The current state of the LFSR used to feed random
-                                                         numbers to compute truncated binary exponential
-                                                         backoff.
-                                                         (SGMII/1000Base-X half-duplex only) */
+	uint64_t lfsr                         : 16; /**< Contains the current state of the LFSR, which is used to feed random numbers to compute
+                                                         truncated binary exponential backoff. (SGMII/1000Base-X half-duplex only.) */
 #else
 	uint64_t lfsr                         : 16;
 	uint64_t reserved_16_63               : 48;
@@ -4297,7 +4282,7 @@ union cvmx_bgxx_gmp_gmi_tx_pause_pkt_dmac {
 	struct cvmx_bgxx_gmp_gmi_tx_pause_pkt_dmac_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t dmac                         : 48; /**< The DMAC field placed is outbnd pause pkts */
+	uint64_t dmac                         : 48; /**< The DMAC field, which is placed is outbound PAUSE packets. */
 #else
 	uint64_t dmac                         : 48;
 	uint64_t reserved_48_63               : 16;
@@ -4309,13 +4294,16 @@ typedef union cvmx_bgxx_gmp_gmi_tx_pause_pkt_dmac cvmx_bgxx_gmp_gmi_tx_pause_pkt
 
 /**
  * cvmx_bgx#_gmp_gmi_tx_pause_pkt_type
+ *
+ * This register provides the PTYPE field that is placed in outbound PAUSE packets.
+ *
  */
 union cvmx_bgxx_gmp_gmi_tx_pause_pkt_type {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_gmi_tx_pause_pkt_type_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t ptype                        : 16; /**< The TYPE field placed is outbnd pause pkts */
+	uint64_t ptype                        : 16; /**< The PTYPE field placed in outbound PAUSE packets. */
 #else
 	uint64_t ptype                        : 16;
 	uint64_t reserved_16_63               : 48;
@@ -4327,33 +4315,28 @@ typedef union cvmx_bgxx_gmp_gmi_tx_pause_pkt_type cvmx_bgxx_gmp_gmi_tx_pause_pkt
 
 /**
  * cvmx_bgx#_gmp_pcs_an#_adv
- *
- * BGX_GMP_PCS_AN_ADV = AN Advertisement Register4
- *
  */
 union cvmx_bgxx_gmp_pcs_anx_adv {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_pcs_anx_adv_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t np                           : 1;  /**< Always 0, no next page capability supported */
+	uint64_t np                           : 1;  /**< Next page capable. This feature is not supported; this field is always 0. */
 	uint64_t reserved_14_14               : 1;
-	uint64_t rem_flt                      : 2;  /**< [<13>,<12>]
-                                                         0    0  Link OK  XMIT=DATA
-                                                         0    1  Link failure (loss of sync, XMIT!= DATA)
-                                                         1    0  local device Offline
-                                                         1    1  AN Error failure to complete AN
-                                                         AN Error is set if resolution function
-                                                         precludes operation with link partner */
+	uint64_t rem_flt                      : 2;  /**< Remote fault.
+                                                         00 = Link OK, XMIT = DATA
+                                                         01 = Link failure (loss of sync, XMIT !=DATA)
+                                                         10 = Local device offline
+                                                         11 = Auto-Negotiation error; failure to complete Auto-Negotiation. AN error is set if
+                                                         resolution function precludes operation with link partner. */
 	uint64_t reserved_9_11                : 3;
-	uint64_t pause                        : 2;  /**< [<8>, <7>] Pause frame flow capability across link
-                                                         Exchanged during Auto Negotiation
-                                                         0    0  No Pause
-                                                         0    1  Symmetric pause
-                                                         1    0  Asymmetric Pause
-                                                         1    1  Both symm and asymm pause to local device */
-	uint64_t hfd                          : 1;  /**< 1 means local device Half Duplex capable */
-	uint64_t fd                           : 1;  /**< 1 means local device Full Duplex capable */
+	uint64_t pause                        : 2;  /**< PAUSE frame flow capability across link, exchanged during Auto-Negotiation as follows:
+                                                         00 = No PAUSE.
+                                                         01 = Symmetric PAUSE.
+                                                         10 = Asymmetric PAUSE.
+                                                         11 = Both symmetric and asymmetric PAUSE to local device. */
+	uint64_t hfd                          : 1;  /**< Half-duplex. When set, local device is half-duplex capable. */
+	uint64_t fd                           : 1;  /**< Full-duplex. When set, local device is full-duplex capable. */
 	uint64_t reserved_0_4                 : 5;
 #else
 	uint64_t reserved_0_4                 : 5;
@@ -4373,19 +4356,16 @@ typedef union cvmx_bgxx_gmp_pcs_anx_adv cvmx_bgxx_gmp_pcs_anx_adv_t;
 
 /**
  * cvmx_bgx#_gmp_pcs_an#_ext_st
- *
- * BGX_GMP_PCS_AN_EXT_ST = AN Extended Status Register15
- * as per IEEE802.3 Clause 22
  */
 union cvmx_bgxx_gmp_pcs_anx_ext_st {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_pcs_anx_ext_st_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t thou_xfd                     : 1;  /**< 1 means PHY is 1000BASE-X Full Dup capable */
-	uint64_t thou_xhd                     : 1;  /**< 1 means PHY is 1000BASE-X Half Dup capable */
-	uint64_t thou_tfd                     : 1;  /**< 1 means PHY is 1000BASE-T Full Dup capable */
-	uint64_t thou_thd                     : 1;  /**< 1 means PHY is 1000BASE-T Half Dup capable */
+	uint64_t thou_xfd                     : 1;  /**< When set, PHY is 1000 BASE-X full duplex capable. */
+	uint64_t thou_xhd                     : 1;  /**< When set, PHY is 1000 BASE-X half duplex capable. */
+	uint64_t thou_tfd                     : 1;  /**< When set, PHY is 1000 BASE-T full duplex capable. */
+	uint64_t thou_thd                     : 1;  /**< When set, PHY is 1000 BASE-T half duplex capable. */
 	uint64_t reserved_0_11                : 12;
 #else
 	uint64_t reserved_0_11                : 12;
@@ -4403,7 +4383,7 @@ typedef union cvmx_bgxx_gmp_pcs_anx_ext_st cvmx_bgxx_gmp_pcs_anx_ext_st_t;
 /**
  * cvmx_bgx#_gmp_pcs_an#_lp_abil
  *
- * as per IEEE802.3 Clause 37
+ * This is the Auto-Negotiation Link partner ability register 5 as per IEEE 802.3, Clause 37.
  *
  */
 union cvmx_bgxx_gmp_pcs_anx_lp_abil {
@@ -4411,21 +4391,22 @@ union cvmx_bgxx_gmp_pcs_anx_lp_abil {
 	struct cvmx_bgxx_gmp_pcs_anx_lp_abil_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t np                           : 1;  /**< 1=lp next page capable, 0=lp not next page capable */
-	uint64_t ack                          : 1;  /**< 1=Acknowledgement received */
-	uint64_t rem_flt                      : 2;  /**< [<13>,<12>] Link Partner's link status
-                                                         0    0  Link OK
-                                                         0    1  Offline
-                                                         1    0  Link failure
-                                                         1    1  AN Error */
+	uint64_t np                           : 1;  /**< 0 = Link partner not next page capable.
+                                                         1 = Link partner next page capable. */
+	uint64_t ack                          : 1;  /**< When set, indicates acknowledgement received. */
+	uint64_t rem_flt                      : 2;  /**< Link partner's link status as follows:
+                                                         00 = Link OK.
+                                                         01 = Offline.
+                                                         10 = Link failure.
+                                                         11 = Auto-Negotiation error. */
 	uint64_t reserved_9_11                : 3;
-	uint64_t pause                        : 2;  /**< [<8>, <7>] Link Partner Pause setting
-                                                         0    0  No Pause
-                                                         0    1  Symmetric pause
-                                                         1    0  Asymmetric Pause
-                                                         1    1  Both symm and asymm pause to local device */
-	uint64_t hfd                          : 1;  /**< 1 means link partner Half Duplex capable */
-	uint64_t fd                           : 1;  /**< 1 means link partner Full Duplex capable */
+	uint64_t pause                        : 2;  /**< Link partner PAUSE setting as follows:
+                                                         00 = No PAUSE.
+                                                         01 = Symmetric PAUSE.
+                                                         10 = Asymmetric PAUSE.
+                                                         11 = Both symmetric and asymmetric PAUSE to local device. */
+	uint64_t hfd                          : 1;  /**< Half-duplex. When set, link partner is half-duplex capable. */
+	uint64_t fd                           : 1;  /**< Full-duplex. When set, link partner is full-duplex capable. */
 	uint64_t reserved_0_4                 : 5;
 #else
 	uint64_t reserved_0_4                 : 5;
@@ -4446,28 +4427,30 @@ typedef union cvmx_bgxx_gmp_pcs_anx_lp_abil cvmx_bgxx_gmp_pcs_anx_lp_abil_t;
 /**
  * cvmx_bgx#_gmp_pcs_an#_results
  *
- * NOTE:
- * an_results_reg is don't care when AN_OVRD is set to 1. If AN_OVRD=0 and AN_CPT=1
- * the an_results_reg is valid.
+ * This register is not valid when BGX(0..5)_GMP_PCS_MR(0..3)_CONTROL[AN_OVRD] is set to 1. If
+ * BGX(0..5)_GMP_PCS_MR(0..3)_CONTROL[AN_OVRD] is set to 0 and
+ * BGX(0..5)_GMP_PCS_AN(0..3)_RESULTS[AN_CPT] is set to 1, this register is valid.
  */
 union cvmx_bgxx_gmp_pcs_anx_results {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_pcs_anx_results_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_7_63                : 57;
-	uint64_t pause                        : 2;  /**< [<6>, <5>] PAUSE Selection (Don't care for SGMII)
-                                                         0    0  Disable Pause, TX and RX
-                                                         0    1  Enable pause frames RX only
-                                                         1    0  Enable Pause frames TX only
-                                                         1    1  Enable pause frames TX and RX */
-	uint64_t spd                          : 2;  /**< [<4>, <3>] Link Speed Selection
-                                                         0    0  10Mb/s
-                                                         0    1  100Mb/s
-                                                         1    0  1000Mb/s
-                                                         1    1  NS */
-	uint64_t an_cpt                       : 1;  /**< 1=AN Completed, 0=AN not completed or failed */
-	uint64_t dup                          : 1;  /**< 1=Full Duplex, 0=Half Duplex */
-	uint64_t link_ok                      : 1;  /**< 1=Link up(OK), 0=Link down */
+	uint64_t pause                        : 2;  /**< PAUSE selection ('don't care' for SGMII) as follows:
+                                                         00 = Disable PAUSE, TX and RX.
+                                                         01 = Enable PAUSE frames, RX only.
+                                                         10 = Enable PAUSE frames, TX only.
+                                                         11 = Enable PAUSE frames, TX and RX. */
+	uint64_t spd                          : 2;  /**< Link speed selection as follows:
+                                                         00 = 10 Mb/s.
+                                                         01 = 100 Mb/s.
+                                                         10 = 1000 Mb/s.
+                                                         11 = Reserved. */
+	uint64_t an_cpt                       : 1;  /**< Auto-Negotiation completed.
+                                                         1 = Auto-Negotiation completed.
+                                                         0 = Auto-Negotiation not completed or failed. */
+	uint64_t dup                          : 1;  /**< Duplex mode. 1 = full duplex, 0 = half duplex. */
+	uint64_t link_ok                      : 1;  /**< Link status: 1 = link up (OK), 1 = link down. */
 #else
 	uint64_t link_ok                      : 1;
 	uint64_t dup                          : 1;
@@ -4483,40 +4466,35 @@ typedef union cvmx_bgxx_gmp_pcs_anx_results cvmx_bgxx_gmp_pcs_anx_results_t;
 
 /**
  * cvmx_bgx#_gmp_pcs_int#
- *
- * PCS Interrupt Register
- *
  */
 union cvmx_bgxx_gmp_pcs_intx {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_pcs_intx_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_13_63               : 51;
-	uint64_t dbg_sync                     : 1;  /**< Code Group sync failure debug help */
-	uint64_t dup                          : 1;  /**< Set whenever Duplex mode changes on the link */
-	uint64_t sync_bad                     : 1;  /**< Set by HW whenever rx sync st machine reaches a bad
-                                                         state. Should never be set during normal operation */
-	uint64_t an_bad                       : 1;  /**< Set by HW whenever AN st machine reaches a bad
-                                                         state. Should never be set during normal operation */
-	uint64_t rxlock                       : 1;  /**< Set by HW whenever code group Sync or bit lock
-                                                         failure occurs
-                                                         Cannot fire in loopback1 mode */
-	uint64_t rxbad                        : 1;  /**< Set by HW whenever rx st machine reaches a  bad
-                                                         state. Should never be set during normal operation */
-	uint64_t rxerr                        : 1;  /**< Set whenever RX receives a code group error in
-                                                         10 bit to 8 bit decode logic
-                                                         Cannot fire in loopback1 mode */
-	uint64_t txbad                        : 1;  /**< Set by HW whenever tx st machine reaches a bad
-                                                         state. Should never be set during normal operation */
-	uint64_t txfifo                       : 1;  /**< Set whenever HW detects a TX fifo overflow
-                                                         condition */
-	uint64_t txfifu                       : 1;  /**< Set whenever HW detects a TX fifo underflowflow
-                                                         condition */
-	uint64_t an_err                       : 1;  /**< AN Error, AN resolution function failed */
-	uint64_t xmit                         : 1;  /**< Set whenever HW detects a change in the XMIT
-                                                         variable. XMIT variable states are IDLE, CONFIG and
-                                                         DATA */
-	uint64_t lnkspd                       : 1;  /**< Set by HW whenever Link Speed has changed */
+	uint64_t dbg_sync                     : 1;  /**< Code group sync failure debug help. DBG_SYNC interrupt fires when code group
+                                                         synchronization state machine makes a transition from SYNC_ACQUIRED_1 state to
+                                                         SYNC_ACQUIRED_2 state. (See IEEE 802.3-2005, figure 37-9). It indicates that a bad code
+                                                         group was received after code group synchronization was achieved. This interrupt should be
+                                                         disabled during normal link operation. Use it as a debug help feature only. */
+	uint64_t dup                          : 1;  /**< Set whenever duplex mode changes on the link. */
+	uint64_t sync_bad                     : 1;  /**< Set by hardware whenever RX sync state machine reaches a bad state. Should never be set
+                                                         during normal operation. */
+	uint64_t an_bad                       : 1;  /**< Set by hardware whenever Auto-Negotiation state machine reaches a bad state. Should never
+                                                         be set during normal operation. */
+	uint64_t rxlock                       : 1;  /**< Set by hardware whenever code group sync or bit lock failure occurs. Cannot fire in loopback1 mode. */
+	uint64_t rxbad                        : 1;  /**< Set by hardware whenever RX state machine reaches a bad state. Should never be set during
+                                                         normal operation. */
+	uint64_t rxerr                        : 1;  /**< Set whenever RX receives a code group error in 10-bit to 8-bit decode logic. Cannot fire
+                                                         in loopback1 mode. */
+	uint64_t txbad                        : 1;  /**< Set by hardware whenever TX state machine reaches a bad state. Should never be set during
+                                                         normal operation. */
+	uint64_t txfifo                       : 1;  /**< Set whenever hardware detects a TX FIFO overflow condition. */
+	uint64_t txfifu                       : 1;  /**< Set whenever hardware detects a TX FIFO underflow condition. */
+	uint64_t an_err                       : 1;  /**< Auto-Negotiation error; AN resolution function failed. */
+	uint64_t xmit                         : 1;  /**< Set whenever hardware detects a change in the XMIT variable. XMIT variable states are
+                                                         IDLE, CONFIG and DATA. */
+	uint64_t lnkspd                       : 1;  /**< Set by hardware whenever link speed has changed. */
 #else
 	uint64_t lnkspd                       : 1;
 	uint64_t xmit                         : 1;
@@ -4540,16 +4518,18 @@ typedef union cvmx_bgxx_gmp_pcs_intx cvmx_bgxx_gmp_pcs_intx_t;
 
 /**
  * cvmx_bgx#_gmp_pcs_link#_timer
+ *
+ * This is the 1.6 ms nominal Link timer register.
+ *
  */
 union cvmx_bgxx_gmp_pcs_linkx_timer {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_pcs_linkx_timer_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t count                        : 16; /**< (core clock period times 1024) times "COUNT" should
-                                                         be 1.6ms(SGMII)/10ms(otherwise) which is the link
-                                                         timer used in auto negotiation.
-                                                         Reset assums a 700MHz sclk for 1.6ms link timer */
+	uint64_t count                        : 16; /**< (Coprocessor clock period * 1024) * COUNT should be 1.6 ms for SGMII and 10 ms otherwise,
+                                                         which is the link timer used in Auto-Negotiation. Reset assumes a 700 MHz coprocessor
+                                                         clock for 1.6 ms link timer. */
 #else
 	uint64_t count                        : 16;
 	uint64_t reserved_16_63               : 48;
@@ -4580,34 +4560,34 @@ union cvmx_bgxx_gmp_pcs_miscx_ctl {
 	struct cvmx_bgxx_gmp_pcs_miscx_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_13_63               : 51;
-	uint64_t sgmii                        : 1;  /**< 1=SGMII or 1000Base-X mode selected.
-                                                         0=XAUI or PCIE mode selected.
-                                                         See GSERx_LANE_MODE[LMODE]. */
-	uint64_t gmxeno                       : 1;  /**< GMX Enable override. When set to 1, forces GMX to
-                                                         appear disabled. The enable/disable status of GMX
-                                                         is checked only at SOP of every packet. */
-	uint64_t loopbck2                     : 1;  /**< Sets external loopback mode to return rx data back
-                                                         out via tx data path. 0=no loopback, 1=loopback */
-	uint64_t mac_phy                      : 1;  /**< 0=MAC, 1=PHY decides the tx_config_reg value to be
-                                                         sent during auto negotiation.
-                                                         See SGMII spec ENG-46158 from CISCO */
-	uint64_t mode                         : 1;  /**< 0=SGMII or 1= 1000 Base X */
-	uint64_t an_ovrd                      : 1;  /**< 0=disable, 1= enable over ride AN results
-                                                         Auto negotiation is allowed to happen but the
-                                                         results are ignored when set. Duplex and Link speed
-                                                         values are set from the pcs_mr_ctrl reg */
-	uint64_t samp_pt                      : 7;  /**< "Byte# in elongated frames for 10/100Mb/s operation
-                                                         for data sampling on RX side in PCS.
-                                                         Recommended values are 0x5 for 100Mb/s operation
-                                                         and 0x32 for 10Mb/s operation.
-                                                         For 10Mb/s operaton this field should be set to a
-                                                         value less than 99 and greater than 0. If set out
-                                                         of this range a value of 50 will be used for actual
-                                                         sampling internally without affecting the CSR field
-                                                         For 100Mb/s operation this field should be set to a
-                                                         value less than 9 and greater than 0. If set out of
-                                                         this range a value of 5 will be used for actual
-                                                         sampling internally without affecting the CSR field" */
+	uint64_t sgmii                        : 1;  /**< SGMII mode. 1 = SGMII or 1000BASE-X mode selected, 0 = other mode selected. See
+                                                         GSERx_LANE_MODE[LMODE]. */
+	uint64_t gmxeno                       : 1;  /**< GMX enable override. When set, forces GMX to appear disabled. The enable/disable status of
+                                                         GMX is checked only at SOP of every packet. */
+	uint64_t loopbck2                     : 1;  /**< Sets external loopback mode to return RX data back out via the TX data path. 0 = No
+                                                         loopback, 1 = Loopback.
+                                                         LOOPBCK1 and LOOPBCK2 modes may not be supported simultaneously. */
+	uint64_t mac_phy                      : 1;  /**< MAC/PHY.
+                                                         0 = MAC, 1 = PHY decides the TX_CONFIG_REG value to be sent during Auto-Negotiation. */
+	uint64_t mode                         : 1;  /**< Mode bit. 0 = SGMII, 1 = 1000Base X.
+                                                         1 = 1000Base-X mode is selected. Auto-Negotiation follows IEEE 802.3 clause 37.
+                                                         0 = SGMII mode is selected and the following note applies.
+                                                         The SGMII AN advertisement register (BGX(0..5)_GMP_PCS_SGM(0..3)_AN_ADV) is sent during
+                                                         Auto-Negotiation if BGX(0..5)_GMP_PCS_MISC(0..3)_CTL[MAC_PHY] = 1 (PHY mode). If [MAC_PHY]
+                                                         = 0 (MAC mode), the TX_CONFIG_REG<14> becomes ACK bit and <0> is always 1. All other bits
+                                                         in TX_CONFIG_REG sent are 0. The PHY dictates the Auto-Negotiation results. */
+	uint64_t an_ovrd                      : 1;  /**< Auto-Negotiation results override: 1 = enable override, 0 = disable.
+                                                         Auto-Negotiation is allowed to happen but the results are ignored when this bit is set.
+                                                         Duplex and Link speed values are set from BGX(0..5)_GMP_PCS_MISC(0..3)_CTL. */
+	uint64_t samp_pt                      : 7;  /**< Byte number in elongated frames for 10/100Mb/s operation for data sampling on RX side in
+                                                         PCS. Recommended values are 0x5 for
+                                                         100Mb/s operation and 0x32 for 10Mb/s operation.
+                                                         For 10Mb/s operation, this field should be set to a value less than 99 and greater than 0.
+                                                         If set out of this range, a value of 50 is used for actual sampling internally without
+                                                         affecting the CSR field.
+                                                         For 100Mb/s operation this field should be set to a value less than 9 and greater than 0.
+                                                         If set out of this range, a value of 5 is used for actual sampling internally without
+                                                         affecting the CSR field. */
 #else
 	uint64_t samp_pt                      : 7;
 	uint64_t an_ovrd                      : 1;
@@ -4625,50 +4605,43 @@ typedef union cvmx_bgxx_gmp_pcs_miscx_ctl cvmx_bgxx_gmp_pcs_miscx_ctl_t;
 
 /**
  * cvmx_bgx#_gmp_pcs_mr#_control
- *
- * NOTE:
- * Whenever AN_EN bit[12] is set, Auto negotiation is allowed to happen. The results
- * of the auto negotiation process set the fields in the AN_RESULTS reg. When AN_EN is not set,
- * AN_RESULTS reg is don't care. The effective SPD, DUP etc.. get their values
- * from the pcs_mr_ctrl reg.
  */
 union cvmx_bgxx_gmp_pcs_mrx_control {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_pcs_mrx_control_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t reset                        : 1;  /**< 1=SW Reset, the bit will return to 0 after pcs has
-                                                         been reset. Takes 32 sclk cycles to reset pcs */
-	uint64_t loopbck1                     : 1;  /**< 0=normal operation, 1=loopback. The loopback mode
-                                                         will return(loopback) tx data from GMII tx back to
-                                                         GMII rx interface. The loopback happens in the pcs
-                                                         module. Auto Negotiation will be disabled even if
-                                                         the AN_EN bit is set, during loopback */
-	uint64_t spdlsb                       : 1;  /**< See bit 6 description */
-	uint64_t an_en                        : 1;  /**< 1=AN Enable, 0=AN Disable */
-	uint64_t pwr_dn                       : 1;  /**< 1=Power Down(HW reset), 0=Normal operation */
+	uint64_t reset                        : 1;  /**< Set to reset. 1 = software PCS reset, 0 = normal operation.
+                                                         The bit returns to 0 after PCS has been reset. Takes 32 coprocessor-clock cycles to reset
+                                                         PCS. */
+	uint64_t loopbck1                     : 1;  /**< Enable loopback: 1 = internal loopback mode, 0 = normal operation
+                                                         The loopback mode returns loopback TX data from GMII TX back to GMII RX interface. The
+                                                         loopback happens in the PCS module. Auto-Negotiation is disabled even if AN_EN is set
+                                                         during loopback. */
+	uint64_t spdlsb                       : 1;  /**< Least-significant bit of the link-speed field, i.e. SPD<0>. Refer to SPDMSB. */
+	uint64_t an_en                        : 1;  /**< Auto-Negotiation enable: 1 = enable, 0 = disable. */
+	uint64_t pwr_dn                       : 1;  /**< Power down: 1 = power down (hardware reset), 0 = normal operation. */
 	uint64_t reserved_10_10               : 1;
-	uint64_t rst_an                       : 1;  /**< If bit 12 is set and bit 3 of status reg is 1
-                                                         Auto Negotiation begins. Else,SW writes are ignored
-                                                         and this bit remians at 0. This bit clears itself
-                                                         to 0, when AN starts. */
-	uint64_t dup                          : 1;  /**< 1=full duplex, 0=half duplex; effective only if AN
-                                                         disabled. If status register bits [15:9] and and
-                                                         extended status reg bits [15:12] allow only one
-                                                         duplex mode|, this bit will correspond to that
-                                                         value and any attempt to write will be ignored. */
-	uint64_t coltst                       : 1;  /**< 1=enable COL signal test, 0=disable test
-                                                         During COL test, the COL signal will reflect the
-                                                         GMII TX_EN signal with less than 16BT delay */
-	uint64_t spdmsb                       : 1;  /**< [<6>, <13>]Link Speed effective only if AN disabled
-                                                         0    0  10Mb/s
-                                                         0    1  100Mb/s
-                                                         1    0  1000Mb/s
-                                                         1    1  NS */
-	uint64_t uni                          : 1;  /**< Unidirectional (Std 802.3-2005, Clause 66.2)
-                                                         This bit will override the AN_EN bit and disable
-                                                         auto-negotiation variable mr_an_enable, when set
-                                                         Used in both 1000Base-X and SGMII modes */
+	uint64_t rst_an                       : 1;  /**< Reset Auto-Negotiation. When set, if AN_EN = 1 and
+                                                         BGX(0..5)_GMP_PCS_MR(0..3)_STATUS[AN_ABIL] = 1, Auto-Negotiation begins. Otherwise,
+                                                         software write requests are ignored and this bit remains at 0. This bit clears itself to
+                                                         0, when Auto-Negotiation starts. */
+	uint64_t dup                          : 1;  /**< Duplex mode: 1 = full duplex, 0 = half duplex; effective only if Auto-Negotiation is
+                                                         disabled. If BGX(0..5)_GMP_PCS_MR(0..3)_STATUS <15:9> and
+                                                         BGX(0..5)_GMP_PCS_AN(0..3)_ADV<15:12> allow only one duplex mode, this bit corresponds to
+                                                         that value and any attempts to write are ignored. */
+	uint64_t coltst                       : 1;  /**< COL test: 1 = enable COL signal test, 0 = disable test.
+                                                         During COL test, the COL signal reflects the GMII TX_EN signal with less than 16BT delay. */
+	uint64_t spdmsb                       : 1;  /**< Link speed most-significant bit, i.e SPD<1>; effective only if Auto-Negotiation is
+                                                         disabled.
+                                                         SPDMSB SPDLSB Link Speed
+                                                         0 0 10 Mb/s
+                                                         0 1 100 Mb/s
+                                                         1 0 1000 Mb/s
+                                                         1 1 reserved */
+	uint64_t uni                          : 1;  /**< Unidirectional (Std 802.3-2005, Clause 66.2). When set to 1, this bit overrides AN_EN and
+                                                         disables the Auto-Negotiation variable mr_an_enable. Used in both 1000BASE-X and SGMII
+                                                         modes. */
 	uint64_t reserved_0_4                 : 5;
 #else
 	uint64_t reserved_0_4                 : 5;
@@ -4693,45 +4666,41 @@ typedef union cvmx_bgxx_gmp_pcs_mrx_control cvmx_bgxx_gmp_pcs_mrx_control_t;
 /**
  * cvmx_bgx#_gmp_pcs_mr#_status
  *
- * Bits [15:9] in the Status Register indicate ability to operate as per those signalling
- * specification,
- * when misc ctl reg MAC_PHY bit is set to MAC mode. Bits [15:9] will all, always read 0,
- * indicating
- * that the chip cannot operate in the corresponding modes.
- * Bit [4] RM_FLT is a don't care when the selected mode is SGMII.
- * BGX_GMP_PCS_MR_STATUS = Status Register1
+ * Bits <15:9> in this register indicate the ability to operate when
+ * BGX(0..5)_GMP_PCS_MISC(0..3)_CTL[MAC_PHY] is set to MAC mode. Bits <15:9> are always read as
+ * 0, indicating that the chip cannot operate in the corresponding modes. The field [RM_FLT] is a
+ * 'don't care' when the selected mode is SGMII.
  */
 union cvmx_bgxx_gmp_pcs_mrx_status {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_pcs_mrx_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t hun_t4                       : 1;  /**< 1 means 100Base-T4 capable */
-	uint64_t hun_xfd                      : 1;  /**< 1 means 100Base-X Full Duplex */
-	uint64_t hun_xhd                      : 1;  /**< 1 means 100Base-X Half Duplex */
-	uint64_t ten_fd                       : 1;  /**< 1 means 10Mb/s Full Duplex */
-	uint64_t ten_hd                       : 1;  /**< 1 means 10Mb/s Half Duplex */
-	uint64_t hun_t2fd                     : 1;  /**< 1 means 100Base-T2 Full Duplex */
-	uint64_t hun_t2hd                     : 1;  /**< 1 means 100Base-T2 Half Duplex */
-	uint64_t ext_st                       : 1;  /**< 1 means extended status info in reg15 */
+	uint64_t hun_t4                       : 1;  /**< Indicates 100BASE-T4 capable. */
+	uint64_t hun_xfd                      : 1;  /**< Indicates 100BASE-X full duplex. */
+	uint64_t hun_xhd                      : 1;  /**< Indicates 100BASE-X half duplex. */
+	uint64_t ten_fd                       : 1;  /**< Indicates 10Mb/s full duplex. */
+	uint64_t ten_hd                       : 1;  /**< Indicates 10Mb/s half duplex. */
+	uint64_t hun_t2fd                     : 1;  /**< Indicates 100BASE-T2 full duplex. */
+	uint64_t hun_t2hd                     : 1;  /**< Indicates 100BASE-T2 half duplex. */
+	uint64_t ext_st                       : 1;  /**< Extended status information. When set to 1, indicates that additional status data is
+                                                         available in BGX(0..5)_GMP_PCS_AN(0..3)_EXT_ST. */
 	uint64_t reserved_7_7                 : 1;
-	uint64_t prb_sup                      : 1;  /**< 1 means able to work without preamble bytes at the
-                                                         beginning of frames. 0 means not able to accept
-                                                         frames without preamble bytes preceding them. */
-	uint64_t an_cpt                       : 1;  /**< 1 means Auto Negotiation is complete and the
-                                                         contents of the an_results_reg are valid. */
-	uint64_t rm_flt                       : 1;  /**< Set to 1 when remote flt condition occurs. This bit
-                                                         implements a latching Hi behavior. It is cleared by
-                                                         SW read of this reg or when reset bit [15] in
-                                                         Control Reg is asserted.
-                                                         See an adv reg[13:12] for flt conditions */
-	uint64_t an_abil                      : 1;  /**< 1 means Auto Negotiation capable */
-	uint64_t lnk_st                       : 1;  /**< 1=link up, 0=link down. Set during AN process
-                                                         Set whenever XMIT=DATA. Latching Lo behavior when
-                                                         link goes down. Link down value of the bit stays
-                                                         low until SW reads the reg. */
+	uint64_t prb_sup                      : 1;  /**< Preamble not needed.
+                                                         1 = Can work without preamble bytes at the beginning of frames.
+                                                         0 = Cannot accept frames without preamble bytes. */
+	uint64_t an_cpt                       : 1;  /**< Indicates Auto-Negotiation is complete; the contents of the
+                                                         BGX(0..5)_GMP_PCS_AN(0..3)_RESULTS are valid. */
+	uint64_t rm_flt                       : 1;  /**< Indicates remote fault condition occurred. This bit implements a latching-high behavior.
+                                                         It is cleared when software reads this register or when
+                                                         BGX(0..5)_GMP_PCS_MR(0..3)_CONTROL[RESET] is asserted.
+                                                         See BGX(0..5)_GMP_PCS_AN(0..3)_ADV[REM_FLT] for fault conditions. */
+	uint64_t an_abil                      : 1;  /**< Indicates Auto-Negotiation capable. */
+	uint64_t lnk_st                       : 1;  /**< Link state: 0 = link down, 1 = link up.
+                                                         Set during Auto-Negotiation process. Set whenever XMIT = DATA. Latching-low behavior when
+                                                         link goes down. Link down value of the bit stays low until software reads the register. */
 	uint64_t reserved_1_1                 : 1;
-	uint64_t extnd                        : 1;  /**< Always 0, no extended capability regs present */
+	uint64_t extnd                        : 1;  /**< This field is always 0, extended capability registers not present. */
 #else
 	uint64_t extnd                        : 1;
 	uint64_t reserved_1_1                 : 1;
@@ -4764,12 +4733,12 @@ union cvmx_bgxx_gmp_pcs_rxx_states {
 	struct cvmx_bgxx_gmp_pcs_rxx_states_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t rx_bad                       : 1;  /**< Receive state machine in an illegal state */
-	uint64_t rx_st                        : 5;  /**< Receive state machine state */
-	uint64_t sync_bad                     : 1;  /**< Receive synchronization SM in an illegal state */
-	uint64_t sync                         : 4;  /**< Receive synchronization SM state */
-	uint64_t an_bad                       : 1;  /**< Auto Negotiation state machine in an illegal state */
-	uint64_t an_st                        : 4;  /**< Auto Negotiation state machine state */
+	uint64_t rx_bad                       : 1;  /**< Receive state machine is in an illegal state. */
+	uint64_t rx_st                        : 5;  /**< Receive state-machine state. */
+	uint64_t sync_bad                     : 1;  /**< Receive synchronization state machine is in an illegal state. */
+	uint64_t sync                         : 4;  /**< Receive synchronization state-machine state. */
+	uint64_t an_bad                       : 1;  /**< Auto-Negotiation state machine is in an illegal state. */
+	uint64_t an_st                        : 4;  /**< Auto-Negotiation state-machine state. */
 #else
 	uint64_t an_st                        : 4;
 	uint64_t an_bad                       : 1;
@@ -4786,17 +4755,14 @@ typedef union cvmx_bgxx_gmp_pcs_rxx_states cvmx_bgxx_gmp_pcs_rxx_states_t;
 
 /**
  * cvmx_bgx#_gmp_pcs_rx#_sync
- *
- * BGX_GMP_PCS_RX_SYNC = Code Group synchronization reg
- *
  */
 union cvmx_bgxx_gmp_pcs_rxx_sync {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_pcs_rxx_sync_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_2_63                : 62;
-	uint64_t sync                         : 1;  /**< 1 means code group synchronization achieved */
-	uint64_t bit_lock                     : 1;  /**< 1 means bit lock achieved */
+	uint64_t sync                         : 1;  /**< When set, code group synchronization achieved. */
+	uint64_t bit_lock                     : 1;  /**< When set, bit lock achieved. */
 #else
 	uint64_t bit_lock                     : 1;
 	uint64_t sync                         : 1;
@@ -4810,29 +4776,28 @@ typedef union cvmx_bgxx_gmp_pcs_rxx_sync cvmx_bgxx_gmp_pcs_rxx_sync_t;
 /**
  * cvmx_bgx#_gmp_pcs_sgm#_an_adv
  *
- * NOTE: The SGMII AN Advertisement Register will be sent during Auto Negotiation if the
- * MAC_PHY mode bit in misc_ctl_reg
- * is set (1=PHY mode). If the bit is not set (0=MAC mode), the tx_config_reg[14] becomes ACK bit
- * and [0] is always 1.
- * All other bits in tx_config_reg sent will be 0. The PHY dictates the Auto Negotiation results.
- * SGMII AN Advertisement Register (sent out as tx_config_reg)
+ * This is the SGMII Auto-Negotiation advertisement register (sent out as TX_CONFIG_REG). This
+ * register is sent during Auto-Negotiation if
+ * BGX(0..5)_GMP_PCS_MISC(0..3)_CTL[MAC_PHY] is set (1 = PHY mode). If the bit is not set (0 =
+ * MAC mode), the TX_CONFIG_REG<14> becomes ACK bit and <0> is always 1. All other bits in
+ * TX_CONFIG_REG sent will be 0. The PHY dictates the Auto-Negotiation results.
  */
 union cvmx_bgxx_gmp_pcs_sgmx_an_adv {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_pcs_sgmx_an_adv_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t link                         : 1;  /**< Link status 1 Link Up, 0 Link Down */
-	uint64_t ack                          : 1;  /**< Auto negotiation ack */
+	uint64_t link                         : 1;  /**< Link status: 1 = Link up, 0 = Link down. */
+	uint64_t ack                          : 1;  /**< Auto-Negotiation acknowledgement. */
 	uint64_t reserved_13_13               : 1;
-	uint64_t dup                          : 1;  /**< Duplex mode 1=full duplex, 0=half duplex */
-	uint64_t speed                        : 2;  /**< Link Speed
-                                                         0    0  10Mb/s
-                                                         0    1  100Mb/s
-                                                         1    0  1000Mb/s
-                                                         1    1  NS */
+	uint64_t dup                          : 1;  /**< Duplex mode: 1 = full duplex, 0 = half duplex */
+	uint64_t speed                        : 2;  /**< Link speed:
+                                                         00 = 10 Mb/s.
+                                                         01 = 100 Mb/s.
+                                                         10 = 1000 Mb/s.
+                                                         11 = Reserved. */
 	uint64_t reserved_1_9                 : 9;
-	uint64_t one                          : 1;  /**< Always set to match tx_config_reg<0> */
+	uint64_t one                          : 1;  /**< Always set to match TX_CONFIG_REG<0>. */
 #else
 	uint64_t one                          : 1;
 	uint64_t reserved_1_9                 : 9;
@@ -4851,7 +4816,7 @@ typedef union cvmx_bgxx_gmp_pcs_sgmx_an_adv cvmx_bgxx_gmp_pcs_sgmx_an_adv_t;
 /**
  * cvmx_bgx#_gmp_pcs_sgm#_lp_adv
  *
- * SGMII LP Advertisement Register (received as rx_config_reg)
+ * This is the SGMII Link partner advertisement register (received as RX_CONFIG_REG).
  *
  */
 union cvmx_bgxx_gmp_pcs_sgmx_lp_adv {
@@ -4859,16 +4824,16 @@ union cvmx_bgxx_gmp_pcs_sgmx_lp_adv {
 	struct cvmx_bgxx_gmp_pcs_sgmx_lp_adv_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t link                         : 1;  /**< Link status 1 Link Up, 0 Link Down */
+	uint64_t link                         : 1;  /**< Link status: 1 = Link up, 0 = Link down. */
 	uint64_t reserved_13_14               : 2;
-	uint64_t dup                          : 1;  /**< Duplex mode 1=full duplex, 0=half duplex */
-	uint64_t speed                        : 2;  /**< Link Speed
-                                                         0    0  10Mb/s
-                                                         0    1  100Mb/s
-                                                         1    0  1000Mb/s
-                                                         1    1  NS */
+	uint64_t dup                          : 1;  /**< Duplex mode: 1 = Full duplex, 0 = Half duplex */
+	uint64_t speed                        : 2;  /**< Link speed:
+                                                         00 = 10 Mb/s.
+                                                         01 = 100 Mb/s.
+                                                         10 = 1000 Mb/s.
+                                                         11 = Reserved. */
 	uint64_t reserved_1_9                 : 9;
-	uint64_t one                          : 1;  /**< Always set to match tx_config_reg<0> */
+	uint64_t one                          : 1;  /**< Always set to match TX_CONFIG_REG<0> */
 #else
 	uint64_t one                          : 1;
 	uint64_t reserved_1_9                 : 9;
@@ -4891,9 +4856,12 @@ union cvmx_bgxx_gmp_pcs_txx_states {
 	struct cvmx_bgxx_gmp_pcs_txx_states_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_7_63                : 57;
-	uint64_t xmit                         : 2;  /**< 0=undefined, 1=config, 2=idle, 3=data */
-	uint64_t tx_bad                       : 1;  /**< Xmit state machine in a bad state */
-	uint64_t ord_st                       : 4;  /**< Xmit ordered set state machine state */
+	uint64_t xmit                         : 2;  /**< 0x0 = Undefined.
+                                                         0x1 = Config.
+                                                         0x2 = Idle.
+                                                         0x3 = Data */
+	uint64_t tx_bad                       : 1;  /**< Transmit state machine in an illegal state. */
+	uint64_t ord_st                       : 4;  /**< Transmit ordered set state-machine state. */
 #else
 	uint64_t ord_st                       : 4;
 	uint64_t tx_bad                       : 1;
@@ -4908,24 +4876,24 @@ typedef union cvmx_bgxx_gmp_pcs_txx_states cvmx_bgxx_gmp_pcs_txx_states_t;
 /**
  * cvmx_bgx#_gmp_pcs_tx_rx#_polarity
  *
- * Note:
- * r_tx_rx_polarity_reg bit [2] will show correct polarity needed on the link receive path after
- * code grp synchronization is achieved.
- * BGX_GMP_PCS_POLARITY = TX_RX polarity reg
+ * BGX(0..5)_GMP_PCS_TX_RX(0..3)_POLARITY[AUTORXPL] shows correct polarity needed on the link
+ * receive path after code group synchronization is achieved.
  */
 union cvmx_bgxx_gmp_pcs_tx_rxx_polarity {
 	uint64_t u64;
 	struct cvmx_bgxx_gmp_pcs_tx_rxx_polarity_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
-	uint64_t rxovrd                       : 1;  /**< When 0, <2> determines polarity
-                                                         when 1, <1> determines polarity */
-	uint64_t autorxpl                     : 1;  /**< Auto RX polarity detected. 1=inverted, 0=normal
-                                                         This bit always represents the correct rx polarity
-                                                         setting needed for successful rx path operartion,
-                                                         once a successful code group sync is obtained */
-	uint64_t rxplrt                       : 1;  /**< 1 is inverted polarity, 0 is normal polarity */
-	uint64_t txplrt                       : 1;  /**< 1 is inverted polarity, 0 is normal polarity */
+	uint64_t rxovrd                       : 1;  /**< RX polarity override.
+                                                         0 = AUTORXPL determines polarity
+                                                         1 = RXPLRT determines polarity */
+	uint64_t autorxpl                     : 1;  /**< Auto RX polarity detected:
+                                                         0 = Normal polarity
+                                                         1 = Inverted polarity
+                                                         This bit always represents the correct RX polarity setting needed for successful RX path
+                                                         operation, once a successful code group sync is obtained. */
+	uint64_t rxplrt                       : 1;  /**< RX polarity: 0 = Normal polarity, 1 = Inverted polarity. */
+	uint64_t txplrt                       : 1;  /**< TX polarity: 0 = Normal polarity, 1 = Inverted polarity. */
 #else
 	uint64_t txplrt                       : 1;
 	uint64_t rxplrt                       : 1;
@@ -4945,27 +4913,21 @@ union cvmx_bgxx_smux_cbfc_ctl {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_cbfc_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t phys_en                      : 16; /**< Determines which ports will have physical
-                                                         backpressure pause packets.
-                                                         The value placed in the Class Enable Vector
-                                                         field of the PFC/CBFC pause packet will be
-                                                         PHYS_EN | LOGL_EN */
-	uint64_t logl_en                      : 16; /**< Determines which ports will have logical
-                                                         backpressure pause packets.
-                                                         The value placed in the Class Enable Vector
-                                                         field of the PFC/CBFC pause packet will be
-                                                         PHYS_EN | LOGL_EN */
+	uint64_t phys_en                      : 16; /**< Physical backpressure enable. Determines which LMACs will have physical backpressure PAUSE
+                                                         packets. The value placed in the Class Enable Vector field of the PFC/CBFC PAUSE packet is
+                                                         PHYS_EN | LOGL_EN. */
+	uint64_t logl_en                      : 16; /**< Logical backpressure enable. Determines which LMACs will have logical backpressure PAUSE
+                                                         packets. The value placed in the Class Enable Vector field of the PFC/CBFC PAUSE packet is
+                                                         PHYS_EN | LOGL_EN. */
 	uint64_t reserved_4_31                : 28;
-	uint64_t bck_en                       : 1;  /**< Forward PFC/CBFC Pause information to BP block */
-	uint64_t drp_en                       : 1;  /**< Drop Control PFC/CBFC Pause Frames */
-	uint64_t tx_en                        : 1;  /**< When set, allow for PFC/CBFC Pause Packets
-                                                         Must be clear in HiGig2 mode i.e. when
-                                                         BGX_TX_CTL[HG_EN]=1 and
-                                                         BGX_RX_UDD_SKP[SKIP]=16. */
-	uint64_t rx_en                        : 1;  /**< When set, allow for PFC/CBFC Pause Packets
-                                                         Must be clear in HiGig2 mode i.e. when
-                                                         BGX_TX_CTL[HG_EN]=1 and
-                                                         BGX_RX_UDD_SKP[SKIP]=16. */
+	uint64_t bck_en                       : 1;  /**< Forward PFC/CBFC PAUSE information to the backpressure block. */
+	uint64_t drp_en                       : 1;  /**< Drop-control enable. When set, drop PFC/CBFC PAUSE frames. */
+	uint64_t tx_en                        : 1;  /**< Transmit enable. When set, allow for PFC/CBFC PAUSE packets. Must be clear in HiGig2 mode
+                                                         i.e. when BGX(0..5)_SMU(0..3)_TX_CTL[HG_EN] = 1 and BGX(0..5)_SMU(0..3)_RX_UDD_SKP[SKIP] =
+                                                         16. */
+	uint64_t rx_en                        : 1;  /**< Receive enable. When set, allow for PFC/CBFC PAUSE packets. Must be clear in HiGig2 mode
+                                                         i.e. when BGX(0..5)_SMU(0..3)_TX_CTL[HG_EN] = 1 and BGX(0..5)_SMU(0..3)_RX_UDD_SKP[SKIP] =
+                                                         16. */
 #else
 	uint64_t rx_en                        : 1;
 	uint64_t tx_en                        : 1;
@@ -4982,23 +4944,15 @@ typedef union cvmx_bgxx_smux_cbfc_ctl cvmx_bgxx_smux_cbfc_ctl_t;
 
 /**
  * cvmx_bgx#_smu#_ctrl
- *
- * "**************************************************************
- * BGX TX common (to all LMACs) registers                       *
- * **************************************************************
- * **************************************************************
- * BGX TX/RX registers                                          *
- * **************************************************************
- * BGX_SMU_CTRL = SMU Control Register"
  */
 union cvmx_bgxx_smux_ctrl {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_ctrl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_2_63                : 62;
-	uint64_t tx_idle                      : 1;  /**< TX Machine is idle This indication pertains to the framer FSM and ignores the effects on
+	uint64_t tx_idle                      : 1;  /**< TX machine is idle This indication pertains to the framer FSM and ignores the effects on
                                                          the data-path controls or values which occur when BGX_SMU_TX_CTL[LS_BYP] is set */
-	uint64_t rx_idle                      : 1;  /**< RX Machine is idle */
+	uint64_t rx_idle                      : 1;  /**< RX machine is idle. */
 #else
 	uint64_t rx_idle                      : 1;
 	uint64_t tx_idle                      : 1;
@@ -5011,19 +4965,19 @@ typedef union cvmx_bgxx_smux_ctrl cvmx_bgxx_smux_ctrl_t;
 
 /**
  * cvmx_bgx#_smu#_ext_loopback
+ *
+ * In loopback mode, the IFG1+IFG2 of local and remote parties must match exactly; otherwise one
+ * of the two sides' loopback FIFO will overrun: BGX(0..5)_SMU(0..3)_TX_INT[LB_OVRFLW].
  */
 union cvmx_bgxx_smux_ext_loopback {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_ext_loopback_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_5_63                : 59;
-	uint64_t en                           : 1;  /**< Loopback enable
-                                                         Puts the packet interface in external loopback
-                                                         mode where the RX lines are reflected on the TX lines. */
-	uint64_t thresh                       : 4;  /**< Threshhold on the TX FIFO
-                                                         SW must only write the typical value.  Any other
-                                                         value will cause loopback mode not to function
-                                                         correctly. */
+	uint64_t en                           : 1;  /**< Loopback enable. Puts the packet interface in external loopback mode where the RX lines
+                                                         are reflected on the TX lines. */
+	uint64_t thresh                       : 4;  /**< Threshold on the TX FIFO. Software must only write the typical value. Any other value
+                                                         causes loopback mode not to function correctly. */
 #else
 	uint64_t thresh                       : 4;
 	uint64_t en                           : 1;
@@ -5036,22 +4990,33 @@ typedef union cvmx_bgxx_smux_ext_loopback cvmx_bgxx_smux_ext_loopback_t;
 
 /**
  * cvmx_bgx#_smu#_hg2_control
+ *
+ * HiGig2 TX- and RX-enable are normally set together for HiGig2 messaging. Setting just the TX
+ * or RX bit results in only the HG2 message transmit or receive capability.
+ * Setting [PHYS_EN] and [LOGL_EN] to 1 allows link PAUSE or backpressure to PKO as per the
+ * received HiGig2 message. Setting these fields to 0 disables link PAUSE and backpressure to PKO
+ * in response to received messages.
+ * BGX(0..5)_SMU(0..3)_TX_CTL[HG_EN] must be set (to enable HiGig) whenever either [HG2TX_EN] or
+ * [HG2RX_EN] are set. BGX(0..5)_SMU(0..3)_RX_UDD_SKP[LEN] must be set to 16 (to select HiGig2)
+ * whenever either [HG2TX_EN] or [HG2RX_EN] are set.
+ * BGX(0..5)_CMR_RX_OVR_BP[EN<0>] must be set and BGX(0..5)_CMR_RX_OVR_BP[BP<0>] must be cleared
+ * to 0 (to forcibly disable hardware-automatic 802.3 PAUSE packet generation) with the HiGig2
+ * Protocol when BGX(0..5)_SMU(0..3)_HG2_CONTROL[HG2TX_EN] = 0. (The HiGig2 protocol is indicated
+ * by BGX(0..5)_SMU(0..3)_TX_CTL[HG_EN] = 1 and BGX(0..5)_SMU(0..3)_RX_UDD_SKP[LEN]=16.) Hardware
+ * can only autogenerate backpressure via HiGig2 messages (optionally, when HG2TX_EN = 1) with
+ * the HiGig2 protocol.
  */
 union cvmx_bgxx_smux_hg2_control {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_hg2_control_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_19_63               : 45;
-	uint64_t hg2tx_en                     : 1;  /**< Enable Transmission of HG2 phys and logl messages
-                                                         When set, also disables HW auto-generated (802.3
-                                                         and PFC/CBFC) pause frames. (OCTEON cannot generate
-                                                         proper 802.3 or PFC/CBFC pause frames in HiGig2
-                                                         mode.) */
-	uint64_t hg2rx_en                     : 1;  /**< Enable extraction and processing of HG2 message
-                                                         packet from RX flow. Physical logical pause info
-                                                         is used to pause physical link, back pressure PKO
-                                                         HG2RX_EN must be set when HiGig2 messages are
-                                                         present in the receive stream. */
+	uint64_t hg2tx_en                     : 1;  /**< Enable transmission of HG2 physical and logical messages. When set, also disables hardware
+                                                         autogenerated (802.3 and PFC/CBFC) PAUSE frames. (CN78XX cannot generate proper 802.3 or
+                                                         PFC/CBFC PAUSE frames in HiGig2 mode.) */
+	uint64_t hg2rx_en                     : 1;  /**< Enable extraction and processing of HG2 message packet from RX flow. Physical logical
+                                                         PAUSE information is used to PAUSE physical-link, backpressure PKO. This field must be set
+                                                         when HiGig2 messages are present in the receive stream. */
 	uint64_t phys_en                      : 1;  /**< 1 bit physical link pause enable for recevied
                                                          HiGig2 physical pause message. This bit enables the SMU TX
                                                          to CMR HG2 deferring counter to be set every time SMU RX
@@ -5080,12 +5045,10 @@ union cvmx_bgxx_smux_rx_bad_col_hi {
 	struct cvmx_bgxx_smux_rx_bad_col_hi_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_17_63               : 47;
-	uint64_t val                          : 1;  /**< Set when BGX_RX_INT[PCTERR] is set. */
-	uint64_t state                        : 8;  /**< When BGX_RX_INT[PCTERR] is set, STATE will
-                                                         contain the receive state and the LMAC ID at the time of the
-                                                         error. */
-	uint64_t lane_rxc                     : 8;  /**< When BGX_RX_INT[PCTERR] is set, LANE_RXC will
-                                                         contain the column at the time of the error. */
+	uint64_t val                          : 1;  /**< Set when BGX(0..5)_SMU(0..3)_RX_INT[PCTERR] is set. */
+	uint64_t state                        : 8;  /**< When BGX(0..5)_SMU(0..3)_RX_INT[PCTERR] is set, contains the receive state at the time of
+                                                         the error. */
+	uint64_t lane_rxc                     : 8;  /**< When BGX(0..5)_SMU(0..3)_RX_INT[PCTERR] is set, contains the column at the time of the error. */
 #else
 	uint64_t lane_rxc                     : 8;
 	uint64_t state                        : 8;
@@ -5104,8 +5067,8 @@ union cvmx_bgxx_smux_rx_bad_col_lo {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_rx_bad_col_lo_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t lane_rxd                     : 64; /**< When BGX_RX_INT[PCTERR] is set, LANE_RXD will
-                                                         contain the column at the time of the error. */
+	uint64_t lane_rxd                     : 64; /**< When BGX(0..5)_SMU(0..3)_RX_INT[PCTERR] is set, LANE_RXD contains the XAUI/RXAUI column at
+                                                         the time of the error. */
 #else
 	uint64_t lane_rxd                     : 64;
 #endif
@@ -5122,11 +5085,11 @@ union cvmx_bgxx_smux_rx_ctl {
 	struct cvmx_bgxx_smux_rx_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_2_63                : 62;
-	uint64_t status                       : 2;  /**< Link Status
-                                                         0=Link OK
-                                                         1=Local Fault
-                                                         2=Remote Fault
-                                                         3=Reserved */
+	uint64_t status                       : 2;  /**< Link status.
+                                                         0x0 = Link OK
+                                                         0x1 = Local fault
+                                                         0x2 = Remote fault
+                                                         0x3 = Reserved */
 #else
 	uint64_t status                       : 2;
 	uint64_t reserved_2_63                : 62;
@@ -5138,14 +5101,19 @@ typedef union cvmx_bgxx_smux_rx_ctl cvmx_bgxx_smux_rx_ctl_t;
 
 /**
  * cvmx_bgx#_smu#_rx_decision
+ *
+ * This register specifies the byte count used to determine when to accept or to filter a packet.
+ * As each byte in a packet is received by BGX, the L2 byte count (i.e. the number of bytes from
+ * the beginning of the L2 header (DMAC)) is compared against CNT. In normal operation, the L2
+ * header begins after the PREAMBLE + SFD (BGX(0..5)_SMU(0..3)_RX_FRM_CTL[PRE_CHK] = 1) and any
+ * optional UDD skip data (BGX(0..5)_SMU(0..3)_RX_UDD_SKP[LEN]).
  */
 union cvmx_bgxx_smux_rx_decision {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_rx_decision_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_5_63                : 59;
-	uint64_t cnt                          : 5;  /**< The byte count to decide when to accept or filter
-                                                         a packet. */
+	uint64_t cnt                          : 5;  /**< The byte count to decide when to accept or filter a packet. Refer to SMU Decisions. */
 #else
 	uint64_t cnt                          : 5;
 	uint64_t reserved_5_63                : 59;
@@ -5157,18 +5125,21 @@ typedef union cvmx_bgxx_smux_rx_decision cvmx_bgxx_smux_rx_decision_t;
 
 /**
  * cvmx_bgx#_smu#_rx_frm_chk
+ *
+ * The CSRs provide the enable bits for a subset of errors passed to CMR encoded.
+ *
  */
 union cvmx_bgxx_smux_rx_frm_chk {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_rx_frm_chk_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_9_63                : 55;
-	uint64_t skperr                       : 1;  /**< Skipper error */
-	uint64_t rcverr                       : 1;  /**< Frame was received with Data reception error */
+	uint64_t skperr                       : 1;  /**< Skipper error. */
+	uint64_t rcverr                       : 1;  /**< Frame was received with data-reception error. */
 	uint64_t reserved_6_6                 : 1;
-	uint64_t fcserr_c                     : 1;  /**< Control Frame was received with FCS/CRC error */
-	uint64_t fcserr_d                     : 1;  /**< Data Frame was received with FCS/CRC error */
-	uint64_t jabber                       : 1;  /**< Frame was received with length > sys_length */
+	uint64_t fcserr_c                     : 1;  /**< Control frame was received with FCS/CRC error. */
+	uint64_t fcserr_d                     : 1;  /**< Data frame was received with FCS/CRC error. */
+	uint64_t jabber                       : 1;  /**< Frame was received with length > sys_length. */
 	uint64_t reserved_0_2                 : 3;
 #else
 	uint64_t reserved_0_2                 : 3;
@@ -5187,54 +5158,59 @@ typedef union cvmx_bgxx_smux_rx_frm_chk cvmx_bgxx_smux_rx_frm_chk_t;
 
 /**
  * cvmx_bgx#_smu#_rx_frm_ctl
+ *
+ * This register controls the handling of the frames.
+ * The CTL_BCK/CTL_DRP bits control how the hardware handles incoming PAUSE packets. The most
+ * common modes of operation:
+ * CTL_BCK = 1, CTL_DRP = 1: hardware handles everything
+ * CTL_BCK = 0, CTL_DRP = 0: software sees all PAUSE frames
+ * CTL_BCK = 0, CTL_DRP = 1: all PAUSE frames are completely ignored
+ * These control bits should be set to CTL_BCK = 0,CTL_DRP = 0 in half-duplex mode. Since PAUSE
+ * packets only apply to full duplex operation, any PAUSE packet would constitute an exception
+ * which should be handled by the processing cores. PAUSE packets should not be forwarded.
  */
 union cvmx_bgxx_smux_rx_frm_ctl {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_rx_frm_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_13_63               : 51;
-	uint64_t ptp_mode                     : 1;  /**< Timestamp mode
-                                                         When PTP_MODE is set, a 64-bit timestamp will be
-                                                         prepended to every incoming packet. The timestamp
-                                                         bytes are added to the packet in such a way as to
-                                                         not modify the packet's receive byte count.
-                                                         This implies that the BGX_RX_JABBER,
-                                                         BGX_RX_DECISION, and BGX_RX_UDD_SKP do not require
-                                                         any adjustment as
-                                                         they operate on the received packet size.
-                                                         When the packet reaches PKI, its size will
-                                                         reflect the additional bytes and is subject to
-                                                         the restrictions below.
-                                                         If PTP_MODE=1 and PRE_CHK=1, PRE_STRP must be 1.
-                                                         If PTP_MODE=1,
-                                                         PIP_PRT_CFGx[SKIP] should be increased by 8.
-                                                         PIP_PRT_CFGx[HIGIG_EN] should be 0.
-                                                         PIP_FRM_CHKx[MAXLEN] should be increased by 8.
-                                                         PIP_FRM_CHKx[MINLEN] should be increased by 8.
-                                                         PIP_TAG_INCx[EN] should be adjusted.
-                                                         PIP_PRT_CFGBx[ALT_SKP_EN] should be 0. */
+	uint64_t ptp_mode                     : 1;  /**< Timestamp mode. When PTP_MODE is set, a 64-bit timestamp is prepended to every incoming
+                                                         packet.
+                                                         The timestamp bytes are added to the packet in such a way as to not modify the packet's
+                                                         receive byte count. This implies that the BGX(0..5)_SMU(0..3)_RX_JABBER,
+                                                         BGX(0..5)_SMU(0..3)_RX_DECISION, and BGX(0..5)_SMU(0..3)_RX_UDD_SKP do not require any
+                                                         adjustment as they operate on the received packet size. When the packet reaches PKI, its
+                                                         size reflects the additional bytes and is subject to the following restrictions:
+                                                         If PTP_MODE = 1 and PRE_CHK = 1, PRE_STRP must be 1.
+                                                         If PTP_MODE = 1
+                                                         PKI_CL(0..3)_PKIND(0..63)_SKIP[FCS_SKIP,INST_SKIP] should be increased by 8
+                                                         PKI_CL(0..3)_PKIND(0..63)_CFG[HG_EN] should be 0
+                                                         PKI_FRM_LEN_CHK(0..1)[MAXLEN] should be increased by 8
+                                                         PKI_FRM_LEN_CHK(0..1)[MINLEN] should be increased by 8
+                                                         PIP_TAG_INC(0..63)[EN] should be adjusted
+                                                         PIP_PRT_CFGB(0..63)[ALT_SKP_EN] should be 0. */
 	uint64_t reserved_6_11                : 6;
-	uint64_t ctl_smac                     : 1;  /**< Control Pause Frames can match station SMAC */
-	uint64_t ctl_mcst                     : 1;  /**< Control Pause Frames can match globally assign
-                                                         Multicast address */
-	uint64_t ctl_bck                      : 1;  /**< Forward pause information to TX block */
-	uint64_t ctl_drp                      : 1;  /**< Drop Control Pause Frames */
-	uint64_t pre_strp                     : 1;  /**< Strip off the preamble (when present)
-                                                         0=PREAMBLE+SFD is sent to core as part of frame
-                                                         1=PREAMBLE+SFD is dropped
-                                                         PRE_CHK must be set to enable this and all
-                                                         PREAMBLE features.
-                                                         If PTP_MODE=1 and PRE_CHK=1, PRE_STRP must be 1. */
-	uint64_t pre_chk                      : 1;  /**< This port is configured to send a valid 802.3
-                                                         PREAMBLE to begin every frame. BGX checks that a
-                                                         valid PREAMBLE is received (based on PRE_FREE).
-                                                         When a problem does occur within the PREAMBLE
-                                                         seqeunce, the frame is marked as bad and not sent
-                                                         into the core.  The BGX_RX_INT[PCTERR]
-                                                         interrupt is also raised.
-                                                         When BGX_TX_CTL[HG_EN] is set, PRE_CHK
-                                                         must be zero.
-                                                         If PTP_MODE=1 and PRE_CHK=1, PRE_STRP must be 1. */
+	uint64_t ctl_smac                     : 1;  /**< Control PAUSE frames can match station SMAC. */
+	uint64_t ctl_mcst                     : 1;  /**< Control PAUSE frames can match globally assign multicast address. */
+	uint64_t ctl_bck                      : 1;  /**< Forward PAUSE information to TX block. */
+	uint64_t ctl_drp                      : 1;  /**< Drop control PAUSE frames. */
+	uint64_t pre_strp                     : 1;  /**< Strip off the preamble (when present).
+                                                         0 = PREAMBLE + SFD is sent to core as part of frame
+                                                         1 = PREAMBLE + SFD is dropped
+                                                         [PRE_CHK] must be set to enable this and all PREAMBLE features.
+                                                         If PTP_MODE = 1 and PRE_CHK = 1, PRE_STRP must be 1.
+                                                         When PRE_CHK is set (indicating that the PREAMBLE will be sent), PRE_STRP determines if
+                                                         the PREAMBLE+SFD bytes are thrown away or sent to the core as part of the packet. In
+                                                         either mode, the PREAMBLE+SFD bytes are not counted toward the packet size when checking
+                                                         against the MIN and MAX bounds. Furthermore, the bytes are skipped when locating the start
+                                                         of the L2 header for DMAC and control frame recognition. */
+	uint64_t pre_chk                      : 1;  /**< Check the preamble for correctness.
+                                                         This port is configured to send a valid 802.3 PREAMBLE to begin every frame. BGX checks
+                                                         that a valid PREAMBLE is received (based on PRE_FREE). When a problem does occur within
+                                                         the PREAMBLE sequence, the frame is marked as bad and not sent into the core. The
+                                                         BGX(0..5)_SMU(0..3)_RX_INT[PCTERR] interrupt is also raised.
+                                                         When BGX(0..5)_SMU(0..3)_TX_CTL[HG_EN] is set, PRE_CHK must be 0.
+                                                         If PTP_MODE = 1 and PRE_CHK = 1, PRE_STRP must be 1. */
 #else
 	uint64_t pre_chk                      : 1;
 	uint64_t pre_strp                     : 1;
@@ -5254,47 +5230,43 @@ typedef union cvmx_bgxx_smux_rx_frm_ctl cvmx_bgxx_smux_rx_frm_ctl_t;
 /**
  * cvmx_bgx#_smu#_rx_int
  *
- * "**************************************************************
- * BGX RX per LMAC registers                                    *
- * **************************************************************
- * BGX_SMU_RX_INT = Interrupt Register"
+ * SMU Interrupt Register.
+ *
  */
 union cvmx_bgxx_smux_rx_int {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_rx_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_12_63               : 52;
-	uint64_t hg2cc                        : 1;  /**< HiGig2 received message CRC or Control char  error
-                                                         Set when either CRC8 error detected or when
-                                                         a Control Character is found in the message
-                                                         bytes after the K.SOM
-                                                         NOTE: HG2CC has higher priority than HG2FLD
-                                                         i.e. a HiGig2 message that results in HG2CC
-                                                         getting set, will never set HG2FLD. */
-	uint64_t hg2fld                       : 1;  /**< HiGig2 received message field error, as below
-                                                         1) MSG_TYPE field not 6'b00_0000
-                                                         i.e. it is not a FLOW CONTROL message, which
-                                                         is the only defined type for HiGig2
-                                                         2) FWD_TYPE field not 2'b00 i.e. Link Level msg
-                                                         which is the only defined type for HiGig2
-                                                         3) FC_OBJECT field is neither 4'b0000 for
-                                                         Physical Link nor 4'b0010 for Logical Link.
-                                                         Those are the only two defined types in HiGig2 */
-	uint64_t bad_term                     : 1;  /**< Frame is terminated by control character other
-                                                         than /T/.  The error propagation control
-                                                         character /E/ will be included as part of the
-                                                         frame and does not cause a frame termination. */
-	uint64_t bad_seq                      : 1;  /**< Reserved Sequence Deteted */
-	uint64_t rem_fault                    : 1;  /**< Remote Fault Sequence Deteted */
-	uint64_t loc_fault                    : 1;  /**< Local Fault Sequence Deteted */
-	uint64_t rsverr                       : 1;  /**< Reserved opcodes */
-	uint64_t pcterr                       : 1;  /**< Bad Preamble / Protocol
-                                                         The column of data that was
-                                                         bad will be logged in BGX_RX_BAD_COL */
-	uint64_t skperr                       : 1;  /**< Skipper error */
-	uint64_t rcverr                       : 1;  /**< Frame was received with Data reception error */
+	uint64_t hg2cc                        : 1;  /**< HiGig2 received message CRC or control-character error. Set when either a CRC8 error is
+                                                         detected, or when a control character is found in the message bytes after the K.SOM.
+                                                         HG2CC has higher priority than HG2FLD, which means that a HiGig2 message that results in
+                                                         HG2CC getting set never sets HG2FLD. */
+	uint64_t hg2fld                       : 1;  /**< HiGig2 received message field error:
+                                                         MSG_TYPE field not 0x0, i.e. it is not a flow-control message, which is the only defined
+                                                         type for HiGig2
+                                                         FWD_TYPE field not 0x0, i.e. it is not a link-level message, which is the only defined
+                                                         type for HiGig2
+                                                         FC_OBJECT field is neither 0x0 for physical link, nor 0x2 for logical link. Those are the
+                                                         only two defined types in HiGig2 */
+	uint64_t bad_term                     : 1;  /**< Frame is terminated by control character other than /T/. (XAUI/RXAUI mode only) The error
+                                                         propagation control character /E/ will be included as part of the frame and does not cause
+                                                         a frame termination. */
+	uint64_t bad_seq                      : 1;  /**< Reserved sequence detected. (XAUI/RXAUI mode only) */
+	uint64_t rem_fault                    : 1;  /**< Remote-fault sequence detected. (XAUI/RXAUI mode only) */
+	uint64_t loc_fault                    : 1;  /**< Local-fault sequence detected. (XAUI/RXAUI mode only) */
+	uint64_t rsverr                       : 1;  /**< Reserved opcodes. */
+	uint64_t pcterr                       : 1;  /**< Bad preamble/protocol. In XAUI/RXAUI mode, the column of data that was bad is logged in
+                                                         BGX(0..5)_SMU(0..3)_RX_BAD_COL_*. PCTERR checks that the frame begins with a valid
+                                                         PREAMBLE sequence. Does not check the number of PREAMBLE cycles. */
+	uint64_t skperr                       : 1;  /**< Skipper error. */
+	uint64_t rcverr                       : 1;  /**< Frame was received with data-reception error. */
 	uint64_t fcserr                       : 1;  /**< Frame was received with FCS/CRC error */
-	uint64_t jabber                       : 1;  /**< Frame was received with length > sys_length */
+	uint64_t jabber                       : 1;  /**< Frame was received with length > sys_length. An RX Jabber error indicates that a packet
+                                                         was received which is longer than the maximum allowed packet as defined by the system. BGX
+                                                         terminates the packet with an EOP on the beat on which JABBER was exceeded. The beat on
+                                                         which JABBER was exceeded is left unchanged and all subsequent data beats are dropped.
+                                                         Failure to truncate could lead to system instability. */
 #else
 	uint64_t jabber                       : 1;
 	uint64_t fcserr                       : 1;
@@ -5323,10 +5295,9 @@ union cvmx_bgxx_smux_rx_jabber {
 	struct cvmx_bgxx_smux_rx_jabber_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t cnt                          : 16; /**< Byte count for jabber check
-                                                         Failing packets set the JABBER interrupt and are
-                                                         optionally sent with opcode==JABBER
-                                                         BGX will truncate the packet to CNT+1 to CNT+8 bytes */
+	uint64_t cnt                          : 16; /**< Byte count for jabber check. Failing packets set the JABBER interrupt and are optionally
+                                                         sent with opcode = JABBER. BGX truncates the packet to CNT+1 to CNT+8 bytes.
+                                                         CNT must be 8-byte aligned such that CNT[2:0] = 000. */
 #else
 	uint64_t cnt                          : 16;
 	uint64_t reserved_16_63               : 48;
@@ -5344,19 +5315,20 @@ union cvmx_bgxx_smux_rx_udd_skp {
 	struct cvmx_bgxx_smux_rx_udd_skp_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_9_63                : 55;
-	uint64_t fcssel                       : 1;  /**< Include the skip bytes in the FCS calculation
-                                                         0 = all skip bytes are included in FCS
-                                                         1 = the skip bytes are not included in FCS
-                                                         When BGX_TX_CTL[HG_EN] is set, FCSSEL must
-                                                         be zero. */
+	uint64_t fcssel                       : 1;  /**< Include the skip bytes in the FCS calculation.
+                                                         0 = All skip bytes are included in FCS
+                                                         1 = The skip bytes are not included in FCS
+                                                         When BGX(0..5)_SMU(0..3)_TX_CTL[HG_EN] is set, this field must be 0.
+                                                         The skip bytes are part of the packet and are sent through the IOI packet interface and
+                                                         are handled by PKI. The system can determine if the UDD bytes are included in the FCS
+                                                         check by using the FCSSEL field, if the FCS check is enabled. */
 	uint64_t reserved_7_7                 : 1;
-	uint64_t len                          : 7;  /**< Amount of User-defined data before the start of
-                                                         the L2 data.  Zero means L2 comes first.
-                                                         Max value is 64.
-                                                         When BGX_TX_CTL[HG_EN] is set, LEN must be
-                                                         set to 12 or 16 (depending on HiGig header size)
-                                                         to account for the HiGig header. LEN=12 selects
-                                                         HiGig/HiGig+, and LEN=16 selects HiGig2. */
+	uint64_t len                          : 7;  /**< Amount of user-defined data before the start of the L2C data, in bytes.
+                                                         Setting to 0 means L2C comes first; maximum value is 64.
+                                                         LEN must be 0x0 in half-duplex operation.
+                                                         When BGX(0..5)_SMU(0..3)_TX_CTL[HG_EN] is set, this field must be set to 12 or 16
+                                                         (depending on HiGig header size) to account for the HiGig header.
+                                                         LEN = 12 selects HiGig/HiGig+; LEN = 16 selects HiGig2. */
 #else
 	uint64_t len                          : 7;
 	uint64_t reserved_7_7                 : 1;
@@ -5376,8 +5348,7 @@ union cvmx_bgxx_smux_smac {
 	struct cvmx_bgxx_smux_smac_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t smac                         : 48; /**< The SMAC field is used for generating and
-                                                         accepting Control Pause packets */
+	uint64_t smac                         : 48; /**< The SMAC field is used for generating and accepting control PAUSE packets. */
 #else
 	uint64_t smac                         : 48;
 	uint64_t reserved_48_63               : 16;
@@ -5389,19 +5360,21 @@ typedef union cvmx_bgxx_smux_smac cvmx_bgxx_smux_smac_t;
 
 /**
  * cvmx_bgx#_smu#_tx_append
+ *
+ * For more details on the interactions between FCS and PAD, see also the description of
+ * BGX(0..5)_SMU(0..3)_TX_MIN_PKT[MIN_SIZE].
  */
 union cvmx_bgxx_smux_tx_append {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_tx_append_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
-	uint64_t fcs_c                        : 1;  /**< Append the Ethernet FCS on each pause packet
-                                                         Pause packets are normally padded to 60 bytes. */
-	uint64_t fcs_d                        : 1;  /**< Append the Ethernet FCS on each data packet */
-	uint64_t pad                          : 1;  /**< Append PAD bytes such that min sized */
-	uint64_t preamble                     : 1;  /**< Prepend the Ethernet preamble on each transfer
-                                                         When BGX_TX_CTL[HG_EN] is set, PREAMBLE
-                                                         must be zero. */
+	uint64_t fcs_c                        : 1;  /**< Append the Ethernet FCS on each PAUSE packet. PAUSE packets are normally padded to 60
+                                                         bytes. If BGX(0..5)_SMU(0..3)_TX_MIN_PKT[MIN_SIZE] exceeds 59, then FCS_C is not used. */
+	uint64_t fcs_d                        : 1;  /**< Append the Ethernet FCS on each data packet. */
+	uint64_t pad                          : 1;  /**< Append PAD bytes such that minimum-sized packet is transmitted. */
+	uint64_t preamble                     : 1;  /**< Prepend the Ethernet preamble on each transfer. When BGX(0..5)_SMU(0..3)_TX_CTL[HG_EN] is
+                                                         set, PREAMBLE must be 0. */
 #else
 	uint64_t preamble                     : 1;
 	uint64_t pad                          : 1;
@@ -5433,44 +5406,35 @@ union cvmx_bgxx_smux_tx_ctl {
                                                          alignment marker period of 16363 blocks (exclusive) per lane, as
                                                          specified in 802.3ba-2010. The default value should always be used
                                                          for normal operation. */
-	uint64_t hg_pause_hgi                 : 2;  /**< HGI Field for HW generated HiGig pause packets */
-	uint64_t hg_en                        : 1;  /**< Enable HiGig Mode
-                                                         When HG_EN is set and BGX_RX_UDD_SKP[SKIP]=12
-                                                         the interface is in HiGig/HiGig+ mode and the
-                                                         following must be set:
-                                                         BGX_RX_FRM_CTL[PRE_CHK] == 0
-                                                         BGX_RX_UDD_SKP[FCSSEL] == 0
-                                                         BGX_RX_UDD_SKP[SKIP] == 12
-                                                         BGX_TX_APPEND[PREAMBLE] == 0
-                                                         When HG_EN is set and BGX_RX_UDD_SKP[SKIP]=16
-                                                         the interface is in HiGig2 mode and the
-                                                         following must be set:
-                                                         BGX_RX_FRM_CTL[PRE_CHK] == 0
-                                                         BGX_RX_UDD_SKP[FCSSEL] == 0
-                                                         BGX_RX_UDD_SKP[SKIP] == 16
-                                                         BGX_TX_APPEND[PREAMBLE] == 0
-                                                         BGX_SMUX_CBFC_CTL[RX_EN] == 0
-                                                         BGX_SMUX_CBFC_CTL[TX_EN] == 0 */
+	uint64_t hg_pause_hgi                 : 2;  /**< HGI field for hardware-generated HiGig PAUSE packets. */
+	uint64_t hg_en                        : 1;  /**< Enable HiGig mode.
+                                                         When this field is set and BGX(0..5)_SMU(0..3)_RX_UDD_SKP[SKIP] = 12, the interface is in
+                                                         HiGig/HiGig+ mode and the following must be set:
+                                                         BGX(0..5)_SMU(0..3)_RX_FRM_CTL[PRE_CHK] = 0
+                                                         BGX(0..5)_SMU(0..3)_RX_UDD_SKP[FCSSEL] = 0
+                                                         BGX(0..5)_SMU(0..3)_RX_UDD_SKP[SKIP] = 12
+                                                         BGX(0..5)_SMU(0..3)_TX_APPEND[PREAMBLE] = 0
+                                                         When this field is set and BGX(0..5)_SMU(0..3)_RX_UDD_SKP[SKIP] = 16, the interface is in
+                                                         HiGig2 mode and the following must be set:
+                                                         BGX(0..5)_SMU(0..3)_RX_FRM_CTL[PRE_CHK] = 0
+                                                         BGX(0..5)_SMU(0..3)_RX_UDD_SKP[FCSSEL] = 0
+                                                         BGX(0..5)_SMU(0..3)_RX_UDD_SKP[SKIP] = 16
+                                                         BGX(0..5)_SMU(0..3)_TX_APPEND[PREAMBLE] = 0
+                                                         BGX(0..5)_SMU(0..3)_SMUX_CBFC_CTL[RX_EN] = 0
+                                                         BGX(0..5)_SMU(0..3)_CBFC_CTL[TX_EN] = 0 */
 	uint64_t l2p_bp_conv                  : 1;  /**< If set will cause TX to generate 802.3 pause packets when CMR applies logical backpressure
-                                                         (XOFF), if and only if BGX_SMUX_CBFC_CTL[TX_EN] == 0 and
-                                                         BGX(0..5)_SMU(0..3)_HG2_CONTROL[HG2TX_EN] == 0. */
-	uint64_t ls_byp                       : 1;  /**< Bypass the link status as determined by the XGMII
-                                                         receiver and set the link status of the
-                                                         transmitter to LS. */
-	uint64_t ls                           : 2;  /**< Link Status
-                                                         0 = Link Ok
-                                                         Link runs normally. RS passes MAC data to PCS
-                                                         1 = Local Fault
-                                                         RS layer sends continuous remote fault
-                                                         sequences.
-                                                         2 = Remote Fault
-                                                         RS layer sends continuous idles sequences
-                                                         3 = Link Drain
-                                                         RS layer drops full packets to allow BGX and
-                                                         PKO to drain their FIFOs */
+                                                         (XOFF), if and only if BGX(0..5)_SMU(0..3)_CBFC_CTL[TX_EN] is clear and
+                                                         BGX(0..5)_SMU(0..3)_HG2_CONTROL[HG2TX_EN] is clear. */
+	uint64_t ls_byp                       : 1;  /**< Bypass the link status, as determined by the XGMII receiver, and set the link status of
+                                                         the transmitter to LS. */
+	uint64_t ls                           : 2;  /**< Link status.
+                                                         0 = Link OK; link runs normally. RS passes MAC data to PCS.
+                                                         1 = Local fault. RS layer sends continuous remote fault sequences.
+                                                         2 = Remote fault. RS layer sends continuous idle sequences.
+                                                         3 = Link drain. RS layer drops full packets to allow BGX and PKO to drain their FIFOs. */
 	uint64_t reserved_2_3                 : 2;
-	uint64_t uni_en                       : 1;  /**< Enable Unidirectional Mode (IEEE Clause 66) */
-	uint64_t dic_en                       : 1;  /**< Enable the deficit idle counter for IFG averaging */
+	uint64_t uni_en                       : 1;  /**< Enable unidirectional mode (IEEE Clause 66). */
+	uint64_t dic_en                       : 1;  /**< Enable the deficit idle counter for IFG averaging. */
 #else
 	uint64_t dic_en                       : 1;
 	uint64_t uni_en                       : 1;
@@ -5490,6 +5454,12 @@ typedef union cvmx_bgxx_smux_tx_ctl cvmx_bgxx_smux_tx_ctl_t;
 
 /**
  * cvmx_bgx#_smu#_tx_ifg
+ *
+ * Programming IFG1 and IFG2:
+ * For XAUI/RXAUI/10Gbs/40Gbs systems that require IEEE 802.3 compatibility, the IFG1+IFG2 sum
+ * must be 12.
+ * In loopback mode, the IFG1+IFG2 of local and remote parties must match exactly; otherwise one
+ * of the two sides' loopback FIFO will overrun: BGX(0..5)_SMU(0..3)_TX_INT[LB_OVRFLW].
  */
 union cvmx_bgxx_smux_tx_ifg {
 	uint64_t u64;
@@ -5516,14 +5486,12 @@ union cvmx_bgxx_smux_tx_int {
 	struct cvmx_bgxx_smux_tx_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_5_63                : 59;
-	uint64_t lb_ovrflw                    : 1;  /**< TX Loopback Overflow */
-	uint64_t lb_undflw                    : 1;  /**< TX Loopback Underflow */
-	uint64_t fake_commit                  : 1;  /**< TX SMU started a packet with PTP on SOP and has not seen a commit for it
-                                                         from TX SPU after 2^SMU_TX_PTP_TIMEOUT_WIDTH (2^8) cycles so it faked a
-                                                         commit to CMR */
-	uint64_t xchange                      : 1;  /**< link status changed - this denotes a
-                                                         change to BGX_RX_CTL[STATUS] */
-	uint64_t undflw                       : 1;  /**< TX Underflow */
+	uint64_t lb_ovrflw                    : 1;  /**< TX loopback overflow. */
+	uint64_t lb_undflw                    : 1;  /**< TX loopback underflow. */
+	uint64_t fake_commit                  : 1;  /**< TX SMU started a packet with PTP on SOP and has not seen a commit for it from TX SPU after
+                                                         2^SMU_TX_PTP_TIMEOUT_WIDTH (2^8) cycles so it faked a commit to CMR. */
+	uint64_t xchange                      : 1;  /**< Link status changed. This denotes a change to BGX(0..5)_SMU(0..3)_RX_CTL[STATUS]. */
+	uint64_t undflw                       : 1;  /**< TX underflow. */
 #else
 	uint64_t undflw                       : 1;
 	uint64_t xchange                      : 1;
@@ -5545,12 +5513,9 @@ union cvmx_bgxx_smux_tx_min_pkt {
 	struct cvmx_bgxx_smux_tx_min_pkt_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_8_63                : 56;
-	uint64_t min_size                     : 8;  /**< Min frame in bytes inclusive of FCS, if applied.
-                                                         Padding is only appended when BGX_TX_APPEND[PAD]
-                                                         for the coresponding port is set.
-                                                         When FCS is added to a packet which was padded,
-                                                         the FCS will always appear in the 4 octets
-                                                         preceding /T/ or /E/ */
+	uint64_t min_size                     : 8;  /**< Min frame in bytes inclusive of FCS, if applied. Padding is only appended when
+                                                         BGX_TX_APPEND[PAD] for the corresponding port is set. When FCS is added to a packet which
+                                                         was padded, the FCS always appears in the 4 octets preceding /T/ or /E/. */
 #else
 	uint64_t min_size                     : 8;
 	uint64_t reserved_8_63                : 56;
@@ -5562,13 +5527,16 @@ typedef union cvmx_bgxx_smux_tx_min_pkt cvmx_bgxx_smux_tx_min_pkt_t;
 
 /**
  * cvmx_bgx#_smu#_tx_pause_pkt_dmac
+ *
+ * This register provides the DMAC value that is placed in outbound PAUSE packets.
+ *
  */
 union cvmx_bgxx_smux_tx_pause_pkt_dmac {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_tx_pause_pkt_dmac_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t dmac                         : 48; /**< The DMAC field placed is outbnd pause pkts */
+	uint64_t dmac                         : 48; /**< The DMAC field, which is placed is outbound PAUSE packets. */
 #else
 	uint64_t dmac                         : 48;
 	uint64_t reserved_48_63               : 16;
@@ -5580,27 +5548,24 @@ typedef union cvmx_bgxx_smux_tx_pause_pkt_dmac cvmx_bgxx_smux_tx_pause_pkt_dmac_
 
 /**
  * cvmx_bgx#_smu#_tx_pause_pkt_interval
+ *
+ * This register specifies how often PAUSE packets are sent.
+ *
  */
 union cvmx_bgxx_smux_tx_pause_pkt_interval {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_tx_pause_pkt_interval_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_33_63               : 31;
-	uint64_t hg2_intra_en                 : 1;  /**< Allow intrapacket HiGig2 message generation
-                                                         Relevant only if HiGig2 message generation is enabled */
-	uint64_t hg2_intra_interval           : 16; /**< Arbitrate for a HiGig2 message, every (INTERVAL*512)
-                                                         bit-times whilst sending regular packet data
-                                                         Relevant only if HiGig2 message generation and HG2_INTRA_EN
-                                                         are both set.
-                                                         Normally, 0 < INTERVAL < BGX_TX_PAUSE_PKT_TIME
-                                                         INTERVAL=0, will only send a single PAUSE packet
-                                                         for each backpressure event */
-	uint64_t interval                     : 16; /**< Arbitrate for a 802.3 pause packet, HiGig2 message,
-                                                         or PFC/CBFC pause packet every (INTERVAL*512)
-                                                         bit-times.
-                                                         Normally, 0 < INTERVAL < BGX_TX_PAUSE_PKT_TIME
-                                                         INTERVAL=0, will only send a single PAUSE packet
-                                                         for each backpressure event */
+	uint64_t hg2_intra_en                 : 1;  /**< Allow intrapacket HiGig2 message generation. Relevant only if HiGig2 message generation is enabled. */
+	uint64_t hg2_intra_interval           : 16; /**< Arbitrate for a HiGig2 message, every (INTERVAL*512) bit-times whilst sending regular
+                                                         packet data. Relevant only if HiGig2 message generation and HG2_INTRA_EN are both set.
+                                                         Normally, 0 < INTERVAL < BGX_TX_PAUSE_PKT_TIME.
+                                                         INTERVAL = 0 only sends a single PAUSE packet for each backpressure event. */
+	uint64_t interval                     : 16; /**< Arbitrate for a 802.3 PAUSE packet, HiGig2 message, or PFC/CBFC PAUSE packet every
+                                                         (INTERVAL * 512) bit-times.
+                                                         Normally, 0 < INTERVAL < BGX(0..5)_SMU(0..3)_TX_PAUSE_PKT_TIME[TIME].
+                                                         INTERVAL = 0 only sends a single PAUSE packet for each backpressure event. */
 #else
 	uint64_t interval                     : 16;
 	uint64_t hg2_intra_interval           : 16;
@@ -5620,11 +5585,10 @@ union cvmx_bgxx_smux_tx_pause_pkt_time {
 	struct cvmx_bgxx_smux_tx_pause_pkt_time_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t p_time                       : 16; /**< The pause_time field placed in outbnd 802.3 pause
-                                                         packets, HiGig2 messages, or PFC/CBFC pause
-                                                         packets.
-                                                         pause_time is in 512 bit-times
-                                                         Normally, P_TIME > BGX_TX_PAUSE_PKT_INTERVAL */
+	uint64_t p_time                       : 16; /**< Provides the pause_time field placed in outbound 802.3 PAUSE packets, HiGig2 messages, or
+                                                         PFC/CBFC PAUSE packets in 512 bit-times. Normally, P_TIME >
+                                                         BGX(0..5)_SMU(0..3)_TX_PAUSE_PKT_INTERVAL[INTERVAL]. See programming notes in
+                                                         BGX(0..5)_SMU(0..3)_TX_PAUSE_PKT_INTERVAL. */
 #else
 	uint64_t p_time                       : 16;
 	uint64_t reserved_16_63               : 48;
@@ -5636,13 +5600,16 @@ typedef union cvmx_bgxx_smux_tx_pause_pkt_time cvmx_bgxx_smux_tx_pause_pkt_time_
 
 /**
  * cvmx_bgx#_smu#_tx_pause_pkt_type
+ *
+ * This register provides the P_TYPE field that is placed in outbound PAUSE packets.
+ *
  */
 union cvmx_bgxx_smux_tx_pause_pkt_type {
 	uint64_t u64;
 	struct cvmx_bgxx_smux_tx_pause_pkt_type_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t p_type                       : 16; /**< The P_TYPE field placed is outbnd pause pkts */
+	uint64_t p_type                       : 16; /**< The P_TYPE field that is placed in outbound PAUSE packets. */
 #else
 	uint64_t p_type                       : 16;
 	uint64_t reserved_16_63               : 48;
@@ -5660,11 +5627,9 @@ union cvmx_bgxx_smux_tx_pause_togo {
 	struct cvmx_bgxx_smux_tx_pause_togo_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_32_63               : 32;
-	uint64_t msg_time                     : 16; /**< Amount of time remaining to backpressure
-                                                         From the higig2 physical message pause timer
-                                                         (only valid on port0) */
-	uint64_t p_time                       : 16; /**< Amount of time remaining to backpressure
-                                                         From the standard 802.3 pause timer */
+	uint64_t msg_time                     : 16; /**< Amount of time remaining to backpressure, from the HiGig2 physical message PAUSE timer
+                                                         (only valid on port0). */
+	uint64_t p_time                       : 16; /**< Amount of time remaining to backpressure, from the standard 802.3 PAUSE timer. */
 #else
 	uint64_t p_time                       : 16;
 	uint64_t msg_time                     : 16;
@@ -5683,9 +5648,8 @@ union cvmx_bgxx_smux_tx_pause_zero {
 	struct cvmx_bgxx_smux_tx_pause_zero_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_1_63                : 63;
-	uint64_t send                         : 1;  /**< When backpressure condition clear, send PAUSE
-                                                         packet with pause_time of zero to enable the
-                                                         channel */
+	uint64_t send                         : 1;  /**< Send PAUSE-zero enable. When this bit is set, and the backpressure condition is clear, it
+                                                         allows sending a PAUSE packet with pause_time of 0 to enable the channel. */
 #else
 	uint64_t send                         : 1;
 	uint64_t reserved_1_63                : 63;
@@ -5703,7 +5667,7 @@ union cvmx_bgxx_smux_tx_soft_pause {
 	struct cvmx_bgxx_smux_tx_soft_pause_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t p_time                       : 16; /**< Back off the TX bus for (P_TIME*512) bit-times */
+	uint64_t p_time                       : 16; /**< Back off the TX bus for (P_TIME * 512) bit-times */
 #else
 	uint64_t p_time                       : 16;
 	uint64_t reserved_16_63               : 48;
@@ -5721,17 +5685,14 @@ union cvmx_bgxx_smux_tx_thresh {
 	struct cvmx_bgxx_smux_tx_thresh_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_11_63               : 53;
-	uint64_t cnt                          : 11; /**< Number of 128b words to accumulate in the TX FIFO
-                                                         before sending on the packet interface
-                                                         This register should be large enough to prevent
-                                                         underflow on the packet interface and must never
-                                                         be set to zero.
-                                                         10G/40G Mode, CNT == 0x100
-                                                         In all modes, this register cannot exceed the
-                                                         the TX FIFO depth which is...
-                                                         BGX_CMR_TX_LMACS==0,1:  CNT MAX = 0x7FF
-                                                         BGX_CMR_TX_LMACS==2  :  CNT MAX = 0x3FF
-                                                         BGX_CMR_TX_LMACS==3  :  CNT MAX = 0x1FF */
+	uint64_t cnt                          : 11; /**< Number of 128-bit words to accumulate in the TX FIFO before sending on the packet
+                                                         interface. This field should be large enough to prevent underflow on the packet interface
+                                                         and must never be set to 0x0.
+                                                         In 10G/40G mode, CNT = 0x100.
+                                                         In all modes, this register cannot exceed the TX FIFO depth as follows.
+                                                         BGX(0..5)_CMR_TX_PRTS = 0,1:  CNT maximum = 0x7FF
+                                                         BGX(0..5)_CMR_TX_PRTS = 2:     CNT maximum = 0x3FF
+                                                         BGX(0..5)_CMR_TX_PRTS = 3,4:  CNT maximum = 0x1FF */
 #else
 	uint64_t cnt                          : 11;
 	uint64_t reserved_11_63               : 53;
@@ -5744,47 +5705,40 @@ typedef union cvmx_bgxx_smux_tx_thresh cvmx_bgxx_smux_tx_thresh_t;
 /**
  * cvmx_bgx#_spu#_an_adv
  *
- * "Auto Negotiation Advertisement:
- * Software programs the AN_ADV register with the contents of the AN link
- * codeword base page to be transmitted during Auto-Negotiation. See section 802.3
- * section 73.6 for details.
- * Any writes to this register prior to completion of Auto-Negotiation, as indicated
- * by the AN_COMPLETE bit in AN_STATUS, should be followed by a
- * renegotiation for the new values to take effect. Renegotiation is initiated by
- * setting the AN_RESTART bit in AN_CONTROL.
- * Once Auto-Negotiation has completed, software may examine this register along with
- * the LP base page ability register to determine the highest common denominator
- * technology."
+ * Software programs this register with the contents of the AN-link code word base page to be
+ * transmitted during Auto-Negotiation. (See Std 802.3 section 73.6 for details.) Any write
+ * operations to this register prior to completion of Auto-Negotiation, as indicated by
+ * BGX(0..5)_SPU(0..3)_AN_STATUS[AN_COMPLETE], should be followed by a renegotiation in order for
+ * the new values to take effect. Renegotiation is initiated by setting
+ * BGX(0..5)_SPU(0..3)_AN_CONTROL[AN_RESTART]. Once Auto-Negotiation has completed, software can
+ * examine this register along with BGX(0..5)_SPU(0..3)_AN_LP_BASE to determine the highest
+ * common denominator technology.
  */
 union cvmx_bgxx_spux_an_adv {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_an_adv_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t fec_req                      : 1;  /**< FEC Requested */
-	uint64_t fec_able                     : 1;  /**< FEC Ability */
-	uint64_t arsv                         : 19; /**< Technology Ability reserved bits
-                                                         Should always be 0. */
-	uint64_t a100g_cr10                   : 1;  /**< 100GBASE-CR10 Ability
-                                                         Should always be 0; 100GBASE-R is not supported. */
-	uint64_t a40g_cr4                     : 1;  /**< 40GBASE-CR4 Ability */
-	uint64_t a40g_kr4                     : 1;  /**< 40GBASE-KR4 Ability */
-	uint64_t a10g_kr                      : 1;  /**< 10GBASE-KR Ability */
-	uint64_t a10g_kx4                     : 1;  /**< 10GBASE-KX4 Ability */
-	uint64_t a1g_kx                       : 1;  /**< 1000BASE-KX Ability */
-	uint64_t t                            : 5;  /**< "Transmitted Nonce: This field is automatically updated with a
-                                                         pseudo-random value on entry to the AN Ability Detect state." */
-	uint64_t np                           : 1;  /**< Next Page. */
-	uint64_t ack                          : 1;  /**< Ack: Always 0 in this register. */
-	uint64_t rf                           : 1;  /**< Remote Fault */
-	uint64_t xnp_able                     : 1;  /**< Extended Next Page ability. */
-	uint64_t asm_dir                      : 1;  /**< Asymmetric Pause */
-	uint64_t pause                        : 1;  /**< Pause Ability */
-	uint64_t e                            : 5;  /**< Echoed Nonce
-                                                         Echoed Nonce value to use when ACK=0 in transmitted DME page. Should
-                                                         always be 0. */
-	uint64_t s                            : 5;  /**< Selector
-                                                         Should be 0x1 (encoding for IEEE Std 802.3). */
+	uint64_t fec_req                      : 1;  /**< FEC requested. */
+	uint64_t fec_able                     : 1;  /**< FEC ability. */
+	uint64_t arsv                         : 19; /**< Technology ability. Reserved bits, should always be 0. */
+	uint64_t a100g_cr10                   : 1;  /**< 100GBASE-CR10 ability. Should always be 0; 100GBASE-R is not supported. */
+	uint64_t a40g_cr4                     : 1;  /**< 40GBASE-CR4 ability. */
+	uint64_t a40g_kr4                     : 1;  /**< 40GBASE-KR4 ability. */
+	uint64_t a10g_kr                      : 1;  /**< 10GBASE-KR ability. */
+	uint64_t a10g_kx4                     : 1;  /**< 10GBASE-KX4 ability. */
+	uint64_t a1g_kx                       : 1;  /**< 1000BASE-KX ability. Should always be 0; Auto-Negotiation is not supported for 1000Base-KX. */
+	uint64_t t                            : 5;  /**< Transmitted nonce. This field is automatically updated with a pseudo-random value on entry
+                                                         to the AN ability detect state. */
+	uint64_t np                           : 1;  /**< Next page. Always 0; extended next pages are not used for 10G+ Auto-Negotiation. */
+	uint64_t ack                          : 1;  /**< Acknowledge. Always 0 in this register. */
+	uint64_t rf                           : 1;  /**< Remote fault. */
+	uint64_t xnp_able                     : 1;  /**< Extended next page ability. */
+	uint64_t asm_dir                      : 1;  /**< Asymmetric PAUSE. */
+	uint64_t pause                        : 1;  /**< PAUSE ability. */
+	uint64_t e                            : 5;  /**< Echoed nonce. Provides the echoed-nonce value to use when ACK = 0 in transmitted DME page.
+                                                         Should always be 0x0. */
+	uint64_t s                            : 5;  /**< Selector. Should be 0x1 (encoding for IEEE Std 802.3). */
 #else
 	uint64_t s                            : 5;
 	uint64_t e                            : 5;
@@ -5814,22 +5768,19 @@ typedef union cvmx_bgxx_spux_an_adv cvmx_bgxx_spux_an_adv_t;
 /**
  * cvmx_bgx#_spu#_an_bp_status
  *
- * "Backplane Ethernet & BASE-R Copper Status:
- * The contents of the AN_BP_STATUS register (with the exception of the
- * static BP_AN_ABLE bit) are updated during Auto-Negotiation and are valid
- * when the AN_COMPLETE bit is set in AN_STATUS. At that time, one of the
- * port type bits (A100G_CR10, A40G_CR4, A40G_KR4, A10G_KR, A10G_KX4, A1G_KX)
- * will be set depending on the AN priority resolution. If a BASE-R type is
- * negotiated, then the FEC bit will be set to indicate that FEC operation
- * has been negotiated, and will be clear otherwise."
+ * The contents of this register (with the exception of the static BP_AN_ABLE bit) are updated
+ * during Auto-Negotiation and are valid when BGX(0..5)_SPU(0..3)_AN_STATUS[AN_COMPLETE] is set.
+ * At that time, one of the port type bits (A100G_CR10, A40G_CR4, A40G_KR4, A10G_KR, A10G_KX4,
+ * A1G_KX) will be set depending on the AN priority resolution. If a BASE-R type is negotiated,
+ * then the FEC bit will be set to indicate that FEC operation has been negotiated, and will be
+ * clear otherwise.
  */
 union cvmx_bgxx_spux_an_bp_status {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_an_bp_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_9_63                : 55;
-	uint64_t n100g_cr10                   : 1;  /**< "100GBASE-CR10 negotiated:
-                                                         Expected to always be 0; 100GBASE-R is not supported." */
+	uint64_t n100g_cr10                   : 1;  /**< 100GBASE-CR10 negotiated; expected to always be 0; 100GBASE-R is not supported. */
 	uint64_t reserved_7_7                 : 1;
 	uint64_t n40g_cr4                     : 1;  /**< 40GBASE-CR4 negotiated */
 	uint64_t n40g_kr4                     : 1;  /**< 40GBASE-KR4 negotiated */
@@ -5837,8 +5788,7 @@ union cvmx_bgxx_spux_an_bp_status {
 	uint64_t n10g_kr                      : 1;  /**< 10GBASE-KR negotiated */
 	uint64_t n10g_kx4                     : 1;  /**< 10GBASE-KX4 or CX4 negotiated (XAUI) */
 	uint64_t n1g_kx                       : 1;  /**< 1000BASE-KX negotiated */
-	uint64_t bp_an_able                   : 1;  /**< "Backplane or BASE-R Copper AN Ability:
-                                                         Always 1." */
+	uint64_t bp_an_able                   : 1;  /**< Backplane or BASE-R copper AN Ability; always 1. */
 #else
 	uint64_t bp_an_able                   : 1;
 	uint64_t n1g_kx                       : 1;
@@ -5858,30 +5808,26 @@ typedef union cvmx_bgxx_spux_an_bp_status cvmx_bgxx_spux_an_bp_status_t;
 
 /**
  * cvmx_bgx#_spu#_an_control
- *
- * Auto Negotiation Control
- *
  */
 union cvmx_bgxx_spux_an_control {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_an_control_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t an_reset                     : 1;  /**< "Auto-Negotiation Reset:
-                                                         Writing a 1 to this bit or to the RESET bit in register CONTROL1
-                                                         resets the logical PCS (LPCS), sets the 802.3 PCS, FEC and AN
-                                                         registers for the LPCS to their default states, and resets the
-                                                         associated serdes lanes. It takes up to 32 sclk cycles to reset the
-                                                         LPCS, after which this bit is automatically cleared." */
+	uint64_t an_reset                     : 1;  /**< Auto-Negotiation reset. Setting this bit or BGXn_SPUm_CONTROL1[RESET] to 1 causes the
+                                                         following to happen:
+                                                         Resets the logical PCS (LPCS)
+                                                         Sets the Std 802.3 PCS, FEC and AN registers for the LPCS to their default states
+                                                         Resets the associated SerDes lanes.
+                                                         It takes up to 32 coprocessor-clock cycles to reset the LPCS, after which RESET is
+                                                         automatically cleared. */
 	uint64_t reserved_14_14               : 1;
-	uint64_t xnp_en                       : 1;  /**< Extended Next Page Enable. */
-	uint64_t an_en                        : 1;  /**< Auto-Negotiation Enable. This bit should not be set when
-                                                         BGX_CMR_CONFIG[LMAC_TYPE] is set to RXAUI; auto-negotiation is not
-                                                         supported in RXAUI mode. */
+	uint64_t xnp_en                       : 1;  /**< Extended next-page enable. */
+	uint64_t an_en                        : 1;  /**< Auto-Negotiation enable. This bit should not be set when BGX_CMR_CONFIG[LMAC_TYPE] is set
+                                                         to RXAUI; auto-negotiation is not supported in RXAUI mode. */
 	uint64_t reserved_10_11               : 2;
-	uint64_t an_restart                   : 1;  /**< "Auto-Negotiation Restart:
-                                                         Writing a 1 to this bit restarts the Auto-Negotiation process if the
-                                                         AN_EN bit in the register is also set. This is a self-clearing bit." */
+	uint64_t an_restart                   : 1;  /**< Auto-Negotiation restart. Writing a 1 to this bit restarts the Auto-Negotiation process if
+                                                         AN_EN is also set. This is a self-clearing bit. */
 	uint64_t reserved_0_8                 : 9;
 #else
 	uint64_t reserved_0_8                 : 9;
@@ -5901,35 +5847,33 @@ typedef union cvmx_bgxx_spux_an_control cvmx_bgxx_spux_an_control_t;
 /**
  * cvmx_bgx#_spu#_an_lp_base
  *
- * "Auto Negotiation Link Partner Base Page Ability:
- * The AN_LP_BASE register captures the contents of the latest AN link
- * codeword base page received from the link partner during Auto-Negotiation. See
- * section 802.3 section 73.6 for details. The PAGE_RX bit in AN_STATUS is
- * set when this register is updated by hardware."
+ * This register captures the contents of the latest AN link code word base page received from
+ * the link partner during Auto-Negotiation. (See Std 802.3 section 73.6 for details.)
+ * BGX(0..5)_SPU(0..3)_AN_STATUS[PAGE_RX] is set when this register is updated by hardware.
  */
 union cvmx_bgxx_spux_an_lp_base {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_an_lp_base_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t fec_req                      : 1;  /**< FEC Requested */
-	uint64_t fec_able                     : 1;  /**< FEC Ability */
-	uint64_t arsv                         : 19; /**< Technology Ability reserved bits */
-	uint64_t a100g_cr10                   : 1;  /**< 100GBASE-CR10 Ability */
-	uint64_t a40g_cr4                     : 1;  /**< 40GBASE-CR4 Ability */
-	uint64_t a40g_kr4                     : 1;  /**< 40GBASE-KR4 Ability */
-	uint64_t a10g_kr                      : 1;  /**< 10GBASE-KR Ability */
-	uint64_t a10g_kx4                     : 1;  /**< 10GBASE-KX4 Ability */
-	uint64_t a1g_kx                       : 1;  /**< 1000BASE-KX Ability */
-	uint64_t t                            : 5;  /**< Transmitted Nonce */
-	uint64_t np                           : 1;  /**< Next Page */
-	uint64_t ack                          : 1;  /**< Acknowledge */
-	uint64_t rf                           : 1;  /**< Remote Fault */
-	uint64_t xnp_able                     : 1;  /**< Extended Next Page ability. */
-	uint64_t asm_dir                      : 1;  /**< Asymmetric Pause */
-	uint64_t pause                        : 1;  /**< Pause Ability */
-	uint64_t e                            : 5;  /**< Echoed Nonce */
-	uint64_t s                            : 5;  /**< Selector */
+	uint64_t fec_req                      : 1;  /**< FEC requested. */
+	uint64_t fec_able                     : 1;  /**< FEC ability. */
+	uint64_t arsv                         : 19; /**< Technology ability. Reserved bits, should always be 0. */
+	uint64_t a100g_cr10                   : 1;  /**< 100GBASE-CR10 ability. */
+	uint64_t a40g_cr4                     : 1;  /**< 40GBASE-CR4 ability. */
+	uint64_t a40g_kr4                     : 1;  /**< 40GBASE-KR4 ability. */
+	uint64_t a10g_kr                      : 1;  /**< 10GBASE-KR ability. */
+	uint64_t a10g_kx4                     : 1;  /**< 10GBASE-KX4 ability. */
+	uint64_t a1g_kx                       : 1;  /**< 1000BASE-KX ability. */
+	uint64_t t                            : 5;  /**< Transmitted nonce. */
+	uint64_t np                           : 1;  /**< Next page. */
+	uint64_t ack                          : 1;  /**< Acknowledge. */
+	uint64_t rf                           : 1;  /**< Remote fault. */
+	uint64_t xnp_able                     : 1;  /**< Extended next page ability. */
+	uint64_t asm_dir                      : 1;  /**< Asymmetric PAUSE. */
+	uint64_t pause                        : 1;  /**< PAUSE ability. */
+	uint64_t e                            : 5;  /**< Echoed nonce. */
+	uint64_t s                            : 5;  /**< Selector. */
 #else
 	uint64_t s                            : 5;
 	uint64_t e                            : 5;
@@ -5959,23 +5903,21 @@ typedef union cvmx_bgxx_spux_an_lp_base cvmx_bgxx_spux_an_lp_base_t;
 /**
  * cvmx_bgx#_spu#_an_lp_xnp
  *
- * "Auto Negotiation Link Partner Extended Next Page (XNP) Ability:
- * The AN_LP_XNP register captures the contents of the latest Next Page
- * codeword received from the link partner during Auto-Negotiation, if any.
- * See section 802.3 section 73.7.7 for details."
+ * This register captures the contents of the latest next page code word received from the link
+ * partner during Auto-Negotiation, if any. See section 802.3 section 73.7.7 for details.
  */
 union cvmx_bgxx_spux_an_lp_xnp {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_an_lp_xnp_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t u                            : 32; /**< Unformatted Code field. */
-	uint64_t np                           : 1;  /**< Next Page. */
+	uint64_t u                            : 32; /**< Unformatted code field. */
+	uint64_t np                           : 1;  /**< Next page. */
 	uint64_t ack                          : 1;  /**< Acknowledge. */
-	uint64_t mp                           : 1;  /**< Message Page. */
+	uint64_t mp                           : 1;  /**< Message page. */
 	uint64_t ack2                         : 1;  /**< Acknowledge 2. */
 	uint64_t toggle                       : 1;  /**< Toggle. */
-	uint64_t m_u                          : 11; /**< Message/Unformatted Code field. */
+	uint64_t m_u                          : 11; /**< Message/unformatted code field. */
 #else
 	uint64_t m_u                          : 11;
 	uint64_t toggle                       : 1;
@@ -5993,53 +5935,39 @@ typedef union cvmx_bgxx_spux_an_lp_xnp cvmx_bgxx_spux_an_lp_xnp_t;
 
 /**
  * cvmx_bgx#_spu#_an_status
- *
- * Auto Negotiation Status
- *
  */
 union cvmx_bgxx_spux_an_status {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_an_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_10_63               : 54;
-	uint64_t prl_flt                      : 1;  /**< "Parallel Detection Fault:
-                                                         Always 0; SPU does not support parallel detection as part of the
-                                                         Auto-Negotiation protocol." */
+	uint64_t prl_flt                      : 1;  /**< Parallel detection fault. Always 0; SPU does not support parallel detection as part of the
+                                                         auto-negotiation protocol. */
 	uint64_t reserved_8_8                 : 1;
-	uint64_t xnp_stat                     : 1;  /**< Extended Next Page Status. */
-	uint64_t page_rx                      : 1;  /**< "Page Received:
-                                                         This bit is set when a New Page has been received and stored in the
-                                                         AN_LP_BASE or AN_LP_XNP register. Latching High bit; stays set until a
-                                                         1 is written by software, Auto-Negotiation is disabled or restarted,
-                                                         or Next page exchange is initiated.
-                                                         Note that in order to avoid read side effects, this is implemented as
-                                                         a write-1-to-clear bit, rather than latching high read-only as
-                                                         specified in 802.3." */
-	uint64_t an_complete                  : 1;  /**< "Auto-Negotiation Complete:
-                                                         This bit is set when the Auto-Negotiation process has been completed
-                                                         and the link is up and running using the negotiated Highest Common
-                                                         Denominator (HCD) technology.
-                                                           If AN is enabled (AN_EN=1 in register AN_CONTROL) and this bit is
-                                                         read as a zero, it indicates that the AN process has not been
-                                                         completed, and the contents of the AN_LP_BASE, AN_XNP_TX and
-                                                         AN_LP_XNP registers are as defined by the current state of the
-                                                         Auto-Negotiation protocol, or as written for manual configuration.
-                                                         This bit is always zero when AN is disabled (AN_EN=0)." */
-	uint64_t rmt_flt                      : 1;  /**< Remote Fault: Always 0 . */
-	uint64_t an_able                      : 1;  /**< Auto-Negotiation Ability: Always 1. */
-	uint64_t link_status                  : 1;  /**< Link Status:
-                                                         "This bit captures the state of the link_status variable as defined in
-                                                         802.3 section 73.9.1.  When set, indicates that a valid link has been
-                                                         established.  When clear, indicates that the link has been invalid
-                                                         after this bit was last set by software. Latching Low bit; stays clear
-                                                         until a 1 is written by software.
-                                                         Note that in order to avoid read side effects, this is implemented as
-                                                         a write-1-to-set bit, rather than latching low read-only as specified
-                                                         in 802.3." */
+	uint64_t xnp_stat                     : 1;  /**< Extended next-page status. */
+	uint64_t page_rx                      : 1;  /**< Page received. This latching-high bit is set when a new page has been received and stored
+                                                         in BGXn_SPUm_AN_LP_BASE or BGXn_SPUm_AN_LP_XNP; stays set until a 1 is written by
+                                                         software, Auto-Negotiation is disabled or restarted, or next page exchange is initiated.
+                                                         Note that in order to avoid read side effects, this is implemented as a write-1-to-clear
+                                                         bit, rather than latching high read-only as specified in 802.3. */
+	uint64_t an_complete                  : 1;  /**< Auto-Negotiation complete. Set when the Auto-Negotiation process has been completed and
+                                                         the link is up and running using the negotiated highest common denominator (HCD)
+                                                         technology. If AN is enabled (BGXn_SPUm_AN_CONTROL[AN_EN] = 1) and this bit is read as a
+                                                         zero, it indicates that the AN process has not been completed, and the contents of
+                                                         BGXn_SPUm_AN_LP_BASE, BGXn_SPUm_AN_XNP_TX, and BGXn_SPUm_AN_LP_XNP are as defined by the
+                                                         current state of the Auto-Negotiation protocol, or as written for manual configuration.
+                                                         This bit is always zero when AN is disabled (BGXn_SPUm_AN_CONTROL[AN_EN] = 0). */
+	uint64_t rmt_flt                      : 1;  /**< Remote fault: Always 0. */
+	uint64_t an_able                      : 1;  /**< Auto-Negotiation ability: Always 1. */
+	uint64_t link_status                  : 1;  /**< Link status. This bit captures the state of the link_status variable as defined in 802.3
+                                                         section 73.9.1. When set, indicates that a valid link has been established. When clear,
+                                                         indicates that the link has been invalid after this bit was last set by software. Latching
+                                                         low bit; stays clear until a 1 is written by software. Note that in order to avoid read
+                                                         side effects, this is implemented as a write-1-to-set bit, rather than latching low read-
+                                                         only as specified in 802.3. */
 	uint64_t reserved_1_1                 : 1;
-	uint64_t lp_an_able                   : 1;  /**< "Link Partner AN Ability:
-                                                         Set to indicate that the link partner is able to participate in the
-                                                         Auto-Negotiation function, and cleared otherwise." */
+	uint64_t lp_an_able                   : 1;  /**< Link partner Auto-Negotiation ability. Set to indicate that the link partner is able to
+                                                         participate in the Auto-Negotiation function, and cleared otherwise. */
 #else
 	uint64_t lp_an_able                   : 1;
 	uint64_t reserved_1_1                 : 1;
@@ -6061,39 +5989,32 @@ typedef union cvmx_bgxx_spux_an_status cvmx_bgxx_spux_an_status_t;
 /**
  * cvmx_bgx#_spu#_an_xnp_tx
  *
- * "Auto Negotiation Extended Next Page (XNP) Transmit:
- * Software programs the AN_XNP_TX register with the contents of the AN
- * Message next page or Unformatted next page link code word to be
- * transmitted during Auto-Negotiation. Next page exchange occurs after the
- * base link codewords have been exchanged if either end of the link segment
- * sets the NP bit to 1, indicating that it has at least one next page to
- * send. Once initiated, Next page exchange continues until both end of the
- * link segment set their NP bits to 0. See section 802.3 section 73.7.7 for
- * details."
+ * Software programs this register with the contents of the AN message next page or unformatted
+ * next page link code word to be transmitted during auto-negotiation. Next page exchange occurs
+ * after the base link code words have been exchanged if either end of the link segment sets the
+ * NP bit to 1, indicating that it has at least one next page to send. Once initiated, next page
+ * exchange continues until both end of the link segment set their NP bits to 0. See section
+ * 802.3 section 73.7.7 for details.
  */
 union cvmx_bgxx_spux_an_xnp_tx {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_an_xnp_tx_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t u                            : 32; /**< "Unformatted Code field: When the MP bit is set, this field contains
-                                                         the 32-bit Unformatted Code field of the Message next page. When MP is
-                                                         clear, this field contains the upper 32 bits of the 43-bit Unformatted
-                                                         Code field of the Unformatted next page." */
-	uint64_t np                           : 1;  /**< Next Page. */
+	uint64_t u                            : 32; /**< Unformatted code field. When the MP bit is set, this field contains the 32-bit unformatted
+                                                         code field of the message next page. When MP is clear, this field contains the upper 32
+                                                         bits of the 43-bit unformatted code field of the unformatted next page. */
+	uint64_t np                           : 1;  /**< Next page. */
 	uint64_t ack                          : 1;  /**< Ack: Always 0 in this register. */
-	uint64_t mp                           : 1;  /**< "Message Page: Set to indicate that this register contains a Message
-                                                         next page. Clear to indicate that the register contains an Unformatted
-                                                         next page." */
-	uint64_t ack2                         : 1;  /**< "Acknowledge 2: Indicates that the receiver is able to act on the
-                                                         information (or perform the task) defined in the message." */
-	uint64_t toggle                       : 1;  /**< "Used to ensure proper synchronization between the local device and
-                                                         the link partner. This bit takes the opposite value of the Toggle bit
-                                                         in the previously exchanged link codeword." */
-	uint64_t m_u                          : 11; /**< "Message/Unformatted Code field: When the MP bit is set, this field
-                                                         contains the Message Code field (M) of the Message next page. When MP
-                                                         is clear, this field contains the lower 11 bits of the 43-bit
-                                                         Unformatted Code field of the Unformatted next page." */
+	uint64_t mp                           : 1;  /**< Message page. Set to indicate that this register contains a message next page. Clear to
+                                                         indicate that the register contains anunformatted next page. */
+	uint64_t ack2                         : 1;  /**< Acknowledge 2. Indicates that the receiver is able to act on the information (or perform
+                                                         the task) defined in the message. */
+	uint64_t toggle                       : 1;  /**< This bit is ignored by hardware. The value of the TOGGLE bit in
+                                                         transmitted next pages is automatically generated by hardware. */
+	uint64_t m_u                          : 11; /**< Message/Unformatted code field: When the MP bit is set, this field contains the message
+                                                         code field (M) of the message next page. When MP is clear, this field contains the lower
+                                                         11 bits of the 43-bit unformatted code field of the unformatted next page. */
 #else
 	uint64_t m_u                          : 11;
 	uint64_t toggle                       : 1;
@@ -6112,29 +6033,26 @@ typedef union cvmx_bgxx_spux_an_xnp_tx cvmx_bgxx_spux_an_xnp_tx_t;
 /**
  * cvmx_bgx#_spu#_br_algn_status
  *
- * "Multi-lane BASE-R PCS alignment status:
- * This register implements the 802.3 Multi-lane BASE-R PCS alignment status 1-4
- * registers (3.50-3.53). The register is only valid when the logical PCS type is
- * 40GBASE-R (LMAC_TYPE = 40G_R in the associated BGX_CMR_CONFIG register in the
- * CMR sub-block), and always returns 0 for all other LPCS types. 802.3 bits that are
- * not applicable to 40GBASE-R (i.e. status bits for PCS lanes 19-4) are not
- * implemented and marked as reserved. PCS lanes 3-0 are valid and are mapped to
- * physical serdes lanes based on the programming of the LANE_TO_SDS field in
- * BGX_CMR_CONFIG."
+ * This register implements the Std 802.3 multilane BASE-R PCS alignment status 1-4 registers
+ * (3.50-3.53). It is valid only when the LPCS type is 40GBASE-R (BGXn_CMRm_CONFIG[LMAC_TYPE] =
+ * 0x4), and always returns 0x0 for all other LPCS types. Std 802.3 bits that are not applicable
+ * to 40GBASE-R (e.g. status bits for PCS lanes 19-4) are not implemented and marked as reserved.
+ * PCS lanes 3-0 are valid and are mapped to physical SerDes lanes based on the programming of
+ * BGXn_CMRm_CONFIG[[LANE_TO_SDS].
  */
 union cvmx_bgxx_spux_br_algn_status {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_algn_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_36_63               : 28;
-	uint64_t marker_lock                  : 4;  /**< Marker locked status for PCS lanes 3-0 */
+	uint64_t marker_lock                  : 4;  /**< Marker-locked status for PCS lanes 3-0.
+                                                         1 = locked, 0 = not locked */
 	uint64_t reserved_13_31               : 19;
-	uint64_t alignd                       : 1;  /**< All lanes locked & aligned:
-                                                         This bit returns 1 when the logical PCS has locked and aligned all
-                                                         associated receive lanes, and returns 0 otherwise. For all other PCS
-                                                         types, this bit always returns 0. */
+	uint64_t alignd                       : 1;  /**< All lanes are locked and aligned. This bit returns 1 when the logical PCS has locked and
+                                                         aligned all associated receive lanes; returns 0 otherwise. For all other PCS types, this
+                                                         bit always returns 0. */
 	uint64_t reserved_4_11                : 8;
-	uint64_t block_lock                   : 4;  /**< Block lock status for PCS lanes 3-0 */
+	uint64_t block_lock                   : 4;  /**< Block-lock status for PCS lanes 3-0: 1 = locked, 0 = not locked */
 #else
 	uint64_t block_lock                   : 4;
 	uint64_t reserved_4_11                : 8;
@@ -6151,34 +6069,26 @@ typedef union cvmx_bgxx_spux_br_algn_status cvmx_bgxx_spux_br_algn_status_t;
 /**
  * cvmx_bgx#_spu#_br_bip_err_cnt
  *
- * "40GBASE-R Bit Interleaved Parity error counters
- * This register implements the 802.3 BIP error counter registers for PCS
- * lanes 0-3 (3.200-3.203). The register is only valid when the logical PCS
- * type is 40GBASE-R (LMAC_TYPE = 40G_R in the associated BGX_CMR_CONFIG
- * register in the CMR sub-block), and always returns 0 for all other LPCS
- * types. The counters are indexed by the RX PCS lane number based on the
- * Alignment Marker detected on each lane and captured in the BR_LANE_MAP
- * register. Each counter counts the BIP errors for its PCS lane, and is
- * held at all ones in case of overflow. The counters are reset to all
- * zeros when this register is read by software. The reset operation takes
- * precedence over the increment operation; if the register is read on the
- * same clock cycle an increment operation, the counter will be reset to
- * all zeros and the increment operation will be lost.  The counters are
- * writable for test purposes, rather than read-only as specified in
- * 802.3."
+ * This register implements the Std 802.3 BIP error-counter registers for PCS lanes 0-3
+ * (3.200-3.203). It is valid only when the LPCS type is 40GBASE-R (BGXn_CMRm_CONFIG[LMAC_TYPE] =
+ * 0x4), and always returns 0x0 for all other LPCS types. The counters are indexed by the RX PCS
+ * lane number based on the Alignment Marker detected on each lane and captured in
+ * BGX(0..5)_SPU(0..3)_BR_LANE_MAP. Each counter counts the BIP errors for its PCS lane, and is
+ * held at all ones in case of overflow. The counters are reset to all 0s when this register is
+ * read by software.
+ * The reset operation takes precedence over the increment operation; if the register is read on
+ * the same clock cycle as an increment operation, the counter is reset to all 0s and the
+ * increment operation is lost. The counters are writable for test purposes, rather than read-
+ * only as specified in Std 802.3.
  */
 union cvmx_bgxx_spux_br_bip_err_cnt {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_bip_err_cnt_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t bip_err_cnt_ln3              : 16; /**< "BIP error counter for lane on which PCS lane 3 markers are
-                                                         received." */
-	uint64_t bip_err_cnt_ln2              : 16; /**< "BIP error counter for lane on which PCS lane 2 markers are
-                                                         received." */
-	uint64_t bip_err_cnt_ln1              : 16; /**< "BIP error counter for lane on which PCS lane 1 markers are
-                                                         received." */
-	uint64_t bip_err_cnt_ln0              : 16; /**< "BIP error counter for lane on which PCS lane 0 markers are
-                                                         received." */
+	uint64_t bip_err_cnt_ln3              : 16; /**< BIP error counter for lane on which PCS lane 3 markers are received. */
+	uint64_t bip_err_cnt_ln2              : 16; /**< BIP error counter for lane on which PCS lane 2 markers are received. */
+	uint64_t bip_err_cnt_ln1              : 16; /**< BIP error counter for lane on which PCS lane 1 markers are received. */
+	uint64_t bip_err_cnt_ln0              : 16; /**< BIP error counter for lane on which PCS lane 0 markers are received. */
 #else
 	uint64_t bip_err_cnt_ln0              : 16;
 	uint64_t bip_err_cnt_ln1              : 16;
@@ -6193,25 +6103,18 @@ typedef union cvmx_bgxx_spux_br_bip_err_cnt cvmx_bgxx_spux_br_bip_err_cnt_t;
 /**
  * cvmx_bgx#_spu#_br_lane_map
  *
- * "40GBASE-R PCS lane mapping registers:
- * This register implements the 802.3 lane 0-3 mapping registers
- * (3.400-3.403).  The register is only valid when the logical PCS type is
- * 40GBASE-R (LMAC_TYPE = 40G_R in the associated BGX_CMR_CONFIG register
- * in the CMR sub-block), and always returns 0 for all other LPCS types.
- * The LNx_MAPPING field for each programmed PCS lane (called 'service
- * interface' in 802.3ba-2010) is valid when that lane has achieved
- * alignment marker lock on the receive side (i.e. the associated
- * MARKER_LOCK bit is set in BR_ALGN_STATUS), and is invalid otherwise.
- * When valid, it returns the actual detected receive PCS lane number based
- * on the received alignment marker contents received on that service
- * interface. The mapping is flexible because 802.3 allows multi-lane
- * BASE-R receive lanes to be re-ordered.
- * Note that for the transmit side, each PCS lane is mapped to a physical
- * serdes lane based on the programming of the LANE_TO_SDS field in
- * BGX_CMR_CONFIG.
- * For the receive side, LANE_TO_SDS specifies the service interface to
- * physical serdes lane mapping, and this register specifies the PCS lane
- * to service interface mapping."
+ * This register implements the Std 802.3 lane 0-3 mapping registers (3.400-3.403). It is valid
+ * only when the LPCS type is 40GBASE-R (BGXn_CMRm_CONFIG[LMAC_TYPE] = 0x4), and always returns
+ * 0x0 for all other LPCS types. The LNx_MAPPING field for each programmed PCS lane (called
+ * service interface in 802.3ba-2010) is valid when that lane has achieved alignment marker lock
+ * on the receive side (i.e. the associated BGXn_SPUm_BR_ALGN_STATUS[MARKER_LOCK] = 1), and is
+ * invalid otherwise. When valid, it returns the actual detected receive PCS lane number based on
+ * the received alignment marker contents received on that service interface.
+ * The mapping is flexible because Std 802.3 allows multilane BASE-R receive lanes to be re-
+ * ordered. Note that for the transmit side, each PCS lane is mapped to a physical SerDes lane
+ * based on the programming of BGXn_CMRm_CONFIG[LANE_TO_SDS]. For the receive side,
+ * BGXn_CMRm_CONFIG[LANE_TO_SDS] specifies the service interface to physical SerDes lane mapping,
+ * and this register specifies the PCS lane to service interface mapping.
  */
 union cvmx_bgxx_spux_br_lane_map {
 	uint64_t u64;
@@ -6242,20 +6145,15 @@ typedef union cvmx_bgxx_spux_br_lane_map cvmx_bgxx_spux_br_lane_map_t;
 
 /**
  * cvmx_bgx#_spu#_br_pmd_control
- *
- * BASE-R PMD control
- *
  */
 union cvmx_bgxx_spux_br_pmd_control {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_pmd_control_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_2_63                : 62;
-	uint64_t train_en                     : 1;  /**< BASE-R Training Enable */
-	uint64_t train_restart                : 1;  /**< "BASE-R Training Restart:
-                                                         Writing a 1 to this bit restarts the training process if the
-                                                         TRAIN_EN bit in this register is also set. This is a self-clearing
-                                                         bit." */
+	uint64_t train_en                     : 1;  /**< BASE-R training enable */
+	uint64_t train_restart                : 1;  /**< BASE-R training restart. Writing a 1 to this bit restarts the training process if the
+                                                         TRAIN_EN bit in this register is also set. This is a self-clearing bit. */
 #else
 	uint64_t train_restart                : 1;
 	uint64_t train_en                     : 1;
@@ -6269,35 +6167,30 @@ typedef union cvmx_bgxx_spux_br_pmd_control cvmx_bgxx_spux_br_pmd_control_t;
 /**
  * cvmx_bgx#_spu#_br_pmd_ld_cup
  *
- * "BASE-R PMD local device coefficient update:
- * This register implements 802.3 MDIO register 1.153 for 10GBASE-R (when
- * LMAC_TYPE = 10G_R in the associated BGX_CMR_CONFIG register) and MDIO
- * registers 1.1300-1.1303 for 40GBASE-R (when LMAC_TYPE = 40G_R). It is
- * automatically cleared at the start of training. When link training is in
- * progress, each field reflects the contents of the coefficient update
- * field in the associated lane's outgoing training frame.
- * The fields in this register are read/write even though they are
- * specified as read-only in 802.3. If DBG_CONTROL[BR_PMD_TRAIN_SOFT_EN] is
- * set, then this register must be updated by software during link training
- * and hardware updates are disabled. If DBG_CONTROL[BR_PMD_TRAIN_SOFT_EN]
- * is clear, this register is automatically updated by hardware, and it
- * should not be written by software.
- * The lane fields in this register are indexed by logical PCS lane ID. The
- * lane 0 field (LN0_*) is valid for both 10GBASE-R and 40GBASE-R . The
- * remaining fields (LN1_*, LN2_*, LN3_*) are only valid for 40GBASE-R."
+ * This register implements 802.3 MDIO register 1.153 for 10GBASE-R (when LMAC_TYPE = 10G_R in
+ * the associated BGX_CMR_CONFIG register) and MDIO registers 1.1300-1.1303 for 40GBASE-R (when
+ * LMAC_TYPE = 40G_R). It is automatically cleared at the start of training. When link training
+ * is in progress, each field reflects the contents of the coefficient update field in the
+ * associated lane's outgoing training frame. The fields in this register are read/write even
+ * though they are specified as read-only in 802.3. If DBG_CONTROL[BR_PMD_TRAIN_SOFT_EN] is set,
+ * then this register must be updated by software during link training and hardware updates are
+ * disabled. If DBG_CONTROL[BR_PMD_TRAIN_SOFT_EN] is clear, this register is automatically
+ * updated by hardware, and it should not be written by software. The lane fields in this
+ * register are indexed by logical PCS lane ID. The lane 0 field (LN0_*) is valid for both
+ * 10GBASE-R and 40GBASE-R. The remaining fields (LN1_*, LN2_*, LN3_*) are only valid for
+ * 40GBASE-R.
  */
 union cvmx_bgxx_spux_br_pmd_ld_cup {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_pmd_ld_cup_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t ln3_cup                      : 16; /**< "PCS lane 3 Coefficient Update: Format defined by
-                                                         BGX_SPU_BR_TRAIN_CUP_S. Not valid for 10GBASE-R" */
-	uint64_t ln2_cup                      : 16; /**< "PCS lane 2 Coefficient Update: Format defined by
-                                                         BGX_SPU_BR_TRAIN_CUP_S. Not valid for 10GBASE-R" */
-	uint64_t ln1_cup                      : 16; /**< "PCS lane 1 Coefficient Update: Format defined by
-                                                         BGX_SPU_BR_TRAIN_CUP_S. Not valid for 10GBASE-R" */
-	uint64_t ln0_cup                      : 16; /**< "PCS lane 0 Coefficient Update: Format defined by
-                                                         BGX_SPU_BR_TRAIN_CUP_S." */
+	uint64_t ln3_cup                      : 16; /**< PCS lane 3 coefficient update: format defined by BGX_SPU_BR_TRAIN_CUP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln2_cup                      : 16; /**< PCS lane 2 coefficient update: format defined by BGX_SPU_BR_TRAIN_CUP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln1_cup                      : 16; /**< PCS lane 1 coefficient update: format defined by BGX_SPU_BR_TRAIN_CUP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln0_cup                      : 16; /**< PCS lane 0 coefficient update: format defined by BGX_SPU_BR_TRAIN_CUP_S. */
 #else
 	uint64_t ln0_cup                      : 16;
 	uint64_t ln1_cup                      : 16;
@@ -6312,34 +6205,29 @@ typedef union cvmx_bgxx_spux_br_pmd_ld_cup cvmx_bgxx_spux_br_pmd_ld_cup_t;
 /**
  * cvmx_bgx#_spu#_br_pmd_ld_rep
  *
- * "BASE-R PMD local device status report:
- * This register implements 802.3 MDIO register 1.154 for 10GBASE-R (when
- * LMAC_TYPE = 10G_R in the associated BGX_CMR_CONFIG register) and MDIO
- * registers 1.1400-1.1403 for 40GBASE-R (when LMAC_TYPE = 40G_R). It is
- * automatically cleared at the start of training. Each field reflects the
- * contents of the status report field in the associated lane's outgoing
- * training frame.
- * The fields in this register are read/write even though they are
- * specified as read-only in 802.3. If DBG_CONTROL[BR_PMD_TRAIN_SOFT_EN] is
- * set, then this register must be updated by software during link training
- * and hardware updates are disabled. If DBG_CONTROL[BR_PMD_TRAIN_SOFT_EN]
- * is clear, this register is automatically updated by hardware, and it
- * should not be written by software.
- * The lane fields in this register are indexed by logical PCS lane ID. The
- * lane 0 field (LN0_*) is valid for both 10GBASE-R and 40GBASE-R . The
- * remaining fields (LN1_*, LN2_*, LN3_*) are only valid for 40GBASE-R."
+ * This register implements 802.3 MDIO register 1.154 for 10GBASE-R (when LMAC_TYPE = 10G_R in
+ * the associated BGX_CMR_CONFIG register) and MDIO registers 1.1400-1.1403 for 40GBASE-R (when
+ * LMAC_TYPE = 40G_R). It is automatically cleared at the start of training. Each field reflects
+ * the contents of the status report field in the associated lane's outgoing training frame. The
+ * fields in this register are read/write even though they are specified as read-only in 802.3.
+ * If DBG_CONTROL[BR_PMD_TRAIN_SOFT_EN] is set, then this register must be updated by software
+ * during link training and hardware updates are disabled. If DBG_CONTROL[BR_PMD_TRAIN_SOFT_EN]
+ * is clear, this register is automatically updated by hardware, and it should not be written by
+ * software. The lane fields in this register are indexed by logical PCS lane ID. The lane 0
+ * field (LN0_*) is valid for both 10GBASE-R and 40GBASE-R. The remaining fields (LN1_*, LN2_*,
+ * LN3_*) are only valid for 40GBASE-R.
  */
 union cvmx_bgxx_spux_br_pmd_ld_rep {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_pmd_ld_rep_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t ln3_rep                      : 16; /**< "PCS lane 3 Status Report: Format defined by BGX_SPU_BR_TRAIN_REP_S. Not
-                                                         valid for 10GBASE-R" */
-	uint64_t ln2_rep                      : 16; /**< "PCS lane 2 Status Report: Format defined by BGX_SPU_BR_TRAIN_REP_S. Not
-                                                         valid for 10GBASE-R" */
-	uint64_t ln1_rep                      : 16; /**< "PCS lane 1 Status Report: Format defined by BGX_SPU_BR_TRAIN_REP_S. Not
-                                                         valid for 10GBASE-R" */
-	uint64_t ln0_rep                      : 16; /**< "PCS lane 0 Status Report: Format defined by BGX_SPU_BR_TRAIN_REP_S." */
+	uint64_t ln3_rep                      : 16; /**< PCS lane 3 status report: format defined by BGX_SPU_BR_TRAIN_REP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln2_rep                      : 16; /**< PCS lane 2 status report: format defined by BGX_SPU_BR_TRAIN_REP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln1_rep                      : 16; /**< PCS lane 1 status report: format defined by BGX_SPU_BR_TRAIN_REP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln0_rep                      : 16; /**< PCS lane 0 status report: format defined by BGX_SPU_BR_TRAIN_REP_S. */
 #else
 	uint64_t ln0_rep                      : 16;
 	uint64_t ln1_rep                      : 16;
@@ -6354,30 +6242,26 @@ typedef union cvmx_bgxx_spux_br_pmd_ld_rep cvmx_bgxx_spux_br_pmd_ld_rep_t;
 /**
  * cvmx_bgx#_spu#_br_pmd_lp_cup
  *
- * "BASE-R PMD link partner coefficient update:
- * This register implements 802.3 MDIO register 1.152 for 10GBASE-R (when
- * LMAC_TYPE = 10G_R in the associated BGX_CMR_CONFIG register) and MDIO
- * registers 1.1100-1.1103 for 40GBASE-R (when LMAC_TYPE = 40G_R). It is
- * automatically cleared at the start of training. Each field reflects the
- * contents of the coefficient update field in the lane's most recently
- * received training frame. This register should not be written when link
- * training is enabled, i.e. when TRAIN_EN is set BR_PMD_CONTROL.
- * The lane fields in this register are indexed by logical PCS lane ID. The
- * lane 0 field (LN0_*) is valid for both 10GBASE-R and 40GBASE-R . The
- * remaining fields (LN1_*, LN2_*, LN3_*) are only valid for 40GBASE-R."
+ * This register implements 802.3 MDIO register 1.152 for 10GBASE-R (when LMAC_TYPE = 10G_R in
+ * the associated BGX_CMR_CONFIG register) and MDIO registers 1.1100-1.1103 for 40GBASE-R (when
+ * LMAC_TYPE = 40G_R). It is automatically cleared at the start of training. Each field reflects
+ * the contents of the coefficient update field in the lane's most recently received training
+ * frame. This register should not be written when link training is enabled, i.e. when TRAIN_EN
+ * is set BR_PMD_CONTROL. The lane fields in this register are indexed by logical PCS lane ID.
+ * The lane 0 field (LN0_*) is valid for both 10GBASE-R and 40GBASE-R. The remaining fields
+ * (LN1_*, LN2_*, LN3_*) are only valid for 40GBASE-R.
  */
 union cvmx_bgxx_spux_br_pmd_lp_cup {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_pmd_lp_cup_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t ln3_cup                      : 16; /**< "PCS lane 3 Coefficient Update: Format defined by
-                                                         BGX_SPU_BR_TRAIN_CUP_S. Not valid for 10GBASE-R" */
-	uint64_t ln2_cup                      : 16; /**< "PCS lane 2 Coefficient Update: Format defined by
-                                                         BGX_SPU_BR_TRAIN_CUP_S. Not valid for 10GBASE-R" */
-	uint64_t ln1_cup                      : 16; /**< "PCS lane 1 Coefficient Update: Format defined by
-                                                         BGX_SPU_BR_TRAIN_CUP_S. Not valid for 10GBASE-R" */
-	uint64_t ln0_cup                      : 16; /**< "PCS lane 0 Coefficient Update: Format defined by
-                                                         BGX_SPU_BR_TRAIN_CUP_S." */
+	uint64_t ln3_cup                      : 16; /**< PCS lane 3 coefficient update: format defined by BGX_SPU_BR_TRAIN_CUP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln2_cup                      : 16; /**< PCS lane 2 coefficient update: format defined by BGX_SPU_BR_TRAIN_CUP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln1_cup                      : 16; /**< PCS lane 1 coefficient update: format defined by BGX_SPU_BR_TRAIN_CUP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln0_cup                      : 16; /**< PCS lane 0 coefficient update: format defined by BGX_SPU_BR_TRAIN_CUP_S. */
 #else
 	uint64_t ln0_cup                      : 16;
 	uint64_t ln1_cup                      : 16;
@@ -6392,28 +6276,25 @@ typedef union cvmx_bgxx_spux_br_pmd_lp_cup cvmx_bgxx_spux_br_pmd_lp_cup_t;
 /**
  * cvmx_bgx#_spu#_br_pmd_lp_rep
  *
- * "BASE-R PMD link partner status report:
- * This register implements 802.3 MDIO register 1.153 for 10GBASE-R (when
- * LMAC_TYPE = 10G_R in the associated BGX_CMR_CONFIG register) and MDIO
- * registers 1.1200-1.1203 for 40GBASE-R (when LMAC_TYPE = 40G_R). It is
- * automatically cleared at the start of training. Each field reflects the
- * contents of the status report field in the associated lane's most
- * recently received training frame.
- * The lane fields in this register are indexed by logical PCS lane ID. The
- * lane 0 field (LN0_*) is valid for both 10GBASE-R and 40GBASE-R . The
- * remaining fields (LN1_*, LN2_*, LN3_*) are only valid for 40GBASE-R."
+ * This register implements 802.3 MDIO register 1.153 for 10GBASE-R (when LMAC_TYPE = 10G_R in
+ * the associated BGX_CMR_CONFIG register) and MDIO registers 1.1200-1.1203 for 40GBASE-R (when
+ * LMAC_TYPE = 40G_R). It is automatically cleared at the start of training. Each field reflects
+ * the contents of the status report field in the associated lane's most recently received
+ * training frame. The lane fields in this register are indexed by logical PCS lane ID. The lane
+ * 0 field (LN0_*) is valid for both 10GBASE-R and 40GBASE-R. The remaining fields (LN1_*, LN2_*,
+ * LN3_*) are only valid for 40GBASE-R.
  */
 union cvmx_bgxx_spux_br_pmd_lp_rep {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_pmd_lp_rep_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t ln3_rep                      : 16; /**< "PCS lane 3 Status Report: Format defined by BGX_SPU_BR_TRAIN_REP_S. Not
-                                                         valid for 10GBASE-R" */
-	uint64_t ln2_rep                      : 16; /**< "PCS lane 2 Status Report: Format defined by BGX_SPU_BR_TRAIN_REP_S. Not
-                                                         valid for 10GBASE-R" */
-	uint64_t ln1_rep                      : 16; /**< "PCS lane 1 Status Report: Format defined by BGX_SPU_BR_TRAIN_REP_S. Not
-                                                         valid for 10GBASE-R" */
-	uint64_t ln0_rep                      : 16; /**< "PCS lane 0 Status Report: Format defined by BGX_SPU_BR_TRAIN_REP_S." */
+	uint64_t ln3_rep                      : 16; /**< PCS lane 3 status report: format defined by BGX_SPU_BR_TRAIN_REP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln2_rep                      : 16; /**< PCS lane 2 status report: format defined by BGX_SPU_BR_TRAIN_REP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln1_rep                      : 16; /**< PCS lane 1 status report: format defined by BGX_SPU_BR_TRAIN_REP_S. Not valid for
+                                                         10GBASE-R. */
+	uint64_t ln0_rep                      : 16; /**< PCS lane 0 status report: format defined by BGX_SPU_BR_TRAIN_REP_S. */
 #else
 	uint64_t ln0_rep                      : 16;
 	uint64_t ln1_rep                      : 16;
@@ -6428,24 +6309,22 @@ typedef union cvmx_bgxx_spux_br_pmd_lp_rep cvmx_bgxx_spux_br_pmd_lp_rep_t;
 /**
  * cvmx_bgx#_spu#_br_pmd_status
  *
- * "BASE-R PMD status:
- * The lane fields in this register are indexed by logical PCS lane ID. The
- * lane 0 field (LN0_*) is valid for both 10GBASE-R and 40GBASE-R . The
- * remaining fields (LN1_*, LN2_*, LN3_*) are only valid for 40GBASE-R."
+ * The lane fields in this register are indexed by logical PCS lane ID. The lane 0 field (LN0_*)
+ * is valid for both 10GBASE-R and 40GBASE-R. The remaining fields (LN1_*, LN2_*, LN3_*) are only
+ * valid for 40GBASE-R.
  */
 union cvmx_bgxx_spux_br_pmd_status {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_pmd_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t ln3_train_status             : 4;  /**< "PCS lane 3 link training status. Format defined by
-                                                         BGX_SPU_BR_LANE_TRAIN_STATUS_S. Not valid for 10GBASE-R" */
-	uint64_t ln2_train_status             : 4;  /**< "PCS lane 2 link training status. Format defined by
-                                                         BGX_SPU_BR_LANE_TRAIN_STATUS_S. Not valid for 10GBASE-R" */
-	uint64_t ln1_train_status             : 4;  /**< "PCS lane 1 link training status. Format defined by
-                                                         BGX_SPU_BR_LANE_TRAIN_STATUS_S. Not valid for 10GBASE-R" */
-	uint64_t ln0_train_status             : 4;  /**< "PCS lane 0 link training status. Format defined by
-                                                         BGX_SPU_BR_LANE_TRAIN_STATUS_S." */
+	uint64_t ln3_train_status             : 4;  /**< PCS lane 3 link training status. Format defined by BGX_SPU_BR_LANE_TRAIN_STATUS_S. Not
+                                                         valid for 10GBASE-R. */
+	uint64_t ln2_train_status             : 4;  /**< PCS lane 2 link training status. Format defined by BGX_SPU_BR_LANE_TRAIN_STATUS_S. Not
+                                                         valid for 10GBASE-R. */
+	uint64_t ln1_train_status             : 4;  /**< PCS lane 1 link training status. Format defined by BGX_SPU_BR_LANE_TRAIN_STATUS_S. Not
+                                                         valid for 10GBASE-R. */
+	uint64_t ln0_train_status             : 4;  /**< PCS lane 0 link training status. Format defined by BGX_SPU_BR_LANE_TRAIN_STATUS_S. */
 #else
 	uint64_t ln0_train_status             : 4;
 	uint64_t ln1_train_status             : 4;
@@ -6460,37 +6339,33 @@ typedef union cvmx_bgxx_spux_br_pmd_status cvmx_bgxx_spux_br_pmd_status_t;
 
 /**
  * cvmx_bgx#_spu#_br_status1
- *
- * BASE-R PCS status 1
- *
  */
 union cvmx_bgxx_spux_br_status1 {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_status1_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_13_63               : 51;
-	uint64_t rcv_lnk                      : 1;  /**< BASE-R receive link status
-                                                         1 = BASE-R PCS receive link up 0 = BASE-R PCS receive link down.
-                                                         This bit is a reflection of the PCS_status variable defined in 802.3
-                                                         sections 49.2.14.1 and 82.3.1. */
+	uint64_t rcv_lnk                      : 1;  /**< BASE-R receive link status.
+                                                         1 = BASE-R PCS receive-link up
+                                                         0 = BASE-R PCS receive-link down.
+                                                         This bit is a reflection of the PCS_status variable defined in Std 802.3 sections
+                                                         49.2.14.1 and 82.3.1. */
 	uint64_t reserved_4_11                : 8;
-	uint64_t prbs9                        : 1;  /**< 10GBASE-R PRBS9 pattern testing ability. Always 0; PRBS9 pattern
-                                                         testing not supported. */
-	uint64_t prbs31                       : 1;  /**< 10GBASE-R PRBS31 pattern testing ability. Always 0; PRBS31 pattern
-                                                         testing not supported. */
-	uint64_t hi_ber                       : 1;  /**< BASE-R PCS high Bit Error Rate
-                                                         Returns 1 to indicate that the 64B/66B receiver is detecting a BER of
-                                                         >= 10.4, and returns 0 otherwise. This bit is a direct reflection of
-                                                         the state of the hi_ber variable in the 64B/66B state diagram and is
-                                                         defined in 802.3 sections 49.2.13.2.2 and 82.2.18.2.2. */
-	uint64_t blk_lock                     : 1;  /**< "BASE-R PCS block lock
-                                                         Returns 1 to indicate that the 64B/66B receiver for BASE-R has
-                                                         achieved block lock, and returns 0 otherwise. This bit is a direct
-                                                         reflection of the state of the block_lock variable in the 64B/66B
-                                                         state diagram and is defined in 802.3 sections 49.2.13.2.2 and
-                                                         82.2.18.2.2.  For a multi-lane logical PCS (i.e. 40GBASE-R), this bit
-                                                         indicates that the receiver has both block lock and alignment for all
-                                                         lanes and is identical to the ALIGND bit in BR_ALGN_STATUS." */
+	uint64_t prbs9                        : 1;  /**< 10GBASE-R PRBS9 pattern testing ability. Always 0; PRBS9 pattern testing is not supported. */
+	uint64_t prbs31                       : 1;  /**< 10GBASE-R PRBS31 pattern testing ability. Always 0; PRBS31 pattern testing is not supported. */
+	uint64_t hi_ber                       : 1;  /**< BASE-R PCS high bit-error rate.
+                                                         1 = 64B/66B receiver is detecting a bit-error rate of >= 10.4
+                                                         0 = 64B/66B receiver is detecting a bit-error rate of < 10.4
+                                                         This bit is a direct reflection of the state of the HI_BER variable in the 64B/66B state
+                                                         diagram and is defined in Std 802.3 sections 49.2.13.2.2 and 82.2.18.2.2. */
+	uint64_t blk_lock                     : 1;  /**< BASE-R PCS block lock.
+                                                         1 = 64B/66B receiver for BASE-R has block lock
+                                                         0 = No block lock
+                                                         This bit is a direct reflection of the state of the BLOCK_LOCK variable in the 64B/66B
+                                                         state diagram and is defined in Std 802.3 sections 49.2.13.2.2 and 82.2.18.2.2.
+                                                         For a multilane logical PCS (i.e. 40GBASE-R), this bit indicates that the receiver has
+                                                         both block lock and alignment for all lanes and is identical to
+                                                         BGXn_SPUm_BR_ALGN_STATUS[ALIGND]. */
 #else
 	uint64_t blk_lock                     : 1;
 	uint64_t hi_ber                       : 1;
@@ -6508,61 +6383,54 @@ typedef union cvmx_bgxx_spux_br_status1 cvmx_bgxx_spux_br_status1_t;
 /**
  * cvmx_bgx#_spu#_br_status2
  *
- * "BASE-R PCS status 2
- * This register implements a combination of the following 802.3 registers: BASE-R PCS
- * status 2 (MDIO address 3.33), BASE-R BER high order counter (MDIO address 3.44),
- * and Errored blocks high order counter (MDIO address 3.45). The relative locations
- * of some fields have been moved from 802.3 in order to make the register layout more
- * software friendly: the BER counter high order and low order bits from 3.44 and
- * 3.33 have been combined into the contiguous 22-bit BER_CNT field; likewise, the
- * errored blocks counter high order and low order bits from 3.45 have been combined
- * into the contiguous 22-bit ERR_BLKS field."
+ * This register implements a combination of the following Std 802.3 registers:
+ * BASE-R PCS status 2 (MDIO address 3.33)
+ * BASE-R BER high-order counter (MDIO address 3.44)
+ * Errored-blocks high-order counter (MDIO address 3.45).
+ * Note that the relative locations of some fields have been moved from Std 802.3 in order to
+ * make the register layout more software friendly: the BER counter high-order and low-order bits
+ * from sections 3.44 and 3.33 have been combined into the contiguous, 22-bit BER_CNT field;
+ * likewise, the errored-blocks counter high-order and low-order bits from section 3.45 have been
+ * combined into the contiguous, 22-bit ERR_BLKS field.
  */
 union cvmx_bgxx_spux_br_status2 {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_status2_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_62_63               : 2;
-	uint64_t err_blks                     : 22; /**< Errored blocks counter
-                                                         This is the BASE-R errored blocks counter as defined by the
-                                                         errored_block_count variable specified in 802.3 sections 49.2.14.2
-                                                         and 82.2.18.2.4. It increments by 1 on each block for which the
-                                                         BASE-R receive state machine, specified in 802.3 diagrams 49-15 and
-                                                         82-15, enters the RX_E state. Back-to-back blocks in the RX_E state
-                                                         are counted as transitions from RX_E to RX_E and keep incrementing
-                                                         the counter. The counter is reset to all zeros after this register
-                                                         is read by software, and is held at all ones in case of overflow.
-                                                         The reset operation takes precedence over the increment operation;
-                                                         if the register is read on the same clock cycle an increment
-                                                         operation, the counter will be reset to all zeros and the increment
-                                                         operation will be lost.  This field is writable for test purposes,
-                                                         rather than read-only as specified in 802.3. */
+	uint64_t err_blks                     : 22; /**< Errored-blocks counter. This is the BASE-R errored-blocks counter as defined by the
+                                                         errored_block_count variable specified in Std 802.3 sections 49.2.14.2 and 82.2.18.2.4. It
+                                                         increments by 1 on each block for which the BASE-R receive state machine, specified in Std
+                                                         802.3 diagrams 49-15 and 82-15, enters the RX_E state.
+                                                         Back-to-back blocks in the RX_E state are counted as transitions from RX_E to RX_E and
+                                                         keep incrementing the counter. The counter is reset to all 0s after this register is read
+                                                         by software.
+                                                         The reset operation takes precedence over the increment operation: if the register is read
+                                                         on the same clock cycle as an increment operation, the counter is reset to all 0s and the
+                                                         increment operation is lost.
+                                                         This field is writable for test purposes, rather than read-only as specified in Std 802.3. */
 	uint64_t reserved_38_39               : 2;
-	uint64_t ber_cnt                      : 22; /**< Bit Error Rate counter
-                                                         This is the BASE-R BER counter as defined by the ber_count variable
-                                                         in 802.3 sections 49.2.14.2 and 82.2.18.2.4. The counter is reset to
-                                                         all zeros after this register is read by software, and is held at
-                                                         all ones in case of overflow. The reset operation takes precedence
-                                                         over the increment operation; if the register is read on the same
-                                                         clock cycle an increment operation, the counter will be reset to all
-                                                         zeros and the increment operation will be lost.
-                                                         This field is writable for test purposes, rather than read-only as
-                                                         specified in 802.3. */
-	uint64_t latched_lock                 : 1;  /**< "Latched block lock:
-                                                         Returns 1 to indicate that the 64B/66B receiver for BASE-R has
-                                                         achieved block lock, and returns 0 otherwise. This is a Latching Low
-                                                         version of the BLK_LOCK bit in BR_STATUS1; stays clear until a 1 is
-                                                         written by software.
-                                                         Note that in order to avoid read side effects, this is implemented as
-                                                         a write-1-to-set bit, rather than latching low read-only as specified
-                                                         in 802.3." */
-	uint64_t latched_ber                  : 1;  /**< "Latched high Bit Error Rate:
-                                                         Returns 1 to indicate that the 64B/66B receiver is detecting a high
-                                                         BER and returns 0 otherwise. This is a Latching High version of the
-                                                         HI_BER bit in BR_STATUS1; stays set until a 1 is written by software.
-                                                         Note that in order to avoid read side effects, this is implemented as
-                                                         a write-1-to-clear bit, rather than latching high read-only as
-                                                         specified in 802.3." */
+	uint64_t ber_cnt                      : 22; /**< Bit-error-rate counter. This is the BASE-R BER counter as defined by the ber_count
+                                                         variable in Std 802.3 sections 49.2.14.2 and 82.2.18.2.4. The counter is reset to all 0s
+                                                         after this register is read by software, and is held at all 1s in case of overflow.
+                                                         The reset operation takes precedence over the increment operation: if the register is read
+                                                         on the same clock cycle an increment operation, the counter is reset to all 0s and the
+                                                         increment operation is lost.
+                                                         This field is writable for test purposes, rather than read-only as specified in Std 802.3. */
+	uint64_t latched_lock                 : 1;  /**< Latched-block lock.
+                                                         1 = 64B/66B receiver for BASE-R has block lock
+                                                         0 = No block
+                                                         This is a latching-low version of BGXn_SPUm_BR_STATUS1[BLK_LOCK]; it stays clear until the
+                                                         register is read by software.
+                                                         Note that in order to avoid read side effects, this is implemented as a write-1-to-set
+                                                         bit, rather than latching low read-only as specified in 802.3. */
+	uint64_t latched_ber                  : 1;  /**< Latched-high bit-error rate.
+                                                         1 = 64B/66B receiver is detecting a high BER
+                                                         0 = Not a high BER
+                                                         This is a latching-high version of BGXn_SPUm_BR_STATUS1[HI_BER]; it stays set until the
+                                                         register is read by software.
+                                                         Note that in order to avoid read side effects, this is implemented as a write-1-to-clear
+                                                         bit, rather than latching high read-only as specified in 802.3. */
 	uint64_t reserved_0_13                : 14;
 #else
 	uint64_t reserved_0_13                : 14;
@@ -6581,33 +6449,26 @@ typedef union cvmx_bgxx_spux_br_status2 cvmx_bgxx_spux_br_status2_t;
 /**
  * cvmx_bgx#_spu#_br_tp_control
  *
- * "BASE-R PCS test pattern control:
- * Refer to the test pattern methodology described in 802.3 sections 49.2.8 and 82.2.10."
+ * Refer to the test pattern methodology described in 802.3 sections 49.2.8 and 82.2.10.
+ *
  */
 union cvmx_bgxx_spux_br_tp_control {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_br_tp_control_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_8_63                : 56;
-	uint64_t scramble_tp                  : 1;  /**< Select scrambled idle test pattern
-                                                          This bit selects the transmit test pattern used when TX_TP_EN is set
-                                                          in this register:
-                                                         - 1: Scrambled idle test pattern, 0: Square wave test pattern. */
-	uint64_t prbs9_tx                     : 1;  /**< 10GBASE-R PRBS9 TP transmit enable. Always 0; PRBS9 pattern testing
-                                                         not supported. */
-	uint64_t prbs31_rx                    : 1;  /**< 10GBASE-R PRBS31 TP receive enable. Always 0; PRBS31 pattern testing
-                                                         not supported. */
-	uint64_t prbs31_tx                    : 1;  /**< 10GBASE-R PRBS31 TP transmit enable. Always 0; PRBS31 pattern
-                                                         testing not supported. */
-	uint64_t tx_tp_en                     : 1;  /**< Transmit test pattern enable */
-	uint64_t rx_tp_en                     : 1;  /**< Receive test pattern enable
-                                                         The only supported receive test pattern is the scrambled idle test
-                                                         pattern. Setting this bit enables checking of that receive pattern. */
-	uint64_t tp_sel                       : 1;  /**< Square v/s PRBS test pattern select
-                                                         Always 1 to select square wave test pattern; PRBS test patterns are
-                                                         not supported. */
-	uint64_t dp_sel                       : 1;  /**< Data pattern select
-                                                         Always 0; PRBS test patterns are not supported. */
+	uint64_t scramble_tp                  : 1;  /**< Select scrambled idle test pattern. This bit selects the transmit test pattern used when
+                                                         TX_TP_EN is set:
+                                                         1 = scrambled idle test pattern, 0 = square wave test pattern. */
+	uint64_t prbs9_tx                     : 1;  /**< 10GBASE-R PRBS9 TP transmit enable. Always 0; PRBS9 pattern testing is not supported. */
+	uint64_t prbs31_rx                    : 1;  /**< 10GBASE-R PRBS31 TP receive enable. Always 0; PRBS31 pattern testing is not supported. */
+	uint64_t prbs31_tx                    : 1;  /**< 10GBASE-R PRBS31 TP transmit enable. Always 0; PRBS31 pattern is not supported. */
+	uint64_t tx_tp_en                     : 1;  /**< Transmit-test-pattern enable. */
+	uint64_t rx_tp_en                     : 1;  /**< Receive-test-pattern enable. The only supported receive test pattern is the scrambled idle
+                                                         test pattern. Setting this bit enables checking of that receive pattern. */
+	uint64_t tp_sel                       : 1;  /**< Square/PRBS test pattern select. Always 1 to select square wave test pattern; PRBS test
+                                                         patterns are not supported. */
+	uint64_t dp_sel                       : 1;  /**< Data pattern select. Always 0; PRBS test patterns are not supported. */
 #else
 	uint64_t dp_sel                       : 1;
 	uint64_t tp_sel                       : 1;
@@ -6627,7 +6488,7 @@ typedef union cvmx_bgxx_spux_br_tp_control cvmx_bgxx_spux_br_tp_control_t;
 /**
  * cvmx_bgx#_spu#_br_tp_err_cnt
  *
- * BASE-R PCS test pattern error counter
+ * This register provides the BASE-R PCS test-pattern error counter.
  *
  */
 union cvmx_bgxx_spux_br_tp_err_cnt {
@@ -6635,19 +6496,15 @@ union cvmx_bgxx_spux_br_tp_err_cnt {
 	struct cvmx_bgxx_spux_br_tp_err_cnt_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t err_cnt                      : 16; /**< Error Counter
-                                                         The test pattern error counter is a sixteen bit counter that contains
-                                                         the number of errors received during a pattern test. These bits are
-                                                         reset to all zeros when this register is read by software, and they
-                                                         are  held at all ones in the case of overflow. The test pattern
-                                                         methodology is described in 802.3 sections 49.2.12 and 82.2.10. This
-                                                         counter will count either block errors or bit errors dependent on
-                                                         the test mode (see 49.2.12). The reset operation takes precedence
-                                                         over the increment operation; if the register is read on the same
-                                                         clock cycle an increment operation, the counter will be reset to all
-                                                         zeros and the increment operation will be lost.
-                                                         This field is writable for test purposes, rather than read-only as
-                                                         specified in 802.3. */
+	uint64_t err_cnt                      : 16; /**< Error counter. This 16-bit counter contains the number of errors received during a pattern
+                                                         test. These bits are reset to all 0s when this register is read by software, and they are
+                                                         held at all 1s in the case of overflow.
+                                                         The test pattern methodology is described in Std 802.3, Sections 49.2.12 and 82.2.10. This
+                                                         counter counts either block errors or bit errors dependent on the test mode (see Section
+                                                         49.2.12). The reset operation takes precedence over the increment operation; if the
+                                                         register is read on the same clock cycle as an increment operation, the counter is reset
+                                                         to all 0s and the increment operation is lost. This field is writable for test purposes,
+                                                         rather than read-only as specified in Std 802.3. */
 #else
 	uint64_t err_cnt                      : 16;
 	uint64_t reserved_16_63               : 48;
@@ -6659,26 +6516,20 @@ typedef union cvmx_bgxx_spux_br_tp_err_cnt cvmx_bgxx_spux_br_tp_err_cnt_t;
 
 /**
  * cvmx_bgx#_spu#_bx_status
- *
- * 10GBASE-X PCS status
- *
  */
 union cvmx_bgxx_spux_bx_status {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_bx_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_13_63               : 51;
-	uint64_t alignd                       : 1;  /**< 10GBASE-X lane alignment status:
-                                                         1=Receive lanes aligned, 0=Receive lanes not aligned. */
-	uint64_t pattst                       : 1;  /**< Pattern testing ability:
-                                                         Always 0; 10GBASE-X pattern testing not supported. */
+	uint64_t alignd                       : 1;  /**< 10GBASE-X lane-alignment status.
+                                                         1 = receive lanes aligned, 0 = receive lanes not aligned */
+	uint64_t pattst                       : 1;  /**< Pattern-testing ability. Always 0; 10GBASE-X pattern is testing not supported. */
 	uint64_t reserved_4_10                : 7;
-	uint64_t lsync                        : 4;  /**< Lane sync:
-                                                         BASE-X lane synchronization status for PCS lanes 3-0. Each bit is
-                                                         set when the associated lane is code-group synchonized, and clear
-                                                         otherwise. If the PCS type is RXAUI (LMAC_TYPE = RXAUI in the
-                                                         associated BGX_CMR_CONFIG register in the CMR sub-block), then
-                                                         only lanes 1-0 are valid. */
+	uint64_t lsync                        : 4;  /**< Lane synchronization. BASE-X lane synchronization status for PCS lanes 3-0. Each bit is
+                                                         set when the associated lane is code-group synchronized, and clear otherwise. If the PCS
+                                                         type is RXAUI (i.e. the associated BGXn_CMRm_CONFIG[LMAC_TYPE] = RXAUI), then only lanes
+                                                         1-0 are valid. */
 #else
 	uint64_t lsync                        : 4;
 	uint64_t reserved_4_10                : 7;
@@ -6693,47 +6544,42 @@ typedef union cvmx_bgxx_spux_bx_status cvmx_bgxx_spux_bx_status_t;
 
 /**
  * cvmx_bgx#_spu#_control1
- *
- * PCS control 1
- *
  */
 union cvmx_bgxx_spux_control1 {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_control1_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t reset                        : 1;  /**< "Reset:
-                                                         Writing a 1 to this bit or to the AN_RESET bit in register
-                                                         AN_CONTROL resets the logical PCS (LPCS), sets the 802.3 PCS, FEC
-                                                         and AN registers for the LPCS to their default states, and resets
-                                                         the associated serdes lanes. It takes up to 32 sclk cycles to reset
-                                                         the LPCS, after which this bit is automatically cleared." */
-	uint64_t loopbck                      : 1;  /**< Loopback:
-                                                         TX to RX Loopback Enable: When set, transmit data for each serdes
-                                                         lane is looped back as receive data. */
-	uint64_t spdsel1                      : 1;  /**< Speed Select 1: Always 1. */
+	uint64_t reset                        : 1;  /**< Reset. Setting this bit or BGXn_SPUm_AN_CONTROL[AN_RESET] to 1 causes the following to
+                                                         happen:
+                                                         Resets the logical PCS (LPCS)
+                                                         Sets the Std 802.3 PCS, FEC and AN registers for the LPCS to their default states
+                                                         Resets the associated SerDes lanes.
+                                                         It takes up to 32 coprocessor-clock cycles to reset the LPCS, after which RESET is
+                                                         automatically cleared. */
+	uint64_t loopbck                      : 1;  /**< TX-to-RX loopback enable. When set, transmit data for each SerDes lane is looped back as
+                                                         receive data. */
+	uint64_t spdsel1                      : 1;  /**< Speed select 1: always 1. */
 	uint64_t reserved_12_12               : 1;
-	uint64_t lo_pwr                       : 1;  /**< "Low Power:
-                                                         When set, the Logical PCS is disabled (overriding the ENABLE bit in
-                                                         the associated BGX_CMR_CONFIG register in the CMR sub-block), and
-                                                         the serdes lanes associated with the LPCS are reset." */
+	uint64_t lo_pwr                       : 1;  /**< Low power enable. When set, the LPCS is disabled (overriding the associated
+                                                         BGXn_CMRm_CONFIG[ENABLE]), and the SerDes lanes associated with the LPCS are reset. */
 	uint64_t reserved_7_10                : 4;
-	uint64_t spdsel0                      : 1;  /**< Speed Select 0: Always 1. */
+	uint64_t spdsel0                      : 1;  /**< Speed select 0: always 1. */
 	uint64_t spd                          : 4;  /**< "Speed selection:
                                                          Note that this is a read-only field rather than read/write as
                                                          specified in 802.3. The Logical PCS speed is actually configured by
                                                          the LMAC_TYPE field in the associated BGX_CMR_CONFIG register in
                                                          the CMR sub-block. The Read values returned by this field are as
                                                          follows:
-                                                         ----------+---------------------------------------------------
-                                                         LMAC_TYPE |   Speed       SPD Read Value      Comment
-                                                         ----------+---------------------------------------------------
-                                                         XAUI      |   10G/20G     0x0                 20G if DXAUI
-                                                         RXAUI     |   10G         0x0
-                                                         10G_R     |   10G         0x0
-                                                         40G_R     |   40G         0x3
-                                                         Other     |   -           X
-                                                         ----------+---------------------------------------------------" */
+                                                           ----------+---------------------------------------------------
+                                                           LMAC_TYPE |   Speed       SPD Read Value      Comment
+                                                           ----------+---------------------------------------------------
+                                                           XAUI      |   10G/20G     0x0                 20G if DXAUI
+                                                           RXAUI     |   10G         0x0
+                                                           10G_R     |   10G         0x0
+                                                           40G_R     |   40G         0x3
+                                                           Other     |   -           X
+                                                           ----------+---------------------------------------------------" */
 	uint64_t reserved_0_1                 : 2;
 #else
 	uint64_t reserved_0_1                 : 2;
@@ -6754,9 +6600,6 @@ typedef union cvmx_bgxx_spux_control1 cvmx_bgxx_spux_control1_t;
 
 /**
  * cvmx_bgx#_spu#_control2
- *
- * PCS control 2
- *
  */
 union cvmx_bgxx_spux_control2 {
 	uint64_t u64;
@@ -6769,16 +6612,16 @@ union cvmx_bgxx_spux_control2 {
                                                          the LMAC_TYPE field in the associated BGX_CMR_CONFIG register in
                                                          the CMR sub-block. The Read values returned by this field are as
                                                          follows:
-                                                         ----------+------------------------------------------
-                                                         LMAC_TYPE |   PCS_TYPE          Comment
-                                                         |   Read Value
-                                                         ----------+------------------------------------------
-                                                         XAUI      |   0x1               10GBASE-X PCS type
-                                                         RXAUI     |   0x1               10GBASE-X PCS type
-                                                         10G_R     |   0x0               10GBASE-R PCS type
-                                                         40G_R     |   0x4               40GBASE-R PCS type
-                                                         Other     |   Undefined         Reserved
-                                                         ----------+------------------------------------------" */
+                                                           ----------+------------------------------------------
+                                                           LMAC_TYPE |   PCS_TYPE          Comment
+                                                                         Read Value
+                                                           ----------+------------------------------------------
+                                                           XAUI      |   0x1               10GBASE-X PCS type
+                                                           RXAUI     |   0x1               10GBASE-X PCS type
+                                                           10G_R     |   0x0               10GBASE-R PCS type
+                                                           40G_R     |   0x4               40GBASE-R PCS type
+                                                           Other     |   Undefined         Reserved
+                                                           ----------+------------------------------------------" */
 #else
 	uint64_t pcs_type                     : 3;
 	uint64_t reserved_3_63                : 61;
@@ -6790,23 +6633,16 @@ typedef union cvmx_bgxx_spux_control2 cvmx_bgxx_spux_control2_t;
 
 /**
  * cvmx_bgx#_spu#_fec_abil
- *
- * BASE-R FEC ability
- *
  */
 union cvmx_bgxx_spux_fec_abil {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_fec_abil_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_2_63                : 62;
-	uint64_t err_abil                     : 1;  /**< "BASE-R FEC error indication ability:
-                                                         Always 1 when the logical PCS type is BASE-R, i.e. LMAC_TYPE = 40G_R
-                                                         or 10G_R in the associated BGX_CMR_CONFIG register in the CMR
-                                                         sub-block. Always 0 otherwise." */
-	uint64_t fec_abil                     : 1;  /**< "BASE-R FEC ability:
-                                                         Always 1 when the logical PCS type is BASE-R, i.e. LMAC_TYPE = 40G_R
-                                                         or 10G_R in the associated BGX_CMR_CONFIG register in the CMR
-                                                         sub-block. Always 0 otherwise." */
+	uint64_t err_abil                     : 1;  /**< BASE-R FEC error-indication ability. Always 1 when the LPCS type is BASE-R, i.e.
+                                                         BGXn_CMRm_CONFIG[LMAC_TYPE] = 0x3 or 0x4. Always 0 otherwise. */
+	uint64_t fec_abil                     : 1;  /**< BASE-R FEC ability. Always 1 when the LPCS type is BASE-R, i.e.
+                                                         BGXn_CMRm_CONFIG[LMAC_TYPE] = 0x3 or 0x4. Always 0 otherwise. */
 #else
 	uint64_t fec_abil                     : 1;
 	uint64_t err_abil                     : 1;
@@ -6819,29 +6655,22 @@ typedef union cvmx_bgxx_spux_fec_abil cvmx_bgxx_spux_fec_abil_t;
 
 /**
  * cvmx_bgx#_spu#_fec_control
- *
- * BASE-R FEC control
- *
  */
 union cvmx_bgxx_spux_fec_control {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_fec_control_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_2_63                : 62;
-	uint64_t err_en                       : 1;  /**< "BASE-R FEC error indication enable:
-                                                         This bit corresponds to FEC_Enable_Error_to_PCS variable for BASE-R
-                                                         as defined in 802.3 Clause 74. When FEC is enabled (per FEC_EN bit
-                                                         in this register) and this bit is set to 1, the FEC decoder on the
-                                                         receive side will signal an uncorrectable FEC error to the BASE-R
-                                                         decoder by driving a value of 2'b11 on the sync bits for some of the
-                                                         32 64B/66B blocks belonging to the uncorrectable FEC block. See
-                                                         802.3-2008/802.3ba-2010 section 74.7.4.5.1 for more details." */
-	uint64_t fec_en                       : 1;  /**< "BASE-R FEC enable:
-                                                         When this bit is set and the logical PCS type is BASE-R (LMAC_TYPE =
-                                                         40G_R or 10G_R in the associated BGX_CMR_CONFIG register in the
-                                                         CMR sub-block), Forward Error Correction is enabled. FEC is disabled
-                                                         otherwise. Forward Error Correction is defined in IEEE Std
-                                                         802.3-2008/802.3ba-2010 Clause 74." */
+	uint64_t err_en                       : 1;  /**< BASE-R FEC error-indication enable. This bit corresponds to FEC_Enable_Error_to_PCS
+                                                         variable for BASE-R as defined in 802.3 Clause 74. When FEC is enabled (per FEC_EN bit in
+                                                         this register) and this bit is set, the FEC decoder on the receive side signals an
+                                                         uncorrectable FEC error to the BASE-R decoder by driving a value of 2'b11 on the sync bits
+                                                         for some of the 32 64B/66B blocks belonging to the uncorrectable FEC block. See
+                                                         802.3-2008/802.3ba-2010 section 74.7.4.5.1 for more details. */
+	uint64_t fec_en                       : 1;  /**< BASE-R FEC enable. When this bit is set and the LPCS type is BASE-R
+                                                         (BGXn_CMRm_CONFIG[LMAC_TYPE] = 0x4), forward error correction is enabled. FEC is disabled
+                                                         otherwise. Forward error correction is defined in IEEE Std 802.3-2008/802.3ba-2010 Clause
+                                                         74. */
 #else
 	uint64_t fec_en                       : 1;
 	uint64_t err_en                       : 1;
@@ -6855,33 +6684,30 @@ typedef union cvmx_bgxx_spux_fec_control cvmx_bgxx_spux_fec_control_t;
 /**
  * cvmx_bgx#_spu#_fec_corr_blks01
  *
- * "BASE-R FEC corrected blocks counters, lanes 0-1:
- * This register is only valid when the logical PCS type is BASE-R, i.e. LMAC_TYPE =
- * 40G_R or 10G_R in the associated BGX_CMR_CONFIG register in the CMR sub-block.
- * The FEC corrected block counters are defined in 802.3 section 74.8.4.1.
- * For 10GBASE-R, LN0_CORR_BLKS corresponds to the 802.3 FEC_corrected_blocks_counter
- * variable (registers 1.172-1.173), and LN1_CORR_BLKS is reserved. For 40GBASE-R,
- * LN0_CORR_BLKS and LN1_CORR_BLKS correspond to the 802.3
- * FEC_corrected_blocks_counter_0 variable (registers 1.300-1.301) and
- * FEC_corrected_blocks_counter_1 variable (registers 1.302-1.303), respectively.
- * Each corrected blocks counter increments by 1 for a corrected FEC block, i.e. an
- * FEC block that has been received with invalid parity on the associated PCS lane,
- * and has been corrected by the FEC decoder.  The counter is reset to all
- * zeros when the register is read, and held at all ones in case of
- * overflow. The reset operation takes precedence over the increment
- * operation; if the register is read on the same clock cycle an increment
- * operation, the counter will be reset to all zeros and the increment
- * operation will be lost.
- * The counters are writable for test purposes, rather than read-only as
- * specified in 802.3.
- * "
+ * This register is valid only when the LPCS type is BASE-R (BGXn_CMRm_CONFIG[LMAC_TYPE] = 0x3 or
+ * 0x4). The FEC corrected-block counters are defined in Std 802.3 section 74.8.4.1. Each
+ * corrected-blocks counter increments by 1 for a corrected FEC block, i.e. an FEC block that has
+ * been received with invalid parity on the associated PCS lane and has been corrected by the FEC
+ * decoder. The counter is reset to all 0s when the register is read, and held at all 1s in case
+ * of overflow.
+ * The reset operation takes precedence over the increment operation; if the register is read on
+ * the same clock cycle as an increment operation, the counter is reset to all 0s and the
+ * increment operation is lost. The counters are writable for test purposes, rather than read-
+ * only as specified in Std 802.3.
  */
 union cvmx_bgxx_spux_fec_corr_blks01 {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_fec_corr_blks01_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t ln1_corr_blks                : 32; /**< PCS Lane 1 FEC corrected blocks */
-	uint64_t ln0_corr_blks                : 32; /**< PCS Lane 0 FEC corrected blocks */
+	uint64_t ln1_corr_blks                : 32; /**< PCS Lane 1 FEC corrected blocks.
+                                                         For 10GBASE-R, reserved.
+                                                         For 40GBASE-R, correspond to the Std 802.3 FEC_corrected_blocks_counter_1 variable
+                                                         (registers 1.302-1.303). */
+	uint64_t ln0_corr_blks                : 32; /**< PCS Lane 0 FEC corrected blocks.
+                                                         For 10GBASE-R, corresponds to the Std 802.3 FEC_corrected_blocks_counter variable
+                                                         (registers 1.172-1.173).
+                                                         For 40GBASE-R, correspond to the Std 802.3 FEC_corrected_blocks_counter_0 variable
+                                                         (registers 1.300-1.301). */
 #else
 	uint64_t ln0_corr_blks                : 32;
 	uint64_t ln1_corr_blks                : 32;
@@ -6894,31 +6720,25 @@ typedef union cvmx_bgxx_spux_fec_corr_blks01 cvmx_bgxx_spux_fec_corr_blks01_t;
 /**
  * cvmx_bgx#_spu#_fec_corr_blks23
  *
- * "BASE-R FEC corrected blocks counters, lanes 2-3:
- * This register is only valid when the logical PCS type is 40GBASE-R, i.e. LMAC_TYPE
- * = 40G_R in the associated BGX_CMR_CONFIG register in the CMR sub-block. The FEC
- * corrected block counters are defined in 802.3 section 74.8.4.1.
- * LN2_CORR_BLKS and LN3_CORR_BLKS correspond to the 802.3
- * FEC_corrected_blocks_counter_2 variable (registers 1.304-1.305) and
- * FEC_corrected_blocks_counter_3 variable (registers 1.306-1.307), respectively.
- * Each corrected blocks counter increments by 1 for a corrected FEC block, i.e. an
- * FEC block that has been received with invalid parity on the associated PCS lane,
- * and has been corrected by the FEC decoder.  The counter is reset to all
- * zeros when the register is read, and held at all ones in case of
- * overflow. The reset operation takes precedence over the increment
- * operation; if the register is read on the same clock cycle an increment
- * operation, the counter will be reset to all zeros and the increment
- * operation will be lost.
- * The counters are writable for test purposes, rather than read-only as
- * specified in 802.3.
- * "
+ * This register is valid only when the LPCS type is 40GBASE-R (BGXn_CMRm_CONFIG[LMAC_TYPE] =
+ * 0x4). The FEC corrected-block counters are defined in Std 802.3 section 74.8.4.1. Each
+ * corrected-blocks counter increments by 1 for a corrected FEC block, i.e. an FEC block that has
+ * been received with invalid parity on the associated PCS lane and has been corrected by the FEC
+ * decoder. The counter is reset to all 0s when the register is read, and held at all 1s in case
+ * of overflow.
+ * The reset operation takes precedence over the increment operation; if the register is read on
+ * the same clock cycle as an increment operation, the counter is reset to all 0s and the
+ * increment operation is lost. The counters are writable for test purposes, rather than read-
+ * only as specified in Std 802.3.
  */
 union cvmx_bgxx_spux_fec_corr_blks23 {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_fec_corr_blks23_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t ln3_corr_blks                : 32; /**< PCS Lane 3 FEC corrected blocks */
-	uint64_t ln2_corr_blks                : 32; /**< PCS Lane 2 FEC corrected blocks */
+	uint64_t ln3_corr_blks                : 32; /**< PCS Lane 3 FEC corrected blocks. Correspond to the Std 802.3
+                                                         FEC_corrected_blocks_counter_3 variable (registers 1.306-1.307). */
+	uint64_t ln2_corr_blks                : 32; /**< PCS Lane 2 FEC corrected blocks. Correspond to the Std 802.3
+                                                         FEC_corrected_blocks_counter_3 variable (registers 1.304-1.305). */
 #else
 	uint64_t ln2_corr_blks                : 32;
 	uint64_t ln3_corr_blks                : 32;
@@ -6931,33 +6751,30 @@ typedef union cvmx_bgxx_spux_fec_corr_blks23 cvmx_bgxx_spux_fec_corr_blks23_t;
 /**
  * cvmx_bgx#_spu#_fec_uncorr_blks01
  *
- * "BASE-R FEC uncorrected blocks counters, lanes 0-1:
- * This register is only valid when the logical PCS type is BASE-R, i.e. LMAC_TYPE =
- * 40G_R or 10G_R in the associated BGX_CMR_CONFIG register in the CMR sub-block.
- * The FEC uncorrected block counters are defined in 802.3 section 74.8.4.2.
- * For 10GBASE-R, LN0_UNCORR_BLKS corresponds to the 802.3 FEC_uncorrected_blocks_counter
- * variable (registers 1.174-1.175), and LN1_UNCORR_BLKS is reserved. For 40GBASE-R,
- * LN0_UNCORR_BLKS and LN1_UNCORR_BLKS correspond to the 802.3
- * FEC_uncorrected_blocks_counter_0 variable (registers 1.700-1.701) and
- * FEC_uncorrected_blocks_counter_1 variable (registers 1.702-1.703), respectively.
- * Each uncorrected blocks counter increments by 1 for an uncorrected FEC block, i.e.
- * an FEC block that has been received with invalid parity on the associated PCS lane,
- * and has not been corrected by the FEC decoder.  The counter is reset to
- * all zeros when the register is read, and held at all ones in case of
- * overflow. The reset operation takes precedence over the increment
- * operation; if the register is read on the same clock cycle an increment
- * operation, the counter will be reset to all zeros and the increment
- * operation will be lost.
- * The counters are writable for test purposes, rather than read-only as
- * specified in 802.3.
- * "
+ * This register is valid only when the LPCS type is BASE-R (BGXn_CMRm_CONFIG[LMAC_TYPE] = 0x3 or
+ * 0x4). The FEC corrected-block counters are defined in Std 802.3 section 74.8.4.2. Each
+ * uncorrected-blocks counter increments by 1 for an uncorrected FEC block, i.e. an FEC block
+ * that has been received with invalid parity on the associated PCS lane and has not been
+ * corrected by the FEC decoder. The counter is reset to all 0s when the register is read, and
+ * held at all 1s in case of overflow.
+ * The reset operation takes precedence over the increment operation; if the register is read on
+ * the same clock cycle as an increment operation, the counter is reset to all 0s and the
+ * increment operation is lost. The counters are writable for test purposes, rather than read-
+ * only as specified in Std 802.3.
  */
 union cvmx_bgxx_spux_fec_uncorr_blks01 {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_fec_uncorr_blks01_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t ln1_uncorr_blks              : 32; /**< PCS Lane 1 FEC uncorrected blocks */
-	uint64_t ln0_uncorr_blks              : 32; /**< PCS Lane 0 FEC uncorrected blocks */
+	uint64_t ln1_uncorr_blks              : 32; /**< PCS Lane 1 FEC corrected blocks.
+                                                         For 10GBASE-R, reserved.
+                                                         For 40GBASE-R, corresponds to the Std 802.3 FEC_uncorrected_blocks_counter_1 variable
+                                                         (registers 1.702-1.703). */
+	uint64_t ln0_uncorr_blks              : 32; /**< PCS Lane 0 FEC uncorrected blocks.
+                                                         For 10GBASE-R, corresponds to the Std 802.3 FEC_uncorrected_blocks_counter variable
+                                                         (registers 1.174-1.175).
+                                                         For 40GBASE-R, correspond to the Std 802.3 FEC_uncorrected_blocks_counter_0 variable
+                                                         (registers 1.700-1.701). */
 #else
 	uint64_t ln0_uncorr_blks              : 32;
 	uint64_t ln1_uncorr_blks              : 32;
@@ -6970,31 +6787,25 @@ typedef union cvmx_bgxx_spux_fec_uncorr_blks01 cvmx_bgxx_spux_fec_uncorr_blks01_
 /**
  * cvmx_bgx#_spu#_fec_uncorr_blks23
  *
- * "BASE-R FEC uncorrected blocks counters, lanes 2-3:
- * This register is only valid when the logical PCS type is 40GBASE-R, i.e. LMAC_TYPE
- * = 40G_R in the associated BGX_CMR_CONFIG register in the CMR sub-block. The FEC
- * uncorrected block counters are defined in 802.3 section 74.8.4.2.
- * LN2_UNCORR_BLKS and LN3_UNCORR_BLKS correspond to the 802.3
- * FEC_uncorrected_blocks_counter_2 variable (registers 1.704-1.705) and
- * FEC_uncorrected_blocks_counter_3 variable (registers 1.706-1.707), respectively.
- * Each uncorrected blocks counter increments by 1 for an uncorrected FEC block, i.e.
- * an FEC block that has been received with invalid parity on the associated PCS lane,
- * and has not been corrected by the FEC decoder.  The counter is reset to
- * all zeros when the register is read, and held at all ones in case of
- * overflow. The reset operation takes precedence over the increment
- * operation; if the register is read on the same clock cycle an increment
- * operation, the counter will be reset to all zeros and the increment
- * operation will be lost.
- * The counters are writable for test purposes, rather than read-only as
- * specified in 802.3.
- * "
+ * This register is valid only when the LPCS type is 40GBASE-R (BGXn_CMRm_CONFIG[LMAC_TYPE] =
+ * 0x4). The FEC uncorrected-block counters are defined in Std 802.3 section 74.8.4.2. Each
+ * corrected-blocks counter increments by 1 for an uncorrected FEC block, i.e. an FEC block that
+ * has been received with invalid parity on the associated PCS lane and has not been corrected by
+ * the FEC decoder. The counter is reset to all 0s when the register is read, and held at all 1s
+ * in case of overflow.
+ * The reset operation takes precedence over the increment operation; if the register is read on
+ * the same clock cycle as an increment operation, the counter is reset to all 0s and the
+ * increment operation is lost. The counters are writable for test purposes, rather than read-
+ * only as specified in Std 802.3.
  */
 union cvmx_bgxx_spux_fec_uncorr_blks23 {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_fec_uncorr_blks23_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t ln3_uncorr_blks              : 32; /**< PCS Lane 3 FEC uncorrected blocks */
-	uint64_t ln2_uncorr_blks              : 32; /**< PCS Lane 2 FEC uncorrected blocks */
+	uint64_t ln3_uncorr_blks              : 32; /**< PCS Lane 3 FEC uncorrected blocks. Corresponds to the Std 802.3
+                                                         FEC_uncorrected_blocks_counter_3 variable (registers 1.706-1.707). */
+	uint64_t ln2_uncorr_blks              : 32; /**< PCS Lane 2 FEC uncorrected blocks. Corresponds to the Std 802.3
+                                                         FEC_uncorrected_blocks_counter_3 variable (registers 1.704-1.705). */
 #else
 	uint64_t ln2_uncorr_blks              : 32;
 	uint64_t ln3_uncorr_blks              : 32;
@@ -7006,91 +6817,67 @@ typedef union cvmx_bgxx_spux_fec_uncorr_blks23 cvmx_bgxx_spux_fec_uncorr_blks23_
 
 /**
  * cvmx_bgx#_spu#_int
- *
- * SPU interrupt
- *
  */
 union cvmx_bgxx_spux_int {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_15_63               : 49;
-	uint64_t training_failure             : 1;  /**< "BASE-R PMD training failure:
-                                                         Set when BASE-R PMD link training has failed on the 10GBASE-R lane
-                                                         or any 40GBASE-R lane. Valid if the LPCS type selected by
-                                                         BGX_CMR_CONFIG[LMAC_TYPE] is 10GBASE-R or 40GBASE-R and
-                                                         BGX_SPU_BR_PMD_CONTROL[TRAIN_EN] is 1, and never set otherwise." */
-	uint64_t training_done                : 1;  /**< "BASE-R PMD training done:
-                                                         Set when the 10GBASE-R lane or all 40GBASE-R lanes have
-                                                         successfully completed BASE-R PMD link training. Valid if the LPCS
-                                                         type selected by BGX_CMR_CONFIG[LMAC_TYPE] is 10GBASE-R or 40GBASE-R
-                                                         and BGX_SPU_BR_PMD_CONTROL[TRAIN_EN] is 1, and never set otherwise." */
-	uint64_t an_complete                  : 1;  /**< "Auto-Negotiation Link Good:
-                                                         Set when BGX_SPU_AN_STATUS[AN_COMPLETE] is set, indicating that the
-                                                         Auto-Negotiation process has been completed and the link is up and
-                                                         running using the negotiated Highest Common Denominator (HCD)
-                                                         technology." */
-	uint64_t an_link_good                 : 1;  /**< "Auto-Negotiation Link Good:
-                                                         Set when the an_link_good variable is set as defined in 802.3-2008
-                                                         Figure 73-11, indicating that Auto-Negotiation has completed." */
-	uint64_t an_page_rx                   : 1;  /**< "Auto-Negotiation Page Received:
-                                                         This bit is set along with the PAGE_RX bit in AN_STATUS when a New
-                                                         Page has been received and stored in the AN_LP_BASE or AN_LP_XNP
-                                                         register." */
-	uint64_t fec_uncorr                   : 1;  /**< "Uncorrectable FEC error:
-                                                         Set when an FEC block with an uncorrectable error is received on the
-                                                         10GBASE-R lane or any 40GBASE-R lane.  Valid if the LPCS type
-                                                         selected by BGX_CMR_CONFIG[LMAC_TYPE] is 10GBASE-R or 40GBASE-R, and
-                                                         never set otherwise." */
-	uint64_t fec_corr                     : 1;  /**< "Correctable FEC error:
-                                                         Set when an FEC block with a correctable error is received on the
-                                                         10GBASE-R lane or any 40GBASE-R lane.  Valid if the LPCS type
-                                                         selected by BGX_CMR_CONFIG[LMAC_TYPE] is 10GBASE-R or 40GBASE-R, and
-                                                         never set otherwise." */
-	uint64_t bip_err                      : 1;  /**< "40GBASE-R Bit Interleaved Parity Error: Set when a BIP error is
-                                                         detected on any lane.  Valid if the LPCS type selected by
-                                                         BGX_CMR_CONFIG[LMAC_TYPE] is 40GBASE-R, and never set otherwise." */
-	uint64_t dbg_sync                     : 1;  /**< "Sync failure debug:
-                                                         This interrupt is provided for link problem debugging help. It is
-                                                         set as follows based on the LPCS type selected by
-                                                         BGX_CMR_CONFIG[LMAC_TYPE], and whether FEC is enabled or disabled by
+	uint64_t training_failure             : 1;  /**< BASE-R PMD training failure. Set when BASE-R PMD link training has failed on the 10GBASE-R
+                                                         lane or any 40GBASE-R lane. Valid if the LPCS type selected by
+                                                         BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE] is 10GBASE-R or 40GBASE-R and
+                                                         BGX(0..5)_SPU(0..3)_BR_PMD_CONTROL[TRAIN_EN] is 1, and never set otherwise. */
+	uint64_t training_done                : 1;  /**< BASE-R PMD training done. Set when the 10GBASE-R lane or all 40GBASE-R lanes have
+                                                         successfully completed BASE-R PMD link training. Valid if the LPCS type selected by
+                                                         BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE] is 10GBASE-R or 40GBASE-R and
+                                                         BGX(0..5)_SPU(0..3)_BR_PMD_CONTROL[TRAIN_EN] is 1, and never set otherwise. */
+	uint64_t an_complete                  : 1;  /**< Auto-Negotiation complete. Set when BGX(0..5)_SPU(0..3)_AN_STATUS[AN_COMPLETE] is set,
+                                                         indicating that the Auto-Negotiation process has been completed and the link is up and
+                                                         running using the negotiated highest common denominator (HCD) technology. */
+	uint64_t an_link_good                 : 1;  /**< Auto-Negotiation link good. Set when the an_link_good variable is set as defined in
+                                                         802.3-2008 Figure 73-11, indicating that Auto-Negotiation has completed. */
+	uint64_t an_page_rx                   : 1;  /**< Auto-Negotiation page received. This bit is set along with
+                                                         BGX(0..5)_SPU(0..3)_AN_STATUS[PAGE_RX] when a new page has been received and stored in
+                                                         BGX(0..5)_SPU(0..3)_AN_LP_BASE or BGX(0..5)_SPU(0..3)_AN_LP_XNP. */
+	uint64_t fec_uncorr                   : 1;  /**< Uncorrectable FEC error. Set when an FEC block with an uncorrectable error is received on
+                                                         the 10GBASE-R lane or any 40GBASE-R lane. Valid if the LPCS type selected by
+                                                         BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE] is 10GBASE-R or 40GBASE-R, and never set otherwise. */
+	uint64_t fec_corr                     : 1;  /**< Correctable FEC error. Set when an FEC block with a correctable error is received on the
+                                                         10GBASE-R lane or any 40GBASE-R lane. Valid if the LPCS type selected by
+                                                         BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE] is 10GBASE-R or 40GBASE-R, and never set otherwise. */
+	uint64_t bip_err                      : 1;  /**< 40GBASE-R bit interleaved parity error. Set when a BIP error is detected on any lane.
+                                                         Valid if the LPCS type selected by BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE] is 40GBASE-R, and
+                                                         never set otherwise. */
+	uint64_t dbg_sync                     : 1;  /**< Sync failure debug. This interrupt is provided for link problem debugging help. It is set
+                                                         as follows based on the LPCS type selected by BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE], and
+                                                         whether FEC is enabled or disabled by BGX(0..5)_SPU(0..3)_FEC_CONTROL[FEC_EN]:
+                                                         XAUI or RXAUI: Set when any lane's PCS synchronization state transitions from
+                                                         SYNC_ACQUIRED_1 to SYNC_ACQUIRED_2 (see 802.3-2008 Figure 48-7).
+                                                         10GBASE-R or 40GBASE-R with FEC disabled: Set when sh_invalid_cnt increments to 1 while
+                                                         block_lock is 1 (see 802.3-2008 Figure 49-12 and 802.3ba-2010 Figure 82-20).
+                                                         10GBASE-R or 40GBASE-R with FEC enabled: Set when parity_invalid_cnt increments to 1 while
+                                                         fec_block_lock is 1 (see 802.3-2008 Figure 74-8). */
+	uint64_t algnlos                      : 1;  /**< Loss of lane alignment. Set when lane-to-lane alignment is lost. This is only valid if the
+                                                         logical PCS is a multilane type (i.e. XAUI, RXAUI or 40GBASE-R is selected by
+                                                         BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE]), and is never set otherwise. */
+	uint64_t synlos                       : 1;  /**< Loss of lane sync. Lane code-group or block synchronization is lost on one or more lanes
+                                                         associated with the LMAC/LPCS. Set as follows based on the LPCS type selected by
+                                                         BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE], and whether FEC is enabled or disabled by
                                                          BGX_SPU_FEC_CONTROL[FEC_EN]:
-                                                         * XAUI or RXAUI: Set when any lane's PCS synchronization state
-                                                           transitions from SYNC_ACQUIRED_1 to SYNC_ACQUIRED_2 (see
-                                                           802.3-2008 Figure 48-7).
-                                                         * 10GBASE-R or 40GBASE-R with FEC disabled: Set when sh_invalid_cnt
-                                                           increments to 1 while block_lock is 1 (see 802.3-2008 Figure 49-12
-                                                           and 802.3ba-2010 Figure 82-20).
-                                                         * 10GBASE-R or 40GBASE-R with FEC enabled: Set when
-                                                           parity_invalid_cnt increments to 1 while fec_block_lock is 1 (see
-                                                           802.3-2008 Figure 74-8)." */
-	uint64_t algnlos                      : 1;  /**< "Loss of lane alignment:
-                                                         Set when lane-to-lane alignment is lost. This is only valid if the
-                                                         logical PCS is a multi-lane type (i.e. XAUI, RXAUI or 40GBASE-R is
-                                                         selected by BGX_CMR_CONFIG[LMAC_TYPE]), and is never set otherwise." */
-	uint64_t synlos                       : 1;  /**< "Loss of Lane Sync:
-                                                         Lane code-group or block synchronization is lost on one or more
-                                                         lanes associated with the LMAC/LPCS. Set as follows based on the
-                                                         LPCS type selected by BGX_CMR_CONFIG[LMAC_TYPE], and whether FEC is
-                                                         enabled or disabled by BGX_SPU_FEC_CONTROL[FEC_EN]:
-                                                         * XAUI or RXAUI: Set when any any lane's PCS synchronization state
-                                                           transitions to LOSS_OF_SYNC (see 802.3-2008 Figure 48-7)
-                                                         * 10GBASE-R or 40GBASE-R with FEC disabled: set when the block_lock
-                                                           variable is cleared on the 10G lane or any 40G lane (see
-                                                           802.3-2008 Figure 49-12 and 802.3ba-2010 Figure 82-20).
-                                                         * 10GBASE-R or 40GBASE-R with FEC enabled: set when the
-                                                           fec_block_lock variable is cleared on the 10G lane or any 40G
-                                                           lane (see 802.3-2008 Figure 74-8)." */
+                                                         XAUI or RXAUI: Set when any lane's PCS synchronization state transitions to LOSS_OF_SYNC
+                                                         (see 802.3-2008 Figure 48-7)
+                                                         10GBASE-R or 40GBASE-R with FEC disabled: set when the block_lock variable is cleared on
+                                                         the 10G lane or any 40G lane (see 802.3-2008 Figure 49-12 and 802.3ba-2010 Figure 82-20).
+                                                         10GBASE-R or 40GBASE-R with FEC enabled: set when the fec_block_lock variable is cleared
+                                                         on the 10G lane or any 40G lane (see 802.3-2008 Figure 74-8). */
 	uint64_t bitlckls                     : 1;  /**< Bit lock lost on one or more lanes associated with the LMAC/LPCS. */
-	uint64_t err_blk                      : 1;  /**< "Errored Block Received:
-                                                         Set when an errored BASE-R block is received as described for
-                                                         BGX_SPU_BR_STATUS2[ERR_BLKS].  Valid if the LPCS type selected by
-                                                         BGX_CMR_CONFIG[LMAC_TYPE] is 10GBASE-R or 40GBASE-R, and never set
-                                                         otherwise." */
-	uint64_t rx_link_down                 : 1;  /**< Set when the receive link goes down, which is the same condition that
-                                                         sets BGX_SPU_STATUS2[RCVFLT]. */
-	uint64_t rx_link_up                   : 1;  /**< Set when the receive link comes up, which is the same condition that
-                                                         allows the setting of BGX_SPU_STATUS1[RCV_LNK]. */
+	uint64_t err_blk                      : 1;  /**< Errored block received. Set when an errored BASE-R block is received as described for
+                                                         BGX(0..5)_SPU(0..3)_BR_STATUS2[ERR_BLKS]. Valid if the LPCS type selected by
+                                                         BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE] is 10GBASE-R or 40GBASE-R, and never set otherwise. */
+	uint64_t rx_link_down                 : 1;  /**< Set when the receive link goes down, which is the same condition that sets
+                                                         BGX(0..5)_SPU(0..3)_STATUS2[RCVFLT]. */
+	uint64_t rx_link_up                   : 1;  /**< Set when the receive link comes up, which is the same condition that allows the setting of
+                                                         BGX(0..5)_SPU(0..3)_STATUS1[RCV_LNK]. */
 #else
 	uint64_t rx_link_up                   : 1;
 	uint64_t rx_link_down                 : 1;
@@ -7116,20 +6903,16 @@ typedef union cvmx_bgxx_spux_int cvmx_bgxx_spux_int_t;
 
 /**
  * cvmx_bgx#_spu#_lpcs_states
- *
- * BASE-X Transmit/Receive states
- *
  */
 union cvmx_bgxx_spux_lpcs_states {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_lpcs_states_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_15_63               : 49;
-	uint64_t br_rx_sm                     : 3;  /**< BASE-R Receive State Machine state */
+	uint64_t br_rx_sm                     : 3;  /**< BASE-R receive state machine state */
 	uint64_t reserved_10_11               : 2;
-	uint64_t bx_rx_sm                     : 2;  /**< BASE-X Receive State Machine state */
-	uint64_t deskew_am_found              : 4;  /**< 40GBASE-R deskew state machine alignment marker found flag per
-                                                         logical PCS lane ID. */
+	uint64_t bx_rx_sm                     : 2;  /**< BASE-X receive state machine state */
+	uint64_t deskew_am_found              : 4;  /**< 40GBASE-R deskew state machine alignment marker found flag per logical PCS lane ID. */
 	uint64_t reserved_3_3                 : 1;
 	uint64_t deskew_sm                    : 3;  /**< BASE-X and 40GBASE-R deskew state machine state */
 #else
@@ -7149,60 +6932,58 @@ typedef union cvmx_bgxx_spux_lpcs_states cvmx_bgxx_spux_lpcs_states_t;
 /**
  * cvmx_bgx#_spu#_misc_control
  *
- * "TX_RX polarity:
  * RX logical PCS lane polarity vector [3:0] = XOR_RXPLRT[3:0] ^ [4[RXPLRT]].
- * TX logical PCS lane polarity vector [3:0] = XOR_TXPLRT[3:0] ^ [4[TXPLRT]].
- * In short keep RXPLRT and TXPLRT cleared, and use XOR_RXPLRT and
- * XOR_TXPLRT fields to define the polarity per logical PCS lane. Only bit
- * 0 of vector is used for 10GBASE-R, and only bits 1:0 of vector are used
- * for RXAUI."
+ *  TX logical PCS lane polarity vector [3:0] = XOR_TXPLRT[3:0] ^ [4[TXPLRT]].
+ *  In short, keep RXPLRT and TXPLRT cleared, and use XOR_RXPLRT and XOR_TXPLRT fields to define
+ *  the polarity per logical PCS lane. Only bit 0 of vector is used for 10GBASE-R, and only bits
+ * - 1:0 of vector are used for RXAUI.
  */
 union cvmx_bgxx_spux_misc_control {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_misc_control_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_13_63               : 51;
-	uint64_t rx_packet_dis                : 1;  /**< "Receive packet disable:
-                                                         This bit can be set or cleared by software at any time to gracefully
-                                                         disable or re-enable packet reception by the LPCS. If this bit is
-                                                         set while a packet is being received, the packet is completed and
-                                                         all subsequent received packets are discarded by the LPCS.
-                                                         Similarly, if this bit is cleared while a received packet is being
-                                                         discarded, packet reception resumes after the current packet is
-                                                         fully discarded.
-                                                           When set for a 40GBASE-R or 10GBASE-R LMAC/LPCS type (selected by
-                                                         BGX_CMR_CONFIG[LMAC_TYPE]), received errors and faults will be
-                                                         ignored while receive packets are disarded; idles will be sent to
-                                                         the MAC layer (SMU) and the errored blocks counter
-                                                         (BGX_SPU_BR_STATUS2[ERR_BLKS]) will not increment." */
-	uint64_t skip_after_term              : 1;  /**< "Enable sending of Idle Skip after Terminate:
-                                                         This bit is meaningful when the logical PCS type is XAUI or RXAUI
-                                                         (selected by BGX_CMR_CONFIG[LMAC_TYPE]), and has no effect
-                                                         otherwise. When set, the LMAC/LPCS transmits more Idle Skip columns
-                                                         for clock compensation. Typically set in HiGig/HiGig2 modes.  Clear
-                                                         otherwise." */
-	uint64_t intlv_rdisp                  : 1;  /**< "RXAUI Interleaved Running Disparity:
-                                                         This bit is meaningful when the logical PCS type is RXAUI (LMAC_TYPE
-                                                         = RXAUI in the associated BGX_CMR_CONFIG register in the CMR
-                                                         sub-block), and has no effect otherwise. It selects which disparity
-                                                         calculation to use when combining or splitting the RXAUI lanes, as
+	uint64_t rx_packet_dis                : 1;  /**< Receive packet disable. Software can set or clear this bit at any time to gracefully
+                                                         disable or re-enable packet reception by the LPCS. If this bit is set while a packet is
+                                                         being received, the packet is completed and all subsequent received packets are discarded
+                                                         by the LPCS. Similarly, if this bit is cleared while a received packet is being discarded,
+                                                         packet reception resumes after the current packet is fully discarded. When set for a
+                                                         40GBASE-R or 10GBASE-R LMAC/LPCS type (selected by BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE]),
+                                                         received errors and faults will be ignored while receive packets are discarded; idles will
+                                                         be sent to the MAC layer (SMU) and the errored blocks counter
+                                                         (BGX(0..5)_SPU(0..3)_BR_STATUS2[ERR_BLKS]) will not increment. */
+	uint64_t skip_after_term              : 1;  /**< Enable sending of Idle Skip after Terminate. This bit is meaningful when the logical PCS
+                                                         type is XAUI or RXAUI (selected by BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE]), and has no
+                                                         effect otherwise. When set, the LMAC/LPCS transmits more Idle Skip columns for clock
+                                                         compensation. Typically set in HiGig/HiGig2 modes; clear otherwise. This field can be set
+                                                         to ensure sufficient density of XAUI Idle Skip (||R||) columns with a small transmit
+                                                         inter-frame gap (IFG) in order to allow the link partner's receiver to delete ||R
+                                                         columns as needed for clock rate compensation. It is usually set when the LMAC's transmit
+                                                         IFG is set to 8 bytes in HiGig/HiGig2 modes (i.e. BGX(0..5)_SMU(0..3)_TX_IFG[IFG1] +
+                                                         BGX(0..5)_SMU(0..3)_TX_IFG[IFG2] = 8), and should be cleared when the transmit IFG is
+                                                         greater than 8 bytes. When this bit is set, the SPU will send an ||R|| column after a
+                                                         ||T0|| column (terminate in lane 0) if no ||R|| was sent in the previous IFG. This is a
+                                                         minor deviation from the functionality specified in 802.3-2008 Figure 48-6 (PCS transmit
+                                                         source state diagram), whereby the state will transition directly from SEND_DATA to
+                                                         SEND_RANDOM_R after ||T0|| if no ||R|| was transmitted in the previous IFG. Sending ||R
+                                                         after ||T0|| only (and not ||T1||, |T2|| or ||T3||) ensures that the check_end function at
+                                                         the receiving end, as defined in 802.3-2008 sub-clause 48.2.6.1.4, does not detect an
+                                                         error due to this functional change. When this bit is clear, the LMAC will fully conform
+                                                         to the functionality specified in Figure 48-6. */
+	uint64_t intlv_rdisp                  : 1;  /**< RXAUI interleaved running disparity. This bit is meaningful when the logical PCS type is
+                                                         RXAUI (BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE] = RXAUI), and has no effect otherwise. It
+                                                         selects which disparity calculation to use when combining or splitting the RXAUI lanes, as
                                                          follows:
-                                                         0 = Common Running Disparity: Common running disparity is
-                                                         computed for even and odd code-groups of an RXAUI lane, i.e.
-                                                         interleave lanes before PCS layer As described in the Dune
-                                                         Networks/Broadcom RXAUI v2.1 specification. This obeys
-                                                         6.25GHz serdes disparity.
-                                                         1 = Interleaved Running Disparity: Running disparity is computed
-                                                         separately for even and odd code-groups of an RXAUI lane,
-                                                         i.e. interleave lanes after PCS layer As described in the
-                                                         Marvell RXAUI Interface specification. This does NOT obey
-                                                         6.25GHz serdes disparity." */
+                                                         0 = Common running disparity. Common running disparity is computed for even and odd code-
+                                                         groups of an RXAUI lane, i.e. interleave lanes before PCS layer as described in the Dune
+                                                         Networks/Broadcom RXAUI v2.1 specification. This obeys 6.25GHz serdes disparity.
+                                                         1 = Interleaved running disparity: Running disparity is computed separately for even and
+                                                         odd code-groups of an RXAUI lane, i.e. interleave lanes after PCS layer as described in
+                                                         the Marvell RXAUI Interface specification. This does not obey 6.25GHz SerDes disparity. */
 	uint64_t xor_rxplrt                   : 4;  /**< RX polarity control per logical PCS lane */
 	uint64_t xor_txplrt                   : 4;  /**< TX polarity control per logical PCS lane */
-	uint64_t rxplrt                       : 1;  /**< Receive Polarity
-                                                         1=inverted polarity, 0=normal polarity. */
-	uint64_t txplrt                       : 1;  /**< Transmit Polarity
-                                                         1=inverted polarity, 0=normal polarity. */
+	uint64_t rxplrt                       : 1;  /**< Receive polarity. 1 = inverted polarity, 0 = normal polarity. */
+	uint64_t txplrt                       : 1;  /**< Transmit polarity. 1 = inverted polarity, 0 = normal polarity. */
 #else
 	uint64_t txplrt                       : 1;
 	uint64_t rxplrt                       : 1;
@@ -7220,19 +7001,16 @@ typedef union cvmx_bgxx_spux_misc_control cvmx_bgxx_spux_misc_control_t;
 
 /**
  * cvmx_bgx#_spu#_spd_abil
- *
- * PCS speed ability
- *
  */
 union cvmx_bgxx_spux_spd_abil {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_spd_abil_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
-	uint64_t hundredgb                    : 1;  /**< 100G capable: Always 0. */
-	uint64_t fortygb                      : 1;  /**< 40G capable: Always 1. */
-	uint64_t tenpasst                     : 1;  /**< 10PASS-TS/2BASE-TL capable: Always 0. */
-	uint64_t tengb                        : 1;  /**< 10G capable: Always 1. */
+	uint64_t hundredgb                    : 1;  /**< 100G capable. Always 0. */
+	uint64_t fortygb                      : 1;  /**< 40G capable. Always 1. */
+	uint64_t tenpasst                     : 1;  /**< 10PASS-TS/2BASE-TL capable. Always 0. */
+	uint64_t tengb                        : 1;  /**< 10G capable. Always 1. */
 #else
 	uint64_t tengb                        : 1;
 	uint64_t tenpasst                     : 1;
@@ -7247,32 +7025,25 @@ typedef union cvmx_bgxx_spux_spd_abil cvmx_bgxx_spux_spd_abil_t;
 
 /**
  * cvmx_bgx#_spu#_status1
- *
- * PCS status 1
- *
  */
 union cvmx_bgxx_spux_status1 {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_status1_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_8_63                : 56;
-	uint64_t flt                          : 1;  /**< Fault:
-                                                         1 = Fault condition detected, 0 = No fault condition detected. This
-                                                         bit is a logical OR of the XMTFLT and RCVFLT bits in STATUS2. */
+	uint64_t flt                          : 1;  /**< Fault: 1 = fault condition detected, 0 = no fault condition detected.
+                                                         This bit is a logical OR of
+                                                         BGX(0..5)_SPU(0..3)_STATUS2[XMTFLT, RCVFLT]. */
 	uint64_t reserved_3_6                 : 4;
-	uint64_t rcv_lnk                      : 1;  /**< "PCS Receive Link Status:
-                                                         1 = Receive Link up, 0 = Receive Link down. Latching Low bit; stays
-                                                         clear until a 1 is written by software. For a BASE-X logical PCS type
-                                                         (LMAC_TYPE = XAUI or RXAUI in the associated BGX_CMR_CONFIG register
-                                                         in the CMR sub-block), this is a latching low version of the ALIGND
-                                                         bit in register BX_STATUS. For a BASE-R logical PCS type (LMAC_TYPE =
-                                                         10G_R or 40G_R), this is a latching low version of the RCV_LNK bit in
-                                                         register BR_STATUS1.
-                                                         Note that in order to avoid read side effects, this is implemented as
-                                                         a write-1-to-set bit, rather than latching low read-only as specified
-                                                         in 802.3." */
-	uint64_t lpable                       : 1;  /**< Low-power ability:
-                                                         Always returns 1 to indicate that the LPCS supports low power mode. */
+	uint64_t rcv_lnk                      : 1;  /**< PCS receive link status: 1 = receive link up, 0 = receive link down.
+                                                         This is a latching-low bit; it stays clear until the register is read by software.
+                                                         For a BASE-X logical PCS type (in the associated BGXn_CMRm_CONFIG[LMAC_TYPE] = XAUI or
+                                                         RXAUI), this is a latching-low version of BGXn_SPUm_BX_STATUS[ALIGND].
+                                                         For a BASE-R logical PCS type (in the associated BGXn_CMRm_CONFIG[LMAC_TYPE] = 10G_R or
+                                                         40G_R), this is a latching-low version of BGXn_SPUm_BR_STATUS1[RCV_LNK].
+                                                         Note that in order to avoid read side effects, this is implemented as a write-1-to-set
+                                                         bit, rather than latching low read-only as specified in 802.3. */
+	uint64_t lpable                       : 1;  /**< Low-power ability. Always returns 1 to indicate that the LPCS supports low-power mode. */
 	uint64_t reserved_0_0                 : 1;
 #else
 	uint64_t reserved_0_0                 : 1;
@@ -7289,31 +7060,26 @@ typedef union cvmx_bgxx_spux_status1 cvmx_bgxx_spux_status1_t;
 
 /**
  * cvmx_bgx#_spu#_status2
- *
- * PCS status 2
- *
  */
 union cvmx_bgxx_spux_status2 {
 	uint64_t u64;
 	struct cvmx_bgxx_spux_status2_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t dev                          : 2;  /**< Device Present:
-                                                         Always returns 0x2 to indicate device present at this address. */
+	uint64_t dev                          : 2;  /**< Device present. Always returns 0x2 to indicate a device is present at this address. */
 	uint64_t reserved_12_13               : 2;
-	uint64_t xmtflt                       : 1;  /**< Transmit Fault: The SPU never sets this bit. Always returns 0. */
-	uint64_t rcvflt                       : 1;  /**< "Receive Fault.
-                                                         Latching High bit; stays set until a 1 is written by software.
-                                                         Note that in order to avoid read side effects, this is implemented as
-                                                         a write-1-to-clear bit, rather than latching high read-only as
-                                                         specified in 802.3." */
+	uint64_t xmtflt                       : 1;  /**< Transmit fault. Always returns 0. */
+	uint64_t rcvflt                       : 1;  /**< Receive fault: 1 = receive fault, 0 = no receive fault. Latching high bit; stays set until
+                                                         software writes a 1.
+                                                         Note that in order to avoid read side effects, this is implemented as a write-1-to-clear
+                                                         bit, rather than latching high read-only as specified in 802.3. */
 	uint64_t reserved_6_9                 : 4;
-	uint64_t hundredgb_r                  : 1;  /**< 100GBASE-R capable: Always 0. */
-	uint64_t fortygb_r                    : 1;  /**< 40GBASE-R capable: Always 1. */
-	uint64_t tengb_t                      : 1;  /**< 10GBASE-T capable: Always 0. */
-	uint64_t tengb_w                      : 1;  /**< 10GBASE-W capable: Always 0. */
-	uint64_t tengb_x                      : 1;  /**< 10GBASE-X capable: Always 1. */
-	uint64_t tengb_r                      : 1;  /**< 10GBASE-R capable: Always 1. */
+	uint64_t hundredgb_r                  : 1;  /**< 100GBASE-R capable. Always 0. */
+	uint64_t fortygb_r                    : 1;  /**< 40GBASE-R capable. Always 1. */
+	uint64_t tengb_t                      : 1;  /**< 10GBASE-T capable. Always 0. */
+	uint64_t tengb_w                      : 1;  /**< 10GBASE-W capable. Always 0. */
+	uint64_t tengb_x                      : 1;  /**< 10GBASE-X capable. Always 1. */
+	uint64_t tengb_r                      : 1;  /**< 10GBASE-R capable. Always 1. */
 #else
 	uint64_t tengb_r                      : 1;
 	uint64_t tengb_x                      : 1;
@@ -7336,16 +7102,16 @@ typedef union cvmx_bgxx_spux_status2 cvmx_bgxx_spux_status2_t;
 /**
  * cvmx_bgx#_spu_bist_status
  *
- * "SPU Memory Status: This register provides memory BIST and ECC status
- * from the SPU RX_BUF lane FIFOs"
+ * This register provides memory BIST status from the SPU RX_BUF lane FIFOs.
+ *
  */
 union cvmx_bgxx_spu_bist_status {
 	uint64_t u64;
 	struct cvmx_bgxx_spu_bist_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
-	uint64_t rx_buf_bist_status           : 4;  /**< "SPU RX_BUF BIST status for lanes 3-0: One bit per serdes lane, set
-                                                         to indicate BIST failure for the associated RX_BUF lane FIFO." */
+	uint64_t rx_buf_bist_status           : 4;  /**< SPU RX_BUF BIST status for lanes 3-0. One bit per SerDes lane, set to indicate BIST
+                                                         failure for the associated RX_BUF lane FIFO. */
 #else
 	uint64_t rx_buf_bist_status           : 4;
 	uint64_t reserved_4_63                : 60;
@@ -7357,121 +7123,98 @@ typedef union cvmx_bgxx_spu_bist_status cvmx_bgxx_spu_bist_status_t;
 
 /**
  * cvmx_bgx#_spu_dbg_control
- *
- * SPU Debug Control
- *
  */
 union cvmx_bgxx_spu_dbg_control {
 	uint64_t u64;
 	struct cvmx_bgxx_spu_dbg_control_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_56_63               : 8;
-	uint64_t ms_clk_period                : 12; /**< "Millisecond Clock Period: Specifies the number of microsecond clock
-                                                         ticks per millisecond, minus 1. The default value of 999 (0x3e7)
-                                                         should be used during normal operation; other values may be used for
-                                                         test/debug purposes." */
-	uint64_t us_clk_period                : 12; /**< "Microsecond Clock Period: Specifies the number of SCLK cycles per
-                                                         microseconds, minus 1. For example, if SCLK runs at 1.3 GHz, the
-                                                         number of SCLK cycles per microsecond is 1,300 so the value of this
-                                                         field should be 1,299 (0x513). This is used by the BASE-R BER
-                                                         monitor timers." */
+	uint64_t ms_clk_period                : 12; /**< Millisecond clock period. Specifies the number of microsecond clock ticks per millisecond,
+                                                         minus 1. The default value of 999 (0x3E7) should be used during normal operation; other
+                                                         values may be used for test/debug purposes. */
+	uint64_t us_clk_period                : 12; /**< Microsecond clock period. Specifies the number of SCLK cycles per microseconds, minus 1.
+                                                         For example, if SCLK runs at 1.3 GHz, the number of SCLK cycles per microsecond is 1,300
+                                                         so the value of this field should be 1,299 (0x513). This is used by the BASE-R BER monitor
+                                                         timers. */
 	uint64_t reserved_31_31               : 1;
-	uint64_t br_ber_mon_dis               : 1;  /**< "BASE-R Bit Error Rate Monitor Disable:
-                                                         This bit should be clear for normal oepration. Setting it disables
-                                                         the BASE-R BER monitor state machine defined in 802.3-2008 Figure
-                                                         49-13 for 10GBASE-R and 802.3ba-2010 Figure 82-13 for 40GBASE-R." */
-	uint64_t an_nonce_match_dis           : 1;  /**< "Auto-Negotiation Nonce Match Disable:
-                                                         This bit should be clear for normal oepration. Setting it disables
-                                                         Nonce Match check by forcing nonce_match variable to 0 in the AN
-                                                         arbitration state diagram, as defined in 802.3-2008 Figure 73-11.
-                                                         This bit can be set by software for test purposes, e.g. for running
-                                                         auto-negotiation in loopback mode." */
-	uint64_t timestamp_norm_dis           : 1;  /**< "40GBASE-R RX Timestamp Normalization Disable:
-                                                         This bit controls the generation of the receive SOP timestamp passed
-                                                         to the SMU sub-block for a 40GBASE-R LMAC/LPCS. When this bit is
-                                                         clear, SPU normalizes the receive SOP timestamp in order to
-                                                         compensate for lane-to-lane skew on a 40GBASE-R link, as described
-                                                         below. When this bit is set, timestamp normalization is disabled and
-                                                         SPU directly passes the captured SOP timestamp values to SMU.
-                                                         In 40GBASE-R mode, a packet's SOP block can be transferred on any of
-                                                         the LMAC's lanes. In the presence of lane-to-lane skew, the SOP
-                                                         delay from transmit (by the link partner) to receive by SPU varies
-                                                         depending on which lane is used by the SOP block. This variation
-                                                         reduces the accuracy of the received SOP timestamp relative to when
-                                                         it was transmitted by the link partner.
-                                                         SPU captures the timestamp of the alignment marker received on each
-                                                         serdes lane during align/skew detection; the captured value can be
-                                                         read from the serdes lane's BGX_SPU_SDS_SKEW_STATUS[SKEW_STATUS]
-                                                         field (AM_TIMESTAMP sub-field). If alignment markers are transmitted
-                                                         at about the same time on all lanes by the link partner, then the
-                                                         difference between the AM_TIMESTAMP values for a pair of lanes
-                                                         represents the approximate skew between those lanes.
-                                                         SPU uses the 40GBASE-R LMAC's programmed PCS lane 0 as a reference
-                                                         and computes the AM_TIMESTAMP delta of every other lane relative to
-                                                         PCS lane 0. When normalization is enabled, SPU adjusts the timestamp
-                                                         of a received SOP by subtracting the receiving lane's AM_TIMESTAMP
-                                                         delta from the captured timestamp value. The adjusted/normalized
-                                                         timestamp value is then passed to SMU along with the SOP.
-                                                         Software can determine the actual maximum skew of a 40GBASE-R link
-                                                         by examining the AM_TIMESTAMP values in the BGX_SPU_SDS_SKEW_STATUS
-                                                         registers, and decide if timestamp normalization should be enabled or
-                                                         disabled to improve PTP accuracy. Normalization improves accurary
-                                                         for larger skew values but reduces the accuracy (due to timestamp
-                                                         measurement errors) for small skew values." */
-	uint64_t rx_buf_flip_synd             : 8;  /**< "Flip SPU RX_BUF FIFO ECC bits:
-                                                         Two bits per serdes lane; used to inject single-bit and double-bit
-                                                         errors into the ECC field on writes to the associated SPU RX_BUF
-                                                         lane FIFO, as follows:
-                                                             0x0: normal operation
-                                                             0x1: SBE on ECC bit 0
-                                                             0x2: SBE on ECC bit 1
-                                                             0x3: DBE on ECC bits 1:0
-                                                         " */
-	uint64_t br_pmd_train_soft_en         : 1;  /**< "Enable BASE-R PMD Software Controlled Link Training:
-                                                         This bit configures the operation mode for BASE-R link training for
-                                                         all LMACs and lanes. When this bit is set along with
-                                                         BR_PMD_CONTROL[TRAIN_EN] for a given LMAC, the BASE-R link training
-                                                         protocol for that LMAC is executed under software control, whereby
-                                                         the contents the BR_PMD_LD_CUP and BR_PMD_LD_REP registers are
-                                                         updated by software. When this bit is clear and
-                                                         BR_PMD_CONTROL[TRAIN_EN] is set, the link training protocol is fully
-                                                         automated in hardware, whereby the contents BR_PMD_LD_CUP and
-                                                         BR_PMD_LD_REP registers are automatically updated by hardware." */
-	uint64_t an_arb_link_chk_en           : 1;  /**< "Enable link status checking by AN Arbitration State Machine:
-                                                         When Auto-Negotiation is enabled (AN_EN is set in AN_CONTROL), this
-                                                         bit controls the behavior of the AN arbitration state machine when it
-                                                         reaches the AN GOOD CHECK state after DME pages are successfully
-                                                         exchanged, as defined in Figure 73-11 in 802.3-2008.
-                                                         When this bit is set and the negotiated Highest Common Denominator
-                                                         (HCD) technology matches LMAC_TYPE in BGX_CMR_CONFIG, the AN
-                                                         arbitration SM performs the actions defined for the AN GOOD CHECK
-                                                         state in Figure 73-11, i.e. run the link_fail_inhibit timer and
-                                                         eventually transition to the AN GOOD or TRANSMIT DISABLE state.
-                                                         When this bit is clear or the HCD technology does not match LMAC_TYPE,
-                                                         the AN arbitration SM stay in the AN GOOD CHECK state, with the
-                                                         expectation that software will perform the appropriate actions to
-                                                         complete the Auto-Negotiation protocol, as follows:
-                                                         * If this bit is clear and the HCD technology matches LMAC_TYPE, clear
-                                                           AN_EN in AN_CONTROL.
-                                                         * Otherwise, disable the LPCS by clearing the ENABLE bit in
-                                                           BGX_CMR_CONFIG, clear AN_EN in AN_CONTROL, reconfigure the LPCS with
-                                                           the correct LMAC_TYPE, and re-enable the LPCS by setting ENABLE in
-                                                           BGX_CMR_CONFIG.
-                                                         In both cases, software should implement the link_fail_inhibit timer
-                                                         and verify the link status as specified for the AN GOOD CHECK state.
-                                                         " */
+	uint64_t br_ber_mon_dis               : 1;  /**< BASE-R bit error rate monitor disable. This bit should be clear for normal operation.
+                                                         Setting it disables the BASE-R BER monitor state machine defined in 802.3-2008 Figure
+                                                         49-13 for 10GBASE-R and 802.3ba-2010 Figure 82-13 for 40GBASE-R. */
+	uint64_t an_nonce_match_dis           : 1;  /**< Auto-Negotiation nonce match disable. This bit should be clear for normal operation.
+                                                         Setting it disables Nonce Match check by forcing nonce_match variable to 0 in the Auto-
+                                                         Negotiation arbitration state diagram, as defined in 802.3-2008 Figure 73-11. This bit can
+                                                         be set by software for test purposes, e.g. for running auto-negotiation in loopback mode. */
+	uint64_t timestamp_norm_dis           : 1;  /**< 40GBASE-R RX timestamp normalization disable. This bit controls the generation of the
+                                                         receive SOP timestamp passed to the SMU sub-block for a 40GBASE-R LMAC/LPCS. When this bit
+                                                         is clear, SPU normalizes the receive SOP timestamp in order to compensate for lane-to-lane
+                                                         skew on a 40GBASE-R link, as described below. When this bit is set, timestamp
+                                                         normalization is disabled and SPU directly passes the captured SOP timestamp values to
+                                                         SMU.
+                                                         In 40GBASE-R mode, a packet's SOP block can be transferred on any of the LMAC's lanes. In
+                                                         the presence of lane-to-lane skew, the SOP delay from transmit (by the link partner) to
+                                                         receive by SPU varies depending on which lane is used by the SOP block. This variation
+                                                         reduces the accuracy of the received SOP timestamp relative to when it was transmitted by
+                                                         the link partner.
+                                                         SPU captures the timestamp of the alignment marker received on each SerDes lane during
+                                                         align/skew detection; the captured value can be read from the SerDes lane's
+                                                         BGX(0..5)_SPU_SDS(0..3)_SKEW_STATUS[SKEW_STATUS] field (AM_TIMESTAMP sub-field). If
+                                                         alignment markers are transmitted at about the same time on all lanes by the link partner,
+                                                         then the difference between the AM_TIMESTAMP values for a pair of lanes represents the
+                                                         approximate skew between those lanes.
+                                                         SPU uses the 40GBASE-R LMAC's programmed PCS lane 0 as a reference and computes the
+                                                         AM_TIMESTAMP delta of every other lane relative to PCS lane 0. When normalization is
+                                                         enabled, SPU adjusts the timestamp of a received SOP by subtracting the receiving lane's
+                                                         AM_TIMESTAMP delta from the captured timestamp value. The adjusted/normalized timestamp
+                                                         value is then passed to SMU along with the SOP.
+                                                         Software can determine the actual maximum skew of a 40GBASE-R link by examining the
+                                                         AM_TIMESTAMP values in the BGX(0..5)_SPU_SDS(0..3)_SKEW_STATUS registers, and decide if
+                                                         timestamp normalization should be enabled or disabled to improve PTP accuracy.
+                                                         Normalization improves accuracy for larger skew values but reduces the accuracy (due to
+                                                         timestamp measurement errors) for small skew values. */
+	uint64_t rx_buf_flip_synd             : 8;  /**< Flip SPU RX_BUF FIFO ECC bits. Two bits per SerDes lane; used to inject single-bit and
+                                                         double-bit errors into the ECC field on writes to the associated SPU RX_BUF lane FIFO, as
+                                                         follows:
+                                                         0x0 = Normal operation
+                                                         0x1 = SBE on ECC bit 0
+                                                         0x2 = SBE on ECC bit 1
+                                                         0x3 = DBE on ECC bits 1:0 */
+	uint64_t br_pmd_train_soft_en         : 1;  /**< Enable BASE-R PMD software controlled link training. This bit configures the operation
+                                                         mode for BASE-R link training for all LMACs and lanes. When this bit is set along with
+                                                         BR_PMD_CONTROL[TRAIN_EN] for a given LMAC, the BASE-R link training protocol for that LMAC
+                                                         is executed under software control, whereby the contents the BR_PMD_LD_CUP and
+                                                         BR_PMD_LD_REP registers are updated by software. When this bit is clear and
+                                                         BR_PMD_CONTROL[TRAIN_EN] is set, the link training protocol is fully automated in
+                                                         hardware, whereby the contents BR_PMD_LD_CUP and BR_PMD_LD_REP registers are automatically
+                                                         updated by hardware. */
+	uint64_t an_arb_link_chk_en           : 1;  /**< Enable link status checking by Auto-Negotiation arbitration state machine. When Auto-
+                                                         Negotiation is enabled (BGX(0..5)_SPU(0..3)_AN_CONTROL[AN_EN] is set), this bit controls
+                                                         the behavior of the Auto-Negotiation arbitration state machine when it reaches the AN GOOD
+                                                         CHECK state after DME pages are successfully exchanged, as defined in Figure 73-11 in
+                                                         802.3-2008.
+                                                         When this bit is set and the negotiated highest common denominator (HCD) technology
+                                                         matches BGX(0..5)_CMR(0..3)_CONFIG[LMAC_TYPE], the Auto-Negotiation arbitration SM
+                                                         performs the actions defined for the AN GOOD CHECK state in Figure 73-11, i.e. run the
+                                                         link_fail_inhibit timer and eventually transition to the AN GOOD or TRANSMIT DISABLE
+                                                         state.
+                                                         When this bit is clear or the HCD technology does not match LMAC_TYPE, the AN arbitration
+                                                         SM stay in the AN GOOD CHECK state, with the expectation that software will perform the
+                                                         appropriate actions to complete the Auto-Negotiation protocol, as follows:
+                                                         If this bit is clear and the HCD technology matches LMAC_TYPE, clear AN_EN in AN_CONTROL.
+                                                         Otherwise, disable the LPCS by clearing the BGX(0..5)_CMR(0..3)_CONFIG[ENABLE], clear
+                                                         BGX(0..5)_SPU(0..3)_AN_CONTROL[AN_EN], reconfigure the LPCS with the correct LMAC_TYPE,
+                                                         and re-enable the LPCS by setting BGX(0..5)_CMR(0..3)_CONFIG[ENABLE].
+                                                         In both cases, software should implement the link_fail_inhibit timer and verify the link
+                                                         status as specified for the AN GOOD CHECK state. */
 	uint64_t rx_buf_cor_dis               : 1;  /**< When set, disables ECC correction on all SPU RX_BUF FIFOs. */
-	uint64_t scramble_dis                 : 1;  /**< BASE-R Scrambler/descrambler Disable:
-                                                         Setting this bit to 1 disables the BASE-R scrambler & descrambler
-                                                         functions and FEC PN-2112 scrambler & descrambler functions for
-                                                         debug purposes. */
+	uint64_t scramble_dis                 : 1;  /**< BASE-R Scrambler/descrambler disable. Setting this bit to 1 disables the BASE-R scrambler
+                                                         & descrambler functions and FEC PN-2112 scrambler & descrambler functions for debug
+                                                         purposes. */
 	uint64_t reserved_15_15               : 1;
-	uint64_t marker_rxp                   : 15; /**< BASE-R Alignment Marker Receive Period:
-                                                         For a multi-lane BASE-R logical PCS (i.e. 40GBASE-R), this field
-                                                         specifies the expected alignment marker receive period per lane, i.e.
-                                                         the expected number of received 66b non-marker blocks between
-                                                         consecutive markers on the same lane. The default value corresponds
-                                                         to a period of 16363 blocks (exclusive) as specified in 802.3ba-2010. */
+	uint64_t marker_rxp                   : 15; /**< BASE-R alignment marker receive period. For a multilane BASE-R logical PCS (i.e.
+                                                         40GBASE-R), this field specifies the expected alignment marker receive period per lane,
+                                                         i.e. the expected number of received 66b non-marker blocks between consecutive markers on
+                                                         the same lane. The default value corresponds to a period of 16363 blocks (exclusive) as
+                                                         specified in 802.3ba-2010. */
 #else
 	uint64_t marker_rxp                   : 15;
 	uint64_t reserved_15_15               : 1;
@@ -7495,21 +7238,16 @@ typedef union cvmx_bgxx_spu_dbg_control cvmx_bgxx_spu_dbg_control_t;
 
 /**
  * cvmx_bgx#_spu_mem_int
- *
- * SPU Memory Interrupt
- *
  */
 union cvmx_bgxx_spu_mem_int {
 	uint64_t u64;
 	struct cvmx_bgxx_spu_mem_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_8_63                : 56;
-	uint64_t rx_buf_sbe                   : 4;  /**< "SPU RX_BUF Single-Bit Error for lanes 3-0: One bit per physical
-                                                         serdes lane.  Each bit is set when the associated RX_BUF lane FIFO
-                                                         detects a single-bit ECC error" */
-	uint64_t rx_buf_dbe                   : 4;  /**< "SPU RX_BUF Double-Bit Error for lanes 3-0: One bit per physical
-                                                         serdes lane.  Each bit is set when the associated RX_BUF lane FIFO
-                                                         detects a double-bit ECC error." */
+	uint64_t rx_buf_sbe                   : 4;  /**< SPU RX_BUF single-bit error for lanes 3-0. One bit per physical SerDes lane. Each bit is
+                                                         set when the associated RX_BUF lane FIFO detects a single-bit ECC error. */
+	uint64_t rx_buf_dbe                   : 4;  /**< SPU RX_BUF double-bit error for lanes 3-0. One bit per physical SerDes lane. Each bit is
+                                                         set when the associated RX_BUF lane FIFO detects a double-bit ECC error. */
 #else
 	uint64_t rx_buf_dbe                   : 4;
 	uint64_t rx_buf_sbe                   : 4;
@@ -7523,19 +7261,18 @@ typedef union cvmx_bgxx_spu_mem_int cvmx_bgxx_spu_mem_int_t;
 /**
  * cvmx_bgx#_spu_mem_status
  *
- * "SPU Memory Status: This register provides memory BIST and ECC status
- * from the SPU RX_BUF lane FIFOs"
+ * This register provides memory ECC status from the SPU RX_BUF lane FIFOs.
+ *
  */
 union cvmx_bgxx_spu_mem_status {
 	uint64_t u64;
 	struct cvmx_bgxx_spu_mem_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_32_63               : 32;
-	uint64_t rx_buf_ecc_synd              : 32; /**< "SPU RX_BUF ECC Syndromes for lanes 3-0: 8-bit syndrome sub-field
-                                                         per serdes lane. Each 8-bit sub-field contains the syndrome of the
-                                                         latest single-bit or double-bit ECC error detected by the associated
-                                                         RX_BUF lane FIFO, i.e. it is loaded when the corresponding
-                                                         RX_BUF_SBE or RX_BUF_DBE bit is set in the SPU MEM_INT register." */
+	uint64_t rx_buf_ecc_synd              : 32; /**< SPU RX_BUF ECC syndromes for lanes 3-0. 8-bit syndrome sub-field per SerDes lane. Each
+                                                         8-bit sub-field contains the syndrome of the latest single-bit or double-bit ECC error
+                                                         detected by the associated RX_BUF lane FIFO, i.e. it is loaded when the corresponding
+                                                         RX_BUF_SBE or RX_BUF_DBE bit is set in the SPU MEM_INT register. */
 #else
 	uint64_t rx_buf_ecc_synd              : 32;
 	uint64_t reserved_32_63               : 32;
@@ -7548,7 +7285,7 @@ typedef union cvmx_bgxx_spu_mem_status cvmx_bgxx_spu_mem_status_t;
 /**
  * cvmx_bgx#_spu_sds#_skew_status
  *
- * Serdes lane skew status. One register per physical serdes lane.
+ * This register provides SerDes lane skew status. One register per physical SerDes lane.
  *
  */
 union cvmx_bgxx_spu_sdsx_skew_status {
@@ -7569,7 +7306,7 @@ typedef union cvmx_bgxx_spu_sdsx_skew_status cvmx_bgxx_spu_sdsx_skew_status_t;
 /**
  * cvmx_bgx#_spu_sds#_states
  *
- * Serdes lane states. One register per physical serdes lane.
+ * This register provides SerDes lane states. One register per physical SerDes lane.
  *
  */
 union cvmx_bgxx_spu_sdsx_states {
@@ -7577,25 +7314,25 @@ union cvmx_bgxx_spu_sdsx_states {
 	struct cvmx_bgxx_spu_sdsx_states_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_52_63               : 12;
-	uint64_t am_lock_invld_cnt            : 2;  /**< 40GBASE-R Alignment Marker Lock state machine invalid AM counter */
-	uint64_t am_lock_sm                   : 2;  /**< 40GBASE-R Alignment Marker Lock state machine state */
+	uint64_t am_lock_invld_cnt            : 2;  /**< 40GBASE-R alignment marker lock state machine invalid AM counter */
+	uint64_t am_lock_sm                   : 2;  /**< 40GBASE-R alignment marker lock state machine state */
 	uint64_t reserved_45_47               : 3;
-	uint64_t train_sm                     : 3;  /**< Link Training state machine state */
-	uint64_t train_code_viol              : 1;  /**< Link Training code violation in received Control Channel */
-	uint64_t train_frame_lock             : 1;  /**< Link Training frame lock status */
-	uint64_t train_lock_found_1st_marker  : 1;  /**< Link Training Lock State Machine found first marker flag */
-	uint64_t train_lock_bad_markers       : 3;  /**< Link Training Lock State Machine bad markers counter */
+	uint64_t train_sm                     : 3;  /**< Link training state machine state */
+	uint64_t train_code_viol              : 1;  /**< Link training code violation in received control channel */
+	uint64_t train_frame_lock             : 1;  /**< Link training frame lock status */
+	uint64_t train_lock_found_1st_marker  : 1;  /**< Link training lock state machine found first marker flag */
+	uint64_t train_lock_bad_markers       : 3;  /**< Link training lock state machine bad markers counter */
 	uint64_t reserved_35_35               : 1;
-	uint64_t an_arb_sm                    : 3;  /**< Auto-Negotiation Arbitration State Machine state */
-	uint64_t an_rx_sm                     : 2;  /**< Auto-Negotiation Receive State Machine state */
+	uint64_t an_arb_sm                    : 3;  /**< Auto-Negotiation arbitration state machine state */
+	uint64_t an_rx_sm                     : 2;  /**< Auto-Negotiation receive state machine state */
 	uint64_t reserved_29_29               : 1;
-	uint64_t fec_block_sync               : 1;  /**< FEC Block Sync status */
+	uint64_t fec_block_sync               : 1;  /**< FEC block sync status */
 	uint64_t fec_sync_cnt                 : 4;  /**< FEC block sync state machine good/bad parity block counter */
 	uint64_t reserved_23_23               : 1;
-	uint64_t br_sh_invld_cnt              : 7;  /**< BASE-R Lock State Machine Invalid Sync Header Counter */
-	uint64_t br_block_lock                : 1;  /**< BASE-R Block Lock status */
-	uint64_t br_sh_cnt                    : 11; /**< BASE-R Lock State Machine Sync Header Counter */
-	uint64_t bx_sync_sm                   : 4;  /**< BASE-X PCS Syncronization state machine state */
+	uint64_t br_sh_invld_cnt              : 7;  /**< BASE-R lock state machine invalid sync header counter */
+	uint64_t br_block_lock                : 1;  /**< BASE-R block lock status */
+	uint64_t br_sh_cnt                    : 11; /**< BASE-R lock state machine sync header counter */
+	uint64_t bx_sync_sm                   : 4;  /**< BASE-X PCS synchronization state machine state */
 #else
 	uint64_t bx_sync_sm                   : 4;
 	uint64_t br_sh_cnt                    : 11;
diff --git a/arch/mips/include/asm/octeon/cvmx-ciu-defs.h b/arch/mips/include/asm/octeon/cvmx-ciu-defs.h
index 14021f9..adf01d3 100644
--- a/arch/mips/include/asm/octeon/cvmx-ciu-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-ciu-defs.h
@@ -1364,7 +1364,7 @@ union cvmx_ciu_bist {
 	struct cvmx_ciu_bist_cn61xx           cn66xx;
 	struct cvmx_ciu_bist_s                cn68xx;
 	struct cvmx_ciu_bist_s                cn68xxp1;
-	struct cvmx_ciu_bist_cn61xx           cn70xx;
+	struct cvmx_ciu_bist_cn52xx           cn70xx;
 	struct cvmx_ciu_bist_cn61xx           cnf71xx;
 };
 typedef union cvmx_ciu_bist cvmx_ciu_bist_t;
diff --git a/arch/mips/include/asm/octeon/cvmx-debug.h b/arch/mips/include/asm/octeon/cvmx-debug.h
index 3c3dbf0..acd1aa8 100644
--- a/arch/mips/include/asm/octeon/cvmx-debug.h
+++ b/arch/mips/include/asm/octeon/cvmx-debug.h
@@ -254,24 +254,24 @@ typedef enum {
 
 /* Every field in this struct has to be uint32_t. */
 typedef struct {
-	uint32_t known_cores;
-	uint32_t step_isr;
+	uint64_t known_cores;
+	uint64_t step_isr;
 				/**< True if we are going to step into ISR's. */
-	uint32_t focus_switch;
+	uint64_t focus_switch;
 				/**< Focus can be switched. */
-	uint32_t core_finished;
+	uint64_t core_finished;
 				/**< True if a core has finished and not been processed yet.  */
-	uint32_t command;
+	uint64_t command;
 				/**< Command for all cores (cvmx_debug_command_t) */
-	uint32_t step_all;
+	uint64_t step_all;
 				/**< True if step and continue should affect all cores. False, only the focus core is affected */
-	uint32_t focus_core;
+	uint64_t focus_core;
 				/**< Core currently under control of the debugger */
-	uint32_t active_cores;
+	uint64_t active_cores;
 				/**< Bitmask of cores that should stop on a breakpoint */
-	uint32_t handler_cores;
+	uint64_t handler_cores;
 				/**< Bitmask of cores currently running the exception handler */
-	uint32_t ever_been_in_debug;
+	uint64_t ever_been_in_debug;
 				    /**< True if we have been ever been in the debugger stub at all.  */
 } __attribute__ ((aligned(sizeof(uint64_t)))) cvmx_debug_state_t;
 
diff --git a/arch/mips/include/asm/octeon/cvmx-fpa.h b/arch/mips/include/asm/octeon/cvmx-fpa.h
index 1331635..311cebd 100644
--- a/arch/mips/include/asm/octeon/cvmx-fpa.h
+++ b/arch/mips/include/asm/octeon/cvmx-fpa.h
@@ -42,7 +42,7 @@
  *
  * Interface to the hardware Free Pool Allocator.
  *
- * <hr>$Revision: 85179 $<hr>
+ * <hr>$Revision: 86473 $<hr>
  *
  */
 
@@ -69,6 +69,8 @@ extern "C" {
 #define CVMX_FPA_AURA_NUM       1024
 #define CVMX_FPA_MIN_BLOCK_SIZE 128
 #define CVMX_FPA_ALIGNMENT      128
+#define CVMX_FPA_POOL_NAME_LEN  16
+#define CVMX_FPA_AURA_NAME_LEN  16
 
 /**
  * Structure describing the data format used for stores to the FPA.
@@ -192,7 +194,7 @@ enum fpa_pool_alignment {
  * Structure describing the current state of a FPA pool.
  */
 typedef struct {
-	const char *name;		/**< Name it was created under */
+	char name[CVMX_FPA_POOL_NAME_LEN];	/**< FPA Pool Name */
 	uint64_t size;			/**< Size of each block */
 	void *base;			/**< The base memory address of whole block */
 	uint64_t stack_base;               /**< Base address of stack of FPA pool */
@@ -206,6 +208,7 @@ typedef struct {
  * Structure which contains information on auras.
  */
 typedef struct {
+	char name[CVMX_FPA_AURA_NAME_LEN];
 	int pool_num;
 } cvmx_fpa_aura_info_t;
 
@@ -608,6 +611,7 @@ int cvmx_fpa_release_pool(int pool);
  * the FPA pool with kernel memory as opposed to using bootmem.
  * @param node     - specifies the node of FPA pool.
  * @parma pool     - Specifies the FPA pool number.
+ * @param name     - Specifies the FPA pool name.
  * @param mem_node - specifies the node from which the memory for the stack
  *                   is allocated.
  * @param max_buffer_cnt - specifies the maximum buffers that FPA pool can hold.
@@ -616,8 +620,9 @@ int cvmx_fpa_release_pool(int pool);
  *                         to specify the size of each buffer in the FPA .
  *
  */
-int cvmx_fpa_pool_stack_init(int node, int pool, int mem_node, int max_buffer_cnt,
-			     enum fpa_pool_alignment align, int buffer_sz);
+int cvmx_fpa_pool_stack_init(int node, int pool, char *name, int mem_node,
+		int max_buffer_cnt, enum fpa_pool_alignment align,
+		int buffer_sz);
 
 /**
  * This call will allocated buffers_cnt number of buffers from  the bootmemory
@@ -630,13 +635,14 @@ int cvmx_fpa_pool_stack_init(int node, int pool, int mem_node, int max_buffer_cn
  * in the pool using it's own allocation mechanism.
  * @param node     - specifies the node of aura to be initialized
  * @parma aura     - specifies the aura to be initalized.
+ * @param name     - specifies the name of aura to be initalized.
  * @param mem_node - specifies the node from which the memory for the buffers
  *                   is allocated.
  * @param ptr_dis - Need to look into this more but is on the lines of of whether
  * the hardware checks double frees.
  */
-int cvmx_fpa_aura_init(int node, int aura, int mem_node, int buffers_cnt,
-		       int ptr_dis);
+int cvmx_fpa_aura_init(int node, int aura, char *name, int mem_node,
+		int buffers_cnt, int ptr_dis);
 int cvmx_fpa_config_red_params(int node, int qos_avg_en, int red_lvl_dly, int avg_dly);
 
 /**
@@ -660,6 +666,16 @@ static inline int cvmx_fpa_assign_aura(int node, int aura, int pool_index)
 
 int cvmx_fpa_allocate_auras(int node, int auras_allocated[], int count);
 int cvmx_fpa_free_auras(int node, int *pools_allocated, int count);
+/**
+ * This will allocate count number of FPA pools on the specified node to the
+ * calling application. These pools will be for exclusive use of the application
+ * until they are freed.
+ * @param pools_allocated is an array of length count allocated by the application
+ * before invoking the cvmx_allocate_fpa_pool call. On return it will contain the
+ * index numbers of the pools allocated.
+ * @return 0 on success and -1 on failure.
+ */
+int cvmx_fpa_allocate_fpa_pools(int node, int pools_allocated[], int count);
 #ifdef	__cplusplus
 /* *INDENT-OFF* */
 }
diff --git a/arch/mips/include/asm/octeon/cvmx-global-resources.h b/arch/mips/include/asm/octeon/cvmx-global-resources.h
index 2c329c2..5e7375c 100644
--- a/arch/mips/include/asm/octeon/cvmx-global-resources.h
+++ b/arch/mips/include/asm/octeon/cvmx-global-resources.h
@@ -14,6 +14,7 @@
 #define CVMX_GR_TAG_CLUSTERS(x)	    cvmx_get_gr_tag('c','v','m','_','c','l','u','s','t','e','r','_',(x+'0'),'.','.','.')
 #define CVMX_GR_TAG_CLUSTER_GRP(x)  cvmx_get_gr_tag('c','v','m','_','c','l','g','r','p','_',(x+'0'),'.','.','.','.','.')
 #define CVMX_GR_TAG_STYLE(x)        cvmx_get_gr_tag('c','v','m','_','s','t','y','l','e','_',(x+'0'),'.','.','.','.','.')
+#define CVMX_GR_TAG_QPG_ENTRY(x)    cvmx_get_gr_tag('c','v','m','_','q','p','g','e','t','_',(x+'0'),'.','.','.','.','.')
 #define CVMX_GR_TAG_PCAM(x,y,z) \
 	cvmx_get_gr_tag('c','v','m','_','p','c','a','m','_',(x+'0'),(y+'0'),(z+'0'),'.','.','.','.')
 
diff --git a/arch/mips/include/asm/octeon/cvmx-gpio-defs.h b/arch/mips/include/asm/octeon/cvmx-gpio-defs.h
index 8ec298f..e3e29e6 100644
--- a/arch/mips/include/asm/octeon/cvmx-gpio-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-gpio-defs.h
@@ -1161,21 +1161,28 @@ union cvmx_gpio_usbh_ctl {
 	uint64_t u64;
 	struct cvmx_gpio_usbh_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_0_63                : 64;
+#else
+	uint64_t reserved_0_63                : 64;
+#endif
+	} s;
+	struct cvmx_gpio_usbh_ctl_cn70xx {
+#ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_13_63               : 51;
-	uint64_t sel1                         : 5;  /**< Selects the GPIO(0..19) received data (GPIO_RX_DAT[DAT]) for USB1
-                                                         over-current control. With SEL1 values 20-31,
-                                                         signal is always zero. */
+	uint64_t sel                          : 5;  /**< Selects the GPIO(0..19) received data (GPIO_RX_DAT[DAT]) for USB0
+                                                         over-current control. With SEL0 values 20-31, signal is always zero.
+                                                         CSR read out for bit 12..8 will have SEL1(4..0) value. */
 	uint64_t reserved_5_7                 : 3;
-	uint64_t sel                          : 5;  /**< Selects the GPIO(0..19) input pin for USBH over-current control. With SEL values 20-31,
-                                                         signal is always zero. */
+	uint64_t sel1                         : 5;  /**< Selects the GPIO(0..19) received data (GPIO_RX_DAT[DAT]) USB1
+                                                         over-current control. With SEL1 values 20-31, signal is always zero.
+                                                         CSR read out for bit 4..0 will have SEL(12..8) value. */
 #else
-	uint64_t sel                          : 5;
-	uint64_t reserved_5_7                 : 3;
 	uint64_t sel1                         : 5;
+	uint64_t reserved_5_7                 : 3;
+	uint64_t sel                          : 5;
 	uint64_t reserved_13_63               : 51;
 #endif
-	} s;
-	struct cvmx_gpio_usbh_ctl_s           cn70xx;
+	} cn70xx;
 	struct cvmx_gpio_usbh_ctl_cn78xx {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_5_63                : 59;
diff --git a/arch/mips/include/asm/octeon/cvmx-gserx-defs.h b/arch/mips/include/asm/octeon/cvmx-gserx-defs.h
index 5186903..d9024af 100644
--- a/arch/mips/include/asm/octeon/cvmx-gserx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-gserx-defs.h
@@ -801,15 +801,114 @@ static inline uint64_t CVMX_GSERX_PCIE_TX_VBOOST_LVL(unsigned long block_id)
 #define CVMX_GSERX_PCIE_TX_VBOOST_LVL(block_id) (CVMX_ADD_IO_SEG(0x0001180090080440ull))
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
-static inline uint64_t CVMX_GSERX_PHYX_SCOPE_MASKX(unsigned long a, unsigned long b, unsigned long c)
+static inline uint64_t CVMX_GSERX_PHYX_IDCODE_HI(unsigned long offset, unsigned long block_id)
 {
 	if (!(
-	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((a == 0)) && ((b <= 2)) && ((c <= 7))))))
-		cvmx_warn("CVMX_GSERX_PHYX_SCOPE_MASKX(%lu,%lu,%lu) is invalid on this chip\n", a, b, c);
-	return CVMX_ADD_IO_SEG(0x0001180090000120ull) + ((a) << 0) + ((b) << 19) + ((c) << 3);
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((offset <= 2)) && ((block_id == 0))))))
+		cvmx_warn("CVMX_GSERX_PHYX_IDCODE_HI(%lu,%lu) is invalid on this chip\n", offset, block_id);
+	return CVMX_ADD_IO_SEG(0x0001180090400008ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288;
+}
+#else
+#define CVMX_GSERX_PHYX_IDCODE_HI(offset, block_id) (CVMX_ADD_IO_SEG(0x0001180090400008ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288)
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+static inline uint64_t CVMX_GSERX_PHYX_IDCODE_LO(unsigned long offset, unsigned long block_id)
+{
+	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((offset <= 2)) && ((block_id == 0))))))
+		cvmx_warn("CVMX_GSERX_PHYX_IDCODE_LO(%lu,%lu) is invalid on this chip\n", offset, block_id);
+	return CVMX_ADD_IO_SEG(0x0001180090400000ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288;
+}
+#else
+#define CVMX_GSERX_PHYX_IDCODE_LO(offset, block_id) (CVMX_ADD_IO_SEG(0x0001180090400000ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288)
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+static inline uint64_t CVMX_GSERX_PHYX_LANE0_RX_LBERT_CTL(unsigned long offset, unsigned long block_id)
+{
+	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((offset <= 2)) && ((block_id == 0))))))
+		cvmx_warn("CVMX_GSERX_PHYX_LANE0_RX_LBERT_CTL(%lu,%lu) is invalid on this chip\n", offset, block_id);
+	return CVMX_ADD_IO_SEG(0x00011800904080B0ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288;
+}
+#else
+#define CVMX_GSERX_PHYX_LANE0_RX_LBERT_CTL(offset, block_id) (CVMX_ADD_IO_SEG(0x00011800904080B0ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288)
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+static inline uint64_t CVMX_GSERX_PHYX_LANE0_RX_LBERT_ERR(unsigned long offset, unsigned long block_id)
+{
+	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((offset <= 2)) && ((block_id == 0))))))
+		cvmx_warn("CVMX_GSERX_PHYX_LANE0_RX_LBERT_ERR(%lu,%lu) is invalid on this chip\n", offset, block_id);
+	return CVMX_ADD_IO_SEG(0x00011800904080B8ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288;
+}
+#else
+#define CVMX_GSERX_PHYX_LANE0_RX_LBERT_ERR(offset, block_id) (CVMX_ADD_IO_SEG(0x00011800904080B8ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288)
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+static inline uint64_t CVMX_GSERX_PHYX_LANE0_TXDEBUG(unsigned long offset, unsigned long block_id)
+{
+	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((offset <= 2)) && ((block_id == 0))))))
+		cvmx_warn("CVMX_GSERX_PHYX_LANE0_TXDEBUG(%lu,%lu) is invalid on this chip\n", offset, block_id);
+	return CVMX_ADD_IO_SEG(0x0001180090408080ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288;
+}
+#else
+#define CVMX_GSERX_PHYX_LANE0_TXDEBUG(offset, block_id) (CVMX_ADD_IO_SEG(0x0001180090408080ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288)
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+static inline uint64_t CVMX_GSERX_PHYX_LANE0_TX_LBERT_CTL(unsigned long offset, unsigned long block_id)
+{
+	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((offset <= 2)) && ((block_id == 0))))))
+		cvmx_warn("CVMX_GSERX_PHYX_LANE0_TX_LBERT_CTL(%lu,%lu) is invalid on this chip\n", offset, block_id);
+	return CVMX_ADD_IO_SEG(0x00011800904080A8ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288;
+}
+#else
+#define CVMX_GSERX_PHYX_LANE0_TX_LBERT_CTL(offset, block_id) (CVMX_ADD_IO_SEG(0x00011800904080A8ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288)
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+static inline uint64_t CVMX_GSERX_PHYX_LANE1_RX_LBERT_CTL(unsigned long offset, unsigned long block_id)
+{
+	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((offset <= 2)) && ((block_id == 0))))))
+		cvmx_warn("CVMX_GSERX_PHYX_LANE1_RX_LBERT_CTL(%lu,%lu) is invalid on this chip\n", offset, block_id);
+	return CVMX_ADD_IO_SEG(0x00011800904088B0ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288;
+}
+#else
+#define CVMX_GSERX_PHYX_LANE1_RX_LBERT_CTL(offset, block_id) (CVMX_ADD_IO_SEG(0x00011800904088B0ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288)
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+static inline uint64_t CVMX_GSERX_PHYX_LANE1_RX_LBERT_ERR(unsigned long offset, unsigned long block_id)
+{
+	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((offset <= 2)) && ((block_id == 0))))))
+		cvmx_warn("CVMX_GSERX_PHYX_LANE1_RX_LBERT_ERR(%lu,%lu) is invalid on this chip\n", offset, block_id);
+	return CVMX_ADD_IO_SEG(0x00011800904088B8ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288;
+}
+#else
+#define CVMX_GSERX_PHYX_LANE1_RX_LBERT_ERR(offset, block_id) (CVMX_ADD_IO_SEG(0x00011800904088B8ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288)
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+static inline uint64_t CVMX_GSERX_PHYX_LANE1_TXDEBUG(unsigned long offset, unsigned long block_id)
+{
+	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((offset <= 2)) && ((block_id == 0))))))
+		cvmx_warn("CVMX_GSERX_PHYX_LANE1_TXDEBUG(%lu,%lu) is invalid on this chip\n", offset, block_id);
+	return CVMX_ADD_IO_SEG(0x0001180090408880ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288;
+}
+#else
+#define CVMX_GSERX_PHYX_LANE1_TXDEBUG(offset, block_id) (CVMX_ADD_IO_SEG(0x0001180090408880ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288)
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+static inline uint64_t CVMX_GSERX_PHYX_LANE1_TX_LBERT_CTL(unsigned long offset, unsigned long block_id)
+{
+	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && (((offset <= 2)) && ((block_id == 0))))))
+		cvmx_warn("CVMX_GSERX_PHYX_LANE1_TX_LBERT_CTL(%lu,%lu) is invalid on this chip\n", offset, block_id);
+	return CVMX_ADD_IO_SEG(0x00011800904088A8ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288;
 }
 #else
-#define CVMX_GSERX_PHYX_SCOPE_MASKX(a, b, c) (CVMX_ADD_IO_SEG(0x0001180090000120ull) + ((a) << 0) + ((b) << 19) + ((c) << 3))
+#define CVMX_GSERX_PHYX_LANE1_TX_LBERT_CTL(offset, block_id) (CVMX_ADD_IO_SEG(0x00011800904088A8ull) + (((offset) & 3) + ((block_id) & 0) * 0x0ull) * 524288)
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
 static inline uint64_t CVMX_GSERX_PHY_CTL(unsigned long block_id)
@@ -1219,15 +1318,15 @@ union cvmx_gserx_br_rxx_ctl {
                                                          set the preset bit. When preset is set, RX training is disabled.
                                                          To perform a preset, set this bit prior to setting training enable.
                                                          Note that it is illegal to set both the preset and initialize bits at the same time.
-                                                         - 1: preset is set.  A single CU message is sent to the link partner
-                                                         - 0: preset is clear */
+                                                          1 = Preset is set.  A single CU message is sent to the link partner.
+                                                          0 = Preset is clear. */
 	uint64_t rxt_initialize               : 1;  /**< When in SW Base-R Training Mode, this bit is used to determine how to
                                                          set the initialize bit the the Coefficient Update Message at the start
                                                          of RX training.
                                                          To perform a initialize, set this bit prior to setting training enable.
                                                          Note that it is illegal to set both the preset and initialize bits at the same time.
-                                                         - 1: training starts with initialize set
-                                                         - 0: training starts with initialize clear */
+                                                          1 = Training starts with initialize set.
+                                                          0 = Training starts with initialize clear. */
 #else
 	uint64_t rxt_initialize               : 1;
 	uint64_t rxt_preset                   : 1;
@@ -1276,10 +1375,10 @@ union cvmx_gserx_br_rxx_eer {
                                                          this register will clear this bit. */
 	uint64_t rxt_esm                      : 14; /**< When RX Base-R Link Training is being performed under software control,
                                                          This is the Equalization Status Message from the RAW PCS.
-                                                         bits[13:6]: figure of merit
-                                                         bits[5:4]:  RX recommended TXPOST direction change
-                                                         bits[3:2]:  RX recommended TXMAIN direction change
-                                                         bits[5:4]:  RX recommended TXPRE direction change */
+                                                         bits[13:6]: Figure of merit.
+                                                         bits[5:4]:  RX recommended TXPOST direction change.
+                                                         bits[3:2]:  RX recommended TXMAIN direction change.
+                                                         bits[5:4]:  RX recommended TXPRE direction change. */
 #else
 	uint64_t rxt_esm                      : 14;
 	uint64_t rxt_esv                      : 1;
@@ -1348,9 +1447,6 @@ typedef union cvmx_gserx_br_txx_cu cvmx_gserx_br_txx_cu_t;
 
 /**
  * cvmx_gser#_br_tx#_cur
- *
- * GSER SW Base-R TX Coeffiecient Update Request
- *
  */
 union cvmx_gserx_br_txx_cur {
 	uint64_t u64;
@@ -1400,23 +1496,20 @@ union cvmx_gserx_cfg {
 	struct cvmx_gserx_cfg_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_5_63                : 59;
-	uint64_t bgx_quad                     : 1;  /**< For non-OCI links, this indicates the BGX is
-                                                         in quad aggregation mode when BGX is also set.
+	uint64_t bgx_quad                     : 1;  /**< For non-OCI links, indicates the BGX is
+                                                         in quad aggregation mode when [BGX] is also set.
                                                          A single controller is used for all 4 lanes.
                                                          For OCI links this bit has no meaning. */
-	uint64_t bgx_dual                     : 1;  /**< For non-OCI links, this indicates the BGX is
-                                                         in dual aggregation mode when BGX is also set.
+	uint64_t bgx_dual                     : 1;  /**< For non-OCI links, indicates the BGX is
+                                                         in dual aggregation mode when [BGX] is also set.
                                                          A single controller is used for lanes 0 & 1 and
                                                          another controller is used for lanes 2 & 3.
                                                          For OCI links this bit has no meaning. */
-	uint64_t bgx                          : 1;  /**< For non-OCI links, this indicates the GSER is configured
-                                                         for BGX mode.
-                                                         For OCI links this bit has no meaning. */
-	uint64_t ila                          : 1;  /**< For non-OCI links, this indicates the GSER is configured
-                                                         for ILK/ILA mode.
-                                                         For OCI links, this indicates the GSER is configured
-                                                         for OCI mode. */
-	uint64_t pcie                         : 1;  /**< For non-OCI links, this indicates the GSER is configured
+	uint64_t bgx                          : 1;  /**< For non-OCI links, indicates the GSER is configured for BGX mode. For OCI links this bit
+                                                         has no meaning. */
+	uint64_t ila                          : 1;  /**< For non-OCI links, indicates the GSER is configured for ILK/ILA mode. For OCI links, this
+                                                         indicates the GSER is configured for OCI mode. */
+	uint64_t pcie                         : 1;  /**< For non-OCI links, indicates the GSER is configured
                                                          for PCIE mode.
                                                          For OCI links this bit has no meaning. */
 #else
@@ -2279,19 +2372,8 @@ typedef union cvmx_gserx_dlmx_tx_term_offset cvmx_gserx_dlmx_tx_term_offset_t;
  *
  * RAW PCS Per Lane Global Settings Mode 0 Register
  * Per Lane registers are specific to a paticular lane.
- * The Protocol selects the specific protocol register as follows.
- * P0:  PCIE1
- * P1:  PCIE2
- * P2:  PCIE3
- * P3:  KX
- * P4:  XAUI
- * P5:  KR
- * P6:  SGMII
- * P7:  QSGMII
- * P8:  RXAUI
- * P9:  PCIE1_125
- * P10: PCIE2_125
- * P11: PCIE3_125
+ * The Protocol selects the specific protocol register as
+ * enumerated by GSER_LMODE_E.
  */
 union cvmx_gserx_lanex_px_mode_0 {
 	uint64_t u64;
@@ -2307,16 +2389,16 @@ union cvmx_gserx_lanex_px_mode_0 {
 	uint64_t srate                        : 3;  /**< Used to generate strobe to effectively divide the clock down
                                                          to a slower rate. */
 	uint64_t op_range                     : 1;  /**< When set DFE is enabled.  Otherwise DFE is disabled. */
-	uint64_t tx_mode                      : 2;  /**< TX Data Width.
-                                                         - 00: 8-bit  raw data (not supported)
-                                                         - 01: 10-bit raw data (not supported)
-                                                         - 10: 16-bit raw data (not supported)
-                                                         - 11: 20-bit raw data */
-	uint64_t rx_mode                      : 2;  /**< RX Data Width.
-                                                         - 00: 8-bit  raw data (not supported)
-                                                         - 01: 10-bit raw data (not supported)
-                                                         - 10: 16-bit raw data (not supported)
-                                                         - 11: 20-bit raw data */
+	uint64_t tx_mode                      : 2;  /**< TX Data Width:
+                                                         0x0 = 8-bit  raw data (not supported).
+                                                         0x1 = 10-bit raw data (not supported).
+                                                         0x2 = 16-bit raw data (not supported).
+                                                         0x3 = 20-bit raw data. */
+	uint64_t rx_mode                      : 2;  /**< RX Data Width:
+                                                         0x0 = 8-bit  raw data (not supported).
+                                                         0x1 = 10-bit raw data (not supported).
+                                                         0x2 = 16-bit raw data (not supported).
+                                                         0x3 = 20-bit raw data. */
 #else
 	uint64_t rx_mode                      : 2;
 	uint64_t tx_mode                      : 2;
@@ -2336,32 +2418,20 @@ typedef union cvmx_gserx_lanex_px_mode_0 cvmx_gserx_lanex_px_mode_0_t;
 /**
  * cvmx_gser#_lane#_p#_mode_1
  *
- * RAW PCS Per Lane Global Settings Mode 1 Register
  * Per Lane registers are specific to a paticular lane.
- * The Protocol selects the specific protocol register as follows.
- * P0:  PCIE1
- * P1:  PCIE2
- * P2:  PCIE3
- * P3:  KX
- * P4:  XAUI
- * P5:  KR
- * P6:  SGMII
- * P7:  QSGMII
- * P8:  RXAUI
- * P9:  PCIE1_125
- * P10: PCIE2_125
- * P11: PCIE3_125
+ * The Protocol selects the specific protocol register as
+ * enumerated by GSER_LMODE_E.
  */
 union cvmx_gserx_lanex_px_mode_1 {
 	uint64_t u64;
 	struct cvmx_gserx_lanex_px_mode_1_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t vma_kr_sel                   : 1;  /**< 0: Disabled.  Coarse step adaptation selected
-                                                         - 1: Enabled.  Fine step adaptation selected */
-	uint64_t vma_mm                       : 1;  /**< 0: Adaptive DFE
-                                                         - 1: Manual DFE */
-	uint64_t cdr_fgain                    : 4;  /**< CDR Frequency Gain. */
+	uint64_t vma_kr_sel                   : 1;  /**< 0 = Disabled.  Coarse step adaptation selected.
+                                                         1 = Enabled.  Fine step adaptation selected. */
+	uint64_t vma_mm                       : 1;  /**< 0 = Adaptive DFE.
+                                                         1 = Manual DFE. */
+	uint64_t cdr_fgain                    : 4;  /**< CDR frequency gain. */
 	uint64_t ph_acc_adj                   : 10; /**< Phase accumulator adjust. */
 #else
 	uint64_t ph_acc_adj                   : 10;
@@ -2417,9 +2487,9 @@ union cvmx_gserx_lanex_vma_coarse_ctrl_1 {
 	struct cvmx_gserx_lanex_vma_coarse_ctrl_1_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_10_63               : 54;
-	uint64_t ctle_pmax                    : 4;  /**< RX CTLE Peak maximum value. */
-	uint64_t ctle_pmin                    : 4;  /**< RX CTLE Peak minimum value. */
-	uint64_t ctle_pstep                   : 2;  /**< CTLE Peak Peak step size. */
+	uint64_t ctle_pmax                    : 4;  /**< RX CTLE peak maximum value. */
+	uint64_t ctle_pmin                    : 4;  /**< RX CTLE peak minimum value. */
+	uint64_t ctle_pstep                   : 2;  /**< CTLE peak step size. */
 #else
 	uint64_t ctle_pstep                   : 2;
 	uint64_t ctle_pmin                    : 4;
@@ -2434,17 +2504,17 @@ typedef union cvmx_gserx_lanex_vma_coarse_ctrl_1 cvmx_gserx_lanex_vma_coarse_ctr
 /**
  * cvmx_gser#_lane#_vma_coarse_ctrl_2
  *
- * RAW PCS Per Lane Coarse VMA Control Configuration 2 Register
  * Per Lane registers are specific to a paticular lane.
+ *
  */
 union cvmx_gserx_lanex_vma_coarse_ctrl_2 {
 	uint64_t u64;
 	struct cvmx_gserx_lanex_vma_coarse_ctrl_2_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_10_63               : 54;
-	uint64_t pctle_gmax                   : 4;  /**< RX PRE-CTLE Gain maximum value. */
-	uint64_t pctle_gmin                   : 4;  /**< RX PRE-CTLE Gain minimum value. */
-	uint64_t pctle_gstep                  : 2;  /**< CTLE PRE-Peak Gain step size. */
+	uint64_t pctle_gmax                   : 4;  /**< RX PRE-CTLE gain maximum value. */
+	uint64_t pctle_gmin                   : 4;  /**< RX PRE-CTLE gain minimum value. */
+	uint64_t pctle_gstep                  : 2;  /**< CTLE PRE-peak gain step size. */
 #else
 	uint64_t pctle_gstep                  : 2;
 	uint64_t pctle_gmin                   : 4;
@@ -2479,9 +2549,6 @@ typedef union cvmx_gserx_lane_lpbken cvmx_gserx_lane_lpbken_t;
 
 /**
  * cvmx_gser#_lane_mode
- *
- * GSER Lane Mode
- *
  */
 union cvmx_gserx_lane_mode {
 	uint64_t u64;
@@ -2490,19 +2557,7 @@ union cvmx_gserx_lane_mode {
 	uint64_t reserved_4_63                : 60;
 	uint64_t lmode                        : 4;  /**< For links that are not in PCIE mode (including all OCI links),
                                                          ties to the mac_pcs_lane_mode[3:0] pins of the RAW PCS.
-                                                          0x0: PCIE1
-                                                          0x1: PCIE2
-                                                          0x2: PCIE3
-                                                          0x3: KX
-                                                          0x4: XAUI
-                                                          0x5: KR
-                                                          0x6: SGMII
-                                                          0x7: QSGMII
-                                                          0x8: RXAUI
-                                                          0x9: PCIE1_125
-                                                          0xa: PCIE2_125
-                                                          0xb: PCIE3_125
-                                                          0xc - 0xf: Reserved. */
+                                                         Enumerated by GSER_LMODE_E. */
 #else
 	uint64_t lmode                        : 4;
 	uint64_t reserved_4_63                : 60;
@@ -2534,9 +2589,6 @@ typedef union cvmx_gserx_lane_poff cvmx_gserx_lane_poff_t;
 
 /**
  * cvmx_gser#_lane_srst
- *
- * GSER Lane Soft Reset
- *
  */
 union cvmx_gserx_lane_srst {
 	uint64_t u64;
@@ -2696,17 +2748,22 @@ union cvmx_gserx_pcie_pipe_port_sel {
 	struct cvmx_gserx_pcie_pipe_port_sel_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_3_63                : 61;
-	uint64_t cfg_pem1_lane                : 1;  /**< Configures the PIPE/PHY configuration for PEM1 when all 4 PIPEs are enabled.
-                                                         Only set this bit for the 3x1 PCIe mode.  In all other modes this bit needs
-                                                         to be clear. */
+	uint64_t cfg_pem1_dlm2                : 1;  /**< The PIPE/PHY configuration for PEM1 when in 4-Pipe Mode.
+                                                          Used as status for determining which DLM PEM1 is tied to.
+                                                          This bit should not be set in Single Pipe or 2-Pipe Mode.
+                                                         - 0: PEM1 is tied to DLM1.  This is 3x1 PCIe mode when all 4 PIPES are enabled.
+                                                         - 1: PEM1 is tied to DLM2.  This is 2x1 PCIe mode with SATA */
 	uint64_t pipe_port_sel                : 2;  /**< PIPE enable request.  Change only when phy_reset is asserted.
                                                          - 00: Disables all PIPEs
-                                                         - 01: Enables PIPE0 only.  This is 1x4 PCIe mode.
-                                                         - 10: Enables PIPEs 0 and 1. This is 2x2 PCIe mode or 1x2 PCIe mode with SATA.
-                                                         - 11: Enables PIPEs 0, 1, 2, and 3. This is 2x1 PCIe mode with SATA or 3x1 PCIe mode. */
+                                                         - 01: Single Pipe Mode. Enables PIPE0 only.
+                                                             This is 1x4 PCIe mode.
+                                                         - 10: 2-Pipe Mode.  Enables PIPEs 0 and 1.
+                                                             This is 2x2 PCIe mode or 1x2 PCIe mode with SATA.
+                                                         - 11: 4-Pipe Mode. Enables PIPEs 0, 1, 2, and 3.
+                                                             This is 2x1 PCIe mode with SATA or 3x1 PCIe mode. */
 #else
 	uint64_t pipe_port_sel                : 2;
-	uint64_t cfg_pem1_lane                : 1;
+	uint64_t cfg_pem1_dlm2                : 1;
 	uint64_t reserved_3_63                : 61;
 #endif
 	} s;
@@ -2960,25 +3017,295 @@ union cvmx_gserx_pcie_tx_vboost_lvl {
 typedef union cvmx_gserx_pcie_tx_vboost_lvl cvmx_gserx_pcie_tx_vboost_lvl_t;
 
 /**
- * cvmx_gser#_phy#_scope_mask#
+ * cvmx_gser#_phy#_idcode_hi
+ *
+ * PHY Version Hi.
+ *
+ */
+union cvmx_gserx_phyx_idcode_hi {
+	uint64_t u64;
+	struct cvmx_gserx_phyx_idcode_hi_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_16_63               : 48;
+	uint64_t idcode_hi                    : 16; /**< The PHY version high. */
+#else
+	uint64_t idcode_hi                    : 16;
+	uint64_t reserved_16_63               : 48;
+#endif
+	} s;
+	struct cvmx_gserx_phyx_idcode_hi_s    cn70xx;
+};
+typedef union cvmx_gserx_phyx_idcode_hi cvmx_gserx_phyx_idcode_hi_t;
+
+/**
+ * cvmx_gser#_phy#_idcode_lo
+ *
+ * PHY Version Low.
+ *
+ */
+union cvmx_gserx_phyx_idcode_lo {
+	uint64_t u64;
+	struct cvmx_gserx_phyx_idcode_lo_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_16_63               : 48;
+	uint64_t idcode_lo                    : 16; /**< The PHY version low. */
+#else
+	uint64_t idcode_lo                    : 16;
+	uint64_t reserved_16_63               : 48;
+#endif
+	} s;
+	struct cvmx_gserx_phyx_idcode_lo_s    cn70xx;
+};
+typedef union cvmx_gserx_phyx_idcode_lo cvmx_gserx_phyx_idcode_lo_t;
+
+/**
+ * cvmx_gser#_phy#_lane0_rx_lbert_ctl
+ *
+ * PHY LANE0 RX LBERT Control.
+ *
+ */
+union cvmx_gserx_phyx_lane0_rx_lbert_ctl {
+	uint64_t u64;
+	struct cvmx_gserx_phyx_lane0_rx_lbert_ctl_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_5_63                : 59;
+	uint64_t sync                         : 1;  /**< Synchronizes pattern matcher with incoming data.  A write of a 1
+                                                         to this bit resets the error counter and starts a synchronization of
+                                                         the PM.  Once this bit is set, there is no need to write the field back
+                                                         to a zero. */
+	uint64_t mode                         : 4;  /**< Pattern to match.  When changing modes, the field must be set to zero
+                                                          first.  This field should match what was configured for the TX LBERT
+                                                          Control register.
+                                                         - 0: disabled
+                                                         - 1: lfsr31     X^31 + X^28 + 1
+                                                         - 2: lfsr23     X^23 + X^18 + 1
+                                                         - 3: lfsr15     X^15 + X^14 + 1
+                                                         - 4: lfsr7      X^7 + X^6 + 1
+                                                         - 5: d[n] = d[n-10]
+                                                         - 6: d[n] = !d[n-10]
+                                                         - 7: d[n] = !d[n-20]
+                                                          - 15-8: Reserved. */
+#else
+	uint64_t mode                         : 4;
+	uint64_t sync                         : 1;
+	uint64_t reserved_5_63                : 59;
+#endif
+	} s;
+	struct cvmx_gserx_phyx_lane0_rx_lbert_ctl_s cn70xx;
+};
+typedef union cvmx_gserx_phyx_lane0_rx_lbert_ctl cvmx_gserx_phyx_lane0_rx_lbert_ctl_t;
+
+/**
+ * cvmx_gser#_phy#_lane0_rx_lbert_err
+ *
+ * PHY LANE0 RX LBERT Error.
+ * A read of this register, or a SYNC from the RX LBERT Control register
+ * resets the error count.  If all bits in this regisert are set, the
+ * error counter has saturated.
+ */
+union cvmx_gserx_phyx_lane0_rx_lbert_err {
+	uint64_t u64;
+	struct cvmx_gserx_phyx_lane0_rx_lbert_err_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_16_63               : 48;
+	uint64_t ov14                         : 1;  /**< If this bit is set, and COUNT[15] is also set, signals a overflow of counter. */
+	uint64_t count                        : 15; /**< Current error count if OV14 field is active, then multiply count
+                                                         by 128 to get the actual count. */
+#else
+	uint64_t count                        : 15;
+	uint64_t ov14                         : 1;
+	uint64_t reserved_16_63               : 48;
+#endif
+	} s;
+	struct cvmx_gserx_phyx_lane0_rx_lbert_err_s cn70xx;
+};
+typedef union cvmx_gserx_phyx_lane0_rx_lbert_err cvmx_gserx_phyx_lane0_rx_lbert_err_t;
+
+/**
+ * cvmx_gser#_phy#_lane0_tx_lbert_ctl
+ *
+ * PHY LANE0 TX LBERT Control.
+ *
+ */
+union cvmx_gserx_phyx_lane0_tx_lbert_ctl {
+	uint64_t u64;
+	struct cvmx_gserx_phyx_lane0_tx_lbert_ctl_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_15_63               : 49;
+	uint64_t pat0                         : 10; /**< 10-bit pattern for modes that use this field.  Ignored for
+                                                         other modes. */
+	uint64_t trig_err                     : 1;  /**< Single shot inversion of the LSB of the current symbol.
+                                                         Any write of 1 to this bit will insert an error. */
+	uint64_t mode                         : 4;  /**< Pattern to generate.  When changing modes, the field must be set to zero
+                                                          first.
+                                                         - 0: disabled
+                                                         - 1: lfsr31     X^31 + X^28 + 1
+                                                         - 2: lfsr23     X^23 + X^18 + 1
+                                                         - 3: lfsr15     X^15 + X^14 + 1
+                                                         - 4: lfsr7      X^7 + X^6 + 1
+                                                         - 5: Fixed word (PAT0)
+                                                         - 6: DC-balanced word (PAT0, ~PAT0)
+                                                         - 7: Word pattern (20-bit)
+                                                          - 15-8: Reserved. */
+#else
+	uint64_t mode                         : 4;
+	uint64_t trig_err                     : 1;
+	uint64_t pat0                         : 10;
+	uint64_t reserved_15_63               : 49;
+#endif
+	} s;
+	struct cvmx_gserx_phyx_lane0_tx_lbert_ctl_s cn70xx;
+};
+typedef union cvmx_gserx_phyx_lane0_tx_lbert_ctl cvmx_gserx_phyx_lane0_tx_lbert_ctl_t;
+
+/**
+ * cvmx_gser#_phy#_lane0_txdebug
+ *
+ * PHY LANE0 TX DEBUG.
+ *
+ */
+union cvmx_gserx_phyx_lane0_txdebug {
+	uint64_t u64;
+	struct cvmx_gserx_phyx_lane0_txdebug_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_12_63               : 52;
+	uint64_t rxdet_meas_time              : 8;  /**< Time to wait for rxdet measurement. */
+	uint64_t detrx_always                 : 1;  /**< Always signals 1 for rx_detect ignoring analog. */
+	uint64_t dtb_sel                      : 3;  /**< Selects data to drive on the DTB. */
+#else
+	uint64_t dtb_sel                      : 3;
+	uint64_t detrx_always                 : 1;
+	uint64_t rxdet_meas_time              : 8;
+	uint64_t reserved_12_63               : 52;
+#endif
+	} s;
+	struct cvmx_gserx_phyx_lane0_txdebug_s cn70xx;
+};
+typedef union cvmx_gserx_phyx_lane0_txdebug cvmx_gserx_phyx_lane0_txdebug_t;
+
+/**
+ * cvmx_gser#_phy#_lane1_rx_lbert_ctl
  *
- * Starting count value of PHY Mask register
+ * PHY LANE1 TX LBERT Control.
+ *
+ */
+union cvmx_gserx_phyx_lane1_rx_lbert_ctl {
+	uint64_t u64;
+	struct cvmx_gserx_phyx_lane1_rx_lbert_ctl_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_4_63                : 60;
+	uint64_t sync                         : 1;  /**< Synchronizes pattern matcher with incoming data.  A write of a 1
+                                                         to this bit resets the error counter and starts a synchronization of
+                                                         the PM.  Once this bit is set, there is no need to write the field back
+                                                         to a zero. */
+	uint64_t mode                         : 3;  /**< Pattern to match.  When changing modes, the field must be set to zero
+                                                          first.  This field should match what was configured for the TX LBERT
+                                                          Control register.
+                                                         - 0: disabled
+                                                         - 1: lfsr31     X^31 + X^28 + 1
+                                                         - 2: lfsr23     X^23 + X^18 + 1
+                                                         - 3: lfsr15     X^15 + X^14 + 1
+                                                         - 4: lfsr7      X^7 + X^6 + 1
+                                                         - 5: d[n] = d[n-10]
+                                                         - 6: d[n] = !d[n-10]
+                                                         - 7: d[n] = !d[n-20] */
+#else
+	uint64_t mode                         : 3;
+	uint64_t sync                         : 1;
+	uint64_t reserved_4_63                : 60;
+#endif
+	} s;
+	struct cvmx_gserx_phyx_lane1_rx_lbert_ctl_s cn70xx;
+};
+typedef union cvmx_gserx_phyx_lane1_rx_lbert_ctl cvmx_gserx_phyx_lane1_rx_lbert_ctl_t;
+
+/**
+ * cvmx_gser#_phy#_lane1_rx_lbert_err
  *
+ * PHY LANE1 RX LBERT Error.
+ * A read of this register, or a SYNC from the RX LBERT Control register
+ * resets the error count.  If all bits in this regisert are set, the
+ * error counter has saturated.
  */
-union cvmx_gserx_phyx_scope_maskx {
+union cvmx_gserx_phyx_lane1_rx_lbert_err {
 	uint64_t u64;
-	struct cvmx_gserx_phyx_scope_maskx_s {
+	struct cvmx_gserx_phyx_lane1_rx_lbert_err_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_16_63               : 48;
-	uint64_t mask_val                     : 16; /**< The internal PHY MASK_VAL_N registers. */
+	uint64_t ov14                         : 1;  /**< If this bit is set, and COUNT[15] is also set, signals a overflow of counter. */
+	uint64_t count                        : 15; /**< Current error count if OV14 field is active, then multiply count
+                                                         by 128 to get the actual count. */
 #else
-	uint64_t mask_val                     : 16;
+	uint64_t count                        : 15;
+	uint64_t ov14                         : 1;
 	uint64_t reserved_16_63               : 48;
 #endif
 	} s;
-	struct cvmx_gserx_phyx_scope_maskx_s  cn70xx;
+	struct cvmx_gserx_phyx_lane1_rx_lbert_err_s cn70xx;
 };
-typedef union cvmx_gserx_phyx_scope_maskx cvmx_gserx_phyx_scope_maskx_t;
+typedef union cvmx_gserx_phyx_lane1_rx_lbert_err cvmx_gserx_phyx_lane1_rx_lbert_err_t;
+
+/**
+ * cvmx_gser#_phy#_lane1_tx_lbert_ctl
+ *
+ * PHY LANE1 RX LBERT Control.
+ *
+ */
+union cvmx_gserx_phyx_lane1_tx_lbert_ctl {
+	uint64_t u64;
+	struct cvmx_gserx_phyx_lane1_tx_lbert_ctl_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_15_63               : 49;
+	uint64_t pat0                         : 10; /**< 10-bit pattern for modes that use this field.  Ignored for
+                                                         other modes. */
+	uint64_t trig_err                     : 1;  /**< Single shot inversion of the LSB of the current symbol.
+                                                         Any write of 1 to this bit will insert an error. */
+	uint64_t mode                         : 4;  /**< Pattern to generate.  When changing modes, the field must be set to zero
+                                                          first.
+                                                         - 0: disabled
+                                                         - 1: lfsr31     X^31 + X^28 + 1
+                                                         - 2: lfsr23     X^23 + X^18 + 1
+                                                         - 3: lfsr15     X^15 + X^14 + 1
+                                                         - 4: lfsr7      X^7 + X^6 + 1
+                                                         - 5: Fixed word (PAT0)
+                                                         - 6: DC-balanced word (PAT0, ~PAT0)
+                                                         - 7: Word pattern (20-bit)
+                                                          - 15-8: Reserved. */
+#else
+	uint64_t mode                         : 4;
+	uint64_t trig_err                     : 1;
+	uint64_t pat0                         : 10;
+	uint64_t reserved_15_63               : 49;
+#endif
+	} s;
+	struct cvmx_gserx_phyx_lane1_tx_lbert_ctl_s cn70xx;
+};
+typedef union cvmx_gserx_phyx_lane1_tx_lbert_ctl cvmx_gserx_phyx_lane1_tx_lbert_ctl_t;
+
+/**
+ * cvmx_gser#_phy#_lane1_txdebug
+ *
+ * PHY LANE1 TX DEBUG.
+ *
+ */
+union cvmx_gserx_phyx_lane1_txdebug {
+	uint64_t u64;
+	struct cvmx_gserx_phyx_lane1_txdebug_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_12_63               : 52;
+	uint64_t rxdet_meas_time              : 8;  /**< Time to wait for rxdet measurement. */
+	uint64_t detrx_always                 : 1;  /**< Always signals 1 for rx_detect ignoring analog. */
+	uint64_t dtb_sel                      : 3;  /**< Selects data to drive on the DTB. */
+#else
+	uint64_t dtb_sel                      : 3;
+	uint64_t detrx_always                 : 1;
+	uint64_t rxdet_meas_time              : 8;
+	uint64_t reserved_12_63               : 52;
+#endif
+	} s;
+	struct cvmx_gserx_phyx_lane1_txdebug_s cn70xx;
+};
+typedef union cvmx_gserx_phyx_lane1_txdebug cvmx_gserx_phyx_lane1_txdebug_t;
 
 /**
  * cvmx_gser#_phy_ctl
@@ -2991,9 +3318,9 @@ union cvmx_gserx_phy_ctl {
 	struct cvmx_gserx_phy_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_2_63                : 62;
-	uint64_t phy_pd                       : 1;  /**< Tied to the mac_pcs_refclk_pd pin of the RAW PCS
+	uint64_t phy_pd                       : 1;  /**< Tied to the mac_pcs_refclk_pd pin of the RAW PCS.
                                                          When asserted, the PHY is powered down. */
-	uint64_t phy_reset                    : 1;  /**< Tied to the phy_reset pin of the RAW PCS
+	uint64_t phy_reset                    : 1;  /**< Tied to the phy_reset pin of the RAW PCS.
                                                          When asserted, the PHY is held in reset. */
 #else
 	uint64_t phy_reset                    : 1;
@@ -3029,19 +3356,8 @@ typedef union cvmx_gserx_pipe_lpbk cvmx_gserx_pipe_lpbk_t;
  *
  * RAW PCS PLL Global Settings Mode 0 Register
  * Global registers are shared across the entire PCS
- * The Protocol selects the specific protocol register as follows.
- * P0:  PCIE1
- * P1:  PCIE2
- * P2:  PCIE3
- * P3:  KX
- * P4:  XAUI
- * P5:  KR
- * P6:  SGMII
- * P7:  RXAUI
- * P9:  CEI
- * P9:  PCIE1_125
- * P10: PCIE2_125
- * P11: PCIE3_125
+ * The Protocol selects the specific protocol register as
+ * enumerated by GSER_LMODE_E.
  */
 union cvmx_gserx_pll_px_mode_0 {
 	uint64_t u64;
@@ -3065,21 +3381,9 @@ typedef union cvmx_gserx_pll_px_mode_0 cvmx_gserx_pll_px_mode_0_t;
 /**
  * cvmx_gser#_pll_p#_mode_1
  *
- * RAW PCS PLL Global Settings Mode 0 Register
  * Global registers are shared across the entire PCS
- * The Protocol selects the specific protocol register as follows.
- * P0:  PCIE1
- * P1:  PCIE2
- * P2:  PCIE3
- * P3:  KX
- * P4:  XAUI
- * P5:  KR
- * P6:  SGMII
- * P7:  RXAUI
- * P8:  CEI
- * P9:  PCIE1_125
- * P10: PCIE2_125
- * P11: PCIE3_125
+ * The Protocol selects the specific protocol register as
+ * enumerated by GSER_LMODE_E.
  */
 union cvmx_gserx_pll_px_mode_1 {
 	uint64_t u64;
@@ -3107,16 +3411,13 @@ typedef union cvmx_gserx_pll_px_mode_1 cvmx_gserx_pll_px_mode_1_t;
 
 /**
  * cvmx_gser#_pll_stat
- *
- * GSER PLL Status
- *
  */
 union cvmx_gserx_pll_stat {
 	uint64_t u64;
 	struct cvmx_gserx_pll_stat_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_1_63                : 63;
-	uint64_t pll_lock                     : 1;  /**< This is the RAW PCS PLL Lock indication. */
+	uint64_t pll_lock                     : 1;  /**< RAW PCS PLL lock indication. */
 #else
 	uint64_t pll_lock                     : 1;
 	uint64_t reserved_1_63                : 63;
@@ -3151,19 +3452,16 @@ typedef union cvmx_gserx_qlm_stat cvmx_gserx_qlm_stat_t;
 
 /**
  * cvmx_gser#_refclk_sel
- *
- * GSER Reference Clock Control.
- *
  */
 union cvmx_gserx_refclk_sel {
 	uint64_t u64;
 	struct cvmx_gserx_refclk_sel_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_3_63                : 61;
-	uint64_t pcie_refclk125               : 1;  /**< For non-OCI links, indicates a 125Mhz Reference clock. */
-	uint64_t com_clk_sel                  : 1;  /**< For non-OCI links, this allows the reference clock to
-                                                         be sourced from the external clock mux (when set). */
-	uint64_t use_com1                     : 1;  /**< For non-OCI links, this is the external mux select.
+	uint64_t pcie_refclk125               : 1;  /**< For non-OCI links, indicates a 125 Mhz Reference clock. */
+	uint64_t com_clk_sel                  : 1;  /**< For non-OCI links, when set the reference clock is
+                                                         sourced from the external clock mux. */
+	uint64_t use_com1                     : 1;  /**< For non-OCI links, external mux select.
                                                          When set, qlmc_refclkn/p_1 are selected as the reference clock
                                                          When clear, qlmc_refclkn/p_0 are selected as the reference clock. */
 #else
@@ -3227,8 +3525,8 @@ union cvmx_gserx_rx_eie_detsts {
 	struct cvmx_gserx_rx_eie_detsts_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_12_63               : 52;
-	uint64_t cdrlock                      : 4;  /**< Lane X CDR lock time has been met after the detection of the Electrical
-                                                         Idle Exit condition. */
+	uint64_t cdrlock                      : 4;  /**< Lane X CDR lock time has been met after the detection of the electrical
+                                                         idle exit condition. */
 	uint64_t eiests                       : 4;  /**< Status from lane X's RX indicating the detection of a electical IDLE exit
                                                          condition.  Note that this is a dynamic indication and valid when the
                                                          associated mac_pcs_rx_eie_det_en[3:0] bit is set. */
@@ -3276,11 +3574,11 @@ union cvmx_gserx_rx_pstate {
 	uint64_t reserved_3_63                : 61;
 	uint64_t rxpstate                     : 3;  /**< For links that are not in PCIE mode (including all OCI links),
                                                          ties to the mac_pcs_rx_pstate[3:0] pins of the RAW PCS.
-                                                          - 000:  P0
-                                                          - 001:  P0s
-                                                          - 010:  P1
-                                                          - 011:  P2
-                                                          1xx:  Reserved */
+                                                          0x0 = P0.
+                                                          0x1 = P0s.
+                                                          0x2 = P1.
+                                                          0x3 = P2.
+                                                          else = Reserved. */
 #else
 	uint64_t rxpstate                     : 3;
 	uint64_t reserved_3_63                : 61;
@@ -3300,7 +3598,7 @@ union cvmx_gserx_rxtx_stat {
 	uint64_t reserved_3_63                : 61;
 	uint64_t lmc                          : 1;  /**< For links that are not in PCIE mode (including all OCI links),
                                                          this bit is set for a lane mode change (a write
-                                                         to GSER_LANE_MODE that changes the value of the Lane Mode.
+                                                         to GSER_LANE_MODE) that changes the value of the Lane Mode.
                                                          This bit is clear when each lane acknowledges the change. */
 	uint64_t tpsc                         : 1;  /**< For links that are not in PCIE mode (including all OCI links),
                                                          this bit is set for a TX Power state change (a write
@@ -3640,30 +3938,18 @@ typedef union cvmx_gserx_sata_tx_invert cvmx_gserx_sata_tx_invert_t;
 /**
  * cvmx_gser#_slice#_p#_mode
  *
- * RAW PCS Slice Mode Register
  * Slice Registers are shared across two adjacent lanes. SLICE0 access
  * lane pairs 0 & 1. SLICE1 acceses lane pairs 2 & 3.
- * The Protocol selects the specific protocol register as follows.
- * P0:  PCIE1
- * P1:  PCIE2
- * P2:  PCIE3
- * P3:  KX
- * P4:  XAUI
- * P5:  KR
- * P6:  SGMII
- * P7:  QSGMII
- * P8:  RXAUI
- * P9:  PCIE1_125
- * P10: PCIE2_125
- * P11: PCIE3_125
+ * The Protocol selects the specific protocol register as
+ * enumerated by GSER_LMODE_E.
  */
 union cvmx_gserx_slicex_px_mode {
 	uint64_t u64;
 	struct cvmx_gserx_slicex_px_mode_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_15_63               : 49;
-	uint64_t s_spare                      : 2;  /**< bit 14: enable rx1_div33 clock in the SerDes
-                                                         bit 13: enable rx0_div33 clock in the SerDes */
+	uint64_t s_spare                      : 2;  /**< <14>: Enable rx1_div33 clock in the SerDes.
+                                                         <13>: Enable rx0_div33 clock in the SerDes. */
 	uint64_t ldll_isel                    : 2;  /**< Lane DLL current select. */
 	uint64_t sdll_isel                    : 2;  /**< Slice DLL current select. */
 	uint64_t pi_bwsel                     : 3;  /**< PI bandwidth select. */
@@ -3692,17 +3978,17 @@ union cvmx_gserx_spd {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
 	uint64_t spd                          : 4;  /**< For OCI links,
-                                                         spd[3]: When set, indicates 125Mhz reference clock,
+                                                         spd<3>: When set, indicates 125Mhz reference clock,
                                                                  When clear, indicates 100Mhz reference clock.
-                                                         spd[2:0]:
-                                                         0x0: 1.25G
-                                                         0x1: 2.5G
-                                                         0x2: 3.125G
-                                                         0x3: 5G
-                                                         0x4: 6.25G
-                                                         0x5: 8G
-                                                         0x6: 10G
-                                                         0x7: SW Mode (Phy comes up in powerdown state)
+                                                         spd<2:0>:
+                                                         0x0 = 1.25G
+                                                         0x1 = 2.5G
+                                                         0x2 = 3.125G
+                                                         0x3 = 5G
+                                                         0x4 = 6.25G
+                                                         0x5 = 8G
+                                                         0x6 = 10G
+                                                         0x7 = Software mode, PHY comes up in powerdown state.
                                                          For non-OCI links these bits are not used. */
 #else
 	uint64_t spd                          : 4;
@@ -3742,11 +4028,11 @@ union cvmx_gserx_tx_pstate {
 	uint64_t reserved_3_63                : 61;
 	uint64_t txpstate                     : 3;  /**< For links that are not in PCIE mode (including all OCI links),
                                                          ties to the mac_pcs_tx_pstate[3:0] pins of the RAW PCS.
-                                                          - 000:  P0
-                                                          - 001:  P0s
-                                                          - 010:  P1
-                                                          - 011:  P2
-                                                          1xx:  Reserved. */
+                                                          0x0 = P0.
+                                                          0x1 = P0s.
+                                                          0x2 = P1.
+                                                          0x3 = P2.
+                                                          else = Reserved. */
 #else
 	uint64_t txpstate                     : 3;
 	uint64_t reserved_3_63                : 61;
diff --git a/arch/mips/include/asm/octeon/cvmx-helper-board.h b/arch/mips/include/asm/octeon/cvmx-helper-board.h
index 97aeeb6..545e1f6 100644
--- a/arch/mips/include/asm/octeon/cvmx-helper-board.h
+++ b/arch/mips/include/asm/octeon/cvmx-helper-board.h
@@ -43,7 +43,7 @@
  * Helper functions to abstract board specific data about
  * network ports from the rest of the cvmx-helper files.
  *
- * <hr>$Revision: 77852 $<hr>
+ * <hr>$Revision: 86434 $<hr>
  */
 #ifndef __CVMX_HELPER_BOARD_H__
 #define __CVMX_HELPER_BOARD_H__
@@ -66,12 +66,14 @@ typedef enum {
 	MARVELL_GENERIC_PHY,
  	VITESSE_GENERIC_PHY,
 	CORTINA_PHY,
+ 	INBAND_PHY,
 } cvmx_phy_type_t;
 
 /** Used to record the host mode used by the Cortina CS4321 PHY */
 typedef enum {
 	CVMX_PHY_HOST_MODE_UNKNOWN,
 	CVMX_PHY_HOST_MODE_SGMII,
+	CVMX_PHY_HOST_MODE_QSGMII,
 	CVMX_PHY_HOST_MODE_XAUI,
 	CVMX_PHY_HOST_MODE_RXAUI,
 } cvmx_phy_host_mode_t;
@@ -312,6 +314,19 @@ cvmx_phy_host_mode_t cvmx_helper_board_get_phy_host_mode(int ipd_port);
 int cvmx_helper_board_get_phy_info(cvmx_phy_info_t *phy_info, int ipd_port);
 #endif
 
+/**
+ * @INTERNAL
+ * This function outputs the port flags for the specified interface and port.
+ *
+ * @param interface interface to get the port flags for
+ * @param index     port on interface to get the port flags for
+ * @param[out] pflags port flags for the specified port.  Not modified if the
+ *		      data is unavailable.
+ *
+ * @return 0 for success, -1 if info no available.
+ */
+int __cvmx_helper_board_get_port_flags(int interface, int index);
+
 #ifdef	__cplusplus
 /* *INDENT-OFF* */
 }
diff --git a/arch/mips/include/asm/octeon/cvmx-helper-cfg.h b/arch/mips/include/asm/octeon/cvmx-helper-cfg.h
index 2e88414..fd3e1a5 100644
--- a/arch/mips/include/asm/octeon/cvmx-helper-cfg.h
+++ b/arch/mips/include/asm/octeon/cvmx-helper-cfg.h
@@ -1,5 +1,5 @@
 /***********************license start***************
- * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights
+ * Copyright (c) 2003-2013  Cavium Inc. (support@cavium.com). All rights
  * reserved.
  *
  *
@@ -121,6 +121,9 @@ struct cvmx_cfg_port_param {
 	int8_t ccpp_bpid;
 	int8_t ccpp_pko_port_base;
 	int8_t ccpp_pko_num_ports;
+	bool valid;			/** 1 = port valid, 0 = invalid */
+	bool sgmii_phy_mode;		/** 1 = port in PHY mode, 0 = MAC mode */
+	bool sgmii_1000x_mode;		/** 1 = 1000Base-X mode, 0 = SGMII mode */
 };
 
 /*
@@ -194,7 +197,7 @@ extern int __cvmx_helper_cfg_pknd(int interface, int index);
  */
 extern int __cvmx_helper_cfg_bpid(int interface, int index);
 
-/*
+/**
  * @INTERNAL
  * Return the configured pko_port base for the port
  *
@@ -412,6 +415,49 @@ int init_cvmx_pko_que_range(void);
  */
 void cvmx_pko_queue_free_all(void);
 
+/**
+ * Returns if port is valid for a given interface
+ *
+ * @param interface  interface to check
+ * @param index      port index in the interface
+ *
+ * @return status of the port present or not.
+ */
+int cvmx_helper_is_port_valid(int interface, int index);
+
+/**
+ * Set whether or not a port is valid
+ *
+ * @param interface interface to set
+ * @param index     port index to set
+ * @param valid     set 0 to make port invalid, 1 for valid
+ */
+void cvmx_helper_set_port_valid(int interface, int index, bool valid);
+
+/**
+ * @INTERNAL
+ * Return if port is in PHY mode
+ *
+ * @param interface the interface number
+ * @param index the port's index number
+ *
+ * @return 1 if port is in PHY mode, 0 if port is in MAC mode
+ */
+extern bool cvmx_helper_get_mac_phy_mode(int interface, int index);
+extern void cvmx_helper_set_mac_phy_mode(int interface, int index, bool valid);
+
+/**
+ * @INTERNAL
+ * Return if port is in 1000Base X mode
+ *
+ * @param interface the interface number
+ * @param index the port's index number
+ *
+ * @return 1 if port is in 1000Base X mode, 0 if port is in SGMII mode
+ */
+extern bool cvmx_helper_get_1000x_mode(int interface, int index);
+extern void cvmx_helper_set_1000x_mode(int interface, int index, bool valid);
+
 /*
  * Initializes cvmx with user specified config info.
  */
diff --git a/arch/mips/include/asm/octeon/cvmx-helper-ilk.h b/arch/mips/include/asm/octeon/cvmx-helper-ilk.h
index 9b5a063..83feed0 100644
--- a/arch/mips/include/asm/octeon/cvmx-helper-ilk.h
+++ b/arch/mips/include/asm/octeon/cvmx-helper-ilk.h
@@ -52,6 +52,37 @@ extern int __cvmx_helper_ilk_enumerate(int interface);
 
 /**
  * @INTERNAL
+ * Initialize all calendar entries to the xoff state. This
+ * means no data is sent or received.
+ *
+ * @param interface Interface whose calendar are to be initialized.
+ */
+extern void __cvmx_ilk_init_cal(int interface);
+
+/**
+ * @INTERNAL
+ * Setup the channel's tx calendar entry.
+ *
+ * @param interface Interface channel belongs to
+ * @param channel Channel whose calendar entry is to be updated
+ * @param bpid Bpid assigned to the channel
+ */
+extern void __cvmx_ilk_write_tx_cal_entry(int interface, int channel,
+					  unsigned char bpid);
+
+/**
+ * @INTERNAL
+ * Setup the channel's rx calendar entry.
+ *
+ * @param interface Interface channel belongs to
+ * @param channel Channel whose calendar entry is to be updated
+ * @param pipe PKO assigned to the channel
+ */
+void __cvmx_ilk_write_rx_cal_entry(int interface, int channel,
+				   unsigned char pipe);
+
+/**
+ * @INTERNAL
  * Probe a ILK interface and determine the number of ports
  * connected to it. The ILK interface should still be down after
  * this call.
diff --git a/arch/mips/include/asm/octeon/cvmx-helper-util.h b/arch/mips/include/asm/octeon/cvmx-helper-util.h
index 4b3f606..7c67709 100644
--- a/arch/mips/include/asm/octeon/cvmx-helper-util.h
+++ b/arch/mips/include/asm/octeon/cvmx-helper-util.h
@@ -42,7 +42,7 @@
  *
  * Small helper utilities.
  *
- * <hr>$Revision: 84558 $<hr>
+ * <hr>$Revision: 86308 $<hr>
  */
 
 #ifndef __CVMX_HELPER_UTIL_H__
@@ -60,11 +60,9 @@ typedef char cvmx_bpid_t;
 #define CVMX_MAX_PKND		((cvmx_pknd_t) 64)
 #define CVMX_MAX_BPID		((cvmx_bpid_t) 64)
 
-#define CVMX_HELPER_MAX_IFACE		9
+#define CVMX_HELPER_MAX_IFACE		10
 #define CVMX_HELPER_MAX_PORTS		16
 
-extern CVMX_SHARED bool __cvmx_helper_port_invalid[CVMX_HELPER_MAX_IFACE][CVMX_HELPER_MAX_PORTS];
-
 /**
  * Convert a interface mode into a human readable string
  *
@@ -327,26 +325,6 @@ extern int cvmx_helper_get_interface_num(int ipd_port);
 extern int cvmx_helper_get_interface_index_num(int ipd_port);
 
 /**
- * Returns if port is valid for a given interface
- *
- * @param interface  interface to check
- * @param index      port index in the interface
- *
- * @return status of the port present or not.
- */
-extern int cvmx_helper_is_port_valid(int interface, int index);
-
-/**
- * Set the value returned by cvmx_helper_is_port_valid()
- *
- * @param interface  interface to check
- * @param index      port index in the interface
- * @param valid      true or false.
- *
- */
-void cvmx_helper_set_port_valid(int interface, int index, bool valid);
-
-/**
  * Get port kind for a given port in an interface.
  *
  * @param interface  Interface
diff --git a/arch/mips/include/asm/octeon/cvmx-helper.h b/arch/mips/include/asm/octeon/cvmx-helper.h
index 4333946..5ea02cd 100644
--- a/arch/mips/include/asm/octeon/cvmx-helper.h
+++ b/arch/mips/include/asm/octeon/cvmx-helper.h
@@ -42,7 +42,7 @@
  *
  * Helper functions for common, but complicated tasks.
  *
- * <hr>$Revision: 84302 $<hr>
+ * <hr>$Revision: 86434 $<hr>
  */
 
 #ifndef __CVMX_HELPER_H__
@@ -110,6 +110,8 @@ extern "C" {
         CVMX_HELPER_WRITE_CSR(CVMX_HELPER_CSR_INIT_READ, chcsr_csr,     \
             chcsr_type, chcsr_chip, chcsr_fld, chcsr_val)
 
+/* These flags are passed to __cvmx_helper_packet_hardware_enable */
+
 typedef enum {
 	CVMX_HELPER_INTERFACE_MODE_DISABLED,
 	CVMX_HELPER_INTERFACE_MODE_RGMII,
@@ -170,6 +172,17 @@ void cvmx_rgmii_set_back_pressure(uint64_t backpressure_dis);
 extern CVMX_SHARED void (*cvmx_override_pko_queue_priority) (int ipd_port, uint64_t * priorities);
 
 /**
+ * cvmx_override_iface_phy_mode(int interface, int index) is a function pointer.
+ * It is meant to allow customization of interfaces which do not have a PHY.
+ *
+ * @returns 0 if MAC decides TX_CONFIG_REG or 1 if PHY decides  TX_CONFIG_REG.
+ *
+ * If this function pointer is NULL then it defaults to the MAC.
+ */
+extern CVMX_SHARED int (*cvmx_override_iface_phy_mode) (int interface,
+							int index);
+
+/**
  * cvmx_override_ipd_port_setup(int ipd_port) is a function
  * pointer. It is meant to allow customization of the IPD port/port kind
  * setup before packet input/output comes online. It is called
diff --git a/arch/mips/include/asm/octeon/cvmx-ilk-defs.h b/arch/mips/include/asm/octeon/cvmx-ilk-defs.h
index 0420bfa..85c4fa7 100644
--- a/arch/mips/include/asm/octeon/cvmx-ilk-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-ilk-defs.h
@@ -1894,7 +1894,7 @@ union cvmx_ilk_rxx_cfg0 {
                                                          Supported range:
                                                          ILK_RX(0..1)_CFG1[SKIP_CNT] + 32 < MFRM_LEN <= 4096 */
 	uint64_t brst_shrt                    : 7;  /**< Minimum interval between burst control words, as a multiple of eight bytes. Supported
-                                                         range from 8 to 512 bytes (i.e. 0 < BRST_SHRT <= 64).
+                                                         range from 8 to 512 bytes (i.e. 4 <= BRST_SHRT <= 64).
                                                          This field affects the ILK_RX(0..1)_STAT4[BRST_SHRT_ERR_CNT] counter. It does not affect
                                                          correct operation of the link. */
 	uint64_t lane_rev                     : 1;  /**< Lane reversal. When enabled, lane destriping is performed from most-significant lane
@@ -4071,7 +4071,11 @@ union cvmx_ilk_txx_cfg1 {
 	uint64_t u64;
 	struct cvmx_ilk_txx_cfg1_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t reserved_43_63               : 21;
+	uint64_t reserved_53_63               : 11;
+	uint64_t brst_min                     : 5;  /**< Minimum size of a data burst, as a multiple of 32-byte blocks. 0 disables the scheduling
+                                                         enhancement. When non-zero, must satisfy:
+                                                         (BRST_SHRT*8) <= (BRST_MIN*32) <= (BRST_MAX*64)/2. */
+	uint64_t reserved_43_47               : 5;
 	uint64_t ser_limit                    : 10; /**< Reduce latency by limiting the amount of data in flight for each SerDes.
                                                          SER_LIMIT >= (((17 + NUM_LANES) * (BAUD/SCLK/20)) + 4) * 20.
                                                          For instance, for sclk=1.1GHz,BAUD=10.3125,NUM_LANES=16 :
@@ -4116,7 +4120,9 @@ union cvmx_ilk_txx_cfg1 {
 	uint64_t pipe_crd_dis                 : 1;
 	uint64_t pkt_busy                     : 1;
 	uint64_t ser_limit                    : 10;
-	uint64_t reserved_43_63               : 21;
+	uint64_t reserved_43_47               : 5;
+	uint64_t brst_min                     : 5;
+	uint64_t reserved_53_63               : 11;
 #endif
 	} s;
 	struct cvmx_ilk_txx_cfg1_cn68xx {
diff --git a/arch/mips/include/asm/octeon/cvmx-ilk.h b/arch/mips/include/asm/octeon/cvmx-ilk.h
index a2c59a9..815fed1 100644
--- a/arch/mips/include/asm/octeon/cvmx-ilk.h
+++ b/arch/mips/include/asm/octeon/cvmx-ilk.h
@@ -61,11 +61,15 @@ extern "C" {
 
 /* CSR typedefs have been moved to cvmx-ilk-defs.h */
 
+/*
+ * Note: this macro must match the first ilk port in the ipd_port_map_68xx[]
+ * and ipd_port_map_78xx[] arrays.
+ */
 static inline int CVMX_ILK_GBL_BASE(void) {
 	if (OCTEON_IS_MODEL(OCTEON_CN68XX))
 		return 5;
 	if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-		return 5;
+		return 6;
 	return -1;
 }
 static inline int CVMX_ILK_QLM_BASE(void) {
@@ -126,6 +130,7 @@ typedef struct {
 } cvmx_ilk_stats_ctrl_t;
 
 #define CVMX_ILK_MAX_CAL      288
+#define CVMX_ILK_MAX_CAL_IDX  (CVMX_ILK_MAX_CAL / 8)
 #define CVMX_ILK_TX_MIN_CAL   1
 #define CVMX_ILK_RX_MIN_CAL   1
 #define CVMX_ILK_CAL_GRP_SZ   8
diff --git a/arch/mips/include/asm/octeon/cvmx-iob-defs.h b/arch/mips/include/asm/octeon/cvmx-iob-defs.h
index 19c8ef0..15e3be7 100644
--- a/arch/mips/include/asm/octeon/cvmx-iob-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-iob-defs.h
@@ -526,7 +526,20 @@ union cvmx_iob_chip_cur_pwr {
 	struct cvmx_iob_chip_cur_pwr_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_8_63                : 56;
-	uint64_t current_power_setting        : 8;  /**< Current Power Setting. */
+	uint64_t current_power_setting        : 8;  /**< Global throttling value currently being used.
+                                                         Throttling can force units (CPU cores, in particular) idle for a
+                                                         portion of time, which will reduce power consumption.  When
+                                                         CURRENT_POWER_SETTING is equal to zero, the unit is idle most
+                                                         of the time and consumes minimum power. When CURRENT_POWER_SETTING
+                                                         is equal to 0xFF, units are never idled to reduce power.
+                                                         The hardware generally uses a CURRENT_POWER_SETTING value that
+                                                         is as large as possible (in order to maximize performance) subject
+                                                         to the following constraints (in priority order):
+                                                           - PWR_MIN <= CURRENT_POWER_SETTING <= PWR_MAX
+                                                           - Power limits from the PWR_SETTING feedback control system
+                                                         In the case of the CPU cores, CURRENT_POWER_SETTING effectively
+                                                         limits the CP0 PowThrottle[POWLIM] value:
+                                                           effective POWLIM = MINIMUM(CURRENT_POWER_SETTING,PowThrottle[POWLIM]) */
 #else
 	uint64_t current_power_setting        : 8;
 	uint64_t reserved_8_63                : 56;
@@ -547,10 +560,37 @@ union cvmx_iob_chip_glb_pwr_throttle {
 	struct cvmx_iob_chip_glb_pwr_throttle_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_34_63               : 30;
-	uint64_t pwr_bw                       : 2;  /**< Power BW. */
-	uint64_t pwr_max                      : 8;  /**< Max power setting in ma/Ghz. */
-	uint64_t pwr_min                      : 8;  /**< Min power setting in ma/Ghz. */
-	uint64_t pwr_setting                  : 16; /**< in ma/Ghz. */
+	uint64_t pwr_bw                       : 2;  /**< Configures the reaction time of the closed-loop feedback
+                                                         control system for the AVG_CHIP_POWER power approximation.
+                                                         Higher numbers decrease bandwidth, reducing response time,
+                                                         which could lead to greater tracking error, but reduce
+                                                         ringing. */
+	uint64_t pwr_max                      : 8;  /**< Maximum allowed CURRENT_POWER_SETTING value. PWR_MAX must
+                                                         be >= PWR_MIN. */
+	uint64_t pwr_min                      : 8;  /**< Minimum allowed CURRENT_POWER_SETTING value. PWR_MIN must
+                                                         be <= PWR_MAX.
+                                                         We recommend a PWR_MIN value larger than zero to set a
+                                                         minimum performance level in case PWR_SETTING is set to
+                                                         an unreachable goal. See the CPU CP0 PowThrottle description.
+                                                         PWR_MIN = 50% of PowThrottle[MAXPOW] could be a good
+                                                         choice, for example. */
+	uint64_t pwr_setting                  : 16; /**< A power limiter for the chip.
+                                                         A limiter of the power consumption of the chip. This power
+                                                         limiting is implemented by a closed-loop feedback control
+                                                         system for the AVG_CHIP_POWER power approximation. The
+                                                         direct output of the PWR_SETTING feedback control system
+                                                         is the CURRENT_POWER_SETTING value. The power consumed
+                                                         by the chip (estimated currently by the AVG_CHIP_POWER
+                                                         value) is an indirect output of the PWR_SETTING feedback
+                                                         control system.
+                                                         PWR_SETTING is not used by the hardware when PWR_MIN equals
+                                                         PWR_MAX. PWR_MIN and PWR_MAX threshold requirements always
+                                                         supercede PWR_SETTING limits. (For maximum PWR_SETTING
+                                                         feedback control freedom, set PWR_MIN=0 and PWR_MAX=0xff.)
+                                                         PWR_SETTING equal to 0 forces the chip to consume near
+                                                         minimum power. Increasing PWR_SETTING value from 0 to
+                                                         0xffff increases the power that the chip is alloed to
+                                                         consume linearly (roughly) from minimum to maximum. */
 #else
 	uint64_t pwr_setting                  : 16;
 	uint64_t pwr_min                      : 8;
@@ -573,15 +613,26 @@ union cvmx_iob_chip_pwr_out {
 	uint64_t u64;
 	struct cvmx_iob_chip_pwr_out_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t cmb_pwr                      : 16; /**< CMB Power number. */
-	uint64_t chip_power                   : 16; /**< Total Chip Power number. */
-	uint64_t roc_power                    : 16; /**< Total ROC Power. */
-	uint64_t avg_chip_power               : 16; /**< Avg chip power. */
+	uint64_t cpu_pwr                      : 16; /**< An estimate of the current CPU core complex power consumption.
+                                                         The CPU core complex includes the caches and DRAM controller(s),
+                                                         as well as all CPU cores. Linearly larger values indicate linearly
+                                                         higher power consumption. This power consumption estimate is
+                                                         energy per core clock. */
+	uint64_t chip_power                   : 16; /**< An estimate of the current total power consumption by the chip.
+                                                         Linearly larger values indicate linearly higher power consumption.
+                                                         CHIP_POWER is the sum of CPU_POWER and COPROC_POWER. */
+	uint64_t coproc_power                 : 16; /**< An estimate of the current coprocessor power consumption.
+                                                         Linearly larger values indicate linearly higher power consumption.
+                                                         This estimate is energy per core clock, and will
+                                                         generally decrease as the ratio of core to coprocessor clock
+                                                         speed increases. */
+	uint64_t avg_chip_power               : 16; /**< An average of CHIP_POWER, calculated using an IIR filter with
+                                                         an average weight of 16K core clocks. */
 #else
 	uint64_t avg_chip_power               : 16;
-	uint64_t roc_power                    : 16;
+	uint64_t coproc_power                 : 16;
 	uint64_t chip_power                   : 16;
-	uint64_t cmb_pwr                      : 16;
+	uint64_t cpu_pwr                      : 16;
 #endif
 	} s;
 	struct cvmx_iob_chip_pwr_out_s        cn70xx;
diff --git a/arch/mips/include/asm/octeon/cvmx-iobn-defs.h b/arch/mips/include/asm/octeon/cvmx-iobn-defs.h
index e25c8ff..7dc85be 100644
--- a/arch/mips/include/asm/octeon/cvmx-iobn-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-iobn-defs.h
@@ -247,7 +247,20 @@ union cvmx_iobn_chip_cur_pwr {
 	struct cvmx_iobn_chip_cur_pwr_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_8_63                : 56;
-	uint64_t current_power_setting        : 8;  /**< Current power setting. */
+	uint64_t current_power_setting        : 8;  /**< Global throttling value currently being used.
+                                                         Throttling can force units (CPU cores, in particular) idle for a
+                                                         portion of time, which will reduce power consumption.  When
+                                                         CURRENT_POWER_SETTING is equal to zero, the unit is idle most
+                                                         of the time and consumes minimum power. When CURRENT_POWER_SETTING
+                                                         is equal to 0xFF, units are never idled to reduce power.
+                                                         The hardware generally uses a CURRENT_POWER_SETTING value that
+                                                         is as large as possible (in order to maximize performance) subject
+                                                         to the following constraints (in priority order):
+                                                           - PWR_MIN <= CURRENT_POWER_SETTING <= PWR_MAX
+                                                           - Power limits from the PWR_SETTING feedback control system
+                                                         In the case of the CPU cores, CURRENT_POWER_SETTING effectively
+                                                         limits the CP0 PowThrottle[POWLIM] value:
+                                                           effective POWLIM = MINIMUM(CURRENT_POWER_SETTING,PowThrottle[POWLIM]) */
 #else
 	uint64_t current_power_setting        : 8;
 	uint64_t reserved_8_63                : 56;
@@ -268,10 +281,37 @@ union cvmx_iobn_chip_glb_pwr_throttle {
 	struct cvmx_iobn_chip_glb_pwr_throttle_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_34_63               : 30;
-	uint64_t pwr_bw                       : 2;  /**< Power BW. */
-	uint64_t pwr_max                      : 8;  /**< Max power setting in ma/Ghz. */
-	uint64_t pwr_min                      : 8;  /**< Min power setting in ma/Ghz. */
-	uint64_t pwr_setting                  : 16; /**< in ma/Ghz. */
+	uint64_t pwr_bw                       : 2;  /**< Configures the reaction time of the closed-loop feedback
+                                                         control system for the AVG_CHIP_POWER power approximation.
+                                                         Higher numbers decrease bandwidth, reducing response time,
+                                                         which could lead to greater tracking error, but reduce
+                                                         ringing. */
+	uint64_t pwr_max                      : 8;  /**< Maximum allowed CURRENT_POWER_SETTING value. PWR_MAX must
+                                                         be >= PWR_MIN. */
+	uint64_t pwr_min                      : 8;  /**< Minimum allowed CURRENT_POWER_SETTING value. PWR_MIN must
+                                                         be <= PWR_MAX.
+                                                         We recommend a PWR_MIN value larger than zero to set a
+                                                         minimum performance level in case PWR_SETTING is set to
+                                                         an unreachable goal. See the CPU CP0 PowThrottle description.
+                                                         PWR_MIN = 50% of PowThrottle[MAXPOW] could be a good
+                                                         choice, for example. */
+	uint64_t pwr_setting                  : 16; /**< A power limiter for the chip.
+                                                         A limiter of the power consumption of the chip. This power
+                                                         limiting is implemented by a closed-loop feedback control
+                                                         system for the AVG_CHIP_POWER power approximation. The
+                                                         direct output of the PWR_SETTING feedback control system
+                                                         is the CURRENT_POWER_SETTING value. The power consumed
+                                                         by the chip (estimated currently by the AVG_CHIP_POWER
+                                                         value) is an indirect output of the PWR_SETTING feedback
+                                                         control system.
+                                                         PWR_SETTING is not used by the hardware when PWR_MIN equals
+                                                         PWR_MAX. PWR_MIN and PWR_MAX threshold requirements always
+                                                         supercede PWR_SETTING limits. (For maximum PWR_SETTING
+                                                         feedback control freedom, set PWR_MIN=0 and PWR_MAX=0xff.)
+                                                         PWR_SETTING equal to 0 forces the chip to consume near
+                                                         minimum power. Increasing PWR_SETTING value from 0 to
+                                                         0xffff increases the power that the chip is alloed to
+                                                         consume linearly (roughly) from minimum to maximum. */
 #else
 	uint64_t pwr_setting                  : 16;
 	uint64_t pwr_min                      : 8;
@@ -294,15 +334,26 @@ union cvmx_iobn_chip_pwr_out {
 	uint64_t u64;
 	struct cvmx_iobn_chip_pwr_out_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t cmb_pwr                      : 16; /**< CMB power number. */
-	uint64_t chip_power                   : 16; /**< Total chip power number. */
-	uint64_t roc_power                    : 16; /**< Total ROC power. */
-	uint64_t avg_chip_power               : 16; /**< Average chip power. */
+	uint64_t cpu_pwr                      : 16; /**< An estimate of the current CPU core complex power consumption.
+                                                         The CPU core complex includes the caches and DRAM controller(s),
+                                                         as well as all CPU cores. Linearly larger values indicate linearly
+                                                         higher power consumption. This power consumption estimate is
+                                                         energy per core clock. */
+	uint64_t chip_power                   : 16; /**< An estimate of the current total power consumption by the chip.
+                                                         Linearly larger values indicate linearly higher power consumption.
+                                                         CHIP_POWER is the sum of CPU_POWER and COPROC_POWER. */
+	uint64_t coproc_power                 : 16; /**< An estimate of the current coprocessor power consumption.
+                                                         Linearly larger values indicate linearly higher power consumption.
+                                                         This estimate is energy per core clock, and will
+                                                         generally decrease as the ratio of core to coprocessor clock
+                                                         speed increases. */
+	uint64_t avg_chip_power               : 16; /**< An average of CHIP_POWER, calculated using an IIR filter with
+                                                         an average weight of 16K core clocks. */
 #else
 	uint64_t avg_chip_power               : 16;
-	uint64_t roc_power                    : 16;
+	uint64_t coproc_power                 : 16;
 	uint64_t chip_power                   : 16;
-	uint64_t cmb_pwr                      : 16;
+	uint64_t cpu_pwr                      : 16;
 #endif
 	} s;
 	struct cvmx_iobn_chip_pwr_out_s       cn78xx;
diff --git a/arch/mips/include/asm/octeon/cvmx-l2c-defs.h b/arch/mips/include/asm/octeon/cvmx-l2c-defs.h
index d95e06a..c7718aa 100644
--- a/arch/mips/include/asm/octeon/cvmx-l2c-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-l2c-defs.h
@@ -1417,6 +1417,9 @@ static inline uint64_t CVMX_L2C_XMDX_PFC(unsigned long offset)
  *
  * (2) When a HOLERD/BIGRD occurs or HOLEWR/BIGWR blocks a store L2C_TAD(0..7)_ERR will be
  * loaded.  L2C_TAD(0..7)_ERR will be not be locked for a BIGRD, however.
+ *
+ * (3) The BIG logic only applies to local addresses.  A command for a remote address will not
+ * cause a BIGRD/BIGWR on the requesting node.
  */
 union cvmx_l2c_big_ctl {
 	uint64_t u64;
@@ -5716,15 +5719,18 @@ union cvmx_l2c_oci_ctl {
 	uint64_t u64;
 	struct cvmx_l2c_oci_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t reserved_3_63                : 61;
+	uint64_t reserved_4_63                : 60;
 	uint64_t iofrcl                       : 1;  /**< When set, L2C services all I/O reads and writes on the local node, regardless of the value
                                                          of the node ID bits in the physical address. During normal operation this bit is expected
                                                          to be 0. */
 	uint64_t gksegnode                    : 2;  /**< Initialized to OCI node on reset; writable by software. */
+	uint64_t enaoci                       : 1;  /**< When set, do OCI processing. When clear, OCI references will cause RDDISOCI/WRDISOCI
+                                                         interrupts (NYI). */
 #else
+	uint64_t enaoci                       : 1;
 	uint64_t gksegnode                    : 2;
 	uint64_t iofrcl                       : 1;
-	uint64_t reserved_3_63                : 61;
+	uint64_t reserved_4_63                : 60;
 #endif
 	} s;
 	struct cvmx_l2c_oci_ctl_s             cn78xx;
@@ -6874,7 +6880,9 @@ union cvmx_l2c_tadx_int {
 	uint64_t u64;
 	struct cvmx_l2c_tadx_int_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t reserved_34_63               : 30;
+	uint64_t reserved_36_63               : 28;
+	uint64_t wrdisoci                     : 1;  /**< (NYI) Illegal write to remote node with L2C_TAD_CTL[ENAOCI] clear. */
+	uint64_t rddisoci                     : 1;  /**< (NYI) Illegal read to remote node with L2C_TAD_CTL[ENAOCI] clear. */
 	uint64_t rtgdbe                       : 1;  /**< RTG double-bit error */
 	uint64_t rtgsbe                       : 1;  /**< RTG single-bit error */
 	uint64_t reserved_15_31               : 17;
@@ -6900,7 +6908,9 @@ union cvmx_l2c_tadx_int {
 	uint64_t reserved_15_31               : 17;
 	uint64_t rtgsbe                       : 1;
 	uint64_t rtgdbe                       : 1;
-	uint64_t reserved_34_63               : 30;
+	uint64_t rddisoci                     : 1;
+	uint64_t wrdisoci                     : 1;
+	uint64_t reserved_36_63               : 28;
 #endif
 	} s;
 	struct cvmx_l2c_tadx_int_cn61xx {
@@ -7000,7 +7010,62 @@ union cvmx_l2c_tadx_int {
 	uint64_t reserved_34_63               : 30;
 #endif
 	} cn70xx;
-	struct cvmx_l2c_tadx_int_cn70xx       cn78xx;
+	struct cvmx_l2c_tadx_int_cn78xx {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_36_63               : 28;
+	uint64_t wrdisoci                     : 1;  /**< (NYI) Illegal write to remote node with L2C_TAD_CTL[ENAOCI] clear. */
+	uint64_t rddisoci                     : 1;  /**< (NYI) Illegal read to remote node with L2C_TAD_CTL[ENAOCI] clear. */
+	uint64_t rtgdbe                       : 1;  /**< RTG double-bit error */
+	uint64_t rtgsbe                       : 1;  /**< RTG single-bit error */
+	uint64_t reserved_17_31               : 15;
+	uint64_t wrdislmc                     : 1;  /**< Illegal write to disabled LMC error. A DRAM write arrived before the LMC(s) were enabled. */
+	uint64_t rddislmc                     : 1;  /**< Illegal read to disabled LMC error. A DRAM read arrived before the LMC(s) were enabled. */
+	uint64_t bigrd                        : 1;  /**< Read reference past L2C_BIG_CTL[MAXDRAM] occurred. */
+	uint64_t bigwr                        : 1;  /**< Write reference past L2C_BIG_CTL[MAXDRAM] occurred. */
+	uint64_t holerd                       : 1;  /**< Read reference to 256MB hole occurred. */
+	uint64_t holewr                       : 1;  /**< Write reference to 256MB hole occurred. */
+	uint64_t noway                        : 1;  /**< No way was available for allocation. L2C sets NOWAY during its processing of a transaction
+                                                         whenever it needed/wanted to allocate a WAY in the L2 cache, but was unable to. NOWAY==1
+                                                         is (generally) not an indication that L2C failed to complete transactions. Rather, it is a
+                                                         hint of possible performance degradation. (For example, L2C must read-modify-write DRAM
+                                                         for every transaction that updates some, but not all, of the bytes in a cache block,
+                                                         misses in the L2 cache, and cannot allocate a WAY.) There is one 'failure' case where L2C
+                                                         will set NOWAY: when it cannot leave a block locked in the L2 cache as part of a LCKL2
+                                                         transaction. See L2C_TTG_ERR for logged information. */
+	uint64_t tagdbe                       : 1;  /**< TAG double-bit error occurred. See L2C_TTG_ERR for logged information. */
+	uint64_t tagsbe                       : 1;  /**< TAG single-bit error occurred. See L2C_TTG_ERR for logged information. */
+	uint64_t reserved_6_7                 : 2;
+	uint64_t fbfdbe                       : 1;  /**< FBF double-bit error occurred. See L2C_TQD_ERR for logged information. */
+	uint64_t fbfsbe                       : 1;  /**< FBF single-bit error occurred. See L2C_TQD_ERR for logged information. */
+	uint64_t sbfdbe                       : 1;  /**< SBF double-bit error occurred. See L2C_TQD_ERR for logged information. */
+	uint64_t sbfsbe                       : 1;  /**< SBF single-bit error occurred. See L2C_TQD_ERR for logged information. */
+	uint64_t l2ddbe                       : 1;  /**< L2D double-bit error occurred. See L2C_TQD_ERR for logged information. */
+	uint64_t l2dsbe                       : 1;  /**< L2D single-bit error occurred. See L2C_TQD_ERR for logged information. */
+#else
+	uint64_t l2dsbe                       : 1;
+	uint64_t l2ddbe                       : 1;
+	uint64_t sbfsbe                       : 1;
+	uint64_t sbfdbe                       : 1;
+	uint64_t fbfsbe                       : 1;
+	uint64_t fbfdbe                       : 1;
+	uint64_t reserved_6_7                 : 2;
+	uint64_t tagsbe                       : 1;
+	uint64_t tagdbe                       : 1;
+	uint64_t noway                        : 1;
+	uint64_t holewr                       : 1;
+	uint64_t holerd                       : 1;
+	uint64_t bigwr                        : 1;
+	uint64_t bigrd                        : 1;
+	uint64_t rddislmc                     : 1;
+	uint64_t wrdislmc                     : 1;
+	uint64_t reserved_17_31               : 15;
+	uint64_t rtgsbe                       : 1;
+	uint64_t rtgdbe                       : 1;
+	uint64_t rddisoci                     : 1;
+	uint64_t wrdisoci                     : 1;
+	uint64_t reserved_36_63               : 28;
+#endif
+	} cn78xx;
 	struct cvmx_l2c_tadx_int_cn61xx       cnf71xx;
 };
 typedef union cvmx_l2c_tadx_int cvmx_l2c_tadx_int_t;
@@ -7346,13 +7411,13 @@ union cvmx_l2c_tad_ctl {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_28_63               : 36;
 	uint64_t exlrq                        : 4;  /**< Extra LFBs to reserve for locally generated XMC commands. None are reserved for functional
-                                                         correctness. */
+                                                         correctness.  Ignored if L2C_OCI_CTL[ENAOCI] is 0. */
 	uint64_t exrrq                        : 4;  /**< Extra LFBs to reserve for Rxxx OCI commands beyond the 1 required for OCI protocol
-                                                         functional correctness. */
+                                                         functional correctness.  Ignored if L2C_OCI_CTL[ENAOCI] is 0. */
 	uint64_t exfwd                        : 4;  /**< Extra LFBs to reserve for Fxxx/SINV OCI commands beyond the 1 required for OCI protocol
-                                                         functional correctness. */
+                                                         functional correctness.  Ignored if L2C_OCI_CTL[ENAOCI] is 0. */
 	uint64_t exvic                        : 4;  /**< Extra LFBs to reserve for VICx OCI commands beyond the 1 required for OCI protocol
-                                                         functional correctness. */
+                                                         functional correctness.  Ignored if L2C_OCI_CTL[ENAOCI] is 0. */
 	uint64_t vbf_thresh                   : 4;  /**< VBF threshold. When the number of in-use VBFs exceeds this number the L2C TAD increases
                                                          the priority of all its writes in the LMC. */
 	uint64_t maxvbf                       : 4;  /**< Maximum VBFs in use at once (0 means 16, 1-15 as expected). */
@@ -7488,7 +7553,7 @@ union cvmx_l2c_ttgx_bist_status {
 	uint64_t reserved_48_63               : 16;
 	uint64_t rtgfl                        : 16; /**< BIST failure status for RTG ways 0-15 */
 	uint64_t reserved_18_31               : 14;
-	uint64_t lrulfbfl                     : 1;  /**< BIST failure status for LRULFB memory */
+	uint64_t lrulfbfl                     : 1;  /**< Always zero for CN78XX. */
 	uint64_t lrufl                        : 1;  /**< BIST failure status for tag LRU */
 	uint64_t tagfl                        : 16; /**< BIST failure status for TAG ways 0-15 */
 #else
diff --git a/arch/mips/include/asm/octeon/cvmx-lmcx-defs.h b/arch/mips/include/asm/octeon/cvmx-lmcx-defs.h
index 447c0d7..fb62e8b 100644
--- a/arch/mips/include/asm/octeon/cvmx-lmcx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-lmcx-defs.h
@@ -1636,10 +1636,10 @@ union cvmx_lmcx_bist_ctl {
 	struct cvmx_lmcx_bist_ctl_cn70xx {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_4_63                : 60;
-	uint64_t dlcram_bist_status           : 1;  /**< DLC RAM BIST status, 1 means fail. */
-	uint64_t dlcram_bist_done             : 1;  /**< DLC RAM BIST complete indication, 1 means complete. */
-	uint64_t start_bist                   : 1;  /**< Start BIST on DLC memory. */
-	uint64_t clear_bist                   : 1;  /**< Start clear BIST on DLC memory. */
+	uint64_t dlcram_bist_status           : 1;  /**< Reserved. */
+	uint64_t dlcram_bist_done             : 1;  /**< Reserved. */
+	uint64_t start_bist                   : 1;  /**< Reserved. */
+	uint64_t clear_bist                   : 1;  /**< Reserved. */
 #else
 	uint64_t clear_bist                   : 1;
 	uint64_t start_bist                   : 1;
@@ -2249,7 +2249,7 @@ union cvmx_lmcx_comp_ctl2 {
                                                          compensation impedance on N-pulldown. */
 	uint64_t ptune_offset                 : 4;  /**< Ptune Offset value. */
 	uint64_t ntune_offset                 : 4;  /**< Ntune offset value. */
-	uint64_t m180                         : 1;  /**< Reserved; must be zero. INTERNAL: Cap impedance at 180 ohm, instead of 240 ohm. */
+	uint64_t m180                         : 1;  /**< Reserved; must be zero. */
 	uint64_t byp                          : 1;  /**< Bypass mode. When set, PTUNE,NTUNE are the compensation setting. When clear,
                                                          DDR_PTUNE,DDR_NTUNE are the compensation setting. */
 	uint64_t ptune                        : 5;  /**< PCTL impedance control in bypass mode. */
@@ -3512,9 +3512,8 @@ union cvmx_lmcx_config {
 	uint64_t reserved_63_63               : 1;
 	uint64_t bg2_enable                   : 1;  /**< BG2 pin is active for DDR4 mode.  Only has an effect when LMC*_CONFIG[MODEDDR4] = 1.
                                                          Typically only cleared for DDR4 x16 devices, where there is no BG2 pin on the device. */
-	uint64_t mode_x4dev                   : 1;  /**< DDR x4 device mode.  Set when using DIMMs with x4 devices or if using
-                                                         embedded x4 devices, must be 0. */
-	uint64_t mode32b                      : 1;  /**< 32-bit datapath mode. When set, only 32 DQ pins are used, must be 1. */
+	uint64_t mode_x4dev                   : 1;  /**< Always reads as 0 for 70xx devices, there is no x4 device support. */
+	uint64_t mode32b                      : 1;  /**< Always reads as 1 for 70xx devices, only 32b mode is supported. */
 	uint64_t scrz                         : 1;  /**< Hide LMC(0..0)_SCRAMBLE_CFG0 and LMC(0..0)_SCRAMBLE_CFG1 when set. */
 	uint64_t early_unload_d1_r1           : 1;  /**< When set, unload the PHY silo one cycle early for Rank 3 reads.
                                                          The recommended EARLY_UNLOAD_D1_R1 value can be calculated after the final
@@ -3548,19 +3547,26 @@ union cvmx_lmcx_config {
                                                          initialized.  Software must set necessary RANKMASK bits before executing the
                                                          initialization sequence using the LMC*_SEQ_CTL register.  If the rank has been
                                                          selected for init with the RANKMASK bits, the INIT_STATUS bits will be set after
-                                                         successful
-                                                         initialization and after self-refresh exit.  INIT_STATUS determines the chip-selects
-                                                         that assert during refresh, ZQCS, precharge power-down entry/exit, and self-refresh entry
-                                                         SEQ_SEL's. */
+                                                         successful initialization and after self-refresh exit.  INIT_STATUS determines
+                                                         the chip-selects that assert during refresh, ZQCS, precharge power-down entry/exit,
+                                                         and self-refresh entry SEQ_SEL's. */
 	uint64_t mirrmask                     : 4;  /**< "Mask determining which ranks are address-mirrored.
                                                          MIRRMASK<n> = 1 means Rank n addresses are mirrored for
                                                          0 <= n <= 3.
-                                                         A mirrored read/write operation has the following differences:
+                                                         In DDR3, a mirrored read/write operation has the following differences:
+                                                         DDR#_BA<1> is swapped with DDR#_BA<0>;
+                                                         DDR#_A<8> is swapped with DDR#_A<7>;
+                                                         DDR#_A<6> is swapped with DDR#_A<5>;
+                                                         DDR#_A<4> is swapped with DDR#_A<3>.
+                                                         In DDR4, a mirrored read/write operation has the following differences:
+                                                         DDR#_BG<1> is swapped with DDR#_BG<0>;
                                                          DDR#_BA<1> is swapped with DDR#_BA<0>;
+                                                         DDR#_A<13> is swapped with DDR#_A<11>;
                                                          DDR#_A<8> is swapped with DDR#_A<7>;
                                                          DDR#_A<6> is swapped with DDR#_A<5>;
                                                          DDR#_A<4> is swapped with DDR#_A<3>.
-                                                         When RANK_ENA = 0, MIRRMASK<1> and MIRRMASK<3> MBZ." */
+                                                         For 70xx, MIRRMASK<3:2> MBZ.
+                                                         When RANK_ENA = 0, MIRRMASK<1> MBZ." */
 	uint64_t rankmask                     : 4;  /**< Mask to select rank to be leveled/initialized. To write-level/read-level/initialize rank
                                                          i, set RANKMASK< i>
                                                          RANK_ENA = 1 RANK_ENA = 0
@@ -3570,7 +3576,8 @@ union cvmx_lmcx_config {
                                                          RANKMASK<3> = DIMM1_CS1 MBZ
                                                          For read/write leveling, each rank has to be leveled separately, so RANKMASK should only
                                                          have one bit set. RANKMASK is not used during self-refresh entry/exit and precharge power-
-                                                         down entry/exit instruction sequences. When RANK_ENA = 0, RANKMASK<1> and RANKMASK<3> MBZ. */
+                                                         down entry/exit instruction sequences. For 70xx, RANKMASK<3:2> MBZ.  When RANK_ENA = 0,
+                                                         RANKMASK<1> MBZ. */
 	uint64_t rank_ena                     : 1;  /**< "RANK enable (for use with dual-rank DIMMs).
                                                          For dual-rank DIMMs, the RANK_ENA bit will enable the drive of the DDR#_DIMM*_CS*_L and
                                                          ODT_<1:0> pins differently based on the (PBANK_LSB - 1) address bit.
@@ -6213,7 +6220,7 @@ union cvmx_lmcx_dual_memcfg {
 	uint64_t cs_mask                      : 4;  /**< Chip-select mask. This mask corresponds to the four chip-select signals for a memory
                                                          configuration. Each reference address asserts one of the chip-select signals. If that
                                                          chip-select signal has its corresponding CS_MASK bit set, then the config1 parameters are
-                                                         used, otherwise the config0 parameters are used. */
+                                                         used, otherwise the config0 parameters are used.  In 70xx, CS_MASK[3:2] must be cleared. */
 #else
 	uint64_t cs_mask                      : 4;
 	uint64_t reserved_4_15                : 12;
@@ -7914,18 +7921,17 @@ union cvmx_lmcx_nxm {
 	struct cvmx_lmcx_nxm_cn70xx {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_24_63               : 40;
-	uint64_t mem_msb_d1_r1                : 4;  /**< Max row MSB for DIMM1, RANK1/DIMM1 in single ranked. */
-	uint64_t mem_msb_d1_r0                : 4;  /**< Max row MSB for DIMM1, RANK0. */
+	uint64_t mem_msb_d1_r1                : 4;  /**< Reserved.  INTERNAL: Max row MSB for DIMM1, RANK1/DIMM1 in single ranked. */
+	uint64_t mem_msb_d1_r0                : 4;  /**< Reserved.  INTERNAL: Max row MSB for DIMM1, RANK0. */
 	uint64_t mem_msb_d0_r1                : 4;  /**< Max row MSB for DIMM0, RANK1/DIMM0 in single ranked. */
 	uint64_t mem_msb_d0_r0                : 4;  /**< Max row MSB for DIMM0, RANK0. */
 	uint64_t reserved_4_7                 : 4;
-	uint64_t cs_mask                      : 4;  /**< Chip select mask. This mask corresponds to the 4 chip selects for a memory configuration.
-                                                         If LMC(0..0)_CONFIG[RANK_ENA]=0 then this mask must be set in pairs because each reference
-                                                         address will assert a pair of chip selects. If the chip select(s) have a corresponding
-                                                         CS_MASK bit set, then the reference is to nonexistent memory (NXM). LMC will alias a NXM
-                                                         read reference to use the lowest, legal chip select(s) and return zeros. LMC normally
-                                                         discards NXM write operations, but will also alias them when
-                                                         LMC(0..0)_CONTROL[NXM_WRITE_EN]=1. */
+	uint64_t cs_mask                      : 4;  /**< CS_MASK[1:0] corresponds to the 2 chip selects for a memory configuration.  If the
+                                                         memory configuration does not populate a rank of memory for a chip select, the
+                                                         corresponding bit in the CS_MASK field must be set, and for 70xx devices bits
+                                                         CS_MASK[3:2] must always both be set.  LMC will alias a NXM read reference to use
+                                                         the lowest, legal chip select and return 0s for data.  LMC normally discards NXM
+                                                         writes, but will also alias them when LMC*_CONTROL[NXM_WRITE_EN]=1. */
 #else
 	uint64_t cs_mask                      : 4;
 	uint64_t reserved_4_7                 : 4;
@@ -9049,11 +9055,9 @@ union cvmx_lmcx_rodt_mask {
 	struct cvmx_lmcx_rodt_mask_cn70xx {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_28_63               : 36;
-	uint64_t rodt_d1_r1                   : 4;  /**< Read ODT mask DIMM1, RANK1/DIMM1 in SingleRanked. If RANK_ENA=1, RODT_D1_R1<3> must be
-                                                         zero. Otherwise RODT_D1_R1<3:0> is not used and must be zero. */
+	uint64_t rodt_d1_r1                   : 4;  /**< Reserved. */
 	uint64_t reserved_20_23               : 4;
-	uint64_t rodt_d1_r0                   : 4;  /**< Read ODT mask DIMM1, RANK0. If RANK_ENA=1, RODT_D1_RO<2> must be zero. Otherwise,
-                                                         RODT_D1_RO<3:2,1> must be zero. */
+	uint64_t rodt_d1_r0                   : 4;  /**< Reserved. */
 	uint64_t reserved_12_15               : 4;
 	uint64_t rodt_d0_r1                   : 4;  /**< Read ODT mask DIMM0, RANK1/DIMM0 in SingleRanked. If RANK_ENA=1, RODT_D0_R1<1> must be
                                                          zero. Otherwise, RODT_D0_R1<3:0> is not used and must be zero. */
@@ -10615,10 +10619,9 @@ union cvmx_lmcx_wodt_mask {
 	struct cvmx_lmcx_wodt_mask_cn70xx {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_28_63               : 36;
-	uint64_t wodt_d1_r1                   : 4;  /**< Write ODT mask DIMM1, RANK1/DIMM1 in SingleRanked.
-                                                         If RANK_ENA=0, WODT_D1_R1<3:0> must be zero. */
+	uint64_t wodt_d1_r1                   : 4;  /**< Reserved. */
 	uint64_t reserved_20_23               : 4;
-	uint64_t wodt_d1_r0                   : 4;  /**< Write ODT mask DIMM1, RANK0. If RANK_ENA=0, WODT_D1_R0<3,1> must be zero. */
+	uint64_t wodt_d1_r0                   : 4;  /**< Reserved. */
 	uint64_t reserved_12_15               : 4;
 	uint64_t wodt_d0_r1                   : 4;  /**< Write ODT mask DIMM0, RANK1/DIMM0 in SingleRanked. If RANK_ENA=0, WODT_D0_R1<3:0> must be
                                                          zero. */
diff --git a/arch/mips/include/asm/octeon/cvmx-mio-defs.h b/arch/mips/include/asm/octeon/cvmx-mio-defs.h
index 6af9aab..5a4d32e 100644
--- a/arch/mips/include/asm/octeon/cvmx-mio-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-mio-defs.h
@@ -2761,21 +2761,7 @@ union cvmx_mio_boot_pin_defs {
 	uint64_t u64;
 	struct cvmx_mio_boot_pin_defs_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t reserved_57_63               : 7;
-	uint64_t dlm_supply                   : 1;  /**< DLM Power Supply Setting based on DLMC_VPH_SELECT_18 pin 1 = 1.8V 0 = 2.5V All others = Reserved */
-	uint64_t rgm_supply                   : 2;  /**< RGMii Power Supply Setting based on VDD_RGM_SUPPLY_SELECT pin 01 = 1.8V 10 = 2.5V All
-                                                         others = Reserved */
-	uint64_t smi_supply                   : 3;  /**< SMI power supply setting based on VDD_SMI_SUPPLY_SELECT pin:
-                                                         0x1 = 1.8V.
-                                                         0x2 = 2.5V.
-                                                         0x8 = 3.3V.
-                                                         else Reserved. */
-	uint64_t io_supply                    : 3;  /**< I/O power supply setting based on VDD_IO_SUPPLY_SELECT pin:
-                                                         0x1 = 1.8V.
-                                                         0x2 = 2.5V.
-                                                         0x8 = 3.3V.
-                                                         else Reserved. */
-	uint64_t reserved_16_47               : 32;
+	uint64_t reserved_16_63               : 48;
 	uint64_t ale                          : 1;  /**< Region 0 default ALE mode */
 	uint64_t width                        : 1;  /**< Region 0 default bus width */
 	uint64_t reserved_0_13                : 14;
@@ -2783,12 +2769,7 @@ union cvmx_mio_boot_pin_defs {
 	uint64_t reserved_0_13                : 14;
 	uint64_t width                        : 1;
 	uint64_t ale                          : 1;
-	uint64_t reserved_16_47               : 32;
-	uint64_t io_supply                    : 3;
-	uint64_t smi_supply                   : 3;
-	uint64_t rgm_supply                   : 2;
-	uint64_t dlm_supply                   : 1;
-	uint64_t reserved_57_63               : 7;
+	uint64_t reserved_16_63               : 48;
 #endif
 	} s;
 	struct cvmx_mio_boot_pin_defs_cn52xx {
@@ -2867,7 +2848,7 @@ union cvmx_mio_boot_pin_defs {
 	struct cvmx_mio_boot_pin_defs_cn52xx  cn68xxp1;
 	struct cvmx_mio_boot_pin_defs_cn70xx {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t reserved_57_63               : 7;
+	uint64_t reserved_33_63               : 31;
 	uint64_t dlm_supply                   : 1;  /**< DLM Power Supply Setting based on DLMC_VPH_SELECT_18 pin 1 = 1.8V 0 = 2.5V All others = Reserved */
 	uint64_t rgm_supply                   : 2;  /**< RGMii Power Supply Setting based on VDD_RGM_SUPPLY_SELECT pin 01 = 1.8V 10 = 2.5V All
                                                          others = Reserved */
@@ -2875,7 +2856,7 @@ union cvmx_mio_boot_pin_defs {
                                                          3.3V All others = Reserved */
 	uint64_t io_supply                    : 3;  /**< I/O Power Supply Setting based on VDD_IO_SUPPLY_SELECT pin 001 = 1.8V 010 = 2.5V 100 =
                                                          3.3V All others = Reserved */
-	uint64_t reserved_17_47               : 31;
+	uint64_t reserved_17_23               : 7;
 	uint64_t ref_sel                      : 1;  /**< Reference Clock Selection based on UART0_RTS_N pin at powerup 0 = DLM_REF_CLK[1] pins div
                                                          2, must be set to 100Mhz 1 = PLL_REF_CLK pin (default), must be set to 50Mhz */
 	uint64_t ale                          : 1;  /**< Set to 1 for backward compatability */
@@ -2895,12 +2876,12 @@ union cvmx_mio_boot_pin_defs {
 	uint64_t width                        : 1;
 	uint64_t ale                          : 1;
 	uint64_t ref_sel                      : 1;
-	uint64_t reserved_17_47               : 31;
+	uint64_t reserved_17_23               : 7;
 	uint64_t io_supply                    : 3;
 	uint64_t smi_supply                   : 3;
 	uint64_t rgm_supply                   : 2;
 	uint64_t dlm_supply                   : 1;
-	uint64_t reserved_57_63               : 7;
+	uint64_t reserved_33_63               : 31;
 #endif
 	} cn70xx;
 	struct cvmx_mio_boot_pin_defs_cn78xx {
@@ -5484,7 +5465,7 @@ union cvmx_mio_fus_read_times {
 	uint64_t reserved_32_63               : 32;
 	uint64_t done                         : 4;  /**< Hold time of CSB, PGENB, and LOAD with respect to falling edge of STROBE for read and
                                                          write mode in PLL_REF_CLK + 1 cycles. Timing specs are th_CS = 6ns, th_PG = 10ns, th_LD_p
-                                                         = 7ns. Default of 0x0 yields 20ns for a PLL_REF_CLK of 50 MHz. */
+                                                         = 7ns. Default of 0x0 yields 20ns for a PLL_REF_CLK of 50 MHz, 10ns at 100MHz. */
 	uint64_t reserved_0_27                : 28;
 #else
 	uint64_t reserved_0_27                : 28;
@@ -5548,20 +5529,20 @@ union cvmx_mio_fus_read_times {
 	uint64_t reserved_32_63               : 32;
 	uint64_t done                         : 4;  /**< Hold time of CSB, PGENB, and LOAD with respect to falling edge of STROBE for read and
                                                          write mode in PLL_REF_CLK + 1 cycles. Timing specs are th_CS = 6ns, th_PG = 10ns, th_LD_p
-                                                         = 7ns. Default of 0x0 yields 20ns for a PLL_REF_CLK of 50 MHz. */
+                                                         = 7ns. Default of 0x0 yields 20ns for a PLL_REF_CLK of 50 MHz, 10ns at 100MHz. */
 	uint64_t ahd                          : 4;  /**< Hold time of A with respect to falling edge of STROBE for read and write modes in
                                                          PLL_REF_CLK + 2 cycles. Timing spec of tsu_A_r and tsu_A_p is 3ns min. Default of 0x0
-                                                         yields 40ns for a PLL_REF_CLK of 50 MHz. */
+                                                         yields 40ns for a PLL_REF_CLK of 50 MHz, 20ns at 100MHz. */
 	uint64_t wrstb_wh                     : 12; /**< Pulse width high of STROBE in write mode in PLL_REF_CLK + 1 cycles. Timing spec of
                                                          twh_SB_p is 9.8us max. Default of 0x1F3 yields 10 us at PLL_REF_CLK of 50 MHz. */
 	uint64_t rdstb_wh                     : 4;  /**< Pulse width high of STROBE in read mode in PLL_REF_CLK + 1 cycles. Timing spec of twh_SB_p
-                                                         is 20ns min. Default of 0x0 yields 20 ns at PLL_REF_CLK of 50 MHz. */
+                                                         is 20ns min. Default of 0x1 yields 40 ns at PLL_REF_CLK of 50 MHz, 20ns at 100MHz. */
 	uint64_t asu                          : 4;  /**< Setup time of A to rising edge of STROBE for read and write modes in PLL_REF_CLK cycles.
-                                                         Timing spec of tsu_A_r and rsu_A-P is 12 ns min. Default of 0x1 yields 20 ns at
-                                                         PLL_REF_CLK of 50 MHz. */
+                                                         Timing spec of tsu_A_r and tsu_A_p is 12 ns min. Default of 0x1 yields 40 ns at
+                                                         PLL_REF_CLK of 50 MHz, 20ns at 100MHz. */
 	uint64_t setup                        : 4;  /**< Setup of CSB, PGENB, LOAD to rising edge of STROBE in read and write modes in PLL_REF_CLK
-                                                         + 1 cycles. TSUCS= 16ns, TSUPG= 14ns, TSULD_R= 10ns. Default of 0x0 yields 20 ns at
-                                                         PLL_REF_CLK of 50 MHz. */
+                                                         + 1 cycles. tsu_CS = 16ns, tsu_PG = 14ns, tsu_LD_r = 10ns. Default of 0x0 yields 20 ns
+                                                         plush ASU cycles at PLL_REF_CLK of 50 MHz, 10ns + ASU at 100MHz. */
 #else
 	uint64_t setup                        : 4;
 	uint64_t asu                          : 4;
diff --git a/arch/mips/include/asm/octeon/cvmx-mpi-defs.h b/arch/mips/include/asm/octeon/cvmx-mpi-defs.h
index 20db602..94cd776 100644
--- a/arch/mips/include/asm/octeon/cvmx-mpi-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-mpi-defs.h
@@ -482,8 +482,10 @@ union cvmx_mpi_cfg {
                                                          completion of MPI transaction
                                                          1, clock never idles, requires CS deassertion
                                                          assertion between commands */
-	uint64_t idlelo                       : 1;  /**< If 0, SPI_CLK idles high, 1st transition is hi->lo
-                                                         1, SPI_CLK idles low, 1st transition is lo->hi */
+	uint64_t idlelo                       : 1;  /**< 0 = SPI_CK idles high, first transition is high-to-low. This mode corresponds to SPI Block
+                                                         Guide options CPOL = 1, CPHA = 1.
+                                                         1 = SPI_CK idles low, first transition is low-to-high. This mode corresponds to SPI Block
+                                                         Guide options CPOL = 0, CPHA = 0. */
 	uint64_t enable                       : 1;  /**< MPI/SPI master enable.
                                                          0 = UART0_DTR_L/SPI_DO, UART0_DCD_L/SPI_DI,  pins are UART pins.
                                                          1 = UART0_DTR_L/SPI_DO and UART0_DCD_L/SPI_DI pins are MPI/SPI pins.
@@ -548,8 +550,10 @@ union cvmx_mpi_cfg {
                                                          0 = clock idles to value given by IDLELO after completion of MPI/SPI transaction.
                                                          1 = clock never idles, requires SPI_CSn_L deassertion/assertion between commands. */
 	uint64_t idlelo                       : 1;  /**< Clock idle low/clock invert.
-                                                         0 = SPI_CK idles high, first transition is high-to-low.
-                                                         1 = SPI_CK idles low, first transition is low-to-high. */
+                                                         0 = SPI_CK idles high, first transition is high-to-low. This mode corresponds to SPI Block
+                                                         Guide options CPOL = 1, CPHA = 1.
+                                                         1 = SPI_CK idles low, first transition is low-to-high. This mode corresponds to SPI Block
+                                                         Guide options CPOL = 0, CPHA = 0. */
 	uint64_t enable                       : 1;  /**< MPI/SPI enable.
                                                          0 = UART0_DTR_L/SPI_DO, UART0_DCD_L/SPI_DI, UART1_CTS_L/SPI_CS2_L, UART1_RTS_L/SPI_CS3_L
                                                          pins are UART pins.
diff --git a/arch/mips/include/asm/octeon/cvmx-oclax-defs.h b/arch/mips/include/asm/octeon/cvmx-oclax-defs.h
index fafc4f0..a970072 100644
--- a/arch/mips/include/asm/octeon/cvmx-oclax-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-oclax-defs.h
@@ -447,16 +447,18 @@ union cvmx_oclax_cdhx_ctl {
 	uint64_t dis_stamp                    : 1;  /**< Remove time stamps from data stream. */
 	uint64_t cap_ctl                      : 4;  /**< Minterms that will cause data to be captured. These minterms are the four inputs to a 4-1
                                                          mux selected by PLA1 and 0. The output is thus calulated from the equation:
-                                                         out = (    (<3> & PLA1 & PLA0)
-                                                         || (<2> & PLA1 & !PLA0)
-                                                         || (<1> & !PLA1 & PLA0)
-                                                         || (<0> & !PLA1 & !PLA0))
+                                                         fsmcap0 = OCLA(0..4)_FSM(0)_STATE[state0][CAP]
+                                                         fsmcap1 = OCLA(0..4)_FSM(1)_STATE[state1][CAP]
+                                                         out = (    (<3> & fsmcap0 & fsmcap0)
+                                                         || (<2> & fsmcap1 & !fsmcap0)
+                                                         || (<1> & !fsmcap1 & fsmcap0)
+                                                         || (<0> & !fsmcap1 & !fsmcap0))
                                                          Common examples:
                                                          0x0 = No capture
-                                                         0x2 = Capture when PLA0 requests capture
-                                                         0x4 = Capture when PLA1 requests capture
-                                                         0x6 = Capture on PLA0 | PLA1
-                                                         0x8 = Capture on PLA0 & PLA1
+                                                         0x2 = Capture when fsmcap0 requests capture
+                                                         0x4 = Capture when fsmcap1 requests capture
+                                                         0x6 = Capture on fsmcap0 | fsmcap1
+                                                         0x8 = Capture on fsmcap0 & fsmcap1
                                                          0xF = Always capture. */
 #else
 	uint64_t cap_ctl                      : 4;
@@ -480,7 +482,7 @@ union cvmx_oclax_const {
 	uint64_t reserved_16_63               : 48;
 	uint64_t dat_size                     : 16; /**< Size of data RAM in units of 36-bit entries. This value is subject to change between chip
                                                          passes, and software should thus use this value rather than a hard coded constant.
-                                                         OCLA(0..3) size is 8192, OCLA(4) size is 4096. */
+                                                         OCLA(0..3) size is 4096, OCLA(4) size is 8192. */
 #else
 	uint64_t dat_size                     : 16;
 	uint64_t reserved_16_63               : 48;
@@ -650,7 +652,7 @@ typedef union cvmx_oclax_fifo_wrap cvmx_oclax_fifo_wrap_t;
 /**
  * cvmx_ocla#_fsm#_and#_i#
  *
- * Values for PLA-AND plane. AND(0..31) represents the 32 allowed AND terms. I(0..1) for I=0
+ * Values for PLA-AND plane. AND(0..15) represents the 15 allowed AND terms. I(0..1) for I=0
  * indicates the term non-inverted, for I=1 indicates the term inverted. Any AND tree may be
  * disabled by setting the same bit in both _I(0) and _I(1), as '((1) & !(1))' is always false.
  */
@@ -751,9 +753,7 @@ union cvmx_oclax_gen_ctl {
                                                          signal to release the trigger (it is not edge sensitive.) */
 	uint64_t den                          : 1;  /**< Enable data bus and counter clocking. When set, the OCLA inbound data bus may be used and
                                                          counters may increment. When clear, the bus is always zero and internal flops may be clock
-                                                         gated off to save power. Must be set for normal operation. INTERNAL: When clear, RTL must
-                                                         assert that the data bus is zero, to make sure at full chip that no block is 'spamming'
-                                                         non-zero OCLA data after reset. */
+                                                         gated off to save power. Must be set for normal operation. */
 	uint64_t stt                          : 1;  /**< Store to DDR directly, bypassing L2 cache. */
 	uint64_t reserved_0_0                 : 1;
 #else
@@ -1049,8 +1049,8 @@ union cvmx_oclax_state_int {
                                                          holds FSM1 in state zero, writing one to OCLA(0..4)_STATE_INT[FSM1_RST] removes the hold. */
 	uint64_t fsm0_rst                     : 1;  /**< FSM0 hold in state zero. Writing one to OCLA(0..4)_STATE_SET[FSM0_RST] sets this bit and
                                                          holds FSM0 in state zero, writing one to OCLA(0..4)_STATE_INT[FSM0_RST] removes the hold. */
-	uint64_t fsm1_ena                     : 1;  /**< FSM1 sequencing and capturing enabled. */
-	uint64_t fsm0_ena                     : 1;  /**< FSM0 sequencing and capturing enabled. */
+	uint64_t fsm1_ena                     : 1;  /**< FSM1 sequencing enabled. */
+	uint64_t fsm0_ena                     : 1;  /**< FSM0 sequencing enabled. */
 	uint64_t reserved_19_31               : 13;
 	uint64_t ddrfull                      : 1;  /**< DDR buffer wrapped. Asserted when OCLA(0..4)_STACK_CUR has wrapped and been re-initialized
                                                          to OCLA(0..4)_STACK_BASE. */
diff --git a/arch/mips/include/asm/octeon/cvmx-ocx-defs.h b/arch/mips/include/asm/octeon/cvmx-ocx-defs.h
index dcbff43..81cdd02 100644
--- a/arch/mips/include/asm/octeon/cvmx-ocx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-ocx-defs.h
@@ -779,15 +779,15 @@ union cvmx_ocx_com_int {
 	uint64_t mem_badid                    : 1;  /**< Memory request or response cannot be send because Node ID is invalid. Transaction has been dropped. */
 	uint64_t copr_badid                   : 1;  /**< Scheduler add work or buffer pool return cannot be sent because Node ID is invalid.
                                                          Transaction has been dropped. */
-	uint64_t win_req_badid                : 1;  /**< Window request specified in SLI_WIN_RD_ADDR, SLI_WIN_WR_ADDR or OCX_PP_CMD cannot be sent
-                                                         because Node ID is invalid. Transaction has been dropped. */
-	uint64_t win_req_tout                 : 1;  /**< Window request was dropped because it could not be send during the period specified by
-                                                         OCX_WIN_TIMER. */
-	uint64_t win_req_xmit                 : 1;  /**< Window request specified in SLI_WIN_RD_ADDR, SLI_WIN_WR_ADDR or OCX_WIN_CMD has been
-                                                         scheduled for transmission. If the command was not expecting a response, then a new
-                                                         command may be issued. */
-	uint64_t win_rsp                      : 1;  /**< A response to a previous SLI window request or core request has been received. A new
-                                                         command may be issued. */
+	uint64_t win_req_badid                : 1;  /**< Window request specified in SLI_WIN_RD_ADDR, SLI_WIN_WR_ADDR, OCX_WIN_CMD or OCX_PP_CMD
+                                                         cannot be sent because Node ID is invalid. Transaction has been dropped. */
+	uint64_t win_req_tout                 : 1;  /**< Window or core request was dropped because it could not be send during the period
+                                                         specified by OCX_WIN_TIMER. */
+	uint64_t win_req_xmit                 : 1;  /**< Window request specified in SLI_WIN_RD_ADDR, SLI_WIN_WR_ADDR, OCX_WIN_CMD or OCX_PP_CMD
+                                                         has been scheduled for transmission. If the command was not expecting a response, then a
+                                                         new command may be issued. */
+	uint64_t win_rsp                      : 1;  /**< A response to a previous window request or core request has been received. A new command
+                                                         may be issued. */
 	uint64_t reserved_24_47               : 24;
 	uint64_t rx_lane                      : 24; /**< SerDes RX lane interrupt. See OCX_LNE_STATUS[23..0] for more information. */
 #else
diff --git a/arch/mips/include/asm/octeon/cvmx-osm-defs.h b/arch/mips/include/asm/octeon/cvmx-osm-defs.h
index d17e28d..cd706b2 100644
--- a/arch/mips/include/asm/octeon/cvmx-osm-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-osm-defs.h
@@ -138,21 +138,18 @@ union cvmx_osm_ase_rate_limit_ctrl {
 	struct cvmx_osm_ase_rate_limit_ctrl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_3_63                : 61;
-	uint64_t rwc_rate_limit               : 1;  /**< To support ASE running at SCLK/2, OSM can rate-limit
-                                                         responses sent back to ASE. Each request is assigned to either phase 0 or phase 1.
-                                                         When set, OSM will not send back-to-back responses for requests
-                                                         with the same phase. Instead a idle cycle will be inserted between the responses.
-                                                         This enable applies to RWC ports. */
-	uint64_t bwc_rate_limit               : 1;  /**< To support ASE running at SCLK/2, OSM can rate-limit
-                                                         responses sent back to ASE. Each request is assigned to either phase 0 or phase 1.
-                                                         When set, OSM will not send back-to-back responses for requests
-                                                         with the same phase. Instead a idle cycle will be inserted between the responses.
-                                                         This enable applies to BWC port. */
-	uint64_t twc_rate_limit               : 1;  /**< To support ASE running at SCLK/2, OSM can rate-limit
-                                                         responses sent back to ASE. Each request is assigned to either phase 0 or phase 1.
-                                                         When set, OSM will not send back-to-back responses for requests
-                                                         with the same phase. Instead a idle cycle will be inserted between the responses.
-                                                         This enable applies to TWC port. */
+	uint64_t rwc_rate_limit               : 1;  /**< To support ASE running at SCLK/2, OSM can rate-limit responses sent back to ASE. Each
+                                                         request is assigned to either phase 0 or phase 1. When set, OSM will not send back-to-back
+                                                         responses for requests on the RWC ports with the same phase. Instead a idle cycle will be
+                                                         inserted between the responses. This enable applies to RWC ports. */
+	uint64_t bwc_rate_limit               : 1;  /**< To support ASE running at SCLK/2, OSM can rate-limit responses sent back to ASE. Each
+                                                         request is assigned to either phase 0 or phase 1. When set, OSM will not send back-to-back
+                                                         responses for requests on the BWC port with the same phase. Instead a idle cycle will be
+                                                         inserted between the responses. */
+	uint64_t twc_rate_limit               : 1;  /**< To support ASE running at SCLK/2, OSM can rate-limit responses sent back to ASE. Each
+                                                         request is assigned to either phase 0 or phase 1. When set, OSM will not send back-to-back
+                                                         responses for requests on the TWC port with the same phase. Instead a idle cycle will be
+                                                         inserted between the responses. */
 #else
 	uint64_t twc_rate_limit               : 1;
 	uint64_t bwc_rate_limit               : 1;
@@ -172,7 +169,7 @@ union cvmx_osm_bankx_ctrl {
 	struct cvmx_osm_bankx_ctrl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_3_63                : 61;
-	uint64_t bank_assign                  : 3;  /**< See BANK_ASSIGN_E enumeration for encoding.
+	uint64_t bank_assign                  : 3;  /**< See OSM_BANK_ASSIGN_E enumeration for encoding.
                                                          Port assignment for each memory bank. Memory structure is
                                                          64k words x 246 data bits (plus ECC). This is further
                                                          divided into 64 banks each containing 1k words x 246 data bits.
@@ -186,10 +183,10 @@ union cvmx_osm_bankx_ctrl {
                                                          reassigned to another requester. A host request can access any bank,
                                                          arbitration logic will prevent bank conflicts for host requests.
                                                          Addresses: bit<15:10> = bank, bit<9:0> = offset.
-                                                         bank0 corresponds to memory address 0x0000-0x03ff.
-                                                         bank1 corresponds to memory address 0x0400-0x07ff.
-                                                         bank63 corresponds to memory address 0xfc00-0xffff.
-                                                         See BANK_ASSIGN_E enumeration for encoding. */
+                                                         Bank 0 corresponds to memory address 0x0000-0x03ff.
+                                                         Bank 1 corresponds to memory address 0x0400-0x07ff.
+                                                         Bank 63 corresponds to memory address 0xfc00-0xffff.
+                                                         See OSM_BANK_ASSIGN_E enumeration for encoding. */
 #else
 	uint64_t bank_assign                  : 3;
 	uint64_t reserved_3_63                : 61;
@@ -210,11 +207,11 @@ union cvmx_osm_ecc_ctrl {
 	struct cvmx_osm_ecc_ctrl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_3_63                : 61;
-	uint64_t flip_synd                    : 2;  /**< Flip the syndrom<1:0> bits to generate 1-bit/2-bits error for testing.
-                                                         0x0: normal operation.
-                                                         0x1: SBE on bit<0>.
-                                                         0x2: SBE on bit<1>.
-                                                         0x3: DBE on bit<1:0>. */
+	uint64_t flip_synd                    : 2;  /**< Flip syndrom<1:0> bits to generate 1-bit/2-bits error for testing.
+                                                         0x0 = Normal operation.
+                                                         0x1 = SBE on bit<0>.
+                                                         0x2 = SBE on bit<1>.
+                                                         0x3 = DBE on bits<1:0>. */
 	uint64_t cor_dis                      : 1;  /**< Disables SBE correction. SBE/DBE are still detected. */
 #else
 	uint64_t cor_dis                      : 1;
@@ -231,18 +228,18 @@ typedef union cvmx_osm_ecc_ctrl cvmx_osm_ecc_ctrl_t;
  *
  * Address error interrupt info.
  * This register can be used to debug address errors (illegal bank). Fields are captured when
- * there are no outstanding address errors indicated in OSM_INT_STAT register and a new address
+ * there are no outstanding address errors indicated in OSM_INT_STAT and a new address
  * error arrives. Prioritization for multiple events occurring at the same time is indicated by
- * the ADDR_ERR_SOURCE_E enumeration: highest encoded value has highest priority.
+ * the OSM_ADDR_ERR_SOURCE_E enumeration; highest encoded value has highest priority.
  */
 union cvmx_osm_int_info_addr {
 	uint64_t u64;
 	struct cvmx_osm_int_info_addr_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_35_63               : 29;
-	uint64_t addr_err_source              : 3;  /**< Source of address error, see OSM_ADDR_ERR_SOURCE_E enumeration. */
+	uint64_t addr_err_source              : 3;  /**< Source of address error, see OSM_OSM_ADDR_ERR_SOURCE_E enumeration. */
 	uint64_t reserved_16_31               : 16;
-	uint64_t addr_err_address             : 16; /**< RAM Address of the address error. */
+	uint64_t addr_err_address             : 16; /**< RAM address of the address error. */
 #else
 	uint64_t addr_err_address             : 16;
 	uint64_t reserved_16_31               : 16;
@@ -259,19 +256,19 @@ typedef union cvmx_osm_int_info_addr cvmx_osm_int_info_addr_t;
  *
  * ECC error interrupt info.
  * This register can be used to debug ECC failures. Fields are captured when there are no
- * outstanding ECC errors indicated in OSM_INT_STAT register and a new ECC error arrives.
+ * outstanding ECC errors indicated in OSM_INT_STAT and a new ECC error arrives.
  * Prioritization for multiple events occurring at the same time is indicated by the
- * ECC_ERR_SOURCE_E enumeration: highest encoded value has highest priority. For current bank
- * assignment, see OSM_BANK(0..63)_CTRL register.
+ * OSM_ECC_ERR_SOURCE_E enumeration; highest encoded value has highest priority. For current bank
+ * assignment, see OSM_BANK(0..63)_CTRL.
  */
 union cvmx_osm_int_info_ecc {
 	uint64_t u64;
 	struct cvmx_osm_int_info_ecc_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_37_63               : 27;
-	uint64_t ecc_err_source               : 5;  /**< Source of ECC error, see OSM_ECC_ERR_SOURCE_E enumeration. */
+	uint64_t ecc_err_source               : 5;  /**< Source of ECC error, see OSM_OSM_ECC_ERR_SOURCE_E enumeration. */
 	uint64_t reserved_16_31               : 16;
-	uint64_t ecc_err_address              : 16; /**< RAM Address of the ECC error. */
+	uint64_t ecc_err_address              : 16; /**< RAM address of the ECC error. */
 #else
 	uint64_t ecc_err_address              : 16;
 	uint64_t reserved_16_31               : 16;
@@ -288,40 +285,40 @@ typedef union cvmx_osm_int_info_ecc cvmx_osm_int_info_ecc_t;
  *
  * Interrupt Status.
  * DBEs are detected. SBE's are corrected. For debugging output for ECC DBE/SBE's, see
- * OSM_INT_INFO_ECC register.
+ * OSM_INT_INFO_ECC.
  * Address Errors happen when a requester attempts to access a bank that was not assigned to it.
  * For example, Bank 0 is assigned to DFA and HNA attempts to access it. For debugging output for
- * Address Errors, see OSM_INT_INFO_ADDR register. For current bank assignment, see
- * OSM_BANK(0..63)_CTRL register.
+ * Address Errors, see OSM_INT_INFO_ADDR. For current bank assignment, see
+ * OSM_BANK(0..63)_CTRL.
  */
 union cvmx_osm_int_stat {
 	uint64_t u64;
 	struct cvmx_osm_int_stat_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_23_63               : 41;
-	uint64_t rwc3_addr_err                : 1;  /**< RWC3 port address error (illegal bank). */
-	uint64_t rwc2_addr_err                : 1;  /**< RWC2 port address error (illegal bank). */
-	uint64_t rwc1_addr_err                : 1;  /**< RWC1 port address error (illegal bank). */
-	uint64_t bwc_addr_err                 : 1;  /**< BWC port address error (illegal bank). */
-	uint64_t twc_addr_err                 : 1;  /**< TWC port address error (illegal bank). */
-	uint64_t hna_addr_err                 : 1;  /**< HNA port address error (illegal bank). */
-	uint64_t dfa_addr_err                 : 1;  /**< DFA port address error (illegal bank). */
-	uint64_t host_sbe                     : 1;  /**< Host port single bit error. */
-	uint64_t host_dbe                     : 1;  /**< Host port double bit error. */
-	uint64_t rwc3_sbe                     : 1;  /**< ASE RWC3 port single bit error. */
-	uint64_t rwc3_dbe                     : 1;  /**< ASE RWC3 port double bit error. */
-	uint64_t rwc2_sbe                     : 1;  /**< ASE RWC2 port single bit error. */
-	uint64_t rwc2_dbe                     : 1;  /**< ASE RWC2 port double bit error. */
-	uint64_t rwc1_sbe                     : 1;  /**< ASE RWC1 port single bit error. */
-	uint64_t rwc1_dbe                     : 1;  /**< ASE RWC1 port double bit error. */
-	uint64_t bwc_sbe                      : 1;  /**< ASE BWC port single bit error. */
-	uint64_t bwc_dbe                      : 1;  /**< ASE BWC port double bit error. */
-	uint64_t twc_sbe                      : 1;  /**< ASE TWC port single bit error. */
-	uint64_t twc_dbe                      : 1;  /**< ASE TWC port double bit error. */
-	uint64_t hna_sbe                      : 1;  /**< HNA port single bit error. */
-	uint64_t hna_dbe                      : 1;  /**< HNA port double bit error. */
-	uint64_t dfa_sbe                      : 1;  /**< DFA port single bit error. */
-	uint64_t dfa_dbe                      : 1;  /**< DFA port double bit error. */
+	uint64_t rwc3_addr_err                : 1;  /**< RWC3 port illegal bank address error. */
+	uint64_t rwc2_addr_err                : 1;  /**< RWC2 port illegal bank address error. */
+	uint64_t rwc1_addr_err                : 1;  /**< RWC1 port illegal bank address error. */
+	uint64_t bwc_addr_err                 : 1;  /**< BWC port illegal bank address error. */
+	uint64_t twc_addr_err                 : 1;  /**< TWC port illegal bank address error. */
+	uint64_t hna_addr_err                 : 1;  /**< HNA port illegal bank address error. */
+	uint64_t dfa_addr_err                 : 1;  /**< DFA port illegal bank address error. */
+	uint64_t host_sbe                     : 1;  /**< Host port single-bit error. */
+	uint64_t host_dbe                     : 1;  /**< Host port double-bit error. */
+	uint64_t rwc3_sbe                     : 1;  /**< ASE RWC3 port single-bit error. */
+	uint64_t rwc3_dbe                     : 1;  /**< ASE RWC3 port double-bit error. */
+	uint64_t rwc2_sbe                     : 1;  /**< ASE RWC2 port single-bit error. */
+	uint64_t rwc2_dbe                     : 1;  /**< ASE RWC2 port double-bit error. */
+	uint64_t rwc1_sbe                     : 1;  /**< ASE RWC1 port single-bit error. */
+	uint64_t rwc1_dbe                     : 1;  /**< ASE RWC1 port double-bit error. */
+	uint64_t bwc_sbe                      : 1;  /**< ASE BWC port single-bit error. */
+	uint64_t bwc_dbe                      : 1;  /**< ASE BWC port double-bit error. */
+	uint64_t twc_sbe                      : 1;  /**< ASE TWC port single-bit error. */
+	uint64_t twc_dbe                      : 1;  /**< ASE TWC port double-bit error. */
+	uint64_t hna_sbe                      : 1;  /**< HNA port single-bit error. */
+	uint64_t hna_dbe                      : 1;  /**< HNA port double-bit error. */
+	uint64_t dfa_sbe                      : 1;  /**< DFA port single-bit error. */
+	uint64_t dfa_dbe                      : 1;  /**< DFA port double-bit error. */
 #else
 	uint64_t dfa_dbe                      : 1;
 	uint64_t dfa_sbe                      : 1;
@@ -358,18 +355,18 @@ typedef union cvmx_osm_int_stat cvmx_osm_int_stat_t;
  *
  * Built In Self Test Status Register.
  * Results from BIST runs of OSM's memories.
- * OSM_MEM is instantiated 8 times, each instance of OSM_MEM has its own BIST_STATUS
- * register. Each OSM_MEM contains 32 BIST memory instances, so there are 32 status bits
+ * OSM_MEM is instantiated 8 times, each instance of OSM_MEM has its own BIST_STATUS.
+ * Each OSM_MEM contains 32 BIST memory instances, so there are 32 status bits
  * per register.
- * Each BIST Memory Instance (1 BIST engine + multiple physical memories) contains
- * 2 physical memories, srf1024x32m8 and srf1024x33m3.
  */
 union cvmx_osm_memx_bist_status {
 	uint64_t u64;
 	struct cvmx_osm_memx_bist_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_32_63               : 32;
-	uint64_t bist_status                  : 32; /**< BIST Status of BIST Memory Instance 31..0 in bits 31..0 respectively. */
+	uint64_t bist_status                  : 32; /**< BIST Status of BIST Memory Instance 31..0 in bits 31..0 respectively.
+                                                         INTERNAL: Each BIST Memory Instance (1 BIST engine + multiple physical memories) contains
+                                                         2 physical memories, srf1024x32m8 and srf1024x33m3. */
 #else
 	uint64_t bist_status                  : 32;
 	uint64_t reserved_32_63               : 32;
diff --git a/arch/mips/include/asm/octeon/cvmx-pcieepx-defs.h b/arch/mips/include/asm/octeon/cvmx-pcieepx-defs.h
index 960c474..8fa3706 100644
--- a/arch/mips/include/asm/octeon/cvmx-pcieepx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pcieepx-defs.h
@@ -1456,6 +1456,7 @@ static inline uint64_t CVMX_PCIEEPX_CFG023(unsigned long block_id)
 static inline uint64_t CVMX_PCIEEPX_CFG024(unsigned long block_id)
 {
 	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && ((block_id <= 2))) ||
 	      (OCTEON_IS_MODEL(OCTEON_CN78XX) && ((block_id <= 3)))))
 		cvmx_warn("CVMX_PCIEEPX_CFG024(%lu) is invalid on this chip\n", block_id);
 	return 0x0000030000000060ull + ((block_id) & 3) * 0x100000000ull;
@@ -1467,6 +1468,7 @@ static inline uint64_t CVMX_PCIEEPX_CFG024(unsigned long block_id)
 static inline uint64_t CVMX_PCIEEPX_CFG025(unsigned long block_id)
 {
 	if (!(
+	      (OCTEON_IS_MODEL(OCTEON_CN70XX) && ((block_id <= 2))) ||
 	      (OCTEON_IS_MODEL(OCTEON_CN78XX) && ((block_id <= 3)))))
 		cvmx_warn("CVMX_PCIEEPX_CFG025(%lu) is invalid on this chip\n", block_id);
 	return 0x0000030000000064ull + ((block_id) & 3) * 0x100000000ull;
@@ -5468,6 +5470,7 @@ union cvmx_pcieepx_cfg024 {
 	uint32_t msimm                        : 32;
 #endif
 	} s;
+	struct cvmx_pcieepx_cfg024_s          cn70xx;
 	struct cvmx_pcieepx_cfg024_s          cn78xx;
 };
 typedef union cvmx_pcieepx_cfg024 cvmx_pcieepx_cfg024_t;
@@ -5489,6 +5492,7 @@ union cvmx_pcieepx_cfg025 {
 	uint32_t msimp                        : 32;
 #endif
 	} s;
+	struct cvmx_pcieepx_cfg025_s          cn70xx;
 	struct cvmx_pcieepx_cfg025_s          cn78xx;
 };
 typedef union cvmx_pcieepx_cfg025 cvmx_pcieepx_cfg025_t;
@@ -7295,7 +7299,47 @@ union cvmx_pcieepx_cfg065 {
 	struct cvmx_pcieepx_cfg065_cn61xx     cn66xx;
 	struct cvmx_pcieepx_cfg065_cn61xx     cn68xx;
 	struct cvmx_pcieepx_cfg065_cn52xx     cn68xxp1;
-	struct cvmx_pcieepx_cfg065_cn61xx     cn70xx;
+	struct cvmx_pcieepx_cfg065_cn70xx {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint32_t reserved_25_31               : 7;
+	uint32_t uatombs                      : 1;  /**< Unsupported AtomicOp Egress Blocked Status */
+	uint32_t reserved_23_23               : 1;
+	uint32_t ucies                        : 1;  /**< Uncorrectable Internal Error Status */
+	uint32_t reserved_21_21               : 1;
+	uint32_t ures                         : 1;  /**< Unsupported Request Error Status */
+	uint32_t ecrces                       : 1;  /**< ECRC Error Status */
+	uint32_t mtlps                        : 1;  /**< Malformed TLP Status */
+	uint32_t ros                          : 1;  /**< Receiver Overflow Status */
+	uint32_t ucs                          : 1;  /**< Unexpected Completion Status */
+	uint32_t cas                          : 1;  /**< Completer Abort Status */
+	uint32_t cts                          : 1;  /**< Completion Timeout Status */
+	uint32_t fcpes                        : 1;  /**< Flow Control Protocol Error Status */
+	uint32_t ptlps                        : 1;  /**< Poisoned TLP Status */
+	uint32_t reserved_6_11                : 6;
+	uint32_t sdes                         : 1;  /**< Surprise Down Error Status (not supported) */
+	uint32_t dlpes                        : 1;  /**< Data Link Protocol Error Status */
+	uint32_t reserved_0_3                 : 4;
+#else
+	uint32_t reserved_0_3                 : 4;
+	uint32_t dlpes                        : 1;
+	uint32_t sdes                         : 1;
+	uint32_t reserved_6_11                : 6;
+	uint32_t ptlps                        : 1;
+	uint32_t fcpes                        : 1;
+	uint32_t cts                          : 1;
+	uint32_t cas                          : 1;
+	uint32_t ucs                          : 1;
+	uint32_t ros                          : 1;
+	uint32_t mtlps                        : 1;
+	uint32_t ecrces                       : 1;
+	uint32_t ures                         : 1;
+	uint32_t reserved_21_21               : 1;
+	uint32_t ucies                        : 1;
+	uint32_t reserved_23_23               : 1;
+	uint32_t uatombs                      : 1;
+	uint32_t reserved_25_31               : 7;
+#endif
+	} cn70xx;
 	struct cvmx_pcieepx_cfg065_cn78xx {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint32_t reserved_26_31               : 6;
@@ -7761,7 +7805,47 @@ union cvmx_pcieepx_cfg067 {
 	struct cvmx_pcieepx_cfg067_cn61xx     cn66xx;
 	struct cvmx_pcieepx_cfg067_cn61xx     cn68xx;
 	struct cvmx_pcieepx_cfg067_cn52xx     cn68xxp1;
-	struct cvmx_pcieepx_cfg067_cn61xx     cn70xx;
+	struct cvmx_pcieepx_cfg067_cn70xx {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint32_t reserved_25_31               : 7;
+	uint32_t uatombs                      : 1;  /**< Unsupported AtomicOp Egress Blocked Severity */
+	uint32_t reserved_23_23               : 1;
+	uint32_t ucies                        : 1;  /**< Uncorrectable Internal Error Severity */
+	uint32_t reserved_21_21               : 1;
+	uint32_t ures                         : 1;  /**< Unsupported Request Error Severity */
+	uint32_t ecrces                       : 1;  /**< ECRC Error Severity */
+	uint32_t mtlps                        : 1;  /**< Malformed TLP Severity */
+	uint32_t ros                          : 1;  /**< Receiver Overflow Severity */
+	uint32_t ucs                          : 1;  /**< Unexpected Completion Severity */
+	uint32_t cas                          : 1;  /**< Completer Abort Severity */
+	uint32_t cts                          : 1;  /**< Completion Timeout Severity */
+	uint32_t fcpes                        : 1;  /**< Flow Control Protocol Error Severity */
+	uint32_t ptlps                        : 1;  /**< Poisoned TLP Severity */
+	uint32_t reserved_6_11                : 6;
+	uint32_t sdes                         : 1;  /**< Surprise Down Error Severity (not supported) */
+	uint32_t dlpes                        : 1;  /**< Data Link Protocol Error Severity */
+	uint32_t reserved_0_3                 : 4;
+#else
+	uint32_t reserved_0_3                 : 4;
+	uint32_t dlpes                        : 1;
+	uint32_t sdes                         : 1;
+	uint32_t reserved_6_11                : 6;
+	uint32_t ptlps                        : 1;
+	uint32_t fcpes                        : 1;
+	uint32_t cts                          : 1;
+	uint32_t cas                          : 1;
+	uint32_t ucs                          : 1;
+	uint32_t ros                          : 1;
+	uint32_t mtlps                        : 1;
+	uint32_t ecrces                       : 1;
+	uint32_t ures                         : 1;
+	uint32_t reserved_21_21               : 1;
+	uint32_t ucies                        : 1;
+	uint32_t reserved_23_23               : 1;
+	uint32_t uatombs                      : 1;
+	uint32_t reserved_25_31               : 7;
+#endif
+	} cn70xx;
 	struct cvmx_pcieepx_cfg067_cn78xx {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint32_t reserved_26_31               : 6;
@@ -7910,7 +7994,7 @@ union cvmx_pcieepx_cfg068 {
 	struct cvmx_pcieepx_cfg068_cn52xx     cn66xx;
 	struct cvmx_pcieepx_cfg068_cn52xx     cn68xx;
 	struct cvmx_pcieepx_cfg068_cn52xx     cn68xxp1;
-	struct cvmx_pcieepx_cfg068_cn52xx     cn70xx;
+	struct cvmx_pcieepx_cfg068_s          cn70xx;
 	struct cvmx_pcieepx_cfg068_s          cn78xx;
 	struct cvmx_pcieepx_cfg068_s          cnf71xx;
 };
@@ -8302,7 +8386,7 @@ typedef union cvmx_pcieepx_cfg083 cvmx_pcieepx_cfg083_t;
 /**
  * cvmx_pcieep#_cfg084
  *
- * PCIE_CFG112 = One hundred thirteenth 32-bits of PCIE type 0 config space
+ * PCIE_CFG084 = Eighty-fifth 32-bits of PCIE type 0 config space
  * (PCI Express Resizable BAR (RBAR) Control Register)
  */
 union cvmx_pcieepx_cfg084 {
@@ -9151,6 +9235,90 @@ union cvmx_pcieepx_cfg450 {
                                                          * As the The Force Link is a pulse, writing a 1 to it does
                                                            trigger the forced link state event, even thought reading it
                                                            always returns a 0. */
+	uint32_t reserved_12_14               : 3;
+	uint32_t link_cmd                     : 4;  /**< Link Command
+                                                         The Link command that the PCI Express Core will be forced to
+                                                         transmit when bit 15 (Force Link) is set.
+                                                         Command encoding:
+                                                         o PEM_SEND_IDLE              1h
+                                                         o PEM_SEND_EIDLE             2h
+                                                         o PEM_XMT_IN_EIDLE           3h
+                                                         o PEM_MOD_COMPL_PATTERN      4h
+                                                         o PEM_SEND_RCVR_DETECT_SEQ   5h
+                                                         o PEM_SEND_TS1               6h
+                                                         o PEM_SEND_TS2               7h
+                                                         o PEM_COMPLIANCE_PATTERN     8h
+                                                         o PEM_SEND_SDS               9h
+                                                         o PEM_SEND_BEACON            ah
+                                                         o PEM_SEND_N_FTS             bh
+                                                         o PEM_NORM                   ch
+                                                         o PEM_SEND_SKP               dh
+                                                         o PEM_SEND_EIES              eh
+                                                         o PEM_SEND_EIES_SYM          fh */
+	uint32_t link_num                     : 8;  /**< Link Number
+                                                         Not used for Endpoint */
+#else
+	uint32_t link_num                     : 8;
+	uint32_t link_cmd                     : 4;
+	uint32_t reserved_12_14               : 3;
+	uint32_t force_link                   : 1;
+	uint32_t link_state                   : 6;
+	uint32_t reserved_22_23               : 2;
+	uint32_t lpec                         : 8;
+#endif
+	} s;
+	struct cvmx_pcieepx_cfg450_cn52xx {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint32_t lpec                         : 8;  /**< Low Power Entrance Count
+                                                         The Power Management state will wait for this many clock cycles
+                                                         for the associated completion of a CfgWr to PCIE_CFG017 register
+                                                         Power State (PS) field register to go low-power. This register
+                                                         is intended for applications that do not let the PCI Express
+                                                         bus handle a completion for configuration request to the
+                                                         Power Management Control and Status (PCIE_CFG017) register. */
+	uint32_t reserved_22_23               : 2;
+	uint32_t link_state                   : 6;  /**< Link State
+                                                         The Link state that the PCI Express Bus will be forced to
+                                                         when bit 15 (Force Link) is set.
+                                                         State encoding:
+                                                         o DETECT_QUIET              00h
+                                                         o DETECT_ACT                01h
+                                                         o POLL_ACTIVE               02h
+                                                         o POLL_COMPLIANCE           03h
+                                                         o POLL_CONFIG               04h
+                                                         o PRE_DETECT_QUIET          05h
+                                                         o DETECT_WAIT               06h
+                                                         o CFG_LINKWD_START          07h
+                                                         o CFG_LINKWD_ACEPT          08h
+                                                         o CFG_LANENUM_WAIT          09h
+                                                         o CFG_LANENUM_ACEPT         0Ah
+                                                         o CFG_COMPLETE              0Bh
+                                                         o CFG_IDLE                  0Ch
+                                                         o RCVRY_LOCK                0Dh
+                                                         o RCVRY_SPEED               0Eh
+                                                         o RCVRY_RCVRCFG             0Fh
+                                                         o RCVRY_IDLE                10h
+                                                         o L0                        11h
+                                                         o L0S                       12h
+                                                         o L123_SEND_EIDLE           13h
+                                                         o L1_IDLE                   14h
+                                                         o L2_IDLE                   15h
+                                                         o L2_WAKE                   16h
+                                                         o DISABLED_ENTRY            17h
+                                                         o DISABLED_IDLE             18h
+                                                         o DISABLED                  19h
+                                                         o LPBK_ENTRY                1Ah
+                                                         o LPBK_ACTIVE               1Bh
+                                                         o LPBK_EXIT                 1Ch
+                                                         o LPBK_EXIT_TIMEOUT         1Dh
+                                                         o HOT_RESET_ENTRY           1Eh
+                                                         o HOT_RESET                 1Fh */
+	uint32_t force_link                   : 1;  /**< Force Link
+                                                         Forces the Link to the state specified by the Link State field.
+                                                         The Force Link pulse will trigger Link re-negotiation.
+                                                         * As the The Force Link is a pulse, writing a 1 to it does
+                                                           trigger the forced link state event, even thought reading it
+                                                           always returns a 0. */
 	uint32_t reserved_8_14                : 7;
 	uint32_t link_num                     : 8;  /**< Link Number
                                                          Not used for Endpoint */
@@ -9162,20 +9330,19 @@ union cvmx_pcieepx_cfg450 {
 	uint32_t reserved_22_23               : 2;
 	uint32_t lpec                         : 8;
 #endif
-	} s;
-	struct cvmx_pcieepx_cfg450_s          cn52xx;
-	struct cvmx_pcieepx_cfg450_s          cn52xxp1;
-	struct cvmx_pcieepx_cfg450_s          cn56xx;
-	struct cvmx_pcieepx_cfg450_s          cn56xxp1;
-	struct cvmx_pcieepx_cfg450_s          cn61xx;
-	struct cvmx_pcieepx_cfg450_s          cn63xx;
-	struct cvmx_pcieepx_cfg450_s          cn63xxp1;
-	struct cvmx_pcieepx_cfg450_s          cn66xx;
-	struct cvmx_pcieepx_cfg450_s          cn68xx;
-	struct cvmx_pcieepx_cfg450_s          cn68xxp1;
+	} cn52xx;
+	struct cvmx_pcieepx_cfg450_cn52xx     cn52xxp1;
+	struct cvmx_pcieepx_cfg450_cn52xx     cn56xx;
+	struct cvmx_pcieepx_cfg450_cn52xx     cn56xxp1;
+	struct cvmx_pcieepx_cfg450_cn52xx     cn61xx;
+	struct cvmx_pcieepx_cfg450_cn52xx     cn63xx;
+	struct cvmx_pcieepx_cfg450_cn52xx     cn63xxp1;
+	struct cvmx_pcieepx_cfg450_cn52xx     cn66xx;
+	struct cvmx_pcieepx_cfg450_cn52xx     cn68xx;
+	struct cvmx_pcieepx_cfg450_cn52xx     cn68xxp1;
 	struct cvmx_pcieepx_cfg450_s          cn70xx;
-	struct cvmx_pcieepx_cfg450_s          cn78xx;
-	struct cvmx_pcieepx_cfg450_s          cnf71xx;
+	struct cvmx_pcieepx_cfg450_cn52xx     cn78xx;
+	struct cvmx_pcieepx_cfg450_cn52xx     cnf71xx;
 };
 typedef union cvmx_pcieepx_cfg450 cvmx_pcieepx_cfg450_t;
 
@@ -9593,7 +9760,25 @@ union cvmx_pcieepx_cfg454 {
 	struct cvmx_pcieepx_cfg454_cn61xx     cn66xx;
 	struct cvmx_pcieepx_cfg454_cn61xx     cn68xx;
 	struct cvmx_pcieepx_cfg454_cn52xx     cn68xxp1;
-	struct cvmx_pcieepx_cfg454_cn61xx     cn70xx;
+	struct cvmx_pcieepx_cfg454_cn70xx {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint32_t reserved_24_31               : 8;
+	uint32_t tmanlt                       : 5;  /**< Timer Modifier for Ack/Nak Latency Timer
+                                                         Increases the timer value for the Ack/Nak latency timer, in
+                                                         increments of 64 clock cycles. */
+	uint32_t tmrt                         : 5;  /**< Timer Modifier for Replay Timer
+                                                         Increases the timer value for the replay timer, in increments
+                                                         of 64 clock cycles. */
+	uint32_t reserved_8_13                : 6;
+	uint32_t mfuncn                       : 8;  /**< Max Number of Functions Supported */
+#else
+	uint32_t mfuncn                       : 8;
+	uint32_t reserved_8_13                : 6;
+	uint32_t tmrt                         : 5;
+	uint32_t tmanlt                       : 5;
+	uint32_t reserved_24_31               : 8;
+#endif
+	} cn70xx;
 	struct cvmx_pcieepx_cfg454_cn78xx {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint32_t reserved_29_31               : 3;
diff --git a/arch/mips/include/asm/octeon/cvmx-pciercx-defs.h b/arch/mips/include/asm/octeon/cvmx-pciercx-defs.h
index 369a5b6..dade8b0 100644
--- a/arch/mips/include/asm/octeon/cvmx-pciercx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pciercx-defs.h
@@ -6480,9 +6480,7 @@ union cvmx_pciercx_cfg065 {
 	struct cvmx_pciercx_cfg065_cn61xx     cn66xx;
 	struct cvmx_pciercx_cfg065_cn61xx     cn68xx;
 	struct cvmx_pciercx_cfg065_cn52xx     cn68xxp1;
-	struct cvmx_pciercx_cfg065_cn61xx     cn70xx;
-	struct cvmx_pciercx_cfg065_s          cn78xx;
-	struct cvmx_pciercx_cfg065_cnf71xx {
+	struct cvmx_pciercx_cfg065_cn70xx {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint32_t reserved_25_31               : 7;
 	uint32_t uatombs                      : 1;  /**< Unsupported AtomicOp Egress Blocked Status */
@@ -6522,7 +6520,9 @@ union cvmx_pciercx_cfg065 {
 	uint32_t uatombs                      : 1;
 	uint32_t reserved_25_31               : 7;
 #endif
-	} cnf71xx;
+	} cn70xx;
+	struct cvmx_pciercx_cfg065_s          cn78xx;
+	struct cvmx_pciercx_cfg065_cn70xx     cnf71xx;
 };
 typedef union cvmx_pciercx_cfg065 cvmx_pciercx_cfg065_t;
 
@@ -6830,13 +6830,13 @@ union cvmx_pciercx_cfg067 {
 	struct cvmx_pciercx_cfg067_cn61xx     cn66xx;
 	struct cvmx_pciercx_cfg067_cn61xx     cn68xx;
 	struct cvmx_pciercx_cfg067_cn52xx     cn68xxp1;
-	struct cvmx_pciercx_cfg067_cn61xx     cn70xx;
-	struct cvmx_pciercx_cfg067_cn78xx {
+	struct cvmx_pciercx_cfg067_cn70xx {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint32_t reserved_26_31               : 6;
-	uint32_t tpbes                        : 1;  /**< Unsupported TLP Prefix Blocked Error Severity */
+	uint32_t reserved_25_31               : 7;
 	uint32_t uatombs                      : 1;  /**< Unsupported AtomicOp Egress Blocked Severity */
-	uint32_t reserved_21_23               : 3;
+	uint32_t reserved_23_23               : 1;
+	uint32_t ucies                        : 1;  /**< Uncorrectable Internal Error Severity */
+	uint32_t reserved_21_21               : 1;
 	uint32_t ures                         : 1;  /**< Unsupported Request Error Severity */
 	uint32_t ecrces                       : 1;  /**< ECRC Error Severity */
 	uint32_t mtlps                        : 1;  /**< Malformed TLP Severity */
@@ -6864,19 +6864,19 @@ union cvmx_pciercx_cfg067 {
 	uint32_t mtlps                        : 1;
 	uint32_t ecrces                       : 1;
 	uint32_t ures                         : 1;
-	uint32_t reserved_21_23               : 3;
+	uint32_t reserved_21_21               : 1;
+	uint32_t ucies                        : 1;
+	uint32_t reserved_23_23               : 1;
 	uint32_t uatombs                      : 1;
-	uint32_t tpbes                        : 1;
-	uint32_t reserved_26_31               : 6;
+	uint32_t reserved_25_31               : 7;
 #endif
-	} cn78xx;
-	struct cvmx_pciercx_cfg067_cnf71xx {
+	} cn70xx;
+	struct cvmx_pciercx_cfg067_cn78xx {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint32_t reserved_25_31               : 7;
+	uint32_t reserved_26_31               : 6;
+	uint32_t tpbes                        : 1;  /**< Unsupported TLP Prefix Blocked Error Severity */
 	uint32_t uatombs                      : 1;  /**< Unsupported AtomicOp Egress Blocked Severity */
-	uint32_t reserved_23_23               : 1;
-	uint32_t ucies                        : 1;  /**< Uncorrectable Internal Error Severity */
-	uint32_t reserved_21_21               : 1;
+	uint32_t reserved_21_23               : 3;
 	uint32_t ures                         : 1;  /**< Unsupported Request Error Severity */
 	uint32_t ecrces                       : 1;  /**< ECRC Error Severity */
 	uint32_t mtlps                        : 1;  /**< Malformed TLP Severity */
@@ -6904,13 +6904,13 @@ union cvmx_pciercx_cfg067 {
 	uint32_t mtlps                        : 1;
 	uint32_t ecrces                       : 1;
 	uint32_t ures                         : 1;
-	uint32_t reserved_21_21               : 1;
-	uint32_t ucies                        : 1;
-	uint32_t reserved_23_23               : 1;
+	uint32_t reserved_21_23               : 3;
 	uint32_t uatombs                      : 1;
-	uint32_t reserved_25_31               : 7;
+	uint32_t tpbes                        : 1;
+	uint32_t reserved_26_31               : 6;
 #endif
-	} cnf71xx;
+	} cn78xx;
+	struct cvmx_pciercx_cfg067_cn70xx     cnf71xx;
 };
 typedef union cvmx_pciercx_cfg067 cvmx_pciercx_cfg067_t;
 
@@ -6979,7 +6979,7 @@ union cvmx_pciercx_cfg068 {
 	struct cvmx_pciercx_cfg068_cn52xx     cn66xx;
 	struct cvmx_pciercx_cfg068_cn52xx     cn68xx;
 	struct cvmx_pciercx_cfg068_cn52xx     cn68xxp1;
-	struct cvmx_pciercx_cfg068_cn52xx     cn70xx;
+	struct cvmx_pciercx_cfg068_s          cn70xx;
 	struct cvmx_pciercx_cfg068_s          cn78xx;
 	struct cvmx_pciercx_cfg068_s          cnf71xx;
 };
@@ -7807,6 +7807,89 @@ union cvmx_pciercx_cfg450 {
                                                          * As the The Force Link is a pulse, writing a 1 to it does
                                                            trigger the forced link state event, even thought reading it
                                                            always returns a 0. */
+	uint32_t reserved_12_14               : 3;
+	uint32_t link_cmd                     : 4;  /**< Link Command
+                                                         The Link command that the PCI Express Core will be forced to
+                                                         transmit when bit 15 (Force Link) is set.
+                                                         Command encoding:
+                                                         o PEM_SEND_IDLE              1h
+                                                         o PEM_SEND_EIDLE             2h
+                                                         o PEM_XMT_IN_EIDLE           3h
+                                                         o PEM_MOD_COMPL_PATTERN      4h
+                                                         o PEM_SEND_RCVR_DETECT_SEQ   5h
+                                                         o PEM_SEND_TS1               6h
+                                                         o PEM_SEND_TS2               7h
+                                                         o PEM_COMPLIANCE_PATTERN     8h
+                                                         o PEM_SEND_SDS               9h
+                                                         o PEM_SEND_BEACON            ah
+                                                         o PEM_SEND_N_FTS             bh
+                                                         o PEM_NORM                   ch
+                                                         o PEM_SEND_SKP               dh
+                                                         o PEM_SEND_EIES              eh
+                                                         o PEM_SEND_EIES_SYM          fh */
+	uint32_t link_num                     : 8;  /**< Link Number */
+#else
+	uint32_t link_num                     : 8;
+	uint32_t link_cmd                     : 4;
+	uint32_t reserved_12_14               : 3;
+	uint32_t force_link                   : 1;
+	uint32_t link_state                   : 6;
+	uint32_t reserved_22_23               : 2;
+	uint32_t lpec                         : 8;
+#endif
+	} s;
+	struct cvmx_pciercx_cfg450_cn52xx {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint32_t lpec                         : 8;  /**< Low Power Entrance Count
+                                                         The Power Management state will wait for this many clock cycles
+                                                         for the associated completion of a CfgWr to PCIE_CFG017 register
+                                                         Power State (PS) field register to go low-power. This register
+                                                         is intended for applications that do not let the PCI Express
+                                                         bus handle a completion for configuration request to the
+                                                         Power Management Control and Status (PCIE_CFG017) register. */
+	uint32_t reserved_22_23               : 2;
+	uint32_t link_state                   : 6;  /**< Link State
+                                                         The Link state that the PCI Express Bus will be forced to
+                                                         when bit 15 (Force Link) is set.
+                                                         State encoding:
+                                                         o DETECT_QUIET              00h
+                                                         o DETECT_ACT                01h
+                                                         o POLL_ACTIVE               02h
+                                                         o POLL_COMPLIANCE           03h
+                                                         o POLL_CONFIG               04h
+                                                         o PRE_DETECT_QUIET          05h
+                                                         o DETECT_WAIT               06h
+                                                         o CFG_LINKWD_START          07h
+                                                         o CFG_LINKWD_ACEPT          08h
+                                                         o CFG_LANENUM_WAIT          09h
+                                                         o CFG_LANENUM_ACEPT         0Ah
+                                                         o CFG_COMPLETE              0Bh
+                                                         o CFG_IDLE                  0Ch
+                                                         o RCVRY_LOCK                0Dh
+                                                         o RCVRY_SPEED               0Eh
+                                                         o RCVRY_RCVRCFG             0Fh
+                                                         o RCVRY_IDLE                10h
+                                                         o L0                        11h
+                                                         o L0S                       12h
+                                                         o L123_SEND_EIDLE           13h
+                                                         o L1_IDLE                   14h
+                                                         o L2_IDLE                   15h
+                                                         o L2_WAKE                   16h
+                                                         o DISABLED_ENTRY            17h
+                                                         o DISABLED_IDLE             18h
+                                                         o DISABLED                  19h
+                                                         o LPBK_ENTRY                1Ah
+                                                         o LPBK_ACTIVE               1Bh
+                                                         o LPBK_EXIT                 1Ch
+                                                         o LPBK_EXIT_TIMEOUT         1Dh
+                                                         o HOT_RESET_ENTRY           1Eh
+                                                         o HOT_RESET                 1Fh */
+	uint32_t force_link                   : 1;  /**< Force Link
+                                                         Forces the Link to the state specified by the Link State field.
+                                                         The Force Link pulse will trigger Link re-negotiation.
+                                                         * As the The Force Link is a pulse, writing a 1 to it does
+                                                           trigger the forced link state event, even thought reading it
+                                                           always returns a 0. */
 	uint32_t reserved_8_14                : 7;
 	uint32_t link_num                     : 8;  /**< Link Number */
 #else
@@ -7817,20 +7900,19 @@ union cvmx_pciercx_cfg450 {
 	uint32_t reserved_22_23               : 2;
 	uint32_t lpec                         : 8;
 #endif
-	} s;
-	struct cvmx_pciercx_cfg450_s          cn52xx;
-	struct cvmx_pciercx_cfg450_s          cn52xxp1;
-	struct cvmx_pciercx_cfg450_s          cn56xx;
-	struct cvmx_pciercx_cfg450_s          cn56xxp1;
-	struct cvmx_pciercx_cfg450_s          cn61xx;
-	struct cvmx_pciercx_cfg450_s          cn63xx;
-	struct cvmx_pciercx_cfg450_s          cn63xxp1;
-	struct cvmx_pciercx_cfg450_s          cn66xx;
-	struct cvmx_pciercx_cfg450_s          cn68xx;
-	struct cvmx_pciercx_cfg450_s          cn68xxp1;
+	} cn52xx;
+	struct cvmx_pciercx_cfg450_cn52xx     cn52xxp1;
+	struct cvmx_pciercx_cfg450_cn52xx     cn56xx;
+	struct cvmx_pciercx_cfg450_cn52xx     cn56xxp1;
+	struct cvmx_pciercx_cfg450_cn52xx     cn61xx;
+	struct cvmx_pciercx_cfg450_cn52xx     cn63xx;
+	struct cvmx_pciercx_cfg450_cn52xx     cn63xxp1;
+	struct cvmx_pciercx_cfg450_cn52xx     cn66xx;
+	struct cvmx_pciercx_cfg450_cn52xx     cn68xx;
+	struct cvmx_pciercx_cfg450_cn52xx     cn68xxp1;
 	struct cvmx_pciercx_cfg450_s          cn70xx;
-	struct cvmx_pciercx_cfg450_s          cn78xx;
-	struct cvmx_pciercx_cfg450_s          cnf71xx;
+	struct cvmx_pciercx_cfg450_cn52xx     cn78xx;
+	struct cvmx_pciercx_cfg450_cn52xx     cnf71xx;
 };
 typedef union cvmx_pciercx_cfg450 cvmx_pciercx_cfg450_t;
 
@@ -8246,7 +8328,25 @@ union cvmx_pciercx_cfg454 {
 	struct cvmx_pciercx_cfg454_cn61xx     cn66xx;
 	struct cvmx_pciercx_cfg454_cn61xx     cn68xx;
 	struct cvmx_pciercx_cfg454_cn52xx     cn68xxp1;
-	struct cvmx_pciercx_cfg454_cn61xx     cn70xx;
+	struct cvmx_pciercx_cfg454_cn70xx {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint32_t reserved_24_31               : 8;
+	uint32_t tmanlt                       : 5;  /**< Timer Modifier for Ack/Nak Latency Timer
+                                                         Increases the timer value for the Ack/Nak latency timer, in
+                                                         increments of 64 clock cycles. */
+	uint32_t tmrt                         : 5;  /**< Timer Modifier for Replay Timer
+                                                         Increases the timer value for the replay timer, in increments
+                                                         of 64 clock cycles. */
+	uint32_t reserved_8_13                : 6;
+	uint32_t mfuncn                       : 8;  /**< Max Number of Functions Supported */
+#else
+	uint32_t mfuncn                       : 8;
+	uint32_t reserved_8_13                : 6;
+	uint32_t tmrt                         : 5;
+	uint32_t tmanlt                       : 5;
+	uint32_t reserved_24_31               : 8;
+#endif
+	} cn70xx;
 	struct cvmx_pciercx_cfg454_cn78xx {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint32_t reserved_29_31               : 3;
diff --git a/arch/mips/include/asm/octeon/cvmx-pemx-defs.h b/arch/mips/include/asm/octeon/cvmx-pemx-defs.h
index a128425..9f5a96a 100644
--- a/arch/mips/include/asm/octeon/cvmx-pemx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pemx-defs.h
@@ -1206,8 +1206,9 @@ union cvmx_pemx_cfg {
                                                          When clear, no lane swapping is performed. */
 	uint64_t hostmd                       : 1;  /**< When set, the PEM is configured to be a Root Complex.
                                                          When clear, the PEM is configured to be an End Point. */
-	uint64_t md                           : 3;  /**< This field will overwrite the pin settings for speed and lane
-                                                         configuration:
+	uint64_t md                           : 3;  /**< This field will overwrite the pin settings for speed and lane.
+                                                         NOTE - The lower two bits of the MD field must
+                                                         be the same across all configured PEMs!
                                                            000 - Gen2 Speed, 2-lanes
                                                            001 - Gen2 Speed, 1-lane
                                                            010 - Gen2 Speed, 4-lanes
@@ -2090,8 +2091,7 @@ union cvmx_pemx_dbg_info_en {
 	uint64_t tpcdbe2                      : 1;  /**< Allows PEM_DBG_INFO[51] to generate an interrupt. */
 	uint64_t reserved_49_50               : 2;
 	uint64_t tpcsbe2                      : 1;  /**< Allows PEM_DBG_INFO[48] to generate an interrupt. */
-	uint64_t reserved_36_47               : 12;
-	uint64_t tpfsbe1                      : 1;  /**< Allows PEM_DBG_INFO[35] to generate an interrupt. */
+	uint64_t reserved_35_47               : 13;
 	uint64_t tpfsbe0                      : 1;  /**< Allows PEM_DBG_INFO[34] to generate an interrupt. */
 	uint64_t datq_pe                      : 1;  /**< Allows PEM_DBG_INFO[33] to generate an interrupt. */
 	uint64_t hdrq_pe                      : 1;  /**< Allows PEM_DBG_INFO[32] to generate an interrupt. */
@@ -2163,8 +2163,7 @@ union cvmx_pemx_dbg_info_en {
 	uint64_t hdrq_pe                      : 1;
 	uint64_t datq_pe                      : 1;
 	uint64_t tpfsbe0                      : 1;
-	uint64_t tpfsbe1                      : 1;
-	uint64_t reserved_36_47               : 12;
+	uint64_t reserved_35_47               : 13;
 	uint64_t tpcsbe2                      : 1;
 	uint64_t reserved_49_50               : 2;
 	uint64_t tpcdbe2                      : 1;
@@ -2249,16 +2248,16 @@ union cvmx_pemx_dbg_info_en {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_46_63               : 18;
 	uint64_t tpcdbe1                      : 1;  /**< Allows PEM_DBG_INFO[45] to generate an interrupt. */
-	uint64_t tpcdbe0                      : 1;  /**< Allows PEM_DBG_INFO[44] to generate an interrupt. */
-	uint64_t tpcsbe1                      : 1;  /**< Allows PEM_DBG_INFO[43] to generate an interrupt. */
+	uint64_t tpcsbe1                      : 1;  /**< Allows PEM_DBG_INFO[44] to generate an interrupt. */
+	uint64_t tpcdbe0                      : 1;  /**< Allows PEM_DBG_INFO[43] to generate an interrupt. */
 	uint64_t tpcsbe0                      : 1;  /**< Allows PEM_DBG_INFO[42] to generate an interrupt. */
 	uint64_t tnfdbe1                      : 1;  /**< Allows PEM_DBG_INFO[41] to generate an interrupt. */
-	uint64_t tnfdbe0                      : 1;  /**< Allows PEM_DBG_INFO[40] to generate an interrupt. */
-	uint64_t tnfsbe1                      : 1;  /**< Allows PEM_DBG_INFO[39] to generate an interrupt. */
+	uint64_t tnfsbe1                      : 1;  /**< Allows PEM_DBG_INFO[40] to generate an interrupt. */
+	uint64_t tnfdbe0                      : 1;  /**< Allows PEM_DBG_INFO[39] to generate an interrupt. */
 	uint64_t tnfsbe0                      : 1;  /**< Allows PEM_DBG_INFO[38] to generate an interrupt. */
 	uint64_t tpfdbe1                      : 1;  /**< Allows PEM_DBG_INFO[37] to generate an interrupt. */
-	uint64_t tpfdbe0                      : 1;  /**< Allows PEM_DBG_INFO[36] to generate an interrupt. */
-	uint64_t tpfsbe1                      : 1;  /**< Allows PEM_DBG_INFO[35] to generate an interrupt. */
+	uint64_t tpfsbe1                      : 1;  /**< Allows PEM_DBG_INFO[36] to generate an interrupt. */
+	uint64_t tpfdbe0                      : 1;  /**< Allows PEM_DBG_INFO[35] to generate an interrupt. */
 	uint64_t tpfsbe0                      : 1;  /**< Allows PEM_DBG_INFO[34] to generate an interrupt. */
 	uint64_t datq_pe                      : 1;  /**< Allows PEM_DBG_INFO[33] to generate an interrupt. */
 	uint64_t hdrq_pe                      : 1;  /**< Allows PEM_DBG_INFO[32] to generate an interrupt. */
@@ -2330,16 +2329,16 @@ union cvmx_pemx_dbg_info_en {
 	uint64_t hdrq_pe                      : 1;
 	uint64_t datq_pe                      : 1;
 	uint64_t tpfsbe0                      : 1;
-	uint64_t tpfsbe1                      : 1;
 	uint64_t tpfdbe0                      : 1;
+	uint64_t tpfsbe1                      : 1;
 	uint64_t tpfdbe1                      : 1;
 	uint64_t tnfsbe0                      : 1;
-	uint64_t tnfsbe1                      : 1;
 	uint64_t tnfdbe0                      : 1;
+	uint64_t tnfsbe1                      : 1;
 	uint64_t tnfdbe1                      : 1;
 	uint64_t tpcsbe0                      : 1;
-	uint64_t tpcsbe1                      : 1;
 	uint64_t tpcdbe0                      : 1;
+	uint64_t tpcsbe1                      : 1;
 	uint64_t tpcdbe1                      : 1;
 	uint64_t reserved_46_63               : 18;
 #endif
diff --git a/arch/mips/include/asm/octeon/cvmx-pki.h b/arch/mips/include/asm/octeon/cvmx-pki.h
index 7739fe0..f034ba9 100644
--- a/arch/mips/include/asm/octeon/cvmx-pki.h
+++ b/arch/mips/include/asm/octeon/cvmx-pki.h
@@ -49,6 +49,9 @@
 #ifdef CVMX_BUILD_FOR_LINUX_KERNEL
 #include <asm/octeon/cvmx.h>
 #include <asm/octeon/cvmx-pki-defs.h>
+#include <asm/octeon/cvmx-fpa.h>
+#else
+#include "cvmx-fpa.h"
 #endif
 
 #ifdef	__cplusplus
@@ -66,46 +69,120 @@ extern "C" {
 #define CVMX_PKI_NUM_QPG_ENTRY		(2048)
 #define CVMX_PKI_NUM_FRAME_CHECK_VALUES	(2)
 #define CVMX_PKI_NUM_LTYPES		(32)
-#define CVMX_PKI_MAX_CLUSTER_PROFILES   (4)
-#define CVMX_PKI_NUM_STYLE_PROFILES	(1024)
-#define CVMX_PKI_MAX_NAME		(64)
 #define CVMX_PKI_NUM_CLUSTERS		(4)
 #define CVMX_PKI_NUM_CLUSTER_GROUP      (4)
 #define CVMX_PKI_NUM_PCAM_BANK		(2)
 #define CVMX_PKI_NUM_PCAM_ENTRY		(192)
-#define CVMX_PKI_TOTAL_PCAM_ENTRY	((CVMX_PKI_NUM_CLUSTERS) * (CVMX_PKI_NUM_PCAM_BANK) *\
-						(CVMX_PKI_NUM_PCAM_ENTRY))
-#define CVMX_PKI_MAX_QPG_STYLE_INDEX	(8)
-#define CVMX_PKI_MAX_FRAME_SIZE		(65535)
+#define CVMX_PKI_NUM_QPG_STYLE_INDEX	(8)
 #define CVMX_PKI_NUM_FRAME_SIZE_ID	(2)
 #define CVMX_PKI_NUM_CHANNELS		(4096)
 #define CVMX_PKI_NUM_BPID		(1024)
+#define CVMX_PKI_MAX_FRAME_SIZE		(65535)
 #define CVMX_PKI_FIND_AVAL_ENTRY        (-1)
+#define CVMX_PKI_MAX_CLUSTER_PROFILES   (4)
+#define CVMX_PKI_MAX_STYLE_PROFILES	(256)
+#define CVMX_PKI_MAX_NAME		(16)
+#define CVMX_PKI_MAX_POOL_PROFILES	(64) //modify it later
+#define CVMX_PKI_MAX_AURA_PROFILES	(256) //modify it later
+#define CVMX_PKI_MAX_GROUP_PROFILES	(256)
+
+#ifdef CVMX_SUPPORT_SEPARATE_CLUSTER_CONFIG
+#define CVMX_PKI_TOTAL_PCAM_ENTRY	((CVMX_PKI_NUM_CLUSTERS) * (CVMX_PKI_NUM_PCAM_BANK) *\
+						(CVMX_PKI_NUM_PCAM_ENTRY))
+#else
+#define CVMX_PKI_TOTAL_PCAM_ENTRY	(CVMX_PKI_NUM_PCAM_BANK * CVMX_PKI_NUM_PCAM_ENTRY)
+#endif
+
+#define CVMX_PKI_MAX_QPG_PROFILES	(2048)
+#define CVMX_PKI_NOT_ASSIGNED		(-88)
 
 
 struct cvmx_pki_cluster_profile
 {
 	char		name[CVMX_PKI_MAX_NAME];
-	uint64_t	cl_group;
-#define CVMX_PKI_CLUSTER_0	0x1
-#define CVMX_PKI_CLUSTER_1	0x2
-#define	CVMX_PKI_CLUSTER_2	0x4
-#define CVMX_PKI_CLUSTER_3	0x8
-#define CVMX_PKI_CLUSTER_ALL 0xf
-	uint64_t	cl_mask;
+	int 		num_clusters;
+	int 		cluster_group;
+#define CVMX_PKI_PARSE_DSP		0x01
+#define CVMX_PKI_PARSE_FULCRUM		0x02
+#define CVMX_PKI_PARSE_MPLS		0x04
+#define CVMX_PKI_PARSE_L3		0x08
+#define CVMX_PKI_PARSE_IL3		0x10
+#define CVMX_PKI_PARSE_L4 		0x20
+#define CVMX_PKI_PARSE_CUSTOM_L2	0x40
+#define CVMX_PKI_PARSE_CUSTOM_LG	0x80
+#define CVMX_PKI_PARSE_VIRTUALIZATION	0x100
+#define CVMX_PKI_CLUSTER_ALL            0xf
+	uint64_t        parsing_mask;
+
 };
 
 struct cvmx_pki_cluster_list
 {
-	uint64_t index;
+	int index;
 	struct cvmx_pki_cluster_profile cl_profile[CVMX_PKI_MAX_CLUSTER_PROFILES];
 };
 
+struct cvmx_pki_pool_profile
+{
+	char pool_name[CVMX_PKI_MAX_NAME];
+	cvmx_fpa_pool_config_t	pool_cfg;
+};
+
+struct cvmx_pki_pool_list
+{
+	int index;
+	struct cvmx_pki_pool_profile pool_profile[CVMX_PKI_MAX_POOL_PROFILES];
+};
+
+struct cvmx_pki_aura_profile
+{
+	char aura_name[CVMX_PKI_MAX_NAME];
+	int aura_num;
+	int pool_num;
+	int buffer_count;
+};
+
+struct cvmx_pki_aura_list
+{
+	int index;
+	struct cvmx_pki_aura_profile aura_profile[CVMX_PKI_MAX_AURA_PROFILES];
+};
+
+struct cvmx_pki_group_profile
+{
+	char group_name[CVMX_PKI_MAX_NAME];
+	int group_num;
+};
+
+struct cvmx_pki_group_list
+{
+	int index;
+	struct cvmx_pki_group_profile group_profile[CVMX_PKI_MAX_GROUP_PROFILES];
+};
+
+struct cvmx_pki_qpg_profile
+{
+	char qpg_name[CVMX_PKI_MAX_NAME];
+	int base_offset;
+	int num_entries;
+};
+
+struct cvmx_pki_qpg_list
+{
+	int index;
+	struct cvmx_pki_qpg_profile qpg_profile[CVMX_PKI_MAX_QPG_PROFILES];
+};
+
 struct cvmx_pki_style_profile
 {
-	char		name[CVMX_PKI_MAX_NAME];
-	uint64_t	style_num;
-	uint64_t	cluster;
+	char				name[CVMX_PKI_MAX_NAME];
+	int				style_num;
+};
+
+struct cvmx_pki_style_list
+{
+	int    index;
+	struct cvmx_pki_style_profile style_profile[CVMX_PKI_MAX_STYLE_PROFILES];
 };
 
 struct cvmx_pki_framelen_chk {
@@ -115,16 +192,23 @@ struct cvmx_pki_framelen_chk {
 
 struct cvmx_pki_global_config
 {
-	uint64_t			pki_;
 	uint64_t			parsing_mask;
 	uint64_t			clusters_in_use_mask;
 	struct cvmx_pki_framelen_chk    frame_len_chk[CVMX_PKI_NUM_FRAME_SIZE_ID];
 	//enum cvmx_pki_bel		bel_type_map[CVMX_PKI_MAX_LTYPE];
 };
 
+struct cvmx_pki_qpg_config
+{
+	int  port_add;
+	int  aura;
+	int  group_ok;
+	int  group_bad;
+};
+
 struct cvmx_pki_clustergrp_config
 {
-	uint64_t 	users;
+	int		users;
 	uint64_t	cluster_mask;
 };
 
@@ -138,20 +222,21 @@ enum cvmx_pki_pkind_parse_mode{
 
 enum cvmx_pki_parse_mode_chg {
 	CVMX_PKI_PARSE_NO_CHG = 0x0,
-	CVMX_PKI_PARSE_SKIP_LA = 0x1,
-	CVMX_PKI_PARSE_SKIP_LA_TO_LB = 0x3,
-	CVMX_PKI_PARSE_SKIP_LA_TO_LC = 0x7,
-	CVMX_PKI_PARSE_SKIP_LA_TO_LF = 0x3f,
+	CVMX_PKI_PARSE_SKIP_TO_LB = 0x1,
+	CVMX_PKI_PARSE_SKIP_TO_LC = 0x3,
+	CVMX_PKI_PARSE_SKIP_TO_LD = 0x7,
+	CVMX_PKI_PARSE_SKIP_TO_LG = 0x3f,
 	CVMX_PKI_PARSE_SKIP_ALL = 0x7f,
 };
 
 struct cvmx_pki_pkind_config
 {
-        bool				in_use;
-	uint64_t			cluster_grp;
+	int				users;
 	enum cvmx_pki_pkind_parse_mode	parsing_mode;
+	uint64_t 			cluster_mask;
 	uint64_t 			l2_parsing_mask;
-	uint64_t 			initial_style;
+	int	 			initial_style;
+	int				cluster_grp;
 };
 
 struct cvmx_pki_tag_fields
@@ -179,43 +264,6 @@ struct cvmx_pki_tag_fields
 	uint64_t tag_vni:1;
 };
 
-/**
- * Structure to store FPA pool configuration parameters.
-   vinita modify it after FPA block has defined it for 78xx
- */
-struct cvmx_pki_pool_config
-{
-	int64_t aura_num;
-	uint64_t buffer_size;
-	uint64_t buffer_count;
-};
-
-struct cvmx_pki_qpg_entry
-{
-	int port_add;
-	int aura;
-	int grp_ok;
-	int grp_bad;
-};
-
-struct cvmx_pki_qpg_config
-{
-	int base_offset;
-	int num_entries;
-	//vinita, later modify it to use malloc, if it can be use
-	struct cvmx_pki_qpg_entry qpg_entry[CVMX_PKI_MAX_QPG_STYLE_INDEX];
-};
-
-struct cvmx_pki_aura_config
-{
-	bool in_use;
-	char pool_name[CVMX_PKI_MAX_NAME];
-	char aura_name[CVMX_PKI_MAX_NAME];
-	int pool_number;
-	int aura_number;
-	uint64_t buffer_size;
-};
-
 enum cvmx_pki_l2_len_mode {
 	PKI_L2_LENCHK_EQUAL_GREATER = 0,
 	PKI_L2_LENCHK_EQUAL_ONLY
@@ -243,35 +291,43 @@ enum cvmx_sso_tag_type{
 			- NULL_NULL can be exited by a new work request. A NULL_SWITCH load can also switch the state to NULL */
 };
 
+enum cvmx_pki_qpg_qos {
+	CVMX_PKI_QPG_QOS_NONE = 0,
+	CVMX_PKI_QPG_QOS_VLAN,
+	CVMX_PKI_QPG_QOS_MPLS,
+	CVMX_PKI_QPG_QOS_DSA_SRC,
+	CVMX_PKI_QPG_QOS_DIFFSERV,
+	CVMX_PKI_QPG_QOS_HIGIG
+};
 
 struct cvmx_pki_style_config
 {
-	uint64_t			users;
+	int				users;
 	bool				en_l2_lenchk;
+	uint64_t			cluster_mask;
 	enum cvmx_pki_l2_len_mode	l2_lenchk_mode;
 	bool 				en_maxframe_errchk;
 	bool 				en_minframe_errchk;
-	uint64_t 			max_min_frame_sel;
-	bool 				strip_l2_FCS;
-	bool 				en_FCS_check;
+	int	 			max_min_frame_sel;
+	bool 				strip_l2_fcs;
+	bool 				en_fcs_check;
+	int	 			wqe_header_size;
+	int 				wqe_start_offset;
+	int 				first_mbuf_skip;
+	int	 			later_mbuf_skip;
+	int				mbuff_size;
+	enum cvmx_pki_cache_mode 	cache_mode;
+	bool 				data_wqe_buf_diff;
+	int				wqe_vlan;
+	int				qpg_base_offset;
 	bool 				qpg_calc_port_addr;
 	bool 				qpg_calc_aura;
 	bool 				qpg_calc_group;
-	//uint64_t 			qpg_table_base;
-	uint64_t			qpg_qos;
-	uint64_t 			wqe_header_size;
-	uint64_t 			wqe_start_offset;
-	uint64_t 			first_mbuf_skip;
-	uint64_t 			later_mbuf_skip;
-	uint64_t			mbuff_size;
-	enum cvmx_pki_cache_mode 	cache_mode;
-	bool 				data_wqe_buf_same;
-	uint64_t			wqe_vlan;
+	enum cvmx_pki_qpg_qos		qpg_qos;
+	int				qpg_port_msb;
+	int				qpg_port_shift;
 	enum cvmx_sso_tag_type	 	tag_type;
-	//enum cvmx_pki_tag_mode	 	tag_order;
 	struct cvmx_pki_tag_fields 	tag_fields;
-	struct cvmx_pki_qpg_config      qpg_cfg;
-	struct cvmx_pki_aura_config     aura_cfg[CVMX_PKI_MAX_QPG_STYLE_INDEX];
 };
 
 #define CVMX_PKI_PCAM_TERM_E_NONE_M                            (0x0)
@@ -317,7 +373,7 @@ struct cvmx_pki_pcam_input
 	uint64_t 		style;
 	uint64_t		style_mask;
 	enum cvmx_pki_term	field;
-	uint64_t 		field_mask;
+	uint32_t 		field_mask;
 	uint64_t 		data;
 	uint64_t 		data_mask;
 };
@@ -379,14 +435,15 @@ struct cvmx_pki_pcam_action
 {
 	enum cvmx_pki_parse_mode_chg	parse_mode_chg;
 	enum cvmx_pki_layer_type	layer_type_set;
-	uint64_t			style_add;
-	uint64_t			parse_flag_set;
-	uint64_t			pointer_advance;
+	int				style_add;
+	int				parse_flag_set;
+	int				pointer_advance;
 };
 
 struct cvmx_pki_pcam_config
 {
-	uint64_t			in_use;
+	int				in_use;
+	int 				entry_num;
 	uint64_t			cluster_mask;
 	struct cvmx_pki_pcam_input	pcam_input;
 	struct cvmx_pki_pcam_action	pcam_action;
@@ -394,25 +451,36 @@ struct cvmx_pki_pcam_config
 
 struct cvmx_pki_pcam_list
 {
-	uint64_t 			index;
+	int	 			index;
 	struct cvmx_pki_pcam_config	pcam_cfg[CVMX_PKI_TOTAL_PCAM_ENTRY];
 };
 
-
+/** PKI block configuration*/
 struct cvmx_pki_config
 {
 	struct cvmx_pki_global_config		global_cfg;
 	struct cvmx_pki_clustergrp_config	cluster_cfg[CVMX_PKI_NUM_CLUSTER_GROUP];
-	struct cvmx_pki_pkind_config		pkind_config[CVMX_PKI_NUM_PKIND];
+	struct cvmx_pki_pkind_config		pkind_cfg[CVMX_PKI_NUM_PKIND];
 	struct cvmx_pki_style_config		style_cfg[CVMX_PKI_NUM_FINAL_STYLES];
+	struct cvmx_pki_qpg_config		qpg_cfg[CVMX_PKI_NUM_QPG_ENTRY];
+	//struct cvmx_fpa_pool_config_t		pool_cfg[CVMX_FPA_NUM_POOLS_78XX];
+	//struct cvmx_pki_aura_config		aura_cfg[CVMX_FPA_AURA_NUM];//fpa should have aura config defined but it does not
+};
+
+/** Mapping of profile names to their respective config number*/
+struct cvmx_pki_profiles
+{
 	struct cvmx_pki_pcam_list		pcam_list;
-	struct cvmx_pki_cluster_list    	cluster_list;
-	struct cvmx_pki_style_profile		style_profile[CVMX_PKI_NUM_FINAL_STYLES];
-	//struct cvmx_pki_bp_config_t		bp_cfg;
-	//struct cvmx_pki_red_config_t		red_cfg;
+	struct cvmx_pki_cluster_list    	cl_profile_list;
+	struct cvmx_pki_style_list		style_profile_list;
+	struct cvmx_pki_pool_list		pool_profile_list;
+	struct cvmx_pki_aura_list		aura_profile_list;
+	struct cvmx_pki_group_list	        group_profile_list;
+	struct cvmx_pki_qpg_list	        qpg_profile_list;
 };
 
 extern CVMX_SHARED struct cvmx_pki_config pki_config[CVMX_MAX_NODES];
+extern CVMX_SHARED struct cvmx_pki_profiles pki_profiles[CVMX_MAX_NODES];
 
 /**
  * This function writes qpg entry at specified offset in hardware
@@ -607,9 +675,299 @@ int cvmx_pki_write_aura_bpid(int node, int aura, int bpid);
  *                  max DROP level exceeds.
  *                  1-enable 0-disable
  */
- int cvmx_pki_enable_aura_qos(int node, int aura, bool ena_red,
+int cvmx_pki_enable_aura_qos(int node, int aura, bool ena_red,
 			      bool ena_drop, bool ena_bp);
 
+/**
+ * This function finds if cluster profile with name already exist
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	profile index in cluster list on SUCCESS
+                -1 if profile not found in cluster list
+ */
+int cvmx_pki_cluster_profile_exist(int node, char *name);
+
+/**
+ * This function finds cluster mask associated with
+ * given cluster profile name.
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	cluster_mask on SUCCESS
+                -1 if profile not found in cluster list
+ */
+int cvmx_pki_find_cluster_mask(int node, char *name);
+
+/**
+ * This function finds cluster group associated with
+ * given cluster profile name
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	cluster group number on SUCCESS
+                -1 if profile not found in cluster list
+ */
+int cvmx_pki_find_cluster_group(int node, char *name);
+
+/**
+ * This function finds if fpa pool profile with
+ * name already exist
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	profile index in pool list on SUCCESS
+                -1 if profile not found in pool list
+ */
+int cvmx_pki_pool_profile_exist(int node, char *name);
+
+/**
+ * This function finds if fpa pool number associated with
+ * given profile name
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	pool number on SUCCESS
+                -1 if profile not found in pool list
+ */
+int cvmx_pki_find_pool(int node, char *name);
+
+/**
+ * This function finds if fpa aura with given name
+ * exist in aura list
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	aura index in aura list on SUCCESS
+                -1 if profile not found in aura list
+ */
+int cvmx_pki_aura_profile_exist(int node, char *name);
+
+/**
+ * This function finds aura number associated with
+ * given aura name.
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	aura number in aura list on SUCCESS
+                -1 if profile not found in aura list
+ */
+int cvmx_pki_find_aura(int node, char *name);
+
+/**
+ * This function finds if group with given name
+ * exist in group list
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	index in group list on SUCCESS
+                -1 if profile not found in group list
+ */
+int cvmx_pki_group_profile_exist(int node, char *name);
+
+/**
+ * This function finds group number associated with
+ * given group profile name
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	group number on SUCCESS
+                -1 if profile not found in group list
+ */
+int cvmx_pki_find_group(int node, char *name);
+
+/**
+ * This function finds if qpg profile with given name
+ * exist in qpg list
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	index in qpg list on SUCCESS
+                -1 if profile not found in qpg list
+ */
+int cvmx_pki_qpg_profile_exist(int node, char *name);
+
+/**
+ * This function finds qpg base offset associated with
+ * given qpg profile name.
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	qpg base offset on SUCCESS
+                -1 if profile not found in qpg list
+ */
+int cvmx_pki_find_qpg_base_offset(int node, char *name);
+
+/**
+ * This function get the buffer size of the given pool number
+ * @param node  node number
+ * @param pool  fpa pool number
+ * @return 	buffer size SUCCESS
+                -1 if pool number is not found in pool list
+ */
+int cvmx_pki_get_pool_buffer_size(int node,int pool);
+
+/**
+ * This function get the buffer size of the given aura number
+ * @param node  node number
+ * @param pool  fpa aura number
+ * @return 	buffer size SUCCESS
+                -1 if aura number is not found in aura list
+ */
+int cvmx_pki_get_aura_buffer_size(int node, int aura);
+
+int cvmx_pki_get_mbuff_size (int node, int base_offset);
+
+/**
+ * This function finds if style profile with given name
+ * exist in style list
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	index into style list on SUCCESS
+                -1 if profile not found in style list
+ */
+int cvmx_pki_style_profile_exist(int node, char *name);
+
+/**
+ * This function finds style number associated with
+ * given style profile name.
+ * @param node  node number
+ * @param name  profile name to look for
+ * @return 	style number on SUCCESS
+                -1 if profile not found in style list
+ */
+int cvmx_pki_find_style(int node, char *name);
+
+
+/**
+ * This function stores the cluster configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param name  	name associated with this config
+ * @param cl_profile    structure containing cluster profile parameters below
+ * 			-cluster_group (-1 if needs to be allocated)
+ * 			-num_cluster   (number of cluster in the cluster group)
+ * 			-parsing_mask  (parsing mask for the cluster group)
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_cluster_config(int node, struct cvmx_pki_cluster_profile cl_profile);
+
+/**
+ * This function stores the pool configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param pool_name  	name associated with this config
+ * @param pool_numb     pool number (-1 if need to be allocated)
+ * @param buffer_size	size of buffers in specified pool
+ * @param num_buffers	numberof buffers in specified pool
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_pool_config(int node, char* pool_name, int pool_num,
+			     uint64_t buffer_size, uint64_t num_buffers);
+
+/**
+ * This function stores the aura configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param aura_name  	name associated with this config
+ * @param aura_num      aura number (-1 if need to be allocated)
+ * @param pool  	pool to which aura is mapped
+ * @param num_buffers	number of buffers to allocate to aura.
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_aura_config(int node, char* aura_name, int aura_num, int pool,
+			     int num_buffers);
+
+/**
+ * This function stores the group configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param aura_name  	name associated with this config
+ * @param group		SSO group number (-1 if needs to be allocated)
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_group_config(int node, char *name, int group);
+
+/**
+ * This function stores the qpg configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param name  	name associated with this config
+ * @param base_offset	offset in QPG table (-1 if needs to be allocated)
+ * @param num_entries	total number of indexes needs to be allocated from
+ *                      base_offset.
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_qpg_profile(int node, char* name, int base_offset, int num_entries);
+
+/**
+ * This function stores the group configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param aura_name  	name associated with this config
+ * @param group		SSO group number (-1 if needs to be allocated)
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_qpg_config(int node, char* name, int entry_start,
+			    int entry_end, struct cvmx_pki_qpg_config qpg_config);
+
+/**
+ * This function stores the style configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param aura_name  	name associated with this config
+ * @param style_num	style number (-1 if needs to be allocated)
+ * @param style_cfg	pointer to struct which has parameters related
+ *                      to style config
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_style_config(int node, char* style_name, int style_num,
+			      struct cvmx_pki_style_config* style_cfg);
+
+/**
+ * This function stores the pkind style configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param pkind  	pkind number
+ * @param style_name	pointer to style name which need to be assigned to pkind
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+int cvmx_pki_set_pkind_style(int node, int pkind, int style_name);
+
+/**
+ * This function stores the pkind initial parse mode in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param pkind  	pkind number
+ * @param parse_mode    parse mode to assign to specified pkind.
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+void cvmx_pki_set_pkind_initial_parse_mode(int node, int pkind, int parse_mode);
+
+/**
+ * This function stores the pkind cluster configuration in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param pkind  	pkind number
+ * @param style_name	pointer to style name which need to be assigned to pkind
+ * @return 		0 on SUCCESS
+                        -1 on failure
+ */
+void cvmx_pki_set_pkind_cluster_config(int node, int pkind,
+				       int cl_grp, uint64_t cl_mask);
+
+/**
+ * This function stores the pcam entry in data structure
+ * which is then used to program the hardware.
+ * @param node  	node number
+ * @param cluster_mask	Mask of clusters on which the entry meeds to be appiled.
+ * @param input		structure of pcam input parameter which defines matching creteria.
+ * @param action	structure of pcam action parameters which aill be applied if match is found.
+ * @return              0 on scuccess
+ *			-1 on failure
+ */
+int cvmx_pki_set_pcam_entry(int node, int pcam_index, uint64_t cl_mask,
+			    struct cvmx_pki_pcam_input input,
+			    struct cvmx_pki_pcam_action action);
+
 #ifdef	__cplusplus
 /* *INDENT-OFF* */
 }
diff --git a/arch/mips/include/asm/octeon/cvmx-pko-defs.h b/arch/mips/include/asm/octeon/cvmx-pko-defs.h
index 1396d44..5813ed1 100644
--- a/arch/mips/include/asm/octeon/cvmx-pko-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pko-defs.h
@@ -1620,6 +1620,116 @@ static inline uint64_t CVMX_PKO_PEB_ERR_INT_FUNC(void)
 #define CVMX_PKO_PEB_ERR_INT (CVMX_ADD_IO_SEG(0x0001540000900C00ull))
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+#define CVMX_PKO_PEB_EXT_HDR_DEF_ERR_INFO CVMX_PKO_PEB_EXT_HDR_DEF_ERR_INFO_FUNC()
+static inline uint64_t CVMX_PKO_PEB_EXT_HDR_DEF_ERR_INFO_FUNC(void)
+{
+	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX)))
+		cvmx_warn("CVMX_PKO_PEB_EXT_HDR_DEF_ERR_INFO not supported on this chip\n");
+	return CVMX_ADD_IO_SEG(0x0001540000900C08ull);
+}
+#else
+#define CVMX_PKO_PEB_EXT_HDR_DEF_ERR_INFO (CVMX_ADD_IO_SEG(0x0001540000900C08ull))
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+#define CVMX_PKO_PEB_FCS_SOP_ERR_INFO CVMX_PKO_PEB_FCS_SOP_ERR_INFO_FUNC()
+static inline uint64_t CVMX_PKO_PEB_FCS_SOP_ERR_INFO_FUNC(void)
+{
+	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX)))
+		cvmx_warn("CVMX_PKO_PEB_FCS_SOP_ERR_INFO not supported on this chip\n");
+	return CVMX_ADD_IO_SEG(0x0001540000900C18ull);
+}
+#else
+#define CVMX_PKO_PEB_FCS_SOP_ERR_INFO (CVMX_ADD_IO_SEG(0x0001540000900C18ull))
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+#define CVMX_PKO_PEB_JUMP_DEF_ERR_INFO CVMX_PKO_PEB_JUMP_DEF_ERR_INFO_FUNC()
+static inline uint64_t CVMX_PKO_PEB_JUMP_DEF_ERR_INFO_FUNC(void)
+{
+	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX)))
+		cvmx_warn("CVMX_PKO_PEB_JUMP_DEF_ERR_INFO not supported on this chip\n");
+	return CVMX_ADD_IO_SEG(0x0001540000900C10ull);
+}
+#else
+#define CVMX_PKO_PEB_JUMP_DEF_ERR_INFO (CVMX_ADD_IO_SEG(0x0001540000900C10ull))
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+#define CVMX_PKO_PEB_MACX_CFG_WR_ERR_INFO CVMX_PKO_PEB_MACX_CFG_WR_ERR_INFO_FUNC()
+static inline uint64_t CVMX_PKO_PEB_MACX_CFG_WR_ERR_INFO_FUNC(void)
+{
+	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX)))
+		cvmx_warn("CVMX_PKO_PEB_MACX_CFG_WR_ERR_INFO not supported on this chip\n");
+	return CVMX_ADD_IO_SEG(0x0001540000900C50ull);
+}
+#else
+#define CVMX_PKO_PEB_MACX_CFG_WR_ERR_INFO (CVMX_ADD_IO_SEG(0x0001540000900C50ull))
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+#define CVMX_PKO_PEB_MAX_LINK_ERR_INFO CVMX_PKO_PEB_MAX_LINK_ERR_INFO_FUNC()
+static inline uint64_t CVMX_PKO_PEB_MAX_LINK_ERR_INFO_FUNC(void)
+{
+	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX)))
+		cvmx_warn("CVMX_PKO_PEB_MAX_LINK_ERR_INFO not supported on this chip\n");
+	return CVMX_ADD_IO_SEG(0x0001540000900C48ull);
+}
+#else
+#define CVMX_PKO_PEB_MAX_LINK_ERR_INFO (CVMX_ADD_IO_SEG(0x0001540000900C48ull))
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+#define CVMX_PKO_PEB_PAD_ERR_INFO CVMX_PKO_PEB_PAD_ERR_INFO_FUNC()
+static inline uint64_t CVMX_PKO_PEB_PAD_ERR_INFO_FUNC(void)
+{
+	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX)))
+		cvmx_warn("CVMX_PKO_PEB_PAD_ERR_INFO not supported on this chip\n");
+	return CVMX_ADD_IO_SEG(0x0001540000900C28ull);
+}
+#else
+#define CVMX_PKO_PEB_PAD_ERR_INFO (CVMX_ADD_IO_SEG(0x0001540000900C28ull))
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+#define CVMX_PKO_PEB_PSE_FIFO_ERR_INFO CVMX_PKO_PEB_PSE_FIFO_ERR_INFO_FUNC()
+static inline uint64_t CVMX_PKO_PEB_PSE_FIFO_ERR_INFO_FUNC(void)
+{
+	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX)))
+		cvmx_warn("CVMX_PKO_PEB_PSE_FIFO_ERR_INFO not supported on this chip\n");
+	return CVMX_ADD_IO_SEG(0x0001540000900C20ull);
+}
+#else
+#define CVMX_PKO_PEB_PSE_FIFO_ERR_INFO (CVMX_ADD_IO_SEG(0x0001540000900C20ull))
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+#define CVMX_PKO_PEB_SUBD_ADDR_ERR_INFO CVMX_PKO_PEB_SUBD_ADDR_ERR_INFO_FUNC()
+static inline uint64_t CVMX_PKO_PEB_SUBD_ADDR_ERR_INFO_FUNC(void)
+{
+	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX)))
+		cvmx_warn("CVMX_PKO_PEB_SUBD_ADDR_ERR_INFO not supported on this chip\n");
+	return CVMX_ADD_IO_SEG(0x0001540000900C38ull);
+}
+#else
+#define CVMX_PKO_PEB_SUBD_ADDR_ERR_INFO (CVMX_ADD_IO_SEG(0x0001540000900C38ull))
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+#define CVMX_PKO_PEB_SUBD_SIZE_ERR_INFO CVMX_PKO_PEB_SUBD_SIZE_ERR_INFO_FUNC()
+static inline uint64_t CVMX_PKO_PEB_SUBD_SIZE_ERR_INFO_FUNC(void)
+{
+	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX)))
+		cvmx_warn("CVMX_PKO_PEB_SUBD_SIZE_ERR_INFO not supported on this chip\n");
+	return CVMX_ADD_IO_SEG(0x0001540000900C40ull);
+}
+#else
+#define CVMX_PKO_PEB_SUBD_SIZE_ERR_INFO (CVMX_ADD_IO_SEG(0x0001540000900C40ull))
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
+#define CVMX_PKO_PEB_TRUNC_ERR_INFO CVMX_PKO_PEB_TRUNC_ERR_INFO_FUNC()
+static inline uint64_t CVMX_PKO_PEB_TRUNC_ERR_INFO_FUNC(void)
+{
+	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX)))
+		cvmx_warn("CVMX_PKO_PEB_TRUNC_ERR_INFO not supported on this chip\n");
+	return CVMX_ADD_IO_SEG(0x0001540000900C30ull);
+}
+#else
+#define CVMX_PKO_PEB_TRUNC_ERR_INFO (CVMX_ADD_IO_SEG(0x0001540000900C30ull))
+#endif
+#if CVMX_ENABLE_CSR_ADDRESS_CHECKING
 static inline uint64_t CVMX_PKO_PQX_DROPPED_BYTES(unsigned long offset)
 {
 	if (!(
@@ -7282,9 +7392,11 @@ union cvmx_pko_pdm_cfg {
 	uint64_t u64;
 	struct cvmx_pko_pdm_cfg_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t reserved_10_63               : 54;
+	uint64_t reserved_11_63               : 53;
+	uint64_t dis_flsh_cache               : 1;  /**< Set to disable the flush buffer's cache. This will make all fills require full memory
+                                                         latency. For diagnostic use only. */
 	uint64_t pko_pad_minlen               : 7;  /**< Minimum frame padding min length. When */
-	uint64_t diag_mode                    : 1;  /**< Diagnostic mode. Enable to read/write to memories in PDM through CSR interface. */
+	uint64_t diag_mode                    : 1;  /**< Set to enable read/write to memories in PDM through CSR interface.  For diagnostic use only. */
 	uint64_t alloc_lds                    : 1;  /**< Allocate LDS. This signal prevents the loads to IOBP from being allocated in on-chip cache
                                                          (LDWB vs. LDD). Two modes as follows:
                                                          0 = No allocate (LDWB)
@@ -7298,7 +7410,8 @@ union cvmx_pko_pdm_cfg {
 	uint64_t alloc_lds                    : 1;
 	uint64_t diag_mode                    : 1;
 	uint64_t pko_pad_minlen               : 7;
-	uint64_t reserved_10_63               : 54;
+	uint64_t dis_flsh_cache               : 1;
+	uint64_t reserved_11_63               : 53;
 #endif
 	} s;
 	struct cvmx_pko_pdm_cfg_s             cn78xx;
@@ -8003,8 +8116,8 @@ union cvmx_pko_peb_err_int {
 	uint64_t peb_trunc_err                : 1;  /**< Asserted when a PD has truncated data.  Throws PKO_INTSN_E::PEB_TRUNC_ERR. */
 	uint64_t peb_pad_err                  : 1;  /**< Asserted when a PD has data padded to it (SEND_HDR[TOTAL] < sum(SEND_DATA[size])).  Throws
                                                          PKO_INTSN_E::PEB_PAD_ERR. */
-	uint64_t peb_pse_fifo_cfg_err         : 1;  /**< Asserted when PSE sends PD information for a non-configured FIFO.  Throws
-                                                         PKO_INTSN_E::PEB_PSE_FIFO_CFG_ERR. */
+	uint64_t peb_pse_fifo_err             : 1;  /**< Asserted when PSE sends PD information for a non-configured FIFO.  Throws
+                                                         PKO_INTSN_E::PEB_PSE_FIFO_ERR. */
 	uint64_t peb_fcs_sop_err              : 1;  /**< Asserted when FCS SOP value greater than packet size detected.  Throws
                                                          PKO_INTSN_E::PEB_FCS_SOP_ERR. */
 	uint64_t peb_jump_def_err             : 1;  /**< Asserted when JUMP sub-descriptor is not last in a PD.  Throws
@@ -8015,7 +8128,7 @@ union cvmx_pko_peb_err_int {
 	uint64_t peb_ext_hdr_def_err          : 1;
 	uint64_t peb_jump_def_err             : 1;
 	uint64_t peb_fcs_sop_err              : 1;
-	uint64_t peb_pse_fifo_cfg_err         : 1;
+	uint64_t peb_pse_fifo_err             : 1;
 	uint64_t peb_pad_err                  : 1;
 	uint64_t peb_trunc_err                : 1;
 	uint64_t peb_subd_addr_err            : 1;
@@ -8030,6 +8143,224 @@ union cvmx_pko_peb_err_int {
 typedef union cvmx_pko_peb_err_int cvmx_pko_peb_err_int_t;
 
 /**
+ * cvmx_pko_peb_ext_hdr_def_err_info
+ */
+union cvmx_pko_peb_ext_hdr_def_err_info {
+	uint64_t u64;
+	struct cvmx_pko_peb_ext_hdr_def_err_info_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_20_63               : 44;
+	uint64_t val                          : 1;  /**< Asserted when PKO_PEB_ERR_INT[PEB_EXT_HDR_DEF_ERR] is set */
+	uint64_t fifo                         : 7;  /**< FIFO number associated with the captured PEB_EXT_HDR_DEF_ERR */
+	uint64_t chan                         : 12; /**< Channel number associated with the captured PEB_EXT_HDR_DEF_ERR */
+#else
+	uint64_t chan                         : 12;
+	uint64_t fifo                         : 7;
+	uint64_t val                          : 1;
+	uint64_t reserved_20_63               : 44;
+#endif
+	} s;
+	struct cvmx_pko_peb_ext_hdr_def_err_info_s cn78xx;
+};
+typedef union cvmx_pko_peb_ext_hdr_def_err_info cvmx_pko_peb_ext_hdr_def_err_info_t;
+
+/**
+ * cvmx_pko_peb_fcs_sop_err_info
+ */
+union cvmx_pko_peb_fcs_sop_err_info {
+	uint64_t u64;
+	struct cvmx_pko_peb_fcs_sop_err_info_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_20_63               : 44;
+	uint64_t val                          : 1;  /**< Asserted when PKO_PEB_ERR_INT[PEB_FCS_SOP_ERR] is set. */
+	uint64_t fifo                         : 7;  /**< FIFO number associated with the captured PEB_FCS_SOP_ERR */
+	uint64_t chan                         : 12; /**< Channel number associated with the captured PEB_FCS_SOP_ERR */
+#else
+	uint64_t chan                         : 12;
+	uint64_t fifo                         : 7;
+	uint64_t val                          : 1;
+	uint64_t reserved_20_63               : 44;
+#endif
+	} s;
+	struct cvmx_pko_peb_fcs_sop_err_info_s cn78xx;
+};
+typedef union cvmx_pko_peb_fcs_sop_err_info cvmx_pko_peb_fcs_sop_err_info_t;
+
+/**
+ * cvmx_pko_peb_jump_def_err_info
+ */
+union cvmx_pko_peb_jump_def_err_info {
+	uint64_t u64;
+	struct cvmx_pko_peb_jump_def_err_info_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_20_63               : 44;
+	uint64_t val                          : 1;  /**< Asserted when PKO_PEB_ERR_INT[PEB_JUMP_DEF_ERR] is set. */
+	uint64_t fifo                         : 7;  /**< FIFO number associated with the captured PEB_JUMP_DEF_ERR */
+	uint64_t chan                         : 12; /**< Channel number associated with the captured PEB_JUMP_DEF_ERR */
+#else
+	uint64_t chan                         : 12;
+	uint64_t fifo                         : 7;
+	uint64_t val                          : 1;
+	uint64_t reserved_20_63               : 44;
+#endif
+	} s;
+	struct cvmx_pko_peb_jump_def_err_info_s cn78xx;
+};
+typedef union cvmx_pko_peb_jump_def_err_info cvmx_pko_peb_jump_def_err_info_t;
+
+/**
+ * cvmx_pko_peb_macx_cfg_wr_err_info
+ */
+union cvmx_pko_peb_macx_cfg_wr_err_info {
+	uint64_t u64;
+	struct cvmx_pko_peb_macx_cfg_wr_err_info_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_8_63                : 56;
+	uint64_t val                          : 1;  /**< Asserted when PKO_PEB_ERR_INT[PEB_MACX_CFG_WR_ERR] is set. */
+	uint64_t mac                          : 7;  /**< MAC number associated with the captured PEB_MACX_CFG_WR_ERR */
+#else
+	uint64_t mac                          : 7;
+	uint64_t val                          : 1;
+	uint64_t reserved_8_63                : 56;
+#endif
+	} s;
+	struct cvmx_pko_peb_macx_cfg_wr_err_info_s cn78xx;
+};
+typedef union cvmx_pko_peb_macx_cfg_wr_err_info cvmx_pko_peb_macx_cfg_wr_err_info_t;
+
+/**
+ * cvmx_pko_peb_max_link_err_info
+ */
+union cvmx_pko_peb_max_link_err_info {
+	uint64_t u64;
+	struct cvmx_pko_peb_max_link_err_info_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_20_63               : 44;
+	uint64_t val                          : 1;  /**< Asserted when PKO_PEB_ERR_INT[PEB_MAX_LINK_ERR] is set. */
+	uint64_t fifo                         : 7;  /**< FIFO number associated with the captured PEB_MAX_LINK_ERR */
+	uint64_t chan                         : 12; /**< Channel number associated with the captured PEB_MAX_LINK_ERR */
+#else
+	uint64_t chan                         : 12;
+	uint64_t fifo                         : 7;
+	uint64_t val                          : 1;
+	uint64_t reserved_20_63               : 44;
+#endif
+	} s;
+	struct cvmx_pko_peb_max_link_err_info_s cn78xx;
+};
+typedef union cvmx_pko_peb_max_link_err_info cvmx_pko_peb_max_link_err_info_t;
+
+/**
+ * cvmx_pko_peb_pad_err_info
+ */
+union cvmx_pko_peb_pad_err_info {
+	uint64_t u64;
+	struct cvmx_pko_peb_pad_err_info_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_20_63               : 44;
+	uint64_t val                          : 1;  /**< Asserted when PKO_PEB_ERR_INT[PEB_PAD_ERR] is set. */
+	uint64_t fifo                         : 7;  /**< FIFO number associated with the captured PEB_PAD_ERR */
+	uint64_t chan                         : 12; /**< Channel number associated with the captured PEB_PAD_ERR */
+#else
+	uint64_t chan                         : 12;
+	uint64_t fifo                         : 7;
+	uint64_t val                          : 1;
+	uint64_t reserved_20_63               : 44;
+#endif
+	} s;
+	struct cvmx_pko_peb_pad_err_info_s    cn78xx;
+};
+typedef union cvmx_pko_peb_pad_err_info cvmx_pko_peb_pad_err_info_t;
+
+/**
+ * cvmx_pko_peb_pse_fifo_err_info
+ */
+union cvmx_pko_peb_pse_fifo_err_info {
+	uint64_t u64;
+	struct cvmx_pko_peb_pse_fifo_err_info_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_20_63               : 44;
+	uint64_t val                          : 1;  /**< Asserted when PKO_PEB_ERR_INT[PEB_PSE_FIFO_ERR] is set. */
+	uint64_t fifo                         : 7;  /**< FIFO number associated with the captured PEB_PSE_FIFO_ERR */
+	uint64_t chan                         : 12; /**< Channel number associated with the captured PEB_PSE_FIFO_ERR */
+#else
+	uint64_t chan                         : 12;
+	uint64_t fifo                         : 7;
+	uint64_t val                          : 1;
+	uint64_t reserved_20_63               : 44;
+#endif
+	} s;
+	struct cvmx_pko_peb_pse_fifo_err_info_s cn78xx;
+};
+typedef union cvmx_pko_peb_pse_fifo_err_info cvmx_pko_peb_pse_fifo_err_info_t;
+
+/**
+ * cvmx_pko_peb_subd_addr_err_info
+ */
+union cvmx_pko_peb_subd_addr_err_info {
+	uint64_t u64;
+	struct cvmx_pko_peb_subd_addr_err_info_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_20_63               : 44;
+	uint64_t val                          : 1;  /**< Asserted when PKO_PEB_ERR_INT[PEB_SUBD_ADDR_ERR] is set. */
+	uint64_t fifo                         : 7;  /**< FIFO number associated with the captured PEB_SUBD_ADDR_ERR */
+	uint64_t chan                         : 12; /**< Channel number associated with the captured PEB_SUBD_ADDR_ERR */
+#else
+	uint64_t chan                         : 12;
+	uint64_t fifo                         : 7;
+	uint64_t val                          : 1;
+	uint64_t reserved_20_63               : 44;
+#endif
+	} s;
+	struct cvmx_pko_peb_subd_addr_err_info_s cn78xx;
+};
+typedef union cvmx_pko_peb_subd_addr_err_info cvmx_pko_peb_subd_addr_err_info_t;
+
+/**
+ * cvmx_pko_peb_subd_size_err_info
+ */
+union cvmx_pko_peb_subd_size_err_info {
+	uint64_t u64;
+	struct cvmx_pko_peb_subd_size_err_info_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_20_63               : 44;
+	uint64_t val                          : 1;  /**< Asserted when PKO_PEB_ERR_INT[PEB_SUBD_SIZE_ERR] is set. */
+	uint64_t fifo                         : 7;  /**< FIFO number associated with the captured PEB_SUBD_SIZE_ERR */
+	uint64_t chan                         : 12; /**< Channel number associated with the captured PEB_SUBD_SIZE_ERR */
+#else
+	uint64_t chan                         : 12;
+	uint64_t fifo                         : 7;
+	uint64_t val                          : 1;
+	uint64_t reserved_20_63               : 44;
+#endif
+	} s;
+	struct cvmx_pko_peb_subd_size_err_info_s cn78xx;
+};
+typedef union cvmx_pko_peb_subd_size_err_info cvmx_pko_peb_subd_size_err_info_t;
+
+/**
+ * cvmx_pko_peb_trunc_err_info
+ */
+union cvmx_pko_peb_trunc_err_info {
+	uint64_t u64;
+	struct cvmx_pko_peb_trunc_err_info_s {
+#ifdef __BIG_ENDIAN_BITFIELD
+	uint64_t reserved_20_63               : 44;
+	uint64_t val                          : 1;  /**< Asserted when PKO_PEB_ERR_INT[PEB_TRUNC_ERR] is set. */
+	uint64_t fifo                         : 7;  /**< FIFO number associated with the captured PEB_TRUNC_ERR */
+	uint64_t chan                         : 12; /**< Channel number associated with the captured PEB_TRUNC_ERR */
+#else
+	uint64_t chan                         : 12;
+	uint64_t fifo                         : 7;
+	uint64_t val                          : 1;
+	uint64_t reserved_20_63               : 44;
+#endif
+	} s;
+	struct cvmx_pko_peb_trunc_err_info_s  cn78xx;
+};
+typedef union cvmx_pko_peb_trunc_err_info cvmx_pko_peb_trunc_err_info_t;
+
+/**
  * cvmx_pko_pq#_dropped_bytes
  */
 union cvmx_pko_pqx_dropped_bytes {
@@ -8144,19 +8475,13 @@ union cvmx_pko_pqx_topology {
 	uint64_t u64;
 	struct cvmx_pko_pqx_topology_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t reserved_21_63               : 43;
-	uint64_t link                         : 5;  /**< Link index. Index of the link (a.k.a. the MAC) associated with this port queue. Note that
-                                                         while the hardware reset state has LINK = 0, the hardware is not properly configured for
-                                                         LINK = 0 until an explicit register write occurs. */
-	uint64_t reserved_14_15               : 2;
-	uint64_t peb_fifo                     : 5;  /**< PEB FIFO. The PEB transmit FIFO number. (fixme: A value of 0x1F means unassigned). */
+	uint64_t reserved_14_63               : 50;
+	uint64_t peb_fifo                     : 5;  /**< PEB FIFO. The PEB transmit FIFO number. A value of 0x1F means unassigned. */
 	uint64_t reserved_0_8                 : 9;
 #else
 	uint64_t reserved_0_8                 : 9;
 	uint64_t peb_fifo                     : 5;
-	uint64_t reserved_14_15               : 2;
-	uint64_t link                         : 5;
-	uint64_t reserved_21_63               : 43;
+	uint64_t reserved_14_63               : 50;
 #endif
 	} s;
 	struct cvmx_pko_pqx_topology_s        cn78xx;
@@ -9682,13 +10007,16 @@ union cvmx_pko_ptfx_status {
 	uint64_t u64;
 	struct cvmx_pko_ptfx_status_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t reserved_5_63                : 59;
+	uint64_t reserved_11_63               : 53;
+	uint64_t in_flight_cnt                : 6;  /**< This field returns the number of packets currently in-flight within PEB.  Useful both
+                                                         for reconfiguration (able to disable a FIFO when it is empty) and debugging */
 	uint64_t mac_num                      : 5;  /**< The MAC assigned to the given PKO TX FIFO. A value of 0x1F means unassigned. These
                                                          registers values are derived automatically by the hardware from the
                                                          PKO_MAC(0..27)_CFG[FIFO_NUM] settings. */
 #else
 	uint64_t mac_num                      : 5;
-	uint64_t reserved_5_63                : 59;
+	uint64_t in_flight_cnt                : 6;
+	uint64_t reserved_11_63               : 53;
 #endif
 	} s;
 	struct cvmx_pko_ptfx_status_s         cn78xx;
diff --git a/arch/mips/include/asm/octeon/cvmx-pow-defs.h b/arch/mips/include/asm/octeon/cvmx-pow-defs.h
index 8e4dd02..68b54d1 100644
--- a/arch/mips/include/asm/octeon/cvmx-pow-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pow-defs.h
@@ -643,8 +643,10 @@ union cvmx_pow_bist_stat {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_12_63               : 52;
 	uint64_t cam                          : 1;  /**< POW CAM BIST status */
-	uint64_t nbr                          : 3;  /**< NCB receiver memory BIST status */
-	uint64_t nbt                          : 4;  /**< NCB transmitter memory BIST status */
+	uint64_t reserved_10_10               : 1;
+	uint64_t nbr                          : 2;  /**< NCB receiver memory BIST status */
+	uint64_t reserved_6_7                 : 2;
+	uint64_t nbt                          : 2;  /**< NCB transmitter memory BIST status */
 	uint64_t index                        : 1;  /**< Index memory BIST status */
 	uint64_t fidx                         : 1;  /**< Forward index memory BIST status */
 	uint64_t pend                         : 1;  /**< Pending switch memory BIST status */
@@ -654,8 +656,10 @@ union cvmx_pow_bist_stat {
 	uint64_t pend                         : 1;
 	uint64_t fidx                         : 1;
 	uint64_t index                        : 1;
-	uint64_t nbt                          : 4;
-	uint64_t nbr                          : 3;
+	uint64_t nbt                          : 2;
+	uint64_t reserved_6_7                 : 2;
+	uint64_t nbr                          : 2;
+	uint64_t reserved_10_10               : 1;
 	uint64_t cam                          : 1;
 	uint64_t reserved_12_63               : 52;
 #endif
diff --git a/arch/mips/include/asm/octeon/cvmx-rst-defs.h b/arch/mips/include/asm/octeon/cvmx-rst-defs.h
index d2a200d..198c884 100644
--- a/arch/mips/include/asm/octeon/cvmx-rst-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-rst-defs.h
@@ -198,12 +198,13 @@ union cvmx_rst_boot {
 	uint64_t vrm_err                      : 1;  /**< VRM did not complete operations within 5.25mS of DCOK being asserted. PLLs were released
                                                          automatically. */
 	uint64_t reserved_37_56               : 20;
-	uint64_t c_mul                        : 7;  /**< Core clock multiplier.
-                                                         C_MUL = (core CLK speed) / (ref clock speed)
-                                                         'ref clock speed' should always be 50MHz. */
-	uint64_t pnr_mul                      : 6;  /**< Coprocessor clock multiplier.
-                                                         PNR_MUL = (coprocessor CLK speed) /(ref clock speed)
-                                                         'ref clock speed' should always be 50MHz. */
+	uint64_t c_mul                        : 7;  /**< Core-clock multiplier. C_MUL = (core-clock speed) / (ref-clock speed). 'ref-clock speed'
+                                                         should always be 50MHz. */
+	uint64_t pnr_mul                      : 6;  /**< Coprocessor-clock multiplier. PNR_MUL = (coprocessor-clock speed) /(ref-clock speed).
+                                                         'ref-clock speed' should always be 50MHz.
+                                                         For PCIe Gen1, the coprocessor-clock speed must be greater than 250MHz; for PCIe Gen2, the
+                                                         coprocessor-clock speed must be greater than 500MHz; for PCIe Gen3, the coprocessor-clock
+                                                         speed must be greater than 800MHz. */
 	uint64_t reserved_21_23               : 3;
 	uint64_t lboot_oci                    : 3;  /**< Last boot cause mask; resets only with DCOK.
                                                          <20> Warm reset due to OCI Link 2 going down.
@@ -464,7 +465,7 @@ union cvmx_rst_power_dbg {
 	struct cvmx_rst_power_dbg_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_3_63                : 61;
-	uint64_t str                          : 3;  /**< Reserved. INTERNAL: Internal power driver strength. Resets only on Cold Reset. */
+	uint64_t str                          : 3;  /**< Reserved. INTERNAL: Internal power driver strength. Resets only on cold reset. */
 #else
 	uint64_t str                          : 3;
 	uint64_t reserved_3_63                : 61;
@@ -477,7 +478,7 @@ typedef union cvmx_rst_power_dbg cvmx_rst_power_dbg_t;
 /**
  * cvmx_rst_pp_power
  *
- * These bits should only be changed while the corresponding PP is in reset (see CIU3_PP_RST).
+ * These bits should only be changed when the corresponding core is in reset (CIU3_PP_RST).
  *
  */
 union cvmx_rst_pp_power {
@@ -485,7 +486,7 @@ union cvmx_rst_pp_power {
 	struct cvmx_rst_pp_power_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_48_63               : 16;
-	uint64_t gate                         : 48; /**< When set, corresponding PP has voltage removed to save power. */
+	uint64_t gate                         : 48; /**< When set, corresponding core has voltage removed to save power. */
 #else
 	uint64_t gate                         : 48;
 	uint64_t reserved_48_63               : 16;
diff --git a/arch/mips/include/asm/octeon/cvmx-sli-defs.h b/arch/mips/include/asm/octeon/cvmx-sli-defs.h
index cb55cf6..5dee079 100644
--- a/arch/mips/include/asm/octeon/cvmx-sli-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-sli-defs.h
@@ -4157,8 +4157,9 @@ union cvmx_sli_int_sum {
 	uint64_t pcnt                         : 1;  /**< Packet counter has an interrupt. The specific rings can be found in SLI_PKT_CNT_INT.
                                                          Throws SLI_INTSN_E::SLI_INT_PCNT. */
 	uint64_t reserved_1_3                 : 3;
-	uint64_t rml_to                       : 1;  /**< A read or write transfer did not complete within 0xFFFF coprocessor-clock cycles. Throws
-                                                         SLI_INTSN_E::SLI_INT_RML_TO. */
+	uint64_t rml_to                       : 1;  /**< A read or write transfer to a RSL, or the assertion from the OCX that read data is
+                                                         available after sending a read command to the OCX, that did not complete within
+                                                         SLI_WINDOW_CTL[TIME] coprocessor-clock cycles. Throws a SLI_INTSN_E::SLI_INT_RML_TO. */
 #else
 	uint64_t rml_to                       : 1;
 	uint64_t reserved_1_3                 : 3;
@@ -5773,8 +5774,8 @@ typedef union cvmx_sli_pktx_input_control cvmx_sli_pktx_input_control_t;
 /**
  * cvmx_sli_pkt#_instr_baddr
  *
- * This register contains the start-of-instruction for input packets.
- *
+ * This register contains the start-of-instruction for input packets. The address must be
+ * addressed-aligned to the size of the instruction.
  */
 union cvmx_sli_pktx_instr_baddr {
 	uint64_t u64;
@@ -6891,8 +6892,8 @@ typedef union cvmx_sli_pkt_input_control cvmx_sli_pkt_input_control_t;
 /**
  * cvmx_sli_pkt_instr_enb
  *
- * This register enables the instruction fetch for a packet ring.
- *
+ * "This register enables the instruction fetch for a packet ring. This is the PF version also
+ * see SLI_PKT#_INPUT_CONTROL[ENB]."
  */
 union cvmx_sli_pkt_instr_enb {
 	uint64_t u64;
@@ -7323,8 +7324,8 @@ typedef union cvmx_sli_pkt_out_bp_en cvmx_sli_pkt_out_bp_en_t;
 /**
  * cvmx_sli_pkt_out_enb
  *
- * This register enables the output packet engines.
- *
+ * "This register enables the output packet engines. This is the PF version. Also see
+ * SLI_PKT#_OUTPUT_CONTROL[ENB]."
  */
 union cvmx_sli_pkt_out_enb {
 	uint64_t u64;
diff --git a/arch/mips/include/asm/octeon/cvmx-sso-defs.h b/arch/mips/include/asm/octeon/cvmx-sso-defs.h
index 1e2c275..10eca8e 100644
--- a/arch/mips/include/asm/octeon/cvmx-sso-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-sso-defs.h
@@ -2027,7 +2027,7 @@ union cvmx_sso_err0 {
 	uint64_t reserved_5_31                : 27;
 	uint64_t awempty                      : 1;  /**< Received add work with tag specified as EMPTY. Throws SSO_INTSN_E::SSO_ERR0_AWEMPTY. */
 	uint64_t grpdis                       : 1;  /**< Add work to disabled group. An ADDWQ was received and dropped to a group with
-                                                         SSO_GRP(0..255)_TAQ_THR[RSVD_THR] = 0. Throws SSO_INTSN_E::SSO_ERR0_GRPDIS. */
+                                                         SSO_GRP(0..255)_IAQ_THR[RSVD_THR] = 0. Throws SSO_INTSN_E::SSO_ERR0_GRPDIS. */
 	uint64_t bfp                          : 1;  /**< Bad-fill-packet error. The WAE VLD_CRC field was incorrect, or the XAQ next address was
                                                          zero. Throws SSO_INTSN_E::SSO_ERR0_BFP. */
 	uint64_t awe                          : 1;  /**< Out-of-memory error. (ADDWQ request is dropped.) Throws SSO_INTSN_E::SSO_ERR0_AWE. */
@@ -2633,8 +2633,9 @@ union cvmx_sso_grpx_taq_thr {
 	uint64_t reserved_43_47               : 5;
 	uint64_t max_thr                      : 11; /**< Max threshold for this transitory admission queue, in buffers of 13 entries. Must be >= 3,
                                                          must be >= [RSVD_THR], and to insure full streaming performance on this group, should be
-                                                         at least 16 buffers. SSO may exceed this count by one buffer if and only if persistently
-                                                         backpressured by IOBI. Must not be changed after traffic is sent to this group. */
+                                                         at least 16 buffers. SSO may exceed this count using unreserved free buffers if and only
+                                                         if persistently backpressured by IOBI. Must not be changed after traffic is sent to this
+                                                         group. */
 	uint64_t reserved_11_31               : 21;
 	uint64_t rsvd_thr                     : 11; /**< Reserved threshold for this transitory admission queue, in buffers of 13 entries. Must be
                                                          at least 3 buffers for any groups that are to be used. Changes to this field must also
@@ -2965,7 +2966,7 @@ union cvmx_sso_ientx_qlinks {
 	struct cvmx_sso_ientx_qlinks_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t reserved_12_63               : 52;
-	uint64_t next_index                   : 12; /**< The next entry in the IQ/AQ/DQ. */
+	uint64_t next_index                   : 12; /**< The next entry in the AQ/CQ/DQ. */
 #else
 	uint64_t next_index                   : 12;
 	uint64_t reserved_12_63               : 52;
diff --git a/arch/mips/include/asm/octeon/cvmx-uctlx-defs.h b/arch/mips/include/asm/octeon/cvmx-uctlx-defs.h
index d5b937b..30a7e0a 100644
--- a/arch/mips/include/asm/octeon/cvmx-uctlx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-uctlx-defs.h
@@ -637,13 +637,14 @@ union cvmx_uctlx_ctl {
 	uint64_t u64;
 	struct cvmx_uctlx_ctl_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t clear_bist                   : 1;  /**< BIST fast-clear mode select.
+	uint64_t clear_bist                   : 1;  /**< BIST fast-clear mode select. A BIST run with this bit set clears all entries in USBH RAMs
+                                                         to 0x0.
                                                          There are 2 major modes of BIST: full and clear. Full BIST is run by the BIST state
-                                                         machine when clear_bist is deasserted during BIST. Clear BIST is run if clear_bist is
-                                                         asserted during BIST. A Clear BIST run will simply clear all entries in USBH RAMs to 0x0.
+                                                         machine when CLEAR_BIST is deasserted during BIST. Clear BIST is run if CLEAR_BIST is
+                                                         asserted during BIST.
                                                          To avoid race conditions, software must first perform a CSR write operation that puts the
-                                                         clear_bist setting into the correct state and then perform another CSR write operation to
-                                                         set the BIST trigger (keeping the clear_bist state constant).
+                                                         CLEAR_BIST setting into the correct state and then perform another CSR write operation to
+                                                         set the BIST trigger (keeping the CLEAR_BIST state constant).
                                                          CLEAR BIST completion is indicated by UCTL(0)_BIST_STATUS[NDONE]. A BIST clear operation
                                                          takes almost 2,000 host-controller-clock cycles for the largest RAM. */
 	uint64_t start_bist                   : 1;  /**< Rising edge starts BIST on the memories in USBH.
@@ -655,129 +656,111 @@ union cvmx_uctlx_ctl {
                                                          BIST defect status can be checked after FULL BIST completion, both of which are indicated
                                                          in UCTL(0)_BIST_STATUS. The full BIST run takes almost 80,000 host-controller-clock cycles
                                                          for the largest RAM. */
-	uint64_t ref_clk_sel                  : 2;  /**< Choose reference clock source for the SuperSpeed and HighSpeed PLL blocks.
-                                                           0x0 = Reference clock source for both PLLs come from the USB pads.
-                                                           0x1 = Reference clock source for SuperSpeed PLL is from the USB pads,
-                                                                 reference clock source for HighSpeed PLL is PLL_REF_CLK.
-                                                           0x2 = Reserved.
-                                                           0x3 = Reference clock source for both PLLs come from PLL_REF_CLK.
-                                                         The PLL_REF_CLK is a 50MHz reference clock from an on-chip PLL.
-                                                         This value can be changed only during UPHY_RST.
-                                                         Note: If REF_CLK_SEL = 0x0, then the reference clock input cannot be
-                                                         spread-spectrum. */
+	uint64_t ref_clk_sel                  : 2;  /**< Reference clock select. Choose reference clock source for the SuperSpeed and HighSpeed PLL
+                                                         blocks.
+                                                         0x0 = Reference clock source for both PLLs come from the USB pads.
+                                                         0x1 = Reference clock source for SuperSpeed PLL is from the USB pads, reference clock
+                                                         source for HighSpeed PLL is PLL_REF_CLK.
+                                                         0x2 = Reserved.
+                                                         0x3 = Reserved.
+                                                         The PLL_REF_CLK is a 50MHz reference clock from an on-chip PLL. This value can be changed
+                                                         only during UPHY_RST.
+                                                         Note: If REF_CLK_SEL = 0x0, then the reference clock input cannot be spread-spectrum. */
 	uint64_t ssc_en                       : 1;  /**< Enables spread-spectrum clock production in the SuperSpeed function.
                                                          If the input reference clock for the SuperSpeed PLL is already spread-spectrum,
                                                          then do not enable this function. The clocks sourced to the SuperSpeed function
                                                          must have spread-spectrum to be compliant with the USB specification.
                                                          The HighSpeed PLL cannot support a spread-spectrum input, so REF_CLK_SEL = 0x0
-                                                         must enable this feature. The PLL_REF_CLK is not spread-spectrum, so REF_CLK_SEL
-                                                         = 0x3 must enable this feature.
+                                                         must enable this feature.
                                                          This value may only be changed during UPHY_RST. */
-	uint64_t ssc_range                    : 3;  /**< Selects the range of spread spectrum modulation when ssc_en is asserted and the PHY is
-                                                         spreading the SuperSpeed transmit clocks.
+	uint64_t ssc_range                    : 3;  /**< Spread-spectrum clock range. Selects the range of spread-spectrum modulation when SSC_EN
+                                                         is asserted and the PHY is spreading the SuperSpeed transmit clocks.
                                                          Applies a fixed offset to the phase accumulator.
-                                                           0x0 : -4980 ppm downspread of clock
-                                                           0x1 : -4492 ppm
-                                                           0x2 : -4003 ppm
-                                                           others: reserved
-                                                         All of these settings are within the USB 3.0 specification.
-                                                         The amount of EMI emission reduction might decrease as the
-                                                         SSC_RANGE increases; therefore, the SSC_RANGE settings can
-                                                         be registered to enable the amount of spreading to be adjusted
-                                                         on a per-application basis.
-                                                         This value may only be changed during UPHY_RST. */
+                                                         0x0 = -4980 ppm downspread of clock
+                                                         0x1 = -4492 ppm
+                                                         0x2 = -4003 ppm
+                                                         0x3-0x7 = reserved
+                                                         All of these settings are within the USB 3.0 specification. The amount of EMI emission
+                                                         reduction might decrease as the SSC_RANGE increases; therefore, the SSC_RANGE settings can
+                                                         be registered to enable the amount of spreading to be adjusted on a per-application basis.
+                                                         This value can be changed only during UPHY_RST. */
 	uint64_t ssc_ref_clk_sel              : 9;  /**< Enables non-standard oscillator frequencies to generate targeted MPLL output rates. Input
                                                          corresponds to the frequency-synthesis coefficient.
                                                          [55:53]: modulus - 1,
                                                          [52:47]: 2's complement push amount
-                                                         A value of 0x0 means this feature is disabled.
-                                                         The legal values are:
-                                                           If REF_CLK_SEL = 0x0 then:
-                                                             0x0 is the only legal value.
-                                                           If REF_CLK_SEL = 0x1 then:
-                                                             0x108: if the external reference clock is 19.2MHz, 24MHz, 26MHz, 38.4MHz, 48MHz,
-                                                                    52MHz, 76.8MHz, 96MHz, 104MHz.
-                                                             0x0: if the external reference clock is another supported frequency (see list
-                                                                  in MPLL_MULTIPLIER description).
-                                                           If REF_CLK_SEL = 0x3 then:
-                                                             0x0 is the only legal value.
-                                                         All other values are reserved.
-                                                         This value may only be changed during UPHY_RST.
-                                                         Note: If REF_CLK_SEL = 0x1 or 0x3, then MPLL_MULTPLIER, REF_CLK_DIV2, and SSC_REF_CLK_SEL
-                                                         must all be programmed to the same frequency setting. */
+                                                         A value of 0x0 means this feature is disabled. The legal values are as follows:
+                                                         If REF_CLK_SEL = 0x0, then 0x0 is the only legal value.
+                                                         If REF_CLK_SEL = 0x1:
+                                                         0x108 = If the external reference clock is 19.2MHz, 24MHz, 26MHz, 38.4MHz, 48MHz, 52MHz,
+                                                         76.8MHz, 96MHz, 104MHz.
+                                                         0x0 = If the external reference clock is another supported frequency (see list in
+                                                         MPLL_MULTIPLIER description).
+                                                         All other values are reserved. This value may only be changed during UPHY_RST.
+                                                         Note: If REF_CLK_SEL = 0x1, then MPLL_MULTPLIER, REF_CLK_DIV2, and SSC_REF_CLK_SEL must
+                                                         all be programmed to the same frequency setting. */
 	uint64_t mpll_multiplier              : 7;  /**< Multiplies the reference clock to a frequency suitable for intended operating speed. The
                                                          legal values are:
-                                                           If REF_CLK_SEL = 0x0 then:
-                                                             0x0 is the only legal value.
-                                                           If REF_CLK_SEL = 0x1 then:
-                                                             0x02 =  19.2MHz on the external reference clock
-                                                             0x7D =  20  MHz on the external reference clock
-                                                             0x68 =  24  MHz on the external reference clock
-                                                             0x64 =  25  MHz on the external reference clock
-                                                             0x60 =  26  MHz on the external reference clock
-                                                             0x41 =  38.4MHz on the external reference clock
-                                                             0x7D =  40  MHz on the external reference clock
-                                                             0x34 =  48  MHz on the external reference clock
-                                                             0x32 =  50  MHz on the external reference clock
-                                                             0x30 =  52  MHz on the external reference clock
-                                                             0x41 =  76.8MHz on the external reference clock
-                                                             0x1A =  96  MHz on the external reference clock
-                                                             0x19 = 100  MHz on the external reference clock
-                                                             0x18 = 104  MHz on the external reference clock if REF_CLK_DIV2 is 0x0
-                                                             0x30 = 104  MHz on the external reference clock if REF_CLK_DIV2 is 0x1
-                                                             0x28 = 125  MHz on the external reference clock
-                                                             0x19 = 200  MHz on the external reference clock
-                                                           If REF_CLK_SEL = 0x3 then:
-                                                             0x32 is the only legal value.
+                                                         If REF_CLK_SEL = 0x0, then 0x0 is the only legal value.
+                                                         If REF_CLK_SEL = 0x1 then:
+                                                         0x02 = 19.2 MHz on the external reference clock
+                                                         0x7D = 20 MHz on the external reference clock
+                                                         0x68 = 24 MHz on the external reference clock
+                                                         0x64 = 25 MHz on the external reference clock
+                                                         0x60 = 26 MHz on the external reference clock
+                                                         0x41 = 38.4 MHz on the external reference clock
+                                                         0x7D = 40 MHz on the external reference clock
+                                                         0x34 = 48 MHz on the external reference clock
+                                                         0x32 = 50 MHz on the external reference clock
+                                                         0x30 = 52 MHz on the external reference clock
+                                                         0x41 = 76.8 MHz on the external reference clock
+                                                         0x1A = 96 MHz on the external reference clock
+                                                         0x19 = 100 MHz on the external reference clock
+                                                         0x18 = 104 MHz on the external reference clock if REF_CLK_DIV2 is 0x0
+                                                         0x30 = 104 MHz on the external reference clock if REF_CLK_DIV2 is 0x1
+                                                         0x28 = 125 MHz on the external reference clock
+                                                         0x19 = 200 MHz on the external reference clock
                                                          All other values are reserved.
                                                          This value may only be changed during UPHY_RST.
-                                                         Note: If REF_CLK_SEL = 0x1 or 0x3, then MPLL_MULTPLIER, REF_CLK_DIV2, and SSC_REF_CLK_SEL
-                                                         must all be programmed to the same frequency setting. When REF_CLK_SEL = 0x0, this value
-                                                         is
+                                                         Note: If REF_CLK_SEL = 0x1, then MPLL_MULTPLIER, REF_CLK_DIV2, and SSC_REF_CLK_SEL must
+                                                         all be programmed to the same frequency setting. When REF_CLK_SEL = 0x0, this value is
                                                          superceded by the REF_CLK_FSEL<5:3> selection. */
 	uint64_t ref_ssp_en                   : 1;  /**< Enables reference clock to the prescaler for SuperSpeed function. This should always be
-                                                         enabled since this output clock is used to drive the UAHC suspend-mode clock during
-                                                         low-power states.
+                                                         enabled since this output clock is used to drive the UAHC suspend-mode clock during low-
+                                                         power states.
                                                          This value can be changed only during UPHY_RST or during low-power states.
-                                                         The reference clock must be running and stable before UPHY_RST is deasserted and
-                                                         before REF_SSP_EN is asserted. */
-	uint64_t ref_clk_div2                 : 1;  /**< Divides the reference clock by 2 before feeding it into the REF_CLK_FSEL divider.
-                                                         The legal values are:
-                                                           If REF_CLK_SEL = 0x0, then:
-                                                             all reference clock frequencies: 0x0 is the only legal value.
-                                                           If REF_CLK_SEL = 0x1, then:
+                                                         The reference clock must be running and stable before UPHY_RST is deasserted and before
+                                                         REF_SSP_EN is asserted. */
+	uint64_t ref_clk_div2                 : 1;  /**< Divides the reference clock by 2 before feeding it into the REF_CLK_FSEL divider. The
+                                                         legal values are:
+                                                         If REF_CLK_SEL = 0x0, then for all reference clock frequencies, 0x0 is the only legal
+                                                         value.
+                                                         If REF_CLK_SEL = 0x1:
                                                              0x1: if external reference clock is 125MHz, 40MHz, 76.8MHz, or 200MHz.
-                                                             0x0 or 0x: if external reference clock is 104MHz (depending on MPLL_MULTIPLIER
-                                                         setting)
+                                                             0x0 or 0x1: if external reference clock is 104MHz
+                                                                         (depending on MPLL_MULTIPLIER setting)
                                                              0x0: if external reference clock is another supported frequency,
                                                                   (see list in MPLL_MULTIPLIER description).
-                                                           If REF_CLK_SEL = 0x3 then:
-                                                             0x0 is the only legal value.
                                                          This value can be changed only during UPHY_RST.
-                                                         Note: If REF_CLK_SEL = 0x1 or 0x3, then MPLL_MULTPLIER, REF_CLK_DIV2, and SSC_REF_CLK_SEL
-                                                         must all be programmed to the same frequency setting. */
-	uint64_t ref_clk_fsel                 : 6;  /**< Selects the reference clock frequency for the SuperSpeed and HighSpeed PLL blocks.
-                                                         The legal values are:
-                                                           If REF_CLK_SEL = 0x0 then:
-                                                             0x27: external reference clock 100  MHz
-                                                             0x2A: external reference clock  24  MHz
-                                                             0x31: external reference clock  20  MHz
-                                                             0x38: external reference clock  19.2MHz
-                                                           If REF_CLK_SEL = 0x1 then:
-                                                             0x7 is the only legal value.
-                                                           If REF_CLK_SEL = 0x3 then:
-                                                             0x7 is the only legal value.
+                                                         Note: If REF_CLK_SEL = 0x1, then MPLL_MULTPLIER, REF_CLK_DIV2, and SSC_REF_CLK_SEL must
+                                                         all be programmed to the same frequency setting. */
+	uint64_t ref_clk_fsel                 : 6;  /**< Selects the reference clock frequency for the SuperSpeed and HighSpeed PLL blocks. The
+                                                         legal values are as follows:
+                                                         If REF_CLK_SEL = 0x0:
+                                                         0x27 = External reference clock 100 MHz
+                                                         0x2A = External reference clock 24 MHz
+                                                         0x31 = External reference clock 20 MHz
+                                                         0x38 = External reference clock 19.2 MHz
+                                                         If REF_CLK_SEL = 0x1, then 0x7 is the only legal value.
                                                          All other values are reserved.
                                                          This value may only be changed during UPHY_RST.
-                                                         Note: When REF_CLK_SEL = 0x1 or 0x3, then MPLL_MULTPLIER, REF_CLK_DIV2, and
-                                                         SSC_REF_CLK_SEL
-                                                         must all be programmed to the same frequency setting. */
+                                                         Note: When REF_CLK_SEL = 0x1, then MPLL_MULTPLIER, REF_CLK_DIV2, and
+                                                         SSC_REF_CLK_SEL must all be programmed to the same frequency setting. */
 	uint64_t reserved_31_31               : 1;
 	uint64_t h_clk_en                     : 1;  /**< Host-controller-clock enable. When set to 1, the host-controller clock is generated. This
                                                          also enables access to UCTL registers 0x30-0xF8. */
 	uint64_t h_clk_byp_sel                : 1;  /**< Select the bypass input to the host-controller-clock divider.
-                                                         0 = use the divided coprocessor clock from the H_CLKDIV divider
-                                                         1 = use the bypass clock from the GPIO pins
+                                                         0 = Use the divided coprocessor clock from the H_CLKDIV divider
+                                                         1 = Use the bypass clock from the GPIO pins
                                                          This signal is just a multiplexer-select signal; it does not enable the host-controller
                                                          clock. You must still set H_CLKDIV_EN separately. H_CLK_BYP_SEL select should not be
                                                          changed unless H_CLKDIV_EN is disabled.
@@ -820,14 +803,14 @@ union cvmx_uctlx_ctl {
 	uint64_t usb3_port_disable            : 1;  /**< Disables the USB3 (SuperSpeed) portion of this PHY. When set to 1, this signal stops
                                                          reporting connect/disconnect events on the port and keeps the port in disabled state. This
                                                          could be used for security reasons where hardware can disable a port regardless of whether
-                                                         XHCI driver enables a port or not.
+                                                         xHCI driver enables a port or not.
                                                          UAHC(0)_HCSPARAMS1[MAXPORTS] is not affected by this signal.
                                                          This is a strap signal; it should be modified only when UPHY_RST is asserted. */
 	uint64_t reserved_17_17               : 1;
 	uint64_t usb2_port_disable            : 1;  /**< Disables USB2 (HighSpeed/FullSpeed/LowSpeed) portion of this PHY. When set to 1, this
                                                          signal stops reporting connect/disconnect events on the port and keeps the port in
                                                          disabled state. This could be used for security reasons where hardware can disable a port
-                                                         regardless of whether XHCI driver enables a port or not.
+                                                         regardless of whether xHCI driver enables a port or not.
                                                          UAHC(0)_HCSPARAMS1[MAXPORTS] is not affected by this signal.
                                                          This is a strap signal; it should only be modified when UPHY_RST is asserted.
                                                          If Port0 is required to be disabled, ensure that the utmi_clk[0] is running at the normal
@@ -900,16 +883,17 @@ typedef union cvmx_uctlx_ctl cvmx_uctlx_ctl_t;
  * Reset by: IOI reset (srst_n) or UCTL(0)_CTL[UCTL_RST]
  * This register can be used to disable ECC correction, insert ECC errors, and debug ECC
  * failures.
- * Fields ECC_ERR* are captured when there are no outstanding ECC errors indicated in INTSTAT
+ * The ECC_ERR* fields are captured when there are no outstanding ECC errors indicated in INTSTAT
  * and a new ECC error arrives. Prioritization for multiple events occurring on the same cycle is
  * indicated by the ECC_ERR_SOURCE enumeration: highest encoded value has highest priority.
- * Fields *ECC_DIS: Disables ECC correction, SBE and DBE errors are still reported.
- * If ECC_DIS is 0x1, then no data-correction occurs.
- * Fields *ECC_FLIP_SYND:  Flip the syndrom[1:0] bits to generate 1-bit/2-bits error for testing.
- *   0x0: normal operation
- *   0x1: SBE on bit[0]
- *   0x2: SBE on bit[1]
- *   0x3: DBE on bit[1:0]
+ * The *ECC_*_DIS fields disable ECC correction; SBE and DBE errors are still reported. If
+ * *ECC_*_DIS = 0x1, then no data-correction occurs.
+ * The *ECC_FLIP_SYND fields flip the syndrome<1:0> bits to generate single-bit/double-bit error
+ * for testing.
+ * 0x0 = normal operation
+ * 0x1 = SBE on bit[0]
+ * 0x2 = SBE on bit[1]
+ * 0x3 = DBE on bit[1:0]
  */
 union cvmx_uctlx_ecc {
 	uint64_t u64;
@@ -1125,11 +1109,11 @@ union cvmx_uctlx_host_cfg {
                                                          set by the Set LTV command. */
 	uint64_t reserved_38_47               : 10;
 	uint64_t fla                          : 6;  /**< HighSpeed jitter adjustment. Indicates the correction required to accommodate mac3 clock
-                                                         and utmi clock jitter to measure 125us duration. With FLA tied to zero, the HighSpeed
+                                                         and utmi clock jitter to measure 125us duration. With FLA tied to 0x0, the HighSpeed
                                                          125us micro-frame is counted for 123933ns. The value needs to be programmed in terms of
                                                          HighSpeed bit times in a 30 MHz cycle. Default value that needs to be driven is 0x20
                                                          (assuming 30 MHz perfect clock).
-                                                         FLA connects to the FLADJ register defined in the XHCI spec in the PCI configuration
+                                                         FLA connects to the FLADJ register defined in the xHCI spec in the PCI configuration
                                                          space. Each count is equal to 16 HighSpeed bit times. By default when this register is
                                                          set to 0x20, it gives 125us interval. Now, based on the clock accuracy, you can decrement
                                                          the count or increment the count to get the 125 us uSOF window.
@@ -1138,30 +1122,30 @@ union cvmx_uctlx_host_cfg {
 	uint64_t reserved_29_31               : 3;
 	uint64_t bme                          : 1;  /**< Bus-master enable. This signal is used to disable the bus-mastering capability of the
                                                          host. Disabling this capability stalls DMA accesses. */
-	uint64_t oci_en                       : 1;  /**< Overcurrent-indication enable.
-                                                         When enabled, OCI input to UAHC is taken from the MIO's GPIO signals and sense-converted
-                                                         based on OCI_ACTIVE_HIGH_EN. The MIO GPIO multiplexer must be programmed accordingly.
+	uint64_t oci_en                       : 1;  /**< Overcurrent-indication enable. When enabled, OCI input to UAHC is taken from the GPIO
+                                                         signals and sense-converted based on OCI_ACTIVE_HIGH_EN. The MIO GPIO multiplexer must be
+                                                         programmed accordingly.
                                                          When disabled, OCI input to UAHC is forced to the correct inactive state based on
                                                          OCI_ACTIVE_HIGH_EN.
                                                          This is a strap signal; it should only be modified when UAHC is in reset (soft-reset
                                                          okay). */
 	uint64_t oci_active_high_en           : 1;  /**< Overcurrent sense selection. The off-chip sense (high/low) is converted to match the host-
                                                          controller's active-high sense.
-                                                         1 = overcurrent indication from off-chip source is active-high.
-                                                         0 = overcurrent indication from off-chip source is active-low.
+                                                         1 = Overcurrent indication from off-chip source is active-high.
+                                                         0 = Overcurrent indication from off-chip source is active-low.
                                                          This is a strap signal; it should only be modified when UAHC is in reset (soft-reset
                                                          okay). */
 	uint64_t ppc_en                       : 1;  /**< Port-power-control enable.
                                                          0 = UAHC(0)_HCCPARAMS[PPC] report port-power-control feature is unavailable.
                                                          1 = UAHC(0)_HCCPARAMS[PPC] reports port-power-control feature is available. PPC output
-                                                         from UAHC is taken to the MIO's GPIO signals and sense-converted based on
-                                                         PPC_ACTIVE_HIGH_EN. The MIO GPIO multiplexer must be programmed accordingly.
+                                                         from UAHC is taken to the GPIO signals and sense-converted based on PPC_ACTIVE_HIGH_EN.
+                                                         The MIO GPIO multiplexer must be programmed accordingly.
                                                          This is a strap signal; it should only be modified when UAHC is in reset (soft-reset
                                                          okay). */
 	uint64_t ppc_active_high_en           : 1;  /**< Port power control sense selection. The active-high port-power-control output to off-chip
                                                          source is converted to match the off-chip sense.
-                                                         1 = port-power control to off-chip source is active-high.
-                                                         0 = port-power control to off-chip source is active-low.
+                                                         1 = Port-power control to off-chip source is active-high.
+                                                         0 = Port-power control to off-chip source is active-low.
                                                          This is a strap signal; it should only be modified when UAHC is in reset (soft reset
                                                          okay). */
 	uint64_t reserved_0_23                : 24;
@@ -1304,9 +1288,8 @@ typedef union cvmx_uctlx_int_reg cvmx_uctlx_int_reg_t;
  *
  * Accessible by: always
  * Reset by: IOI reset (srst_n)
- * Summary of different bits of RSL interrupts.
- * DBE's are detected. SBE's are corrected. For debugging output for ECC DBE/SBE's,
- * see UCTL_ECC register.
+ * This register provides a summary of different bits of RSL interrupts. DBEs are detected and
+ * SBE are corrected. For debugging output for ECC DBEs/SBEs, see UCTL(0)_ECC.
  */
 union cvmx_uctlx_intstat {
 	uint64_t u64;
@@ -1337,13 +1320,11 @@ union cvmx_uctlx_intstat {
 	uint64_t reserved_3_15                : 13;
 	uint64_t xm_bad_dma                   : 1;  /**< Detected bad DMA access from UAHC to IOI. Error information is logged in
                                                          UCTL(0)_SHIM_CFG[XM_BAD_DMA_*]. Received a DMA request from UAHC that violates the
-                                                         assumptions
-                                                         made by the AXI-to-IOI shim. Such scenarios include: illegal length/size combinations and
-                                                         address out-of-bounds.
-                                                         For more information on exact failures, see description in
-                                                         UCTL(0)_SHIM_CFG[XM_BAD_DMA_TYPE].
-                                                         The hardware does not translate the request correctly and results may violate IOI
-                                                         protocols.
+                                                         assumptions made by the AXI-to-IOI shim. Such scenarios include: illegal length/size
+                                                         combinations and address out-of-bounds.
+                                                         For more information on exact failures, see the description in
+                                                         UCTL(0)_SHIM_CFG[XM_BAD_DMA_TYPE]. The hardware does not translate the request correctly
+                                                         and results may violate IOI protocols.
                                                          Throws UCTL_INTSN_E::UCTL(0)_INTSTAT_XM_BAD_DMA. */
 	uint64_t xs_ncb_oob                   : 1;  /**< Detected out-of-bound register access to UAHC over IOI. The UAHC defines 1MB of register
                                                          space, starting at offset 0x0. Any accesses outside of this register space cause this bit
@@ -1527,11 +1508,11 @@ union cvmx_uctlx_portx_cfg_hs {
 	uint64_t tx_res_tune                  : 2;  /**< USB source-impedance adjustment. Some applications require additional devices to be added
                                                          on the USB, such as a series switch, which can add significant series resistance. This bus
                                                          adjusts the driver source impedance to compensate for added series resistance on the USB.
-                                                           0x3: source impedence is decreased by approximately 4 ohms.
-                                                           0x2: source impedence is decreased by approximately 2 ohms.
-                                                           0x1: design default
-                                                           0x0: source impedence is increased by approximately 1.5 ohms.
-                                                         Note: Any setting other than the default can result in source-impedance variation across
+                                                         0x3 = source impedance is decreased by approximately 4 ohm.
+                                                         0x2 = source impedance is decreased by approximately 2 ohm.
+                                                         0x1 = design default.
+                                                         0x0 = source impedance is decreased by approximately 1.5 ohm.
+                                                         Any setting other than the default can result in source-impedance variation across
                                                          process, voltage, and temperature conditions that does not meet USB 2.0 specification
                                                          limits. If this bus is not used, leave it at the default setting. */
 	uint64_t tx_rise_tune                 : 2;  /**< HighSpeed transmitter rise-/fall-time adjustment. Adjusts the rise/fall times of the
@@ -1587,8 +1568,7 @@ typedef union cvmx_uctlx_portx_cfg_hs cvmx_uctlx_portx_cfg_hs_t;
  * Accessible by: only when H_CLKDIV_EN
  * Reset by: IOI reset (srst_n) or UCTL(0)_CTL[UCTL_RST]
  * This register controls configuration and test controls for the portX PHY.
- * INTERNAL: All these settings are for SS or centralized functionality, connect on vp power
- * domain.
+ * INTERNAL: All these settings are for HS functionality, connect on DVDD power domain.
  */
 union cvmx_uctlx_portx_cfg_ss {
 	uint64_t u64;
@@ -1609,29 +1589,28 @@ union cvmx_uctlx_portx_cfg_ss {
                                                          A negative binary bit setting change results in a -15 mVp incremental change in the LOS
                                                          threshold. The 0x0 setting is reserved and must not be used. The default 0x5 setting
                                                          corresponds to approximately 105 mVp.
-                                                             0x0: invalid
-                                                             0x1:  45 mV
-                                                             0x2:  60 mV
-                                                             0x3:  75 mV
-                                                             0x4:  90 mV
-                                                             0x5: 105 mV
-                                                             0x6: 120 mV
-                                                             0x7: 135 mV */
-	uint64_t lane0_ext_pclk_req           : 1;  /**< When asserted, this signal enables the pipe0_pclk output regardless of power state
-                                                         (along with the associated increase in power consumption). You can use this input
-                                                         to enable pipe0_pclk in the P3 state without going through a complete boot sequence. */
+                                                         0x0 = invalid
+                                                         0x1 = 45 mV
+                                                         0x2 = 60 mV
+                                                         0x3 = 75 mV
+                                                         0x4 = 90 mV
+                                                         0x5 = 105 mV (default)
+                                                         0x6 = 120 mV
+                                                         0x7 = 135 mV */
+	uint64_t lane0_ext_pclk_req           : 1;  /**< When asserted, this signal enables the pipe0_pclk output regardless of power state (along
+                                                         with the associated increase in power consumption). You can use this input to enable
+                                                         pipe0_pclk in the P3 state without going through a complete boot sequence. */
 	uint64_t lane0_tx2rx_loopbk           : 1;  /**< When asserted, data from TX predriver is looped back to RX slicers. LOS is bypassed and
                                                          based on the tx0_en input so that rx0_los = !tx_data_en. */
 	uint64_t reserved_42_55               : 14;
-	uint64_t pcs_rx_los_mask_val          : 10; /**< Configurable Loss-of-Signal Mask Width.
-                                                         Sets the number of reference clock cycles to mask the incoming LFPS in U3 and U2 states.
-                                                         Masks the incoming LFPS for the number of reference clock cycles equal to the value of
-                                                         pcs_rx_los_mask_val<9:0>. This control filters out short, non-compliant LFPS glitches
-                                                         sent by a non-compliant host.
+	uint64_t pcs_rx_los_mask_val          : 10; /**< Configurable loss-of-signal mask width. Sets the number of reference clock cycles to mask
+                                                         the incoming LFPS in U3 and U2 states. Masks the incoming LFPS for the number of reference
+                                                         clock cycles equal to the value of pcs_rx_los_mask_val<9:0>. This control filters out
+                                                         short, non-compliant LFPS glitches sent by a noncompliant host.
                                                          For normal operation, set to a targeted mask interval of 10us (value = 10us / Tref_clk).
                                                          If the UCTL(0)_CTL[REF_CLK_DIV2] is used, then (value = 10us / (2 * Tref_clk)).
                                                          These equations are based on the SuperSpeed reference clock frequency.
-                                                         The value of PCS_RX_LOS_MASK_VAL should be:
+                                                         The value of PCS_RX_LOS_MASK_VAL should be as follows:
                                                              Frequency DIV2 LOS_MASK
                                                               200  MHz    1    0x3E8
                                                               125  MHz    0    0x4E2
@@ -1658,11 +1637,11 @@ union cvmx_uctlx_portx_cfg_ss {
                                                          derived from the following equation:
                                                          TX de-emphasis (db) =
                                                          20 * log_base_10((128 - 2 * pcs_tx_deemph)/128)
-                                                         INTERNAL: Default Value is Package-Dependant.
                                                          In general, the parameter controls are static signals to be set prior to taking the PHY
                                                          out of reset. However, you can dynamically change these values on-the-fly for test
                                                          purposes. In this case, changes to the transmitter to reflect the current value occur only
-                                                         after the pipeP_tx_deemph[1:0] input changes. */
+                                                         after the pipeP_tx_deemph[1:0] input changes.
+                                                         INTERNAL: Default value is package dependant. */
 	uint64_t pcs_tx_deemph_6db            : 6;  /**< Fine-tune transmitter driver de-emphasis when set to 6db.
                                                          This static value sets the Tx driver de-emphasis value when pipeP_tx_deemph[1:0] is set to
                                                          0x2 (according to the PIPE3 specification). This bus is provided for completeness and as a
@@ -1670,25 +1649,25 @@ union cvmx_uctlx_portx_cfg_ss {
                                                          the following equation:
                                                          TX de-emphasis (db) =
                                                          20 * log_base_10((128 - 2 * pcs_tx_deemph)/128)
-                                                         INTERNAL: Default Value is Package-Dependant.
                                                          In general, the parameter controls are static signals to be set prior to taking the PHY
                                                          out of reset. However, you can dynamically change these values on-the-fly for test
                                                          purposes. In this case, changes to the transmitter to reflect the current value occur only
-                                                         after the pipeP_tx_deemph[1:0] input changes. */
+                                                         after the pipeP_tx_deemph[1:0] input changes.
+                                                         INTERNAL: Default value is package dependant. */
 	uint64_t pcs_tx_swing_full            : 7;  /**< Launch amplitude of the transmitter. Sets the launch amplitude of the transmitter. The
                                                          values for transmit amplitude are derived from the following equation:
                                                          TX amplitude (V) = vptx * ((pcs_tx_swing_full + 1)/128)
-                                                         INTERNAL: Default Value is Package-Dependant.
                                                          In general, the parameter controls are static signals to be set prior to taking the PHY
                                                          out of reset. However, you can dynamically change these values on-the-fly for test
                                                          purposes. In this case, changes to the transmitter to reflect the current value occur only
-                                                         after the pipeP_tx_deemph[1:0] input changes. */
+                                                         after the pipeP_tx_deemph[1:0] input changes.
+                                                         INTERNAL: Default value is package dependant. */
 	uint64_t lane0_tx_term_offset         : 5;  /**< Transmitter termination offset. Reserved, set to 0x0. */
 	uint64_t reserved_6_7                 : 2;
-	uint64_t res_tune_ack                 : 1;  /**< While asserted, indicates a resistor tune is in progress. */
-	uint64_t res_tune_req                 : 1;  /**< Rising edge triggers a resistor tune request (if one is not already in progress). When
-                                                         asserted, RES_TUNE_ACK goes high until calibration of the termination impedance is
-                                                         complete.
+	uint64_t res_tune_ack                 : 1;  /**< Resistor tune acknowledge. While asserted, indicates a resistor tune is in progress. */
+	uint64_t res_tune_req                 : 1;  /**< Resistor tune request. The rising edge triggers a resistor tune request (if one is not
+                                                         already in progress). When asserted, RES_TUNE_ACK is asserted high until calibration of
+                                                         the termination impedance is complete.
                                                          Tuning disrupts the normal flow of data; therefore, assert RES_TUNE_REQ only when the PHY
                                                          is inactive. The PHY automatically performs a tune when coming out of PRST. */
 	uint64_t reserved_0_3                 : 4;
@@ -1858,11 +1837,10 @@ typedef union cvmx_uctlx_ppaf_wm cvmx_uctlx_ppaf_wm_t;
  *
  * Accessible by: only when H_CLKDIV_EN
  * Reset by: IOI reset (srst_n) or UCTL(0)_CTL[UCTL_RST]
- * This register allows configuration of various shim (UCTL) features.
- * Fields XS_NCB_OOB_* are captured when there are no outstanding OOB errors indicated in INTSTAT
- * and a new OOB error arrives.
- * Fields XS_BAD_DMA_* are captured when there are no outstanding DMA errors indicated in INTSTAT
- * and a new DMA error arrives.
+ * This register allows configuration of various shim (UCTL) features. The fields XS_NCB_OOB_*
+ * are captured when there are no outstanding OOB errors indicated in INTSTAT and a new OOB error
+ * arrives. The fields XS_BAD_DMA_* are captured when there are no outstanding DMA errors
+ * indicated in INTSTAT and a new DMA error arrives.
  */
 union cvmx_uctlx_shim_cfg {
 	uint64_t u64;
@@ -1887,7 +1865,7 @@ union cvmx_uctlx_shim_cfg {
 	uint64_t reserved_14_39               : 26;
 	uint64_t dma_read_cmd                 : 2;  /**< Selects the IOI read command used by DMA accesses. See UCTL_DMA_READ_CMD_E. */
 	uint64_t reserved_11_11               : 1;
-	uint64_t dma_write_cmd                : 1;  /**< Selects the NCB write command used by DMA accesses. See enum UCTL_DMA_WRITE_CMD_E. */
+	uint64_t dma_write_cmd                : 1;  /**< Selects the NCB write command used by DMA accesses. See UCTL_DMA_WRITE_CMD_E. */
 	uint64_t dma_endian_mode              : 2;  /**< Selects the endian format for DMA accesses to the L2C. See UCTL_ENDIAN_MODE_E. */
 	uint64_t reserved_2_7                 : 6;
 	uint64_t csr_endian_mode              : 2;  /**< Selects the endian format for IOI CSR accesses to the UAHC. Note that when UAHC CSRs are
-- 
1.9.1

