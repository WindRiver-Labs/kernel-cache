From db67fec78db04259613a1f943810d6bead5f20b7 Mon Sep 17 00:00:00 2001
From: Corey Minyard <cminyard@mvista.com>
Date: Mon, 3 Feb 2014 15:54:23 -0600
Subject: [PATCH 379/518] kdump: Add system memory ranges to VMCOREINFO

Source: Cavium Networks, Inc
MR: 5283
Type: Enhancement
Disposition: Needs submitting to k.org
ChangeID: 5f42965dcc5034f8ba678ccec39a43a990e6662e
Description:

On many systems it is best to not scan arbitrary memory from zero.  So
pass in the memory ranges used by the crashing kernel so the crash
kernel can only extract the memory it needs.

Also add the physical address of the init_mm page directory.  This
lets software generate a virtual memory map pretty easily.

Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from Cavium SDK 3.1.1 525]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 include/linux/kexec.h |  7 +++++++
 kernel/kexec.c        | 12 ++++++++++++
 2 files changed, 19 insertions(+)

diff --git a/include/linux/kexec.h b/include/linux/kexec.h
index 5fd33dc..f145da3 100644
--- a/include/linux/kexec.h
+++ b/include/linux/kexec.h
@@ -167,6 +167,13 @@ unsigned long paddr_vmcoreinfo_note(void);
 	vmcoreinfo_append_str("NUMBER(%s)=%ld\n", #name, (long)name)
 #define VMCOREINFO_CONFIG(name) \
 	vmcoreinfo_append_str("CONFIG_%s=y\n", #name)
+#define VMCOREINFO_ADDRESS(name) \
+	vmcoreinfo_append_str("ADDRESS(%s)=%llx\n", #name, \
+			      (unsigned long long )name)
+#define VMCOREINFO_MEMRANGE(name, start, size) \
+	  vmcoreinfo_append_str("MEMRANGE(%s)=%llx@%llx\n", #name, \
+				(unsigned long long) (size),	   \
+				(unsigned long long) (start))
 
 extern struct kimage *kexec_image;
 extern struct kimage *kexec_crash_image;
diff --git a/kernel/kexec.c b/kernel/kexec.c
index 1f8d938..b302308 100644
--- a/kernel/kexec.c
+++ b/kernel/kexec.c
@@ -1561,8 +1561,17 @@ unsigned long __attribute__ ((weak)) paddr_vmcoreinfo_note(void)
 	return __pa((unsigned long)(char *)&vmcoreinfo_note);
 }
 
+static int
+save_ram_range(unsigned long start, unsigned long size, void *dummy)
+{
+	VMCOREINFO_MEMRANGE(sysram, start << PAGE_SHIFT, size << PAGE_SHIFT);
+	return 0;
+}
+
 static int __init crash_save_vmcoreinfo_init(void)
 {
+	unsigned long phys_pgd_ptr;
+
 	VMCOREINFO_OSRELEASE(init_uts_ns.name.release);
 	VMCOREINFO_PAGESIZE(PAGE_SIZE);
 
@@ -1624,6 +1633,9 @@ static int __init crash_save_vmcoreinfo_init(void)
 	VMCOREINFO_NUMBER(PG_hwpoison);
 #endif
 	VMCOREINFO_NUMBER(PAGE_BUDDY_MAPCOUNT_VALUE);
+	phys_pgd_ptr = virt_to_phys(init_mm.pgd);
+	VMCOREINFO_ADDRESS(phys_pgd_ptr);
+	walk_system_ram_range(0, -1ULL, NULL, save_ram_range);
 
 	arch_crash_save_vmcoreinfo();
 	update_vmcoreinfo_note();
-- 
1.9.1

