From e356592dd4b0d44ad94373402183b99d7ec6c079 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Thu, 8 Aug 2013 11:51:42 -0700
Subject: [PATCH 197/518] netdev: octeon-ethernet: Redo common code for
 changing MTU.

Source: Cavium Networks, Inc.
MR: 00000
Type: Integration
Disposition: Merged from Octeon Tree
ChangeID: 7a9936addeb0fe652918d6af6b19476c36166e35
Description:

Moved setting of MTU to common module.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from Cavium SDK 3.1.1 525]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/octeon/ethernet.c        | 82 +++++++--------------------
 drivers/net/ethernet/octeon/octeon-ethernet.h |  1 -
 drivers/net/ethernet/octeon/octeon_common.c   | 62 ++++++++++++++++++--
 drivers/net/ethernet/octeon/octeon_common.h   | 10 ++++
 drivers/net/ethernet/octeon/octeon_mgmt.c     | 26 ++-------
 5 files changed, 94 insertions(+), 87 deletions(-)

diff --git a/drivers/net/ethernet/octeon/ethernet.c b/drivers/net/ethernet/octeon/ethernet.c
index 86a23bf..e592a1f 100644
--- a/drivers/net/ethernet/octeon/ethernet.c
+++ b/drivers/net/ethernet/octeon/ethernet.c
@@ -28,8 +28,6 @@
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/module.h>
-#include <linux/netdevice.h>
-#include <linux/etherdevice.h>
 #include <linux/phy.h>
 #include <linux/slab.h>
 #include <linux/of_net.h>
@@ -459,63 +457,28 @@ static struct net_device_stats *cvm_oct_common_get_stats(struct net_device *dev)
 }
 
 /**
- * cvm_oct_common_change_mtu - change the link MTU
+ * cvm_oct_change_mtu - change the link MTU
  * @dev:     Device to change
  * @new_mtu: The new MTU
  *
  * Returns Zero on success
  */
-static int cvm_oct_common_change_mtu(struct net_device *dev, int new_mtu)
+static int cvm_oct_change_mtu(struct net_device *dev, int new_mtu)
 {
 	struct octeon_ethernet *priv = netdev_priv(dev);
-#if IS_ENABLED(CONFIG_VLAN_8021Q)
-	int vlan_bytes = 4;
-#else
-	int vlan_bytes = 0;
-#endif
+	int ret;
+	u64 ipd_reg;
+
+	if (OCTEON_IS_MODEL(OCTEON_CN3XXX) || OCTEON_IS_MODEL(OCTEON_CN58XX))
+		ipd_reg = 0;
+	else
+		ipd_reg = CVMX_PIP_PRT_CFGX(priv->ipd_pkind);
+
+	ret = cvm_oct_common_change_mtu(dev, new_mtu, priv->gmx_base, ipd_reg, 65392);
+
+	if (ret)
+		return ret;
 
-	/* Limit the MTU to make sure the ethernet packets are between
-	 * 64 bytes and 65535 bytes.
-	 */
-	if ((new_mtu + 14 + 4 + vlan_bytes < 64)
-	    || (new_mtu + 14 + 4 + vlan_bytes > 65392)) {
-		netdev_err(dev, "MTU must be between %d and %d.\n",
-			   64 - 14 - 4 - vlan_bytes,
-			   65392 - 14 - 4 - vlan_bytes);
-		return -EINVAL;
-	}
-	dev->mtu = new_mtu;
-
-	if (priv->has_gmx_regs) {
-		/* Add ethernet header and FCS, and VLAN if configured. */
-		int max_packet = new_mtu + 14 + 4 + vlan_bytes;
-
-		if (OCTEON_IS_MODEL(OCTEON_CN3XXX)
-		    || OCTEON_IS_MODEL(OCTEON_CN58XX)) {
-			/* Signal errors on packets larger than the MTU */
-			cvmx_write_csr(CVMX_GMXX_RXX_FRM_MAX(priv->interface_port, priv->interface),
-				       max_packet);
-		} else {
-			union cvmx_pip_prt_cfgx port_cfg;
-
-			port_cfg.u64 = cvmx_read_csr(CVMX_PIP_PRT_CFGX(priv->ipd_pkind));
-			if (port_cfg.s.maxerr_en) {
-				/* Disable the PIP check as it can
-				 * only be controlled over a group of
-				 * ports, let the check be done in the
-				 * GMX instead.
-				 */
-				port_cfg.s.maxerr_en = 0;
-				cvmx_write_csr(CVMX_PIP_PRT_CFGX(priv->ipd_pkind), port_cfg.u64);
-			}
-		}
-		/* Set the hardware to truncate packets larger than
-		 * the MTU. The jabber register must be set to a
-		 * multiple of 8 bytes, so round up.
-		 */
-		cvmx_write_csr(CVMX_GMXX_RXX_JABBER(priv->interface_port, priv->interface),
-			       (max_packet + 7) & ~7u);
-	}
 	return 0;
 }
 
@@ -607,7 +570,7 @@ static const struct net_device_ops cvm_oct_npi_netdev_ops = {
 	.ndo_set_rx_mode	= cvm_oct_set_rx_filter,
 	.ndo_set_mac_address	= cvm_oct_set_mac_address,
 	.ndo_do_ioctl		= cvm_oct_ioctl,
-	.ndo_change_mtu		= cvm_oct_common_change_mtu,
+	.ndo_change_mtu		= cvm_oct_change_mtu,
 	.ndo_get_stats		= cvm_oct_common_get_stats,
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	.ndo_poll_controller	= cvm_oct_poll_controller,
@@ -624,7 +587,7 @@ static const struct net_device_ops cvm_oct_sgmii_netdev_ops = {
 	.ndo_set_rx_mode	= cvm_oct_set_rx_filter,
 	.ndo_set_mac_address	= cvm_oct_set_mac_address,
 	.ndo_do_ioctl		= cvm_oct_ioctl,
-	.ndo_change_mtu		= cvm_oct_common_change_mtu,
+	.ndo_change_mtu		= cvm_oct_change_mtu,
 	.ndo_get_stats		= cvm_oct_common_get_stats,
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	.ndo_poll_controller	= cvm_oct_poll_controller,
@@ -639,7 +602,7 @@ static const struct net_device_ops cvm_oct_sgmii_lockless_netdev_ops = {
 	.ndo_set_rx_mode	= cvm_oct_set_rx_filter,
 	.ndo_set_mac_address	= cvm_oct_set_mac_address,
 	.ndo_do_ioctl		= cvm_oct_ioctl,
-	.ndo_change_mtu		= cvm_oct_common_change_mtu,
+	.ndo_change_mtu		= cvm_oct_change_mtu,
 	.ndo_get_stats		= cvm_oct_common_get_stats,
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	.ndo_poll_controller	= cvm_oct_poll_controller,
@@ -653,7 +616,7 @@ static const struct net_device_ops cvm_oct_spi_netdev_ops = {
 	.ndo_set_rx_mode	= cvm_oct_set_rx_filter,
 	.ndo_set_mac_address	= cvm_oct_set_mac_address,
 	.ndo_do_ioctl		= cvm_oct_ioctl,
-	.ndo_change_mtu		= cvm_oct_common_change_mtu,
+	.ndo_change_mtu		= cvm_oct_change_mtu,
 	.ndo_get_stats		= cvm_oct_common_get_stats,
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	.ndo_poll_controller	= cvm_oct_poll_controller,
@@ -667,7 +630,7 @@ static const struct net_device_ops cvm_oct_spi_lockless_netdev_ops = {
 	.ndo_set_rx_mode	= cvm_oct_set_rx_filter,
 	.ndo_set_mac_address	= cvm_oct_set_mac_address,
 	.ndo_do_ioctl		= cvm_oct_ioctl,
-	.ndo_change_mtu		= cvm_oct_common_change_mtu,
+	.ndo_change_mtu		= cvm_oct_change_mtu,
 	.ndo_get_stats		= cvm_oct_common_get_stats,
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	.ndo_poll_controller	= cvm_oct_poll_controller,
@@ -681,7 +644,7 @@ static const struct net_device_ops cvm_oct_rgmii_netdev_ops = {
 	.ndo_set_rx_mode	= cvm_oct_set_rx_filter,
 	.ndo_set_mac_address	= cvm_oct_set_mac_address,
 	.ndo_do_ioctl		= cvm_oct_ioctl,
-	.ndo_change_mtu		= cvm_oct_common_change_mtu,
+	.ndo_change_mtu		= cvm_oct_change_mtu,
 	.ndo_get_stats		= cvm_oct_common_get_stats,
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	.ndo_poll_controller	= cvm_oct_poll_controller,
@@ -695,7 +658,7 @@ static const struct net_device_ops cvm_oct_rgmii_lockless_netdev_ops = {
 	.ndo_set_rx_mode	= cvm_oct_set_rx_filter,
 	.ndo_set_mac_address	= cvm_oct_set_mac_address,
 	.ndo_do_ioctl		= cvm_oct_ioctl,
-	.ndo_change_mtu		= cvm_oct_common_change_mtu,
+	.ndo_change_mtu		= cvm_oct_change_mtu,
 	.ndo_get_stats		= cvm_oct_common_get_stats,
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	.ndo_poll_controller	= cvm_oct_poll_controller,
@@ -1013,7 +976,6 @@ static int cvm_oct_probe(struct platform_device *pdev)
 				dev->netdev_ops = priv->tx_lockless ?
 					&cvm_oct_sgmii_lockless_netdev_ops : &cvm_oct_sgmii_netdev_ops;
 				priv->gmx_base = CVMX_GMXX_RXX_INT_REG(interface_port, interface);
-				priv->has_gmx_regs = 1;
 				strcpy(dev->name, "xaui%d");
 				break;
 
@@ -1028,7 +990,6 @@ static int cvm_oct_probe(struct platform_device *pdev)
 				dev->netdev_ops = priv->tx_lockless ?
 					&cvm_oct_sgmii_lockless_netdev_ops : &cvm_oct_sgmii_netdev_ops;
 				priv->gmx_base = CVMX_GMXX_RXX_INT_REG(interface_port, interface);
-				priv->has_gmx_regs = 1;
 				strcpy(dev->name, "eth%d");
 				break;
 
@@ -1045,7 +1006,6 @@ static int cvm_oct_probe(struct platform_device *pdev)
 				dev->netdev_ops = priv->tx_lockless ?
 					&cvm_oct_rgmii_lockless_netdev_ops : &cvm_oct_rgmii_netdev_ops;
 				priv->gmx_base = CVMX_GMXX_RXX_INT_REG(interface_port, interface);
-				priv->has_gmx_regs = 1;
 				strcpy(dev->name, "eth%d");
 				break;
 #ifdef CONFIG_RAPIDIO
diff --git a/drivers/net/ethernet/octeon/octeon-ethernet.h b/drivers/net/ethernet/octeon/octeon-ethernet.h
index fc9cd9d..57b93a1 100644
--- a/drivers/net/ethernet/octeon/octeon-ethernet.h
+++ b/drivers/net/ethernet/octeon/octeon-ethernet.h
@@ -61,7 +61,6 @@ struct octeon_ethernet {
 	int imode;
 
 	unsigned int rx_strip_fcs:1;
-	unsigned int has_gmx_regs:1;
 	unsigned int tx_timestamp_hw:1;
 	unsigned int rx_timestamp_hw:1;
 	unsigned int tx_multiple_queues:1;
diff --git a/drivers/net/ethernet/octeon/octeon_common.c b/drivers/net/ethernet/octeon/octeon_common.c
index 5a944fd..a4b0098 100644
--- a/drivers/net/ethernet/octeon/octeon_common.c
+++ b/drivers/net/ethernet/octeon/octeon_common.c
@@ -7,17 +7,18 @@
  */
 
 #include <linux/module.h>
-#include <linux/netdevice.h>
-#include <linux/etherdevice.h>
 
 #include <asm/octeon/octeon.h>
 #include "octeon_common.h"
 
 #include <asm/octeon/cvmx-gmxx-defs.h>
 #include <asm/octeon/cvmx-agl-defs.h>
+#include <asm/octeon/cvmx-pip-defs.h>
 
 #define GMX_PRT_CFG                 0x10
 
+#define GMX_RX_FRM_MAX              0x30
+#define GMX_RX_JABBER               0x38
 #define GMX_RX_ADR_CTL              0x100
 #define GMX_RX_ADR_CAM_EN           0x108
 #define GMX_RX_ADR_CAM0             0x180
@@ -27,7 +28,6 @@
 #define GMX_RX_ADR_CAM4             0x1a0
 #define GMX_RX_ADR_CAM5             0x1a8
 
-
 struct cvm_oct_cam_state {
 	u64 cam[6];
 	u64 cam_mask;
@@ -124,7 +124,6 @@ void cvm_oct_common_set_rx_filtering(struct net_device *dev, u64 base_reg, spinl
 }
 EXPORT_SYMBOL(cvm_oct_common_set_rx_filtering);
 
-
 /**
  * Set the hardware MAC address for a device.
  * @dev      : Device to work on
@@ -148,5 +147,60 @@ int cvm_oct_common_set_mac_address(struct net_device *dev, void *addr,
 }
 EXPORT_SYMBOL(cvm_oct_common_set_mac_address);
 
+/**
+ * cvm_oct_common_change_mtu - change the link MTU
+ * @dev      : Device to change
+ * @mtu      : The new MTU
+ * @base_reg : Base address of register bank
+ * @pip_reg  : Used for frame checking
+ * @mtu_limit: Max allowed MTU size
+ *
+ * Returns Zero on success
+ */
+int cvm_oct_common_change_mtu(struct net_device *dev, int mtu, u64 base_reg,
+		u64 pip_reg, int mtu_limit)
+{
+	int max_packet = mtu + OCTEON_FRAME_HEADER_LEN;
+
+	if (max_packet < 64 || max_packet > mtu_limit) {
+		netdev_err(dev, "MTU must be between %d and %d.\n",
+			64 - OCTEON_FRAME_HEADER_LEN, mtu_limit - OCTEON_FRAME_HEADER_LEN);
+		return -EINVAL;
+	}
+
+	dev->mtu = mtu;
+
+	/* Set the hardware to truncate packets larger than
+	 * the MTU. The jabber register must be set to a
+	 * multiple of 8 bytes, so round up.
+	 */
+	if (base_reg) {
+		if (pip_reg == 0)
+			cvmx_write_csr(base_reg + GMX_RX_FRM_MAX, max_packet);
+		else {
+			union cvmx_pip_prt_cfgx port_cfg;
+
+			port_cfg.u64 = cvmx_read_csr(pip_reg);
+			if (port_cfg.s.maxerr_en) {
+				/* Disable the PIP check as it can
+				 * only be controlled over a group of
+				 * ports, let the check be done in the
+				 * GMX instead.
+				 */
+				port_cfg.s.maxerr_en = 0;
+				cvmx_write_csr(pip_reg, port_cfg.u64);
+			}
+		}
+		/* Set the hardware to truncate packets larger than
+		 * the MTU. The jabber register must be set to a
+		 * multiple of 8 bytes, so round up.
+		 */
+		cvmx_write_csr(base_reg + GMX_RX_JABBER, (max_packet + 7) & ~7u);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(cvm_oct_common_change_mtu);
+
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Cavium, Inc. Common Network Driver");
diff --git a/drivers/net/ethernet/octeon/octeon_common.h b/drivers/net/ethernet/octeon/octeon_common.h
index f1dcdae..350f7fb 100644
--- a/drivers/net/ethernet/octeon/octeon_common.h
+++ b/drivers/net/ethernet/octeon/octeon_common.h
@@ -8,9 +8,19 @@
 #ifndef _ETHERNET_OCTEON_OCTEON_COMMON_H
 #define _ETHERNET_OCTEON_OCTEON_COMMON_H
 
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/if_vlan.h>
+
+/* Allow 8 bytes for vlan and FCS. */
+#define OCTEON_FRAME_HEADER_LEN	(ETH_HLEN + ETH_FCS_LEN + VLAN_HLEN)
+
 extern void cvm_oct_common_set_rx_filtering(struct net_device *dev, u64 base_reg,
 					spinlock_t *lock);
 
 extern int cvm_oct_common_set_mac_address(struct net_device *dev, void *addr,
 					u64 base_reg, spinlock_t *lock);
+
+extern int cvm_oct_common_change_mtu(struct net_device *dev, int mtu, u64 base_reg,
+		u64 pip_reg, int mtu_limit);
 #endif
diff --git a/drivers/net/ethernet/octeon/octeon_mgmt.c b/drivers/net/ethernet/octeon/octeon_mgmt.c
index ff9270a..645fbfe 100644
--- a/drivers/net/ethernet/octeon/octeon_mgmt.c
+++ b/drivers/net/ethernet/octeon/octeon_mgmt.c
@@ -8,13 +8,11 @@
 
 #include <linux/platform_device.h>
 #include <linux/dma-mapping.h>
-#include <linux/etherdevice.h>
 #include <linux/capability.h>
 #include <linux/net_tstamp.h>
 #include <linux/interrupt.h>
 #include <linux/netdevice.h>
 #include <linux/spinlock.h>
-#include <linux/if_vlan.h>
 #include <linux/of_mdio.h>
 #include <linux/module.h>
 #include <linux/of_net.h>
@@ -41,9 +39,6 @@
 #define OCTEON_MGMT_RX_RING_SIZE 512
 #define OCTEON_MGMT_TX_RING_SIZE 128
 
-/* Allow 8 bytes for vlan and FCS. */
-#define OCTEON_MGMT_RX_HEADROOM (ETH_HLEN + ETH_FCS_LEN + VLAN_HLEN)
-
 union mgmt_port_ring_entry {
 	u64 d64;
 	struct {
@@ -85,8 +80,6 @@ union mgmt_port_ring_entry {
 
 #define AGL_GMX_PRT_CFG			0x10
 #define AGL_GMX_RX_FRM_CTL		0x18
-#define AGL_GMX_RX_FRM_MAX		0x30
-#define AGL_GMX_RX_JABBER		0x38
 #define AGL_GMX_RX_STATS_CTL		0x50
 
 #define AGL_GMX_RX_STATS_PKTS_DRP	0xb0
@@ -212,7 +205,7 @@ static void octeon_mgmt_rx_fill_ring(struct net_device *netdev)
 		struct sk_buff *skb;
 
 		/* CN56XX pass 1 needs 8 bytes of padding.  */
-		size = netdev->mtu + OCTEON_MGMT_RX_HEADROOM + 8 + NET_IP_ALIGN;
+		size = netdev->mtu + OCTEON_FRAME_HEADER_LEN + 8 + NET_IP_ALIGN;
 
 		skb = netdev_alloc_skb(netdev, size);
 		if (!skb)
@@ -390,7 +383,7 @@ static u64 octeon_mgmt_dequeue_rx_buffer(struct octeon_mgmt *p,
 	*pskb = __skb_dequeue(&p->rx_list);
 
 	dma_unmap_single(p->dev, re.s.addr,
-			 ETH_FRAME_LEN + OCTEON_MGMT_RX_HEADROOM,
+			 ETH_FRAME_LEN + OCTEON_FRAME_HEADER_LEN,
 			 DMA_FROM_DEVICE);
 
 	return re.d64;
@@ -570,23 +563,14 @@ static int octeon_mgmt_set_mac_address(struct net_device *netdev, void *addr)
 static int octeon_mgmt_change_mtu(struct net_device *netdev, int new_mtu)
 {
 	struct octeon_mgmt *p = netdev_priv(netdev);
-	int size_without_fcs = new_mtu + OCTEON_MGMT_RX_HEADROOM;
 
 	/* Limit the MTU to make sure the ethernet packets are between
 	 * 64 bytes and 16383 bytes.
 	 */
-	if (size_without_fcs < 64 || size_without_fcs > 16383) {
-		dev_warn(p->dev, "MTU must be between %d and %d.\n",
-			 64 - OCTEON_MGMT_RX_HEADROOM,
-			 16383 - OCTEON_MGMT_RX_HEADROOM);
-		return -EINVAL;
-	}
-
-	netdev->mtu = new_mtu;
+	int ret = cvm_oct_common_change_mtu(netdev, new_mtu, p->agl, 0, 16383);
 
-	cvmx_write_csr(p->agl + AGL_GMX_RX_FRM_MAX, size_without_fcs);
-	cvmx_write_csr(p->agl + AGL_GMX_RX_JABBER,
-		       (size_without_fcs + 7) & 0xfff8);
+	if (ret)
+		return ret;
 
 	return 0;
 }
-- 
1.9.1

