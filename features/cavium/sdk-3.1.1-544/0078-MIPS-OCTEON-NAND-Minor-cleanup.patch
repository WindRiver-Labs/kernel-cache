From 49cc38f7460806bd43be03d7a671f75ad7a95df5 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Sat, 10 May 2014 17:20:15 -0700
Subject: [PATCH 078/202] MIPS:OCTEON: NAND: Minor cleanup.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.1-544]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 arch/mips/cavium-octeon/octeon-nand.c | 12 ++++--------
 1 file changed, 4 insertions(+), 8 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-nand.c b/arch/mips/cavium-octeon/octeon-nand.c
index 997e9a0..ed1c001 100644
--- a/arch/mips/cavium-octeon/octeon-nand.c
+++ b/arch/mips/cavium-octeon/octeon-nand.c
@@ -268,7 +268,7 @@ static int octeon_nand_hw_bch_write_page(struct mtd_info *mtd,
 		int ret;
 		ret = chip->ecc.calculate(mtd, p, &ecc_calc[i]);
 		if (ret < 0)
-			printk("\n=== chip->ecc.calculate(mtd, p=%p, &ecc_calc[i]) returned %d\n", p, ret);
+			DEV_DBG(DEBUG_WRITE, priv->dev, "=== chip->ecc.calculate(mtd, p=%p, &ecc_calc[i]) returned %d\n", p, ret);
 
 		DEV_DBG(DEBUG_WRITE, priv->dev, "block offset %ld, ecc offset %d\n",
 			p - buf, i);
@@ -528,7 +528,7 @@ static int octeon_nand_bch_calculate_ecc_internal(struct octeon_nand *priv,
 	int rc;
 	int i;
 	void *ecc_ptr;
-	uint8_t ecc_buffer[/*45*/nand_chip->ecc.bytes] __attribute__((__aligned__(8)));
+	uint8_t ecc_buffer[nand_chip->ecc.bytes] __attribute__((__aligned__(8)));
 
 	if ((ulong)code % 8) {
 		ecc_ptr = ecc_buffer;
@@ -963,12 +963,11 @@ static int octeon_nand_scan_onfi(struct octeon_nand *priv)
 		}
 
 		/*
-		 * strenght=24 needs total of ecc.bytes=180 for 4k page
-		 * strenght=32 needs total of ecc.bytes=240 for 4k page
+		 * strength=24 needs total of ecc.bytes=180 for 4k page
+		 * strength=32 needs total of ecc.bytes=240 for 4k page
 		 * Our NAND has only 224 bytes OOB so we should use max
 		 * ecc.strength=24 ,ecc.bytes=45 and ecc_totalbytes=180
 		 */
-/*		if (priv->nand.ecc.strength > 24) priv->nand.ecc.strength = 24;*/
 		}
 
 		/* The number of ECC bits required is m * t
@@ -985,9 +984,6 @@ static int octeon_nand_scan_onfi(struct octeon_nand *priv)
 		 */
 		priv->nand.ecc.bytes = ((15 * priv->nand.ecc.strength) + 7) / 8;
 
-		/* priv->nand.ecc.strength =
-			(priv->nand.ecc.bytes * 8) / fls(8 * priv->nand.ecc.size);*/
-
 		priv->nand.ecc.steps = (1 << priv->nand.page_shift) / priv->nand.ecc.size;
 		priv->nand.ecc.calculate = octeon_nand_bch_calculate;
 		priv->nand.ecc.correct = octeon_nand_bch_correct;
-- 
1.8.2.1

