From 2b1c021ddcf789ce326615a4499a9526ab18fcfa Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 13 Feb 2015 15:28:23 +0530
Subject: [PATCH 094/132] MIPS: Add board_mcheck_handler, show process state on
 machine check exception.

Commit 9c11ba8ae36cbff55d2b515911b36f403beb1611 from
git://git.yoctoproject.org/linux-yocto-3.14

This allows board specific handling of Machine Check errors.
This adds a little information that could be useful in debugging.

panic_on_oops: remove ssleep()

MIPS catches up to 2006 fix on other archs...
   commit cea6a4ba8acfba6f59cc9ed71e0d05cb770b9d9c
   Author: Horms <horms@verge.net.au>
   Date:   Sun Jul 30 03:03:34 2006 -0700
from cea6a4ba log ...
   This patch is part of an effort to unify the panic_on_oops behaviour across
   all architectures that implement it.

   It was pointed out to me by Andi Kleen that if an oops has occured in
   interrupt context, then calling sleep() in the oops path will only cause a
   panic, and that it would be really better for it not to be in the path at
   all.

Fix compilation - 3.14 does not use this __uasminit variable anymore

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Leonid Rosenboim <lrosenboim@caviumnetworks.com>
Signed-off-by: Peter Swain <pswain@cavium.net>
Signed-off-by: Tsvetan Erenditsov <terenditsov@caviumnetworks.com>
Signed-off-by: Abhishek Paliwal <abhishek.paliwal@aricent.com>
[Original patch taken from OCTEON-SDK 3.1.1-544.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/kernel/traps.c | 8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

diff --git a/arch/mips/kernel/traps.c b/arch/mips/kernel/traps.c
index 06f510c..f009e06 100644
--- a/arch/mips/kernel/traps.c
+++ b/arch/mips/kernel/traps.c
@@ -402,11 +402,8 @@ void __noreturn die(const char *str, struct pt_regs *regs)
 	if (in_interrupt())
 		panic("Fatal exception in interrupt");
 
-	if (panic_on_oops) {
-		printk(KERN_EMERG "Fatal exception: panic in 5 seconds");
-		ssleep(5);
+	if (panic_on_oops)
 		panic("Fatal exception");
-	}
 
 	if (regs && kexec_should_crash(current))
 		crash_kexec(regs);
@@ -1341,6 +1338,7 @@ asmlinkage void do_cpu(struct pt_regs *regs)
 	int sig;
 
 	prev_state = exception_enter();
+
 	cpid = (regs->cp0_cause >> CAUSEB_CE) & 3;
 
 	if (cpid != 2)
@@ -1877,7 +1875,7 @@ unsigned long ebase;
 unsigned long exception_handlers[32];
 unsigned long vi_handlers[64];
 
-void __init *set_except_vector(int n, void *addr)
+void *set_except_vector(int n, void *addr)
 {
 	unsigned long handler = (unsigned long) addr;
 	unsigned long old_handler;
-- 
1.9.1

