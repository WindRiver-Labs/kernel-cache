From 55302dcf0f491632c49374f59753a3841387a7ef Mon Sep 17 00:00:00 2001
From: Peter Swain <peter.swain@cavium.com>
Date: Mon, 18 Aug 2014 18:24:39 -0700
Subject: [PATCH 128/202] net: phy: qca833x: split _init & unhang-time _re_init

Simplify code, split _init() into one-time _init() and a _re_init()
called whenever a link down->up transition requires unhang

Signed-off-by: Peter Swain <peter.swain@cavium.com>
[Original patch taken from Cavium SDK 3.1.1-544]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/net/phy/qca833x.c | 110 ++++++++++++++++++++--------------------------
 drivers/net/phy/qca833x.h |   2 +
 2 files changed, 50 insertions(+), 62 deletions(-)

diff --git a/drivers/net/phy/qca833x.c b/drivers/net/phy/qca833x.c
index 0762f08..0c035bf 100644
--- a/drivers/net/phy/qca833x.c
+++ b/drivers/net/phy/qca833x.c
@@ -158,40 +158,15 @@ static void qphy_vlan_config(struct phy_device *phydev)
 }
 #endif /*notdef*/
 
-static int qca8334_config_init(struct phy_device *phydev)
+static int qca8334_re_init(struct phy_device *phydev)
 {
 	int val;
 	u32 features;
 	int status;
-	static bool once;
-
-	val = phy_read(phydev, MII_PHYSID2);
-	switch (val & 0xf) {
-	case 3: /* qca8334 */
-		qports(phydev) = 2;
-		break;
-	case 6: /* qca8337 */
-		qports(phydev) = 4;
-		break;
-	default:
-		pr_err("%s: unknown PHY id %x\n", __func__,
-			val | (phy_read(phydev, MII_PHYSID1) << 16));
-		return -ENODEV;
-	}
-
-#ifdef QCA833X_IRQ
-	/* parse from FDT */
-#else /* !QCA833X_IRQ */
-	phydev->irq = PHY_POLL;
-#endif /* !QCA833X_IRQ */
-
-	if (!once)
-		pr_info("qca833x %d-port switch\n", qports(phydev));
-	once = true;
 
 	qphy_write32(phydev, S17_P0PAD_MODE_REG, S17_MAC0_SGMII_EN);
 	qphy_write32(phydev, S17_P0STATUS_REG, 0x0000007e);
-	qphy_write32(phydev, S17_P0PAD_MODE_REG, 0x00080080);
+	qphy_write32(phydev, S17_P0PAD_MODE_REG, S17_MAC0_SGMII_EN|S17_MAC0_SGMII_125MHX_RX_FALL);
 	qphy_write32(phydev, S17_GLOFW_CTRL1_REG, 0x007f7f7f);
 	qphy_write32(phydev, S17_SGMII_CTRL_REG, 0xc74164de);	/* PHY-mode SGMII control */
 
@@ -227,23 +202,46 @@ static int qca8334_config_init(struct phy_device *phydev)
 	phydev->supported = features;
 	phydev->advertising = features;
 
-#ifdef PHY_LED
-	printf("\n LED0=0x%x\n", qphy_read32(phydev, S17_LED_CTRL0_REG));
-	printf("\n LED1=0x%x\n", qphy_read32(phydev, S17_LED_CTRL1_REG));
-	printf("\n LED2=0x%x\n", qphy_read32(phydev, S17_LED_CTRL2_REG));
-	printf("\n LED3=0x%x\n", qphy_read32(phydev, S17_LED_CTRL3_REG));
-	qphy_write32(phydev, S17_LED_CTRL0_REG, 0x00008000);
-	qphy_write32(phydev, S17_LED_CTRL1_REG, 0x00008000);
-	qphy_write32(phydev, S17_LED_CTRL2_REG, 0x00008000);
-	qphy_write32(phydev, S17_LED_CTRL3_REG, 0x03faaa00);
-#endif
-
 	status = phy_write(phydev, S17_PHY_INT_EN_REG, ATHR_CTRL_SOFTWARE_RESET);
 
 	pr_debug(KERN_ERR "%s: complete\n", __func__);
 	return 0;
 }
 
+static int qca8334_config_init(struct phy_device *phydev)
+{
+	int val;
+	u32 features;
+	int status;
+	static bool once;
+
+	val = phy_read(phydev, MII_PHYSID2);
+	switch (val & 0xf) {
+	case 3: /* qca8334 */
+		qports(phydev) = 2;
+		break;
+	case 6: /* qca8337 */
+		qports(phydev) = 4;
+		break;
+	default:
+		pr_err("%s: unknown PHY id %x\n", __func__,
+			val | (phy_read(phydev, MII_PHYSID1) << 16));
+		return -ENODEV;
+	}
+
+#ifdef QCA833X_IRQ
+	/* parse from FDT */
+#else /* !QCA833X_IRQ */
+	phydev->irq = PHY_POLL;
+#endif /* !QCA833X_IRQ */
+
+	if (!once)
+		pr_info("qca833x %d-port switch\n", qports(phydev));
+	once = true;
+
+	return qca8334_re_init(phydev);
+}
+
 static void force_reset(struct phy_device *phydev)
 {
 	muget(phydev);
@@ -255,6 +253,7 @@ static void force_reset(struct phy_device *phydev)
 			phydev->attached_dev, &flags);
 	}
 	muput(phydev);
+	qca8334_re_init(phydev);
 }
 
 static int qca8334_read_status(struct phy_device *phydev)
@@ -269,9 +268,13 @@ static int qca8334_read_status(struct phy_device *phydev)
 
 	WARN_ON_ONCE(qports(phydev) <= 0);
 
-	for (port = 0; port < qports(phydev) && !phydev->link; port++) {
+	for (port = 0; port < qports(phydev); port++)
+	{
+		if (phydev->link)
+			break;
+
 		/* All the speed information can be read from register 17 in one go. */
-		phy_status = __phy_read_addr(phydev, port, 17);
+		phy_status = __phy_read_addr(phydev, port, ATHR_PHY_SPEC_STATUS);
 
 		/*
 		 * If the resolve bit 11 isn't set, see if autoneg is turned off
@@ -279,7 +282,7 @@ static int qca8334_read_status(struct phy_device *phydev)
 		 * autoneg is off, so force it
 		 */
 		if ((phy_status & (1 << 11)) == 0) {
-			int auto_status = __phy_read_addr(phydev, port, 0);
+			int auto_status = __phy_read_addr(phydev, port, MII_BMCR);
 
 			if ((auto_status & (1 << 12)) == 0)
 				phy_status |= 1 << 11;
@@ -291,29 +294,12 @@ static int qca8334_read_status(struct phy_device *phydev)
 		 */
 		if (phy_status & (1 << 11)) {
 			phydev->link = 1;
-
-			if ((phy_status >> 13) & 1)
-				phydev->duplex = DUPLEX_FULL;
-
-			switch ((phy_status >> 14) & 3) {
-			case 0:	/* 10 Mbps */
-				phydev->speed = SPEED_10;
-				break;
-			case 1:	/* 100 Mbps */
-				phydev->speed = SPEED_100;
-				break;
-			case 2:	/* 1 Gbps */
-				phydev->speed = SPEED_1000;
-				break;
-			case 3:	/* Illegal */
-				phydev->speed = 0;
-				break;
-			}
+			phydev->duplex = DUPLEX_FULL;
+			phydev->speed = SPEED_1000;
+			phydev->pause = 1;
+			phydev->asym_pause = 1;
 		}
 	}
-
-	if (phydev->duplex == DUPLEX_FULL)
-		phydev->pause = phydev->asym_pause = (phy_status >> 2) & 1;
 	muput(phydev);
 
 	/* when link goes down, reset qca833x by pulsing PCS off */
diff --git a/drivers/net/phy/qca833x.h b/drivers/net/phy/qca833x.h
index 31e0f56..4c01688 100644
--- a/drivers/net/phy/qca833x.h
+++ b/drivers/net/phy/qca833x.h
@@ -127,6 +127,7 @@
 #define S17_MACADDR0_REG		0x0060
 #define S17_MACADDR1_REG		0x0064
 #define S17_MAX_FRAME_SIZE_REG		0x0078
+#define S17_PXSTATUS(x) ((((x)&7)<<2)+S17_P0STATUS_REG)
 #define S17_P0STATUS_REG		0x007c
 #define S17_P1STATUS_REG		0x0080
 #define S17_P2STATUS_REG		0x0084
@@ -350,6 +351,7 @@
 #define S17_MAC0_PHY_GMII_RXCLK_SEL	(1 << 12)
 #define S17_MAC0_PHY_GMII_TXCLK_SEL	(1 << 13)
 #define S17_MAC0_PHY_GMII_EN		(1 << 14)
+#define S17_MAC0_SGMII_125MHX_RX_FALL	(1 << 19)
 #define S17_MAC0_RGMII_RXCLK_SHIFT	20
 #define S17_MAC0_RGMII_TXCLK_SHIFT	22
 #define S17_MAC0_RGMII_RXCLK_DELAY	(1 << 24)
-- 
1.8.2.1

