From 20809dd309970ef6c577f4ca7802253d5508ef13 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 13 Feb 2015 13:59:57 +0530
Subject: [PATCH 040/132] MIPS: OCTEON: Handle userspace access to CVMSEG

Commit 4e2bf7e37bf58609755385967941d968bfbe8133 from
git://git.yoctoproject.org/linux-yocto-3.14

Handle indexed load instructions in emulate_load_store_insn(), Octeon 3 CVMSEG
Region for IO and remove CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE and  enable
CVMSEGENAU in do_ade.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Abhishek Paliwal <abhishek.paliwal@aricent.com>
[Original patch taken from OCTEON-SDK 3.1.1-544.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/kernel/unaligned.c | 114 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 114 insertions(+)

diff --git a/arch/mips/kernel/unaligned.c b/arch/mips/kernel/unaligned.c
index 6e70973..55f7ff7 100644
--- a/arch/mips/kernel/unaligned.c
+++ b/arch/mips/kernel/unaligned.c
@@ -931,6 +931,75 @@ static void emulate_load_store_insn(struct pt_regs *regs,
 	case sb_op:
 		goto sigbus;
 
+	case spec3_op:
+		if (insn.r_format.func != lx_op)
+			goto sigill;
+		switch (insn.r_format.re) {
+		case lwx_op:
+			if (!access_ok(VERIFY_READ, addr, 4))
+				goto sigbus;
+
+			LoadW(addr, value, res);
+			if (res)
+				goto fault;
+			compute_return_epc(regs);
+			regs->regs[insn.r_format.rd] = value;
+			break;
+
+		case lhx_op:
+			if (!access_ok(VERIFY_READ, addr, 2))
+				goto sigbus;
+
+			LoadHW(addr, value, res);
+			if (res)
+				goto fault;
+			compute_return_epc(regs);
+			regs->regs[insn.r_format.rd] = value;
+			break;
+
+#ifdef CONFIG_64BIT
+		case ldx_op:
+			if (!access_ok(VERIFY_READ, addr, 8))
+				goto sigbus;
+
+			LoadDW(addr, value, res);
+			if (res)
+				goto fault;
+			compute_return_epc(regs);
+			regs->regs[insn.r_format.rd] = value;
+			break;
+
+		case lwux_op:
+		if (!access_ok(VERIFY_READ, addr, 4))
+				goto sigbus;
+
+			LoadWU(addr, value, res);
+			if (res)
+				goto fault;
+			compute_return_epc(regs);
+			regs->regs[insn.r_format.rd] = value;
+			break;
+#endif /* CONFIG_64BIT */
+
+		case lhux_op:
+			if (!access_ok(VERIFY_READ, addr, 2))
+				goto sigbus;
+
+			LoadHWU(addr, value, res);
+			if (res)
+				goto fault;
+			compute_return_epc(regs);
+			regs->regs[insn.r_format.rd] = value;
+			break;
+
+		case lbux_op:
+		case lbx_op:
+			goto sigbus;
+		default:
+			goto sigill;
+		}
+		break;
+
 		/*
 		 * The remaining opcodes are the ones that are really of
 		 * interest.
@@ -2150,6 +2219,51 @@ asmlinkage void do_ade(struct pt_regs *regs)
 	unsigned int __user *pc;
 	mm_segment_t seg;
 
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+	/*
+	* Allows tasks to access CVMSEG addresses. These are special
+	* addresses into the Octeon L1 Cache that can be used as fast
+	* scratch memory. By default access to this memory is
+	* disabled so we don't have to save it on context
+	* switch. When a userspace task references one of these
+	* addresses, we enable the region and size it to match the
+	* app.
+	*/
+	const unsigned long CVMSEG_BASE = 0xffffffffffff8000ul;
+	const unsigned long CVMSEG_IO           = 0xffffffffffffa000ul;
+	const unsigned long CVMSEG_IO_END       = 0xffffffffffffc000ul;
+	u64 cvmmemctl;
+	unsigned long cvmseg_size       = octeon_cvmseg_lines * 128;
+	if ((regs->cp0_badvaddr >= CVMSEG_IO && regs->cp0_badvaddr < CVMSEG_IO_END) ||
+		(regs->cp0_badvaddr >= CVMSEG_BASE && regs->cp0_badvaddr < CVMSEG_BASE + cvmseg_size)) {
+
+		preempt_disable();
+		cvmmemctl = __read_64bit_c0_register($11, 7);
+		/* Make sure all async operations are done */
+		asm volatile ("synciobdma" : : : "memory");
+		/* Enable userspace access to CVMSEG */
+		cvmmemctl |= 1 << 6;
+		 __write_64bit_c0_register($11, 7, cvmmemctl);
+		/*
+		 * Restore the processes CVMSEG data. Leave off the
+		 * second 128 bytes since they are reserved for kernel use.
+		 */
+		if (octeon_cvmseg_lines > 0)
+			memcpy((void *)(CVMSEG_BASE + 0), current->thread.cvmseg.cvmseg[0],
+				128);
+		if (octeon_cvmseg_lines > 2)
+			memcpy((void *)(CVMSEG_BASE + 256), current->thread.cvmseg.cvmseg[2],
+				cvmseg_size - 256);
+
+#if defined(CONFIG_CAVIUM_OCTEON_USER_IO_PER_PROCESS)
+		struct task_struct *group_leader = current->group_leader;
+		if (!test_tsk_thread_flag(group_leader, TIF_XKPHYS_IO_EN))
+			goto sigbus;
+#endif
+		preempt_enable();
+		return;
+	}
+#endif
 	prev_state = exception_enter();
 	perf_sw_event(PERF_COUNT_SW_ALIGNMENT_FAULTS,
 			1, regs, regs->cp0_badvaddr);
-- 
1.9.1

