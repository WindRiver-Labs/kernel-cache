From 993e4eb3c6fe6dce0b3d4fe96cb78d692d3d64e9 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Wed, 28 May 2014 16:54:38 -0700
Subject: [PATCH 097/202] netdev: octeon3-ethernet: Set affinity_hints for
 irqs.

Signed-off-by: David Daney <david.daney@cavium.com>
[Original patch taken from Cavium SDK 3.1.1-544]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/net/ethernet/octeon/octeon3-ethernet.c | 27 ++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/drivers/net/ethernet/octeon/octeon3-ethernet.c b/drivers/net/ethernet/octeon/octeon3-ethernet.c
index e0f9fc7a..cafe4f3 100644
--- a/drivers/net/ethernet/octeon/octeon3-ethernet.c
+++ b/drivers/net/ethernet/octeon/octeon3-ethernet.c
@@ -64,6 +64,7 @@ struct octeon3_ethernet {
 	int rx_buf_count;
 	int rx_grp;
 	int rx_irq;
+	cpumask_t rx_affinity_hint;
 	int tx_complete_grp;
 	atomic64_t tx_backlog;
 	spinlock_t stat_lock;
@@ -85,6 +86,7 @@ static DEFINE_MUTEX(octeon3_eth_init_mutex);
 
 struct octeon3_ethernet_node {
 	bool init_done;
+	int next_cpu_irq_affinity;
 	int numa_node;
 	int pki_packet_pool;
 	int sso_pko_pool;
@@ -92,6 +94,7 @@ struct octeon3_ethernet_node {
 	int pko_aura;
 	int tx_complete_grp;
 	int tx_irq;
+	cpumask_t tx_affinity_hint;
 	struct task_struct *tx_complete_task;
 	struct kthread_worker tx_complete_worker;
 	struct kthread_work tx_complete_work;
@@ -109,6 +112,23 @@ MODULE_PARM_DESC(packet_buffer_size, "Size of each RX packet buffer.");
 static struct octeon3_ethernet_node octeon3_eth_node[OCTEON3_ETH_MAX_NUMA_NODES];
 static struct kmem_cache *octeon3_eth_sso_pko_cache;
 
+static void octeon3_eth_gen_affinity(int node, cpumask_t *mask)
+{
+	int cpu;
+
+	do {
+		cpu = cpumask_next(octeon3_eth_node[node].next_cpu_irq_affinity,
+				   cpu_online_mask);
+		octeon3_eth_node[node].next_cpu_irq_affinity++;
+		if (cpu >= nr_cpu_ids) {
+			octeon3_eth_node[node].next_cpu_irq_affinity = -1;
+			continue;
+		}
+	} while (false);
+	cpumask_clear(mask);
+	cpumask_set_cpu(cpu, mask);
+}
+
 static int octeon3_eth_fpa_pool_init(unsigned int node, unsigned int pool, int num_ptrs)
 {
 	void *pool_stack;
@@ -381,6 +401,8 @@ static int octeon3_eth_global_init(unsigned int node)
 	rv = request_irq(nd->tx_irq, octeon3_eth_tx_handler, 0, "oct3_eth_tx_done", nd);
 	if (rv)
 		goto done;
+	octeon3_eth_gen_affinity(node, &nd->tx_affinity_hint);
+	irq_set_affinity_hint(nd->tx_irq, &nd->tx_affinity_hint);
 
 	octeon3_eth_sso_irq_set_armed(node, nd->tx_complete_grp, true);
 
@@ -737,6 +759,9 @@ static int octeon3_eth_ndo_open(struct net_device *netdev)
 	if (r)
 		goto err;
 
+	octeon3_eth_gen_affinity(priv->numa_node, &priv->rx_affinity_hint);
+	irq_set_affinity_hint(priv->rx_irq, &priv->rx_affinity_hint);
+
 	octeon3_eth_replentish_rx(priv, priv->rx_buf_count);
 
 	r = bgx_port_enable(netdev);
@@ -765,7 +790,9 @@ static int octeon3_eth_ndo_stop(struct net_device *netdev)
 
 	octeon3_eth_sso_irq_set_armed(priv->numa_node, priv->rx_grp, false);
 
+	irq_set_affinity_hint(priv->rx_irq, NULL);
 	free_irq(priv->rx_irq, netdev);
+	priv->rx_irq = 0;
 
 	msleep(20);
 
-- 
1.8.2.1

