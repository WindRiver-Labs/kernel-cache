From 9a152ff67f0ac14aa2bcf31bbd6f83b86520e827 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Fri, 13 Feb 2015 11:44:10 +0530
Subject: [PATCH 001/132] Replace OCTEON_IS_OCTEON2() and OCTEON_IS_OCTEON3()
 with appropriate current_cpu_type().

Commit 82c2d9ee96497e6a9cb41bf12173f3c0cc044abe from
git://git.yoctoproject.org/linux-yocto-3.14

Fix reading LMCX_DLL_CTL2 CSR fields.
Read LMCX_DLL_CTL2<quad_dll_ena> from the correct struct.

Fix RML_TO error in octeon-lmc.
Use correct CSR for disabling ECC errors interrupts for Octeon II.
Register octeon-lmc only if DDR controller is present.
Check for LMCX_DLL_CTL2[QUAD_DLL_ENA]
which is set correctly for all OcteonII models.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
Signed-off-by: Leonid Rosenboim <lrosenboim@caviumnetworks.com>
Signed-off-by: Abhishek Paliwal <abhishek.paliwal@aricent.com>
[Original patch taken from OCTEON-SDK 3.1.1-544.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/cavium-octeon/octeon-platform.c |  1 +
 arch/mips/cavium-octeon/setup.c           |  6 +++++-
 arch/mips/include/asm/octeon/octeon.h     | 14 +++++++++++++-
 drivers/edac/octeon_edac-lmc.c            | 16 +++++++++++++---
 4 files changed, 32 insertions(+), 5 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-platform.c b/arch/mips/cavium-octeon/octeon-platform.c
index d113c8d..251e9fa 100644
--- a/arch/mips/cavium-octeon/octeon-platform.c
+++ b/arch/mips/cavium-octeon/octeon-platform.c
@@ -943,6 +943,7 @@ end_led:
 	alias_prop = fdt_getprop(initial_boot_params, aliases,
 				 "usbn", NULL);
 	if (alias_prop) {
+
 		int usbn = fdt_path_offset(initial_boot_params, alias_prop);
 
 		if (usbn >= 0 && (current_cpu_type() == CPU_CAVIUM_OCTEON2 ||
diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 89a6284..45a68b9 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -395,7 +395,7 @@ void octeon_check_cpu_bist(void)
 		pr_err("Core%d BIST Failure: COP0_CVM_MEM_CTL = 0x%llx\n",
 		       coreid, bist_val);
 
-	write_octeon_c0_dcacheerr(0);
+		write_octeon_c0_dcacheerr(0);
 }
 
 /**
@@ -587,6 +587,10 @@ void octeon_user_io_init(void)
 	 * mode. */
 	cvmmemctl.s.cvmsegenau = 0;
 
+	/* Enable TLB parity error reporting on OCTEON II */
+	if (OCTEON_IS_OCTEON2())
+		cvmmemctl.s.tlbperrena = 1;
+
 	write_c0_cvmmemctl(cvmmemctl.u64);
 
 	/* Setup of CVMSEG is done in kernel-entry-init.h */
diff --git a/arch/mips/include/asm/octeon/octeon.h b/arch/mips/include/asm/octeon/octeon.h
index de9f74e..60a0a7c 100644
--- a/arch/mips/include/asm/octeon/octeon.h
+++ b/arch/mips/include/asm/octeon/octeon.h
@@ -179,7 +179,19 @@ union octeon_cvmemctl {
 		/* RO 1 = BIST fail, 0 = BIST pass */
 		__BITFIELD_FIELD(uint64_t wbfbist:1,
 		/* Reserved */
-		__BITFIELD_FIELD(uint64_t reserved:17,
+		__BITFIELD_FIELD(uint64_t reserved:8,
+		/* When set, TLB parity errors can occur. */
+		uint64_t tlbperrena:1;
+		/* OCTEON II - When set, CVMSET LM parity errors are enabled. */
+		uint64_t lmemperrena:1;
+		/* OCTEON II - If set, NUDGE/WRITEBACK_INVALIDATE,
+		 * NUDGE_WB, EVICT_SOON, LC, CONT_WRITE_BACK,
+		 * PREPARE_FOR_STORE and PREPARE_FOR_STORE_THROUGH
+		 * prefetch operations become NOPs. */
+		uint64_t disstpref:1;
+		/* OCTEON II - If set, NORMAL and NOTL2 prefetch
+		 * operations become NOPs. */
+		uint64_t disldpref:1;
 		/* OCTEON II - TLB replacement policy: 0 = bitmask LRU; 1 = NLU.
 		 * This field selects between the TLB replacement policies:
 		 * bitmask LRU or NLU. Bitmask LRU maintains a mask of
diff --git a/drivers/edac/octeon_edac-lmc.c b/drivers/edac/octeon_edac-lmc.c
index cda6dab..821462e 100644
--- a/drivers/edac/octeon_edac-lmc.c
+++ b/drivers/edac/octeon_edac-lmc.c
@@ -268,8 +268,18 @@ static int octeon_lmc_edac_probe(struct platform_device *pdev)
 		/* OCTEON II */
 		union cvmx_lmcx_int_en en;
 		union cvmx_lmcx_config config;
+		union cvmx_lmcx_dll_ctl2 ctl2;
+
+		/* Check if LMC controller is enabled. */
+		ctl2.u64 = cvmx_read_csr(CVMX_LMCX_DLL_CTL2(mc));
+		if ((OCTEON_IS_OCTEON3() && ctl2.cn70xx.quad_dll_ena == 0)
+		    || (OCTEON_IS_OCTEON2()
+			&& ctl2.cn63xx.quad_dll_ena == 0)) {
+			dev_info(&pdev->dev, "Disabled (LMC not present)\n");
+			return 0;
+		}
 
-		config.u64 = cvmx_read_csr(CVMX_LMCX_CONFIG(0));
+		config.u64 = cvmx_read_csr(CVMX_LMCX_CONFIG(mc));
 		if (!config.s.ecc_ena) {
 			dev_info(&pdev->dev, "Disabled (ECC not enabled)\n");
 			return 0;
@@ -292,10 +302,10 @@ static int octeon_lmc_edac_probe(struct platform_device *pdev)
 			return -ENXIO;
 		}
 
-		en.u64 = cvmx_read_csr(CVMX_LMCX_MEM_CFG0(mc));
+		en.u64 = cvmx_read_csr(CVMX_LMCX_INT_EN(mc));
 		en.s.intr_ded_ena = 0;	/* We poll */
 		en.s.intr_sec_ena = 0;
-		cvmx_write_csr(CVMX_LMCX_MEM_CFG0(mc), en.u64);
+		cvmx_write_csr(CVMX_LMCX_INT_EN(mc), en.u64);
 	}
 	platform_set_drvdata(pdev, mci);
 
-- 
1.9.1

