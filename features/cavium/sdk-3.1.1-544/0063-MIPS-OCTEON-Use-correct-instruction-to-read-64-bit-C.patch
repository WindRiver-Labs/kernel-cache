From 13f5de748e5f6f0c86e46e7e393076199fc4ac03 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 13 Feb 2015 14:14:16 +0530
Subject: [PATCH 063/148] MIPS: OCTEON: Use correct instruction to read 64-bit
 COP0 register

Commit 053386a49b4cae742c728423c62d1688c8cc7fdb from
git://git.yoctoproject.org/linux-yocto-3.14

Use dmfc0/dmtc0 instructions for reading CvmMemCtl COP0 register,
its a 64-bit wide.

Add Octeon Specific changes.
MIPS: Octeon: Fast TLS support in octeon_switch.S
MIPS: OCTEON: Enable use of FPU.
MIPS: OCTEON: Save/Restore wider multiply registers in OCTEON III CPUs
MIPS: OCTEON: Fix FP context save.
MIPS: OCTEON: Save and restore CP2 SHA3 state
MIPS: OCTEON: Use correct instruction to read 64-bit COP0 register
MIPS: OCTEON: Fix Automatic provisioning CVMSEG space.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Leonid Rosenboim <lrosenboim@caviumnetworks.com>
Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
Signed-off-by: Tsvetan Erenditsov <terenditsov@caviumnetworks.com>
Signed-off-by: Abhishek Paliwal <abhishek.paliwal@aricent.com>
---
 arch/mips/kernel/octeon_switch.S | 234 +++++++++++++++++++--------------------
 1 file changed, 114 insertions(+), 120 deletions(-)

diff --git a/arch/mips/kernel/octeon_switch.S b/arch/mips/kernel/octeon_switch.S
index f23d098..b058d4b 100644
--- a/arch/mips/kernel/octeon_switch.S
+++ b/arch/mips/kernel/octeon_switch.S
@@ -10,6 +10,7 @@
  * Copyright (C) 2000 MIPS Technologies, Inc.
  *    written by Carsten Langgaard, carstenl@mips.com
  */
+
 #define USE_ALTERNATE_RESUME_IMPL 1
 	.set push
 	.set arch=mips64r2
@@ -26,65 +27,60 @@
 	LONG_S	t1, THREAD_STATUS(a0)
 	cpu_save_nonscratch a0
 	LONG_S	ra, THREAD_REG31(a0)
+
 	/*
-	* check if we need to save FPU registers
-	*/
-	PTR_L t3, TASK_THREAD_INFO(a0)
-	LONG_L t0, TI_FLAGS(t3)
-	li t1, _TIF_USEDFPU
-	and t2, t0, t1
-	beqz t2, 1f
-	nor t1, zero, t1
-
-	and t0, t0, t1
-	LONG_S t0, TI_FLAGS(t3)
+	 * check if we need to save FPU registers
+	 */
+	.set push
+	.set noreorder
+	beqz	a3, 1f
+	 PTR_L	t3, TASK_THREAD_INFO(a0)
+	.set pop
 
 	/*
-	* clear saved user stack CU1 bit
-	*/
-	LONG_L t0, ST_OFF(t3)
-	li t1, ~ST0_CU1
-	and t0, t0, t1
-	LONG_S t0, ST_OFF(t3)
+	 * clear saved user stack CU1 bit
+	 */
+	LONG_L	t0, ST_OFF(t3)
+	li	t1, ~ST0_CU1
+	and	t0, t0, t1
+	LONG_S	t0, ST_OFF(t3)
 
 	.set push
 	.set arch=mips64r2
-	fpu_save_double a0 t0 t1	# c0_status passed in t0
-					# clobbers t1
-
+	fpu_save_double a0 t0 t1		# c0_status passed in t0
+						# clobbers t1
 	.set pop
 1:
 
 	/* check if we need to save COP2 registers */
-	PTR_L t2, TASK_THREAD_INFO(a0)
-	LONG_L t0, ST_OFF(t2)
-	bbit0 t0, 30, 1f
+	LONG_L	t0, ST_OFF(t3)
+	bbit0	t0, 30, 1f
 
 	/* Disable COP2 in the stored process state */
-	li t1, ST0_CU2
-	xor t0, t1
-	LONG_S t0, ST_OFF(t2)
+	li	t1, ST0_CU2
+	xor	t0, t1
+	LONG_S	t0, ST_OFF(t3)
 
 	/* Enable COP2 so we can save it */
-	mfc0 t0, CP0_STATUS
-	or t0, t1
-	mtc0 t0, CP0_STATUS
+	mfc0	t0, CP0_STATUS
+	or	t0, t1
+	mtc0	t0, CP0_STATUS
 
 	/* Save COP2 */
-	daddu a0, THREAD_CP2
+	daddu	a0, THREAD_CP2
 	jal octeon_cop2_save
-	dsubu a0, THREAD_CP2
+	dsubu	a0, THREAD_CP2
 
 	/* Disable COP2 now that we are done */
-	mfc0 t0, CP0_STATUS
-	li t1, ST0_CU2
-	xor t0, t1
-	mtc0 t0, CP0_STATUS
+	mfc0	t0, CP0_STATUS
+	li	t1, ST0_CU2
+	xor	t0, t1
+	mtc0	t0, CP0_STATUS
 
 1:
 #if CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE > 0
 	/* Check if we need to store CVMSEG state */
-	mfc0	t0, $11,7	/* CvmMemCtl */
+	dmfc0	t0, $11,7	/* CvmMemCtl */
 	bbit0	t0, 6, 3f	/* Is user access enabled? */
 
 	/* Store the CVMSEG state */
@@ -108,9 +104,9 @@
 	.set reorder
 
 	/* Disable access to CVMSEG */
-	mfc0	t0, $11,7	/* CvmMemCtl */
+	dmfc0	t0, $11,7	/* CvmMemCtl */
 	xori	t0, t0, 0x40	/* Bit 6 is CVMSEG user enable */
-	mtc0	t0, $11,7	/* CvmMemCtl */
+	dmtc0	t0, $11,7	/* CvmMemCtl */
 #endif
 3:
 
@@ -127,15 +123,17 @@
 	move	$28, a2
 	cpu_restore_nonscratch a1
 
-	PTR_ADDU t0, $28, _THREAD_SIZE - 32
+	PTR_ADDU	t0, $28, _THREAD_SIZE - 32
 	set_saved_sp	t0, t1, t2
+
 #ifdef CONFIG_FAST_ACCESS_TO_THREAD_POINTER
 	/* We need to put the thread pointer in CVMMEM immediately. The
 		kernel will use this value during TLB exceptions even
 		though userspace hasn't accessed CVMMEM */
-	LONG_L  t1, TI_TP_VALUE($28)
-	LONG_S  t1, FAST_ACCESS_THREAD_OFFSET($0)
+	LONG_L	t1, TI_TP_VALUE($28)
+	LONG_S	t1, FAST_ACCESS_THREAD_OFFSET($0)
 #endif
+
 	mfc0	t1, CP0_STATUS		/* Do we really need this? */
 	li	a3, 0xff01
 	and	t1, a3
@@ -166,7 +164,7 @@
 	sd	t1, OCTEON_CP2_CRC_LENGTH(a0)
 	/* Skip next instructions if CvmCtl[NODFA_CP2] set */
 	bbit1	t9, 28, 1f
-	sd     t2, OCTEON_CP2_CRC_POLY(a0)
+	 sd	t2, OCTEON_CP2_CRC_POLY(a0)
 
 	/* Save the LLM state */
 	dmfc2	t0, 0x0402
@@ -174,7 +172,7 @@
 	sd	t0, OCTEON_CP2_LLM_DAT(a0)
 
 1:	bbit1	t9, 26, 3f	/* done if CvmCtl[NOCRYPTO] set */
-	sd     t1, OCTEON_CP2_LLM_DAT+8(a0)
+	 sd	t1, OCTEON_CP2_LLM_DAT+8(a0)
 
 	/* Save the COP2 crypto state */
 	/* this part is mostly common to both pass 1 and later revisions */
@@ -210,15 +208,15 @@
 	li	v1, 0x000d0000	/* This is the processor ID of Octeon Pass1 */
 	sd	t1, OCTEON_CP2_AES_RESULT(a0)
 	/* Skip to the Pass1 version of the remainder of the COP2 state */
-	beq     v0, v1, 2f
-	sd     t2, OCTEON_CP2_AES_RESULT+8(a0)
+	beq	v0, v1, 2f
+	 sd	t2, OCTEON_CP2_AES_RESULT+8(a0)
 
 	/* the non-pass1 state when !CvmCtl[NOCRYPTO] */
 	dmfc2	t1, 0x0240
 	dmfc2	t2, 0x0241
-	ori     v1, v1, 0x9500 /* lowest OCTEON III PrId*/
+	ori	v1, v1, 0x9500 /* lowest OCTEON III PrId*/
 	dmfc2	t3, 0x0242
-	subu    v1, v0, v1 /* prid - lowest OCTEON III PrId */
+	subu	v1, v0, v1 /* prid - lowest OCTEON III PrId */
 	dmfc2	t0, 0x0243
 	sd	t1, OCTEON_CP2_HSH_DATW(a0)
 	dmfc2	t1, 0x0244
@@ -271,16 +269,16 @@
 	sd	t1, OCTEON_CP2_GFM_MULT+8(a0)
 	sd	t2, OCTEON_CP2_GFM_POLY(a0)
 	sd	t3, OCTEON_CP2_GFM_RESULT(a0)
-	bltz    v1, 4f
-	sd     t0, OCTEON_CP2_GFM_RESULT+8(a0)
+	bltz	v1, 4f
+	 sd	t0, OCTEON_CP2_GFM_RESULT+8(a0)
 	/* OCTEON III things*/
-	dmfc2   t0, 0x024F
-	dmfc2   t1, 0x0050
-	sd      t0, OCTEON_CP2_SHA3(a0)
-	sd      t1, OCTEON_CP2_SHA3+8(a0)
+	dmfc2	t0, 0x024F
+	dmfc2	t1, 0x0050
+	sd	t0, OCTEON_CP2_SHA3(a0)
+	sd	t1, OCTEON_CP2_SHA3+8(a0)
 4:
 	jr	ra
-	nop
+	 nop
 
 2:	/* pass 1 special stuff when !CvmCtl[NOCRYPTO] */
 	dmfc2	t3, 0x0040
@@ -306,7 +304,7 @@
 
 3:	/* pass 1 or CvmCtl[NOCRYPTO] set */
 	jr	ra
-	nop
+	 nop
 	END(octeon_cop2_save)
 	.set pop
 
@@ -380,7 +378,6 @@
 
 	/* this code is specific for pass 1 */
 	ld	t0, OCTEON_CP2_HSH_DATW(a0)
-	ori     v0, v0, 0x9500 /* lowest OCTEON III PrId*/
 	ld	t1, OCTEON_CP2_HSH_DATW+8(a0)
 	ld	t2, OCTEON_CP2_HSH_DATW+16(a0)
 	dmtc2	t0, 0x0040
@@ -404,6 +401,7 @@
 
 3:	/* this is post-pass1 code */
 	ld	t2, OCTEON_CP2_HSH_DATW(a0)
+	ori	v0, v0, 0x9500 /* lowest OCTEON III PrId*/
 	ld	t0, OCTEON_CP2_HSH_DATW+8(a0)
 	ld	t1, OCTEON_CP2_HSH_DATW+16(a0)
 	dmtc2	t2, 0x0240
@@ -457,17 +455,15 @@
 	dmtc2	t2, 0x0259
 	ld	t2, OCTEON_CP2_GFM_RESULT+8(a0)
 	dmtc2	t0, 0x025E
-	subu    v0, t3, v0 /* prid - lowest OCTEON III PrId */
+	subu	v0, t3, v0 /* prid - lowest OCTEON III PrId */
 	dmtc2	t1, 0x025A
-
-	bltz    v0, done_restore
-	dmtc2  t2, 0x025B
+	bltz	v0, done_restore
+	 dmtc2	t2, 0x025B
 	/* OCTEON III things*/
-	ld      t0, OCTEON_CP2_SHA3(a0)
-	ld      t1, OCTEON_CP2_SHA3+8(a0)
-	dmtc2   t0, 0x0051
-	dmtc2   t1, 0x0050
-
+	ld	t0, OCTEON_CP2_SHA3(a0)
+	ld	t1, OCTEON_CP2_SHA3+8(a0)
+	dmtc2	t0, 0x0051
+	dmtc2	t1, 0x0050
 done_restore:
 	jr	ra
 	 nop
@@ -480,10 +476,9 @@ done_restore:
  *
  * NOTE: This is called in SAVE_TEMP in stackframe.h. It can
  *       safely modify v1,k0, k1,$10-$15, and $24.  It will
- *      be overwritten with a processor specific version of the code.
-
+ *	 be overwritten with a processor specific version of the code.
  */
-	.p2align	7
+	.p2align 7
 	.set push
 	.set noreorder
 	LEAF(octeon_mult_save)
@@ -516,32 +511,32 @@ octeon_mult_save2_end:
 
 	LEAF(octeon_mult_save3)
 	/* Save the multiplier state OCTEON III */
-	v3mulu  $10, $0, $0             /* read P0 */
-	v3mulu  $11, $0, $0             /* read P1 */
-	v3mulu  $12, $0, $0             /* read P2 */
-	sd      $10, PT_MTP+(0*8)(sp)   /* store P0 */
-	v3mulu  $10, $0, $0             /* read P3 */
-	sd      $11, PT_MTP+(1*8)(sp)   /*  store P1 */
-	v3mulu  $11, $0, $0             /* read P4 */
-	sd      $12, PT_MTP+(2*8)(sp)   /* store P2 */
-	ori     $13, $0, 1
-	v3mulu  $12, $0, $0             /* read P5 */
-	sd      $10, PT_MTP+(3*8)(sp)   /* store P3 */
-	v3mulu  $13, $13, $0            /* P4-P0 = MPL5-MPL1, $13 = MPL0 */
-	sd      $11, PT_MTP+(4*8)(sp)   /* store P4 */
-	v3mulu  $10, $0, $0             /* read MPL1 */
-	sd      $12, PT_MTP+(5*8)(sp)   /* store P5 */
-	v3mulu  $11, $0, $0             /* read MPL2 */
-	sd      $13, PT_MPL+(0*8)(sp)   /* store MPL0 */
-	v3mulu  $12, $0, $0             /* read MPL3 */
-	sd      $10, PT_MPL+(1*8)(sp)   /* store MPL1 */
-	v3mulu  $10, $0, $0             /* read MPL4 */
-	sd      $11, PT_MPL+(2*8)(sp)   /* store MPL2 */
-	v3mulu  $11, $0, $0             /* read MPL5 */
-	sd      $12, PT_MPL+(3*8)(sp)   /* store MPL3 */
-	sd      $10, PT_MPL+(4*8)(sp)   /* store MPL4 */
+	v3mulu	$10, $0, $0		/* read P0 */
+	v3mulu	$11, $0, $0		/* read P1 */
+	v3mulu	$12, $0, $0		/* read P2 */
+	sd	$10, PT_MTP+(0*8)(sp)	/* store P0 */
+	v3mulu	$10, $0, $0		/* read P3 */
+	sd	$11, PT_MTP+(1*8)(sp)	/*  store P1 */
+	v3mulu	$11, $0, $0		/* read P4 */
+	sd	$12, PT_MTP+(2*8)(sp)	/* store P2 */
+	ori	$13, $0, 1
+	v3mulu	$12, $0, $0		/* read P5 */
+	sd	$10, PT_MTP+(3*8)(sp)	/* store P3 */
+	v3mulu	$13, $13, $0		/* P4-P0 = MPL5-MPL1, $13 = MPL0 */
+	sd	$11, PT_MTP+(4*8)(sp)	/* store P4 */
+	v3mulu	$10, $0, $0		/* read MPL1 */
+	sd	$12, PT_MTP+(5*8)(sp)	/* store P5 */
+	v3mulu	$11, $0, $0		/* read MPL2 */
+	sd	$13, PT_MPL+(0*8)(sp)	/* store MPL0 */
+	v3mulu	$12, $0, $0		/* read MPL3 */
+	sd	$10, PT_MPL+(1*8)(sp)	/* store MPL1 */
+	v3mulu	$10, $0, $0		/* read MPL4 */
+	sd	$11, PT_MPL+(2*8)(sp)	/* store MPL2 */
+	v3mulu	$11, $0, $0		/* read MPL5 */
+	sd	$12, PT_MPL+(3*8)(sp)	/* store MPL3 */
+	sd	$10, PT_MPL+(4*8)(sp)	/* store MPL4 */
 	jr	ra
-	sd     $11, PT_MPL+(5*8)(sp)   /* store MPL5 */
+	 sd	$11, PT_MPL+(5*8)(sp)	/* store MPL5 */
 octeon_mult_save3_end:
 	EXPORT(octeon_mult_save3_end)
 	END(octeon_mult_save3)
@@ -553,12 +548,12 @@ octeon_mult_save3_end:
  *
  * NOTE: This is called in RESTORE_TEMP in stackframe.h.
  */
-	.p2align	7
+	.p2align 7
 	.set push
 	.set noreorder
 	.set arch=octeon3
 	LEAF(octeon_mult_restore)
-	jr      ra
+	jr	ra
 	 nop
 	.space 30 * 4, 0
 octeon_mult_restore_end:
@@ -566,45 +561,44 @@ octeon_mult_restore_end:
 	END(octeon_mult_restore)
 
 	LEAF(octeon_mult_restore2)
-	ld      v0, PT_MPL(sp)          /* MPL0 */
-	ld      v1, PT_MPL+8(sp)        /* MPL1 */
-	ld      k0, PT_MPL+16(sp)       /* MPL2 */
-
+	ld	v0, PT_MPL(sp)        	/* MPL0 */
+	ld	v1, PT_MPL+8(sp)      	/* MPL1 */
+	ld	k0, PT_MPL+16(sp)     	/* MPL2 */
 	/* Restore the multiplier state */
-	ld	k1, PT_MTP+16(sp)	/* P2 */
+	ld	k1, PT_MTP+16(sp)     	/* P2 */
 	mtm0	v0			/* MPL0 */
 	ld	v0, PT_MTP+8(sp)	/* P1 */
 	mtm1	v1			/* MPL1 */
-	ld	v1, PT_MTP(sp)		/* P0 */
+	ld	v1, PT_MTP(sp)   	/* P0 */
 	mtm2	k0			/* MPL2 */
 	mtp2	k1			/* P2 */
 	mtp1	v0			/* P1 */
 	jr	ra
-	mtp0   v1                      /* P0 */
+	 mtp0	v1			/* P0 */
 octeon_mult_restore2_end:
 	EXPORT(octeon_mult_restore2_end)
 	END(octeon_mult_restore2)
 
 	LEAF(octeon_mult_restore3)
-	ld      $12, PT_MPL+(0*8)(sp)   /* read MPL0 */
-	ld      $13, PT_MPL+(3*8)(sp)   /* read MPL3 */
-	ld      $10, PT_MPL+(1*8)(sp)   /* read MPL1 */
-	ld      $11, PT_MPL+(4*8)(sp)   /* read MPL4 */
-	mtm0    $12, $13                /* restore MPL0 and MPL3 */
-	ld      $12, PT_MPL+(2*8)(sp)   /* read MPL2 */
-	mtm1    $10, $11                /* restore MPL1 and MPL4 */
-	ld      $13, PT_MPL+(5*8)(sp)   /* read MPL5 */
-	ld      $10, PT_MTP+(0*8)(sp)   /* read P0 */
-	ld      $11, PT_MTP+(3*8)(sp)   /* read P3 */
-	mtm2    $12, $13                /* restore MPL2 and MPL5 */
-	ld      $12, PT_MTP+(1*8)(sp)   /* read P1 */
-	mtp0    $10, $11                /* restore P0 and P3 */
-	ld      $13, PT_MTP+(4*8)(sp)   /* read P4 */
-	ld      $10, PT_MTP+(2*8)(sp)   /* read P2 */
-	ld      $11, PT_MTP+(5*8)(sp)   /* read P5 */
-	mtp1    $12, $13                /* restore P1 and P4 */
+	ld	$12, PT_MPL+(0*8)(sp)	/* read MPL0 */
+	ld	$13, PT_MPL+(3*8)(sp)	/* read MPL3 */
+	ld	$10, PT_MPL+(1*8)(sp)	/* read MPL1 */
+	ld	$11, PT_MPL+(4*8)(sp)	/* read MPL4 */
+	mtm0	$12, $13		/* restore MPL0 and MPL3 */
+	ld	$12, PT_MPL+(2*8)(sp)	/* read MPL2 */
+	mtm1	$10, $11		/* restore MPL1 and MPL4 */
+	ld	$13, PT_MPL+(5*8)(sp)	/* read MPL5 */
+	ld	$10, PT_MTP+(0*8)(sp)	/* read P0 */
+	ld	$11, PT_MTP+(3*8)(sp)	/* read P3 */
+	mtm2	$12, $13		/* restore MPL2 and MPL5 */
+	ld	$12, PT_MTP+(1*8)(sp)	/* read P1 */
+	mtp0	$10, $11		/* restore P0 and P3 */
+	ld	$13, PT_MTP+(4*8)(sp)	/* read P4 */
+	ld	$10, PT_MTP+(2*8)(sp)	/* read P2 */
+	ld	$11, PT_MTP+(5*8)(sp)	/* read P5 */
+	mtp1	$12, $13		/* restore P1 and P4 */
 	jr	ra
-	mtp2  $10, $11                /* restore P2 and P5 */
+	  mtp2	$10, $11		/* restore P2 and P5 */
 octeon_mult_restore3_end:
 	EXPORT(octeon_mult_restore3_end)
 	END(octeon_mult_restore3)
-- 
1.8.2.1

