From 087bf1e1841be3b6f7425f4859a967033720580f Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 13 Feb 2015 15:11:59 +0530
Subject: [PATCH 107/148] net: phy: add qca833x phy-headed-switch

Commit e6085a82af70ea67e0b033f27c9e9ff6543b1c9d from
git://git.yoctoproject.org/linux-yocto-3.14

Forked from at803x driver, this handles qca8334/8337 N-port switches
which present a PHY interface.

To kernel, it is just seen as single PHY, but details of internals
can be accessed by C45-like (but different) protocol with 20-bit address space.
Apart from a potted setup sequence, no attempt is made to expose the internals
of port-state/routing/filtering/NAT/etc visible.

PHY link-state (up/down) is presented as 1Gb/full link-up if any of the
outward-facing switch ports is up.

Like the at803x gotcha addressed in
    commit 13a56b4493259e6b020dbcf6a76b2bef479f3edf
    "net: phy: at803x: Add support for hardware reset"
these PHYs can hang when link drops, so ethtool_ops->reset() is used
to force PCS cycling to unhang phy.
This works where the attached netdev has this function implemented,
as with octeon-ethernet.
Future update to both this driver and at803x should allow both methods to
be tried -- a gpio if registered in FDT, or the ethtool hook

net: phy: qca833x does not need MDIO_BUS_MUX

net: phy: qca833x: split _init & unhang-time _re_init
simplify code, split _init() into one-time _init() and a _re_init()
called whenever a link down->up transition requires unhang
Add MODULE_LICENSE to phy/qca833x.c

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Peter Swain <peter.swain@cavium.com>
Signed-off-by: Abhishek Paliwal <abhishek.paliwal@aricent.com>
---
 drivers/net/phy/Kconfig   |  11 +
 drivers/net/phy/Makefile  |   1 +
 drivers/net/phy/qca833x.c | 456 +++++++++++++++++++++++++++++++++++++
 drivers/net/phy/qca833x.h | 568 ++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 1036 insertions(+)
 create mode 100644 drivers/net/phy/qca833x.c
 create mode 100644 drivers/net/phy/qca833x.h

diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index fdeb7fd..696f494 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -124,6 +124,17 @@ config MICREL_PHY
 	---help---
 	  Supports the KSZ9021, VSC8201, KS8001 PHYs.
 
+config QCA833X_PHY
+	tristate "Drivers for Qualcomm/Atheros QCA833X PHYs"
+	depends on CAVIUM_OCTEON_SOC
+	---help---
+	  Presents a Qualcomm/Atheros QCA8334/5/6/7 multi-port PHY as a
+	  single SGMII device. Does not enable advanced features, such as
+	  packet header reporting ingress port / steering egress port,
+	  or NAT.
+	  Link-state transitions require PSC cycling to undo hang,
+	  which is only implemented for CAVIUM_OCTEON_SOC.
+
 config FIXED_PHY
 	bool "Driver for MDIO Bus/PHY emulation with fixed speed/link PHYs"
 	depends on PHYLIB=y
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index 241c4aa..37bc583 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -33,5 +33,6 @@ obj-$(CONFIG_AMD_PHY)		+= amd.o
 obj-$(CONFIG_MDIO_BUS_MUX)	+= mdio-mux.o
 obj-$(CONFIG_MDIO_BUS_MUX_GPIO)	+= mdio-mux-gpio.o
 obj-$(CONFIG_MDIO_BUS_MUX_MMIOREG) += mdio-mux-mmioreg.o
+obj-$(CONFIG_QCA833X_PHY)       += qca833x.o
 obj-$(CONFIG_MDIO_SUN4I)	+= mdio-sun4i.o
 obj-$(CONFIG_MDIO_MOXART)	+= mdio-moxart.o
diff --git a/drivers/net/phy/qca833x.c b/drivers/net/phy/qca833x.c
new file mode 100644
index 0000000..64ab296
--- /dev/null
+++ b/drivers/net/phy/qca833x.c
@@ -0,0 +1,456 @@
+/*
+ * drivers/net/phy/qca833x.c
+ *
+ * Driver for Qualcomm/Atheros qca8334/8337 PHYs
+ *
+ * adapted from Matus Ujhelyi's at803x driver by Peter Swain <pswain@cavium.com>,
+ * Aaron Williams & others.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/phy.h>
+#include <linux/module.h>
+#include <linux/string.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/of_device.h>
+#include <linux/of_platform.h>
+
+#include "qca833x.h"
+
+/* just one private state (number of ports), so squeeze it into phydev->priv */
+#define qports(phydev) (*(int*)&(phydev)->priv)
+
+/* compound read/write must hold mdio mutex */
+#define qphy_muget(phydev) mutex_lock(&(phydev)->bus->mdio_lock)
+#define qphy_muput(phydev) mutex_unlock(&(phydev)->bus->mdio_lock)
+
+/* read/write given mdio addrs, caller holds mutex */
+static inline int __phy_read_addr(struct phy_device *phydev, u32 addr,
+				  u32 regnum)
+{
+	return phydev->bus->read(phydev->bus, addr, regnum);
+}
+
+static inline int __phy_write_addr(struct phy_device *phydev, u32 addr,
+				   u32 regnum, u16 val)
+{
+	return phydev->bus->write(phydev->bus, addr, regnum, val);
+}
+
+/*
+ * read/write 32bit values with qca833x-specific protocol
+ * this is conceptually like the Clause-45 2-part access, but different,
+ * with 32bit values and a 20-bit address-space.
+ * mdio mutex held across transactions to avoid interleave.
+ */
+static uint32_t __used qphy_read32(struct phy_device *phydev, uint32_t reg_addr)
+{
+	uint32_t reg_word_addr;
+	uint32_t phy_addr, tmp_val, reg_val;
+	uint16_t phy_val;
+	uint8_t phy_reg;
+
+	/* change reg_addr to 16-bit word address, 32-bit aligned */
+	reg_word_addr = (reg_addr & 0xfffffffc) >> 1;
+
+	/* configure register high address */
+	phy_val = (uint16_t) ((reg_word_addr >> 8) & 0x1ff);	/* bit16-8 of reg address */
+	qphy_muget(phydev);
+	__phy_write_addr(phydev, 0x18, 0, phy_val);
+
+	/* For some registers such as MIBs, since it is read/clear, we should */
+	/* read the lower 16-bit register then the higher one */
+
+	/* read register in lower address */
+	phy_addr = 0x10 | ((reg_word_addr >> 5) & 0x7);	/* bit7-5 of reg address */
+	phy_reg = (uint8_t) (reg_word_addr & 0x1f);	/* bit4-0 of reg address */
+	reg_val = (uint32_t) __phy_read_addr(phydev, phy_addr, phy_reg);
+
+	/* read register in higher address */
+	reg_word_addr++;
+	phy_addr = 0x10 | ((reg_word_addr >> 5) & 0x7);	/* bit7-5 of reg address */
+	phy_reg = (uint8_t) (reg_word_addr & 0x1f);	/* bit4-0 of reg address */
+	tmp_val = (uint32_t) __phy_read_addr(phydev, phy_addr, phy_reg);
+	reg_val |= (tmp_val << 16);
+
+	qphy_muput(phydev);
+
+	return reg_val;
+
+}
+
+static void qphy_write32(struct phy_device *phydev, uint32_t reg_addr,
+			      uint32_t reg_val)
+{
+	uint32_t reg_word_addr;
+	uint32_t phy_addr;
+	uint16_t phy_val;
+	uint8_t phy_reg;
+
+	/* change reg_addr to 16-bit word address, 32-bit aligned */
+	reg_word_addr = (reg_addr & 0xfffffffc) >> 1;
+
+	/* configure register high address */
+	phy_val = (uint16_t) ((reg_word_addr >> 8) & 0x1ff);	/* bit16-8 of reg address */
+	qphy_muget(phydev);
+	__phy_write_addr(phydev, 0x18, 0, phy_val);
+
+	/* For some registers such as ARL and VLAN, since they include BUSY bit */
+	/* in lower address, we should write the higher 16-bit register then the */
+	/* lower one */
+
+	/* read register in higher address */
+	reg_word_addr++;
+	phy_addr = 0x10 | ((reg_word_addr >> 5) & 0x7);	/* bit7-5 of reg address */
+	phy_reg = (uint8_t) (reg_word_addr & 0x1f);	/* bit4-0 of reg address */
+	phy_val = (uint16_t) ((reg_val >> 16) & 0xffff);
+	__phy_write_addr(phydev, phy_addr, phy_reg, phy_val);
+
+	/* write register in lower address */
+	reg_word_addr--;
+	phy_addr = 0x10 | ((reg_word_addr >> 5) & 0x7);	/* bit7-5 of reg address */
+	phy_reg = (uint8_t) (reg_word_addr & 0x1f);	/* bit4-0 of reg address */
+	phy_val = (uint16_t) (reg_val & 0xffff);
+	__phy_write_addr(phydev, phy_addr, phy_reg, phy_val);
+	qphy_muput(phydev);
+
+	pr_debug("%s %x := %x\n", __func__, reg_addr, reg_val);
+}
+
+
+/*
+ * mii per-port config, captured at before reset to re-impose after reset
+ * see net: phy: at803x: Add support for hardware reset (13a56b44)
+ * where at803x driver is fixed to save/restore modes over reset:
+ *   "The AT8030 will enter a FIFO error mode if a packet is transmitted while
+ *   the cable is unplugged. This hardware issue is acknowledged by the
+ *   vendor, and the only proposed solution is to conduct a hardware reset
+ *   via the external pin each time the link goes down. There is apparantly
+ *   no way to fix up the state via the register set."
+ * The qca833x also needs this, but for each of its qports(phydev) ports
+ */
+
+struct port_context {
+	u16 bmcr;
+	u16 advertise;
+	u16 control1000;
+	u16 int_enable;
+	u16 phy_spec;
+	u16 led_control;
+};
+static struct port_context port_context[7]; /* should be in phydev->priv */
+
+/* save relevant PHY registers to private copy */
+static void port_context_save(struct phy_device *phydev, int addr,
+				struct port_context *context)
+{
+	qphy_muget(phydev);
+	context->bmcr = __phy_read_addr(phydev, addr, MII_BMCR);
+	context->advertise = __phy_read_addr(phydev, addr, MII_ADVERTISE);
+	context->control1000 = __phy_read_addr(phydev, addr, MII_CTRL1000);
+	context->int_enable = __phy_read_addr(phydev, addr, S17_PHY_INT_EN_REG);
+	context->phy_spec = __phy_read_addr(phydev, addr, ATHR_PHY_SPEC_CONTROL);
+	qphy_muput(phydev);
+}
+
+/* restore relevant PHY registers from private copy */
+static void port_context_restore(struct phy_device *phydev, int addr,
+				   const struct port_context *context)
+{
+	qphy_muget(phydev);
+	__phy_write_addr(phydev, addr, MII_BMCR, context->bmcr);
+	__phy_write_addr(phydev, addr, MII_ADVERTISE, context->advertise);
+	__phy_write_addr(phydev, addr, MII_CTRL1000, context->control1000);
+	__phy_write_addr(phydev, addr, S17_PHY_INT_EN_REG, context->int_enable);
+	__phy_write_addr(phydev, addr, ATHR_PHY_SPEC_CONTROL, context->phy_spec);
+	qphy_muput(phydev);
+}
+
+/*
+ * But qca833x also has non-mii switch config (vlan/etc)
+ * This is captured at _init to re-impose after reset
+ */
+static struct qmodes {
+	u32 addr;
+	u32 val;
+	bool saved;
+} qmodes[] = {
+	{ S17_MASK_CTRL_REG },
+	{ S17_P0PAD_MODE_REG },
+	{ S17_P0STATUS_REG },
+	{ S17_P0PAD_MODE_REG },
+	{ S17_P6PAD_MODE_REG },
+	{ S17_P6STATUS_REG },
+	{ S17_GLOFW_CTRL1_REG },
+	{ S17_SGMII_CTRL_REG },
+	{ S17_P0LOOKUP_CTRL_REG },
+	{ S17_P0VLAN_CTRL0_REG },
+	{ S17_P1LOOKUP_CTRL_REG },
+	{ S17_P1VLAN_CTRL0_REG },
+	{ S17_P2LOOKUP_CTRL_REG },
+	{ S17_P2VLAN_CTRL0_REG },
+	/* rest are 8337-only? */
+	{ S17_P3LOOKUP_CTRL_REG },
+	{ S17_P3VLAN_CTRL0_REG },
+	{ S17_P4LOOKUP_CTRL_REG },
+	{ S17_P4VLAN_CTRL0_REG },
+	{ S17_P5LOOKUP_CTRL_REG },
+	{ S17_P5VLAN_CTRL0_REG },
+	{ S17_P6LOOKUP_CTRL_REG },
+	{ S17_P6VLAN_CTRL0_REG },
+	{ 0 },
+}; /* should be in phydev->priv */
+
+/* save u-boot/platform generated modes to re-impose after reset */
+static void qca833x_save_init(struct phy_device *phydev)
+{
+	struct qmodes *m;
+	for (m = qmodes; m->addr; m++) {
+		if (m->saved)
+			continue;
+		m->val = qphy_read32(phydev, m->addr);
+		m->saved = true;
+	}
+}
+
+static int qca833x_re_init(struct phy_device *phydev)
+{
+	int val;
+	u32 features;
+	struct qmodes *m;
+
+	/* Reset the PHY */
+	val = qphy_read32(phydev, S17_MASK_CTRL_REG);
+	val |= S17_MASK_CTRL_SOFT_RESET;
+	qphy_write32(phydev, S17_MASK_CTRL_REG, val);
+
+	/* wait for ready */
+	while (qphy_read32(phydev, S17_MASK_CTRL_REG)
+			& S17_MASK_CTRL_SOFT_RESET)
+		msleep(10);
+
+	/*
+	 * force initial mode on port 0: SGMII, RX clock on falling edge,
+	 * Speed 1000M, Tx MAC enable, Rx MAC enable, Tx MAC flow enable,
+	 * Rx MAC flow enable, Full duplex mode
+	 */
+	qphy_write32(phydev, S17_P0PAD_MODE_REG,
+				S17_MAC0_SGMII_EN);
+	qphy_write32(phydev, S17_P0STATUS_REG, 0x0000007e);
+
+	/* now unroll the real modes as saved earlier */
+	for (m = qmodes; m->addr; m++) {
+		if (!m->saved)
+			continue;
+		qphy_write32(phydev, m->addr, m->val);
+	}
+
+	features = SUPPORTED_TP | SUPPORTED_MII | SUPPORTED_AUI |
+	    SUPPORTED_FIBRE | SUPPORTED_BNC;
+
+	val = phy_read(phydev, MII_BMSR);
+	if (val < 0)
+		return val;
+
+	if (val & BMSR_ANEGCAPABLE)
+		features |= SUPPORTED_Autoneg;
+	if (val & BMSR_100FULL)
+		features |= SUPPORTED_100baseT_Full;
+	if (val & BMSR_100HALF)
+		features |= SUPPORTED_100baseT_Half;
+	if (val & BMSR_10FULL)
+		features |= SUPPORTED_10baseT_Full;
+	if (val & BMSR_10HALF)
+		features |= SUPPORTED_10baseT_Half;
+
+	if (val & BMSR_ESTATEN) {
+		val = phy_read(phydev, MII_ESTATUS);
+		if (val < 0)
+			return val;
+
+		if (val & ESTATUS_1000_TFULL)
+			features |= SUPPORTED_1000baseT_Full;
+		if (val & ESTATUS_1000_THALF)
+			features |= SUPPORTED_1000baseT_Half;
+	}
+
+	phydev->supported = features;
+	phydev->advertising = features;
+
+	pr_debug(KERN_ERR "%s: complete\n", __func__);
+	return 0;
+}
+
+static int qca833x_config_init(struct phy_device *phydev)
+{
+	int val;
+	static bool once;
+
+	val = phy_read(phydev, MII_PHYSID2);
+	switch (val & 0xf) {
+	case 3: /* qca8334 */
+		qports(phydev) = 2;
+		break;
+	case 6: /* qca8337 */
+		qports(phydev) = 4;
+		break;
+	default:
+		pr_err("%s: unknown PHY id %x\n", __func__,
+			val | (phy_read(phydev, MII_PHYSID1) << 16));
+		return -ENODEV;
+	}
+
+#ifdef QCA833X_IRQ
+	/* parse from FDT */
+#else /* !QCA833X_IRQ */
+	phydev->irq = PHY_POLL;
+#endif /* !QCA833X_IRQ */
+
+	if (!once)
+		pr_info("qca833x %d-port switch\n", qports(phydev));
+	once = true;
+
+	qca833x_save_init(phydev);
+	return qca833x_re_init(phydev);
+}
+
+static void force_reset(struct phy_device *phydev)
+{
+	int port;
+
+	for (port = 0; port < qports(phydev); port++)
+		port_context_save(phydev, port, &port_context[port]);
+
+	qphy_muget(phydev);
+	if (phydev->attached_dev
+	    && phydev->attached_dev->ethtool_ops
+	    && phydev->attached_dev->ethtool_ops->reset) {
+		u32 flags = ETH_RESET_PHY | ETH_RESET_FILTER;
+		phydev->attached_dev->ethtool_ops->reset(
+			phydev->attached_dev, &flags);
+	}
+	qphy_muput(phydev);
+	qca833x_re_init(phydev);
+
+	for (port = 0; port < qports(phydev); port++)
+		port_context_restore(phydev, port, &port_context[port]);
+}
+
+static int qca833x_read_status(struct phy_device *phydev)
+{
+	int phy_status = 0;
+	int port = 0;
+	int was;
+
+	qphy_muget(phydev);
+	was = phydev->link;
+	phydev->link = 0;
+
+	WARN_ON_ONCE(qports(phydev) <= 0);
+
+	for (port = 0; port < qports(phydev); port++)
+	{
+		if (phydev->link)
+			break;
+
+		/* All the speed information can be read from register 17 in one go. */
+		phy_status = __phy_read_addr(phydev, port, ATHR_PHY_SPEC_STATUS);
+
+		/*
+		 * If the resolve bit 11 isn't set, see if autoneg is turned off
+		 * (bit 12, reg 0). The resolve bit doesn't get set properly when
+		 * autoneg is off, so force it
+		 */
+		if ((phy_status & (1 << 11)) == 0) {
+			int auto_status = __phy_read_addr(phydev, port, MII_BMCR);
+
+			if ((auto_status & (1 << 12)) == 0)
+				phy_status |= 1 << 11;
+		}
+
+		/*
+		 * Only return a link if the PHY has finished auto negotiation
+		 * and set the resolved bit (bit 11)
+		 */
+		if (phy_status & (1 << 11)) {
+			phydev->link = 1;
+			phydev->duplex = DUPLEX_FULL;
+			phydev->speed = SPEED_1000;
+			phydev->pause = 1;
+			phydev->asym_pause = 1;
+		}
+	}
+	qphy_muput(phydev);
+
+	/* when link goes down, reset qca833x by pulsing PCS off */
+	if (was && !phydev->link)
+		force_reset(phydev);
+	return 0;
+}
+
+
+#ifdef QCA833X_IRQ
+static int qca833x_ack_interrupt(struct phy_device *phydev)
+{
+	int err;
+
+	err = phy_read(phydev, S17_PHY_INT_STAT_REG);
+
+	return (err < 0) ? err : 0;
+}
+
+static int qca833x_config_interrupt(struct phy_device *phydev)
+{
+	return phy_write(phydev, S17_PHY_INT_EN_REG,
+		(phydev->interrupts == PHY_INTERRUPT_ENABLED)
+			* S17_PHY_LINK_INTRS);
+}
+#endif /* QCA833X_IRQ */
+
+/* QUALCOMM/ATHEROS QCA8334/QCA8337 */
+static struct phy_driver qca833x_driver = {
+	.name = "Atheros 8334/8337 ethernet",
+	.phy_id = 0x004dd036,
+	.phy_id_mask = 0xfffffff0,
+	.features = PHY_GBIT_FEATURES,
+	.config_init = qca833x_config_init,
+	.config_aneg = genphy_config_aneg,
+	.read_status = qca833x_read_status,
+#ifdef QCA833X_IRQ
+	.ack_interrupt = qca833x_ack_interrupt,
+	.config_intr = qca833x_config_interrupt,
+	.flags = PHY_HAS_MAGICANEG | PHY_HAS_INTERRUPT,
+#else /* !QCA833X_IRQ */
+	.flags = PHY_HAS_MAGICANEG,
+#endif /* !QCA833X_IRQ */
+	.driver.owner = THIS_MODULE,
+};
+
+static int __init qca833x_init(void)
+{
+	return phy_driver_register(&qca833x_driver);
+}
+
+static void __exit qca833x_exit(void)
+{
+	phy_driver_unregister(&qca833x_driver);
+}
+
+module_init(qca833x_init);
+module_exit(qca833x_exit);
+
+static struct mdio_device_id __maybe_unused qca833x_tbl[] = {
+	{0x004dd036, 0xfffffff0}, /* qca8337 */
+	{0x004dd033, 0xfffffff0}, /* qca8334 */
+	{}
+};
+
+MODULE_DEVICE_TABLE(mdio, qca833x_tbl);
+
+MODULE_DESCRIPTION("Qualcomm qca833x PHY driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/net/phy/qca833x.h b/drivers/net/phy/qca833x.h
new file mode 100644
index 0000000..04fd0f2
--- /dev/null
+++ b/drivers/net/phy/qca833x.h
@@ -0,0 +1,568 @@
+/*
+ * Copyright (c) 2013 Qualcomm Atheros, Inc.
+ * Copyright (c) 2014 Cavium, Inc.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+/**
+ * This file defines the registers used by the Atheros/Qualcomm QCA8334 4-port
+ * switch.
+ */
+#ifndef QCA833X_H
+#define QCA833X_H
+
+/*****************/
+/* PHY Registers */
+/*****************/
+#define ATHR_PHY_CONTROL		0
+#define ATHR_PHY_STATUS			1
+#define ATHR_PHY_ID1			2
+#define ATHR_PHY_ID2			3
+#define ATHR_AUTONEG_ADVERT		4
+#define ATHR_LINK_PARTNER_ABILITY	5
+#define ATHR_AUTONEG_EXPANSION		6
+#define ATHR_NEXT_PAGE_TRANSMIT		7
+#define ATHR_LINK_PARTNER_NEXT_PAGE	8
+#define ATHR_1000BASET_CONTROL		9
+#define ATHR_1000BASET_STATUS		10
+#define ATHR_PHY_SPEC_CONTROL		16
+#define ATHR_PHY_SPEC_STATUS		17
+#define ATHR_DEBUG_PORT_ADDRESS		29
+#define ATHR_DEBUG_PORT_DATA		30
+
+/* ATHR_PHY_CONTROL fields */
+#define ATHR_CTRL_SOFTWARE_RESET		0x8000
+#define ATHR_CTRL_SPEED_LSB			0x2000
+#define ATHR_CTRL_AUTONEGOTIATION_ENABLE	0x1000
+#define ATHR_CTRL_RESTART_AUTONEGOTIATION	0x0200
+#define ATHR_CTRL_SPEED_FULL_DUPLEX		0x0100
+#define ATHR_CTRL_SPEED_MSB			0x0040
+
+#define ATHR_RESET_DONE(phy_control)				\
+	(((phy_control) & (ATHR_CTRL_SOFTWARE_RESET)) == 0)
+
+/* Phy status fields */
+#define ATHR_STATUS_AUTO_NEG_DONE		0x0020
+
+#define ATHR_AUTONEG_DONE(ip_phy_status)		\
+    (((ip_phy_status) & (ATHR_STATUS_AUTO_NEG_DONE)) == \
+     (ATHR_STATUS_AUTO_NEG_DONE))
+
+/* Link Partner ability */
+#define ATHR_LINK_100BASETX_FULL_DUPLEX		0x0100
+#define ATHR_LINK_100BASETX			0x0080
+#define ATHR_LINK_10BASETX_FULL_DUPLEX		0x0040
+#define ATHR_LINK_10BASETX			0x0020
+
+/* Advertisement register. */
+#define ATHR_ADVERTISE_NEXT_PAGE		0x8000
+#define ATHR_ADVERTISE_ASYM_PAUSE		0x0800
+#define ATHR_ADVERTISE_PAUSE			0x0400
+#define ATHR_ADVERTISE_100FULL			0x0100
+#define ATHR_ADVERTISE_100HALF			0x0080
+#define ATHR_ADVERTISE_10FULL			0x0040
+#define ATHR_ADVERTISE_10HALF			0x0020
+
+#define ATHR_ADVERTISE_ALL (ATHR_ADVERTISE_ASYM_PAUSE | ATHR_ADVERTISE_PAUSE | \
+                            ATHR_ADVERTISE_10HALF | ATHR_ADVERTISE_10FULL | \
+                            ATHR_ADVERTISE_100HALF | ATHR_ADVERTISE_100FULL)
+
+/* 1000BASET_CONTROL */
+#define ATHR_ADVERTISE_1000FULL			0x0200
+
+/* Phy Specific status fields */
+#define ATHER_STATUS_LINK_MASK			0xC000
+#define ATHER_STATUS_LINK_SHIFT			14
+#define ATHER_STATUS_FULL_DUPLEX		0x2000
+#define ATHR_STATUS_LINK_PASS			0x0400
+#define ATHR_STATUS_RESOVLED			0x0800
+
+/*phy debug port  register */
+#define ATHER_DEBUG_SERDES_REG			5
+
+/* Serdes debug fields */
+#define ATHER_SERDES_BEACON			0x0100
+
+/* S17 CSR Registers */
+
+#define S17_ENABLE_CPU_BROADCAST		(1 << 26)
+
+#define S17_PHY_INT_EN_REG			0x12
+#define S17_PHY_INT_EN_MASK /*FIXME:symbolic?*/ 0xec20
+#define S17_PHY_INT_STAT_REG			0x13
+
+#define S17_PHY_LINK_CHANGE_REG 		0x4
+#define S17_PHY_LINK_UP 			0x400
+#define S17_PHY_LINK_DOWN 			0x800
+#define S17_PHY_LINK_DUPLEX_CHANGE 		0x2000
+#define S17_PHY_LINK_SPEED_CHANGE		0x4000
+#define S17_PHY_LINK_INTRS		(S17_PHY_LINK_UP | \
+					 S17_PHY_LINK_DOWN | \
+					 S17_PHY_LINK_DUPLEX_CHANGE | \
+					 S17_PHY_LINK_SPEED_CHANGE)
+
+/* defines from athrs17_phy.h driver */
+
+#define S17_MASK_CTRL_REG		0x0000
+#define S17_P0PAD_MODE_REG		0x0004
+#define S17_P5PAD_MODE_REG		0x0008
+#define S17_P6PAD_MODE_REG		0x000c
+#define S17_PWS_REG			0x0010
+#define S17_GLOBAL_INT0_REG		0x0020
+#define S17_GLOBAL_INT1_REG		0x0024
+#define S17_GLOBAL_INTMASK0		0x0028
+#define S17_GLOBAL_INTMASK1		0x002c
+#define S17_MODULE_EN_REG		0x0030
+#define S17_MIB_REG			0x0034
+#define S17_INTF_HIADDR_REG		0x0038
+#define S17_MDIO_CTRL_REG		0x003c
+#define S17_BIST_CTRL_REG		0x0040
+#define S17_BIST_REC_REG		0x0044
+#define S17_SERVICE_REG			0x0048
+#define S17_LED_CTRL0_REG		0x0050
+#define S17_LED_CTRL1_REG		0x0054
+#define S17_LED_CTRL2_REG		0x0058
+#define S17_LED_CTRL3_REG		0x005c
+#define S17_MACADDR0_REG		0x0060
+#define S17_MACADDR1_REG		0x0064
+#define S17_MAX_FRAME_SIZE_REG		0x0078
+#define S17_PXSTATUS(x) ((((x)&7)<<2)+S17_P0STATUS_REG)
+#define S17_P0STATUS_REG		0x007c
+#define S17_P1STATUS_REG		0x0080
+#define S17_P2STATUS_REG		0x0084
+#define S17_P3STATUS_REG		0x0088
+#define S17_P4STATUS_REG		0x008c
+#define S17_P5STATUS_REG		0x0090
+#define S17_P6STATUS_REG		0x0094
+#define S17_HDRCTRL_REG			0x0098
+#define S17_P0HDRCTRL_REG		0x009c
+#define S17_P1HDRCTRL_REG		0x00A0
+#define S17_P2HDRCTRL_REG		0x00a4
+#define S17_P3HDRCTRL_REG		0x00a8
+#define S17_P4HDRCTRL_REG		0x00ac
+#define S17_P5HDRCTRL_REG		0x00b0
+#define S17_P6HDRCTRL_REG		0x00b4
+#define S17_SGMII_CTRL_REG		0x00e0
+#define S17_EEE_CTRL_REG		0x0100
+
+/* ACL Registers */
+#define S17_ACL_FUNC0_REG		0x0400
+#define S17_ACL_FUNC1_REG		0x0404
+#define S17_ACL_FUNC2_REG		0x0408
+#define S17_ACL_FUNC3_REG		0x040c
+#define S17_ACL_FUNC4_REG		0x0410
+#define S17_ACL_FUNC5_REG		0x0414
+#define S17_PRIVATE_IP_REG		0x0418
+#define S17_P0VLAN_CTRL0_REG		0x0420
+#define S17_P0VLAN_CTRL1_REG		0x0424
+#define S17_P1VLAN_CTRL0_REG		0x0428
+#define S17_P1VLAN_CTRL1_REG		0x042c
+#define S17_P2VLAN_CTRL0_REG		0x0430
+#define S17_P2VLAN_CTRL1_REG		0x0434
+#define S17_P3VLAN_CTRL0_REG		0x0438
+#define S17_P3VLAN_CTRL1_REG		0x043c
+#define S17_P4VLAN_CTRL0_REG		0x0440
+#define S17_P4VLAN_CTRL1_REG		0x0444
+#define S17_P5VLAN_CTRL0_REG		0x0448
+#define S17_P5VLAN_CTRL1_REG		0x044c
+#define S17_P6VLAN_CTRL0_REG		0x0450
+#define S17_P6VLAN_CTRL1_REG		0x0454
+
+/* Table Lookup Registers */
+#define S17_ATU_DATA0_REG               0x0600
+#define S17_ATU_DATA1_REG               0x0604
+#define S17_ATU_DATA2_REG               0x0608
+#define S17_ATU_FUNC_REG                0x060C
+#define S17_VTU_FUNC0_REG               0x0610
+#define S17_VTU_FUNC1_REG               0x0614
+#define S17_ARL_CTRL_REG                0x0618
+#define S17_GLOFW_CTRL0_REG             0x0620
+#define S17_GLOFW_CTRL1_REG             0x0624
+#define S17_GLOLEARN_LIMIT_REG          0x0628
+#define S17_TOS_PRIMAP_REG0             0x0630
+#define S17_TOS_PRIMAP_REG1             0x0634
+#define S17_TOS_PRIMAP_REG2             0x0638
+#define S17_TOS_PRIMAP_REG3             0x063c
+#define S17_TOS_PRIMAP_REG4             0x0640
+#define S17_TOS_PRIMAP_REG5             0x0644
+#define S17_TOS_PRIMAP_REG6             0x0648
+#define S17_TOS_PRIMAP_REG7             0x064c
+#define S17_VLAN_PRIMAP_REG0            0x0650
+#define S17_LOOP_CHECK_REG              0x0654
+#define S17_P0LOOKUP_CTRL_REG           0x0660
+#define S17_P0PRI_CTRL_REG              0x0664
+#define S17_P0LEARN_LMT_REG             0x0668
+#define S17_P1LOOKUP_CTRL_REG           0x066c
+#define S17_P1PRI_CTRL_REG              0x0670
+#define S17_P1LEARN_LMT_REG             0x0674
+#define S17_P2LOOKUP_CTRL_REG           0x0678
+#define S17_P2PRI_CTRL_REG              0x067c
+#define S17_P2LEARN_LMT_REG             0x0680
+#define S17_P3LOOKUP_CTRL_REG           0x0684
+#define S17_P3PRI_CTRL_REG              0x0688
+#define S17_P3LEARN_LMT_REG             0x068c
+#define S17_P4LOOKUP_CTRL_REG           0x0690
+#define S17_P4PRI_CTRL_REG              0x0694
+#define S17_P4LEARN_LMT_REG             0x0698
+#define S17_P5LOOKUP_CTRL_REG           0x069c
+#define S17_P5PRI_CTRL_REG              0x06a0
+#define S17_P5LEARN_LMT_REG             0x06a4
+#define S17_P6LOOKUP_CTRL_REG           0x06a8
+#define S17_P6PRI_CTRL_REG              0x06ac
+#define S17_P6LEARN_LMT_REG             0x06b0
+#define S17_GLO_TRUNK_CTRL0_REG         0x0700
+#define S17_GLO_TRUNK_CTRL1_REG         0x0704
+#define S17_GLO_TRUNK_CTRL2_REG         0x0708
+
+/* Queue Management Registers */
+#define S17_PORT0_HOL_CTRL0		0x0970
+#define S17_PORT0_HOL_CTRL1		0x0974
+#define S17_PORT1_HOL_CTRL0		0x0978
+#define S17_PORT1_HOL_CTRL1		0x097c
+#define S17_PORT2_HOL_CTRL0		0x0980
+#define S17_PORT2_HOL_CTRL1		0x0984
+#define S17_PORT3_HOL_CTRL0		0x0988
+#define S17_PORT3_HOL_CTRL1		0x098c
+#define S17_PORT4_HOL_CTRL0		0x0990
+#define S17_PORT4_HOL_CTRL1		0x0994
+#define S17_PORT5_HOL_CTRL0		0x0998
+#define S17_PORT5_HOL_CTRL1		0x099c
+#define S17_PORT6_HOL_CTRL0		0x09a0
+#define S17_PORT6_HOL_CTRL1		0x09a4
+
+/* Port flow control registers */
+#define S17_P0_FLCTL_REG		0x09b0
+#define S17_P1_FLCTL_REG		0x09b4
+#define S17_P2_FLCTL_REG		0x09b8
+#define S17_P3_FLCTL_REG		0x09bc
+#define S17_P4_FLCTL_REG		0x09c0
+#define S17_P5_FLCTL_REG		0x09c4
+
+/* Packet Edit registers */
+#define S17_PKT_EDIT_CTRL		0x0c00
+#define S17_P0Q_REMAP_REG0		0x0c40
+#define S17_P0Q_REMAP_REG1		0x0c44
+#define S17_P1Q_REMAP_REG0		0x0c48
+#define S17_P2Q_REMAP_REG0		0x0c4c
+#define S17_P3Q_REMAP_REG0		0x0c50
+#define S17_P4Q_REMAP_REG0		0x0c54
+#define S17_P5Q_REMAP_REG0		0x0c58
+#define S17_P5Q_REMAP_REG1		0x0c5c
+#define S17_P6Q_REMAP_REG0		0x0c60
+#define S17_P6Q_REMAP_REG1		0x0c64
+#define S17_ROUTER_VID0			0x0c70
+#define S17_ROUTER_VID1			0x0c74
+#define S17_ROUTER_VID2			0x0c78
+#define S17_ROUTER_VID3			0x0c7c
+#define S17_ROUTER_EG_VLAN_MODE		0x0c80
+
+/* L3 Registers */
+#define S17_HROUTER_CTRL_REG            0x0e00
+#define S17_HROUTER_PBCTRL0_REG         0x0e04
+#define S17_HROUTER_PBCTRL1_REG         0x0e08
+#define S17_HROUTER_PBCTRL2_REG         0x0e0c
+#define S17_WCMP_HASH_TABLE0_REG        0x0e10
+#define S17_WCMP_HASH_TABLE1_REG        0x0e14
+#define S17_WCMP_HASH_TABLE2_REG        0x0e18
+#define S17_WCMP_HASH_TABLE3_REG        0x0e1c
+#define S17_WCMP_NHOP_TABLE0_REG        0x0e20
+#define S17_WCMP_NHOP_TABLE1_REG        0x0e24
+#define S17_WCMP_NHOP_TABLE2_REG        0x0e28
+#define S17_WCMP_NHOP_TABLE3_REG        0x0e2c
+#define S17_ARP_ENTRY_CTRL_REG          0x0e30
+#define S17_ARP_USECNT_REG              0x0e34
+#define S17_HNAT_CTRL_REG               0x0e38
+#define S17_NAPT_ENTRY_CTRL0_REG        0x0e3c
+#define S17_NAPT_ENTRY_CTRL1_REG        0x0e40
+#define S17_NAPT_USECNT_REG             0x0e44
+#define S17_ENTRY_EDIT_DATA0_REG        0x0e48
+#define S17_ENTRY_EDIT_DATA1_REG        0x0e4c
+#define S17_ENTRY_EDIT_DATA2_REG        0x0e50
+#define S17_ENTRY_EDIT_DATA3_REG        0x0e54
+#define S17_ENTRY_EDIT_CTRL_REG         0x0e58
+#define S17_HNAT_PRIVATE_IP_REG         0x0e5c
+
+/* MIB counters */
+#define S17_MIB_PORT0			0x1000
+#define S17_MIB_PORT1			0x1100
+#define S17_MIB_PORT2			0x1200
+#define S17_MIB_PORT3			0x1300
+#define S17_MIB_PORT4			0x1400
+#define S17_MIB_PORT5			0x1500
+#define S17_MIB_PORT6			0x1600
+
+#define S17_MIB_RXBROAD			0x0
+#define S17_MIB_RXPAUSE			0x4
+#define S17_MIB_RXMULTI			0x8
+#define S17_MIB_RXFCSERR		0xC
+#define S17_MIB_RXALIGNERR		0x10
+#define S17_MIB_RXUNDERSIZE		0x14
+#define S17_MIB_RXFRAG			0x18
+#define S17_MIB_RX64B			0x1C
+#define S17_MIB_RX128B			0x20
+#define S17_MIB_RX256B			0x24
+#define S17_MIB_RX512B			0x28
+#define S17_MIB_RX1024B			0x2C
+#define S17_MIB_RX1518B			0x30
+#define S17_MIB_RXMAXB			0x34
+#define S17_MIB_RXTOOLONG		0x38
+#define S17_MIB_RXBYTE1			0x3C
+#define S17_MIB_RXBYTE2			0x40
+#define S17_MIB_RXOVERFLOW		0x4C
+#define S17_MIB_FILTERED		0x50
+#define S17_MIB_TXBROAD			0x54
+#define S17_MIB_TXPAUSE			0x58
+#define S17_MIB_TXMULTI			0x5C
+#define S17_MIB_TXUNDERRUN		0x60
+#define S17_MIB_TX64B			0x64
+#define S17_MIB_TX128B			0x68
+#define S17_MIB_TX256B			0x6c
+#define S17_MIB_TX512B			0x70
+#define S17_MIB_TX1024B			0x74
+#define S17_MIB_TX1518B			0x78
+#define S17_MIB_TXMAXB			0x7C
+#define S17_MIB_TXOVERSIZE		0x80
+#define S17_MIB_TXBYTE1			0x84
+#define S17_MIB_TXBYTE2			0x88
+#define S17_MIB_TXCOL			0x8C
+#define S17_MIB_TXABORTCOL		0x90
+#define S17_MIB_TXMULTICOL		0x94
+#define S17_MIB_TXSINGLECOL		0x98
+#define S17_MIB_TXEXCDEFER		0x9C
+#define S17_MIB_TXDEFER			0xA0
+#define S17_MIB_TXLATECOL		0xA4
+
+/* Register fields */
+#define S17_CHIPID_V1_0			0x1201
+#define S17_CHIPID_V1_1			0x1202
+
+#define S17_MAC0_MAC_MII_RXCLK_SEL	(1 << 0)
+#define S17_MAC0_MAC_MII_TXCLK_SEL	(1 << 1)
+#define S17_MAC0_MAC_MII_EN		(1 << 2)
+#define S17_MAC0_MAC_GMII_RXCLK_SEL	(1 << 4)
+#define S17_MAC0_MAC_GMII_TXCLK_SEL	(1 << 5)
+#define S17_MAC0_MAC_GMII_EN		(1 << 6)
+#define S17_MAC0_SGMII_EN		(1 << 7)
+#define S17_MAC0_PHY_MII_RXCLK_SEL	(1 << 8)
+#define S17_MAC0_PHY_MII_TXCLK_SEL	(1 << 9)
+#define S17_MAC0_PHY_MII_EN		(1 << 10)
+#define S17_MAC0_PHY_MII_PIPE_SEL	(1 << 11)
+#define S17_MAC0_PHY_GMII_RXCLK_SEL	(1 << 12)
+#define S17_MAC0_PHY_GMII_TXCLK_SEL	(1 << 13)
+#define S17_MAC0_PHY_GMII_EN		(1 << 14)
+#define S17_MAC0_SGMII_125MHX_RX_FALL	(1 << 19)
+#define S17_MAC0_RGMII_RXCLK_SHIFT	20
+#define S17_MAC0_RGMII_TXCLK_SHIFT	22
+#define S17_MAC0_RGMII_RXCLK_DELAY	(1 << 24)
+#define S17_MAC0_RGMII_TXCLK_DELAY	(1 << 25)
+#define S17_MAC0_RGMII_EN		(1 << 26)
+
+#define S17_MAC5_MAC_MII_RXCLK_SEL	(1 << 0)
+#define S17_MAC5_MAC_MII_TXCLK_SEL	(1 << 1)
+#define S17_MAC5_MAC_MII_EN		(1 << 2)
+#define S17_MAC5_PHY_MII_RXCLK_SEL	(1 << 8)
+#define S17_MAC5_PHY_MII_TXCLK_SEL	(1 << 9)
+#define S17_MAC5_PHY_MII_EN		(1 << 10)
+#define S17_MAC5_PHY_MII_PIPE_SEL	(1 << 11)
+#define S17_MAC5_RGMII_RXCLK_SHIFT	20
+#define S17_MAC5_RGMII_TXCLK_SHIFT	22
+#define S17_MAC5_RGMII_RXCLK_DELAY	(1 << 24)
+#define S17_MAC5_RGMII_TXCLK_DELAY	(1 << 25)
+#define S17_MAC5_RGMII_EN		(1 << 26)
+
+#define S17_MAC6_MAC_MII_RXCLK_SEL	(1 << 0)
+#define S17_MAC6_MAC_MII_TXCLK_SEL	(1 << 1)
+#define S17_MAC6_MAC_MII_EN		(1 << 2)
+#define S17_MAC6_MAC_GMII_RXCLK_SEL	(1 << 4)
+#define S17_MAC6_MAC_GMII_TXCLK_SEL	(1 << 5)
+#define S17_MAC6_MAC_GMII_EN		(1 << 6)
+#define S17_MAC6_SGMII_EN		(1 << 7)
+#define S17_MAC6_PHY_MII_RXCLK_SEL	(1 << 8)
+#define S17_MAC6_PHY_MII_TXCLK_SEL	(1 << 9)
+#define S17_MAC6_PHY_MII_EN		(1 << 10)
+#define S17_MAC6_PHY_MII_PIPE_SEL	(1 << 11)
+#define S17_MAC6_PHY_GMII_RXCLK_SEL	(1 << 12)
+#define S17_MAC6_PHY_GMII_TXCLK_SEL	(1 << 13)
+#define S17_MAC6_PHY_GMII_EN		(1 << 14)
+#define S17_PHY4_GMII_EN		(1 << 16)
+#define S17_PHY4_RGMII_EN		(1 << 17)
+#define S17_PHY4_MII_EN			(1 << 18)
+#define S17_MAC6_RGMII_RXCLK_SHIFT	20
+#define S17_MAC6_RGMII_TXCLK_SHIFT	22
+#define S17_MAC6_RGMII_RXCLK_DELAY	(1 << 24)
+#define S17_MAC6_RGMII_TXCLK_DELAY	(1 << 25)
+#define S17_MAC6_RGMII_EN		(1 << 26)
+
+#define S17_SPEED_10M			(0 << 0)
+#define S17_SPEED_100M			(1 << 0)
+#define S17_SPEED_1000M			(2 << 0)
+#define S17_TXMAC_EN			(1 << 2)
+#define S17_RXMAC_EN			(1 << 3)
+#define S17_TX_FLOW_EN			(1 << 4)
+#define S17_RX_FLOW_EN			(1 << 5)
+#define S17_DUPLEX_FULL			(1 << 6)
+#define S17_DUPLEX_HALF			(0 << 6)
+#define S17_TX_HALF_FLOW_EN		(1 << 7)
+#define S17_LINK_EN			(1 << 9)
+#define S17_FLOW_LINK_EN		(1 << 12)
+#define S17_PORT_STATUS_DEFAULT		(S17_SPEED_1000M | S17_TXMAC_EN | \
+                                        S17_RXMAC_EN | S17_TX_FLOW_EN | \
+                                        S17_RX_FLOW_EN | S17_DUPLEX_FULL | \
+                                        S17_TX_HALF_FLOW_EN)
+
+#define S17_PORT_STATUS_AZ_DEFAULT	(S17_SPEED_1000M | S17_TXMAC_EN | \
+                                        S17_RXMAC_EN | S17_TX_FLOW_EN | \
+                                        S17_RX_FLOW_EN | S17_DUPLEX_FULL)
+
+#define S17_HDRLENGTH_SEL		(1 << 16)
+#define S17_HDR_VALUE			0xAAAA
+
+#define S17_TXHDR_MODE_NO		0
+#define S17_TXHDR_MODE_MGM		1
+#define S17_TXHDR_MODE_ALL		2
+#define S17_RXHDR_MODE_NO		(0 << 2)
+#define S17_RXHDR_MODE_MGM		(1 << 2)
+#define S17_RXHDR_MODE_ALL		(2 << 2)
+
+#define S17_CPU_PORT_EN			(1 << 10)
+#define S17_PPPOE_REDIR_EN		(1 << 8)
+#define S17_MIRROR_PORT_SHIFT		4
+#define S17_IGMP_COPY_EN		(1 << 3)
+#define S17_RIP_COPY_EN			(1 << 2)
+#define S17_EAPOL_REDIR_EN		(1 << 0)
+
+#define S17_IGMP_JOIN_LEAVE_DP_SHIFT	24
+#define S17_BROAD_DP_SHIFT		16
+#define S17_MULTI_FLOOD_DP_SHIFT	8
+#define S17_UNI_FLOOD_DP_SHIFT		0
+#define S17_IGMP_JOIN_LEAVE_DPALL	(0x7f << S17_IGMP_JOIN_LEAVE_DP_SHIFT)
+#define S17_BROAD_DPALL			(0x7f << S17_BROAD_DP_SHIFT)
+#define S17_MULTI_FLOOD_DPALL		(0x7f << S17_MULTI_FLOOD_DP_SHIFT)
+#define S17_UNI_FLOOD_DPALL		(0x7f << S17_UNI_FLOOD_DP_SHIFT)
+
+#define S17_PWS_CHIP_AR8327             (1 << 30)
+
+/* S17_MASK_CTRL_REG fields */
+#define S17_MASK_CTRL_SOFT_RESET	(1 << 31)
+#define S17_MASK_CTRL_LOAD_EEPROM	(1 << 16)
+#define S17_MASK_CTRL_DEV_ID(x)		(((x) & 0xff00) >> 8)
+#define S17_MASK_CTRL_REV_ID(x)		((x) & 0xff)
+
+/* S17_PHY_CONTROL fields */
+#define S17_CTRL_SOFTWARE_RESET                    0x8000
+#define S17_CTRL_SPEED_LSB                         0x2000
+#define S17_CTRL_AUTONEGOTIATION_ENABLE            0x1000
+#define S17_CTRL_RESTART_AUTONEGOTIATION           0x0200
+#define S17_CTRL_SPEED_FULL_DUPLEX                 0x0100
+#define S17_CTRL_SPEED_MSB                         0x0040
+
+/* For EEE_CTRL_REG */
+#define S17_LPI_DISABLE_P1		(1 << 4)
+#define S17_LPI_DISABLE_P2		(1 << 6)
+#define S17_LPI_DISABLE_P3		(1 << 8)
+#define S17_LPI_DISABLE_P4		(1 << 10)
+#define S17_LPI_DISABLE_P5		(1 << 12)
+#define S17_LPI_DISABLE_ALL		0x1550
+
+/* For MMD register control */
+#define S17_MMD_FUNC_ADDR			(0 << 14)
+#define S17_MMD_FUNC_DATA			(1 << 14)
+#define S17_MMD_FUNC_DATA_2			(2 << 14)
+#define S17_MMD_FUNC_DATA_3			(3 << 14)
+
+/* For phyInfo_t azFeature */
+#define S17_8023AZ_PHY_ENABLED			(1 << 0)
+#define S17_8023AZ_PHY_LINKED                   (1 << 1)
+
+/* Queue Management registe fields */
+#define S17_HOL_CTRL0_LAN		0x2a008888	/* egress priority 8, eg_portq = 0x2a */
+#define S17_HOL_CTRL0_WAN		0x2a666666	/* egress priority 6, eg_portq = 0x2a */
+#define S17_HOL_CTRL1_DEFAULT		0xc6	/* enable HOL control */
+
+/* Packet Edit register fields */
+#define S17_ROUTER_EG_UNMOD		0x0	/* unmodified */
+#define S17_ROUTER_EG_WOVLAN		0x1	/* without VLAN */
+#define S17_ROUTER_EG_WVLAN		0x2	/* with VLAN */
+#define S17_ROUTER_EG_UNTOUCH		0x3	/* untouched */
+#define S17_ROUTER_EG_MODE_DEFAULT	0x01111111	/* all ports without VLAN */
+
+#define S17_RESET_DONE(phy_control)                   \
+    (((phy_control) & (S17_CTRL_SOFTWARE_RESET)) == 0)
+
+/* Phy status fields */
+#define S17_STATUS_AUTO_NEG_DONE                   0x0020
+
+#define S17_AUTONEG_DONE(ip_phy_status)                   \
+    (((ip_phy_status) &                                  \
+        (S17_STATUS_AUTO_NEG_DONE)) ==                    \
+        (S17_STATUS_AUTO_NEG_DONE))
+
+/* Link Partner ability */
+#define S17_LINK_100BASETX_FULL_DUPLEX       0x0100
+#define S17_LINK_100BASETX                   0x0080
+#define S17_LINK_10BASETX_FULL_DUPLEX        0x0040
+#define S17_LINK_10BASETX                    0x0020
+
+/* Advertisement register. */
+#define S17_ADVERTISE_NEXT_PAGE              0x8000
+#define S17_ADVERTISE_ASYM_PAUSE             0x0800
+#define S17_ADVERTISE_PAUSE                  0x0400
+#define S17_ADVERTISE_100FULL                0x0100
+#define S17_ADVERTISE_100HALF                0x0080
+#define S17_ADVERTISE_10FULL                 0x0040
+#define S17_ADVERTISE_10HALF                 0x0020
+
+#define S17_ADVERTISE_ALL (S17_ADVERTISE_ASYM_PAUSE | S17_ADVERTISE_PAUSE | \
+                            S17_ADVERTISE_10HALF | S17_ADVERTISE_10FULL | \
+                            S17_ADVERTISE_100HALF | S17_ADVERTISE_100FULL)
+
+/* 1000BASET_CONTROL */
+#define S17_ADVERTISE_1000FULL		0x0200
+
+/* Phy Specific status fields */
+#define S17_STATUS_LINK_MASK		0xC000
+#define S17_STATUS_LINK_SHIFT		14
+#define S17_STATUS_FULL_DUPLEX		0x2000
+#define S17_STATUS_LINK_PASS		0x0400
+#define S17_STATUS_RESOLVED		0x0800
+#define S17_STATUS_LINK_10M		0
+#define S17_STATUS_LINK_100M		1
+#define S17_STATUS_LINK_1000M		2
+
+#define S17_GLOBAL_INT_PHYMASK		(1 << 15)
+
+#define S17_PHY_LINK_UP				0x400
+#define S17_PHY_LINK_DOWN			0x800
+#define S17_PHY_LINK_DUPLEX_CHANGE		0x2000
+#define S17_PHY_LINK_SPEED_CHANGE		0x4000
+
+/* For Port flow control registers */
+#define S17_PORT_FLCTL_XON_DEFAULT		(0x3a << 16)
+#define S17_PORT_FLCTL_XOFF_DEFAULT		(0x4a)
+
+/* Module enable Register */
+#define S17_MODULE_L3_EN		(1 << 2)
+#define S17_MODULE_ACL_EN		(1 << 1)
+#define S17_MODULE_MIB_EN		(1 << 0)
+
+/* MIB Function Register 1 */
+#define S17_MIB_FUNC_ALL		(3 << 24)
+#define S17_MIB_CPU_KEEP		(1 << 20)
+#define S17_MIB_BUSY			(1 << 17)
+#define S17_MIB_AT_HALF_EN		(1 << 16)
+#define S17_MIB_TIMER_DEFAULT		0x100
+
+#define S17_MAC_MAX			7
+
+/*add feature define here*/
+
+#ifdef CONFIG_AR7242_S17_PHY
+#undef HEADER_REG_CONF
+#undef HEADER_EN
+#endif
+
+#define MODULE_NAME "qca833x"
+#define S17_PHY_DEBUG 1
+
+#endif
-- 
1.8.2.1

