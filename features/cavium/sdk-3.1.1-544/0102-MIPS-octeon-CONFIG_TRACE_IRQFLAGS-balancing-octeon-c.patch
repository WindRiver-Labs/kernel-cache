From 65fb00f9d27c91bdd60c05368e848d2410ba551c Mon Sep 17 00:00:00 2001
From: Peter Swain <peter.swain@cavium.com>
Date: Fri, 13 Feb 2015 15:33:43 +0530
Subject: [PATCH 102/132] MIPS: octeon CONFIG_TRACE_IRQFLAGS balancing octeon
 custom trap handling had missing TRACE_IRQFLAGS support, and would complain
 of

Commit 366799a805aac65ef16c37566aaeb07fa0542311 from
git://git.yoctoproject.org/linux-yocto-3.14

WARNING: at kernel/lockdep.c:3535 check_flags+0x1ac/0x208()
DEBUG_LOCKS_WARN_ON(current->hardirqs_enabled)
...
possible reason: unannotated irqs-off.

No code changed unless CONFIG_TRACE_IRQFLAGS=y

Signed-off-by: Peter Swain <peter.swain@cavium.com>
Signed-off-by: Abhishek Paliwal <abhishek.paliwal@aricent.com>
[Original patch taken from OCTEON-SDK 3.1.1-544.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/kernel/entry.S | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/arch/mips/kernel/entry.S b/arch/mips/kernel/entry.S
index 7791840..b8c7eb7 100644
--- a/arch/mips/kernel/entry.S
+++ b/arch/mips/kernel/entry.S
@@ -29,6 +29,9 @@
 #ifndef CONFIG_PREEMPT
 FEXPORT(ret_from_exception)
 	local_irq_disable			# preempt stop
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	b	__ret_from_irq
 #endif
 FEXPORT(ret_from_irq)
@@ -47,6 +50,10 @@ resume_userspace:
 	local_irq_disable		# make sure we dont miss an
 					# interrupt setting need_resched
 					# between sampling and return
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
+
 #ifdef CONFIG_MIPSR2_TO_R6_EMULATOR
 	lw	k0, TI_R2_EMUL_RET($28)
 	bnez	k0, restore_all_from_r2_emul
@@ -60,6 +67,9 @@ resume_userspace:
 #ifdef CONFIG_PREEMPT
 resume_kernel:
 	local_irq_disable
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	lw	t0, TI_PRE_COUNT($28)
 	bnez	t0, restore_all
 need_resched:
@@ -86,6 +96,9 @@ FEXPORT(syscall_exit)
 	local_irq_disable		# make sure need_resched and
 					# signals dont change between
 					# sampling and return
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	LONG_L	a2, TI_FLAGS($28)	# current->work
 	li	t0, _TIF_ALLWORK_MASK
 	and	t0, a2, t0
@@ -142,6 +155,9 @@ work_resched:
 	local_irq_disable		# make sure need_resched and
 					# signals dont change between
 					# sampling and return
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	LONG_L	a2, TI_FLAGS($28)
 	andi	t0, a2, _TIF_WORK_MASK	# is there any work to be done
 					# other than syscall tracing?
@@ -159,6 +175,9 @@ work_notifysig:				# deal with pending signals and
 FEXPORT(syscall_exit_partial)
 	local_irq_disable		# make sure need_resched doesn't
 					# change between and return
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_off
+#endif
 	LONG_L	a2, TI_FLAGS($28)	# current->work
 	li	t0, _TIF_ALLWORK_MASK
 	and	t0, a2
@@ -173,6 +192,9 @@ syscall_exit_work:
 	beqz	t0, work_pending	# trace bit set?
 	local_irq_enable		# could let syscall_trace_leave()
 					# call schedule() instead
+#ifdef CONFIG_TRACE_IRQFLAGS
+	jal	trace_hardirqs_on
+#endif
 	move	a0, sp
 	jal	syscall_trace_leave
 	b	resume_userspace
-- 
1.9.1

