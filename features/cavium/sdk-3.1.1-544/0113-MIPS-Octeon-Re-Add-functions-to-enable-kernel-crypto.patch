From 8b0fa5ac85ffee3c2dd233fec77f38219c4ba9e3 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 13 Feb 2015 15:21:46 +0530
Subject: [PATCH 113/148] MIPS: Octeon: (Re) Add functions to enable kernel
 crypto usage.

Commit 63f2a58f197fad8d3c7355a719c5cbf883052a33 from
git://git.yoctoproject.org/linux-yocto-3.14

The prototypes are added to #include <asm/octeon/octeon-crypto.h>.
And you have to select CONFIG_CAVIUM_OCTEON_KERNEL_CRYPTO to enable
them.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Leonid Rosenboim <lrosenboim@caviumnetworks.com>
Signed-off-by: Abhishek Paliwal <abhishek.paliwal@aricent.com>
---
 arch/mips/cavium-octeon/Makefile        |  5 ++-
 arch/mips/cavium-octeon/octeon-crypto.c | 66 +++++++++++++++++++++++++++++++++
 2 files changed, 69 insertions(+), 2 deletions(-)
 create mode 100644 arch/mips/cavium-octeon/octeon-crypto.c

diff --git a/arch/mips/cavium-octeon/Makefile b/arch/mips/cavium-octeon/Makefile
index f9f589f..ef5181d 100644
--- a/arch/mips/cavium-octeon/Makefile
+++ b/arch/mips/cavium-octeon/Makefile
@@ -6,13 +6,13 @@
 # License.  See the file "COPYING" in the main directory of this archive
 # for more details.
 #
-# Copyright (C) 2005-2009 Cavium Networks
+# Copyright (C) 2005-2012 Cavium, Inc.
 #
 
 CFLAGS_octeon-platform.o = -I$(src)/../../../scripts/dtc/libfdt
 CFLAGS_setup.o = -I$(src)/../../../scripts/dtc/libfdt
 
-obj-y := cpu.o setup.o octeon-platform.o octeon-irq.o csrc-octeon.o \
+obj-y := setup.o octeon-platform.o octeon-irq.o csrc-octeon.o \
 	 octeon-hw-status.o octeon_info.o
 obj-y += dma-octeon.o
 obj-y += octeon-pci-console.o
@@ -28,6 +28,7 @@ obj-$(CONFIG_MTD)                    += flash_setup.o
 obj-$(CONFIG_OCTEON_ILM)             += oct_ilm.o
 obj-$(CONFIG_CAVIUM_OCTEON_NAND)       += octeon-nand.o
 obj-$(CONFIG_CAVIUM_OCTEON_ERROR_TREE) += octeon-error-tree.o octeon-78xx-errors.o
+obj-$(CONFIG_CAVIUM_OCTEON_KERNEL_CRYPTO) += octeon-crypto.o
 obj-$(CONFIG_OCTEON_ERROR_INJECTOR)    += octeon-error-injector.o
 obj-$(CONFIG_CAVIUM_OCTEON_RAPIDIO)     += octeon-rapidio.o
 obj-$(CONFIG_CAVIUM_OCTEON_PERF)       += perf_uncore.o
diff --git a/arch/mips/cavium-octeon/octeon-crypto.c b/arch/mips/cavium-octeon/octeon-crypto.c
new file mode 100644
index 0000000..911e5b4
--- /dev/null
+++ b/arch/mips/cavium-octeon/octeon-crypto.c
@@ -0,0 +1,66 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2004-2012 Cavium Networks
+ */
+
+#include <linux/sched.h>
+#include <linux/module.h>
+#include <linux/interrupt.h>
+
+#include <asm/octeon/octeon-crypto.h>
+
+/**
+ * Enable access to Octeon's COP2 crypto hardware for kernel use.
+ * Wrap any crypto operations in calls to
+ * octeon_crypto_enable/disable in order to make sure the state of
+ * COP2 isn't corrupted if userspace is also performing hardware
+ * crypto operations. Allocate the state parameter on the stack.
+ *
+ * @param state  State structure to store current COP2 state in
+ *
+ * @return Flags to be passed to octeon_crypto_disable()
+ */
+unsigned long octeon_crypto_enable(struct octeon_cop2_state *state)
+{
+	int status;
+	unsigned long flags;
+
+	local_irq_save(flags);
+	status = read_c0_status();
+	write_c0_status(status | ST0_CU2);
+	if (KSTK_STATUS(current) & ST0_CU2) {
+		octeon_cop2_save(&(current->thread.cp2));
+		KSTK_STATUS(current) &= ~ST0_CU2;
+		status &= ~ST0_CU2;
+	} else if (status & ST0_CU2)
+		octeon_cop2_save(state);
+	local_irq_restore(flags);
+	return status & ST0_CU2;
+}
+EXPORT_SYMBOL(octeon_crypto_enable);
+
+
+/**
+ * Disable access to Octeon's COP2 crypto hardware in the kernel.
+ * This must be called after an octeon_crypto_enable() before any
+ * context switch or return to userspace.
+ *
+ * @param state  COP2 state to restore
+ * @param flags  Return value from octeon_crypto_enable()
+ */
+void octeon_crypto_disable(struct octeon_cop2_state *state,
+			   unsigned long crypto_flags)
+{
+	unsigned long flags;
+
+	local_irq_save(flags);
+	if (crypto_flags & ST0_CU2)
+		octeon_cop2_restore(state);
+	else
+		write_c0_status(read_c0_status() & ~ST0_CU2);
+	local_irq_restore(flags);
+}
+EXPORT_SYMBOL(octeon_crypto_disable);
-- 
1.8.2.1

