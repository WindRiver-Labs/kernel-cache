From 6bc0a1b737d1c723e885eadcd7320b6ae81b7409 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 13 Feb 2015 13:47:26 +0530
Subject: [PATCH 027/132] MIPS: OCTEON: Handle cn78XX counters in csrc-octeon.c

Commit 7d884a3337dbe11b50255005e7d1f4fe2949c6be from
git://git.yoctoproject.org/linux-yocto-3.14

We need to use FPA_CLK_COUNT instead of IPD_CLK_COUNT.

Synchronize CP0.Count across CPUs. Needed for KVM to work with cn70XX-P1

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Abhishek Paliwal <abhishek.paliwal@aricent.com>
[Original patch taken from OCTEON-SDK 3.1.1-544.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/cavium-octeon/csrc-octeon.c | 19 +++++++++++++++----
 1 file changed, 15 insertions(+), 4 deletions(-)

diff --git a/arch/mips/cavium-octeon/csrc-octeon.c b/arch/mips/cavium-octeon/csrc-octeon.c
index 1882e64..6f1bc23 100644
--- a/arch/mips/cavium-octeon/csrc-octeon.c
+++ b/arch/mips/cavium-octeon/csrc-octeon.c
@@ -17,6 +17,7 @@
 
 #include <asm/octeon/octeon.h>
 #include <asm/octeon/cvmx-ipd-defs.h>
+#include <asm/octeon/cvmx-fpa-defs.h>
 #include <asm/octeon/cvmx-mio-defs.h>
 #include <asm/octeon/cvmx-rst-defs.h>
 
@@ -65,8 +66,12 @@ void __init octeon_setup_delays(void)
  */
 void octeon_init_cvmcount(void)
 {
+	u64 clk_reg;
 	unsigned long flags;
 	unsigned loops = 2;
+	bool has_fpa_clk_cnt = current_cpu_type() == CPU_CAVIUM_OCTEON3 && !OCTEON_IS_MODEL(OCTEON_CN70XX);
+
+	clk_reg = has_fpa_clk_cnt ? CVMX_FPA_CLK_COUNT : CVMX_IPD_CLK_COUNT;
 
 	/* Clobber loops so GCC will not unroll the following while loop. */
 	asm("" : "+r" (loops));
@@ -77,18 +82,24 @@ void octeon_init_cvmcount(void)
 	 * which should give more deterministic timing.
 	 */
 	while (loops--) {
-		u64 ipd_clk_count = cvmx_read_csr(CVMX_IPD_CLK_COUNT);
+		u64 clk_count = cvmx_read_csr(clk_reg);
 		if (rdiv != 0) {
-			ipd_clk_count *= rdiv;
+			clk_count *= rdiv;
 			if (f != 0) {
 				asm("dmultu\t%[cnt],%[f]\n\t"
 				    "mfhi\t%[cnt]"
-				    : [cnt] "+r" (ipd_clk_count)
+				    : [cnt] "+r" (clk_count)
 				    : [f] "r" (f)
 				    : "hi", "lo");
 			}
 		}
-		write_c0_cvmcount(ipd_clk_count);
+		write_c0_cvmcount(clk_count);
+		/*
+		 * cn70XX-P1 core-19049 requires synchronized Count for
+		 * KVM guest timers to report with required GTOffset
+		 * of 0.
+		 */
+		write_c0_count((u32)clk_count);
 	}
 	local_irq_restore(flags);
 }
-- 
1.9.1

