From 366df31b80206854baaa8233568b04ba40352712 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Thu, 10 Sep 2015 15:19:41 +0800
Subject: [PATCH 131/132] cav-octeon3: update some codes to suit Kernel 4.1

Update some codes to suit Kernel 4.1.

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/cavium-octeon/perf_uncore.c          | 7 +++++--
 drivers/net/ethernet/octeon/ethernet-srio.c    | 2 +-
 drivers/net/ethernet/octeon/ethernet.c         | 2 +-
 drivers/net/ethernet/octeon/octeon-bgx-port.c  | 2 +-
 drivers/net/ethernet/octeon/octeon3-ethernet.c | 2 +-
 5 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/arch/mips/cavium-octeon/perf_uncore.c b/arch/mips/cavium-octeon/perf_uncore.c
index 74afc15..80f4610 100644
--- a/arch/mips/cavium-octeon/perf_uncore.c
+++ b/arch/mips/cavium-octeon/perf_uncore.c
@@ -66,19 +66,22 @@ static void safe_printk(const char *fmt, ...);
 
 #ifndef CONFIG_EARLY_PRINTK
 /* if not supported, just stub out ... */
-static void early_vprintk(const char *fmt, va_list ap) {}
+static void early_printk(const char *fmt, va_list ap) {}
 #endif
 
 /* use early_printk() for safe visibility in perf irq context ... */
 static void safe_printk(const char *fmt, ...)
 {
 	va_list ap;
+	struct va_format vaf;
 
 	if (!debug || unc_traces-- < 0)
 		return;
 	va_start(ap, fmt);
+	vaf.fmt = fmt;
+	vaf.va = &ap;
 	if (irqs_disabled())
-		early_vprintk(fmt, ap);
+		early_printk("%p", &vaf);
 	else
 		vprintk(fmt, ap);
 	va_end(ap);
diff --git a/drivers/net/ethernet/octeon/ethernet-srio.c b/drivers/net/ethernet/octeon/ethernet-srio.c
index 52000c1..f45ec0d 100644
--- a/drivers/net/ethernet/octeon/ethernet-srio.c
+++ b/drivers/net/ethernet/octeon/ethernet-srio.c
@@ -204,7 +204,7 @@ int cvm_oct_srio_init(struct net_device *dev)
 
 	dev->features |= NETIF_F_LLTX; /* We do our own locking, Linux doesn't need to */
 
-	SET_ETHTOOL_OPS(dev, &cvm_oct_ethtool_ops);
+	dev->ethtool_ops = &cvm_oct_ethtool_ops;
 
 	/* Make sure register access is allowed */
 	srio_status_reg.u64 = cvmx_read_csr(CVMX_SRIOX_STATUS_REG(srio_port));
diff --git a/drivers/net/ethernet/octeon/ethernet.c b/drivers/net/ethernet/octeon/ethernet.c
index cd94908..d6d5310 100644
--- a/drivers/net/ethernet/octeon/ethernet.c
+++ b/drivers/net/ethernet/octeon/ethernet.c
@@ -545,7 +545,7 @@ int cvm_oct_common_init(struct net_device *dev)
 
 	/* We do our own locking, Linux doesn't need to */
 	dev->features |= NETIF_F_LLTX;
-	SET_ETHTOOL_OPS(dev, &cvm_oct_ethtool_ops);
+	dev->ethtool_ops = &cvm_oct_ethtool_ops;
 
 	memcpy(sa.sa_data, dev->dev_addr, ETH_ALEN);
 	cvm_oct_common_set_mac_address(dev, &sa, priv->gmx_base, &priv->poll_lock);
diff --git a/drivers/net/ethernet/octeon/octeon-bgx-port.c b/drivers/net/ethernet/octeon/octeon-bgx-port.c
index b3890ea..9e331fe 100644
--- a/drivers/net/ethernet/octeon/octeon-bgx-port.c
+++ b/drivers/net/ethernet/octeon/octeon-bgx-port.c
@@ -525,7 +525,7 @@ static int bgx_port_probe(struct platform_device *pdev)
 	else
 		cvmx_helper_set_port_phy_present(priv->xiface, priv->index, true);
 
-	r = dev_set_drvdata(&pdev->dev, priv);
+	dev_set_drvdata(&pdev->dev, priv);
 
 	if (priv->phy_np)
 		__cvmx_helper_bgx_port_init(priv->ipd_port, 1);
diff --git a/drivers/net/ethernet/octeon/octeon3-ethernet.c b/drivers/net/ethernet/octeon/octeon3-ethernet.c
index ad6c098..bde3006 100644
--- a/drivers/net/ethernet/octeon/octeon3-ethernet.c
+++ b/drivers/net/ethernet/octeon/octeon3-ethernet.c
@@ -1450,7 +1450,7 @@ static int octeon3_eth_ndo_init(struct net_device *netdev)
 	octeon3_napi_init_node(priv->numa_node, netdev);
 
 	/* Register ethtool methods */
-	SET_ETHTOOL_OPS(netdev, &octeon3_ethtool_ops);
+	netdev->ethtool_ops = &octeon3_ethtool_ops;
 
 	__cvmx_export_config();
 
-- 
1.9.1

