From b41d00f701336f2a7a78dfaecf5bb163dbaab1cc Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Mon, 18 Aug 2014 18:14:11 -0700
Subject: [PATCH 174/202] MIPS: OCTEON: Update cvmx-boot-vector code.

Fix usage in smp and watchdog code.

Signed-off-by: David Daney <david.daney@cavium.com>
[Original patch taken from Cavium SDK 3.1.1-544]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 arch/mips/cavium-octeon/smp.c        | 4 ++--
 arch/mips/cavium-octeon/unplug-cpu.c | 4 ++--
 drivers/watchdog/octeon-wdt-main.c   | 4 ++--
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/arch/mips/cavium-octeon/smp.c b/arch/mips/cavium-octeon/smp.c
index 5753e97..32ab0aa 100644
--- a/arch/mips/cavium-octeon/smp.c
+++ b/arch/mips/cavium-octeon/smp.c
@@ -25,7 +25,7 @@ __cpuinitdata unsigned long octeon_processor_sp;
 __cpuinitdata unsigned long octeon_processor_gp;
 
 #ifdef CONFIG_HOTPLUG_CPU
-static void **octeon_bootvector;
+static struct cvmx_boot_vector_element *octeon_bootvector;
 static void *octeon_hotplug_entry_raw;
 extern asmlinkage void octeon_hotplug_entry(void);
 #endif
@@ -373,7 +373,7 @@ static int octeon_up_prepare(unsigned int cpu)
 	int node;
 
 	per_cpu(cpu_state, cpu) = CPU_UP_PREPARE;
-	octeon_bootvector[coreid] = octeon_hotplug_entry_raw;
+	octeon_bootvector[coreid].target_ptr = (uint64_t)octeon_hotplug_entry_raw;
 	mb();
 	/* Convert coreid to node,core spair and send NMI to target core */
 	node = cvmx_coremask_core_to_node(coreid);
diff --git a/arch/mips/cavium-octeon/unplug-cpu.c b/arch/mips/cavium-octeon/unplug-cpu.c
index 8a3943f..fdaca18 100644
--- a/arch/mips/cavium-octeon/unplug-cpu.c
+++ b/arch/mips/cavium-octeon/unplug-cpu.c
@@ -16,7 +16,7 @@
 #include <asm/octeon/cvmx-app-hotplug.h>
 #include <asm/octeon/cvmx-spinlock.h>
 
-static void **octeon_bootvector;
+static struct cvmx_boot_vector_element *octeon_bootvector;
 static void *octeon_replug_ll_raw;
 asmlinkage void octeon_replug_ll(void);
 
@@ -61,7 +61,7 @@ static ssize_t __ref plug_cpu_store(struct device *dev,
 			goto not_available_out;
 		}
 
-		octeon_bootvector[coreid] = octeon_replug_ll_raw;
+		octeon_bootvector[coreid].target_ptr = (uint64_t)octeon_replug_ll_raw;
 		mb();
 		node = cvmx_coremask_core_to_node(coreid);
 		coreid = cvmx_coremask_core_on_node(coreid);
diff --git a/drivers/watchdog/octeon-wdt-main.c b/drivers/watchdog/octeon-wdt-main.c
index 03fbf75..2c5dbad 100644
--- a/drivers/watchdog/octeon-wdt-main.c
+++ b/drivers/watchdog/octeon-wdt-main.c
@@ -117,7 +117,7 @@ MODULE_PARM_DESC(disable,
 
 static unsigned long octeon_wdt_is_open;
 static char expect_close;
-static void **octeon_wdt_bootvector;
+static struct cvmx_boot_vector_element *octeon_wdt_bootvector;
 
 void octeon_wdt_nmi_stage2(void);
 
@@ -346,7 +346,7 @@ static void octeon_wdt_setup_interrupt(int cpu)
 	core = cpu2core(cpu);
 	node = cpu_to_node(cpu);
 
-	octeon_wdt_bootvector[core] = octeon_wdt_nmi_stage2;
+	octeon_wdt_bootvector[core].target_ptr = (uint64_t)octeon_wdt_nmi_stage2;
 
 	/* Disable it before doing anything with the interrupts. */
 	ciu_wdog.u64 = 0;
-- 
1.8.2.1

