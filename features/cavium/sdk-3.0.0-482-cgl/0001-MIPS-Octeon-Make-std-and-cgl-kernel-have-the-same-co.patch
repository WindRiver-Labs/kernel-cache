From 020c4d3ef4e61ff48331c7d409d0b53db4cd71b7 Mon Sep 17 00:00:00 2001
From: Bin Jiang <bin.jiang@windriver.com>
Date: Thu, 2 May 2013 17:02:58 +0800
Subject: [PATCH] MIPS: Octeon: Make -std and -cgl kernel have the same
 context

This reverts commit 505dff737fee5c2145c1983d438882bce87ea545

The commit "GRSecurity 2.9.1 -- 201207080925" makes -std and -cgl
kernel have the different context, so adjust reverse the patch.

Another patch will recover them.

Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 arch/mips/include/asm/thread_info.h  |    7 +------
 drivers/char/ipmi/ipmi_msghandler.c  |    2 +-
 drivers/staging/octeon/ethernet-rx.c |   12 ++++++------
 drivers/staging/octeon/ethernet.c    |    8 ++++----
 include/linux/rio.h                  |    2 +-
 5 files changed, 13 insertions(+), 18 deletions(-)

diff --git a/arch/mips/include/asm/thread_info.h b/arch/mips/include/asm/thread_info.h
index f5aeadf..5ac878b 100644
--- a/arch/mips/include/asm/thread_info.h
+++ b/arch/mips/include/asm/thread_info.h
@@ -124,8 +124,6 @@ register struct thread_info *__current_thread_info __asm__("$28");
 #define TIF_FPUBOUND		24	/* thread bound to FPU-full CPU set */
 #define TIF_LOAD_WATCH		25	/* If set, load watch registers */
 #define TIF_KERNEL_TRACE	30	/* kernel trace active */
-/* li takes a 32bit immediate */
-#define TIF_GRSEC_SETXID	29	/* update credentials on syscall entry/exit */
 #define TIF_SYSCALL_TRACE	31	/* syscall trace active */
 
 #ifdef CONFIG_MIPS32_O32
@@ -150,12 +148,9 @@ register struct thread_info *__current_thread_info __asm__("$28");
 #define _TIF_32BIT_ADDR		(1<<TIF_32BIT_ADDR)
 #define _TIF_FPUBOUND		(1<<TIF_FPUBOUND)
 #define _TIF_LOAD_WATCH		(1<<TIF_LOAD_WATCH)
-#define _TIF_GRSEC_SETXID	(1<<TIF_GRSEC_SETXID)
-
-#define _TIF_SYSCALL_WORK	(_TIF_SYSCALL_TRACE | _TIF_SYSCALL_AUDIT | _TIF_GRSEC_SETXID)
 
 /* work to do in syscall_trace_leave() */
-#define _TIF_WORK_SYSCALL_EXIT	(_TIF_SYSCALL_TRACE | _TIF_SYSCALL_AUDIT | _TIF_GRSEC_SETXID)
+#define _TIF_WORK_SYSCALL_EXIT	(_TIF_SYSCALL_TRACE | _TIF_SYSCALL_AUDIT)
 
 /* work to do on interrupt/exception return */
 #define _TIF_WORK_MASK		(0x0000ffef &				\
diff --git a/drivers/char/ipmi/ipmi_msghandler.c b/drivers/char/ipmi/ipmi_msghandler.c
index 604c5ba..3469587 100644
--- a/drivers/char/ipmi/ipmi_msghandler.c
+++ b/drivers/char/ipmi/ipmi_msghandler.c
@@ -2884,7 +2884,7 @@ int ipmi_register_smi(struct ipmi_smi_handlers *handlers,
 	INIT_LIST_HEAD(&intf->cmd_rcvrs);
 	init_waitqueue_head(&intf->waitq);
 	for (i = 0; i < IPMI_NUM_STATS; i++)
-		atomic_set_unchecked(&intf->stats[i], 0);
+		atomic_set(&intf->stats[i], 0);
 
 	intf->proc_dir = NULL;
 
diff --git a/drivers/staging/octeon/ethernet-rx.c b/drivers/staging/octeon/ethernet-rx.c
index a3a9e36..d91751f 100644
--- a/drivers/staging/octeon/ethernet-rx.c
+++ b/drivers/staging/octeon/ethernet-rx.c
@@ -421,11 +421,11 @@ static int cvm_oct_napi_poll(struct napi_struct *napi, int budget)
 				/* Increment RX stats for virtual ports */
 				if (work->ipprt >= CVMX_PIP_NUM_INPUT_PORTS) {
 #ifdef CONFIG_64BIT
-					atomic64_add_unchecked(1, (atomic64_unchecked_t *)&priv->stats.rx_packets);
-					atomic64_add_unchecked(skb->len, (atomic64_unchecked_t *)&priv->stats.rx_bytes);
+					atomic64_add(1, (atomic64_t *)&priv->stats.rx_packets);
+					atomic64_add(skb->len, (atomic64_t *)&priv->stats.rx_bytes);
 #else
-					atomic_add_unchecked(1, (atomic_unchecked_t *)&priv->stats.rx_packets);
-					atomic_add_unchecked(skb->len, (atomic_unchecked_t *)&priv->stats.rx_bytes);
+					atomic_add(1, (atomic_t *)&priv->stats.rx_packets);
+					atomic_add(skb->len, (atomic_t *)&priv->stats.rx_bytes);
 #endif
 				}
 				netif_receive_skb(skb);
@@ -437,9 +437,9 @@ static int cvm_oct_napi_poll(struct napi_struct *napi, int budget)
 					   dev->name);
 				*/
 #ifdef CONFIG_64BIT
-				atomic64_unchecked_add(1, (atomic64_unchecked_t *)&priv->stats.rx_dropped);
+				atomic64_add(1, (atomic64_t *)&priv->stats.rx_dropped);
 #else
-				atomic_add_unchecked(1, (atomic_unchecked_t *)&priv->stats.rx_dropped);
+				atomic_add(1, (atomic_t *)&priv->stats.rx_dropped);
 #endif
 				dev_kfree_skb_irq(skb);
 			}
diff --git a/drivers/staging/octeon/ethernet.c b/drivers/staging/octeon/ethernet.c
index 71eb239..60cba81 100644
--- a/drivers/staging/octeon/ethernet.c
+++ b/drivers/staging/octeon/ethernet.c
@@ -259,11 +259,11 @@ static struct net_device_stats *cvm_oct_common_get_stats(struct net_device *dev)
 		 * since the RX tasklet also increments it.
 		 */
 #ifdef CONFIG_64BIT
-		atomic64_add_unchecked(rx_status.dropped_packets,
-			     (atomic64_unchecked_t *)&priv->stats.rx_dropped);
+		atomic64_add(rx_status.dropped_packets,
+			     (atomic64_t *)&priv->stats.rx_dropped);
 #else
-		atomic_add_unchecked(rx_status.dropped_packets,
-			     (atomic_unchecked_t *)&priv->stats.rx_dropped);
+		atomic_add(rx_status.dropped_packets,
+			     (atomic_t *)&priv->stats.rx_dropped);
 #endif
 	}
 
diff --git a/include/linux/rio.h b/include/linux/rio.h
index c6858a2..4d50611 100644
--- a/include/linux/rio.h
+++ b/include/linux/rio.h
@@ -315,7 +315,7 @@ struct rio_ops {
 				 int mbox, void *buffer, size_t len);
 	int (*add_inb_buffer)(struct rio_mport *mport, int mbox, void *buf);
 	void *(*get_inb_message)(struct rio_mport *mport, int mbox);
-} __no_const;
+};
 
 #define RIO_RESOURCE_MEM	0x00000100
 #define RIO_RESOURCE_DOORBELL	0x00000200
-- 
1.7.10.4

