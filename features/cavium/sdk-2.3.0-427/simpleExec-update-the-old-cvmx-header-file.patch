From 323e4bb2bfb27edd7d386b172f78e66527ef73fa Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Wed, 5 Sep 2012 12:02:12 +0800
Subject: [PATCH 07/27] simpleExec: update the old cvmx-* header file

Based on SDK 2.3.0-427

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/include/asm/octeon/cvmx-bootinfo.h    |    2 +
 arch/mips/include/asm/octeon/cvmx-ciu-defs.h    |   12 ++++
 arch/mips/include/asm/octeon/cvmx-config.h      |   59 +++++++++++++++--
 arch/mips/include/asm/octeon/cvmx-gmxx-defs.h   |   33 ++++++++++
 arch/mips/include/asm/octeon/cvmx-helper-util.h |   28 ++++++++
 arch/mips/include/asm/octeon/cvmx-helper.h      |    3 +
 arch/mips/include/asm/octeon/cvmx-mio-defs.h    |    1 +
 arch/mips/include/asm/octeon/cvmx-pexp-defs.h   |    3 +
 arch/mips/include/asm/octeon/cvmx-pip-defs.h    |   50 +++++++++++++++
 arch/mips/include/asm/octeon/cvmx-pko-defs.h    |   78 +++++++++++++++++++++++
 arch/mips/include/asm/octeon/cvmx-pko.h         |   72 ++++++++++++++++-----
 arch/mips/include/asm/octeon/cvmx-sriox-defs.h  |    1 +
 arch/mips/include/asm/octeon/cvmx.h             |   12 ++++
 13 files changed, 334 insertions(+), 20 deletions(-)

diff --git a/arch/mips/include/asm/octeon/cvmx-bootinfo.h b/arch/mips/include/asm/octeon/cvmx-bootinfo.h
index 1db1dc2..cb719c0 100644
--- a/arch/mips/include/asm/octeon/cvmx-bootinfo.h
+++ b/arch/mips/include/asm/octeon/cvmx-bootinfo.h
@@ -186,6 +186,7 @@ enum cvmx_board_types_enum {
 	CVMX_BOARD_TYPE_REDWING = 43,
 	CVMX_BOARD_TYPE_NIC68_4 = 44,
 	CVMX_BOARD_TYPE_NIC10E_66 = 45,
+	CVMX_BOARD_TYPE_EBB6100 = 46,
 	CVMX_BOARD_TYPE_MAX,
 
 	/*
@@ -296,6 +297,7 @@ static inline const char *cvmx_board_type_to_string(enum
 		ENUM_BRD_TYPE_CASE(CVMX_BOARD_TYPE_REDWING)
 		ENUM_BRD_TYPE_CASE(CVMX_BOARD_TYPE_NIC68_4)
 		ENUM_BRD_TYPE_CASE(CVMX_BOARD_TYPE_NIC10E_66)
+		ENUM_BRD_TYPE_CASE(CVMX_BOARD_TYPE_EBB6100)
 		ENUM_BRD_TYPE_CASE(CVMX_BOARD_TYPE_MAX)
 
 			/* Customer boards listed here */
diff --git a/arch/mips/include/asm/octeon/cvmx-ciu-defs.h b/arch/mips/include/asm/octeon/cvmx-ciu-defs.h
index 27cead3..11d20c0 100644
--- a/arch/mips/include/asm/octeon/cvmx-ciu-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-ciu-defs.h
@@ -66,6 +66,7 @@
 #define CVMX_CIU_SOFT_BIST (CVMX_ADD_IO_SEG(0x0001070000000738ull))
 #define CVMX_CIU_SOFT_PRST (CVMX_ADD_IO_SEG(0x0001070000000748ull))
 #define CVMX_CIU_SOFT_PRST1 (CVMX_ADD_IO_SEG(0x0001070000000758ull))
+#define CVMX_CIU_SOFT_PRST2 (CVMX_ADD_IO_SEG(0x00010700000007D8ull))
 #define CVMX_CIU_SOFT_RST (CVMX_ADD_IO_SEG(0x0001070000000740ull))
 #define CVMX_CIU_TIMX(offset) (CVMX_ADD_IO_SEG(0x0001070000000480ull) + ((offset) & 3) * 8)
 #define CVMX_CIU_WDOGX(offset) (CVMX_ADD_IO_SEG(0x0001070000000500ull) + ((offset) & 15) * 8)
@@ -2225,6 +2226,17 @@ union cvmx_ciu_soft_prst1 {
 	struct cvmx_ciu_soft_prst1_s cn63xxp1;
 };
 
+union cvmx_ciu_soft_prst2
+{
+	uint64_t u64;
+	struct cvmx_ciu_soft_prst2_s
+	{
+		uint64_t reserved_1_63:63;
+		uint64_t soft_prst:1;
+	} s;
+	struct cvmx_ciu_soft_prst2_s cn66xx;
+};
+
 union cvmx_ciu_soft_rst {
 	uint64_t u64;
 	struct cvmx_ciu_soft_rst_s {
diff --git a/arch/mips/include/asm/octeon/cvmx-config.h b/arch/mips/include/asm/octeon/cvmx-config.h
index 26835d1..5068e29 100644
--- a/arch/mips/include/asm/octeon/cvmx-config.h
+++ b/arch/mips/include/asm/octeon/cvmx-config.h
@@ -1,24 +1,73 @@
 #ifndef __CVMX_CONFIG_H__
 #define __CVMX_CONFIG_H__
 
+extern int cvmx_helper_ports_on_interface(int);
+
+static inline int octeon_pko_get_total_queues(void)
+{
+        if (OCTEON_IS_MODEL(OCTEON_CN38XX))
+                return 128;
+        else if (OCTEON_IS_MODEL(OCTEON_CN3XXX))
+                return 32;
+        else if (OCTEON_IS_MODEL(OCTEON_CN50XX))
+                return 32;
+        else
+                return 256;
+}
+
+
+static inline int octeon_pko_lockless(void)
+{
+#ifdef CONFIG_OCTEON_ETHERNET_LOCKED
+        return 0;
+#else
+        int queues = 16 * (cvmx_helper_ports_on_interface(0) + cvmx_helper_ports_on_interface(1));
+
+        /* CN3XXX require workarounds in xmit.  Disable lockless for
+         * CN3XXX to optimize the lockless case with out the workarounds. */
+        if (OCTEON_IS_MODEL(OCTEON_CN3XXX))
+                return 0;
+
+        if (OCTEON_IS_MODEL(OCTEON_CN68XX))
+                return 0;
+
+        queues += 4; /* For PCI/PCIe */
+
+        if ((OCTEON_IS_MODEL(OCTEON_CN56XX) || OCTEON_IS_MODEL(OCTEON_CN52XX) || OCTEON_IS_MODEL(OCTEON_CN6XXX)))
+                queues += 4; /* For loopback */
+
+        if (octeon_has_feature(OCTEON_FEATURE_SRIO))
+                queues += 4; /* For SRIO */
+
+	return queues <= octeon_pko_get_total_queues();
+#endif
+}
+
 /************************* Config Specific Defines ************************/
 #define CVMX_LLM_NUM_PORTS 1
 #define CVMX_NULL_POINTER_PROTECT 1
 #define CVMX_ENABLE_DEBUG_PRINTS 1
 /* PKO queues per port for interface 0 (ports 0-15) */
-#define CVMX_PKO_QUEUES_PER_PORT_INTERFACE0 1
+#define CVMX_PKO_QUEUES_PER_PORT_INTERFACE0 (octeon_pko_lockless() ? 16 : 1)
 /* PKO queues per port for interface 1 (ports 16-31) */
-#define CVMX_PKO_QUEUES_PER_PORT_INTERFACE1 1
-/* Limit on the number of PKO ports enabled for interface 0 */
+#define CVMX_PKO_QUEUES_PER_PORT_INTERFACE1 (octeon_pko_lockless() ? 16 : 1)
+
+#ifdef CONFIG_OCTEON_ETHERNET_LOCKED
 #define CVMX_PKO_MAX_PORTS_INTERFACE0 CVMX_HELPER_PKO_MAX_PORTS_INTERFACE0
-/* Limit on the number of PKO ports enabled for interface 1 */
 #define CVMX_PKO_MAX_PORTS_INTERFACE1 CVMX_HELPER_PKO_MAX_PORTS_INTERFACE1
+#else
+#define CVMX_PKO_MAX_PORTS_INTERFACE0 cvmx_helper_ports_on_interface(0)
+#define CVMX_PKO_MAX_PORTS_INTERFACE1 cvmx_helper_ports_on_interface(1)
+#endif
+
 /* PKO queues per port for PCI (ports 32-35) */
 #define CVMX_PKO_QUEUES_PER_PORT_PCI 1
 /* PKO queues per port for Loop devices (ports 36-39) */
 #define CVMX_PKO_QUEUES_PER_PORT_LOOP 1
+#define CVMX_PKO_QUEUES_PER_PORT_SRIO0 2
+#define CVMX_PKO_QUEUES_PER_PORT_SRIO1 2
+#define CVMX_PKO_QUEUES_PER_PORT_SRIO2 2
 
-/************************* FPA allocation *********************************/
 /* Pool sizes in bytes, must be multiple of a cache line */
 #define CVMX_FPA_POOL_0_SIZE (16 * CVMX_CACHE_LINE_SIZE)
 #define CVMX_FPA_POOL_1_SIZE (1 * CVMX_CACHE_LINE_SIZE)
diff --git a/arch/mips/include/asm/octeon/cvmx-gmxx-defs.h b/arch/mips/include/asm/octeon/cvmx-gmxx-defs.h
index 946a43a..8fcece7 100644
--- a/arch/mips/include/asm/octeon/cvmx-gmxx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-gmxx-defs.h
@@ -363,6 +363,39 @@ union cvmx_gmxx_inf_mode {
 	struct cvmx_gmxx_inf_mode_cn52xx cn56xxp1;
 	struct cvmx_gmxx_inf_mode_cn31xx cn58xx;
 	struct cvmx_gmxx_inf_mode_cn31xx cn58xxp1;
+	struct cvmx_gmxx_inf_mode_cn61xx {
+		uint64_t reserved_12_63:52;
+		uint64_t speed:4;
+		uint64_t reserved_5_7:3;
+		uint64_t mode:1;
+		uint64_t reserved_2_3:2;
+		uint64_t en:1;
+		uint64_t type:1;
+	} cn61xx;
+	struct cvmx_gmxx_inf_mode_cn61xx cn63xx;
+	struct cvmx_gmxx_inf_mode_cn61xx cn63xxp1;
+	struct cvmx_gmxx_inf_mode_cn66xx {
+		uint64_t reserved_20_63:44;
+		uint64_t rate:4;
+		uint64_t reserved_12_15:4;
+		uint64_t speed:4;
+		uint64_t reserved_5_7:3;
+		uint64_t mode:1;
+		uint64_t reserved_2_3:2;
+		uint64_t en:1;
+		uint64_t type:1;
+	} cn66xx;
+	struct cvmx_gmxx_inf_mode_cn68xx {
+		uint64_t reserved_12_63:52;
+		uint64_t speed:4;
+		uint64_t reserved_7_7:1;
+		uint64_t mode:3;
+		uint64_t reserved_2_3:2;
+		uint64_t en:1;
+		uint64_t type:1;
+	} cn68xx;
+	struct cvmx_gmxx_inf_mode_cn68xx      cn68xxp1;
+	struct cvmx_gmxx_inf_mode_cn61xx      cnf71xx;
 };
 
 union cvmx_gmxx_nxa_adr {
diff --git a/arch/mips/include/asm/octeon/cvmx-helper-util.h b/arch/mips/include/asm/octeon/cvmx-helper-util.h
index 6a6e52f..1aa56ab 100644
--- a/arch/mips/include/asm/octeon/cvmx-helper-util.h
+++ b/arch/mips/include/asm/octeon/cvmx-helper-util.h
@@ -34,6 +34,18 @@
 #ifndef __CVMX_HELPER_UTIL_H__
 #define __CVMX_HELPER_UTIL_H__
 
+#ifdef CVMX_ENABLE_HELPER_FUNCTIONS
+
+typedef char cvmx_pknd_t;
+typedef char cvmx_bpid_t;
+
+#define CVMX_INVALID_PKND	((cvmx_pknd_t) -1)
+#define CVMX_INVALID_BPID	((cvmx_bpid_t) -1)
+#define CVMX_MAX_PKND		((cvmx_pknd_t) 64)
+#define CVMX_MAX_BPID		((cvmx_bpid_t) 64)
+
+#define CVMX_HELPER_MAX_IFACE           9
+
 /**
  * Convert a interface mode into a human readable string
  *
@@ -111,6 +123,11 @@ extern int __cvmx_helper_setup_gmx(int interface, int num_ports);
  */
 extern int cvmx_helper_get_ipd_port(int interface, int port);
 
+enum cvmx_pko_padding {
+	CVMX_PKO_PADDING_NONE = 0,
+	CVMX_PKO_PADDING_60 = 1,
+};
+
 /**
  * Returns the IPD/PKO port number for the first port on the given
  * interface.
@@ -193,6 +210,8 @@ static inline void cvmx_helper_free_packet_data(cvmx_wqe_t *work)
 	}
 }
 
+#endif
+
 /**
  * Returns the interface number for an IPD/PKO port number.
  *
@@ -212,4 +231,13 @@ extern int cvmx_helper_get_interface_num(int ipd_port);
  */
 extern int cvmx_helper_get_interface_index_num(int ipd_port);
 
+int __cvmx_helper_init_interface(int interface, int num_ipd_ports, int has_fcs, enum cvmx_pko_padding pad);
+
+int __cvmx_helper_get_has_fcs(int interface);
+int cvmx_helper_get_pknd(int interface, int port);
+int cvmx_helper_get_pko_port(int interface, int port);
+int cvmx_helper_get_bpid(int interface, int port);
+
+enum cvmx_pko_padding __cvmx_helper_get_pko_padding(int interface);
+
 #endif /* __CVMX_HELPER_H__ */
diff --git a/arch/mips/include/asm/octeon/cvmx-helper.h b/arch/mips/include/asm/octeon/cvmx-helper.h
index 3169cd7..4b61c90 100644
--- a/arch/mips/include/asm/octeon/cvmx-helper.h
+++ b/arch/mips/include/asm/octeon/cvmx-helper.h
@@ -49,6 +49,8 @@ typedef enum {
 	CVMX_HELPER_INTERFACE_MODE_PICMG,
 	CVMX_HELPER_INTERFACE_MODE_NPI,
 	CVMX_HELPER_INTERFACE_MODE_LOOP,
+	CVMX_HELPER_INTERFACE_MODE_SRIO,
+	CVMX_HELPER_INTERFACE_MODE_RXAUI,
 } cvmx_helper_interface_mode_t;
 
 typedef union {
@@ -69,6 +71,7 @@ typedef union {
 #include "cvmx-helper-rgmii.h"
 #include "cvmx-helper-sgmii.h"
 #include "cvmx-helper-spi.h"
+#include "cvmx-helper-srio.h"
 #include "cvmx-helper-util.h"
 #include "cvmx-helper-xaui.h"
 
diff --git a/arch/mips/include/asm/octeon/cvmx-mio-defs.h b/arch/mips/include/asm/octeon/cvmx-mio-defs.h
index b177412..4574793 100644
--- a/arch/mips/include/asm/octeon/cvmx-mio-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-mio-defs.h
@@ -1940,6 +1940,7 @@ union cvmx_mio_qlmx_cfg {
 	} cn68xx;
 	struct cvmx_mio_qlmx_cfg_cn68xx cn68xxp1;
 };
+typedef union cvmx_mio_qlmx_cfg cvmx_mio_qlmx_cfg_t;
 
 union cvmx_mio_rst_boot {
 	uint64_t u64;
diff --git a/arch/mips/include/asm/octeon/cvmx-pexp-defs.h b/arch/mips/include/asm/octeon/cvmx-pexp-defs.h
index 4438d21..3865a7f 100644
--- a/arch/mips/include/asm/octeon/cvmx-pexp-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pexp-defs.h
@@ -221,4 +221,7 @@
 #define CVMX_PEXP_SLI_TX_PIPE (CVMX_ADD_IO_SEG(0x00011F0000011230ull))
 #define CVMX_PEXP_SLI_WINDOW_CTL (CVMX_ADD_IO_SEG(0x00011F00000102E0ull))
 
+#define CVMX_PEXP_SLI_PORTX_PKIND(offset) (CVMX_ADD_IO_SEG(0x00011F0000010800ull) + ((offset) & 31) * 16)
+#define CVMX_PEXP_SLI_TX_PIPE (CVMX_ADD_IO_SEG(0x00011F0000011230ull))
+
 #endif
diff --git a/arch/mips/include/asm/octeon/cvmx-pip-defs.h b/arch/mips/include/asm/octeon/cvmx-pip-defs.h
index 5a36910..0ac4e91 100644
--- a/arch/mips/include/asm/octeon/cvmx-pip-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pip-defs.h
@@ -130,6 +130,9 @@ enum cvmx_pip_port_parse_mode {
 #define CVMX_PIP_TODO_ENTRY \
 	 CVMX_ADD_IO_SEG(0x00011800A0000078ull)
 
+#define CVMX_PIP_SUB_PKIND_FCSX(block_id) \
+	(CVMX_ADD_IO_SEG(0x00011800A0080000ull))
+
 union cvmx_pip_bck_prs {
 	uint64_t u64;
 	struct cvmx_pip_bck_prs_s {
@@ -711,6 +714,10 @@ union cvmx_pip_prt_cfgx {
 	struct cvmx_pip_prt_cfgx_s cn52xx;
 	struct cvmx_pip_prt_cfgx_s cn52xxp1;
 	struct cvmx_pip_prt_cfgx_s cn56xx;
+	struct cvmx_pip_prt_cfgx_s cn61xx;
+	struct cvmx_pip_prt_cfgx_s cn63xx;
+	struct cvmx_pip_prt_cfgx_s cn63xxp1;
+	struct cvmx_pip_prt_cfgx_s cn66xx;
 	struct cvmx_pip_prt_cfgx_cn50xx cn56xxp1;
 	struct cvmx_pip_prt_cfgx_cn58xx {
 		uint64_t reserved_37_63:27;
@@ -734,6 +741,40 @@ union cvmx_pip_prt_cfgx {
 		uint64_t skip:7;
 	} cn58xx;
 	struct cvmx_pip_prt_cfgx_cn58xx cn58xxp1;
+	struct cvmx_pip_prt_cfgx_cn68xx
+	{
+		uint64_t reserved_55_63:9;
+		uint64_t ih_pri:1;
+		uint64_t len_chk_sel:1;
+		uint64_t pad_len:1;
+		uint64_t vlan_len:1;
+		uint64_t lenerr_en:1;
+		uint64_t maxerr_en:1;
+		uint64_t minerr_en:1;
+		uint64_t grp_wat_47:4;
+		uint64_t qos_wat_47:4;
+		uint64_t reserved_37_39:3;
+		uint64_t rawdrp:1;
+		uint64_t tag_inc:2;
+		uint64_t dyn_rs:1;
+		uint64_t inst_hdr:1;
+		uint64_t grp_wat:4;
+		uint64_t hg_qos:1;
+		uint64_t qos:3;
+		uint64_t qos_wat:4;
+		uint64_t reserved_19_19:1;
+		uint64_t qos_vod:1;
+		uint64_t qos_diff:1;
+		uint64_t qos_vlan:1;
+		uint64_t reserved_13_15:3;
+		uint64_t crc_en:1;
+		uint64_t higig_en:1;
+		uint64_t dsa_en:1;
+		uint64_t mode:2;
+		uint64_t reserved_7_7:1;
+		uint64_t skip:7;
+	} cn68xx;
+	struct cvmx_pip_prt_cfgx_cn68xx cn68xxp1;
 };
 
 union cvmx_pip_prt_tagx {
@@ -1264,4 +1305,13 @@ union cvmx_pip_todo_entry {
 	struct cvmx_pip_todo_entry_s cn58xxp1;
 };
 
+union cvmx_pip_sub_pkind_fcsx {
+        uint64_t u64;
+        struct cvmx_pip_sub_pkind_fcsx_s {
+		uint64_t port_bit                     : 64;
+        } s;
+        struct cvmx_pip_sub_pkind_fcsx_s      cn68xx;
+	struct cvmx_pip_sub_pkind_fcsx_s      cn68xxp1;
+};
+
 #endif
diff --git a/arch/mips/include/asm/octeon/cvmx-pko-defs.h b/arch/mips/include/asm/octeon/cvmx-pko-defs.h
index 50e779c..ac197c4 100644
--- a/arch/mips/include/asm/octeon/cvmx-pko-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pko-defs.h
@@ -111,6 +111,15 @@
 #define CVMX_PKO_REG_READ_IDX \
 	 CVMX_ADD_IO_SEG(0x0001180050000008ull)
 
+#define CVMX_PKO_MEM_IPORT_PTRS	\
+	 CVMX_ADD_IO_SEG(0x0001180050001030ull)
+#define CVMX_PKO_MEM_IQUEUE_PTRS \
+	CVMX_ADD_IO_SEG(0x0001180050001040ull)
+
+#define CVMX_PKO_REG_ENGINE_STORAGEX(offset) \
+	(CVMX_ADD_IO_SEG(0x0001180050000300ull) + ((offset) & 1) * 8)
+
+
 union cvmx_pko_mem_count0 {
 	uint64_t u64;
 	struct cvmx_pko_mem_count0_s {
@@ -655,6 +664,29 @@ union cvmx_pko_mem_debug9 {
 	struct cvmx_pko_mem_debug9_cn50xx cn58xxp1;
 };
 
+union cvmx_pko_mem_iport_ptrs
+{
+	uint64_t u64;
+	struct cvmx_pko_mem_iport_ptrs_s
+	{
+		uint64_t reserved_63_63:1;
+		uint64_t crc:1;
+		uint64_t static_p:1;
+		uint64_t qos_mask:8;
+		uint64_t min_pkt:3;
+		uint64_t reserved_31_49:19;
+		uint64_t pipe:7;
+		uint64_t reserved_21_23:3;
+		uint64_t intr:5;
+		uint64_t reserved_13_15:3;
+		uint64_t eid:5;
+		uint64_t reserved_7_7:1;
+		uint64_t ipid:7;
+	} s;
+	struct cvmx_pko_mem_iport_ptrs_s cn68xx;
+	struct cvmx_pko_mem_iport_ptrs_s cn68xxp1;
+};
+
 union cvmx_pko_mem_port_ptrs {
 	uint64_t u64;
 	struct cvmx_pko_mem_port_ptrs_s {
@@ -672,6 +704,52 @@ union cvmx_pko_mem_port_ptrs {
 	struct cvmx_pko_mem_port_ptrs_s cn56xxp1;
 };
 
+union cvmx_pko_mem_iqueue_ptrs
+{
+	uint64_t u64;
+	struct cvmx_pko_mem_iqueue_ptrs_s
+	{
+		uint64_t s_tail:1;
+		uint64_t static_p:1;
+		uint64_t static_q:1;
+		uint64_t qos_mask:8;
+		uint64_t buf_ptr:31;
+		uint64_t tail:1;
+		uint64_t index:5;
+		uint64_t reserved_15_15:1;
+		uint64_t ipid:7;
+		uint64_t qid:8;
+	} s;
+	struct cvmx_pko_mem_iqueue_ptrs_s cn68xx;
+	struct cvmx_pko_mem_iqueue_ptrs_s cn68xxp1;
+};
+
+union cvmx_pko_reg_engine_storagex
+{
+	uint64_t u64;
+	struct cvmx_pko_reg_engine_storagex_s
+	{
+		uint64_t engine15:4;
+		uint64_t engine14:4;
+		uint64_t engine13:4;
+		uint64_t engine12:4;
+		uint64_t engine11:4;
+		uint64_t engine10:4;
+		uint64_t engine9:4;
+		uint64_t engine8:4;
+		uint64_t engine7:4;
+		uint64_t engine6:4;
+		uint64_t engine5:4;
+		uint64_t engine4:4;
+		uint64_t engine3:4;
+		uint64_t engine2:4;
+		uint64_t engine1:4;
+		uint64_t engine0:4;
+	} s;
+	struct cvmx_pko_reg_engine_storagex_s cn68xx;
+	struct cvmx_pko_reg_engine_storagex_s cn68xxp1;
+};
+
 union cvmx_pko_mem_port_qos {
 	uint64_t u64;
 	struct cvmx_pko_mem_port_qos_s {
diff --git a/arch/mips/include/asm/octeon/cvmx-pko.h b/arch/mips/include/asm/octeon/cvmx-pko.h
index de3412a..29b508c 100644
--- a/arch/mips/include/asm/octeon/cvmx-pko.h
+++ b/arch/mips/include/asm/octeon/cvmx-pko.h
@@ -62,6 +62,7 @@
 #include "cvmx-pow.h"
 #include "cvmx-cmd-queue.h"
 #include "cvmx-pko-defs.h"
+#include "cvmx-helper-cfg.h"
 
 /* Adjust the command buffer size by 1 word so that in the case of using only
  * two word PKO commands no command words stradle buffers.  The useful values
@@ -70,11 +71,17 @@
 
 #define CVMX_PKO_MAX_OUTPUT_QUEUES_STATIC 256
 #define CVMX_PKO_MAX_OUTPUT_QUEUES      ((OCTEON_IS_MODEL(OCTEON_CN31XX) || \
-	OCTEON_IS_MODEL(OCTEON_CN3010) || OCTEON_IS_MODEL(OCTEON_CN3005) || \
-	OCTEON_IS_MODEL(OCTEON_CN50XX)) ? 32 : \
-		(OCTEON_IS_MODEL(OCTEON_CN58XX) || \
-		OCTEON_IS_MODEL(OCTEON_CN56XX)) ? 256 : 128)
-#define CVMX_PKO_NUM_OUTPUT_PORTS       40
+                                          OCTEON_IS_MODEL(OCTEON_CN3010) || \
+                                          OCTEON_IS_MODEL(OCTEON_CN3005) || \
+                                          OCTEON_IS_MODEL(OCTEON_CN50XX)) ? \
+                                          32 :                              \
+                                         (OCTEON_IS_MODEL(OCTEON_CN58XX) || \
+                                          OCTEON_IS_MODEL(OCTEON_CN56XX) || \
+                                          OCTEON_IS_MODEL(OCTEON_CN52XX) || \
+                                          OCTEON_IS_MODEL(OCTEON_CN6XXX)) ? \
+                                          256 : 128)
+
+#define CVMX_PKO_NUM_OUTPUT_PORTS      ((OCTEON_IS_MODEL(OCTEON_CN63XX)) ? 44 : (OCTEON_IS_MODEL(OCTEON_CN66XX) ? 46 : 40))
 /* use this for queues that are not used */
 #define CVMX_PKO_MEM_QUEUE_PTRS_ILLEGAL_PID 63
 #define CVMX_PKO_QUEUE_STATIC_PRIORITY  9
@@ -494,6 +501,26 @@ static inline int cvmx_pko_get_base_queue_per_core(int port, int core)
 		    4 * CVMX_PKO_QUEUES_PER_PORT_PCI + (port -
 							36) *
 		    CVMX_PKO_QUEUES_PER_PORT_LOOP;
+	else if ((port >= 40) && (port < 42))
+		return CVMX_PKO_MAX_PORTS_INTERFACE0 * CVMX_PKO_QUEUES_PER_PORT_INTERFACE0 +
+		       CVMX_PKO_MAX_PORTS_INTERFACE1 * CVMX_PKO_QUEUES_PER_PORT_INTERFACE1 +
+		       4 * CVMX_PKO_QUEUES_PER_PORT_PCI +
+		       4 * CVMX_PKO_QUEUES_PER_PORT_LOOP +
+		       (port-40) * CVMX_PKO_QUEUES_PER_PORT_SRIO0;
+	else if ((port >= 42) && (port < 44))
+		return CVMX_PKO_MAX_PORTS_INTERFACE0 * CVMX_PKO_QUEUES_PER_PORT_INTERFACE0 +
+		       CVMX_PKO_MAX_PORTS_INTERFACE1 * CVMX_PKO_QUEUES_PER_PORT_INTERFACE1 +
+		       4 * CVMX_PKO_QUEUES_PER_PORT_PCI +
+		       4 * CVMX_PKO_QUEUES_PER_PORT_LOOP +
+		       2 * CVMX_PKO_QUEUES_PER_PORT_SRIO0 +
+		       (port-42) * CVMX_PKO_QUEUES_PER_PORT_SRIO1;
+	else if ((port >= 44) && (port < 46))
+		return CVMX_PKO_MAX_PORTS_INTERFACE0 * CVMX_PKO_QUEUES_PER_PORT_INTERFACE0 +
+		       CVMX_PKO_MAX_PORTS_INTERFACE1 * CVMX_PKO_QUEUES_PER_PORT_INTERFACE1 +
+		       4 * CVMX_PKO_QUEUES_PER_PORT_PCI +
+		       4 * CVMX_PKO_QUEUES_PER_PORT_LOOP +
+		       4 * CVMX_PKO_QUEUES_PER_PORT_SRIO0 +
+		       (port-44) * CVMX_PKO_QUEUES_PER_PORT_SRIO2;
 	else
 		/* Given the limit on the number of ports we can map to
 		 * CVMX_MAX_OUTPUT_QUEUES_STATIC queues (currently 256,
@@ -522,16 +549,28 @@ static inline int cvmx_pko_get_base_queue(int port)
  */
 static inline int cvmx_pko_get_num_queues(int port)
 {
-	if (port < 16)
-		return CVMX_PKO_QUEUES_PER_PORT_INTERFACE0;
-	else if (port < 32)
-		return CVMX_PKO_QUEUES_PER_PORT_INTERFACE1;
-	else if (port < 36)
-		return CVMX_PKO_QUEUES_PER_PORT_PCI;
-	else if (port < 40)
-		return CVMX_PKO_QUEUES_PER_PORT_LOOP;
-	else
-		return 0;
+	if (OCTEON_IS_MODEL(OCTEON_CN68XX))
+	{
+		return __cvmx_helper_cfg_pko_queue_num(
+			cvmx_helper_cfg_ipd2pko_port_base(port));
+	} else {
+		if (port < 16)
+			return CVMX_PKO_QUEUES_PER_PORT_INTERFACE0;
+		else if (port < 32)
+			return CVMX_PKO_QUEUES_PER_PORT_INTERFACE1;
+		else if (port < 36)
+			return CVMX_PKO_QUEUES_PER_PORT_PCI;
+		else if (port < 40)
+			return CVMX_PKO_QUEUES_PER_PORT_LOOP;
+		else if (port < 42)
+			return CVMX_PKO_QUEUES_PER_PORT_SRIO0;
+		else if (port < 44)
+			return CVMX_PKO_QUEUES_PER_PORT_SRIO1;
+		else if (port < 46)
+			return CVMX_PKO_QUEUES_PER_PORT_SRIO2;
+		else
+			return 0;
+	}
 }
 
 /**
@@ -607,4 +646,7 @@ extern int cvmx_pko_rate_limit_packets(int port, int packets_s, int burst);
  */
 extern int cvmx_pko_rate_limit_bits(int port, uint64_t bits_s, int burst);
 
+int __cvmx_pko_get_pipe(int interface, int index);
+int cvmx_pko_get_base_pko_port(int interface, int index);
+
 #endif /* __CVMX_PKO_H__ */
diff --git a/arch/mips/include/asm/octeon/cvmx-sriox-defs.h b/arch/mips/include/asm/octeon/cvmx-sriox-defs.h
index 7be7e9e..224ef17 100644
--- a/arch/mips/include/asm/octeon/cvmx-sriox-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-sriox-defs.h
@@ -907,6 +907,7 @@ union cvmx_sriox_status_reg {
 	struct cvmx_sriox_status_reg_s cn63xxp1;
 	struct cvmx_sriox_status_reg_s cn66xx;
 };
+typedef union cvmx_sriox_status_reg cvmx_sriox_status_reg_t;
 
 union cvmx_sriox_tag_ctrl {
 	uint64_t u64;
diff --git a/arch/mips/include/asm/octeon/cvmx.h b/arch/mips/include/asm/octeon/cvmx.h
index 740be97..bc8ede0 100644
--- a/arch/mips/include/asm/octeon/cvmx.h
+++ b/arch/mips/include/asm/octeon/cvmx.h
@@ -71,10 +71,22 @@ enum cvmx_mips_space {
 #include "cvmx-bootmem.h"
 #include "cvmx-l2c.h"
 
+#define CVMX_SHARED
+#ifndef __BYTE_ORDER
+# ifdef __BIG_ENDIAN
+#  define __BYTE_ORDER __BIG_ENDIAN
+# else
+#  define __BYTE_ORDER __LITTLE_ENDIAN
+# endif
+#endif
+
 #ifndef CVMX_ENABLE_DEBUG_PRINTS
 #define CVMX_ENABLE_DEBUG_PRINTS 1
 #endif
 
+#define CVMX_ENABLE_HELPER_FUNCTIONS 1
+#define CVMX_ENABLE_PKO_FUNCTIONS 1
+
 #if CVMX_ENABLE_DEBUG_PRINTS
 #define cvmx_dprintf        printk
 #else
-- 
1.7.9.7

