From 185b53d93b4fd8b3fe448c22461b9c65b397c537 Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Wed, 5 Sep 2012 11:25:31 +0800
Subject: [PATCH 01/27] simpleExec: add cvmx-clock file

Based on SDK 2.3.0-427

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/cavium-octeon/executive/cvmx-clock.c |   96 ++++++++++++++++++++++++
 arch/mips/include/asm/octeon/cvmx-clock.h      |   84 +++++++++++++++++++++
 2 files changed, 180 insertions(+)
 create mode 100644 arch/mips/cavium-octeon/executive/cvmx-clock.c
 create mode 100644 arch/mips/include/asm/octeon/cvmx-clock.h

diff --git a/arch/mips/cavium-octeon/executive/cvmx-clock.c b/arch/mips/cavium-octeon/executive/cvmx-clock.c
new file mode 100644
index 0000000..470d49a
--- /dev/null
+++ b/arch/mips/cavium-octeon/executive/cvmx-clock.c
@@ -0,0 +1,96 @@
+/***********************license start***************
+ * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights
+ * reserved.
+ *
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+
+ *   * Neither the name of Cavium Inc. nor the names of
+ *     its contributors may be used to endorse or promote products
+ *     derived from this software without specific prior written
+ *     permission.
+
+ * This Software, including technical data, may be subject to U.S. export  control
+ * laws, including the U.S. Export Administration Act and its  associated
+ * regulations, and may be subject to export or import  regulations in other
+ * countries.
+
+ * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
+ * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR
+ * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
+ * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR
+ * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM
+ * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,
+ * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF
+ * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
+ * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR
+ * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.
+ ***********************license end**************************************/
+
+#include <linux/module.h>
+#include <asm/octeon/octeon.h>
+#include <asm/octeon/cvmx-clock.h>
+#include <asm/octeon/cvmx-npei-defs.h>
+#include <asm/octeon/cvmx-pexp-defs.h>
+#include <asm/octeon/cvmx-dbg-defs.h>
+
+static uint64_t rate_eclk = 0;
+static uint64_t rate_sclk = 0;
+static uint64_t rate_dclk = 0;
+
+uint64_t cvmx_clock_get_rate(cvmx_clock_t clock)
+{
+	const uint64_t REF_CLOCK = 50000000;
+
+	if (unlikely(!rate_eclk)) {
+
+		if (octeon_has_feature(OCTEON_FEATURE_NPEI)) {
+			union cvmx_npei_dbg_data npei_dbg_data;
+			npei_dbg_data.u64 = cvmx_read_csr(CVMX_PEXP_NPEI_DBG_DATA);
+			rate_eclk = REF_CLOCK * npei_dbg_data.s.c_mul;
+			rate_sclk = rate_eclk;
+		}
+		else if (octeon_has_feature(OCTEON_FEATURE_PCIE)) {
+			union cvmx_mio_rst_boot mio_rst_boot;
+			mio_rst_boot.u64 = cvmx_read_csr(CVMX_MIO_RST_BOOT);
+			rate_eclk = REF_CLOCK * mio_rst_boot.s.c_mul;
+			rate_sclk = REF_CLOCK * mio_rst_boot.s.pnr_mul;
+		}
+		else {
+			union cvmx_dbg_data dbg_data;
+			dbg_data.u64 = cvmx_read_csr(CVMX_DBG_DATA);
+			rate_eclk = REF_CLOCK * dbg_data.s.c_mul;
+			rate_sclk = rate_eclk;
+		}
+	}
+
+	switch (clock) {
+		case CVMX_CLOCK_SCLK:
+		case CVMX_CLOCK_TIM:
+		case CVMX_CLOCK_IPD:
+			return rate_sclk;
+
+		case CVMX_CLOCK_RCLK:
+		case CVMX_CLOCK_CORE:
+			return rate_eclk;
+
+		case CVMX_CLOCK_DDR:
+			if (unlikely(!rate_dclk))
+				rate_dclk = cvmx_sysinfo_get()->dram_data_rate_hz;
+			return rate_dclk;
+	}
+
+	cvmx_dprintf("cvmx_clock_get_rate: Unknown clock type\n");
+	return 0;
+}
+EXPORT_SYMBOL(cvmx_clock_get_rate);
diff --git a/arch/mips/include/asm/octeon/cvmx-clock.h b/arch/mips/include/asm/octeon/cvmx-clock.h
new file mode 100644
index 0000000..a76c756
--- /dev/null
+++ b/arch/mips/include/asm/octeon/cvmx-clock.h
@@ -0,0 +1,84 @@
+/***********************license start***************
+ * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights
+ * reserved.
+ *
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+
+ *   * Neither the name of Cavium Inc. nor the names of
+ *     its contributors may be used to endorse or promote products
+ *     derived from this software without specific prior written
+ *     permission.
+
+ * This Software, including technical data, may be subject to U.S. export  control
+ * laws, including the U.S. Export Administration Act and its  associated
+ * regulations, and may be subject to export or import  regulations in other
+ * countries.
+
+ * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
+ * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR
+ * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
+ * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR
+ * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM
+ * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,
+ * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF
+ * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
+ * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR
+ * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.
+ ***********************license end**************************************/
+
+#ifndef __CVMX_CLOCK_H__
+#define __CVMX_CLOCK_H__
+
+#include <asm/octeon/octeon.h>
+#include <asm/octeon/cvmx-lmcx-defs.h>
+
+typedef enum
+{
+	CVMX_CLOCK_RCLK,
+	CVMX_CLOCK_SCLK,
+	CVMX_CLOCK_DDR,
+	CVMX_CLOCK_CORE,
+	CVMX_CLOCK_TIM,
+	CVMX_CLOCK_IPD,
+} cvmx_clock_t;
+
+static inline uint64_t cvmx_clock_get_count(cvmx_clock_t clock)
+{
+	switch (clock) {
+		case CVMX_CLOCK_RCLK:
+		case CVMX_CLOCK_CORE:
+			{
+				uint64_t cycle;
+				CVMX_RDHWR(cycle, 31);
+				return (cycle);
+			}
+
+			case CVMX_CLOCK_SCLK:case CVMX_CLOCK_TIM:case
+				CVMX_CLOCK_IPD:return cvmx_read_csr(CVMX_IPD_CLK_COUNT);
+
+		case CVMX_CLOCK_DDR:
+			if (OCTEON_IS_MODEL(OCTEON_CN6XXX))
+				return cvmx_read_csr(CVMX_LMCX_DCLK_CNT(0));
+			else
+				return ((cvmx_read_csr(CVMX_LMCX_DCLK_CNT_HI(0)) << 32) |
+						cvmx_read_csr(CVMX_LMCX_DCLK_CNT_LO(0)));
+	}
+
+	cvmx_dprintf("cvmx_clock_get_count: Unknown clock type\n");
+	return 0;
+}
+
+extern uint64_t cvmx_clock_get_rate(cvmx_clock_t clock);
+
+#endif
-- 
1.7.9.7

