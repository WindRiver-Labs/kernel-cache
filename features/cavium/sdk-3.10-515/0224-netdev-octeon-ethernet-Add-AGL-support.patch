From b02d7202aef6b49bc91946822161bb63e841a4c3 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Thu, 8 Aug 2013 12:43:32 -0700
Subject: [PATCH 224/382] netdev: octeon-ethernet: Add AGL support.

Based on SDK octeon3_3.10.

AGL interface is new in cn70xx, uses PIP/IPD/PKO for packet I/O.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/octeon/ethernet-sgmii.c  |    8 ++++----
 drivers/net/ethernet/octeon/ethernet.c        |   12 ++++++++++--
 drivers/net/ethernet/octeon/octeon-ethernet.h |    2 ++
 drivers/net/ethernet/octeon/octeon_common.c   |   13 -------------
 drivers/net/ethernet/octeon/octeon_common.h   |   14 ++++++++++++++
 5 files changed, 30 insertions(+), 19 deletions(-)

diff --git a/drivers/net/ethernet/octeon/ethernet-sgmii.c b/drivers/net/ethernet/octeon/ethernet-sgmii.c
index 00d5f7a..29730f4 100644
--- a/drivers/net/ethernet/octeon/ethernet-sgmii.c
+++ b/drivers/net/ethernet/octeon/ethernet-sgmii.c
@@ -96,9 +96,9 @@ int cvm_oct_sgmii_open(struct net_device *dev)
 	if (rv)
 		return rv;
 
-	gmx_cfg.u64 = cvmx_read_csr(CVMX_GMXX_PRTX_CFG(priv->interface_port, priv->interface));
+	gmx_cfg.u64 = cvmx_read_csr(priv->gmx_base + GMX_PRT_CFG);
 	gmx_cfg.s.en = 1;
-	cvmx_write_csr(CVMX_GMXX_PRTX_CFG(priv->interface_port, priv->interface), gmx_cfg.u64);
+	cvmx_write_csr(priv->gmx_base + GMX_PRT_CFG, gmx_cfg.u64);
 
 	if (octeon_is_simulation())
 		return 0;
@@ -178,9 +178,9 @@ int cvm_oct_sgmii_stop(struct net_device *dev)
 	union cvmx_gmxx_prtx_cfg gmx_cfg;
 	struct octeon_ethernet *priv = netdev_priv(dev);
 
-	gmx_cfg.u64 = cvmx_read_csr(CVMX_GMXX_PRTX_CFG(priv->interface_port, priv->interface));
+	gmx_cfg.u64 = cvmx_read_csr(priv->gmx_base + GMX_PRT_CFG);
 	gmx_cfg.s.en = 0;
-	cvmx_write_csr(CVMX_GMXX_PRTX_CFG(priv->interface_port, priv->interface), gmx_cfg.u64);
+	cvmx_write_csr(priv->gmx_base + GMX_PRT_CFG, gmx_cfg.u64);
 
 	if (priv->hw_status_notifier.notifier_call) {
 		struct octeon_hw_status_reg sr;
diff --git a/drivers/net/ethernet/octeon/ethernet.c b/drivers/net/ethernet/octeon/ethernet.c
index e592a1f..0f99bb2 100644
--- a/drivers/net/ethernet/octeon/ethernet.c
+++ b/drivers/net/ethernet/octeon/ethernet.c
@@ -39,7 +39,6 @@
 
 #include "ethernet-defines.h"
 #include "octeon-ethernet.h"
-#include "octeon_common.h"
 
 #include <asm/octeon/cvmx-pip.h>
 #include <asm/octeon/cvmx-pko.h>
@@ -251,6 +250,7 @@ static void cvm_oct_set_pko_multiqueue(void)
 			case CVMX_HELPER_INTERFACE_MODE_XAUI:
 			case CVMX_HELPER_INTERFACE_MODE_RXAUI:
 			case CVMX_HELPER_INTERFACE_MODE_SGMII:
+			case CVMX_HELPER_INTERFACE_MODE_AGL:
 			case CVMX_HELPER_INTERFACE_MODE_RGMII:
 			case CVMX_HELPER_INTERFACE_MODE_GMII:
 			case CVMX_HELPER_INTERFACE_MODE_SPI:
@@ -577,7 +577,7 @@ static const struct net_device_ops cvm_oct_npi_netdev_ops = {
 #endif
 };
 
-/* SGMII and XAUI handled the same so they both use this. */
+/* SGMII, AGL and XAUI handled the same so they both use this. */
 static const struct net_device_ops cvm_oct_sgmii_netdev_ops = {
 	.ndo_init		= cvm_oct_sgmii_init,
 	.ndo_uninit		= cvm_oct_sgmii_uninit,
@@ -993,6 +993,14 @@ static int cvm_oct_probe(struct platform_device *pdev)
 				strcpy(dev->name, "eth%d");
 				break;
 
+			case CVMX_HELPER_INTERFACE_MODE_AGL:
+				priv->tx_lockless = priv->tx_multiple_queues && !disable_lockless_pko;
+				dev->netdev_ops = priv->tx_lockless ?
+					&cvm_oct_sgmii_lockless_netdev_ops : &cvm_oct_sgmii_netdev_ops;
+				priv->gmx_base = CVMX_AGL_GMX_RXX_INT_REG(0);
+				strcpy(dev->name, "eth%d");
+				break;
+
 			case CVMX_HELPER_INTERFACE_MODE_SPI:
 				priv->tx_lockless = priv->tx_multiple_queues && !disable_lockless_pko;
 				dev->netdev_ops = priv->tx_lockless ?
diff --git a/drivers/net/ethernet/octeon/octeon-ethernet.h b/drivers/net/ethernet/octeon/octeon-ethernet.h
index 57b93a1..c541afc 100644
--- a/drivers/net/ethernet/octeon/octeon-ethernet.h
+++ b/drivers/net/ethernet/octeon/octeon-ethernet.h
@@ -33,6 +33,8 @@
 
 #include <linux/of.h>
 
+#include "octeon_common.h"
+
 #include <asm/octeon/cvmx-helper.h>
 #include <asm/octeon/cvmx-fau.h>
 #include <asm/octeon/octeon-ethernet-user.h>
diff --git a/drivers/net/ethernet/octeon/octeon_common.c b/drivers/net/ethernet/octeon/octeon_common.c
index a4b0098..5344a06 100644
--- a/drivers/net/ethernet/octeon/octeon_common.c
+++ b/drivers/net/ethernet/octeon/octeon_common.c
@@ -15,19 +15,6 @@
 #include <asm/octeon/cvmx-agl-defs.h>
 #include <asm/octeon/cvmx-pip-defs.h>
 
-#define GMX_PRT_CFG                 0x10
-
-#define GMX_RX_FRM_MAX              0x30
-#define GMX_RX_JABBER               0x38
-#define GMX_RX_ADR_CTL              0x100
-#define GMX_RX_ADR_CAM_EN           0x108
-#define GMX_RX_ADR_CAM0             0x180
-#define GMX_RX_ADR_CAM1             0x188
-#define GMX_RX_ADR_CAM2             0x190
-#define GMX_RX_ADR_CAM3             0x198
-#define GMX_RX_ADR_CAM4             0x1a0
-#define GMX_RX_ADR_CAM5             0x1a8
-
 struct cvm_oct_cam_state {
 	u64 cam[6];
 	u64 cam_mask;
diff --git a/drivers/net/ethernet/octeon/octeon_common.h b/drivers/net/ethernet/octeon/octeon_common.h
index 350f7fb..4e642a7 100644
--- a/drivers/net/ethernet/octeon/octeon_common.h
+++ b/drivers/net/ethernet/octeon/octeon_common.h
@@ -15,6 +15,20 @@
 /* Allow 8 bytes for vlan and FCS. */
 #define OCTEON_FRAME_HEADER_LEN	(ETH_HLEN + ETH_FCS_LEN + VLAN_HLEN)
 
+#define GMX_PRT_CFG                 0x10
+
+#define GMX_RX_FRM_MAX              0x30
+#define GMX_RX_JABBER               0x38
+
+#define GMX_RX_ADR_CTL              0x100
+#define GMX_RX_ADR_CAM_EN           0x108
+#define GMX_RX_ADR_CAM0             0x180
+#define GMX_RX_ADR_CAM1             0x188
+#define GMX_RX_ADR_CAM2             0x190
+#define GMX_RX_ADR_CAM3             0x198
+#define GMX_RX_ADR_CAM4             0x1a0
+#define GMX_RX_ADR_CAM5             0x1a8
+
 extern void cvm_oct_common_set_rx_filtering(struct net_device *dev, u64 base_reg,
 					spinlock_t *lock);
 
-- 
1.7.0.4

