From 5c9ef83778299e88ee9b0efa95484a62499fd4e7 Mon Sep 17 00:00:00 2001
From: Vinita Gupta <vgupta@caviumnetworks.com>
Date: Wed, 6 Nov 2013 10:30:22 -0800
Subject: [PATCH 335/382] MIPS:OCTEON:USB: fixed bug to make lodable dwc3 module working

Based on SDK octeon3_3.10.

Signed-off-by: Vinita Gupta <vgupta@caviumnetworks.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/usb/dwc3/core.c        |   19 +++++++++----------
 drivers/usb/host/xhci-octeon.c |   10 ++++++++--
 2 files changed, 17 insertions(+), 12 deletions(-)

diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index 8a1051d..f1e5a51 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -105,7 +105,7 @@ static void dwc3_core_soft_reset(struct dwc3 *dwc)
 	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(0), reg);
 
 	index = (((uint64_t)(dwc->regs) & 0x10000000000ull) ? 1:0);
-#ifdef CONFIG_USB_XHCI_HCD_OCTEON
+#if defined(CONFIG_USB_XHCI_HCD_OCTEON) || defined(CONFIG_USB_XHCI_HCD_OCTEON_MODULE)
 	octeon3_usb_phy_reset(index);
 #else
 	usb_phy_init(dwc->usb2_phy);
@@ -369,7 +369,7 @@ err0:
 
 static void dwc3_core_exit(struct dwc3 *dwc)
 {
-#ifndef CONFIG_USB_XHCI_HCD_OCTEON
+#if !defined(CONFIG_USB_XHCI_HCD_OCTEON) && !defined(CONFIG_USB_XHCI_HCD_OCTEON_MODULE)
 	usb_phy_shutdown(dwc->usb2_phy);
 	usb_phy_shutdown(dwc->usb3_phy);
 #endif
@@ -391,12 +391,11 @@ static int dwc3_probe(struct platform_device *pdev)
 
 	u8			mode;
 
-#ifdef CONFIG_USB_XHCI_HCD_OCTEON
+#if defined(CONFIG_USB_XHCI_HCD_OCTEON) || defined(CONFIG_USB_XHCI_HCD_OCTEON_MODULE)
 	ret = xhci_octeon_start(pdev);
 	if (ret)
 		return ret;
 #endif
-
 	mem = devm_kzalloc(dev, sizeof(*dwc) + DWC3_ALIGN_MASK, GFP_KERNEL);
 	if (!mem) {
 		dev_err(dev, "not enough memory\n");
@@ -464,7 +463,7 @@ static int dwc3_probe(struct platform_device *pdev)
 			dwc->usb2_phy = devm_usb_get_phy(dev, USB_PHY_TYPE_USB2);
 			dwc->usb3_phy = devm_usb_get_phy(dev, USB_PHY_TYPE_USB3);
 	}
-#ifndef CONFIG_USB_XHCI_HCD_OCTEON
+#if !defined(CONFIG_USB_XHCI_HCD_OCTEON) && !defined(CONFIG_USB_XHCI_HCD_OCTEON_MODULE)
 	usb_phy_set_suspend(dwc->usb2_phy, 0);
 	usb_phy_set_suspend(dwc->usb3_phy, 0);
 #endif
@@ -476,7 +475,7 @@ static int dwc3_probe(struct platform_device *pdev)
 	dwc->regs_size	= resource_size(res);
 	dwc->dev	= dev;
 
-#ifdef CONFIG_USB_XHCI_HCD_OCTEON
+#if defined(CONFIG_USB_XHCI_HCD_OCTEON) || defined(CONFIG_USB_XHCI_HCD_OCTEON_MODULE)
 	dev->dma_mask	= &xhci_octeon_dma_mask;
 #else
 	dev->dma_mask	= dev->parent->dma_mask;
@@ -609,7 +608,7 @@ static int dwc3_remove(struct platform_device *pdev)
 {
 	struct dwc3	*dwc = platform_get_drvdata(pdev);
 
-#ifndef CONFIG_USB_XHCI_HCD_OCTEON
+#if !defined(CONFIG_USB_XHCI_HCD_OCTEON) && !defined(CONFIG_USB_XHCI_HCD_OCTEON_MODULE)
 	usb_phy_set_suspend(dwc->usb2_phy, 1);
 	usb_phy_set_suspend(dwc->usb3_phy, 1);
 #endif
@@ -639,7 +638,7 @@ static int dwc3_remove(struct platform_device *pdev)
 	dwc3_free_event_buffers(dwc);
 	dwc3_core_exit(dwc);
 
-#ifdef CONFIG_USB_XHCI_HCD_OCTEON
+#if defined(CONFIG_USB_XHCI_HCD_OCTEON) || defined(CONFIG_USB_XHCI_HCD_OCTEON_MODULE)
 	xhci_octeon_stop(pdev);
 #endif
 	return 0;
@@ -711,7 +710,7 @@ static int dwc3_suspend(struct device *dev)
 	dwc->gctl = dwc3_readl(dwc->regs, DWC3_GCTL);
 	spin_unlock_irqrestore(&dwc->lock, flags);
 
-#ifndef CONFIG_USB_XHCI_HCD_OCTEON
+#if !defined(CONFIG_USB_XHCI_HCD_OCTEON) && !defined(CONFIG_USB_XHCI_HCD_OCTEON_MODULE)
 	usb_phy_shutdown(dwc->usb3_phy);
 	usb_phy_shutdown(dwc->usb2_phy);
 #endif
@@ -724,7 +723,7 @@ static int dwc3_resume(struct device *dev)
 	struct dwc3	*dwc = dev_get_drvdata(dev);
 	unsigned long	flags;
 
-#ifndef CONFIG_USB_XHCI_HCD_OCTEON
+#if !defined(CONFIG_USB_XHCI_HCD_OCTEON) && !defined(CONFIG_USB_XHCI_HCD_OCTEON_MODULE)
 	usb_phy_init(dwc->usb3_phy);
 	usb_phy_init(dwc->usb2_phy);
 #endif
diff --git a/drivers/usb/host/xhci-octeon.c b/drivers/usb/host/xhci-octeon.c
index 72e9e4d..e65f60c 100644
--- a/drivers/usb/host/xhci-octeon.c
+++ b/drivers/usb/host/xhci-octeon.c
@@ -144,7 +144,7 @@ static void octeon3_usb_clocks_start(struct platform_device *pdev, int index)
 	cvmx_write_csr(CVMX_USBDRDX_UCTL_CTL(index), uctl_ctl.u64);
 	uctl_ctl.u64 = cvmx_read_csr(CVMX_USBDRDX_UCTL_CTL(index));
 	if ((div != uctl_ctl.s.h_clkdiv_sel) || (!uctl_ctl.s.h_clk_en)) {
-		printk("ERROR: usb controller clock init\n");
+		dev_err(&pdev->dev, "ERROR: usb controller clock init\n");
 			goto exit;
 	}
 
@@ -224,7 +224,7 @@ static void octeon3_usb_clocks_stop(int index)
 		octeon3_usb2_clock_start_cnt--;
 		if (octeon3_usb2_clock_start_cnt == 0 )
 			octeon_error_tree_disable(CVMX_ERROR_GROUP_USB, index);
-		mutex_unlock(&octeon3_usb1_clocks_mutex);
+		mutex_unlock(&octeon3_usb2_clocks_mutex);
 	}
 }
 EXPORT_SYMBOL(octeon3_usb_clocks_stop);
@@ -282,6 +282,7 @@ int xhci_octeon_start(struct platform_device *pdev)
 	dev_info(&pr_pdev->dev, "clocks initialized.\n");
 	return 0;
 }
+EXPORT_SYMBOL(xhci_octeon_start);
 
 int xhci_octeon_stop(struct platform_device *pdev)
 {
@@ -311,3 +312,8 @@ int xhci_octeon_stop(struct platform_device *pdev)
 	platform_set_drvdata(pdev, NULL);
 	return 0;
 }
+EXPORT_SYMBOL(xhci_octeon_stop);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Cavium, Inc. <support@cavium.com>");
+MODULE_DESCRIPTION("Cavium Inc. octeon usb3 clock init.");
-- 
1.7.0.4

