From e42d075c011bb636ecc1128f62920902ee0317ed Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Mon, 6 Aug 2012 16:01:34 -0700
Subject: [PATCH 131/337] staging/netdev: octeon-ethernet: Fix some whitespace
 errors.

Based On SDK 3.0.0-482

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 drivers/staging/octeon/ethernet-rgmii.c |    5 ++---
 drivers/staging/octeon/ethernet-rx.c    |    2 +-
 drivers/staging/octeon/ethernet-tx.c    |    2 +-
 drivers/staging/octeon/ethernet.c       |    4 ++--
 4 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/octeon/ethernet-rgmii.c b/drivers/staging/octeon/ethernet-rgmii.c
index b3ab05d..07bceee 100644
--- a/drivers/staging/octeon/ethernet-rgmii.c
+++ b/drivers/staging/octeon/ethernet-rgmii.c
@@ -118,7 +118,7 @@ static void cvm_oct_rgmii_poll(struct net_device *dev)
 	 * preamble checking, FCS stripping, and clear error bits on
 	 * every speed change. If errors occur during 10Mbps operation
 	 * the above code will change this stuff.
-	*/
+	 */
 	if (USE_10MBPS_PREAMBLE_WORKAROUND) {
 		union cvmx_gmxx_rxx_frm_ctl gmxx_rxx_frm_ctl;
 		union cvmx_ipd_sub_port_fcs ipd_sub_port_fcs;
@@ -147,9 +147,8 @@ static void cvm_oct_rgmii_poll(struct net_device *dev)
 
 	if (use_global_register_lock)
 		spin_unlock_irqrestore(&global_register_lock, flags);
-	else {
+	else
 		mutex_unlock(&priv->phydev->bus->mdio_lock);
-	}
 
 	if (priv->phydev == NULL)
 		cvm_oct_set_carrier(priv, link_info);
diff --git a/drivers/staging/octeon/ethernet-rx.c b/drivers/staging/octeon/ethernet-rx.c
index 2f1d738..771e321 100644
--- a/drivers/staging/octeon/ethernet-rx.c
+++ b/drivers/staging/octeon/ethernet-rx.c
@@ -102,7 +102,7 @@ static void cvm_oct_enable_one_cpu(void)
 			} else {
 #ifdef CONFIG_SMP
 				v = smp_call_function_single(cpu, cvm_oct_enable_napi,
-                                                    NULL, 0);
+							     NULL, 0);
 				if (v)
 					panic("Can't enable NAPI.");
 #else
diff --git a/drivers/staging/octeon/ethernet-tx.c b/drivers/staging/octeon/ethernet-tx.c
index 5184ac4..f78b729 100644
--- a/drivers/staging/octeon/ethernet-tx.c
+++ b/drivers/staging/octeon/ethernet-tx.c
@@ -313,7 +313,7 @@ int cvm_oct_xmit(struct sk_buff *skb, struct net_device *dev)
 	if (!cvm_oct_skb_ok_for_reuse(skb))
 		goto dont_put_skbuff_in_hw;
 	if (unlikely(skb_header_cloned(skb)))
- 		goto dont_put_skbuff_in_hw;
+		goto dont_put_skbuff_in_hw;
 	if (unlikely(skb->destructor))
 		goto dont_put_skbuff_in_hw;
 
diff --git a/drivers/staging/octeon/ethernet.c b/drivers/staging/octeon/ethernet.c
index 9eae03d..65175f8 100644
--- a/drivers/staging/octeon/ethernet.c
+++ b/drivers/staging/octeon/ethernet.c
@@ -389,7 +389,7 @@ static void cvm_oct_common_set_multicast_list(struct net_device *dev)
  * cvm_oct_common_set_mac_address - set the hardware MAC address for a device
  * @dev:    The device in question.
  * @addr:   Address structure to change it too.
-
+ *
  * Returns Zero on success
  */
 static int cvm_oct_set_mac_filter(struct net_device *dev)
@@ -404,7 +404,7 @@ static int cvm_oct_set_mac_filter(struct net_device *dev)
 		u8 *ptr = dev->dev_addr;
 		u64 mac = 0;
 		for (i = 0; i < 6; i++)
-		mac = (mac << 8) | (u64)ptr[i];
+			mac = (mac << 8) | (u64)ptr[i];
 
 		gmx_cfg.u64 =
 		    cvmx_read_csr(CVMX_GMXX_PRTX_CFG(priv->interface_port, priv->interface));
-- 
1.7.5.4

