From 65a7a0dc4a5f3fd0704c780189b927d17e74e158 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Tue, 9 Aug 2011 16:34:50 -0700
Subject: [PATCH 071/337] i2c: i2c-octeon: Retry more situations where
 arbitration is lost.

Based On SDK 3.0.0-482

If we lose arbitration in a multi-master configuration, the right
thing to do is retry.

Also enable the High Level Controller if needed.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 drivers/i2c/busses/i2c-octeon.c |  103 ++++++++++++++++++++++++++++++++-------
 1 files changed, 85 insertions(+), 18 deletions(-)

diff --git a/drivers/i2c/busses/i2c-octeon.c b/drivers/i2c/busses/i2c-octeon.c
index 1e41780..2cfc795 100644
--- a/drivers/i2c/busses/i2c-octeon.c
+++ b/drivers/i2c/busses/i2c-octeon.c
@@ -2,7 +2,7 @@
  * (C) Copyright 2009-2010
  * Nokia Siemens Networks, michael.lawnick.ext@nsn.com
  *
- * Portions Copyright (C) 2010, 2011 Cavium Networks, Inc.
+ * Portions Copyright (C) 2010 - 2012 Cavium, Inc.
  *
  * This is a driver for the i2c adapter in Cavium Networks' OCTEON processors.
  *
@@ -83,6 +83,7 @@ struct octeon_i2c {
 	resource_size_t regsize;
 	struct device *dev;
 	int broken_irq_mode;
+	bool octeon_i2c_hlc_enabled;
 };
 
 /**
@@ -255,6 +256,44 @@ static int octeon_i2c_wait(struct octeon_i2c *i2c)
 	return 0;
 }
 
+static int octeon_i2c_enable_hlc(struct octeon_i2c *i2c)
+{
+	if (i2c->octeon_i2c_hlc_enabled)
+		return 0;
+
+	octeon_i2c_write_sw(i2c, SW_TWSI_EOP_TWSI_CTL,
+			    TWSI_CTL_CE | TWSI_CTL_ENAB);
+
+	i2c->octeon_i2c_hlc_enabled = true;
+	return 0;
+}
+
+static bool octeon_i2c_lost_arb(u64 code)
+{
+	switch (code & 0xffull) {
+	/* Arbitration lost in address or data byte */
+	case 0x38:
+	/*
+	 * Arbitration lost in address as master, slave address +
+	 * write bit received, ACK transmitted.
+	 */
+	case 0x68:
+	/*
+	 * Arbitration lost in address as master, general call address
+	 * received, ACK transmitted.
+	 */
+	case 0x78:
+	/*
+	 * Arbitration lost in address as master, slave address + read
+	 * bit received, ACK transmitted.
+	 */
+	case 0xb0:
+		return true;
+	default:
+		return false;
+	}
+}
+
 /**
  * octeon_i2c_start - send START to the bus.
  * @i2c: The struct octeon_i2c.
@@ -266,6 +305,8 @@ static int octeon_i2c_start(struct octeon_i2c *i2c)
 	u8 data;
 	int result;
 
+	i2c->octeon_i2c_hlc_enabled = false;
+
 	octeon_i2c_write_sw(i2c, SW_TWSI_EOP_TWSI_CTL,
 				TWSI_CTL_ENAB | TWSI_CTL_STA);
 
@@ -324,17 +365,19 @@ static int octeon_i2c_stop(struct octeon_i2c *i2c)
  * @target: Target address.
  * @data: Pointer to the data to be sent.
  * @length: Length of the data.
+ * @phase: which phase of a combined operation.
  *
  * The address is sent over the bus, then the data.
  *
  * Returns 0 on success, otherwise a negative errno.
  */
 static int octeon_i2c_write(struct octeon_i2c *i2c, int target,
-			    const u8 *data, int length)
+			    const u8 *data, int length, int phase)
 {
 	int i, result;
 	u8 tmp;
 
+restart:
 	result = octeon_i2c_start(i2c);
 	if (result)
 		return result;
@@ -348,6 +391,9 @@ static int octeon_i2c_write(struct octeon_i2c *i2c, int target,
 
 	for (i = 0; i < length; i++) {
 		tmp = octeon_i2c_read_sw(i2c, SW_TWSI_EOP_TWSI_STAT);
+		if (phase == 0 && octeon_i2c_lost_arb(tmp))
+			goto restart;
+
 		if ((tmp != STAT_TXADDR_ACK) && (tmp != STAT_TXDATA_ACK)) {
 			dev_err(i2c->dev,
 				"%s: bad status before write (0x%x)\n",
@@ -372,13 +418,14 @@ static int octeon_i2c_write(struct octeon_i2c *i2c, int target,
  * @target: Target address.
  * @data: Pointer to the location to store the datae .
  * @length: Length of the data.
+ * @phase: which phase of a combined operation.
  *
  * The address is sent over the bus, then the data is read.
  *
  * Returns 0 on success, otherwise a negative errno.
  */
 static int octeon_i2c_read(struct octeon_i2c *i2c, int target,
-			   u8 *data, int length)
+			   u8 *data, int length, int phase)
 {
 	int i, result;
 	u8 tmp;
@@ -386,6 +433,7 @@ static int octeon_i2c_read(struct octeon_i2c *i2c, int target,
 	if (length < 1)
 		return -EINVAL;
 
+restart:
 	result = octeon_i2c_start(i2c);
 	if (result)
 		return result;
@@ -399,6 +447,9 @@ static int octeon_i2c_read(struct octeon_i2c *i2c, int target,
 
 	for (i = 0; i < length; i++) {
 		tmp = octeon_i2c_read_sw(i2c, SW_TWSI_EOP_TWSI_STAT);
+		if (phase == 0 && octeon_i2c_lost_arb(tmp))
+			goto restart;
+
 		if ((tmp != STAT_RXDATA_ACK) && (tmp != STAT_RXADDR_ACK)) {
 			dev_err(i2c->dev,
 				"%s: bad status before read (0x%x)\n",
@@ -494,6 +545,7 @@ static int octeon_i2c_simple_read(struct octeon_i2c *i2c, struct i2c_msg *msgs)
 	int i, j;
 	int ret = 0;
 
+	octeon_i2c_enable_hlc(i2c);
 retry:
 	cmd = SW_TWSI_V | SW_TWSI_R | SW_TWSI_SOVR;
 	/* SIZE */
@@ -517,17 +569,10 @@ retry:
 	cmd = __raw_readq(i2c->twsi_base + SW_TWSI);
 
 	if ((cmd & SW_TWSI_R) == 0) {
-		switch (cmd & 0xff) {
-		case 0x38:
-		case 0x68:
-		case 0x78:
-		case 0xb0:
-			/* Lost arbitration */
+		if (octeon_i2c_lost_arb(cmd))
 			goto retry;
-		default:
-			ret = -EIO;
-			goto err;
-		}
+		ret = -EIO;
+		goto err;
 	}
 
 	for (i = 0, j = msgs[0].len - 1; i  < msgs[0].len && i < 4; i++, j--)
@@ -549,6 +594,9 @@ static int octeon_i2c_simple_write(struct octeon_i2c *i2c, struct i2c_msg *msgs)
 	int i, j;
 	int ret = 0;
 
+	octeon_i2c_enable_hlc(i2c);
+
+retry:
 	cmd = SW_TWSI_V | SW_TWSI_SOVR;
 	/* SIZE */
 	cmd |= (u64)(msgs[0].len - 1) << SW_TWSI_SIZE_SHIFT;
@@ -580,8 +628,13 @@ static int octeon_i2c_simple_write(struct octeon_i2c *i2c, struct i2c_msg *msgs)
 
 	cmd = __raw_readq(i2c->twsi_base + SW_TWSI);
 
-	if ((cmd & SW_TWSI_R) == 0)
+	if ((cmd & SW_TWSI_R) == 0) {
+		if (octeon_i2c_lost_arb(cmd))
+			goto retry;
 		ret = -EIO;
+		goto err;
+	}
+
 err:
 	return ret;
 }
@@ -592,6 +645,9 @@ static int octeon_i2c_ia_read(struct octeon_i2c *i2c, struct i2c_msg *msgs)
 	int i, j;
 	int ret = 0;
 
+	octeon_i2c_enable_hlc(i2c);
+
+retry:
 	cmd = SW_TWSI_V | SW_TWSI_R | SW_TWSI_SOVR;
 	/* SIZE */
 	cmd |= (u64)(msgs[1].len - 1) << SW_TWSI_SIZE_SHIFT;
@@ -623,8 +679,12 @@ static int octeon_i2c_ia_read(struct octeon_i2c *i2c, struct i2c_msg *msgs)
 
 	cmd = __raw_readq(i2c->twsi_base + SW_TWSI);
 
-	if ((cmd & SW_TWSI_R) == 0)
+	if ((cmd & SW_TWSI_R) == 0) {
+		if (octeon_i2c_lost_arb(cmd))
+			goto retry;
 		ret = -EIO;
+		goto err;
+	}
 
 	for (i = 0, j = msgs[1].len - 1; i  < msgs[1].len && i < 4; i++, j--)
 		msgs[1].buf[j] = (cmd >> (8 * i)) & 0xff;
@@ -647,6 +707,9 @@ static int octeon_i2c_ia_write(struct octeon_i2c *i2c, struct i2c_msg *msgs)
 	u64 ext = 0;
 	bool set_ext = false;
 
+	octeon_i2c_enable_hlc(i2c);
+
+retry:
 	cmd = SW_TWSI_V | SW_TWSI_SOVR;
 	/* SIZE */
 	cmd |= (u64)(msgs[1].len - 1) << SW_TWSI_SIZE_SHIFT;
@@ -687,8 +750,12 @@ static int octeon_i2c_ia_write(struct octeon_i2c *i2c, struct i2c_msg *msgs)
 
 	cmd = __raw_readq(i2c->twsi_base + SW_TWSI);
 
-	if ((cmd & SW_TWSI_R) == 0)
+	if ((cmd & SW_TWSI_R) == 0) {
+		if (octeon_i2c_lost_arb(cmd))
+			goto retry;
 		ret = -EIO;
+		goto err;
+	}
 
 err:
 	return ret;
@@ -741,10 +808,10 @@ static int octeon_i2c_xfer(struct i2c_adapter *adap,
 			 pmsg->len, pmsg->addr, i + 1, num);
 		if (pmsg->flags & I2C_M_RD)
 			ret = octeon_i2c_read(i2c, pmsg->addr, pmsg->buf,
-						pmsg->len);
+					      pmsg->len, i);
 		else
 			ret = octeon_i2c_write(i2c, pmsg->addr, pmsg->buf,
-						pmsg->len);
+					       pmsg->len, i);
 	}
 	octeon_i2c_stop(i2c);
 out:
-- 
1.7.5.4

