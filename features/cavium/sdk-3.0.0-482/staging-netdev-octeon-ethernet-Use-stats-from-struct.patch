From 43df1b4df21ced0cea17bf8c6c7b14539d5de2ee Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Wed, 11 Jul 2012 14:43:02 -0700
Subject: [PATCH 126/337] staging/netdev: octeon-ethernet: Use stats from
 struct netdevice instead of private copy.

Based On SDK 3.0.0-482

It's there for us, so use it and save some space.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 drivers/staging/octeon/ethernet-rx.c     |    6 +++---
 drivers/staging/octeon/ethernet.c        |   18 +++++++++---------
 drivers/staging/octeon/octeon-ethernet.h |    2 --
 3 files changed, 12 insertions(+), 14 deletions(-)

diff --git a/drivers/staging/octeon/ethernet-rx.c b/drivers/staging/octeon/ethernet-rx.c
index 5ee59b8..0ae2114 100644
--- a/drivers/staging/octeon/ethernet-rx.c
+++ b/drivers/staging/octeon/ethernet-rx.c
@@ -564,14 +564,14 @@ static int cvm_oct_napi_poll(struct napi_struct *napi, int budget)
 
 				/* Increment RX stats for virtual ports */
 				if (work->word1.cn38xx.ipprt >= CVMX_PIP_NUM_INPUT_PORTS) {
-					atomic64_add(1, (atomic64_t *)&priv->stats.rx_packets);
-					atomic64_add(skb->len, (atomic64_t *)&priv->stats.rx_bytes);
+					atomic64_add(1, (atomic64_t *)&priv->netdev->stats.rx_packets);
+					atomic64_add(skb->len, (atomic64_t *)&priv->netdev->stats.rx_bytes);
 				}
 				netif_receive_skb(skb);
 				rx_count++;
 			} else {
 				/* Drop any packet received for a device that isn't up */
-				atomic64_add(1, (atomic64_t *)&priv->stats.rx_dropped);
+				atomic64_add(1, (atomic64_t *)&priv->netdev->stats.rx_dropped);
 				dev_kfree_skb_irq(skb);
 			}
 		} else {
diff --git a/drivers/staging/octeon/ethernet.c b/drivers/staging/octeon/ethernet.c
index 48fc1b7..bb0f0e0 100644
--- a/drivers/staging/octeon/ethernet.c
+++ b/drivers/staging/octeon/ethernet.c
@@ -228,23 +228,23 @@ static struct net_device_stats *cvm_oct_common_get_stats(struct net_device *dev)
 			cvmx_pko_get_port_status(priv->ipd_port, 1, &tx_status);
 		}
 
-		priv->stats.rx_packets += rx_status.inb_packets;
-		priv->stats.tx_packets += tx_status.packets;
-		priv->stats.rx_bytes += rx_status.inb_octets;
-		priv->stats.tx_bytes += tx_status.octets;
-		priv->stats.multicast += rx_status.multicast_packets;
-		priv->stats.rx_crc_errors += rx_status.inb_errors;
-		priv->stats.rx_frame_errors += rx_status.fcs_align_err_packets;
+		dev->stats.rx_packets += rx_status.inb_packets;
+		dev->stats.tx_packets += tx_status.packets;
+		dev->stats.rx_bytes += rx_status.inb_octets;
+		dev->stats.tx_bytes += tx_status.octets;
+		dev->stats.multicast += rx_status.multicast_packets;
+		dev->stats.rx_crc_errors += rx_status.inb_errors;
+		dev->stats.rx_frame_errors += rx_status.fcs_align_err_packets;
 
 		/*
 		 * The drop counter must be incremented atomically
 		 * since the RX tasklet also increments it.
 		 */
 		atomic64_add(rx_status.dropped_packets,
-			     (atomic64_t *)&priv->stats.rx_dropped);
+			     (atomic64_t *)&dev->stats.rx_dropped);
 	}
 
-	return &priv->stats;
+	return &dev->stats;
 }
 
 /**
diff --git a/drivers/staging/octeon/octeon-ethernet.h b/drivers/staging/octeon/octeon-ethernet.h
index 5e32509..1227436 100644
--- a/drivers/staging/octeon/octeon-ethernet.h
+++ b/drivers/staging/octeon/octeon-ethernet.h
@@ -71,8 +71,6 @@ struct octeon_ethernet {
 		int	fau;
 	} tx_queue[32];
 
-	/* Device statistics */
-	struct net_device_stats stats;
 	struct phy_device *phydev;
 	unsigned int last_link;
 	/* Last negotiated link state */
-- 
1.7.5.4

