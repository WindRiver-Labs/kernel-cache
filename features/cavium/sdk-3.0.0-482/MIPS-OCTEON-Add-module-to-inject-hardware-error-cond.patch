From 363667d1a20ce82d9c1b7e027d4f5707da3fe03b Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Wed, 16 Jan 2013 13:46:18 -0800
Subject: [PATCH 320/337] MIPS: OCTEON: Add module to inject hardware error
 conditions.

Based On SDK 3.0.0-482

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/cavium-octeon/Kconfig                 |    6 ++
 arch/mips/cavium-octeon/Makefile                |    1 +
 arch/mips/cavium-octeon/octeon-error-injector.c |   93 +++++++++++++++++++++++
 3 files changed, 100 insertions(+), 0 deletions(-)
 create mode 100644 arch/mips/cavium-octeon/octeon-error-injector.c

diff --git a/arch/mips/cavium-octeon/Kconfig b/arch/mips/cavium-octeon/Kconfig
index 3622cc6..b6cdf11 100644
--- a/arch/mips/cavium-octeon/Kconfig
+++ b/arch/mips/cavium-octeon/Kconfig
@@ -228,6 +228,12 @@ config OCTEON_ILM
 	  To compile this driver as a module, choose M here.  The module
 	  will be called octeon-ilm
 
+config OCTEON_ERROR_INJECTOR
+	tristate "Module to inject hardware errors into the system"
+	help
+	  Used to test hardware error reporting.  Should never be used
+	  in a normal running system.
+
 source "arch/mips/cavium-octeon/executive/Kconfig"
 
 endif # CPU_CAVIUM_OCTEON
diff --git a/arch/mips/cavium-octeon/Makefile b/arch/mips/cavium-octeon/Makefile
index d954dc4..875b06a 100644
--- a/arch/mips/cavium-octeon/Makefile
+++ b/arch/mips/cavium-octeon/Makefile
@@ -27,6 +27,7 @@ obj-$(CONFIG_CAVIUM_OCTEON_NAND)	+= octeon-nand.o
 obj-$(CONFIG_SYSFS)                     += cacheinfo.o
 obj-$(CONFIG_CAVIUM_OCTEON_ERROR_TREE)	+= octeon-error-tree.o
 obj-$(CONFIG_CAVIUM_OCTEON_KERNEL_CRYPTO) += octeon-crypto.o
+obj-$(CONFIG_OCTEON_ERROR_INJECTOR)	+= octeon-error-injector.o
 
 DTS_FILES = octeon_3xxx.dts octeon_68xx.dts
 DTB_FILES = $(patsubst %.dts, %.dtb, $(DTS_FILES))
diff --git a/arch/mips/cavium-octeon/octeon-error-injector.c b/arch/mips/cavium-octeon/octeon-error-injector.c
new file mode 100644
index 0000000..c5a8cd9
--- /dev/null
+++ b/arch/mips/cavium-octeon/octeon-error-injector.c
@@ -0,0 +1,93 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2013 Cavium, Inc.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/module.h>
+
+#include <asm/octeon/octeon.h>
+#include <asm/octeon/cvmx-fpa.h>
+
+int test_number;
+module_param(test_number, int, S_IRUGO);
+MODULE_PARM_DESC(test_number, "Which test case to run.");
+
+int test_param;
+module_param(test_param, int, S_IRUGO);
+MODULE_PARM_DESC(test_param, "Parameter used in the test case.");
+
+
+static void octeon_error_injector_memory_read(void)
+{
+	u8 val;
+	/* Parameter is in GB and we add 256MB for the hole. */
+	u64 addr = (((u64)test_param) << 30) + (1ull << 28) + (1ull << 63);
+	u8 *ptr = (u8 *)addr;
+
+	val = *ptr;
+	pr_err("Load from %p -> 0x%02x\n", ptr, val);
+}
+
+static void octeon_error_injector_fpa1(void)
+{
+	/* Trigger an FPA threshold indication in pool 7*/
+	char *mem;
+	u64 old_threshold;
+
+	cvmx_fpa_enable();
+
+	mem = kmalloc(1024, GFP_KERNEL);
+	if (!mem) {
+		pr_err("No memory\n");
+		return;
+	}
+
+	/* Add two blocks. */
+	cvmx_fpa_free(mem + 128, 7, 0);
+	cvmx_fpa_free(mem + 256, 7, 0);
+
+	old_threshold = cvmx_read_csr(CVMX_FPA_POOLX_THRESHOLD(7));
+	/* Set the threshold to 1 */
+	cvmx_write_csr(CVMX_FPA_POOLX_THRESHOLD(7), 1);
+
+	/* Remove the blocks */
+	cvmx_fpa_alloc(7);
+	cvmx_fpa_alloc(7);
+
+	kfree(mem);
+	pr_err("Expecting FPA Pool 7 threshold indication.\n");
+	cvmx_write_csr(CVMX_FPA_POOLX_THRESHOLD(7), old_threshold);
+}
+
+static int __init octeon_error_injector_init(void)
+{
+	/* We are injecting errors, so mark the kernel as tainted.*/
+	add_taint(TAINT_CRAP);
+
+	switch (test_number) {
+	case 1:
+		octeon_error_injector_memory_read();
+		break;
+	case 2:
+		octeon_error_injector_fpa1();
+		break;
+	default:
+		pr_err("Error: Unrecognized test number: %d\n",  test_number);
+		break;
+	}
+
+	return 0;
+}
+module_init(octeon_error_injector_init);
+
+static void __exit octeon_error_injector_exit(void)
+{
+}
+module_exit(octeon_error_injector_exit);
+
+MODULE_LICENSE("GPL");
-- 
1.7.5.4

