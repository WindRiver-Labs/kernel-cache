From bcde03343dc423e68225e032441c3a46606546ad Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Wed, 11 Apr 2012 14:17:51 -0700
Subject: [PATCH 041/337] MIPS: OCTEON: Add CONFIG_RESERVE32 option back to
 the Kconfig.

Based On SDK 3.0.0-482

This is needed for Linux userspace Simple Exec. programs.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/cavium-octeon/Kconfig |   13 +++++++++++++
 arch/mips/cavium-octeon/setup.c |    8 ++++----
 2 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/arch/mips/cavium-octeon/Kconfig b/arch/mips/cavium-octeon/Kconfig
index 3641ec2..5eca6ff 100644
--- a/arch/mips/cavium-octeon/Kconfig
+++ b/arch/mips/cavium-octeon/Kconfig
@@ -180,6 +180,19 @@ config CAVIUM_OCTEON_USER_MEM_DISABLED
 
 endchoice
 
+config CAVIUM_RESERVE32
+	int "Memory to reserve for user processes shared region (MB)"
+	range 0 1536
+	depends on CPU_CAVIUM_OCTEON
+	default "0"
+	help
+	  Reserve a shared memory region for user processes to use for hardware
+	  memory buffers. This is required for 32bit applications to be able to
+	  send and receive packets directly. Applications access this memory by
+	  memory mapping /dev/mem for the addresses in /proc/octeon_info. For
+	  optimal performance with HugeTLBs, keep this size an even number of
+	  megabytes.
+
 config ARCH_SPARSEMEM_ENABLE
 	def_bool y
 	select SPARSEMEM_STATIC
diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 703d8b2..cbdfc09 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -55,7 +55,7 @@ struct octeon_boot_descriptor *octeon_boot_desc_ptr;
 struct cvmx_bootinfo *octeon_bootinfo;
 EXPORT_SYMBOL(octeon_bootinfo);
 
-#ifdef CONFIG_CAVIUM_RESERVE32
+#if CONFIG_CAVIUM_RESERVE32 > 0
 uint64_t octeon_reserve32_memory;
 EXPORT_SYMBOL(octeon_reserve32_memory);
 #endif
@@ -571,7 +571,7 @@ void __init prom_init(void)
 	struct cvmx_sysinfo *sysinfo;
 	int i;
 	int argc;
-#ifdef CONFIG_CAVIUM_RESERVE32
+#if CONFIG_CAVIUM_RESERVE32 > 0
 	int64_t addr = -1;
 #endif
 	/*
@@ -633,7 +633,7 @@ void __init prom_init(void)
 		cvmx_write_csr(CVMX_LED_UDD_DATX(1), 0);
 		cvmx_write_csr(CVMX_LED_EN, 1);
 	}
-#ifdef CONFIG_CAVIUM_RESERVE32
+#if CONFIG_CAVIUM_RESERVE32 > 0
 	/*
 	 * We need to temporarily allocate all memory in the reserve32
 	 * region. This makes sure the kernel doesn't allocate this
@@ -859,7 +859,7 @@ void __init plat_mem_setup(void)
 	}
 	cvmx_bootmem_unlock();
 
-#ifdef CONFIG_CAVIUM_RESERVE32
+#if CONFIG_CAVIUM_RESERVE32 > 0
 	/*
 	 * Now that we've allocated the kernel memory it is safe to
 	 * free the reserved region. We free it here so that builtin
-- 
1.7.5.4

