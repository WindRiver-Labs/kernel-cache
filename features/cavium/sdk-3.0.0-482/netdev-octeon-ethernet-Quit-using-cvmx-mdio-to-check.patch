From 426db47bfe14739f608f2729da9d88b21aabe855 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Wed, 12 Dec 2012 10:45:19 -0800
Subject: [PATCH 268/337] netdev/octeon-ethernet: Quit using cvmx-mdio to
 check phy status on RGMII ports.

Based On SDK 3.0.0-482

There are Linux drivers for all the PHYs, use them in preference to
the cvmx-mdio code.  This eliminates a bunch of ugly locking hacks.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/cavium-octeon/setup.c              |    4 --
 arch/mips/include/asm/octeon/cvmx-mdio.h     |   63 ++------------------------
 drivers/net/ethernet/octeon/ethernet-rgmii.c |   29 +++---------
 3 files changed, 10 insertions(+), 86 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 81b0160..0c84d22 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -159,10 +159,6 @@ static int octeon_uart;
 extern asmlinkage void handle_int(void);
 extern asmlinkage void plat_irq_dispatch(void);
 
-/* Any mdio busses that are configured for this kernel. */
-struct mii_bus *octeon_mdiobuses[4];
-EXPORT_SYMBOL(octeon_mdiobuses);
-
 /*
  * If set to a non-zero value, the bootloader entry point for
  * HOTPLUG_CPU and other tricks.
diff --git a/arch/mips/include/asm/octeon/cvmx-mdio.h b/arch/mips/include/asm/octeon/cvmx-mdio.h
index 2fffbf7..d6505a6 100644
--- a/arch/mips/include/asm/octeon/cvmx-mdio.h
+++ b/arch/mips/include/asm/octeon/cvmx-mdio.h
@@ -50,7 +50,6 @@
 #define __CVMX_MIO_H__
 
 #ifdef CVMX_BUILD_FOR_LINUX_KERNEL
-#include <asm/octeon/octeon.h>
 #include <asm/octeon/cvmx-clock.h>
 #else
 #include "cvmx-clock.h"
@@ -348,20 +347,7 @@ static inline cvmx_smix_rd_dat_t __cvmx_mdio_read_rd_dat(int bus_id)
 static inline int cvmx_mdio_read(int bus_id, int phy_id, int location)
 {
 #if defined(CVMX_BUILD_FOR_LINUX_KERNEL) && defined(CONFIG_PHYLIB)
-	struct mii_bus *bus;
-	int rv;
-
-	BUG_ON(bus_id > 3 || bus_id < 0);
-
-	bus = octeon_mdiobuses[bus_id];
-	if (bus == NULL)
-		return -1;
-
-	rv = mdiobus_read(bus, phy_id, location);
-
-	if (rv < 0)
-		return -1;
-	return rv;
+	return -1;
 #else
 	cvmx_smix_cmd_t smi_cmd;
 	cvmx_smix_rd_dat_t smi_rd;
@@ -399,20 +385,7 @@ static inline int cvmx_mdio_read(int bus_id, int phy_id, int location)
 static inline int cvmx_mdio_write(int bus_id, int phy_id, int location, int val)
 {
 #if defined(CVMX_BUILD_FOR_LINUX_KERNEL) && defined(CONFIG_PHYLIB)
-	struct mii_bus *bus;
-	int rv;
-
-	BUG_ON(bus_id > 3 || bus_id < 0);
-
-	bus = octeon_mdiobuses[bus_id];
-	if (bus == NULL)
-		return -1;
-
-	rv = mdiobus_write(bus, phy_id, location, (u16) val);
-
-	if (rv < 0)
-		return -1;
-	return 0;
+	return -1;
 #else
 	cvmx_smix_cmd_t smi_cmd;
 	cvmx_smix_wr_dat_t smi_wr;
@@ -454,20 +427,7 @@ static inline int cvmx_mdio_write(int bus_id, int phy_id, int location, int val)
 static inline int cvmx_mdio_45_read(int bus_id, int phy_id, int device, int location)
 {
 #if defined(CVMX_BUILD_FOR_LINUX_KERNEL) && defined(CONFIG_PHYLIB)
-	struct mii_bus *bus;
-	int rv;
-
-	BUG_ON(bus_id > 3 || bus_id < 0);
-	bus = octeon_mdiobuses[bus_id];
-	if (bus == NULL)
-		return -1;
-
-	location |= MII_ADDR_C45;
-	location |= (device << 16);
-	rv = mdiobus_read(bus, phy_id, location);
-	if (rv < 0)
-		return -1;
-	return rv;
+	return -1;
 #else
 	cvmx_smix_cmd_t smi_cmd;
 	cvmx_smix_rd_dat_t smi_rd;
@@ -531,22 +491,7 @@ static inline int cvmx_mdio_45_read(int bus_id, int phy_id, int device, int loca
 static inline int cvmx_mdio_45_write(int bus_id, int phy_id, int device, int location, int val)
 {
 #if defined(CVMX_BUILD_FOR_LINUX_KERNEL) && defined(CONFIG_PHYLIB)
-	struct mii_bus *bus;
-	int rv;
-
-	BUG_ON(bus_id > 3 || bus_id < 0);
-
-	bus = octeon_mdiobuses[bus_id];
-	if (bus == NULL)
-		return -1;
-
-	location |= MII_ADDR_C45;
-	location |= (device << 16);
-	rv = mdiobus_write(bus, phy_id, location, (u16) val);
-
-	if (rv < 0)
-		return -1;
-	return 0;
+	return -1;
 #else
 	cvmx_smix_cmd_t smi_cmd;
 	cvmx_smix_wr_dat_t smi_wr;
diff --git a/drivers/net/ethernet/octeon/ethernet-rgmii.c b/drivers/net/ethernet/octeon/ethernet-rgmii.c
index 41d8ebe..c418969 100644
--- a/drivers/net/ethernet/octeon/ethernet-rgmii.c
+++ b/drivers/net/ethernet/octeon/ethernet-rgmii.c
@@ -42,28 +42,21 @@
 #include <asm/octeon/cvmx-npi-defs.h>
 #include <asm/octeon/cvmx-gmxx-defs.h>
 
-DEFINE_SPINLOCK(global_register_lock);
-
 static int number_rgmii_ports;
 
 static void cvm_oct_rgmii_poll(struct net_device *dev)
 {
 	struct octeon_ethernet *priv = netdev_priv(dev);
-	unsigned long flags = 0;
 	cvmx_helper_link_info_t link_info;
-	int use_global_register_lock = (priv->phydev == NULL);
 
-	BUG_ON(in_interrupt());
-	if (use_global_register_lock) {
-		/* Take the global register lock since we are going to
-		 * touch registers that affect more than one port.
-		 */
-		spin_lock_irqsave(&global_register_lock, flags);
+	if (priv->phydev) {
+		link_info.u64 = 0;
+		link_info.s.link_up = priv->last_link ? 1 : 0;
+		link_info.s.full_duplex = priv->phydev->duplex ? 1 : 0;
+		link_info.s.speed = priv->phydev->speed;
 	} else {
-		mutex_lock(&priv->phydev->bus->mdio_lock);
+		link_info = cvmx_helper_link_get(priv->ipd_port);
 	}
-
-	link_info = cvmx_helper_link_get(priv->ipd_port);
 	if (link_info.u64 == priv->link_info) {
 		/* If the 10Mbps preamble workaround is supported and we're
 		 * at 10Mbps we may need to do some special checking.
@@ -106,11 +99,6 @@ static void cvm_oct_rgmii_poll(struct net_device *dev)
 						   dev->name);
 			}
 		}
-
-		if (use_global_register_lock)
-			spin_unlock_irqrestore(&global_register_lock, flags);
-		else
-			mutex_unlock(&priv->phydev->bus->mdio_lock);
 		return;
 	}
 
@@ -145,11 +133,6 @@ static void cvm_oct_rgmii_poll(struct net_device *dev)
 		priv->link_info = link_info.u64;
 	}
 
-	if (use_global_register_lock)
-		spin_unlock_irqrestore(&global_register_lock, flags);
-	else
-		mutex_unlock(&priv->phydev->bus->mdio_lock);
-
 	if (priv->phydev == NULL)
 		cvm_oct_set_carrier(priv, link_info);
 }
-- 
1.7.5.4

