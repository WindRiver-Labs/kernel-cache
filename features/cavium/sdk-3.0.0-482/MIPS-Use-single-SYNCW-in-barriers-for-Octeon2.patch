From 230cc64e884b83af49898c9c91f2590ce2049f62 Mon Sep 17 00:00:00 2001
From: David Daney <ddaney@caviumnetworks.com>
Date: Fri, 14 May 2010 14:26:35 -0700
Subject: [PATCH 044/337] MIPS: Use single SYNCW in barriers for Octeon2

Based On SDK 3.0.0-482

Octeon2 doesn't need two SYNCW.

Signed-off-by: David Daney <ddaney@caviumnetworks.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/include/asm/barrier.h |   13 ++++++++++++-
 1 files changed, 12 insertions(+), 1 deletions(-)

diff --git a/arch/mips/include/asm/barrier.h b/arch/mips/include/asm/barrier.h
index a230cde..e71b6e7 100644
--- a/arch/mips/include/asm/barrier.h
+++ b/arch/mips/include/asm/barrier.h
@@ -91,7 +91,18 @@
 		: "m" (*(int *)CKSEG1)		\
 		: "memory")
 #ifdef CONFIG_CPU_CAVIUM_OCTEON
-# define OCTEON_SYNCW_STR	".set push\n.set arch=octeon\nsyncw\nsyncw\n.set pop\n"
+# ifdef CONFIG_CAVIUM_OCTEON2
+#  define OCTEON_SYNCW_STR	".set push\n\t.set arch=octeon\n\tsyncw\n\t.set pop"
+# else
+/*
+ * We actually use two syncw instructions in a row when we need a
+ * write memory barrier. This is because the CN3XXX series of Octeons
+ * have errata Core-401.  This can cause a single syncw to not enforce
+ * ordering under very rare conditions. Even if it is rare, better
+ * safe than sorry.
+ */
+#  define OCTEON_SYNCW_STR	".set push\n.set arch=octeon\nsyncw\nsyncw\n.set pop\n"
+# endif
 # define __syncw() 	__asm__ __volatile__(OCTEON_SYNCW_STR : : : "memory")
 
 # define fast_wmb()	__syncw()
-- 
1.7.5.4

