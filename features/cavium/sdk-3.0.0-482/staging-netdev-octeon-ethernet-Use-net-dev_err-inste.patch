From 26d4fe471617c280bf7f94155f860098ddafa2df Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Mon, 6 Aug 2012 17:14:37 -0700
Subject: [PATCH 133/337] staging/netdev: octeon-ethernet: Use (net)dev_err
 instead of pr_err.

Based On SDK 3.0.0-482

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 drivers/staging/octeon/ethernet-mdio.c |    7 +++--
 drivers/staging/octeon/ethernet.c      |   34 ++++++++++++++++++-------------
 2 files changed, 24 insertions(+), 17 deletions(-)

diff --git a/drivers/staging/octeon/ethernet-mdio.c b/drivers/staging/octeon/ethernet-mdio.c
index 5342f8b..4d00fc8 100644
--- a/drivers/staging/octeon/ethernet-mdio.c
+++ b/drivers/staging/octeon/ethernet-mdio.c
@@ -138,7 +138,7 @@ static int cvm_oct_ioctl_hwtstamp(struct net_device *dev,
 		ptp.u64 = octeon_read_ptp_csr(CVMX_MIO_PTP_CLOCK_CFG);
 		if (!ptp.s.ptp_en) {
 			/* It should have been enabled by csrc-octeon-ptp */
-			pr_err("Error: PTP clock not enabled\n");
+			netdev_err(dev, "Error: PTP clock not enabled\n");
 			/* No timestamp support*/
 			return -EOPNOTSUPP;
 		}
@@ -235,11 +235,12 @@ static void cvm_oct_note_carrier(struct octeon_ethernet *priv,
 {
 	if (li.s.link_up) {
 		pr_notice_ratelimited("%s: %u Mbps %s duplex, port %d\n",
-				      priv->netdev->name, li.s.speed,
+				      netdev_name(priv->netdev), li.s.speed,
 				      (li.s.full_duplex) ? "Full" : "Half",
 				      priv->ipd_port);
 	} else {
-		pr_notice_ratelimited("%s: Link down\n", priv->netdev->name);
+		pr_notice_ratelimited("%s: Link down\n",
+				      netdev_name(priv->netdev));
 	}
 }
 
diff --git a/drivers/staging/octeon/ethernet.c b/drivers/staging/octeon/ethernet.c
index b6c782f..9390b7b 100644
--- a/drivers/staging/octeon/ethernet.c
+++ b/drivers/staging/octeon/ethernet.c
@@ -141,7 +141,7 @@ static void cvm_oct_periodic_worker(struct work_struct *work)
 
 static int cvm_oct_num_output_buffers;
 
-static __devinit void cvm_oct_configure_common_hw(void)
+static __devinit int cvm_oct_configure_common_hw(void)
 {
 	/* Setup the FPA */
 	cvmx_fpa_enable();
@@ -149,14 +149,14 @@ static __devinit void cvm_oct_configure_common_hw(void)
 	if (cvm_oct_alloc_fpa_pool(CVMX_FPA_PACKET_POOL,
 				   CVMX_FPA_PACKET_POOL_SIZE) < 0) {
 		pr_err("cvm_oct_alloc_fpa_pool(CVMX_FPA_PACKET_POOL, CVMX_FPA_PACKET_POOL_SIZE) failed.\n");
-		return;
+		return -ENOMEM;
 	}
 	cvm_oct_mem_fill_fpa(CVMX_FPA_PACKET_POOL, num_packet_buffers);
 
 	if (cvm_oct_alloc_fpa_pool(CVMX_FPA_WQE_POOL,
 				   CVMX_FPA_WQE_POOL_SIZE) < 0) {
 		pr_err("cvm_oct_alloc_fpa_pool(CVMX_FPA_WQE_POOL, CVMX_FPA_WQE_POOL_SIZE) failed.\n");
-		return;
+		return -ENOMEM;;
 	}
 	cvm_oct_mem_fill_fpa(CVMX_FPA_WQE_POOL, num_packet_buffers);
 
@@ -165,7 +165,7 @@ static __devinit void cvm_oct_configure_common_hw(void)
 		if (cvm_oct_alloc_fpa_pool(CVMX_FPA_OUTPUT_BUFFER_POOL,
 					   CVMX_FPA_OUTPUT_BUFFER_POOL_SIZE) < 0) {
 			pr_err("cvm_oct_alloc_fpa_pool(CVMX_FPA_OUTPUT_BUFFER_POOL, CVMX_FPA_OUTPUT_BUFFER_POOL_SIZE) failed.\n");
-			return;
+			return -ENOMEM;;
 		}
 		cvm_oct_mem_fill_fpa(CVMX_FPA_OUTPUT_BUFFER_POOL,
 				     cvm_oct_num_output_buffers);
@@ -175,6 +175,7 @@ static __devinit void cvm_oct_configure_common_hw(void)
 		cvmx_helper_setup_red(num_packet_buffers / 4,
 				      num_packet_buffers / 8);
 
+	return 0;
 }
 
 /**
@@ -285,8 +286,9 @@ static int cvm_oct_common_change_mtu(struct net_device *dev, int new_mtu)
 	 */
 	if ((new_mtu + 14 + 4 + vlan_bytes < 64)
 	    || (new_mtu + 14 + 4 + vlan_bytes > 65392)) {
-		pr_err("MTU must be between %d and %d.\n",
-		       64 - 14 - 4 - vlan_bytes, 65392 - 14 - 4 - vlan_bytes);
+		netdev_err(dev, "MTU must be between %d and %d.\n",
+			   64 - 14 - 4 - vlan_bytes,
+			   65392 - 14 - 4 - vlan_bytes);
 		return -EINVAL;
 	}
 	dev->mtu = new_mtu;
@@ -580,7 +582,7 @@ static int __devinit cvm_oct_probe(struct platform_device *pdev)
 	int num_interfaces;
 	int interface;
 	int fau = FAU_NUM_PACKET_BUFFERS_TO_FREE;
-	int qos;
+	int qos, r;
 	struct device_node *pip;
 
 	octeon_mdiobus_force_mod_depencency();
@@ -588,17 +590,19 @@ static int __devinit cvm_oct_probe(struct platform_device *pdev)
 
 	pip = pdev->dev.of_node;
 	if (!pip) {
-		pr_err("Error: No 'pip' in /aliases\n");
+		dev_err(&pdev->dev, "No of_node.\n");
 		return -EINVAL;
 	}
 
 	cvm_oct_poll_queue = create_singlethread_workqueue("octeon-ethernet");
 	if (cvm_oct_poll_queue == NULL) {
-		pr_err("octeon-ethernet: Cannot create workqueue");
+		dev_err(&pdev->dev, "Cannot create workqueue");
 		return -ENOMEM;
 	}
 
-	cvm_oct_configure_common_hw();
+	r = cvm_oct_configure_common_hw();
+	if (r)
+		return r;
 
 	cvmx_helper_initialize_packet_io_global();
 
@@ -638,8 +642,9 @@ static int __devinit cvm_oct_probe(struct platform_device *pdev)
 			struct net_device *dev =
 			    alloc_etherdev(sizeof(struct octeon_ethernet));
 			if (!dev) {
-				pr_err("Failed to allocate ethernet device for port %d:%d\n",
-				       interface, interface_port);
+				dev_err(&pdev->dev,
+					"Failed to allocate ethernet device for port %d:%d\n",
+					interface, interface_port);
 				continue;
 			}
 
@@ -717,8 +722,9 @@ static int __devinit cvm_oct_probe(struct platform_device *pdev)
 			if (!dev->netdev_ops) {
 				free_netdev(dev);
 			} else if (register_netdev(dev) < 0) {
-				pr_err("Failed to register ethernet device for interface %d, port %d\n",
-					 interface, priv->ipd_port);
+				dev_err(&pdev->dev,
+					"Failed to register ethernet device for interface %d, port %d\n",
+					interface, priv->ipd_port);
 				free_netdev(dev);
 			} else {
 				list_add_tail(&priv->list, &cvm_oct_list);
-- 
1.7.5.4

