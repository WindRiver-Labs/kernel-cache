From 639766cdf3d6f2e8db2aa3281f11be60aa3e0b2f Mon Sep 17 00:00:00 2001
From: Rajeev Surampally <rsurampally@cavium.com>
Date: Thu, 13 Dec 2012 19:22:27 -0800
Subject: [PATCH 272/337] MIPS: Octeon: Update required SE files for exporting
 configuration.

Based On SDK 3.0.0-482

Signed-off-by: Rajeev Surampally <rsurampally@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 .../executive/cvmx-appcfg-transport.c              |  453 ++++++++++++++++++++
 .../mips/cavium-octeon/executive/cvmx-helper-cfg.c |   17 +-
 arch/mips/cavium-octeon/executive/cvmx-helper.c    |    8 +-
 arch/mips/include/asm/octeon/cvmx-app-config.h     |   98 +++++
 arch/mips/include/asm/octeon/cvmx-helper-cfg.h     |   14 +
 5 files changed, 578 insertions(+), 12 deletions(-)
 create mode 100644 arch/mips/cavium-octeon/executive/cvmx-appcfg-transport.c
 create mode 100644 arch/mips/include/asm/octeon/cvmx-app-config.h

diff --git a/arch/mips/cavium-octeon/executive/cvmx-appcfg-transport.c b/arch/mips/cavium-octeon/executive/cvmx-appcfg-transport.c
new file mode 100644
index 0000000..2c71d27
--- /dev/null
+++ b/arch/mips/cavium-octeon/executive/cvmx-appcfg-transport.c
@@ -0,0 +1,453 @@
+/***********************license start***************
+ * Copyright (c) 2012  Cavium Inc. (support@cavium.com). All rights
+ * reserved.
+ *
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+
+ *   * Neither the name of Cavium Inc. nor the names of
+ *     its contributors may be used to endorse or promote products
+ *     derived from this software without specific prior written
+ *     permission.
+
+ * This Software, including technical data, may be subject to U.S. export  control
+ * laws, including the U.S. Export Administration Act and its  associated
+ * regulations, and may be subject to export or import  regulations in other
+ * countries.
+
+ * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
+ * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR
+ * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
+ * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR
+ * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM
+ * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,
+ * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF
+ * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
+ * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR
+ * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.
+ ***********************license end**************************************/
+
+#ifdef CVMX_BUILD_FOR_LINUX_KERNEL
+#include <linux/export.h>
+#include <asm/octeon/cvmx.h>
+#include <asm/octeon/cvmx-bootmem.h>
+#include <asm/octeon/cvmx-fpa.h>
+#include <asm/octeon/cvmx-ipd.h>
+#include <asm/octeon/cvmx-helper.h>
+#include <asm/octeon/cvmx-helper-cfg.h>
+#include <asm/octeon/cvmx-helper-util.h>
+#include <asm/octeon/cvmx-app-config.h>
+#else
+#include "cvmx.h"
+#include "cvmx-bootmem.h"
+#include "cvmx-fpa.h"
+#include "cvmx-ipd.h"
+#include "cvmx-helper.h"
+#include "cvmx-helper-cfg.h"
+#include "cvmx-helper-util.h"
+#include "cvmx-app-config.h"
+#endif
+
+#define MAX_IFACE CVMX_HELPER_MAX_IFACE
+#define MAX_PORT_PER_IFACE CVMX_HELPER_CFG_MAX_PORT_PER_IFACE
+#define MAX_PKO_PORTS CVMX_HELPER_CFG_MAX_PKO_PORT
+#define addr_of_data(base, index) (1ull << 63 | \
+					(base + (index) * sizeof(int64_t)))
+
+/* only wqe pool is exported for now */
+#define MAX_NUM_OF_POOLS_EXPORTED 1
+
+typedef int (*cvmx_import_config_t)(void);
+typedef int (*cvmx_export_config_t)(void);
+
+extern cvmx_import_config_t cvmx_import_app_config;
+extern cvmx_export_config_t cvmx_export_app_config;
+
+/* named block used to export the config to other applications */
+CVMX_SHARED char cvmx_appcfg_transport_block_name[CVMX_BOOTMEM_NAME_LEN];
+
+/* fpa pool type */
+enum
+{
+	FPA_PACKET_POOL = 0,
+	FPA_WQE_POOL,
+	FPA_OUTPUT_POOL
+};
+
+/* fpa pool app config */
+struct cvmx_fpa_appconfig
+{
+	int64_t pool_type;
+	cvmx_fpa_pool_config_t pool_config;
+};
+
+/* get the size of pko config that will be copied into named block */
+static inline int __cvmx_pko_config_get_size(void)
+{
+	int sz = 0;
+
+	if (octeon_has_feature(OCTEON_FEATURE_PKND))
+		sz = (sizeof(struct cvmx_cfg_port_param) * MAX_IFACE * MAX_PORT_PER_IFACE);
+
+	sz += (sizeof(struct cvmx_cfg_pko_port_param) * MAX_PKO_PORTS);
+
+	return sz;
+}
+
+/* get the size of fpa config that will be copied into named block */
+static inline int __cvmx_fpa_config_get_size(void)
+{
+	int sz = 0;
+
+	sz = sizeof(struct cvmx_fpa_appconfig) * MAX_NUM_OF_POOLS_EXPORTED;
+	
+	return sz;
+}
+
+/**
+ * @INTERNAL
+ * Copy size bytes from local buffer to bootmem dest address.
+ *
+ * @param src_ptr is pointer to local buffer and is source for mem copy.
+ * @param bootmem_dest_addr is destination bootmem addr for mem copy.
+ * @param size is number of bytes to copy from src to dest.
+ *
+ * @return return zero on success.
+ */
+int __cvmx_copy_to_bootmem(void * src_ptr, int64_t bootmem_dest_addr, int size)
+{
+	int64_t base_addr;
+	int sz, i;
+	int64_t *ptr_64;
+	int8_t *ptr_8;
+
+	/* copy in 64bit words */
+	sz = (size/8);
+
+	ptr_64 = (int64_t *) src_ptr;
+	base_addr = addr_of_data(bootmem_dest_addr, 0);
+
+	for (i = 0; i < sz; i++) {
+		cvmx_write64_int64(base_addr, ptr_64[i]);
+		base_addr += 8;
+	}
+
+	/* write rem bytes */
+	ptr_8 = (int8_t *)(ptr_64 + sz);
+	sz = (size%8);
+	if (sz) {
+		for (i = 0; i < sz; i++) {
+			cvmx_write64_int8(base_addr, ptr_8[i]);
+			base_addr += 1;
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * @INTERNAL
+ * Copy size bytes from bootmem addr to local buffer.
+ *
+ * @param bootmem_src_addr is source bootmem addr for mem copy.
+ * @param dst_ptr is pointer to local buffer and is dest for mem copy.
+ * @param size is number of bytes to copy from src to dest.
+ *
+ * @return return zero on success, non-zero on failure.
+ */
+int __cvmx_copy_from_bootmem(int64_t bootmem_src_addr, void * dst_ptr, int size)
+{
+	int64_t base_addr;
+	int sz, i;
+	int64_t *ptr_64;
+	int8_t *ptr_8;
+
+	/* read 64bit words */
+	sz = (size/8);
+
+	ptr_64 = (int64_t *) dst_ptr;
+	base_addr = addr_of_data(bootmem_src_addr, 0);
+
+	for (i = 0; i < sz; i++) {
+		ptr_64[i] = cvmx_read64_int64(base_addr);
+		base_addr += 8;
+	}
+
+	/* read rem bytes */
+	ptr_8 = (int8_t *)(ptr_64 + sz);
+	sz = (size%8);
+	if (sz) {
+		for (i = 0; i < sz; i++) {
+			ptr_8[i] = cvmx_read64_int8(base_addr);
+			base_addr += 1;
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * @INTERNAL
+ * Export fpa config using named block.
+ *
+ * @param fpa_config_addr is address of named block.
+ */
+static void __cvmx_export_fpa_config(uint64_t fpa_config_addr)
+{
+	struct cvmx_fpa_appconfig fpa_config;
+
+	/* copy wqe pool information */
+	fpa_config.pool_config.pool_num = cvmx_fpa_get_wqe_pool();
+	fpa_config.pool_config.buffer_size = cvmx_fpa_get_wqe_pool_block_size();
+	fpa_config.pool_type = FPA_WQE_POOL;
+
+	__cvmx_copy_to_bootmem(&fpa_config, fpa_config_addr,
+				sizeof(struct cvmx_fpa_appconfig));
+}
+
+/**
+ * @INTERNAL
+ * Exports pko config(port and queue config) using named block.
+ *
+ * @param pko_config_addr is address of named block.
+ *
+ * @return return zero on success.
+ */
+static int __cvmx_export_pko_config(int64_t pko_config_addr)
+{
+	int port_sz = 0, pko_port_sz;
+
+	if (octeon_has_feature(OCTEON_FEATURE_PKND))
+		port_sz = (sizeof(struct cvmx_cfg_port_param) * MAX_IFACE * MAX_PORT_PER_IFACE);
+
+	pko_port_sz = (sizeof(struct cvmx_cfg_pko_port_param) * MAX_PKO_PORTS);
+
+	/* copy cvmx_cfg_pko_port_param */
+	__cvmx_copy_to_bootmem(cvmx_pko_queue_table, pko_config_addr,
+				pko_port_sz);
+
+	/* no cvmx_cfg_port_parm, return */
+	if (port_sz == 0)
+		return 0;
+
+	pko_config_addr += pko_port_sz;
+
+	/* copy cvmx_cfg_port_parm */
+	__cvmx_copy_to_bootmem(cvmx_cfg_port, pko_config_addr, port_sz);
+
+	return 0;
+}
+
+/**
+ * @INTERNAL
+ * Exports app config(pko, fpa pool config) using named block.
+ *
+ * @return return zero on success, non-zero on failure.
+ */
+int __cvmx_export_app_config(void)
+{
+	int sz, pko_cfg_sz, fpa_cfg_sz;
+	int64_t app_config_addr;
+
+	pko_cfg_sz = __cvmx_pko_config_get_size();
+	fpa_cfg_sz = __cvmx_fpa_config_get_size();
+
+	sz = pko_cfg_sz + fpa_cfg_sz;
+
+	/* allocate named block */
+	app_config_addr = cvmx_bootmem_phy_named_block_alloc(sz, 0, 0,
+					CVMX_CACHE_LINE_SIZE,
+					cvmx_appcfg_transport_block_name, 0);
+	if (app_config_addr < 0) {
+		cvmx_dprintf("ERROR: Could not allocate mem from bootmem\n");
+		return -1;
+	}
+
+	/* write pko config to named block */
+	__cvmx_export_pko_config(app_config_addr);
+
+	app_config_addr += pko_cfg_sz;
+
+	/* write fpa pool config to named block */
+	__cvmx_export_fpa_config(app_config_addr);
+
+	return 0;
+}
+
+/**
+ * Called by apps to export app config to other
+ * cooperating applications using a named block
+ * defined by param block_name.
+ *
+ * @param block_name Name of the named block to use for exporting config.
+ *
+ * @return 0 on success.
+ */
+int __cvmx_export_app_config_to_named_block(char * block_name)
+{
+	int bootmem_name_len;
+
+	bootmem_name_len = strlen(block_name);
+	if (bootmem_name_len >= CVMX_BOOTMEM_NAME_LEN)
+		bootmem_name_len = (CVMX_BOOTMEM_NAME_LEN - 1);
+
+	memset (cvmx_appcfg_transport_block_name, 0 , CVMX_BOOTMEM_NAME_LEN);
+	strncpy (cvmx_appcfg_transport_block_name, block_name,
+			bootmem_name_len);
+
+	cvmx_export_app_config = __cvmx_export_app_config;
+
+	return 0;
+}
+EXPORT_SYMBOL(__cvmx_export_app_config_to_named_block);
+
+/**
+ * Called by apps to clean app config named block.
+ */
+void __cvmx_export_app_config_cleanup(void)
+{
+	const cvmx_bootmem_named_block_desc_t *block_desc;
+	int dbg = 0, res = 0;
+
+	/* find named block */
+	block_desc = cvmx_bootmem_find_named_block(cvmx_appcfg_transport_block_name);
+	if (!block_desc) {
+		if (dbg) cvmx_dprintf("Could not find transport config named block\n");
+		return;
+	}
+
+	res = cvmx_bootmem_free_named(cvmx_appcfg_transport_block_name);
+	if (dbg) cvmx_dprintf("free transport config block res=%d\n", res);
+}
+EXPORT_SYMBOL(__cvmx_export_app_config_cleanup);
+
+/**
+ * @INTERNAL
+ * Imports fpa config using named block.
+ *
+ * @param fpa_config_addr is address of named block.
+ */
+static void __cvmx_import_fpa_config(uint64_t fpa_config_addr)
+{
+	struct cvmx_fpa_appconfig fpa_config[MAX_NUM_OF_POOLS_EXPORTED];
+
+	/* copy pool info */
+	__cvmx_copy_from_bootmem(fpa_config_addr, fpa_config,
+				__cvmx_fpa_config_get_size());
+
+	/* get wqe pool info */
+	if (fpa_config[0].pool_type == FPA_WQE_POOL) {
+		int64_t pool_num = fpa_config[0].pool_config.pool_num;
+		uint64_t buffer_size = fpa_config[0].pool_config.buffer_size;
+		/* communicate pool information to ipd */
+		cvmx_ipd_set_wqe_pool_config(pool_num, buffer_size, 0);
+	}
+}
+
+/**
+ * @INTERNAL
+ * Imports pko config(port and queue config) using named block.
+ *
+ * @param pko_config_addr is address of named block.
+ *
+ * @return return zero on success, non-zero on failure.
+ */
+static int __cvmx_import_pko_config(int64_t pko_config_addr)
+{
+	int port_sz = 0, pko_port_sz;
+
+	if (octeon_has_feature(OCTEON_FEATURE_PKND))
+		port_sz = (sizeof(struct cvmx_cfg_port_param) * MAX_IFACE * MAX_PORT_PER_IFACE);
+
+	pko_port_sz = (sizeof(struct cvmx_cfg_pko_port_param) * MAX_PKO_PORTS);
+
+	/* copy cvmx_cfg_pko_port_param */
+	__cvmx_copy_from_bootmem(pko_config_addr, cvmx_pko_queue_table,
+					pko_port_sz);
+
+	if (port_sz == 0)
+		return 0;
+
+	pko_config_addr += pko_port_sz;
+
+	/* copy cvmx_cfg_port_parm */
+	__cvmx_copy_from_bootmem(pko_config_addr, cvmx_cfg_port, port_sz);
+
+	return 0;
+}
+
+/**
+ * @INTERNAL
+ * Imports app config(pko, fpa pool config) from named block.
+ *
+ * @return return zero on success, non-zero on failure.
+ */
+int __cvmx_import_app_config(void)
+{
+	const cvmx_bootmem_named_block_desc_t *block_desc;
+	int pko_cfg_sz;
+	int64_t app_config_addr;
+	int res = 0, dbg = 0;
+
+	/* find named block */
+	block_desc = cvmx_bootmem_find_named_block(cvmx_appcfg_transport_block_name);
+	if (!block_desc) {
+		cvmx_dprintf("Could not find transport config named block\n");
+		return -1;
+	}
+
+	app_config_addr = block_desc->base_addr;
+
+	pko_cfg_sz = __cvmx_pko_config_get_size();
+
+	/* read pko config from named block */
+	__cvmx_import_pko_config(app_config_addr);
+
+	app_config_addr += pko_cfg_sz;
+
+	/* read fpa pool config from named block */
+	__cvmx_import_fpa_config(app_config_addr);
+
+	/* import is done, now delete the named block */
+	res = cvmx_bootmem_free_named(cvmx_appcfg_transport_block_name);
+	if (dbg)
+		cvmx_dprintf("free transport config block res=%d\n", res);
+
+	return !res;
+}
+
+/**
+ * Called by apps to import app config from other
+ * cooperating applications using a named block
+ * defined by param block_name.
+ *
+ * @param block_name Name of the named block to use for exporting config.
+ *
+ * @return 0 on success.
+ */
+int __cvmx_import_app_config_from_named_block(char * block_name)
+{
+	int bootmem_name_len;
+
+	bootmem_name_len = strlen(block_name);
+	if (bootmem_name_len >= CVMX_BOOTMEM_NAME_LEN)
+		bootmem_name_len = (CVMX_BOOTMEM_NAME_LEN - 1);
+
+	memset (cvmx_appcfg_transport_block_name, 0 , CVMX_BOOTMEM_NAME_LEN);
+	strncpy (cvmx_appcfg_transport_block_name, block_name,
+			bootmem_name_len);
+
+	cvmx_import_app_config = __cvmx_import_app_config;
+
+	return 0;
+}
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c b/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c
index 2f40e74..91a9ea4 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c
@@ -689,7 +689,7 @@ int __cvmx_helper_init_port_valid(void)
 }
 
 typedef int (*cvmx_import_config_t)(void);
-cvmx_import_config_t cvmx_import_pko_config = NULL;
+cvmx_import_config_t cvmx_import_app_config = NULL;
 
 int __cvmx_helper_init_port_config_data_local(void)
 {
@@ -698,8 +698,8 @@ int __cvmx_helper_init_port_config_data_local(void)
 
 	if (octeon_has_feature(OCTEON_FEATURE_PKND))
 	{
-		if (cvmx_import_pko_config) {
-			rv = (*cvmx_import_pko_config)();
+		if (cvmx_import_app_config) {
+			rv = (*cvmx_import_app_config)();
 			if (rv != 0) {
 				cvmx_dprintf("failed to import config\n");
 				return -1;
@@ -709,8 +709,8 @@ int __cvmx_helper_init_port_config_data_local(void)
 		cvmx_helper_cfg_init_pko_port_map();
 		__cvmx_helper_cfg_init_ipd2pko_cache();
 	} else {
-		if (cvmx_import_pko_config) {
-			rv = (*cvmx_import_pko_config)();
+		if (cvmx_import_app_config) {
+			rv = (*cvmx_import_app_config)();
 			if (rv != 0) {
 				cvmx_dprintf("failed to import config\n");
 				return -1;
@@ -802,18 +802,19 @@ int __cvmx_helper_init_port_config_data(void)
 	num_interfaces = cvmx_helper_get_number_of_interfaces();
 	for (interface = 0; interface < num_interfaces; interface++) {
 		int num_ports = __cvmx_helper_early_ports_on_interface(interface);
-		int port, port_base, queue, init_req;
+		int port, port_base, queue;
 
 		for (port = 0; port < num_ports; port++) {
+			bool init_req = false;
 			if (octeon_has_feature(OCTEON_FEATURE_PKND)) {
 				port_base = __cvmx_helper_cfg_pko_port_base(interface, port);
 				if (port_base == CVMX_HELPER_CFG_INVALID_VALUE)
-					init_req = 1;
+					init_req = true;
 			} else {
 				port_base = cvmx_helper_get_ipd_port(interface, port);
 				queue = __cvmx_helper_cfg_pko_queue_base(port_base);
 				if (queue == CVMX_HELPER_CFG_INVALID_VALUE)
-					init_req = 1;
+					init_req = true;
 			}
 
 			if (init_req) {
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper.c b/arch/mips/cavium-octeon/executive/cvmx-helper.c
index f83f206..8909bd0 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper.c
@@ -93,7 +93,7 @@
 CVMX_SHARED uint64_t  cvmx_rgmii_backpressure_dis=1;
 
 typedef int (*cvmx_export_config_t)(void);
-cvmx_export_config_t cvmx_export_pko_config = NULL;
+cvmx_export_config_t cvmx_export_app_config = NULL;
 
 void cvmx_rgmii_set_back_pressure(uint64_t backpressure_dis)
 {
@@ -1413,9 +1413,9 @@ int cvmx_helper_initialize_packet_io_global(void)
 	/* Enable any flow control and backpressure */
 	result |= __cvmx_helper_global_setup_backpressure();
 
-	/* export pko config if set */
-	if (cvmx_export_pko_config) {
-		result |= (*cvmx_export_pko_config)();
+	/* export app config if set */
+	if (cvmx_export_app_config) {
+		result |= (*cvmx_export_app_config)();
 	}
 
 	if (cvmx_ipd_cfg.ipd_enable)
diff --git a/arch/mips/include/asm/octeon/cvmx-app-config.h b/arch/mips/include/asm/octeon/cvmx-app-config.h
new file mode 100644
index 0000000..75dd539
--- /dev/null
+++ b/arch/mips/include/asm/octeon/cvmx-app-config.h
@@ -0,0 +1,98 @@
+/***********************license start***************
+ * Copyright (c) 2012  Cavium Inc. (support@cavium.com). All rights
+ * reserved.
+ *
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+
+ *   * Neither the name of Cavium Inc. nor the names of
+ *     its contributors may be used to endorse or promote products
+ *     derived from this software without specific prior written
+ *     permission.
+
+ * This Software, including technical data, may be subject to U.S. export  control
+ * laws, including the U.S. Export Administration Act and its  associated
+ * regulations, and may be subject to export or import  regulations in other
+ * countries.
+
+ * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
+ * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR
+ * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
+ * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR
+ * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM
+ * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,
+ * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF
+ * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
+ * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR
+ * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.
+ ***********************license end**************************************/
+
+#ifndef __CVMX_APP_CONFIG_H__
+#define __CVMX_APP_CONFIG_H__
+
+#ifdef    __cplusplus
+/* *INDENT-OFF* */
+extern "C" {
+/* *INDENT-ON* */
+#endif
+
+/* This defines the name of the named block from which config(pko, pools)
+   is exported/imported */
+#define CVMX_APP_CONFIG "cvmx-app-config"
+
+/* skip_app_config */
+extern int skip_app_config;
+
+/**
+ * Sets the skip_app_config. This can be called by the application when
+ * it wants to skip the configuration.
+ */
+void cvmx_skip_app_config_set(void);
+
+/**
+ * @INTERNAL
+ * Called by apps to export app config to other
+ * cooperating applications using a named block
+ * defined by param block_name.
+ *
+ * @param block_name Name of the named block to use for exporting config.
+ *
+ * @return 0 on success.
+ */
+int __cvmx_export_app_config_to_named_block(char * block_name);
+
+/**
+ * @INTERNAL
+ * Called by apps to import app config from other
+ * cooperating applications using a named block
+ * defined by param block_name.
+ *
+ * @param block_name Name of the named block to use for exporting config.
+ *
+ * @return 0 on success.
+ */
+int __cvmx_import_app_config_from_named_block(char * block_name);
+
+/**
+ * @INTERNAL
+ * Called by apps to clean app config named block.
+ */
+void __cvmx_export_app_config_cleanup(void);
+
+#ifdef  __cplusplus
+/* *INDENT-OFF* */
+}
+/* *INDENT-ON* */
+#endif
+
+#endif /* __CVMX_APP_CONFIG_H__ */
diff --git a/arch/mips/include/asm/octeon/cvmx-helper-cfg.h b/arch/mips/include/asm/octeon/cvmx-helper-cfg.h
index ad82c5a..2e88414 100644
--- a/arch/mips/include/asm/octeon/cvmx-helper-cfg.h
+++ b/arch/mips/include/asm/octeon/cvmx-helper-cfg.h
@@ -336,6 +336,20 @@ extern int cvmx_helper_cfg_ipd2pko_port_num(int ipd_port);
 extern int __cvmx_helper_init_port_config_data(void);
 
 /*
+ * @INTERNAL
+ * The local init function
+ *
+ * @param none
+ * @return 0 for success.
+ *
+ * Note: this function is meant to be called to set the ``configured
+ * parameters locally,'' e.g., pknd, bpid, etc. and therefore should be before
+ * any of the corresponding cvmx_helper_cfg_xxxx() functions are
+ * called.
+ */
+extern int __cvmx_helper_init_port_config_data_local(void);
+
+/*
  * Set the frame max size and jabber size to 65535.
  *
  */
-- 
1.7.5.4

