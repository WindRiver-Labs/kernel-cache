From 43b56c3af51944246f4d32cb2db4e1f5ad7faf5a Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Mon, 26 Nov 2012 12:03:00 -0800
Subject: [PATCH 234/337] i2c: i2c-octeon: Add octeon_i2c_cvmx2i2c() function.

Based On SDK 3.0.0-482

... to allow interaction with cvmx-twsi code.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/include/asm/octeon/octeon.h |    2 ++
 drivers/i2c/busses/i2c-octeon.c       |   28 ++++++++++++++++++++++++++++
 2 files changed, 30 insertions(+), 0 deletions(-)

diff --git a/arch/mips/include/asm/octeon/octeon.h b/arch/mips/include/asm/octeon/octeon.h
index ae35de8d7..404b5bf 100644
--- a/arch/mips/include/asm/octeon/octeon.h
+++ b/arch/mips/include/asm/octeon/octeon.h
@@ -388,4 +388,6 @@ int octeon_request_ipi_handler(octeon_message_fn_t fn);
 void octeon_send_ipi_single(int cpu, unsigned int action);
 void octeon_release_ipi_handler(int action);
 
+int octeon_i2c_cvmx2i2c(unsigned int cvmx_twsi_bus_num);
+
 #endif /* __ASM_OCTEON_OCTEON_H */
diff --git a/drivers/i2c/busses/i2c-octeon.c b/drivers/i2c/busses/i2c-octeon.c
index 655e27c..4fd5f34 100644
--- a/drivers/i2c/busses/i2c-octeon.c
+++ b/drivers/i2c/busses/i2c-octeon.c
@@ -82,6 +82,7 @@ struct octeon_i2c {
 	struct device *dev;
 	int broken_irq_mode;
 	bool octeon_i2c_hlc_enabled;
+	int cvmx_channel;
 };
 
 /**
@@ -905,6 +906,17 @@ static int __devinit octeon_i2c_initlowlevel(struct octeon_i2c *i2c)
 	return 0;
 }
 
+static int octeon_i2c_cvmx_map[2] = {-ENODEV, -ENODEV};
+
+int octeon_i2c_cvmx2i2c(unsigned int cvmx_twsi_bus_num)
+{
+	if (cvmx_twsi_bus_num < ARRAY_SIZE(octeon_i2c_cvmx_map))
+		return octeon_i2c_cvmx_map[cvmx_twsi_bus_num];
+	else
+		return -ENODEV;
+}
+EXPORT_SYMBOL(octeon_i2c_cvmx2i2c);
+
 static int __devinit octeon_i2c_probe(struct platform_device *pdev)
 {
 	int irq, result = 0;
@@ -922,6 +934,7 @@ static int __devinit octeon_i2c_probe(struct platform_device *pdev)
 		result = -ENOMEM;
 		goto out;
 	}
+	i2c->cvmx_channel = -1;
 	i2c->dev = &pdev->dev;
 
 	res_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
@@ -949,6 +962,17 @@ static int __devinit octeon_i2c_probe(struct platform_device *pdev)
 
 	i2c->sys_freq = octeon_get_io_clock_rate();
 
+	switch (res_mem->start) {
+	case 0x1180000001000:
+		i2c->cvmx_channel = 0;
+		break;
+	case 0x1180000001200:
+		i2c->cvmx_channel = 1;
+		break;
+	default:
+		break;
+	}
+
 	if (!devm_request_mem_region(&pdev->dev, res_mem->start, resource_size(res_mem),
 				     res_mem->name)) {
 		dev_err(i2c->dev, "request_mem_region failed\n");
@@ -994,6 +1018,8 @@ static int __devinit octeon_i2c_probe(struct platform_device *pdev)
 	dev_info(i2c->dev, "version %s\n", DRV_VERSION);
 
 	of_i2c_register_devices(&i2c->adap);
+	if (i2c->cvmx_channel >= 0)
+		octeon_i2c_cvmx_map[i2c->cvmx_channel] = i2c->adap.nr;
 
 	return 0;
 
@@ -1007,6 +1033,8 @@ static int __devexit octeon_i2c_remove(struct platform_device *pdev)
 {
 	struct octeon_i2c *i2c = platform_get_drvdata(pdev);
 
+	if (i2c->cvmx_channel >= 0)
+		octeon_i2c_cvmx_map[i2c->cvmx_channel] = -ENODEV;
 	i2c_del_adapter(&i2c->adap);
 	platform_set_drvdata(pdev, NULL);
 	return 0;
-- 
1.7.5.4

