From cf479815faa5bf4df7049df000c5728828705244 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Wed, 16 Jan 2013 16:42:13 -0800
Subject: [PATCH 324/337] MIPS: OCTEON: Fixes for error tree framework.

Based On SDK 3.0.0-482

We were getting:

Call Trace:
[<ffffffff805959c8>] dump_stack+0x8/0x34
[<ffffffff8059be5c>] __schedule+0x664/0x680
[<ffffffff8059a168>] schedule_timeout+0x190/0x1f8
[<ffffffff8059b6b0>] wait_for_common+0xd8/0x180
[<ffffffff80178b1c>] kthread_stop+0x54/0xc0
[<ffffffff801a8a44>] __free_irq+0x134/0x208
[<ffffffff801a8b74>] free_irq+0x5c/0xe8
[<ffffffff80106f2c>] octeon_hw_status_remove_source+0x184/0x190
[<ffffffff80135d34>] octeon_error_tree_remove.constprop.4+0xcc/0x1c0
[<ffffffff80135eb0>] octeon_error_tree_disable+0x88/0xd8
[<ffffffffc0086614>] cvm_oct_adjust_link+0x74/0xa0 [octeon_ethernet]
[<ffffffff8041b5bc>] phy_state_machine+0xdc/0x5c0
[<ffffffff80173da4>] process_one_work+0x144/0x430
[<ffffffff80174468>] worker_thread+0x170/0x378
[<ffffffff80178ac0>] kthread+0x90/0x98
[<ffffffff80138518>] kernel_thread_helper+0x10/0x18

And:
WARNING: at arch/mips/cavium-octeon/octeon-hw-status.c:117 find_node_cb+0xa0/0xd8()
Mismatched properties
Modules linked in: octeon_ethernet ipv6 at24
Call Trace:
[<ffffffff805959c8>] dump_stack+0x8/0x34
[<ffffffff8015a588>] warn_slowpath_common+0x78/0xa8
[<ffffffff8015a658>] warn_slowpath_fmt+0x38/0x48
[<ffffffff80106d70>] find_node_cb+0xa0/0xd8
[<ffffffff80106a40>] visit_leaves+0x50/0xb8
[<ffffffff80106df0>] octeon_hw_status_remove_source+0x48/0x190
[<ffffffff80135d20>] octeon_error_tree_remove.constprop.4+0xb8/0x1b0
[<ffffffff80135ea0>] octeon_error_tree_disable+0x88/0xd8
[<ffffffffc0086614>] cvm_oct_adjust_link+0x74/0xa0 [octeon_ethernet]
[<ffffffff8041b5bc>] phy_state_machine+0xdc/0x5c0
[<ffffffff80173da4>] process_one_work+0x144/0x430
[<ffffffff80174468>] worker_thread+0x170/0x378
[<ffffffff80178ac0>] kthread+0x90/0x98
[<ffffffff80138518>] kernel_thread_helper+0x10/0x18

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/cavium-octeon/octeon-error-tree.c |    1 +
 arch/mips/cavium-octeon/octeon-hw-status.c  |   36 +++++++++++++++++---------
 2 files changed, 24 insertions(+), 13 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-error-tree.c b/arch/mips/cavium-octeon/octeon-error-tree.c
index 7ab01c1..9f0abc5 100644
--- a/arch/mips/cavium-octeon/octeon-error-tree.c
+++ b/arch/mips/cavium-octeon/octeon-error-tree.c
@@ -35,6 +35,7 @@ static void octeon_error_tree_remove(int idx, int max_idx, struct cvmx_error_mux
 		r.reg = n->reg;
 		r.mask_reg = n->mask_reg;
 		r.bit = bit->bit;
+		r.ack_w1c = bit->w1c;
 		octeon_hw_status_remove_source(&r);
 
 		bit++;
diff --git a/arch/mips/cavium-octeon/octeon-hw-status.c b/arch/mips/cavium-octeon/octeon-hw-status.c
index d5d7c2c..f90e7f3 100644
--- a/arch/mips/cavium-octeon/octeon-hw-status.c
+++ b/arch/mips/cavium-octeon/octeon-hw-status.c
@@ -114,7 +114,7 @@ static int find_node_cb(struct octeon_hw_status_node *n, void *arg)
 	return 0;
 found:
 	WARN((n->child != NULL) != sr->has_child ||
-	     n->ack_w1c != sr->ack_w1c, "Mismatched properties");
+	     n->ack_w1c != sr->ack_w1c, "Mismatched properties %p, %d, %d, %d",n->child, sr->has_child, n->ack_w1c, sr->ack_w1c );
 	d->r = n;
 	return 1;
 }
@@ -261,8 +261,10 @@ out:
 }
 EXPORT_SYMBOL(octeon_hw_status_add_source);
 
-static int dispose_of_node(struct octeon_hw_status_node *n)
+/* Return true if we unlocked the lock because we did free_irq. */
+static bool dispose_of_node(struct octeon_hw_status_node *n)
 {
+	bool rv = false;
 	struct octeon_hw_status_node *parent;
 	struct octeon_hw_status_node **pw;
 
@@ -275,10 +277,23 @@ static int dispose_of_node(struct octeon_hw_status_node *n)
 
 		while (*pw) {
 			if (*pw == n) {
+				if (!n->is_hwint && n->mask_reg) {
+					/* Disable the source if we are removing it. */
+					u64 mask = 1ull << n->bit;
+					u64 csr = cvmx_read_csr(n->mask_reg);
+					csr &= ~mask;
+					cvmx_write_csr(n->mask_reg, csr);
+				}
+
 				*pw = n->next;
-				if (n->is_hwint)
+				if (n->is_hwint) {
+					rv = true;
+					write_unlock(&octeon_hw_status_lock);
 					free_irq(n->irq, n);
+				}
 				kfree(n);
+				if (rv)
+					return rv;
 				break;
 			} else {
 				pw = &(*pw)->next;
@@ -289,12 +304,13 @@ static int dispose_of_node(struct octeon_hw_status_node *n)
 			break;
 		n = parent;
 	}
-	return 0;
+	return rv;
 }
 
 int octeon_hw_status_remove_source(struct octeon_hw_status_reg *leaf)
 {
 	int rv = 0;
+	bool already_unlocked = false;
 	struct octeon_hw_status_node *n;
 
 	write_lock(&octeon_hw_status_lock);
@@ -307,17 +323,11 @@ int octeon_hw_status_remove_source(struct octeon_hw_status_reg *leaf)
 
 	n->users--;
 	if (n->users == 0) {
-		if (!n->is_hwint && n->mask_reg) {
-			/* Disable the source if we are removing it. */
-			u64 mask = 1ull << n->bit;
-			u64 csr = cvmx_read_csr(n->mask_reg);
-			csr &= ~mask;
-			cvmx_write_csr(n->mask_reg, csr);
-		}
-		dispose_of_node(n);
+		already_unlocked = dispose_of_node(n);
 	}
 out:
-	write_unlock(&octeon_hw_status_lock);
+	if (!already_unlocked)
+		write_unlock(&octeon_hw_status_lock);
 	return rv;
 }
 EXPORT_SYMBOL(octeon_hw_status_remove_source);
-- 
1.7.5.4

