From 573e0e3892267d5b592150d81b410ca53d50dcd6 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Tue, 5 Jul 2011 18:08:59 -0700
Subject: [PATCH 251/337] MIPS: Octeon: Allow TLB modify handlers to use
 scratchpad for temporary register save.

Based On SDK 3.0.0-482

If C0_KScratch registers are not available use CPU local scratchpad
instead of CPU local memory.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/mm/tlbex.c |   17 ++++++++++++++++-
 1 files changed, 16 insertions(+), 1 deletions(-)

diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c
index d600141..2f47179 100644
--- a/arch/mips/mm/tlbex.c
+++ b/arch/mips/mm/tlbex.c
@@ -54,7 +54,9 @@ struct tlb_reg_save {
 	unsigned long b;
 } ____cacheline_aligned_in_smp;
 
+#ifndef TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET
 static struct tlb_reg_save handler_reg_save[NR_CPUS];
+#endif
 
 static inline int r45k_bvahwbug(void)
 {
@@ -268,10 +270,11 @@ static struct work_registers __cpuinit build_get_work_registers(u32 **p)
 {
 	struct work_registers r;
 
+#ifndef TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET
 	int smp_processor_id_reg;
 	int smp_processor_id_sel;
 	int smp_processor_id_shift;
-
+#endif
 	if (scratch_reg > 0) {
 		/* Save in CPU local C0_KScratch? */
 		UASM_i_MTC0(p, 1, 31, scratch_reg);
@@ -280,6 +283,13 @@ static struct work_registers __cpuinit build_get_work_registers(u32 **p)
 		r.r3 = 1;
 		return r;
 	}
+#ifdef TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET
+	UASM_i_SW(p, 1, TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET(0), 0);
+	r.r1 = K0;
+	r.r2 = K1;
+	r.r3 = 1;
+	return r;
+#else
 
 	if (num_possible_cpus() > 1) {
 #ifdef CONFIG_MIPS_PGD_C0_CONTEXT
@@ -318,6 +328,7 @@ static struct work_registers __cpuinit build_get_work_registers(u32 **p)
 	r.r2 = 1;
 	r.r3 = 2;
 	return r;
+#endif /* TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET */
 }
 
 static void __cpuinit build_restore_work_registers(u32 **p)
@@ -326,9 +337,13 @@ static void __cpuinit build_restore_work_registers(u32 **p)
 		UASM_i_MFC0(p, 1, 31, scratch_reg);
 		return;
 	}
+#ifdef TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET
+	UASM_i_LW(p, 1, TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET(0), 0);
+#else
 	/* K0 already points to save area, restore $1 and $2  */
 	UASM_i_LW(p, 1, offsetof(struct tlb_reg_save, a), K0);
 	UASM_i_LW(p, 2, offsetof(struct tlb_reg_save, b), K0);
+#endif /* TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET */
 }
 
 #ifndef CONFIG_MIPS_PGD_C0_CONTEXT
-- 
1.7.5.4

