From 0e5aa1db13740bd32230c42c66e7f7f4f0e1e11e Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 14 Dec 2012 16:18:44 -0800
Subject: [PATCH 274/337] netdev/octeon-ethernet: Drop corrupt packets.

Based On SDK 3.0.0-482

Unless we can fix them, we need to drop packets with error codes 5 and
7.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 drivers/net/ethernet/octeon/ethernet-rx.c |   31 +++++++++++++++++-----------
 1 files changed, 19 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/octeon/ethernet-rx.c b/drivers/net/ethernet/octeon/ethernet-rx.c
index 743ad19..6d1b840 100644
--- a/drivers/net/ethernet/octeon/ethernet-rx.c
+++ b/drivers/net/ethernet/octeon/ethernet-rx.c
@@ -213,18 +213,21 @@ static irqreturn_t cvm_oct_do_interrupt(int cpl, void *dev_id)
  *
  * Returns Non-zero if the packet can be dropped, zero otherwise.
  */
-static inline int cvm_oct_check_rcv_error(cvmx_wqe_t *work)
+static int cvm_oct_check_rcv_error(cvmx_wqe_t *work)
 {
+	bool err  = false;
+	int port = cvmx_wqe_get_port(work);
+
 	if ((work->word2.snoip.err_code == 10) && (work->word1.len <= 64)) {
 		/* Ignore length errors on min size packets. Some
 		 * equipment incorrectly pads packets to 64+4FCS
 		 * instead of 60+4FCS.  Note these packets still get
 		 * counted as frame errors.
 		 */
-	} else
-	    if (USE_10MBPS_PREAMBLE_WORKAROUND &&
-		((work->word2.snoip.err_code == 5) ||
-		 (work->word2.snoip.err_code == 7))) {
+	} else if (USE_10MBPS_PREAMBLE_WORKAROUND &&
+		   ((work->word2.snoip.err_code == 5)
+		    || (work->word2.snoip.err_code == 7))) {
+
 		/* We received a packet with either an alignment error
 		 * or a FCS error. This may be signalling that we are
 		 * running 10Mbps with GMXX_RXX_FRM_CTL[PRE_CHK}
@@ -232,8 +235,8 @@ static inline int cvm_oct_check_rcv_error(cvmx_wqe_t *work)
 		 * packet to determine if we can remove a non spec
 		 * preamble and generate a correct packet.
 		 */
-		int interface = cvmx_helper_get_interface_num(work->word1.cn38xx.ipprt);
-		int index = cvmx_helper_get_interface_index_num(work->word1.cn38xx.ipprt);
+		int interface = cvmx_helper_get_interface_num(port);
+		int index = cvmx_helper_get_interface_index_num(port);
 		union cvmx_gmxx_rxx_frm_ctl gmxx_rxx_frm_ctl;
 		gmxx_rxx_frm_ctl.u64 = cvmx_read_csr(CVMX_GMXX_RXX_FRM_CTL(index, interface));
 		if (gmxx_rxx_frm_ctl.s.pre_chk == 0) {
@@ -255,21 +258,25 @@ static inline int cvm_oct_check_rcv_error(cvmx_wqe_t *work)
 				work->packet_ptr.s.addr += i;
 				work->word1.len -= i + 4;
 				for (i = 0; i < work->word1.len; i++) {
-					*ptr =
-					    ((*ptr & 0xf0) >> 4) |
-					    ((*(ptr + 1) & 0xf) << 4);
+					*ptr = ((*ptr & 0xf0) >> 4) | ((*(ptr + 1) & 0xf) << 4);
 					ptr++;
 				}
 			} else {
 				printk_ratelimited("Port %d unknown preamble, packet dropped\n",
-						   work->word1.cn38xx.ipprt);
+						   port);
+				/* cvmx_helper_dump_packet(work); */
 				cvm_oct_free_work(work);
 				return 1;
 			}
+		} else {
+			err  = true;
 		}
 	} else {
+			err  = true;
+	}
+	if (err) {
 		printk_ratelimited("Port %d receive error code %d, packet dropped\n",
-				   work->word1.cn38xx.ipprt, work->word2.snoip.err_code);
+				   port, work->word2.snoip.err_code);
 		cvm_oct_free_work(work);
 		return 1;
 	}
-- 
1.7.5.4

