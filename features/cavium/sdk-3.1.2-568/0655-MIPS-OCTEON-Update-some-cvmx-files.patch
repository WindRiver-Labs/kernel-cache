From 1a95fafd5f3a18387f607e45b76d0f14b8ba5e1f Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Sat, 26 Jul 2014 18:05:50 -0700
Subject: [PATCH 655/974] MIPS: OCTEON: Update some cvmx files.

Convert some cvmx_dprintf to cvmx_printf

Signed-off-by: David Daney <david.daney@cavium.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/executive/cvmx-bootmem.c | 40 +++++------
 arch/mips/cavium-octeon/executive/cvmx-helper.c  | 10 +--
 arch/mips/cavium-octeon/executive/cvmx-osm.c     |  6 +-
 arch/mips/cavium-octeon/executive/cvmx-pcie.c    | 88 ++++++++++++------------
 4 files changed, 69 insertions(+), 75 deletions(-)

diff --git a/arch/mips/cavium-octeon/executive/cvmx-bootmem.c b/arch/mips/cavium-octeon/executive/cvmx-bootmem.c
index 8e8f854..3a5de94 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-bootmem.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-bootmem.c
@@ -1,5 +1,5 @@
 /***********************license start***************
- * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights
+ * Copyright (c) 2003-2014  Cavium Inc. (support@cavium.com). All rights
  * reserved.
  *
  *
@@ -1040,26 +1040,24 @@ void cvmx_bootmem_phy_list_print(void)
 	uint64_t addr;
 
 	addr = CVMX_BOOTMEM_DESC_GET_FIELD(head_addr);
-	cvmx_dprintf("\n\n\nPrinting bootmem block list, descriptor: 0x%llx,  "
-		     "head is 0x%llx\n",
-		     CAST_ULL(cvmx_bootmem_desc_addr), CAST_ULL(addr));
-	cvmx_dprintf("Descriptor version: %d.%d\n",
-		     (int)CVMX_BOOTMEM_DESC_GET_FIELD(major_version),
-		     (int)CVMX_BOOTMEM_DESC_GET_FIELD(minor_version));
+	cvmx_printf("\n\n\nPrinting bootmem block list, descriptor: 0x%llx, head is 0x%llx\n",
+		    CAST_ULL(cvmx_bootmem_desc_addr), CAST_ULL(addr));
+	cvmx_printf("Descriptor version: %d.%d\n",
+		    (int)CVMX_BOOTMEM_DESC_GET_FIELD(major_version),
+		    (int)CVMX_BOOTMEM_DESC_GET_FIELD(minor_version));
 	if (CVMX_BOOTMEM_DESC_GET_FIELD(major_version) > 3)
 		cvmx_dprintf("Warning: Bootmem descriptor version is newer than expected\n");
 
 	if (!addr)
-		cvmx_dprintf("mem list is empty!\n");
+		cvmx_printf("mem list is empty!\n");
 
 	while (addr) {
-		cvmx_dprintf("Block address: 0x%08llx, size: 0x%08llx, next: "
-			     "0x%08llx\n", CAST_ULL(addr),
-			     CAST_ULL(cvmx_bootmem_phy_get_size(addr)),
-			     CAST_ULL(cvmx_bootmem_phy_get_next(addr)));
+		cvmx_printf("Block address: 0x%08llx, size: 0x%08llx, next: 0x%08llx\n", CAST_ULL(addr),
+			    CAST_ULL(cvmx_bootmem_phy_get_size(addr)),
+			    CAST_ULL(cvmx_bootmem_phy_get_next(addr)));
 		addr = cvmx_bootmem_phy_get_next(addr);
 	}
-	cvmx_dprintf("\n\n");
+	cvmx_printf("\n\n");
 }
 
 uint64_t cvmx_bootmem_phy_available_mem(uint64_t min_block_size)
@@ -1238,7 +1236,7 @@ void cvmx_bootmem_phy_named_block_print(void)
 #endif
 	if (__cvmx_bootmem_check_version(3))
 		return;
-	cvmx_dprintf("List of currently allocated named bootmem blocks:\n");
+	cvmx_printf("List of currently allocated named bootmem blocks:\n");
 	for (i = 0; i < num_blocks; i++) {
 		uint64_t named_size =
 			CVMX_BOOTMEM_NAMED_GET_FIELD(named_block_addr, size);
@@ -1250,15 +1248,14 @@ void cvmx_bootmem_phy_named_block_print(void)
 			CVMX_BOOTMEM_NAMED_GET_NAME(named_block_addr, name_tmp,
 						    name_length);
 			printed++;
-			cvmx_dprintf("Name: %s, address: 0x%08llx, size: "
-				     "0x%08llx, index: %d\n", name_tmp,
+			cvmx_printf("Name: %s, address: 0x%08llx, size: 0x%08llx, index: %d\n", name_tmp,
 				     CAST_ULL(named_addr),
 				     CAST_ULL(named_size), i);
 		}
 		named_block_addr += sizeof(cvmx_bootmem_named_block_desc_t);
 	}
 	if (!printed)
-		cvmx_dprintf("No named bootmem blocks exist.\n");
+		cvmx_printf("No named bootmem blocks exist.\n");
 }
 
 
@@ -1549,16 +1546,14 @@ int cvmx_bootmem_reserve_memory(uint64_t start_addr, uint64_t size,
 				 name, (unsigned long long)start_addr,
 				 (unsigned int)block_num);
 #ifdef DEBUG
-			cvmx_dprintf("%s: Reserving 0x%llx bytes at address"
-				     " 0x%llx with name %s\n",
+			cvmx_dprintf("%s: Reserving 0x%llx bytes at address 0x%llx with name %s\n",
 				     __func__, CAST_ULL(reserve_size),
 				     CAST_ULL(addr), block_name);
 #endif
 			if (cvmx_bootmem_phy_named_block_alloc(
 				reserve_size, addr, 0, 0, block_name, flags
 				) == -1) {
-				cvmx_dprintf("%s: Failed to reserve 0x%llx "
-					     "bytes at address 0x%llx\n",
+				cvmx_dprintf("%s: Failed to reserve 0x%llx bytes at address 0x%llx\n",
 					     __func__, CAST_ULL(reserve_size),
 					    (unsigned long long)addr);
 				rc = 0;
@@ -1566,8 +1561,7 @@ int cvmx_bootmem_reserve_memory(uint64_t start_addr, uint64_t size,
 			}
 #ifdef DEBUG
 			else
-				cvmx_dprintf("%s: Reserved 0x%llx bytes at "
-					     "address 0x%llx with name %s\n",
+				cvmx_dprintf("%s: Reserved 0x%llx bytes at address 0x%llx with name %s\n",
 					     __func__, CAST_ULL(reserve_size),
 					     CAST_ULL(addr), block_name);
 #endif
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper.c b/arch/mips/cavium-octeon/executive/cvmx-helper.c
index 349b230..0b253d1 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper.c
@@ -1624,14 +1624,14 @@ int cvmx_helper_initialize_packet_io_node(unsigned int node)
 		/* Skip invalid/disabled interfaces */
 		if (cvmx_helper_ports_on_interface(interface) <= 0)
 			continue;
-		cvmx_dprintf("Interface %d has %d ports (%s)\n",
-		     interface,
-		     cvmx_helper_ports_on_interface(interface),
-		     cvmx_helper_interface_mode_to_string(cvmx_helper_interface_get_mode(interface)));
+		cvmx_printf("Interface %d has %d ports (%s)\n",
+			    interface,
+			    cvmx_helper_ports_on_interface(interface),
+			    cvmx_helper_interface_mode_to_string(cvmx_helper_interface_get_mode(interface)));
 
 		result |= __cvmx_helper_ipd_setup_interface(interface);/* vinita_to_do separate pki */
 		if (octeon_has_feature(OCTEON_FEATURE_CN78XX_WQE))
-		  result |= cvmx_helper_pko3_init_interface(cvmx_helper_node_interface_to_xiface(node, interface));
+			result |= cvmx_helper_pko3_init_interface(cvmx_helper_node_interface_to_xiface(node, interface));
 		else
 			result |= __cvmx_helper_interface_setup_pko(interface);
 	}
diff --git a/arch/mips/cavium-octeon/executive/cvmx-osm.c b/arch/mips/cavium-octeon/executive/cvmx-osm.c
index 2717195..e604e66 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-osm.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-osm.c
@@ -64,7 +64,7 @@
 
 static CVMX_SHARED cvmx_spinlock_t cvmx_osm_lock=CVMX_SPINLOCK_UNLOCKED_INITIALIZER;
 static CVMX_SHARED int cvmx_osm_init_done;
-static const char * cvmx_osm_bank_names[] = 
+static const char * cvmx_osm_bank_names[] =
 		{"DISABLED", "HFA", "HNA", "ASE-TWC", "ASE-BWC", "ASE-RWC"};
 
 /**
@@ -216,8 +216,8 @@ void cvmx_osm_dump_banks(void)
 
 	for (itr = 0; itr < CVMX_OSM_MAX_BANKS; itr++) {
 		bank_ctrl.u64 = cvmx_read_csr(CVMX_OSM_BANKX_CTRL(itr));
-		cvmx_dprintf("Bank-%d Assigned to %s\n", 
-			      itr, cvmx_osm_bank_names[bank_ctrl.s.bank_assign]);
+		cvmx_printf("Bank-%d Assigned to %s\n",
+			    itr, cvmx_osm_bank_names[bank_ctrl.s.bank_assign]);
 	}
 }
 EXPORT_SYMBOL(cvmx_osm_dump_banks);
diff --git a/arch/mips/cavium-octeon/executive/cvmx-pcie.c b/arch/mips/cavium-octeon/executive/cvmx-pcie.c
index 9ae319d..08820d7 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-pcie.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-pcie.c
@@ -548,7 +548,7 @@ static int __cvmx_pcie_rc_initialize_link_gen1(int pcie_port)
 	start_cycle = cvmx_get_cycle();
 	do {
 		if (cvmx_get_cycle() - start_cycle > 2 * cvmx_clock_get_rate(CVMX_CLOCK_CORE)) {
-			cvmx_dprintf("PCIe: Port %d link timeout\n", pcie_port);
+			cvmx_printf("PCIe: Port %d link timeout\n", pcie_port);
 			return -1;
 		}
 		cvmx_wait(10000);
@@ -630,7 +630,7 @@ retry:
 	 */
 	npei_ctl_status.u64 = cvmx_read_csr(CVMX_PEXP_NPEI_CTL_STATUS);
 	if ((pcie_port == 0) && !npei_ctl_status.s.host_mode) {
-		cvmx_dprintf("PCIe: Port %d in endpoint mode\n", pcie_port);
+		cvmx_printf("PCIe: Port %d in endpoint mode\n", pcie_port);
 		return -1;
 	}
 
@@ -640,7 +640,7 @@ retry:
 	if (OCTEON_IS_MODEL(OCTEON_CN52XX)) {
 		npei_dbg_data.u64 = cvmx_read_csr(CVMX_PEXP_NPEI_DBG_DATA);
 		if ((pcie_port == 1) && npei_dbg_data.cn52xx.qlm0_link_width) {
-			cvmx_dprintf("PCIe: ERROR: cvmx_pcie_rc_initialize() called on port1, but port1 is disabled\n");
+			cvmx_printf("PCIe: ERROR: cvmx_pcie_rc_initialize() called on port1, but port1 is disabled\n");
 			return -1;
 		}
 	}
@@ -750,8 +750,8 @@ retry:
 		if (CVMX_WAIT_FOR_FIELD64(CVMX_PESCX_CTL_STATUS2(pcie_port),
 					  cvmx_pescx_ctl_status2_t, pclk_run,
 					  ==, 1, 10000)) {
-			cvmx_dprintf("PCIe: Port %d isn't clocked, skipping.\n",
-				     pcie_port);
+			cvmx_printf("PCIe: Port %d isn't clocked, skipping.\n",
+				    pcie_port);
 			return -1;
 		}
 	}
@@ -762,8 +762,8 @@ retry:
 	 */
 	pescx_ctl_status2.u64 = cvmx_read_csr(CVMX_PESCX_CTL_STATUS2(pcie_port));
 	if (pescx_ctl_status2.s.pcierst) {
-		cvmx_dprintf("PCIe: Port %d stuck in reset, skipping.\n",
-			     pcie_port);
+		cvmx_printf("PCIe: Port %d stuck in reset, skipping.\n",
+			    pcie_port);
 		return -1;
 	}
 
@@ -772,24 +772,24 @@ retry:
 	 */
 	pescx_bist_status2.u64 = cvmx_read_csr(CVMX_PESCX_BIST_STATUS2(pcie_port));
 	if (pescx_bist_status2.u64) {
-		cvmx_dprintf("PCIe: Port %d BIST2 failed. Most likely this port isn't hooked up, skipping.\n",
-			     pcie_port);
+		cvmx_printf("PCIe: Port %d BIST2 failed. Most likely this port isn't hooked up, skipping.\n",
+			    pcie_port);
 		return -1;
 	}
 
 	/* Check BIST status */
 	pescx_bist_status.u64 = cvmx_read_csr(CVMX_PESCX_BIST_STATUS(pcie_port));
 	if (pescx_bist_status.u64)
-		cvmx_dprintf("PCIe: BIST FAILED for port %d (0x%016llx)\n",
-			     pcie_port, CAST64(pescx_bist_status.u64));
+		cvmx_printf("PCIe: BIST FAILED for port %d (0x%016llx)\n",
+			    pcie_port, CAST64(pescx_bist_status.u64));
 
 	/* Initialize the config space CSRs */
 	__cvmx_pcie_rc_initialize_config_space(pcie_port);
 
 	/* Bring the link up */
 	if (__cvmx_pcie_rc_initialize_link_gen1(pcie_port)) {
-		cvmx_dprintf("PCIe: Failed to initialize port %d, probably the slot is empty\n",
-			     pcie_port);
+		cvmx_printf("PCIe: Failed to initialize port %d, probably the slot is empty\n",
+			    pcie_port);
 		return -1;
 	}
 
@@ -952,8 +952,8 @@ retry:
 
 		/* Check that the two counters are aligned */
 		if (out_p_count != in_fif_p_count) {
-			cvmx_dprintf("PCIe: Port %d aligning TLP counters as workaround to maintain ordering\n",
-				     pcie_port);
+			cvmx_printf("PCIe: Port %d aligning TLP counters as workaround to maintain ordering\n",
+				    pcie_port);
 			while (in_fif_p_count != 0) {
 				cvmx_write64_uint32(write_address, 0);
 				cvmx_wait(10000);
@@ -976,8 +976,8 @@ retry:
 	/* Display the link status */
 	pciercx_cfg032.u32 = cvmx_pcie_cfgx_read(pcie_port,
 						 CVMX_PCIERCX_CFG032(pcie_port));
-	cvmx_dprintf("PCIe: Port %d link active, %d lanes\n",
-		     pcie_port, pciercx_cfg032.s.nlw);
+	cvmx_printf("PCIe: Port %d link active, %d lanes\n",
+		    pcie_port, pciercx_cfg032.s.nlw);
 
 	return 0;
 }
@@ -1005,7 +1005,7 @@ static int __cvmx_pcie_rc_initialize_link_gen2(int pcie_port)
 
 	if (OCTEON_IS_OCTEON3()) {
 		if (CVMX_WAIT_FOR_FIELD64(CVMX_PEMX_ON(pcie_port), cvmx_pemx_on_t, pemoor, ==, 1, 100000)) {
-			cvmx_dprintf("PCIe: Port %d PEM not on, skipping\n", pcie_port);
+			cvmx_printf("PCIe: Port %d PEM not on, skipping\n", pcie_port);
 			return -1;
 		}
 	}
@@ -1274,8 +1274,8 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 	/* Make sure this interface is PCIe */
 	if (OCTEON_IS_MODEL(OCTEON_CN70XX)) {
 		if (cvmx_qlm_get_dlm_mode(1, pcie_port) == CVMX_QLM_MODE_DISABLED) {
-			cvmx_dprintf("PCIe: Port %d not in PCIe mode, skipping\n",
-				     pcie_port);
+			cvmx_printf("PCIe: Port %d not in PCIe mode, skipping\n",
+				    pcie_port);
 			return -1;
 		}
 	} else if (octeon_has_feature(OCTEON_FEATURE_PCIE)) {
@@ -1299,29 +1299,29 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 		if (mode == CVMX_QLM_MODE_SRIO_1X4 ||
 		    mode == CVMX_QLM_MODE_SRIO_2X2 ||
 		    mode == CVMX_QLM_MODE_SRIO_4X1) {
-			cvmx_dprintf("PCIe: Port %d is SRIO, skipping.\n",
-				     pcie_port);
+			cvmx_printf("PCIe: Port %d is SRIO, skipping.\n",
+				    pcie_port);
 			return -1;
 		} else if (mode == CVMX_QLM_MODE_SGMII) {
-			cvmx_dprintf("PCIe: Port %d is SGMII, skipping.\n",
-				     pcie_port);
+			cvmx_printf("PCIe: Port %d is SGMII, skipping.\n",
+				    pcie_port);
 			return -1;
 		} else if (mode == CVMX_QLM_MODE_XAUI ||
 			   mode == CVMX_QLM_MODE_RXAUI) {
-			cvmx_dprintf("PCIe: Port %d is XAUI, skipping.\n",
-				     pcie_port);
+			cvmx_printf("PCIe: Port %d is XAUI, skipping.\n",
+				    pcie_port);
 			return -1;
 		} else if (mode == CVMX_QLM_MODE_ILK) {
-			cvmx_dprintf("PCIe: Port %d is ILK, skipping.\n",
-				     pcie_port);
+			cvmx_printf("PCIe: Port %d is ILK, skipping.\n",
+				    pcie_port);
 			return -1;
 		} else if (mode != CVMX_QLM_MODE_PCIE &&
 			   mode != CVMX_QLM_MODE_PCIE_1X8 &&
 			   mode != CVMX_QLM_MODE_PCIE_1X2 &&
 			   mode != CVMX_QLM_MODE_PCIE_2X1 &&
 			   mode != CVMX_QLM_MODE_PCIE_1X1) {
-			cvmx_dprintf("PCIe: Port %d is unknown, skipping.\n",
-				     pcie_port);
+			cvmx_printf("PCIe: Port %d is unknown, skipping.\n",
+				    pcie_port);
 			return -1;
 		}
 	}
@@ -1365,7 +1365,7 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 		cvmx_pemx_cfg_t pemx_cfg;
 		pemx_cfg.u64 = cvmx_read_csr(CVMX_PEMX_CFG(0));
 		if ((pemx_cfg.s.md & 3) == 2) {
-			cvmx_dprintf("PCIe: Port %d in 1x4 mode.\n", pcie_port);
+			cvmx_printf("PCIe: Port %d in 1x4 mode.\n", pcie_port);
 			return -1;
 		}
 	}
@@ -1376,7 +1376,7 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 	}
 
 	if (ep_mode) {
-		cvmx_dprintf("PCIe: Port %d in endpoint mode.\n", pcie_port);
+		cvmx_printf("PCIe: Port %d in endpoint mode.\n", pcie_port);
 		return -1;
 	}
 #if 0
@@ -1536,16 +1536,16 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 	   skipped */
 	if (CVMX_WAIT_FOR_FIELD64(rst_ctl_reg, cvmx_mio_rst_ctlx_t,
 				  rst_done, ==, 1, 10000)) {
-		cvmx_dprintf("PCIe: Port %d stuck in reset, skipping.\n",
-			     pcie_port);
+		cvmx_printf("PCIe: Port %d stuck in reset, skipping.\n",
+			    pcie_port);
 		return -1;
 	}
 
 	/* Check BIST status */
 	pemx_bist_status.u64 = cvmx_read_csr(CVMX_PEMX_BIST_STATUS(pcie_port));
 	if (pemx_bist_status.u64)
-		cvmx_dprintf("PCIe: BIST FAILED for port %d (0x%016llx)\n",
-			     pcie_port, CAST64(pemx_bist_status.u64));
+		cvmx_printf("PCIe: BIST FAILED for port %d (0x%016llx)\n",
+			    pcie_port, CAST64(pemx_bist_status.u64));
 	/* BIST_STATUS2 is not present on 78xx */
 	if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 		pemx_bist_status2.u64 = 0;
@@ -1555,8 +1555,8 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 	if (OCTEON_IS_MODEL(OCTEON_CN63XX_PASS1_X))
 		pemx_bist_status2.u64 &= ~0x3full;
 	if (pemx_bist_status2.u64)
-		cvmx_dprintf("PCIe: BIST2 FAILED for port %d (0x%016llx)\n",
-			     pcie_port, CAST64(pemx_bist_status2.u64));
+		cvmx_printf("PCIe: BIST2 FAILED for port %d (0x%016llx)\n",
+			    pcie_port, CAST64(pemx_bist_status2.u64));
 
 	/* Initialize the config space CSRs */
 	__cvmx_pcie_rc_initialize_config_space(pcie_port);
@@ -1574,8 +1574,8 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 		 * Disable gen2 and try again with only gen1
 		 */
 		if (OCTEON_IS_MODEL(OCTEON_CN78XX)) {
-			cvmx_dprintf("PCIe: Link timeout on port %d, probably the slot is empty\n",
-				      pcie_port);
+			cvmx_printf("PCIe: Link timeout on port %d, probably the slot is empty\n",
+				    pcie_port);
 			return -1;
 		} else {
 			cvmx_pciercx_cfg031_t pciercx_cfg031;
@@ -1585,8 +1585,8 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 			cvmx_pcie_cfgx_write(pcie_port, CVMX_PCIERCX_CFG031(pcie_port),
 				     		pciercx_cfg031.u32);
 			if (__cvmx_pcie_rc_initialize_link_gen2(pcie_port)) {
-				cvmx_dprintf("PCIe: Link timeout on port %d, probably the slot is empty\n",
-				     		pcie_port);
+				cvmx_printf("PCIe: Link timeout on port %d, probably the slot is empty\n",
+					    pcie_port);
 				return -1;
 			}
 		}
@@ -1688,8 +1688,8 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 	/* Display the link status */
 	pciercx_cfg032.u32 = cvmx_pcie_cfgx_read(pcie_port,
 						 CVMX_PCIERCX_CFG032(pcie_port));
-	cvmx_dprintf("PCIe: Port %d link active, %d lanes, speed gen%d\n",
-		     pcie_port, pciercx_cfg032.s.nlw, pciercx_cfg032.s.ls);
+	cvmx_printf("PCIe: Port %d link active, %d lanes, speed gen%d\n",
+		    pcie_port, pciercx_cfg032.s.nlw, pciercx_cfg032.s.ls);
 
 	return 0;
 }
-- 
2.6.2

