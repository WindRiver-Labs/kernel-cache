From 8898816151ae32aa1efc2a69e2abdea08e60afc8 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Mon, 29 Jul 2013 15:08:57 -0700
Subject: [PATCH 199/974] MIPS: OCTEON: Sync up new SE files.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 .../cavium-octeon/executive/cvmx-pki-resources.c   | 278 +++++++++
 arch/mips/include/asm/octeon/cvmx-pki-cluster.h    | 636 +++++++++++++++++++++
 arch/mips/include/asm/octeon/cvmx-pki-resources.h  | 112 ++++
 3 files changed, 1026 insertions(+)
 create mode 100644 arch/mips/cavium-octeon/executive/cvmx-pki-resources.c
 create mode 100644 arch/mips/include/asm/octeon/cvmx-pki-cluster.h
 create mode 100644 arch/mips/include/asm/octeon/cvmx-pki-resources.h

diff --git a/arch/mips/cavium-octeon/executive/cvmx-pki-resources.c b/arch/mips/cavium-octeon/executive/cvmx-pki-resources.c
new file mode 100644
index 0000000..6a2b1ef
--- /dev/null
+++ b/arch/mips/cavium-octeon/executive/cvmx-pki-resources.c
@@ -0,0 +1,278 @@
+/***********************license start***************
+ * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights
+ * reserved.
+ *
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+
+ *   * Neither the name of Cavium Inc. nor the names of
+ *     its contributors may be used to endorse or promote products
+ *     derived from this software without specific prior written
+ *     permission.
+
+ * This Software, including technical data, may be subject to U.S. export  control
+ * laws, including the U.S. Export Administration Act and its  associated
+ * regulations, and may be subject to export or import  regulations in other
+ * countries.
+
+ * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
+ * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR
+ * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
+ * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR
+ * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM
+ * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,
+ * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF
+ * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
+ * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR
+ * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.
+ ***********************license end**************************************/
+
+/**
+ * @file
+ *
+ * PKI Support.
+ */
+#ifdef CVMX_BUILD_FOR_LINUX_KERNEL
+#include <linux/module.h>
+#include <asm/octeon/cvmx.h>
+#include <asm/octeon/cvmx-pki-defs.h>
+#include <asm/octeon/cvmx-pki.h>
+#include "asm/octeon/cvmx-global-resources.h"
+#include "asm/octeon/cvmx-range.h"
+#else
+#include "cvmx.h"
+#include "cvmx-version.h"
+#include "cvmx-error.h"
+#include "cvmx-pki.h"
+#include "cvmx-global-resources.h"
+#include "cvmx-range.h"
+#endif
+
+/**
+ * This function allocates/reserves a style from pool of global styles per node.
+ * @param node	 node to allocate style from.
+ * @param style	 style to allocate, if -1 it will be allocated
+                 first available style from style resource. If index is positive
+		 number and in range, it will try to allocate specified style.
+ * @return 	 style number on success, -1 on failure.
+ */
+int cvmx_pki_alloc_style(int node, int style)
+{
+	if(cvmx_create_global_resource_range(CVMX_GR_TAG_STYLE(node),CVMX_PKI_NUM_INTERNAL_STYLES)) {
+		cvmx_dprintf("\nERROR: Failed to create styles global resource\n");
+		return -1;
+	}
+	if(style >= 0) {
+		style = cvmx_reserve_global_resource_range(CVMX_GR_TAG_STYLE(node), style, style,1);
+		if(style == -1){
+			cvmx_dprintf("\nERROR: Failed to reserve style %d\n", (int)style);
+			return -1;
+		}
+	}
+	else {
+		style = cvmx_allocate_global_resource_range(CVMX_GR_TAG_STYLE(node), style, 1,1);
+		if(style == -1){
+			cvmx_dprintf("ERROR: Failed to allocate style %d\n", (int)style);
+			//vinita, define enum later
+			return -1;
+		}
+	}
+	return style;
+}
+
+/**
+ * This function allocates/reserves a cluster group from per node
+   cluster group resources.
+ * @param node	 	node to allocate cluster group from.
+   @param cl_grp	cluster group to allocate/reserve, if -1 ,
+                        allocate any available cluster group.
+ * @param num_clusters	number of clusters that will be attached to
+			the cluster group.
+ * @param parsing_mask  mask of parsing that will be enabled on the cluster group.
+ * @return 	 	cluster group number or -1 on failure
+ */
+int cvmx_pki_alloc_cluster_group(int node, int cl_grp, int num_clusters,
+				 uint64_t parsing_mask, uint64_t *cluster_mask)
+{
+	int cluster = 0;
+
+	if(node >= CVMX_MAX_NODES) {
+		cvmx_dprintf("Invalid node number %d",node);
+		return -1;
+	}
+
+	if(cvmx_create_global_resource_range(CVMX_GR_TAG_CLUSTERS(node),CVMX_PKI_NUM_CLUSTERS)) {
+		cvmx_dprintf("Failed to create Clusters global resource\n");
+		return -1;
+	}
+	if(cvmx_create_global_resource_range(CVMX_GR_TAG_CLUSTER_GRP(node),CVMX_PKI_NUM_CLUSTER_GROUP)) {
+		cvmx_dprintf("Failed to create Cluster group global resource\n");
+		return -1;
+	}
+
+	if( cl_grp >=0 )
+		cl_grp = cvmx_reserve_global_resource_range(CVMX_GR_TAG_CLUSTER_GRP(node),0,cl_grp,1);
+
+	else {
+		cl_grp = cvmx_allocate_global_resource_range(CVMX_GR_TAG_CLUSTER_GRP(node),0,1,1);
+
+		if(cl_grp == -1) {
+			cvmx_dprintf("Warning: Failed to alloc cluster grp %d\n", cl_grp);
+			return -1;
+		}
+	}
+	if(cl_grp >= CVMX_PKI_NUM_CLUSTER_GROUP) {
+		cvmx_dprintf("ERROR: Invalid cluster group %d got allocated\n",cl_grp);
+		return -1;
+	}
+	if(cl_grp == -1) {
+		cvmx_dprintf("Warning: Failed to alloc cluster grp sharing the cluster grp\n");
+		//vinita cl_grp = cvmx_find_global_resource_range_owner(CVMX_GR_TAG_CLUSTER_GRP(node), num_clusters);
+		return -1; //vinita
+	}
+	else {
+		cluster = cvmx_allocate_global_resource_range(CVMX_GR_TAG_CLUSTERS(node),
+				cl_grp, num_clusters, 1);
+		if(cluster >= CVMX_PKI_NUM_CLUSTERS) {
+			cvmx_dprintf("ERROR: Invalid clusters %d got allocated\n", (int)cluster);
+			return -1;
+		}
+		if(cluster == -1) {
+			cvmx_dprintf("Warning: Failed to allocate clusters %d sharing the clusters \n", (int)num_clusters);
+			//vinita cl_grp = cvmx_find_global_resource_range_owner(CVMX_GR_TAG_CLUSTERS(node), num_clusters);
+			//to_do vinita cluster = cvmx_find_global_resource_owner_range(CVMX_GR_TAG_CLUSTERS(node), cl_grp);
+			return -1; //vinita
+		}
+	}
+	if(cl_grp == -1 || cluster == -1){
+			cvmx_dprintf("Failed to allocate Cluster group global resource\n");
+		return -1;
+	}
+	else {
+		*cluster_mask = cvmx_build_mask((uint64_t)((num_clusters-(uint64_t)cluster+1) << cluster));
+		return cl_grp;
+	}
+}
+
+int cvmx_pki_free_cluster_group(int node, int grp_index)
+{
+	if(node >= CVMX_MAX_NODES) {
+		cvmx_dprintf("Invalid node number %d",node);
+		return -1;
+	}
+
+	//spinlock it
+	if (--pki_config[node].cluster_cfg[grp_index].users) {
+		cvmx_dprintf("ERROR: cluster group %d is in use, can't free it\n", (int)grp_index);
+		return -1;
+	}
+	if (grp_index >= CVMX_PKI_NUM_CLUSTER_GROUP) {
+		cvmx_dprintf("ERROR: Invalid cluster group %d in cvmx_pki_free_cluster_group\n", (int)grp_index);
+		return -1;
+	}
+	if (cvmx_free_global_resource_range_with_owner(CVMX_GR_TAG_CLUSTER_GRP(node), grp_index) == -1) {
+		cvmx_dprintf("ERROR Failed to release cluster group %d\n", (int)grp_index);
+		return -1;
+	}
+	//spinlock it
+	pki_config[node].cluster_cfg[grp_index].users--;
+	return 0;
+}
+
+/**
+ * This function allocates/reserves a pcam entry from node
+ * @param node	 	node to allocate pcam entry from.
+   @param index  	index of pacm entry (0-191), if -1 ,
+                        allocate any available pcam entry.
+ * @param bank		pcam bank where to allocate/reserve pcan entry from
+ * @param cluster_mask  mask of clusters from which pcam entry is needed.
+ * @return 	 	pcam entry of -1 on failure
+ */
+int cvmx_pki_pcam_alloc_entry(int node, int index, int bank, uint64_t cluster_mask)
+{
+	uint64_t cluster=0;
+
+	while( cluster < CVMX_PKI_NUM_CLUSTERS) {
+		if(cluster_mask & (0x01L << cluster)) {
+			if (cvmx_create_global_resource_range(CVMX_GR_TAG_PCAM(node,cluster,bank),
+			    	CVMX_PKI_TOTAL_PCAM_ENTRY)) {
+				cvmx_dprintf("\nFailed to create pki pcam global resource");
+				return -1;
+			}
+			if (index >= 0)
+				index = cvmx_reserve_global_resource_range(CVMX_GR_TAG_PCAM(node,cluster,bank),
+						cluster, index, 1);
+			else
+				index = cvmx_allocate_global_resource_range(CVMX_GR_TAG_PCAM(node,cluster,bank),
+						cluster, 1, 1);
+			if(index == -1) {
+				cvmx_dprintf("Error:index %d not available in cluster %d bank %d",
+						(int)index, (int)cluster, bank);
+				return -1;
+			}
+			cluster++;
+		}
+	}
+	//vinita to_do , implement cluster handle, for now assume
+	//all clusters will have same base index
+	return index;
+}
+
+/**
+ * This function allocates/reserves QPG table entries per node.
+ * @param node	 	node number.
+ * @param base_offset	base_offset in qpg table. If -1, first available
+			qpg base_offset will be allocated. If base_offset is positive
+		 	number and in range, it will try to allocate specified base_offset.
+   @param count		number of consecutive qpg entries to allocate. They will be consecutive
+                        from base offset.
+ * @return 	 	qpg table base offset number on success, -1 on failure.
+ */
+int cvmx_pki_alloc_qpg_entry(int node, int base_offset, int count )
+{
+	if(cvmx_create_global_resource_range(CVMX_GR_TAG_QPG_ENTRY(node),CVMX_PKI_NUM_QPG_ENTRY)) {
+		cvmx_dprintf("\nERROR: Failed to create qpg_entry global resource\n");
+		return -1;
+	}
+	if(base_offset >= 0) {
+		base_offset = cvmx_reserve_global_resource_range(CVMX_GR_TAG_QPG_ENTRY(node), base_offset, base_offset,count);
+		if(base_offset == -1){
+			cvmx_dprintf("\nERROR: Failed to reserve qpg entry %d\n", (int)base_offset);
+			return -1;
+		}
+	}
+	else {
+		base_offset = cvmx_allocate_global_resource_range(CVMX_GR_TAG_QPG_ENTRY(node), base_offset, count,1);
+		if(base_offset == -1){
+			cvmx_dprintf("ERROR: Failed to allocate qpg entry %d\n", (int)base_offset);
+			return -1;
+		}
+	}
+	return base_offset;
+}
+
+/**
+ * This function frees QPG table entries per node.
+ * @param node	 	node number.
+ * @param base_offset	base_offset in qpg table. If -1, first available
+			qpg base_offset will be allocated. If base_offset is positive
+		 	number and in range, it will try to allocate specified base_offset.
+   @param count		number of consecutive qpg entries to allocate. They will be consecutive
+                        from base offset.
+ * @return 	 	qpg table base offset number on success, -1 on failure.
+ */
+int cvmx_pki_free_qpg_entry(int node, int base_offset, int count )
+{
+	return 0;
+	//vinita_to_do
+}
diff --git a/arch/mips/include/asm/octeon/cvmx-pki-cluster.h b/arch/mips/include/asm/octeon/cvmx-pki-cluster.h
new file mode 100644
index 0000000..66cd876
--- /dev/null
+++ b/arch/mips/include/asm/octeon/cvmx-pki-cluster.h
@@ -0,0 +1,636 @@
+/* This file is autgenerated from obj/ipemainc.elf */
+const int cvmx_pki_cluster_code_length = 632;
+const uint64_t cvmx_pki_cluster_code_default[] = {
+    0x000000000a000000ull,
+    0x0000413a68024070ull,
+    0x0000813800200020ull,
+    0x900081b800200020ull,
+    0x0004dd80ffff0001ull,
+    0x000455ab68010b0eull,
+    0x00045fba46010000ull,
+    0x9046898120002000ull,
+    0x0004418068010028ull,
+    0x90665326680100f0ull,
+    0x0004413f68004070ull,
+    0x000653a7680100f0ull,
+    0x00045dbb6803a0f0ull,
+    0x000401bb48000001ull,
+    0x00045cb968030870ull,
+    0x0007debd00100010ull,
+    0x0000813b80008000ull,
+    0x0004413b68004070ull,
+    0x9001c00000000000ull,
+    0x9021c00000000000ull,
+    0x00044180680100f0ull,
+    0x0004c639ff000200ull,
+    0x0004400172030000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000041ba68034078ull,
+    0x0000512268030870ull,
+    0x000041bc68034070ull,
+    0x00005d3a68030870ull,
+    0x000483891f000000ull,
+    0x000f542868090a48ull,
+    0x000f583068020070ull,
+    0x00045cb942080000ull,
+    0x0004552a4e09312dull,
+    0x00045cb968082868ull,
+    0x0004410246090000ull,
+    0x0000813901000000ull,
+    0x000481b800010001ull,
+    0x000685b800020002ull,
+    0xa006823800010001ull,
+    0x0006c639ff000500ull,
+    0xa0685f3e68010405ull,
+    0x0008418368010800ull,
+    0xa0485f3e68010305ull,
+    0xa4085f3e68010028ull,
+    0xa441c00000000000ull,
+    0x0009418368010030ull,
+    0xa466400172030001ull,
+    0x00095f3e68030030ull,
+    0x00095f3e68010416ull,
+    0x0006debd00010001ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x00065cb942080000ull,
+    0x0006552a4e09312dull,
+    0x00065cb968082868ull,
+    0x0006410246090000ull,
+    0x9000813901000000ull,
+    0x0004c639ff000a00ull,
+    0x0004400072010000ull,
+    0x00048181ffffffffull,
+    0x0007820101000100ull,
+    0x00048301ffff0180ull,
+    0x0008d5ab10001000ull,
+    0x0004d4a900010001ull,
+    0x0001c00000000000ull,
+    0x00045cb942080000ull,
+    0x9024552a4e09312dull,
+    0x0004c639ff000b00ull,
+    0x90445f80680100f0ull,
+    0x000459b368020070ull,
+    0x000401024000000cull,
+    0x0006823fffffffffull,
+    0x00088281ffffffffull,
+    0x000ad5ab20002000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0004403f72010001ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000c8b3fffffc200ull,
+    0x000c8b01ffff0001ull,
+    0x000ddebd00020002ull,
+    0x00045cb942080000ull,
+    0x0004552a4e09312dull,
+    0x00045cb968082868ull,
+    0x0004410246090000ull,
+    0x0000813901000000ull,
+    0x000481b800080008ull,
+    0x9846c639ff001200ull,
+    0x9861c00000000000ull,
+    0x00064180680100f0ull,
+    0x0006400372010000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000683891f000200ull,
+    0x000ed52a00800080ull,
+    0x000e5e3c68020070ull,
+    0x00065cb942080000ull,
+    0x0006552a4e09312dull,
+    0x00065cb968082868ull,
+    0x0006410246090000ull,
+    0x0000813d00020002ull,
+    0x0004893901000000ull,
+    0x9004893800040004ull,
+    0x9024c639ff001300ull,
+    0x00044180680100f0ull,
+    0x9044400372010001ull,
+    0x0001c00000000000ull,
+    0x00045f3e68010044ull,
+    0x0004debd00040004ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000483891f000200ull,
+    0x000ed52a00800080ull,
+    0x000e5e3c68020070ull,
+    0x00045cb942080000ull,
+    0x0004552a4e09312dull,
+    0x00045cb968082868ull,
+    0x0004410246090000ull,
+    0x000581b902000000ull,
+    0x9826c639ff001800ull,
+    0x9801c00000000000ull,
+    0x00064180680100f0ull,
+    0x0006400172030000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000682091f000200ull,
+    0x000883aa00800080ull,
+    0x000ed52a00400040ull,
+    0x000e5e3c68020870ull,
+    0x000fd52a00800080ull,
+    0x000f5e3c68020070ull,
+    0x000983891f000000ull,
+    0x000f54a968090148ull,
+    0x000f59b368020870ull,
+    0x00065cb942080000ull,
+    0x0006552a4e09312dull,
+    0x00065cb968082868ull,
+    0x0006410246090000ull,
+    0x000081b902000000ull,
+    0x9826c639ff001900ull,
+    0x9801c00000000000ull,
+    0x00064180680100f0ull,
+    0x0006400172030001ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000682091f000200ull,
+    0x000883aa00800080ull,
+    0x000ed52a00400040ull,
+    0x000e5e3c68020870ull,
+    0x000fd52a00800080ull,
+    0x000f5e3c68020070ull,
+    0x000983891f000000ull,
+    0x000f54a968090148ull,
+    0x000f59b368020870ull,
+    0x00065cb942080000ull,
+    0x0006552a4e09312dull,
+    0x00065cb968082868ull,
+    0x0006410246090000ull,
+    0x000081b902000000ull,
+    0x9826c639ff001a00ull,
+    0x9801c00000000000ull,
+    0x00064180680100f0ull,
+    0x0006400172030000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000682091f000200ull,
+    0x000883aa00800080ull,
+    0x000ed52a00400040ull,
+    0x000e5e3c68020870ull,
+    0x000fd52a00800080ull,
+    0x000f5e3c68020070ull,
+    0x000983891f000000ull,
+    0x000f54a968090148ull,
+    0x000f59b368020870ull,
+    0x00065cb942080000ull,
+    0x0006552a4e09312dull,
+    0x00065cb968082868ull,
+    0x0006410246090000ull,
+    0x000081b902000000ull,
+    0x9826c639ff001b00ull,
+    0x9801c00000000000ull,
+    0x00064180680100f0ull,
+    0x0006400172030001ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000682091f000200ull,
+    0x000883aa00800080ull,
+    0x000ed52a00400040ull,
+    0x000e5e3c68020870ull,
+    0x000fd52a00800080ull,
+    0x000f5e3c68020070ull,
+    0x000983891f000000ull,
+    0x000f54a968090148ull,
+    0x000f59b368020870ull,
+    0x00065cb942080000ull,
+    0x0006552a4e09312dull,
+    0x00065cb968082868ull,
+    0x0006410246090000ull,
+    0x9000813902000000ull,
+    0x000481b800400040ull,
+    0x00004180680100f0ull,
+    0x00068981ffff8847ull,
+    0x00068581ffff8848ull,
+    0x0006debd00080008ull,
+    0x9806c639ff001e00ull,
+    0x9821c00000000000ull,
+    0x00065f80680100f0ull,
+    0x0006403f72010000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x00065cb942080000ull,
+    0x0006552a4e09312dull,
+    0x00065cb968082868ull,
+    0x0006823902000000ull,
+    0x0008010240000002ull,
+    0xac28828101000100ull,
+    0x000b010240000002ull,
+    0xa42b820101000100ull,
+    0x0009010240000002ull,
+    0xac29828101000100ull,
+    0x000b010240000002ull,
+    0xa42b820101000100ull,
+    0x0009010240000002ull,
+    0xac29828101000100ull,
+    0x000b010240000002ull,
+    0x00065f3e68010629ull,
+    0x00040183840005ffull,
+    0x0006010240000008ull,
+    0x9801c00000000000ull,
+    0x0006debd00200020ull,
+    0x00048181ffff0806ull,
+    0x0006d4a907c00180ull,
+    0x00048201ffff8035ull,
+    0x00068581ffff8035ull,
+    0x0008d4a907c001c0ull,
+    0x0006dcb97c007c00ull,
+    0x00048201ffff0800ull,
+    0x00088601ffff86ddull,
+    0x00068581ffff0800ull,
+    0x00068581ffff86ddull,
+    0x0008d4a907c00200ull,
+    0x0007823d00200020ull,
+    0x000685bd00200020ull,
+    0x0008d4a907c00140ull,
+    0x0006010240000002ull,
+    0x8001c00000000000ull,
+    0x0006593268020070ull,
+    0x000315ab74000227ull,
+    0x9000813904000000ull,
+    0x0001c00000000000ull,
+    0x00048181f0004000ull,
+    0x9886593268020070ull,
+    0x0006d4a907c00200ull,
+    0x00068201ff000000ull,
+    0xa40815ab74000345ull,
+    0x0009debd01000100ull,
+    0x0009418068010038ull,
+    0x0009028386000005ull,
+    0xac8a15ab74000343ull,
+    0x000b5a3468010870ull,
+    0x000b5a3468010070ull,
+    0xac6b8203000f0005ull,
+    0x0009d4a907c00240ull,
+    0x000b820120000000ull,
+    0x000886011fff0000ull,
+    0x0009552a6801000dull,
+    0x0009d4a9f8006800ull,
+    0x0009593268020870ull,
+    0x0006418068030230ull,
+    0x0006410242030000ull,
+    0x9c01c00000000000ull,
+    0x0001c00000000000ull,
+    0x00078201f0006000ull,
+    0x0008593268020070ull,
+    0xa068d4a907c00280ull,
+    0x00085a3468010874ull,
+    0x0008818100ff0000ull,
+    0x000615ab74000345ull,
+    0x00075a3468010078ull,
+    0x0007010240000028ull,
+    0xa80782b400ff0000ull,
+    0x000ad4a907c002c0ull,
+    0x000a5a3468010078ull,
+    0x000a410244010000ull,
+    0xa80782b400ff003cull,
+    0x000ad4a907c002c0ull,
+    0x000a5a3468010078ull,
+    0x000a410244010000ull,
+    0xa80782b400ff002bull,
+    0x000ad4a907c002c0ull,
+    0x000a5a3468010078ull,
+    0x000a410244010000ull,
+    0xa80782b400ff002cull,
+    0x000ad4a9ffc06ac0ull,
+    0x000a593268020870ull,
+    0x000ad52a00010001ull,
+    0x000a5a3468010078ull,
+    0x0007debd01000100ull,
+    0x000481bd01000100ull,
+    0x0006c639ff002300ull,
+    0x000641aa68034000ull,
+    0x000641a968034846ull,
+    0x0006403472030001ull,
+    0x0004822902000200ull,
+    0x000915ab74000341ull,
+    0x000082aa00010001ull,
+    0x000a86ab00ff0045ull,
+    0x000adcb978007800ull,
+    0x00008229fa006a00ull,
+    0x00065cb942080000ull,
+    0x0006552a4e09312dull,
+    0x00065cb968082868ull,
+    0x0006410246090000ull,
+    0x8001c00000000000ull,
+    0x00088a3908000000ull,
+    0xa02315ab74000343ull,
+    0x000881b400ff0011ull,
+    0x00068981ffff2118ull,
+    0x0006593268020870ull,
+    0x0006d4a9f8009800ull,
+    0x9c26debd02000200ull,
+    0x0007813400ff002full,
+    0x00048901ffff6558ull,
+    0x0004593268020870ull,
+    0x0004d4a9f800a800ull,
+    0x0004debd02000200ull,
+    0x000882bd02000200ull,
+    0xa86ac639ff002800ull,
+    0xa841c00000000000ull,
+    0x000a418368010878ull,
+    0x000a400172030000ull,
+    0x000a5bb768030078ull,
+    0x000a5b36680100f0ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000a5cb942080000ull,
+    0x000a552a4e09312dull,
+    0x000a5cb968082868ull,
+    0x000a410246090000ull,
+    0x0000812907c004c0ull,
+    0x0004852907c00540ull,
+    0x9004893910000000ull,
+    0x0001c00000000000ull,
+    0x00048181f0004000ull,
+    0x988658b168020070ull,
+    0x0006d428001f0008ull,
+    0x00068201ff000000ull,
+    0xa40815ab74000545ull,
+    0x0009debd04000400ull,
+    0x0009418068010038ull,
+    0x0009028384000004ull,
+    0xac8a15ab74000543ull,
+    0x000b5a3468010870ull,
+    0x000b5a3468010070ull,
+    0xac6b8303000f0005ull,
+    0x000dd428001f0009ull,
+    0x000b830120000000ull,
+    0x000c87011fff0000ull,
+    0x000dd42803e001a0ull,
+    0x000d58b168020870ull,
+    0x000ddcb960006000ull,
+    0x0006418068030230ull,
+    0x0006410242030000ull,
+    0x9c01c00000000000ull,
+    0x0001c00000000000ull,
+    0x00078201f0006000ull,
+    0x000858b168020070ull,
+    0xa068d428001f000aull,
+    0x00085a3468010874ull,
+    0x0008818100ff0000ull,
+    0x000615ab74000545ull,
+    0x00075a3468010078ull,
+    0x0007010240000028ull,
+    0xa80782b400ff0000ull,
+    0x000ad428001f000bull,
+    0x000a5a3468010078ull,
+    0x000a410244010000ull,
+    0xa80782b400ff003cull,
+    0x000ad428001f000bull,
+    0x000a5a3468010078ull,
+    0x000a410244010000ull,
+    0xa80782b400ff002bull,
+    0x000ad428001f000bull,
+    0x000a5a3468010078ull,
+    0x000a410244010000ull,
+    0xa80782b400ff002cull,
+    0x000ad42803ff01abull,
+    0x000adcb960006000ull,
+    0x000a58b168020870ull,
+    0x000a5a3468010078ull,
+    0x0007debd04000400ull,
+    0x000481bd04000400ull,
+    0x0006c639ff002b00ull,
+    0x000641aa68034000ull,
+    0x000641a868034840ull,
+    0x0006403472030001ull,
+    0x0004822902000200ull,
+    0x000815ab74000541ull,
+    0x000082ab00ff0045ull,
+    0x000adcb960006000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x00065cb942080000ull,
+    0x0006552a4e09312dull,
+    0x00065cb968082868ull,
+    0x0006410246090000ull,
+    0x8001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000315ab74000561ull,
+    0x0000813920000000ull,
+    0x000481b400ff006cull,
+    0x0006d42803e001c0ull,
+    0x000658b168020870ull,
+    0x0007823400ff0032ull,
+    0xa048863400ff0033ull,
+    0x0008d42803e00180ull,
+    0xa0685ab5680100f0ull,
+    0x000858b168020870ull,
+    0x00085dbb680100f0ull,
+    0x986981b400ff002full,
+    0x0006d42803e00280ull,
+    0x00065ab5680100f0ull,
+    0x000658b168020870ull,
+    0x0004823400ff0011ull,
+    0x0008d42803e00220ull,
+    0x000481b400ff0084ull,
+    0x0008863400ff0084ull,
+    0x0006d42803e00240ull,
+    0x000481b400ff0006ull,
+    0x98c8863400ff0006ull,
+    0x0006d42803e00200ull,
+    0x90265ebd68010b31ull,
+    0x0004c639ff003000ull,
+    0x0004403472010000ull,
+    0x000858b168020870ull,
+    0x00088181ffff0000ull,
+    0x000615ab74000664ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000081b800100010ull,
+    0x00045cb942080000ull,
+    0x0004552a4e09312dull,
+    0x00045cb968082868ull,
+    0x0004410246090000ull,
+    0x000483891f000000ull,
+    0x000f542868090a48ull,
+    0x000f583068020070ull,
+    0x000689b940004000ull,
+    0x000689a803e00000ull,
+    0x000641b168004078ull,
+    0x0006413842030000ull,
+    0x9801c00000000000ull,
+    0x9821c00000000000ull,
+    0x00064180680100f0ull,
+    0x0006c639ff003900ull,
+    0x0006400172030001ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000683891f000000ull,
+    0x000f542868090a48ull,
+    0x000f583068020070ull,
+    0x00065cb942080000ull,
+    0x0006552a4e09312dull,
+    0x00065cb968082868ull,
+    0x0006410246090000ull,
+    0x00005fb968004250ull,
+    0x0000003f70000000ull,
+    0x000041b968034070ull,
+    0x0000512268030070ull,
+    0x0000813800200020ull,
+    0x0004413a68024070ull,
+    0x9001c00000000000ull,
+    0x000081b800200020ull,
+    0x9026898180008000ull,
+    0x0004890110001000ull,
+    0x000456ad680100a0ull,
+    0x0006898180008000ull,
+    0x000652a56801001dull,
+    0x000456ad68090b5bull,
+    0x000556ad680900f0ull,
+    0x0000562c680800f0ull,
+    0x0000833d00200020ull,
+    0x000c872907c00000ull,
+    0x000dd62c20000000ull,
+    0x0000822902800280ull,
+    0x000841b268034070ull,
+    0x000982a802800280ull,
+    0x000a41b168034070ull,
+    0x000b822907c00000ull,
+    0x0000003f70000800ull,
+    0x000941b268034070ull,
+    0x0000418048030000ull,
+    0x0000018340000008ull,
+    0x0009018348000004ull,
+    0x000050a168030c20ull,
+    0x000082aa00800080ull,
+    0x000850a168080c2bull,
+    0x000752a56808001eull,
+    0x000a822a00400040ull,
+    0x00088a0900010001ull,
+    0x000841bc68034078ull,
+    0x000941bc68034070ull,
+    0x000a583068030870ull,
+    0x0005c180ffff0000ull,
+    0x00058288001e0000ull,
+    0x000b8208001e0008ull,
+    0x00085d2168004030ull,
+    0x00098308001e0010ull,
+    0x00088608001e0010ull,
+    0x000c5d2168004070ull,
+    0x0008418068080025ull,
+    0x000841ba6803a0f0ull,
+    0x000856ad40030000ull,
+    0x0008c180ffff0000ull,
+    0x0005820807000500ull,
+    0x00088a3d00010001ull,
+    0x000841be68004050ull,
+    0x0005828807000300ull,
+    0x000a8abd00040004ull,
+    0x000a41be68004040ull,
+    0x0005820807000100ull,
+    0x00088a2a00800080ull,
+    0x0008413068004078ull,
+    0xa021c00000000000ull,
+    0x0005828807000200ull,
+    0x000841806801002dull,
+    0x000a8abd00080008ull,
+    0x000a41be68004026ull,
+    0x0005820807000400ull,
+    0x00088a2902000200ull,
+    0x000841b46800405aull,
+    0x000556ad40030000ull,
+    0x000081bd00100010ull,
+    0x0006c180ffff0000ull,
+    0x0006822a00800080ull,
+    0x00088a0900100010ull,
+    0x0008413c68024070ull,
+    0xa021c00000000000ull,
+    0x0006832902000200ull,
+    0x0008c181f0008000ull,
+    0x000841834c00ffffull,
+    0x0006822a00400040ull,
+    0x00088a0900200020ull,
+    0x0008413c68024078ull,
+    0xa021c00000000000ull,
+    0x000c828901000100ull,
+    0x0008dc01f0008000ull,
+    0x000841b84c03ffffull,
+    0x000a823400ff0033ull,
+    0x000841bb4c03ffffull,
+    0x0008863400ff0014ull,
+    0x000841b54c03ffffull,
+    0x000c828900400040ull,
+    0x000a41b44c0300ffull,
+    0x000682a9f800a800ull,
+    0x000a86a9f8009800ull,
+    0x000a8a8904000400ull,
+    0x000a41b74c0300ffull,
+    0x000a41b64c03ffffull,
+    0x000682287c005800ull,
+    0x00088a0902000200ull,
+    0x0008413068024070ull,
+    0xa001c00000000000ull,
+    0x0006830900020002ull,
+    0x00088281e0002000ull,
+    0xa84a868108000800ull,
+    0xa861c00000000000ull,
+    0x000a41814c03ffffull,
+    0x000a41814c03ffffull,
+    0x000653a7680300f0ull,
+    0x000c5321680040b0ull,
+    0x000dd3260fff0fffull,
+    0x0000003f70000400ull,
+    0x0001c00000000000ull,
+    0x0001c00000000000ull,
+    0x000082a902000200ull,
+    0x000a413268024070ull,
+    0xa50a822902800280ull,
+    0x0006828900800080ull,
+    0x00098301ffffffffull,
+    0xb12d8381f000e000ull,
+    0x000ed5ab40004000ull,
+    0xa18c8381ffffffffull,
+    0x000a8abd08000800ull,
+    0x000e8781ff00ff00ull,
+    0x000ed5ab80008000ull,
+    0x000a8abd40000000ull,
+    0x0000572e680800f0ull,
+    0x000057af680900f0ull,
+    0x0007d72ef0ff0000ull,
+    0x0007d7aff0000000ull,
+    0x000ad72e00fc0000ull,
+    0x0000000008000000ull
+};
diff --git a/arch/mips/include/asm/octeon/cvmx-pki-resources.h b/arch/mips/include/asm/octeon/cvmx-pki-resources.h
new file mode 100644
index 0000000..f68f527
--- /dev/null
+++ b/arch/mips/include/asm/octeon/cvmx-pki-resources.h
@@ -0,0 +1,112 @@
+/***********************license start***************
+ * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights
+ * reserved.
+ *
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+
+ *   * Neither the name of Cavium Inc. nor the names of
+ *     its contributors may be used to endorse or promote products
+ *     derived from this software without specific prior written
+ *     permission.
+
+ * This Software, including technical data, may be subject to U.S. export  control
+ * laws, including the U.S. Export Administration Act and its  associated
+ * regulations, and may be subject to export or import  regulations in other
+ * countries.
+
+ * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
+ * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR
+ * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
+ * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR
+ * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM
+ * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,
+ * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF
+ * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
+ * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR
+ * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.
+ ***********************license end**************************************/
+
+/**
+ * @file
+ *
+ * Resource management for PKI resources.
+ */
+
+#ifndef __CVMX_PKI_RESOURCES_H__
+#define __CVMX_PKI_RESOURCES_H__
+
+#ifdef CVMX_BUILD_FOR_LINUX_KERNEL
+#include <asm/octeon/cvmx.h>
+#endif
+
+#ifdef	__cplusplus
+/* *INDENT-OFF* */
+extern "C" {
+/* *INDENT-ON* */
+#endif
+
+/**
+ * This function allocates/reserves a style from pool of global styles per node.
+ * @param node	 node to allocate style from.
+ * @param style	 style to allocate, if -1 it will be allocated
+                 first available style from style resource. If index is positive
+		 number and in range, it will try to allocate specified style.
+ * @return 	 style number on success, -1 on failure.
+ */
+int cvmx_pki_alloc_style(int node, int style);
+
+/**
+ * This function allocates/reserves a cluster group from per node
+   cluster group resources.
+ * @param node	 	node to allocate cluster group from.
+   @param cl_grp	cluster group to allocate/reserve, if -1 ,
+                        allocate any available cluster group.
+ * @param num_clusters	number of clusters that will be attached to
+			the cluster group.
+ * @param parsing_mask  mask of parsing that will be enabled on the cluster gro.
+ * @return 	 	cluster group number or -1 on failure
+ */
+int cvmx_pki_alloc_cluster_group(int node, int cl_grp, int num_clusters,
+				 uint64_t parsing_mask, uint64_t *cluster_mask);
+
+/**
+ * This function allocates/reserves a pcam entry from node
+ * @param node	 	node to allocate pcam entry from.
+   @param index  	index of pacm entry (0-191), if -1 ,
+                        allocate any available pcam entry.
+ * @param bank		pcam bank where to allocate/reserve pcan entry from
+ * @param cluster_mask  mask of clusters from which pcam entry is needed.
+ * @return 	 	pcam entry of -1 on failure
+ */
+int cvmx_pki_pcam_alloc_entry(int node, int index, int bank, uint64_t cluster_mask);
+
+/**
+ * This function allocates/reserves QPG table entries per node.
+ * @param node	 	node number.
+ * @param base_offset	base_offset in qpg table. If -1, first available
+			qpg base_offset will be allocated. If base_offset is positive
+		 	number and in range, it will try to allocate specified base_offset.
+   @param count		number of consecutive qpg entries to allocate. They will be consecutive
+                        from base offset.
+ * @return 	 	qpg table base offset number on success, -1 on failure.
+ */
+int cvmx_pki_alloc_qpg_entry(int node, int base_offset, int count );
+
+#ifdef	__cplusplus
+/* *INDENT-OFF* */
+}
+/* *INDENT-ON* */
+#endif
+
+#endif /*  __CVM_PKI_RESOURCES_H__ */
\ No newline at end of file
-- 
2.6.2

