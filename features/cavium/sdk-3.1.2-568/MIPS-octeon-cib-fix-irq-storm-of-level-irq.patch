From 346068b1b9d325073106d777863c44d08774762f Mon Sep 17 00:00:00 2001
From: Quanyang Wang <quanyang.wang@windriver.com>
Date: Mon, 15 Feb 2016 22:16:41 +0800
Subject: [PATCH] MIPS: octeon-cib: fix irq storm of level irq

CIB interrupt controller which is used by CN70XX and CN71XX
set irq handler as handle_simple_irq, which expect caller to
handle the ack, clear, mask and unmask issues if necessary.
CN70XX's xhci-hcd irq is a level irq, when in preempt-rt kernel,
xhci-hcd irq handler is threaded and has no irq mask action, it
means that when handle_simpile_irq is quit and xhci-hcd irq
handler thread is waked up, the irq is always active and will
cause a irq storm. So when irq mapping, recognize the irq type
and assign it the suitable irq handler, which guarantee the irq
is masked/unmasked at right time, or else following calltrace
will occurr:

[ 6.594727] [<ffffffff8015dc48>] show_stack+0xd8/0xf8
[ 6.594732] [<ffffffff802198f8>] __report_bad_irq+0x58/0x128
[ 6.594736] [<ffffffff8021a044>] note_interrupt+0x2e4/0x340
[ 6.594739] [<ffffffff80216828>] handle_irq_event_percpu+0x170/0x300
[ 6.594742] [<ffffffff80216a3c>] handle_irq_event+0x84/0xd8
[ 6.594745] [<ffffffff8021a684>] handle_simple_irq+0xb4/0x140
[ 6.594750] [<ffffffff80105c5c>] octeon_irq_cib_handler+0xfc/0x1d8

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/octeon-irq.c |   10 ++++++++--
 1 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-irq.c b/arch/mips/cavium-octeon/octeon-irq.c
index 7058a9e..3e5ce22 100644
--- a/arch/mips/cavium-octeon/octeon-irq.c
+++ b/arch/mips/cavium-octeon/octeon-irq.c
@@ -2994,6 +2994,7 @@ static int octeon_irq_cib_map(struct irq_domain *d,
 {
 	struct octeon_irq_cib_host_data *host_data = d->host_data;
 	struct octeon_irq_cib_chip_data *cd;
+	struct irq_desc *desc = irq_to_desc(virq);
 
 	if (hw >= host_data->max_bits) {
 		pr_err("ERROR: %s mapping %u is to big!\n",
@@ -3005,8 +3006,13 @@ static int octeon_irq_cib_map(struct irq_domain *d,
 	cd->host_data = host_data;
 	cd->bit = hw;
 
-	irq_set_chip_and_handler(virq, &octeon_irq_chip_cib,
-				 handle_simple_irq);
+	if (irqd_get_trigger_type(irq_desc_get_irq_data(desc)) & IRQ_TYPE_EDGE_BOTH)
+		irq_set_chip_and_handler(virq, &octeon_irq_chip_cib,
+					handle_edge_irq);
+	else
+		irq_set_chip_and_handler(virq, &octeon_irq_chip_cib,
+					handle_level_irq);
+
 	irq_set_chip_data(virq, cd);
 	return 0;
 }
-- 
1.7.5.4

