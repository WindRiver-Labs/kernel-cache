From 347bee6a6f804717ec1461e1286c628e5803354a Mon Sep 17 00:00:00 2001
From: Leonid Rosenboim <lrosenboim@caviumnetworks.com>
Date: Mon, 3 Jun 2013 13:57:03 -0700
Subject: [PATCH 026/974] Add octeon2 build and configuration option

[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/Makefile              |  37 +++++++++
 arch/mips/cavium-octeon/Kconfig | 169 +++++++++++++++++++++++++++++++++++-----
 arch/mips/include/asm/barrier.h |  14 +++-
 3 files changed, 198 insertions(+), 22 deletions(-)

diff --git a/arch/mips/Makefile b/arch/mips/Makefile
index dd58a04..38f6faa 100644
--- a/arch/mips/Makefile
+++ b/arch/mips/Makefile
@@ -151,11 +151,48 @@ cflags-$(CONFIG_CPU_SB1)	+= $(call cc-option,-march=sb1,-march=r5000) \
 cflags-$(CONFIG_CPU_R8000)	+= -march=r8000 -Wa,--trap
 cflags-$(CONFIG_CPU_R10000)	+= $(call cc-option,-march=r10000,-march=r8000) \
 			-Wa,--trap
+
+ifdef CONFIG_CPU_CAVIUM_OCTEON
+ifdef CONFIG_CAVIUM_OCTEON2
+cflags-y += $(call cc-option,-march=octeon2) -Wa,--trap
+ifeq (,$(findstring march=octeon2, $(cflags-y)))
+cflags-y += -Wa,-march=octeon2
+endif
+else
+cflags-y += $(call cc-option,-march=octeon) -Wa,--trap
+ifeq (,$(findstring march=octeon, $(cflags-y)))
+cflags-y += -Wa,-march=octeon
+endif
+endif
+endif
+
+ifdef	_NOTDEF_
 cflags-$(CONFIG_CPU_CAVIUM_OCTEON) += $(call cc-option,-march=octeon) -Wa,--trap
 ifeq (,$(findstring march=octeon, $(cflags-$(CONFIG_CPU_CAVIUM_OCTEON))))
 cflags-$(CONFIG_CPU_CAVIUM_OCTEON) += -Wa,-march=octeon
 endif
+endif
+
+cflags-$(CONFIG_CPU_CAVIUM_OCTEON) += -DCVMX_BUILD_FOR_LINUX_KERNEL=1 -DUSE_RUNTIME_MODEL_CHECKS=1
+
 cflags-$(CONFIG_CAVIUM_CN63XXP1) += -Wa,-mfix-cn63xxp1
+
+ifdef  CONFIG_CAVIUM_OCTEON_CHK_CVMX_PARAMETER
+cflags-y += -DCVMX_ENABLE_PARAMETER_CHECKING=1
+else
+cflags-y += -DCVMX_ENABLE_PARAMETER_CHECKING=0
+endif
+ifdef  CONFIG_CAVIUM_OCTEON_CHK_CVMX_ADDRESS
+cflags-y += -DCVMX_ENABLE_CSR_ADDRESS_CHECKING=1
+else
+cflags-y += -DCVMX_ENABLE_CSR_ADDRESS_CHECKING=0
+endif
+ifdef  CONFIG_CAVIUM_OCTEON_CHK_CVMX_POW
+cflags-y += -DCVMX_ENABLE_POW_CHECKS=1
+else
+cflags-y += -DCVMX_ENABLE_POW_CHECKS=0
+endif
+
 cflags-$(CONFIG_CPU_BMIPS)	+= -march=mips32 -Wa,-mips32 -Wa,--trap
 
 cflags-$(CONFIG_CPU_R4000_WORKAROUNDS)	+= $(call cc-option,-mfix-r4000,)
diff --git a/arch/mips/cavium-octeon/Kconfig b/arch/mips/cavium-octeon/Kconfig
index 4c9f517..f36f9b3 100644
--- a/arch/mips/cavium-octeon/Kconfig
+++ b/arch/mips/cavium-octeon/Kconfig
@@ -1,39 +1,38 @@
 if CPU_CAVIUM_OCTEON
 
-config CAVIUM_CN63XXP1
-	bool "Enable CN63XXP1 errata worarounds"
+config CAVIUM_OCTEON2
+	bool "Build the kernel to be used only on OCTEON II processor cores"
+	select CAVIUM_CN63XXP1
 	default "n"
 	help
-	  The CN63XXP1 chip requires build time workarounds to
-	  function reliably, select this option to enable them.  These
-	  workarounds will cause a slight decrease in performance on
-	  non-CN63XXP1 hardware, so it is recommended to select "n"
-	  unless it is known the workarounds are needed.
-
-endif # CPU_CAVIUM_OCTEON
+	  This option enables the generation of Octeon2 specific
+	  instructions by the compiler, resulting in a kernel that is
+	  more efficient, but that will not run on Octeon and
+	  OcteonPlus processor cores.
 
-if CAVIUM_OCTEON_SOC
-
-config CAVIUM_OCTEON_2ND_KERNEL
-	bool "Build the kernel to be used as a 2nd kernel on the same chip"
+config CAVIUM_CN63XXP1
+	bool "Enable CN6XXX DCache prefetch errata workaround"
 	default "n"
 	help
-	  This option configures this kernel to be linked at a different
-	  address and use the 2nd uart for output. This allows a kernel built
-	  with this option to be run at the same time as one built without this
-	  option.
+	  The CN6XXX chips require build time workarounds to
+	  function reliably, select this option to enable them.  These
+	  workarounds will cause a slight decrease in performance on
+	  non-CN6XXX hardware.
 
 config CAVIUM_OCTEON_CVMSEG_SIZE
 	int "Number of L1 cache lines reserved for CVMSEG memory"
-	range 0 54
-	default 1
+	range 2 54
+	default 2
 	help
 	  CVMSEG LM is a segment that accesses portions of the dcache as a
 	  local memory; the larger CVMSEG is, the smaller the cache is.
 	  This selects the size of CVMSEG LM, which is in cache blocks. The
-	  legally range is from zero to 54 cache blocks (i.e. CVMSEG LM is
+	  legally range is from 2 to 54 cache blocks (i.e. CVMSEG LM is
 	  between zero and 6192 bytes).
 
+	  The kernel uses two blocks (one for TLB exception handlers
+	  and the other for driver IOBDMA operations).
+
 config FAST_ACCESS_TO_THREAD_POINTER
 	bool "Enable fast access to the thread pointer"
 	default "y"
@@ -89,6 +88,119 @@ config CAVIUM_OCTEON_LOCK_L2_MEMCPY
 	help
 	  Lock the kernel's implementation of memcpy() into L2.
 
+choice
+	prompt "Allow User space to access hardware IO directly"
+	default CAVIUM_OCTEON_USER_IO_PER_PROCESS
+	depends on CPU_CAVIUM_OCTEON
+
+config CAVIUM_OCTEON_USER_IO
+	bool "Allowed"
+	depends on CPU_CAVIUM_OCTEON
+	help
+	  Allows user applications to directly access the Octeon hardware
+	  IO addresses (0x1000000000000 - 0x1ffffffffffff). This allows high
+	  performance networking applications to run in user space with minimal
+	  performance penalties. This also means a user application can bring
+	  down the entire system. Only use this option on embedded devices
+	  where all user applications are strictly controlled.
+
+config CAVIUM_OCTEON_USER_IO_PER_PROCESS
+	bool "Per process"
+	help
+	  Allows user applications to use XKPHYS addresses directly to IO.
+	  This option dynamically enable/disable with sysmips syscall,
+	  by a process with root privilege. Without root privilege you can
+	  only remove access.
+
+config CAVIUM_OCTEON_USER_IO_DISABLED
+	bool "Disabled"
+
+endchoice
+
+choice
+	prompt "Allow User space to access memory directly"
+	default CAVIUM_OCTEON_USER_MEM_PER_PROCESS
+	depends on CPU_CAVIUM_OCTEON
+
+config CAVIUM_OCTEON_USER_MEM
+	bool "Allowed"
+	help
+	  Allows user applications to use XKPHYS addresses directly to memory.
+	  This allows user space direct access to shared memory not in use by
+	  Linux. This memory is suitable for use with the Octeon hardware.
+	  Cavium simple executive applications also share this memory. Since
+	  this bypass all of the Linux memory protection, only use this option
+	  on embedded devices where all user applications are strictly
+	  controlled.
+
+config CAVIUM_OCTEON_USER_MEM_PER_PROCESS
+	bool "Per process"
+	help
+	  Allows user applications to use XKPHYS addresses directly to memory.
+	  This option dynamically enable/disable with sysmips syscall,
+	  by a process with root privilege. Without root privilege you can only
+	  remove access.
+
+config CAVIUM_OCTEON_USER_MEM_DISABLED
+	bool "Disabled"
+
+endchoice
+
+config CAVIUM_RESERVE32
+	int "Memory to reserve for user processes shared region (MB)"
+	range 0 1536
+	depends on CPU_CAVIUM_OCTEON
+	default "0"
+	help
+	  Reserve a shared memory region for user processes to use for hardware
+	  memory buffers. This is required for 32bit applications to be able to
+	  send and receive packets directly. Applications access this memory by
+	  memory mapping /dev/mem for the addresses in /proc/octeon_info. For
+	  optimal performance with HugeTLBs, keep this size an even number of
+	  megabytes.
+
+config CAVIUM_OCTEON_NAND
+	tristate "Octeon NAND driver"
+	depends on MTD_NAND && !CPU_LITTLE_ENDIAN
+	help
+	  This option enables a MTD driver for the NAND controller introduced
+	  in the Octeon CN52XX pass 2 processor. It supports up to 8 NAND
+	  devices connected directly to Octeon's boot bus.
+
+config CAVIUM_OCTEON_RAPIDIO
+	bool "Enable support for Octeon Serial Rapid IO"
+	depends on !CPU_LITTLE_ENDIAN
+	select RAPIDIO
+	select OCTEON_ETHERNET_MEM
+	help
+	  Connect the SRIO interfaces available in the Octeon II series of
+	  processors to the kernel's RapidIO subsystem. The existence of the
+	  SRIO ports is automatically detected and configured as either a
+	  host or device. Bus enumeration will be performed on host interfaces
+	  as appropriate. After configuring this option, you will likely want
+	  to enable the RapidIO network adapter under the devices menu.
+
+config RAPIDIO
+	bool
+
+config CAVIUM_OCTEON_ERROR_TREE
+	bool "OCTEON hardware error reporting"
+	default y
+	help
+	  Install handlers for error signals from many on-SoC devices.
+
+config CAVIUM_OCTEON_KERNEL_CRYPTO
+	bool "Enable support for use of OCTEON crypto instructions from kernel code"
+	help
+	  Use of OCTEON crypto instructions from kernel code requires
+	  great care, and if done improperly, can corrupt userspace
+	  crypto state.  If OCTEON crypto instruction support is
+	  needed, select this option.
+
+config ARCH_SPARSEMEM_ENABLE
+	def_bool y
+	select SPARSEMEM_STATIC
+
 config IOMMU_HELPER
 	bool
 
@@ -100,6 +212,12 @@ config SWIOTLB
 	select IOMMU_HELPER
 	select NEED_SG_DMA_LENGTH
 
+config DISABLE_ELF_NOTE_HEADER
+	bool "Disable the creation of the ELF PT_NOTE program header in vmlinux"
+	help
+	  Some early Octeon bootloaders cannot process PT_NOTE program
+	  headers.  Select y to omit these headers so that the kernel
+	  can be loaded with older bootloaders.
 
 config OCTEON_ILM
 	tristate "Module to measure interrupt latency using Octeon CIU Timer"
@@ -110,4 +228,13 @@ config OCTEON_ILM
 	  To compile this driver as a module, choose M here.  The module
 	  will be called octeon-ilm
 
-endif # CAVIUM_OCTEON_SOC
+config OCTEON_ERROR_INJECTOR
+	tristate "Module to inject hardware errors into the system"
+	help
+	  Used to test hardware error reporting.  Should never be used
+	  in a normal running system.
+
+# To be enabled later
+# source "arch/mips/cavium-octeon/executive/Kconfig"
+
+endif # CPU_CAVIUM_OCTEON
diff --git a/arch/mips/include/asm/barrier.h b/arch/mips/include/asm/barrier.h
index 314ab55..e91fa01 100644
--- a/arch/mips/include/asm/barrier.h
+++ b/arch/mips/include/asm/barrier.h
@@ -91,7 +91,19 @@
 		: "m" (*(int *)CKSEG1)		\
 		: "memory")
 #ifdef CONFIG_CPU_CAVIUM_OCTEON
-# define OCTEON_SYNCW_STR	".set push\n.set arch=octeon\nsyncw\nsyncw\n.set pop\n"
+# ifdef CONFIG_CAVIUM_OCTEON2
+#  define OCTEON_SYNCW_STR	".set push\n\t.set arch=octeon\n\tsyncw\n\t.set pop"
+# else
+/*
+ * We actually use two syncw instructions in a row when we need a
+ * write memory barrier. This is because the CN3XXX series of Octeons
+ * have errata Core-401.  This can cause a single syncw to not enforce
+ * ordering under very rare conditions. Even if it is rare, better
+ * safe than sorry.
+ */
+#  define OCTEON_SYNCW_STR	".set push\n.set arch=octeon\nsyncw\nsyncw\n.set pop\n"
+# endif /* CONFIG_CAVIUM_OCTEON2 */
+
 # define __syncw()	__asm__ __volatile__(OCTEON_SYNCW_STR : : : "memory")
 
 # define fast_wmb()	__syncw()
-- 
2.6.2

