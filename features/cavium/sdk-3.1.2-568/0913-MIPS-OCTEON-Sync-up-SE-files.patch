From 6c37b2227ab972140c48b354e93d0df32f6d1109 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Mon, 21 Jul 2014 18:05:50 -0700
Subject: [PATCH 913/974] MIPS: OCTEON: Sync-up SE files.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 .../mips/cavium-octeon/executive/cvmx-helper-bgx.c | 41 +++++++++++++++-------
 arch/mips/cavium-octeon/executive/cvmx-qlm.c       | 19 +++++-----
 arch/mips/include/asm/octeon/cvmx-qlm.h            |  6 ++--
 3 files changed, 42 insertions(+), 24 deletions(-)

diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c b/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c
index 0e63ee7..33060a3c 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c
@@ -153,6 +153,20 @@ int __cvmx_helper_bgx_enumerate(int xiface)
 	}
 }
 
+static int __cvmx_helper_bgx_is_lmac_valid(int xiface, int index)
+{
+	struct cvmx_xiface xi = cvmx_helper_xiface_to_node_interface(xiface);
+	cvmx_bgxx_cmrx_config_t cmr_config;
+
+	cmr_config.u64 = cvmx_read_csr_node(xi.node, CVMX_BGXX_CMRX_CONFIG(index, xi.interface));
+	if (cmr_config.s.lane_to_sds == 0xe4
+	    && (cmr_config.s.lmac_type != 4
+		|| cmr_config.s.lmac_type != 1
+		|| cmr_config.s.lmac_type == 5))
+		return 0;
+	return 1;
+}
+
 /**
  * @INTERNAL
  * Disable the BGX port
@@ -482,7 +496,7 @@ static int __cvmx_helper_bgx_sgmii_hardware_init_one_time(int xiface, int index)
 	cvmx_bgxx_gmp_pcs_miscx_ctl_t gmp_misc_ctl;
 	cvmx_bgxx_gmp_pcs_linkx_timer_t gmp_timer;
 
-	if (!cvmx_helper_is_port_valid(xi.interface, index))
+	if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 		return 0;
 
 	if (debug)
@@ -568,7 +582,7 @@ static int __cvmx_helper_bgx_sgmii_hardware_init(int xiface, int num_ports)
 	for (index = start; index < end; index++) {
 		int xipd_port = cvmx_helper_get_ipd_port(xiface, index);
 
-		if (!cvmx_helper_is_port_valid(xiface, index))
+		if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 			continue;
 
 		__cvmx_helper_bgx_port_init(xipd_port, 0);
@@ -631,7 +645,7 @@ static int __cvmx_helper_bgx_sgmii_hardware_init_link(int xiface, int index)
 	int interface = xi.interface;
 	int node = xi.node;
 
-	if (!cvmx_helper_is_port_valid(xiface, index))
+	if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 		return 0;
 
 	if (debug)
@@ -713,7 +727,7 @@ static int __cvmx_helper_bgx_sgmii_hardware_init_link_speed(int xiface,
 	struct cvmx_xiface xi = cvmx_helper_xiface_to_node_interface(xiface);
 	int node = xi.node;
 
-	if (!cvmx_helper_is_port_valid(xiface, index))
+	if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 		return 0;
 
 	if (debug)
@@ -843,7 +857,7 @@ cvmx_helper_link_info_t __cvmx_helper_bgx_sgmii_link_get(int xipd_port)
 
 	result.u64 = 0;
 
-	if (!cvmx_helper_is_port_valid(xiface, index))
+	if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 		return result;
 
 	if (debug)
@@ -956,7 +970,7 @@ int __cvmx_helper_bgx_sgmii_link_set(int xipd_port,
 	int index = cvmx_helper_get_interface_index_num(xp.port);
 	int rc = 0;
 
-	if (!cvmx_helper_is_port_valid(xiface, index))
+	if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 		return 0;
 
 	if (debug)
@@ -1378,7 +1392,7 @@ int __cvmx_helper_bgx_sgmii_configure_loopback(int xipd_port, int enable_interna
 	cvmx_bgxx_gmp_pcs_mrx_control_t gmp_mrx_control;
 	cvmx_bgxx_gmp_pcs_miscx_ctl_t gmp_misc_ctl;
 
-	if (!cvmx_helper_is_port_valid(xiface, index))
+	if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 		return 0;
 
 	if (debug)
@@ -1789,7 +1803,7 @@ int __cvmx_helper_bgx_mixed_enable(int xiface)
 		cvmx_bgxx_cmrx_config_t cmr_config;
 		int xipd_port, phy_pres = 0;
 
-		if (!cvmx_helper_is_port_valid(xiface, index))
+		if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 			continue;
 
 		cmr_config.u64 = cvmx_read_csr_node(node, CVMX_BGXX_CMRX_CONFIG(index, interface));
@@ -1986,7 +2000,7 @@ void cvmx_helper_bgx_tx_options(unsigned node,
 	int xiface = cvmx_helper_node_interface_to_xiface(node, interface);
 	struct cvmx_xiface xi = cvmx_helper_xiface_to_node_interface(xiface);
 
-	if (!cvmx_helper_is_port_valid(xiface, index))
+	if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 		return;
 
 	if (debug)
@@ -2056,7 +2070,7 @@ void cvmx_helper_bgx_set_mac(int xipd_port, int bcst, int mcst, uint64_t mac)
 
 	index = cvmx_helper_get_interface_index_num(xipd_port);
 
-	if (!cvmx_helper_is_port_valid(xiface, index))
+	if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 		return;
 
 	if (debug)
@@ -2152,7 +2166,7 @@ void cvmx_helper_bgx_set_jabber(int xiface, unsigned index,
 	if (!octeon_has_feature(OCTEON_FEATURE_BGX))
 		return;
 
-	if (!cvmx_helper_is_port_valid(xiface, index))
+	if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 		return;
 
 	node = xi.node;
@@ -2183,11 +2197,14 @@ int cvmx_helper_bgx_shutdown_port(int xiface, int index)
 
 	node = xi.node;
 
+	if (xi.interface >= CVMX_HELPER_MAX_GMX)
+		return 0;
+
 	if (debug)
 		cvmx_dprintf("%s: interface %u:%d/%d\n",
 		__func__, node, xi.interface, index);
 
-	if (!cvmx_helper_is_port_valid(xiface, index))
+	if (!__cvmx_helper_bgx_is_lmac_valid(xiface, index))
 		return 0;
 
 	/* Disable BGX CMR before we make any changes. */
diff --git a/arch/mips/cavium-octeon/executive/cvmx-qlm.c b/arch/mips/cavium-octeon/executive/cvmx-qlm.c
index b1791cb..75630b1 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-qlm.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-qlm.c
@@ -42,7 +42,7 @@
  *
  * Helper utilities for qlm.
  *
- * <hr>$Revision: 122049 $<hr>
+ * <hr>$Revision: 122066 $<hr>
  */
 #ifdef CVMX_BUILD_FOR_LINUX_KERNEL
 #include <asm/octeon/cvmx.h>
@@ -159,31 +159,32 @@ int cvmx_qlm_get_num(void)
 /**
  * Return the qlm number based on the interface
  *
- * @param interface  interface to look up
+ * @param xiface  interface to look up
  *
  * @return the qlm number based on the xiface
  */
-int cvmx_qlm_interface(int interface)
+int cvmx_qlm_interface(int xiface)
 {
+	struct cvmx_xiface xi = cvmx_helper_xiface_to_node_interface(xiface);
 	if (OCTEON_IS_MODEL(OCTEON_CN61XX)) {
-		return (interface == 0) ? 2 : 0;
+		return (xi.interface == 0) ? 2 : 0;
 	} else if (OCTEON_IS_MODEL(OCTEON_CN63XX) || OCTEON_IS_MODEL(OCTEON_CN66XX)) {
-		return 2 - interface;
+		return 2 - xi.interface;
 	} else if (OCTEON_IS_MODEL(OCTEON_CNF71XX)) {
-		if (interface == 0)
+		if (xi.interface == 0)
 			return 0;
 		else
-			cvmx_dprintf("Warning: cvmx_qlm_interface: Invalid interface %d\n", interface);
+			cvmx_dprintf("Warning: cvmx_qlm_interface: Invalid interface %d\n", xi.interface);
 	} else if (octeon_has_feature(OCTEON_FEATURE_BGX)) {
 		cvmx_dprintf("Warning: not supported\n");
 		return -1;
 	} else {
 		/* Must be cn68XX */
-		switch (interface) {
+		switch (xi.interface) {
 		case 1:
 			return 0;
 		default:
-			return interface;
+			return xi.interface;
 		}
 	}
 	return -1;
diff --git a/arch/mips/include/asm/octeon/cvmx-qlm.h b/arch/mips/include/asm/octeon/cvmx-qlm.h
index f43ea1b..24e8bc7 100644
--- a/arch/mips/include/asm/octeon/cvmx-qlm.h
+++ b/arch/mips/include/asm/octeon/cvmx-qlm.h
@@ -42,7 +42,7 @@
  *
  * Helper utilities for qlm.
  *
- * <hr>$Revision: 122043 $<hr>
+ * <hr>$Revision: 122066 $<hr>
  */
 
 #ifndef __CVMX_QLM_H__
@@ -83,9 +83,9 @@ extern int cvmx_qlm_get_num(void);
 /**
  * Return the qlm number based on the interface
  *
- * @param interface  Interface to look
+ * @param xiface  Interface to look
  */
-extern int cvmx_qlm_interface(int interface);
+extern int cvmx_qlm_interface(int xiface);
 
 /**
  * Return the qlm number based for a port in the interface
-- 
2.6.2

