From c232ba2e9e2e7943acc81b80a299b9661271e548 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Tue, 19 Jan 2016 10:40:52 -0800
Subject: [PATCH 13/13] MIPS:OCTEON: Sync-up SE files

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
[Original patch taken from patch set for OCTEON SDK 3.1.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/Makefile                   |    3 +-
 .../mips/cavium-octeon/executive/cvmx-helper-bgx.c |    4 +-
 .../mips/cavium-octeon/executive/cvmx-helper-pki.c |   24 +-
 arch/mips/cavium-octeon/executive/cvmx-pki.c       |    6 +-
 .../mips/cavium-octeon/executive/cvmx-pko3-queue.c |    8 +-
 arch/mips/cavium-octeon/executive/cvmx-qlm.c       |   23 +-
 arch/mips/cavium-octeon/executive/octeon-model.c   |    4 +
 arch/mips/cavium-octeon/octeon-73xx-errors.c       |  312 ------
 arch/mips/cavium-octeon/octeon-75xx-errors.c       | 1013 ++++++++++++++++++++
 arch/mips/cavium-octeon/octeon-78xx-errors.c       |  540 +++++------
 arch/mips/include/asm/octeon/cvmx-bootmem.h        |    4 +-
 arch/mips/include/asm/octeon/cvmx-dpi-defs.h       |   27 +-
 arch/mips/include/asm/octeon/cvmx-gserx-defs.h     |   20 +
 arch/mips/include/asm/octeon/cvmx-hna-defs.h       |   27 +-
 arch/mips/include/asm/octeon/cvmx-pki-defs.h       |    2 +-
 arch/mips/include/asm/octeon/cvmx-pko3.h           |   45 +
 arch/mips/include/asm/octeon/cvmx-sli-defs.h       |  365 ++++----
 17 files changed, 1565 insertions(+), 862 deletions(-)
 create mode 100644 arch/mips/cavium-octeon/octeon-75xx-errors.c

diff --git a/arch/mips/cavium-octeon/Makefile b/arch/mips/cavium-octeon/Makefile
index 7787a92..390a9a4 100644
--- a/arch/mips/cavium-octeon/Makefile
+++ b/arch/mips/cavium-octeon/Makefile
@@ -28,7 +28,8 @@ obj-$(CONFIG_SYSFS)                     += cacheinfo.o
 obj-$(CONFIG_MTD)			+= flash_setup.o
 obj-$(CONFIG_OCTEON_ILM)		+= oct_ilm.o
 obj-$(CONFIG_CAVIUM_OCTEON_NAND)	+= octeon-nand.o
-obj-$(CONFIG_CAVIUM_OCTEON_ERROR_TREE)	+= octeon-error-tree.o octeon-78xx-errors.o octeon-73xx-errors.o octeon-7xxx-errors.o
+obj-$(CONFIG_CAVIUM_OCTEON_ERROR_TREE)	+= octeon-error-tree.o octeon-78xx-errors.o \
+	octeon-73xx-errors.o octeon-7xxx-errors.o octeon-75xx-errors.o
 obj-$(CONFIG_CAVIUM_OCTEON_KERNEL_CRYPTO) += octeon-crypto.o
 obj-$(CONFIG_OCTEON_ERROR_INJECTOR)	+= octeon-error-injector.o
 obj-$(CONFIG_CAVIUM_OCTEON_RAPIDIO)	+= octeon-rapidio.o
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c b/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c
index 9c1e38e..c0ee7d6 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c
@@ -1991,10 +1991,10 @@ void cvmx_helper_bgx_rx_pause_ctl(unsigned node, unsigned interface,
 		cvmx_dprintf("%s: interface %u:%d/%d\n",
 		__func__, xi.node, xi.interface, index);
 
-	frm_ctl.u64 = cvmx_read_csr_node(node, CVMX_BGXX_SMUX_RX_CTL(index, xi.interface));
+	frm_ctl.u64 = cvmx_read_csr_node(node, CVMX_BGXX_SMUX_RX_FRM_CTL(index, xi.interface));
 	frm_ctl.s.ctl_bck = ctl_bck;
 	frm_ctl.s.ctl_drp = ctl_drp;
-	cvmx_write_csr_node(node, CVMX_BGXX_SMUX_RX_CTL(index, xi.interface), frm_ctl.u64);
+	cvmx_write_csr_node(node, CVMX_BGXX_SMUX_RX_FRM_CTL(index, xi.interface), frm_ctl.u64);
 }
 
 /**
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-pki.c b/arch/mips/cavium-octeon/executive/cvmx-helper-pki.c
index 814d4b4..4f79e2e 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-pki.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-pki.c
@@ -575,21 +575,21 @@ void cvmx_helper_pki_shutdown(int node)
 	/* Setup some configuration registers to the reset state.*/
 	for (i = 0; i < CVMX_PKI_NUM_PKIND; i++) {
 		for (k = 0; k < (int)CVMX_PKI_NUM_CLUSTER; k++) {
-			cvmx_write_csr_node(node, CVMX_PKI_CLX_PKINDX_CFG(i, k), 0);			
-			cvmx_write_csr_node(node, CVMX_PKI_CLX_PKINDX_STYLE(i, k), 0);			
-			cvmx_write_csr_node(node, CVMX_PKI_CLX_PKINDX_SKIP(i, k), 0);			
-			cvmx_write_csr_node(node, CVMX_PKI_CLX_PKINDX_L2_CUSTOM(i, k), 0);			
-			cvmx_write_csr_node(node, CVMX_PKI_CLX_PKINDX_LG_CUSTOM(i, k), 0);			
+			cvmx_write_csr_node(node, CVMX_PKI_CLX_PKINDX_CFG(i, k), 0);
+			cvmx_write_csr_node(node, CVMX_PKI_CLX_PKINDX_STYLE(i, k), 0);
+			cvmx_write_csr_node(node, CVMX_PKI_CLX_PKINDX_SKIP(i, k), 0);
+			cvmx_write_csr_node(node, CVMX_PKI_CLX_PKINDX_L2_CUSTOM(i, k), 0);
+			cvmx_write_csr_node(node, CVMX_PKI_CLX_PKINDX_LG_CUSTOM(i, k), 0);
 		}
-		cvmx_write_csr_node(node, CVMX_PKI_PKINDX_ICGSEL(k), 0);			
+		cvmx_write_csr_node(node, CVMX_PKI_PKINDX_ICGSEL(k), 0);
 	}
 	for (i = 0; i < CVMX_PKI_NUM_FINAL_STYLE; i++) {
 		for (k = 0; k < (int)CVMX_PKI_NUM_CLUSTER; k++) {
-			cvmx_write_csr_node(node, CVMX_PKI_CLX_STYLEX_CFG(i, k), 0);			
-			cvmx_write_csr_node(node, CVMX_PKI_CLX_STYLEX_CFG2(i, k), 0);			
-			cvmx_write_csr_node(node, CVMX_PKI_CLX_STYLEX_ALG(i, k), 0);			
+			cvmx_write_csr_node(node, CVMX_PKI_CLX_STYLEX_CFG(i, k), 0);
+			cvmx_write_csr_node(node, CVMX_PKI_CLX_STYLEX_CFG2(i, k), 0);
+			cvmx_write_csr_node(node, CVMX_PKI_CLX_STYLEX_ALG(i, k), 0);
 		}
-		cvmx_write_csr_node(node, CVMX_PKI_STYLEX_BUF(k), (0x5 << 22) | 0x20);			
+		cvmx_write_csr_node(node, CVMX_PKI_STYLEX_BUF(k), (0x5 << 22) | 0x20);
 	}
 }
 EXPORT_SYMBOL(cvmx_helper_pki_shutdown);
@@ -806,7 +806,7 @@ int __cvmx_helper_pki_port_rsrcs(int node, struct cvmx_pki_prt_schd *prtsch)
 	int rs;
 
 	/* Erratum 22557: Disable per-port allocation for CN78XX pass 1.X */
-	if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X)) { 
+	if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X)) {
 		static bool warned = false;
 		prtsch->pool_per_prt = 0;
 		if (!warned)
@@ -1714,7 +1714,7 @@ void cvmx_pki_set_max_frm_len(int ipd_port, uint32_t max_size)
 	style = cvmx_pki_get_pkind_style(xp.node, pknd);
 	style_cfg.u64 = cvmx_read_csr_node(xp.node, CVMX_PKI_CLX_STYLEX_CFG(style, cluster));
 	sel = style_cfg.s.minmax_sel;
-	frame_len.u64 = cvmx_read_csr(CVMX_PKI_FRM_LEN_CHKX(sel));
+	frame_len.u64 = cvmx_read_csr_node(xp.node, CVMX_PKI_FRM_LEN_CHKX(sel));
 	frame_len.s.maxlen = max_size;
 	cvmx_write_csr_node(xp.node, CVMX_PKI_FRM_LEN_CHKX(sel), frame_len.u64);
 }
diff --git a/arch/mips/cavium-octeon/executive/cvmx-pki.c b/arch/mips/cavium-octeon/executive/cvmx-pki.c
index 97152b4..7453ac2 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-pki.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-pki.c
@@ -1223,7 +1223,7 @@ void cvmx_pki_get_stats(int node, int index, struct cvmx_pki_port_stats *status)
 	/* Accessing PKI stat registers can timeout based on the Errata
 	   PKI-20775, disable SLI_INT_SUM[RML_TO] before reading the stats
 	   enable back after clearing the interrupt. */
-	cvmx_error_intsn_disable_v3(0x1f000);
+	cvmx_error_intsn_disable_v3(node, 0x1f000);
 #endif
 	stat0.u64 = cvmx_read_csr_node(node, CVMX_PKI_STATX_STAT0(index));
 	READCORRECT(cnt, node, stat0.u64, CVMX_PKI_STATX_STAT0(index));
@@ -1327,7 +1327,7 @@ void cvmx_pki_get_stats(int node, int index, struct cvmx_pki_port_stats *status)
 #ifndef CVMX_BUILD_FOR_LINUX_KERNEL
 	/* Enable SLI_INT_SUM[RML_TO] interrupt after clear the pending interrupt. */
 	cvmx_write_csr_node(node, CVMX_CIU3_ISCX_W1C(0x1f000), 1);
-	cvmx_error_intsn_enable_v3(0x1f000);
+	cvmx_error_intsn_enable_v3(node, 0x1f000);
 #endif
 }
 EXPORT_SYMBOL(cvmx_pki_get_stats);
@@ -1962,7 +1962,7 @@ int cvmx_pki_config_dump(unsigned node)
 			}
 			else if (i >= 0x800 && i < (0x800 + nbgxs * 4 * 16)) { /* BGX */
 				k = i - 0x800;
-				sprintf(lines[1], "BGX%d:Port%d:%d", k / (4 * 16),
+				sprintf(lines[1], "BGX%d:Port%d:Chan%d", k / 0x100,
 					(k % (4 * 16)) / 16, (k % (4 * 16)) % 16);
 			}
 			else
diff --git a/arch/mips/cavium-octeon/executive/cvmx-pko3-queue.c b/arch/mips/cavium-octeon/executive/cvmx-pko3-queue.c
index 89a5e84..f99f444 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-pko3-queue.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-pko3-queue.c
@@ -532,9 +532,9 @@ static void cvmx_pko_configure_l2_queue(int node, int queue, int parent_queue,
 					       int prio, int rr_quantum,
 					       int child_base, int child_rr_prio)
 {
-	cvmx_pko_l3_sqx_schedule_t pko_sq_sched;
-	cvmx_pko_l3_sqx_topology_t pko_child_topology;
-	cvmx_pko_l2_sqx_topology_t pko_parent_topology;
+	cvmx_pko_l2_sqx_schedule_t pko_sq_sched;
+	cvmx_pko_l2_sqx_topology_t pko_child_topology;
+	cvmx_pko_l1_sqx_topology_t pko_parent_topology;
 
 	/* parent topology configuration */
 	pko_parent_topology.u64 = cvmx_read_csr_node(node,
@@ -548,7 +548,7 @@ static void cvmx_pko_configure_l2_queue(int node, int queue, int parent_queue,
 	if (debug>1) cvmx_dprintf("CVMX_PKO_L1_SQX_TOPOLOGY(%u): "
 		"PRIO_ANCHOR=%u PARENT=%u\n",
 		parent_queue, pko_parent_topology.s.prio_anchor,
-		pko_parent_topology.s.parent);
+		pko_parent_topology.s.link);
 
 	/* scheduler configuration for this sq in the parent queue */
 	pko_sq_sched.u64 = 0;
diff --git a/arch/mips/cavium-octeon/executive/cvmx-qlm.c b/arch/mips/cavium-octeon/executive/cvmx-qlm.c
index e8b360d..e439e81 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-qlm.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-qlm.c
@@ -42,7 +42,7 @@
  *
  * Helper utilities for qlm.
  *
- * <hr>$Revision: 130011 $<hr>
+ * <hr>$Revision: 131066 $<hr>
  */
 #ifdef CVMX_BUILD_FOR_LINUX_KERNEL
 #include <asm/octeon/cvmx.h>
@@ -1579,9 +1579,11 @@ enum cvmx_qlm_mode cvmx_qlm_get_mode_cn78xx(int node, int qlm)
 			else
 				qlm_mode[node][qlm] = CVMX_QLM_MODE_XFI;
 #ifndef CVMX_BUILD_FOR_UBOOT
-			pmd_control.s.train_en = 0;
-			cvmx_write_csr_node(node,
-				CVMX_BGXX_SPUX_BR_PMD_CONTROL(0, bgx), pmd_control.u64);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X)) {
+				pmd_control.s.train_en = 0;
+				cvmx_write_csr_node(node,
+					CVMX_BGXX_SPUX_BR_PMD_CONTROL(0, bgx), pmd_control.u64);
+			}
 #endif
 			break;
 		case 4:
@@ -1591,9 +1593,11 @@ enum cvmx_qlm_mode cvmx_qlm_get_mode_cn78xx(int node, int qlm)
 			else
 				qlm_mode[node][qlm] = CVMX_QLM_MODE_XLAUI;
 #ifndef CVMX_BUILD_FOR_UBOOT
-			pmd_control.s.train_en = 0;
-			cvmx_write_csr_node(node,
-				CVMX_BGXX_SPUX_BR_PMD_CONTROL(0, bgx), pmd_control.u64);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X)) {
+				pmd_control.s.train_en = 0;
+				cvmx_write_csr_node(node,
+					CVMX_BGXX_SPUX_BR_PMD_CONTROL(0, bgx), pmd_control.u64);
+			}
 #endif
 			break;
 		default:
@@ -2172,7 +2176,10 @@ int __cvmx_qlm_rx_equalization(int node, int qlm, int lane)
 	}
 
 	/* Don't run on PCIe Links */
-	mode = cvmx_qlm_get_mode(qlm);
+	if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+		mode = cvmx_qlm_get_mode_cn78xx(node, qlm);
+	else
+		mode = cvmx_qlm_get_mode(qlm);
 	if (mode == CVMX_QLM_MODE_PCIE
 	    || mode == CVMX_QLM_MODE_PCIE_1X8
 	    || mode == CVMX_QLM_MODE_PCIE_1X2
diff --git a/arch/mips/cavium-octeon/executive/octeon-model.c b/arch/mips/cavium-octeon/executive/octeon-model.c
index 74de6c5..9918ad4 100644
--- a/arch/mips/cavium-octeon/executive/octeon-model.c
+++ b/arch/mips/cavium-octeon/executive/octeon-model.c
@@ -596,6 +596,10 @@ const char *octeon_model_get_string_buffer(uint32_t chip_id, char *buffer)
 			}
 		}
 	}
+	if (OCTEON_IS_MODEL(OCTEON_CN73XX) && (core_model[2] == 'A'))
+	{
+		family = "72";
+	}
 #ifdef CVMX_BUILD_FOR_UBOOT
 	sprintf(buffer, "CN%s%s-%s pass %s", family, core_model, suffix, pass);
 #else
diff --git a/arch/mips/cavium-octeon/octeon-73xx-errors.c b/arch/mips/cavium-octeon/octeon-73xx-errors.c
index dff53c7..da9c01e 100644
--- a/arch/mips/cavium-octeon/octeon-73xx-errors.c
+++ b/arch/mips/cavium-octeon/octeon-73xx-errors.c
@@ -607,70 +607,6 @@ struct cvmx_error_78xx error_array_cn73xx[] = {
 	{ 0x16700203d0400ull,	"Error: CVMX_SSO_GRP61_INT[%llx][%u]",	0x6003d,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
 	{ 0x16700203e0400ull,	"Error: CVMX_SSO_GRP62_INT[%llx][%u]",	0x6003e,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
 	{ 0x16700203f0400ull,	"Error: CVMX_SSO_GRP63_INT[%llx][%u]",	0x6003f,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
-	{ 0x1670020000400ull,	"Error: CVMX_SSO_GRP0_INT[%llx][%u]",	0x61000,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020010400ull,	"Error: CVMX_SSO_GRP1_INT[%llx][%u]",	0x61001,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020020400ull,	"Error: CVMX_SSO_GRP2_INT[%llx][%u]",	0x61002,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020030400ull,	"Error: CVMX_SSO_GRP3_INT[%llx][%u]",	0x61003,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020040400ull,	"Error: CVMX_SSO_GRP4_INT[%llx][%u]",	0x61004,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020050400ull,	"Error: CVMX_SSO_GRP5_INT[%llx][%u]",	0x61005,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020060400ull,	"Error: CVMX_SSO_GRP6_INT[%llx][%u]",	0x61006,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020070400ull,	"Error: CVMX_SSO_GRP7_INT[%llx][%u]",	0x61007,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020080400ull,	"Error: CVMX_SSO_GRP8_INT[%llx][%u]",	0x61008,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020090400ull,	"Error: CVMX_SSO_GRP9_INT[%llx][%u]",	0x61009,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700200a0400ull,	"Error: CVMX_SSO_GRP10_INT[%llx][%u]",	0x6100a,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700200b0400ull,	"Error: CVMX_SSO_GRP11_INT[%llx][%u]",	0x6100b,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700200c0400ull,	"Error: CVMX_SSO_GRP12_INT[%llx][%u]",	0x6100c,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700200d0400ull,	"Error: CVMX_SSO_GRP13_INT[%llx][%u]",	0x6100d,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700200e0400ull,	"Error: CVMX_SSO_GRP14_INT[%llx][%u]",	0x6100e,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700200f0400ull,	"Error: CVMX_SSO_GRP15_INT[%llx][%u]",	0x6100f,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020100400ull,	"Error: CVMX_SSO_GRP16_INT[%llx][%u]",	0x61010,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020110400ull,	"Error: CVMX_SSO_GRP17_INT[%llx][%u]",	0x61011,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020120400ull,	"Error: CVMX_SSO_GRP18_INT[%llx][%u]",	0x61012,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020130400ull,	"Error: CVMX_SSO_GRP19_INT[%llx][%u]",	0x61013,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020140400ull,	"Error: CVMX_SSO_GRP20_INT[%llx][%u]",	0x61014,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020150400ull,	"Error: CVMX_SSO_GRP21_INT[%llx][%u]",	0x61015,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020160400ull,	"Error: CVMX_SSO_GRP22_INT[%llx][%u]",	0x61016,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020170400ull,	"Error: CVMX_SSO_GRP23_INT[%llx][%u]",	0x61017,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020180400ull,	"Error: CVMX_SSO_GRP24_INT[%llx][%u]",	0x61018,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020190400ull,	"Error: CVMX_SSO_GRP25_INT[%llx][%u]",	0x61019,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700201a0400ull,	"Error: CVMX_SSO_GRP26_INT[%llx][%u]",	0x6101a,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700201b0400ull,	"Error: CVMX_SSO_GRP27_INT[%llx][%u]",	0x6101b,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700201c0400ull,	"Error: CVMX_SSO_GRP28_INT[%llx][%u]",	0x6101c,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700201d0400ull,	"Error: CVMX_SSO_GRP29_INT[%llx][%u]",	0x6101d,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700201e0400ull,	"Error: CVMX_SSO_GRP30_INT[%llx][%u]",	0x6101e,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700201f0400ull,	"Error: CVMX_SSO_GRP31_INT[%llx][%u]",	0x6101f,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020200400ull,	"Error: CVMX_SSO_GRP32_INT[%llx][%u]",	0x61020,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020210400ull,	"Error: CVMX_SSO_GRP33_INT[%llx][%u]",	0x61021,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020220400ull,	"Error: CVMX_SSO_GRP34_INT[%llx][%u]",	0x61022,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020230400ull,	"Error: CVMX_SSO_GRP35_INT[%llx][%u]",	0x61023,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020240400ull,	"Error: CVMX_SSO_GRP36_INT[%llx][%u]",	0x61024,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020250400ull,	"Error: CVMX_SSO_GRP37_INT[%llx][%u]",	0x61025,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020260400ull,	"Error: CVMX_SSO_GRP38_INT[%llx][%u]",	0x61026,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020270400ull,	"Error: CVMX_SSO_GRP39_INT[%llx][%u]",	0x61027,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020280400ull,	"Error: CVMX_SSO_GRP40_INT[%llx][%u]",	0x61028,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020290400ull,	"Error: CVMX_SSO_GRP41_INT[%llx][%u]",	0x61029,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700202a0400ull,	"Error: CVMX_SSO_GRP42_INT[%llx][%u]",	0x6102a,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700202b0400ull,	"Error: CVMX_SSO_GRP43_INT[%llx][%u]",	0x6102b,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700202c0400ull,	"Error: CVMX_SSO_GRP44_INT[%llx][%u]",	0x6102c,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700202d0400ull,	"Error: CVMX_SSO_GRP45_INT[%llx][%u]",	0x6102d,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700202e0400ull,	"Error: CVMX_SSO_GRP46_INT[%llx][%u]",	0x6102e,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700202f0400ull,	"Error: CVMX_SSO_GRP47_INT[%llx][%u]",	0x6102f,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020300400ull,	"Error: CVMX_SSO_GRP48_INT[%llx][%u]",	0x61030,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020310400ull,	"Error: CVMX_SSO_GRP49_INT[%llx][%u]",	0x61031,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020320400ull,	"Error: CVMX_SSO_GRP50_INT[%llx][%u]",	0x61032,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020330400ull,	"Error: CVMX_SSO_GRP51_INT[%llx][%u]",	0x61033,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020340400ull,	"Error: CVMX_SSO_GRP52_INT[%llx][%u]",	0x61034,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020350400ull,	"Error: CVMX_SSO_GRP53_INT[%llx][%u]",	0x61035,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020360400ull,	"Error: CVMX_SSO_GRP54_INT[%llx][%u]",	0x61036,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020370400ull,	"Error: CVMX_SSO_GRP55_INT[%llx][%u]",	0x61037,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020380400ull,	"Error: CVMX_SSO_GRP56_INT[%llx][%u]",	0x61038,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x1670020390400ull,	"Error: CVMX_SSO_GRP57_INT[%llx][%u]",	0x61039,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700203a0400ull,	"Error: CVMX_SSO_GRP58_INT[%llx][%u]",	0x6103a,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700203b0400ull,	"Error: CVMX_SSO_GRP59_INT[%llx][%u]",	0x6103b,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700203c0400ull,	"Error: CVMX_SSO_GRP60_INT[%llx][%u]",	0x6103c,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700203d0400ull,	"Error: CVMX_SSO_GRP61_INT[%llx][%u]",	0x6103d,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700203e0400ull,	"Error: CVMX_SSO_GRP62_INT[%llx][%u]",	0x6103e,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
-	{ 0x16700203f0400ull,	"Error: CVMX_SSO_GRP63_INT[%llx][%u]",	0x6103f,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* EXE_INT */,
 	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* FPE */,
 	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67001,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* AWE */,
 	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67002,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* BFP */,
@@ -866,68 +802,6 @@ struct cvmx_error_78xx error_array_cn73xx[] = {
 	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc000b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RDLK */,
 	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc000c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* CRS_ER */,
 	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc000d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* CRS_DR */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0040,	0,	CVMX_ERROR_GROUP_PCI,	0}	/* SPOISON */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0041,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* RTLPMAL */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0042,	0,	CVMX_ERROR_GROUP_PCI,	2}	/* RTLPLLE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0043,	0,	CVMX_ERROR_GROUP_PCI,	3}	/* RECRCE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0044,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* RPOISON */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0045,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* RCEMRC */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0046,	0,	CVMX_ERROR_GROUP_PCI,	6}	/* RNFEMRC */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0047,	0,	CVMX_ERROR_GROUP_PCI,	7}	/* RFEMRC */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0048,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* RPMERC */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0049,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* RPTAMRC */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc004a,	0,	CVMX_ERROR_GROUP_PCI,	10}	/* RUMEP */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc004b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RVDM */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc004c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* ACTO */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc004d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* RTE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc004e,	0,	CVMX_ERROR_GROUP_PCI,	14}	/* MRE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc004f,	0,	CVMX_ERROR_GROUP_PCI,	15}	/* RDWDLE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0050,	0,	CVMX_ERROR_GROUP_PCI,	16}	/* RTWDLE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0051,	0,	CVMX_ERROR_GROUP_PCI,	17}	/* DPEOOSD */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0052,	0,	CVMX_ERROR_GROUP_PCI,	18}	/* FCPVWT */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0053,	0,	CVMX_ERROR_GROUP_PCI,	19}	/* RPE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0054,	0,	CVMX_ERROR_GROUP_PCI,	20}	/* FCUV */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0055,	0,	CVMX_ERROR_GROUP_PCI,	21}	/* RQO */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0056,	0,	CVMX_ERROR_GROUP_PCI,	21}	/* RAUC */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0057,	0,	CVMX_ERROR_GROUP_PCI,	22}	/* RACUR */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0058,	0,	CVMX_ERROR_GROUP_PCI,	23}	/* RACCA */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0059,	0,	CVMX_ERROR_GROUP_PCI,	24}	/* CAAR */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc005a,	0,	CVMX_ERROR_GROUP_PCI,	25}	/* RARWDNS */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc005b,	0,	CVMX_ERROR_GROUP_PCI,	26}	/* RAMTLP */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc005c,	0,	CVMX_ERROR_GROUP_PCI,	27}	/* RACPP */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc005d,	0,	CVMX_ERROR_GROUP_PCI,	28}	/* RAWWPP */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc005e,	0,	CVMX_ERROR_GROUP_PCI,	29}	/* ECRC_E */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc005f,	0,	CVMX_ERROR_GROUP_PCI,	31}	/* LOFP */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0060,	0,	CVMX_ERROR_GROUP_PCI,	31}	/* BMD_E */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0061,	0,	CVMX_ERROR_GROUP_PCI,	33}	/* DATQ_PE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0062,	0,	CVMX_ERROR_GROUP_PCI,	34}	/* P_D0_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0063,	0,	CVMX_ERROR_GROUP_PCI,	35}	/* P_D0_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0064,	0,	CVMX_ERROR_GROUP_PCI,	36}	/* P_D1_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0065,	0,	CVMX_ERROR_GROUP_PCI,	37}	/* P_D1_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0066,	0,	CVMX_ERROR_GROUP_PCI,	38}	/* P_C_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0067,	0,	CVMX_ERROR_GROUP_PCI,	39}	/* P_C_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0068,	0,	CVMX_ERROR_GROUP_PCI,	40}	/* N_D0_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0069,	0,	CVMX_ERROR_GROUP_PCI,	41}	/* N_D0_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc006a,	0,	CVMX_ERROR_GROUP_PCI,	42}	/* N_D1_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc006b,	0,	CVMX_ERROR_GROUP_PCI,	43}	/* N_D1_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc006c,	0,	CVMX_ERROR_GROUP_PCI,	44}	/* N_C_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc006d,	0,	CVMX_ERROR_GROUP_PCI,	45}	/* N_C_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc006e,	0,	CVMX_ERROR_GROUP_PCI,	46}	/* C_D0_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc006f,	0,	CVMX_ERROR_GROUP_PCI,	47}	/* C_D0_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0070,	0,	CVMX_ERROR_GROUP_PCI,	48}	/* C_D1_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0071,	0,	CVMX_ERROR_GROUP_PCI,	49}	/* C_D1_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0072,	0,	CVMX_ERROR_GROUP_PCI,	50}	/* C_C_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0073,	0,	CVMX_ERROR_GROUP_PCI,	51}	/* C_C_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0074,	0,	CVMX_ERROR_GROUP_PCI,	52}	/* RTRY_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0075,	0,	CVMX_ERROR_GROUP_PCI,	53}	/* RTRY_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0076,	0,	CVMX_ERROR_GROUP_PCI,	54}	/* QHDR_B0_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0077,	0,	CVMX_ERROR_GROUP_PCI,	55}	/* QHDR_B0_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0078,	0,	CVMX_ERROR_GROUP_PCI,	56}	/* QHDR_B1_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc0079,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* QHDR_B1_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc007a,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* M2C_D_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc007b,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* M2C_D_DBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc007c,	0,	CVMX_ERROR_GROUP_PCI,	60}	/* M2S_C_SBE */,
-	{ 0x11800c00000d0ull,	"Error: CVMX_PEM0_DBG_INFO[%llx][%u]",	0xc007d,	0,	CVMX_ERROR_GROUP_PCI,	61}	/* M2S_C_DBE */,
 	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc1001,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* SE */,
 	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc1004,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* UP_B1 */,
 	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc1005,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* UP_B2 */,
@@ -938,68 +812,6 @@ struct cvmx_error_78xx error_array_cn73xx[] = {
 	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc100b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RDLK */,
 	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc100c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* CRS_ER */,
 	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc100d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* CRS_DR */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1040,	0,	CVMX_ERROR_GROUP_PCI,	0}	/* SPOISON */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1041,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* RTLPMAL */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1042,	0,	CVMX_ERROR_GROUP_PCI,	2}	/* RTLPLLE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1043,	0,	CVMX_ERROR_GROUP_PCI,	3}	/* RECRCE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1044,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* RPOISON */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1045,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* RCEMRC */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1046,	0,	CVMX_ERROR_GROUP_PCI,	6}	/* RNFEMRC */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1047,	0,	CVMX_ERROR_GROUP_PCI,	7}	/* RFEMRC */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1048,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* RPMERC */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1049,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* RPTAMRC */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc104a,	0,	CVMX_ERROR_GROUP_PCI,	10}	/* RUMEP */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc104b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RVDM */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc104c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* ACTO */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc104d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* RTE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc104e,	0,	CVMX_ERROR_GROUP_PCI,	14}	/* MRE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc104f,	0,	CVMX_ERROR_GROUP_PCI,	15}	/* RDWDLE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1050,	0,	CVMX_ERROR_GROUP_PCI,	16}	/* RTWDLE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1051,	0,	CVMX_ERROR_GROUP_PCI,	17}	/* DPEOOSD */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1052,	0,	CVMX_ERROR_GROUP_PCI,	18}	/* FCPVWT */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1053,	0,	CVMX_ERROR_GROUP_PCI,	19}	/* RPE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1054,	0,	CVMX_ERROR_GROUP_PCI,	20}	/* FCUV */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1055,	0,	CVMX_ERROR_GROUP_PCI,	21}	/* RQO */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1056,	0,	CVMX_ERROR_GROUP_PCI,	22}	/* RAUC */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1057,	0,	CVMX_ERROR_GROUP_PCI,	23}	/* RACUR */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1058,	0,	CVMX_ERROR_GROUP_PCI,	24}	/* RACCA */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1059,	0,	CVMX_ERROR_GROUP_PCI,	25}	/* CAAR */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc105a,	0,	CVMX_ERROR_GROUP_PCI,	26}	/* RARWDNS */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc105b,	0,	CVMX_ERROR_GROUP_PCI,	27}	/* RAMTLP */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc105c,	0,	CVMX_ERROR_GROUP_PCI,	28}	/* RACPP */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc105d,	0,	CVMX_ERROR_GROUP_PCI,	29}	/* RAWWPP */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc105e,	0,	CVMX_ERROR_GROUP_PCI,	30}	/* ECRC_E */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc105f,	0,	CVMX_ERROR_GROUP_PCI,	31}	/* LOFP */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1060,	0,	CVMX_ERROR_GROUP_PCI,	32}	/* BMD_E */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1061,	0,	CVMX_ERROR_GROUP_PCI,	33}	/* DATQ_PE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1062,	0,	CVMX_ERROR_GROUP_PCI,	34}	/* P_D0_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1063,	0,	CVMX_ERROR_GROUP_PCI,	35}	/* P_D0_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1064,	0,	CVMX_ERROR_GROUP_PCI,	36}	/* P_D1_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1065,	0,	CVMX_ERROR_GROUP_PCI,	37}	/* P_D1_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1066,	0,	CVMX_ERROR_GROUP_PCI,	38}	/* P_C_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1067,	0,	CVMX_ERROR_GROUP_PCI,	39}	/* P_C_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1068,	0,	CVMX_ERROR_GROUP_PCI,	40}	/* N_D0_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1069,	0,	CVMX_ERROR_GROUP_PCI,	41}	/* N_D0_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc106a,	0,	CVMX_ERROR_GROUP_PCI,	42}	/* N_D1_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc106b,	0,	CVMX_ERROR_GROUP_PCI,	43}	/* N_D1_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc106c,	0,	CVMX_ERROR_GROUP_PCI,	44}	/* N_C_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc106d,	0,	CVMX_ERROR_GROUP_PCI,	45}	/* N_C_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc106e,	0,	CVMX_ERROR_GROUP_PCI,	46}	/* C_D0_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc106f,	0,	CVMX_ERROR_GROUP_PCI,	47}	/* C_D0_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1070,	0,	CVMX_ERROR_GROUP_PCI,	48}	/* C_D1_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1071,	0,	CVMX_ERROR_GROUP_PCI,	49}	/* C_D1_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1072,	0,	CVMX_ERROR_GROUP_PCI,	50}	/* C_C_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1073,	0,	CVMX_ERROR_GROUP_PCI,	51}	/* C_C_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1074,	0,	CVMX_ERROR_GROUP_PCI,	52}	/* RTRY_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1075,	0,	CVMX_ERROR_GROUP_PCI,	53}	/* RTRY_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1076,	0,	CVMX_ERROR_GROUP_PCI,	54}	/* QHDR_B0_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1077,	0,	CVMX_ERROR_GROUP_PCI,	55}	/* QHDR_B0_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1078,	0,	CVMX_ERROR_GROUP_PCI,	56}	/* QHDR_B1_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc1079,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* QHDR_B1_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc107a,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* M2C_D_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc107b,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* M2C_D_DBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc107c,	0,	CVMX_ERROR_GROUP_PCI,	60}	/* M2S_C_SBE */,
-	{ 0x11800c10000d0ull,	"Error: CVMX_PEM1_DBG_INFO[%llx][%u]",	0xc107d,	0,	CVMX_ERROR_GROUP_PCI,	61}	/* M2S_C_DBE */,
 	{ 0x11800c2000428ull,	"Error: CVMX_PEM2_INT_SUM[%llx][%u]",	0xc2001,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* SE */,
 	{ 0x11800c2000428ull,	"Error: CVMX_PEM2_INT_SUM[%llx][%u]",	0xc2004,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* UP_B1 */,
 	{ 0x11800c2000428ull,	"Error: CVMX_PEM2_INT_SUM[%llx][%u]",	0xc2005,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* UP_B2 */,
@@ -1010,68 +822,6 @@ struct cvmx_error_78xx error_array_cn73xx[] = {
 	{ 0x11800c2000428ull,	"Error: CVMX_PEM2_INT_SUM[%llx][%u]",	0xc200b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RDLK */,
 	{ 0x11800c2000428ull,	"Error: CVMX_PEM2_INT_SUM[%llx][%u]",	0xc200c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* CRS_ER */,
 	{ 0x11800c2000428ull,	"Error: CVMX_PEM2_INT_SUM[%llx][%u]",	0xc200d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* CRS_DR */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2040,	0,	CVMX_ERROR_GROUP_PCI,	0}	/* SPOISON */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2041,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* RTLPMAL */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2042,	0,	CVMX_ERROR_GROUP_PCI,	2}	/* RTLPLLE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2043,	0,	CVMX_ERROR_GROUP_PCI,	3}	/* RECRCE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2044,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* RPOISON */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2045,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* RCEMRC */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2046,	0,	CVMX_ERROR_GROUP_PCI,	6}	/* RNFEMRC */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2047,	0,	CVMX_ERROR_GROUP_PCI,	7}	/* RFEMRC */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2048,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* RPMERC */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2049,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* RPTAMRC */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc204a,	0,	CVMX_ERROR_GROUP_PCI,	10}	/* RUMEP */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc204b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RVDM */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc204c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* ACTO */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc204d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* RTE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc204e,	0,	CVMX_ERROR_GROUP_PCI,	14}	/* MRE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc204f,	0,	CVMX_ERROR_GROUP_PCI,	15}	/* RDWDLE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2050,	0,	CVMX_ERROR_GROUP_PCI,	16}	/* RTWDLE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2051,	0,	CVMX_ERROR_GROUP_PCI,	17}	/* DPEOOSD */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2052,	0,	CVMX_ERROR_GROUP_PCI,	18}	/* FCPVWT */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2053,	0,	CVMX_ERROR_GROUP_PCI,	19}	/* RPE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2054,	0,	CVMX_ERROR_GROUP_PCI,	20}	/* FCUV */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2055,	0,	CVMX_ERROR_GROUP_PCI,	21}	/* RQO */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2056,	0,	CVMX_ERROR_GROUP_PCI,	22}	/* RAUC */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2057,	0,	CVMX_ERROR_GROUP_PCI,	23}	/* RACUR */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2058,	0,	CVMX_ERROR_GROUP_PCI,	24}	/* RACCA */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2059,	0,	CVMX_ERROR_GROUP_PCI,	25}	/* CAAR */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc205a,	0,	CVMX_ERROR_GROUP_PCI,	26}	/* RARWDNS */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc205b,	0,	CVMX_ERROR_GROUP_PCI,	27}	/* RAMTLP */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc205c,	0,	CVMX_ERROR_GROUP_PCI,	28}	/* RACPP */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc205d,	0,	CVMX_ERROR_GROUP_PCI,	29}	/* RAWWPP */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc205e,	0,	CVMX_ERROR_GROUP_PCI,	30}	/* ECRC_E */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc205f,	0,	CVMX_ERROR_GROUP_PCI,	31}	/* LOFP */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2060,	0,	CVMX_ERROR_GROUP_PCI,	32}	/* BMD_E */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2061,	0,	CVMX_ERROR_GROUP_PCI,	33}	/* DATQ_PE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2062,	0,	CVMX_ERROR_GROUP_PCI,	34}	/* P_D0_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2063,	0,	CVMX_ERROR_GROUP_PCI,	35}	/* P_D0_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2064,	0,	CVMX_ERROR_GROUP_PCI,	36}	/* P_D1_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2065,	0,	CVMX_ERROR_GROUP_PCI,	37}	/* P_D1_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2066,	0,	CVMX_ERROR_GROUP_PCI,	38}	/* P_C_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2067,	0,	CVMX_ERROR_GROUP_PCI,	39}	/* P_C_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2068,	0,	CVMX_ERROR_GROUP_PCI,	40}	/* N_D0_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2069,	0,	CVMX_ERROR_GROUP_PCI,	41}	/* N_D0_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc206a,	0,	CVMX_ERROR_GROUP_PCI,	42}	/* N_D1_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc206b,	0,	CVMX_ERROR_GROUP_PCI,	43}	/* N_D1_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc206c,	0,	CVMX_ERROR_GROUP_PCI,	44}	/* N_C_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc206d,	0,	CVMX_ERROR_GROUP_PCI,	45}	/* N_C_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc206e,	0,	CVMX_ERROR_GROUP_PCI,	46}	/* C_D0_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc206f,	0,	CVMX_ERROR_GROUP_PCI,	47}	/* C_D0_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2070,	0,	CVMX_ERROR_GROUP_PCI,	48}	/* C_D1_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2071,	0,	CVMX_ERROR_GROUP_PCI,	49}	/* C_D1_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2072,	0,	CVMX_ERROR_GROUP_PCI,	50}	/* C_C_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2073,	0,	CVMX_ERROR_GROUP_PCI,	51}	/* C_C_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2074,	0,	CVMX_ERROR_GROUP_PCI,	52}	/* RTRY_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2075,	0,	CVMX_ERROR_GROUP_PCI,	53}	/* RTRY_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2076,	0,	CVMX_ERROR_GROUP_PCI,	54}	/* QHDR_B0_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2077,	0,	CVMX_ERROR_GROUP_PCI,	55}	/* QHDR_B0_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2078,	0,	CVMX_ERROR_GROUP_PCI,	56}	/* QHDR_B1_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc2079,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* QHDR_B1_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc207a,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* M2C_D_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc207b,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* M2C_D_DBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc207c,	0,	CVMX_ERROR_GROUP_PCI,	60}	/* M2S_C_SBE */,
-	{ 0x11800c20000d0ull,	"Error: CVMX_PEM2_DBG_INFO[%llx][%u]",	0xc207d,	0,	CVMX_ERROR_GROUP_PCI,	61}	/* M2S_C_DBE */,
 	{ 0x11800c3000428ull,	"Error: CVMX_PEM3_INT_SUM[%llx][%u]",	0xc3001,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* SE */,
 	{ 0x11800c3000428ull,	"Error: CVMX_PEM3_INT_SUM[%llx][%u]",	0xc3004,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* UP_B1 */,
 	{ 0x11800c3000428ull,	"Error: CVMX_PEM3_INT_SUM[%llx][%u]",	0xc3005,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* UP_B2 */,
@@ -1082,68 +832,6 @@ struct cvmx_error_78xx error_array_cn73xx[] = {
 	{ 0x11800c3000428ull,	"Error: CVMX_PEM3_INT_SUM[%llx][%u]",	0xc300b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RDLK */,
 	{ 0x11800c3000428ull,	"Error: CVMX_PEM3_INT_SUM[%llx][%u]",	0xc300c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* CRS_ER */,
 	{ 0x11800c3000428ull,	"Error: CVMX_PEM3_INT_SUM[%llx][%u]",	0xc300d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* CRS_DR */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3040,	0,	CVMX_ERROR_GROUP_PCI,	0}	/* SPOISON */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3041,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* RTLPMAL */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3042,	0,	CVMX_ERROR_GROUP_PCI,	2}	/* RTLPLLE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3043,	0,	CVMX_ERROR_GROUP_PCI,	3}	/* RECRCE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3044,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* RPOISON */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3045,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* RCEMRC */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3046,	0,	CVMX_ERROR_GROUP_PCI,	6}	/* RNFEMRC */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3047,	0,	CVMX_ERROR_GROUP_PCI,	7}	/* RFEMRC */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3048,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* RPMERC */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3049,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* RPTAMRC */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc304a,	0,	CVMX_ERROR_GROUP_PCI,	10}	/* RUMEP */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc304b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RVDM */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc304c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* ACTO */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc304d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* RTE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc304e,	0,	CVMX_ERROR_GROUP_PCI,	14}	/* MRE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc304f,	0,	CVMX_ERROR_GROUP_PCI,	15}	/* RDWDLE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3050,	0,	CVMX_ERROR_GROUP_PCI,	16}	/* RTWDLE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3051,	0,	CVMX_ERROR_GROUP_PCI,	17}	/* DPEOOSD */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3052,	0,	CVMX_ERROR_GROUP_PCI,	18}	/* FCPVWT */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3053,	0,	CVMX_ERROR_GROUP_PCI,	19}	/* RPE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3054,	0,	CVMX_ERROR_GROUP_PCI,	20}	/* FCUV */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3055,	0,	CVMX_ERROR_GROUP_PCI,	21}	/* RQO */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3056,	0,	CVMX_ERROR_GROUP_PCI,	22}	/* RAUC */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3057,	0,	CVMX_ERROR_GROUP_PCI,	23}	/* RACUR */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3058,	0,	CVMX_ERROR_GROUP_PCI,	24}	/* RACCA */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3059,	0,	CVMX_ERROR_GROUP_PCI,	25}	/* CAAR */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc305a,	0,	CVMX_ERROR_GROUP_PCI,	26}	/* RARWDNS */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc305b,	0,	CVMX_ERROR_GROUP_PCI,	27}	/* RAMTLP */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc305c,	0,	CVMX_ERROR_GROUP_PCI,	28}	/* RACPP */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc305d,	0,	CVMX_ERROR_GROUP_PCI,	29}	/* RAWWPP */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc305e,	0,	CVMX_ERROR_GROUP_PCI,	30}	/* ECRC_E */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc305f,	0,	CVMX_ERROR_GROUP_PCI,	31}	/* LOFP */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3060,	0,	CVMX_ERROR_GROUP_PCI,	32}	/* BMD_E */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3061,	0,	CVMX_ERROR_GROUP_PCI,	33}	/* DATQ_PE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3062,	0,	CVMX_ERROR_GROUP_PCI,	34}	/* P_D0_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3063,	0,	CVMX_ERROR_GROUP_PCI,	35}	/* P_D0_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3064,	0,	CVMX_ERROR_GROUP_PCI,	36}	/* P_D1_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3065,	0,	CVMX_ERROR_GROUP_PCI,	37}	/* P_D1_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3066,	0,	CVMX_ERROR_GROUP_PCI,	38}	/* P_C_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3067,	0,	CVMX_ERROR_GROUP_PCI,	39}	/* P_C_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3068,	0,	CVMX_ERROR_GROUP_PCI,	40}	/* N_D0_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3069,	0,	CVMX_ERROR_GROUP_PCI,	41}	/* N_D0_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc306a,	0,	CVMX_ERROR_GROUP_PCI,	42}	/* N_D1_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc306b,	0,	CVMX_ERROR_GROUP_PCI,	43}	/* N_D1_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc306c,	0,	CVMX_ERROR_GROUP_PCI,	44}	/* N_C_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc306d,	0,	CVMX_ERROR_GROUP_PCI,	45}	/* N_C_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc306e,	0,	CVMX_ERROR_GROUP_PCI,	46}	/* C_D0_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc306f,	0,	CVMX_ERROR_GROUP_PCI,	47}	/* C_D0_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3070,	0,	CVMX_ERROR_GROUP_PCI,	48}	/* C_D1_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3071,	0,	CVMX_ERROR_GROUP_PCI,	49}	/* C_D1_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3072,	0,	CVMX_ERROR_GROUP_PCI,	50}	/* C_C_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3073,	0,	CVMX_ERROR_GROUP_PCI,	51}	/* C_C_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3074,	0,	CVMX_ERROR_GROUP_PCI,	52}	/* RTRY_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3075,	0,	CVMX_ERROR_GROUP_PCI,	53}	/* RTRY_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3076,	0,	CVMX_ERROR_GROUP_PCI,	54}	/* QHDR_B0_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3077,	0,	CVMX_ERROR_GROUP_PCI,	55}	/* QHDR_B0_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3078,	0,	CVMX_ERROR_GROUP_PCI,	56}	/* QHDR_B1_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc3079,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* QHDR_B1_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc307a,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* M2C_D_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc307b,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* M2C_D_DBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc307c,	0,	CVMX_ERROR_GROUP_PCI,	60}	/* M2S_C_SBE */,
-	{ 0x11800c30000d0ull,	"Error: CVMX_PEM3_DBG_INFO[%llx][%u]",	0xc307d,	0,	CVMX_ERROR_GROUP_PCI,	61}	/* M2S_C_DBE */,
 	{ 0x11800db000040ull,	"Error: CVMX_XCV_INT[%llx][%u]",	0xdb008,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* TX_UNDFLW */,
 	{ 0x11800db000040ull,	"Error: CVMX_XCV_INT[%llx][%u]",	0xdb009,	0,	CVMX_ERROR_GROUP_ETHERNET,	6}	/* TX_OVRFLW */,
 	{ 0x1dc0000000008ull,	"Error: CVMX_OSM_INT_STAT[%llx][%u]",	0xdc000,	0,	CVMX_ERROR_GROUP_DFM,	0}	/* DFA_DBE */,
diff --git a/arch/mips/cavium-octeon/octeon-75xx-errors.c b/arch/mips/cavium-octeon/octeon-75xx-errors.c
new file mode 100644
index 0000000..c5ad6c2
--- /dev/null
+++ b/arch/mips/cavium-octeon/octeon-75xx-errors.c
@@ -0,0 +1,1013 @@
+/***********************license start***************
+ * Copyright (c) 2003-2015  Cavium Inc. (support@cavium.com). All rights
+ * reserved.
+ *
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+
+ *   * Neither the name of Cavium Inc. nor the names of
+ *     its contributors may be used to endorse or promote products
+ *     derived from this software without specific prior written
+ *     permission.
+
+ * This Software, including technical data, may be subject to U.S. export  control
+ * laws, including the U.S. Export Administration Act and its  associated
+ * regulations, and may be subject to export or import  regulations in other
+ * countries.
+
+ * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
+ * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR
+ * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
+ * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR
+ * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM
+ * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,
+ * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF
+ * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
+ * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR
+ * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.
+ ***********************license end**************************************/
+
+
+/**
+ * @file
+ *
+ * Automatically generated error messages for 75xx.
+ *
+ * This file is auto generated. Do not edit.
+ */
+
+#ifdef CVMX_BUILD_FOR_LINUX_KERNEL
+#include <linux/module.h>
+#include <asm/octeon/octeon.h>
+#include <asm/octeon/cvmx.h>
+#else
+#include "cvmx.h"
+#include "cvmx-error.h"
+#include "cvmx-error-arrays-cn78xx.h"
+#endif
+
+struct cvmx_error_78xx error_array_cnf75xx[] = {
+/*	CSR Address,		error message,				intsn,		Flags,	ERR Group,		Bit position in CSR      */
+/* --------------------------------------------------------------------------------------------------------------------------------------------- */
+	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12000,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* DAT_SBE */,
+	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12001,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* DAT_DBE */,
+	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12002,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* DAT_UFLOW */,
+	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12003,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* DAT_OFLOW */,
+	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12004,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* CHAN_UFLOW */,
+	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12005,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* CHAN_OFLOW */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f000,	0,	CVMX_ERROR_GROUP_PCI,	0}	/* RML_TO */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f001,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* M0P0_FLR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f002,	0,	CVMX_ERROR_GROUP_PCI,	2}	/* M0V0_FLR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f003,	0,	CVMX_ERROR_GROUP_PCI,	3}	/* M0P1_FLR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f004,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* M0V1_FLR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f009,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* M2P0_FLR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f00a,	0,	CVMX_ERROR_GROUP_PCI,	10}	/* M2V0_FLR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f00c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* M0P0_DMAPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f00e,	0,	CVMX_ERROR_GROUP_PCI,	14}	/* M0P0_PKTPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f014,	0,	CVMX_ERROR_GROUP_PCI,	20}	/* M0P1_PKTPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f016,	0,	CVMX_ERROR_GROUP_PCI,	22}	/* M0P1_PPPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f017,	0,	CVMX_ERROR_GROUP_PCI,	23}	/* M1P0_DMAPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f018,	0,	CVMX_ERROR_GROUP_PCI,	24}	/* M1P0_PKTPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f019,	0,	CVMX_ERROR_GROUP_PCI,	25}	/* M1P0_PPPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f01c,	0,	CVMX_ERROR_GROUP_PCI,	27}	/* M2P0_DMAPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f01d,	0,	CVMX_ERROR_GROUP_PCI,	29}	/* M2P0_PKTPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f01f,	0,	CVMX_ERROR_GROUP_PCI,	31}	/* M2P0_PPPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f020,	0,	CVMX_ERROR_GROUP_PCI,	32}	/* M3P0_DMAPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f021,	0,	CVMX_ERROR_GROUP_PCI,	33}	/* M3P0_PKTPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f022,	0,	CVMX_ERROR_GROUP_PCI,	34}	/* M3P0_PPPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f023,	0,	CVMX_ERROR_GROUP_PCI,	35}	/* M0_UP_B0 */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f024,	0,	CVMX_ERROR_GROUP_PCI,	36}	/* M0_UP_WI */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f025,	0,	CVMX_ERROR_GROUP_PCI,	37}	/* M0_UN_B0 */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f026,	0,	CVMX_ERROR_GROUP_PCI,	38}	/* M0_UN_WI */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f027,	0,	CVMX_ERROR_GROUP_PCI,	39}	/* M1_UP_B0 */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f028,	0,	CVMX_ERROR_GROUP_PCI,	40}	/* M1_UP_WI */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f029,	0,	CVMX_ERROR_GROUP_PCI,	41}	/* M1_UN_B0 */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f02a,	0,	CVMX_ERROR_GROUP_PCI,	42}	/* M1_UN_WI */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f02b,	0,	CVMX_ERROR_GROUP_PCI,	43}	/* M2_UP_B0 */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f02c,	0,	CVMX_ERROR_GROUP_PCI,	44}	/* M2_UP_WI */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f02d,	0,	CVMX_ERROR_GROUP_PCI,	45}	/* M2_UN_B0 */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f02e,	0,	CVMX_ERROR_GROUP_PCI,	46}	/* M2_UN_WI */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f02f,	0,	CVMX_ERROR_GROUP_PCI,	47}	/* M3_UP_B0 */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f030,	0,	CVMX_ERROR_GROUP_PCI,	48}	/* M3_UP_WI */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f031,	0,	CVMX_ERROR_GROUP_PCI,	49}	/* M3_UN_B0 */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f032,	0,	CVMX_ERROR_GROUP_PCI,	50}	/* M3_UN_WI */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f033,	0,	CVMX_ERROR_GROUP_PCI,	16}	/* M0P0_PPPF_ERR */,
+	{ 0x11f0000027100ull,	"Error: CVMX_SLI_CIU_INT_SUM[%llx][%u]",	0x1f035,	0,	CVMX_ERROR_GROUP_PCI,	18}	/* M0P1_DMAPF_ERR */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f040,	0,	CVMX_ERROR_GROUP_PCI,	0}	/* CPL0_SBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f041,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* CPL0_DBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f042,	0,	CVMX_ERROR_GROUP_PCI,	2}	/* CPL1_SBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f043,	0,	CVMX_ERROR_GROUP_PCI,	3}	/* CPL1_DBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f044,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* NPPR_SBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f045,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* NPPR_DBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f046,	0,	CVMX_ERROR_GROUP_PCI,	6}	/* TLPC0_SBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f047,	0,	CVMX_ERROR_GROUP_PCI,	7}	/* TLPC0_DBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f048,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* TLPP0_SBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f049,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* TLPP0_DBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f04a,	0,	CVMX_ERROR_GROUP_PCI,	10}	/* TLPN0_SBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f04b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* TLPN0_DBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f04c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* TLPC1_SBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f04d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* TLPC1_DBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f04e,	0,	CVMX_ERROR_GROUP_PCI,	14}	/* TLPP1_SBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f04f,	0,	CVMX_ERROR_GROUP_PCI,	15}	/* TLPP1_DBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f050,	0,	CVMX_ERROR_GROUP_PCI,	16}	/* TLPN1_SBE */,
+	{ 0x11f00000285d0ull,	"Error: CVMX_SLI_MEM_INT_SUM[%llx][%u]",	0x1f051,	0,	CVMX_ERROR_GROUP_PCI,	17}	/* TLPN1_DBE */,
+	{ 0x1180020000000ull,	"Error: CVMX_KEY_INT_SUM[%llx][%u]",	0x20000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* KED0_SBE */,
+	{ 0x1180020000000ull,	"Error: CVMX_KEY_INT_SUM[%llx][%u]",	0x20001,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* KED0_DBE */,
+	{ 0x1280000000040ull,	"Error: CVMX_FPA_ERR_INT[%llx][%u]",	0x28000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* CNT_ADD */,
+	{ 0x1280000000040ull,	"Error: CVMX_FPA_ERR_INT[%llx][%u]",	0x28001,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CNT_SUB */,
+	{ 0x1280000000040ull,	"Error: CVMX_FPA_ERR_INT[%llx][%u]",	0x28002,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* HW_ADD */,
+	{ 0x1280000000040ull,	"Error: CVMX_FPA_ERR_INT[%llx][%u]",	0x28003,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* HW_SUB */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28040,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* RAM_SBE<0> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28041,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* RAM_SBE<1> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28042,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RAM_SBE<2> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28043,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* RAM_SBE<3> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28044,	0,	CVMX_ERROR_GROUP_INTERNAL,	4}	/* RAM_SBE<4> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28045,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* RAM_SBE<5> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28046,	0,	CVMX_ERROR_GROUP_INTERNAL,	6}	/* RAM_SBE<6> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28047,	0,	CVMX_ERROR_GROUP_INTERNAL,	7}	/* RAM_SBE<7> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28048,	0,	CVMX_ERROR_GROUP_INTERNAL,	8}	/* RAM_SBE<8> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28049,	0,	CVMX_ERROR_GROUP_INTERNAL,	9}	/* RAM_SBE<9> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2804a,	0,	CVMX_ERROR_GROUP_INTERNAL,	10}	/* RAM_SBE<10> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2804b,	0,	CVMX_ERROR_GROUP_INTERNAL,	11}	/* RAM_SBE<11> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2804c,	0,	CVMX_ERROR_GROUP_INTERNAL,	12}	/* RAM_SBE<12> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2804d,	0,	CVMX_ERROR_GROUP_INTERNAL,	13}	/* RAM_SBE<13> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2804e,	0,	CVMX_ERROR_GROUP_INTERNAL,	14}	/* RAM_SBE<14> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2804f,	0,	CVMX_ERROR_GROUP_INTERNAL,	15}	/* RAM_SBE<15> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28050,	0,	CVMX_ERROR_GROUP_INTERNAL,	16}	/* RAM_SBE<16> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28051,	0,	CVMX_ERROR_GROUP_INTERNAL,	17}	/* RAM_SBE<17> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28052,	0,	CVMX_ERROR_GROUP_INTERNAL,	18}	/* RAM_SBE<18> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28053,	0,	CVMX_ERROR_GROUP_INTERNAL,	19}	/* RAM_SBE<19> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28060,	0,	CVMX_ERROR_GROUP_INTERNAL,	32}	/* RAM_DBE<0> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28061,	0,	CVMX_ERROR_GROUP_INTERNAL,	33}	/* RAM_DBE<1> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28062,	0,	CVMX_ERROR_GROUP_INTERNAL,	34}	/* RAM_DBE<2> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28063,	0,	CVMX_ERROR_GROUP_INTERNAL,	35}	/* RAM_DBE<3> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28064,	0,	CVMX_ERROR_GROUP_INTERNAL,	36}	/* RAM_DBE<4> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28065,	0,	CVMX_ERROR_GROUP_INTERNAL,	37}	/* RAM_DBE<5> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28066,	0,	CVMX_ERROR_GROUP_INTERNAL,	38}	/* RAM_DBE<6> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28067,	0,	CVMX_ERROR_GROUP_INTERNAL,	39}	/* RAM_DBE<7> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28068,	0,	CVMX_ERROR_GROUP_INTERNAL,	40}	/* RAM_DBE<8> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28069,	0,	CVMX_ERROR_GROUP_INTERNAL,	41}	/* RAM_DBE<9> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2806a,	0,	CVMX_ERROR_GROUP_INTERNAL,	42}	/* RAM_DBE<10> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2806b,	0,	CVMX_ERROR_GROUP_INTERNAL,	43}	/* RAM_DBE<11> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2806c,	0,	CVMX_ERROR_GROUP_INTERNAL,	44}	/* RAM_DBE<12> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2806d,	0,	CVMX_ERROR_GROUP_INTERNAL,	45}	/* RAM_DBE<13> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2806e,	0,	CVMX_ERROR_GROUP_INTERNAL,	46}	/* RAM_DBE<14> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x2806f,	0,	CVMX_ERROR_GROUP_INTERNAL,	47}	/* RAM_DBE<15> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28070,	0,	CVMX_ERROR_GROUP_INTERNAL,	48}	/* RAM_DBE<16> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28071,	0,	CVMX_ERROR_GROUP_INTERNAL,	49}	/* RAM_DBE<17> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28072,	0,	CVMX_ERROR_GROUP_INTERNAL,	50}	/* RAM_DBE<18> */,
+	{ 0x1280000000068ull,	"Error: CVMX_FPA_ECC_INT[%llx][%u]",	0x28073,	0,	CVMX_ERROR_GROUP_INTERNAL,	51}	/* RAM_DBE<19> */,
+	{ 0x1280010a00000ull,	"Error: CVMX_FPA_POOL0_INT[%llx][%u]",	0x28800,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00008ull,	"Error: CVMX_FPA_POOL1_INT[%llx][%u]",	0x28801,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00010ull,	"Error: CVMX_FPA_POOL2_INT[%llx][%u]",	0x28802,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00018ull,	"Error: CVMX_FPA_POOL3_INT[%llx][%u]",	0x28803,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00020ull,	"Error: CVMX_FPA_POOL4_INT[%llx][%u]",	0x28804,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00028ull,	"Error: CVMX_FPA_POOL5_INT[%llx][%u]",	0x28805,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00030ull,	"Error: CVMX_FPA_POOL6_INT[%llx][%u]",	0x28806,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00038ull,	"Error: CVMX_FPA_POOL7_INT[%llx][%u]",	0x28807,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00040ull,	"Error: CVMX_FPA_POOL8_INT[%llx][%u]",	0x28808,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00048ull,	"Error: CVMX_FPA_POOL9_INT[%llx][%u]",	0x28809,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00050ull,	"Error: CVMX_FPA_POOL10_INT[%llx][%u]",	0x2880a,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00058ull,	"Error: CVMX_FPA_POOL11_INT[%llx][%u]",	0x2880b,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00060ull,	"Error: CVMX_FPA_POOL12_INT[%llx][%u]",	0x2880c,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00068ull,	"Error: CVMX_FPA_POOL13_INT[%llx][%u]",	0x2880d,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00070ull,	"Error: CVMX_FPA_POOL14_INT[%llx][%u]",	0x2880e,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00078ull,	"Error: CVMX_FPA_POOL15_INT[%llx][%u]",	0x2880f,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00080ull,	"Error: CVMX_FPA_POOL16_INT[%llx][%u]",	0x28810,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00088ull,	"Error: CVMX_FPA_POOL17_INT[%llx][%u]",	0x28811,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00090ull,	"Error: CVMX_FPA_POOL18_INT[%llx][%u]",	0x28812,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00098ull,	"Error: CVMX_FPA_POOL19_INT[%llx][%u]",	0x28813,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000a0ull,	"Error: CVMX_FPA_POOL20_INT[%llx][%u]",	0x28814,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000a8ull,	"Error: CVMX_FPA_POOL21_INT[%llx][%u]",	0x28815,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000b0ull,	"Error: CVMX_FPA_POOL22_INT[%llx][%u]",	0x28816,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000b8ull,	"Error: CVMX_FPA_POOL23_INT[%llx][%u]",	0x28817,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000c0ull,	"Error: CVMX_FPA_POOL24_INT[%llx][%u]",	0x28818,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000c8ull,	"Error: CVMX_FPA_POOL25_INT[%llx][%u]",	0x28819,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000d0ull,	"Error: CVMX_FPA_POOL26_INT[%llx][%u]",	0x2881a,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000d8ull,	"Error: CVMX_FPA_POOL27_INT[%llx][%u]",	0x2881b,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000e0ull,	"Error: CVMX_FPA_POOL28_INT[%llx][%u]",	0x2881c,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000e8ull,	"Error: CVMX_FPA_POOL29_INT[%llx][%u]",	0x2881d,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000f0ull,	"Error: CVMX_FPA_POOL30_INT[%llx][%u]",	0x2881e,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a000f8ull,	"Error: CVMX_FPA_POOL31_INT[%llx][%u]",	0x2881f,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* OVFLS */,
+	{ 0x1280010a00000ull,	"Error: CVMX_FPA_POOL0_INT[%llx][%u]",	0x28840,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00008ull,	"Error: CVMX_FPA_POOL1_INT[%llx][%u]",	0x28841,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00010ull,	"Error: CVMX_FPA_POOL2_INT[%llx][%u]",	0x28842,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00018ull,	"Error: CVMX_FPA_POOL3_INT[%llx][%u]",	0x28843,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00020ull,	"Error: CVMX_FPA_POOL4_INT[%llx][%u]",	0x28844,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00028ull,	"Error: CVMX_FPA_POOL5_INT[%llx][%u]",	0x28845,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00030ull,	"Error: CVMX_FPA_POOL6_INT[%llx][%u]",	0x28846,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00038ull,	"Error: CVMX_FPA_POOL7_INT[%llx][%u]",	0x28847,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00040ull,	"Error: CVMX_FPA_POOL8_INT[%llx][%u]",	0x28848,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00048ull,	"Error: CVMX_FPA_POOL9_INT[%llx][%u]",	0x28849,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00050ull,	"Error: CVMX_FPA_POOL10_INT[%llx][%u]",	0x2884a,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00058ull,	"Error: CVMX_FPA_POOL11_INT[%llx][%u]",	0x2884b,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00060ull,	"Error: CVMX_FPA_POOL12_INT[%llx][%u]",	0x2884c,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00068ull,	"Error: CVMX_FPA_POOL13_INT[%llx][%u]",	0x2884d,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00070ull,	"Error: CVMX_FPA_POOL14_INT[%llx][%u]",	0x2884e,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00078ull,	"Error: CVMX_FPA_POOL15_INT[%llx][%u]",	0x2884f,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00080ull,	"Error: CVMX_FPA_POOL16_INT[%llx][%u]",	0x28850,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00088ull,	"Error: CVMX_FPA_POOL17_INT[%llx][%u]",	0x28851,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00090ull,	"Error: CVMX_FPA_POOL18_INT[%llx][%u]",	0x28852,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00098ull,	"Error: CVMX_FPA_POOL19_INT[%llx][%u]",	0x28853,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000a0ull,	"Error: CVMX_FPA_POOL20_INT[%llx][%u]",	0x28854,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000a8ull,	"Error: CVMX_FPA_POOL21_INT[%llx][%u]",	0x28855,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000b0ull,	"Error: CVMX_FPA_POOL22_INT[%llx][%u]",	0x28856,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000b8ull,	"Error: CVMX_FPA_POOL23_INT[%llx][%u]",	0x28857,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000c0ull,	"Error: CVMX_FPA_POOL24_INT[%llx][%u]",	0x28858,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000c8ull,	"Error: CVMX_FPA_POOL25_INT[%llx][%u]",	0x28859,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000d0ull,	"Error: CVMX_FPA_POOL26_INT[%llx][%u]",	0x2885a,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000d8ull,	"Error: CVMX_FPA_POOL27_INT[%llx][%u]",	0x2885b,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000e0ull,	"Error: CVMX_FPA_POOL28_INT[%llx][%u]",	0x2885c,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000e8ull,	"Error: CVMX_FPA_POOL29_INT[%llx][%u]",	0x2885d,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000f0ull,	"Error: CVMX_FPA_POOL30_INT[%llx][%u]",	0x2885e,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a000f8ull,	"Error: CVMX_FPA_POOL31_INT[%llx][%u]",	0x2885f,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CRCERR */,
+	{ 0x1280010a00000ull,	"Error: CVMX_FPA_POOL0_INT[%llx][%u]",	0x28880,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00008ull,	"Error: CVMX_FPA_POOL1_INT[%llx][%u]",	0x28881,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00010ull,	"Error: CVMX_FPA_POOL2_INT[%llx][%u]",	0x28882,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00018ull,	"Error: CVMX_FPA_POOL3_INT[%llx][%u]",	0x28883,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00020ull,	"Error: CVMX_FPA_POOL4_INT[%llx][%u]",	0x28884,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00028ull,	"Error: CVMX_FPA_POOL5_INT[%llx][%u]",	0x28885,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00030ull,	"Error: CVMX_FPA_POOL6_INT[%llx][%u]",	0x28886,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00038ull,	"Error: CVMX_FPA_POOL7_INT[%llx][%u]",	0x28887,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00040ull,	"Error: CVMX_FPA_POOL8_INT[%llx][%u]",	0x28888,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00048ull,	"Error: CVMX_FPA_POOL9_INT[%llx][%u]",	0x28889,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00050ull,	"Error: CVMX_FPA_POOL10_INT[%llx][%u]",	0x2888a,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00058ull,	"Error: CVMX_FPA_POOL11_INT[%llx][%u]",	0x2888b,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00060ull,	"Error: CVMX_FPA_POOL12_INT[%llx][%u]",	0x2888c,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00068ull,	"Error: CVMX_FPA_POOL13_INT[%llx][%u]",	0x2888d,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00070ull,	"Error: CVMX_FPA_POOL14_INT[%llx][%u]",	0x2888e,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00078ull,	"Error: CVMX_FPA_POOL15_INT[%llx][%u]",	0x2888f,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00080ull,	"Error: CVMX_FPA_POOL16_INT[%llx][%u]",	0x28890,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00088ull,	"Error: CVMX_FPA_POOL17_INT[%llx][%u]",	0x28891,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00090ull,	"Error: CVMX_FPA_POOL18_INT[%llx][%u]",	0x28892,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a00098ull,	"Error: CVMX_FPA_POOL19_INT[%llx][%u]",	0x28893,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000a0ull,	"Error: CVMX_FPA_POOL20_INT[%llx][%u]",	0x28894,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000a8ull,	"Error: CVMX_FPA_POOL21_INT[%llx][%u]",	0x28895,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000b0ull,	"Error: CVMX_FPA_POOL22_INT[%llx][%u]",	0x28896,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000b8ull,	"Error: CVMX_FPA_POOL23_INT[%llx][%u]",	0x28897,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000c0ull,	"Error: CVMX_FPA_POOL24_INT[%llx][%u]",	0x28898,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000c8ull,	"Error: CVMX_FPA_POOL25_INT[%llx][%u]",	0x28899,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000d0ull,	"Error: CVMX_FPA_POOL26_INT[%llx][%u]",	0x2889a,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000d8ull,	"Error: CVMX_FPA_POOL27_INT[%llx][%u]",	0x2889b,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000e0ull,	"Error: CVMX_FPA_POOL28_INT[%llx][%u]",	0x2889c,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000e8ull,	"Error: CVMX_FPA_POOL29_INT[%llx][%u]",	0x2889d,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000f0ull,	"Error: CVMX_FPA_POOL30_INT[%llx][%u]",	0x2889e,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1280010a000f8ull,	"Error: CVMX_FPA_POOL31_INT[%llx][%u]",	0x2889f,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RANGE */,
+	{ 0x1180044000020ull,	"Error: CVMX_PKI_GEN_INT[%llx][%u]",	0x44003,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* SOP */,
+	{ 0x1180044000020ull,	"Error: CVMX_PKI_GEN_INT[%llx][%u]",	0x44004,	0,	CVMX_ERROR_GROUP_INTERNAL,	4}	/* EOP */,
+	{ 0x1180044000020ull,	"Error: CVMX_PKI_GEN_INT[%llx][%u]",	0x44005,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* DAT */,
+	{ 0x1180044000020ull,	"Error: CVMX_PKI_GEN_INT[%llx][%u]",	0x44007,	0,	CVMX_ERROR_GROUP_INTERNAL,	7}	/* X2P_REQ_OFL */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x44040,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* ASM_SBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x44041,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* ASM_DBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x44042,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* KMEM_SBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x44043,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* KMEM_DBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x44044,	0,	CVMX_ERROR_GROUP_INTERNAL,	4}	/* NXTBLK_SBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x44045,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* NXTBLK_DBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x44046,	0,	CVMX_ERROR_GROUP_INTERNAL,	6}	/* CURPTAG_SBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x44047,	0,	CVMX_ERROR_GROUP_INTERNAL,	7}	/* CURPTAG_DBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x44048,	0,	CVMX_ERROR_GROUP_INTERNAL,	8}	/* NXTPTAG_SBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x44049,	0,	CVMX_ERROR_GROUP_INTERNAL,	9}	/* NXTPTAG_DBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x4404a,	0,	CVMX_ERROR_GROUP_INTERNAL,	10}	/* WADR_SBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x4404b,	0,	CVMX_ERROR_GROUP_INTERNAL,	11}	/* WADR_DBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x4404c,	0,	CVMX_ERROR_GROUP_INTERNAL,	12}	/* PBE_SBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x4404d,	0,	CVMX_ERROR_GROUP_INTERNAL,	13}	/* PBE_DBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x4404e,	0,	CVMX_ERROR_GROUP_INTERNAL,	14}	/* LDFIF_SBE */,
+	{ 0x1180044000040ull,	"Error: CVMX_PKI_ECC_INT0[%llx][%u]",	0x4404f,	0,	CVMX_ERROR_GROUP_INTERNAL,	15}	/* LDFIF_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44100,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* QPG_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44101,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* QPG_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44102,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* STYLEWQ_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44103,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* STYLEWQ_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44104,	0,	CVMX_ERROR_GROUP_INTERNAL,	4}	/* PBTAG_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44105,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* PBTAG_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44106,	0,	CVMX_ERROR_GROUP_INTERNAL,	6}	/* CHAN_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44107,	0,	CVMX_ERROR_GROUP_INTERNAL,	7}	/* CHAN_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44108,	0,	CVMX_ERROR_GROUP_INTERNAL,	8}	/* AURA_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44109,	0,	CVMX_ERROR_GROUP_INTERNAL,	9}	/* AURA_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x4410a,	0,	CVMX_ERROR_GROUP_INTERNAL,	10}	/* TAG_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x4410b,	0,	CVMX_ERROR_GROUP_INTERNAL,	11}	/* TAG_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44110,	0,	CVMX_ERROR_GROUP_INTERNAL,	16}	/* PKTWQ_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44111,	0,	CVMX_ERROR_GROUP_INTERNAL,	17}	/* PKTWQ_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44112,	0,	CVMX_ERROR_GROUP_INTERNAL,	18}	/* PLC_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44113,	0,	CVMX_ERROR_GROUP_INTERNAL,	19}	/* PLC_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x4411a,	0,	CVMX_ERROR_GROUP_INTERNAL,	26}	/* BPID_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x4411b,	0,	CVMX_ERROR_GROUP_INTERNAL,	27}	/* BPID_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x4411c,	0,	CVMX_ERROR_GROUP_INTERNAL,	28}	/* DOA_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x4411d,	0,	CVMX_ERROR_GROUP_INTERNAL,	29}	/* DOA_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x4411e,	0,	CVMX_ERROR_GROUP_INTERNAL,	30}	/* WQEOUT_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x4411f,	0,	CVMX_ERROR_GROUP_INTERNAL,	31}	/* WQEOUT_DBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44120,	0,	CVMX_ERROR_GROUP_INTERNAL,	32}	/* SWS_SBE */,
+	{ 0x1180044000048ull,	"Error: CVMX_PKI_ECC_INT1[%llx][%u]",	0x44121,	0,	CVMX_ERROR_GROUP_INTERNAL,	33}	/* SWS_DBE */,
+	{ 0x1180044000050ull,	"Error: CVMX_PKI_ECC_INT2[%llx][%u]",	0x44200,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* IMEM_SBE */,
+	{ 0x1180044000050ull,	"Error: CVMX_PKI_ECC_INT2[%llx][%u]",	0x44201,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* IMEM_DBE */,
+	{ 0x118004400c000ull,	"Error: CVMX_PKI_CL0_INT[%llx][%u]",	0x44800,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* PCAM_CONF<0> */,
+	{ 0x118004400c000ull,	"Error: CVMX_PKI_CL0_INT[%llx][%u]",	0x44801,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* PCAM_CONF<1> */,
+	{ 0x118004400c000ull,	"Error: CVMX_PKI_CL0_INT[%llx][%u]",	0x44802,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* SCHED_CONF */,
+	{ 0x118004400c000ull,	"Error: CVMX_PKI_CL0_INT[%llx][%u]",	0x44803,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* IPTINT */,
+	{ 0x118004400c010ull,	"Error: CVMX_PKI_CL0_ECC_INT[%llx][%u]",	0x44840,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* RF_PERR */,
+	{ 0x118004400c010ull,	"Error: CVMX_PKI_CL0_ECC_INT[%llx][%u]",	0x44841,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* DMEM_PERR */,
+	{ 0x118004400c010ull,	"Error: CVMX_PKI_CL0_ECC_INT[%llx][%u]",	0x44842,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* SMEM_SBE */,
+	{ 0x118004400c010ull,	"Error: CVMX_PKI_CL0_ECC_INT[%llx][%u]",	0x44843,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* SMEM_DBE */,
+	{ 0x118004400c010ull,	"Error: CVMX_PKI_CL0_ECC_INT[%llx][%u]",	0x44844,	0,	CVMX_ERROR_GROUP_INTERNAL,	4}	/* PCAM0_SBE */,
+	{ 0x118004400c010ull,	"Error: CVMX_PKI_CL0_ECC_INT[%llx][%u]",	0x44845,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* PCAM0_DBE */,
+	{ 0x118004400c010ull,	"Error: CVMX_PKI_CL0_ECC_INT[%llx][%u]",	0x44846,	0,	CVMX_ERROR_GROUP_INTERNAL,	6}	/* PCAM1_SBE */,
+	{ 0x118004400c010ull,	"Error: CVMX_PKI_CL0_ECC_INT[%llx][%u]",	0x44847,	0,	CVMX_ERROR_GROUP_INTERNAL,	7}	/* PCAM1_DBE */,
+	{ 0x118004401c000ull,	"Error: CVMX_PKI_CL1_INT[%llx][%u]",	0x44900,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* PCAM_CONF<0> */,
+	{ 0x118004401c000ull,	"Error: CVMX_PKI_CL1_INT[%llx][%u]",	0x44901,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* PCAM_CONF<1> */,
+	{ 0x118004401c000ull,	"Error: CVMX_PKI_CL1_INT[%llx][%u]",	0x44902,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* SCHED_CONF */,
+	{ 0x118004401c000ull,	"Error: CVMX_PKI_CL1_INT[%llx][%u]",	0x44903,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* IPTINT */,
+	{ 0x118004401c010ull,	"Error: CVMX_PKI_CL1_ECC_INT[%llx][%u]",	0x44940,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* RF_PERR */,
+	{ 0x118004401c010ull,	"Error: CVMX_PKI_CL1_ECC_INT[%llx][%u]",	0x44941,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* DMEM_PERR */,
+	{ 0x118004401c010ull,	"Error: CVMX_PKI_CL1_ECC_INT[%llx][%u]",	0x44942,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* SMEM_SBE */,
+	{ 0x118004401c010ull,	"Error: CVMX_PKI_CL1_ECC_INT[%llx][%u]",	0x44943,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* SMEM_DBE */,
+	{ 0x118004401c010ull,	"Error: CVMX_PKI_CL1_ECC_INT[%llx][%u]",	0x44944,	0,	CVMX_ERROR_GROUP_INTERNAL,	4}	/* PCAM0_SBE */,
+	{ 0x118004401c010ull,	"Error: CVMX_PKI_CL1_ECC_INT[%llx][%u]",	0x44945,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* PCAM0_DBE */,
+	{ 0x118004401c010ull,	"Error: CVMX_PKI_CL1_ECC_INT[%llx][%u]",	0x44946,	0,	CVMX_ERROR_GROUP_INTERNAL,	6}	/* PCAM1_SBE */,
+	{ 0x118004401c010ull,	"Error: CVMX_PKI_CL1_ECC_INT[%llx][%u]",	0x44947,	0,	CVMX_ERROR_GROUP_INTERNAL,	7}	/* PCAM1_DBE */,
+	{ 0x1540000900c00ull,	"Error: CVMX_PKO_PEB_ERR_INT[%llx][%u]",	0x50030,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* PEB_EXT_HDR_DEF_ERR */,
+	{ 0x1540000900c00ull,	"Error: CVMX_PKO_PEB_ERR_INT[%llx][%u]",	0x50031,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* PEB_JUMP_DEF_ERR */,
+	{ 0x1540000900c00ull,	"Error: CVMX_PKO_PEB_ERR_INT[%llx][%u]",	0x50032,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* PEB_FCS_SOP_ERR */,
+	{ 0x1540000900c00ull,	"Error: CVMX_PKO_PEB_ERR_INT[%llx][%u]",	0x50033,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* PEB_PSE_FIFO_ERR */,
+	{ 0x1540000900c00ull,	"Error: CVMX_PKO_PEB_ERR_INT[%llx][%u]",	0x50034,	0,	CVMX_ERROR_GROUP_INTERNAL,	4}	/* PEB_PAD_ERR */,
+	{ 0x1540000900c00ull,	"Error: CVMX_PKO_PEB_ERR_INT[%llx][%u]",	0x50035,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* PEB_TRUNC_ERR */,
+	{ 0x1540000900c00ull,	"Error: CVMX_PKO_PEB_ERR_INT[%llx][%u]",	0x50036,	0,	CVMX_ERROR_GROUP_INTERNAL,	6}	/* PEB_SUBD_ADDR_ERR */,
+	{ 0x1540000900c00ull,	"Error: CVMX_PKO_PEB_ERR_INT[%llx][%u]",	0x50037,	0,	CVMX_ERROR_GROUP_INTERNAL,	7}	/* PEB_SUBD_SIZE_ERR */,
+	{ 0x1540000900c00ull,	"Error: CVMX_PKO_PEB_ERR_INT[%llx][%u]",	0x50038,	0,	CVMX_ERROR_GROUP_INTERNAL,	8}	/* PEB_MAX_LINK_ERR */,
+	{ 0x1540000900c00ull,	"Error: CVMX_PKO_PEB_ERR_INT[%llx][%u]",	0x50039,	0,	CVMX_ERROR_GROUP_INTERNAL,	9}	/* PEB_MACX_CFG_WR_ERR */,
+	{ 0x1540000e00010ull,	"Error: CVMX_PKO_NCB_INT[%llx][%u]",	0x500fb,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* NCB_TX_ERROR */,
+	{ 0x1180058000060ull,	"Error: CVMX_TIM_INT_ECCERR[%llx][%u]",	0x58040,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* SBE */,
+	{ 0x1180058000060ull,	"Error: CVMX_TIM_INT_ECCERR[%llx][%u]",	0x58041,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* DBE */,
+	{ 0x1180058000060ull,	"Error: CVMX_TIM_INT_ECCERR[%llx][%u]",	0x58042,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* CTL_SBE */,
+	{ 0x1180058000060ull,	"Error: CVMX_TIM_INT_ECCERR[%llx][%u]",	0x58043,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* CTL_DBE */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58080,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<0> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58081,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<1> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58082,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<2> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58083,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<3> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58084,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<4> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58085,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<5> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58086,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<6> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58087,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<7> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58088,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<8> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58089,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<9> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5808a,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<10> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5808b,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<11> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5808c,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<12> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5808d,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<13> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5808e,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<14> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5808f,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<15> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58090,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<16> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58091,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<17> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58092,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<18> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58093,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<19> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58094,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<20> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58095,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<21> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58096,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<22> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58097,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<23> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58098,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<24> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x58099,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<25> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5809a,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<26> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5809b,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<27> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5809c,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<28> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5809d,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<29> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5809e,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<30> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x5809f,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<31> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580a0,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<32> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580a1,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<33> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580a2,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<34> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580a3,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<35> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580a4,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<36> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580a5,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<37> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580a6,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<38> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580a7,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<39> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580a8,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<40> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580a9,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<41> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580aa,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<42> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580ab,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<43> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580ac,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<44> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580ad,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<45> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580ae,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<46> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580af,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<47> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580b0,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<48> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580b1,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<49> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580b2,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<50> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580b3,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<51> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580b4,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<52> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580b5,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<53> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580b6,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<54> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580b7,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<55> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580b8,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<56> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580b9,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<57> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580ba,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<58> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580bb,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<59> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580bc,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<60> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580bd,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<61> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580be,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<62> */,
+	{ 0x1180058000030ull,	"Error: CVMX_TIM_INT0[%llx][%u]",	0x580bf,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* INT0<63> */,
+	{ 0x1670020000400ull,	"Error: CVMX_SSO_GRP0_INT[%llx][%u]",	0x60000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020010400ull,	"Error: CVMX_SSO_GRP1_INT[%llx][%u]",	0x60001,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020020400ull,	"Error: CVMX_SSO_GRP2_INT[%llx][%u]",	0x60002,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020030400ull,	"Error: CVMX_SSO_GRP3_INT[%llx][%u]",	0x60003,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020040400ull,	"Error: CVMX_SSO_GRP4_INT[%llx][%u]",	0x60004,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020050400ull,	"Error: CVMX_SSO_GRP5_INT[%llx][%u]",	0x60005,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020060400ull,	"Error: CVMX_SSO_GRP6_INT[%llx][%u]",	0x60006,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020070400ull,	"Error: CVMX_SSO_GRP7_INT[%llx][%u]",	0x60007,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020080400ull,	"Error: CVMX_SSO_GRP8_INT[%llx][%u]",	0x60008,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020090400ull,	"Error: CVMX_SSO_GRP9_INT[%llx][%u]",	0x60009,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700200a0400ull,	"Error: CVMX_SSO_GRP10_INT[%llx][%u]",	0x6000a,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700200b0400ull,	"Error: CVMX_SSO_GRP11_INT[%llx][%u]",	0x6000b,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700200c0400ull,	"Error: CVMX_SSO_GRP12_INT[%llx][%u]",	0x6000c,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700200d0400ull,	"Error: CVMX_SSO_GRP13_INT[%llx][%u]",	0x6000d,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700200e0400ull,	"Error: CVMX_SSO_GRP14_INT[%llx][%u]",	0x6000e,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700200f0400ull,	"Error: CVMX_SSO_GRP15_INT[%llx][%u]",	0x6000f,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020100400ull,	"Error: CVMX_SSO_GRP16_INT[%llx][%u]",	0x60010,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020110400ull,	"Error: CVMX_SSO_GRP17_INT[%llx][%u]",	0x60011,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020120400ull,	"Error: CVMX_SSO_GRP18_INT[%llx][%u]",	0x60012,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020130400ull,	"Error: CVMX_SSO_GRP19_INT[%llx][%u]",	0x60013,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020140400ull,	"Error: CVMX_SSO_GRP20_INT[%llx][%u]",	0x60014,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020150400ull,	"Error: CVMX_SSO_GRP21_INT[%llx][%u]",	0x60015,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020160400ull,	"Error: CVMX_SSO_GRP22_INT[%llx][%u]",	0x60016,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020170400ull,	"Error: CVMX_SSO_GRP23_INT[%llx][%u]",	0x60017,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020180400ull,	"Error: CVMX_SSO_GRP24_INT[%llx][%u]",	0x60018,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020190400ull,	"Error: CVMX_SSO_GRP25_INT[%llx][%u]",	0x60019,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700201a0400ull,	"Error: CVMX_SSO_GRP26_INT[%llx][%u]",	0x6001a,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700201b0400ull,	"Error: CVMX_SSO_GRP27_INT[%llx][%u]",	0x6001b,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700201c0400ull,	"Error: CVMX_SSO_GRP28_INT[%llx][%u]",	0x6001c,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700201d0400ull,	"Error: CVMX_SSO_GRP29_INT[%llx][%u]",	0x6001d,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700201e0400ull,	"Error: CVMX_SSO_GRP30_INT[%llx][%u]",	0x6001e,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700201f0400ull,	"Error: CVMX_SSO_GRP31_INT[%llx][%u]",	0x6001f,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020200400ull,	"Error: CVMX_SSO_GRP32_INT[%llx][%u]",	0x60020,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020210400ull,	"Error: CVMX_SSO_GRP33_INT[%llx][%u]",	0x60021,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020220400ull,	"Error: CVMX_SSO_GRP34_INT[%llx][%u]",	0x60022,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020230400ull,	"Error: CVMX_SSO_GRP35_INT[%llx][%u]",	0x60023,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020240400ull,	"Error: CVMX_SSO_GRP36_INT[%llx][%u]",	0x60024,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020250400ull,	"Error: CVMX_SSO_GRP37_INT[%llx][%u]",	0x60025,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020260400ull,	"Error: CVMX_SSO_GRP38_INT[%llx][%u]",	0x60026,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020270400ull,	"Error: CVMX_SSO_GRP39_INT[%llx][%u]",	0x60027,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020280400ull,	"Error: CVMX_SSO_GRP40_INT[%llx][%u]",	0x60028,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020290400ull,	"Error: CVMX_SSO_GRP41_INT[%llx][%u]",	0x60029,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700202a0400ull,	"Error: CVMX_SSO_GRP42_INT[%llx][%u]",	0x6002a,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700202b0400ull,	"Error: CVMX_SSO_GRP43_INT[%llx][%u]",	0x6002b,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700202c0400ull,	"Error: CVMX_SSO_GRP44_INT[%llx][%u]",	0x6002c,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700202d0400ull,	"Error: CVMX_SSO_GRP45_INT[%llx][%u]",	0x6002d,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700202e0400ull,	"Error: CVMX_SSO_GRP46_INT[%llx][%u]",	0x6002e,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700202f0400ull,	"Error: CVMX_SSO_GRP47_INT[%llx][%u]",	0x6002f,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020300400ull,	"Error: CVMX_SSO_GRP48_INT[%llx][%u]",	0x60030,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020310400ull,	"Error: CVMX_SSO_GRP49_INT[%llx][%u]",	0x60031,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020320400ull,	"Error: CVMX_SSO_GRP50_INT[%llx][%u]",	0x60032,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020330400ull,	"Error: CVMX_SSO_GRP51_INT[%llx][%u]",	0x60033,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020340400ull,	"Error: CVMX_SSO_GRP52_INT[%llx][%u]",	0x60034,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020350400ull,	"Error: CVMX_SSO_GRP53_INT[%llx][%u]",	0x60035,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020360400ull,	"Error: CVMX_SSO_GRP54_INT[%llx][%u]",	0x60036,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020370400ull,	"Error: CVMX_SSO_GRP55_INT[%llx][%u]",	0x60037,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020380400ull,	"Error: CVMX_SSO_GRP56_INT[%llx][%u]",	0x60038,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670020390400ull,	"Error: CVMX_SSO_GRP57_INT[%llx][%u]",	0x60039,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700203a0400ull,	"Error: CVMX_SSO_GRP58_INT[%llx][%u]",	0x6003a,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700203b0400ull,	"Error: CVMX_SSO_GRP59_INT[%llx][%u]",	0x6003b,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700203c0400ull,	"Error: CVMX_SSO_GRP60_INT[%llx][%u]",	0x6003c,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700203d0400ull,	"Error: CVMX_SSO_GRP61_INT[%llx][%u]",	0x6003d,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700203e0400ull,	"Error: CVMX_SSO_GRP62_INT[%llx][%u]",	0x6003e,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x16700203f0400ull,	"Error: CVMX_SSO_GRP63_INT[%llx][%u]",	0x6003f,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* AQ_INT */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* FPE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67001,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* AWE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67002,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* BFP */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67003,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* GRPDIS */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67004,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* AWEMPTY */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67005,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* ADDWQ_DROPPED */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67020,	0,	CVMX_ERROR_GROUP_INTERNAL,	32}	/* WES_SBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67021,	0,	CVMX_ERROR_GROUP_INTERNAL,	33}	/* WES_DBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67022,	0,	CVMX_ERROR_GROUP_INTERNAL,	34}	/* FFF_SBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67023,	0,	CVMX_ERROR_GROUP_INTERNAL,	35}	/* FFF_DBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67024,	0,	CVMX_ERROR_GROUP_INTERNAL,	36}	/* XAQ_SBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67025,	0,	CVMX_ERROR_GROUP_INTERNAL,	37}	/* XAQ_DBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67026,	0,	CVMX_ERROR_GROUP_INTERNAL,	38}	/* QTC_SBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67027,	0,	CVMX_ERROR_GROUP_INTERNAL,	39}	/* QTC_DBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67028,	0,	CVMX_ERROR_GROUP_INTERNAL,	40}	/* INP_SBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67029,	0,	CVMX_ERROR_GROUP_INTERNAL,	41}	/* INP_DBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x6702a,	0,	CVMX_ERROR_GROUP_INTERNAL,	42}	/* LLM_SBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x6702b,	0,	CVMX_ERROR_GROUP_INTERNAL,	43}	/* LLM_DBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x6702c,	0,	CVMX_ERROR_GROUP_INTERNAL,	44}	/* TIAQH_SBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x6702d,	0,	CVMX_ERROR_GROUP_INTERNAL,	45}	/* TIAQH_DBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x6702e,	0,	CVMX_ERROR_GROUP_INTERNAL,	46}	/* TIAQT_SBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x6702f,	0,	CVMX_ERROR_GROUP_INTERNAL,	47}	/* TIAQT_DBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67030,	0,	CVMX_ERROR_GROUP_INTERNAL,	48}	/* TOAQH_SBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67031,	0,	CVMX_ERROR_GROUP_INTERNAL,	49}	/* TOAQH_DBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67032,	0,	CVMX_ERROR_GROUP_INTERNAL,	50}	/* TOAQT_SBE */,
+	{ 0x1670000001240ull,	"Error: CVMX_SSO_ERR0[%llx][%u]",	0x67033,	0,	CVMX_ERROR_GROUP_INTERNAL,	51}	/* TOAQT_DBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x67100,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* CNTR_SBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x67101,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* CNTR_DBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x67102,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* HPTR_SBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x67103,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* HPTR_DBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x67104,	0,	CVMX_ERROR_GROUP_INTERNAL,	4}	/* TPTR_SBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x67105,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* TPTR_DBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x67106,	0,	CVMX_ERROR_GROUP_INTERNAL,	6}	/* QIDX_SBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x67107,	0,	CVMX_ERROR_GROUP_INTERNAL,	7}	/* QIDX_DBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x67108,	0,	CVMX_ERROR_GROUP_INTERNAL,	8}	/* GDW_SBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x67109,	0,	CVMX_ERROR_GROUP_INTERNAL,	9}	/* GDW_DBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x6710a,	0,	CVMX_ERROR_GROUP_INTERNAL,	10}	/* MASK_SBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x6710b,	0,	CVMX_ERROR_GROUP_INTERNAL,	11}	/* MASK_DBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x6710c,	0,	CVMX_ERROR_GROUP_INTERNAL,	12}	/* THRINT_SBE */,
+	{ 0x1670000001248ull,	"Error: CVMX_SSO_ERR1[%llx][%u]",	0x6710d,	0,	CVMX_ERROR_GROUP_INTERNAL,	13}	/* THRINT_DBE */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67200,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* IOP<0> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67201,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* IOP<1> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67202,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* IOP<2> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67203,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* IOP<3> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67204,	0,	CVMX_ERROR_GROUP_INTERNAL,	4}	/* IOP<4> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67205,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* IOP<5> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67206,	0,	CVMX_ERROR_GROUP_INTERNAL,	6}	/* IOP<6> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67207,	0,	CVMX_ERROR_GROUP_INTERNAL,	7}	/* IOP<7> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67208,	0,	CVMX_ERROR_GROUP_INTERNAL,	8}	/* IOP<8> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67209,	0,	CVMX_ERROR_GROUP_INTERNAL,	9}	/* IOP<9> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x6720a,	0,	CVMX_ERROR_GROUP_INTERNAL,	10}	/* IOP<10> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x6720b,	0,	CVMX_ERROR_GROUP_INTERNAL,	11}	/* IOP<11> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x6720c,	0,	CVMX_ERROR_GROUP_INTERNAL,	12}	/* IOP<12> */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67220,	0,	CVMX_ERROR_GROUP_INTERNAL,	32}	/* PIDX_SBE */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67221,	0,	CVMX_ERROR_GROUP_INTERNAL,	33}	/* PIDX_DBE */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67222,	0,	CVMX_ERROR_GROUP_INTERNAL,	34}	/* NIDX_SBE */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67223,	0,	CVMX_ERROR_GROUP_INTERNAL,	35}	/* NIDX_DBE */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67224,	0,	CVMX_ERROR_GROUP_INTERNAL,	36}	/* OTH_SBE */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67225,	0,	CVMX_ERROR_GROUP_INTERNAL,	37}	/* OTH_DBE */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67226,	0,	CVMX_ERROR_GROUP_INTERNAL,	38}	/* PND_SBE */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67227,	0,	CVMX_ERROR_GROUP_INTERNAL,	39}	/* PND_DBE */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67228,	0,	CVMX_ERROR_GROUP_INTERNAL,	40}	/* NCBO_SBE */,
+	{ 0x1670000001250ull,	"Error: CVMX_SSO_ERR2[%llx][%u]",	0x67229,	0,	CVMX_ERROR_GROUP_INTERNAL,	41}	/* NCBO_DBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80000,	0,	CVMX_ERROR_GROUP_L2C,	0}	/* L2DSBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80001,	0,	CVMX_ERROR_GROUP_L2C,	1}	/* L2DDBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80002,	0,	CVMX_ERROR_GROUP_L2C,	2}	/* SBFSBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80003,	0,	CVMX_ERROR_GROUP_L2C,	3}	/* SBFDBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80004,	0,	CVMX_ERROR_GROUP_L2C,	4}	/* FBFSBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80005,	0,	CVMX_ERROR_GROUP_L2C,	5}	/* FBFDBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80006,	0,	CVMX_ERROR_GROUP_L2C,	8}	/* TAGSBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80007,	0,	CVMX_ERROR_GROUP_L2C,	9}	/* TAGDBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80008,	0,	CVMX_ERROR_GROUP_L2C,	10}	/* NOWAY */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x8000b,	0,	CVMX_ERROR_GROUP_L2C,	13}	/* BIGWR */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x8000c,	0,	CVMX_ERROR_GROUP_L2C,	14}	/* BIGRD */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x8000d,	0,	CVMX_ERROR_GROUP_L2C,	16}	/* WRDISLMC */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x8000e,	0,	CVMX_ERROR_GROUP_L2C,	15}	/* RDDISLMC */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x8000f,	0,	CVMX_ERROR_GROUP_L2C,	32}	/* RTGSBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80010,	0,	CVMX_ERROR_GROUP_L2C,	33}	/* RTGDBE */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80011,	0,	CVMX_ERROR_GROUP_L2C,	35}	/* WRDISOCI */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80012,	0,	CVMX_ERROR_GROUP_L2C,	34}	/* RDDISOCI */,
+	{ 0x1180080a00028ull,	"Error: CVMX_L2C_TAD0_INT[%llx][%u]",	0x80013,	0,	CVMX_ERROR_GROUP_L2C,	17}	/* LFBTO */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80100,	0,	CVMX_ERROR_GROUP_L2C,	0}	/* L2DSBE */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80101,	0,	CVMX_ERROR_GROUP_L2C,	1}	/* L2DDBE */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80102,	0,	CVMX_ERROR_GROUP_L2C,	2}	/* SBFSBE */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80103,	0,	CVMX_ERROR_GROUP_L2C,	3}	/* SBFDBE */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80104,	0,	CVMX_ERROR_GROUP_L2C,	4}	/* FBFSBE */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80105,	0,	CVMX_ERROR_GROUP_L2C,	5}	/* FBFDBE */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80106,	0,	CVMX_ERROR_GROUP_L2C,	8}	/* TAGSBE */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80107,	0,	CVMX_ERROR_GROUP_L2C,	9}	/* TAGDBE */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80108,	0,	CVMX_ERROR_GROUP_L2C,	10}	/* NOWAY */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x8010b,	0,	CVMX_ERROR_GROUP_L2C,	13}	/* BIGWR */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x8010c,	0,	CVMX_ERROR_GROUP_L2C,	14}	/* BIGRD */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x8010d,	0,	CVMX_ERROR_GROUP_L2C,	16}	/* WRDISLMC */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x8010e,	0,	CVMX_ERROR_GROUP_L2C,	15}	/* RDDISLMC */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x8010f,	0,	CVMX_ERROR_GROUP_L2C,	32}	/* RTGSBE */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80110,	0,	CVMX_ERROR_GROUP_L2C,	33}	/* RTGDBE */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80111,	0,	CVMX_ERROR_GROUP_L2C,	35}	/* WRDISOCI */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80112,	0,	CVMX_ERROR_GROUP_L2C,	34}	/* RDDISOCI */,
+	{ 0x1180080a40028ull,	"Error: CVMX_L2C_TAD1_INT[%llx][%u]",	0x80113,	0,	CVMX_ERROR_GROUP_L2C,	17}	/* LFBTO */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80200,	0,	CVMX_ERROR_GROUP_L2C,	0}	/* L2DSBE */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80201,	0,	CVMX_ERROR_GROUP_L2C,	1}	/* L2DDBE */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80202,	0,	CVMX_ERROR_GROUP_L2C,	2}	/* SBFSBE */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80203,	0,	CVMX_ERROR_GROUP_L2C,	3}	/* SBFDBE */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80204,	0,	CVMX_ERROR_GROUP_L2C,	4}	/* FBFSBE */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80205,	0,	CVMX_ERROR_GROUP_L2C,	5}	/* FBFDBE */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80206,	0,	CVMX_ERROR_GROUP_L2C,	8}	/* TAGSBE */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80207,	0,	CVMX_ERROR_GROUP_L2C,	9}	/* TAGDBE */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80208,	0,	CVMX_ERROR_GROUP_L2C,	10}	/* NOWAY */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x8020b,	0,	CVMX_ERROR_GROUP_L2C,	13}	/* BIGWR */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x8020c,	0,	CVMX_ERROR_GROUP_L2C,	14}	/* BIGRD */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x8020d,	0,	CVMX_ERROR_GROUP_L2C,	16}	/* WRDISLMC */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x8020e,	0,	CVMX_ERROR_GROUP_L2C,	15}	/* RDDISLMC */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x8020f,	0,	CVMX_ERROR_GROUP_L2C,	32}	/* RTGSBE */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80210,	0,	CVMX_ERROR_GROUP_L2C,	33}	/* RTGDBE */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80211,	0,	CVMX_ERROR_GROUP_L2C,	35}	/* WRDISOCI */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80212,	0,	CVMX_ERROR_GROUP_L2C,	34}	/* RDDISOCI */,
+	{ 0x1180080a80028ull,	"Error: CVMX_L2C_TAD2_INT[%llx][%u]",	0x80213,	0,	CVMX_ERROR_GROUP_L2C,	17}	/* LFBTO */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80300,	0,	CVMX_ERROR_GROUP_L2C,	0}	/* L2DSBE */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80301,	0,	CVMX_ERROR_GROUP_L2C,	1}	/* L2DDBE */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80302,	0,	CVMX_ERROR_GROUP_L2C,	2}	/* SBFSBE */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80303,	0,	CVMX_ERROR_GROUP_L2C,	3}	/* SBFDBE */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80304,	0,	CVMX_ERROR_GROUP_L2C,	4}	/* FBFSBE */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80305,	0,	CVMX_ERROR_GROUP_L2C,	5}	/* FBFDBE */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80306,	0,	CVMX_ERROR_GROUP_L2C,	8}	/* TAGSBE */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80307,	0,	CVMX_ERROR_GROUP_L2C,	9}	/* TAGDBE */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80308,	0,	CVMX_ERROR_GROUP_L2C,	10}	/* NOWAY */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x8030b,	0,	CVMX_ERROR_GROUP_L2C,	13}	/* BIGWR */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x8030c,	0,	CVMX_ERROR_GROUP_L2C,	14}	/* BIGRD */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x8030d,	0,	CVMX_ERROR_GROUP_L2C,	16}	/* WRDISLMC */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x8030e,	0,	CVMX_ERROR_GROUP_L2C,	15}	/* RDDISLMC */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x8030f,	0,	CVMX_ERROR_GROUP_L2C,	32}	/* RTGSBE */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80310,	0,	CVMX_ERROR_GROUP_L2C,	33}	/* RTGDBE */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80311,	0,	CVMX_ERROR_GROUP_L2C,	35}	/* WRDISOCI */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80312,	0,	CVMX_ERROR_GROUP_L2C,	34}	/* RDDISOCI */,
+	{ 0x1180080ac0028ull,	"Error: CVMX_L2C_TAD3_INT[%llx][%u]",	0x80313,	0,	CVMX_ERROR_GROUP_L2C,	17}	/* LFBTO */,
+	{ 0x1180080c00028ull,	"Error: CVMX_L2C_MCI0_INT[%llx][%u]",	0x80800,	0,	CVMX_ERROR_GROUP_L2C,	0}	/* VBFSBE */,
+	{ 0x1180080c00028ull,	"Error: CVMX_L2C_MCI0_INT[%llx][%u]",	0x80801,	0,	CVMX_ERROR_GROUP_L2C,	1}	/* VBFDBE */,
+	{ 0x1180080c40028ull,	"Error: CVMX_L2C_MCI1_INT[%llx][%u]",	0x80900,	0,	CVMX_ERROR_GROUP_L2C,	0}	/* VBFSBE */,
+	{ 0x1180080c40028ull,	"Error: CVMX_L2C_MCI1_INT[%llx][%u]",	0x80901,	0,	CVMX_ERROR_GROUP_L2C,	1}	/* VBFDBE */,
+	{ 0x1180080e00028ull,	"Error: CVMX_L2C_CBC0_INT[%llx][%u]",	0x80c00,	0,	CVMX_ERROR_GROUP_L2C,	0}	/* RSDSBE */,
+	{ 0x1180080e00028ull,	"Error: CVMX_L2C_CBC0_INT[%llx][%u]",	0x80c01,	0,	CVMX_ERROR_GROUP_L2C,	1}	/* RSDDBE */,
+	{ 0x1180080e00028ull,	"Error: CVMX_L2C_CBC0_INT[%llx][%u]",	0x80c04,	0,	CVMX_ERROR_GROUP_L2C,	4}	/* MIBSBE */,
+	{ 0x1180080e00028ull,	"Error: CVMX_L2C_CBC0_INT[%llx][%u]",	0x80c05,	0,	CVMX_ERROR_GROUP_L2C,	5}	/* MIBDBE */,
+	{ 0x1180080e00028ull,	"Error: CVMX_L2C_CBC0_INT[%llx][%u]",	0x80c06,	0,	CVMX_ERROR_GROUP_L2C,	7}	/* IOWRDISOCI */,
+	{ 0x1180080e00028ull,	"Error: CVMX_L2C_CBC0_INT[%llx][%u]",	0x80c07,	0,	CVMX_ERROR_GROUP_L2C,	6}	/* IORDDISOCI */,
+	{ 0x1180080e00028ull,	"Error: CVMX_L2C_CBC0_INT[%llx][%u]",	0x80c08,	0,	CVMX_ERROR_GROUP_L2C,	8}	/* HOLEWR */,
+	{ 0x1180080e00028ull,	"Error: CVMX_L2C_CBC0_INT[%llx][%u]",	0x80c09,	0,	CVMX_ERROR_GROUP_L2C,	9}	/* HOLERD */,
+	{ 0x1180080e40028ull,	"Error: CVMX_L2C_CBC1_INT[%llx][%u]",	0x80d00,	0,	CVMX_ERROR_GROUP_L2C,	0}	/* RSDSBE */,
+	{ 0x1180080e40028ull,	"Error: CVMX_L2C_CBC1_INT[%llx][%u]",	0x80d01,	0,	CVMX_ERROR_GROUP_L2C,	1}	/* RSDDBE */,
+	{ 0x1180080e40028ull,	"Error: CVMX_L2C_CBC1_INT[%llx][%u]",	0x80d04,	0,	CVMX_ERROR_GROUP_L2C,	4}	/* MIBSBE */,
+	{ 0x1180080e40028ull,	"Error: CVMX_L2C_CBC1_INT[%llx][%u]",	0x80d05,	0,	CVMX_ERROR_GROUP_L2C,	5}	/* MIBDBE */,
+	{ 0x1180080e40028ull,	"Error: CVMX_L2C_CBC1_INT[%llx][%u]",	0x80d06,	0,	CVMX_ERROR_GROUP_L2C,	7}	/* IOWRDISOCI */,
+	{ 0x1180080e40028ull,	"Error: CVMX_L2C_CBC1_INT[%llx][%u]",	0x80d07,	0,	CVMX_ERROR_GROUP_L2C,	6}	/* IORDDISOCI */,
+	{ 0x1180080e40028ull,	"Error: CVMX_L2C_CBC1_INT[%llx][%u]",	0x80d08,	0,	CVMX_ERROR_GROUP_L2C,	8}	/* HOLEWR */,
+	{ 0x1180080e40028ull,	"Error: CVMX_L2C_CBC1_INT[%llx][%u]",	0x80d09,	0,	CVMX_ERROR_GROUP_L2C,	9}	/* HOLERD */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x88000,	0,	CVMX_ERROR_GROUP_LMC,	0}	/* NXM_WR_ERR */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x88001,	0,	CVMX_ERROR_GROUP_LMC,	1}	/* SEC_ERR<0> */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x88002,	0,	CVMX_ERROR_GROUP_LMC,	2}	/* SEC_ERR<1> */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x88003,	0,	CVMX_ERROR_GROUP_LMC,	3}	/* SEC_ERR<2> */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x88004,	0,	CVMX_ERROR_GROUP_LMC,	4}	/* SEC_ERR<3> */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x88005,	0,	CVMX_ERROR_GROUP_LMC,	5}	/* DED_ERR<0> */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x88006,	0,	CVMX_ERROR_GROUP_LMC,	6}	/* DED_ERR<1> */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x88007,	0,	CVMX_ERROR_GROUP_LMC,	7}	/* DED_ERR<2> */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x88008,	0,	CVMX_ERROR_GROUP_LMC,	8}	/* DED_ERR<3> */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x88009,	0,	CVMX_ERROR_GROUP_LMC,	9}	/* DLCRAM_SEC_ERR */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x8800a,	0,	CVMX_ERROR_GROUP_LMC,	10}	/* DLCRAM_DED_ERR */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x8800b,	0,	CVMX_ERROR_GROUP_LMC,	11}	/* DDR_ERR */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x8800c,	0,	CVMX_ERROR_GROUP_LMC,	12}	/* MACRAM_SEC_ERR */,
+	{ 0x11800880001f0ull,	"Error: CVMX_LMC0_INT[%llx][%u]",	0x8800d,	0,	CVMX_ERROR_GROUP_LMC,	13}	/* MACRAM_DED_ERR */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x89000,	0,	CVMX_ERROR_GROUP_LMC,	0}	/* NXM_WR_ERR */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x89001,	0,	CVMX_ERROR_GROUP_LMC,	1}	/* SEC_ERR<0> */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x89002,	0,	CVMX_ERROR_GROUP_LMC,	2}	/* SEC_ERR<1> */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x89003,	0,	CVMX_ERROR_GROUP_LMC,	3}	/* SEC_ERR<2> */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x89004,	0,	CVMX_ERROR_GROUP_LMC,	4}	/* SEC_ERR<3> */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x89005,	0,	CVMX_ERROR_GROUP_LMC,	5}	/* DED_ERR<0> */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x89006,	0,	CVMX_ERROR_GROUP_LMC,	6}	/* DED_ERR<1> */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x89007,	0,	CVMX_ERROR_GROUP_LMC,	7}	/* DED_ERR<2> */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x89008,	0,	CVMX_ERROR_GROUP_LMC,	8}	/* DED_ERR<3> */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x89009,	0,	CVMX_ERROR_GROUP_LMC,	9}	/* DLCRAM_SEC_ERR */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x8900a,	0,	CVMX_ERROR_GROUP_LMC,	10}	/* DLCRAM_DED_ERR */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x8900b,	0,	CVMX_ERROR_GROUP_LMC,	11}	/* DDR_ERR */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x8900c,	0,	CVMX_ERROR_GROUP_LMC,	12}	/* MACRAM_SEC_ERR */,
+	{ 0x11800890001f0ull,	"Error: CVMX_LMC1_INT[%llx][%u]",	0x8900d,	0,	CVMX_ERROR_GROUP_LMC,	13}	/* MACRAM_DED_ERR */,
+	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc0001,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* SE */,
+	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc0004,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* UP_B1 */,
+	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc0005,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* UP_B2 */,
+	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc0006,	0,	CVMX_ERROR_GROUP_PCI,	6}	/* UP_BX */,
+	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc0007,	0,	CVMX_ERROR_GROUP_PCI,	7}	/* UN_B1 */,
+	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc0008,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* UN_B2 */,
+	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc0009,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* UN_BX */,
+	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc000b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RDLK */,
+	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc000c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* CRS_ER */,
+	{ 0x11800c0000428ull,	"Error: CVMX_PEM0_INT_SUM[%llx][%u]",	0xc000d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* CRS_DR */,
+	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc1001,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* SE */,
+	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc1004,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* UP_B1 */,
+	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc1005,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* UP_B2 */,
+	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc1006,	0,	CVMX_ERROR_GROUP_PCI,	6}	/* UP_BX */,
+	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc1007,	0,	CVMX_ERROR_GROUP_PCI,	7}	/* UN_B1 */,
+	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc1008,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* UN_B2 */,
+	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc1009,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* UN_BX */,
+	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc100b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RDLK */,
+	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc100c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* CRS_ER */,
+	{ 0x11800c1000428ull,	"Error: CVMX_PEM1_INT_SUM[%llx][%u]",	0xc100d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* CRS_DR */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf000,	0,	CVMX_ERROR_GROUP_PCI,	0}	/* NDERR */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf001,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* NFOVR */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf008,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* DMADBO<0> */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf009,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* DMADBO<1> */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf00a,	0,	CVMX_ERROR_GROUP_PCI,	10}	/* DMADBO<2> */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf00b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* DMADBO<3> */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf00c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* DMADBO<4> */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf00d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* DMADBO<5> */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf00e,	0,	CVMX_ERROR_GROUP_PCI,	14}	/* DMADBO<6> */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf00f,	0,	CVMX_ERROR_GROUP_PCI,	15}	/* DMADBO<7> */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf010,	0,	CVMX_ERROR_GROUP_PCI,	16}	/* REQ_BADADR */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf011,	0,	CVMX_ERROR_GROUP_PCI,	17}	/* REQ_BADLEN */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf012,	0,	CVMX_ERROR_GROUP_PCI,	18}	/* REQ_OVRFLW */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf013,	0,	CVMX_ERROR_GROUP_PCI,	19}	/* REQ_UNDFLW */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf014,	0,	CVMX_ERROR_GROUP_PCI,	20}	/* REQ_ANULL */,
+	{ 0x1df0000000008ull,	"Error: CVMX_DPI_INT_REG[%llx][%u]",	0xdf016,	0,	CVMX_ERROR_GROUP_PCI,	22}	/* REQ_BADFIL */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf080,	0,	CVMX_ERROR_GROUP_PCI,	0}	/* RAM_DBE<0> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf081,	0,	CVMX_ERROR_GROUP_PCI,	1}	/* RAM_DBE<1> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf082,	0,	CVMX_ERROR_GROUP_PCI,	2}	/* RAM_DBE<2> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf083,	0,	CVMX_ERROR_GROUP_PCI,	3}	/* RAM_DBE<3> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf084,	0,	CVMX_ERROR_GROUP_PCI,	4}	/* RAM_DBE<4> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf085,	0,	CVMX_ERROR_GROUP_PCI,	5}	/* RAM_DBE<5> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf086,	0,	CVMX_ERROR_GROUP_PCI,	6}	/* RAM_DBE<6> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf087,	0,	CVMX_ERROR_GROUP_PCI,	7}	/* RAM_DBE<7> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf088,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* RAM_DBE<8> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf089,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* RAM_DBE<9> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf08a,	0,	CVMX_ERROR_GROUP_PCI,	10}	/* RAM_DBE<10> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf08b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* RAM_DBE<11> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf08c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* RAM_DBE<12> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf08d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* RAM_DBE<13> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf08e,	0,	CVMX_ERROR_GROUP_PCI,	14}	/* RAM_DBE<14> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0a0,	0,	CVMX_ERROR_GROUP_PCI,	32}	/* RAM_SBE<0> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0a1,	0,	CVMX_ERROR_GROUP_PCI,	33}	/* RAM_SBE<1> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0a2,	0,	CVMX_ERROR_GROUP_PCI,	34}	/* RAM_SBE<2> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0a3,	0,	CVMX_ERROR_GROUP_PCI,	35}	/* RAM_SBE<3> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0a4,	0,	CVMX_ERROR_GROUP_PCI,	36}	/* RAM_SBE<4> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0a5,	0,	CVMX_ERROR_GROUP_PCI,	37}	/* RAM_SBE<5> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0a6,	0,	CVMX_ERROR_GROUP_PCI,	38}	/* RAM_SBE<6> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0a7,	0,	CVMX_ERROR_GROUP_PCI,	39}	/* RAM_SBE<7> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0a8,	0,	CVMX_ERROR_GROUP_PCI,	40}	/* RAM_SBE<8> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0a9,	0,	CVMX_ERROR_GROUP_PCI,	41}	/* RAM_SBE<9> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0aa,	0,	CVMX_ERROR_GROUP_PCI,	42}	/* RAM_SBE<10> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0ab,	0,	CVMX_ERROR_GROUP_PCI,	43}	/* RAM_SBE<11> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0ac,	0,	CVMX_ERROR_GROUP_PCI,	44}	/* RAM_SBE<12> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0ad,	0,	CVMX_ERROR_GROUP_PCI,	45}	/* RAM_SBE<13> */,
+	{ 0x1df0000000020ull,	"Error: CVMX_DPI_ECC_INT[%llx][%u]",	0xdf0ae,	0,	CVMX_ERROR_GROUP_PCI,	46}	/* RAM_SBE<14> */,
+	{ 0x11800e0000020ull,	"Error: CVMX_BGX0_CMR000_INT[%llx][%u]",	0xe0000,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* PAUSE_DRP */,
+	{ 0x11800e0000020ull,	"Error: CVMX_BGX0_CMR000_INT[%llx][%u]",	0xe0001,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* OVERFLW */,
+	{ 0x11800e0000020ull,	"Error: CVMX_BGX0_CMR000_INT[%llx][%u]",	0xe0002,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* PKO_NXC */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0018,	0,	CVMX_ERROR_GROUP_ETHERNET,	17}	/* SMU_IN_OVERFL */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0019,	0,	CVMX_ERROR_GROUP_ETHERNET,	16}	/* GMP_IN_OVERFL */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0020,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* RXB_FIF_BK0_DBE0 */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0021,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* RXB_FIF_BK0_SBE0 */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0022,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* RXB_FIF_BK0_DBE1 */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0023,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* RXB_FIF_BK0_SBE1 */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0024,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* RXB_FIF_BK1_DBE0 */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0025,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* RXB_FIF_BK1_SBE0 */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0026,	0,	CVMX_ERROR_GROUP_ETHERNET,	6}	/* RXB_FIF_BK1_DBE1 */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0027,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* RXB_FIF_BK1_SBE1 */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0028,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* RXB_SKID_DBE */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe0029,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* RXB_SKID_SBE */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe002a,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* TXB_FIF_BK0_DBE */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe002b,	0,	CVMX_ERROR_GROUP_ETHERNET,	11}	/* TXB_FIF_BK0_SBE */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe002c,	0,	CVMX_ERROR_GROUP_ETHERNET,	12}	/* TXB_FIF_BK1_DBE */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe002d,	0,	CVMX_ERROR_GROUP_ETHERNET,	13}	/* TXB_FIF_BK1_SBE */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe002e,	0,	CVMX_ERROR_GROUP_ETHERNET,	14}	/* TXB_SKID_DBE */,
+	{ 0x11800e0000010ull,	"Error: CVMX_BGX0_CMR_MEM_INT[%llx][%u]",	0xe002f,	0,	CVMX_ERROR_GROUP_ETHERNET,	15}	/* TXB_SKID_SBE */,
+	{ 0x11800e0100020ull,	"Error: CVMX_BGX0_CMR001_INT[%llx][%u]",	0xe0040,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* PAUSE_DRP */,
+	{ 0x11800e0100020ull,	"Error: CVMX_BGX0_CMR001_INT[%llx][%u]",	0xe0041,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* OVERFLW */,
+	{ 0x11800e0100020ull,	"Error: CVMX_BGX0_CMR001_INT[%llx][%u]",	0xe0042,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* PKO_NXC */,
+	{ 0x11800e0200020ull,	"Error: CVMX_BGX0_CMR002_INT[%llx][%u]",	0xe0080,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* PAUSE_DRP */,
+	{ 0x11800e0200020ull,	"Error: CVMX_BGX0_CMR002_INT[%llx][%u]",	0xe0081,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* OVERFLW */,
+	{ 0x11800e0200020ull,	"Error: CVMX_BGX0_CMR002_INT[%llx][%u]",	0xe0082,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* PKO_NXC */,
+	{ 0x11800e0300020ull,	"Error: CVMX_BGX0_CMR003_INT[%llx][%u]",	0xe00c0,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* PAUSE_DRP */,
+	{ 0x11800e0300020ull,	"Error: CVMX_BGX0_CMR003_INT[%llx][%u]",	0xe00c1,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* OVERFLW */,
+	{ 0x11800e0300020ull,	"Error: CVMX_BGX0_CMR003_INT[%llx][%u]",	0xe00c2,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* PKO_NXC */,
+	{ 0x11800e0010220ull,	"Error: CVMX_BGX0_SPU000_INT[%llx][%u]",	0xe0102,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* ERR_BLK */,
+	{ 0x11800e0010220ull,	"Error: CVMX_BGX0_SPU000_INT[%llx][%u]",	0xe0103,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* BITLCKLS */,
+	{ 0x11800e0010220ull,	"Error: CVMX_BGX0_SPU000_INT[%llx][%u]",	0xe0104,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* SYNLOS */,
+	{ 0x11800e0010220ull,	"Error: CVMX_BGX0_SPU000_INT[%llx][%u]",	0xe0105,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* ALGNLOS */,
+	{ 0x11800e0010220ull,	"Error: CVMX_BGX0_SPU000_INT[%llx][%u]",	0xe0107,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* BIP_ERR */,
+	{ 0x11800e0010220ull,	"Error: CVMX_BGX0_SPU000_INT[%llx][%u]",	0xe0108,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* FEC_CORR */,
+	{ 0x11800e0010220ull,	"Error: CVMX_BGX0_SPU000_INT[%llx][%u]",	0xe0109,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* FEC_UNCORR */,
+	{ 0x11800e0010310ull,	"Error: CVMX_BGX0_SPU_MEM_INT[%llx][%u]",	0xe0120,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* RX_BUF_DBE<0> */,
+	{ 0x11800e0010310ull,	"Error: CVMX_BGX0_SPU_MEM_INT[%llx][%u]",	0xe0121,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* RX_BUF_DBE<1> */,
+	{ 0x11800e0010310ull,	"Error: CVMX_BGX0_SPU_MEM_INT[%llx][%u]",	0xe0122,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* RX_BUF_DBE<2> */,
+	{ 0x11800e0010310ull,	"Error: CVMX_BGX0_SPU_MEM_INT[%llx][%u]",	0xe0123,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* RX_BUF_DBE<3> */,
+	{ 0x11800e0010310ull,	"Error: CVMX_BGX0_SPU_MEM_INT[%llx][%u]",	0xe0124,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* RX_BUF_SBE<0> */,
+	{ 0x11800e0010310ull,	"Error: CVMX_BGX0_SPU_MEM_INT[%llx][%u]",	0xe0125,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* RX_BUF_SBE<1> */,
+	{ 0x11800e0010310ull,	"Error: CVMX_BGX0_SPU_MEM_INT[%llx][%u]",	0xe0126,	0,	CVMX_ERROR_GROUP_ETHERNET,	6}	/* RX_BUF_SBE<2> */,
+	{ 0x11800e0010310ull,	"Error: CVMX_BGX0_SPU_MEM_INT[%llx][%u]",	0xe0127,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* RX_BUF_SBE<3> */,
+	{ 0x11800e0110220ull,	"Error: CVMX_BGX0_SPU001_INT[%llx][%u]",	0xe0142,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* ERR_BLK */,
+	{ 0x11800e0110220ull,	"Error: CVMX_BGX0_SPU001_INT[%llx][%u]",	0xe0143,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* BITLCKLS */,
+	{ 0x11800e0110220ull,	"Error: CVMX_BGX0_SPU001_INT[%llx][%u]",	0xe0144,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* SYNLOS */,
+	{ 0x11800e0110220ull,	"Error: CVMX_BGX0_SPU001_INT[%llx][%u]",	0xe0145,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* ALGNLOS */,
+	{ 0x11800e0110220ull,	"Error: CVMX_BGX0_SPU001_INT[%llx][%u]",	0xe0147,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* BIP_ERR */,
+	{ 0x11800e0110220ull,	"Error: CVMX_BGX0_SPU001_INT[%llx][%u]",	0xe0148,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* FEC_CORR */,
+	{ 0x11800e0110220ull,	"Error: CVMX_BGX0_SPU001_INT[%llx][%u]",	0xe0149,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* FEC_UNCORR */,
+	{ 0x11800e0210220ull,	"Error: CVMX_BGX0_SPU002_INT[%llx][%u]",	0xe0182,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* ERR_BLK */,
+	{ 0x11800e0210220ull,	"Error: CVMX_BGX0_SPU002_INT[%llx][%u]",	0xe0183,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* BITLCKLS */,
+	{ 0x11800e0210220ull,	"Error: CVMX_BGX0_SPU002_INT[%llx][%u]",	0xe0184,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* SYNLOS */,
+	{ 0x11800e0210220ull,	"Error: CVMX_BGX0_SPU002_INT[%llx][%u]",	0xe0185,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* ALGNLOS */,
+	{ 0x11800e0210220ull,	"Error: CVMX_BGX0_SPU002_INT[%llx][%u]",	0xe0187,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* BIP_ERR */,
+	{ 0x11800e0210220ull,	"Error: CVMX_BGX0_SPU002_INT[%llx][%u]",	0xe0188,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* FEC_CORR */,
+	{ 0x11800e0210220ull,	"Error: CVMX_BGX0_SPU002_INT[%llx][%u]",	0xe0189,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* FEC_UNCORR */,
+	{ 0x11800e0310220ull,	"Error: CVMX_BGX0_SPU003_INT[%llx][%u]",	0xe01c2,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* ERR_BLK */,
+	{ 0x11800e0310220ull,	"Error: CVMX_BGX0_SPU003_INT[%llx][%u]",	0xe01c3,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* BITLCKLS */,
+	{ 0x11800e0310220ull,	"Error: CVMX_BGX0_SPU003_INT[%llx][%u]",	0xe01c4,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* SYNLOS */,
+	{ 0x11800e0310220ull,	"Error: CVMX_BGX0_SPU003_INT[%llx][%u]",	0xe01c5,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* ALGNLOS */,
+	{ 0x11800e0310220ull,	"Error: CVMX_BGX0_SPU003_INT[%llx][%u]",	0xe01c7,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* BIP_ERR */,
+	{ 0x11800e0310220ull,	"Error: CVMX_BGX0_SPU003_INT[%llx][%u]",	0xe01c8,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* FEC_CORR */,
+	{ 0x11800e0310220ull,	"Error: CVMX_BGX0_SPU003_INT[%llx][%u]",	0xe01c9,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* FEC_UNCORR */,
+	{ 0x11800e0020000ull,	"Error: CVMX_BGX0_SMU000_RX_INT[%llx][%u]",	0xe0200,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* JABBER */,
+	{ 0x11800e0020000ull,	"Error: CVMX_BGX0_SMU000_RX_INT[%llx][%u]",	0xe0201,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* FCSERR */,
+	{ 0x11800e0020000ull,	"Error: CVMX_BGX0_SMU000_RX_INT[%llx][%u]",	0xe0202,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* RCVERR */,
+	{ 0x11800e0020000ull,	"Error: CVMX_BGX0_SMU000_RX_INT[%llx][%u]",	0xe0203,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* SKPERR */,
+	{ 0x11800e0020000ull,	"Error: CVMX_BGX0_SMU000_RX_INT[%llx][%u]",	0xe0204,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* PCTERR */,
+	{ 0x11800e0020000ull,	"Error: CVMX_BGX0_SMU000_RX_INT[%llx][%u]",	0xe0205,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* RSVERR */,
+	{ 0x11800e0020000ull,	"Error: CVMX_BGX0_SMU000_RX_INT[%llx][%u]",	0xe0208,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* BAD_SEQ */,
+	{ 0x11800e0020000ull,	"Error: CVMX_BGX0_SMU000_RX_INT[%llx][%u]",	0xe0209,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* BAD_TERM */,
+	{ 0x11800e0020000ull,	"Error: CVMX_BGX0_SMU000_RX_INT[%llx][%u]",	0xe020a,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* HG2FLD */,
+	{ 0x11800e0020000ull,	"Error: CVMX_BGX0_SMU000_RX_INT[%llx][%u]",	0xe020b,	0,	CVMX_ERROR_GROUP_ETHERNET,	11}	/* HG2CC */,
+	{ 0x11800e0020140ull,	"Error: CVMX_BGX0_SMU000_TX_INT[%llx][%u]",	0xe0222,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* FAKE_COMMIT */,
+	{ 0x11800e0120000ull,	"Error: CVMX_BGX0_SMU001_RX_INT[%llx][%u]",	0xe0240,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* JABBER */,
+	{ 0x11800e0120000ull,	"Error: CVMX_BGX0_SMU001_RX_INT[%llx][%u]",	0xe0241,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* FCSERR */,
+	{ 0x11800e0120000ull,	"Error: CVMX_BGX0_SMU001_RX_INT[%llx][%u]",	0xe0242,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* RCVERR */,
+	{ 0x11800e0120000ull,	"Error: CVMX_BGX0_SMU001_RX_INT[%llx][%u]",	0xe0243,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* SKPERR */,
+	{ 0x11800e0120000ull,	"Error: CVMX_BGX0_SMU001_RX_INT[%llx][%u]",	0xe0244,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* PCTERR */,
+	{ 0x11800e0120000ull,	"Error: CVMX_BGX0_SMU001_RX_INT[%llx][%u]",	0xe0245,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* RSVERR */,
+	{ 0x11800e0120000ull,	"Error: CVMX_BGX0_SMU001_RX_INT[%llx][%u]",	0xe0248,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* BAD_SEQ */,
+	{ 0x11800e0120000ull,	"Error: CVMX_BGX0_SMU001_RX_INT[%llx][%u]",	0xe0249,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* BAD_TERM */,
+	{ 0x11800e0120000ull,	"Error: CVMX_BGX0_SMU001_RX_INT[%llx][%u]",	0xe024a,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* HG2FLD */,
+	{ 0x11800e0120000ull,	"Error: CVMX_BGX0_SMU001_RX_INT[%llx][%u]",	0xe024b,	0,	CVMX_ERROR_GROUP_ETHERNET,	11}	/* HG2CC */,
+	{ 0x11800e0120140ull,	"Error: CVMX_BGX0_SMU001_TX_INT[%llx][%u]",	0xe0262,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* FAKE_COMMIT */,
+	{ 0x11800e0220000ull,	"Error: CVMX_BGX0_SMU002_RX_INT[%llx][%u]",	0xe0280,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* JABBER */,
+	{ 0x11800e0220000ull,	"Error: CVMX_BGX0_SMU002_RX_INT[%llx][%u]",	0xe0281,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* FCSERR */,
+	{ 0x11800e0220000ull,	"Error: CVMX_BGX0_SMU002_RX_INT[%llx][%u]",	0xe0282,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* RCVERR */,
+	{ 0x11800e0220000ull,	"Error: CVMX_BGX0_SMU002_RX_INT[%llx][%u]",	0xe0283,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* SKPERR */,
+	{ 0x11800e0220000ull,	"Error: CVMX_BGX0_SMU002_RX_INT[%llx][%u]",	0xe0284,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* PCTERR */,
+	{ 0x11800e0220000ull,	"Error: CVMX_BGX0_SMU002_RX_INT[%llx][%u]",	0xe0285,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* RSVERR */,
+	{ 0x11800e0220000ull,	"Error: CVMX_BGX0_SMU002_RX_INT[%llx][%u]",	0xe0288,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* BAD_SEQ */,
+	{ 0x11800e0220000ull,	"Error: CVMX_BGX0_SMU002_RX_INT[%llx][%u]",	0xe0289,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* BAD_TERM */,
+	{ 0x11800e0220000ull,	"Error: CVMX_BGX0_SMU002_RX_INT[%llx][%u]",	0xe028a,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* HG2FLD */,
+	{ 0x11800e0220000ull,	"Error: CVMX_BGX0_SMU002_RX_INT[%llx][%u]",	0xe028b,	0,	CVMX_ERROR_GROUP_ETHERNET,	11}	/* HG2CC */,
+	{ 0x11800e0220140ull,	"Error: CVMX_BGX0_SMU002_TX_INT[%llx][%u]",	0xe02a2,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* FAKE_COMMIT */,
+	{ 0x11800e0320000ull,	"Error: CVMX_BGX0_SMU003_RX_INT[%llx][%u]",	0xe02c0,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* JABBER */,
+	{ 0x11800e0320000ull,	"Error: CVMX_BGX0_SMU003_RX_INT[%llx][%u]",	0xe02c1,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* FCSERR */,
+	{ 0x11800e0320000ull,	"Error: CVMX_BGX0_SMU003_RX_INT[%llx][%u]",	0xe02c2,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* RCVERR */,
+	{ 0x11800e0320000ull,	"Error: CVMX_BGX0_SMU003_RX_INT[%llx][%u]",	0xe02c3,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* SKPERR */,
+	{ 0x11800e0320000ull,	"Error: CVMX_BGX0_SMU003_RX_INT[%llx][%u]",	0xe02c4,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* PCTERR */,
+	{ 0x11800e0320000ull,	"Error: CVMX_BGX0_SMU003_RX_INT[%llx][%u]",	0xe02c5,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* RSVERR */,
+	{ 0x11800e0320000ull,	"Error: CVMX_BGX0_SMU003_RX_INT[%llx][%u]",	0xe02c8,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* BAD_SEQ */,
+	{ 0x11800e0320000ull,	"Error: CVMX_BGX0_SMU003_RX_INT[%llx][%u]",	0xe02c9,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* BAD_TERM */,
+	{ 0x11800e0320000ull,	"Error: CVMX_BGX0_SMU003_RX_INT[%llx][%u]",	0xe02ca,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* HG2FLD */,
+	{ 0x11800e0320000ull,	"Error: CVMX_BGX0_SMU003_RX_INT[%llx][%u]",	0xe02cb,	0,	CVMX_ERROR_GROUP_ETHERNET,	11}	/* HG2CC */,
+	{ 0x11800e0320140ull,	"Error: CVMX_BGX0_SMU003_TX_INT[%llx][%u]",	0xe02e2,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* FAKE_COMMIT */,
+	{ 0x11800e0030080ull,	"Error: CVMX_BGX0_GMP_PCS_INT000[%llx][%u]",	0xe0302,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* AN_ERR */,
+	{ 0x11800e0030080ull,	"Error: CVMX_BGX0_GMP_PCS_INT000[%llx][%u]",	0xe0303,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* TXFIFU */,
+	{ 0x11800e0030080ull,	"Error: CVMX_BGX0_GMP_PCS_INT000[%llx][%u]",	0xe0304,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* TXFIFO */,
+	{ 0x11800e0030080ull,	"Error: CVMX_BGX0_GMP_PCS_INT000[%llx][%u]",	0xe0305,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* TXBAD */,
+	{ 0x11800e0030080ull,	"Error: CVMX_BGX0_GMP_PCS_INT000[%llx][%u]",	0xe0307,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* RXBAD */,
+	{ 0x11800e0030080ull,	"Error: CVMX_BGX0_GMP_PCS_INT000[%llx][%u]",	0xe0308,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* RXLOCK */,
+	{ 0x11800e0030080ull,	"Error: CVMX_BGX0_GMP_PCS_INT000[%llx][%u]",	0xe0309,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* AN_BAD */,
+	{ 0x11800e0030080ull,	"Error: CVMX_BGX0_GMP_PCS_INT000[%llx][%u]",	0xe030a,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* SYNC_BAD */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe0320,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* MINERR */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe0321,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* CAREXT */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe0322,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* JABBER */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe0323,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* FCSERR */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe0324,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* RCVERR */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe0325,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* SKPERR */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe0326,	0,	CVMX_ERROR_GROUP_ETHERNET,	6}	/* OVRERR */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe0327,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* PCTERR */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe0328,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* RSVERR */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe0329,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* FALERR */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe032a,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* COLDET */,
+	{ 0x11800e0038000ull,	"Error: CVMX_BGX0_GMP_GMI_RX000_INT[%llx][%u]",	0xe032b,	0,	CVMX_ERROR_GROUP_ETHERNET,	11}	/* IFGERR */,
+	{ 0x11800e0038500ull,	"Error: CVMX_BGX0_GMP_GMI_TX000_INT[%llx][%u]",	0xe0330,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* UNDFLW */,
+	{ 0x11800e0038500ull,	"Error: CVMX_BGX0_GMP_GMI_TX000_INT[%llx][%u]",	0xe0331,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* XSCOL */,
+	{ 0x11800e0038500ull,	"Error: CVMX_BGX0_GMP_GMI_TX000_INT[%llx][%u]",	0xe0332,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* XSDEF */,
+	{ 0x11800e0038500ull,	"Error: CVMX_BGX0_GMP_GMI_TX000_INT[%llx][%u]",	0xe0333,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* LATE_COL */,
+	{ 0x11800e0038500ull,	"Error: CVMX_BGX0_GMP_GMI_TX000_INT[%llx][%u]",	0xe0334,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* PTP_LOST */,
+	{ 0x11800e0130080ull,	"Error: CVMX_BGX0_GMP_PCS_INT001[%llx][%u]",	0xe0342,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* AN_ERR */,
+	{ 0x11800e0130080ull,	"Error: CVMX_BGX0_GMP_PCS_INT001[%llx][%u]",	0xe0343,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* TXFIFU */,
+	{ 0x11800e0130080ull,	"Error: CVMX_BGX0_GMP_PCS_INT001[%llx][%u]",	0xe0344,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* TXFIFO */,
+	{ 0x11800e0130080ull,	"Error: CVMX_BGX0_GMP_PCS_INT001[%llx][%u]",	0xe0345,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* TXBAD */,
+	{ 0x11800e0130080ull,	"Error: CVMX_BGX0_GMP_PCS_INT001[%llx][%u]",	0xe0347,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* RXBAD */,
+	{ 0x11800e0130080ull,	"Error: CVMX_BGX0_GMP_PCS_INT001[%llx][%u]",	0xe0348,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* RXLOCK */,
+	{ 0x11800e0130080ull,	"Error: CVMX_BGX0_GMP_PCS_INT001[%llx][%u]",	0xe0349,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* AN_BAD */,
+	{ 0x11800e0130080ull,	"Error: CVMX_BGX0_GMP_PCS_INT001[%llx][%u]",	0xe034a,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* SYNC_BAD */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe0360,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* MINERR */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe0361,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* CAREXT */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe0362,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* JABBER */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe0363,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* FCSERR */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe0364,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* RCVERR */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe0365,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* SKPERR */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe0366,	0,	CVMX_ERROR_GROUP_ETHERNET,	6}	/* OVRERR */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe0367,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* PCTERR */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe0368,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* RSVERR */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe0369,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* FALERR */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe036a,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* COLDET */,
+	{ 0x11800e0138000ull,	"Error: CVMX_BGX0_GMP_GMI_RX001_INT[%llx][%u]",	0xe036b,	0,	CVMX_ERROR_GROUP_ETHERNET,	11}	/* IFGERR */,
+	{ 0x11800e0138500ull,	"Error: CVMX_BGX0_GMP_GMI_TX001_INT[%llx][%u]",	0xe0370,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* UNDFLW */,
+	{ 0x11800e0138500ull,	"Error: CVMX_BGX0_GMP_GMI_TX001_INT[%llx][%u]",	0xe0371,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* XSCOL */,
+	{ 0x11800e0138500ull,	"Error: CVMX_BGX0_GMP_GMI_TX001_INT[%llx][%u]",	0xe0372,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* XSDEF */,
+	{ 0x11800e0138500ull,	"Error: CVMX_BGX0_GMP_GMI_TX001_INT[%llx][%u]",	0xe0373,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* LATE_COL */,
+	{ 0x11800e0138500ull,	"Error: CVMX_BGX0_GMP_GMI_TX001_INT[%llx][%u]",	0xe0374,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* PTP_LOST */,
+	{ 0x11800e0230080ull,	"Error: CVMX_BGX0_GMP_PCS_INT002[%llx][%u]",	0xe0382,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* AN_ERR */,
+	{ 0x11800e0230080ull,	"Error: CVMX_BGX0_GMP_PCS_INT002[%llx][%u]",	0xe0383,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* TXFIFU */,
+	{ 0x11800e0230080ull,	"Error: CVMX_BGX0_GMP_PCS_INT002[%llx][%u]",	0xe0384,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* TXFIFO */,
+	{ 0x11800e0230080ull,	"Error: CVMX_BGX0_GMP_PCS_INT002[%llx][%u]",	0xe0385,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* TXBAD */,
+	{ 0x11800e0230080ull,	"Error: CVMX_BGX0_GMP_PCS_INT002[%llx][%u]",	0xe0387,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* RXBAD */,
+	{ 0x11800e0230080ull,	"Error: CVMX_BGX0_GMP_PCS_INT002[%llx][%u]",	0xe0388,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* RXLOCK */,
+	{ 0x11800e0230080ull,	"Error: CVMX_BGX0_GMP_PCS_INT002[%llx][%u]",	0xe0389,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* AN_BAD */,
+	{ 0x11800e0230080ull,	"Error: CVMX_BGX0_GMP_PCS_INT002[%llx][%u]",	0xe038a,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* SYNC_BAD */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03a0,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* MINERR */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03a1,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* CAREXT */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03a2,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* JABBER */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03a3,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* FCSERR */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03a4,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* RCVERR */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03a5,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* SKPERR */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03a6,	0,	CVMX_ERROR_GROUP_ETHERNET,	6}	/* OVRERR */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03a7,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* PCTERR */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03a8,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* RSVERR */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03a9,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* FALERR */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03aa,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* COLDET */,
+	{ 0x11800e0238000ull,	"Error: CVMX_BGX0_GMP_GMI_RX002_INT[%llx][%u]",	0xe03ab,	0,	CVMX_ERROR_GROUP_ETHERNET,	11}	/* IFGERR */,
+	{ 0x11800e0238500ull,	"Error: CVMX_BGX0_GMP_GMI_TX002_INT[%llx][%u]",	0xe03b0,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* UNDFLW */,
+	{ 0x11800e0238500ull,	"Error: CVMX_BGX0_GMP_GMI_TX002_INT[%llx][%u]",	0xe03b1,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* XSCOL */,
+	{ 0x11800e0238500ull,	"Error: CVMX_BGX0_GMP_GMI_TX002_INT[%llx][%u]",	0xe03b2,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* XSDEF */,
+	{ 0x11800e0238500ull,	"Error: CVMX_BGX0_GMP_GMI_TX002_INT[%llx][%u]",	0xe03b3,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* LATE_COL */,
+	{ 0x11800e0238500ull,	"Error: CVMX_BGX0_GMP_GMI_TX002_INT[%llx][%u]",	0xe03b4,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* PTP_LOST */,
+	{ 0x11800e0330080ull,	"Error: CVMX_BGX0_GMP_PCS_INT003[%llx][%u]",	0xe03c2,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* AN_ERR */,
+	{ 0x11800e0330080ull,	"Error: CVMX_BGX0_GMP_PCS_INT003[%llx][%u]",	0xe03c3,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* TXFIFU */,
+	{ 0x11800e0330080ull,	"Error: CVMX_BGX0_GMP_PCS_INT003[%llx][%u]",	0xe03c4,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* TXFIFO */,
+	{ 0x11800e0330080ull,	"Error: CVMX_BGX0_GMP_PCS_INT003[%llx][%u]",	0xe03c5,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* TXBAD */,
+	{ 0x11800e0330080ull,	"Error: CVMX_BGX0_GMP_PCS_INT003[%llx][%u]",	0xe03c7,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* RXBAD */,
+	{ 0x11800e0330080ull,	"Error: CVMX_BGX0_GMP_PCS_INT003[%llx][%u]",	0xe03c8,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* RXLOCK */,
+	{ 0x11800e0330080ull,	"Error: CVMX_BGX0_GMP_PCS_INT003[%llx][%u]",	0xe03c9,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* AN_BAD */,
+	{ 0x11800e0330080ull,	"Error: CVMX_BGX0_GMP_PCS_INT003[%llx][%u]",	0xe03ca,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* SYNC_BAD */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03e0,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* MINERR */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03e1,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* CAREXT */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03e2,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* JABBER */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03e3,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* FCSERR */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03e4,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* RCVERR */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03e5,	0,	CVMX_ERROR_GROUP_ETHERNET,	5}	/* SKPERR */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03e6,	0,	CVMX_ERROR_GROUP_ETHERNET,	6}	/* OVRERR */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03e7,	0,	CVMX_ERROR_GROUP_ETHERNET,	7}	/* PCTERR */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03e8,	0,	CVMX_ERROR_GROUP_ETHERNET,	8}	/* RSVERR */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03e9,	0,	CVMX_ERROR_GROUP_ETHERNET,	9}	/* FALERR */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03ea,	0,	CVMX_ERROR_GROUP_ETHERNET,	10}	/* COLDET */,
+	{ 0x11800e0338000ull,	"Error: CVMX_BGX0_GMP_GMI_RX003_INT[%llx][%u]",	0xe03eb,	0,	CVMX_ERROR_GROUP_ETHERNET,	11}	/* IFGERR */,
+	{ 0x11800e0338500ull,	"Error: CVMX_BGX0_GMP_GMI_TX003_INT[%llx][%u]",	0xe03f0,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* UNDFLW */,
+	{ 0x11800e0338500ull,	"Error: CVMX_BGX0_GMP_GMI_TX003_INT[%llx][%u]",	0xe03f1,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* XSCOL */,
+	{ 0x11800e0338500ull,	"Error: CVMX_BGX0_GMP_GMI_TX003_INT[%llx][%u]",	0xe03f2,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* XSDEF */,
+	{ 0x11800e0338500ull,	"Error: CVMX_BGX0_GMP_GMI_TX003_INT[%llx][%u]",	0xe03f3,	0,	CVMX_ERROR_GROUP_ETHERNET,	3}	/* LATE_COL */,
+	{ 0x11800e0338500ull,	"Error: CVMX_BGX0_GMP_GMI_TX003_INT[%llx][%u]",	0xe03f4,	0,	CVMX_ERROR_GROUP_ETHERNET,	4}	/* PTP_LOST */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* RSD0_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0001,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* RSD0_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0002,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RSD1_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0003,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* RSD1_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0004,	0,	CVMX_ERROR_GROUP_INTERNAL,	4}	/* RSD2_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0005,	0,	CVMX_ERROR_GROUP_INTERNAL,	5}	/* RSD2_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0006,	0,	CVMX_ERROR_GROUP_INTERNAL,	6}	/* RSD3_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0007,	0,	CVMX_ERROR_GROUP_INTERNAL,	7}	/* RSD3_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0008,	0,	CVMX_ERROR_GROUP_INTERNAL,	8}	/* IOR0_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0009,	0,	CVMX_ERROR_GROUP_INTERNAL,	9}	/* IOR0_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf000a,	0,	CVMX_ERROR_GROUP_INTERNAL,	10}	/* IOR1_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf000b,	0,	CVMX_ERROR_GROUP_INTERNAL,	11}	/* IOR1_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf000c,	0,	CVMX_ERROR_GROUP_INTERNAL,	12}	/* IOR2_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf000d,	0,	CVMX_ERROR_GROUP_INTERNAL,	13}	/* IOR2_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf000e,	0,	CVMX_ERROR_GROUP_INTERNAL,	14}	/* IOR3_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf000f,	0,	CVMX_ERROR_GROUP_INTERNAL,	15}	/* IOR3_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0010,	0,	CVMX_ERROR_GROUP_INTERNAL,	16}	/* IOC0_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0011,	0,	CVMX_ERROR_GROUP_INTERNAL,	17}	/* IOC0_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0012,	0,	CVMX_ERROR_GROUP_INTERNAL,	18}	/* IOC1_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0013,	0,	CVMX_ERROR_GROUP_INTERNAL,	19}	/* IOC1_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0014,	0,	CVMX_ERROR_GROUP_INTERNAL,	20}	/* IOC2_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0015,	0,	CVMX_ERROR_GROUP_INTERNAL,	21}	/* IOC2_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0016,	0,	CVMX_ERROR_GROUP_INTERNAL,	22}	/* IOC3_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0017,	0,	CVMX_ERROR_GROUP_INTERNAL,	23}	/* IOC3_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0018,	0,	CVMX_ERROR_GROUP_INTERNAL,	24}	/* XMDA0_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0019,	0,	CVMX_ERROR_GROUP_INTERNAL,	25}	/* XMDA0_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf001a,	0,	CVMX_ERROR_GROUP_INTERNAL,	26}	/* XMDA1_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf001b,	0,	CVMX_ERROR_GROUP_INTERNAL,	27}	/* XMDA1_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf001c,	0,	CVMX_ERROR_GROUP_INTERNAL,	28}	/* XMDA2_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf001d,	0,	CVMX_ERROR_GROUP_INTERNAL,	29}	/* XMDA2_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf001e,	0,	CVMX_ERROR_GROUP_INTERNAL,	30}	/* XMDA3_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf001f,	0,	CVMX_ERROR_GROUP_INTERNAL,	31}	/* XMDA3_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0020,	0,	CVMX_ERROR_GROUP_INTERNAL,	32}	/* XMDB0_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0021,	0,	CVMX_ERROR_GROUP_INTERNAL,	33}	/* XMDB0_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0022,	0,	CVMX_ERROR_GROUP_INTERNAL,	34}	/* XMDB1_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0023,	0,	CVMX_ERROR_GROUP_INTERNAL,	35}	/* XMDB1_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0024,	0,	CVMX_ERROR_GROUP_INTERNAL,	36}	/* XMDB2_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0025,	0,	CVMX_ERROR_GROUP_INTERNAL,	37}	/* XMDB2_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0026,	0,	CVMX_ERROR_GROUP_INTERNAL,	38}	/* XMDB3_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0027,	0,	CVMX_ERROR_GROUP_INTERNAL,	39}	/* XMDB3_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0028,	0,	CVMX_ERROR_GROUP_INTERNAL,	40}	/* XMC_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0029,	0,	CVMX_ERROR_GROUP_INTERNAL,	41}	/* XMC_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf002a,	0,	CVMX_ERROR_GROUP_INTERNAL,	42}	/* IDE_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf002b,	0,	CVMX_ERROR_GROUP_INTERNAL,	43}	/* IDE_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf002c,	0,	CVMX_ERROR_GROUP_INTERNAL,	44}	/* ICC0_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf002d,	0,	CVMX_ERROR_GROUP_INTERNAL,	45}	/* ICC0_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf002e,	0,	CVMX_ERROR_GROUP_INTERNAL,	46}	/* ICC1_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf002f,	0,	CVMX_ERROR_GROUP_INTERNAL,	47}	/* ICC1_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0030,	0,	CVMX_ERROR_GROUP_INTERNAL,	48}	/* ICC2_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0031,	0,	CVMX_ERROR_GROUP_INTERNAL,	49}	/* ICC2_DBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0032,	0,	CVMX_ERROR_GROUP_INTERNAL,	50}	/* ICC3_SBE */,
+	{ 0x11800f0000020ull,	"Error: CVMX_IOBN_INT_SUM[%llx][%u]",	0xf0033,	0,	CVMX_ERROR_GROUP_INTERNAL,	51}	/* ICC3_DBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* RSD0_SBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1001,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* RSD0_DBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1002,	0,	CVMX_ERROR_GROUP_INTERNAL,	2}	/* RSD1_SBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1003,	0,	CVMX_ERROR_GROUP_INTERNAL,	3}	/* RSD1_DBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1016,	0,	CVMX_ERROR_GROUP_INTERNAL,	22}	/* XMDA2_SBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1017,	0,	CVMX_ERROR_GROUP_INTERNAL,	23}	/* XMDA2_DBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1018,	0,	CVMX_ERROR_GROUP_INTERNAL,	24}	/* XMDA3_SBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1019,	0,	CVMX_ERROR_GROUP_INTERNAL,	25}	/* XMDA3_DBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf101e,	0,	CVMX_ERROR_GROUP_INTERNAL,	30}	/* XMDB2_SBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf101f,	0,	CVMX_ERROR_GROUP_INTERNAL,	31}	/* XMDB2_DBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1020,	0,	CVMX_ERROR_GROUP_INTERNAL,	32}	/* XMDB3_SBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1021,	0,	CVMX_ERROR_GROUP_INTERNAL,	33}	/* XMDB3_DBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1026,	0,	CVMX_ERROR_GROUP_INTERNAL,	38}	/* ICC0_SBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1027,	0,	CVMX_ERROR_GROUP_INTERNAL,	39}	/* ICC0_DBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1028,	0,	CVMX_ERROR_GROUP_INTERNAL,	40}	/* ICC1_SBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf1029,	0,	CVMX_ERROR_GROUP_INTERNAL,	41}	/* ICC1_DBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf102a,	0,	CVMX_ERROR_GROUP_INTERNAL,	42}	/* ICC2_SBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf102b,	0,	CVMX_ERROR_GROUP_INTERNAL,	43}	/* ICC2_DBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf102c,	0,	CVMX_ERROR_GROUP_INTERNAL,	44}	/* ICC3_SBE */,
+	{ 0x11800f0010020ull,	"Error: CVMX_IOBP_INT_SUM[%llx][%u]",	0xf102d,	0,	CVMX_ERROR_GROUP_INTERNAL,	45}	/* ICC3_DBE */,
+	{ 0x0ull,		"Error:",				0xfffff,	0,	0,				0}	/* --- EMPTY --- */
+};
+
+
diff --git a/arch/mips/cavium-octeon/octeon-78xx-errors.c b/arch/mips/cavium-octeon/octeon-78xx-errors.c
index 7c199ef..8187492 100644
--- a/arch/mips/cavium-octeon/octeon-78xx-errors.c
+++ b/arch/mips/cavium-octeon/octeon-78xx-errors.c
@@ -59,40 +59,40 @@
 struct cvmx_error_78xx error_array_cn78xx[] = {
 /*	CSR Address,		error message,				intsn,		Flags,	ERR Group,		Bit position in CSR      */
 /* --------------------------------------------------------------------------------------------------------------------------------------------- */
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc000,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* LABS_OUT */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc001,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* LOST_EXC */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc002,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* NEW_EXC */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc003,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* TIMEOUT */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc006,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* LAB_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc007,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* LAB_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc008,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* STA_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc009,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* STA_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00a,	0,	CVMX_ERROR_GROUP_ILK,	10}	/* NXT_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00b,	0,	CVMX_ERROR_GROUP_ILK,	11}	/* NXT_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00c,	0,	CVMX_ERROR_GROUP_ILK,	12}	/* EMSK_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00d,	0,	CVMX_ERROR_GROUP_ILK,	13}	/* EMSK_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00e,	0,	CVMX_ERROR_GROUP_ILK,	14}	/* EDAT_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00f,	0,	CVMX_ERROR_GROUP_ILK,	15}	/* EDAT_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc010,	0,	CVMX_ERROR_GROUP_ILK,	16}	/* NBR_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc011,	0,	CVMX_ERROR_GROUP_ILK,	17}	/* NBR_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc012,	0,	CVMX_ERROR_GROUP_ILK,	18}	/* XID_BAD */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd000,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* LABS_OUT */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd001,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* LOST_EXC */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd002,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* NEW_EXC */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd003,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* TIMEOUT */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd006,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* LAB_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd007,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* LAB_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd008,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* STA_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd009,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* STA_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00a,	0,	CVMX_ERROR_GROUP_ILK,	10}	/* NXT_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00b,	0,	CVMX_ERROR_GROUP_ILK,	11}	/* NXT_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00c,	0,	CVMX_ERROR_GROUP_ILK,	12}	/* EMSK_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00d,	0,	CVMX_ERROR_GROUP_ILK,	13}	/* EMSK_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00e,	0,	CVMX_ERROR_GROUP_ILK,	14}	/* EDAT_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00f,	0,	CVMX_ERROR_GROUP_ILK,	15}	/* EDAT_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd010,	0,	CVMX_ERROR_GROUP_ILK,	16}	/* NBR_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd011,	0,	CVMX_ERROR_GROUP_ILK,	17}	/* NBR_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd012,	0,	CVMX_ERROR_GROUP_ILK,	18}	/* XID_BAD */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc000,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* LABS_OUT */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc001,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* LOST_EXC */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc002,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* NEW_EXC */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc003,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* TIMEOUT */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc006,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* LAB_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc007,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* LAB_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc008,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* STA_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc009,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* STA_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00a,	0,	CVMX_ERROR_GROUP_ILA,	10}	/* NXT_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00b,	0,	CVMX_ERROR_GROUP_ILA,	11}	/* NXT_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00c,	0,	CVMX_ERROR_GROUP_ILA,	12}	/* EMSK_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00d,	0,	CVMX_ERROR_GROUP_ILA,	13}	/* EMSK_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00e,	0,	CVMX_ERROR_GROUP_ILA,	14}	/* EDAT_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00f,	0,	CVMX_ERROR_GROUP_ILA,	15}	/* EDAT_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc010,	0,	CVMX_ERROR_GROUP_ILA,	16}	/* NBR_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc011,	0,	CVMX_ERROR_GROUP_ILA,	17}	/* NBR_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc012,	0,	CVMX_ERROR_GROUP_ILA,	18}	/* XID_BAD */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd000,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* LABS_OUT */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd001,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* LOST_EXC */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd002,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* NEW_EXC */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd003,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* TIMEOUT */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd006,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* LAB_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd007,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* LAB_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd008,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* STA_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd009,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* STA_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00a,	0,	CVMX_ERROR_GROUP_ILA,	10}	/* NXT_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00b,	0,	CVMX_ERROR_GROUP_ILA,	11}	/* NXT_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00c,	0,	CVMX_ERROR_GROUP_ILA,	12}	/* EMSK_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00d,	0,	CVMX_ERROR_GROUP_ILA,	13}	/* EMSK_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00e,	0,	CVMX_ERROR_GROUP_ILA,	14}	/* EDAT_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00f,	0,	CVMX_ERROR_GROUP_ILA,	15}	/* EDAT_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd010,	0,	CVMX_ERROR_GROUP_ILA,	16}	/* NBR_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd011,	0,	CVMX_ERROR_GROUP_ILA,	17}	/* NBR_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd012,	0,	CVMX_ERROR_GROUP_ILA,	18}	/* XID_BAD */,
 	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12000,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* DAT_SBE */,
 	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12001,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* DAT_DBE */,
 	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12002,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* DAT_UFLOW */,
@@ -297,122 +297,92 @@ struct cvmx_error_78xx error_array_cn78xx[] = {
 	{ 0x118001403bc08ull,	"Error: CVMX_ILK_RX_LNE15_INT[%llx][%u]",	0x14fc7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
 	{ 0x118001403bc08ull,	"Error: CVMX_ILK_RX_LNE15_INT[%llx][%u]",	0x14fc8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
 	{ 0x118001403bc08ull,	"Error: CVMX_ILK_RX_LNE15_INT[%llx][%u]",	0x14fc9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17040,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* STAT_CNT_OVFL */,
-	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17041,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* TXF_SBE */,
-	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17042,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* TXF_DBE */,
-	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17081,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* CRC24_ERR */,
-	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17084,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* STAT_CNT_OVFL */,
-	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17085,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* LANE_BAD_WORD */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f000,	0,	CVMX_ERROR_GROUP_PCI,	0}	/* RML_TO */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f008,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* M0_UP_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f009,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* M0_UP_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00a,	0,	CVMX_ERROR_GROUP_PCI,	10}	/* M0_UN_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* M0_UN_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* M1_UP_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* M1_UP_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00e,	0,	CVMX_ERROR_GROUP_PCI,	14}	/* M1_UN_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00f,	0,	CVMX_ERROR_GROUP_PCI,	15}	/* M1_UN_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f014,	0,	CVMX_ERROR_GROUP_PCI,	20}	/* M2_UP_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f015,	0,	CVMX_ERROR_GROUP_PCI,	21}	/* M2_UP_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f016,	0,	CVMX_ERROR_GROUP_PCI,	22}	/* M2_UN_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f017,	0,	CVMX_ERROR_GROUP_PCI,	23}	/* M2_UN_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f018,	0,	CVMX_ERROR_GROUP_PCI,	24}	/* M3_UP_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f019,	0,	CVMX_ERROR_GROUP_PCI,	25}	/* M3_UP_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f01a,	0,	CVMX_ERROR_GROUP_PCI,	26}	/* M3_UN_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f01b,	0,	CVMX_ERROR_GROUP_PCI,	27}	/* M3_UN_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f01c,	0,	CVMX_ERROR_GROUP_PCI,	28}	/* VF_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f020,	0,	CVMX_ERROR_GROUP_PCI,	32}	/* DMAFI<0> */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f021,	0,	CVMX_ERROR_GROUP_PCI,	33}	/* DMAFI<1> */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f030,	0,	CVMX_ERROR_GROUP_PCI,	48}	/* PIDBOF */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f031,	0,	CVMX_ERROR_GROUP_PCI,	49}	/* PSLDBOF */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f034,	0,	CVMX_ERROR_GROUP_PCI,	52}	/* PGL_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f035,	0,	CVMX_ERROR_GROUP_PCI,	53}	/* PDI_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f036,	0,	CVMX_ERROR_GROUP_PCI,	54}	/* POP_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f037,	0,	CVMX_ERROR_GROUP_PCI,	55}	/* PINS_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f038,	0,	CVMX_ERROR_GROUP_PCI,	56}	/* SPRT0_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f039,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* SPRT1_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f03a,	0,	CVMX_ERROR_GROUP_PCI,	58}	/* SPRT2_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f03b,	0,	CVMX_ERROR_GROUP_PCI,	59}	/* SPRT3_ERR */,
+	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17040,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* STAT_CNT_OVFL */,
+	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17041,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* TXF_SBE */,
+	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17042,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* TXF_DBE */,
+	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17081,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* CRC24_ERR */,
+	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17084,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* STAT_CNT_OVFL */,
+	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17085,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* LANE_BAD_WORD */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
 	{ 0x1180020000000ull,	"Error: CVMX_KEY_INT_SUM[%llx][%u]",	0x20000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* KED0_SBE */,
 	{ 0x1180020000000ull,	"Error: CVMX_KEY_INT_SUM[%llx][%u]",	0x20001,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* KED0_DBE */,
 	{ 0x1280000000040ull,	"Error: CVMX_FPA_ERR_INT[%llx][%u]",	0x28000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* CNT_ADD */,
@@ -2747,40 +2717,40 @@ struct cvmx_error_78xx error_array_cn78xx[] = {
 struct cvmx_error_78xx error_array_cn78xxp2[] = {
 /*	CSR Address,		error message,				intsn,		Flags,	ERR Group,		Bit position in CSR      */
 /* --------------------------------------------------------------------------------------------------------------------------------------------- */
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc000,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* LABS_OUT */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc001,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* LOST_EXC */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc002,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* NEW_EXC */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc003,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* TIMEOUT */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc006,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* LAB_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc007,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* LAB_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc008,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* STA_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc009,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* STA_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00a,	0,	CVMX_ERROR_GROUP_ILK,	10}	/* NXT_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00b,	0,	CVMX_ERROR_GROUP_ILK,	11}	/* NXT_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00c,	0,	CVMX_ERROR_GROUP_ILK,	12}	/* EMSK_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00d,	0,	CVMX_ERROR_GROUP_ILK,	13}	/* EMSK_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00e,	0,	CVMX_ERROR_GROUP_ILK,	14}	/* EDAT_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00f,	0,	CVMX_ERROR_GROUP_ILK,	15}	/* EDAT_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc010,	0,	CVMX_ERROR_GROUP_ILK,	16}	/* NBR_SBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc011,	0,	CVMX_ERROR_GROUP_ILK,	17}	/* NBR_DBE */,
-	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc012,	0,	CVMX_ERROR_GROUP_ILK,	18}	/* XID_BAD */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd000,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* LABS_OUT */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd001,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* LOST_EXC */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd002,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* NEW_EXC */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd003,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* TIMEOUT */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd006,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* LAB_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd007,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* LAB_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd008,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* STA_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd009,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* STA_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00a,	0,	CVMX_ERROR_GROUP_ILK,	10}	/* NXT_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00b,	0,	CVMX_ERROR_GROUP_ILK,	11}	/* NXT_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00c,	0,	CVMX_ERROR_GROUP_ILK,	12}	/* EMSK_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00d,	0,	CVMX_ERROR_GROUP_ILK,	13}	/* EMSK_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00e,	0,	CVMX_ERROR_GROUP_ILK,	14}	/* EDAT_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00f,	0,	CVMX_ERROR_GROUP_ILK,	15}	/* EDAT_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd010,	0,	CVMX_ERROR_GROUP_ILK,	16}	/* NBR_SBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd011,	0,	CVMX_ERROR_GROUP_ILK,	17}	/* NBR_DBE */,
-	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd012,	0,	CVMX_ERROR_GROUP_ILK,	18}	/* XID_BAD */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc000,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* LABS_OUT */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc001,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* LOST_EXC */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc002,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* NEW_EXC */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc003,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* TIMEOUT */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc006,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* LAB_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc007,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* LAB_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc008,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* STA_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc009,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* STA_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00a,	0,	CVMX_ERROR_GROUP_ILA,	10}	/* NXT_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00b,	0,	CVMX_ERROR_GROUP_ILA,	11}	/* NXT_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00c,	0,	CVMX_ERROR_GROUP_ILA,	12}	/* EMSK_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00d,	0,	CVMX_ERROR_GROUP_ILA,	13}	/* EMSK_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00e,	0,	CVMX_ERROR_GROUP_ILA,	14}	/* EDAT_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc00f,	0,	CVMX_ERROR_GROUP_ILA,	15}	/* EDAT_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc010,	0,	CVMX_ERROR_GROUP_ILA,	16}	/* NBR_SBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc011,	0,	CVMX_ERROR_GROUP_ILA,	17}	/* NBR_DBE */,
+	{ 0x118000c010010ull,	"Error: CVMX_LAP0_GEN_INT[%llx][%u]",	0xc012,	0,	CVMX_ERROR_GROUP_ILA,	18}	/* XID_BAD */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd000,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* LABS_OUT */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd001,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* LOST_EXC */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd002,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* NEW_EXC */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd003,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* TIMEOUT */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd006,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* LAB_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd007,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* LAB_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd008,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* STA_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd009,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* STA_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00a,	0,	CVMX_ERROR_GROUP_ILA,	10}	/* NXT_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00b,	0,	CVMX_ERROR_GROUP_ILA,	11}	/* NXT_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00c,	0,	CVMX_ERROR_GROUP_ILA,	12}	/* EMSK_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00d,	0,	CVMX_ERROR_GROUP_ILA,	13}	/* EMSK_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00e,	0,	CVMX_ERROR_GROUP_ILA,	14}	/* EDAT_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd00f,	0,	CVMX_ERROR_GROUP_ILA,	15}	/* EDAT_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd010,	0,	CVMX_ERROR_GROUP_ILA,	16}	/* NBR_SBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd011,	0,	CVMX_ERROR_GROUP_ILA,	17}	/* NBR_DBE */,
+	{ 0x118000d010010ull,	"Error: CVMX_LAP1_GEN_INT[%llx][%u]",	0xd012,	0,	CVMX_ERROR_GROUP_ILA,	18}	/* XID_BAD */,
 	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12000,	0,	CVMX_ERROR_GROUP_ETHERNET,	0}	/* DAT_SBE */,
 	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12001,	0,	CVMX_ERROR_GROUP_ETHERNET,	1}	/* DAT_DBE */,
 	{ 0x1180012000040ull,	"Error: CVMX_LBK_INT[%llx][%u]",	0x12002,	0,	CVMX_ERROR_GROUP_ETHERNET,	2}	/* DAT_UFLOW */,
@@ -2985,122 +2955,92 @@ struct cvmx_error_78xx error_array_cn78xxp2[] = {
 	{ 0x118001403bc08ull,	"Error: CVMX_ILK_RX_LNE15_INT[%llx][%u]",	0x14fc7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
 	{ 0x118001403bc08ull,	"Error: CVMX_ILK_RX_LNE15_INT[%llx][%u]",	0x14fc8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
 	{ 0x118001403bc08ull,	"Error: CVMX_ILK_RX_LNE15_INT[%llx][%u]",	0x14fc9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17040,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* STAT_CNT_OVFL */,
-	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17041,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* TXF_SBE */,
-	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17042,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* TXF_DBE */,
-	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17081,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* CRC24_ERR */,
-	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17084,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* STAT_CNT_OVFL */,
-	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17085,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* LANE_BAD_WORD */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c0,	0,	CVMX_ERROR_GROUP_ILK,	0}	/* SERDES_LOCK_LOSS */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c1,	0,	CVMX_ERROR_GROUP_ILK,	1}	/* BDRY_SYNC_LOSS */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c2,	0,	CVMX_ERROR_GROUP_ILK,	2}	/* CRC32_ERR */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c3,	0,	CVMX_ERROR_GROUP_ILK,	3}	/* UKWN_CNTL_WORD */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c4,	0,	CVMX_ERROR_GROUP_ILK,	4}	/* SCRM_SYNC_LOSS */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c5,	0,	CVMX_ERROR_GROUP_ILK,	5}	/* DSKEW_FIFO_OVFL */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c6,	0,	CVMX_ERROR_GROUP_ILK,	6}	/* STAT_MSG */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c7,	0,	CVMX_ERROR_GROUP_ILK,	7}	/* STAT_CNT_OVFL */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c8,	0,	CVMX_ERROR_GROUP_ILK,	8}	/* BAD_64B67B */,
-	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c9,	0,	CVMX_ERROR_GROUP_ILK,	9}	/* DISP_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f000,	0,	CVMX_ERROR_GROUP_PCI,	0}	/* RML_TO */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f008,	0,	CVMX_ERROR_GROUP_PCI,	8}	/* M0_UP_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f009,	0,	CVMX_ERROR_GROUP_PCI,	9}	/* M0_UP_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00a,	0,	CVMX_ERROR_GROUP_PCI,	10}	/* M0_UN_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00b,	0,	CVMX_ERROR_GROUP_PCI,	11}	/* M0_UN_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00c,	0,	CVMX_ERROR_GROUP_PCI,	12}	/* M1_UP_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00d,	0,	CVMX_ERROR_GROUP_PCI,	13}	/* M1_UP_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00e,	0,	CVMX_ERROR_GROUP_PCI,	14}	/* M1_UN_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f00f,	0,	CVMX_ERROR_GROUP_PCI,	15}	/* M1_UN_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f014,	0,	CVMX_ERROR_GROUP_PCI,	20}	/* M2_UP_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f015,	0,	CVMX_ERROR_GROUP_PCI,	21}	/* M2_UP_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f016,	0,	CVMX_ERROR_GROUP_PCI,	22}	/* M2_UN_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f017,	0,	CVMX_ERROR_GROUP_PCI,	23}	/* M2_UN_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f018,	0,	CVMX_ERROR_GROUP_PCI,	24}	/* M3_UP_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f019,	0,	CVMX_ERROR_GROUP_PCI,	25}	/* M3_UP_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f01a,	0,	CVMX_ERROR_GROUP_PCI,	26}	/* M3_UN_B0 */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f01b,	0,	CVMX_ERROR_GROUP_PCI,	27}	/* M3_UN_WI */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f01c,	0,	CVMX_ERROR_GROUP_PCI,	28}	/* VF_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f020,	0,	CVMX_ERROR_GROUP_PCI,	32}	/* DMAFI<0> */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f021,	0,	CVMX_ERROR_GROUP_PCI,	33}	/* DMAFI<1> */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f030,	0,	CVMX_ERROR_GROUP_PCI,	48}	/* PIDBOF */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f031,	0,	CVMX_ERROR_GROUP_PCI,	49}	/* PSLDBOF */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f034,	0,	CVMX_ERROR_GROUP_PCI,	52}	/* PGL_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f035,	0,	CVMX_ERROR_GROUP_PCI,	53}	/* PDI_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f036,	0,	CVMX_ERROR_GROUP_PCI,	54}	/* POP_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f037,	0,	CVMX_ERROR_GROUP_PCI,	55}	/* PINS_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f038,	0,	CVMX_ERROR_GROUP_PCI,	56}	/* SPRT0_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f039,	0,	CVMX_ERROR_GROUP_PCI,	57}	/* SPRT1_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f03a,	0,	CVMX_ERROR_GROUP_PCI,	58}	/* SPRT2_ERR */,
-	{ 0x11f0000010330ull,	"Error: CVMX_SLI_INT_SUM[%llx][%u]",	0x1f03b,	0,	CVMX_ERROR_GROUP_PCI,	59}	/* SPRT3_ERR */,
+	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17040,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* STAT_CNT_OVFL */,
+	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17041,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* TXF_SBE */,
+	{ 0x1180017010098ull,	"Error: CVMX_ILA_TX0_INT[%llx][%u]",	0x17042,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* TXF_DBE */,
+	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17081,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* CRC24_ERR */,
+	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17084,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* STAT_CNT_OVFL */,
+	{ 0x1180017020010ull,	"Error: CVMX_ILA_RX0_INT[%llx][%u]",	0x17085,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* LANE_BAD_WORD */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017038008ull,	"Error: CVMX_ILA_RX_LNE0_INT[%llx][%u]",	0x170c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017038408ull,	"Error: CVMX_ILA_RX_LNE1_INT[%llx][%u]",	0x171c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017038808ull,	"Error: CVMX_ILA_RX_LNE2_INT[%llx][%u]",	0x172c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017038c08ull,	"Error: CVMX_ILA_RX_LNE3_INT[%llx][%u]",	0x173c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017039008ull,	"Error: CVMX_ILA_RX_LNE4_INT[%llx][%u]",	0x174c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017039408ull,	"Error: CVMX_ILA_RX_LNE5_INT[%llx][%u]",	0x175c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017039808ull,	"Error: CVMX_ILA_RX_LNE6_INT[%llx][%u]",	0x176c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c0,	0,	CVMX_ERROR_GROUP_ILA,	0}	/* SERDES_LOCK_LOSS */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c1,	0,	CVMX_ERROR_GROUP_ILA,	1}	/* BDRY_SYNC_LOSS */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c2,	0,	CVMX_ERROR_GROUP_ILA,	2}	/* CRC32_ERR */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c3,	0,	CVMX_ERROR_GROUP_ILA,	3}	/* UKWN_CNTL_WORD */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c4,	0,	CVMX_ERROR_GROUP_ILA,	4}	/* SCRM_SYNC_LOSS */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c5,	0,	CVMX_ERROR_GROUP_ILA,	5}	/* DSKEW_FIFO_OVFL */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c6,	0,	CVMX_ERROR_GROUP_ILA,	6}	/* STAT_MSG */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c7,	0,	CVMX_ERROR_GROUP_ILA,	7}	/* STAT_CNT_OVFL */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c8,	0,	CVMX_ERROR_GROUP_ILA,	8}	/* BAD_64B67B */,
+	{ 0x1180017039c08ull,	"Error: CVMX_ILA_RX_LNE7_INT[%llx][%u]",	0x177c9,	0,	CVMX_ERROR_GROUP_ILA,	9}	/* DISP_ERR */,
 	{ 0x1180020000000ull,	"Error: CVMX_KEY_INT_SUM[%llx][%u]",	0x20000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* KED0_SBE */,
 	{ 0x1180020000000ull,	"Error: CVMX_KEY_INT_SUM[%llx][%u]",	0x20001,	0,	CVMX_ERROR_GROUP_INTERNAL,	1}	/* KED0_DBE */,
 	{ 0x1280000000040ull,	"Error: CVMX_FPA_ERR_INT[%llx][%u]",	0x28000,	0,	CVMX_ERROR_GROUP_INTERNAL,	0}	/* CNT_ADD */,
diff --git a/arch/mips/include/asm/octeon/cvmx-bootmem.h b/arch/mips/include/asm/octeon/cvmx-bootmem.h
index 731d828..e760640 100644
--- a/arch/mips/include/asm/octeon/cvmx-bootmem.h
+++ b/arch/mips/include/asm/octeon/cvmx-bootmem.h
@@ -42,7 +42,7 @@
  * Simple allocate only memory allocator.  Used to allocate memory at application
  * start time.
  *
- * <hr>$Revision: 127530 $<hr>
+ * <hr>$Revision: 130285 $<hr>
  *
  */
 
@@ -146,7 +146,7 @@ typedef struct {
 					 /**< length of name array in bootmem blocks */
 	uint64_t named_block_array_addr;
 					 /**< address of named memory block descriptors */
-#else				/* __LITTLE ENDIAN */
+#else				/* __LITTLE_ENDIAN */
 	uint32_t flags;
 	uint32_t lock;
 	uint64_t head_addr;
diff --git a/arch/mips/include/asm/octeon/cvmx-dpi-defs.h b/arch/mips/include/asm/octeon/cvmx-dpi-defs.h
index 6bca3cb..f0fb5b9 100644
--- a/arch/mips/include/asm/octeon/cvmx-dpi-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-dpi-defs.h
@@ -2825,12 +2825,11 @@ union cvmx_dpi_sli_prtx_cfg {
 	uint64_t halt                         : 1;  /**< When set, HALT indicates that the MAC has detected a reset condition. No further
                                                          instructions that reference the MAC from any instruction queue will be issued until the
                                                          MAC comes out of reset and HALT is cleared in SLI_CTL_PORT()[DIS_PORT]. */
-	uint64_t qlm_cfg                      : 4;  /**< Read only copy of the QLM CFG pin.
-                                                         0 = MAC is DPI.
-                                                         1 = Reserved.
-                                                         Since QLM_CFG is simply a copy of the QLM CFG pins, it could reflect values that are not
-                                                         normal for DMA or packet operations. QLM_CFG does not indicate if a port is disabled.
-                                                         GSER()_CFG can be used for more complete QLM configuration information. */
+	uint64_t qlm_cfg                      : 4;  /**< Read only copy of the QLM CFG.
+                                                         0 = MAC is PCIe.
+                                                         1 = MAC is SRIO.
+                                                         QLM_CFG does not indicate if a port is disabled.  GSER()_CFG can be used for
+                                                         more complete QLM configuration information. */
 	uint64_t reserved_17_19               : 3;
 	uint64_t rd_mode                      : 1;  /**< Read mode.
                                                          0 = Exact read mode. The hardware reads on a four-byte granularity. In this mode, the
@@ -2849,25 +2848,33 @@ union cvmx_dpi_sli_prtx_cfg {
                                                          aligned boundary of size defined by MPS. (DPI will still only cross the boundary when it
                                                          would eliminate a write by doing so.)
                                                          When set, DPI will never issue a MAC memory space write that crosses the naturally-aligned
-                                                         boundary of size defined by MPS. */
+                                                         boundary of size defined by MPS.
+                                                         MPS_LIM must be set when DPI is operating in SRIO mode (QLM_CFG=SRIO). */
 	uint64_t reserved_5_6                 : 2;
 	uint64_t mps                          : 1;  /**< Maximum payload size.
                                                          0 = 128B.
                                                          1 = 256B.
-                                                         The MPS size must not exceed the size selected by PCIE*_CFG030[MPS]. */
+                                                         The MPS size must not exceed the size selected by PCIE*_CFG030[MPS] when DPI is
+                                                         operating in PCIe mode (QLM_CFG=PCIe).
+                                                         The MPS size must not exceed 256B when DPI is operating in SRIO mode
+                                                         (QLM_CFG=SRIO). */
 	uint64_t mrrs_lim                     : 1;  /**< MAC memory space read requests cannot cross the (naturally-aligned) MRRS boundary.
                                                          When clear, DPI is allowed to issue a MAC memory-space read that crosses the naturally-
                                                          aligned boundary of size defined by MRRS. (DPI will still only cross the boundary when it
                                                          would eliminate a read by doing so.)
                                                          When set, DPI will never issue a MAC memory space read that crosses the naturally-aligned
-                                                         boundary of size defined by MRRS. */
+                                                         boundary of size defined by MRRS.
+                                                         MRRS_LIM must be set when DPI is operating in SRIO mode (QLM_CFG=SRIO). */
 	uint64_t reserved_2_2                 : 1;
 	uint64_t mrrs                         : 2;  /**< Maximum read-request size.
                                                          0x0 = 128B.
                                                          0x1 = 256B.
                                                          0x2 = 512B.
                                                          0x3 = 1024B.
-                                                         The MRRS size must not exceed the size selected by PCIE*_CFG030[MRRS]. */
+                                                         The MRRS size must not exceed the size selected by PCIE*_CFG030[MRRS] when DPI
+                                                         is operating in PCIe mode (QLM_CFG=PCIe).
+                                                         The MRRS size must not exceed 256B when DPI is operating in SRIO mode
+                                                         (QLM_CFG=SRIO). */
 #else
 	uint64_t mrrs                         : 2;
 	uint64_t reserved_2_2                 : 1;
diff --git a/arch/mips/include/asm/octeon/cvmx-gserx-defs.h b/arch/mips/include/asm/octeon/cvmx-gserx-defs.h
index f090c89..e975a54 100644
--- a/arch/mips/include/asm/octeon/cvmx-gserx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-gserx-defs.h
@@ -1077,6 +1077,8 @@ static inline uint64_t CVMX_GSERX_LANEX_RX_OS_MVALBBD_1(unsigned long offset, un
 {
 	if (!(
 	      (OCTEON_IS_MODEL(OCTEON_CN73XX) && (((offset <= 3)) && ((block_id <= 6)))) ||
+	      (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X) && (((offset <= 3)) && ((block_id <= 13)))) ||
+	      (OCTEON_IS_MODEL(OCTEON_CN78XX) && (((offset <= 3)) && ((block_id <= 13)))) ||
 	      (OCTEON_IS_MODEL(OCTEON_CNF75XX) && (((offset <= 3)) && ((block_id <= 8))))))
 		cvmx_warn("CVMX_GSERX_LANEX_RX_OS_MVALBBD_1(%lu,%lu) is invalid on this chip\n", offset, block_id);
 	return CVMX_ADD_IO_SEG(0x0001180090440230ull) + (((offset) & 3) + ((block_id) & 15) * 0x10ull) * 1048576;
@@ -1089,6 +1091,8 @@ static inline uint64_t CVMX_GSERX_LANEX_RX_OS_MVALBBD_2(unsigned long offset, un
 {
 	if (!(
 	      (OCTEON_IS_MODEL(OCTEON_CN73XX) && (((offset <= 3)) && ((block_id <= 6)))) ||
+	      (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X) && (((offset <= 3)) && ((block_id <= 13)))) ||
+	      (OCTEON_IS_MODEL(OCTEON_CN78XX) && (((offset <= 3)) && ((block_id <= 13)))) ||
 	      (OCTEON_IS_MODEL(OCTEON_CNF75XX) && (((offset <= 3)) && ((block_id <= 8))))))
 		cvmx_warn("CVMX_GSERX_LANEX_RX_OS_MVALBBD_2(%lu,%lu) is invalid on this chip\n", offset, block_id);
 	return CVMX_ADD_IO_SEG(0x0001180090440238ull) + (((offset) & 3) + ((block_id) & 15) * 0x10ull) * 1048576;
@@ -1101,6 +1105,8 @@ static inline uint64_t CVMX_GSERX_LANEX_RX_OS_OUT_1(unsigned long offset, unsign
 {
 	if (!(
 	      (OCTEON_IS_MODEL(OCTEON_CN73XX) && (((offset <= 3)) && ((block_id <= 6)))) ||
+	      (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X) && (((offset <= 3)) && ((block_id <= 13)))) ||
+	      (OCTEON_IS_MODEL(OCTEON_CN78XX) && (((offset <= 3)) && ((block_id <= 13)))) ||
 	      (OCTEON_IS_MODEL(OCTEON_CNF75XX) && (((offset <= 3)) && ((block_id <= 8))))))
 		cvmx_warn("CVMX_GSERX_LANEX_RX_OS_OUT_1(%lu,%lu) is invalid on this chip\n", offset, block_id);
 	return CVMX_ADD_IO_SEG(0x00011800904402A0ull) + (((offset) & 3) + ((block_id) & 15) * 0x10ull) * 1048576;
@@ -1113,6 +1119,8 @@ static inline uint64_t CVMX_GSERX_LANEX_RX_OS_OUT_2(unsigned long offset, unsign
 {
 	if (!(
 	      (OCTEON_IS_MODEL(OCTEON_CN73XX) && (((offset <= 3)) && ((block_id <= 6)))) ||
+	      (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X) && (((offset <= 3)) && ((block_id <= 13)))) ||
+	      (OCTEON_IS_MODEL(OCTEON_CN78XX) && (((offset <= 3)) && ((block_id <= 13)))) ||
 	      (OCTEON_IS_MODEL(OCTEON_CNF75XX) && (((offset <= 3)) && ((block_id <= 8))))))
 		cvmx_warn("CVMX_GSERX_LANEX_RX_OS_OUT_2(%lu,%lu) is invalid on this chip\n", offset, block_id);
 	return CVMX_ADD_IO_SEG(0x00011800904402A8ull) + (((offset) & 3) + ((block_id) & 15) * 0x10ull) * 1048576;
@@ -1125,6 +1133,8 @@ static inline uint64_t CVMX_GSERX_LANEX_RX_OS_OUT_3(unsigned long offset, unsign
 {
 	if (!(
 	      (OCTEON_IS_MODEL(OCTEON_CN73XX) && (((offset <= 3)) && ((block_id <= 6)))) ||
+	      (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X) && (((offset <= 3)) && ((block_id <= 13)))) ||
+	      (OCTEON_IS_MODEL(OCTEON_CN78XX) && (((offset <= 3)) && ((block_id <= 13)))) ||
 	      (OCTEON_IS_MODEL(OCTEON_CNF75XX) && (((offset <= 3)) && ((block_id <= 8))))))
 		cvmx_warn("CVMX_GSERX_LANEX_RX_OS_OUT_3(%lu,%lu) is invalid on this chip\n", offset, block_id);
 	return CVMX_ADD_IO_SEG(0x00011800904402B0ull) + (((offset) & 3) + ((block_id) & 15) * 0x10ull) * 1048576;
@@ -5815,6 +5825,8 @@ union cvmx_gserx_lanex_rx_os_mvalbbd_1 {
 #endif
 	} s;
 	struct cvmx_gserx_lanex_rx_os_mvalbbd_1_s cn73xx;
+	struct cvmx_gserx_lanex_rx_os_mvalbbd_1_s cn78xx;
+	struct cvmx_gserx_lanex_rx_os_mvalbbd_1_s cn78xxp2;
 	struct cvmx_gserx_lanex_rx_os_mvalbbd_1_s cnf75xx;
 };
 typedef union cvmx_gserx_lanex_rx_os_mvalbbd_1 cvmx_gserx_lanex_rx_os_mvalbbd_1_t;
@@ -5842,6 +5854,8 @@ union cvmx_gserx_lanex_rx_os_mvalbbd_2 {
 #endif
 	} s;
 	struct cvmx_gserx_lanex_rx_os_mvalbbd_2_s cn73xx;
+	struct cvmx_gserx_lanex_rx_os_mvalbbd_2_s cn78xx;
+	struct cvmx_gserx_lanex_rx_os_mvalbbd_2_s cn78xxp2;
 	struct cvmx_gserx_lanex_rx_os_mvalbbd_2_s cnf75xx;
 };
 typedef union cvmx_gserx_lanex_rx_os_mvalbbd_2 cvmx_gserx_lanex_rx_os_mvalbbd_2_t;
@@ -5867,6 +5881,8 @@ union cvmx_gserx_lanex_rx_os_out_1 {
 #endif
 	} s;
 	struct cvmx_gserx_lanex_rx_os_out_1_s cn73xx;
+	struct cvmx_gserx_lanex_rx_os_out_1_s cn78xx;
+	struct cvmx_gserx_lanex_rx_os_out_1_s cn78xxp2;
 	struct cvmx_gserx_lanex_rx_os_out_1_s cnf75xx;
 };
 typedef union cvmx_gserx_lanex_rx_os_out_1 cvmx_gserx_lanex_rx_os_out_1_t;
@@ -5892,6 +5908,8 @@ union cvmx_gserx_lanex_rx_os_out_2 {
 #endif
 	} s;
 	struct cvmx_gserx_lanex_rx_os_out_2_s cn73xx;
+	struct cvmx_gserx_lanex_rx_os_out_2_s cn78xx;
+	struct cvmx_gserx_lanex_rx_os_out_2_s cn78xxp2;
 	struct cvmx_gserx_lanex_rx_os_out_2_s cnf75xx;
 };
 typedef union cvmx_gserx_lanex_rx_os_out_2 cvmx_gserx_lanex_rx_os_out_2_t;
@@ -5917,6 +5935,8 @@ union cvmx_gserx_lanex_rx_os_out_3 {
 #endif
 	} s;
 	struct cvmx_gserx_lanex_rx_os_out_3_s cn73xx;
+	struct cvmx_gserx_lanex_rx_os_out_3_s cn78xx;
+	struct cvmx_gserx_lanex_rx_os_out_3_s cn78xxp2;
 	struct cvmx_gserx_lanex_rx_os_out_3_s cnf75xx;
 };
 typedef union cvmx_gserx_lanex_rx_os_out_3 cvmx_gserx_lanex_rx_os_out_3_t;
diff --git a/arch/mips/include/asm/octeon/cvmx-hna-defs.h b/arch/mips/include/asm/octeon/cvmx-hna-defs.h
index c1fff88..fdd1e89 100644
--- a/arch/mips/include/asm/octeon/cvmx-hna-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-hna-defs.h
@@ -962,16 +962,14 @@ union cvmx_hna_error_capture_data {
 	uint64_t u64;
 	struct cvmx_hna_error_capture_data_s {
 #ifdef __BIG_ENDIAN_BITFIELD
-	uint64_t hpu_stat                     : 64; /**< HPU_STATUS data captured during HNA_ERROR events. It will preserve the HPU_STATUS from the
-                                                         first error event that is detected, until the VLD bit in the HNA_ERROR_CAPTURE_INFO
-                                                         register is cleared. If multiple error events occur before the VLD bit is cleared, the
+	uint64_t hpu_stat                     : 64; /**< HPU_STATUS data captured during some HNA_ERROR events. It will preserve the HPU_STATUS
+                                                         from the
+                                                         first such event that is detected, until the VLD bit in the HNA_ERROR_CAPTURE_INFO
+                                                         register is reset by clearing the corresponding interrupt. If multiple error events occur
+                                                         before the VLD bit is cleared, the
                                                          subsequent HPU_STATUS information will be lost. The error capture is triggered by the
                                                          following error conditions:
                                                          * HPU memory errors (SBE or DBE on svstk/rnstk/rwb, or parity error on PDB).
-                                                         * external memory errors (OSM/DLC).
-                                                         * bad node detected in HPU.
-                                                         * bad address in HPU.
-                                                         * bad stack entry in HPU.
                                                          * HNC parity error.
                                                          * RAM1 address overflow.
                                                          The HPU STATUS format is as follows:
@@ -989,7 +987,7 @@ union cvmx_hna_error_capture_data {
                                                          [10]      1'b0
                                                          [9]       OSM or DLC Response Error    REASON MEMERR
                                                          [8]       Bad node                     REASON BADNODE
-                                                         [7]       Graph location is in RAM2    REASON BADADR
+                                                         [7]       Node in RAM2 / bad entry ID  REASON BADADR
                                                          [6]       Bad stack entry              REASON BAD STACKENTRY
                                                          [5]       Svstck full                  REASON SVSTACK FULL
                                                          [4]       Rwb full                     REASON RWB FULL
@@ -1022,12 +1020,17 @@ union cvmx_hna_error_capture_info {
 	uint64_t cl_id                        : 2;  /**< Cluster which was the source of the HPU_STATUS. */
 	uint64_t hpu_id                       : 4;  /**< HPU which was the source of the HPU_STATUS. */
 	uint64_t reserved_2_3                 : 2;
-	uint64_t ovf                          : 1;  /**< The OVF bit indicates that at least one HNA_ERROR condition has occurred while the
-                                                         CAPTURE_DATA register contained data, resulting in lost HPU_STATUS information. This bit
-                                                         will be cleared when the VLD bit is written to 1." */
+	uint64_t ovf                          : 1;  /**< Reserved. */
 	uint64_t vld                          : 1;  /**< The VLD bit indicates that an HNA_ERROR has occurred and the HPU_STATUS has been captured
                                                          in the HNA_ERROR_CAPTURE_DATA register. The first such HPU_STATUS will be stored until
-                                                         this bit is cleared by writing a 1. */
+                                                         this bit is reset by clearing one of these interrupts:
+                                                         * HNA_ERROR_SVSTCK_SBE.
+                                                         * HNA_ERROR_SVSTCK_DBE.
+                                                         * HNA_ERROR_RNSTCK_SBE.
+                                                         * HNA_ERROR_RNSTCK_DBE.
+                                                         * HNA_ERROR_PDB_PAR_ERR.
+                                                         * HNA_ERROR_HNC_OVFERR.
+                                                         * HNA_ERROR_HNC_PARERR. */
 #else
 	uint64_t vld                          : 1;
 	uint64_t ovf                          : 1;
diff --git a/arch/mips/include/asm/octeon/cvmx-pki-defs.h b/arch/mips/include/asm/octeon/cvmx-pki-defs.h
index faedd0c..d4f3f23 100644
--- a/arch/mips/include/asm/octeon/cvmx-pki-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pki-defs.h
@@ -3299,7 +3299,7 @@ union cvmx_pki_icgx_cfg {
                                                          the approximate parsing delay (800) divided by the number of bits set in
                                                          [CLUSTERS]. The smallest useful non-zero value is 0xA0,
                                                          corresponding to the minimum number of cycles needed to fill one cluster with
-                                                         packets. So set [DELAY] = maximum(0xA0,800/pop_cnt([CLUSTERS])). */
+                                                         packets. So set [DELAY] = maximum(0xA0,800/number_of_clusters). */
 #else
 	uint64_t delay                        : 12;
 	uint64_t timer                        : 12;
diff --git a/arch/mips/include/asm/octeon/cvmx-pko3.h b/arch/mips/include/asm/octeon/cvmx-pko3.h
index a09d575..c5af7f1 100644
--- a/arch/mips/include/asm/octeon/cvmx-pko3.h
+++ b/arch/mips/include/asm/octeon/cvmx-pko3.h
@@ -621,6 +621,51 @@ cvmx_pko3_cvmseg_addr(void)
 	return (uint64_t *) (CVMX_SCRATCH_BASE + scr);
 }
 
+
+/**
+ * Save scratchpad area
+ * @param buf storage buffer for saving previous scratchpad contents.
+ *
+ * This function should be used whenever the cache line is used
+ * from a context that might preempt another context that too uses
+ * the same cache line designated for LMTST/LMTDMA and Wide-Atomic
+ * operations, such as the hard interrupt context in Linux kernel,
+ * that could preempt a user-space application on the same processor
+ * core also using the same scratchpad.
+ * 'cvmx_lmtline_save()' should be called upon entry into the
+ * potentially interrupting context, and 'cvmx_lmtline_restore()' should
+ * be called prior to exitting that context.
+ */
+static inline void cvmx_lmtline_save(uint64_t buf[16])
+{
+	unsigned i, scr_off = cvmx_pko3_lmtdma_scr_base();
+	unsigned sz = CVMX_CACHE_LINE_SIZE/sizeof(uint64_t);
+
+	/* wait LMTDMA to finish (if any) */
+	CVMX_SYNCIOBDMA;
+
+	/* Copy LMTLINE to user-provided buffer */
+	for (i = 0; i < sz; i++)
+		buf[i] = cvmx_scratch_read64(scr_off + i * sizeof(uint64_t));
+}
+
+/**
+ * Restore scratchpad area
+ * @param buf storage buffer containing the previous content of scratchpad.
+ */
+static inline void cvmx_lmtline_restore(const uint64_t buf[16])
+{
+	unsigned i, scr_off = cvmx_pko3_lmtdma_scr_base();
+	unsigned sz = CVMX_CACHE_LINE_SIZE/sizeof(uint64_t);
+
+	/* wait LMTDMA to finsh (if any) */
+	CVMX_SYNCIOBDMA;
+
+	/* restore scratchpad area from buf[] */
+	for (i = 0; i < sz; i++)
+		cvmx_scratch_write64(scr_off + i * sizeof(uint64_t), buf[i]);
+}
+
 /*
  * @INTERNAL
  * Deliver PKO SEND commands via CVMSEG LM and LMTDMA/LMTTST.
diff --git a/arch/mips/include/asm/octeon/cvmx-sli-defs.h b/arch/mips/include/asm/octeon/cvmx-sli-defs.h
index 269ae54..a32a674 100644
--- a/arch/mips/include/asm/octeon/cvmx-sli-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-sli-defs.h
@@ -69,7 +69,7 @@ static inline uint64_t CVMX_SLI_BIST_STATUS_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000010580ull;
+					return 0x0000000000000580ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000028580ull;
 			return 0x0000000000028580ull;
@@ -94,7 +94,7 @@ static inline uint64_t CVMX_SLI_BIST_STATUS_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010580ull;
+				return 0x0000000000000580ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000028580ull;
 			return 0x0000000000028580ull;
@@ -148,7 +148,7 @@ static inline uint64_t CVMX_SLI_CTL_PORTX(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
-					return 0x00000000000106E0ull + ((offset) & 3) * 16;
+					return 0x00000000000006E0ull + ((offset) & 3) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000000000286E0ull + ((offset) & 3) * 16;
@@ -178,7 +178,7 @@ static inline uint64_t CVMX_SLI_CTL_PORTX(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000106E0ull + (offset) * 16;
+				return 0x00000000000006E0ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000286E0ull + (offset) * 16;
 			return 0x00000000000286E0ull + (offset) * 16;
@@ -204,7 +204,7 @@ static inline uint64_t CVMX_SLI_CTL_STATUS_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000010570ull;
+					return 0x0000000000000570ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000028570ull;
 			return 0x0000000000028570ull;
@@ -229,7 +229,7 @@ static inline uint64_t CVMX_SLI_CTL_STATUS_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010570ull;
+				return 0x0000000000000570ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000028570ull;
 			return 0x0000000000028570ull;
@@ -254,7 +254,7 @@ static inline uint64_t CVMX_SLI_DATA_OUT_CNT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x00000000000105F0ull;
+					return 0x00000000000005F0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x00000000000285F0ull;
 			return 0x00000000000285F0ull;
@@ -279,7 +279,7 @@ static inline uint64_t CVMX_SLI_DATA_OUT_CNT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000105F0ull;
+				return 0x00000000000005F0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000285F0ull;
 			return 0x00000000000285F0ull;
@@ -327,7 +327,7 @@ static inline uint64_t CVMX_SLI_DMAX_CNT(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
-					return 0x0000000000010400ull + ((offset) & 1) * 16;
+					return 0x0000000000000400ull + ((offset) & 1) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return 0x0000000000028400ull + ((offset) & 1) * 16;
@@ -353,7 +353,7 @@ static inline uint64_t CVMX_SLI_DMAX_CNT(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010400ull + (offset) * 16;
+				return 0x0000000000000400ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000028400ull + (offset) * 16;
 			return 0x0000000000028400ull + (offset) * 16;
@@ -379,7 +379,7 @@ static inline uint64_t CVMX_SLI_DMAX_INT_LEVEL(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
-					return 0x00000000000103E0ull + ((offset) & 1) * 16;
+					return 0x00000000000003E0ull + ((offset) & 1) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return 0x00000000000283E0ull + ((offset) & 1) * 16;
@@ -405,7 +405,7 @@ static inline uint64_t CVMX_SLI_DMAX_INT_LEVEL(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000103E0ull + (offset) * 16;
+				return 0x00000000000003E0ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000283E0ull + (offset) * 16;
 			return 0x00000000000283E0ull + (offset) * 16;
@@ -431,7 +431,7 @@ static inline uint64_t CVMX_SLI_DMAX_TIM(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
-					return 0x0000000000010420ull + ((offset) & 1) * 16;
+					return 0x0000000000000420ull + ((offset) & 1) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return 0x0000000000028420ull + ((offset) & 1) * 16;
@@ -457,7 +457,7 @@ static inline uint64_t CVMX_SLI_DMAX_TIM(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010420ull + (offset) * 16;
+				return 0x0000000000000420ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000028420ull + (offset) * 16;
 			return 0x0000000000028420ull + (offset) * 16;
@@ -695,7 +695,7 @@ static inline uint64_t CVMX_SLI_MAC_CREDIT_CNT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000013D70ull;
+					return 0x0000000000003D70ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000023D70ull;
 			return 0x0000000000023D70ull;
@@ -720,7 +720,7 @@ static inline uint64_t CVMX_SLI_MAC_CREDIT_CNT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013D70ull;
+				return 0x0000000000003D70ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000023D70ull;
 			return 0x0000000000023D70ull;
@@ -743,7 +743,7 @@ static inline uint64_t CVMX_SLI_MAC_CREDIT_CNT2_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000013E10ull;
+					return 0x0000000000003E10ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000023E10ull;
 			return 0x0000000000023E10ull;
@@ -766,7 +766,7 @@ static inline uint64_t CVMX_SLI_MAC_CREDIT_CNT2_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013E10ull;
+				return 0x0000000000003E10ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000023E10ull;
 			return 0x0000000000023E10ull;
@@ -841,7 +841,7 @@ static inline uint64_t CVMX_SLI_MEM_ACCESS_CTL_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x00000000000102F0ull;
+					return 0x00000000000002F0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x00000000000282F0ull;
 			return 0x00000000000282F0ull;
@@ -866,7 +866,7 @@ static inline uint64_t CVMX_SLI_MEM_ACCESS_CTL_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000102F0ull;
+				return 0x00000000000002F0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000282F0ull;
 			return 0x00000000000282F0ull;
@@ -892,7 +892,7 @@ static inline uint64_t CVMX_SLI_MEM_ACCESS_SUBIDX(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if (((offset >= 12) && (offset <= 27)))
-					return 0x00000000000100E0ull + ((offset) & 31) * 16 - 16*12;
+					return 0x00000000000000E0ull + ((offset) & 31) * 16 - 16*12;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if (((offset >= 12) && (offset <= 27)))
 					return 0x00000000000280E0ull + ((offset) & 31) * 16 - 16*12;
@@ -918,7 +918,7 @@ static inline uint64_t CVMX_SLI_MEM_ACCESS_SUBIDX(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000100E0ull + (offset) * 16 - 16*12;
+				return 0x00000000000000E0ull + (offset) * 16 - 16*12;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000280E0ull + (offset) * 16 - 16*12;
 			return 0x00000000000280E0ull + (offset) * 16 - 16*12;
@@ -937,7 +937,7 @@ static inline uint64_t CVMX_SLI_MEM_CTL_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x00000000000105E0ull;
+					return 0x00000000000005E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x00000000000285E0ull;
 			return 0x00000000000285E0ull;
@@ -956,7 +956,7 @@ static inline uint64_t CVMX_SLI_MEM_CTL_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000105E0ull;
+				return 0x00000000000005E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000285E0ull;
 			return 0x00000000000285E0ull;
@@ -975,7 +975,7 @@ static inline uint64_t CVMX_SLI_MEM_INT_SUM_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x00000000000105D0ull;
+					return 0x00000000000005D0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x00000000000285D0ull;
 			return 0x00000000000285D0ull;
@@ -994,7 +994,7 @@ static inline uint64_t CVMX_SLI_MEM_INT_SUM_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000105D0ull;
+				return 0x00000000000005D0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000285D0ull;
 			return 0x00000000000285D0ull;
@@ -1013,7 +1013,7 @@ static inline uint64_t CVMX_SLI_MSIXX_TABLE_ADDR(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 64))
-					return 0x0000000000016000ull + ((offset) & 127) * 16;
+					return 0x0000000000006000ull + ((offset) & 127) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 64))
 					return 0x0000000000000000ull + ((offset) & 127) * 16;
@@ -1033,7 +1033,7 @@ static inline uint64_t CVMX_SLI_MSIXX_TABLE_ADDR(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000016000ull + (offset) * 16;
+				return 0x0000000000006000ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000000000ull + (offset) * 16;
 			return 0x0000000000000000ull + (offset) * 16;
@@ -1052,7 +1052,7 @@ static inline uint64_t CVMX_SLI_MSIXX_TABLE_DATA(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 64))
-					return 0x0000000000016008ull + ((offset) & 127) * 16;
+					return 0x0000000000006008ull + ((offset) & 127) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 64))
 					return 0x0000000000000008ull + ((offset) & 127) * 16;
@@ -1072,7 +1072,7 @@ static inline uint64_t CVMX_SLI_MSIXX_TABLE_DATA(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000016008ull + (offset) * 16;
+				return 0x0000000000006008ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000000008ull + (offset) * 16;
 			return 0x0000000000000008ull + (offset) * 16;
@@ -1086,10 +1086,10 @@ static inline uint64_t CVMX_SLI_MSIX_MACX_PF_TABLE_ADDR(unsigned long offset)
 	if (!(
 	      (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X) && ((offset <= 3)))))
 		cvmx_warn("CVMX_SLI_MSIX_MACX_PF_TABLE_ADDR(%lu) is invalid on this chip\n", offset);
-	return 0x0000000000017C00ull + ((offset) & 3) * 16;
+	return 0x0000000000007C00ull + ((offset) & 3) * 16;
 }
 #else
-#define CVMX_SLI_MSIX_MACX_PF_TABLE_ADDR(offset) (0x0000000000017C00ull + ((offset) & 3) * 16)
+#define CVMX_SLI_MSIX_MACX_PF_TABLE_ADDR(offset) (0x0000000000007C00ull + ((offset) & 3) * 16)
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
 static inline uint64_t CVMX_SLI_MSIX_MACX_PF_TABLE_DATA(unsigned long offset)
@@ -1097,10 +1097,10 @@ static inline uint64_t CVMX_SLI_MSIX_MACX_PF_TABLE_DATA(unsigned long offset)
 	if (!(
 	      (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X) && ((offset <= 3)))))
 		cvmx_warn("CVMX_SLI_MSIX_MACX_PF_TABLE_DATA(%lu) is invalid on this chip\n", offset);
-	return 0x0000000000017C08ull + ((offset) & 3) * 16;
+	return 0x0000000000007C08ull + ((offset) & 3) * 16;
 }
 #else
-#define CVMX_SLI_MSIX_MACX_PF_TABLE_DATA(offset) (0x0000000000017C08ull + ((offset) & 3) * 16)
+#define CVMX_SLI_MSIX_MACX_PF_TABLE_DATA(offset) (0x0000000000007C08ull + ((offset) & 3) * 16)
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
 #define CVMX_SLI_MSIX_PBA0 CVMX_SLI_MSIX_PBA0_FUNC()
@@ -1113,7 +1113,7 @@ static inline uint64_t CVMX_SLI_MSIX_PBA0_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000017000ull;
+					return 0x0000000000007000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000001000ull;
 			return 0x0000000000001000ull;
@@ -1132,7 +1132,7 @@ static inline uint64_t CVMX_SLI_MSIX_PBA0_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000017000ull;
+				return 0x0000000000007000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000001000ull;
 			return 0x0000000000001000ull;
@@ -1151,7 +1151,7 @@ static inline uint64_t CVMX_SLI_MSIX_PBA1_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000017010ull;
+					return 0x0000000000007010ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000001008ull;
 			return 0x0000000000001008ull;
@@ -1170,7 +1170,7 @@ static inline uint64_t CVMX_SLI_MSIX_PBA1_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000017010ull;
+				return 0x0000000000007010ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000001008ull;
 			return 0x0000000000001008ull;
@@ -1239,7 +1239,7 @@ static inline uint64_t CVMX_SLI_MSI_RCV0_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000013C10ull;
+					return 0x0000000000003C10ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000023C10ull;
 			return 0x0000000000023C10ull;
@@ -1264,7 +1264,7 @@ static inline uint64_t CVMX_SLI_MSI_RCV0_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013C10ull;
+				return 0x0000000000003C10ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000023C10ull;
 			return 0x0000000000023C10ull;
@@ -1289,7 +1289,7 @@ static inline uint64_t CVMX_SLI_MSI_RCV1_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000013C20ull;
+					return 0x0000000000003C20ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000023C20ull;
 			return 0x0000000000023C20ull;
@@ -1314,7 +1314,7 @@ static inline uint64_t CVMX_SLI_MSI_RCV1_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013C20ull;
+				return 0x0000000000003C20ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000023C20ull;
 			return 0x0000000000023C20ull;
@@ -1339,7 +1339,7 @@ static inline uint64_t CVMX_SLI_MSI_RCV2_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000013C30ull;
+					return 0x0000000000003C30ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000023C30ull;
 			return 0x0000000000023C30ull;
@@ -1364,7 +1364,7 @@ static inline uint64_t CVMX_SLI_MSI_RCV2_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013C30ull;
+				return 0x0000000000003C30ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000023C30ull;
 			return 0x0000000000023C30ull;
@@ -1389,7 +1389,7 @@ static inline uint64_t CVMX_SLI_MSI_RCV3_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000013C40ull;
+					return 0x0000000000003C40ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000023C40ull;
 			return 0x0000000000023C40ull;
@@ -1414,7 +1414,7 @@ static inline uint64_t CVMX_SLI_MSI_RCV3_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013C40ull;
+				return 0x0000000000003C40ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000023C40ull;
 			return 0x0000000000023C40ull;
@@ -1439,7 +1439,7 @@ static inline uint64_t CVMX_SLI_MSI_RD_MAP_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000013CA0ull;
+					return 0x0000000000003CA0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000023CA0ull;
 			return 0x0000000000023CA0ull;
@@ -1464,7 +1464,7 @@ static inline uint64_t CVMX_SLI_MSI_RD_MAP_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013CA0ull;
+				return 0x0000000000003CA0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000023CA0ull;
 			return 0x0000000000023CA0ull;
@@ -1577,7 +1577,7 @@ static inline uint64_t CVMX_SLI_MSI_WR_MAP_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000013C90ull;
+					return 0x0000000000003C90ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000023C90ull;
 			return 0x0000000000023C90ull;
@@ -1602,7 +1602,7 @@ static inline uint64_t CVMX_SLI_MSI_WR_MAP_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013C90ull;
+				return 0x0000000000003C90ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000023C90ull;
 			return 0x0000000000023C90ull;
@@ -1638,7 +1638,7 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000013CB0ull;
+					return 0x0000000000003CB0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000023CB0ull;
 			return 0x0000000000023CB0ull;
@@ -1663,7 +1663,7 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013CB0ull;
+				return 0x0000000000003CB0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000023CB0ull;
 			return 0x0000000000023CB0ull;
@@ -1688,7 +1688,7 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B1_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000010650ull;
+					return 0x0000000000000650ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000028650ull;
 			return 0x0000000000028650ull;
@@ -1713,7 +1713,7 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B1_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010650ull;
+				return 0x0000000000000650ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000028650ull;
 			return 0x0000000000028650ull;
@@ -1738,7 +1738,7 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B2_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000010660ull;
+					return 0x0000000000000660ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000028660ull;
 			return 0x0000000000028660ull;
@@ -1763,7 +1763,7 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B2_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010660ull;
+				return 0x0000000000000660ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000028660ull;
 			return 0x0000000000028660ull;
@@ -1788,7 +1788,7 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B3_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000010670ull;
+					return 0x0000000000000670ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000028670ull;
 			return 0x0000000000028670ull;
@@ -1813,7 +1813,7 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B3_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010670ull;
+				return 0x0000000000000670ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000028670ull;
 			return 0x0000000000028670ull;
@@ -1841,7 +1841,7 @@ static inline uint64_t CVMX_SLI_PKTX_CNTS(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000012400ull + ((offset) & 63) * 16;
+					return 0x0000000000002400ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x00000000000100B0ull + ((offset) & 127) * 0x20000ull;
@@ -1868,7 +1868,7 @@ static inline uint64_t CVMX_SLI_PKTX_CNTS(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000012400ull + (offset) * 16;
+				return 0x0000000000002400ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000100B0ull + (offset) * 0x20000ull;
 			return 0x00000000000100B0ull + (offset) * 0x20000ull;
@@ -1900,7 +1900,7 @@ static inline uint64_t CVMX_SLI_PKTX_INPUT_CONTROL(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000014000ull + ((offset) & 63) * 16;
+					return 0x0000000000004000ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x0000000000010000ull + ((offset) & 127) * 0x20000ull;
@@ -1920,7 +1920,7 @@ static inline uint64_t CVMX_SLI_PKTX_INPUT_CONTROL(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000014000ull + (offset) * 16;
+				return 0x0000000000004000ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000010000ull + (offset) * 0x20000ull;
 			return 0x0000000000010000ull + (offset) * 0x20000ull;
@@ -1948,7 +1948,7 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_BADDR(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000012800ull + ((offset) & 63) * 16;
+					return 0x0000000000002800ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x0000000000010010ull + ((offset) & 127) * 0x20000ull;
@@ -1975,7 +1975,7 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_BADDR(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000012800ull + (offset) * 16;
+				return 0x0000000000002800ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000010010ull + (offset) * 0x20000ull;
 			return 0x0000000000010010ull + (offset) * 0x20000ull;
@@ -2003,7 +2003,7 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_BAOFF_DBELL(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000012C00ull + ((offset) & 63) * 16;
+					return 0x0000000000002C00ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x0000000000010020ull + ((offset) & 127) * 0x20000ull;
@@ -2030,7 +2030,7 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_BAOFF_DBELL(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000012C00ull + (offset) * 16;
+				return 0x0000000000002C00ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000010020ull + (offset) * 0x20000ull;
 			return 0x0000000000010020ull + (offset) * 0x20000ull;
@@ -2058,7 +2058,7 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_FIFO_RSIZE(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000013000ull + ((offset) & 63) * 16;
+					return 0x0000000000003000ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x0000000000010030ull + ((offset) & 127) * 0x20000ull;
@@ -2085,7 +2085,7 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_FIFO_RSIZE(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013000ull + (offset) * 16;
+				return 0x0000000000003000ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000010030ull + (offset) * 0x20000ull;
 			return 0x0000000000010030ull + (offset) * 0x20000ull;
@@ -2120,7 +2120,7 @@ static inline uint64_t CVMX_SLI_PKTX_INT_LEVELS(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000014400ull + ((offset) & 63) * 16;
+					return 0x0000000000004400ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x00000000000100A0ull + ((offset) & 127) * 0x20000ull;
@@ -2140,7 +2140,7 @@ static inline uint64_t CVMX_SLI_PKTX_INT_LEVELS(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000014400ull + (offset) * 16;
+				return 0x0000000000004400ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000100A0ull + (offset) * 0x20000ull;
 			return 0x00000000000100A0ull + (offset) * 0x20000ull;
@@ -2187,7 +2187,7 @@ static inline uint64_t CVMX_SLI_PKTX_OUTPUT_CONTROL(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000014800ull + ((offset) & 63) * 16;
+					return 0x0000000000004800ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x0000000000010050ull + ((offset) & 127) * 0x20000ull;
@@ -2207,7 +2207,7 @@ static inline uint64_t CVMX_SLI_PKTX_OUTPUT_CONTROL(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000014800ull + (offset) * 16;
+				return 0x0000000000004800ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000010050ull + (offset) * 0x20000ull;
 			return 0x0000000000010050ull + (offset) * 0x20000ull;
@@ -2235,7 +2235,7 @@ static inline uint64_t CVMX_SLI_PKTX_OUT_SIZE(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000010C00ull + ((offset) & 63) * 16;
+					return 0x0000000000000C00ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x0000000000010060ull + ((offset) & 127) * 0x20000ull;
@@ -2262,7 +2262,7 @@ static inline uint64_t CVMX_SLI_PKTX_OUT_SIZE(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010C00ull + (offset) * 16;
+				return 0x0000000000000C00ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000010060ull + (offset) * 0x20000ull;
 			return 0x0000000000010060ull + (offset) * 0x20000ull;
@@ -2303,7 +2303,7 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_BADDR(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000011400ull + ((offset) & 63) * 16;
+					return 0x0000000000001400ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x0000000000010070ull + ((offset) & 127) * 0x20000ull;
@@ -2330,7 +2330,7 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_BADDR(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000011400ull + (offset) * 16;
+				return 0x0000000000001400ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000010070ull + (offset) * 0x20000ull;
 			return 0x0000000000010070ull + (offset) * 0x20000ull;
@@ -2358,7 +2358,7 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_BAOFF_DBELL(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000011800ull + ((offset) & 63) * 16;
+					return 0x0000000000001800ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x0000000000010080ull + ((offset) & 127) * 0x20000ull;
@@ -2385,7 +2385,7 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_BAOFF_DBELL(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000011800ull + (offset) * 16;
+				return 0x0000000000001800ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000010080ull + (offset) * 0x20000ull;
 			return 0x0000000000010080ull + (offset) * 0x20000ull;
@@ -2413,7 +2413,7 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_FIFO_RSIZE(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000011C00ull + ((offset) & 63) * 16;
+					return 0x0000000000001C00ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x0000000000010090ull + ((offset) & 127) * 0x20000ull;
@@ -2440,7 +2440,7 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_FIFO_RSIZE(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000011C00ull + (offset) * 16;
+				return 0x0000000000001C00ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000010090ull + (offset) * 0x20000ull;
 			return 0x0000000000010090ull + (offset) * 0x20000ull;
@@ -2467,10 +2467,10 @@ static inline uint64_t CVMX_SLI_PKTX_VF_SIG(unsigned long offset)
 	if (!(
 	      (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X) && ((offset <= 63)))))
 		cvmx_warn("CVMX_SLI_PKTX_VF_SIG(%lu) is invalid on this chip\n", offset);
-	return 0x0000000000014C00ull + ((offset) & 63) * 16;
+	return 0x0000000000004C00ull + ((offset) & 63) * 16;
 }
 #else
-#define CVMX_SLI_PKTX_VF_SIG(offset) (0x0000000000014C00ull + ((offset) & 63) * 16)
+#define CVMX_SLI_PKTX_VF_SIG(offset) (0x0000000000004C00ull + ((offset) & 63) * 16)
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
 #define CVMX_SLI_PKT_BIST_STATUS CVMX_SLI_PKT_BIST_STATUS_FUNC()
@@ -2500,7 +2500,7 @@ static inline uint64_t CVMX_SLI_PKT_CNT_INT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000011130ull;
+					return 0x0000000000001130ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000029130ull;
 			return 0x0000000000029130ull;
@@ -2525,7 +2525,7 @@ static inline uint64_t CVMX_SLI_PKT_CNT_INT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000011130ull;
+				return 0x0000000000001130ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000029130ull;
 			return 0x0000000000029130ull;
@@ -2665,7 +2665,7 @@ static inline uint64_t CVMX_SLI_PKT_INT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000011160ull;
+					return 0x0000000000001160ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000029160ull;
 			return 0x0000000000029160ull;
@@ -2684,7 +2684,7 @@ static inline uint64_t CVMX_SLI_PKT_INT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000011160ull;
+				return 0x0000000000001160ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000029160ull;
 			return 0x0000000000029160ull;
@@ -2734,7 +2734,7 @@ static inline uint64_t CVMX_SLI_PKT_IN_DONEX_CNTS(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000012000ull + ((offset) & 63) * 16;
+					return 0x0000000000002000ull + ((offset) & 63) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 127))
 					return 0x0000000000010040ull + ((offset) & 127) * 0x20000ull;
@@ -2761,7 +2761,7 @@ static inline uint64_t CVMX_SLI_PKT_IN_DONEX_CNTS(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000012000ull + (offset) * 16;
+				return 0x0000000000002000ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000010040ull + (offset) * 0x20000ull;
 			return 0x0000000000010040ull + (offset) * 0x20000ull;
@@ -2786,7 +2786,7 @@ static inline uint64_t CVMX_SLI_PKT_IN_INSTR_COUNTS_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000011200ull;
+					return 0x0000000000001200ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000029200ull;
 			return 0x0000000000029200ull;
@@ -2811,7 +2811,7 @@ static inline uint64_t CVMX_SLI_PKT_IN_INSTR_COUNTS_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000011200ull;
+				return 0x0000000000001200ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000029200ull;
 			return 0x0000000000029200ull;
@@ -2830,7 +2830,7 @@ static inline uint64_t CVMX_SLI_PKT_IN_INT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000011150ull;
+					return 0x0000000000001150ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000029150ull;
 			return 0x0000000000029150ull;
@@ -2849,7 +2849,7 @@ static inline uint64_t CVMX_SLI_PKT_IN_INT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000011150ull;
+				return 0x0000000000001150ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000029150ull;
 			return 0x0000000000029150ull;
@@ -2896,10 +2896,10 @@ static inline uint64_t CVMX_SLI_PKT_MAC0_SIG0_FUNC(void)
 {
 	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X)))
 		cvmx_warn("CVMX_SLI_PKT_MAC0_SIG0 not supported on this chip\n");
-	return 0x0000000000011300ull;
+	return 0x0000000000001300ull;
 }
 #else
-#define CVMX_SLI_PKT_MAC0_SIG0 (0x0000000000011300ull)
+#define CVMX_SLI_PKT_MAC0_SIG0 (0x0000000000001300ull)
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
 #define CVMX_SLI_PKT_MAC0_SIG1 CVMX_SLI_PKT_MAC0_SIG1_FUNC()
@@ -2907,10 +2907,10 @@ static inline uint64_t CVMX_SLI_PKT_MAC0_SIG1_FUNC(void)
 {
 	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X)))
 		cvmx_warn("CVMX_SLI_PKT_MAC0_SIG1 not supported on this chip\n");
-	return 0x0000000000011310ull;
+	return 0x0000000000001310ull;
 }
 #else
-#define CVMX_SLI_PKT_MAC0_SIG1 (0x0000000000011310ull)
+#define CVMX_SLI_PKT_MAC0_SIG1 (0x0000000000001310ull)
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
 #define CVMX_SLI_PKT_MAC1_SIG0 CVMX_SLI_PKT_MAC1_SIG0_FUNC()
@@ -2918,10 +2918,10 @@ static inline uint64_t CVMX_SLI_PKT_MAC1_SIG0_FUNC(void)
 {
 	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X)))
 		cvmx_warn("CVMX_SLI_PKT_MAC1_SIG0 not supported on this chip\n");
-	return 0x0000000000011320ull;
+	return 0x0000000000001320ull;
 }
 #else
-#define CVMX_SLI_PKT_MAC1_SIG0 (0x0000000000011320ull)
+#define CVMX_SLI_PKT_MAC1_SIG0 (0x0000000000001320ull)
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
 #define CVMX_SLI_PKT_MAC1_SIG1 CVMX_SLI_PKT_MAC1_SIG1_FUNC()
@@ -2929,10 +2929,10 @@ static inline uint64_t CVMX_SLI_PKT_MAC1_SIG1_FUNC(void)
 {
 	if (!(OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X)))
 		cvmx_warn("CVMX_SLI_PKT_MAC1_SIG1 not supported on this chip\n");
-	return 0x0000000000011330ull;
+	return 0x0000000000001330ull;
 }
 #else
-#define CVMX_SLI_PKT_MAC1_SIG1 (0x0000000000011330ull)
+#define CVMX_SLI_PKT_MAC1_SIG1 (0x0000000000001330ull)
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
 static inline uint64_t CVMX_SLI_PKT_MACX_PFX_RINFO(unsigned long offset, unsigned long block_id)
@@ -2953,10 +2953,10 @@ static inline uint64_t CVMX_SLI_PKT_MACX_RINFO(unsigned long offset)
 	if (!(
 	      (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X) && ((offset <= 3)))))
 		cvmx_warn("CVMX_SLI_PKT_MACX_RINFO(%lu) is invalid on this chip\n", offset);
-	return 0x0000000000011030ull + ((offset) & 3) * 16;
+	return 0x0000000000001030ull + ((offset) & 3) * 16;
 }
 #else
-#define CVMX_SLI_PKT_MACX_RINFO(offset) (0x0000000000011030ull + ((offset) & 3) * 16)
+#define CVMX_SLI_PKT_MACX_RINFO(offset) (0x0000000000001030ull + ((offset) & 3) * 16)
 #endif
 #if CVMX_ENABLE_CSR_ADDRESS_CHECKING
 #define CVMX_SLI_PKT_MEM_CTL CVMX_SLI_PKT_MEM_CTL_FUNC()
@@ -2969,7 +2969,7 @@ static inline uint64_t CVMX_SLI_PKT_MEM_CTL_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000011120ull;
+					return 0x0000000000001120ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000029120ull;
 			return 0x0000000000029120ull;
@@ -2988,7 +2988,7 @@ static inline uint64_t CVMX_SLI_PKT_MEM_CTL_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000011120ull;
+				return 0x0000000000001120ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000029120ull;
 			return 0x0000000000029120ull;
@@ -3013,7 +3013,7 @@ static inline uint64_t CVMX_SLI_PKT_OUTPUT_WMARK_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000011180ull;
+					return 0x0000000000001180ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000029180ull;
 			return 0x0000000000029180ull;
@@ -3038,7 +3038,7 @@ static inline uint64_t CVMX_SLI_PKT_OUTPUT_WMARK_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000011180ull;
+				return 0x0000000000001180ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000029180ull;
 			return 0x0000000000029180ull;
@@ -3167,7 +3167,7 @@ static inline uint64_t CVMX_SLI_PKT_RING_RST_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x00000000000111E0ull;
+					return 0x00000000000011E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x00000000000291E0ull;
 			return 0x00000000000291E0ull;
@@ -3186,7 +3186,7 @@ static inline uint64_t CVMX_SLI_PKT_RING_RST_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000111E0ull;
+				return 0x00000000000011E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000291E0ull;
 			return 0x00000000000291E0ull;
@@ -3244,7 +3244,7 @@ static inline uint64_t CVMX_SLI_PKT_TIME_INT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000011140ull;
+					return 0x0000000000001140ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000029140ull;
 			return 0x0000000000029140ull;
@@ -3269,7 +3269,7 @@ static inline uint64_t CVMX_SLI_PKT_TIME_INT_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000011140ull;
+				return 0x0000000000001140ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000029140ull;
 			return 0x0000000000029140ull;
@@ -3372,7 +3372,7 @@ static inline uint64_t CVMX_SLI_S2M_PORTX_CTL(unsigned long offset)
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
-					return 0x0000000000013D80ull + ((offset) & 3) * 16;
+					return 0x0000000000003D80ull + ((offset) & 3) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000000000023D80ull + ((offset) & 3) * 16;
@@ -3400,7 +3400,7 @@ static inline uint64_t CVMX_SLI_S2M_PORTX_CTL(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000013D80ull + (offset) * 16;
+				return 0x0000000000003D80ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000023D80ull + (offset) * 16;
 			return 0x0000000000023D80ull + (offset) * 16;
@@ -3425,7 +3425,7 @@ static inline uint64_t CVMX_SLI_SCRATCH_1_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x00000000000103C0ull;
+					return 0x00000000000003C0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x00000000000283C0ull;
 			return 0x00000000000283C0ull;
@@ -3450,7 +3450,7 @@ static inline uint64_t CVMX_SLI_SCRATCH_1_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000103C0ull;
+				return 0x00000000000003C0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000283C0ull;
 			return 0x00000000000283C0ull;
@@ -3475,7 +3475,7 @@ static inline uint64_t CVMX_SLI_SCRATCH_2_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x00000000000103D0ull;
+					return 0x00000000000003D0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x00000000000283D0ull;
 			return 0x00000000000283D0ull;
@@ -3500,7 +3500,7 @@ static inline uint64_t CVMX_SLI_SCRATCH_2_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000103D0ull;
+				return 0x00000000000003D0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000283D0ull;
 			return 0x00000000000283D0ull;
@@ -3525,7 +3525,7 @@ static inline uint64_t CVMX_SLI_STATE1_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000010620ull;
+					return 0x0000000000000620ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000028620ull;
 			return 0x0000000000028620ull;
@@ -3550,7 +3550,7 @@ static inline uint64_t CVMX_SLI_STATE1_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010620ull;
+				return 0x0000000000000620ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000028620ull;
 			return 0x0000000000028620ull;
@@ -3575,7 +3575,7 @@ static inline uint64_t CVMX_SLI_STATE2_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000010630ull;
+					return 0x0000000000000630ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000028630ull;
 			return 0x0000000000028630ull;
@@ -3600,7 +3600,7 @@ static inline uint64_t CVMX_SLI_STATE2_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010630ull;
+				return 0x0000000000000630ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000028630ull;
 			return 0x0000000000028630ull;
@@ -3625,7 +3625,7 @@ static inline uint64_t CVMX_SLI_STATE3_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x0000000000010640ull;
+					return 0x0000000000000640ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x0000000000028640ull;
 			return 0x0000000000028640ull;
@@ -3650,7 +3650,7 @@ static inline uint64_t CVMX_SLI_STATE3_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x0000000000010640ull;
+				return 0x0000000000000640ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x0000000000028640ull;
 			return 0x0000000000028640ull;
@@ -3686,7 +3686,7 @@ static inline uint64_t CVMX_SLI_WINDOW_CTL_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-					return 0x00000000000102E0ull;
+					return 0x00000000000002E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 					return 0x00000000000282E0ull;
 			return 0x00000000000282E0ull;
@@ -3711,7 +3711,7 @@ static inline uint64_t CVMX_SLI_WINDOW_CTL_FUNC(void)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
-				return 0x00000000000102E0ull;
+				return 0x00000000000002E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				return 0x00000000000282E0ull;
 			return 0x00000000000282E0ull;
@@ -4443,29 +4443,17 @@ union cvmx_sli_ciu_int_sum {
 	uint64_t m1p0_dmapf_err               : 1;  /**< On Mac1 PF0, when an error response is received for a PF DMA transcation read, this bit is
                                                          set.
                                                          Throws SLI_INTSN_E::SLI_INT_M1P0_DMAPF_ERR. */
-	uint64_t m0p1_pppf_err                : 1;  /**< On Mac0 PF1, when an error response is received for a PF PP transaction read,
-                                                         this bit is set.
+	uint64_t m0p1_pppf_err                : 1;  /**< This interrupt cannot occur in o75.
                                                          Throws SLI_INTSN_E::SLI_INT_M0P1_PPPF_ERR. */
-	uint64_t m0p1_ppvf_err                : 1;  /**< On Mac0 PF1, when an error response is received for a VF PP transaction read, this bit is
-                                                         set. This bit should be cleared and followed by a read to SLI_MAC()_PF()_PP_VF_INT to
-                                                         discover which VF.
+	uint64_t m0p1_ppvf_err                : 1;  /**< This interrupt cannot occur in o75.
                                                          Throws SLI_INTSN_E::SLI_INT_M0P1_PPVF_ERR. */
-	uint64_t m0p1_pktpf_err               : 1;  /**< On Mac0 PF1, When an error response is received for a PF packet transaction read or a
-                                                         doorbell
-                                                         overflow for a ring associated with this PF occurs,
-                                                         this bit is set.
+	uint64_t m0p1_pktpf_err               : 1;  /**< This interrupt cannot occur in o75.
                                                          Throws SLI_INTSN_E::SLI_INT_M0P1_PKTPF_ERR. */
-	uint64_t m0p1_pktvf_err               : 1;  /**< On Mac0 PF1, when an error response is received for a VF PP transaction read, a doorbell
-                                                         overflow for a ring associated with a VF occurs or an illegal memory access from a VF
-                                                         occurs, this bit is set. This bit should be cleared and followed by a read to
-                                                         SLI_MAC()_PF()_PKT_VF_INT to discover which VF.
+	uint64_t m0p1_pktvf_err               : 1;  /**< This interrupt cannot occur in o75.
                                                          Throws SLI_INTSN_E::SLI_INT_M0P1_PKTVF_ERR. */
-	uint64_t m0p1_dmapf_err               : 1;  /**< On Mac0 PF1, when an error response is received for a PF DMA transcation read, this bit is
-                                                         set.
+	uint64_t m0p1_dmapf_err               : 1;  /**< This interrupt cannot occur in o75.
                                                          Throws SLI_INTSN_E::SLI_INT_M0P1_DMAPF_ERR. */
-	uint64_t m0p1_dmavf_err               : 1;  /**< When an error response is received for a VF DMA transaction read on MAC0 PF1, this bit is
-                                                         set. This bit should be cleared and followed by a read to SLI_MAC()_PF()_DMA_VF_INT to
-                                                         discover which VF.
+	uint64_t m0p1_dmavf_err               : 1;  /**< This interrupt cannot occur in o75.
                                                          Throws SLI_INTSN_E::SLI_INT_M0P1_DMAVF_ERR. */
 	uint64_t m0p0_pppf_err                : 1;  /**< On Mac0 PF0, when an error response is received for a PF PP transaction read,
                                                          this bit is set.
@@ -4473,7 +4461,7 @@ union cvmx_sli_ciu_int_sum {
 	uint64_t m0p0_ppvf_err                : 1;  /**< On Mac0 PF0, when an error response is received for a VF PP transaction read, this bit is
                                                          set. This bit should be cleared and followed by a read to SLI_MAC()_PF()_PP_VF_INT to
                                                          discover which VF is set.
-                                                         Note: this will only be set for SRIOV PF's PEM0 PF0 PF1 PEM2 PF0
+                                                         Note: this will only be set for SRIOV PF's MAC0 PF0 MAC2 PF0
                                                          Throws SLI_INTSN_E::SLI_INT_M0P0_PPVF_ERR. */
 	uint64_t m0p0_pktpf_err               : 1;  /**< On Mac0 PF0, When an error response is received for a PF packet transaction read or a
                                                          doorbell
@@ -4491,28 +4479,26 @@ union cvmx_sli_ciu_int_sum {
 	uint64_t m0p0_dmavf_err               : 1;  /**< When an error response is received for a VF DMA transaction read on MAC0 PF0, this bit is
                                                          set. This bit should be cleared and followed by a read to SLI_MAC()_PF()_DMA_VF_INT is
                                                          required to discover which VF is set.
-                                                         Note: this will only be set for SRIOV PF's PEM0 PF0 PF1 PEM2 PF0
+                                                         Note: this will only be set for SRIOV PF's MAC0 PF0 MAC2 PF0
                                                          Throws SLI_INTSN_E::SLI_INT_M0P0_DMAVF_ERR. */
-	uint64_t m2v0_flr                     : 1;  /**< A FLR occurred for a VF on PEM2 PF0
+	uint64_t m2v0_flr                     : 1;  /**< A FLR occurred for a VF on MAC2 PF0
                                                          This bit should be cleared and followed by a read to SLI_MAC()_PF()_FLR_VF_INT to discover
                                                          which VF experienced the FLR.
                                                          Throws SLI_INTSN_E::SLI_INT_M2V0_FLR. */
-	uint64_t m2p0_flr                     : 1;  /**< A FLR occurred for PEM0 PF2. This bit should be cleared and followed by a read to
+	uint64_t m2p0_flr                     : 1;  /**< A FLR occurred for MAC0 PF2. This bit should be cleared and followed by a read to
                                                          SLI_MAC()_PF()_FLR_VF_INT
                                                          to discover which VF experienced the FLR.
                                                          Throws SLI_INTSN_E::SLI_INT_M2P0_FLR. */
 	uint64_t reserved_5_8                 : 4;
-	uint64_t m0v1_flr                     : 1;  /**< A FLR occurred for a VF on PEM0 PF1
-                                                         This bit should be cleared and followed by a read to SLI_MAC()_PF()_FLR_VF_INT
-                                                         to discover which VF experienced the FLR.
+	uint64_t m0v1_flr                     : 1;  /**< This interrupt cannot occur in o75.
                                                          Throws SLI_INTSN_E::SLI_INT_M0V1_FLR. */
-	uint64_t m0p1_flr                     : 1;  /**< A FLR occurred for PEM0 PF1.
+	uint64_t m0p1_flr                     : 1;  /**< This interrupt cannot occur in o75.
                                                          Throws SLI_INTSN_E::SLI_INT_M0P1_FLR. */
-	uint64_t m0v0_flr                     : 1;  /**< A FLR occurred for a VF on PEM0 PF0. This bit should be cleared and followed by a read to
+	uint64_t m0v0_flr                     : 1;  /**< A FLR occurred for a VF on MAC0 PF0. This bit should be cleared and followed by a read to
                                                          SLI_MAC()_PF()_FLR_VF_INT
                                                          to discover which VF experienced the FLR.
                                                          Throws SLI_INTSN_E::SLI_INT_M0V0_FLR. */
-	uint64_t m0p0_flr                     : 1;  /**< A FLR occurred for PEM0 PF0.
+	uint64_t m0p0_flr                     : 1;  /**< A FLR occurred for MAC0 PF0.
                                                          Throws SLI_INTSN_E::SLI_INT_M0P0_FLR. */
 	uint64_t rml_to                       : 1;  /**< A read or write transfer to a RSL that did not complete within
                                                          SLI_WINDOW_CTL[TIME] coprocessor-clock cycles
@@ -4579,7 +4565,7 @@ typedef union cvmx_sli_ciu_int_sum cvmx_sli_ciu_int_sum_t;
  * cvmx_sli_ctl_port#
  *
  * These registers contains control information for access to ports. Indexed by SLI_PORT_E.
- * Note: SLI_CTL_PORT0 controls PF0 and PF1
+ * Note: SLI_CTL_PORT0 controls PF0
  */
 union cvmx_sli_ctl_portx {
 	uint64_t u64;
@@ -7365,7 +7351,7 @@ typedef union cvmx_sli_last_win_rdata3 cvmx_sli_last_win_rdata3_t;
  * When an error response is received for a VF DMA transaction read, the appropriate VF indexed
  * bit is set.  The appropriate PF should read the appropriate register.
  * Indexed by (MAC index) SLI_PORT_E.
- * These registers are only valid for PEM0
+ * These registers are only valid for MAC0
  */
 union cvmx_sli_macx_pfx_dma_vf_int {
 	uint64_t u64;
@@ -7388,7 +7374,7 @@ typedef union cvmx_sli_macx_pfx_dma_vf_int cvmx_sli_macx_pfx_dma_vf_int_t;
  * cvmx_sli_mac#_pf#_dma_vf_int_enb
  *
  * Indexed by (MAC index) SLI_PORT_E.
- * These registers are only valid for PEM0 PF0
+ * These registers are only valid for MAC0 PF0
  */
 union cvmx_sli_macx_pfx_dma_vf_int_enb {
 	uint64_t u64;
@@ -7408,9 +7394,8 @@ typedef union cvmx_sli_macx_pfx_dma_vf_int_enb cvmx_sli_macx_pfx_dma_vf_int_enb_
 /**
  * cvmx_sli_mac#_pf#_flr_vf_int
  *
- * When a
  * Indexed by (MAC index) SLI_PORT_E.
- * These registers are only valid for PEM0 PF0
+ * These registers are only valid for MAC0 PF0
  */
 union cvmx_sli_macx_pfx_flr_vf_int {
 	uint64_t u64;
@@ -7432,8 +7417,7 @@ typedef union cvmx_sli_macx_pfx_flr_vf_int cvmx_sli_macx_pfx_flr_vf_int_t;
  *
  * Interrupt enable register for a given PF SLI_MAC()_PF()_INT_SUM register.
  * Indexed by (MAC index) SLI_PORT_E.
- * CN73XX valid copies are MAC0 PF0, MAC0 PF1, MAC1 PF0, MAC2 PF0, MAC3 PF3
- * PEM0 PF0, PEM0 PF1, PEM1 PF0, PEM2 PF0, PEM3 PF0,
+ * CN73XX valid copies are MAC0 PF0, MAC1 PF0, MAC2 PF0, MAC3 PF0
  */
 union cvmx_sli_macx_pfx_int_enb {
 	uint64_t u64;
@@ -7443,20 +7427,20 @@ union cvmx_sli_macx_pfx_int_enb {
                                                          for MSI/INTA. */
 	uint64_t ppvf_err                     : 1;  /**< Enables SLI_MAC()_PF()_INT_SUM[PPVF_ERR] to generate an interrupt to the MAC core
                                                          for MSI/INTA.
-                                                         Note: this corresponding interrupt will only be valid for SRIOV PF's PEM0 PF0 PF1 PEM2 PF0 */
+                                                         Note: this corresponding interrupt will only be valid for SRIOV PF's MAC0 PF0 MAC2 PF0 */
 	uint64_t pktpf_err                    : 1;  /**< Enables SLI_MAC()_PF()_INT_SUM[PKTPF_ERR] to generate an interrupt to the MAC core
                                                          for MSI/INTA. */
 	uint64_t pktvf_err                    : 1;  /**< Enables SLI_MAC()_PF()_INT_SUM[PKTVF_ERR] to generate an interrupt to the MAC core
                                                          for MSI/INTA.
-                                                         Note: this corresponding interrupt will only be valid for SRIOV PF's PEM0 PF0 PF1 PEM2 PF0 */
+                                                         Note: this corresponding interrupt will only be valid for SRIOV PF's MAC0 PF0 MAC2 PF0 */
 	uint64_t dmapf_err                    : 1;  /**< Enables SLI_MAC()_PF()_INT_SUM[DMAPF_ERR] to generate an interrupt to the MAC core
                                                          for MSI/INTA. */
 	uint64_t dmavf_err                    : 1;  /**< Enables SLI_MAC()_PF()_INT_SUM[DMAVF_ERR] to generate an interrupt to the MAC core
                                                          for MSI/INTA.
-                                                         Note: this corresponding interrupt will only be valid for SRIOV PF's PEM0 PF0 PF1 PEM2 PF0 */
+                                                         Note: this corresponding interrupt will only be valid for SRIOV PF's MAC0 PF0 MAC2 PF0 */
 	uint64_t vf_mbox                      : 1;  /**< Enables SLI_MAC()_PF()_INT_SUM[VF_MBOX] to generate an interrupt to the MAC core
                                                          for MSI/INTA.
-                                                         Note: this corresponding interrupt will only be valid for SRIOV PF's PEM0 PF0 PF1 PEM2 PF0 */
+                                                         Note: this corresponding interrupt will only be valid for SRIOV PF's MAC0 PF0 MAC2 PF0 */
 	uint64_t reserved_38_56               : 19;
 	uint64_t dtime                        : 2;  /**< Enables SLI_MAC()_PF()_INT_SUM[DTIME] to generate an interrupt to the MAC core for
                                                          MSI/INTA. */
@@ -7516,10 +7500,8 @@ typedef union cvmx_sli_macx_pfx_int_enb cvmx_sli_macx_pfx_int_enb_t;
  * cvmx_sli_mac#_pf#_int_sum
  *
  * Interrupt summary register for a given PF. Indexed (MAC index) by SLI_PORT_E.
- * CN73XX valid copies are MAC0 PF0, MAC0 PF1, MAC1 PF0, MAC2 PF0, MAC3 PF0
+ * CN73XX valid copies are MAC0 PF0, MAC1 PF0, MAC2 PF0, MAC3 PF0
  * The fields in this register are set when an interrupt condition occurs; write 1 to clear.
- * These register are valid for these physical functions
- * PEM0 PF0, PEM0 PF1, PEM1 PF0, PEM2 PF0, PEM3 PF0,
  */
 union cvmx_sli_macx_pfx_int_sum {
 	uint64_t u64;
@@ -7528,7 +7510,7 @@ union cvmx_sli_macx_pfx_int_sum {
 	uint64_t pppf_err                     : 1;  /**< When an error response is received for a PF PP transaction read, this bit is set. */
 	uint64_t ppvf_err                     : 1;  /**< When an error response is received for a VF PP transaction read, this bit is set.
                                                          A subsequent read to SLI_MAC()_PF()_PP_VF_INT is required to discover which VF.
-                                                         Note: this will only be set for SRIOV PF's PEM0 PF0 PF1 PEM2 PF0 */
+                                                         Note: this will only be set for SRIOV PF's MAC0 PF0 MAC2 PF0 */
 	uint64_t pktpf_err                    : 1;  /**< This bit is set when any of the following events occur
                                                          1) An error response is received for PF packet transaction read.
                                                          2) A doorbell overflow for a ring associated with this PF occurs in
@@ -7543,16 +7525,16 @@ union cvmx_sli_macx_pfx_int_sum {
                                                             and SLI_PKTX_SLIST_BAOFF_DBELL[DBELL] = 0.
                                                          4) An illegal bar0 bar1 bar2 memory access from a VF occurs.
                                                          A subsequent read to SLI_MAC()_PF()_PKT_VF_INT is required to discover which VF.
-                                                         Note: this will only be set for SRIOV PF's PEM0 PF0 PF1 PEM2 PF0 */
+                                                         Note: this will only be set for SRIOV PF's MAC0 PF0 MAC2 PF0 */
 	uint64_t dmapf_err                    : 1;  /**< When an error response is received for a PF DMA transcation read, this bit is set. */
 	uint64_t dmavf_err                    : 1;  /**< When an error response is received for a VF DMA transaction read, this bit is set.
                                                          A subsequent read to SLI_MAC()_PF()_DMA_VF_INT is required to discover which VF.
-                                                         Note: this will only be set for SRIOV PF's PEM0 PF0 PF1 PEM2 PF0 */
+                                                         Note: this will only be set for SRIOV PF's MAC0 PF0 MAC2 PF0 */
 	uint64_t vf_mbox                      : 1;  /**< When an VF wants to communicate to a PF it writes its SLI_PKT_PF_MBOX_SIG2 register
                                                          causing
                                                          this bit to be set.
                                                          A subsequent read to SLI_MAC()_PF()_MBOX_INT is required to discover which VF.
-                                                         Note: this will only be set for SRIOV PF's PEM0 PF0 PF1 PEM2 PF0 */
+                                                         Note: this will only be set for SRIOV PF's MAC0 PF0 MAC2 PF0 */
 	uint64_t reserved_38_56               : 19;
 	uint64_t dtime                        : 2;  /**< Whenever SLI_DMA()_CNT[CNT] is not 0, the SLI_DMA()_TIM[TIM] timer increments
                                                          every SLI clock. DTIME<x> is set whenever SLI_DMA()_TIM[TIM] >
@@ -7584,9 +7566,7 @@ union cvmx_sli_macx_pfx_int_sum {
                                                          for legacy code.
                                                          Packet counter has an interrupt. The specific rings can be found in SLI_PKT_CNT_INT. */
 	uint64_t reserved_2_3                 : 2;
-	uint64_t mio_int                      : 1;  /**< Interrupt from CIU for this PF. Each PF has a seperate interrupt from CIU, except MAC 0
-                                                         PF0 and PF1
-                                                         which share a common interrupts from CIU, */
+	uint64_t mio_int                      : 1;  /**< Interrupt from CIU for this PF. Each PF has a seperate interrupt from CIU. */
 	uint64_t rml_to                       : 1;  /**< A read or write transfer to a RSL that did not complete within
                                                          SLI_WINDOW_CTL[TIME] coprocessor-clock cycles. */
 #else
@@ -7624,7 +7604,7 @@ typedef union cvmx_sli_macx_pfx_int_sum cvmx_sli_macx_pfx_int_sum_t;
  * cvmx_sli_mac#_pf#_mbox_int
  *
  * Indexed by (MAC index) SLI_PORT_E.
- * These registers are only valid for PEM0 PF0
+ * These registers are only valid for MAC0 PF0
  */
 union cvmx_sli_macx_pfx_mbox_int {
 	uint64_t u64;
@@ -7651,7 +7631,7 @@ typedef union cvmx_sli_macx_pfx_mbox_int cvmx_sli_macx_pfx_mbox_int_t;
  * the appropriate VF indexed bit is set.  The appropriate PF should read the appropriate
  * register.
  * Indexed by (MAC index) SLI_PORT_E.
- * These registers are only valid for PEM0 PF0
+ * These registers are only valid for MAC0 PF0
  */
 union cvmx_sli_macx_pfx_pkt_vf_int {
 	uint64_t u64;
@@ -7674,7 +7654,7 @@ typedef union cvmx_sli_macx_pfx_pkt_vf_int cvmx_sli_macx_pfx_pkt_vf_int_t;
  * cvmx_sli_mac#_pf#_pkt_vf_int_enb
  *
  * Indexed by (MAC index) SLI_PORT_E.
- * These registers are only valid for PEM0 PF0
+ * These registers are only valid for MAC0 PF0
  */
 union cvmx_sli_macx_pfx_pkt_vf_int_enb {
 	uint64_t u64;
@@ -7697,7 +7677,7 @@ typedef union cvmx_sli_macx_pfx_pkt_vf_int_enb cvmx_sli_macx_pfx_pkt_vf_int_enb_
  * When an error response is received for a VF PP transaction read, the appropriate VF indexed
  * bit is set.  The appropriate PF should read the appropriate register.
  * Indexed by (MAC index) SLI_PORT_E.
- * These registers are only valid for PEM0 PF0
+ * These registers are only valid for MAC0 PF0
  */
 union cvmx_sli_macx_pfx_pp_vf_int {
 	uint64_t u64;
@@ -7720,7 +7700,7 @@ typedef union cvmx_sli_macx_pfx_pp_vf_int cvmx_sli_macx_pfx_pp_vf_int_t;
  * cvmx_sli_mac#_pf#_pp_vf_int_enb
  *
  * Indexed by (MAC index) SLI_PORT_E.
- * These registers are only valid for PEM0 PF0
+ * These registers are only valid for MAC0 PF0
  */
 union cvmx_sli_macx_pfx_pp_vf_int_enb {
 	uint64_t u64;
@@ -8807,10 +8787,10 @@ typedef union cvmx_sli_msi_wr_map cvmx_sli_msi_wr_map_t;
  * The MSI-X table cannot be burst read or written.
  *
  * The MSI-X Table is (128 + 5) entries deep. Each PF of a MAC can see up to 64 VF ring entries
- * and its own PF entry. The (MAC0,PF0), (MAC0,PF1), (MAC1,PF0), (MAC2,PF0), and (MAC3,PF0),
+ * and its own PF entry. The (MAC0,PF0), (MAC1,PF0), (MAC2,PF0), and (MAC3,PF0),
  * each can see up to 64 entries and its own PF entry.
  * The first 128 entries contain MSI-X vectors for each of the 128 DPI packet rings.
- * Entries, or rings, are assigned to (MAC0,PF0), (MAC0,PF1), and (MAC2,PF0) based on the SRN,
+ * Entries, or rings, are assigned to (MAC0,PF0), and (MAC2,PF0) based on the SRN,
  * RPVF,TRS. and NVFS fields of SLI_PKT_MAC()_RINFO.
  * Each VF has access to only its own entries and therefore sees the MSI-X table as large as 8
  * entries,
@@ -11479,10 +11459,10 @@ typedef union cvmx_sli_pkt_iptr cvmx_sli_pkt_iptr_t;
  * correlate with the fields in this register.
  *
  * e.g. Given:
- * _ SLI_PKT_MAC0_PF1_RINFO[SRN] = 32,
- * _ SLI_PKT_MAC0_PF1_RINFO[TRS] = 35,
- * _ SLI_PKT_MAC0_PF1_RINFO[RPVF] = 4,
- * _ SLI_PKT_MAC0_PF1_RINFO[NVFS] = 7:
+ * _ SLI_PKT_MAC0_PF0_RINFO[SRN] = 32,
+ * _ SLI_PKT_MAC0_PF0_RINFO[TRS] = 35,
+ * _ SLI_PKT_MAC0_PF0_RINFO[RPVF] = 4,
+ * _ SLI_PKT_MAC0_PF0_RINFO[NVFS] = 7:
  * _ rings owned by VF1: 32,33,34,35
  * _ rings owned by VF2: 36,37,38,39
  * _ rings owned by VF3: 40,41,42,43
@@ -11492,7 +11472,7 @@ typedef union cvmx_sli_pkt_iptr cvmx_sli_pkt_iptr_t;
  * _ rings owned by VF7: 56,57,58,59
  * _ rings owned by PF:  60,61,62,63,64,65,66
  *
- * CNXXXX valid copies are MAC0 PF0, MAC0 PF1, MAC1 PF0, MAC2 PF0, MAC3 PF3.
+ * CNXXXX valid copies are MAC0 PF0, MAC1 PF0, MAC2 PF0, MAC3 PF3.
  */
 union cvmx_sli_pkt_macx_pfx_rinfo {
 	uint64_t u64;
@@ -11917,8 +11897,7 @@ union cvmx_sli_pkt_out_bp_en2_w1c {
 	struct cvmx_sli_pkt_out_bp_en2_w1c_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t w1c                          : 64; /**< When set, disables the channel-level backpressure to be sent to PKO. Backpressure is sent
-                                                         to
-                                                         the PKO on the channels 0x140-0x17F. See SLI_PKT_OUTPUT_WMARK[WMARK].
+                                                         to the PKO on the channels 0x140-0x17F. See SLI_PKT_OUTPUT_WMARK[WMARK].
                                                          A read of this register will return the current value of the enables for those channels. */
 #else
 	uint64_t w1c                          : 64;
@@ -11939,8 +11918,7 @@ union cvmx_sli_pkt_out_bp_en2_w1s {
 	struct cvmx_sli_pkt_out_bp_en2_w1s_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t w1s                          : 64; /**< When set, enables the channel-level backpressure to be sent to PKO. Backpressure is sent
-                                                         to
-                                                         the PKO on the channels 0x140-0x17F. See SLI_PKT_OUTPUT_WMARK[WMARK].
+                                                         to the PKO on the channels 0x140-0x17F. See SLI_PKT_OUTPUT_WMARK[WMARK].
                                                          A read of this register will return the current value of the enables for those channels. */
 #else
 	uint64_t w1s                          : 64;
@@ -11961,8 +11939,7 @@ union cvmx_sli_pkt_out_bp_en_w1c {
 	struct cvmx_sli_pkt_out_bp_en_w1c_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t w1c                          : 64; /**< When set, disables the channel-level backpressure to be sent to PKO. Backpressure is sent
-                                                         to
-                                                         the PKO on the channels 0x100-0x13F. See SLI_PKT_OUTPUT_WMARK[WMARK].
+                                                         to the PKO on the channels 0x100-0x13F. See SLI_PKT_OUTPUT_WMARK[WMARK].
                                                          A read of this register will return the current value of the enables for those channels. */
 #else
 	uint64_t w1c                          : 64;
@@ -11985,8 +11962,7 @@ union cvmx_sli_pkt_out_bp_en_w1s {
 	struct cvmx_sli_pkt_out_bp_en_w1s_s {
 #ifdef __BIG_ENDIAN_BITFIELD
 	uint64_t w1s                          : 64; /**< When set, enables the channel-level backpressure to be sent to PKO. Backpressure is sent
-                                                         to
-                                                         the PKO on the channels 0x100-0x13F. See SLI_PKT_OUTPUT_WMARK[WMARK].
+                                                         to the PKO on the channels 0x100-0x13F. See SLI_PKT_OUTPUT_WMARK[WMARK].
                                                          A read of this register will return the current value of the enables for those channels. */
 #else
 	uint64_t w1s                          : 64;
@@ -12111,8 +12087,7 @@ typedef union cvmx_sli_pkt_pcie_port cvmx_sli_pkt_pcie_port_t;
  * cvmx_sli_pkt_pkind_valid
  *
  * Enables bits per PKIND that are allowed to be sent to PKI specified in the
- * DPI_PKT_INST_HDR_S[PKIND]
- * DPI packet instruction field.
+ * DPI_PKT_INST_HDR_S[PKIND] DPI packet instruction field.
  */
 union cvmx_sli_pkt_pkind_valid {
 	uint64_t u64;
-- 
1.7.5.4

