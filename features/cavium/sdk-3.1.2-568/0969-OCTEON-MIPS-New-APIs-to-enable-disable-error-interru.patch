From c54fdde097d078c6bd9703f8a9327a4090baa31c Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Fri, 13 Nov 2015 17:25:24 -0800
Subject: [PATCH 969/974] OCTEON: MIPS: New APIs to enable/disable error
 interrupts for O3

Added octeon_error3_{enable,disable}_tree() APIs to enable/disable error
interrupts for a particular group.

Don't enable interrupts for ILK, ILA blocks by default, they will be
handled by the block initialization code.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/octeon-error-tree.c | 78 +++++++++++++++++++++++++++--
 arch/mips/include/asm/octeon/cvmx.h         |  1 +
 arch/mips/include/asm/octeon/octeon.h       |  2 +
 3 files changed, 76 insertions(+), 5 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-error-tree.c b/arch/mips/cavium-octeon/octeon-error-tree.c
index d0c1322..fbb614c 100644
--- a/arch/mips/cavium-octeon/octeon-error-tree.c
+++ b/arch/mips/cavium-octeon/octeon-error-tree.c
@@ -14,11 +14,15 @@
 
 #include <asm/octeon/octeon-hw-status.h>
 #include <asm/octeon/octeon.h>
+#include <asm/octeon/cvmx-lbk-defs.h>
 
 /* Module parameter to disable error reporting */
 static int disable;
 module_param(disable, int, S_IRUGO);
 
+static int octeon_78xx_tree_size;
+static struct cvmx_error_78xx *octeon_78xx_error_array;
+
 static struct cvmx_error_muxchild *octeon_error_tree_current;
 
 static void octeon_error_tree_remove(int idx, int max_idx, struct cvmx_error_muxchild *n,
@@ -169,6 +173,57 @@ static int octeon_error_tree_hw_status(struct notifier_block *nb, unsigned long
 
 static struct notifier_block octeon_error_tree_notifier;
 
+static int __octeon_error3_tree_change_group(enum cvmx_error_groups group, int unit, int op)
+{
+	int i;
+	int interface = (unit >> 8) & 0x7;
+	int node = (unit >> 12) & 0x3;
+	int index = (unit >> 4) & 0xf;
+	uint64_t match_ifindex = interface*0x1000000 + index*0x100000;
+
+	if (!octeon_has_feature(OCTEON_FEATURE_CIU3))
+		return 0;
+
+	for (i = 0; i < octeon_78xx_tree_size; i++) {
+		enum cvmx_error_groups grp;
+		grp = octeon_78xx_error_array[i].error_group;
+		if (grp == group) {
+			if (grp == CVMX_ERROR_GROUP_ETHERNET) {
+				/* Skip loopback interface */
+				if (octeon_78xx_error_array[i].block_csr
+						== (CVMX_LBK_INT & ~(1ull << 63)))
+					continue;
+
+				/* Only enable the unit requested */
+				if ((octeon_78xx_error_array[i].block_csr
+				     & 0xff00000ull) != match_ifindex)
+					continue;
+			}
+			/* Enable or disable error interrupt */
+			if (op == 1)
+				octeon_ciu3_errbits_disable_intsn(node,
+					octeon_78xx_error_array[i].intsn);
+			else
+				octeon_ciu3_errbits_enable_intsn(node,
+					octeon_78xx_error_array[i].intsn);
+		}
+	}
+
+	return 0;
+}
+
+int octeon_error3_tree_disable(enum cvmx_error_groups group, int unit)
+{
+	return __octeon_error3_tree_change_group(group, unit, 1);
+}
+EXPORT_SYMBOL(octeon_error3_tree_disable);
+
+int octeon_error3_tree_enable(enum cvmx_error_groups group, int unit)
+{
+	return __octeon_error3_tree_change_group(group, unit, 0);
+}
+EXPORT_SYMBOL(octeon_error3_tree_enable);
+
 int octeon_error_tree_disable(enum cvmx_error_groups group, int unit)
 {
 	struct cvmx_error_muxchild *base;
@@ -181,6 +236,9 @@ int octeon_error_tree_disable(enum cvmx_error_groups group, int unit)
 	if (!octeon_error_tree_current)
 		return -ENODEV;
 
+	if (octeon_has_feature(OCTEON_FEATURE_CIU3))
+		return octeon_error3_tree_disable(group, unit);
+
 	base = octeon_error_tree_current->children->children;
 
 	while (base->reg) {
@@ -217,6 +275,9 @@ int octeon_error_tree_enable(enum cvmx_error_groups group, int unit)
 	if (!octeon_error_tree_current)
 		return -ENODEV;
 
+	if (octeon_has_feature(OCTEON_FEATURE_CIU3))
+		return octeon_error3_tree_enable(group, unit);
+
 	memset(sr, 0, sizeof(sr));
 	base = octeon_error_tree_current->children->children;
 
@@ -275,8 +336,6 @@ static int __init octeon_error_tree_init(void)
 }
 arch_initcall(octeon_error_tree_init);
 
-static int octeon_78xx_tree_size;
-static struct cvmx_error_78xx *octeon_78xx_error_array;
 static void octeon_error_tree_handler78(int node, int intsn)
 {
 	int idx, prev_low, prev_high;
@@ -325,7 +384,11 @@ int octeon_error_tree_shutdown(void)
 
 	for_each_online_node(node) {
 		for (i = 0; octeon_78xx_error_array[i].intsn < 0xfffff; i++) {
-			if (octeon_78xx_error_array[i].error_group != CVMX_ERROR_GROUP_ETHERNET)
+			enum cvmx_error_groups group;
+			group = octeon_78xx_error_array[i].error_group;
+			if (group != CVMX_ERROR_GROUP_ETHERNET
+			    && group != CVMX_ERROR_GROUP_ILK
+			    && group != CVMX_ERROR_GROUP_ILA)
 				octeon_ciu3_errbits_disable_intsn(node, octeon_78xx_error_array[i].intsn);
 		}
 	}
@@ -362,9 +425,14 @@ static int __init octeon_error_tree_init78(void)
 	octeon_78xx_error_array = array->array;
 
 	for_each_online_node(node)
-		for (i = 0; octeon_78xx_error_array[i].intsn < 0xfffff; i++)
-			if (octeon_78xx_error_array[i].error_group != CVMX_ERROR_GROUP_ETHERNET)
+		for (i = 0; octeon_78xx_error_array[i].intsn < 0xfffff; i++) {
+			enum cvmx_error_groups group;
+			group = octeon_78xx_error_array[i].error_group;
+			if (group != CVMX_ERROR_GROUP_ETHERNET
+			    && group != CVMX_ERROR_GROUP_ILK
+			    && group != CVMX_ERROR_GROUP_ILA)
 				octeon_ciu3_errbits_enable_intsn(node, octeon_78xx_error_array[i].intsn);
+		}
 
 	return 0;
 }
diff --git a/arch/mips/include/asm/octeon/cvmx.h b/arch/mips/include/asm/octeon/cvmx.h
index 2ca8a39..de5b6ae 100644
--- a/arch/mips/include/asm/octeon/cvmx.h
+++ b/arch/mips/include/asm/octeon/cvmx.h
@@ -552,6 +552,7 @@ enum cvmx_error_groups {
 	CVMX_ERROR_GROUP_LMC,
 	CVMX_ERROR_GROUP_L2C,
 	CVMX_ERROR_GROUP_DFM,
+	CVMX_ERROR_GROUP_ILA,
 };
 
 struct cvmx_error_regbit {
diff --git a/arch/mips/include/asm/octeon/octeon.h b/arch/mips/include/asm/octeon/octeon.h
index b6e1699..5e700d7 100644
--- a/arch/mips/include/asm/octeon/octeon.h
+++ b/arch/mips/include/asm/octeon/octeon.h
@@ -426,6 +426,8 @@ struct irq_domain *octeon_irq_get_block_domain(int node, uint8_t block);
 int octeon_error_tree_enable(enum cvmx_error_groups group, int unit);
 int octeon_error_tree_disable(enum cvmx_error_groups group, int unit);
 int octeon_error_tree_shutdown(void);
+int octeon_error3_tree_enable(enum cvmx_error_groups group, int unit);
+int octeon_error3_tree_disable(enum cvmx_error_groups group, int unit);
 #else
 static inline int octeon_error_tree_enable(enum cvmx_error_groups group, int unit)
 {
-- 
2.6.2

