From b9cb227f055dd74ef2d2df7f9798e2670f0b0065 Mon Sep 17 00:00:00 2001
From: Carlos Munoz <cmunoz@caviumnetworks.com>
Date: Mon, 24 Aug 2015 13:04:03 -0700
Subject: [PATCH 140/184] netdev: octeon3-ethernet: Add TSO support.

Source: Cavium Networks, Inc.
MR: 00000
Type: Integration
Disposition: Merged from Octeon Tree
ChangeID: ba71238d47c794135fe7a00b789557c92e53037d
Description:

Signed-off-by: Carlos Munoz <cmunoz@caviumnetworks.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from octeon-linux-kernel-patches-SDK-3.1.2-release]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/octeon/octeon-feature.h  |  8 ++++++++
 drivers/net/ethernet/octeon/octeon3-ethernet.c | 17 +++++++++++++++++
 2 files changed, 25 insertions(+)

diff --git a/arch/mips/include/asm/octeon/octeon-feature.h b/arch/mips/include/asm/octeon/octeon-feature.h
index ddb9825..bfe5c54 100644
--- a/arch/mips/include/asm/octeon/octeon-feature.h
+++ b/arch/mips/include/asm/octeon/octeon-feature.h
@@ -176,6 +176,8 @@ typedef enum {
 				/**<  Octeon has HNA */
 	OCTEON_FEATURE_OCX,
 				/**<  Octeon has OCX */
+	OCTEON_FEATURE_TSO,
+				/**< Octeon has tcp segmentation offload */
 	OCTEON_MAX_FEATURE
 } octeon_feature_t;
 
@@ -484,6 +486,12 @@ static inline int octeon_has_feature_OCTEON_FEATURE_OCX(void)
 {
 	return OCTEON_IS_MODEL(OCTEON_CN78XX) && !OCTEON_IS_MODEL(OCTEON_CN76XX);
 }
+
+static inline int octeon_has_feature_OCTEON_FEATURE_TSO(void)
+{
+	return OCTEON_IS_MODEL(OCTEON_CN73XX);
+}
+
 /*
  * bit map for octeon features
  */
diff --git a/drivers/net/ethernet/octeon/octeon3-ethernet.c b/drivers/net/ethernet/octeon/octeon3-ethernet.c
index a891392..a7cda33 100644
--- a/drivers/net/ethernet/octeon/octeon3-ethernet.c
+++ b/drivers/net/ethernet/octeon/octeon3-ethernet.c
@@ -1487,6 +1487,9 @@ static int octeon3_eth_common_ndo_init(struct net_device	*netdev,
 	if (!OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 		netdev->features |= NETIF_F_SCTP_CRC;
 
+	if (octeon_has_feature(OCTEON_FEATURE_TSO))
+		netdev->features |= NETIF_F_TSO | NETIF_F_TSO6;
+
 	priv->rx_buf_count = num_packet_buffers;
 
 	ipd_port = cvmx_helper_get_ipd_port(priv->xiface, priv->port_index);
@@ -1896,6 +1899,7 @@ static int octeon3_eth_ndo_start_xmit(struct sk_buff *skb, struct net_device *ne
 	union cvmx_pko_lmtdma_data lmtdma_data;
 	union cvmx_pko_query_rtn query_rtn;
 	union cvmx_sso_grpx_aq_cnt aq_cnt;
+	union cvmx_pko_send_tso send_tso;
 	struct octeon3_ethernet_node *oen;
 	u8 l4_hdr = 0;
 	unsigned int checksum_alg;
@@ -1908,6 +1912,7 @@ static int octeon3_eth_ndo_start_xmit(struct sk_buff *skb, struct net_device *ne
 	int gaura = 0;
 	void *buffers_needed = NULL;
 	void **buf = NULL;
+	unsigned int mss;
 
 	frag_count = 0;
 	if (skb_has_frag_list(skb))
@@ -2038,6 +2043,18 @@ static int octeon3_eth_ndo_start_xmit(struct sk_buff *skb, struct net_device *ne
 	cvmx_scratch_write64(scr_off, send_hdr.u64);
 	scr_off += sizeof(send_hdr);
 
+	/* Add the tso descriptor if needed */
+	mss = skb_shinfo(skb)->gso_size;
+	if (mss) {
+		send_tso.u64 = 0;
+		send_tso.s.l2len = 12;
+		send_tso.s.subdc4 = CVMX_PKO_SENDSUBDC_TSO;
+		send_tso.s.sb = skb_transport_offset(skb) + tcp_hdrlen(skb);
+		send_tso.s.mss = netdev->mtu + ETH_HLEN;
+		cvmx_scratch_write64(scr_off, send_tso.u64);
+		scr_off += sizeof(send_tso);
+	}
+
 	buf_ptr.u64 = 0;
 	buf_ptr.s.subdc3 = CVMX_PKO_SENDSUBDC_GATHER;
 
-- 
1.9.1

