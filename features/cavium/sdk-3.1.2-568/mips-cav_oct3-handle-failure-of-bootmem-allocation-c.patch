From 53deb0786922acd3bb4a35bb6b11fa722373194d Mon Sep 17 00:00:00 2001
From: Shan Hai <shan.hai@windriver.com>
Date: Tue, 14 Jun 2016 10:17:07 +0800
Subject: [PATCH] mips/cav_oct3: handle failure of bootmem allocation
 correctly

The previous commit "mips/cav_octeon3: set upper limit of bootmem
allocator to max_memory" limits the upper boundary of bootmem allocator,
but it forgot to handle the allocation failure correctly, this causes
boot time hang up of the board with smaller RAM installed(e.g. 4GB).

Fix it by breaking a loop in the plat_mem_setup() when the physical
memory allocation fails in the max_memory range, since it's not reasonable
to try to allocate physical memory above installed RAM size.

Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 arch/mips/cavium-octeon/setup.c |   10 +++++++---
 1 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 84eb7ca..0d72f4b 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -1102,9 +1102,13 @@ void __init plat_mem_setup(void)
 				add_memory_region(memory, size, BOOT_MEM_RAM);
 			total += mem_alloc_size;
 		} else {
-			if (limit_max < ~0ull)
-				limit_max = ~0ull;		/* unlimitted */
-			else
+			/* Failed to allocate in the max_memory range, stop
+			 * retrying. The max_memory normally equals available
+			 * RAM size or the value of the "mem=" kernel command
+			 * line option, try to allocate physical memory above
+			 * available RAM does not make any sense.
+			 */
+			if (limit_max >= max_memory)
 				break;
 		}
 	}
-- 
1.7.5.4

