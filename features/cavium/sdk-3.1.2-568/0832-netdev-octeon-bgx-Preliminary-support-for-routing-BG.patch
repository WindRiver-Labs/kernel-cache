From cec6cb76925edaf020acbd8363483ba21ce5f172 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Sat, 5 Jul 2014 18:05:50 -0700
Subject: [PATCH 832/974] netdev: octeon-bgx: Preliminary support for routing
 BGX ports to MIX units.

Routing currently controlled by octeon-bgx-nexus parameters.

Bug #13457

Signed-off-by: David Daney <david.daney@cavium.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/octeon/octeon-bgx-nexus.c | 62 ++++++++++++++++++++++++--
 drivers/net/ethernet/octeon/octeon-bgx-port.c  | 18 ++++++++
 drivers/net/ethernet/octeon/octeon-bgx.h       |  2 +
 3 files changed, 78 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/octeon/octeon-bgx-nexus.c b/drivers/net/ethernet/octeon/octeon-bgx-nexus.c
index 1cf86d4..7da4ffb 100644
--- a/drivers/net/ethernet/octeon/octeon-bgx-nexus.c
+++ b/drivers/net/ethernet/octeon/octeon-bgx-nexus.c
@@ -42,6 +42,14 @@
 static atomic_t bgx_nexus_once[4];
 static atomic_t request_ethernet3_once;
 
+static int bgx_mix_port = -1;
+module_param(bgx_mix_port, int, S_IRUGO);
+MODULE_PARM_DESC(bgx_mix_port, "MIX port foo.");
+
+static int bgx_mix_port1 = -1;
+module_param(bgx_mix_port1, int, S_IRUGO);
+MODULE_PARM_DESC(bgx_mix_port1, "MIX port foo-prime.");
+
 static int bgx_probe(struct platform_device *pdev)
 {
 	struct bgx_platform_data platform_data;
@@ -78,16 +86,23 @@ static int bgx_probe(struct platform_device *pdev)
 	}
 
 	for_each_available_child_of_node(pdev->dev.of_node, child) {
+		bool is_mix = false;
 		union cvmx_bgxx_cmrx_config cmr_config;
+
 		if (!of_device_is_compatible(child, "cavium,octeon-7890-bgx-port"))
 			continue;
 		r = of_property_read_u32(child, "reg", &port);
 		if (r)
 			return -ENODEV;
 
+		if (bgx_mix_port == ((numa_node << 8) | (interface << 4) | port))
+			is_mix = true;
+		if (bgx_mix_port1 == ((numa_node << 8) | (interface << 4) | port))
+			is_mix = true;
+
 		/* Connect to PKI/PKO */
 		cmr_config.u64 = cvmx_read_csr_node(numa_node, CVMX_BGXX_CMRX_CONFIG(port, interface));
-		cmr_config.s.mix_en = 0;
+		cmr_config.s.mix_en = is_mix ? 1 : 0;
 		cvmx_write_csr_node(numa_node, CVMX_BGXX_CMRX_CONFIG(port, interface), cmr_config.u64);
 
 		snprintf(id, sizeof(id), "%llx.%u.ethernet-mac", (unsigned long long)addr, port);
@@ -100,9 +115,11 @@ static int bgx_probe(struct platform_device *pdev)
 		platform_data.interface = interface;
 		platform_data.port = port;
 
-		pki_dev = platform_device_register_data(&new_dev->dev, "ethernet-mac-pki", pki_id++,
+		pki_dev = platform_device_register_data(&new_dev->dev,
+							is_mix ? "octeon_mgmt" : "ethernet-mac-pki",
+							pki_id++,
 							&platform_data, sizeof(platform_data));
-		dev_info(&pdev->dev, "Created PKI %u: %p\n", pki_dev->id, pki_dev);
+		dev_info(&pdev->dev, "Created %s %u: %p\n", is_mix ? "MIX" : "PKI", pki_dev->id, pki_dev);
 #ifdef CONFIG_NUMA
 		new_dev->dev.numa_node = pdev->dev.numa_node;
 		pki_dev->dev.numa_node = pdev->dev.numa_node;
@@ -151,7 +168,44 @@ void bgx_nexus_load(void)
 }
 EXPORT_SYMBOL(bgx_nexus_load);
 
-module_platform_driver(bgx_driver);
+static int __init bgx_driver_init(void)
+{
+	int p0 = bgx_mix_port & 0xf;
+	int p1 = bgx_mix_port1 & 0xf;
+	int r;
+
+	if (bgx_mix_port != -1 && bgx_mix_port1 != -1 && p1 == p0) {
+		pr_err("ERROR: octeon-bgx-nexus: bgx_mix_port and bgx_mix_port1 conflict (%03x:%03x)\n",
+		       bgx_mix_port, bgx_mix_port1);
+		r = -EINVAL;
+		goto err;
+	}
+
+	if (bgx_mix_port != -1 && p0 > 1) {
+		pr_err("ERROR: octeon-bgx-nexus: bgx_mix_port invalid (%03x)\n",
+		       bgx_mix_port);
+		r = -EINVAL;
+		goto err;
+	}
+	if (bgx_mix_port1 != -1 && p1 > 1) {
+		pr_err("ERROR: octeon-bgx-nexus: bgx_mix_port1 invalid (%03x)\n",
+		       bgx_mix_port1);
+		r = -EINVAL;
+		goto err;
+	}
+
+	r = platform_driver_register(&bgx_driver);
+err:
+	return r;
+}
+
+static void __exit bgx_driver_exit(void)
+{
+	platform_driver_unregister(&bgx_driver);
+}
+
+module_init(bgx_driver_init);
+module_exit(bgx_driver_exit);
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Cavium Networks <support@caviumnetworks.com>");
diff --git a/drivers/net/ethernet/octeon/octeon-bgx-port.c b/drivers/net/ethernet/octeon/octeon-bgx-port.c
index aa03aad..78a82d6 100644
--- a/drivers/net/ethernet/octeon/octeon-bgx-port.c
+++ b/drivers/net/ethernet/octeon/octeon-bgx-port.c
@@ -441,6 +441,24 @@ int bgx_port_change_mtu(struct net_device *netdev, int new_mtu)
 }
 EXPORT_SYMBOL(bgx_port_change_mtu);
 
+void bgx_port_mix_assert_reset(struct net_device *netdev, int mix, bool v)
+{
+	u64 global_config;
+	struct bgx_port_priv *priv = bgx_port_netdev2priv(netdev);
+	u64 mask = 1ull << (3 + (mix & 1));
+
+	global_config = cvmx_read_csr_node(priv->numa_node,
+					   CVMX_BGXX_CMR_GLOBAL_CONFIG(priv->bgx_interface));
+
+	if (v)
+		global_config |= mask;
+	else
+		global_config &= ~mask;
+
+	cvmx_write_csr_node(priv->numa_node, CVMX_BGXX_CMR_GLOBAL_CONFIG(priv->bgx_interface), global_config);
+}
+EXPORT_SYMBOL(bgx_port_mix_assert_reset);
+
 static int bgx_port_probe(struct platform_device *pdev)
 {
 	u64 addr;
diff --git a/drivers/net/ethernet/octeon/octeon-bgx.h b/drivers/net/ethernet/octeon/octeon-bgx.h
index 33f2e8c..55325ed 100644
--- a/drivers/net/ethernet/octeon/octeon-bgx.h
+++ b/drivers/net/ethernet/octeon/octeon-bgx.h
@@ -52,6 +52,8 @@ int bgx_port_ethtool_set_settings(struct net_device *netdev,
 int bgx_port_ethtool_nway_reset(struct net_device *netdev);
 int bgx_port_do_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd);
 
+void bgx_port_mix_assert_reset(struct net_device *netdev, int mix, bool v);
+
 struct bgx_platform_data {
 	int numa_node;
 	int interface;
-- 
2.6.2

