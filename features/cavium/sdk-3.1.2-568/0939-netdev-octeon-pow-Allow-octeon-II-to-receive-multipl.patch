From c93ec5eacd5ab473fb1668b53c42e27e5570a967 Mon Sep 17 00:00:00 2001
From: Carlos Munoz <cmunoz@caviumnetworks.com>
Date: Mon, 14 Jul 2014 18:05:50 -0700
Subject: [PATCH 939/974] netdev: octeon-pow: Allow octeon II to receive
 multiple segment packets.

Signed-off-by: Carlos Munoz <cmunoz@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/octeon/octeon-pow-ethernet.c | 126 ++++++++++++++--------
 1 file changed, 83 insertions(+), 43 deletions(-)

diff --git a/drivers/net/ethernet/octeon/octeon-pow-ethernet.c b/drivers/net/ethernet/octeon/octeon-pow-ethernet.c
index 2f1b16b..709382c 100644
--- a/drivers/net/ethernet/octeon/octeon-pow-ethernet.c
+++ b/drivers/net/ethernet/octeon/octeon-pow-ethernet.c
@@ -161,8 +161,9 @@ static int octeon_pow_free_work(cvmx_wqe_t *work)
 
 		cvmx_fpa_free(work_to_skb(work), cvmx_wqe_get_aura(work), 0);
 	} else {
+		union cvmx_buf_ptr segment_ptr = work->packet_ptr;
+
 		while (segments--) {
-			union cvmx_buf_ptr segment_ptr = work->packet_ptr;
 			union cvmx_buf_ptr next_ptr =
 				*(union cvmx_buf_ptr *)phys_to_virt(segment_ptr.s.addr - 8);
 			if (unlikely(!segment_ptr.s.i))
@@ -364,6 +365,82 @@ fail:
 	return NETDEV_TX_OK;
 }
 
+/**
+ * Process packets received via the pki. It copies the packet data out
+ * of the fpa buffers and into the skb.
+ *
+ * @param: work
+ * @skb:
+ * @return
+ */
+static int octeon_pow_pki_rx(cvmx_wqe_t *work, struct sk_buff *skb)
+{
+	cvmx_buf_ptr_pki_t	pkt_ptr;
+	int			segments = cvmx_wqe_get_bufs(work);
+	int			len = cvmx_wqe_get_len(work);
+
+	pkt_ptr = cvmx_wqe_get_pki_pkt_ptr(work);
+	while (segments--) {
+		int segment_size = pkt_ptr.size;
+
+		if (segment_size > len)
+			segment_size = len;
+
+		/* Copy the data into the packet */
+		octeon_pow_copy_from(skb_put(skb, segment_size),
+				     phys_to_virt(pkt_ptr.addr), segment_size);
+		/* Reduce the amount of bytes left to copy */
+		len -= segment_size;
+
+		pkt_ptr =
+			*((cvmx_buf_ptr_pki_t *)phys_to_virt(pkt_ptr.addr - 8));
+	}
+
+	return 0;
+}
+
+/**
+ * Process packets received via the pip/ipd. It copies the packet data out
+ * of the fpa buffers and into the skb.
+ *
+ * @param: work
+ * @skb:
+ * @return
+ */
+static int octeon_pow_pip_ipd_rx(cvmx_wqe_t *work, struct sk_buff *skb)
+{
+	union cvmx_buf_ptr	pkt_ptr;
+	int			segments = cvmx_wqe_get_bufs(work);
+	int			len = cvmx_wqe_get_len(work);
+
+	pkt_ptr = work->packet_ptr;
+	while (segments--) {
+		int segment_size;
+		/* Octeon PKI-100: The segment size is wrong. Until it is fixed,
+		 * calculate the segment size based on the packet pool buffer
+		 * size. When it is fixed, the following line should be replaced
+		 * with this one: int segment_size = segment_ptr.s.size;
+		 */
+		segment_size = fpa_packet_pool_size -
+			(pkt_ptr.s.addr - (((pkt_ptr.s.addr >> 7) -
+					    pkt_ptr.s.back) << 7));
+		if (segment_size > len)
+			segment_size = len;
+
+		/* Copy the data into the packet */
+		octeon_pow_copy_from(skb_put(skb, segment_size),
+				     phys_to_virt(pkt_ptr.s.addr),
+				     segment_size);
+
+		/* Reduce the amount of bytes left to copy */
+		len -= segment_size;
+
+		pkt_ptr =
+			*(union cvmx_buf_ptr *)phys_to_virt(pkt_ptr.s.addr - 8);
+	}
+
+	return 0;
+}
 
 /**
  * Interrupt handler. The interrupt occurs whenever the POW
@@ -446,50 +523,13 @@ static irqreturn_t octeon_pow_interrupt(int cpl, void *dev_id)
 			octeon_pow_copy_from(skb_put(skb, len),
 					     phys_to_virt(oct_get_packet_ptr(work)), len);
 		} else {
-			int segments = cvmx_wqe_get_bufs(work);
-			uint64_t buf_desc = oct_get_packet_ptr(work);
-			int len = cvmx_wqe_get_len(work);
-			while (segments--) {
-				int segment_size;
-				uint64_t pkt_ptr;
-				if (octeon_has_feature(OCTEON_FEATURE_PKI)) {
-					cvmx_buf_ptr_pki_t pki_ptr;
-					pki_ptr.u64 = buf_desc;
-					segment_size = pki_ptr.size;
-					pkt_ptr = pki_ptr.addr;
-					buf_desc = *((uint64_t*)phys_to_virt(pki_ptr.addr - 8));
-				} else {
-					cvmx_buf_ptr_t buf_ptr;
-					union cvmx_buf_ptr next_ptr;
-					buf_ptr.u64 = buf_desc;
-					next_ptr = *(union cvmx_buf_ptr *)
-						phys_to_virt(buf_ptr.s.addr - 8);
-					/* Octeon Errata PKI-100: The segment size is
-					   wrong. Until it is fixed, calculate the
-					   segment size based on the packet pool buffer
-					   size. When it is fixed, the following line
-					   should be replaced with this one: int
-					   segment_size = segment_ptr.s.size; */
-					segment_size =
-						fpa_packet_pool_size -
-						(buf_ptr.s.addr -
-						 (((buf_ptr.s.addr >> 7) -
-						   buf_ptr.s.back) << 7));
-					/* Don't copy more than what is left in the
-					   packet */
-					pkt_ptr = buf_ptr.s.addr;
-					buf_desc = next_ptr.u64;
-				}
-				if (segment_size > len)
-					segment_size = len;
-				/* Copy the data into the packet */
-				octeon_pow_copy_from(skb_put(skb, segment_size),
-						     phys_to_virt(pkt_ptr),
-						     segment_size);
-				/* Reduce the amount of bytes left to copy */
-				len -= segment_size;
+			if (octeon_has_feature(OCTEON_FEATURE_PKI)) {
+				octeon_pow_pki_rx(work, skb);
+			} else {
+				octeon_pow_pip_ipd_rx(work, skb);
 			}
 		}
+
 		octeon_pow_free_work(work);
 		skb->protocol = eth_type_trans(skb, dev);
 		skb->dev = dev;
-- 
2.6.2

