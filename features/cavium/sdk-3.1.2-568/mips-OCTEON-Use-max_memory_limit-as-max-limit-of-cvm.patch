From 290160fd9d52cb6937c9db9a138af3eff03f4974 Mon Sep 17 00:00:00 2001
From: Quanyang Wang <quanyang.wang@windriver.com>
Date: Wed, 6 Jul 2016 10:15:23 +0800
Subject: [PATCH] mips: OCTEON: Use max_memory_limit as max limit of
 cvmx_bootmem_phy_alloc instead of max_memory

If impose restriction to the system's memory, we need to pass this value
as the argument "limit_max" which means maxium memory limit to the function
"cvmx_bootmem_phy_alloc".

We use max_memory_limit as maxium memory limit instead of max_memory because
that there is a memory hole (0x10000000~0x1fffffff) used for IO space in physical
memory map. For example, system has 2G RAM, max_memory is 0x80000000 but the
maxium physical memory address is 0x90000000. If use 0x80000000 as the maxium memory
limit, we will lose the memory in 0x80000000~0x90000000.

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/setup.c |   13 +++++++++++--
 1 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 0d72f4b..68c5357 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -54,6 +54,7 @@
 
 #define SDK_VERSION "3.1.2"
 
+#define MIPS_IO_SPACE_SIZE 0x10000000
 static u64 max_memory = 512ull << 20;
 
 DEFINE_SEMAPHORE(octeon_bootbus_sem);
@@ -971,6 +972,7 @@ void __init plat_mem_setup(void)
 	u64 total = 0;
 	s64 memory;
 	u64 limit_max, limit_min;
+	u64 max_memory_limit;
 	const struct cvmx_bootmem_named_block_desc *named_block;
 	u64 system_limit = cvmx_bootmem_available_mem(mem_alloc_size);
 
@@ -1057,6 +1059,13 @@ void __init plat_mem_setup(void)
 	cvmx_bootmem_lock();
 	limit_max = 0xffffffffull;
 	limit_min = 0;
+
+	/* We use max_memory_limit as maxium memory limit instead of max_memory
+	 * because that there is a IO memory hole (0x10000000~0x1fffffff) used for
+	 * IO space in physical memory map. For example, system has 2G RAM, max_memory
+	 * is 0x80000000 but the maxium physical memory address is 0x90000000.
+	 */
+	max_memory_limit = max_memory + MIPS_IO_SPACE_SIZE;
 	while ((boot_mem_map.nr_map < BOOT_MEM_MAP_MAX) && (total < max_memory)) {
 
 		if (total >= mem_32_size)
@@ -1073,7 +1082,7 @@ void __init plat_mem_setup(void)
 		 * For instance, the hardware has 64GB RAM installed but
 		 * the kernel has "mem=16GB" option set.
 		 */
-		limit_max = (limit_max > max_memory) ? max_memory : limit_max;
+		limit_max = (limit_max > max_memory_limit) ? max_memory_limit : limit_max;
 
 		memory = cvmx_bootmem_phy_alloc(mem_alloc_size,
 				limit_min, limit_max, 0x100000,
@@ -1108,7 +1117,7 @@ void __init plat_mem_setup(void)
 			 * line option, try to allocate physical memory above
 			 * available RAM does not make any sense.
 			 */
-			if (limit_max >= max_memory)
+			if (limit_max >= max_memory_limit)
 				break;
 		}
 	}
-- 
1.7.5.4

