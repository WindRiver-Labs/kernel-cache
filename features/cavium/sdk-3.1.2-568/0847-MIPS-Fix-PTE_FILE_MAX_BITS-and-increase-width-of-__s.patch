From 8a081179891417f75f625cbb3450e3e0c486e36b Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Wed, 23 Jul 2014 18:05:50 -0700
Subject: [PATCH 847/974] MIPS: Fix PTE_FILE_MAX_BITS and increase width of
 __swp_offset for 64-bit kernel.

We need to keep the lower 12 or so bits of the PTE unused by
PTE_FILE_MAX_BITS and __swp_offset()/__swp_type() as those bit have
meaning to the TLB code.  To be safe, don't use the low order 16 bits
by adjusting pte_to_pgoff(), pgoff_to_pte(), __swp_offset(),
__swp_type() and PTE_FILE_MAX_BITS to all be consistent.

Signed-off-by: David Daney <david.daney@cavium.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/include/asm/pgtable-64.h | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/arch/mips/include/asm/pgtable-64.h b/arch/mips/include/asm/pgtable-64.h
index f744712..cefe47d 100644
--- a/arch/mips/include/asm/pgtable-64.h
+++ b/arch/mips/include/asm/pgtable-64.h
@@ -284,25 +284,25 @@ extern void pgd_init(unsigned long page);
 extern void pmd_init(unsigned long page, unsigned long pagetable);
 
 /*
- * Non-present pages:  high 32 bits are offset, next 8 bits type,
- * low 24 bits zero.
+ * Non-present pages:  high 40 bits are offset, next 8 bits type,
+ * low 16 bits zero.
  */
 static inline pte_t mk_swap_pte(unsigned long type, unsigned long offset)
-{ pte_t pte; pte_val(pte) = (type << 24) | (offset << 32); return pte; }
+{ pte_t pte; pte_val(pte) = (type << 16) | (offset << 24); return pte; }
 
-#define __swp_type(x)		(((x).val >> 24) & 0xff)
-#define __swp_offset(x)		((x).val >> 32)
+#define __swp_type(x)		(((x).val >> 16) & 0xff)
+#define __swp_offset(x)		((x).val >> 24)
 #define __swp_entry(type, offset) ((swp_entry_t) { pte_val(mk_swap_pte((type), (offset))) })
 #define __pte_to_swp_entry(pte) ((swp_entry_t) { pte_val(pte) })
 #define __swp_entry_to_pte(x)	((pte_t) { (x).val })
 
 /*
- * Bits 0, 4, 6, and 7 are taken. Let's leave bits 1, 2, 3, and 5 alone to
- * make things easier, and only use the upper 56 bits for the page offset...
+ * Leave low order 16 bits for the various page table bits, and only
+ * use the upper 48 bits for the page offset...
  */
-#define PTE_FILE_MAX_BITS	56
+#define PTE_FILE_MAX_BITS	48
 
-#define pte_to_pgoff(_pte)	((_pte).pte >> 8)
-#define pgoff_to_pte(off)	((pte_t) { ((off) << 8) | _PAGE_FILE })
+#define pte_to_pgoff(_pte)	((_pte).pte >> 16)
+#define pgoff_to_pte(off)	((pte_t) { ((off) << 16) | _PAGE_FILE })
 
 #endif /* _ASM_PGTABLE_64_H */
-- 
2.6.2

