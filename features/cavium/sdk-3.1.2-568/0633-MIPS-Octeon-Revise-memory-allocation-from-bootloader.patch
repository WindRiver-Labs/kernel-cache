From 8f8bcbef21b7388d2da2cda2c0a63dc0ef3218a8 Mon Sep 17 00:00:00 2001
From: Leonid Rosenboim <lrosenboim@caviumnetworks.com>
Date: Fri, 11 Jul 2014 18:05:50 -0700
Subject: [PATCH 633/974] MIPS: Octeon: Revise memory allocation from
 bootloader The heneric MIPS memory initialization does not allow free memory
 preceding the kernel image itself, make sure all memory that is allocated
 from firmware follows the kernel image. Cleanup the firmware memory
 allocation code for clarity.

Signed-off-by: Leonid Rosenboim <lrosenboim@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/setup.c | 31 ++++++++++++++-----------------
 1 file changed, 14 insertions(+), 17 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index ce02fb2..392dd4b 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -48,9 +48,10 @@
 #include <asm/octeon/cvmx-qlm.h>
 #include <asm/octeon/cvmx-debug.h>
 
-#define SDK_VERSION "3.1"
+#define SDK_VERSION "3.1.1"
 
 static unsigned long long MAX_MEMORY = 512ull << 20;
+static const unsigned long MIN_MEM_32 = 256 << 20;
 
 /*
  * modified in hernel-entry-init.h, must have an initial value to keep
@@ -955,6 +956,7 @@ void __init plat_mem_setup(void)
 	uint64_t mem_alloc_size;
 	uint64_t total = 0;
 	int64_t memory;
+	uint64_t limit_max, limit_min;
 	const struct cvmx_bootmem_named_block_desc *named_block;
 
 #ifdef CONFIG_BLK_DEV_INITRD
@@ -1012,26 +1014,21 @@ void __init plat_mem_setup(void)
 	while ((boot_mem_map.nr_map < BOOT_MEM_MAP_MAX)
 		&& (total < MAX_MEMORY)) {
 #if defined(CONFIG_64BIT) || defined(CONFIG_64BIT_PHYS_ADDR)
-		const uint64_t min_low_ram = 256 << 20; /* 256 MBytes */
-		uint64_t limit;
-		if (total < min_low_ram)
-			limit = (1ull << 32)-1;
+		if (total < MIN_MEM_32)
+			limit_max = (1ull << 32)-1;	/* 4GBytes */
 		else
-			limit = ~0ull;
-
-		memory = cvmx_bootmem_phy_alloc(mem_alloc_size,
-						__pa_symbol(&__init_end), limit,
-						0x100000,
-						CVMX_BOOTMEM_FLAG_NO_LOCKING);
+			limit_max = ~0ull;		/* unlimitted */
 #elif defined(CONFIG_HIGHMEM)
-		memory = cvmx_bootmem_phy_alloc(mem_alloc_size, 0, 1ull << 31,
-						0x100000,
-						CVMX_BOOTMEM_FLAG_NO_LOCKING);
+		limit_max = (1ull << 31) - 1;	/* 4GBytes */
 #else
-		memory = cvmx_bootmem_phy_alloc(mem_alloc_size, 0, 512 << 20,
-						0x100000,
-						CVMX_BOOTMEM_FLAG_NO_LOCKING);
+		limit_max = (1ull << 29) - 1;	/* 512MBytes */
 #endif
+		limit_min = __pa_symbol(&__init_end);
+
+		memory = cvmx_bootmem_phy_alloc(mem_alloc_size,
+				limit_min, limit_max, 0x100000,
+				CVMX_BOOTMEM_FLAG_NO_LOCKING);
+
 		if (memory >= 0) {
 			u64 size = mem_alloc_size;
 
-- 
2.6.2

