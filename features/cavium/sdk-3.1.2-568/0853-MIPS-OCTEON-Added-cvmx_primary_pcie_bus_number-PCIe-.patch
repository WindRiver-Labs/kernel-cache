From 0cf75f664a68bf9fd135b215ee38e96474540fbb Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Sat, 26 Jul 2014 18:05:50 -0700
Subject: [PATCH 853/974] MIPS:OCTEON: Added cvmx_primary_pcie_bus_number PCIe
 module parameter

Changed the default bus number for all PCIe devices to 0 and
added a new module parameter cvmx_primary_pcie_bus_number, to
change the default value.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/executive/cvmx-pcie.c | 26 ++++++++++++++++++++------
 arch/mips/pci/pcie-octeon.c                   |  8 ++++++--
 2 files changed, 26 insertions(+), 8 deletions(-)

diff --git a/arch/mips/cavium-octeon/executive/cvmx-pcie.c b/arch/mips/cavium-octeon/executive/cvmx-pcie.c
index 46d404c..76488c0 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-pcie.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-pcie.c
@@ -1,5 +1,5 @@
 /***********************license start***************
- * Copyright (c) 2003-2014  Cavium, Inc. <support@cavium.com>.  All rights
+ * Copyright (c) 2003-2015  Cavium, Inc. <support@cavium.com>.  All rights
  * reserved.
  *
  *
@@ -42,7 +42,7 @@
  *
  * Interface to PCIe as a host(RC) or target(EP)
  *
- * <hr>$Revision: 108132 $<hr>
+ * <hr>$Revision: 113951 $<hr>
  */
 #ifdef CVMX_BUILD_FOR_LINUX_KERNEL
 #include <asm/octeon/cvmx.h>
@@ -114,6 +114,16 @@
 #define CVMX_PCIE_CFGX_READ(p,addr)	cvmx_pcie_cfgx_read_node(node,p,addr)
 #define CVMX_PCIE_CFGX_WRITE(p,addr,val)	cvmx_pcie_cfgx_write_node(node,p,addr,val)
 
+#ifdef CVMX_BUILD_FOR_LINUX_KERNEL
+extern int cvmx_primary_pcie_bus_number = 0;
+#else
+# ifdef OCTEON_FIRST_PCIE_BUSNO /* Defined in u-boot config files */
+int cvmx_primary_pcie_bus_number = OCTEON_FIRST_PCIE_BUSNO;
+# else
+int cvmx_primary_pcie_bus_number = 0;
+# endif
+#endif
+
 /**
  * Return the Core virtual base address for PCIe IO access. IOs are
  * read/written as an offset from this address.
@@ -299,9 +309,9 @@ static void __cvmx_pcie_rc_initialize_config_space(int node, int pcie_port)
 		 */
 		cvmx_pciercx_cfg006_t pciercx_cfg006;
 		pciercx_cfg006.u32 = 0;
-		pciercx_cfg006.s.pbnum = 1;
-		pciercx_cfg006.s.sbnum = 1;
-		pciercx_cfg006.s.subbnum = 1;
+		pciercx_cfg006.s.pbnum = cvmx_primary_pcie_bus_number;
+		pciercx_cfg006.s.sbnum = cvmx_primary_pcie_bus_number;
+		pciercx_cfg006.s.subbnum = cvmx_primary_pcie_bus_number;
 		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG006(pcie_port),
 				     pciercx_cfg006.u32);
 	}
@@ -1769,7 +1779,11 @@ static uint64_t __cvmx_pcie_build_config_addr(int node, int port, int bus,
 	pcie_addr.config.node = node;
 	pcie_addr.config.es = _CVMX_PCIE_ES;
 	pcie_addr.config.port = port;
-	pcie_addr.config.ty = (bus > pciercx_cfg006.s.pbnum);
+	/* Always use config type 0 */
+	if (pciercx_cfg006.s.pbnum == 0)
+		pcie_addr.config.ty = (bus > pciercx_cfg006.s.pbnum + 1);
+	else
+		pcie_addr.config.ty = (bus > pciercx_cfg006.s.pbnum);
 	pcie_addr.config.bus = bus;
 	pcie_addr.config.dev = dev;
 	pcie_addr.config.func = fn;
diff --git a/arch/mips/pci/pcie-octeon.c b/arch/mips/pci/pcie-octeon.c
index ef42dc7..bfb1b80 100644
--- a/arch/mips/pci/pcie-octeon.c
+++ b/arch/mips/pci/pcie-octeon.c
@@ -30,6 +30,9 @@
 static int pcie_disable;
 module_param(pcie_disable, int, S_IRUGO);
 
+int cvmx_primary_pcie_bus_number;
+module_param(cvmx_primary_pcie_bus_number, int, S_IRUGO);
+
 static int enable_pcie_14459_war;
 static int enable_pcie_bus_num_war[CVMX_PCIE_MAX_PORTS];
 
@@ -286,7 +289,7 @@ static int octeon_pcie_read_config(struct pci_bus *bus, unsigned int devfn,
 {
 	union octeon_cvmemctl cvmmemctl;
 	union octeon_cvmemctl cvmmemctl_save;
-	int bus_number = bus->number;
+	int bus_number = cvmx_primary_pcie_bus_number;
 	int cfg_retry = 0;
 	int retry_cnt = 0;
 	int max_retry_cnt = 10;
@@ -307,7 +310,8 @@ static int octeon_pcie_read_config(struct pci_bus *bus, unsigned int devfn,
 			union cvmx_pciercx_cfg006 pciercx_cfg006;
 			pciercx_cfg006.u32 = cvmx_pcie_cfgx_read_node(pi->node, pi->pem,
 					     CVMX_PCIERCX_CFG006(pi->pem));
-			if (pciercx_cfg006.s.pbnum != bus_number) {
+			if (pciercx_cfg006.s.pbnum
+			    && pciercx_cfg006.s.pbnum != bus_number) {
 				pciercx_cfg006.s.pbnum = bus_number;
 				pciercx_cfg006.s.sbnum = bus_number;
 				pciercx_cfg006.s.subbnum = bus_number;
-- 
2.6.2

