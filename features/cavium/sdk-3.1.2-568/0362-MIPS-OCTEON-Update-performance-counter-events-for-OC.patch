From 6556ec49b7822d2a4401bff842857b9bebed4d4d Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Fri, 25 Oct 2013 11:33:56 -0700
Subject: [PATCH 362/974] MIPS: OCTEON: Update performance counter events for
 OCTEONIII.

OCTEONIII has 4 Core performance counters, update the code to
enable and count all 4 counters. Also updated with new FP performance
counter events. Update new L2C events for OCTEONIII.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/perf_counters.c | 160 +++++++++++++++++++++++++++-----
 1 file changed, 139 insertions(+), 21 deletions(-)

diff --git a/arch/mips/cavium-octeon/perf_counters.c b/arch/mips/cavium-octeon/perf_counters.c
index fa8996a..c885025 100644
--- a/arch/mips/cavium-octeon/perf_counters.c
+++ b/arch/mips/cavium-octeon/perf_counters.c
@@ -28,6 +28,12 @@ module_param_string(counter0, counter0, sizeof(counter0), S_IWUSR | S_IRUGO);
 static char counter1[32] = "dissue";
 module_param_string(counter1, counter1, sizeof(counter1), S_IWUSR | S_IRUGO);
 
+static char counter2[32] = "fparith-exc";
+module_param_string(counter2, counter2, sizeof(counter2), S_IWUSR | S_IRUGO);
+
+static char counter3[32] = "fpall";
+module_param_string(counter3, counter3, sizeof(counter3), S_IWUSR | S_IRUGO);
+
 static char l2counter0[32] = "imiss";
 module_param_string(l2counter0, l2counter0, sizeof(l2counter0), S_IWUSR | S_IRUGO);
 
@@ -41,8 +47,8 @@ static char l2counter3[32] = "dhit";
 module_param_string(l2counter3, l2counter3, sizeof(l2counter3), S_IWUSR | S_IRUGO);
 
 static struct proc_dir_entry *proc_perf_entry;
-static uint64_t proc_perf_counter_control[2];
-static uint64_t proc_perf_counter_data[NR_CPUS][2];
+static uint64_t proc_perf_counter_control[4];
+static uint64_t proc_perf_counter_data[NR_CPUS][4];
 static uint64_t proc_perf_l2counter_control[4];
 static uint64_t proc_perf_l2counter_data[4];
 static const char *proc_perf_label[CVMX_CORE_PERF_MAX];
@@ -89,6 +95,22 @@ static struct proc_perf_l2tad_label
 	{ CVMX_L2C_TAD_EVENT_QUAD3_READ, "quad3-read", 2 },
 	{ CVMX_L2C_TAD_EVENT_QUAD3_BANK, "quad3-bank", 1 },
 	{ CVMX_L2C_TAD_EVENT_QUAD3_WDAT, "quad3-wdat", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD4_INDEX, "quad4-index", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD4_READ, "quad4-read", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD4_BANK, "quad4-bank", 1 },
+	{ CVMX_L2C_TAD_EVENT_QUAD4_WDAT, "quad4-wdat", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD5_INDEX, "quad5-index", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD5_READ, "quad5-read", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD5_BANK, "quad5-bank", 1 },
+	{ CVMX_L2C_TAD_EVENT_QUAD5_WDAT, "quad5-wdat", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD6_INDEX, "quad6-index", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD6_READ, "quad6-read", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD6_BANK, "quad6-bank", 1 },
+	{ CVMX_L2C_TAD_EVENT_QUAD6_WDAT, "quad6-wdat", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD7_INDEX, "quad7-index", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD7_READ, "quad7-read", 2 },
+	{ CVMX_L2C_TAD_EVENT_QUAD7_BANK, "quad7-bank", 1 },
+	{ CVMX_L2C_TAD_EVENT_QUAD7_WDAT, "quad7-wdat", 2 },
 	{ CVMX_L2C_TAD_EVENT_MAX, NULL, 0}
 };
 
@@ -123,6 +145,15 @@ static void proc_perf_setup_counters(void *arg)
 
 	__write_32bit_c0_register($25, 1, 0);
 	__write_32bit_c0_register($25, 3, 0);
+	if (OCTEON_IS_OCTEON3()) {
+		control.s.event = proc_perf_counter_control[2];
+		__write_32bit_c0_register($25, 4, control.u32);
+		control.s.event = proc_perf_counter_control[3];
+		__write_32bit_c0_register($25, 6, control.u32);
+
+		__write_32bit_c0_register($25, 5, 0);
+		__write_32bit_c0_register($25, 7, 0);
+	}
 }
 
 /*
@@ -134,6 +165,10 @@ static void proc_perf_update_counters(void *arg)
 
 	proc_perf_counter_data[cpu][0] = __read_64bit_c0_register($25, 1);
 	proc_perf_counter_data[cpu][1] = __read_64bit_c0_register($25, 3);
+	if (OCTEON_IS_OCTEON3()) {
+		proc_perf_counter_data[cpu][2] = __read_64bit_c0_register($25, 5);
+		proc_perf_counter_data[cpu][3] = __read_64bit_c0_register($25, 7);
+	}
 	mb();
 }
 
@@ -157,6 +192,8 @@ static void proc_perf_setup(void)
 
 	proc_perf_counter_control[0] = 0;
 	proc_perf_counter_control[1] = 0;
+	proc_perf_counter_control[2] = 0;
+	proc_perf_counter_control[3] = 0;
 	proc_perf_l2counter_control[0] = 0;
 	proc_perf_l2counter_control[1] = 0;
 	proc_perf_l2counter_control[2] = 0;
@@ -165,6 +202,8 @@ static void proc_perf_setup(void)
 	/* Cleanup junk on end of param strings */
 	clean_string(counter0, sizeof(counter0));
 	clean_string(counter1, sizeof(counter1));
+	clean_string(counter2, sizeof(counter2));
+	clean_string(counter3, sizeof(counter3));
 	clean_string(l2counter0, sizeof(l2counter0));
 	clean_string(l2counter1, sizeof(l2counter1));
 	clean_string(l2counter2, sizeof(l2counter2));
@@ -177,6 +216,12 @@ static void proc_perf_setup(void)
 				proc_perf_counter_control[0] = i;
 			if (strcmp(proc_perf_label[i], counter1) == 0)
 				proc_perf_counter_control[1] = i;
+			if (OCTEON_IS_OCTEON3()) {
+				if (strcmp(proc_perf_label[i], counter2) == 0)
+					proc_perf_counter_control[2] = i;
+				if (strcmp(proc_perf_label[i], counter3) == 0)
+					proc_perf_counter_control[3] = i;
+			}
 		}
 	}
 	if (OCTEON_IS_MODEL(OCTEON_CN5XXX) || OCTEON_IS_MODEL(OCTEON_CN3XXX)) {
@@ -222,6 +267,10 @@ static void proc_perf_setup(void)
 	/* Update strings to match final config */
 	strcpy(counter0, proc_perf_label[proc_perf_counter_control[0]]);
 	strcpy(counter1, proc_perf_label[proc_perf_counter_control[1]]);
+	if (OCTEON_IS_OCTEON3()) {
+		strcpy(counter2, proc_perf_label[proc_perf_counter_control[2]]);
+		strcpy(counter3, proc_perf_label[proc_perf_counter_control[3]]);
+	}
 
 	if (OCTEON_IS_MODEL(OCTEON_CN5XXX) || OCTEON_IS_MODEL(OCTEON_CN3XXX)) {
 		strcpy(l2counter0,
@@ -296,19 +345,32 @@ static void proc_perf_update(void)
 		proc_perf_l2counter_data[1] = 0;
 		proc_perf_l2counter_data[2] = 0;
 		proc_perf_l2counter_data[3] = 0;
-		for (tad = 0; tad < CVMX_L2C_TADS; tad++) {
-			proc_perf_l2counter_data[0] +=
-				cvmx_read_csr(CVMX_L2C_TADX_PFC0(tad));
-			cvmx_write_csr(CVMX_L2C_TADX_PFC0(tad), 0);
-			proc_perf_l2counter_data[1] +=
-				cvmx_read_csr(CVMX_L2C_TADX_PFC1(tad));
-			cvmx_write_csr(CVMX_L2C_TADX_PFC1(tad), 0);
-			proc_perf_l2counter_data[2] +=
-				cvmx_read_csr(CVMX_L2C_TADX_PFC2(tad));
-			cvmx_write_csr(CVMX_L2C_TADX_PFC2(tad), 0);
-			proc_perf_l2counter_data[3] +=
-				cvmx_read_csr(CVMX_L2C_TADX_PFC3(tad));
-			cvmx_write_csr(CVMX_L2C_TADX_PFC3(tad), 0);
+		if (OCTEON_IS_OCTEON3()) {
+			for (tad = 0; tad < CVMX_L2C_TADS; tad++) {
+				proc_perf_l2counter_data[0] +=
+					cvmx_read_csr(CVMX_L2C_TADX_PFCX(0, tad));
+				proc_perf_l2counter_data[1] +=
+					cvmx_read_csr(CVMX_L2C_TADX_PFCX(1, tad));
+				proc_perf_l2counter_data[2] +=
+					cvmx_read_csr(CVMX_L2C_TADX_PFCX(2, tad));
+				proc_perf_l2counter_data[3] +=
+					cvmx_read_csr(CVMX_L2C_TADX_PFCX(3, tad));
+			}
+		} else {
+			for (tad = 0; tad < CVMX_L2C_TADS; tad++) {
+				proc_perf_l2counter_data[0] +=
+					cvmx_read_csr(CVMX_L2C_TADX_PFC0(tad));
+				cvmx_write_csr(CVMX_L2C_TADX_PFC0(tad), 0);
+				proc_perf_l2counter_data[1] +=
+					cvmx_read_csr(CVMX_L2C_TADX_PFC1(tad));
+				cvmx_write_csr(CVMX_L2C_TADX_PFC1(tad), 0);
+				proc_perf_l2counter_data[2] +=
+					cvmx_read_csr(CVMX_L2C_TADX_PFC2(tad));
+				cvmx_write_csr(CVMX_L2C_TADX_PFC2(tad), 0);
+				proc_perf_l2counter_data[3] +=
+					cvmx_read_csr(CVMX_L2C_TADX_PFC3(tad));
+				cvmx_write_csr(CVMX_L2C_TADX_PFC3(tad), 0);
+			}
 		}
 		end_cycle = cvmx_read_csr(CVMX_IPD_CLK_COUNT);
 	}
@@ -325,18 +387,37 @@ static int proc_perf_show(struct seq_file *m, void *v)
 	uint64_t dram_operations;
 	union cvmx_core_perf_control control0;
 	union cvmx_core_perf_control control1;
+	union cvmx_core_perf_control control2;
+	union cvmx_core_perf_control control3;
 
 	proc_perf_update();
 
 	control0.u32 = __read_32bit_c0_register($25, 0);
 	control1.u32 = __read_32bit_c0_register($25, 2);
-	seq_printf(m, "       %16s %16s\n",
-		   proc_perf_label[control0.s.event],
-		   proc_perf_label[control1.s.event]);
-	for_each_online_cpu (cpu) {
-		seq_printf(m, "CPU%2d: %16llu %16llu\n", cpu,
+	if (OCTEON_IS_OCTEON3()) {
+		control2.u32 = __read_32bit_c0_register($25, 4);
+		control3.u32 = __read_32bit_c0_register($25, 6);
+		seq_printf(m, "       %16s %16s %16s %16s\n",
+			proc_perf_label[control0.s.event],
+			proc_perf_label[control1.s.event],
+			proc_perf_label[control2.s.event],
+			proc_perf_label[control3.s.event]);
+		for_each_online_cpu (cpu) {
+			seq_printf(m, "CPU%2d: %16llu %16llu %16llu %16llu\n", cpu,
+			   (unsigned long long)proc_perf_counter_data[cpu][0],
+			   (unsigned long long)proc_perf_counter_data[cpu][1],
+			   (unsigned long long)proc_perf_counter_data[cpu][2],
+			   (unsigned long long)proc_perf_counter_data[cpu][3]);
+		}
+	} else {
+		seq_printf(m, "       %16s %16s\n",
+			proc_perf_label[control0.s.event],
+			proc_perf_label[control1.s.event]);
+		for_each_online_cpu (cpu) {
+			seq_printf(m, "CPU%2d: %16llu %16llu\n", cpu,
 			   (unsigned long long)proc_perf_counter_data[cpu][0],
 			   (unsigned long long)proc_perf_counter_data[cpu][1]);
+		}
 	}
 
 	seq_printf(m, "\n");
@@ -411,7 +492,17 @@ static int proc_perf_show(struct seq_file *m, void *v)
 	proc_perf_dram_operations = dram_operations;
 	proc_perf_dram_clocks = dram_clocks;
 
-	seq_printf(m,
+	if (OCTEON_IS_OCTEON3()) {
+		seq_printf(m,
+		   "\n"
+		   "Configuration of the performance counters is controlled by writing\n"
+		   "one of the following values to:\n"
+		   "    /sys/module/perf_counters/parameters/counter{0,3}\n"
+		   "    /sys/module/perf_counters/parameters/l2counter{0-3}\n"
+		   "\n"
+		   "Possible CPU counters:");
+	} else {
+		seq_printf(m,
 		   "\n"
 		   "Configuration of the performance counters is controlled by writing\n"
 		   "one of the following values to:\n"
@@ -419,6 +510,7 @@ static int proc_perf_show(struct seq_file *m, void *v)
 		   "    /sys/module/perf_counters/parameters/l2counter{0-3}\n"
 		   "\n"
 		   "Possible CPU counters:");
+	}
 	for (i = 0; i < CVMX_CORE_PERF_MAX; i++) {
 		if ((i & 7) == 0)
 			seq_printf(m, "\n    ");
@@ -436,6 +528,9 @@ static int proc_perf_show(struct seq_file *m, void *v)
 		}
 	} else {
 		for (i = 0; proc_perf_l2tad_label[i].name; i++) {
+			if (proc_perf_l2tad_label[i].type >= 0xc0 &&
+			    !OCTEON_IS_OCTEON3())
+				break;
 			if ((i & 3) == 0)
 				seq_printf(m, "\n    ");
 			seq_printf(m, "%s ", proc_perf_l2tad_label[i].name);
@@ -534,6 +629,29 @@ static int __init proc_perf_init(void)
 		proc_perf_label[CVMX_CORE_PERF_LIKMIS] = "likmis";
 		proc_perf_label[CVMX_CORE_PERF_HAZTR] = "hazard-trap";
 	}
+	if (OCTEON_IS_OCTEON3()) {
+		proc_perf_label[CVMX_CORE_PERF_DUTLB] = "dutlb";
+		proc_perf_label[CVMX_CORE_PERF_IUTLB] = "iutlb";
+		proc_perf_label[CVMX_CORE_PERF_CDMISS] = "cdmiss";
+		proc_perf_label[CVMX_CORE_PERF_FPUNIMPTRAP] = "fpunimp-trap";
+		proc_perf_label[CVMX_CORE_PERF_FPHAZARDTRAP] = "fphazard-trap";
+		proc_perf_label[CVMX_CORE_PERF_FPARITHEXC] = "fparith-exc";
+		proc_perf_label[CVMX_CORE_PERF_FPMOVC1] = "fpmovc1";
+		proc_perf_label[CVMX_CORE_PERF_FPCOPYC1] = "fpcopyc1";
+		proc_perf_label[CVMX_CORE_PERF_FPCOMPARE] = "fpcompare";
+		proc_perf_label[CVMX_CORE_PERF_FPBRANCH] = "fpbranch";
+		proc_perf_label[CVMX_CORE_PERF_FPMOV] = "fpbmov";
+		proc_perf_label[CVMX_CORE_PERF_FPABSNEG] = "fpabs";
+		proc_perf_label[CVMX_CORE_PERF_FPADDSUB] = "fpadd";
+		proc_perf_label[CVMX_CORE_PERF_FPCVT] = "fpcvt";
+		proc_perf_label[CVMX_CORE_PERF_FPMUL] = "fpmul";
+		proc_perf_label[CVMX_CORE_PERF_FPMADD] = "fpmadd";
+		proc_perf_label[CVMX_CORE_PERF_FPDIVRECIP] = "fpdiv";
+		proc_perf_label[CVMX_CORE_PERF_FPSQRTRSQRT] = "fpsqrt";
+		proc_perf_label[CVMX_CORE_PERF_FPLOAD] = "fpload";
+		proc_perf_label[CVMX_CORE_PERF_FPSTORE] = "fpstore";
+		proc_perf_label[CVMX_CORE_PERF_FPALL] = "fpall";
+	}
 
 	if (OCTEON_IS_MODEL(OCTEON_CN5XXX) || OCTEON_IS_MODEL(OCTEON_CN3XXX)) {
 		proc_perf_l2label[CVMX_L2C_EVENT_CYCLES] = "cycles";
-- 
2.6.2

