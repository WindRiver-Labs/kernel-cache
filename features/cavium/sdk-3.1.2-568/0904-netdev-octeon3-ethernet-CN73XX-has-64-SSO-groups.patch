From bbed680fca48d00cb057be3bc39dc52ababc170d Mon Sep 17 00:00:00 2001
From: Carlos Munoz <cmunoz@caviumnetworks.com>
Date: Sun, 13 Jul 2014 18:05:50 -0700
Subject: [PATCH 904/974] netdev: octeon3-ethernet: CN73XX has 64 SSO groups.

Signed-off-by: Carlos Munoz <cmunoz@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/include/asm/octeon/cvmx-pow.h        |  4 ----
 drivers/net/ethernet/octeon/octeon3-ethernet.c | 10 +++++++---
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/arch/mips/include/asm/octeon/cvmx-pow.h b/arch/mips/include/asm/octeon/cvmx-pow.h
index 0d6fab2..98c9cd5 100644
--- a/arch/mips/include/asm/octeon/cvmx-pow.h
+++ b/arch/mips/include/asm/octeon/cvmx-pow.h
@@ -105,10 +105,6 @@ typedef union {
 	};
 } cvmx_xgrp_t;
 
-#ifdef CVMX_BUILD_FOR_LINUX_KERNEL	//XXX- Temporary
-#define CVMX_SSO_NUM_XGRP		(256)
-#endif
-
 /*
  * Softwsare-only structure to convey a return value
  * containing multiple information fields about an work queue entry
diff --git a/drivers/net/ethernet/octeon/octeon3-ethernet.c b/drivers/net/ethernet/octeon/octeon3-ethernet.c
index 34c8320..ebb1c2a 100644
--- a/drivers/net/ethernet/octeon/octeon3-ethernet.c
+++ b/drivers/net/ethernet/octeon/octeon3-ethernet.c
@@ -366,7 +366,7 @@ static void octeon3_eth_sso_pass1_limit(int node, int	grp)
 	 * many sso groups are used by code outside this driver we take the
 	 * worst case approach and assume all 256 sso groups must be supported.
 	 */
-	max_thr = 1264 / CVMX_SSO_NUM_XGRP;
+	max_thr = 1264 / cvmx_sso_num_xgrp();
 	if (max_thr < 4)
 		max_thr = 4;
 	rsvd_thr = max_thr - 1;
@@ -419,6 +419,7 @@ static int octeon3_eth_sso_init(unsigned int node, int aura)
 	union cvmx_sso_xaq_aura xaq_aura;
 	union cvmx_sso_err0 err0;
 	union cvmx_sso_grpx_pri grp_pri;
+	int max_grps;
 	int i;
 	int rv = 0;
 
@@ -436,7 +437,8 @@ static int octeon3_eth_sso_init(unsigned int node, int aura)
 	xaq_aura.s.node = node;
 	cvmx_write_csr_node(node, CVMX_SSO_XAQ_AURA, xaq_aura.u64);
 
-	for (i = 0; i < 256; i++) {
+	max_grps = cvmx_sso_num_xgrp();
+	for (i = 0; i < max_grps; i++) {
 		u64 phys;
 		void *mem = cvmx_fpa3_alloc(__cvmx_fpa3_gaura(node, aura));
 		if (!mem) {
@@ -473,6 +475,7 @@ static void octeon3_eth_sso_shutdown(unsigned int node)
 	union cvmx_sso_aw_cfg		aw_cfg;
 	cvmx_sso_grpx_aq_cnt_t		aq_cnt;
 	cvmx_sso_aw_status_t		aw_status;
+	int				max_grps;
 	int				i;
 
 	oen = octeon3_eth_node + node;
@@ -485,7 +488,8 @@ static void octeon3_eth_sso_shutdown(unsigned int node)
 	cvmx_write_csr_node(node, CVMX_SSO_AW_CFG, aw_cfg.u64);
 
 	/* Extract the fpa buffers */
-	for (i = 0; i < 256; i++) {
+	max_grps = cvmx_sso_num_xgrp();
+	for (i = 0; i < max_grps; i++) {
 		cvmx_sso_xaqx_head_ptr_t	head;
 		cvmx_sso_xaqx_tail_ptr_t	tail;
 		u64				addr;
-- 
2.6.2

