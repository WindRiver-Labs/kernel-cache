From e12bd80f2742f22158112617e23dada30ea93e1f Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Tue, 13 Aug 2013 15:24:03 -0700
Subject: [PATCH 266/974] Revert "MIPS: OCTEON: Get rid of special
 SMP_ICACHE_FLUSH IPI message."

This reverts commit e13672f0b9ea98d51fa7f0c850ddcd6497994ee2.

It causes too many problems in things like ftrace initialization.

Signed-off-by: David Daney <david.daney@cavium.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/smp.c |  7 +++++++
 arch/mips/include/asm/smp.h   |  2 ++
 arch/mips/mm/c-octeon.c       | 24 ++++++++++++++++--------
 3 files changed, 25 insertions(+), 8 deletions(-)

diff --git a/arch/mips/cavium-octeon/smp.c b/arch/mips/cavium-octeon/smp.c
index 3276e34..d27a405 100644
--- a/arch/mips/cavium-octeon/smp.c
+++ b/arch/mips/cavium-octeon/smp.c
@@ -32,9 +32,15 @@ extern void octeon_hotplug_entry(void);
 #endif
 struct cvmx_app_hotplug_global *octeon_hotplug_global_ptr;
 
+static void octeon_icache_flush(void)
+{
+	asm volatile ("synci 0($0)\n");
+}
+
 static octeon_message_fn_t  octeon_message_functions[8] = {
 	scheduler_ipi,
 	smp_call_function_interrupt,
+	octeon_icache_flush,
 };
 
 static  int octeon_message_free_mask = 0xf8;
@@ -94,6 +100,7 @@ static irqreturn_t mailbox_interrupt(int irq, void *dev_id)
 	 */
 	BUILD_BUG_ON(SMP_RESCHEDULE_YOURSELF != (1 << 0));
 	BUILD_BUG_ON(SMP_CALL_FUNCTION       != (1 << 1));
+	BUILD_BUG_ON(SMP_ICACHE_FLUSH        != (1 << 2));
 
 	/*
 	 * Load the mailbox register to figure out what we're supposed
diff --git a/arch/mips/include/asm/smp.h b/arch/mips/include/asm/smp.h
index 74ea214..eb60087 100644
--- a/arch/mips/include/asm/smp.h
+++ b/arch/mips/include/asm/smp.h
@@ -38,6 +38,8 @@ extern int __cpu_logical_map[NR_CPUS];
 
 #define SMP_RESCHEDULE_YOURSELF 0x1	/* XXX braindead */
 #define SMP_CALL_FUNCTION	0x2
+/* Octeon - Tell another core to flush its icache */
+#define SMP_ICACHE_FLUSH	0x4
 /* Used by kexec crashdump to save all cpu's state */
 #define SMP_DUMP		0x8
 
diff --git a/arch/mips/mm/c-octeon.c b/arch/mips/mm/c-octeon.c
index 0b4a02a..3f69cb3 100644
--- a/arch/mips/mm/c-octeon.c
+++ b/arch/mips/mm/c-octeon.c
@@ -44,7 +44,7 @@ static void octeon_flush_data_cache_page(unsigned long addr)
     /* Nothing to do */
 }
 
-static void octeon_local_flush_icache(void *ignore)
+static void octeon_local_flush_icache(void)
 {
 	asm volatile ("synci 0($0)");
 }
@@ -55,7 +55,7 @@ static void octeon_local_flush_icache(void *ignore)
 static void octeon_local_flush_icache_all(void)
 {
 	mb();
-	octeon_local_flush_icache(NULL);
+	octeon_local_flush_icache();
 }
 
 /*
@@ -65,7 +65,7 @@ static void octeon_local_flush_icache_range(unsigned long start,
 					    unsigned long end)
 {
 	mb();
-	octeon_local_flush_icache(NULL);
+	octeon_local_flush_icache();
 }
 
 /**
@@ -76,23 +76,31 @@ static void octeon_local_flush_icache_range(unsigned long start,
  */
 static void octeon_flush_icache_all_cores(struct vm_area_struct *vma)
 {
-	const struct cpumask *mask;
+	extern struct plat_smp_ops *mp_ops;	/* private */
+#ifdef CONFIG_SMP
+	int cpu;
+	cpumask_t mask;
+#endif
 
 	mb();
+	octeon_local_flush_icache();
+#ifdef CONFIG_SMP
 	preempt_disable();
+	cpu = smp_processor_id();
 
 	/*
 	 * If we have a vma structure, we only need to worry about
 	 * cores it has been used on
 	 */
 	if (vma)
-		mask = mm_cpumask(vma->vm_mm);
+		mask = *mm_cpumask(vma->vm_mm);
 	else
-		mask = cpu_online_mask;
-
-	on_each_cpu_mask(mask, octeon_local_flush_icache, NULL, false);
+		mask = *cpu_online_mask;
+	cpumask_clear_cpu(cpu, &mask);
+	mp_ops->send_ipi_mask(&mask, SMP_ICACHE_FLUSH);
 
 	preempt_enable();
+#endif
 }
 
 
-- 
2.6.2

