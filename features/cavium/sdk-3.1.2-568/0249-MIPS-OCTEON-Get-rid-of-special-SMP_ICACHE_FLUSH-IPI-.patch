From e05c79f74b3cc866d2ca8e9a61016a5f57d7604e Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Thu, 8 Aug 2013 10:42:28 -0700
Subject: [PATCH 249/974] MIPS: OCTEON: Get rid of special SMP_ICACHE_FLUSH IPI
 message.

Use a normal cross-CPU function call instead.  The overhead is very
slightly higher, and the SMP_ICACHE_FLUSH is fairly rare (27 per CPU
per Second doing a complete GCC bootstrap).  So we can simplify things
by getting rid of the special case.  This also allows us to use the
same cache management code in a virtualized kernel where there not so
many mailboxes available.

Signed-off-by: David Daney <david.daney@cavium.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/smp.c |  7 -------
 arch/mips/include/asm/smp.h   |  2 --
 arch/mips/mm/c-octeon.c       | 23 +++++++----------------
 3 files changed, 7 insertions(+), 25 deletions(-)

diff --git a/arch/mips/cavium-octeon/smp.c b/arch/mips/cavium-octeon/smp.c
index d27a405..3276e34 100644
--- a/arch/mips/cavium-octeon/smp.c
+++ b/arch/mips/cavium-octeon/smp.c
@@ -32,15 +32,9 @@ extern void octeon_hotplug_entry(void);
 #endif
 struct cvmx_app_hotplug_global *octeon_hotplug_global_ptr;
 
-static void octeon_icache_flush(void)
-{
-	asm volatile ("synci 0($0)\n");
-}
-
 static octeon_message_fn_t  octeon_message_functions[8] = {
 	scheduler_ipi,
 	smp_call_function_interrupt,
-	octeon_icache_flush,
 };
 
 static  int octeon_message_free_mask = 0xf8;
@@ -100,7 +94,6 @@ static irqreturn_t mailbox_interrupt(int irq, void *dev_id)
 	 */
 	BUILD_BUG_ON(SMP_RESCHEDULE_YOURSELF != (1 << 0));
 	BUILD_BUG_ON(SMP_CALL_FUNCTION       != (1 << 1));
-	BUILD_BUG_ON(SMP_ICACHE_FLUSH        != (1 << 2));
 
 	/*
 	 * Load the mailbox register to figure out what we're supposed
diff --git a/arch/mips/include/asm/smp.h b/arch/mips/include/asm/smp.h
index eb60087..74ea214 100644
--- a/arch/mips/include/asm/smp.h
+++ b/arch/mips/include/asm/smp.h
@@ -38,8 +38,6 @@ extern int __cpu_logical_map[NR_CPUS];
 
 #define SMP_RESCHEDULE_YOURSELF 0x1	/* XXX braindead */
 #define SMP_CALL_FUNCTION	0x2
-/* Octeon - Tell another core to flush its icache */
-#define SMP_ICACHE_FLUSH	0x4
 /* Used by kexec crashdump to save all cpu's state */
 #define SMP_DUMP		0x8
 
diff --git a/arch/mips/mm/c-octeon.c b/arch/mips/mm/c-octeon.c
index 66c7d7c..a71b0bb 100644
--- a/arch/mips/mm/c-octeon.c
+++ b/arch/mips/mm/c-octeon.c
@@ -44,7 +44,7 @@ static void octeon_flush_data_cache_page(unsigned long addr)
     /* Nothing to do */
 }
 
-static void octeon_local_flush_icache(void)
+static void octeon_local_flush_icache(void *ignore)
 {
 	asm volatile ("synci 0($0)");
 }
@@ -56,7 +56,7 @@ static void local_octeon_flush_icache_range(unsigned long start,
 					    unsigned long end)
 {
 	mb();
-	octeon_local_flush_icache();
+	octeon_local_flush_icache(NULL);
 }
 
 /**
@@ -67,32 +67,23 @@ static void local_octeon_flush_icache_range(unsigned long start,
  */
 static void octeon_flush_icache_all_cores(struct vm_area_struct *vma)
 {
-	extern void octeon_send_ipi_single(int cpu, unsigned int action);
-#ifdef CONFIG_SMP
-	int cpu;
-	cpumask_t mask;
-#endif
+	const struct cpumask *mask;
 
 	mb();
-	octeon_local_flush_icache();
-#ifdef CONFIG_SMP
 	preempt_disable();
-	cpu = smp_processor_id();
 
 	/*
 	 * If we have a vma structure, we only need to worry about
 	 * cores it has been used on
 	 */
 	if (vma)
-		mask = *mm_cpumask(vma->vm_mm);
+		mask = mm_cpumask(vma->vm_mm);
 	else
-		mask = *cpu_online_mask;
-	cpumask_clear_cpu(cpu, &mask);
-	for_each_cpu(cpu, &mask)
-		octeon_send_ipi_single(cpu, SMP_ICACHE_FLUSH);
+		mask = cpu_online_mask;
+
+	on_each_cpu_mask(mask, octeon_local_flush_icache, NULL, false);
 
 	preempt_enable();
-#endif
 }
 
 
-- 
2.6.2

