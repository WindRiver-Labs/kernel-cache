From c7582196b70fca438d1ccc94836198c6765be062 Mon Sep 17 00:00:00 2001
From: Wang Quanyang <quanyang.wang@windriver.com>
Date: Wed, 6 Jan 2016 01:38:41 -0500
Subject: [PATCH 2/2] mips: OCTEON: Workround for kexec/kdump networking in
 cn78xx

For the limitation of octeon3 ethernet hardware, the network can't be
reset in the second kexec/kdump kernel. So add followings to start
networking as a workaround:
1. If the pko is enabled when booting the second kernel, don't
   initialize the pko hardware.

2. Before boot the second kdump kernel, use the function
   "cvmx_helper_shutdown_cmr_cn78xx" to disable tx/rx ports of
   SGMII interface.

3. When boot the second kernel, there are some warnings as below:
   "Already enabled intsn: 0xxxxxx".
   It's because the errbit intsn have been enabled in first boot,
   so run disable before enable it.

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 .../cavium-octeon/executive/cvmx-helper-pko3.c     |    9 +++++++-
 arch/mips/cavium-octeon/executive/cvmx-helper.c    |   22 ++++++++++++++++++++
 arch/mips/cavium-octeon/octeon-error-tree.c        |   12 ++++++++++
 arch/mips/cavium-octeon/setup.c                    |    2 +
 drivers/net/ethernet/octeon/octeon3-ethernet.c     |   11 +++++++++-
 5 files changed, 54 insertions(+), 2 deletions(-)

diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-pko3.c b/arch/mips/cavium-octeon/executive/cvmx-helper-pko3.c
index b8b99d7..fb8e1e6 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-pko3.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-pko3.c
@@ -1092,7 +1092,12 @@ int cvmx_helper_pko3_init_interface(int xiface)
 int __cvmx_helper_pko3_init_global(unsigned int node, uint16_t gaura)
 {
 	int res;
+#if defined(CONFIG_KEXEC) || defined(CONFIG_CRASH_DUMP)
+	cvmx_pko_enable_t pko_enable;
 
+	pko_enable.u64 = cvmx_read_csr_node(node, CVMX_PKO_ENABLE);
+	if (!pko_enable.s.enable) {
+#endif
 	res = cvmx_pko3_hw_init_global(node, gaura);
 	if(res < 0) {
 		cvmx_dprintf("ERROR: %s:failed block initialization\n",
@@ -1102,7 +1107,9 @@ int __cvmx_helper_pko3_init_global(unsigned int node, uint16_t gaura)
 
 	/* configure channel level */
 	cvmx_pko3_channel_credit_level(node, cvmx_pko_default_channel_level);
-
+#if defined(CONFIG_KEXEC) || defined(CONFIG_CRASH_DUMP)
+	}
+#endif
 	/* add NULL MAC/DQ setup */
 	res = __cvmx_pko3_config_null_interface(node);
 	if (res < 0)
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper.c b/arch/mips/cavium-octeon/executive/cvmx-helper.c
index 12b220b..9053c63 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper.c
@@ -2131,6 +2131,28 @@ int cvmx_helper_shutdown_packet_io_global_cn78xx(int node)
 	return result;
 }
 
+void cvmx_helper_shutdown_cmr_cn78xx(void)
+{
+	int num_interfaces = cvmx_helper_get_number_of_interfaces();
+	int interface;
+	int index;
+	int num_ports = 4;
+	/* Shut down all interfaces and disable TX and RX on all ports */
+	for (interface = 0; interface < num_interfaces; interface++) {
+		switch (cvmx_helper_interface_get_mode(interface)) {
+			case CVMX_HELPER_INTERFACE_MODE_SGMII:
+				for (index = 0; index < num_ports; index++)
+					if ((cvmx_read_csr(CVMX_BGXX_CMRX_CONFIG(index, interface)) & 0xe000) == 0xe000) {
+						cvmx_write_csr(CVMX_BGXX_CMRX_CONFIG(index, interface), 0);
+						mdelay(1);
+					}
+			break;
+		default:
+			break;
+		}
+	}
+}
+
 /**
  * Undo the initialization performed in
  * cvmx_helper_initialize_packet_io_global(). After calling this routine and the
diff --git a/arch/mips/cavium-octeon/octeon-error-tree.c b/arch/mips/cavium-octeon/octeon-error-tree.c
index fbb614c..4ee0d95 100644
--- a/arch/mips/cavium-octeon/octeon-error-tree.c
+++ b/arch/mips/cavium-octeon/octeon-error-tree.c
@@ -424,6 +424,18 @@ static int __init octeon_error_tree_init78(void)
 
 	octeon_78xx_error_array = array->array;
 
+#if defined(CONFIG_KEXEC) || defined(CONFIG_CRASH_DUMP)
+	for_each_online_node(node)
+		for (i = 0; octeon_78xx_error_array[i].intsn < 0xfffff; i++) {
+			enum cvmx_error_groups group;
+			group = octeon_78xx_error_array[i].error_group;
+			if (group != CVMX_ERROR_GROUP_ETHERNET
+			    && group != CVMX_ERROR_GROUP_ILK
+			    && group != CVMX_ERROR_GROUP_ILA)
+				octeon_ciu3_errbits_disable_intsn(node, octeon_78xx_error_array[i].intsn);
+		}
+#endif
+
 	for_each_online_node(node)
 		for (i = 0; octeon_78xx_error_array[i].intsn < 0xfffff; i++) {
 			enum cvmx_error_groups group;
diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 77d4d99..117d659 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -159,8 +159,10 @@ static void octeon_shutdown(void)
 #endif
 }
 
+extern void cvmx_helper_shutdown_cmr_cn78xx(void);
 static void octeon_crash_shutdown(struct pt_regs *regs)
 {
+	cvmx_helper_shutdown_cmr_cn78xx();
 	octeon_generic_shutdown();
 	octeon_error_tree_shutdown();
 	default_machine_crash_shutdown(regs);
diff --git a/drivers/net/ethernet/octeon/octeon3-ethernet.c b/drivers/net/ethernet/octeon/octeon3-ethernet.c
index 6e8ceca..a30acf7 100644
--- a/drivers/net/ethernet/octeon/octeon3-ethernet.c
+++ b/drivers/net/ethernet/octeon/octeon3-ethernet.c
@@ -2457,7 +2457,16 @@ static int octeon3_eth_probe(struct platform_device *pdev)
 	int r;
 
 	struct mac_platform_data *pd = dev_get_platdata(&pdev->dev);
-
+#if defined(CONFIG_KEXEC) || defined(CONFIG_CRASH_DUMP)
+	static bool cvmx_res_clear = false;
+	if (cvmx_res_clear == false) {
+		cvmx_bootmem_phy_named_block_free("cvmx-global-resources", CVMX_BOOTMEM_FLAG_NO_LOCKING);
+		cvmx_bootmem_phy_named_block_free("cvmx_pko3_global_dq_table", CVMX_BOOTMEM_FLAG_NO_LOCKING);
+		cvmx_bootmem_phy_named_block_free("cvmx-app-config", CVMX_BOOTMEM_FLAG_NO_LOCKING);
+		cvmx_bootmem_phy_named_block_free("cvmx-app-id", CVMX_BOOTMEM_FLAG_NO_LOCKING);
+		cvmx_res_clear = true;
+	}
+#endif
 	r = octeon3_eth_global_init(pd->numa_node);
 	if (r)
 		return r;
-- 
1.7.5.4

