From 87c5999208f4dadb44610c40e5c7cd673c5ecf2c Mon Sep 17 00:00:00 2001
From: Carlos Munoz <cmunoz@caviumnetworks.com>
Date: Thu, 17 Jul 2014 18:05:50 -0700
Subject: [PATCH 721/974] Bug #12593 netdev: octeon3-ethernet: Calculate the
 right L4 checksum for IP fragments.

Signed-off-by: Carlos Munoz <cmunoz@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/net/ethernet/octeon/octeon3-ethernet.c | 64 +++++++++++++-------------
 1 file changed, 33 insertions(+), 31 deletions(-)

diff --git a/drivers/net/ethernet/octeon/octeon3-ethernet.c b/drivers/net/ethernet/octeon/octeon3-ethernet.c
index b3bdfe2..9a633eb 100644
--- a/drivers/net/ethernet/octeon/octeon3-ethernet.c
+++ b/drivers/net/ethernet/octeon/octeon3-ethernet.c
@@ -1731,42 +1731,44 @@ static int octeon3_eth_ndo_start_xmit(struct sk_buff *skb, struct net_device *ne
 	send_hdr.s.total = skb->len;
 	send_hdr.s.aura = aura;
 
+	if (skb->ip_summed != CHECKSUM_NONE) {
 #ifndef BROKEN_SIMULATOR_CSUM
-	switch (skb->protocol) {
-	case __constant_htons(ETH_P_IP):
-		send_hdr.s.l3ptr = ETH_HLEN;
-		send_hdr.s.ckl3 = 1;
-		l4_hdr = ip_hdr(skb)->protocol;
-		send_hdr.s.l4ptr = ETH_HLEN + (4 * ip_hdr(skb)->ihl);
-		break;
-	case __constant_htons(ETH_P_IPV6):
-		l4_hdr = ipv6_hdr(skb)->nexthdr;
-		break;
-	default:
-		break;
-	}
+		switch (skb->protocol) {
+		case __constant_htons(ETH_P_IP):
+			send_hdr.s.l3ptr = ETH_HLEN;
+			send_hdr.s.ckl3 = 1;
+			l4_hdr = ip_hdr(skb)->protocol;
+			send_hdr.s.l4ptr = ETH_HLEN + (4 * ip_hdr(skb)->ihl);
+			break;
+		case __constant_htons(ETH_P_IPV6):
+			l4_hdr = ipv6_hdr(skb)->nexthdr;
+			break;
+		default:
+			break;
+		}
 #endif
-	checksum_alg = 1; /* UDP == 1 */
-	switch (l4_hdr) {
-	case IPPROTO_SCTP:
-		if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X)) /* PKO-18824 */
+		checksum_alg = 1; /* UDP == 1 */
+		switch (l4_hdr) {
+		case IPPROTO_SCTP:
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+				break;
+			checksum_alg++; /* SCTP == 3 */
+			/* Fall through */
+		case IPPROTO_TCP: /* TCP == 2 */
+			checksum_alg++;
+			/* Fall through */
+		case IPPROTO_UDP:
+			if (skb_transport_header_was_set(skb)) {
+				int l4ptr = skb_transport_header(skb) -
+					skb->data;
+				send_hdr.s.l4ptr = l4ptr;
+				send_hdr.s.ckl4 = checksum_alg;
+			}
+			break;
+		default:
 			break;
-		checksum_alg++; /* SCTP == 3 */
-		/* Fall through */
-	case IPPROTO_TCP: /* TCP == 2 */
-		checksum_alg++;
-		/* Fall through */
-	case IPPROTO_UDP:
-		if (skb_transport_header_was_set(skb)) {
-			int l4ptr = skb_transport_header(skb) - skb->data;
-			send_hdr.s.l4ptr = l4ptr;
-			send_hdr.s.ckl4 = checksum_alg;
 		}
-		break;
-	default:
-		break;
 	}
-
 	cvmx_scratch_write64(scr_off, send_hdr.u64);
 	scr_off += sizeof(send_hdr);
 
-- 
2.6.2

