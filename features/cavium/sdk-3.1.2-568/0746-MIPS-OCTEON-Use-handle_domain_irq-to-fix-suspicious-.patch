From a89c19ece03e0d44dbcf3e02e08acf20b3f87438 Mon Sep 17 00:00:00 2001
From: Andreas Herrmann <andreas.herrmann@caviumnetworks.com>
Date: Sun, 20 Jul 2014 18:05:50 -0700
Subject: [PATCH 746/974] MIPS: OCTEON: Use handle_domain_irq to fix suspicious
 RCU usage

Bug #12696

[   97.939452] ===============================
[   97.943631] [ INFO: suspicious RCU usage. ]
[   97.947812] 3.10.14-sdk-mipsvz-00754-g8fb163f-dirty #8 Not tainted
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
[   97.953988] -------------------------------
[   97.958171] /home/reasand/projects/repos/cv/linux-base/trunk/kernel/linux-octeon-sdk/include/linux/rcupdate.h:780 rcu_read_lock() used illegally while idle!
[   97.972159]
[   97.972159] other info that might help us debug this:
[   97.972159]
[   97.980161]
[   97.980161] RCU used illegally from idle CPU!
[   97.980161] rcu_scheduler_active = 1, debug_locks = 0
[   97.991026] RCU used illegally from extended quiescent state!
[   97.996770] 1 lock held by swapper/0/0:
[   98.000602]  #0:  (rcu_read_lock){.+.+..}, at: [<ffffffff80210388>] irq_find_mapping+0xb0/0x268
[   98.009360]
[   98.009360] stack backtrace:
[   98.013718] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 3.10.14-sdk-mipsvz-00754-g8fb163f-dirty #8
[   98.022498] Stack : ffffffff86830000 ffffffff80b30000 0000000000000064 ffffffff80b30000
          000000000000000f ffffffff80b30000 0000000000000004 ffffffff80b30000
          0000000000000000 ffffffff8018b464 0000000000000000 000000000000000f
          ffffffff80b30000 ffffffff8018be9c 0000000000000000 0000000000000000
          ffffffff86830000 ffffffff86820000 ffffffff8099d958 ffffffff80a974f7
          ffffffff8681de38 ffffffff80a97918 0000000000000000 0000000000000000
          ffffffff80b30000 ffffffff80b50000 ffffffff80a90000 ffffffff807efc70
          ffffffff80a4fae8 ffffffff80a4f9e0 ffffffff80b30000 ffffffff80210538
          ffffffff80a975f0 ffffffff8099d958 0000000000000000 0000000000000000
          0000000000000000 ffffffff80158610 0000000000000000 0000000000000000
          ...
[   98.088037] Call Trace:
[   98.090483] [<ffffffff80158610>] show_stack+0xc0/0xe0
[   98.095533] [<ffffffff80210538>] irq_find_mapping+0x260/0x268
[   98.101279] [<ffffffff80105a20>] octeon_irq_ciu3_ip2+0x90/0x100
[   98.107197] [<ffffffff80107394>] plat_irq_dispatch+0x44/0xc0
[   98.112858] [<ffffffff80152fa0>] ret_from_irq+0x0/0x4
[   98.117909] [<ffffffff80153320>] __r4k_wait+0x20/0x40
[   98.122962] [<ffffffff801d9a20>] cpu_startup_entry+0xf0/0x4a0
[   98.128711] [<ffffffff80b959ec>] start_kernel+0x4d4/0x4f4
[   98.134107]

This issues was already hit with mainline on other architectures and
is addressed by a patchset from Marc Zyngier
([PATCH v2 00/26] genirq: fix use of irq_find_mapping outside of legal RCU context,
http://marc.info/?l=linux-kernel&m=140904743628439&w=2)

Signed-off-by: Andreas Herrmann <andreas.herrmann@caviumnetworks.com>
---
 arch/mips/Kconfig                    |  1 +
 arch/mips/cavium-octeon/octeon-irq.c |  7 +++----
 arch/mips/include/asm/Kbuild         |  1 +
 arch/mips/include/asm/irq_regs.h     | 10 ++++++++++
 4 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index 0424cb8..3d3662f 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -770,6 +770,7 @@ config CAVIUM_OCTEON_SOC
 	select MIPS_NR_CPU_NR_MAP_1024
 	select SYS_SUPPORTS_NUMA
 	select SPARSE_IRQ if NUMA
+	select HANDLE_DOMAIN_IRQ
 	help
 	  This option supports all of the Octeon SoCs and reference
 	  boards from Cavium, Inc. The Cavium Octeon processor is a
diff --git a/arch/mips/cavium-octeon/octeon-irq.c b/arch/mips/cavium-octeon/octeon-irq.c
index b975b82..e3a3d5d 100644
--- a/arch/mips/cavium-octeon/octeon-irq.c
+++ b/arch/mips/cavium-octeon/octeon-irq.c
@@ -2299,11 +2299,10 @@ static void octeon_irq_ciu3_ip2(void)
 		irq_hw_number_t intsn = dest_pp_int.s.intsn;
 		/* Get the domain to use from the major block */
 		int block = intsn >> 12;
-		int irq = irq_find_mapping(ciu3_info->domain[block], intsn);
+		int ret;
 
-		if (likely(irq)) {
-			do_IRQ(irq);
-		} else {
+		ret = handle_domain_irq(ciu3_info->domain[block], intsn, NULL);
+		if (ret < 0) {
 			union cvmx_ciu3_iscx_w1c isc_w1c;
 			u64 isc_w1c_addr = ciu3_addr + CIU3_ISC_W1C(intsn);
 
diff --git a/arch/mips/include/asm/Kbuild b/arch/mips/include/asm/Kbuild
index 9b54b7a..af6234e 100644
--- a/arch/mips/include/asm/Kbuild
+++ b/arch/mips/include/asm/Kbuild
@@ -1,2 +1,3 @@
 # MIPS headers
 generic-y += trace_clock.h
+generic-y += irq_regs.h
diff --git a/arch/mips/include/asm/irq_regs.h b/arch/mips/include/asm/irq_regs.h
index 33bd2a0..8c48d6d 100644
--- a/arch/mips/include/asm/irq_regs.h
+++ b/arch/mips/include/asm/irq_regs.h
@@ -18,4 +18,14 @@ static inline struct pt_regs *get_irq_regs(void)
 	return current_thread_info()->regs;
 }
 
+static inline struct pt_regs *set_irq_regs(struct pt_regs *new_regs)
+{
+	struct pt_regs *old_regs;
+
+	old_regs = get_irq_regs();
+	current_thread_info()->regs = new_regs;
+
+	return old_regs;
+}
+
 #endif /* __ASM_IRQ_REGS_H */
-- 
2.6.2

