From cf71d4f6803b2a171d399c354139303feafe944f Mon Sep 17 00:00:00 2001
From: Leonid Rosenboim <lrosenboim@caviumnetworks.com>
Date: Fri, 6 Sep 2013 14:34:28 -0700
Subject: [PATCH 295/974] MIPS: Octeon: Fix HOTPLUG_CPU data structures for
 LITTLE_ENDIAN

These data structures are global, shared between Linux images
and SE applications, and must be either big-endian or endian-agnostic
for the data to be correctly interpreted in either endian mode.
Add magic number validation on hotplug structures.

Signed-off-by: Leonid Rosenboim <lrosenboim@caviumnetworks.com>
[Original patch taken from Cavium SDK 3.1.2-568]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/mips/cavium-octeon/smp.c                   |  8 +++-
 arch/mips/include/asm/octeon/cvmx-app-hotplug.h | 54 +++++++++++++++++++------
 arch/mips/include/asm/octeon/octeon-boot-info.h | 10 +++++
 3 files changed, 58 insertions(+), 14 deletions(-)

diff --git a/arch/mips/cavium-octeon/smp.c b/arch/mips/cavium-octeon/smp.c
index a47e9a6..a886099 100644
--- a/arch/mips/cavium-octeon/smp.c
+++ b/arch/mips/cavium-octeon/smp.c
@@ -171,7 +171,7 @@ static void octeon_hotplug_global_init(void *arg)
 	cvmx_app_hotplug_global_t *hgp = arg;
 	memset(hgp, 0, CVMX_APP_HOTPLUG_INFO_REGION_SIZE);
 
-	hgp->version = CVMX_HOTPLUG_MAGIC_VERSION;
+	hgp->magic_version = CVMX_HOTPLUG_MAGIC_VERSION;
 
 	/* Get legacy LABI data structure for initial parameters */
 	labi = phys_to_virt(LABI_ADDR_IN_BOOTLOADER);
@@ -262,6 +262,12 @@ static void octeon_smp_setup(void)
 		return;
 	}
 
+	/* Validate magic number */
+	if (hgp->magic_version != CVMX_HOTPLUG_MAGIC_VERSION) {
+		pr_err("Cavium Hotplug: data record invalid\n");
+		return;
+	}
+
 	/* Convert coremask to string for printing */
 	cvmx_coremask_bmp2str(&hgp->avail_coremask, hexstr);
 
diff --git a/arch/mips/include/asm/octeon/cvmx-app-hotplug.h b/arch/mips/include/asm/octeon/cvmx-app-hotplug.h
index 0429cd9..dc308d3 100644
--- a/arch/mips/include/asm/octeon/cvmx-app-hotplug.h
+++ b/arch/mips/include/asm/octeon/cvmx-app-hotplug.h
@@ -92,38 +92,66 @@ typedef struct cvmx_app_hotplug_callbacks {
 	void (*unplug_core_callback) (void *ptr);
 } cvmx_app_hotplug_callbacks_t;
 
-/* The size of this struct should be a fixed size of 1024 bytes.
-   Additional members should be added towards the end of the
-   strcuture by adjusting the size of padding */
+/*
+ * The size of this struct should be a fixed size of 1024 bytes.
+ * and is endianness-agnostic, it may seem wasteful but all flags
+ * occupy a 64-bit field.
+ *
+ * <coremask> represents all core currently running the application
+ * <hotplug_activated_coremask> represents which cores have registered
+ * to accept hotplug mailbox interrupts
+ * <hplugged_cores> represents which cores are being added to an application.
+ * <unplug_cores> represents the core being removed from an application.
+ * <shutdown_cores> is set to all cores in <coremask> when the application
+ * is being shut down.
+ *
+ * All callback pointers are in the application virtual address space.
+ *
+ * <coremask> indicates all rores running the application.
+ * <hotplug_activated_coremask> indicates which cores have called
+ * cvmx_app_hotplug_activate() and are thus ready to receive events.
+ * <hplugged_cores> lists cores being added to an app dynamically.
+ * <shutdown_cores> lists all application cores when it is being shut down.
+ * <unplug_cores> lists the cores being removed from an application.
+ *
+ * <app_shutdown> indicates if the application will call cvmx_core_shutdown()
+ * or the call needs to be made on its behalf by the hotplug library.
+ * <cvmx_app_boot_record_ptr> is a physical address of the primary
+ * boot record for an application.
+ */
 typedef struct cvmx_app_hotplug_info {
-	char app_name[CVMX_APP_HOTPLUG_MAX_APPNAME_LEN];
 	struct cvmx_coremask coremask;
 	struct cvmx_coremask hotplug_activated_coremask;
 	struct cvmx_coremask hplugged_cores;
 	struct cvmx_coremask shutdown_cores;
 	struct cvmx_coremask unplug_cores;
-	int32_t valid;
-	int32_t volatile shutdown_done;
 	uint64_t shutdown_callback;
 	uint64_t unplug_callback;
 	uint64_t cores_added_callback;
 	uint64_t cores_removed_callback;
-	uint64_t hotplug_start;
 	uint64_t data;
-	uint32_t app_shutdown;
-	uint32_t padding[17];
+	uint64_t app_shutdown;
+	uint64_t shutdown_done;
+	uint64_t cvmx_app_boot_record_ptr;
+	char app_name[CVMX_APP_HOTPLUG_MAX_APPNAME_LEN];
+	uint64_t unused[7];
+	uint64_t valid_magic;
 } cvmx_app_hotplug_info_t;
 
 struct cvmx_app_hotplug_global {
-	struct cvmx_coremask avail_coremask;
 	cvmx_app_hotplug_info_t hotplug_info_array[CVMX_APP_HOTPLUG_MAX_APPS];
-	uint32_t version;
+	struct cvmx_coremask avail_coremask;
 	cvmx_spinlock_t hotplug_global_lock;
-	int app_under_boot;
-	int app_under_shutdown;
+	uint64_t app_under_boot;
+	uint64_t app_under_shutdown;
+	uint64_t reserved[8];
+	uint64_t magic_version;
 };
 typedef struct cvmx_app_hotplug_global cvmx_app_hotplug_global_t;
 
+#define	CVMX_HOTPLUG_MAGIC_VERSION	0xb10ce1abe1000001ULL
+#define	CVMX_HOTPLUG_MAGIC_VALID	0xf1a90001f1a90001ULL
+
 int is_core_being_hot_plugged(void);
 int is_app_under_boot_or_shutdown(void);
 void set_app_unber_boot(int val);
diff --git a/arch/mips/include/asm/octeon/octeon-boot-info.h b/arch/mips/include/asm/octeon/octeon-boot-info.h
index 9676b81..29370be 100644
--- a/arch/mips/include/asm/octeon/octeon-boot-info.h
+++ b/arch/mips/include/asm/octeon/octeon-boot-info.h
@@ -90,14 +90,24 @@
 struct  boot_init_vector {
 	/* First stage address - in ram instead of flash */
 	uint64_t code_addr;
+#ifdef __BIG_ENDIAN_BITFIELD
 	/* Setup code for application, NOT application entry point */
 	uint32_t app_start_func_addr;
 	/* k0 is used for global data - needs to be passed to other cores */
 	uint32_t k0_val;
+#else
+	uint32_t k0_val;
+	uint32_t app_start_func_addr;
+#endif	/* LITTLE_ENDIAN */
 	/* Address of boot info block structure */
 	uint64_t boot_info_addr;
+#ifdef __BIG_ENDIAN_BITFIELD
 	uint32_t flags;		/* flags */
 	uint32_t pad;
+#else
+	uint32_t pad;
+	uint32_t flags;		/* flags */
+#endif	/* LITTLE_ENDIAN */
 };
 typedef struct  boot_init_vector boot_init_vector_t;
 
-- 
2.6.2

