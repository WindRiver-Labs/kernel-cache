From 9e64d41b18d8e256b1f6d502aa58791b621a3a3e Mon Sep 17 00:00:00 2001
From: Li Zhou <li.zhou@windriver.com>
Date: Wed, 26 Sep 2018 10:30:50 +0800
Subject: [PATCH] pcie: add LD checking before read/write config

This commit comes from Cavium Technical Support Team and hasn't been
included by a formal SDK. It is used to solve below customer issue:
The PCIe endpoint suffers an event that makes the link go down.
Then try to access the configuration space of the pcie device:
echo 1 > /sys/bus/pci/devices/0001:01:00.0/enable
This produces the kernel panic:
[16163.394284] Data bus error, epc == ffffffff80857fc8, ra == ffffffff80c8afa4
[16163.394288] Oops[#1]:
......
[16163.394459] Call Trace:
[16163.394464] [<ffffffff80857fc8>] cvmx_pcie_config_read16+0x48/0x60
[16163.394470] [<ffffffff80c8afa4>] octeon_pcie_read_config+0x154/0x340
[16163.394476] [<ffffffff80b78620>] pci_bus_read_config_word+0xa0/0xe0
[16163.394483] [<ffffffff80b83f8c>] pci_enable_device_flags+0x154/0x168
[16163.394488] [<ffffffff80b86c58>] enable_store+0xa8/0xb8
[16163.394493] [<ffffffff80a4e840>] kernfs_fop_write+0xf8/0x1c0
[16163.394499] [<ffffffff809cf6e8>] vfs_write+0xa8/0x1c8
[16163.394504] [<ffffffff809d01fc>] SyS_write+0x64/0xe8
[16163.394510] [<ffffffff80872e44>] handle_sys64+0x44/0x68

The patch adds checking for the link's status in the
cvmx_pcie_config_read/write functions to avoid this issue.

Signed-off-by: Li Zhou <li.zhou@windriver.com>
---
 arch/mips/cavium-octeon/executive/cvmx-pcie.c |   43 +++++++++++++++++++++++++
 1 file changed, 43 insertions(+)

diff --git a/arch/mips/cavium-octeon/executive/cvmx-pcie.c b/arch/mips/cavium-octeon/executive/cvmx-pcie.c
index eea979a..de19376 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-pcie.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-pcie.c
@@ -2110,6 +2110,25 @@ int cvmx_pcie_rc_shutdown(int pcie_port)
 
 /**
  * @INTERNAL
+ * Return 0 is link is up, otherwise return 1
+ *
+ * @param node	node
+ * @param port	PCIe port
+ *
+ * @return 0 if link is up, otherwise 0.
+ */
+static int __is_pcie_link_up(int node, int port)
+{
+	cvmx_pciercx_cfg032_t pciercx_cfg032;
+
+	pciercx_cfg032.u32 = CVMX_PCIE_CFGX_READ(port, CVMX_PCIERCX_CFG032(port));
+	if (!(pciercx_cfg032.s.dlla && !pciercx_cfg032.s.lt))
+		return 1;
+	return 0;
+}
+
+/**
+ * @INTERNAL
  * Build a PCIe config space request address for a device
  *
  * @param node	    node
@@ -2168,6 +2187,10 @@ uint8_t cvmx_pcie_config_read8(int pcie_port, int bus, int dev, int fn, int reg)
 	uint64_t address;
 	int node = (pcie_port >> 4) & 0x3;
 	pcie_port &= 0x3;
+
+	if (__is_pcie_link_up(node, pcie_port))
+		return 0xff;
+
 	address = __cvmx_pcie_build_config_addr(node, pcie_port, bus, dev,
 							 fn, reg);
 	if (address)
@@ -2193,6 +2216,10 @@ uint16_t cvmx_pcie_config_read16(int pcie_port, int bus, int dev,
 	uint64_t address;
 	int node = (pcie_port >> 4) & 0x3;
 	pcie_port &= 0x3;
+
+	if (__is_pcie_link_up(node, pcie_port))
+		return 0xffff;
+
 	address = __cvmx_pcie_build_config_addr(node, pcie_port, bus, dev,
 							 fn, reg);
 	if (address)
@@ -2218,6 +2245,10 @@ uint32_t cvmx_pcie_config_read32(int pcie_port, int bus, int dev,
 	uint64_t address;
 	int node = (pcie_port >> 4) & 0x3;
 	pcie_port &= 0x3;
+
+	if (__is_pcie_link_up(node, pcie_port))
+		return 0xffffffff;
+
 	address = __cvmx_pcie_build_config_addr(node, pcie_port, bus, dev,
 							 fn, reg);
 	if (address && pcie_link_initialized[node][pcie_port])
@@ -2242,6 +2273,10 @@ void cvmx_pcie_config_write8(int pcie_port, int bus, int dev, int fn,
 	uint64_t address;
 	int node = (pcie_port >> 4) & 0x3;
 	pcie_port &= 0x3;
+
+	if (__is_pcie_link_up(node, pcie_port))
+		return;
+
 	address = __cvmx_pcie_build_config_addr(node, pcie_port, bus, dev,
 							 fn, reg);
 	if (address)
@@ -2264,6 +2299,10 @@ void cvmx_pcie_config_write16(int pcie_port, int bus, int dev, int fn,
 	uint64_t address;
 	int node = (pcie_port >> 4) & 0x3;
 	pcie_port &= 0x3;
+
+	if (__is_pcie_link_up(node, pcie_port))
+		return;
+
 	address = __cvmx_pcie_build_config_addr(node, pcie_port, bus, dev,
 							 fn, reg);
 	if (address)
@@ -2286,6 +2325,10 @@ void cvmx_pcie_config_write32(int pcie_port, int bus, int dev, int fn,
 	uint64_t address;
 	int node = (pcie_port >> 4) & 0x3;
 	pcie_port &= 0x3;
+
+	if (__is_pcie_link_up(node, pcie_port))
+		return;
+
 	address = __cvmx_pcie_build_config_addr(node, pcie_port, bus, dev,
 							 fn, reg);
 	if (address)
-- 
1.7.9.5

