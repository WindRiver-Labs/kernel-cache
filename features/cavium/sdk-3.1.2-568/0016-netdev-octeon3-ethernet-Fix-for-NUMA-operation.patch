From 959cbd504c9678eba25147a552635aee19508a49 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Wed, 5 Nov 2014 17:20:37 -0800
Subject: [PATCH 016/184] netdev: octeon3-ethernet: Fix for NUMA operation.

Source: Cavium Networks, Inc.
MR: 00000
Type: Integration
Disposition: Merged from Octeon Tree
ChangeID: 9f21d127efd0684b4e21070668a7aa51a2c9253a
Description:

Run tx_complete workers only on the proper node, and assign global SSO
groups in a couple of places.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from octeon-linux-kernel-patches-SDK-3.1.2-release]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/octeon/octeon3-ethernet.c | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/octeon/octeon3-ethernet.c b/drivers/net/ethernet/octeon/octeon3-ethernet.c
index 9053448..8fcf8c4 100644
--- a/drivers/net/ethernet/octeon/octeon3-ethernet.c
+++ b/drivers/net/ethernet/octeon/octeon3-ethernet.c
@@ -325,6 +325,11 @@ static void octeon3_eth_sso_pass1_limit(int node, int	grp)
  */
 static void *aura2buffers_needed[1024];
 
+static int octeon3_eth_lgrp_to_ggrp(int node, int grp)
+{
+	return (node << 8) | grp;
+}
+
 static void octeon3_eth_gen_affinity(int node, cpumask_t *mask)
 {
 	int cpu;
@@ -800,6 +805,9 @@ static int octeon3_eth_global_init(unsigned int node)
 			rv = PTR_ERR(oen->workers[i].task);
 			goto done;
 		} else {
+#ifdef CONFIG_NUMA
+			set_cpus_allowed_ptr(oen->workers[i].task, cpumask_of_node(node));
+#endif
 			wake_up_process(oen->workers[i].task);
 		}
 	}
@@ -1343,7 +1351,7 @@ static int octeon3_eth_ndo_init(struct net_device *netdev)
 
 	priv->tx_complete_grp = oen->tx_complete_grp;
 	priv->pki_pkind = cvmx_helper_get_pknd(priv->xiface, priv->port_index);
-	dev_err(netdev->dev.parent, "rx sso grp:%d..%d aura:%d pknd:%d pko_queue:%d\n",
+	dev_info(netdev->dev.parent, "rx sso grp:%d..%d aura:%d pknd:%d pko_queue:%d\n",
 		base_rx_grp, base_rx_grp + priv->num_rx_cxt, priv->pki_laura, priv->pki_pkind, priv->pko_queue);
 
 	prt_schd = kzalloc(sizeof(*prt_schd), GFP_KERNEL);
@@ -1358,7 +1366,7 @@ static int octeon3_eth_ndo_init(struct net_device *netdev)
 	prt_schd->aura_per_prt = true;
 	prt_schd->aura_num = priv->pki_laura;
 	prt_schd->sso_grp_per_prt = true;
-	prt_schd->sso_grp = base_rx_grp;
+	prt_schd->sso_grp = octeon3_eth_lgrp_to_ggrp(priv->numa_node, base_rx_grp);
 	prt_schd->qpg_qos = CVMX_PKI_QPG_QOS_NONE;
 
 	cvmx_helper_pki_init_port(ipd_port, prt_schd);
@@ -1846,7 +1854,7 @@ static int octeon3_eth_ndo_start_xmit(struct sk_buff *skb, struct net_device *ne
 		send_work.s.subdc4 = CVMX_PKO_SENDSUBDC_WORK;
 		send_work.s.addr = virt_to_phys(work);
 		send_work.s.tt = CVMX_POW_TAG_TYPE_NULL;
-		send_work.s.grp = priv->tx_complete_grp;
+		send_work.s.grp = octeon3_eth_lgrp_to_ggrp(priv->numa_node, priv->tx_complete_grp);
 		cvmx_scratch_write64(scr_off, send_work.u64);
 		scr_off += sizeof(buf_ptr);
 	}
-- 
1.9.1

