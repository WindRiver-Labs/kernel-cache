From 0467e08c6d7614822cf04a22486b676476cd0559 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 9 Jan 2015 12:13:03 -0800
Subject: [PATCH 053/184] MIPS: OCTEON: Fix Cache error detection for OCTEON
 III.

Source: Cavium Networks, Inc.
MR: 00000
Type: Integration
Disposition: Merged from Octeon Tree
ChangeID: dedc91d8da70cb9f17cca158cab195eaa20a3900
Description:

Quit using cache_err_dcache[] for OCTEON III, as it is not needed,
make it big enough so that we will never write beyond the end of the
array.

Use indirect jumps in cex-oct.S so we can be sure of reaching the
kernel from any possible Ebase.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
[Original patch taken from octeon-linux-kernel-patches-SDK-3.1.2-release]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/octeon/octeon.h |  2 +-
 arch/mips/mm/c-octeon.c               | 14 ++++++++++----
 arch/mips/mm/cex-oct.S                | 32 ++++++++++++--------------------
 drivers/edac/octeon_edac-pc.c         |  8 ++++++--
 4 files changed, 29 insertions(+), 27 deletions(-)

diff --git a/arch/mips/include/asm/octeon/octeon.h b/arch/mips/include/asm/octeon/octeon.h
index d9566d2..66fce55 100644
--- a/arch/mips/include/asm/octeon/octeon.h
+++ b/arch/mips/include/asm/octeon/octeon.h
@@ -465,7 +465,7 @@ int unregister_co_cache_error_notifier(struct notifier_block *nb);
 #define CO_CACHE_ERROR_WB_PARITY 2
 #define CO_CACHE_ERROR_TLB_PARITY 3
 
-extern unsigned long long cache_err_dcache[NR_CPUS];
+extern unsigned long long cache_err_dcache[];
 
 /* Octeon multiplier save/restore routines from octeon_switch.S */
 void octeon_mult_save(void);
diff --git a/arch/mips/mm/c-octeon.c b/arch/mips/mm/c-octeon.c
index c483084..3a23f76 100644
--- a/arch/mips/mm/c-octeon.c
+++ b/arch/mips/mm/c-octeon.c
@@ -28,7 +28,11 @@
 
 #include <asm/octeon/octeon.h>
 
-unsigned long long cache_err_dcache[NR_CPUS];
+/*
+ * 32 is the maximum number of cores on OCTEON II CPUS, which are the
+ * only ones that used this array.
+ */
+unsigned long long cache_err_dcache[32];
 EXPORT_SYMBOL_GPL(cache_err_dcache);
 
 static RAW_NOTIFIER_HEAD(co_cache_error_chain);
@@ -494,14 +498,16 @@ static void co_cache_error_call_notifiers(unsigned long val)
 		unsigned long coreid = cvmx_get_core_num();
 		u64 icache_err = read_octeon_c0_icacheerr();
 
-		if (val) {
+		if (val && current_cpu_type() != CPU_CAVIUM_OCTEON3) {
 			dcache_err = cache_err_dcache[coreid];
 			cache_err_dcache[coreid] = 0;
 		} else {
-			if (current_cpu_type() == CPU_CAVIUM_OCTEON3)
+			if (current_cpu_type() == CPU_CAVIUM_OCTEON3) {
 				dcache_err = read_octeon_c0_errctl();
-			else
+				write_octeon_c0_errctl(dcache_err | 1);
+			} else {
 				dcache_err = read_octeon_c0_dcacheerr();
+			}
 		}
 
 		pr_err("Core%lu: Cache error exception:\n", coreid);
diff --git a/arch/mips/mm/cex-oct.S b/arch/mips/mm/cex-oct.S
index 225b163..c6ef668 100644
--- a/arch/mips/mm/cex-oct.S
+++ b/arch/mips/mm/cex-oct.S
@@ -41,11 +41,13 @@
 	andi	k1, k1, ST0_EXL
 	beqz	k1, 1f
 	 nop
-	j	cache_parity_error_octeon_non_recoverable
+	dla	k0, cache_parity_error_octeon_non_recoverable
+	jr	k0
 	 nop
 
 	/* exception is recoverable */
-1:	j	handle_cache_err
+1:	dla	k0, handle_cache_err
+	jr	k0
 	 nop
 
 	.set	pop
@@ -59,31 +61,21 @@
 	.set    noreorder
 	.set    noat
 
-
-	/* due to an errata we need to read the COP0 CacheErr (Dcache)
-	 * before any cache/DRAM access  */
-
-	rdhwr   k0, $0        /* get core_id */
-	PTR_LA  k1, cache_err_dcache
-	sll     k0, k0, 3
-	PTR_ADDU k1, k0, k1    /* k1 = &cache_err_dcache[core_id] */
-
-	dmfc0   k0, CP0_ERRCTL
-	sd      k0, (k1)
-	ori     k0, k0, 1
-	xori    k0, k0, 1               /* clear Dcache parity error */
-	dmtc0   k0, CP0_ERRCTL
+	/* Invalidate the DCache */
+	cache	1, 0($0)
 
 	/* check whether this is a nested exception */
 	mfc0    k1, CP0_STATUS
 	andi    k1, k1, ST0_EXL
 	beqz    k1, 2f
 	nop
-	j       cache_parity_error_octeon_non_recoverable
+	dla	k0, cache_parity_error_octeon_non_recoverable
+	jr	k0
 	nop
 
 	/* exception is recoverable */
-2 :	j       handle_cache_err
+2:	dla	k0, handle_cache_err
+	jr	k0
 	nop
 
 	.set    pop
@@ -100,9 +92,9 @@
 	SAVE_ALL
 	KMODE
 	jal	cache_parity_error_octeon_recoverable
-	nop
+	 nop
 	j	ret_from_exception
-	nop
+	 nop
 
 	.set pop
 	END(handle_cache_err)
diff --git a/drivers/edac/octeon_edac-pc.c b/drivers/edac/octeon_edac-pc.c
index 66a1eaa..ad665a1 100644
--- a/drivers/edac/octeon_edac-pc.c
+++ b/drivers/edac/octeon_edac-pc.c
@@ -45,8 +45,12 @@ static int  co_cache_error_event(struct notifier_block *this,
 
 	switch (event) {
 	case CO_CACHE_ERROR_UNRECOVERABLE:
-		dcache_err = cache_err_dcache[core];
-		cache_err_dcache[core] = 0;
+		if (current_cpu_type() == CPU_CAVIUM_OCTEON3) {
+			dcache_err = read_octeon_c0_errctl();
+		} else {
+			dcache_err = cache_err_dcache[core];
+			cache_err_dcache[core] = 0;
+		}
 		break;
 	case CO_CACHE_ERROR_RECOVERABLE:
 		if (OCTEON_IS_OCTEON3())
-- 
1.9.1

