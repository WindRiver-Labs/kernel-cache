wrnote: add hooks into binfmt_elf

Add the ability to add Wind River information to core
dumps

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>

---
 fs/binfmt_elf.c |   98 ++++++++++++++++++++++++++++++++++++++++++++++++++++---
 1 files changed, 93 insertions(+), 5 deletions(-)

diff --git a/fs/binfmt_elf.c b/fs/binfmt_elf.c
index 655ed8d..a0c150a 100644
--- a/fs/binfmt_elf.c
+++ b/fs/binfmt_elf.c
@@ -22,6 +22,9 @@
 #include <linux/string.h>
 #include <linux/file.h>
 #include <linux/fcntl.h>
+#ifdef CONFIG_WRNOTE
+#include <linux/wrnote.h>
+#endif
 #include <linux/ptrace.h>
 #include <linux/slab.h>
 #include <linux/shm.h>
@@ -1415,6 +1418,7 @@ struct elf_thread_core_info {
 struct elf_note_info {
 	struct elf_thread_core_info *thread;
 	struct memelfnote psinfo;
+	struct memelfnote wr[3];
 	struct memelfnote auxv;
 	size_t size;
 	int thread_notes;
@@ -1602,6 +1606,14 @@ static int write_note_info(struct elf_note_info *info,
 
 		if (first && !writenote(&info->psinfo, file, foffset))
 			return 0;
+#ifdef CONFIG_WRNOTE
+		if (first && !writenote(&info->wr[0], file, foffset))
+			return 0;
+		if (first && !writenote(&info->wr[1], file, foffset))
+			return 0;
+		if (first && !writenote(&info->wr[2], file, foffset))
+			return 0;
+#endif
 		if (first && !writenote(&info->auxv, file, foffset))
 			return 0;
 
@@ -1644,7 +1656,7 @@ struct elf_thread_status
 #ifdef ELF_CORE_COPY_XFPREGS
 	elf_fpxregset_t xfpu;		/* ELF_CORE_XFPREG_TYPE */
 #endif
-	struct memelfnote notes[3];
+	struct memelfnote notes[4];     /* allow for wrnotes */
 	int num_notes;
 };
 
@@ -1657,6 +1669,10 @@ static int elf_dump_thread_status(long signr, struct elf_thread_status *t)
 {
 	int sz = 0;
 	struct task_struct *p = t->thread;
+#ifdef CONFIG_WRNOTE
+	int	ns		= 0;		/* WR note size */
+	int	num_note	= 0;		/* note number in array */
+#endif
 	t->num_notes = 0;
 
 	fill_prstatus(&t->prstatus, p, signr);
@@ -1667,20 +1683,50 @@ static int elf_dump_thread_status(long signr, struct elf_thread_status *t)
 	t->num_notes++;
 	sz += notesize(&t->notes[0]);
 
+#ifdef CONFIG_WRNOTE
+	num_note ++;
+
+	/* also add WR note */
+
+	ns	= get_wr_note_size (NT_WR_PRSTATUS, &t->prstatus);
+
+	fill_note (&t->notes [num_note], "CORE", NT_WR_PRSTATUS, ns,
+		   get_wr_note (NT_WR_PRSTATUS, &t->prstatus));
+
+	t->num_notes++;
+	sz += notesize (&t->notes[num_note]);
+	num_note ++;
+#endif
 	if ((t->prstatus.pr_fpvalid = elf_core_copy_task_fpregs(p, NULL,
 								&t->fpu))) {
+#ifdef CONFIG_WRNOTE
+		fill_note(&t->notes[num_note], "CORE", NT_PRFPREG,
+			  sizeof(t->fpu), &(t->fpu));
+#else
 		fill_note(&t->notes[1], "CORE", NT_PRFPREG, sizeof(t->fpu),
 			  &(t->fpu));
+#endif
 		t->num_notes++;
+#ifdef CONFIG_WRNOTE
+		sz += notesize(&t->notes[num_note]);
+		num_note ++;
+#else
 		sz += notesize(&t->notes[1]);
+#endif
 	}
 
 #ifdef ELF_CORE_COPY_XFPREGS
 	if (elf_core_copy_task_xfpregs(p, &t->xfpu)) {
+#ifdef CONFIG_WRNOTE
+		fill_note(&t->notes[num_note], "LINUX", NT_PRXFPREG,
+			  sizeof(t->xfpu), &t->xfpu);
+		sz += notesize(&t->notes[num_note]);
+#else
 		fill_note(&t->notes[2], "LINUX", ELF_CORE_XFPREG_TYPE,
 			  sizeof(t->xfpu), &t->xfpu);
-		t->num_notes++;
 		sz += notesize(&t->notes[2]);
+#endif
+      		t->num_notes++;
 	}
 #endif	
 	return sz;
@@ -1703,9 +1749,11 @@ static int fill_note_info(struct elfhdr *elf, int phdrs,
 			  struct elf_note_info *info,
 			  long signr, struct pt_regs *regs)
 {
-#define	NUM_NOTES	6
+#define	NUM_NOTES	10
 	struct list_head *t;
-
+#ifdef CONFIG_WRNOTE
+	int	ns	= 0;		/* WR note size */
+#endif
 	info->notes = NULL;
 	info->prstatus = NULL;
 	info->psinfo = NULL;
@@ -1778,6 +1826,23 @@ static int fill_note_info(struct elfhdr *elf, int phdrs,
 
 	info->numnote = 2;
 
+#ifdef CONFIG_WRNOTE
+	/* add Wind River notes : kernel info */
+	ns	= get_wr_note_size (NT_WR_KERNEL_INFO, NULL);
+	fill_note (info->notes + info->numnote++, "CORE", NT_WR_KERNEL_INFO, ns,
+		   get_wr_note (NT_WR_KERNEL_INFO, NULL));
+
+	/* process info */
+	ns	= get_wr_note_size (NT_WR_PRPSINFO, info->psinfo);
+	fill_note (info->notes + info->numnote++, "CORE", NT_WR_PRPSINFO, ns,
+		   get_wr_note (NT_WR_PRPSINFO, info->psinfo));
+
+	/* process status */
+	ns	= get_wr_note_size (NT_WR_PRSTATUS, info->prstatus);
+	fill_note (info->notes + info->numnote++, "CORE", NT_WR_PRSTATUS, ns,
+		   get_wr_note (NT_WR_PRSTATUS, info->prstatus));
+#endif
+
 	fill_auxv_note(&info->notes[info->numnote++], current->mm);
 
 	/* Try to dump the FPU. */
@@ -1897,6 +1962,9 @@ static int elf_core_dump(long signr, struct pt_regs *regs, struct file *file, un
 	loff_t offset = 0, dataoff, foffset;
 	unsigned long mm_flags;
 	struct elf_note_info info;
+#if defined(CONFIG_WRNOTE) && defined(CORE_DUMP_USE_REGSET)
+	int	ns	= 0;		/* WR note size */
+#endif
 
 	/*
 	 * We no longer stop all VM operations.
@@ -1931,7 +1999,22 @@ static int elf_core_dump(long signr, struct pt_regs *regs, struct file *file, un
 	if (!fill_note_info(elf, segs + 1, /* including notes section */
 			    &info, signr, regs))
 		goto cleanup;
-
+#if defined(CONFIG_WRNOTE) && defined(CORE_DUMP_USE_REGSET)
+	/* add Wind River notes : kernel info */
+	ns	= get_wr_note_size (NT_WR_KERNEL_INFO, NULL);
+	fill_note (info.wr, "CORE", NT_WR_KERNEL_INFO, ns,
+		   get_wr_note (NT_WR_KERNEL_INFO, NULL));
+
+	/* process info */
+	ns	= get_wr_note_size (NT_WR_PRPSINFO, &info.psinfo);
+	fill_note (info.wr + 1, "CORE", NT_WR_PRPSINFO, ns,
+		   get_wr_note (NT_WR_PRPSINFO, &info.psinfo));
+
+	/* process status */
+	ns	= get_wr_note_size (NT_WR_PRSTATUS, &info.thread->prstatus);
+	fill_note (info.wr + 2, "CORE", NT_WR_PRSTATUS, ns,
+		   get_wr_note (NT_WR_PRSTATUS, &info.thread->prstatus));
+#endif
 	has_dumped = 1;
 	current->flags |= PF_DUMPCORE;
   
@@ -2049,6 +2132,11 @@ end_coredump:
 cleanup:
 	free_note_info(&info);
 	kfree(elf);
+#ifdef CONFIG_WRNOTE
+	/* free wr notes data */
+	free_wr_note_data ();
+#endif
+
 out:
 	return has_dumped;
 }
-- 
1.6.0.3

