As of 2.6.30 threaded interrupts are part of the mainline kernel.
Threaded interrupts are very similar to bottom half interrupt
handlers but as threads (instead of tasklets or work queues) they
can be assigned normal thread priorities (tasklets are always run at
the highest priority), they have better locking checks and still let
you do things like sleep (which you can't do in interrupt context).

Here is the commit log from TGLX for threaded interrupts:
-------------------------------------------------------------

commit 3aa551c9b4c40018f0e261a178e3d25478dc04a9
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Mar 23 18:28:15 2009 +0100

    genirq: add threaded interrupt handler support
   =20
    Add support for threaded interrupt handlers:
   =20
    A device driver can request that its main interrupt handler runs in =
a
    thread. To achive this the device driver requests the interrupt with
    request_threaded_irq() and provides additionally to the handler a
    thread function. The handler function is called in hard interrupt
    context and needs to check whether the interrupt originated from the
    device. If the interrupt originated from the device then the handler
    can either return IRQ_HANDLED or IRQ_WAKE_THREAD. IRQ_HANDLED is
    returned when no further action is required. IRQ_WAKE_THREAD causes
    the genirq code to invoke the threaded (main) handler. When
    IRQ_WAKE_THREAD is returned handler must have disabled the interrupt
    on the device level. This is mandatory for shared interrupt =
handlers,
    but we need to do it as well for obscure x86 hardware where =
disabling
    an interrupt on the IO_APIC level redirects the interrupt to the
    legacy PIC interrupt lines.
   =20
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@elte.hu>
--------------------------------------------------------------

Unlike previous implementations of threaded interrupts in Wind River
Linux you must now implement this feature on a per device (per line)
level. You can find an example by reviewing the kernel patch for USB
found alongside this README.

Before committing to change a device you should determine if it is
benifitial, as tglx says:

"Converting an interrupt to threaded makes only sense when the handler
code takes advantage of it by integrating tasklet/softirq functionality
and simplifying the locking."

Devices such as netword drivers which use NAPI are not good candidates
since they already implement threaded interrupts (just in a different
manner). You also don't want to touch timers.

For more info you can also see:
http://lwn.net/Articles/324980/=20

