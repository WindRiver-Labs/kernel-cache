From 8be5fc7d3e06b041e8133d7a3467173f28546a62 Mon Sep 17 00:00:00 2001
From: Pratyush Anand <panand@redhat.com>
Date: Mon, 11 May 2015 15:11:44 +0530
Subject: [PATCH 23/26] arm64: Add longjmp and non-returning label support for
 uprobe

Taken from:
git://github.com/pratyushanand/linux.git:uprobe/upstream_arm64_devel

Add longjmp support for uprobe, so that retprobe works with function
using longjmp.

Also, add support to uprobe label called with B instruction
Consider a test case like following, where we have a ret-probe at
test_b_insn_1, test_b_insn_2 and main.

test.S:

.globl test_b_insn_1
.globl test_b_insn_2

test_b_insn_2:
    nop
    ret

test_b_insn_1:
    nop
    b test_b_insn_2

test.c:

int main(void)
{
    sleep(2);
    test_b_insn_1();
}

when prepare_uretprobe is called for test_b_insn_2(), then regs->sp and
ret->stack can be pointing to the same location. However, return
instances corresponding to test_b_insn_1(), should not be invalidated
now. It should be reported and  invalidated when handle_trampoline is
called corresponding to test_b_insn_2() ret-probe.

This patch handles the above scenario as well.

Signed-off-by: Pratyush Anand <panand@redhat.com>
Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/arm64/kernel/uprobes.c | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/arch/arm64/kernel/uprobes.c b/arch/arm64/kernel/uprobes.c
index 2cc9114..ba77fe3 100644
--- a/arch/arm64/kernel/uprobes.c
+++ b/arch/arm64/kernel/uprobes.c
@@ -146,6 +146,22 @@ void arch_uprobe_abort_xol(struct arch_uprobe *auprobe, struct pt_regs *regs)
 	user_disable_single_step(current);
 }
 
+bool arch_uretprobe_is_alive(struct return_instance *ret, enum rp_check ctx,
+		struct pt_regs *regs)
+{
+	/*
+	 * If a simple branch instruction (B) was called for retprobed
+	 * assembly label then return true even when regs->sp and ret->stack
+	 * are same. It will insure that cleanup and reporting of return
+	 * instances corresponding to callee label is done when
+	 * handle_trampoline for called function is executed.
+	 */
+	if (ctx == RP_CHECK_CHAIN_CALL)
+		return regs->sp <= ret->stack;
+	else
+		return regs->sp < ret->stack;
+}
+
 unsigned long
 arch_uretprobe_hijack_return_addr(unsigned long trampoline_vaddr,
 				  struct pt_regs *regs)
-- 
2.0.2

