From 29e48e9c6f40838b0fb2b5e07523f706711fe94a Mon Sep 17 00:00:00 2001
From: Liang Li <liang.li@windriver.com>
Date: Tue, 9 Nov 2010 21:37:08 -0800
Subject: [PATCH] wrhv/x86: enhance reboot code for x86

Let vcore do self reset/cleanup seems more clean and resonable.
This change will suppress the WARN_ON_ONCE in
generic_smp_call_function_single_interrupt after warm reset.

Signed-off-by: Liang Li <liang.li@windriver.com>
---
 arch/x86/kernel/vbi/wrhv.c |   31 ++++++++++++++++++++++---------
 1 files changed, 22 insertions(+), 9 deletions(-)

diff --git a/arch/x86/kernel/vbi/wrhv.c b/arch/x86/kernel/vbi/wrhv.c
index 10be2a0..a5d94e3 100644
--- a/arch/x86/kernel/vbi/wrhv.c
+++ b/arch/x86/kernel/vbi/wrhv.c
@@ -318,8 +318,14 @@ static int wrhv_set_next_event(unsigned long delta,
 
 static void wrhv_timer_broadcast(const struct cpumask *mask)
 {
-	cpus_and(*mask, cpu_online_map, *mask);
-	wrhv_send_IPI_mask(DUMMY_TIMER_INT, *mask);
+	struct cpumask tmask;
+	/*
+	 * First parameter of cpus_and will be used as left value
+	 * so better to eliminate 'const' cast to avoid warning from
+	 * gcc
+	 */
+	cpus_and(tmask, cpu_online_map, *mask);
+	wrhv_send_IPI_mask(DUMMY_TIMER_INT, tmask);
 }
 
 struct clock_event_device wrhv_clock_event = {
@@ -1413,8 +1419,14 @@ static void wrhv_stop_me(void * t)
 	printk(KERN_INFO "wrhv_stop_me.\n");
 	write_cr3(__pa(swapper_pg_dir));
 
-	/* Enter into infinite loop to stop self*/
-	while(1);
+	vbi_vb_reset(VBI_BOARD_ID_GET(), smp_processor_id(), 0);
+
+	/*
+	 * Verbose report that reset self core failed then
+	 * into infinite loop
+	 */
+	BUG();
+	while (1);
 }
 
 static void wrhv_smp_send_stop(void)
@@ -1515,17 +1527,18 @@ void __init wrhv_smp_init(void)
 
 void wrhv_restart(void)
 {
-	int ret;
 	printk(KERN_INFO "WRHV: rebooting \n");
 
-	ret = vbi_vb_reset(VBI_BOARD_ID_GET(), VBI_VB_CORES_ALL,
+	vbi_vb_reset(VBI_BOARD_ID_GET(), smp_processor_id(),
 		VBI_VBMGMT_RESET_AND_START_CORE0 |
 		VBI_VBMGMT_RESET_DOWNLOAD
 		);
 
-	if (unlikely(ret != 0))
-		printk(KERN_ERR "WRHV: reboot failed. \n");
-
+	/*
+	 * Normally we won't reach here so verbose report
+	 * the failure of reset self core then loop forever
+	 */
+	BUG();
 	while (1);
 }
 
-- 
1.6.5.2

