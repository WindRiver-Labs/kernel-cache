From 311644dd998863b055adb3331892b0ca136497ca Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Wed, 12 May 2010 16:39:48 +0800
Subject: [PATCH 220/252] WRHV/fsl_p4080: Implement irq lock/unlock as native

EE bit must be maintained by the guest as normal so use that to replace
emulated lock/unlock/get irq and fix/load MSR. Note although intDisable
can be ignored by the guest OS, we should still check if one interrupt
is pending by accessing VB_STATUS_INT_PENDING when we enable EE.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/include/asm/reg_wrhv.h |   33 +++++++++++++++++++++++++++++++++
 1 files changed, 33 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/include/asm/reg_wrhv.h b/arch/powerpc/include/asm/reg_wrhv.h
index 59813ba..33ba1e3 100644
--- a/arch/powerpc/include/asm/reg_wrhv.h
+++ b/arch/powerpc/include/asm/reg_wrhv.h
@@ -90,12 +90,32 @@
 
 #endif
 
+#ifdef CONFIG_PPC85xx_VT_MODE
+#define WRHV_INT_LOCK(tmpr1,tmpr2)			\
+	wrteei	0;
+#else
 #define WRHV_INT_LOCK(tmpr1,tmpr2)                      \
 	li	tmpr2,-1;                               \
 	lis	tmpr1,wr_control@ha;                   \
 	lwz	tmpr1,wr_control@l(tmpr1);             \
 	stw	tmpr2,VB_CONTROL_INT_DISABLE(tmpr1)
+#endif
 
+#ifdef CONFIG_PPC85xx_VT_MODE
+#define WRHV_INT_UNLOCK(tmpr1,tmpr2)			\
+	wrteei	1;					\
+	lis	tmpr1,wr_status@ha;			\
+	lwz	tmpr1,wr_status@l(tmpr1);		\
+	lwz	tmpr1,VB_STATUS_INT_PENDING(tmpr1);	\
+	cmpwi	0,tmpr1,0;				\
+	beq	1f;					\
+	mr	tmpr2,r0;				\
+	lis	r0,VBI_SYS_int_enable@h;		\
+	ori	r0,r0,VBI_SYS_int_enable@l;		\
+	sc	1;					\
+	mr	r0,tmpr2;				\
+1:
+#else
 #define WRHV_INT_UNLOCK(tmpr1,tmpr2)                    \
 	lis	tmpr1,wr_control@ha;                   \
 	lwz	tmpr1,wr_control@l(tmpr1);             \
@@ -112,12 +132,24 @@
 	sc;                                             \
 	mr	r0,tmpr1;                               \
 1:
+#endif
 
+#ifdef CONFIG_PPC85xx_VT_MODE
+#define WRHV_INT_LVL_GET(rd)				\
+	li	r4,1;					\
+	mfmsr	rd;					\
+	rlwinm.	rd,rd,0,16,16;      /* test EE bit */	\
+	bne	1f;					\
+	li	r4,0;					\
+1:	mr	rd,r4                                  
+#else
 #define WRHV_INT_LVL_GET(rd)                            \
 	lis	rd,wr_control@ha;                      \
 	lwz	rd,wr_control@l(rd);                   \
 	lwz	rd,VB_CONTROL_INT_DISABLE(rd)
+#endif
 
+#ifndef CONFIG_PPC85xx_VT_MODE
 #define WRHV_FIX_MSR(msr,tmpr)                                  \
 	rlwinm	msr,msr,0,18,15; /* Clear EE & PR bits */       \
 	WRHV_INT_LVL_GET(tmpr);                         \
@@ -168,6 +200,7 @@
 #define WRHV_SUP_MODE_GET(rd)                                   \
 	lis	rd,wrhv_supervisor@ha;                          \
 	lwz	rd,wrhv_supervisor@l(rd)
+#endif
 #endif /* __ASSEMBLY__ */
 
 #endif /* __KERNEL__ */
-- 
1.6.5.2

