From 9a3174508a5abc23335364c586bca71a5df1f17f Mon Sep 17 00:00:00 2001
From: Thomas Tai <thomas.tai@windriver.com>
Date: Fri, 18 Feb 2011 15:41:01 -0500
Subject: [PATCH 6/7] cert-hyp: stub source file for unsupported certifiable hypervisor VBI

stub out unsupported VBI, a runtime varaible is used to identify
whether the certifiable hypervisor is debug version or not. For
debug version, addition display functions is available.

Signed-off-by: Thomas Tai <thomas.tai@windriver.com>
---
 kernel/vbi/io_apic.c |   19 +++++++++++++++++++
 kernel/vbi/lib.c     |    6 ++++++
 kernel/vbi/msg.c     |    5 +++++
 kernel/vbi/ns.c      |   21 +++++++++++++++++++++
 kernel/vbi/show.c    |   34 ++++++++++++++++++++++++++++++++++
 5 files changed, 85 insertions(+), 0 deletions(-)

diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index b6fba67..7b1c2f8 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -268,6 +268,12 @@ EXPORT_SYMBOL(vbi_send_vioapic_irq);
 int32_t vbi_send_vcore_vioapic_irq(uint32_t irq, uint32_t coreSet,
 			uint32_t options)
 {
+	/* Certifiable hypervisor does not support this function */
+	if (is_cert_hyp()) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_send_vcore_vioapic_irq,
+			"vbi_send_vcore_vioapic_irq");
+		return -1;
+	}
 	return vbi_io_apic_op(VBI_IOAPICIOCTL_VCORE_SEND, irq, coreSet, options);
 }
 
@@ -280,6 +286,12 @@ int32_t vbi_send_vcore_vioapic_irq(uint32_t irq, uint32_t coreSet,
  */
 int32_t vbi_redir_vioapic_irq(uint32_t irq, int32_t core)
 {
+	/* Certifiable hypervisor does not support this function */
+	if (is_cert_hyp()) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_redir_vioapic_irq,
+			"vbi_redir_vioapic_irq");
+		return -1;
+	}
 	return vbi_vcore_irq_redirect(irq, core);
 }
 
@@ -331,6 +343,13 @@ void vbi_disp_vioapic(void)
 		"ExtINT"	/* 7 */
 	};
 
+	/* Certifiable hypervisor does not support this function */
+	if (is_cert_hyp()) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_disp_vioapic,
+		"vbi_disp_vioapic");
+		return;
+	}
+
 	/* get the general virtual I/O APIC info */
 	printk("Virtual I/O APIC:\n");
 	printk("  Base address: 0x%p\n", pVioapic);
diff --git a/kernel/vbi/lib.c b/kernel/vbi/lib.c
index e1c5a97..a23e38d 100644
--- a/kernel/vbi/lib.c
+++ b/kernel/vbi/lib.c
@@ -207,6 +207,12 @@ void vbi_init(struct vb_config *config)
 int32_t vbi_vb_find_board_config(uint32_t board_id, int32_t core_id,
 					void *paddr)
 {
+	/* Certifiable hypervisor does not support this function */
+	if (is_cert_hyp()) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_vb_find_board_config,
+			"vbi_vb_find_board_config");
+		return -1;
+	}
 	return vbi_vb_remote(VBI_VBREMOTE_BOARDCONFIG, board_id, core_id,
 				paddr);
 }
diff --git a/kernel/vbi/msg.c b/kernel/vbi/msg.c
index a614c91..3140644 100644
--- a/kernel/vbi/msg.c
+++ b/kernel/vbi/msg.c
@@ -37,6 +37,11 @@ int32_t vbi_receive(void *rmsg, uint32_t rlen, struct vbi_msg_info *info,
 {
 	int32_t retval;
 
+	if (is_cert_hyp()) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_receive, "vbi_receive");
+		return -1;
+	}
+
 	while (1)
 	{
 		retval = vbi_rx_op(rmsg, rlen, info, ctl);
diff --git a/kernel/vbi/ns.c b/kernel/vbi/ns.c
index 025c986..28b4e4a 100644
--- a/kernel/vbi/ns.c
+++ b/kernel/vbi/ns.c
@@ -45,6 +45,13 @@ for processing.
  */
 int32_t vbi_ns_register(char *name, uint32_t revision)
 {
+	/* Certifiable hypervisor does not support this function */
+	if (is_cert_hyp()) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_ns_register,
+			"vbi_ns_register");
+		return -1;
+	}
+
 	if (name == NULL)
 		return -1;
 
@@ -61,6 +68,13 @@ int32_t vbi_ns_register(char *name, uint32_t revision)
  */
 int32_t vbi_ns_unregister(char *name, uint32_t revision)
 {
+	/* Certifiable hypervisor does not support this function */
+	if (is_cert_hyp()) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_ns_unregister,
+			"vbi_ns_unregister");
+		return -1;
+	}
+
 	if (name == NULL)
 		return -1;
 
@@ -77,6 +91,13 @@ int32_t vbi_ns_unregister(char *name, uint32_t revision)
  */
 int32_t vbi_ns_lookup(char *name, uint32_t revision, VBI_NS_HANDLE *handle)
 {
+	/* Certifiable hypervisor does not support this function */
+	if (is_cert_hyp()) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_ns_lookup,
+			"vbi_ns_lookup");
+		return -1;
+	}
+
 	if (name == NULL || handle == NULL)
 		return -1;
 
diff --git a/kernel/vbi/show.c b/kernel/vbi/show.c
index a48e306..2eb91e3 100644
--- a/kernel/vbi/show.c
+++ b/kernel/vbi/show.c
@@ -51,6 +51,12 @@ void vbi_show_shmem(void)
 	void *pState = config->sharedMemoryRegionsStateAddress;
 	int i;
 
+	/* standard certifiable hypervisor does not support this function */
+	if (cert_hyp_version == CERT_HYP_VER_STD) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_show_shmem, "vbi_show_shmem");
+		return;
+	}
+
 	printk("%d Shared memory regions, Config at 0x%p:\n", num_sm, p);
 
 	/* dump shared memory info if we have any attached */
@@ -78,6 +84,12 @@ void vbi_show_mem(void)
 	int num_sm = config->num_mem;
 	int i;
 
+	/* standard certifiable hypervisor does not support this function */
+	if (cert_hyp_version == CERT_HYP_VER_STD) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_show_mem, "vbi_show_mem");
+		return;
+	}
+
 	printk("%d memory regions, Config at 0x%p:\n", num_sm, p);
 
 	/* dump shared memory info if we have any attached */
@@ -202,6 +214,12 @@ static void vbi_show_device(void)
 void vbi_show_stat(void)
 {
 	struct vb_status *p = VBI_STATUS_ADDR_GET();
+
+	/* standard certifiable hypervisor does not support this function */
+	if (cert_hyp_version == CERT_HYP_VER_STD) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_show_stat, "vbi_show_stat");
+		return;
+	}
 	printk("VB status: 0x%p\n", p);
 
 	printk("  Pending interrupts: 0x%08x\n", p->irq_pend_type);
@@ -221,6 +239,12 @@ void vbi_show_ctrl(void)
 	struct vb_control *p = VBI_CNTRL_ADDR_GET();
 	int i;
 
+	/* standard certifiable hypervisor does not support this function */
+	if (cert_hyp_version == CERT_HYP_VER_STD) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_show_ctrl, "vbi_show_ctrl");
+		return;
+	}
+
 	printk("VB control data: 0x%p\n", p);
 
 	printk("  Disable interrupts:  0x%08x\n", p->irq_disable);
@@ -237,6 +261,15 @@ void vbi_show_ctrl(void)
 	printk("\n");
 }
 
+#if defined(CONFIG_WRHV_CERT)
+void vbi_show_config_page_map()
+{
+	/* certifiable hypervisor does not have page map field in the
+	 * vb_config structure
+	 */
+	return;
+}
+#else
 void vbi_show_config_page_map()
 {
 	uint32_t i;
@@ -252,6 +285,7 @@ void vbi_show_config_page_map()
 			pConfigPageMap[i].accessPriv,
 			pConfigPageMap[i].size);
 }
+#endif
 
 /*
  * vbi_show_cfg - print information about a board's config structure
-- 
1.6.5.2

