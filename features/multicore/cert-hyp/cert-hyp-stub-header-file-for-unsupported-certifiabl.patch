From e86ffed7b5bd9c14f7ae001fa10b9c4ee7e71475 Mon Sep 17 00:00:00 2001
From: Thomas Tai <thomas.tai@windriver.com>
Date: Fri, 18 Feb 2011 15:40:11 -0500
Subject: [PATCH 5/7] cert-hyp: stub header file for unsupported certifiable hypervisor VBI functions

Certifiable hypervisor has unsupported VBI functions, those functions
is stub out in the header file. Instead of extern functions, those
functions has changed to inline functions. So, whenever user include
this header file, the function becomes stub out without calling
the actual implementation.

A runtime variable is used to identifier whether it is a debug version
certifiable hypervisor. If so, the actual implementation is called.

Unsupported VBI functions is listed in Certifiable Hypervisor HLD.

Signed-off-by: Thomas Tai <thomas.tai@windriver.com>
---
 include/vbi/syscall.h |  188 +++++++++++++++++++++++++++++++++++++++++--------
 1 files changed, 158 insertions(+), 30 deletions(-)

diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index 7b44a3d..730a863 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -22,6 +22,7 @@
 #include <vbi/arch.h>
 #include <vbi/interface.h>
 #include <vbi/syscalls.h>
+#include <vbi/stats.h>
 
 #ifndef	_ASMLANGUAGE
 
@@ -94,10 +95,6 @@ extern asmlinkage int vbi_hy_ioctl(unsigned ioctl, void *arg1, void *arg2,
 				void *arg3, void *arg4);
 extern asmlinkage int vbi_io_apic_ioctl(unsigned ioctl, unsigned arg1,
 				unsigned arg2);
-extern asmlinkage int vbi_ctx_ctl(unsigned operation, unsigned arg1,
-				unsigned arg2);
-extern asmlinkage int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
-				int32_t *outError, uint32_t flags, void * ctl);
 extern asmlinkage int vbi_vtlb_op(unsigned int op, unsigned long arg1,
 				unsigned long arg2, unsigned long arg3);
 
@@ -105,22 +102,12 @@ extern asmlinkage int vbi_vtlb_op(unsigned int op, unsigned long arg1,
  * Modified APIs for VBI 2.0
  */
 
-/* Message send */
-extern asmlinkage int32_t vbi_send(int32_t id, void *smsg, size_t slen,
-			    void *rmsg, size_t rlen, struct vbi_msg_info *info,
-			    struct vbi_msg_ctl *ctl);
 /* message receive */
 extern int32_t vbi_receive(void *rmsg, uint32_t rlen, struct vbi_msg_info *info,
-				struct vbi_msg_ctl *ctl);
-/* message reply */
-extern asmlinkage int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
-				struct vbi_msg_ctl *ctl);
-
+			struct vbi_msg_ctl *ctl);
 extern asmlinkage int32_t vbi_panic(const char *msg);
 extern int32_t vbi_flush_dcache(void *saddr, size_t size);
 extern int32_t vbi_flush_icache(void *saddr, size_t size);
-extern asmlinkage int32_t vbi_kputs(const char *s);
-extern asmlinkage int32_t vbi_kputc(int c);
 extern int32_t vbi_config_vmmu(struct vmmuConfig * config);
 extern int32_t vbi_enable_vmmu(uint32_t  vmmu_num);
 extern int32_t vbi_disable_vmmu(uint32_t vmmu_num);
@@ -132,8 +119,6 @@ extern int32_t vbi_tlb_flush_vmmu(struct vmmuConfig * config, void *addr, size_t
 
 /* Prior to vbi 2.0 these api were vbi_set_mmu_attr/Get */
 
-extern asmlinkage int32_t  vbi_set_mem_attr(void *vaddr, size_t len, int32_t attr);
-extern asmlinkage int32_t  vbi_get_mem_attr(void *vaddr, int32_t * attr);
 
 /*
  * START: New APIs introduced for vbi 2.0
@@ -145,26 +130,169 @@ extern int32_t vbi_update_text_cache(void *saddr, size_t size);
 extern int32_t vbi_set_exc_base(void *excTblBase);
 
 /* virtual board management API's */
-extern asmlinkage int32_t vbi_vb_suspend(uint32_t id, int32_t core);
 extern asmlinkage int32_t vbi_vb_reset(uint32_t id, int32_t core, uint32_t options);
-extern asmlinkage int32_t vbi_vb_restart(uint32_t id, int32_t core);
-extern asmlinkage int32_t vbi_vb_resume(uint32_t id, int32_t core);
-
-/* read remote vb's memory */
-extern asmlinkage int32_t vbi_vb_read_mem(struct vbi_mem_ctl *memCtl, uint32_t targetBoard);
-extern asmlinkage int32_t vbi_vb_write_mem(struct vbi_mem_ctl *memCtl, uint32_t targetBoard);
-extern asmlinkage void vbi_shell_start_debug(uint32_t  flags);
 
-/* read/write remote vb's registers */
-extern asmlinkage int32_t vbi_vb_read_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
-				       uint32_t targetBoard, int32_t core);
-extern asmlinkage int32_t vbi_vb_write_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
-					uint32_t targetBoard, int32_t core);
 
 /*
  * END: New APIs introduced for vbi 2.0
  */
 
+/* commerical hypervisor and certifiable hypervisor stub functions */
+#if !defined(CONFIG_WRHV_CERT)
+extern asmlinkage int vbi_ctx_ctl(unsigned operation, unsigned arg1,
+				unsigned arg2);
+extern asmlinkage int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
+				int32_t *outError, uint32_t flags, void *ctl);
+/* Message send */
+extern asmlinkage int32_t vbi_send(int32_t id, void *smsg, size_t slen,
+			    void *rmsg, size_t rlen, struct vbi_msg_info *info,
+			    struct vbi_msg_ctl *ctl);
+/* message reply */
+extern asmlinkage int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
+				struct vbi_msg_ctl *ctl);
+
+extern asmlinkage int32_t vbi_kputs(const char *s);
+extern asmlinkage int32_t vbi_kputc(int c);
+extern asmlinkage void vbi_shell_start_debug(uint32_t  flags);
+extern asmlinkage int32_t vbi_set_mem_attr(void *vaddr, size_t len,
+					int32_t attr);
+extern asmlinkage int32_t vbi_get_mem_attr(void *vaddr, int32_t *attr);
+extern asmlinkage int32_t vbi_vb_suspend(uint32_t id, int32_t core);
+extern asmlinkage int32_t vbi_vb_restart(uint32_t id, int32_t core);
+extern asmlinkage int32_t vbi_vb_resume(uint32_t id, int32_t core);
+/* read remote vb's memory */
+extern asmlinkage int32_t vbi_vb_read_mem(struct vbi_mem_ctl *memCtl,
+					 uint32_t targetBoard);
+extern asmlinkage int32_t vbi_vb_write_mem(struct vbi_mem_ctl *memCtl,
+					uint32_t targetBoard);
+/* read/write remote vb's registers */
+extern asmlinkage
+int32_t vbi_vb_read_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
+				uint32_t targetBoard, int32_t core);
+extern asmlinkage
+int32_t vbi_vb_write_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
+				uint32_t targetBoard, int32_t core);
+#else
+/* following functions avaiable to debug version of certifiable hypervisor */
+extern asmlinkage int32_t cert_debug_vbi_kputs(const char *s);
+extern asmlinkage int32_t cert_debug_vbi_kputc(int c);
+extern asmlinkage void cert_debug_vbi_shell_start_debug(uint32_t  flags);
+
+/* system call prototypes for use within a context */
+static inline int vbi_ctx_ctl(unsigned operation, unsigned arg1,
+				unsigned arg2)
+{
+	/* GOS often call this api to go into idle, do not
+	* print log message to reduce large amount of output
+	*/
+	VBISTAT_VERBOSE(vbistat_count.vbi_ctx_ctl, "vbi_ctx_ctl");
+	return -1;
+}
+static inline int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
+			int32_t *outError, uint32_t flags, void *ctl)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_vb_mgmt, "vbi_vb_mgmt");
+	return -1;
+}
+/* Message send */
+static inline int32_t vbi_send(int32_t id, void *smsg, size_t slen,
+		void *rmsg, size_t rlen, struct vbi_msg_info *info,
+		struct vbi_msg_ctl *ctl)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_send, "vbi_send");
+	return -1;
+}
+/* message reply */
+static inline int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
+		struct vbi_msg_ctl *ctl)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_reply, "vbi_rely");
+	return -1;
+}
+static inline int32_t vbi_kputs(const char *s)
+{
+	 /* standard certifiable hypervisor does not support this function */
+	if (cert_hyp_version == CERT_HYP_VER_STD) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_kputs, "vbi_kputs");
+		return -1;
+	}
+	return cert_debug_vbi_kputs(s);
+}
+
+static inline int32_t vbi_kputc(int c)
+{
+	/* standard certifiable hypervisor does not support this function */
+	if (cert_hyp_version == CERT_HYP_VER_STD) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_kputc, "vbi_kputc");
+		return -1;
+	}
+	return cert_debug_vbi_kputc(c);
+}
+static inline void vbi_shell_start_debug(uint32_t  flags)
+{
+	/* standard certifiable hypervisor does not support this function */
+	if (cert_hyp_version == CERT_HYP_VER_STD) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_shell_start_debug,
+				"vbi_shell_start_debug");
+		return;
+	}
+	cert_debug_vbi_shell_start_debug(flags);
+	return;
+}
+/* Prior to vbi 2.0 these api were vbi_set_mmu_attr/Get */
+static inline int32_t vbi_set_mem_attr(void *vaddr, size_t len, int32_t attr)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_set_mem_attr, "vbi_set_mem_attr");
+	return -1;
+}
+static inline int32_t vbi_get_mem_attr(void *vaddr, int32_t *attr)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_get_mem_attr, "vbi_get_mem_attr");
+	return -1;
+}
+static inline int32_t vbi_vb_suspend(uint32_t id, int32_t core)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_vb_suspend, "vbi_vb_suspend");
+	return -1;
+}
+/* virtual board management API's */
+static inline int32_t vbi_vb_restart(uint32_t id, int32_t core)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_vb_restart, "vbi_vb_restart");
+	return -1;
+}
+static inline int32_t vbi_vb_resume(uint32_t id, int32_t core)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_vb_resume, "vbi_vb_resume");
+	return -1;
+}
+
+static inline int32_t vbi_vb_read_mem(struct vbi_mem_ctl *memCtl,
+					uint32_t targetBoard)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_vb_read_mem, "vbi_vb_read_mem");
+	return -1;
+}
+static inline int32_t vbi_vb_write_mem(struct vbi_mem_ctl *memCtl,
+					uint32_t targetBoard)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_vb_write_mem, "vbi_vb_write_mem");
+	return -1;
+}
+/* read/write remote vb's registers */
+static inline int32_t vbi_vb_read_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
+		uint32_t targetBoard, int32_t core)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_vb_read_reg, "vbi_vb_read_reg");
+	return -1;
+}
+static inline int32_t vbi_vb_write_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
+		uint32_t targetBoard, int32_t core)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_vb_write_reg, "vbi_vb_write_reg");
+	return -1;
+}
+#endif
 
 #endif	/* _ASMLANGUAGE */
 #endif  /* _VBI_SYSCALL_H */
-- 
1.6.5.2

