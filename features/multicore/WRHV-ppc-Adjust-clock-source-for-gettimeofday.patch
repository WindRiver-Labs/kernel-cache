From 10abffc7c4b89ebe1782af469fbc028fefe93881 Mon Sep 17 00:00:00 2001
From: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
Date: Thu, 25 Nov 2010 15:26:55 -0500
Subject: [PATCH 2/2] WRHV/ppc: Adjust clock source for gettimeofday

When comparing with native implementation, the clock source is
time base, during each decrementer interrupt the xtimer will
be increase based on the time base register. Since the time
base register have ns resolution, the gettimeofday have ns
resolution. In hypervisor, jiffies is used as clock source,
since jiffies increase at 100 HZ, gettimeofday will not be
able to have ns resolution.

By changing the clock source to timebase, the gettimeofday will
work as expected.

Align the configuration of wrhv_clockevent to match that of the
x86 guest and XEN.

Signed-off-by: Thomas Tai <thomas.tai@windriver.com>
Signed-off-by: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
---
 arch/powerpc/kernel/vbi/wrhv.c |   26 +++++++++++++-------------
 1 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index 15459af..b0ba2da 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -774,14 +774,19 @@ static int wrhv_set_next_event(unsigned long evt,
 {
 	return 0;
 }
+
+/* See arch/x86/kernel/vbi/wrhv.c */
 static struct clock_event_device wrhv_clockevent = {
-       .name	   = "wrhv",
-       .shift	  = 32,
-       .irq	    = 0,
-       .mult	   = 1,     /* To be filled in */
-       .set_mode       = wrhv_set_mode,
-       .set_next_event = wrhv_set_next_event,
-       .features       = CLOCK_EVT_FEAT_ONESHOT,
+	.name		= "wrhv",
+	.features	= CLOCK_EVT_FEAT_PERIODIC,
+	.set_mode	= wrhv_set_mode,
+	.set_next_event = wrhv_set_next_event,
+	.max_delta_ns	= 0xffffffff,
+	.min_delta_ns	= 10000,
+	.shift		= 32,   /* nanoseconds to cycles divisor 2^ */
+	.mult		= 1,     /* To be filled in */
+	.irq		= 0,
+	.rating		= 1,
 };
 
 /* Refer to arch/powerpc/kernel/time.c. */
@@ -828,11 +833,6 @@ void wrhv_hw_timer_interrupt(struct pt_regs * regs)
 	trace_timer_interrupt_exit(regs);
 }
 
-void __init wrhv_clocksource_init(void)
-{
-	return;
-}
-
 void __init wrhv_time_init_cont(void)
 {
 	wrhv_clockevent.cpumask = get_cpu_mask(0);
@@ -1502,7 +1502,7 @@ void wrhv_init(void)
 
 	pv_time_ops.time_init_cont = wrhv_time_init_cont;
 	pv_time_ops.timer_interrupt = wrhv_hw_timer_interrupt;
-	pv_time_ops.clocksource_init = wrhv_clocksource_init;
+	pv_time_ops.clocksource_init = native_clocksource_init;
 
 	pv_irq_ops.do_IRQ = wrhv_do_IRQ;
 	pv_irq_ops.irq_of_parse_and_map =
-- 
1.6.5.2

