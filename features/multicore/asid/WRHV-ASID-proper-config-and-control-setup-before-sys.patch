From 6f5344ce50890accc8417adb3d4fb14727014702 Mon Sep 17 00:00:00 2001
From: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
Date: Wed, 16 Feb 2011 00:25:33 -0500
Subject: [PATCH 07/10] WRHV/ASID: proper config and control setup before sys_ctx_load

The vbi_load_ctx stub that is included as part of the official
Hypervisor DVD is insufficient.  Prior to calling sys_ctx_load,
the config and control page need to be updated with the proper
values so that when the HV calls RFI Linux returns to the correct
location.

Currently the only caller of this function is the ASID performance
optimization.

This code is owned by the VBI and shortly will become part of the
official VBI release at which point this patch can be reverted.

Signed-off-by: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
---
 arch/powerpc/kernel/vbi/syscalls.S |   52 ++++++++++++++++++++++++++++++++++++
 1 files changed, 52 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index b114ff6..47cabb1 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -18,6 +18,10 @@
 
 #include <vbi/vbi.h>
 #include <asm/vbi.h>
+#include <asm/reg_wrhv.h>
+#include <asm/ppc_asm.h>
+#include <asm/asm-offsets.h>
+
 
 #ifdef CONFIG_PPC85xx_VT_MODE	/* not currently implemented */
 #define HCALL sc 1
@@ -350,6 +354,54 @@ FUNC_LABEL(vbi_update_spefscr)
 	HCALL
 	blr
 FUNC_END(vbi_update_spefscr)
+
+/*
+ * vbi_load_ctx() - loads the context
+ *
+ * returns OK or ERROR
+ *
+ */
+
+FUNC_LABEL(vbi_load_ctx)
+	mfctr   r8
+	mfcr    r7
+	mflr    r6
+
+	/* Where do we want to return to when we
+	are finished calling sys_ctx_load? */
+	lis	r3, leave_load_ctx@h
+	ori	r3, r3, leave_load_ctx@l
+
+	lis	r9,wr_control@ha
+	lwz	r9,wr_control@l(r9)
+	/* Location of where we want to come back to
+	   so the HV returns us to the right spot */
+	stw	r3,VB_CONTROL_SRR0(r9)
+	mfcr	r11
+	stw	r11,VB_CONTROL_CR(r9)
+	stw	r0,VB_CONTROL_R0(r9)
+
+	lis	r12,wr_status@ha
+	lwz	r12,wr_status@l(r12)
+	/* Make sure our IRQ status / control are set
+	so we don't get intr when we are not expecting them */
+	lwz	r11,VB_STATUS_OLD_INT_DISABLE(r12)
+	stw	r11,VB_CONTROL_NEW_INT_DISABLE(r9)
+
+	lis	r0,VBI_SYS_ctx_load@h
+	ori	r0,r0,VBI_SYS_ctx_load@l
+	sc
+
+leave_load_ctx: /* return here - When HV calls rfi within
+	the sys_ctx_load fast hypercall, it will return us
+	here! */
+
+	mtctr   r8
+	mtcr    r7
+	mtlr    r6
+	blr
+FUNC_END(vbi_load_ctx)
+
 #endif 
 
 /*
-- 
1.6.5.2

