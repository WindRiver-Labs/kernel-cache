From b773263b1f28817e71be991bcb800df28689ba76 Mon Sep 17 00:00:00 2001
From: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
Date: Tue, 24 Aug 2010 13:24:17 -0700
Subject: [PATCH] WRHV/85xx: Make swap usable and reliable

Enabling swap did not function, it simply would only allow
16MB maximum, even when using it the kernel would crash.

Two issues where identified and solved:

1) Not shifting correctly to find the RPN (Real Page Number) [PTE_RPN_SHIFT]
vs the correct VMMU_RPN_SHIFT.

2) Hypervisor was stealing bits from us for the swap offset and entries.

3) An assumption that the Linux guest was using 64bit page tables,
  the HV is using 64bits, but only exposing 32bits to the guest. The
  other bits are being used to store information internally to itself.

Limitations:
  Mainline uses 5 bits to denote the number of swap partitions.  Where
as by changing the value from 5 to 2 it limits the number of swap
partitions a guest can enable.  By reducing the number of swap
partitions (number of possible swapfiles) that we allow this gives the guest
the ability to increase the size of each swap partition to approx. 1GB.
Without this modification the kernel would only see 128MB of swap when
256MB was being enabled.

Signed-off-by: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
---
 arch/powerpc/include/asm/pv_pgtable-ppc32.h |   35 ++++++++++++++++++++-------
 include/linux/swap.h                        |    4 +++
 2 files changed, 30 insertions(+), 9 deletions(-)

diff --git a/arch/powerpc/include/asm/pv_pgtable-ppc32.h b/arch/powerpc/include/asm/pv_pgtable-ppc32.h
index aeaaa04..ba2680e 100644
--- a/arch/powerpc/include/asm/pv_pgtable-ppc32.h
+++ b/arch/powerpc/include/asm/pv_pgtable-ppc32.h
@@ -37,17 +37,34 @@
  */
 #define _PTE_NONE_MASK		0xffffffff00000ffdULL
 
+/* See figure 1 located in include/vbi/vmmu.h for definition
+   of RPN (Real Page Number) and the associated shift value*/
+
+/* MAX_SWAPFILES_SHIFT is defined in include/linux/swap.h as
+   5 , but because the HV only gives us bits 0-19 of the second
+   word for each PTE, that only leaves us with 15 bits.  (32MB)
+   Given this limitation we need to reduce the number of swaptypes
+   from 5 bits to 3 therefor giving us access to 18 bits. (256MB)
+*/
+
 /* Encode and de-code a swap entry */
-#define __swp_type(entry)	(((entry).val >> 1) & 0x3f)
-#define __swp_offset(entry)	((entry).val >> 8)
-#define __swp_entry(type, offset) ((swp_entry_t){((type)<< 1)|((offset)<<8)})
-#define __pte_to_swp_entry(pte)	((swp_entry_t){pte_val(pte) >> PTE_RPN_SHIFT})
-#define __swp_entry_to_pte(x)	((pte_t) { (x).val << PTE_RPN_SHIFT })
+/* These values need to match the native version found in
+   arch/powerpc/include/asm/pgtable-ppc32.h */
+#define __swp_type(entry)	((entry).val & 0x1f)
+
+/* When running under the HV we have a PTE therefor inorder
+   to support large amounts of swap we need to reduce the
+   maximum number of swapfile entries */
+#define __swp_offset(entry)	((entry).val >> 2)
+#define __swp_entry(type, offset) ((swp_entry_t){(type)|((offset)<<2)})
+/* Unfortunately the hypervisor's VMMU maps PTE's differently then
+   that of native */
+#define __pte_to_swp_entry(pte)	((swp_entry_t){pte_val(pte) >> VMMU_RPN_SHIFT})
+#define __swp_entry_to_pte(x)	((pte_t) { (x).val << VMMU_RPN_SHIFT })
 
-/* VMMU use 64bit PTE entry. */
-#define pte_to_pgoff(pte)	(pte_val(pte) >> PTE_RPN_SHIFT)
-#define pgoff_to_pte(off)	((pte_t) {((off) << PTE_RPN_SHIFT)|_PAGE_FILE})
-#define PTE_FILE_MAX_BITS	(BITS_PER_LONG - PTE_RPN_SHIFT)
+#define pte_to_pgoff(pte)	(pte_val(pte) >> VMMU_RPN_SHIFT)
+#define pgoff_to_pte(off)	((pte_t) {((off) << VMMU_RPN_SHIFT)|_PAGE_FILE})
+#define PTE_FILE_MAX_BITS	(BITS_PER_LONG - VMMU_RPN_SHIFT)
 
 /* based on hypervisor VMMU_LEVEL_1_DESC definition */
 #define _PMD_PRESENT		0x00000001   /* big endian */
diff --git a/include/linux/swap.h b/include/linux/swap.h
index a062ce7..ba2d212 100644
--- a/include/linux/swap.h
+++ b/include/linux/swap.h
@@ -33,7 +33,11 @@ static inline int current_is_kswapd(void)
  * on 32-bit-pgoff_t architectures.  And that assumes that the architecture packs
  * the type/offset into the pte as 5/27 as well.
  */
+#ifdef CONFIG_WRHV_E500
+#define MAX_SWAPFILES_SHIFT	2
+#else
 #define MAX_SWAPFILES_SHIFT	5
+#endif
 
 /*
  * Use some of the swap files numbers for other purposes. This
-- 
1.6.5.2

