From b5a5ddf74d4ef2c68ac2981e113f15baeed87a85 Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Wed, 12 May 2010 16:39:50 +0800
Subject: [PATCH] WRHV/PPC: enlarge execption handler code space for SMP

From c93d60a936692c8f5c63bdc9752ade78e4c2fe52 Mon Sep 17 00:00:00 2001
Subject: [PATCH 12/14] WRHV/PPC: enlarge execption handler code space for SMP
SMP support requires more space than can be accomodated by the
default execption handler. This increases the size to allow for
SMP exeptions to be handled.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/kernel/head_wrhv.h |    6 ++++++
 arch/powerpc/kernel/vbi/wrhv.c  |   24 ++++++++++++++++++++++++
 2 files changed, 30 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/kernel/head_wrhv.h b/arch/powerpc/kernel/head_wrhv.h
index ff215b5..9f25c5e 100644
--- a/arch/powerpc/kernel/head_wrhv.h
+++ b/arch/powerpc/kernel/head_wrhv.h
@@ -98,9 +98,15 @@ label:									     \
 #else
 #ifdef CONFIG_WRHV
 #undef START_EXCEPTION
+#ifdef CONFIG_SMP 	
+#define        START_EXCEPTION(label)				\
+       .align 9;						\
+label:
+#else
 #define        START_EXCEPTION(label)                                  \
        .align 8;                                               \
 label:
+#endif
 #else
 #define        START_EXCEPTION(label)                                  \
        .align 5;                                               \
diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index a06757a..67f60ca 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -124,6 +124,7 @@
 #include <vbi/vbi.h>
 #include <vbi/interface.h>
 
+VBI_EXC_OFFSETS_TABLE  exec_table;
 static struct vb_config __wr_config;
 struct vb_config *wr_config;		/* TODO kernel relocation friendly ? */
 struct vb_control *wr_control;
@@ -819,6 +820,29 @@ void __init wrhv_MMU_init(void)
 	 */
 	vb_context_mmu_on(0, swapper_pg_dir, PAGE_SIZE, 0);
 #endif
+
+#ifdef CONFIG_SMP
+	{
+		int i;
+		vbi_get_exc_offset(&exec_table);
+#ifdef DEBUG
+		printk("****DUMP EXEC OFFSET***\n");
+		for(i=0;i<VBI_ARCH_MAX_EXC_OFFSETS;i++)
+			printk("execoffset:%d	----	0x%08x\n",i,exec_table.excOffset[i]);
+#endif 
+		for(i=0;i<VBI_ARCH_MAX_EXC_OFFSETS;i++)
+		if(exec_table.excOffset[i])
+			/*extend to 0x200, 9bits space*/
+			exec_table.excOffset[i] = exec_table.excOffset[i] << 1;
+		vbi_set_exc_offset(&exec_table);
+#ifdef DEBUG
+		printk("****DUMP EXEC OFFSET AFTER SET***\n");
+		vbi_get_exc_offset(&exec_table);
+		for(i=0;i<VBI_ARCH_MAX_EXC_OFFSETS;i++)
+			printk("execoffset:%d	----	0x%08x\n",i,exec_table.excOffset[i]);
+#endif
+	}
+#endif
 }
 
 /* arch/powerpc/mm/mem.c */
-- 
1.6.4.4

