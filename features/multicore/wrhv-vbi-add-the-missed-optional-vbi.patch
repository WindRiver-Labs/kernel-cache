From f84db4587cacad0a83ec7497c635ec9e7f1031e8 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Thu, 21 Jul 2011 10:55:55 +0800
Subject: [PATCH 4/4] wrhv/vbi: add the missed optional vbi

These vbi are neither explicitly listed as core vbi, nor be used by
core vbi. So add them to optional list.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 include/vbi/dynamic.h |   69 ++++++++++++++++++++++++++++++++++++++----------
 include/vbi/stats.h   |   24 +++++++++++++++++
 include/vbi/syscall.h |   42 ++++++++++++++++++++++++-----
 include/vbi/vbi.h     |   11 +++++++-
 kernel/vbi/device.c   |   24 +++++++++++++++++
 kernel/vbi/io_apic.c  |    4 +++
 kernel/vbi/procfs.c   |   24 +++++++++++++++++
 kernel/vbi/shmem.c    |   16 +++++++++++
 8 files changed, 190 insertions(+), 24 deletions(-)

diff --git a/include/vbi/dynamic.h b/include/vbi/dynamic.h
index 03dc11b..0395cba 100644
--- a/include/vbi/dynamic.h
+++ b/include/vbi/dynamic.h
@@ -85,16 +85,6 @@ struct vb_information
 	uint32_t    Reserved[32];    /* reserved for later use - 128 bytes */
 };
 
-/* This returns only the simple contiguous data */
-int32_t vbi_board_simple_config_get(uint32_t vbId, 
-				     struct vb_simple_information *pVbInfo);
-
-/* this returns also the complex data that has variable sixe e.g.device list */
-int32_t vbi_board_config_get(uint32_t vbId,
-			       struct vb_information *pVbInfo); 
-
-uint32_t vbi_vb_create(struct vb_information *pVbInfo, uint32_t options);
-int32_t vbi_vb_delete(uint32_t vbId);
 
 /* Additive/Subtractive - i.e. not in zombie configuration */
 int32_t vbiVbSharedMemoryAlloc(uint32_t vbId, vbi_name_t smRegionName, 
@@ -108,16 +98,65 @@ int32_t vbiVbRamFree(uint32_t vbId, uint64_t va);
 
 /* Information can be optained for the Virtual boards such as prio and 
  * present Cpu using vbiBoardConfigGet() */
-int32_t vbi_vb_move(uint32_t vbId, uint32_t *pCpuList, 
-		      uint32_t options);
 
 #define VBIMOVE_OPTION_RESUME    0
 #define VBIMOVE_OPTION_NO_RESUME 1
 
-int32_t vbi_vb_priority_set(uint32_t vbId, uint32_t *pCpuPriorityList,
-			     uint32_t options);
-
 #define VBIPRIOSET_OPTION_RESUME    0
 #define VBIPRIOSET_OPTION_NO_RESUME 1
 
+#ifdef CONFIG_WRHV_COREVBI_ONLY
+static inline int32_t vbi_board_simple_config_get(uint32_t vbId,
+				     struct vb_simple_information *pVbInfo)
+{
+	VBISTAT_VERBOSE(vbi_board_simple_config_get);
+	return -1;
+}
+static inline int32_t vbi_board_config_get(uint32_t vbId,
+			       struct vb_information *pVbInfo)
+{
+	VBISTAT_VERBOSE(vbi_board_config_get);
+	return -1;
+}
+static inline uint32_t vbi_vb_create(struct vb_information *pVbInfo,
+					uint32_t options)
+{
+	VBISTAT_VERBOSE(vbi_vb_create);
+	return -1;
+}
+static inline int32_t vbi_vb_delete(uint32_t vbId)
+{
+	VBISTAT_VERBOSE(vbi_vb_delete);
+	return -1;
+}
+static inline int32_t vbi_vb_move(uint32_t vbId, uint32_t *pCpuList,
+		      uint32_t options)
+{
+	VBISTAT_VERBOSE(vbi_vb_move);
+	return -1;
+}
+static inline int32_t vbi_vb_priority_set(uint32_t vbId,
+		uint32_t *pCpuPriorityList, uint32_t options)
+{
+	VBISTAT_VERBOSE(vbi_vb_priority_set);
+	return -1;
+}
+#else
+/* This returns only the simple contiguous data */
+int32_t vbi_board_simple_config_get(uint32_t vbId,
+				     struct vb_simple_information *pVbInfo);
+
+/* this returns also the complex data that has variable sixe e.g.device list */
+int32_t vbi_board_config_get(uint32_t vbId,
+			       struct vb_information *pVbInfo);
+
+uint32_t vbi_vb_create(struct vb_information *pVbInfo, uint32_t options);
+int32_t vbi_vb_delete(uint32_t vbId);
+int32_t vbi_vb_move(uint32_t vbId, uint32_t *pCpuList,
+		      uint32_t options);
+
+int32_t vbi_vb_priority_set(uint32_t vbId, uint32_t *pCpuPriorityList,
+			     uint32_t options);
+#endif
+
 #endif
diff --git a/include/vbi/stats.h b/include/vbi/stats.h
index e9eef83..fbd9a78 100644
--- a/include/vbi/stats.h
+++ b/include/vbi/stats.h
@@ -55,6 +55,30 @@ enum wrhv_vbi {
 	VBI_API_STATS_DEF(vbi_ns_register),
 	VBI_API_STATS_DEF(vbi_ns_unregister),
 	VBI_API_STATS_DEF(vbi_vb_mgmt),
+	VBI_API_STATS_DEF(vbi_di_eoi),
+	VBI_API_STATS_DEF(vbi_send_vioapic_irq),
+	VBI_API_STATS_DEF(vbi_dev_count),
+	VBI_API_STATS_DEF(vbi_get_dev),
+	VBI_API_STATS_DEF(vbi_get_dev_interrupt),
+	VBI_API_STATS_DEF(vbi_get_dev_registers),
+	VBI_API_STATS_DEF(vbi_get_dev_device_tree_source),
+	VBI_API_STATS_DEF(vbi_vb_move),
+	VBI_API_STATS_DEF(vbi_vb_priority_set),
+	VBI_API_STATS_DEF(vbi_io_apic_op),
+	VBI_API_STATS_DEF(vbi_ns_op),
+	VBI_API_STATS_DEF(vbi_find_shmem),
+	VBI_API_STATS_DEF(vbi_find_mem),
+	VBI_API_STATS_DEF(vbi_vb_find_ram_size),
+	VBI_API_STATS_DEF(vbi_io_apic_ioctl),
+	VBI_API_STATS_DEF(vbi_get_max_asid_vmmu),
+	VBI_API_STATS_DEF(vbi_get_vioapic_addr),
+	VBI_API_STATS_DEF(vbi_tlb_load_vmmu),
+	VBI_API_STATS_DEF(vbi_tlb_flush_vmmu),
+	VBI_API_STATS_DEF(vbi_vb_create),
+	VBI_API_STATS_DEF(vbi_vb_delete),
+	VBI_API_STATS_DEF(vbi_board_simple_config_get),
+	VBI_API_STATS_DEF(vbi_board_config_get),
+	VBI_API_STATS_DEF(vbi_set_vb_priority),
 	VBI_API_STATS_DEF(vbi_end),
 };
 
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index 94b9b41..63edf9e 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -95,8 +95,6 @@ struct vbi_mem_ctl
 
 extern asmlinkage int vbi_hy_ioctl(unsigned ioctl, void *arg1, void *arg2,
 				void *arg3, void *arg4);
-extern asmlinkage int vbi_io_apic_ioctl(unsigned ioctl, unsigned arg1,
-				unsigned arg2);
 extern asmlinkage int vbi_vtlb_op(unsigned int op, unsigned long arg1,
 				unsigned long arg2, unsigned long arg3);
 
@@ -136,12 +134,6 @@ extern int32_t vbi_ns_lookup_old(char *name, uint32_t  rev,
 				VBI_NS_HANDLE *pHandle);
 extern int32_t vbi_ns_lookup(char *name, uint32_t  rev, VBI_NS_HANDLE *pHandle,
 				uint32_t timeout, uint32_t options);
-#ifdef CONFIG_MIPS
-extern int32_t vbi_tlb_flush_vmmu(struct vmmu64_config * config, void *addr, size_t len);
-#else
-extern int32_t vbi_tlb_flush_vmmu(struct vmmuConfig * config, void *addr, size_t len);
-#endif
-extern int32_t vbi_get_max_asid_vmmu(void);
 
 extern asmlinkage void vbi_vcore_irq_unlock(void);
 extern asmlinkage int32_t vbi_vcore_irq_lock(void);
@@ -313,6 +305,30 @@ static inline int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
 	VBISTAT_VERBOSE(vbi_vb_mgmt);
 	return -1;
 }
+static inline int vbi_io_apic_ioctl(unsigned ioctl, unsigned arg1,
+				unsigned arg2)
+{
+	VBISTAT_VERBOSE(vbi_io_apic_ioctl);
+	return -1;
+}
+
+static inline int32_t vbi_get_max_asid_vmmu(void)
+{
+	VBISTAT_VERBOSE(vbi_get_max_asid_vmmu);
+	return -1;
+}
+static inline int32_t vbi_tlb_flush_vmmu(struct vmmuConfig *config,
+				void *addr, size_t len)
+{
+	VBISTAT_VERBOSE(vbi_tlb_flush_vmmu);
+	return -1;
+}
+static inline int32_t vbi_tlb_load_vmmu(struct vmmuConfig *config, void *addr,
+					unsigned int len)
+{
+	VBISTAT_VERBOSE(vbi_tlb_load_vmmu);
+	return -1;
+}
 #else
 /* message reply */
 extern asmlinkage int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
@@ -327,6 +343,16 @@ extern asmlinkage int32_t vbi_vb_write_mem(struct vbi_mem_ctl *memCtl, uint32_t
 extern asmlinkage void vbi_shell_start_debug(uint32_t  flags);
 extern asmlinkage int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
 				int32_t *outError, uint32_t flags, void * ctl);
+extern asmlinkage int vbi_io_apic_ioctl(unsigned ioctl, unsigned arg1,
+				unsigned arg2);
+extern int32_t vbi_get_max_asid_vmmu(void);
+#ifdef CONFIG_MIPS
+extern int32_t vbi_tlb_flush_vmmu(struct vmmu64_config *config,
+					 void *addr, size_t len);
+#else
+extern int32_t vbi_tlb_flush_vmmu(struct vmmuConfig *config, void *addr,
+					size_t len);
+#endif
 #endif
 
 #endif	/* _ASMLANGUAGE */
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index 73a42bb..9f88d9e 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -553,7 +553,6 @@ extern int32_t vbi_get_vioapic_vec(int32_t irq);
 extern int32_t vbi_unmask_vioapic_irq(int32_t irq);
 extern int32_t vbi_mask_vioapic_irq(int32_t irq);
 extern int32_t vbi_ack_vioapic_irq(int32_t irq);
-extern asmlinkage void vbi_di_eoi(void);
 extern int32_t vbi_send_vioapic_irq(int32_t irq, uint32_t filter,
 				     uint32_t vb);
 extern int32_t vbi_redir_vioapic_irq(int32_t irq, int32_t tCore);
@@ -576,6 +575,16 @@ extern int32_t vbi_vb_find_board_config(uint32_t board_id, int32_t core_id,
 						void *paddr);
 extern void vbi_show_config_page_map(void);
 
+#ifdef CONFIG_WRHV_COREVBI_ONLY
+static inline void vbi_di_eoi(void)
+{
+	VBISTAT_VERBOSE(vbi_di_eoi);
+	return;
+}
+#else
+extern asmlinkage void vbi_di_eoi(void);
+#endif
+
 #endif	/* _ASMLANGUAGE */
 
 #endif  /* _VBI_VBI_H */
diff --git a/kernel/vbi/device.c b/kernel/vbi/device.c
index fd4f58a..9dd3a3a 100644
--- a/kernel/vbi/device.c
+++ b/kernel/vbi/device.c
@@ -28,6 +28,7 @@
 #include <vbi/pdc.h>
 #include <vbi/syscalls.h>
 #include <vbi/device.h>
+#include <linux/kernel.h>
 
 #undef DEBUG
 
@@ -54,6 +55,10 @@ uint32_t vbi_dev_count(void)
 {
 	struct vb_config *config = VBI_CONFIG_ADDR_GET();
 
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_dev_count);
+		return 0;
+	}
 	return config->numDevices;
 }
 
@@ -69,6 +74,11 @@ uint32_t vbi_get_dev(uint32_t deviceIndex, struct vb_dev_info **vbiDevInfo)
 	struct vb_dev_info *pDevInfo = config->deviceConfiguration;
 	uint32_t retVal = -1;
 
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_get_dev);
+		return retVal;
+	}
+
 	/* validate the input device index */
 
 	if (deviceIndex < config->numDevices) {
@@ -99,6 +109,10 @@ uint32_t vbi_get_dev_interrupt(uint32_t deviceIndex, uint32_t intIndex,
 	struct vb_dev_int_info *pDevIntInfo;
 	uint32_t retVal = -1;
 
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_get_dev_interrupt);
+		return retVal;
+	}
 	/* Is the input device index valid */
 
 	if (deviceIndex < config->numDevices) {
@@ -152,6 +166,11 @@ uint32_t vbi_get_dev_registers(uint32_t deviceIndex, uint32_t regSetIndex,
 	struct vb_dev_regset_info *pDevRegInfo;
 	uint32_t retVal = -1;
 
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_get_dev_registers);
+		return retVal;
+	}
+
 	/* Is the input device index valid */
 
 	if (deviceIndex < config->numDevices) {
@@ -209,6 +228,11 @@ uint32_t vbi_get_dev_device_tree_source(uint32_t deviceIndex,
 	struct vb_dev_device_tree_source_info *pDevDTSInfo;
 	uint32_t retVal = -1;
 
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_get_dev_device_tree_source);
+		return retVal;
+	}
+
 	/* Is the input device index valid */
 
 	if (deviceIndex < config->numDevices) {
diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index 46c6ee8..cb03f0c 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -63,6 +63,10 @@
  */
 void *vbi_get_vioapic_addr(void)
 {
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_get_vioapic_addr);
+		return (void *)-1;
+	}
 	return VBI_VIOAPIC_BASE_GET();
 }
 
diff --git a/kernel/vbi/procfs.c b/kernel/vbi/procfs.c
index b26c8ad..1acca38 100644
--- a/kernel/vbi/procfs.c
+++ b/kernel/vbi/procfs.c
@@ -158,6 +158,30 @@ struct vbi_api_stats vbistat[] = {
 	VBI_API_STATS_INIT(vbi_ns_register),
 	VBI_API_STATS_INIT(vbi_ns_unregister),
 	VBI_API_STATS_INIT(vbi_vb_mgmt),
+	VBI_API_STATS_INIT(vbi_di_eoi),
+	VBI_API_STATS_INIT(vbi_send_vioapic_irq),
+	VBI_API_STATS_INIT(vbi_dev_count),
+	VBI_API_STATS_INIT(vbi_get_dev),
+	VBI_API_STATS_INIT(vbi_get_dev_interrupt),
+	VBI_API_STATS_INIT(vbi_get_dev_registers),
+	VBI_API_STATS_INIT(vbi_get_dev_device_tree_source),
+	VBI_API_STATS_INIT(vbi_vb_move),
+	VBI_API_STATS_INIT(vbi_vb_priority_set),
+	VBI_API_STATS_INIT(vbi_io_apic_op),
+	VBI_API_STATS_INIT(vbi_ns_op),
+	VBI_API_STATS_INIT(vbi_find_shmem),
+	VBI_API_STATS_INIT(vbi_find_mem),
+	VBI_API_STATS_INIT(vbi_vb_find_ram_size),
+	VBI_API_STATS_INIT(vbi_io_apic_ioctl),
+	VBI_API_STATS_INIT(vbi_get_max_asid_vmmu),
+	VBI_API_STATS_INIT(vbi_get_vioapic_addr),
+	VBI_API_STATS_INIT(vbi_tlb_load_vmmu),
+	VBI_API_STATS_INIT(vbi_tlb_flush_vmmu),
+	VBI_API_STATS_INIT(vbi_vb_create),
+	VBI_API_STATS_INIT(vbi_vb_delete),
+	VBI_API_STATS_INIT(vbi_board_simple_config_get),
+	VBI_API_STATS_INIT(vbi_board_config_get),
+	VBI_API_STATS_INIT(vbi_set_vb_priority),
 	VBI_API_STATS_INIT(vbi_end),
 };
 
diff --git a/kernel/vbi/shmem.c b/kernel/vbi/shmem.c
index a9d7a17..95d982b 100644
--- a/kernel/vbi/shmem.c
+++ b/kernel/vbi/shmem.c
@@ -39,6 +39,7 @@ Alternatively the following macros can be used to obtained similar information
 #include <linux/module.h>
 #include <vbi/vbi.h>
 #include <vbi/private.h>
+#include <vbi/stats.h>
 
 /*
  * vbi_find_shmem - locate the shared memory parameters for a given region
@@ -58,6 +59,11 @@ int32_t vbi_find_shmem(int8_t *smName, void **addr,
 	int32_t num = config->num_sm;
 	int32_t i;
 
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_find_shmem);
+		return VBI_INVALID_SHMEM;
+	}
+
 	for (i = 0; i < num; i++, info++) {
 		if (!strncmp((char *)smName, (char *)info->name, VB_NAMELEN)) {
 			/* Found */
@@ -90,6 +96,11 @@ int32_t vbi_find_mem(int8_t *name, void **addr,
 	int32_t num = config->num_mem;
 	int32_t i;
 
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_find_mem);
+		return VBI_INVALID_SHMEM;
+	}
+
 	for (i = 0; i < num; i++, info++) {
 		if (!strncmp((char *)name, (char *)info->name, VB_NAMELEN)) {
 			/* Found */
@@ -126,6 +137,11 @@ int32_t vbi_find_core_prv_mem(void **addr, size_t *length)
  */
 int32_t vbi_vb_find_ram_size(uint32_t board_id, size_t *phys_mem_size)
 {
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_vb_find_ram_size);
+		return -1;
+	}
+
 	 return vbi_vb_remote(VBI_VBREMOTE_RAMSIZE, board_id, 0,
 				phys_mem_size);
 }
-- 
1.7.0.4

