From 0761b65d0cc7dc137543500a5c23d26868609f4f Mon Sep 17 00:00:00 2001
From: Liang Li <liang.li@windriver.com>
Date: Tue, 6 Jul 2010 18:40:12 +0800
Subject: [PATCH 5/7] wrhv/hysh: add new sysfs entry for debug shell

Signed-off-by: Liang Li <liang.li@windriver.com>
---
 kernel/vbi/wrhv.c |   79 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 79 insertions(+), 0 deletions(-)

diff --git a/kernel/vbi/wrhv.c b/kernel/vbi/wrhv.c
index a94e6e3..5ac6070 100644
--- a/kernel/vbi/wrhv.c
+++ b/kernel/vbi/wrhv.c
@@ -24,6 +24,7 @@
 #include <vbi/vbi.h>
 #include <linux/suspend.h>
 #include <linux/cpu.h>
+#include <linux/debugfs.h>
 
 #define VIOAPIC_BASE_ADDR	(&wr_vb_control->vIoapic)
 
@@ -202,6 +203,19 @@ static int wrhv_suspend_begin(suspend_state_t state)
 	}
 }
 
+extern int softlockup_thresh;
+static int softlockup_thresh_bk;
+static void wrhv_save_softlockup_thresh(void)
+{
+	softlockup_thresh_bk = softlockup_thresh;
+	softlockup_thresh = 0;
+}
+
+static void wrhv_restore_softlockup_thresh(void)
+{
+	softlockup_thresh = softlockup_thresh_bk;
+}
+
 static int wrhv_suspend_enter(suspend_state_t state)
 {
 	vbi_vb_suspend(VBI_BOARD_ID_GET(), 0);
@@ -272,6 +286,7 @@ static inline void wrhv_restore_cpus(void)
 
 static int wrhv_suspend_prepare(void)
 {
+	wrhv_save_softlockup_thresh();
 	wrhv_save_cpus();
 
 	return 0;
@@ -285,6 +300,7 @@ static int wrhv_suspend_prepare_late(void)
 static void wrhv_suspend_end(void)
 {
 	wrhv_restore_cpus();
+	wrhv_restore_softlockup_thresh();
 }
 
 
@@ -302,10 +318,73 @@ int __weak wrhv_arch_late_init(void)
 	return 0;
 }
 
+#define WINDRIVER_NAME "windriver"
+/* sysfs ksets */
+struct kset *windriver_kset;
+EXPORT_SYMBOL(windriver_kset);
+static int wrhv_init_sysfs(void)
+{
+	/* Create parent windriver kset */
+	windriver_kset = kset_create_and_add(WINDRIVER_NAME, NULL, NULL);
+	if (!windriver_kset)
+		return -ENOMEM;
+
+	return 0;
+}
+
+/* debugfs dentry's */
+struct dentry *windriver_dentry;
+EXPORT_SYMBOL(windriver_dentry);
+static int wrhv_init_debugfs(void)
+{
+	windriver_dentry = debugfs_create_dir(WINDRIVER_NAME, NULL);
+	if (!windriver_dentry)
+		return -ENODEV;
+
+	return 0;
+}
+
+static char wrhv_shell[] = "wrhv_shell";
+static ssize_t hysh_show(struct kobject *kobj, struct attribute *attr,
+	char *buf)
+{
+	sprintf(buf, "0\n");
+	return 2;
+}
+
+static ssize_t hysh_action(struct kobject *kobj, struct attribute *attr,
+	const char *buf, size_t len)
+{
+	wrhv_save_softlockup_thresh();
+	wrhv_save_cpus();
+	vbi_shell_start_debug(0);
+	wrhv_restore_cpus();
+	wrhv_restore_softlockup_thresh();
+	return len;
+}
+
+static struct kobj_attribute hysh_attr = __ATTR(wrhv_shell, 0644, hysh_show, hysh_action);
+
+static int wrhv_hysh_init_sysfs(void)
+{
+	int ret;
+	ret = sysfs_create_file(&windriver_kset->kobj, &hysh_attr.attr);
+	if (ret) {
+		printk(KERN_ERR "wrhv_sysfs: create %s fail, ret = %d\n",
+			wrhv_shell, ret);
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
 int __init wrhv_late_init(void)
 {
 	wrhv_arch_late_init();
 	suspend_set_ops(&wrhv_suspend_ops);
+	wrhv_init_sysfs();
+	wrhv_init_debugfs();
+	wrhv_hysh_init_sysfs();
 	return 0;
 }
 late_initcall(wrhv_late_init);
-- 
1.6.5.2

