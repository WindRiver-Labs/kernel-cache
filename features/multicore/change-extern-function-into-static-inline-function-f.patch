From ae6e00ce8de3c1b6de0e40e75fa7e42a9bb64e4b Mon Sep 17 00:00:00 2001
From: Thomas Tai <thomas.tai@windriver.com>
Date: Wed, 4 May 2011 14:48:12 -0400
Subject: [PATCH 2/3] change extern function into static inline function for core VBI

Once CONFIG_WRHV_COREVBI_ONLY is enabled, optional vbi extern
functions will be changed to static inline functions. The inline
function will print out a warning message and log a call count.

The call count can be read using "cat /proc/windriver/vbistat"

Signed-off-by: Thomas Tai <thomas.tai@windriver.com>
---
 include/vbi/private.h |   10 ++++++++
 include/vbi/stats.h   |   29 +++++++++++++++++-------
 include/vbi/syscall.h |   56 ++++++++++++++++++++++++++++---------------------
 3 files changed, 62 insertions(+), 33 deletions(-)

diff --git a/include/vbi/private.h b/include/vbi/private.h
index 80e5860..979fefb 100644
--- a/include/vbi/private.h
+++ b/include/vbi/private.h
@@ -22,6 +22,7 @@
 #include <vbi/syscalls.h>
 #include <vbi/syscall.h>
 #include <vbi/types.h>
+#include <vbi/stats.h>
 
 #ifndef _ASMLANGUAGE
 
@@ -45,8 +46,17 @@ extern asmlinkage int32_t vbi_sched_transition_op(uint32_t transition_type);
 extern asmlinkage int32_t vbi_rx_op(void *rmsg, uint32_t rlen,
 			struct vbi_msg_info *info, struct vbi_msg_ctl *ctl);
 
+#if defined(CONFIG_WRHV_COREVBI_ONLY)
+static inline int32_t vbi_vb_remote(uint32_t op, uint32_t board_id,
+			int32_t core_id,  void *out)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_vb_remote, "vbi_vb_remote");
+	return -1;
+}
+#else
 extern asmlinkage int32_t vbi_vb_remote(uint32_t op, uint32_t board_id,
 			int32_t core_id,  void *out);
+#endif
 
 #endif
 
diff --git a/include/vbi/stats.h b/include/vbi/stats.h
index 616da29..6bde15b 100644
--- a/include/vbi/stats.h
+++ b/include/vbi/stats.h
@@ -3,7 +3,7 @@
 
 #ifndef _ASMLANGUAGE
 
-#ifdef CONFIG_WRHV_CERT
+#if defined(CONFIG_WRHV_COREVBI_ONLY)
 /* header file required by the printk, which is used in VBISTAT_VERBOSE */
 #include <linux/kernel.h>
 #endif
@@ -23,27 +23,32 @@ struct vbi_api_stats{
 	uint32_t vbi_disp_status_regs;
 	uint32_t vbi_disp_ctrl_regs;
 	uint32_t vbi_show_config_page_map;
-	/* functions implementted in syscall.h */
+	/* functions implemented in syscall.h */
 	uint32_t vbi_set_mem_attr;
 	uint32_t vbi_get_mem_attr;
 	uint32_t vbi_kputs;
 	uint32_t vbi_kputc;
-	uint32_t vbi_send;
 	uint32_t vbi_receive;
 	uint32_t vbi_reply;
 	uint32_t vbi_vb_restart;
 	uint32_t vbi_vb_resume;
-	uint32_t vbi_vb_read_mem;
-	uint32_t vbi_vb_write_mem;
 	uint32_t vbi_shell_start_debug;
-	uint32_t vbi_vb_read_reg;
-	uint32_t vbi_vb_write_reg;
 	uint32_t vbi_ns_register;
 	uint32_t vbi_ns_unregister;
-	uint32_t vbi_ns_lookup;
 	uint32_t vbi_vb_suspend;
 	uint32_t vbi_ctx_ctl;
 	uint32_t vbi_vb_mgmt;
+	/* optional vbi */
+	uint32_t vbi_vb_remote;
+	uint32_t vbi_ns_lookup;
+	uint32_t vbi_send;
+	uint32_t vbi_vb_write_reg;
+	uint32_t vbi_vb_read_reg;
+	uint32_t vbi_vb_write_mem;
+	uint32_t vbi_vb_read_mem;
+	uint32_t vbi_get_exc_offset;
+	uint32_t vbi_set_exc_offset;
+	uint32_t vbi_vtlb_op;
 };
 
 /* declared in linux/kernel/vbi/wrhv.c */
@@ -59,7 +64,7 @@ extern int cert_hyp_version;
 do {\
 /* limit output to maximum of 100 times */\
 if ((vbistat_verbose) && ((ctr) < 100))\
-printk(KERN_INFO "unsupported vbi call %s\n", msg);\
+printk(KERN_INFO "Unsupported vbi call %s\n", msg);\
 ctr++;\
 } while (0)
 
@@ -67,6 +72,12 @@ static inline int is_cert_hyp(void){
 	return cert_hyp_version != CERT_HYP_VER_NONE;
 }
 
+#ifdef CONFIG_WRHV_COREVBI_ONLY
+#define is_corevbi_only()	(1)
+#else
+#define is_corevbi_only()	(0)
+#endif
+
 #endif
 
 #endif
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index 9d849f0..3da0390 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -168,10 +168,6 @@ extern asmlinkage int vbi_ctx_ctl(unsigned operation, unsigned arg1,
 				unsigned arg2);
 extern asmlinkage int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
 				int32_t *outError, uint32_t flags, void *ctl);
-/* Message send */
-extern asmlinkage int32_t vbi_send(int32_t id, void *smsg, size_t slen,
-			    void *rmsg, size_t rlen, struct vbi_msg_info *info,
-			    struct vbi_msg_ctl *ctl);
 /* message reply */
 extern asmlinkage int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
 				struct vbi_msg_ctl *ctl);
@@ -185,18 +181,6 @@ extern asmlinkage int32_t vbi_get_mem_attr(void *vaddr, int32_t *attr);
 extern asmlinkage int32_t vbi_vb_suspend(uint32_t id, int32_t core);
 extern asmlinkage int32_t vbi_vb_restart(uint32_t id, int32_t core);
 extern asmlinkage int32_t vbi_vb_resume(uint32_t id, int32_t core);
-/* read remote vb's memory */
-extern asmlinkage int32_t vbi_vb_read_mem(struct vbi_mem_ctl *memCtl,
-					 uint32_t targetBoard);
-extern asmlinkage int32_t vbi_vb_write_mem(struct vbi_mem_ctl *memCtl,
-					uint32_t targetBoard);
-/* read/write remote vb's registers */
-extern asmlinkage
-int32_t vbi_vb_read_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
-				uint32_t targetBoard, int32_t core);
-extern asmlinkage
-int32_t vbi_vb_write_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
-				uint32_t targetBoard, int32_t core);
 #else
 /* following functions avaiable to debug version of certifiable hypervisor */
 extern asmlinkage int32_t cert_debug_vbi_kputs(const char *s);
@@ -222,14 +206,7 @@ static inline int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
 	VBISTAT_VERBOSE(vbistat_count.vbi_vb_mgmt, "vbi_vb_mgmt");
 	return -1;
 }
-/* Message send */
-static inline int32_t vbi_send(int32_t id, void *smsg, size_t slen,
-		void *rmsg, size_t rlen, struct vbi_msg_info *info,
-		struct vbi_msg_ctl *ctl)
-{
-	VBISTAT_VERBOSE(vbistat_count.vbi_send, "vbi_send");
-	return -1;
-}
+
 /* message reply */
 static inline int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
 		struct vbi_msg_ctl *ctl)
@@ -295,6 +272,18 @@ static inline int32_t vbi_vb_resume(uint32_t id, int32_t core)
 	return -1;
 }
 
+#endif
+
+/* Optional VBI */
+#if defined(CONFIG_WRHV_COREVBI_ONLY)
+/* Message send */
+static inline int32_t vbi_send(int32_t id, void *smsg, size_t slen,
+		void *rmsg, size_t rlen, struct vbi_msg_info *info,
+		struct vbi_msg_ctl *ctl)
+{
+	VBISTAT_VERBOSE(vbistat_count.vbi_send, "vbi_send");
+	return -1;
+}
 static inline int32_t vbi_vb_read_mem(struct vbi_mem_ctl *memCtl,
 					uint32_t targetBoard)
 {
@@ -320,7 +309,26 @@ static inline int32_t vbi_vb_write_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
 	VBISTAT_VERBOSE(vbistat_count.vbi_vb_write_reg, "vbi_vb_write_reg");
 	return -1;
 }
+#else
+/* Message send */
+extern asmlinkage
+int32_t vbi_send(int32_t id, void *smsg, size_t slen,
+			void *rmsg, size_t rlen, struct vbi_msg_info *info,
+			struct vbi_msg_ctl *ctl);
+/* read/write remote vb's registers */
+extern asmlinkage
+int32_t vbi_vb_read_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
+				uint32_t targetBoard, int32_t core);
+extern asmlinkage
+int32_t vbi_vb_write_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
+				uint32_t targetBoard, int32_t core);
+/* read remote vb's memory */
+extern asmlinkage int32_t vbi_vb_read_mem(struct vbi_mem_ctl *memCtl,
+					 uint32_t targetBoard);
+extern asmlinkage int32_t vbi_vb_write_mem(struct vbi_mem_ctl *memCtl,
+					uint32_t targetBoard);
 #endif
 
+
 #endif	/* _ASMLANGUAGE */
 #endif  /* _VBI_SYSCALL_H */
-- 
1.7.0.2

