From 4c3100bf33e53ecf059afde5fb388e40d601ae86 Mon Sep 17 00:00:00 2001
From: Liang Li <liang.li@windriver.com>
Date: Tue, 15 Sep 2009 15:35:22 +0800
Subject: [PATCH 6/6] powerpc: able to disable cpus in dts

Original strategy for support wrload is bring up all cores then
offline cores for wrloaded images. This will cause resource
migration problem.

Instead of down the core first before we activate it in wrload.
We will mark the core used by other OS as disabled, and not online
it when booting linux. This also enables better control via dts
for different use cases.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
Signed-off-by: Liang Li <liang.li@windriver.com>
---
 arch/powerpc/kernel/setup-common.c |    6 +++++-
 1 files changed, 5 insertions(+), 1 deletions(-)

diff --git a/arch/powerpc/kernel/setup-common.c b/arch/powerpc/kernel/setup-common.c
index 94cdaf0..98e3c66 100644
--- a/arch/powerpc/kernel/setup-common.c
+++ b/arch/powerpc/kernel/setup-common.c
@@ -422,6 +422,7 @@ void __init smp_setup_cpu_maps(void)
 	struct device_node *dn = NULL;
 	int cpu = 0;
 	int nthreads = 1;
+	const int *disabled;
 
 	DBG("smp_setup_cpu_maps()\n");
 
@@ -444,10 +445,13 @@ void __init smp_setup_cpu_maps(void)
 				intserv = &cpu;	/* assume logical == phys */
 		}
 
+		disabled = of_get_property(dn, "cpu-disabled", NULL);
+
 		for (j = 0; j < nthreads && cpu < NR_CPUS; j++) {
 			DBG("    thread %d -> cpu %d (hard id %d)\n",
 			    j, cpu, intserv[j]);
-			set_cpu_present(cpu, true);
+			if (!disabled)
+				set_cpu_present(cpu, true);
 			set_hard_smp_processor_id(cpu, intserv[j]);
 			set_cpu_possible(cpu, true);
 			cpu++;
-- 
1.6.5.2

