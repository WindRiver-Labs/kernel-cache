From 93f162aca33aa462b32636f81b3a186dcb8905f2 Mon Sep 17 00:00:00 2001
From: Liang Li <liang.li@windriver.com>
Date: Thu, 8 Sep 2011 18:28:12 +0800
Subject: [PATCH 1/2] wrhv: vbi: only export dedicated VBI in one place

Audit and collect all exported VBI to separate file.

Signed-off-by: Liang Li <liang.li@windriver.com>
---
 kernel/vbi/Makefile    |    2 +-
 kernel/vbi/exports.c   |   40 ++++++++++++++++++++++++++++++++++++++++
 kernel/vbi/interrupt.c |    2 --
 kernel/vbi/io_apic.c   |    2 --
 kernel/vbi/shmem.c     |    1 -
 kernel/vbi/wrhv.c      |    8 --------
 6 files changed, 41 insertions(+), 14 deletions(-)
 create mode 100644 kernel/vbi/exports.c

diff --git a/kernel/vbi/Makefile b/kernel/vbi/Makefile
index 5b19c6a..d077d27 100644
--- a/kernel/vbi/Makefile
+++ b/kernel/vbi/Makefile
@@ -7,7 +7,7 @@
 # Except the user ABI, which is always present, and defined in syscall_vbi
 
 obj-$(CONFIG_WRHV) += shmem.o wrhv.o interrupt.o paddr.o idle.o io_apic.o lib.o \
-                      version.o msg.o ns.o show.o pdc.o device.o procfs.o
+                      version.o msg.o ns.o show.o pdc.o device.o procfs.o exports.o
 
 obj-$(CONFIG_WRHV_CERT) += sched.o
 
diff --git a/kernel/vbi/exports.c b/kernel/vbi/exports.c
new file mode 100644
index 0000000..7916a45
--- /dev/null
+++ b/kernel/vbi/exports.c
@@ -0,0 +1,40 @@
+/*
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License as published by the
+ *  Free Software Foundation; either version 2, or (at your option) any
+ *  later version.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *  Copyright (C) 2011 Wind River Systems, Inc.
+ */
+
+/*
+ * exports.c - Export necessary VBIs for kernel modules
+ */
+
+#include <linux/module.h>
+#include <vbi/vbi.h>
+
+EXPORT_SYMBOL(vbi_vb_suspend);
+EXPORT_SYMBOL(vbi_vb_resume);
+
+EXPORT_SYMBOL(vbi_vb_read_mem);
+EXPORT_SYMBOL(vbi_vb_write_mem);
+
+EXPORT_SYMBOL(vbi_vb_read_reg);
+EXPORT_SYMBOL(vbi_vb_write_reg);
+
+EXPORT_SYMBOL(vbi_vb_find_board_config);
+EXPORT_SYMBOL(vbi_find_shmem);
+
+EXPORT_SYMBOL(vbi_unmask_vioapic_irq);
+EXPORT_SYMBOL(vbi_send_vioapic_irq);
+EXPORT_SYMBOL(vbi_find_irq);
+
+EXPORT_SYMBOL(vbi_ns_lookup);
+
+EXPORT_SYMBOL(vbi_send);
diff --git a/kernel/vbi/interrupt.c b/kernel/vbi/interrupt.c
index 60c1eaf..5cd4863 100644
--- a/kernel/vbi/interrupt.c
+++ b/kernel/vbi/interrupt.c
@@ -63,5 +63,3 @@ int32_t vbi_find_irq(char *irq_name, int32_t irq_dir)
 	return VBI_INVALID_IRQ; /* no match */
 }
 
-EXPORT_SYMBOL(vbi_find_irq);
-
diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index cb03f0c..0f62904 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -160,7 +160,6 @@ int32_t vbi_unmask_vioapic_irq(int32_t irq)
 
 	return vbi_io_apic_op(VBI_IOAPICIOCTL_UNMASK, irq, 0, 0);
 }
-EXPORT_SYMBOL(vbi_unmask_vioapic_irq);
 
 /*
  * vbi_mask_vioapic_irq - Mask an irq
@@ -252,7 +251,6 @@ int32_t vbi_send_vioapic_irq(int32_t irq, uint32_t filter, uint32_t target)
 {
 	return vbi_io_apic_op(VBI_IOAPICIOCTL_SEND, irq, filter, target);
 }
-EXPORT_SYMBOL(vbi_send_vioapic_irq);
 
 /*
  * vbi_send_vcore_vioapic_irq - Send an IRQ to a set of virtual cores within a VB
diff --git a/kernel/vbi/shmem.c b/kernel/vbi/shmem.c
index 95d982b..c474980 100644
--- a/kernel/vbi/shmem.c
+++ b/kernel/vbi/shmem.c
@@ -76,7 +76,6 @@ int32_t vbi_find_shmem(int8_t *smName, void **addr,
 	*addr = 0;
 	return VBI_INVALID_SHMEM;
 }
-EXPORT_SYMBOL(vbi_find_shmem);
 
 /*
  * vbi_find_mem - locate the memory parameters for a given region
diff --git a/kernel/vbi/wrhv.c b/kernel/vbi/wrhv.c
index 75fa098..5f0f158 100644
--- a/kernel/vbi/wrhv.c
+++ b/kernel/vbi/wrhv.c
@@ -502,14 +502,6 @@ static void __devinit pci_fixup_wrhv(struct pci_dev *dev)
 DECLARE_PCI_FIXUP_FINAL(PCI_ANY_ID, PCI_ANY_ID, pci_fixup_wrhv);
 #endif
 
-EXPORT_SYMBOL(vbi_vb_suspend);
-EXPORT_SYMBOL(vbi_vb_read_mem);
-EXPORT_SYMBOL(vbi_vb_write_mem);
-EXPORT_SYMBOL(vbi_vb_find_board_config);
-EXPORT_SYMBOL(vbi_vb_read_reg);
-EXPORT_SYMBOL(vbi_vb_write_reg);
-EXPORT_SYMBOL(vbi_vb_resume);
-
 static int wrhv_suspend_valid(suspend_state_t state)
 {
 	return state == PM_SUSPEND_STANDBY || state == PM_SUSPEND_MEM;
-- 
1.7.0.4

