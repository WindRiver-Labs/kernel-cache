From 30e4436560e4da06eee4acecafd3a6c7b23ece15 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 20 Jul 2011 14:10:13 +0800
Subject: [PATCH 3/4] wrhv/vbi: move some of vbi from core to optional

Currently some vbi are listed as core vbi, but in fact they
should be optional. So move them to optional list.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/powerpc/kernel/vbi/show.c |    8 +++++
 include/vbi/stats.h            |   22 +++++++-------
 include/vbi/syscall.h          |   63 ++++++++++++++++++++-------------------
 kernel/vbi/io_apic.c           |    2 +-
 kernel/vbi/lib.c               |    2 +-
 kernel/vbi/msg.c               |    2 +-
 kernel/vbi/ns.c                |    4 +-
 kernel/vbi/procfs.c            |   22 +++++++-------
 kernel/vbi/show.c              |    3 +-
 9 files changed, 69 insertions(+), 59 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/show.c b/arch/powerpc/kernel/vbi/show.c
index 8d48d57..17e362d 100644
--- a/arch/powerpc/kernel/vbi/show.c
+++ b/arch/powerpc/kernel/vbi/show.c
@@ -32,6 +32,10 @@ void vbi_disp_status_regs(void)
 #error CPU is undefined, needs to be PPC85XX or similar.
 #endif
 
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_disp_status_regs);
+		return;
+	}
 #if CPU == PPC85XX /* don't know how to handle cpu variant */
     printk("  srr0/srr1:          0x%08x 0x%08x\n",
 		VB_STATUS_REGS_ACCESS (p, srr0) ,
@@ -78,6 +82,10 @@ void vbi_disp_ctrl_regs(void)
 {
     struct vb_control *p = VBI_CNTRL_ADDR_GET();
 
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbi_disp_ctrl_regs);
+		return;
+	}
 #if CPU == PPC85XX /* don't know how to handle cpu variant */
     printk("  srr0/srr1:           0x%08x 0x%08x\n",
 		VB_CONTROL_REGS_ACCESS (p, srr0),
diff --git a/include/vbi/stats.h b/include/vbi/stats.h
index f3a2ecf..e9eef83 100644
--- a/include/vbi/stats.h
+++ b/include/vbi/stats.h
@@ -16,38 +16,29 @@
 
 enum wrhv_vbi {
 	/* functions implemented in vbi.h */
-	VBI_API_STATS_DEF(vbi_vb_find_board_config),
 	VBI_API_STATS_DEF(vbi_send_vcore_vioapic_irq),
 	VBI_API_STATS_DEF(vbi_redir_vioapic_irq),
-	VBI_API_STATS_DEF(vbi_disp_vioapic),
 	VBI_API_STATS_DEF(vbi_show_shmem),
 	VBI_API_STATS_DEF(vbi_show_stat),
 	VBI_API_STATS_DEF(vbi_show_ctrl),
 	VBI_API_STATS_DEF(vbi_show_cfg),
 	VBI_API_STATS_DEF(vbi_show_mem),
-	VBI_API_STATS_DEF(vbi_disp_status_regs),
-	VBI_API_STATS_DEF(vbi_disp_ctrl_regs),
-	VBI_API_STATS_DEF(vbi_show_config_page_map),
 	/* functions implemented in syscall.h */
 	VBI_API_STATS_DEF(vbi_set_mem_attr),
 	VBI_API_STATS_DEF(vbi_get_mem_attr),
 	VBI_API_STATS_DEF(vbi_kputs),
 	VBI_API_STATS_DEF(vbi_kputc),
-	VBI_API_STATS_DEF(vbi_receive),
-	VBI_API_STATS_DEF(vbi_reply),
 	VBI_API_STATS_DEF(vbi_vb_restart),
 	VBI_API_STATS_DEF(vbi_vb_resume),
-	VBI_API_STATS_DEF(vbi_shell_start_debug),
-	VBI_API_STATS_DEF(vbi_ns_register),
-	VBI_API_STATS_DEF(vbi_ns_unregister),
 	VBI_API_STATS_DEF(vbi_vb_suspend),
 	VBI_API_STATS_DEF(vbi_ctx_ctl),
-	VBI_API_STATS_DEF(vbi_vb_mgmt),
 	VBI_API_STATS_DEF(core_vbi_end),
 	/* optional vbi */
 	VBI_API_STATS_DEF(vbi_vb_remote),
 	VBI_API_STATS_DEF(vbi_ns_lookup),
 	VBI_API_STATS_DEF(vbi_send),
+	VBI_API_STATS_DEF(vbi_receive),
+	VBI_API_STATS_DEF(vbi_reply),
 	VBI_API_STATS_DEF(vbi_vb_write_reg),
 	VBI_API_STATS_DEF(vbi_vb_read_reg),
 	VBI_API_STATS_DEF(vbi_vb_write_mem),
@@ -55,6 +46,15 @@ enum wrhv_vbi {
 	VBI_API_STATS_DEF(vbi_get_exc_offset),
 	VBI_API_STATS_DEF(vbi_set_exc_offset),
 	VBI_API_STATS_DEF(vbi_vtlb_op),
+	VBI_API_STATS_DEF(vbi_vb_find_board_config),
+	VBI_API_STATS_DEF(vbi_disp_vioapic),
+	VBI_API_STATS_DEF(vbi_disp_status_regs),
+	VBI_API_STATS_DEF(vbi_disp_ctrl_regs),
+	VBI_API_STATS_DEF(vbi_show_config_page_map),
+	VBI_API_STATS_DEF(vbi_shell_start_debug),
+	VBI_API_STATS_DEF(vbi_ns_register),
+	VBI_API_STATS_DEF(vbi_ns_unregister),
+	VBI_API_STATS_DEF(vbi_vb_mgmt),
 	VBI_API_STATS_DEF(vbi_end),
 };
 
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index 491205c..94b9b41 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -155,15 +155,8 @@ extern asmlinkage int32_t vbi_vb_reset(uint32_t id, int32_t core, uint32_t optio
 #if !defined(CONFIG_WRHV_CERT)
 extern asmlinkage int vbi_ctx_ctl(unsigned operation, unsigned arg1,
 				unsigned arg2);
-extern asmlinkage int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
-				int32_t *outError, uint32_t flags, void * ctl);
-/* message reply */
-extern asmlinkage int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
-				struct vbi_msg_ctl *ctl);
-
 extern asmlinkage int32_t vbi_kputs(const char *s);
 extern asmlinkage int32_t vbi_kputc(int c);
-extern asmlinkage void vbi_shell_start_debug(uint32_t  flags);
 extern asmlinkage int32_t  vbi_set_mem_attr(void *vaddr, size_t len,
 						int32_t attr);
 extern asmlinkage int32_t  vbi_get_mem_attr(void *vaddr, int32_t * attr);
@@ -199,20 +192,6 @@ static inline int vbi_ctx_ctl(unsigned operation, unsigned arg1,
 	VBISTAT_VERBOSE(vbi_ctx_ctl);
 	return -1;
 }
-static inline int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
-			int32_t *outError, uint32_t flags, void *ctl)
-{
-	VBISTAT_VERBOSE(vbi_vb_mgmt);
-	return -1;
-}
-
-/* message reply */
-static inline int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
-		struct vbi_msg_ctl *ctl)
-{
-	VBISTAT_VERBOSE(vbi_rely);
-	return -1;
-}
 static inline int32_t vbi_kputs(const char *s)
 {
 	 /* standard certifiable hypervisor does not support this function */
@@ -232,16 +211,6 @@ static inline int32_t vbi_kputc(int c)
 	}
 	return cert_debug_vbi_kputc(c);
 }
-static inline void vbi_shell_start_debug(uint32_t  flags)
-{
-	/* standard certifiable hypervisor does not support this function */
-	if (cert_hyp_version == CERT_HYP_VER_STD) {
-		VBISTAT_VERBOSE(vbi_shell_start_debug);
-		return;
-	}
-	cert_debug_vbi_shell_start_debug(flags);
-	return;
-}
 /* Prior to vbi 2.0 these api were vbi_set_mmu_attr/Get */
 static inline int32_t vbi_set_mem_attr(void *vaddr, size_t len, int32_t attr)
 {
@@ -298,6 +267,13 @@ extern asmlinkage int32_t vbi_vb_write_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
 
 /* Optional VBI */
 #if defined(CONFIG_WRHV_COREVBI_ONLY)
+/* message reply */
+static inline int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
+		struct vbi_msg_ctl *ctl)
+{
+	VBISTAT_VERBOSE(vbi_reply);
+	return -1;
+}
 /* Message send */
 static inline int32_t vbi_send(int32_t id, void *smsg, size_t slen,
 		void *rmsg, size_t rlen, struct vbi_msg_info *info,
@@ -318,7 +294,29 @@ static inline int32_t vbi_vb_write_mem(struct vbi_mem_ctl *memCtl,
 	VBISTAT_VERBOSE(vbi_vb_write_mem);
 	return -1;
 }
+static inline void vbi_shell_start_debug(uint32_t  flags)
+{
+	/* standard certifiable hypervisor does not support this function */
+	if (cert_hyp_version == CERT_HYP_VER_DEBUG) {
+#ifdef CONFIG_WRHV_CERT
+		cert_debug_vbi_shell_start_debug(flags);
+#endif
+		return;
+	}
+
+	VBISTAT_VERBOSE(vbi_shell_start_debug);
+	return;
+}
+static inline int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
+				int32_t *outError, uint32_t flags, void * ctl)
+{
+	VBISTAT_VERBOSE(vbi_vb_mgmt);
+	return -1;
+}
 #else
+/* message reply */
+extern asmlinkage int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
+				struct vbi_msg_ctl *ctl);
 /* Message send */
 extern asmlinkage int32_t vbi_send(int32_t id, void *smsg, size_t slen,
 			    void *rmsg, size_t rlen, struct vbi_msg_info *info,
@@ -326,6 +324,9 @@ extern asmlinkage int32_t vbi_send(int32_t id, void *smsg, size_t slen,
 /* read remote vb's memory */
 extern asmlinkage int32_t vbi_vb_read_mem(struct vbi_mem_ctl *memCtl, uint32_t targetBoard);
 extern asmlinkage int32_t vbi_vb_write_mem(struct vbi_mem_ctl *memCtl, uint32_t targetBoard);
+extern asmlinkage void vbi_shell_start_debug(uint32_t  flags);
+extern asmlinkage int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
+				int32_t *outError, uint32_t flags, void * ctl);
 #endif
 
 #endif	/* _ASMLANGUAGE */
diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index 4cd0dc7..46c6ee8 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -343,7 +343,7 @@ void vbi_disp_vioapic(void)
 	};
 
 	/* Certifiable hypervisor does not support this function */
-	if (is_cert_hyp()) {
+	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_disp_vioapic);
 		return;
 	}
diff --git a/kernel/vbi/lib.c b/kernel/vbi/lib.c
index abd2ce5..8be50d1 100644
--- a/kernel/vbi/lib.c
+++ b/kernel/vbi/lib.c
@@ -211,7 +211,7 @@ int32_t vbi_vb_find_board_config(uint32_t board_id, int32_t core_id,
 					void *paddr)
 {
 	/* Certifiable hypervisor does not support this function */
-	if (is_cert_hyp()) {
+	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_vb_find_board_config);
 		return -1;
 	}
diff --git a/kernel/vbi/msg.c b/kernel/vbi/msg.c
index 677f9e4..63fd351 100644
--- a/kernel/vbi/msg.c
+++ b/kernel/vbi/msg.c
@@ -38,7 +38,7 @@ int32_t vbi_receive(void *rmsg, uint32_t rlen, struct vbi_msg_info *info,
 {
 	int32_t retval;
 
-	if (is_cert_hyp()) {
+	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_receive);
 		return -1;
 	}
diff --git a/kernel/vbi/ns.c b/kernel/vbi/ns.c
index d60b2d5..952c549 100644
--- a/kernel/vbi/ns.c
+++ b/kernel/vbi/ns.c
@@ -47,7 +47,7 @@ for processing.
 int32_t vbi_ns_register(char *name, uint32_t revision)
 {
 	/* Certifiable hypervisor does not support this function */
-	if (is_cert_hyp()) {
+	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_ns_register);
 		return -1;
 	}
@@ -70,7 +70,7 @@ int32_t vbi_ns_register(char *name, uint32_t revision)
 int32_t vbi_ns_unregister(char *name, uint32_t revision)
 {
 	/* Certifiable hypervisor does not support this function */
-	if (is_cert_hyp()) {
+	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_ns_unregister);
 		return -1;
 	}
diff --git a/kernel/vbi/procfs.c b/kernel/vbi/procfs.c
index 7908ac3..b26c8ad 100644
--- a/kernel/vbi/procfs.c
+++ b/kernel/vbi/procfs.c
@@ -117,40 +117,31 @@ int cert_hyp_version = CERT_HYP_VER_NONE;
 
 struct vbi_api_stats vbistat[] = {
 	/* functions implemented in vbi.h */
-	VBI_API_STATS_INIT(vbi_vb_find_board_config),
 	VBI_API_STATS_INIT(vbi_send_vcore_vioapic_irq),
 	VBI_API_STATS_INIT(vbi_redir_vioapic_irq),
-	VBI_API_STATS_INIT(vbi_disp_vioapic),
 	VBI_API_STATS_INIT(vbi_show_shmem),
 	VBI_API_STATS_INIT(vbi_show_stat),
 	VBI_API_STATS_INIT(vbi_show_ctrl),
 	VBI_API_STATS_INIT(vbi_show_cfg),
 	VBI_API_STATS_INIT(vbi_show_mem),
-	VBI_API_STATS_INIT(vbi_disp_status_regs),
-	VBI_API_STATS_INIT(vbi_disp_ctrl_regs),
-	VBI_API_STATS_INIT(vbi_show_config_page_map),
 
 	/* functions implemented in syscall.h */
 	VBI_API_STATS_INIT(vbi_set_mem_attr),
 	VBI_API_STATS_INIT(vbi_get_mem_attr),
 	VBI_API_STATS_INIT(vbi_kputs),
 	VBI_API_STATS_INIT(vbi_kputc),
-	VBI_API_STATS_INIT(vbi_receive),
-	VBI_API_STATS_INIT(vbi_reply),
 	VBI_API_STATS_INIT(vbi_vb_restart),
 	VBI_API_STATS_INIT(vbi_vb_resume),
-	VBI_API_STATS_INIT(vbi_shell_start_debug),
-	VBI_API_STATS_INIT(vbi_ns_register),
-	VBI_API_STATS_INIT(vbi_ns_unregister),
 	VBI_API_STATS_INIT(vbi_vb_suspend),
 	VBI_API_STATS_INIT(vbi_ctx_ctl),
-	VBI_API_STATS_INIT(vbi_vb_mgmt),
 	VBI_API_STATS_INIT(core_vbi_end),
 
 	/* optionsl vbi */
 	VBI_API_STATS_INIT(vbi_vb_remote),
 	VBI_API_STATS_INIT(vbi_ns_lookup),
 	VBI_API_STATS_INIT(vbi_send),
+	VBI_API_STATS_INIT(vbi_receive),
+	VBI_API_STATS_INIT(vbi_reply),
 	VBI_API_STATS_INIT(vbi_vb_write_reg),
 	VBI_API_STATS_INIT(vbi_vb_read_reg),
 	VBI_API_STATS_INIT(vbi_vb_write_mem),
@@ -158,6 +149,15 @@ struct vbi_api_stats vbistat[] = {
 	VBI_API_STATS_INIT(vbi_get_exc_offset),
 	VBI_API_STATS_INIT(vbi_set_exc_offset),
 	VBI_API_STATS_INIT(vbi_vtlb_op),
+	VBI_API_STATS_INIT(vbi_vb_find_board_config),
+	VBI_API_STATS_INIT(vbi_disp_vioapic),
+	VBI_API_STATS_INIT(vbi_disp_status_regs),
+	VBI_API_STATS_INIT(vbi_disp_ctrl_regs),
+	VBI_API_STATS_INIT(vbi_show_config_page_map),
+	VBI_API_STATS_INIT(vbi_shell_start_debug),
+	VBI_API_STATS_INIT(vbi_ns_register),
+	VBI_API_STATS_INIT(vbi_ns_unregister),
+	VBI_API_STATS_INIT(vbi_vb_mgmt),
 	VBI_API_STATS_INIT(vbi_end),
 };
 
diff --git a/kernel/vbi/show.c b/kernel/vbi/show.c
index 7d9a55a..ecb81ef 100644
--- a/kernel/vbi/show.c
+++ b/kernel/vbi/show.c
@@ -261,12 +261,13 @@ void vbi_show_ctrl(void)
 	printk("\n");
 }
 
-#if defined(CONFIG_WRHV_CERT)
+#if defined(CONFIG_WRHV_COREVBI_ONLY)
 void vbi_show_config_page_map()
 {
 	/* certifiable hypervisor does not have page map field in the
 	 * vb_config structure
 	 */
+	VBISTAT_VERBOSE(vbi_show_config_page_map);
 	return;
 }
 #else
-- 
1.7.0.4

