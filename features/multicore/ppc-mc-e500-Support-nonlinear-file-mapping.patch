From c120dcc6a7d5e835f63e874c36687e2c4f365a87 Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Mon, 26 Jul 2010 04:20:54 -0700
Subject: [PATCH] ppc-mc/e500: Support nonlinear file mapping

We should re-define the function how to convert between pte and pgoff since
e500 guest OS use the 64 PTE format for VMMU.

And we should mask _PAGE_FILE on _PTE_NONE_MASK. You know the pte with
_PAGE_FILE & !_PAGE_PRESENT is realy one nonlinear file mapping pte. This
will make sure pte can be handled via do_nonlinear_fault() when calling
handle_pte_fault().

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/include/asm/pgtable-ppc32.h    |    5 +++++
 arch/powerpc/include/asm/pv_pgtable-ppc32.h |   17 ++++++++++++++++-
 2 files changed, 21 insertions(+), 1 deletions(-)

diff --git a/arch/powerpc/include/asm/pgtable-ppc32.h b/arch/powerpc/include/asm/pgtable-ppc32.h
index f98fe3f..2ff3807 100644
--- a/arch/powerpc/include/asm/pgtable-ppc32.h
+++ b/arch/powerpc/include/asm/pgtable-ppc32.h
@@ -343,6 +343,10 @@ static inline void __ptep_set_access_flags(pte_t *ptep, pte_t entry)
 #define pte_unmap(pte)		kunmap_atomic(pte, KM_PTE0)
 #define pte_unmap_nested(pte)	kunmap_atomic(pte, KM_PTE1)
 
+/* We will re-define that on file, arch/powerpc/include/asm/pv_pgtable-ppc32.h,
+ * since e500 guest OS should match VMMU. 
+ */
+#if !defined(CONFIG_WRHV) || defined(CONFIG_PPC85xx_VT_MODE)
 /*
  * Encode and decode a swap entry.
  * Note that the bits we use in a PTE for representing a swap entry
@@ -359,6 +363,7 @@ static inline void __ptep_set_access_flags(pte_t *ptep, pte_t entry)
 #define PTE_FILE_MAX_BITS	29
 #define pte_to_pgoff(pte)	(pte_val(pte) >> 3)
 #define pgoff_to_pte(off)	((pte_t) { ((off) << 3) | _PAGE_FILE })
+#endif
 
 /*
  * No page table caches to initialise
diff --git a/arch/powerpc/include/asm/pv_pgtable-ppc32.h b/arch/powerpc/include/asm/pv_pgtable-ppc32.h
index 8a8fc1f..aeaaa04 100644
--- a/arch/powerpc/include/asm/pv_pgtable-ppc32.h
+++ b/arch/powerpc/include/asm/pv_pgtable-ppc32.h
@@ -32,7 +32,22 @@
 
 #define _PAGE_EXEC		VMMU_CACHE_COHERENT
 
-#define _PTE_NONE_MASK		0xffffffff00000fffULL
+/* The flag, _PAGE_FILE_, bit0, should be used to mask this pte 
+ * as nonlinear file mapping.
+ */
+#define _PTE_NONE_MASK		0xffffffff00000ffdULL
+
+/* Encode and de-code a swap entry */
+#define __swp_type(entry)	(((entry).val >> 1) & 0x3f)
+#define __swp_offset(entry)	((entry).val >> 8)
+#define __swp_entry(type, offset) ((swp_entry_t){((type)<< 1)|((offset)<<8)})
+#define __pte_to_swp_entry(pte)	((swp_entry_t){pte_val(pte) >> PTE_RPN_SHIFT})
+#define __swp_entry_to_pte(x)	((pte_t) { (x).val << PTE_RPN_SHIFT })
+
+/* VMMU use 64bit PTE entry. */
+#define pte_to_pgoff(pte)	(pte_val(pte) >> PTE_RPN_SHIFT)
+#define pgoff_to_pte(off)	((pte_t) {((off) << PTE_RPN_SHIFT)|_PAGE_FILE})
+#define PTE_FILE_MAX_BITS	(BITS_PER_LONG - PTE_RPN_SHIFT)
 
 /* based on hypervisor VMMU_LEVEL_1_DESC definition */
 #define _PMD_PRESENT		0x00000001   /* big endian */
-- 
1.6.5.2

