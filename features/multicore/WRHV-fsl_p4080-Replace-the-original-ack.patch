From 762ca8d3d54eb4df13e8a3130d84501e81c579bf Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Wed, 12 May 2010 16:39:52 +0800
Subject: [PATCH 226/252] WRHV/fsl_p4080: Replace the original ack

Implement a ack function to call the correct VBI to ack the vioapic interrupt
or direct interrupt.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/kernel/vbi/syscalls.S |   17 +++++++++++++++++
 include/vbi/private.h              |    3 +++
 include/vbi/vbi.h                  |    1 +
 kernel/vbi/wrhv.c                  |   11 ++++++++++-
 4 files changed, 31 insertions(+), 1 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index 4e06012..b114ff6 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -35,6 +35,7 @@ FUNC_EXPORT(vbi_vb_read_reg)
 FUNC_EXPORT(vbi_vb_write_reg)
 FUNC_EXPORT(vbi_io_apic_op)
 FUNC_EXPORT(vbi_io_apic_ioctl)
+FUNC_EXPORT(vbi_di_eoi)
 FUNC_EXPORT(vbi_hy_ioctl)
 FUNC_EXPORT(vbi_ctx_ctl)
 FUNC_EXPORT(vbi_send)
@@ -738,6 +739,22 @@ vbi_hcall(vbi_vb_write_reg, RegsWrite_op)
 vbi_hcall(vbi_vcore_irq_redirect, intRedirect)
 
 /*
+ * vbiDirectInterruptEOI - clear last interrupt
+ *
+ * This system call interfaces to the virtual board to clear the last PIC
+ * interrupt enabling another interrupt to be triggered in the hardware.
+ * Should be used only when Virtual board is using direct interrupts.
+ *
+ * C interface:
+ *
+ *   vbiDirectInterruptEOI ()
+ *
+ * Returns: NONE
+ *
+ */
+vbi_hcall(vbi_di_eoi, pic_EOI)
+
+/*
  * vbi_vb_remote - VB remote operations
  *
  * This system call interfaces to the virtual board and requests for
diff --git a/include/vbi/private.h b/include/vbi/private.h
index f1206b7..bbfe159 100644
--- a/include/vbi/private.h
+++ b/include/vbi/private.h
@@ -42,6 +42,9 @@ extern asmlinkage int32_t vbi_rx_op(void *rmsg, uint32_t rlen,
 extern asmlinkage int32_t vbi_vb_remote(uint32_t op, uint32_t board_id,
 			int32_t core_id,  void *out);
 
+/* direct interrupt eoi */
+extern asmlinkage void vbi_di_eoi(void);
+
 #endif
 
 #endif  /* _VBI_PRIVATE_H */
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index 7a539ca..5784406 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -530,6 +530,7 @@ extern int32_t vbi_get_vioapic_vec(uint32_t irq);
 extern int32_t vbi_unmask_vioapic_irq(uint32_t irq);
 extern int32_t vbi_mask_vioapic_irq(uint32_t irq);
 extern int32_t vbi_ack_vioapic_irq(uint32_t irq);
+extern void vbi_di_eoi(void);
 extern int32_t vbi_send_vioapic_irq(uint32_t irq, uint32_t filter,
 				      uint32_t target);
 extern int32_t vbi_send_vioapic_irq(uint32_t irq, uint32_t filter,
diff --git a/kernel/vbi/wrhv.c b/kernel/vbi/wrhv.c
index bf02386..1c1c3b4 100644
--- a/kernel/vbi/wrhv.c
+++ b/kernel/vbi/wrhv.c
@@ -74,6 +74,15 @@ static void wrhv_ack_irq(unsigned int irq)
 	vbi_ack_vioapic_irq(irq);
 }
 
+extern int wrhv_dir_irq;
+static void wrhv_eoi_irq(unsigned int irq)
+{
+	if (wrhv_dir_irq)
+		vbi_di_eoi();
+	else
+		vbi_ack_vioapic_irq(irq);
+}
+
 static void wrhv_maskack_irq(unsigned int irq)
 {
 	if (irq != 0)
@@ -326,7 +335,7 @@ struct irq_chip wrhv_irq_chip = {
 	.enable		= wrhv_enable_irq,
 	.unmask		= wrhv_unmask_irq,
 	.mask_ack	= wrhv_maskack_irq,
-	.eoi		= wrhv_ack_irq,
+	.eoi		= wrhv_eoi_irq,
 };
 
 #ifdef CONFIG_SMP
-- 
1.6.5.2

