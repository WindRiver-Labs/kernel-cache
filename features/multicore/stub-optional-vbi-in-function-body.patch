From 6f900300cb3bf7dbe7ec046cec5fa66de254db1e Mon Sep 17 00:00:00 2001
From: Thomas Tai <thomas.tai@windriver.com>
Date: Wed, 4 May 2011 14:48:58 -0400
Subject: [PATCH 3/3] stub optional vbi in function body

when CONFIG_WRHV_COREVBI_ONLY is enable, the optional vbi
functions is stub out to print a warning message and log
a call count.

The call count can be read using "cat /proc/windriver/vbistat"

Signed-off-by: Thomas Tai <thomas.tai@windriver.com>
---
 kernel/vbi/ns.c     |   13 +++++++++-
 kernel/vbi/procfs.c |   60 ++++++++++++++++++++++++++++++++++----------------
 2 files changed, 52 insertions(+), 21 deletions(-)

diff --git a/kernel/vbi/ns.c b/kernel/vbi/ns.c
index 051d5e3..b501f96 100644
--- a/kernel/vbi/ns.c
+++ b/kernel/vbi/ns.c
@@ -103,8 +103,9 @@ int32_t vbi_ns_unregister(char *name, uint32_t revision)
  */
 int32_t vbi_ns_lookup_old(char *name, uint32_t revision, VBI_NS_HANDLE *handle)
 {
-	/* Certifiable hypervisor does not support this function */
-	if (is_cert_hyp()) {
+	/* Optional VBI, Certifiable hypervisor does not
+	   support this function */
+        if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbistat_count.vbi_ns_lookup,
 			"vbi_ns_lookup");
 		return -1;
@@ -141,6 +142,14 @@ int32_t vbi_ns_lookup_old(char *name, uint32_t revision, VBI_NS_HANDLE *handle)
 int32_t vbi_ns_lookup(char *name, uint32_t revision, VBI_NS_HANDLE *handle,
 			uint32_t timeout, uint32_t options)
 {
+	/* Optional VBI, Certifiable hypervisor does not
+	   support this function */
+	if (is_corevbi_only()) {
+		VBISTAT_VERBOSE(vbistat_count.vbi_ns_lookup,
+			"vbi_ns_lookup");
+		return -1;
+	}
+
 	if (name == NULL || handle == NULL)
 		return -1;
 
diff --git a/kernel/vbi/procfs.c b/kernel/vbi/procfs.c
index c67d2e1..7dc4bb7 100644
--- a/kernel/vbi/procfs.c
+++ b/kernel/vbi/procfs.c
@@ -135,23 +135,29 @@ struct vbi_api_stats vbistat_count = {
 	.vbi_get_mem_attr = 0,
 	.vbi_kputs = 0,
 	.vbi_kputc = 0,
-	.vbi_send = 0,
 	.vbi_receive = 0,
 	.vbi_reply = 0,
 	.vbi_vb_restart = 0,
 	.vbi_vb_resume = 0,
-	.vbi_vb_read_mem = 0,
-	.vbi_vb_write_mem = 0,
 	.vbi_shell_start_debug = 0,
-	.vbi_vb_read_reg = 0,
-	.vbi_vb_write_reg = 0,
 	.vbi_ns_register = 0,
 	.vbi_ns_unregister = 0,
-	.vbi_ns_lookup = 0,
 	.vbi_vb_suspend = 0,
 	.vbi_ctx_ctl = 0,
 	.vbi_vb_mgmt = 0,
 
+	/* optionsl vbi */
+	.vbi_vb_remote = 0,
+	.vbi_ns_lookup = 0,
+	.vbi_send = 0,
+	.vbi_vb_write_reg = 0,
+	.vbi_vb_read_reg = 0,
+	.vbi_vb_write_mem = 0,
+	.vbi_vb_read_mem = 0,
+	.vbi_get_exc_offset = 0,
+	.vbi_set_exc_offset = 0,
+	.vbi_vtlb_op = 0,
+
 };
 
 static int vbistat_proc_show(struct seq_file *m, void *v)
@@ -194,7 +200,7 @@ static int vbistat_proc_show(struct seq_file *m, void *v)
 	seq_printf(m, "vbi_show_config_page_map %d\n",
 		vbistat_count.vbi_show_config_page_map);
 
-	/* functions implementted in syscall.h */
+	/* functions implemented in syscall.h */
 	seq_printf(m, "vbi_set_mem_attr %d\n",
 		vbistat_count.vbi_set_mem_attr);
 	seq_printf(m, "vbi_get_mem_attr %d\n",
@@ -203,8 +209,6 @@ static int vbistat_proc_show(struct seq_file *m, void *v)
 		vbistat_count.vbi_kputs);
 	seq_printf(m, "vbi_kputc %d\n",
 		vbistat_count.vbi_kputc);
-	seq_printf(m, "vbi_send %d\n",
-		vbistat_count.vbi_send);
 	seq_printf(m, "vbi_receive %d\n",
 		vbistat_count.vbi_receive);
 	seq_printf(m, "vbi_reply %d\n",
@@ -213,22 +217,12 @@ static int vbistat_proc_show(struct seq_file *m, void *v)
 		vbistat_count.vbi_vb_restart);
 	seq_printf(m, "vbi_vb_resume %d\n",
 		vbistat_count.vbi_vb_resume);
-	seq_printf(m, "vbi_vb_read_mem %d\n",
-		vbistat_count.vbi_vb_read_mem);
-	seq_printf(m, "vbi_vb_write_mem %d\n",
-		vbistat_count.vbi_vb_write_mem);
 	seq_printf(m, "vbi_shell_start_debug %d\n",
 		vbistat_count.vbi_shell_start_debug);
-	seq_printf(m, "vbi_vb_read_reg %d\n",
-		vbistat_count.vbi_vb_read_reg);
-	seq_printf(m, "vbi_vb_write_reg %d\n",
-		vbistat_count.vbi_vb_write_reg);
 	seq_printf(m, "vbi_ns_register %d\n",
 		vbistat_count.vbi_ns_register);
 	seq_printf(m, "vbi_ns_unregister %d\n",
 		vbistat_count.vbi_ns_unregister);
-	seq_printf(m, "vbi_ns_lookup %d\n",
-		vbistat_count.vbi_ns_lookup);
 	seq_printf(m, "vbi_vb_suspend %d\n",
 		vbistat_count.vbi_vb_suspend);
 	seq_printf(m, "vbi_ctx_ctl %d\n",
@@ -236,6 +230,34 @@ static int vbistat_proc_show(struct seq_file *m, void *v)
 	seq_printf(m, "vbi_vb_mgmt %d\n",
 		vbistat_count.vbi_vb_mgmt);
 
+	/* optional vbi */
+	seq_printf(m, "\n");
+	seq_printf(m, "Optional VBI Call Counts:\n");
+	seq_printf(m, "Core VBI only is ");
+	if (is_corevbi_only())
+		seq_printf(m, "enabled\n");
+	else
+		seq_printf(m, "not enabled\n");
+	seq_printf(m, "vbi_vb_remote %d\n",
+		vbistat_count.vbi_vb_remote);
+	seq_printf(m, "vbi_ns_lookup %d\n",
+		vbistat_count.vbi_ns_lookup);
+	seq_printf(m, "vbi_send %d\n",
+		vbistat_count.vbi_send);
+	seq_printf(m, "vbi_vb_write_reg %d\n",
+		vbistat_count.vbi_vb_write_reg);
+	seq_printf(m, "vbi_vb_read_reg %d\n",
+		vbistat_count.vbi_vb_read_reg);
+	seq_printf(m, "vbi_vb_write_mem %d\n",
+		vbistat_count.vbi_vb_write_mem);
+	seq_printf(m, "vbi_vb_read_mem %d\n",
+		vbistat_count.vbi_vb_read_mem);
+	seq_printf(m, "vbi_get_exc_offset %d\n",
+		vbistat_count.vbi_get_exc_offset);
+	seq_printf(m, "vbi_set_exc_offset %d\n",
+		vbistat_count.vbi_set_exc_offset);
+	seq_printf(m, "vbi_vtlb_op %d\n",
+		vbistat_count.vbi_vtlb_op);
 	seq_printf(m, "\n");
 
 	return 0;
-- 
1.7.0.2

