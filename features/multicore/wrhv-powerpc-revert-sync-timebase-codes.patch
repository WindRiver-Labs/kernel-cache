From a998606b9c46ebed5640365bf04a650257fd013a Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Thu, 29 Dec 2011 17:14:44 +0800
Subject: [PATCH] wrhv/powerpc: revert sync timebase codes

Native PPC u-boot always sync TimeBase as same base between cores.
But guest OS can't write TB register so guest OS have to use tb_diff
defined per cpu as a TB offset as you see in get_tb()/set_tb() above,
then guest OS can call .take_timebase/.give_timebase to sync TB like
kexec boot.

But in VDSO page scope we don't know which CPU we're run on, so we
don't know which tb_diff should be used to offset. Then if switch
between cores time gap will be incorrect, unless we are live only for
UP, not SMP.

So the hypervisor have to sync TimeBase before raise guest OS. After
that guest OS do nothing at all.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/include/asm/time.h           |   15 +--------------
 arch/powerpc/kernel/time.c                |    7 -------
 arch/powerpc/kernel/vbi/wrhv.c            |   19 -------------------
 arch/powerpc/kernel/vdso32/gettimeofday.S |   21 ---------------------
 4 files changed, 1 insertions(+), 61 deletions(-)

diff --git a/arch/powerpc/include/asm/time.h b/arch/powerpc/include/asm/time.h
index 2052e49..8faa943 100644
--- a/arch/powerpc/include/asm/time.h
+++ b/arch/powerpc/include/asm/time.h
@@ -119,7 +119,7 @@ static inline u64 get_tb(void)
 	return mftb();
 }
 #else /* CONFIG_PPC64 */
-static inline u64 get_hardware_tb(void)
+static inline u64 get_tb(void)
 {
 	unsigned int tbhi, tblo, tbhi2;
 
@@ -131,16 +131,6 @@ static inline u64 get_hardware_tb(void)
 
 	return ((u64)tbhi << 32) | tblo;
 }
-
-static inline u64 get_tb(void)
-{
-#ifndef CONFIG_WRHV
-	return get_hardware_tb();
-#else
-	return (u64)((long long)get_hardware_tb() + wrhv_gettb_diff());
-#endif
-}
-
 #endif /* !CONFIG_PPC64 */
 
 static inline u64 get_tb_or_rtc(void)
@@ -154,9 +144,6 @@ static inline void set_tb(unsigned int upper, unsigned int lower)
 	mtspr(SPRN_TBWL, 0);
 	mtspr(SPRN_TBWU, upper);
 	mtspr(SPRN_TBWL, lower);
-#else
-	unsigned long long tb = ((u64)upper<<32) | lower;
-	wrhv_settb_diff((long long)tb - (long long)get_hardware_tb());
 #endif
 }
 
diff --git a/arch/powerpc/kernel/time.c b/arch/powerpc/kernel/time.c
index 4c266fc..4800525 100644
--- a/arch/powerpc/kernel/time.c
+++ b/arch/powerpc/kernel/time.c
@@ -438,14 +438,7 @@ static inline void update_gtod(u64 new_tb_stamp, u64 new_stamp_xsec,
 	 * We expect the caller to have done the first increment of
 	 * vdso_data->tb_update_count already.
 	 */
-#ifndef CONFIG_WRHV
 	vdso_data->tb_orig_stamp = new_tb_stamp;
-#else
-	/* We substract tb orig stamp with our paravirtualized get_tb() in
-	 * advance to make vdso easy for guest OS.
-	 */
-	vdso_data->tb_orig_stamp = get_tb() - new_tb_stamp;
-#endif
 	vdso_data->stamp_xsec = new_stamp_xsec;
 	vdso_data->tb_to_xs = new_tb_to_xs;
 	vdso_data->wtom_clock_sec = wall_to_monotonic.tv_sec;
diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index 7409a13..14072fb 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -2250,18 +2250,6 @@ VBI_HREG_SET_CMPLX_QUALIFIED bootREG;
 int irq_base = 0xFFFF; /*init as invalid IRQ number*/
 #define WRHV_IPI_NUM      4
 
-DEFINE_PER_CPU(long long, tb_diff);
-
-long long wrhv_gettb_diff()
-{
-	return __raw_get_cpu_var(tb_diff);
-}
-
-void wrhv_settb_diff(long long diff)
-{
-	 __get_cpu_var(tb_diff) = diff;
-}
-
 static irqreturn_t wrhv_ipi_action(int irq, void *data)
 {
 	long ipi = (long)data;
@@ -2488,8 +2476,6 @@ struct smp_ops_t smp_wrhv_ops = {
 	.probe = smp_wrhv_probe,
 	.message_pass = smp_wrhv_message_pass,
 	.setup_cpu = smp_wrhv_setup_cpu,
-	.take_timebase = smp_generic_take_timebase,
-	.give_timebase = smp_generic_give_timebase,
 };
 
 void __init wrhv_smp_init(void)
@@ -2595,11 +2581,6 @@ int __devinit wrhv_start_secondary(void *unused)
 	cpu_idle();
 	return 0;
 }
-#else
-long long wrhv_gettb_diff()
-{
-	return 0;
-}
 #endif
 
 #ifdef CONFIG_PCI
diff --git a/arch/powerpc/kernel/vdso32/gettimeofday.S b/arch/powerpc/kernel/vdso32/gettimeofday.S
index b6d65c0..ee038d4 100644
--- a/arch/powerpc/kernel/vdso32/gettimeofday.S
+++ b/arch/powerpc/kernel/vdso32/gettimeofday.S
@@ -219,7 +219,6 @@ __do_get_xsec:
 	lwz	r5,CFG_TB_ORIG_STAMP(r9)
 	lwz	r6,(CFG_TB_ORIG_STAMP+4)(r9)
 
-#ifndef CONFIG_WRHV
 	/* Get a stable TB value */
 2:	mftbu	r3
 	mftbl	r4
@@ -233,16 +232,6 @@ __do_get_xsec:
 	 */
 	subfc	r7,r6,r4
 	subfe.	r0,r5,r3
-#else
-	/* Here we should use our paravirtualized get_tb() to get
-	 * proper tb, but its difficult to call C program in this
-	 * pure assemble codes section, so we substract tb orig stamp
-	 * in update_gtod() directly.
-	 */
-	mr	r7,r6
-	mr	r0,r5
-	cmpwi	0,r0,0
-#endif
 	bne-	3f
 
 	/* Load scale factor & do multiplication */
@@ -304,7 +293,6 @@ __do_get_tspec:
 	lwz	r5,CFG_TB_ORIG_STAMP(r9)
 	lwz	r6,(CFG_TB_ORIG_STAMP+4)(r9)
 
-#ifndef CONFIG_WRHV
 	/* Get a stable TB value */
 2:	mftbu	r3
 	mftbl	r4
@@ -316,15 +304,6 @@ __do_get_tspec:
 	 */
 	subfc	r7,r6,r4
 	subfe	r0,r5,r3
-#else
-	/* Here we should use our paravirtualized get_tb() to get
-	 * proper tb, but its difficult to call C program in this
-	 * pure assemble codes section, so we substract tb orig stamp
-	 * in update_gtod() directly.
-	 */
-	mr	r7,r6
-	mr	r0,r5
-#endif
 	slwi	r0,r0,12
 	rlwimi.	r0,r7,12,20,31
 	slwi	r7,r7,12
-- 
1.7.0.4

