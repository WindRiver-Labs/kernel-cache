From ace44c25bb06d85a798e6a641471194236f3a25a Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Fri, 21 Jan 2011 19:43:04 +0800
Subject: [PATCH 3/4] wrhv/virtio: move the ppc duart functions to a common place

Currently these codes are ppc specific and only used by duart
driver. We also need these in virtual serial device driver.
Since the virtual serial device also need to support other
architecture, such as x86. Move them to a common place.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/powerpc/kernel/vbi/wrhv.c |  121 +--------------------------------
 drivers/wrhv/Makefile          |    1 +
 drivers/wrhv/wrhv_duart.c      |  145 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 148 insertions(+), 119 deletions(-)
 create mode 100644 drivers/wrhv/wrhv_duart.c

diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index 2f3f819..ffd408d 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -124,7 +124,6 @@
 
 #include <vbi/vbi.h>
 #include <vbi/interface.h>
-#include <vbi/pdc.h>
 
 VBI_EXC_OFFSETS_TABLE  exec_table;
 struct vb_config *wr_config;		/* TODO kernel relocation friendly ? */
@@ -132,6 +131,8 @@ struct vb_control *wr_control;
 struct vb_status *wr_status;
 EXPORT_SYMBOL(wr_config);
 
+extern int is_wrhv_duart_inited;
+
 void wrhv_mapping(void);
 void mpc85xx_power_down(void);
 
@@ -152,26 +153,6 @@ int wrhv_earlycon = -1;
 int gfar_fn = -1;
 char wrhv_macaddr[6];
 
-/* interface to wrhv duart actual device driver */
-#define WRHV_DUART_RX_SIZE	(16)
-#define WRHV_DUART_TX_SIZE	(1024)
-static char rxBuf[WRHV_DUART_RX_SIZE];
-static char txBuf[WRHV_DUART_TX_SIZE];
-static char wrhv_duart_name[256];
-vbi_pdc_handle duart_pdc;
-static int is_wrhv_duart_inited = 0;
-
-struct intrDeviceChannelBuffer idc = {
-	.rxBuf = (void *)rxBuf,
-	.rxBufLen = WRHV_DUART_RX_SIZE,
-	.rxBufWrPtr = (size_t)0,
-	.rxBufRdPtr = (size_t)0,
-	.txBuf = (void *)txBuf,
-	.txBufLen = WRHV_DUART_TX_SIZE,
-	.txBufWrPtr = (size_t)0,
-	.txBufRdPtr = (size_t)0
-};
-
 #define WRHV_EARLYCON_SIZE  14  /* sizeof("wrhv_earlycon=") */
 int __init wrhv_earlycon_setup(void)
 {
@@ -2303,101 +2284,3 @@ void pci_msi_disable(struct pci_dev *dev)
 }
 DECLARE_PCI_FIXUP_FINAL(PCI_ANY_ID, PCI_ANY_ID, pci_msi_disable);
 #endif
-
-void wrhv_duart_putc(char c)
-{
-	if (((idc.txBufWrPtr + 1) % WRHV_DUART_TX_SIZE) == idc.txBufRdPtr) {
-		/* tx ring buffer full */
-		return ;
-	}
-
-	if (c == '\n') {
-		wrhv_duart_putc('\r');
-	}
-
-	txBuf[idc.txBufWrPtr] = c;
-	idc.txBufWrPtr = (idc.txBufWrPtr + 1) % WRHV_DUART_TX_SIZE;
-
-	vbi_pdc_op(duart_pdc, PDC_REQUEST_WRITE,
-		0, (void *)idc.txBuf, (size_t)idc.txBufLen, 0);
-
-}
-
-void wrhv_duart_puts(char *str)
-{
-	while (*str != 0) {
-		wrhv_duart_putc(*str);
-		str++;
-	}
-}
-
-int wrhv_duart_tstc(void)
-{
-	if (idc.rxBufWrPtr == idc.rxBufRdPtr) {
-		/* rx ring buffer empty */
-		return 0;
-	}
-	return 1;
-}
-
-int wrhv_duart_getc(void)
-{
-	int value;
-
-	if (!wrhv_duart_tstc()) {
-		return 0;
-	}
-	value = rxBuf[idc.rxBufRdPtr++];
-	idc.rxBufRdPtr = idc.rxBufRdPtr % WRHV_DUART_RX_SIZE;
-	return value;
-}
-
-void wrhv_duart_init(void)
-{
-	const char *opt;
-	char *pstring;
-	unsigned char bootline[VB_MAX_BOOTLINE_LENGTH];
-
-	/* this functions can be called very early, even before
-	 * the platform code. The command line options needed
-	 * to be directly from VBI_BOOTLINE
-	 */
-	strncpy(bootline, wr_config->bootLine, VB_MAX_BOOTLINE_LENGTH - 1);
-	bootline[VB_MAX_BOOTLINE_LENGTH - 1] = 0;
-
-	/* get the duart name, the duart name is
-	 * specified in the hypervisor xml
-	 */
-	memset(wrhv_duart_name, 0, sizeof(wrhv_duart_name));
-	pstring = wrhv_duart_name;
-	opt = strstr(bootline, "duart=");
-	if (opt) {
-		opt += 6;
-		while (*opt && (*opt != ' ')) {
-			*pstring = *opt;
-			pstring++;
-			opt++;
-		}
-	}
-
-	/* only init the duart once */
-	if (is_wrhv_duart_inited) {
-		return;
-	}
-	is_wrhv_duart_inited = 1;
-
-
-	/* init channel */
-	if (vbi_pdc_init(wrhv_duart_name, &duart_pdc)) {
-		printk("vbi_pdc_init failed\n");
-		return;
-	}
-
-	/* init device */
-	if (vbi_pdc_op(duart_pdc, PDC_REQUEST_INIT,
-		0, (void *) &idc, 0, 0)) {
-		printk("vbi_pdc_op: PDC_REQUEST_INIT failed\n");
-		return;
-	}
-}
-
diff --git a/drivers/wrhv/Makefile b/drivers/wrhv/Makefile
index 890ac25..8d44654 100644
--- a/drivers/wrhv/Makefile
+++ b/drivers/wrhv/Makefile
@@ -1 +1,2 @@
 obj-$(CONFIG_WRHV_VIRTIO)	+= wrhv_devices.o
+obj-$(CONFIG_WRHV_DUART)	+= wrhv_duart.o
diff --git a/drivers/wrhv/wrhv_duart.c b/drivers/wrhv/wrhv_duart.c
new file mode 100644
index 0000000..a74dfdb
--- /dev/null
+++ b/drivers/wrhv/wrhv_duart.c
@@ -0,0 +1,145 @@
+/*
+ *  Copyright (C) 2011 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/irq.h>
+#include <linux/wrhv.h>
+#include <vbi/vbi.h>
+#include <vbi/errors.h>
+#include <vbi/pdc.h>
+
+extern struct vb_config *wr_config;
+
+/* interface to wrhv duart actual device driver */
+#define WRHV_DUART_RX_SIZE	(16)
+#define WRHV_DUART_TX_SIZE	(1024)
+static char rxBuf[WRHV_DUART_RX_SIZE];
+static char txBuf[WRHV_DUART_TX_SIZE];
+static char wrhv_duart_name[256];
+vbi_pdc_handle duart_pdc;
+int is_wrhv_duart_inited;
+
+struct intrDeviceChannelBuffer idc = {
+	.rxBuf = (void *)rxBuf,
+	.rxBufLen = WRHV_DUART_RX_SIZE,
+	.rxBufWrPtr = (size_t)0,
+	.rxBufRdPtr = (size_t)0,
+	.txBuf = (void *)txBuf,
+	.txBufLen = WRHV_DUART_TX_SIZE,
+	.txBufWrPtr = (size_t)0,
+	.txBufRdPtr = (size_t)0
+};
+
+void wrhv_duart_putc(char c)
+{
+	if (((idc.txBufWrPtr + 1) % WRHV_DUART_TX_SIZE) == idc.txBufRdPtr) {
+		/* tx ring buffer full */
+		return ;
+	}
+
+	if (c == '\n') {
+		wrhv_duart_putc('\r');
+	}
+
+	txBuf[idc.txBufWrPtr] = c;
+	idc.txBufWrPtr = (idc.txBufWrPtr + 1) % WRHV_DUART_TX_SIZE;
+
+	vbi_pdc_op(duart_pdc, PDC_REQUEST_WRITE,
+		0, (void *)idc.txBuf, (size_t)idc.txBufLen, 0);
+
+}
+
+void wrhv_duart_puts(char *str)
+{
+	while (*str != 0) {
+		wrhv_duart_putc(*str);
+		str++;
+	}
+}
+
+int wrhv_duart_tstc(void)
+{
+	if (idc.rxBufWrPtr == idc.rxBufRdPtr) {
+		/* rx ring buffer empty */
+		return 0;
+	}
+	return 1;
+}
+
+int wrhv_duart_getc(void)
+{
+	int value;
+
+	if (!wrhv_duart_tstc()) {
+		return 0;
+	}
+	value = rxBuf[idc.rxBufRdPtr++];
+	idc.rxBufRdPtr = idc.rxBufRdPtr % WRHV_DUART_RX_SIZE;
+	return value;
+}
+
+void wrhv_duart_init(void)
+{
+	const char *opt;
+	char *pstring;
+	unsigned char bootline[VB_MAX_BOOTLINE_LENGTH];
+
+	/* this functions can be called very early, even before
+	 * the platform code. The command line options needed
+	 * to be directly from VBI_BOOTLINE
+	 */
+	strncpy(bootline, wr_config->bootLine, VB_MAX_BOOTLINE_LENGTH - 1);
+	bootline[VB_MAX_BOOTLINE_LENGTH - 1] = 0;
+
+	/* get the duart name, the duart name is
+	 * specified in the hypervisor xml
+	 */
+	memset(wrhv_duart_name, 0, sizeof(wrhv_duart_name));
+	pstring = wrhv_duart_name;
+	opt = strstr(bootline, "duart=");
+	if (opt) {
+		opt += 6;
+		while (*opt && (*opt != ' ')) {
+			*pstring = *opt;
+			pstring++;
+			opt++;
+		}
+
+	}
+
+	/* only init the duart once */
+	if (is_wrhv_duart_inited) {
+		return;
+	}
+	is_wrhv_duart_inited = 1;
+
+
+	/* init channel */
+	if (vbi_pdc_init(wrhv_duart_name, &duart_pdc)) {
+		printk("vbi_pdc_init failed\n");
+		return;
+	}
+
+	/* init device */
+	if (vbi_pdc_op(duart_pdc, PDC_REQUEST_INIT,
+		0, (void *) &idc, 0, 0)) {
+		printk("vbi_pdc_op: PDC_REQUEST_INIT failed\n");
+		return;
+	}
+}
-- 
1.6.5.2

