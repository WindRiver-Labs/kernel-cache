From a48f366efc5b59fb51d1b6369d739e01244bd1d3 Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Tue, 1 Nov 2011 10:36:44 +0800
Subject: [PATCH] Rename Cert Profile to Safety Profile at guest side

Cert Profile is being renamed to Safety Profile in Hyp 2.0,
guest linux need to do the adjustments accordingly.

Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 arch/x86/kernel/vbi/syscalls.S |    8 ++++----
 include/vbi/compat.h           |    4 ++--
 include/vbi/interface.h        |    2 +-
 include/vbi/pdc.h              |    4 ++--
 include/vbi/private.h          |    2 +-
 include/vbi/stats.h            |   12 ++++++------
 include/vbi/syscall.h          |   36 ++++++++++++++++++++----------------
 include/vbi/syscalls.h         |    2 +-
 kernel/vbi/Makefile            |    2 +-
 kernel/vbi/io_apic.c           |   10 +++++-----
 kernel/vbi/lib.c               |    2 +-
 kernel/vbi/ns.c                |    8 ++++----
 kernel/vbi/procfs.c            |   18 +++++++++---------
 kernel/vbi/sched.c             |    2 +-
 kernel/vbi/show.c              |   32 +++++++++++++++++++++-----------
 15 files changed, 79 insertions(+), 65 deletions(-)

diff --git a/arch/x86/kernel/vbi/syscalls.S b/arch/x86/kernel/vbi/syscalls.S
index 2221592..6f6d82f 100644
--- a/arch/x86/kernel/vbi/syscalls.S
+++ b/arch/x86/kernel/vbi/syscalls.S
@@ -121,7 +121,7 @@ vbi_hcall(vbi_reply, reply, 4)
  *
  */
 vbi_hcall(vbi_kputs, kputs, 1)
-vbi_hcall(cert_debug_vbi_kputs, kputs, 1)
+vbi_hcall(safety_debug_vbi_kputs, kputs, 1)
 
 
 /*
@@ -133,7 +133,7 @@ vbi_hcall(cert_debug_vbi_kputs, kputs, 1)
  *
  */
 vbi_hcall(vbi_kputc, kputc, 1)
-vbi_hcall(cert_debug_vbi_kputc, kputc, 1)
+vbi_hcall(safety_debug_vbi_kputc, kputc, 1)
 
 
 /*
@@ -515,7 +515,7 @@ vbi_hcall(vbi_vb_read_mem, memRead_op, 2)
  *
  */
 vbi_hcall(vbi_shell_start_debug, dbgShStart, 1)
-vbi_hcall(cert_debug_vbi_shell_start_debug, dbgShStart, 1)
+vbi_hcall(safety_debug_vbi_shell_start_debug, dbgShStart, 1)
 
 
 /*
@@ -638,7 +638,7 @@ vbi_hcall(vbi_vb_move, vbMove, 3)
 vbi_hcall(vbi_vb_set_priority, vbPrioSet, 3)
 
 
-#ifdef CONFIG_WRHV_CERT
+#ifdef CONFIG_WRHV_SAFETY_PROFILE
 /*
  * vbi_sched_control_op - do schedule control
  *
diff --git a/include/vbi/compat.h b/include/vbi/compat.h
index 0a9af28..960eff5 100644
--- a/include/vbi/compat.h
+++ b/include/vbi/compat.h
@@ -141,7 +141,7 @@
 #define vbiVbReset		vbi_vb_reset
 #define vbiVbRemote		vbi_vb_remote
 
-#ifdef CONFIG_WRHV_CERT
+#ifdef CONFIG_WRHV_SAFETY_PROFILE
 #define vbiSchedControlOp	vbi_sched_control_op
 #define vbiPortOp		vbi_port_op
 #endif
@@ -258,7 +258,7 @@
 #define intrDeviceChannelBuffer	intr_device_channel_buffer
 #define vbiPdcInit		vbi_pdc_init               
 
-#ifdef CONFIG_WRHV_CERT
+#ifdef CONFIG_WRHV_SAFETY_PROFILE
 #define PDC_BUF_SET		pdc_buf_set
 #endif
 
diff --git a/include/vbi/interface.h b/include/vbi/interface.h
index 48d7ae6..5ea17ef 100644
--- a/include/vbi/interface.h
+++ b/include/vbi/interface.h
@@ -255,7 +255,7 @@ identity mapped.
 #define VBI_REG_SET_32BIT	0
 #define VBI_REG_SET_64BIT	1
 
-#ifdef CONFIG_WRHV_CERT
+#ifdef CONFIG_WRHV_SAFETY_PROFILE
 /*
  * define schedule control commands that is the
  * first parameter in syscall vbiSchedControlOp() which
diff --git a/include/vbi/pdc.h b/include/vbi/pdc.h
index 3b2f159..96ec96b 100644
--- a/include/vbi/pdc.h
+++ b/include/vbi/pdc.h
@@ -80,7 +80,7 @@ struct intr_device_channel_buffer
 	uint32_t intStatus;                 /* intStatus, or what intr */
 };
 
-#ifdef CONFIG_WRHV_CERT
+#ifdef CONFIG_WRHV_SAFETY_PROFILE
 struct pdc_buf_set
 {
 	uint64_t gpaBufBase;
@@ -96,7 +96,7 @@ struct pdc_buf_set
 #define PDC_IOCTL_SIO_HW_OPTS_SET	3
 #define PDC_IOCTL_SIO_HUP		4
 #define PDC_IOCTL_SIO_OPEN		5
-#ifdef CONFIG_WRHV_CERT
+#ifdef CONFIG_WRHV_SAFETY_PROFILE
 #define PDC_IOCTL_BUF_GPA_GET		10
 #define PDC_IOCTL_BUF_GPA_SET		11
 #define PDC_IOCTL_BUF_SIZE_GET		12
diff --git a/include/vbi/private.h b/include/vbi/private.h
index 3bda932..c895795 100644
--- a/include/vbi/private.h
+++ b/include/vbi/private.h
@@ -37,7 +37,7 @@ extern asmlinkage int32_t vbi_ns_op(uint32_t op, char* name, uint32_t rev,
 			VBI_NS_HANDLE *handle, uint32_t timeout,
 			uint32_t options);
 
-#ifdef CONFIG_WRHV_CERT
+#ifdef CONFIG_WRHV_SAFETY_PROFILE
 /* Transition to a new schedule */
 extern asmlinkage int32_t vbi_sched_control_op(uint32_t transition,
 			char *sched_name, void *transition_type, void *core_id,
diff --git a/include/vbi/stats.h b/include/vbi/stats.h
index fbd9a78..3ac0a1b 100644
--- a/include/vbi/stats.h
+++ b/include/vbi/stats.h
@@ -90,11 +90,11 @@ struct vbi_api_stats {
 /* declared in linux/kernel/vbi/wrhv.c */
 extern int vbistat_verbose;
 extern struct vbi_api_stats vbistat[];
-extern int cert_hyp_version;
+extern int safety_hyp_version;
 
-#define CERT_HYP_VER_NONE	(0)
-#define CERT_HYP_VER_STD	(1)
-#define CERT_HYP_VER_DEBUG	(2)
+#define SAFETY_HYP_VER_NONE	(0)
+#define SAFETY_HYP_VER_STD	(1)
+#define SAFETY_HYP_VER_DEBUG	(2)
 
 #define VBISTAT_VERBOSE(vbi) \
 do {									\
@@ -112,8 +112,8 @@ do {									\
 	p->count++;							\
 } while (0)
 
-static inline int is_cert_hyp(void){
-	return cert_hyp_version != CERT_HYP_VER_NONE;
+static inline int is_safety_hyp(void){
+	return safety_hyp_version != SAFETY_HYP_VER_NONE;
 }
 
 #ifdef CONFIG_WRHV_COREVBI_ONLY
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index d7c6ed8..0b584c4 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -143,8 +143,8 @@ extern int32_t vbi_set_exc_base(void *excTblBase);
 /* virtual board management API's */
 extern asmlinkage int32_t vbi_vb_reset(uint32_t id, int32_t core, uint32_t options);
 
-/* commerical hypervisor and certifiable hypervisor stub functions */
-#if !defined(CONFIG_WRHV_CERT)
+/* standard hypervisor and safety hypervisor stub functions */
+#if !defined(CONFIG_WRHV_SAFETY_PROFILE)
 extern asmlinkage int vbi_ctx_ctl(unsigned operation, unsigned arg1,
 				unsigned arg2);
 extern asmlinkage int32_t vbi_kputs(const char *s);
@@ -156,10 +156,10 @@ extern asmlinkage int32_t vbi_vb_suspend(uint32_t id, int32_t core);
 extern asmlinkage int32_t vbi_vb_restart(uint32_t id, int32_t core);
 extern asmlinkage int32_t vbi_vb_resume(uint32_t id, int32_t core);
 #else
-/* following functions avaiable to debug version of certifiable hypervisor */
-extern asmlinkage int32_t cert_debug_vbi_kputs(const char *s);
-extern asmlinkage int32_t cert_debug_vbi_kputc(int c);
-extern asmlinkage void cert_debug_vbi_shell_start_debug(uint32_t  flags);
+/* following functions available to debug version of safety profile hypervisor */
+extern asmlinkage int32_t safety_debug_vbi_kputs(const char *s);
+extern asmlinkage int32_t safety_debug_vbi_kputc(int c);
+extern asmlinkage void safety_debug_vbi_shell_start_debug(uint32_t  flags);
 
 /* schedule transition api */
 extern int32_t vbi_sched_transition(char *name, uint32_t transition_type,
@@ -177,22 +177,26 @@ static inline int vbi_ctx_ctl(unsigned operation, unsigned arg1,
 }
 static inline int32_t vbi_kputs(const char *s)
 {
-	 /* standard certifiable hypervisor does not support this function */
-	if (cert_hyp_version == CERT_HYP_VER_STD) {
+	/* non-debug safety profile hypervisor does not support
+	 * this function.
+	 */
+	if (safety_hyp_version == SAFETY_HYP_VER_STD) {
 		VBISTAT_VERBOSE(vbi_kputs);
 		return -1;
 	}
-	return cert_debug_vbi_kputs(s);
+	return safety_debug_vbi_kputs(s);
 }
 
 static inline int32_t vbi_kputc(int c)
 {
-	/* standard certifiable hypervisor does not support this function */
-	if (cert_hyp_version == CERT_HYP_VER_STD) {
+	/* non-debug safety profile hypervisor does not support
+	 * this function.
+	 */
+	if (safety_hyp_version == SAFETY_HYP_VER_STD) {
 		VBISTAT_VERBOSE(vbi_kputc);
 		return -1;
 	}
-	return cert_debug_vbi_kputc(c);
+	return safety_debug_vbi_kputc(c);
 }
 /* Prior to vbi 2.0 these api were vbi_set_mmu_attr/Get */
 static inline int32_t vbi_set_mem_attr(void *vaddr, size_t len, int32_t attr)
@@ -279,10 +283,10 @@ static inline int32_t vbi_vb_write_mem(struct vbi_mem_ctl *memCtl,
 }
 static inline void vbi_shell_start_debug(uint32_t  flags)
 {
-	/* standard certifiable hypervisor does not support this function */
-	if (cert_hyp_version == CERT_HYP_VER_DEBUG) {
-#ifdef CONFIG_WRHV_CERT
-		cert_debug_vbi_shell_start_debug(flags);
+	/* safety profile hypervisor does not support this function */
+	if (safety_hyp_version == SAFETY_HYP_VER_DEBUG) {
+#ifdef CONFIG_WRHV_SAFETY_PROFILE
+		safety_debug_vbi_shell_start_debug(flags);
 #endif
 		return;
 	}
diff --git a/include/vbi/syscalls.h b/include/vbi/syscalls.h
index 071e869..096393d 100644
--- a/include/vbi/syscalls.h
+++ b/include/vbi/syscalls.h
@@ -111,7 +111,7 @@
 #define VBI_SYS_vbSuspend       HY_SYSCALL(24)	/* suspend vcores	*/
 #define VBI_SYS_vbResume        HY_SYSCALL(25)	/* Resume vcores	*/
 #define VBI_SYS_vbRemote        HY_SYSCALL(26)	/* Get info of board	*/
-#ifdef CONFIG_WRHV_CERT
+#ifdef CONFIG_WRHV_SAFETY_PROFILE
 #define VBI_SYS_schedControl	HY_SYSCALL(27)  /* scheduler control    */
 #define VBI_SYS_port		HY_SYSCALL(28)  /* port send and receive */
 #endif
diff --git a/kernel/vbi/Makefile b/kernel/vbi/Makefile
index 5b19c6a..c1e36dc 100644
--- a/kernel/vbi/Makefile
+++ b/kernel/vbi/Makefile
@@ -9,6 +9,6 @@
 obj-$(CONFIG_WRHV) += shmem.o wrhv.o interrupt.o paddr.o idle.o io_apic.o lib.o \
                       version.o msg.o ns.o show.o pdc.o device.o procfs.o
 
-obj-$(CONFIG_WRHV_CERT) += sched.o
+obj-$(CONFIG_WRHV_SAFETY_PROFILE) += sched.o
 
 obj-y += syscall_vbi.o
diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index cb03f0c..89c3985 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -272,8 +272,8 @@ EXPORT_SYMBOL(vbi_send_vioapic_irq);
 int32_t vbi_send_vcore_vioapic_irq(int32_t irq, uint32_t coreSet,
 			uint32_t options)
 {
-	/* Certifiable hypervisor does not support this function */
-	if (is_cert_hyp()) {
+	/* Safety Profile hypervisor does not support this function */
+	if (is_safety_hyp()) {
 		VBISTAT_VERBOSE(vbi_send_vcore_vioapic_irq);
 		return -1;
 	}
@@ -290,8 +290,8 @@ int32_t vbi_send_vcore_vioapic_irq(int32_t irq, uint32_t coreSet,
  */
 int32_t vbi_redir_vioapic_irq(int32_t irq, int32_t core)
 {
-	/* Certifiable hypervisor does not support this function */
-	if (is_cert_hyp()) {
+	/* Safety Profile hypervisor does not support this function */
+	if (is_safety_hyp()) {
 		VBISTAT_VERBOSE(vbi_redir_vioapic_irq);
 		return -1;
 	}
@@ -346,7 +346,7 @@ void vbi_disp_vioapic(void)
 		"ExtINT"	/* 7 */
 	};
 
-	/* Certifiable hypervisor does not support this function */
+	/* Safety Profile hypervisor does not support this function */
 	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_disp_vioapic);
 		return;
diff --git a/kernel/vbi/lib.c b/kernel/vbi/lib.c
index 8be50d1..2d2368e 100644
--- a/kernel/vbi/lib.c
+++ b/kernel/vbi/lib.c
@@ -210,7 +210,7 @@ void vbi_init(struct vb_config *config)
 int32_t vbi_vb_find_board_config(uint32_t board_id, int32_t core_id,
 					void *paddr)
 {
-	/* Certifiable hypervisor does not support this function */
+	/* Safety Profile hypervisor does not support this function */
 	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_vb_find_board_config);
 		return -1;
diff --git a/kernel/vbi/ns.c b/kernel/vbi/ns.c
index 952c549..45ab21e 100644
--- a/kernel/vbi/ns.c
+++ b/kernel/vbi/ns.c
@@ -46,7 +46,7 @@ for processing.
  */
 int32_t vbi_ns_register(char *name, uint32_t revision)
 {
-	/* Certifiable hypervisor does not support this function */
+	/* Safety Profile hypervisor does not support this function */
 	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_ns_register);
 		return -1;
@@ -69,7 +69,7 @@ int32_t vbi_ns_register(char *name, uint32_t revision)
  */
 int32_t vbi_ns_unregister(char *name, uint32_t revision)
 {
-	/* Certifiable hypervisor does not support this function */
+	/* Safety Profile hypervisor does not support this function */
 	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_ns_unregister);
 		return -1;
@@ -101,7 +101,7 @@ int32_t vbi_ns_unregister(char *name, uint32_t revision)
  */
 int32_t vbi_ns_lookup_old(char *name, uint32_t revision, VBI_NS_HANDLE *handle)
 {
-	/* Optional VBI, Certifiable hypervisor does not
+	/* Optional VBI, Safety Profile hypervisor does not
 		support this function */
 	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_ns_lookup);
@@ -139,7 +139,7 @@ int32_t vbi_ns_lookup_old(char *name, uint32_t revision, VBI_NS_HANDLE *handle)
 int32_t vbi_ns_lookup(char *name, uint32_t revision, VBI_NS_HANDLE *handle,
 			uint32_t timeout, uint32_t options)
 {
-	/* Optional VBI, Certifiable hypervisor does not
+	/* Optional VBI, Safety Profile hypervisor does not
 		support this function */
 	if (is_corevbi_only()) {
 		VBISTAT_VERBOSE(vbi_ns_lookup);
diff --git a/kernel/vbi/procfs.c b/kernel/vbi/procfs.c
index 1acca38..450d45a 100644
--- a/kernel/vbi/procfs.c
+++ b/kernel/vbi/procfs.c
@@ -107,13 +107,13 @@ static const struct file_operations procfs_hypinfo_operations = {
 };
 
 /*
- * Certifiable Hypervisor VBI statistic counts
+ * Safety Profile Hypervisor VBI statistic counts
  */
 static char vbistat_name[] = "vbistat";
 int vbistat_verbose;
 
-/* variable to identify difference certifiable hypervisor version */
-int cert_hyp_version = CERT_HYP_VER_NONE;
+/* variable to identify difference safety profile hypervisor version */
+int safety_hyp_version = SAFETY_HYP_VER_NONE;
 
 struct vbi_api_stats vbistat[] = {
 	/* functions implemented in vbi.h */
@@ -189,14 +189,14 @@ static int vbistat_proc_show(struct seq_file *m, void *v)
 {
 	int i;
 
-	switch (cert_hyp_version) {
+	switch (safety_hyp_version) {
 
-	case CERT_HYP_VER_STD:
-		seq_printf(m, "Certifiable ");
+	case SAFETY_HYP_VER_STD:
+		seq_printf(m, "Safety Profile ");
 		break;
 
-	case CERT_HYP_VER_DEBUG:
-		seq_printf(m, "Certifiable Debug Version ");
+	case SAFETY_HYP_VER_DEBUG:
+		seq_printf(m, "Safety Profile Debug Version ");
 		break;
 	}
 	seq_printf(m, "Hypervisor API Call Counts:\n");
@@ -296,7 +296,7 @@ void wrhv_init_procfs(void)
 		       hypinfo_name);
 	}
 
-	/* Certifiable VBI statistic counts */
+	/* Safety Profile VBI statistic counts */
 	vbistat_procfs = proc_create(vbistat_name, 0,
 				wrhv_procfs_root,
 				&procfs_vbistat_operations);
diff --git a/kernel/vbi/sched.c b/kernel/vbi/sched.c
index 60cedc6..f6c36ab 100644
--- a/kernel/vbi/sched.c
+++ b/kernel/vbi/sched.c
@@ -43,7 +43,7 @@ int32_t vbi_sched_transition(char *name, uint32_t transition_type, uint32_t core
 	struct vb_control *p = VBI_CNTRL_ADDR_GET();
 	char sched_name[VB_NAMELEN];
 	
-	/* only certifiable hypervisor's control structure has the name field */
+	/* only safety profile hypervisor's control structure has the name field */
 	if ((name == NULL) || (p == NULL))
 		return -1;
 
diff --git a/kernel/vbi/show.c b/kernel/vbi/show.c
index dfa75bd..18ecc80 100644
--- a/kernel/vbi/show.c
+++ b/kernel/vbi/show.c
@@ -51,8 +51,10 @@ void vbi_show_shmem(void)
 	void *pState = config->sharedMemoryRegionsStateAddress;
 	int i;
 
-	/* standard certifiable hypervisor does not support this function */
-	if (cert_hyp_version == CERT_HYP_VER_STD) {
+	/* non-debug safety profile hypervisor does not support
+	 * this function.
+	 */
+	if (safety_hyp_version == SAFETY_HYP_VER_STD) {
 		VBISTAT_VERBOSE(vbi_show_shmem);
 		return;
 	}
@@ -84,8 +86,10 @@ void vbi_show_mem(void)
 	int num_sm = config->num_mem;
 	int i;
 
-	/* standard certifiable hypervisor does not support this function */
-	if (cert_hyp_version == CERT_HYP_VER_STD) {
+	/* non-debug safety profile hypervisor does not support
+	 * this function.
+	 */
+	if (safety_hyp_version == SAFETY_HYP_VER_STD) {
 		VBISTAT_VERBOSE(vbi_show_mem);
 		return;
 	}
@@ -215,8 +219,10 @@ void vbi_show_stat(void)
 {
 	struct vb_status *p = VBI_STATUS_ADDR_GET();
 
-	/* standard certifiable hypervisor does not support this function */
-	if (cert_hyp_version == CERT_HYP_VER_STD) {
+	/* non-debug safety profile hypervisor does not support
+	 * this function.
+	 */
+	if (safety_hyp_version == SAFETY_HYP_VER_STD) {
 		VBISTAT_VERBOSE(vbi_show_stat);
 		return;
 	}
@@ -239,8 +245,10 @@ void vbi_show_ctrl(void)
 	struct vb_control *p = VBI_CNTRL_ADDR_GET();
 	int i;
 
-	/* standard certifiable hypervisor does not support this function */
-	if (cert_hyp_version == CERT_HYP_VER_STD) {
+	/* non-debug safety profile hypervisor does not support
+	 * this function.
+	 */
+	if (safety_hyp_version == SAFETY_HYP_VER_STD) {
 		VBISTAT_VERBOSE(vbi_show_ctrl);
 		return;
 	}
@@ -264,7 +272,7 @@ void vbi_show_ctrl(void)
 #if defined(CONFIG_WRHV_COREVBI_ONLY)
 void vbi_show_config_page_map()
 {
-	/* certifiable hypervisor does not have page map field in the
+	/* safety profile hypervisor does not have page map field in the
 	 * vb_config structure
 	 */
 	VBISTAT_VERBOSE(vbi_show_config_page_map);
@@ -297,8 +305,10 @@ void vbi_show_cfg(void)
 {
 	struct vb_config *p = VBI_CONFIG_ADDR_GET();
 
-	/* standard certifiable hypervisor does not support this function */
-	if (cert_hyp_version == CERT_HYP_VER_STD) {
+	/* non-debug safety profile hypervisor does not support
+	 * this function.
+	 */
+	if (safety_hyp_version == SAFETY_HYP_VER_STD) {
 		VBISTAT_VERBOSE(vbi_show_cfg);
 		return;
 	}
-- 
1.7.0.4

