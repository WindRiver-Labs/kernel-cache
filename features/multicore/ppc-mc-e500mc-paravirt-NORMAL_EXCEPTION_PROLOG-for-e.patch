From 6542f986536f33295ab58ced8b22f92e4dfdc19c Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Fri, 21 Jan 2011 16:31:06 +0800
Subject: [PATCH] ppc-mc/e500mc: paravirt NORMAL_EXCEPTION_PROLOG for e500mc

Within NORMAL_EXCEPTION_PROLOG r10 used for the guest OS is corrupted
by the commit from the native Linux. So we have to restore that to
avoid one panic issue. Here I don't restore that simply. As you know
the e500mc guest OS use previously the same NORMAL_EXCEPTION_PROLOG
as the native Linux. So I paravirt this directly to avoid:
1> issue to the native Linux if the guest OS changed
2> issue to the geust OS Linux if the native Linux changed

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/kernel/head_wrhv.h |   38 +++++++++++++++++++++++++++++++++++++-
 1 files changed, 37 insertions(+), 1 deletions(-)

diff --git a/arch/powerpc/kernel/head_wrhv.h b/arch/powerpc/kernel/head_wrhv.h
index dc71ee7..cffa6bb 100644
--- a/arch/powerpc/kernel/head_wrhv.h
+++ b/arch/powerpc/kernel/head_wrhv.h
@@ -37,8 +37,8 @@
 	 * r10 is trashed and r11 pointer on interrupt frame. All other
 	 * registers contain their value before the system call was executed.
 	 */
-#ifndef	CONFIG_PPC85xx_VT_MODE
 #undef NORMAL_EXCEPTION_PROLOG
+#ifndef	CONFIG_PPC85xx_VT_MODE
 #define NORMAL_EXCEPTION_PROLOG						     \
         mr      r4,r1;                                                       \
         WRHV_SUP_MODE_GET(r3);         /* check whether user or kernel */   \
@@ -83,6 +83,42 @@
         lwz     r3,VB_STATUS_R3(r4);                                         \
         mr      r10,r4;                                                      \
         lwz     r4,VB_STATUS_R4(r4)
+#else
+#define NORMAL_EXCEPTION_PROLOG						     \
+	mtspr	SPRN_SPRG_WSCRATCH0,r10;/* save two registers to work with */\
+	mtspr	SPRN_SPRG_WSCRATCH1,r11;				     \
+	mtspr	SPRN_SPRG_WSCRATCH2,r1;					     \
+	mfcr	r10;			/* save CR in r10 for now	   */\
+	mfspr	r11,SPRN_SRR1;		/* check whether user or kernel    */\
+	andi.	r11,r11,MSR_PR;						     \
+	beq	1f;							     \
+	mfspr	r1,SPRN_SPRG_THREAD;	/* if from user, start at top of   */\
+	lwz	r1,THREAD_INFO-THREAD(r1); /* this thread's kernel stack   */\
+	ALLOC_STACK_FRAME(r1, THREAD_SIZE);				     \
+1:	subi	r1,r1,INT_FRAME_SIZE;	/* Allocate an exception frame     */\
+	mr	r11,r1;							     \
+	stw	r10,_CCR(r11);          /* save various registers	   */\
+	stw	r12,GPR12(r11);						     \
+	stw	r9,GPR9(r11);						     \
+	mfspr	r10,SPRN_SPRG_RSCRATCH0;					\
+	stw	r10,GPR10(r11);						     \
+	mfspr	r12,SPRN_SPRG_RSCRATCH1;				     \
+	stw	r12,GPR11(r11);						     \
+	mflr	r10;							     \
+	stw	r10,_LINK(r11);						     \
+	mfspr	r10,SPRN_SPRG_RSCRATCH2;				     \
+	mfspr	r12,SPRN_SRR0;						     \
+	stw	r10,GPR1(r11);						     \
+	mfspr	r9,SPRN_SRR1;						     \
+	stw	r10,0(r11);						     \
+	rlwinm	r9,r9,0,14,12;		/* clear MSR_WE (necessary?)	   */\
+	stw	r0,GPR0(r11);						     \
+	lis     r10, STACK_FRAME_REGS_MARKER@ha;/* exception frame marker */ \
+	addi    r10, r10, STACK_FRAME_REGS_MARKER@l;                         \
+	stw     r10, 8(r11);                                                 \
+	mfspr	r10,SPRN_SPRG_RSCRATCH2;				     \
+	SAVE_4GPRS(3, r11);						     \
+	SAVE_2GPRS(7, r11)
 #endif
 
 
-- 
1.6.5.2

