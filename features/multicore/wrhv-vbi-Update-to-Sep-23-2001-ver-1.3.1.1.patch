From 161f17fb9a2e1da76d73de9597dfa18cb7c729c9 Mon Sep 17 00:00:00 2001
From: Jim Somerville <Jim.Somerville@windriver.com>
Date: Tue, 27 Sep 2011 19:59:09 -0400
Subject: [PATCH] wrhv: vbi:  Update to Sep 23, 2001 - ver 1.3.1.1

Main changes to note are some padding fields added
to device structures and alignment changes in the vb_config
structure.

Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
---
 arch/arm/include/asm/arch_vbi.h |   18 ++--------
 arch/arm/kernel/vbi/syscalls.S  |   69 ++++++++++++++++++++++++++++++++++++--
 arch/x86/include/asm/reg_vbi.h  |    1 +
 arch/x86/kernel/vbi/syscalls.S  |    2 +-
 include/vbi/interface.h         |   17 +++++++---
 include/vbi/syscalls.h          |    4 ++
 kernel/vbi/show.c               |    2 +-
 7 files changed, 88 insertions(+), 25 deletions(-)

diff --git a/arch/arm/include/asm/arch_vbi.h b/arch/arm/include/asm/arch_vbi.h
index d018362..79b4cf3 100644
--- a/arch/arm/include/asm/arch_vbi.h
+++ b/arch/arm/include/asm/arch_vbi.h
@@ -309,14 +309,14 @@ typedef struct
  *
  */
 
+#if defined(USE_TRUSTZONE)
+
 #define ARM_IMM	#
 #define CPSR_I	0x80
 #define CPSR_F	0x40
 
-#ifdef USE_TRUSTZONE
-
 /*
- * Trustzone Implementation
+ * Trustzone Privileged Guest Implementation
  *
  * REG0 = CPSR
  * REG0 &= (CPSR_I | CPSR_F)
@@ -333,17 +333,7 @@ typedef struct
 #else /* USE_TRUSTZONE */
 
 /*
- * Non-Trustzone Implementation
- *
- * wrhvVbControl->intDisable = -1; return old value
- *
- * REG1 = -1
- * REG2 = &wrvhVbControl
- * REG2 = wrvhVbControl
- * REG0 = wrhvVbControl->intDisable
- * wrhvVbControl->intDisable = REG1
- *
- * THIS NON-TRUSTZONE VERSION IS NOT TESTED.
+ * Non-Trustzone or Unprivileged Guest Implementation
  */
 
 #define VBI_INT_VCORE_LOCK(REG0, REG1, REG2) \
diff --git a/arch/arm/kernel/vbi/syscalls.S b/arch/arm/kernel/vbi/syscalls.S
index dcfb0d7..e973d6f 100644
--- a/arch/arm/kernel/vbi/syscalls.S
+++ b/arch/arm/kernel/vbi/syscalls.S
@@ -30,6 +30,8 @@ For this reason and others, THIS CODE WILL PROBABLY NOT WORK IN THUMB MODE.
 #include <vbi/vbi.h>
 #include <asm/vbi.h>
 
+#define PRIVILEGED_GUEST
+
 #if (CPU == ARMCA9)
 #define USE_TRUSTZONE
 #endif
@@ -223,20 +225,57 @@ For this reason and others, THIS CODE WILL PROBABLY NOT WORK IN THUMB MODE.
 * For unprivileged guests, the following additional values will be
 * taken from the VB control structure and loaded / take effect:
 *
-* ... TBD
+* SP
+* LR
 *
 * Note that all other registers must be context switched by the guest.
 *
+* vbiCtxLoad
+*   (
+*   unsigned int        type,   /@ which regs to load (ignored if priv'd) @/
+*   unsigned int        psr     /@ PSR to be loaded (ignored if priv'd)   @/
+*   )
+*
+*   For an unprivileged guest, the 'type' field carries the meaning:
+*     0 => PSR switch only
+*     1 => PSR + all GPRs
+*     2 => PSR + all GPRs + VM
+*     3 => VM only
+*     >3 => error
+*
+* unprivileged use cases:
+* - write PSR (useful for changing emulated mode to set stacks)
+*             (reading spsr/lr/sp is accomplished directly)
+*
+* - write PSR + load GPR's + PC (thread context switch, VM on or off)
+*
+* - write PSR + load GPR's + PC + VM (process switch or exception return)
+*
+* Returns: OK or ERROR if context could not be loaded.
 */
 
 FUNC_LABEL(vbi_load_ctx)
-        SAVEREGS
+    /* This function is a special exception to the ABI: it will preserve r3,
+     * so that no stack is necessary. Otherwise, the calling function may
+     * choose to save r8 and deal with any change of stack pointer.
+     *
+     * Note that the LR may change with the mode, so if it is used it must
+     * point to the correct return point.
+     *
+     * If the 'type' indicated the GPRs should be loaded, then there may
+     * be no return after the hypercall (the TLB invalidation will happen
+     * in the WRHV guest-side helper code).
+     */
+
+        mov     r3, r8
         ldr     r8, =VBI_SYS_ctx_load
         HCALL
 
-	INVALIDATE_CURR_ASID(r8)
+#ifdef PRIVILEGED_GUEST
+        INVALIDATE_CURR_ASID(r8)
+#endif
 
-        RESTOREREGS
+        mov     r8, r3
         mov     pc, lr
 FUNC_END(vbi_load_ctx)
 
@@ -1012,7 +1051,18 @@ FUNC_END(vbi_flush_tlb)
 */
 
 FUNC_LABEL(vbi_vcore_irq_lock)
+#if defined(USE_TRUSTZONE) && defined(PRIVILEGED_GUEST)
 	VBI_INT_VCORE_LOCK (r0, r1, r2)
+#else
+        /*
+         * r0 - unsigned int enable (0 or 1)
+         */
+        SAVEREGS
+        mov     r0, #0  /* disable */
+        ldr     r8, = VBI_SYS_int_enable
+        HCALL
+        RESTOREREGS
+#endif
 	mov	pc, lr
 FUNC_END(vbi_vcore_irq_lock)
 
@@ -1026,7 +1076,18 @@ FUNC_END(vbi_vcore_irq_lock)
 */
 
 FUNC_LABEL(vbi_vcore_irq_unlock)
+#if defined(USE_TRUSTZONE) && defined(PRIVILEGED_GUEST)
 	VBI_INT_VCORE_UNLOCK (r0, r1)
+#else
+        /*
+         * r0 - unsigned int enable (0 or 1)
+         */
+        SAVEREGS
+        mov     r0, #1  /* enable */
+        ldr     r8, = VBI_SYS_int_enable
+        HCALL
+        RESTOREREGS
+#endif
         mov     pc, lr
 FUNC_END(vbi_vcore_irq_unlock)
 
diff --git a/arch/x86/include/asm/reg_vbi.h b/arch/x86/include/asm/reg_vbi.h
index 157a22a..8c7d7f3 100644
--- a/arch/x86/include/asm/reg_vbi.h
+++ b/arch/x86/include/asm/reg_vbi.h
@@ -157,6 +157,7 @@ typedef union
 #define CPUID_MODEL_NEHALEM3	46	/* model: Core Architecture	*/
 #define CPUID_MODEL_WESTMERE1	37	/* model: next generation	*/
 #define CPUID_MODEL_WESTMERE2	44	/* model: next generation	*/
+#define CPUID_MODEL_SANDYBRIDGE_XEON 45 /* model: Sandy Bridge, Xeon	*/
 
 
 /* CPUID fields in the EBX register when EAX=1 */
diff --git a/arch/x86/kernel/vbi/syscalls.S b/arch/x86/kernel/vbi/syscalls.S
index 96e1e4e..752cba1 100644
--- a/arch/x86/kernel/vbi/syscalls.S
+++ b/arch/x86/kernel/vbi/syscalls.S
@@ -441,7 +441,7 @@ vbi_hcall(vbi_set_mem_attr, mmu_attr_set, 3)
  * RETURNS: OK or error number in case of failure
  *
  */
-vbi_hcall(vbi_get_mem_attr, mmu_attr_get, 1)
+vbi_hcall(vbi_get_mem_attr, mmu_attr_get, 2)
 
 /*
  * vbi_ns_op - virtua board name service call
diff --git a/include/vbi/interface.h b/include/vbi/interface.h
index 623990c..92c369a 100644
--- a/include/vbi/interface.h
+++ b/include/vbi/interface.h
@@ -528,6 +528,7 @@ struct vb_dev_info {
 	char deviceName[VB_NAMELEN];	/* the name of the GI Thread */
 	char deviceTemplate[VB_NAMELEN];/* the name of the template */
 	uint16_t deviceClass;		/* class: serial, net, block */
+	uint16_t pad;			/* pad to pack */
 	uint32_t deviceType;		/* ADD or Emulated or Passthrough */
 	uint32_t numInterrupts;		/* Number of Interrupts */
 	uint32_t numRegSets;		/* Number of Register Sets */
@@ -555,6 +556,7 @@ struct vb_dev_regset_info
 {
 	uint32_t indexDevice;		/* which device does this belong to */
 	char regSetName[VB_NAMELEN];	/* RegSet Name */
+	uint32_t pad;			/* pad to pack */
 	uint64_t regSetAddress;		/* Guest Physical Address */
 	uint64_t regSetLength;		/* Length */
 	uint64_t regSetAlignment;	/* Alignment of Physical Address */
@@ -614,8 +616,8 @@ struct vb_mem_info
 
 struct config_page_map
 {
-	void *address;
-	size_t size;
+	uint32_t address;
+	uint32_t size;
 	uint32_t accessPriv;
 };
 
@@ -731,11 +733,16 @@ struct vb_config
 	/* OS specific boot line */
 	char bootLine[VB_MAX_BOOTLINE_LENGTH];
 
-	/* spare 32-bit fields for future use */
-	uint32_t spare32[16];
+	/* spare 32-bit fields for future use
+	 * must keep the 64 bit fields after aligned
+	 */
+
+	uint32_t spare32[17];
 
 	/* spare 64-bit fields for future use */
-	uint64_t spare64[16];
+	uint64_t spare64[15];
+
+	uint32_t pad12;
 
 	/* direct function call interface table */
 
diff --git a/include/vbi/syscalls.h b/include/vbi/syscalls.h
index 48f1444..071e869 100644
--- a/include/vbi/syscalls.h
+++ b/include/vbi/syscalls.h
@@ -218,6 +218,10 @@
 #define	VBI_MMU_PROT_SUPV_WRITE		0x00000010  /* supervisor write */
 #define	VBI_MMU_PROT_SUPV_EXECUTE	0x00000020  /* supervisor execute */
 
+/* attributes passed to guest besides protection */
+
+#define VBI_MMU_ATTR_GUEST_MEM		0x80000000  /* accessible by guest  */
+
 /* ETSEC MDIO supported ioctl's */
 #define VBI_BSPIOCTL_DRV_MDIO	1		/* mdio messages */
 
diff --git a/kernel/vbi/show.c b/kernel/vbi/show.c
index ecb81ef..dfa75bd 100644
--- a/kernel/vbi/show.c
+++ b/kernel/vbi/show.c
@@ -282,7 +282,7 @@ void vbi_show_config_page_map()
 	for(i=0;i<index;i++)
 		printk("Region No.: %d Address 0x%p Access Privilege 0x%x"
 			" Mapping Size 0x%x\n",i,
-			pConfigPageMap[i].address,
+			(void *)pConfigPageMap[i].address,
 			pConfigPageMap[i].accessPriv,
 			(unsigned int)pConfigPageMap[i].size);
 }
-- 
1.7.0.4

