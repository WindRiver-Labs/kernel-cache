From f0eb6fe964a00f2dabb30e4083de61f539c9c5d4 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Thu, 21 Jul 2011 14:38:32 +0800
Subject: [PATCH 1/4] wrhv/vbi: improve VBISTAT_VERBOSE macro

Currently we have to provide two equal arguments for VBISTAT_VERBOSE,
and we also have to modify function vbistat_proc_show every time when
we introduce a new VBI entry. This seems pointless. So improve
VBISTAT_VERBOSE macro to make it more simple and scalable. No function
change.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 include/vbi/private.h |    2 +-
 include/vbi/stats.h   |  110 +++++++++++++++++++--------------
 include/vbi/syscall.h |   33 +++++-----
 kernel/vbi/io_apic.c  |    9 +--
 kernel/vbi/lib.c      |    3 +-
 kernel/vbi/msg.c      |    2 +-
 kernel/vbi/ns.c       |   12 +---
 kernel/vbi/procfs.c   |  163 +++++++++++++++----------------------------------
 kernel/vbi/show.c     |   10 ++--
 9 files changed, 145 insertions(+), 199 deletions(-)

diff --git a/include/vbi/private.h b/include/vbi/private.h
index f104d63..bb27e48 100644
--- a/include/vbi/private.h
+++ b/include/vbi/private.h
@@ -54,7 +54,7 @@ extern asmlinkage int32_t vbi_rx_op(void *rmsg, uint32_t rlen,
 static inline int32_t vbi_vb_remote(uint32_t op, uint32_t board_id,
 			int32_t core_id,  void *out)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_vb_remote, "vbi_vb_remote");
+	VBISTAT_VERBOSE(vbi_vb_remote);
 	return -1;
 }
 #else
diff --git a/include/vbi/stats.h b/include/vbi/stats.h
index 6bde15b..f3a2ecf 100644
--- a/include/vbi/stats.h
+++ b/include/vbi/stats.h
@@ -8,64 +8,84 @@
 #include <linux/kernel.h>
 #endif
 
-/* api statistic structure */
-struct vbi_api_stats{
+#define VBI_API_STATS_INIT(x)	\
+	[wrhv_##x] = {.count = 0, .name = #x}
+
+#define VBI_API_STATS_DEF(x)	\
+	wrhv_##x
+
+enum wrhv_vbi {
 	/* functions implemented in vbi.h */
-	uint32_t vbi_vb_find_board_config;
-	uint32_t vbi_send_vcore_vioapic_irq;
-	uint32_t vbi_redir_vioapic_irq;
-	uint32_t vbi_disp_vioapic;
-	uint32_t vbi_show_shmem;
-	uint32_t vbi_show_stat;
-	uint32_t vbi_show_ctrl;
-	uint32_t vbi_show_cfg;
-	uint32_t vbi_show_mem;
-	uint32_t vbi_disp_status_regs;
-	uint32_t vbi_disp_ctrl_regs;
-	uint32_t vbi_show_config_page_map;
+	VBI_API_STATS_DEF(vbi_vb_find_board_config),
+	VBI_API_STATS_DEF(vbi_send_vcore_vioapic_irq),
+	VBI_API_STATS_DEF(vbi_redir_vioapic_irq),
+	VBI_API_STATS_DEF(vbi_disp_vioapic),
+	VBI_API_STATS_DEF(vbi_show_shmem),
+	VBI_API_STATS_DEF(vbi_show_stat),
+	VBI_API_STATS_DEF(vbi_show_ctrl),
+	VBI_API_STATS_DEF(vbi_show_cfg),
+	VBI_API_STATS_DEF(vbi_show_mem),
+	VBI_API_STATS_DEF(vbi_disp_status_regs),
+	VBI_API_STATS_DEF(vbi_disp_ctrl_regs),
+	VBI_API_STATS_DEF(vbi_show_config_page_map),
 	/* functions implemented in syscall.h */
-	uint32_t vbi_set_mem_attr;
-	uint32_t vbi_get_mem_attr;
-	uint32_t vbi_kputs;
-	uint32_t vbi_kputc;
-	uint32_t vbi_receive;
-	uint32_t vbi_reply;
-	uint32_t vbi_vb_restart;
-	uint32_t vbi_vb_resume;
-	uint32_t vbi_shell_start_debug;
-	uint32_t vbi_ns_register;
-	uint32_t vbi_ns_unregister;
-	uint32_t vbi_vb_suspend;
-	uint32_t vbi_ctx_ctl;
-	uint32_t vbi_vb_mgmt;
+	VBI_API_STATS_DEF(vbi_set_mem_attr),
+	VBI_API_STATS_DEF(vbi_get_mem_attr),
+	VBI_API_STATS_DEF(vbi_kputs),
+	VBI_API_STATS_DEF(vbi_kputc),
+	VBI_API_STATS_DEF(vbi_receive),
+	VBI_API_STATS_DEF(vbi_reply),
+	VBI_API_STATS_DEF(vbi_vb_restart),
+	VBI_API_STATS_DEF(vbi_vb_resume),
+	VBI_API_STATS_DEF(vbi_shell_start_debug),
+	VBI_API_STATS_DEF(vbi_ns_register),
+	VBI_API_STATS_DEF(vbi_ns_unregister),
+	VBI_API_STATS_DEF(vbi_vb_suspend),
+	VBI_API_STATS_DEF(vbi_ctx_ctl),
+	VBI_API_STATS_DEF(vbi_vb_mgmt),
+	VBI_API_STATS_DEF(core_vbi_end),
 	/* optional vbi */
-	uint32_t vbi_vb_remote;
-	uint32_t vbi_ns_lookup;
-	uint32_t vbi_send;
-	uint32_t vbi_vb_write_reg;
-	uint32_t vbi_vb_read_reg;
-	uint32_t vbi_vb_write_mem;
-	uint32_t vbi_vb_read_mem;
-	uint32_t vbi_get_exc_offset;
-	uint32_t vbi_set_exc_offset;
-	uint32_t vbi_vtlb_op;
+	VBI_API_STATS_DEF(vbi_vb_remote),
+	VBI_API_STATS_DEF(vbi_ns_lookup),
+	VBI_API_STATS_DEF(vbi_send),
+	VBI_API_STATS_DEF(vbi_vb_write_reg),
+	VBI_API_STATS_DEF(vbi_vb_read_reg),
+	VBI_API_STATS_DEF(vbi_vb_write_mem),
+	VBI_API_STATS_DEF(vbi_vb_read_mem),
+	VBI_API_STATS_DEF(vbi_get_exc_offset),
+	VBI_API_STATS_DEF(vbi_set_exc_offset),
+	VBI_API_STATS_DEF(vbi_vtlb_op),
+	VBI_API_STATS_DEF(vbi_end),
+};
+
+struct vbi_api_stats {
+	uint32_t count;
+	char *name;
 };
 
 /* declared in linux/kernel/vbi/wrhv.c */
 extern int vbistat_verbose;
-extern struct vbi_api_stats vbistat_count;
+extern struct vbi_api_stats vbistat[];
 extern int cert_hyp_version;
 
 #define CERT_HYP_VER_NONE	(0)
 #define CERT_HYP_VER_STD	(1)
 #define CERT_HYP_VER_DEBUG	(2)
 
-#define VBISTAT_VERBOSE(ctr, msg) \
-do {\
-/* limit output to maximum of 100 times */\
-if ((vbistat_verbose) && ((ctr) < 100))\
-printk(KERN_INFO "Unsupported vbi call %s\n", msg);\
-ctr++;\
+#define VBISTAT_VERBOSE(vbi) \
+do {									\
+	int i = wrhv_##vbi;						\
+	struct vbi_api_stats *p;					\
+									\
+	if (i >= wrhv_vbi_end) {					\
+		pr_err("Wrong argument %s for VBISTAT_VERBOSE\n", #vbi);\
+		break;							\
+	}								\
+	p  = &vbistat[i];						\
+	/* limit output to maximum of 100 times */			\
+	if ((vbistat_verbose) && (p->count < 100))			\
+		printk(KERN_INFO "Unsupported vbi call %s\n", p->name);	\
+	p->count++;							\
 } while (0)
 
 static inline int is_cert_hyp(void){
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index e53e08e..0dee6a3 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -196,13 +196,13 @@ static inline int vbi_ctx_ctl(unsigned operation, unsigned arg1,
 	/* GOS often call this api to go into idle, do not
 	* print log message to reduce large amount of output
 	*/
-	VBISTAT_VERBOSE(vbistat_count.vbi_ctx_ctl, "vbi_ctx_ctl");
+	VBISTAT_VERBOSE(vbi_ctx_ctl);
 	return -1;
 }
 static inline int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
 			int32_t *outError, uint32_t flags, void *ctl)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_vb_mgmt, "vbi_vb_mgmt");
+	VBISTAT_VERBOSE(vbi_vb_mgmt);
 	return -1;
 }
 
@@ -210,14 +210,14 @@ static inline int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
 static inline int32_t vbi_reply(int32_t id, void *smsg, size_t slen,
 		struct vbi_msg_ctl *ctl)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_reply, "vbi_rely");
+	VBISTAT_VERBOSE(vbi_rely);
 	return -1;
 }
 static inline int32_t vbi_kputs(const char *s)
 {
 	 /* standard certifiable hypervisor does not support this function */
 	if (cert_hyp_version == CERT_HYP_VER_STD) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_kputs, "vbi_kputs");
+		VBISTAT_VERBOSE(vbi_kputs);
 		return -1;
 	}
 	return cert_debug_vbi_kputs(s);
@@ -227,7 +227,7 @@ static inline int32_t vbi_kputc(int c)
 {
 	/* standard certifiable hypervisor does not support this function */
 	if (cert_hyp_version == CERT_HYP_VER_STD) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_kputc, "vbi_kputc");
+		VBISTAT_VERBOSE(vbi_kputc);
 		return -1;
 	}
 	return cert_debug_vbi_kputc(c);
@@ -236,8 +236,7 @@ static inline void vbi_shell_start_debug(uint32_t  flags)
 {
 	/* standard certifiable hypervisor does not support this function */
 	if (cert_hyp_version == CERT_HYP_VER_STD) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_shell_start_debug,
-				"vbi_shell_start_debug");
+		VBISTAT_VERBOSE(vbi_shell_start_debug);
 		return;
 	}
 	cert_debug_vbi_shell_start_debug(flags);
@@ -246,28 +245,28 @@ static inline void vbi_shell_start_debug(uint32_t  flags)
 /* Prior to vbi 2.0 these api were vbi_set_mmu_attr/Get */
 static inline int32_t vbi_set_mem_attr(void *vaddr, size_t len, int32_t attr)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_set_mem_attr, "vbi_set_mem_attr");
+	VBISTAT_VERBOSE(vbi_set_mem_attr);
 	return -1;
 }
 static inline int32_t vbi_get_mem_attr(void *vaddr, int32_t *attr)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_get_mem_attr, "vbi_get_mem_attr");
+	VBISTAT_VERBOSE(vbi_get_mem_attr);
 	return -1;
 }
 static inline int32_t vbi_vb_suspend(uint32_t id, int32_t core)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_vb_suspend, "vbi_vb_suspend");
+	VBISTAT_VERBOSE(vbi_vb_suspend);
 	return -1;
 }
 /* virtual board management API's */
 static inline int32_t vbi_vb_restart(uint32_t id, int32_t core)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_vb_restart, "vbi_vb_restart");
+	VBISTAT_VERBOSE(vbi_vb_restart);
 	return -1;
 }
 static inline int32_t vbi_vb_resume(uint32_t id, int32_t core)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_vb_resume, "vbi_vb_resume");
+	VBISTAT_VERBOSE(vbi_vb_resume);
 	return -1;
 }
 
@@ -280,32 +279,32 @@ static inline int32_t vbi_send(int32_t id, void *smsg, size_t slen,
 		void *rmsg, size_t rlen, struct vbi_msg_info *info,
 		struct vbi_msg_ctl *ctl)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_send, "vbi_send");
+	VBISTAT_VERBOSE(vbi_send);
 	return -1;
 }
 static inline int32_t vbi_vb_read_mem(struct vbi_mem_ctl *memCtl,
 					uint32_t targetBoard)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_vb_read_mem, "vbi_vb_read_mem");
+	VBISTAT_VERBOSE(vbi_vb_read_mem);
 	return -1;
 }
 static inline int32_t vbi_vb_write_mem(struct vbi_mem_ctl *memCtl,
 					uint32_t targetBoard)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_vb_write_mem, "vbi_vb_write_mem");
+	VBISTAT_VERBOSE(vbi_vb_write_mem);
 	return -1;
 }
 /* read/write remote vb's registers */
 static inline int32_t vbi_vb_read_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
 		uint32_t targetBoard, int32_t core)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_vb_read_reg, "vbi_vb_read_reg");
+	VBISTAT_VERBOSE(vbi_vb_read_reg);
 	return -1;
 }
 static inline int32_t vbi_vb_write_reg(VBI_HREG_SET_CMPLX_QUALIFIED *regSet,
 		uint32_t targetBoard, int32_t core)
 {
-	VBISTAT_VERBOSE(vbistat_count.vbi_vb_write_reg, "vbi_vb_write_reg");
+	VBISTAT_VERBOSE(vbi_vb_write_reg);
 	return -1;
 }
 #else
diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index 57d8478..4cd0dc7 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -270,8 +270,7 @@ int32_t vbi_send_vcore_vioapic_irq(int32_t irq, uint32_t coreSet,
 {
 	/* Certifiable hypervisor does not support this function */
 	if (is_cert_hyp()) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_send_vcore_vioapic_irq,
-			"vbi_send_vcore_vioapic_irq");
+		VBISTAT_VERBOSE(vbi_send_vcore_vioapic_irq);
 		return -1;
 	}
 	return vbi_io_apic_op(VBI_IOAPICIOCTL_VCORE_SEND, irq, coreSet,
@@ -289,8 +288,7 @@ int32_t vbi_redir_vioapic_irq(int32_t irq, int32_t core)
 {
 	/* Certifiable hypervisor does not support this function */
 	if (is_cert_hyp()) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_redir_vioapic_irq,
-			"vbi_redir_vioapic_irq");
+		VBISTAT_VERBOSE(vbi_redir_vioapic_irq);
 		return -1;
 	}
 	return vbi_vcore_irq_redirect(irq, core);
@@ -346,8 +344,7 @@ void vbi_disp_vioapic(void)
 
 	/* Certifiable hypervisor does not support this function */
 	if (is_cert_hyp()) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_disp_vioapic,
-			"vbi_disp_vioapic");
+		VBISTAT_VERBOSE(vbi_disp_vioapic);
 		return;
 	}
 
diff --git a/kernel/vbi/lib.c b/kernel/vbi/lib.c
index 356126b..abd2ce5 100644
--- a/kernel/vbi/lib.c
+++ b/kernel/vbi/lib.c
@@ -212,8 +212,7 @@ int32_t vbi_vb_find_board_config(uint32_t board_id, int32_t core_id,
 {
 	/* Certifiable hypervisor does not support this function */
 	if (is_cert_hyp()) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_vb_find_board_config,
-			"vbi_vb_find_board_config");
+		VBISTAT_VERBOSE(vbi_vb_find_board_config);
 		return -1;
 	}
 	return vbi_vb_remote(VBI_VBREMOTE_BOARDCONFIG, board_id, core_id,
diff --git a/kernel/vbi/msg.c b/kernel/vbi/msg.c
index 48fcd6d..677f9e4 100644
--- a/kernel/vbi/msg.c
+++ b/kernel/vbi/msg.c
@@ -39,7 +39,7 @@ int32_t vbi_receive(void *rmsg, uint32_t rlen, struct vbi_msg_info *info,
 	int32_t retval;
 
 	if (is_cert_hyp()) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_receive, "vbi_receive");
+		VBISTAT_VERBOSE(vbi_receive);
 		return -1;
 	}
 
diff --git a/kernel/vbi/ns.c b/kernel/vbi/ns.c
index d668297..d60b2d5 100644
--- a/kernel/vbi/ns.c
+++ b/kernel/vbi/ns.c
@@ -48,8 +48,7 @@ int32_t vbi_ns_register(char *name, uint32_t revision)
 {
 	/* Certifiable hypervisor does not support this function */
 	if (is_cert_hyp()) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_ns_register,
-			"vbi_ns_register");
+		VBISTAT_VERBOSE(vbi_ns_register);
 		return -1;
 	}
 
@@ -72,8 +71,7 @@ int32_t vbi_ns_unregister(char *name, uint32_t revision)
 {
 	/* Certifiable hypervisor does not support this function */
 	if (is_cert_hyp()) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_ns_unregister,
-			"vbi_ns_unregister");
+		VBISTAT_VERBOSE(vbi_ns_unregister);
 		return -1;
 	}
 
@@ -106,8 +104,7 @@ int32_t vbi_ns_lookup_old(char *name, uint32_t revision, VBI_NS_HANDLE *handle)
 	/* Optional VBI, Certifiable hypervisor does not
 		support this function */
 	if (is_corevbi_only()) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_ns_lookup,
-			"vbi_ns_lookup");
+		VBISTAT_VERBOSE(vbi_ns_lookup);
 		return -1;
 	}
 
@@ -145,8 +142,7 @@ int32_t vbi_ns_lookup(char *name, uint32_t revision, VBI_NS_HANDLE *handle,
 	/* Optional VBI, Certifiable hypervisor does not
 		support this function */
 	if (is_corevbi_only()) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_ns_lookup,
-			"vbi_ns_lookup");
+		VBISTAT_VERBOSE(vbi_ns_lookup);
 		return -1;
 	}
 
diff --git a/kernel/vbi/procfs.c b/kernel/vbi/procfs.c
index 7dc4bb7..7908ac3 100644
--- a/kernel/vbi/procfs.c
+++ b/kernel/vbi/procfs.c
@@ -115,53 +115,56 @@ int vbistat_verbose;
 /* variable to identify difference certifiable hypervisor version */
 int cert_hyp_version = CERT_HYP_VER_NONE;
 
-struct vbi_api_stats vbistat_count = {
+struct vbi_api_stats vbistat[] = {
 	/* functions implemented in vbi.h */
-	.vbi_vb_find_board_config = 0,
-	.vbi_send_vcore_vioapic_irq = 0,
-	.vbi_redir_vioapic_irq = 0,
-	.vbi_disp_vioapic = 0,
-	.vbi_show_shmem = 0,
-	.vbi_show_stat = 0,
-	.vbi_show_ctrl = 0,
-	.vbi_show_cfg = 0,
-	.vbi_show_mem = 0,
-	.vbi_disp_status_regs = 0,
-	.vbi_disp_ctrl_regs = 0,
-	.vbi_show_config_page_map = 0,
+	VBI_API_STATS_INIT(vbi_vb_find_board_config),
+	VBI_API_STATS_INIT(vbi_send_vcore_vioapic_irq),
+	VBI_API_STATS_INIT(vbi_redir_vioapic_irq),
+	VBI_API_STATS_INIT(vbi_disp_vioapic),
+	VBI_API_STATS_INIT(vbi_show_shmem),
+	VBI_API_STATS_INIT(vbi_show_stat),
+	VBI_API_STATS_INIT(vbi_show_ctrl),
+	VBI_API_STATS_INIT(vbi_show_cfg),
+	VBI_API_STATS_INIT(vbi_show_mem),
+	VBI_API_STATS_INIT(vbi_disp_status_regs),
+	VBI_API_STATS_INIT(vbi_disp_ctrl_regs),
+	VBI_API_STATS_INIT(vbi_show_config_page_map),
 
 	/* functions implemented in syscall.h */
-	.vbi_set_mem_attr = 0,
-	.vbi_get_mem_attr = 0,
-	.vbi_kputs = 0,
-	.vbi_kputc = 0,
-	.vbi_receive = 0,
-	.vbi_reply = 0,
-	.vbi_vb_restart = 0,
-	.vbi_vb_resume = 0,
-	.vbi_shell_start_debug = 0,
-	.vbi_ns_register = 0,
-	.vbi_ns_unregister = 0,
-	.vbi_vb_suspend = 0,
-	.vbi_ctx_ctl = 0,
-	.vbi_vb_mgmt = 0,
+	VBI_API_STATS_INIT(vbi_set_mem_attr),
+	VBI_API_STATS_INIT(vbi_get_mem_attr),
+	VBI_API_STATS_INIT(vbi_kputs),
+	VBI_API_STATS_INIT(vbi_kputc),
+	VBI_API_STATS_INIT(vbi_receive),
+	VBI_API_STATS_INIT(vbi_reply),
+	VBI_API_STATS_INIT(vbi_vb_restart),
+	VBI_API_STATS_INIT(vbi_vb_resume),
+	VBI_API_STATS_INIT(vbi_shell_start_debug),
+	VBI_API_STATS_INIT(vbi_ns_register),
+	VBI_API_STATS_INIT(vbi_ns_unregister),
+	VBI_API_STATS_INIT(vbi_vb_suspend),
+	VBI_API_STATS_INIT(vbi_ctx_ctl),
+	VBI_API_STATS_INIT(vbi_vb_mgmt),
+	VBI_API_STATS_INIT(core_vbi_end),
 
 	/* optionsl vbi */
-	.vbi_vb_remote = 0,
-	.vbi_ns_lookup = 0,
-	.vbi_send = 0,
-	.vbi_vb_write_reg = 0,
-	.vbi_vb_read_reg = 0,
-	.vbi_vb_write_mem = 0,
-	.vbi_vb_read_mem = 0,
-	.vbi_get_exc_offset = 0,
-	.vbi_set_exc_offset = 0,
-	.vbi_vtlb_op = 0,
-
+	VBI_API_STATS_INIT(vbi_vb_remote),
+	VBI_API_STATS_INIT(vbi_ns_lookup),
+	VBI_API_STATS_INIT(vbi_send),
+	VBI_API_STATS_INIT(vbi_vb_write_reg),
+	VBI_API_STATS_INIT(vbi_vb_read_reg),
+	VBI_API_STATS_INIT(vbi_vb_write_mem),
+	VBI_API_STATS_INIT(vbi_vb_read_mem),
+	VBI_API_STATS_INIT(vbi_get_exc_offset),
+	VBI_API_STATS_INIT(vbi_set_exc_offset),
+	VBI_API_STATS_INIT(vbi_vtlb_op),
+	VBI_API_STATS_INIT(vbi_end),
 };
 
 static int vbistat_proc_show(struct seq_file *m, void *v)
 {
+	int i;
+
 	switch (cert_hyp_version) {
 
 	case CERT_HYP_VER_STD:
@@ -174,61 +177,8 @@ static int vbistat_proc_show(struct seq_file *m, void *v)
 	}
 	seq_printf(m, "Hypervisor API Call Counts:\n");
 
-	/* functions implemented in vbi.h */
-	seq_printf(m, "vbi_vb_find_board_config %d\n",
-		vbistat_count.vbi_vb_find_board_config);
-	seq_printf(m, "vbi_send_vcore_vioapic_irq %d\n",
-		vbistat_count.vbi_send_vcore_vioapic_irq);
-	seq_printf(m, "vbi_redir_vioapic_irq %d\n",
-		vbistat_count.vbi_redir_vioapic_irq);
-	seq_printf(m, "vbi_disp_vioapic %d\n",
-		vbistat_count.vbi_disp_vioapic);
-	seq_printf(m, "vbi_show_shmem %d\n",
-		vbistat_count.vbi_show_shmem);
-	seq_printf(m, "vbi_show_stat %d\n",
-		vbistat_count.vbi_show_stat);
-	seq_printf(m, "vbi_show_ctrl %d\n",
-		vbistat_count.vbi_show_ctrl);
-	seq_printf(m, "vbi_show_cfg %d\n",
-		vbistat_count.vbi_show_cfg);
-	seq_printf(m, "vbi_show_mem %d\n",
-		vbistat_count.vbi_show_mem);
-	seq_printf(m, "vbi_disp_status_regs %d\n",
-		vbistat_count.vbi_disp_status_regs);
-	seq_printf(m, "vbi_disp_ctrl_regs %d\n",
-		vbistat_count.vbi_disp_ctrl_regs);
-	seq_printf(m, "vbi_show_config_page_map %d\n",
-		vbistat_count.vbi_show_config_page_map);
-
-	/* functions implemented in syscall.h */
-	seq_printf(m, "vbi_set_mem_attr %d\n",
-		vbistat_count.vbi_set_mem_attr);
-	seq_printf(m, "vbi_get_mem_attr %d\n",
-		vbistat_count.vbi_get_mem_attr);
-	seq_printf(m, "vbi_kputs %d\n",
-		vbistat_count.vbi_kputs);
-	seq_printf(m, "vbi_kputc %d\n",
-		vbistat_count.vbi_kputc);
-	seq_printf(m, "vbi_receive %d\n",
-		vbistat_count.vbi_receive);
-	seq_printf(m, "vbi_reply %d\n",
-		vbistat_count.vbi_reply);
-	seq_printf(m, "vbi_vb_restart %d\n",
-		vbistat_count.vbi_vb_restart);
-	seq_printf(m, "vbi_vb_resume %d\n",
-		vbistat_count.vbi_vb_resume);
-	seq_printf(m, "vbi_shell_start_debug %d\n",
-		vbistat_count.vbi_shell_start_debug);
-	seq_printf(m, "vbi_ns_register %d\n",
-		vbistat_count.vbi_ns_register);
-	seq_printf(m, "vbi_ns_unregister %d\n",
-		vbistat_count.vbi_ns_unregister);
-	seq_printf(m, "vbi_vb_suspend %d\n",
-		vbistat_count.vbi_vb_suspend);
-	seq_printf(m, "vbi_ctx_ctl %d\n",
-		vbistat_count.vbi_ctx_ctl);
-	seq_printf(m, "vbi_vb_mgmt %d\n",
-		vbistat_count.vbi_vb_mgmt);
+	for (i = 0; i < wrhv_core_vbi_end; i++)
+		seq_printf(m, "%s %d\n", vbistat[i].name, vbistat[i].count);
 
 	/* optional vbi */
 	seq_printf(m, "\n");
@@ -238,26 +188,9 @@ static int vbistat_proc_show(struct seq_file *m, void *v)
 		seq_printf(m, "enabled\n");
 	else
 		seq_printf(m, "not enabled\n");
-	seq_printf(m, "vbi_vb_remote %d\n",
-		vbistat_count.vbi_vb_remote);
-	seq_printf(m, "vbi_ns_lookup %d\n",
-		vbistat_count.vbi_ns_lookup);
-	seq_printf(m, "vbi_send %d\n",
-		vbistat_count.vbi_send);
-	seq_printf(m, "vbi_vb_write_reg %d\n",
-		vbistat_count.vbi_vb_write_reg);
-	seq_printf(m, "vbi_vb_read_reg %d\n",
-		vbistat_count.vbi_vb_read_reg);
-	seq_printf(m, "vbi_vb_write_mem %d\n",
-		vbistat_count.vbi_vb_write_mem);
-	seq_printf(m, "vbi_vb_read_mem %d\n",
-		vbistat_count.vbi_vb_read_mem);
-	seq_printf(m, "vbi_get_exc_offset %d\n",
-		vbistat_count.vbi_get_exc_offset);
-	seq_printf(m, "vbi_set_exc_offset %d\n",
-		vbistat_count.vbi_set_exc_offset);
-	seq_printf(m, "vbi_vtlb_op %d\n",
-		vbistat_count.vbi_vtlb_op);
+
+	for (; i < wrhv_vbi_end; i++)
+		seq_printf(m, "%s %d\n", vbistat[i].name, vbistat[i].count);
 	seq_printf(m, "\n");
 
 	return 0;
@@ -272,6 +205,7 @@ static ssize_t vbistat_write(struct file *file, const char __user *buf,
 				size_t count, loff_t *offs)
 {
 	char c;
+	int i;
 
 	if (copy_from_user(&c, buf, 1))
 		return -EFAULT;
@@ -280,7 +214,8 @@ static ssize_t vbistat_write(struct file *file, const char __user *buf,
 
 	case '0':
 		/* clear statistic counter */
-		memset(&vbistat_count, 0, sizeof(vbistat_count));
+		for (i = 0; i < wrhv_vbi_end; i++)
+			vbistat[i].count = 0;
 		break;
 
 	case 'v':
diff --git a/kernel/vbi/show.c b/kernel/vbi/show.c
index e0322d0..7d9a55a 100644
--- a/kernel/vbi/show.c
+++ b/kernel/vbi/show.c
@@ -53,7 +53,7 @@ void vbi_show_shmem(void)
 
 	/* standard certifiable hypervisor does not support this function */
 	if (cert_hyp_version == CERT_HYP_VER_STD) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_show_shmem, "vbi_show_shmem");
+		VBISTAT_VERBOSE(vbi_show_shmem);
 		return;
 	}
 
@@ -86,7 +86,7 @@ void vbi_show_mem(void)
 
 	/* standard certifiable hypervisor does not support this function */
 	if (cert_hyp_version == CERT_HYP_VER_STD) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_show_mem, "vbi_show_mem");
+		VBISTAT_VERBOSE(vbi_show_mem);
 		return;
 	}
 
@@ -217,7 +217,7 @@ void vbi_show_stat(void)
 
 	/* standard certifiable hypervisor does not support this function */
 	if (cert_hyp_version == CERT_HYP_VER_STD) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_show_stat, "vbi_show_stat");
+		VBISTAT_VERBOSE(vbi_show_stat);
 		return;
 	}
 	printk("VB status: 0x%p\n", p);
@@ -241,7 +241,7 @@ void vbi_show_ctrl(void)
 
 	/* standard certifiable hypervisor does not support this function */
 	if (cert_hyp_version == CERT_HYP_VER_STD) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_show_ctrl, "vbi_show_ctrl");
+		VBISTAT_VERBOSE(vbi_show_ctrl);
 		return;
 	}
 
@@ -298,7 +298,7 @@ void vbi_show_cfg(void)
 
 	/* standard certifiable hypervisor does not support this function */
 	if (cert_hyp_version == CERT_HYP_VER_STD) {
-		VBISTAT_VERBOSE(vbistat_count.vbi_show_cfg, "vbi_show_cfg");
+		VBISTAT_VERBOSE(vbi_show_cfg);
 		return;
 	}
 
-- 
1.7.0.4

