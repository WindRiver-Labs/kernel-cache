From 47adf7243dbfe9510eafcfa0cebb8c2f6dec8edd Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Thu, 24 Mar 2011 11:11:41 +0800
Subject: [PATCH 4/7] WRHV: MIPS: Register GOS specific clockevent on SMP

On SMP, need register WRHV specific clockevent on each active
core. So, change wrhv_clockevent to per CPU variable.
And, only boot core can register timer interrupt handler.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/include/asm/time.h |    6 +++++-
 arch/mips/kernel/vbi/wrhv.c  |   31 ++++++++++++++++++++++++-------
 2 files changed, 29 insertions(+), 8 deletions(-)

diff --git a/arch/mips/include/asm/time.h b/arch/mips/include/asm/time.h
index d8eebba..73208c2 100644
--- a/arch/mips/include/asm/time.h
+++ b/arch/mips/include/asm/time.h
@@ -21,6 +21,10 @@
 
 extern spinlock_t rtc_lock;
 
+#ifdef CONFIG_WRHV
+extern int wrhv_clockevent_init(void);
+#endif
+
 /*
  * RTC ops.  By default, they point to weak no-op RTC functions.
  *	rtc_mips_set_time - reverse the above translation and set time to RTC.
@@ -62,7 +66,7 @@ static inline int mips_clockevent_init(void)
 
 	return smtc_clockevent_init();
 #elif defined(CONFIG_WRHV)
-	return 1;
+	return wrhv_clockevent_init();
 #elif defined(CONFIG_CEVT_R4K)
 	return r4k_clockevent_init();
 #else
diff --git a/arch/mips/kernel/vbi/wrhv.c b/arch/mips/kernel/vbi/wrhv.c
index 699862f..0c514b7 100644
--- a/arch/mips/kernel/vbi/wrhv.c
+++ b/arch/mips/kernel/vbi/wrhv.c
@@ -34,6 +34,7 @@
 
 struct vb_config *wr_config;
 
+extern int cp0_timer_irq_installed;
 extern void cpu_cache_init(void);
 extern void tlb_init(void);
 extern unsigned long setup_zero_pages(void);
@@ -169,6 +170,9 @@ static int wrhv_set_next_event(unsigned long evt, struct clock_event_device *dev
 {
  	return 0;
 }
+
+DEFINE_PER_CPU(struct clock_event_device, wrhv_clock_events);
+ 
 static struct clock_event_device wrhv_clockevent = {
  	.name		= "wrhv",
  	.shift		= 32,
@@ -186,16 +190,29 @@ static struct irqaction wrhv_timer_irqaction = {
  	.name = "timer",
 };
  
-void __init wrhv_plat_time_init(void)
+void __init wrhv_clockevent_init(void)
 {
-	int ret;
+	struct clock_event_device *evt;
+	int cpu = smp_processor_id();
+
+	evt = &per_cpu(wrhv_clock_events, cpu);
+	memcpy(evt, &wrhv_clockevent, sizeof(*evt));  
+
+	evt->cpumask = get_cpu_mask(cpu);
+	clockevents_register_device(evt);
+
+	if (cp0_timer_irq_installed)
+		return 0;
 
-	wrhv_clockevent.cpumask = get_cpu_mask(0);
-	clockevents_register_device(&wrhv_clockevent);
+	cp0_timer_irq_installed = 1;
 
-	ret = setup_irq(wrhv_clockevent.irq, &wrhv_timer_irqaction);
-	if (ret)
-		printk("Setup Timer interrupt failed\n");
+	setup_irq(wrhv_clockevent.irq, &wrhv_timer_irqaction);
+
+	return 0;
+}
+
+void __init wrhv_plat_time_init(void)
+{
 }
 
 #ifdef CONFIG_64BIT
-- 
1.7.0.4

