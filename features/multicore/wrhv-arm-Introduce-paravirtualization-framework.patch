From f8cf1c1740b9a10d6164b583b4cc73c790c19f98 Mon Sep 17 00:00:00 2001
From: Jim Somerville <Jim.Somerville@windriver.com>
Date: Wed, 3 Aug 2011 13:09:55 -0400
Subject: [PATCH 01/10] wrhv: arm:  Introduce paravirtualization framework

Introduce the pv_ops structures.
Add associated options to Kconfig.

Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
---
 arch/arm/Kconfig                |   35 ++++++++++++++
 arch/arm/include/asm/paravirt.h |   61 ++++++++++++++++++++++++
 arch/arm/kernel/Makefile        |    2 +
 arch/arm/kernel/paravirt.c      |  100 +++++++++++++++++++++++++++++++++++++++
 4 files changed, 198 insertions(+), 0 deletions(-)
 create mode 100644 arch/arm/include/asm/paravirt.h
 create mode 100644 arch/arm/kernel/paravirt.c

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 26da8fe..c7d85ba 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -182,12 +182,47 @@ config ARM_L1_CACHE_SHIFT_6
 
 config VECTORS_BASE
 	hex
+	default 0xc0000000 if WRHV
 	default 0xffff0000 if MMU || CPU_HIGH_VECTOR
 	default DRAM_BASE if REMAP_VECTORS_TO_RAM
 	default 0x00000000
 	help
 	  The base address of exception vectors.
 
+menuconfig VIRTUALIZATION
+	bool "Virtualization"
+	---help---
+	  Say Y here to get to see options for enabling the kernel
+	  to run as a virtual machine (guest).
+	  This option alone does not add any kernel code.
+
+	  If you say N, all options in this submenu will be skipped and
+	  disabled.
+
+if VIRTUALIZATION
+
+config PARAVIRT
+        bool "Enable paravirtualization code"
+        default y
+        help
+          This changes the kernel so it can modify itself when it is run
+          under a hypervisor, potentially improving performance significantly
+          over full virtualization.  However, when run without a hypervisor
+          the kernel is theoretically slower and slightly larger.
+
+config PARAVIRT_CLOCK
+        bool
+        default n
+
+config PARAVIRT_DEBUG
+       bool "paravirt-ops debugging"
+       depends on PARAVIRT && DEBUG_KERNEL
+       help
+         Enable to debug paravirt_ops internals.  Specifically, BUG if
+         a paravirt_op is missing when it is called.
+
+endif # VIRTUALIZATION
+
 source "init/Kconfig"
 
 source "kernel/Kconfig.freezer"
diff --git a/arch/arm/include/asm/paravirt.h b/arch/arm/include/asm/paravirt.h
new file mode 100644
index 0000000..85379b8
--- /dev/null
+++ b/arch/arm/include/asm/paravirt.h
@@ -0,0 +1,61 @@
+/*
+ * arm paravirt.h - arm paravirtual operations structures
+ *
+ * Copyright (c) 2011 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ */
+
+#ifndef __ARM_ASM_PARAVIRT_H
+#define __ARM_ASM_PARAVIRT_H
+
+#include <linux/kprobes.h>
+
+#ifdef CONFIG_PARAVIRT
+/*
+ * paravirtual operations structures
+ */
+
+struct pv_time_ops {
+};
+
+struct pv_cpu_ops {
+	void (*do_idle)(void);
+};
+
+/* general info */
+struct pv_info {
+	const char *name;
+	int paravirt_enabled;
+};
+
+struct pv_irq_ops {
+	void (*do_IRQ)(struct pt_regs *regs);
+};
+
+struct pv_apic_ops {
+};
+
+struct pv_mmu_ops {
+	void (*MMU_init)(void);
+	void (*do_switch_mm)(unsigned long pgd_phys, struct mm_struct *mm);
+	void (*set_pte_ext)(pte_t *ptep, pte_t pte, unsigned int ext);
+	pgd_t *(*cpu_get_pgd)(void);
+};
+
+extern struct pv_info pv_info;
+extern struct pv_time_ops pv_time_ops;
+extern struct pv_cpu_ops pv_cpu_ops;
+extern struct pv_irq_ops pv_irq_ops;
+extern struct pv_mmu_ops pv_mmu_ops;
+
+#endif /* CONFIG_PARAVIRT */
+#endif	/* __ARM_ASM_PARAVIRT_H */
diff --git a/arch/arm/kernel/Makefile b/arch/arm/kernel/Makefile
index 2ca40f0..37bba4d 100644
--- a/arch/arm/kernel/Makefile
+++ b/arch/arm/kernel/Makefile
@@ -17,6 +17,8 @@ obj-y		:= compat.o elf.o entry-armv.o entry-common.o irq.o \
 		   process.o ptrace.o return_address.o setup.o signal.o \
 		   sys_arm.o stacktrace.o time.o traps.o
 
+obj-$(CONFIG_WRHV)		+= vbi/
+obj-$(CONFIG_PARAVIRT)		+= paravirt.o
 obj-$(CONFIG_LEDS)		+= leds.o
 obj-$(CONFIG_OC_ETM)		+= etm.o
 
diff --git a/arch/arm/kernel/paravirt.c b/arch/arm/kernel/paravirt.c
new file mode 100644
index 0000000..7bc5684
--- /dev/null
+++ b/arch/arm/kernel/paravirt.c
@@ -0,0 +1,100 @@
+/*  Paravirtualization interfaces
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+
+    Copyright (C) 2011 Wind River Systems, Inc.
+
+*/
+
+#include <linux/module.h>
+#include <asm/setup.h>
+#include <asm/paravirt.h>
+
+#ifdef CONFIG_WRHV
+extern void wrhv_init(void);
+#endif
+
+/* paravirt init */
+void paravirt_init(void)
+{
+#ifdef CONFIG_WRHV
+	wrhv_init();
+#endif
+}
+
+struct pv_info pv_info = {
+	.name = "bare hardware",
+	.paravirt_enabled = 0,
+};
+
+/* default native operations */
+struct pv_time_ops pv_time_ops = {
+};
+
+struct pv_irq_ops pv_irq_ops = {
+};
+
+struct pv_cpu_ops pv_cpu_ops = {
+};
+
+struct pv_mmu_ops pv_mmu_ops = {
+};
+
+
+/* pv_irq_ops */
+void paravirt_do_IRQ(struct pt_regs *regs)
+{
+	pv_irq_ops.do_IRQ(regs);
+}
+
+void paravirt_do_idle(void)
+{
+	pv_cpu_ops.do_idle();
+}
+
+void __init paravirt_MMU_init(void)
+{
+	pv_mmu_ops.MMU_init();
+}
+
+void paravirt_set_pte_ext(pte_t *ptep, pte_t pte, unsigned int ext)
+{
+	pv_mmu_ops.set_pte_ext(ptep, pte, ext);
+}
+
+void paravirt_do_switch_mm(unsigned long pgd_phys, struct mm_struct *mm)
+{
+	pv_mmu_ops.do_switch_mm(pgd_phys, mm);
+}
+
+pgd_t *paravirt_cpu_get_pgd(void)
+{
+	return pv_mmu_ops.cpu_get_pgd();
+}
+
+inline int paravirt_enabled(void)
+{
+	return pv_info.paravirt_enabled;
+}
+
+void paravirt_smp_init_cpus(void)
+{
+}
+
+EXPORT_SYMBOL(pv_info);
+EXPORT_SYMBOL(pv_time_ops);
+EXPORT_SYMBOL(pv_cpu_ops);
+EXPORT_SYMBOL(pv_mmu_ops);
+EXPORT_SYMBOL(pv_irq_ops);
-- 
1.7.0.4

