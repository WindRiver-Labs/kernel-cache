From 60a07bfb5df4c6f35d55d8c69c81f0264f2fec5f Mon Sep 17 00:00:00 2001
From: Liang Li <liang.li@windriver.com>
Date: Wed, 12 Jan 2011 19:42:31 +0800
Subject: [PATCH 1/4] wrhv: parse pci irq code can be shared

These parse pci interrupts code canbe common other than
x86 specific

Signed-off-by: Liang Li <liang.li@windriver.com>
---
 arch/x86/kernel/vbi/wrhv.c |   98 ++--------------------------------------
 kernel/vbi/wrhv.c          |  106 ++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 111 insertions(+), 93 deletions(-)

diff --git a/arch/x86/kernel/vbi/wrhv.c b/arch/x86/kernel/vbi/wrhv.c
index c4ee6e7..897788d 100644
--- a/arch/x86/kernel/vbi/wrhv.c
+++ b/arch/x86/kernel/vbi/wrhv.c
@@ -41,7 +41,6 @@
 
 #define WRHV_DEBUG_MSR          0
 #define WRHV_USE_XMLCONFIG      1
-#define WRHV_POLL_IRQ           7
 
 #define WRHV_BOOTARG_BUF_SIZE   256
 
@@ -426,6 +425,11 @@ static int __init wrhv_check_kgdboe(char *str)
 }
 early_param("kgdboe", wrhv_check_kgdboe);
 
+int __devinit wrhv_has_kgdboe(void)
+{
+	return __wrhv_kgdboe_poll;
+}
+
 static char *shared_interrupts_list;
 static int __init wrhv_check_shared_interrupts(char *str)
 {
@@ -468,98 +472,6 @@ int find_shared_interrupt(char *devfn)
 	return -1;
 }
 
-static void __devinit pci_fixup_wrhv(struct pci_dev *dev)
-{
-	int irq = -1;
-	char *devclass, devname[32] = { "Unknown" };
-	int skip_assign_irq = 0;
-
-	switch (dev->class >> 16) {
-	case PCI_BASE_CLASS_NETWORK:
-		devclass = "Ethernet";
-		if (__wrhv_kgdboe_poll) {
-			skip_assign_irq = 1;
-			irq = WRHV_POLL_IRQ;
-		}
-		break;
-
-	case PCI_BASE_CLASS_STORAGE:
-		devclass = "IDE";
-		break;
-
-	case PCI_BASE_CLASS_DISPLAY:
-		devclass = "VGA";
-		break;
-
-	case PCI_BASE_CLASS_SERIAL:
-		/* Examine more bits of the class to see if the
-		   device is specifically usb.
-		*/
-		if ((dev->class >> 8) == PCI_CLASS_SERIAL_USB) {
-			devclass = "USB";
-			break;
-		}
-		if ((dev->class >> 8) == PCI_CLASS_SERIAL_SMBUS) {
-			devclass = "SMBus";
-			break;
-		}
-
-	case PCI_BASE_CLASS_SYSTEM:
-		/* Examine more bits of the class to see if the
-		   device is "other".  This covers Intel's I/O acceleration
-		   technology aka ioatdma.
-		*/
-		if ((dev->class >> 8) == PCI_CLASS_SYSTEM_OTHER) {
-			devclass = "System";
-			break;
-		}
-
-	case PCI_BASE_CLASS_BRIDGE:
-		/* Currently its unnecessary to assign irq for
-		 * any bridge itself. Maybe we need that in the future :)
-		 */
-		skip_assign_irq = 1;
-		break;
-
-	default:
-		skip_assign_irq = 1;
-		irq = dev->irq;
-		break;
-	}
-
-	if (!skip_assign_irq) {
-		int sharedint;
-
-		/* See if a shared interrupt first */
-		snprintf(devname, sizeof devname, "%x-%x",
-			dev->bus->number, dev->devfn);
-		sharedint = find_shared_interrupt(devname);
-		if (sharedint < 0) {
-			/* Not found as a shared int, look it up directly */
-			snprintf(devname, sizeof devname, "pci%s_%x:%x",
-				devclass, dev->bus->number, dev->devfn);
-		} else {
-			snprintf(devname, sizeof devname, "pciSharedInt_%x",
-				sharedint);
-		}
-		irq = vbi_find_irq(devname, 1);
-		if (irq == VBI_INVALID_IRQ)
-			irq = WRHV_POLL_IRQ;
-		else
-			printk(KERN_INFO "WRHV-PCI: %04x:%02x:%02x.%d shared irq [%d]", pci_domain_nr(dev->bus),
-				dev->bus->number, PCI_SLOT(dev->devfn), PCI_FUNC(dev->devfn), irq);
-
-	}
-
-	if (irq != -1) {
-		dev->irq = irq;
-		printk(KERN_INFO "WRHV-PCI: %s CLASS:%x IRQ%d\n",
-			devname, dev->class, dev->irq);
-	}
-}
-
-DECLARE_PCI_FIXUP_FINAL(PCI_ANY_ID, PCI_ANY_ID, pci_fixup_wrhv);
-
 #define WRHV_PCI_FAKE_VENDOR_ID     0x1234
 #define WRHV_PCI_FAKE_DEVICE_ID     0x5678
 
diff --git a/kernel/vbi/wrhv.c b/kernel/vbi/wrhv.c
index b288af5..78874c1 100644
--- a/kernel/vbi/wrhv.c
+++ b/kernel/vbi/wrhv.c
@@ -27,6 +27,7 @@
 #include <linux/debugfs.h>
 #include <vbi/private.h>
 #include <linux/reboot.h>
+#include <linux/pci.h>
 
 #define VIOAPIC_BASE_ADDR	(&wr_vb_control->vIoapic)
 
@@ -536,6 +537,111 @@ int __weak wrhv_arch_late_init(void)
 	return 0;
 }
 
+#ifdef CONFIG_PCI
+#define WRHV_POLL_IRQ           7
+int __weak find_shared_interrupt(char *devfn)
+{
+	return -1;
+}
+
+int __weak wrhv_has_kgdboe(void)
+{
+	return 0;
+}
+
+static void __devinit pci_fixup_wrhv(struct pci_dev *dev)
+{
+	int irq = -1;
+	char *devclass, devname[32] = { "Unknown" };
+	int skip_assign_irq = 0;
+
+	switch (dev->class >> 16) {
+	case PCI_BASE_CLASS_NETWORK:
+		devclass = "Ethernet";
+		if (wrhv_has_kgdboe()) {
+			skip_assign_irq = 1;
+			irq = WRHV_POLL_IRQ;
+		}
+		break;
+
+	case PCI_BASE_CLASS_STORAGE:
+		devclass = "IDE";
+		break;
+
+	case PCI_BASE_CLASS_DISPLAY:
+		devclass = "VGA";
+		break;
+
+	case PCI_BASE_CLASS_SERIAL:
+		/* Examine more bits of the class to see if the
+		   device is specifically usb.
+		*/
+		if ((dev->class >> 8) == PCI_CLASS_SERIAL_USB) {
+			devclass = "USB";
+			break;
+		}
+		if ((dev->class >> 8) == PCI_CLASS_SERIAL_SMBUS) {
+			devclass = "SMBus";
+			break;
+		}
+
+	case PCI_BASE_CLASS_SYSTEM:
+		/* Examine more bits of the class to see if the
+		   device is "other".  This covers Intel's I/O acceleration
+		   technology aka ioatdma.
+		*/
+		if ((dev->class >> 8) == PCI_CLASS_SYSTEM_OTHER) {
+			devclass = "System";
+			break;
+		}
+
+	case PCI_BASE_CLASS_BRIDGE:
+		/* Currently its unnecessary to assign irq for
+		 * any bridge itself. Maybe we need that in the future :)
+		 */
+		skip_assign_irq = 1;
+		break;
+
+	default:
+		skip_assign_irq = 1;
+		irq = dev->irq;
+		break;
+	}
+
+	if (!skip_assign_irq) {
+		int sharedint;
+
+		/* See if a shared interrupt first */
+		snprintf(devname, sizeof devname, "%x-%x",
+			dev->bus->number, dev->devfn);
+		sharedint = find_shared_interrupt(devname);
+		if (sharedint < 0) {
+			/* Not found as a shared int, look it up directly */
+			snprintf(devname, sizeof devname, "pci%s_%x:%x",
+				devclass, dev->bus->number, dev->devfn);
+		} else {
+			snprintf(devname, sizeof devname, "pciSharedInt_%x",
+				sharedint);
+		}
+		irq = vbi_find_irq(devname, 1);
+		if (irq == VBI_INVALID_IRQ)
+			irq = WRHV_POLL_IRQ;
+		else
+			printk(KERN_INFO "WRHV-PCI: %04x:%02x:%02x.%d shared irq [%d]", pci_domain_nr(dev->bus),
+				dev->bus->number, PCI_SLOT(dev->devfn), PCI_FUNC(dev->devfn), irq);
+
+	}
+
+	if (irq != -1) {
+		dev->irq = irq;
+		printk(KERN_INFO "WRHV-PCI: %s CLASS:%x IRQ%d\n",
+			devname, dev->class, dev->irq);
+	}
+}
+
+DECLARE_PCI_FIXUP_FINAL(PCI_ANY_ID, PCI_ANY_ID, pci_fixup_wrhv);
+#endif
+
 #define WINDRIVER_NAME "windriver"
 /* sysfs ksets */
 struct kset *windriver_kset;
-- 
1.6.5.2

