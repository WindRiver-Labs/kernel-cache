From a5490e96bcd60e5a99aacb9b715f67beb4f5d2df Mon Sep 17 00:00:00 2001
From: Wendy Liang <wendy.liang@xilinx.com>
Date: Fri, 27 Jan 2017 11:53:43 -0800
Subject: [PATCH 1183/1566] remoteproc: zynqmp_r5: reinitialize TCM after
 stopping RPU

commit  df50d29578df66b3645ccf662e06c2a6d70dcd2e from
https://github.com/Xilinx/linux-xlnx.git

remoteproce vritio will access the vdev resource entry after it
stops RPU. If the resource table is in TCM, the remoteproc
will need to access TCM after stopping RPU.
However. In order to stop the RPU, will need to
reset the RPU first and then halt the RPU. In order to
access TCM after that, will need to reinitialize it. Otherwise,
kernel will panic with "unhandled fault:"
"synchronous external abort" when it reads resource table.

Signed-off-by: Wendy Liang <jliang@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/remoteproc/zynqmp_r5_remoteproc.c |   15 ++++++++++++++-
 1 files changed, 14 insertions(+), 1 deletions(-)

diff --git a/drivers/remoteproc/zynqmp_r5_remoteproc.c b/drivers/remoteproc/zynqmp_r5_remoteproc.c
index c99e689..0b1f158 100644
--- a/drivers/remoteproc/zynqmp_r5_remoteproc.c
+++ b/drivers/remoteproc/zynqmp_r5_remoteproc.c
@@ -398,13 +398,26 @@ static int zynqmp_r5_rproc_stop(struct rproc *rproc)
 {
 	struct device *dev = rproc->dev.parent;
 	struct zynqmp_r5_rproc_pdata *local = rproc->priv;
+	struct rproc_mem_entry *mem, *nmem;
 
 	dev_dbg(dev, "%s\n", __func__);
 
+	r5_reset(local, true);
 	r5_halt(local, true);
-
+	r5_request_tcm(local);
 	reg_write(local->ipi_base, IDR_OFFSET, local->ipi_dest_mask);
 	reg_write(local->ipi_base, ISR_OFFSET, local->ipi_dest_mask);
+
+	/* After it reset was once asserted, TCM will be initialized
+	 * before it can be read. E.g. remoteproc virtio will access
+	 * TCM if vdev rsc entry is in TCM after RPU stop.
+	 * The following is to initialize the TCM.
+	 */
+	list_for_each_entry_safe(mem, nmem, &local->mems, node) {
+		if ((mem->dma & 0xFFF00000) == 0xFFE00000)
+			memset(mem->va, 0, mem->len);
+	}
+
 	return 0;
 }
 
-- 
1.7.5.4

