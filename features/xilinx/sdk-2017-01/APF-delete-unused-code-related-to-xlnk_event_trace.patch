From 8a253951f4d4bf1d09cf478d71da80aba055ed4d Mon Sep 17 00:00:00 2001
From: S Mohan <s.mohan@xilinx.com>
Date: Fri, 24 Oct 2014 10:42:00 -0700
Subject: [PATCH 0879/1566] APF: delete unused code related to
 xlnk_event_trace

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

The xlnk_event_trace code was used for profiling and is not used now.
One line of the code writes a value to an SLCR register that causes
issues for non-SMP kernel

Signed-off-by: S Mohan <s.mohan@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 88c723a704f4a912532af3a9eb29ac1ad7569db1)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c         |   17 -----
 drivers/staging/apf/xlnk-event-tracer-type.h |   38 ----------
 drivers/staging/apf/xlnk-ioctl.h             |    2 -
 drivers/staging/apf/xlnk.c                   |   95 --------------------------
 drivers/staging/apf/xlnk.h                   |    2 -
 5 files changed, 0 insertions(+), 154 deletions(-)
 delete mode 100644 drivers/staging/apf/xlnk-event-tracer-type.h

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index af37a64..b8ddec8 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -38,7 +38,6 @@
 
 #include "xilinx-dma-apf.h"
 
-#include "xlnk-event-tracer-type.h"
 #include "xlnk.h"
 
 static DEFINE_MUTEX(dma_list_mutex);
@@ -362,7 +361,6 @@ static void xdma_start_transfer(struct xdma_chan *chan,
 	if (dma_is_running(chan) || dma_is_idle(chan)) {
 		/* Update tail ptr register and start the transfer */
 		DMA_OUT(&chan->regs->tdr, tail_phys);
-		xlnk_record_event(XLNK_ET_KERNEL_AFTER_DMA_KICKOFF);
 		return;
 	}
 
@@ -378,7 +376,6 @@ static void xdma_start_transfer(struct xdma_chan *chan,
 
 	/* Update tail ptr register and start the transfer */
 	DMA_OUT(&chan->regs->tdr, tail_phys);
-	xlnk_record_event(XLNK_ET_KERNEL_AFTER_DMA_KICKOFF);
 }
 
 static int xdma_setup_hw_desc(struct xdma_chan *chan,
@@ -632,12 +629,10 @@ static int pin_user_pages(unsigned long uaddr,
 	first_page = uaddr / PAGE_SIZE;
 	last_page = (uaddr + ulen - 1) / PAGE_SIZE;
 	num_pages = last_page - first_page + 1;
-	xlnk_record_event(XLNK_ET_KERNEL_BEFORE_GET_USER_PAGES);
 	down_read(&mm->mmap_sem);
 	status = get_user_pages(curr_task, mm, uaddr, num_pages, write, 1,
 				mapped_pages, NULL);
 	up_read(&mm->mmap_sem);
-	xlnk_record_event(XLNK_ET_KERNEL_AFTER_GET_USER_PAGES);
 
 	if (status == num_pages) {
 		sglist = kcalloc(num_pages,
@@ -784,7 +779,6 @@ int xdma_submit(struct xdma_chan *chan,
 	DEFINE_DMA_ATTRS(attrs);
 
 
-	xlnk_record_event(XLNK_ET_KERNEL_ENTER_DMA_SUBMIT);
 	dmahead = kmalloc(sizeof(struct xdma_head), GFP_KERNEL);
 	if (!dmahead)
 		return -ENOMEM;
@@ -818,7 +812,6 @@ int xdma_submit(struct xdma_chan *chan,
 		}
 	} else {
 		/* pin user pages is monitored separately */
-		xlnk_record_event(XLNK_ET_KERNEL_BEFORE_PIN_USER_PAGE);
 		status = pin_user_pages((unsigned long)userbuf, size,
 					dmadir != DMA_TO_DEVICE,
 					&sglist, &sgcnt, user_flags);
@@ -826,8 +819,6 @@ int xdma_submit(struct xdma_chan *chan,
 			pr_err("pin_user_pages failed\n");
 			return status;
 		}
-		xlnk_record_event(XLNK_ET_KERNEL_AFTER_PIN_USER_PAGE);
-		xlnk_record_event(XLNK_ET_KERNEL_BEFORE_DMA_MAP_SG);
 		if (!(user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE))
 			dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
 
@@ -838,7 +829,6 @@ int xdma_submit(struct xdma_chan *chan,
 			unpin_user_pages(sglist, sgcnt);
 			return -ENOMEM;
 		}
-		xlnk_record_event(XLNK_ET_KERNEL_AFTER_DMA_MAP_SG);
 
 		/* merge sg list to save dma bds */
 		sgcnt_dma = sgl_merge(sglist, sgcnt, &sglist_dma);
@@ -863,10 +853,8 @@ int xdma_submit(struct xdma_chan *chan,
 
 	dmahead->nappwords_o = nappwords_o;
 
-	xlnk_record_event(XLNK_ET_KERNEL_BEFORE_DMA_SETUP_BD);
 	status = xdma_setup_hw_desc(chan, dmahead, sglist_dma, sgcnt_dma,
 				    dmadir, nappwords_i, appwords_i);
-	xlnk_record_event(XLNK_ET_KERNEL_AFTER_DMA_SETUP_BD);
 	if (status) {
 		pr_err("setup hw desc failed\n");
 		if (!(user_flags & CF_FLAG_PHYSICALLY_CONTIGUOUS)) {
@@ -880,7 +868,6 @@ int xdma_submit(struct xdma_chan *chan,
 
 	*dmaheadpp = dmahead;
 
-	xlnk_record_event(XLNK_ET_KERNEL_LEAVE_DMA_SUBMIT);
 	return 0;
 }
 EXPORT_SYMBOL(xdma_submit);
@@ -891,7 +878,6 @@ int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
 	void *kaddr, *paddr;
 	int size;
 	DEFINE_DMA_ATTRS(attrs);
-	xlnk_record_event(XLNK_ET_KERNEL_ENTER_DMA_WAIT);
 
 	if (chan->poll_mode) {
 		xilinx_chan_desc_cleanup(chan);
@@ -899,14 +885,12 @@ int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
 		wait_for_completion(&dmahead->cmp);
 
 	if (!(user_flags & CF_FLAG_PHYSICALLY_CONTIGUOUS)) {
-		xlnk_record_event(XLNK_ET_KERNEL_BEFORE_DMA_UNMAP_SG);
 		if (!(user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE))
 			dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
 
 		get_dma_ops(chan->dev)->unmap_sg(chan->dev, dmahead->sglist,
 						 dmahead->sgcnt,
 						 dmahead->dmadir, &attrs);
-		xlnk_record_event(XLNK_ET_KERNEL_AFTER_DMA_UNMAP_SG);
 
 		unpin_user_pages(dmahead->sglist, dmahead->sgcnt);
 	} else {
@@ -921,7 +905,6 @@ int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
 			dmac_unmap_area(kaddr, size, DMA_FROM_DEVICE);
 		}
 	}
-	xlnk_record_event(XLNK_ET_KERNEL_LEAVE_DMA_WAIT);
 	return 0;
 }
 EXPORT_SYMBOL(xdma_wait);
diff --git a/drivers/staging/apf/xlnk-event-tracer-type.h b/drivers/staging/apf/xlnk-event-tracer-type.h
deleted file mode 100644
index 21217f4..0000000
--- a/drivers/staging/apf/xlnk-event-tracer-type.h
+++ /dev/null
@@ -1,38 +0,0 @@
-#ifndef XLNK_EVENT_TRACER_TYPE_H
-#define XLNK_EVENT_TRACER_TYPE_H
-
-#define XLNK_ET_USERSPACE_BEFORE_ACC_TRANSFER_CALL	50
-#define XLNK_ET_USERSPACE_BEFORE_PORT_WAIT4COMPLETION	51
-
-#define XLNK_ET_USERSPACE_BEFORE_DMA_SUBMIT		100
-#define XLNK_ET_USERSPACE_AFTER_DMA_SUBMIT		101
-#define XLNK_ET_USERSPACE_BEFORE_DMA_WAIT4COMPLETION	102
-#define XLNK_ET_USERSPACE_AFTER_DMA_WAIT4COMPLETION	103
-
-#define XLNK_ET_KERNEL_ENTER_IOCTL			5000
-#define XLNK_ET_KERNEL_LEAVE_IOCTL			5001
-#define XLNK_ET_KERNEL_ENTER_DMA_SUBMIT			5002
-#define XLNK_ET_KERNEL_LEAVE_DMA_SUBMIT			5003
-#define XLNK_ET_KERNEL_BEFORE_PIN_USER_PAGE		5004
-#define XLNK_ET_KERNEL_BEFORE_GET_USER_PAGES		5005
-#define XLNK_ET_KERNEL_AFTER_GET_USER_PAGES		5006
-#define XLNK_ET_KERNEL_AFTER_PIN_USER_PAGE		5007
-#define XLNK_ET_KERNEL_BEFORE_DMA_MAP_SG		5008
-#define XLNK_ET_KERNEL_AFTER_DMA_MAP_SG			5009
-#define XLNK_ET_KERNEL_BEFORE_DMA_SETUP_BD		5010
-#define XLNK_ET_KERNEL_AFTER_DMA_KICKOFF		5011
-#define XLNK_ET_KERNEL_AFTER_DMA_SETUP_BD		5012
-#define XLNK_ET_KERNEL_ENTER_DMA_WAIT			5013
-#define XLNK_ET_KERNEL_BEFORE_DMA_UNMAP_SG		5014
-#define XLNK_ET_KERNEL_AFTER_DMA_UNMAP_SG		5015
-#define XLNK_ET_KERNEL_LEAVE_DMA_WAIT			5016
-
-
-#define XLNK_ET_KERNEL_DMA_MM2S_INTR			5100
-#define XLNK_ET_KERNEL_DMA_MM2S_HALF_BOTTOM_START	5101
-#define XLNK_ET_KERNEL_DMA_MM2S_HALF_BOTTOM_END		5102
-#define XLNK_ET_KERNEL_DMA_S2MM_INTR			5110
-#define XLNK_ET_KERNEL_DMA_S2MM_HALF_BOTTOM_START	5111
-#define XLNK_ET_KERNEL_DMA_S2MM_HALF_BOTTOM_END		5112
-
-#endif
diff --git a/drivers/staging/apf/xlnk-ioctl.h b/drivers/staging/apf/xlnk-ioctl.h
index 665fc27..685570e 100644
--- a/drivers/staging/apf/xlnk-ioctl.h
+++ b/drivers/staging/apf/xlnk-ioctl.h
@@ -26,8 +26,6 @@
 #define XLNK_IOCDEVUNREGISTER	_IOWR(XLNK_IOC_MAGIC, 18, unsigned long)
 #define XLNK_IOCCDMAREQUEST	_IOWR(XLNK_IOC_MAGIC, 19, unsigned long)
 #define XLNK_IOCCDMASUBMIT	_IOWR(XLNK_IOC_MAGIC, 20, unsigned long)
-#define XLNK_IOCGETEVENTSIZE	_IOWR(XLNK_IOC_MAGIC, 21, unsigned long)
-#define XLNK_IOCDUMPEVENTS	_IOWR(XLNK_IOC_MAGIC, 22, unsigned long)
 #define XLNK_IOCMCDMAREGISTER	_IOWR(XLNK_IOC_MAGIC, 23, unsigned long)
 #define XLNK_IOCCACHECTRL	_IOWR(XLNK_IOC_MAGIC, 24, unsigned long)
 
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index 5de6566..6c8e80f 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -35,7 +35,6 @@
 #include <linux/wait.h>
 
 #include "xlnk-ioctl.h"
-#include "xlnk-event-tracer-type.h"
 #include "xlnk.h"
 
 #ifdef CONFIG_XILINX_DMA_APF
@@ -107,9 +106,6 @@ static void xlnk_vma_close(struct vm_area_struct *vma);
 
 static int xlnk_init_bufpool(void);
 
-static void xlnk_start_benchmark_counter(void);
-static int xlnk_dump_events(unsigned long buf);
-static int xlnk_get_event_size(unsigned long buf);
 
 static int xlnk_shutdown(unsigned long buf);
 static int xlnk_recover_resource(unsigned long buf);
@@ -263,9 +259,6 @@ static int xlnk_probe(struct platform_device *pdev)
 
 	xlnk_devpacks_init();
 
-#ifdef CONFIG_ARCH_ZYNQ
-	xlnk_start_benchmark_counter();
-#endif
 
 	return 0;
 
@@ -1038,7 +1031,6 @@ static long xlnk_ioctl(struct file *filp, unsigned int code,
 {
 	int status = 0;
 
-	xlnk_record_event(XLNK_ET_KERNEL_ENTER_IOCTL);
 
 	if (_IOC_TYPE(code) != XLNK_IOC_MAGIC)
 		return -ENOTTY;
@@ -1077,15 +1069,9 @@ static long xlnk_ioctl(struct file *filp, unsigned int code,
 	case XLNK_IOCDEVUNREGISTER:
 		status = xlnk_devunregister_ioctl(filp, code, args);
 		break;
-	case XLNK_IOCGETEVENTSIZE:
-		status = xlnk_get_event_size(args);
-		break;
 	case XLNK_IOCCACHECTRL:
 		status = xlnk_cachecontrol_ioctl(filp, code, args);
 		break;
-	case XLNK_IOCDUMPEVENTS:
-		status = xlnk_dump_events(args);
-		break;
 	case XLNK_IOCSHUTDOWN:
 		status = xlnk_shutdown(args);
 		break;
@@ -1094,7 +1080,6 @@ static long xlnk_ioctl(struct file *filp, unsigned int code,
 		break;
 	}
 
-	xlnk_record_event(XLNK_ET_KERNEL_LEAVE_IOCTL);
 	return status;
 }
 
@@ -1147,87 +1132,7 @@ static void xlnk_vma_close(struct vm_area_struct *vma)
 }
 
 
-#ifdef CONFIG_ARCH_ZYNQ
-
-/*
- * Xidane XLNK benchmark counter support
- */
-static u32 __iomem *bc_virt;
-
-
-/* Zynq global counter */
-static const unsigned long bc_phyaddr = 0xF8F00200;
-static const unsigned long bc_to_cpu_shift = 1;
-static const unsigned long bc_csr_size = 16;
-static const unsigned long bc_ctr_offset = 2;
-static const unsigned long bc_ctr_start = 1;
-static const unsigned long bc_data_offset;
-
-
-static void xlnk_start_benchmark_counter(void)
-{
-	bc_virt = ioremap(bc_phyaddr, bc_csr_size);
-	if (bc_virt) {
-		iowrite32(bc_ctr_start, bc_virt + bc_ctr_offset);
-		pr_info("xlnk: benchmark counter started\n");
-		/* iounmap(bc_virt); */
-	}
-}
-
-#define XLNK_EVENT_TRACER_ENTRY_NUM 60000
-static struct event_tracer {
-	u32 event_id;
-	u32 event_time;
-} xlnk_et[XLNK_EVENT_TRACER_ENTRY_NUM];
-
-static unsigned long xlnk_et_index;
-static unsigned long xlnk_et_numbers_to_dump;
 
-void xlnk_record_event(u32 event_id)
-{
-	if (xlnk_et_index >= XLNK_EVENT_TRACER_ENTRY_NUM)
-		return;
-
-	xlnk_et[xlnk_et_index].event_id = event_id;
-	xlnk_et[xlnk_et_index].event_time = ioread32(bc_virt +
-						bc_data_offset) <<
-						bc_to_cpu_shift;
-	xlnk_et_index++;
-}
-EXPORT_SYMBOL(xlnk_record_event);
-
-static int xlnk_get_event_size(unsigned long args)
-{
-	unsigned long __user *datap = (unsigned long __user *)args;
-
-	/* take a snapshot of current index and only copy this
-	 * size to user space thru xlnk_dump_events(), as the snapshot
-	 * value determine the dynamically created user space event
-	 * trace buffer size  but the xlnk_et_index could keep going up
-	 * with any xlnk_record_event() calls after this function
-	 */
-	xlnk_et_numbers_to_dump = xlnk_et_index;
-	put_user(xlnk_et_numbers_to_dump, datap);
-	return 0;
-}
-
-static int xlnk_dump_events(unsigned long buf)
-{
-	/* only dump the number of event traces reported thru
-	 * xlnk_get_event_size() and ignore the rest to avoid
-	 * buffer overflow issue
-	 */
-	if (copy_to_user((void __user *)buf, xlnk_et,
-		xlnk_et_numbers_to_dump * sizeof(struct event_tracer)))
-		return -EFAULT;
-
-	/* clear up event pool so it's ready to use again */
-	xlnk_et_index = 0;
-	xlnk_et_numbers_to_dump = 0;
-
-	return 0;
-}
-#endif
 
 
 static int xlnk_shutdown(unsigned long buf)
diff --git a/drivers/staging/apf/xlnk.h b/drivers/staging/apf/xlnk.h
index e44fad7..6059cf0 100644
--- a/drivers/staging/apf/xlnk.h
+++ b/drivers/staging/apf/xlnk.h
@@ -13,8 +13,6 @@
 #define CF_FLAG_PHYSICALLY_CONTIGUOUS	0x00000002
 #define CF_FLAG_DMAPOLLING		0x00000004
 
-extern void xlnk_record_event(u32 event_id);
-
 
 enum xlnk_dma_direction {
 	XLNK_DMA_BI = 0,
-- 
1.7.5.4

