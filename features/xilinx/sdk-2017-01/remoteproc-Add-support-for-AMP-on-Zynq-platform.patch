From 070a4e6ede5ad46c5f955cf3a2e4dcdb7f2882f2 Mon Sep 17 00:00:00 2001
From: Michal Simek <monstr@monstr.eu>
Date: Thu, 18 Oct 2012 17:24:47 +0200
Subject: [PATCH 0999/1566] remoteproc: Add support for AMP on Zynq platform

commit  5649077aa215cdad54afc0ad77dfb7626654a5d1 from
https://github.com/Xilinx/linux-xlnx.git

There is intention to run AMP on Zynq platform where
the first cpu will run Linux and the second any firmware
(RTOS or standalone).

Below are device-tree fragments which are required to get
remoteproc to work:

Memory node:
	ps7_ddr_0: memory@0 {
		device_type = "memory";
		reg = < 0x0  0x10000000  0x10000000 0x20000000>;
	} ;

Memory node must be divided to two memory regions.
The first region is allocated for remoteproc.
Also CONFIG_PHYS_OFFSET=0x10000000 must be setup for this
particular case.

Device node:
	test: remoteproc-test@0 {
		compatible = "zynq_remoteproc";
		reg = < 0x0 0x10000000 >;
		interrupt-parent = <&ps7_scugic_0>;
		interrupts = < 0 37 0 0 38 0 0 39 0>;
		firmware = "test";
		ipino = <5>;
		vring0 = <2>;
		vring1 = <3>;
	} ;

"reg" property contains information about address range which
should be used for remoteproc.
"interrupts" property contains all IRQs which are necessary
to forward for the second CPU.
"firmware" contains firmware name which remoteproc will load.
"ipino" property contains IPI number which will used for
contaction Linux from firmware if any message is available.
"vring0" and "vring1" properties contains swirq numbers
which Linux uses for communicating with firmware.

Implementation details:
probe function is trying to check all sources required by firmware.
Allocation IPI handler, allocation IRQ to protect that these IRQs
won't be used by any other kernel module.

There is expectation from firmware resource table that carveouts
must be allocated first because it must sit at the memory started
physical address 0x0.

IPI is protected by irq_enter/irq_exit where scheduling is not
permitted that's why work_struct was used.

Signed-off-by: Michal Simek <monstr@monstr.eu>

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/remoteproc/Kconfig           |   11 ++
 drivers/remoteproc/Makefile          |    1 +
 drivers/remoteproc/zynq_remoteproc.c |  308 ++++++++++++++++++++++++++++++++++
 3 files changed, 320 insertions(+), 0 deletions(-)
 create mode 100644 drivers/remoteproc/zynq_remoteproc.c

diff --git a/drivers/remoteproc/Kconfig b/drivers/remoteproc/Kconfig
index a923493..7ef9c47 100644
--- a/drivers/remoteproc/Kconfig
+++ b/drivers/remoteproc/Kconfig
@@ -31,6 +31,17 @@ config OMAP_REMOTEPROC
 	  It's safe to say n here if you're not interested in multimedia
 	  offloading or just want a bare minimum kernel.
 
+config ZYNQ_REMOTEPROC
+	tristate "ZYNQ remoteproc support"
+	depends on ARCH_ZYNQ
+	select REMOTEPROC
+	select RPMSG
+	select SMP
+	default m
+	help
+	  Say y here to support Xilinx ZynQ remote processors (the second
+	  ARM CORTEX-A9 cpu) via the remote processor framework.
+
 config STE_MODEM_RPROC
 	tristate "STE-Modem remoteproc support"
 	depends on HAS_DMA
diff --git a/drivers/remoteproc/Makefile b/drivers/remoteproc/Makefile
index 62fb7d8..685c114 100644
--- a/drivers/remoteproc/Makefile
+++ b/drivers/remoteproc/Makefile
@@ -8,6 +8,7 @@ remoteproc-y				+= remoteproc_debugfs.o
 remoteproc-y				+= remoteproc_virtio.o
 remoteproc-y				+= remoteproc_elf_loader.o
 obj-$(CONFIG_OMAP_REMOTEPROC)		+= omap_remoteproc.o
+obj-$(CONFIG_ZYNQ_REMOTEPROC)		+= zynq_remoteproc.o
 obj-$(CONFIG_STE_MODEM_RPROC)	 	+= ste_modem_rproc.o
 obj-$(CONFIG_WKUP_M3_RPROC)		+= wkup_m3_rproc.o
 obj-$(CONFIG_DA8XX_REMOTEPROC)		+= da8xx_remoteproc.o
diff --git a/drivers/remoteproc/zynq_remoteproc.c b/drivers/remoteproc/zynq_remoteproc.c
new file mode 100644
index 0000000..74bb671
--- /dev/null
+++ b/drivers/remoteproc/zynq_remoteproc.c
@@ -0,0 +1,308 @@
+/*
+ * Zynq Remote Processor driver
+ *
+ * Copyright (C) 2012 Michal Simek <monstr@monst.eu>
+ * Copyright (C) 2012 PetaLogix
+ *
+ * Based on origin OMAP Remote Processor driver
+ *
+ * Copyright (C) 2011 Texas Instruments, Inc.
+ * Copyright (C) 2011 Google, Inc.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/moduleloader.h>
+#include <linux/err.h>
+#include <linux/platform_device.h>
+#include <linux/dma-mapping.h>
+#include <linux/remoteproc.h>
+#include <linux/interrupt.h>
+#include <linux/of_irq.h>
+#include <linux/smp.h>
+#include <asm/hardware/gic.h>
+#include <asm/outercache.h>
+#include <mach/system.h>
+#include <linux/slab.h>
+
+#include "remoteproc_internal.h"
+
+/* Structure for storing IRQs */
+struct irq_list {
+	int irq;
+	struct list_head list;
+};
+
+/* Private data */
+struct zynq_rproc_pdata {
+	struct irq_list mylist;
+	struct rproc *rproc;
+	u32 ipino;
+	u32 vring0;
+	u32 vring1;
+	u32 mem_start;
+	u32 mem_end;
+};
+
+/* Store rproc for IPI handler */
+struct platform_device *remoteprocdev;
+static struct work_struct workqueue;
+
+static void handle_event(struct work_struct *work)
+{
+	struct zynq_rproc_pdata *local = platform_get_drvdata(remoteprocdev);
+
+	outer_flush_range(local->mem_start, local->mem_end);
+
+	if (rproc_vq_interrupt(local->rproc, 0) == IRQ_NONE)
+		dev_dbg(&remoteprocdev->dev, "no message found in vqid 0\n");
+}
+
+static void ipi_kick(void)
+{
+	dev_dbg(&remoteprocdev->dev, "KICK Linux because of pending message\n");
+	schedule_work(&workqueue);
+}
+
+static int zynq_rproc_start(struct rproc *rproc)
+{
+	struct device *dev = rproc->dev.parent;
+	struct platform_device *pdev = to_platform_device(dev);
+	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+
+	dev_dbg(dev, "%s\n", __func__);
+	INIT_WORK(&workqueue, handle_event);
+
+	outer_flush_range(local->mem_start, local->mem_end);
+
+	remoteprocdev = pdev;
+	zynq_cpu1_start(0);
+
+	return 0;
+}
+
+/* kick a firmware */
+static void zynq_rproc_kick(struct rproc *rproc, int vqid)
+{
+  	struct device *dev = rproc->dev.parent;
+	struct platform_device *pdev = to_platform_device(dev);
+	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+
+	dev_dbg(dev, "KICK Firmware to start send messages vqid %d\n",
+									vqid);
+	/* Send swirq to firmware */
+	if (!vqid)
+		gic_raise_softirq(cpumask_of(1), local->vring0);
+	else
+		gic_raise_softirq(cpumask_of(1), local->vring1);
+}
+
+/* power off the remote processor */
+static int zynq_rproc_stop(struct rproc *rproc)
+{
+	dev_dbg(rproc->dev.parent, "%s\n", __func__);
+
+	/* FIXME missing reset option */
+	return 0;
+}
+
+static struct rproc_ops zynq_rproc_ops = {
+	.start		= zynq_rproc_start,
+	.stop		= zynq_rproc_stop,
+	.kick		= zynq_rproc_kick,
+};
+
+/* Just to detect bug if interrupt forwarding is broken */
+static irqreturn_t zynq_remoteproc_interrupt(int irq, void *dev_id)
+{
+	struct device *dev = dev_id;
+
+	dev_err(dev, "GIC IRQ is not forwarded correctly\n");
+	return IRQ_HANDLED;
+}
+
+static void clear_irq(struct platform_device *pdev)
+{
+	struct list_head *pos, *q;
+	struct irq_list *tmp;
+	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+
+	dev_info(&pdev->dev, "Deleting the irq_list\n");
+	list_for_each_safe(pos, q, &local->mylist.list) {
+		tmp = list_entry(pos, struct irq_list, list);
+		free_irq(tmp->irq, &pdev->dev);
+		gic_set_cpu(0, tmp->irq);
+		list_del(pos);
+		kfree(tmp);
+	}
+}
+
+static int __devinit zynq_remoteproc_probe(struct platform_device *pdev)
+{
+	const unsigned char *prop;
+	struct resource *res; /* IO mem resources */
+	int ret = 0;
+	struct irq_list *tmp;
+	int count;
+
+	struct zynq_rproc_pdata *local = kzalloc(
+				sizeof(struct zynq_rproc_pdata), GFP_KERNEL);
+	if (!local) {
+		dev_err(&pdev->dev, "Unable to alloc private data\n");
+		return -ENOMEM;
+	}
+
+	platform_set_drvdata(pdev, local);
+
+	/* Declare memory for firmware */
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "invalid address\n");
+		return -ENODEV;
+	}
+
+	local->mem_start = res->start;
+	local->mem_end = res->end;
+
+	/* Alloc phys addr from 0 to max_addr for firmware */
+	ret = dma_declare_coherent_memory(&pdev->dev, local->mem_start,
+		local->mem_start, local->mem_end - local->mem_start + 1,
+		DMA_MEMORY_IO);
+	if (!ret) {
+		dev_err(&pdev->dev, "dma_declare_coherent_memory failed\n");
+		return ret;
+	}
+
+	ret = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
+	if (ret) {
+		dev_err(&pdev->dev, "dma_set_coherent_mask: %d\n", ret);
+		return ret;
+	}
+
+	/* Init list for IRQs - it can be long list */
+	INIT_LIST_HEAD(&local->mylist.list);
+
+	count = of_irq_count(pdev->dev.of_node);
+	/* Alloc IRQ based on DTS to be sure that other driver will use it */
+	while (count--) {
+		tmp = kzalloc(sizeof(struct irq_list), GFP_KERNEL);
+		if (!tmp) {
+			dev_err(&pdev->dev, "Unable to alloc irq list\n");
+			ret = -ENOMEM;
+			goto irq_fault;
+		}
+
+		tmp->irq = irq_of_parse_and_map(pdev->dev.of_node, count);
+
+		dev_dbg(&pdev->dev, "%d: Alloc irq: %d\n", count, tmp->irq);
+
+		/* Allocating shared IRQs will ensure that any module will
+		 * use these IRQs */
+		ret = request_irq(tmp->irq, zynq_remoteproc_interrupt, 0,
+					dev_name(&pdev->dev), &pdev->dev);
+		if (ret) {
+			dev_err(&pdev->dev, "IRQ %d already allocated\n",
+								tmp->irq);
+			goto irq_fault;
+		}
+		gic_set_cpu(1, tmp->irq);
+		list_add(&(tmp->list), &(local->mylist.list));
+	}
+
+	/* Allocate free IPI number */
+	local->ipino = be32_to_cpup(of_get_property(pdev->dev.of_node,
+								"ipino", NULL));
+	if (local->ipino) {
+		ret = set_ipi_handler(local->ipino, ipi_kick, "Firmware kick");
+		if (ret) {
+			dev_err(&pdev->dev, "IPI handler already registered\n");
+			goto ipi_fault;
+		}
+	} else
+		goto ipi_fault;
+
+
+	local->vring0 = be32_to_cpup(of_get_property(pdev->dev.of_node,
+							"vring0", NULL));
+	local->vring1 = be32_to_cpup(of_get_property(pdev->dev.of_node,
+							"vring1", NULL));
+	if (!local->vring0 || !local->vring1) {
+		dev_err(&pdev->dev, "Please setup RX/TX swirq to firmware\n");
+		goto ipi_fault;
+	}
+
+	prop = of_get_property(pdev->dev.of_node, "firmware", NULL);
+	if (prop) {
+		dev_dbg(&pdev->dev, "Using firmware: %s\n", prop);
+		local->rproc = rproc_alloc(&pdev->dev, dev_name(&pdev->dev),
+				&zynq_rproc_ops, prop, sizeof(struct rproc));
+		if (!local->rproc) {
+			dev_err(&pdev->dev, "rproc allocation failed\n");
+			goto rproc_fault;
+		}
+
+		ret = rproc_add(local->rproc);
+		if (ret) {
+			dev_err(&pdev->dev, "rproc registration failed\n");
+			goto rproc_fault;
+		}
+
+		return ret;
+	} else
+		ret = -ENODEV;
+
+rproc_fault:
+	rproc_put(local->rproc);
+ipi_fault:
+	clear_ipi_handler(local->ipino);
+
+irq_fault:
+	clear_irq(pdev);
+
+	return ret;
+}
+
+static int __devexit zynq_remoteproc_remove(struct platform_device *pdev)
+{
+	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+
+	dev_info(&pdev->dev, "%s\n", __func__);
+
+	clear_ipi_handler(local->ipino);
+	clear_irq(pdev);
+
+	rproc_del(local->rproc);
+	rproc_put(local->rproc);
+
+	return 0;
+}
+
+/* Match table for OF platform binding */
+static struct of_device_id zynq_remoteproc_match[] __devinitdata = {
+	{ .compatible = "zynq_remoteproc", },
+	{ /* end of list */ },
+};
+MODULE_DEVICE_TABLE(of, zynq_remoteproc_match);
+
+static struct platform_driver zynq_remoteproc_driver = {
+	.probe = zynq_remoteproc_probe,
+	.remove = __devexit_p(zynq_remoteproc_remove),
+	.driver = {
+		.name = "zynq_remoteproc",
+		.owner = THIS_MODULE,
+		.of_match_table = zynq_remoteproc_match,
+	},
+};
+module_platform_driver(zynq_remoteproc_driver);
+
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("Zynq remote processor control driver");
-- 
1.7.5.4

