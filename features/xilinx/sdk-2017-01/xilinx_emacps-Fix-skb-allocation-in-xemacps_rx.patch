From ad3f064e9d5c31f47b7ac582a33ab48d6f6ec4fa Mon Sep 17 00:00:00 2001
From: Thomas Betker <thomas.betker@rohde-schwarz.com>
Date: Sat, 11 May 2013 11:10:39 +0200
Subject: [PATCH 0108/1566] xilinx_emacps: Fix skb allocation in xemacps_rx()

In xemacps_rx(), allocate the new skb before handling the old one. If
netdev_alloc_skb() fails, we don't want the Rx BD list to get stuck in
an inconsistent state; instead, we try again with the next interrupt.

We also return numbdfree now when skb allocation fails, not 0.

Signed-off-by: Thomas Betker <thomas.betker@rohde-schwarz.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   28 +++++++++++++-------------
 1 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index f33aa64..03dccf3 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1108,7 +1108,20 @@ static int xemacps_rx(struct net_local *lp, int budget)
 	cur_p = &lp->rx_bd[lp->rx_bd_ci];
 	regval = cur_p->addr;
 	rmb();
-	while (regval & XEMACPS_RXBUF_NEW_MASK) {
+	while (numbdfree < budget) {
+		if (!(regval & XEMACPS_RXBUF_NEW_MASK))
+			break;
+
+		new_skb = netdev_alloc_skb(lp->ndev, XEMACPS_RX_BUF_SIZE);
+		if (new_skb == NULL) {
+			dev_err(&lp->ndev->dev, "no memory for new sk_buff\n");
+			break;
+		}
+		/* Get dma handle of skb->data */
+		new_skb_baddr = (u32) dma_map_single(lp->ndev->dev.parent,
+					new_skb->data,
+					XEMACPS_RX_BUF_SIZE,
+					DMA_FROM_DEVICE);
 
 		/* the packet length */
 		len = cur_p->ctrl & XEMACPS_RXBUF_LEN_MASK;
@@ -1153,17 +1166,6 @@ static int xemacps_rx(struct net_local *lp, int budget)
 		packets++;
 		netif_receive_skb(skb);
 
-		new_skb = netdev_alloc_skb(lp->ndev, XEMACPS_RX_BUF_SIZE);
-		if (new_skb == NULL) {
-			dev_err(&lp->ndev->dev, "no memory for new sk_buff\n");
-			lp->rx_skb[lp->rx_bd_ci].skb = NULL;
-			return 0;
-		}
-		/* Get dma handle of skb->data */
-		new_skb_baddr = (u32) dma_map_single(lp->ndev->dev.parent,
-					new_skb->data,
-					XEMACPS_RX_BUF_SIZE,
-					DMA_FROM_DEVICE);
 		cur_p->addr = (cur_p->addr & ~XEMACPS_RXBUF_ADD_MASK)
 					| (new_skb_baddr);
 		lp->rx_skb[lp->rx_bd_ci].skb = new_skb;
@@ -1180,8 +1182,6 @@ static int xemacps_rx(struct net_local *lp, int budget)
 		regval = cur_p->addr;
 		rmb();
 		numbdfree++;
-		if (numbdfree == budget)
-			break;
 	}
 	wmb();
 	lp->stats.rx_packets += packets;
-- 
1.7.5.4

