From 51716a2c17a0c8df3ab9399c3c1caf8a79c53429 Mon Sep 17 00:00:00 2001
From: Kedareswara rao Appana <appana.durga.rao@xilinx.com>
Date: Wed, 8 Mar 2017 16:22:17 +0530
Subject: [PATCH 1415/1566] net: ethernet: axienet: Add clock support

commit  48b19c8e143660322c2b655f6b51104e5a15cd73 from
https://github.com/Xilinx/linux-xlnx.git

This patch adds clock support in the driver.

Signed-off-by: Kedareswara rao Appana <appanad@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_axienet.h      |    4 ++
 drivers/net/ethernet/xilinx/xilinx_axienet_main.c |   49 ++++++++++++++++++++-
 2 files changed, 51 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet.h b/drivers/net/ethernet/xilinx/xilinx_axienet.h
index f057dcb..a88c078 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet.h
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet.h
@@ -494,6 +494,8 @@ struct axidma_bd {
  * @rx_ts_regs:	  Base address for the rx axififo device address space.
  * @tstamp_config: Hardware timestamp config structure.
  * @tx_ptpheader: Stores the tx ptp header.
+ * @eth_clk: Clock resource for etherent mac.
+ * @dma_clk: Clock resource for dma controller.
  */
 struct axienet_local {
 	struct net_device *ndev;
@@ -558,6 +560,8 @@ struct axienet_local {
 	struct hwtstamp_config tstamp_config;
 	u8 *tx_ptpheader;
 #endif
+	struct clk *eth_clk;
+	struct clk *dma_clk;
 };
 
 /**
diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index de33206..7380790 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -40,6 +40,7 @@
 #include <linux/random.h>
 #include <net/sock.h>
 #include <linux/xilinx_phy.h>
+#include <linux/clk.h>
 
 #include "xilinx_axienet.h"
 
@@ -2395,12 +2396,50 @@ static int axienet_probe(struct platform_device *pdev)
 	spin_lock_init(&lp->tx_lock);
 	spin_lock_init(&lp->rx_lock);
 
+	lp->dma_clk = devm_clk_get(&pdev->dev, "dma_clk");
+	if (IS_ERR(lp->dma_clk)) {
+		if (PTR_ERR(lp->dma_clk) != -ENOENT) {
+			ret = PTR_ERR(lp->dma_clk);
+			goto free_netdev;
+		}
+
+		/* Clock framework support is optional, continue on
+		 * anyways if we don't find a matching clock.
+		 */
+		 lp->dma_clk = NULL;
+	}
+
+	ret = clk_prepare_enable(lp->dma_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable to enable dma clock.\n");
+		goto free_netdev;
+	}
+
+	lp->eth_clk = devm_clk_get(&pdev->dev, "ethernet_clk");
+	if (IS_ERR(lp->eth_clk)) {
+		if (PTR_ERR(lp->eth_clk) != -ENOENT) {
+			ret = PTR_ERR(lp->eth_clk);
+			goto err_disable_dmaclk;
+		}
+
+		/* Clock framework support is optional, continue on
+		 * anyways if we don't find a matching clock.
+		 */
+		 lp->eth_clk = NULL;
+	}
+
+	ret = clk_prepare_enable(lp->eth_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable to enable eth clock.\n");
+		goto err_disable_dmaclk;
+	}
+
 	/* Retrieve the MAC address */
 	ret = of_property_read_u8_array(pdev->dev.of_node,
 					"local-mac-address", mac_addr, 6);
 	if (ret) {
 		dev_err(&pdev->dev, "could not find MAC address\n");
-		goto free_netdev;
+		goto err_disable_ethclk;
 	}
 	axienet_set_mac_address(ndev, (void *)mac_addr);
 
@@ -2427,11 +2466,15 @@ static int axienet_probe(struct platform_device *pdev)
 	if (ret) {
 		dev_err(lp->dev, "register_netdev() error (%i)\n", ret);
 		axienet_mdio_teardown(lp);
-		goto free_netdev;
+		goto err_disable_ethclk;
 	}
 
 	return 0;
 
+err_disable_dmaclk:
+	clk_disable_unprepare(lp->dma_clk);
+err_disable_ethclk:
+	clk_disable_unprepare(lp->eth_clk);
 free_netdev:
 	free_netdev(ndev);
 
@@ -2446,6 +2489,8 @@ static int axienet_remove(struct platform_device *pdev)
 	axienet_mdio_teardown(lp);
 	netif_napi_del(&lp->napi);
 	unregister_netdev(ndev);
+	clk_disable_unprepare(lp->eth_clk);
+	clk_disable_unprepare(lp->dma_clk);
 
 	of_node_put(lp->phy_node);
 	lp->phy_node = NULL;
-- 
1.7.5.4

