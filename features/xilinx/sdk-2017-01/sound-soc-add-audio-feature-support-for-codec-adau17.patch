From dd6ed5a47aa215744fae62998a77eaf05a0421ab Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Tue, 14 Nov 2017 17:58:12 +0800
Subject: [PATCH] sound: soc: add audio feature support for codec adau1761

In order to implement audio feature beased on codec adau1761, get file
zed_adau1761.c is from https://github.com/analogdevicesinc/linux.git
The key point of supporting codec adau1761 is to enable FPGA clock.
Because the MCLK of codec adau1761 if from FPGA side.
The firmware for codec adau1761 is used by DSP module that is a part of
adau1761. Without firmware, codec adau1761 can also work well, so it is
not a necessary thing and will not be downloaded on mini-itx platform.
If users have their own firmware for codec adau1761, they can remove
the platform limitation in adau1761.c.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/boot/dts/zynq-mini-itx-adv7511.dts |    9 ++-
 sound/soc/adi/Kconfig                       |    6 +
 sound/soc/adi/Makefile                      |    2 +
 sound/soc/adi/zed_adau1761.c                |  164 +++++++++++++++++++++++++++
 sound/soc/codecs/adau1761.c                 |    2 +
 5 files changed, 182 insertions(+), 1 deletions(-)
 create mode 100644 sound/soc/adi/zed_adau1761.c

diff --git a/arch/arm/boot/dts/zynq-mini-itx-adv7511.dts b/arch/arm/boot/dts/zynq-mini-itx-adv7511.dts
index c260c11..9c22c15 100644
--- a/arch/arm/boot/dts/zynq-mini-itx-adv7511.dts
+++ b/arch/arm/boot/dts/zynq-mini-itx-adv7511.dts
@@ -16,7 +16,9 @@
 /include/ "zynq-mini-itx.dtsi"
 
 / {
-fpag-axi@0 {
+	compatible = "xlnx,zynq-7000", "xlnx,mini-itx";
+
+	fpag-axi@0 {
 		compatible = "simple-bus";
 		#address-cells = <0x1>;
 		#size-cells = <0x1>;
@@ -163,3 +165,8 @@ fpag-axi@0 {
 
 	};
 };
+
+&clkc {
+	fclk-enable = <0xf>;
+	ps-clk-frequency = <33333333>;
+};
diff --git a/sound/soc/adi/Kconfig b/sound/soc/adi/Kconfig
index dd763f5..7e6e0cd 100644
--- a/sound/soc/adi/Kconfig
+++ b/sound/soc/adi/Kconfig
@@ -19,3 +19,9 @@ config SND_SOC_ADI_AXI_SPDIF
 	select REGMAP_MMIO
 	help
 	  ASoC driver for the Analog Devices AXI-SPDIF softcore peripheral.
+
+config SND_SOC_ZED_ADAU1761
+       tristate "ZED board sound support"
+       depends on SND_SOC_ADI
+       select SND_SOC_ADI_AXI_I2S
+       select SND_SOC_ADAU1761_I2C
diff --git a/sound/soc/adi/Makefile b/sound/soc/adi/Makefile
index 64456c1..cebdbfe 100644
--- a/sound/soc/adi/Makefile
+++ b/sound/soc/adi/Makefile
@@ -1,5 +1,7 @@
 snd-soc-adi-axi-i2s-objs := axi-i2s.o
 snd-soc-adi-axi-spdif-objs := axi-spdif.o
+snd-soc-zed-adau1761-objs := zed_adau1761.o
 
 obj-$(CONFIG_SND_SOC_ADI_AXI_I2S) += snd-soc-adi-axi-i2s.o
 obj-$(CONFIG_SND_SOC_ADI_AXI_SPDIF) += snd-soc-adi-axi-spdif.o
+obj-$(CONFIG_SND_SOC_ZED_ADAU1761) += snd-soc-zed-adau1761.o
diff --git a/sound/soc/adi/zed_adau1761.c b/sound/soc/adi/zed_adau1761.c
new file mode 100644
index 0000000..623b5ea
--- /dev/null
+++ b/sound/soc/adi/zed_adau1761.c
@@ -0,0 +1,164 @@
+/*
+ *  Copyright (C) 2012-2013, Analog Devices Inc.
+ *	Author: Lars-Peter Clausen <lars@metafoo.de>
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under  the terms of the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the License, or (at your
+ *  option) any later version.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/timer.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/soc.h>
+#include "../codecs/adau17x1.h"
+
+static const struct snd_soc_dapm_widget zed_adau1761_widgets[] = {
+	SND_SOC_DAPM_SPK("Line Out", NULL),
+	SND_SOC_DAPM_HP("Headphone Out", NULL),
+	SND_SOC_DAPM_MIC("Mic In", NULL),
+	SND_SOC_DAPM_MIC("Line In", NULL),
+};
+
+static const struct snd_soc_dapm_route zed_adau1761_routes[] = {
+	{ "Line Out", NULL, "LOUT" },
+	{ "Line Out", NULL, "ROUT" },
+	{ "Headphone Out", NULL, "LHP" },
+	{ "Headphone Out", NULL, "RHP" },
+	{ "Mic In", NULL, "MICBIAS" },
+	{ "LINN", NULL, "Mic In" },
+	{ "RINN", NULL, "Mic In" },
+	{ "LAUX", NULL, "Line In" },
+	{ "RAUX", NULL, "Line In" },
+};
+
+static int zed_adau1761_hw_params(struct snd_pcm_substream *substream,
+	struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+	unsigned int pll_rate;
+	int ret;
+	printk("*****wr7 enter zed_adau1761_hw_params params_rate(params) = %d\n", params_rate(params));
+	switch (params_rate(params)) {
+	case 48000:
+	case 8000:
+	case 12000:
+	case 16000:
+	case 24000:
+	case 32000:
+	case 96000:
+		pll_rate = 48000 * 1024;
+		break;
+	case 44100:
+	case 7350:
+	case 11025:
+	case 14700:
+	case 22050:
+	case 29400:
+	case 88200:
+		pll_rate = 44100 * 1024;
+		break;
+	default:
+		return -EINVAL;
+	}
+	printk("*****wr7 enter zed_adau1761_hw_params codec_dai->name = %s\n", codec_dai->name);
+	ret = snd_soc_dai_set_pll(codec_dai, ADAU17X1_PLL,
+			ADAU17X1_PLL_SRC_MCLK, 12288000, pll_rate);
+	if (ret)
+		return ret;
+
+	ret = snd_soc_dai_set_sysclk(codec_dai, ADAU17X1_CLK_SRC_PLL, pll_rate,
+			SND_SOC_CLOCK_IN);
+
+	return ret;
+}
+
+static struct snd_soc_ops zed_adau1761_ops = {
+	.hw_params = zed_adau1761_hw_params,
+};
+
+static struct snd_soc_dai_link zed_adau1761_dai_link = {
+	.name = "adau1761",
+	.stream_name = "adau1761",
+	.codec_dai_name = "adau-hifi",
+	.dai_fmt = SND_SOC_DAIFMT_I2S |
+			SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS,
+	.ops = &zed_adau1761_ops,
+};
+
+static struct snd_soc_card zed_adau1761_card = {
+	.name = "ZED ADAU1761",
+	.owner = THIS_MODULE,
+	.dai_link = &zed_adau1761_dai_link,
+	.num_links = 1,
+	.dapm_widgets = zed_adau1761_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(zed_adau1761_widgets),
+	.dapm_routes = zed_adau1761_routes,
+	.num_dapm_routes = ARRAY_SIZE(zed_adau1761_routes),
+	.fully_routed = true,
+};
+
+static int zed_adau1761_probe(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = &zed_adau1761_card;
+	struct device_node *of_node = pdev->dev.of_node;
+
+	if (!of_node)
+		return -ENXIO;
+
+	card->dev = &pdev->dev;
+
+	zed_adau1761_dai_link.codec_of_node = of_parse_phandle(of_node, "audio-codec", 0);
+	zed_adau1761_dai_link.cpu_of_node = of_parse_phandle(of_node, "cpu-dai", 0);
+	zed_adau1761_dai_link.platform_of_node = zed_adau1761_dai_link.cpu_of_node;
+
+	if (!zed_adau1761_dai_link.codec_of_node ||
+		!zed_adau1761_dai_link.cpu_of_node)
+		return -ENXIO;
+
+	return snd_soc_register_card(card);
+}
+
+static int zed_adau1761_remove(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+	snd_soc_unregister_card(card);
+
+	return 0;
+}
+
+static const struct of_device_id zed_adau1761_of_match[] = {
+	{ .compatible = "digilent,zed-sound", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, zed_adau1761_of_match);
+
+static struct platform_driver zed_adau1761_card_driver = {
+	.driver = {
+		.name = "zed-adau1761-snd",
+		.owner = THIS_MODULE,
+		.of_match_table = zed_adau1761_of_match,
+		.pm = &snd_soc_pm_ops,
+	},
+	.probe = zed_adau1761_probe,
+	.remove = zed_adau1761_remove,
+};
+module_platform_driver(zed_adau1761_card_driver);
+
+MODULE_DESCRIPTION("ASoC ZED board ADAU1761 driver");
+MODULE_AUTHOR("Lars-Peter Clausen <lars@metafoo.de>");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:zed-adau1761-snd");
diff --git a/sound/soc/codecs/adau1761.c b/sound/soc/codecs/adau1761.c
index b95d29d..fa1a6c6 100644
--- a/sound/soc/codecs/adau1761.c
+++ b/sound/soc/codecs/adau1761.c
@@ -781,6 +781,8 @@ int adau1761_probe(struct device *dev, struct regmap *regmap,
 	} else {
 		dai_drv = &adau1761_dai_driver;
 		firmware_name = ADAU1761_FIRMWARE;
+		if (of_machine_is_compatible("xlnx,mini-itx"))
+			firmware_name = NULL;
 	}
 
 	ret = adau17x1_probe(dev, regmap, type, switch_mode, firmware_name);
-- 
1.7.5.4

