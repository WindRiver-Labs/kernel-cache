From cc5043798d4ed8305d8ef2fe17eedddba95bec42 Mon Sep 17 00:00:00 2001
From: Wendy Liang <wendy.liang@xilinx.com>
Date: Thu, 19 Jan 2017 10:08:14 -0800
Subject: [PATCH 1099/1566] Revert "rpmsg: Fix DMA memory maps for ARM64"

commit  011599f0bd99a25e0212a2e631eef81570723e69 from
https://github.com/Xilinx/linux-xlnx.git

This reverts
commit d6b32705c204 ("rpmsg: Fix DMA memory maps for ARM64")

Signed-off-by: Wendy Liang <jliang@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/rpmsg/virtio_rpmsg_bus.c |   33 +++++++++++++++++++++++++++++----
 1 files changed, 29 insertions(+), 4 deletions(-)

diff --git a/drivers/rpmsg/virtio_rpmsg_bus.c b/drivers/rpmsg/virtio_rpmsg_bus.c
index 41448cb..481a0685 100644
--- a/drivers/rpmsg/virtio_rpmsg_bus.c
+++ b/drivers/rpmsg/virtio_rpmsg_bus.c
@@ -32,6 +32,7 @@
 #include <linux/sched.h>
 #include <linux/wait.h>
 #include <linux/rpmsg.h>
+#include <linux/remoteproc.h>
 #include <linux/mutex.h>
 
 /**
@@ -692,6 +693,8 @@ int rpmsg_send_offchannel_raw(struct rpmsg_channel *rpdev, u32 src, u32 dst,
 	struct scatterlist sg;
 	struct rpmsg_hdr *msg;
 	int err;
+	struct rproc *vrp_rproc;
+	void *msg_guest_addr_kva; /* message DMA address' virtual address conversion */
 
 	/* bcasting isn't allowed */
 	if (src == RPMSG_ADDR_ANY || dst == RPMSG_ADDR_ANY) {
@@ -758,7 +761,12 @@ int rpmsg_send_offchannel_raw(struct rpmsg_channel *rpdev, u32 src, u32 dst,
 					msg, sizeof(*msg) + msg->len, true);
 #endif
 
-	sg_init_one(&sg, msg, sizeof(*msg) + len);
+	vrp_rproc = vdev_to_rproc(vrp->vdev);
+	msg_guest_addr_kva = msg;
+	if (vrp_rproc->ops->kva_to_guest_addr_kva) {
+		msg_guest_addr_kva = vrp_rproc->ops->kva_to_guest_addr_kva(vrp_rproc, msg, vrp->svq);
+	}
+	sg_init_one(&sg, msg_guest_addr_kva, sizeof(*msg) + len);
 
 	mutex_lock(&vrp->tx_lock);
 
@@ -788,6 +796,8 @@ static int rpmsg_recv_single(struct virtproc_info *vrp, struct device *dev,
 	struct rpmsg_endpoint *ept;
 	struct scatterlist sg;
 	int err;
+	struct rproc *vrp_rproc;
+	void *msg_guest_addr_kva; /* message DMA address' virtual address conversion */
 
 	dev_dbg(dev, "From: 0x%x, To: 0x%x, Len: %d, Flags: %d, Reserved: %d\n",
 					msg->src, msg->dst, msg->len,
@@ -833,8 +843,13 @@ static int rpmsg_recv_single(struct virtproc_info *vrp, struct device *dev,
 	} else
 		dev_warn(dev, "msg received with no recipient\n");
 
+	vrp_rproc = vdev_to_rproc(vrp->vdev);
+	msg_guest_addr_kva = msg;
+	if (vrp_rproc->ops->kva_to_guest_addr_kva) {
+		msg_guest_addr_kva = vrp_rproc->ops->kva_to_guest_addr_kva(vrp_rproc, msg, vrp->rvq);
+	}
 	/* publish the real size of the buffer */
-	sg_init_one(&sg, msg, RPMSG_BUF_SIZE);
+	sg_init_one(&sg, msg_guest_addr_kva, RPMSG_BUF_SIZE);
 
 	/* add the buffer back to the remote processor's virtqueue */
 	err = virtqueue_add_inbuf(vrp->rvq, &sg, 1, msg, GFP_KERNEL);
@@ -954,7 +969,11 @@ static int rpmsg_probe(struct virtio_device *vdev)
 	static const char * const names[] = { "input", "output" };
 	struct virtqueue *vqs[2];
 	struct virtproc_info *vrp;
+	struct rproc *vrp_rproc;
 	void *bufs_va;
+	void *cpu_addr; /* buffer virtual address */
+	void *cpu_addr_dma; /* buffer DMA address' virutal address conversion */
+	void *rbufs_guest_addr_kva;
 	int err = 0, i;
 	size_t total_buf_space;
 	bool notify;
@@ -1008,12 +1027,18 @@ static int rpmsg_probe(struct virtio_device *vdev)
 	/* and half is dedicated for TX */
 	vrp->sbufs = bufs_va + total_buf_space / 2;
 
+	vrp_rproc = vdev_to_rproc(vdev);
+	rbufs_guest_addr_kva = vrp->rbufs;
+	if (vrp_rproc->ops->kva_to_guest_addr_kva) {
+		rbufs_guest_addr_kva = vrp_rproc->ops->kva_to_guest_addr_kva(vrp_rproc, vrp->rbufs, vrp->rvq);
+	}
 	/* set up the receive buffers */
 	for (i = 0; i < vrp->num_bufs / 2; i++) {
 		struct scatterlist sg;
-		void *cpu_addr = vrp->rbufs + i * RPMSG_BUF_SIZE;
+		cpu_addr = vrp->rbufs + i * RPMSG_BUF_SIZE;
+		cpu_addr_dma = rbufs_guest_addr_kva + i*RPMSG_BUF_SIZE;
 
-		sg_init_one(&sg, cpu_addr, RPMSG_BUF_SIZE);
+		sg_init_one(&sg, cpu_addr_dma, RPMSG_BUF_SIZE);
 
 		err = virtqueue_add_inbuf(vrp->rvq, &sg, 1, cpu_addr,
 								GFP_KERNEL);
-- 
1.7.5.4

