From 79fef710754f8970b630795cb2b2799c94f8ad61 Mon Sep 17 00:00:00 2001
From: Rohit Athavale <rathaval@xilinx.com>
Date: Fri, 5 May 2017 15:12:16 -0700
Subject: [PATCH 1549/1566] V4L: xilinx-gamma : Driver support for Xilinx
 Video Gamma Correction LUT IP

commit  8ffdfa4d82e03a865c01947996739237c3403e42 from
https://github.com/Xilinx/linux-xlnx.git

This commit adds V4L sub-device based driver support for the
Xilinx Video Gamma Correction Look-Up-Table (LUT) IP.

The driver allows Gamma Correction to be applied to R,G and B
components via V4L controls.

Signed-off-by: Rohit Athavale <rathaval@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/media/platform/xilinx/Kconfig              |   10 +
 drivers/media/platform/xilinx/Makefile             |    1 +
 drivers/media/platform/xilinx/xilinx-gamma-coeff.h | 1456 ++++++++++++++++++++
 drivers/media/platform/xilinx/xilinx-gamma.c       |  492 +++++++
 drivers/media/platform/xilinx/xilinx-gamma.h       |   68 +
 include/uapi/linux/xilinx-v4l2-controls.h          |   13 +
 6 files changed, 2040 insertions(+), 0 deletions(-)
 create mode 100644 drivers/media/platform/xilinx/xilinx-gamma-coeff.h
 create mode 100644 drivers/media/platform/xilinx/xilinx-gamma.c
 create mode 100644 drivers/media/platform/xilinx/xilinx-gamma.h

diff --git a/drivers/media/platform/xilinx/Kconfig b/drivers/media/platform/xilinx/Kconfig
index 49e65d0..481cb26 100644
--- a/drivers/media/platform/xilinx/Kconfig
+++ b/drivers/media/platform/xilinx/Kconfig
@@ -19,6 +19,16 @@ config VIDEO_XILINX_CRESAMPLE
 	---help---
 	   Driver for the Xilinx Chroma Resampler
 
+config VIDEO_XILINX_GAMMA
+	tristate "Xilinx Gamma Correction LUT"
+	depends on VIDEO_XILINX
+	---help---
+	Driver for Xilinx Gamma Correction LUT IP. This is V4L sub-device
+	based driver that exposes V4L controls to adjust Red, Blue and Green
+	Gamma Correction to Video. Gamma values range from 0.1(min) to 4.0(max)
+	with Gamma value of 1.0 being the default resulting in no correction.
+	Say N if unsure.
+
 config VIDEO_XILINX_HLS
 	tristate "Xilinx Video HLS Core"
 	depends on VIDEO_XILINX
diff --git a/drivers/media/platform/xilinx/Makefile b/drivers/media/platform/xilinx/Makefile
index 6c76824..7be6277a 100644
--- a/drivers/media/platform/xilinx/Makefile
+++ b/drivers/media/platform/xilinx/Makefile
@@ -3,6 +3,7 @@ xilinx-video-objs += xilinx-dma.o xilinx-vip.o xilinx-vipp.o
 obj-$(CONFIG_VIDEO_XILINX) += xilinx-video.o
 obj-$(CONFIG_VIDEO_XILINX_CFA) += xilinx-cfa.o
 obj-$(CONFIG_VIDEO_XILINX_CRESAMPLE) += xilinx-cresample.o
+obj-$(CONFIG_VIDEO_XILINX_GAMMA) += xilinx-gamma.o
 obj-$(CONFIG_VIDEO_XILINX_HLS) += xilinx-hls.o
 obj-$(CONFIG_VIDEO_XILINX_RGB2YUV) += xilinx-rgb2yuv.o
 obj-$(CONFIG_VIDEO_XILINX_SCALER) += xilinx-scaler.o
diff --git a/drivers/media/platform/xilinx/xilinx-gamma-coeff.h b/drivers/media/platform/xilinx/xilinx-gamma-coeff.h
new file mode 100644
index 0000000..b1700f4
--- /dev/null
+++ b/drivers/media/platform/xilinx/xilinx-gamma-coeff.h
@@ -0,0 +1,1456 @@
+/*
+ * Xilinx Gamma Correction IP
+ *
+ * Copyright (C) 2017 Xilinx, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#define GAMMA_BPC_8		(8)
+#define GAMMA_TABLE_LENGTH	BIT(GAMMA_BPC_8)
+#define GAMMA_CURVE_LENGTH	(40)
+
+const u8 xgamma_01[GAMMA_TABLE_LENGTH] = {
+0, 147, 157, 164, 168, 172, 175, 178,
+180, 183, 184, 186, 188, 189, 191, 192,
+193, 195, 196, 197, 198, 199, 200, 200,
+201, 202, 203, 204, 204, 205, 206, 207,
+207, 208, 208, 209, 210, 210, 211, 211,
+212, 212, 213, 213, 214, 214, 215, 215,
+216, 216, 217, 217, 218, 218, 218, 219,
+219, 220, 220, 220, 221, 221, 221, 222,
+222, 222, 223, 223, 223, 224, 224, 224,
+225, 225, 225, 226, 226, 226, 227, 227,
+227, 227, 228, 228, 228, 228, 229, 229,
+229, 230, 230, 230, 230, 231, 231, 231,
+231, 232, 232, 232, 232, 232, 233, 233,
+233, 233, 234, 234, 234, 234, 234, 235,
+235, 235, 235, 235, 236, 236, 236, 236,
+236, 237, 237, 237, 237, 237, 238, 238,
+238, 238, 238, 239, 239, 239, 239, 239,
+239, 240, 240, 240, 240, 240, 240, 241,
+241, 241, 241, 241, 241, 242, 242, 242,
+242, 242, 242, 243, 243, 243, 243, 243,
+243, 244, 244, 244, 244, 244, 244, 244,
+245, 245, 245, 245, 245, 245, 245, 246,
+246, 246, 246, 246, 246, 246, 247, 247,
+247, 247, 247, 247, 247, 247, 248, 248,
+248, 248, 248, 248, 248, 249, 249, 249,
+249, 249, 249, 249, 249, 249, 250, 250,
+250, 250, 250, 250, 250, 250, 251, 251,
+251, 251, 251, 251, 251, 251, 251, 252,
+252, 252, 252, 252, 252, 252, 252, 252,
+253, 253, 253, 253, 253, 253, 253, 253,
+253, 254, 254, 254, 254, 254, 254, 254,
+254, 254, 254, 255, 255, 255, 255, 255,
+};
+
+const u8 xgamma_02[GAMMA_TABLE_LENGTH] = {
+0, 84, 97, 105, 111, 116, 120, 124,
+128, 131, 133, 136, 138, 141, 143, 145,
+147, 148, 150, 152, 153, 155, 156, 158,
+159, 160, 162, 163, 164, 165, 166, 167,
+168, 169, 170, 171, 172, 173, 174, 175,
+176, 177, 178, 179, 179, 180, 181, 182,
+183, 183, 184, 185, 186, 186, 187, 188,
+188, 189, 190, 190, 191, 192, 192, 193,
+193, 194, 195, 195, 196, 196, 197, 197,
+198, 199, 199, 200, 200, 201, 201, 202,
+202, 203, 203, 204, 204, 205, 205, 206,
+206, 207, 207, 208, 208, 208, 209, 209,
+210, 210, 211, 211, 211, 212, 212, 213,
+213, 214, 214, 214, 215, 215, 216, 216,
+216, 217, 217, 217, 218, 218, 219, 219,
+219, 220, 220, 220, 221, 221, 221, 222,
+222, 223, 223, 223, 224, 224, 224, 225,
+225, 225, 226, 226, 226, 227, 227, 227,
+227, 228, 228, 228, 229, 229, 229, 230,
+230, 230, 231, 231, 231, 231, 232, 232,
+232, 233, 233, 233, 233, 234, 234, 234,
+235, 235, 235, 235, 236, 236, 236, 237,
+237, 237, 237, 238, 238, 238, 238, 239,
+239, 239, 239, 240, 240, 240, 240, 241,
+241, 241, 241, 242, 242, 242, 242, 243,
+243, 243, 243, 244, 244, 244, 244, 245,
+245, 245, 245, 246, 246, 246, 246, 246,
+247, 247, 247, 247, 248, 248, 248, 248,
+248, 249, 249, 249, 249, 250, 250, 250,
+250, 250, 251, 251, 251, 251, 252, 252,
+252, 252, 252, 253, 253, 253, 253, 253,
+254, 254, 254, 254, 254, 255, 255, 255,
+};
+
+const u8 xgamma_03[GAMMA_TABLE_LENGTH] = {
+0, 48, 60, 67, 73, 78, 83, 87,
+90, 94, 97, 99, 102, 104, 107, 109,
+111, 113, 115, 117, 119, 121, 122, 124,
+125, 127, 129, 130, 131, 133, 134, 136,
+137, 138, 139, 141, 142, 143, 144, 145,
+146, 147, 148, 149, 151, 152, 153, 154,
+155, 155, 156, 157, 158, 159, 160, 161,
+162, 163, 164, 164, 165, 166, 167, 168,
+168, 169, 170, 171, 172, 172, 173, 174,
+174, 175, 176, 177, 177, 178, 179, 179,
+180, 181, 181, 182, 183, 183, 184, 185,
+185, 186, 187, 187, 188, 188, 189, 190,
+190, 191, 191, 192, 193, 193, 194, 194,
+195, 195, 196, 197, 197, 198, 198, 199,
+199, 200, 200, 201, 201, 202, 202, 203,
+203, 204, 204, 205, 205, 206, 206, 207,
+207, 208, 208, 209, 209, 210, 210, 211,
+211, 212, 212, 213, 213, 213, 214, 214,
+215, 215, 216, 216, 217, 217, 217, 218,
+218, 219, 219, 220, 220, 220, 221, 221,
+222, 222, 223, 223, 223, 224, 224, 225,
+225, 225, 226, 226, 227, 227, 227, 228,
+228, 229, 229, 229, 230, 230, 230, 231,
+231, 232, 232, 232, 233, 233, 233, 234,
+234, 235, 235, 235, 236, 236, 236, 237,
+237, 237, 238, 238, 238, 239, 239, 240,
+240, 240, 241, 241, 241, 242, 242, 242,
+243, 243, 243, 244, 244, 244, 245, 245,
+245, 246, 246, 246, 247, 247, 247, 248,
+248, 248, 249, 249, 249, 249, 250, 250,
+250, 251, 251, 251, 252, 252, 252, 253,
+253, 253, 253, 254, 254, 254, 255, 255,
+};
+
+const u8 xgamma_04[GAMMA_TABLE_LENGTH] = {
+0, 28, 37, 43, 48, 53, 57, 61,
+64, 67, 70, 73, 75, 78, 80, 82,
+84, 86, 88, 90, 92, 94, 96, 97,
+99, 101, 102, 104, 105, 107, 108, 110,
+111, 113, 114, 115, 117, 118, 119, 120,
+122, 123, 124, 125, 126, 127, 129, 130,
+131, 132, 133, 134, 135, 136, 137, 138,
+139, 140, 141, 142, 143, 144, 145, 146,
+147, 148, 149, 149, 150, 151, 152, 153,
+154, 155, 155, 156, 157, 158, 159, 160,
+160, 161, 162, 163, 164, 164, 165, 166,
+167, 167, 168, 169, 170, 170, 171, 172,
+173, 173, 174, 175, 175, 176, 177, 177,
+178, 179, 179, 180, 181, 182, 182, 183,
+183, 184, 185, 185, 186, 187, 187, 188,
+189, 189, 190, 190, 191, 192, 192, 193,
+194, 194, 195, 195, 196, 197, 197, 198,
+198, 199, 199, 200, 201, 201, 202, 202,
+203, 203, 204, 205, 205, 206, 206, 207,
+207, 208, 208, 209, 209, 210, 211, 211,
+212, 212, 213, 213, 214, 214, 215, 215,
+216, 216, 217, 217, 218, 218, 219, 219,
+220, 220, 221, 221, 222, 222, 223, 223,
+224, 224, 225, 225, 226, 226, 227, 227,
+228, 228, 229, 229, 230, 230, 230, 231,
+231, 232, 232, 233, 233, 234, 234, 235,
+235, 235, 236, 236, 237, 237, 238, 238,
+239, 239, 240, 240, 240, 241, 241, 242,
+242, 243, 243, 243, 244, 244, 245, 245,
+246, 246, 246, 247, 247, 248, 248, 248,
+249, 249, 250, 250, 251, 251, 251, 252,
+252, 253, 253, 253, 254, 254, 255, 255,
+};
+
+const u8 xgamma_05[GAMMA_TABLE_LENGTH] = {
+0, 16, 23, 28, 32, 36, 39, 42,
+45, 48, 50, 53, 55, 58, 60, 62,
+64, 66, 68, 70, 71, 73, 75, 77,
+78, 80, 81, 83, 84, 86, 87, 89,
+90, 92, 93, 94, 96, 97, 98, 100,
+101, 102, 103, 105, 106, 107, 108, 109,
+111, 112, 113, 114, 115, 116, 117, 118,
+119, 121, 122, 123, 124, 125, 126, 127,
+128, 129, 130, 131, 132, 133, 134, 135,
+135, 136, 137, 138, 139, 140, 141, 142,
+143, 144, 145, 145, 146, 147, 148, 149,
+150, 151, 151, 152, 153, 154, 155, 156,
+156, 157, 158, 159, 160, 160, 161, 162,
+163, 164, 164, 165, 166, 167, 167, 168,
+169, 170, 170, 171, 172, 173, 173, 174,
+175, 176, 176, 177, 178, 179, 179, 180,
+181, 181, 182, 183, 183, 184, 185, 186,
+186, 187, 188, 188, 189, 190, 190, 191,
+192, 192, 193, 194, 194, 195, 196, 196,
+197, 198, 198, 199, 199, 200, 201, 201,
+202, 203, 203, 204, 204, 205, 206, 206,
+207, 208, 208, 209, 209, 210, 211, 211,
+212, 212, 213, 214, 214, 215, 215, 216,
+217, 217, 218, 218, 219, 220, 220, 221,
+221, 222, 222, 223, 224, 224, 225, 225,
+226, 226, 227, 228, 228, 229, 229, 230,
+230, 231, 231, 232, 233, 233, 234, 234,
+235, 235, 236, 236, 237, 237, 238, 238,
+239, 240, 240, 241, 241, 242, 242, 243,
+243, 244, 244, 245, 245, 246, 246, 247,
+247, 248, 248, 249, 249, 250, 250, 251,
+251, 252, 252, 253, 253, 254, 254, 255,
+};
+
+const u8 xgamma_06[GAMMA_TABLE_LENGTH] = {
+0, 9, 14, 18, 21, 24, 27, 29,
+32, 34, 37, 39, 41, 43, 45, 47,
+48, 50, 52, 54, 55, 57, 59, 60,
+62, 63, 65, 66, 68, 69, 71, 72,
+73, 75, 76, 77, 79, 80, 81, 83,
+84, 85, 86, 88, 89, 90, 91, 92,
+94, 95, 96, 97, 98, 99, 100, 102,
+103, 104, 105, 106, 107, 108, 109, 110,
+111, 112, 113, 114, 115, 116, 117, 118,
+119, 120, 121, 122, 123, 124, 125, 126,
+127, 128, 129, 130, 131, 132, 133, 134,
+135, 136, 137, 137, 138, 139, 140, 141,
+142, 143, 144, 145, 145, 146, 147, 148,
+149, 150, 151, 151, 152, 153, 154, 155,
+156, 156, 157, 158, 159, 160, 161, 161,
+162, 163, 164, 165, 165, 166, 167, 168,
+169, 169, 170, 171, 172, 173, 173, 174,
+175, 176, 176, 177, 178, 179, 179, 180,
+181, 182, 182, 183, 184, 185, 185, 186,
+187, 188, 188, 189, 190, 191, 191, 192,
+193, 194, 194, 195, 196, 196, 197, 198,
+199, 199, 200, 201, 201, 202, 203, 203,
+204, 205, 206, 206, 207, 208, 208, 209,
+210, 210, 211, 212, 212, 213, 214, 214,
+215, 216, 216, 217, 218, 218, 219, 220,
+220, 221, 222, 222, 223, 224, 224, 225,
+226, 226, 227, 228, 228, 229, 230, 230,
+231, 231, 232, 233, 233, 234, 235, 235,
+236, 237, 237, 238, 238, 239, 240, 240,
+241, 242, 242, 243, 243, 244, 245, 245,
+246, 247, 247, 248, 248, 249, 250, 250,
+251, 251, 252, 253, 253, 254, 254, 255,
+};
+
+const u8 xgamma_07[GAMMA_TABLE_LENGTH] = {
+0, 5, 9, 11, 14, 16, 18, 21,
+23, 25, 26, 28, 30, 32, 33, 35,
+37, 38, 40, 41, 43, 44, 46, 47,
+49, 50, 52, 53, 54, 56, 57, 58,
+60, 61, 62, 64, 65, 66, 67, 69,
+70, 71, 72, 73, 75, 76, 77, 78,
+79, 80, 82, 83, 84, 85, 86, 87,
+88, 89, 90, 92, 93, 94, 95, 96,
+97, 98, 99, 100, 101, 102, 103, 104,
+105, 106, 107, 108, 109, 110, 111, 112,
+113, 114, 115, 116, 117, 118, 119, 120,
+121, 122, 123, 124, 125, 126, 127, 128,
+129, 130, 131, 131, 132, 133, 134, 135,
+136, 137, 138, 139, 140, 141, 142, 142,
+143, 144, 145, 146, 147, 148, 149, 150,
+150, 151, 152, 153, 154, 155, 156, 157,
+157, 158, 159, 160, 161, 162, 163, 163,
+164, 165, 166, 167, 168, 168, 169, 170,
+171, 172, 173, 173, 174, 175, 176, 177,
+178, 178, 179, 180, 181, 182, 182, 183,
+184, 185, 186, 186, 187, 188, 189, 190,
+190, 191, 192, 193, 194, 194, 195, 196,
+197, 197, 198, 199, 200, 201, 201, 202,
+203, 204, 204, 205, 206, 207, 208, 208,
+209, 210, 211, 211, 212, 213, 214, 214,
+215, 216, 217, 217, 218, 219, 220, 220,
+221, 222, 223, 223, 224, 225, 226, 226,
+227, 228, 228, 229, 230, 231, 231, 232,
+233, 234, 234, 235, 236, 237, 237, 238,
+239, 239, 240, 241, 242, 242, 243, 244,
+244, 245, 246, 247, 247, 248, 249, 249,
+250, 251, 251, 252, 253, 254, 254, 255,
+};
+
+const u8 xgamma_08[GAMMA_TABLE_LENGTH] = {
+0, 3, 5, 7, 9, 11, 13, 14,
+16, 18, 19, 21, 22, 24, 25, 26,
+28, 29, 31, 32, 33, 35, 36, 37,
+39, 40, 41, 42, 44, 45, 46, 47,
+48, 50, 51, 52, 53, 54, 56, 57,
+58, 59, 60, 61, 63, 64, 65, 66,
+67, 68, 69, 70, 71, 73, 74, 75,
+76, 77, 78, 79, 80, 81, 82, 83,
+84, 85, 86, 88, 89, 90, 91, 92,
+93, 94, 95, 96, 97, 98, 99, 100,
+101, 102, 103, 104, 105, 106, 107, 108,
+109, 110, 111, 112, 113, 114, 115, 116,
+117, 118, 119, 120, 121, 122, 123, 123,
+124, 125, 126, 127, 128, 129, 130, 131,
+132, 133, 134, 135, 136, 137, 138, 139,
+140, 140, 141, 142, 143, 144, 145, 146,
+147, 148, 149, 150, 151, 151, 152, 153,
+154, 155, 156, 157, 158, 159, 160, 161,
+161, 162, 163, 164, 165, 166, 167, 168,
+169, 169, 170, 171, 172, 173, 174, 175,
+176, 177, 177, 178, 179, 180, 181, 182,
+183, 183, 184, 185, 186, 187, 188, 189,
+190, 190, 191, 192, 193, 194, 195, 196,
+196, 197, 198, 199, 200, 201, 202, 202,
+203, 204, 205, 206, 207, 207, 208, 209,
+210, 211, 212, 212, 213, 214, 215, 216,
+217, 217, 218, 219, 220, 221, 222, 222,
+223, 224, 225, 226, 227, 227, 228, 229,
+230, 231, 232, 232, 233, 234, 235, 236,
+236, 237, 238, 239, 240, 240, 241, 242,
+243, 244, 245, 245, 246, 247, 248, 249,
+249, 250, 251, 252, 253, 253, 254, 255,
+};
+
+const u8 xgamma_09[GAMMA_TABLE_LENGTH] = {
+0, 2, 3, 5, 6, 7, 9, 10,
+11, 13, 14, 15, 16, 18, 19, 20,
+21, 22, 23, 25, 26, 27, 28, 29,
+30, 32, 33, 34, 35, 36, 37, 38,
+39, 40, 42, 43, 44, 45, 46, 47,
+48, 49, 50, 51, 52, 54, 55, 56,
+57, 58, 59, 60, 61, 62, 63, 64,
+65, 66, 67, 68, 69, 70, 71, 72,
+73, 75, 76, 77, 78, 79, 80, 81,
+82, 83, 84, 85, 86, 87, 88, 89,
+90, 91, 92, 93, 94, 95, 96, 97,
+98, 99, 100, 101, 102, 103, 104, 105,
+106, 107, 108, 109, 110, 111, 112, 113,
+114, 115, 116, 117, 118, 119, 120, 121,
+122, 123, 124, 125, 126, 126, 127, 128,
+129, 130, 131, 132, 133, 134, 135, 136,
+137, 138, 139, 140, 141, 142, 143, 144,
+145, 146, 147, 148, 149, 150, 151, 152,
+152, 153, 154, 155, 156, 157, 158, 159,
+160, 161, 162, 163, 164, 165, 166, 167,
+168, 169, 170, 170, 171, 172, 173, 174,
+175, 176, 177, 178, 179, 180, 181, 182,
+183, 184, 185, 185, 186, 187, 188, 189,
+190, 191, 192, 193, 194, 195, 196, 197,
+198, 198, 199, 200, 201, 202, 203, 204,
+205, 206, 207, 208, 209, 210, 210, 211,
+212, 213, 214, 215, 216, 217, 218, 219,
+220, 221, 221, 222, 223, 224, 225, 226,
+227, 228, 229, 230, 231, 231, 232, 233,
+234, 235, 236, 237, 238, 239, 240, 241,
+241, 242, 243, 244, 245, 246, 247, 248,
+249, 250, 250, 251, 252, 253, 254, 255,
+};
+
+const u8 xgamma_10[GAMMA_TABLE_LENGTH] = {
+0, 1, 2, 3, 4, 5, 6, 7,
+8, 9, 10, 11, 12, 13, 14, 15,
+16, 17, 18, 19, 20, 21, 22, 23,
+24, 25, 26, 27, 28, 29, 30, 31,
+32, 33, 34, 35, 36, 37, 38, 39,
+40, 41, 42, 43, 44, 45, 46, 47,
+48, 49, 50, 51, 52, 53, 54, 55,
+56, 57, 58, 59, 60, 61, 62, 63,
+64, 65, 66, 67, 68, 69, 70, 71,
+72, 73, 74, 75, 76, 77, 78, 79,
+80, 81, 82, 83, 84, 85, 86, 87,
+88, 89, 90, 91, 92, 93, 94, 95,
+96, 97, 98, 99, 100, 101, 102, 103,
+104, 105, 106, 107, 108, 109, 110, 111,
+112, 113, 114, 115, 116, 117, 118, 119,
+120, 121, 122, 123, 124, 125, 126, 127,
+128, 129, 130, 131, 132, 133, 134, 135,
+136, 137, 138, 139, 140, 141, 142, 143,
+144, 145, 146, 147, 148, 149, 150, 151,
+152, 153, 154, 155, 156, 157, 158, 159,
+160, 161, 162, 163, 164, 165, 166, 167,
+168, 169, 170, 171, 172, 173, 174, 175,
+176, 177, 178, 179, 180, 181, 182, 183,
+184, 185, 186, 187, 188, 189, 190, 191,
+192, 193, 194, 195, 196, 197, 198, 199,
+200, 201, 202, 203, 204, 205, 206, 207,
+208, 209, 210, 211, 212, 213, 214, 215,
+216, 217, 218, 219, 220, 221, 222, 223,
+224, 225, 226, 227, 228, 229, 230, 231,
+232, 233, 234, 235, 236, 237, 238, 239,
+240, 241, 242, 243, 244, 245, 246, 247,
+248, 249, 250, 251, 252, 253, 254, 255,
+};
+
+const u8 xgamma_11[GAMMA_TABLE_LENGTH] = {
+0, 1, 1, 2, 3, 3, 4, 5,
+6, 6, 7, 8, 9, 10, 10, 11,
+12, 13, 14, 15, 16, 16, 17, 18,
+19, 20, 21, 22, 22, 23, 24, 25,
+26, 27, 28, 29, 30, 31, 31, 32,
+33, 34, 35, 36, 37, 38, 39, 40,
+41, 42, 42, 43, 44, 45, 46, 47,
+48, 49, 50, 51, 52, 53, 54, 55,
+56, 57, 58, 59, 60, 61, 62, 62,
+63, 64, 65, 66, 67, 68, 69, 70,
+71, 72, 73, 74, 75, 76, 77, 78,
+79, 80, 81, 82, 83, 84, 85, 86,
+87, 88, 89, 90, 91, 92, 93, 94,
+95, 96, 97, 98, 99, 100, 101, 102,
+103, 104, 105, 106, 107, 108, 109, 110,
+111, 112, 113, 114, 115, 116, 117, 118,
+119, 121, 122, 123, 124, 125, 126, 127,
+128, 129, 130, 131, 132, 133, 134, 135,
+136, 137, 138, 139, 140, 141, 142, 143,
+144, 145, 146, 147, 149, 150, 151, 152,
+153, 154, 155, 156, 157, 158, 159, 160,
+161, 162, 163, 164, 165, 166, 167, 169,
+170, 171, 172, 173, 174, 175, 176, 177,
+178, 179, 180, 181, 182, 183, 184, 186,
+187, 188, 189, 190, 191, 192, 193, 194,
+195, 196, 197, 198, 199, 201, 202, 203,
+204, 205, 206, 207, 208, 209, 210, 211,
+212, 214, 215, 216, 217, 218, 219, 220,
+221, 222, 223, 224, 225, 227, 228, 229,
+230, 231, 232, 233, 234, 235, 236, 237,
+239, 240, 241, 242, 243, 244, 245, 246,
+247, 248, 250, 251, 252, 253, 254, 255,
+};
+
+const u8 xgamma_12[GAMMA_TABLE_LENGTH] = {
+0, 0, 1, 1, 2, 2, 3, 3,
+4, 5, 5, 6, 7, 7, 8, 9,
+9, 10, 11, 11, 12, 13, 13, 14,
+15, 16, 16, 17, 18, 19, 20, 20,
+21, 22, 23, 24, 24, 25, 26, 27,
+28, 28, 29, 30, 31, 32, 33, 34,
+34, 35, 36, 37, 38, 39, 40, 40,
+41, 42, 43, 44, 45, 46, 47, 48,
+49, 49, 50, 51, 52, 53, 54, 55,
+56, 57, 58, 59, 60, 61, 62, 62,
+63, 64, 65, 66, 67, 68, 69, 70,
+71, 72, 73, 74, 75, 76, 77, 78,
+79, 80, 81, 82, 83, 84, 85, 86,
+87, 88, 89, 90, 91, 92, 93, 94,
+95, 96, 97, 98, 99, 100, 101, 102,
+103, 104, 105, 106, 107, 108, 109, 110,
+112, 113, 114, 115, 116, 117, 118, 119,
+120, 121, 122, 123, 124, 125, 126, 127,
+128, 130, 131, 132, 133, 134, 135, 136,
+137, 138, 139, 140, 141, 142, 144, 145,
+146, 147, 148, 149, 150, 151, 152, 153,
+155, 156, 157, 158, 159, 160, 161, 162,
+163, 165, 166, 167, 168, 169, 170, 171,
+172, 173, 175, 176, 177, 178, 179, 180,
+181, 183, 184, 185, 186, 187, 188, 189,
+191, 192, 193, 194, 195, 196, 197, 199,
+200, 201, 202, 203, 204, 205, 207, 208,
+209, 210, 211, 212, 214, 215, 216, 217,
+218, 219, 221, 222, 223, 224, 225, 226,
+228, 229, 230, 231, 232, 234, 235, 236,
+237, 238, 239, 241, 242, 243, 244, 245,
+247, 248, 249, 250, 251, 253, 254, 255,
+};
+
+const u8 xgamma_13[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 1, 1, 2, 2, 2,
+3, 3, 4, 4, 5, 5, 6, 6,
+7, 8, 8, 9, 9, 10, 11, 11,
+12, 12, 13, 14, 14, 15, 16, 16,
+17, 18, 19, 19, 20, 21, 21, 22,
+23, 24, 24, 25, 26, 27, 28, 28,
+29, 30, 31, 31, 32, 33, 34, 35,
+36, 36, 37, 38, 39, 40, 41, 41,
+42, 43, 44, 45, 46, 47, 47, 48,
+49, 50, 51, 52, 53, 54, 55, 56,
+57, 57, 58, 59, 60, 61, 62, 63,
+64, 65, 66, 67, 68, 69, 70, 71,
+72, 73, 74, 75, 76, 76, 77, 78,
+79, 80, 81, 82, 83, 84, 85, 86,
+88, 89, 90, 91, 92, 93, 94, 95,
+96, 97, 98, 99, 100, 101, 102, 103,
+104, 105, 106, 107, 108, 109, 110, 112,
+113, 114, 115, 116, 117, 118, 119, 120,
+121, 122, 124, 125, 126, 127, 128, 129,
+130, 131, 132, 133, 135, 136, 137, 138,
+139, 140, 141, 143, 144, 145, 146, 147,
+148, 149, 151, 152, 153, 154, 155, 156,
+157, 159, 160, 161, 162, 163, 164, 166,
+167, 168, 169, 170, 172, 173, 174, 175,
+176, 178, 179, 180, 181, 182, 184, 185,
+186, 187, 188, 190, 191, 192, 193, 194,
+196, 197, 198, 199, 201, 202, 203, 204,
+206, 207, 208, 209, 210, 212, 213, 214,
+215, 217, 218, 219, 220, 222, 223, 224,
+226, 227, 228, 229, 231, 232, 233, 234,
+236, 237, 238, 240, 241, 242, 243, 245,
+246, 247, 249, 250, 251, 252, 254, 255,
+};
+
+const u8 xgamma_14[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 1, 1, 1, 1, 2,
+2, 2, 3, 3, 4, 4, 4, 5,
+5, 6, 6, 7, 7, 8, 8, 9,
+9, 10, 10, 11, 12, 12, 13, 13,
+14, 15, 15, 16, 16, 17, 18, 18,
+19, 20, 20, 21, 22, 22, 23, 24,
+25, 25, 26, 27, 28, 28, 29, 30,
+31, 31, 32, 33, 34, 34, 35, 36,
+37, 38, 38, 39, 40, 41, 42, 43,
+43, 44, 45, 46, 47, 48, 49, 49,
+50, 51, 52, 53, 54, 55, 56, 57,
+57, 58, 59, 60, 61, 62, 63, 64,
+65, 66, 67, 68, 69, 70, 71, 72,
+73, 74, 75, 76, 77, 78, 79, 80,
+81, 82, 83, 84, 85, 86, 87, 88,
+89, 90, 91, 92, 93, 94, 95, 96,
+97, 98, 99, 100, 101, 103, 104, 105,
+106, 107, 108, 109, 110, 111, 112, 113,
+115, 116, 117, 118, 119, 120, 121, 122,
+124, 125, 126, 127, 128, 129, 130, 132,
+133, 134, 135, 136, 137, 139, 140, 141,
+142, 143, 145, 146, 147, 148, 149, 151,
+152, 153, 154, 155, 157, 158, 159, 160,
+161, 163, 164, 165, 166, 168, 169, 170,
+171, 173, 174, 175, 176, 178, 179, 180,
+181, 183, 184, 185, 187, 188, 189, 190,
+192, 193, 194, 196, 197, 198, 200, 201,
+202, 203, 205, 206, 207, 209, 210, 211,
+213, 214, 215, 217, 218, 219, 221, 222,
+223, 225, 226, 227, 229, 230, 232, 233,
+234, 236, 237, 238, 240, 241, 242, 244,
+245, 247, 248, 249, 251, 252, 254, 255,
+};
+
+const u8 xgamma_15[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 1, 1, 1, 1,
+1, 2, 2, 2, 3, 3, 3, 4,
+4, 4, 5, 5, 6, 6, 6, 7,
+7, 8, 8, 9, 9, 10, 10, 11,
+11, 12, 12, 13, 14, 14, 15, 15,
+16, 16, 17, 18, 18, 19, 20, 20,
+21, 21, 22, 23, 23, 24, 25, 26,
+26, 27, 28, 28, 29, 30, 31, 31,
+32, 33, 34, 34, 35, 36, 37, 37,
+38, 39, 40, 41, 41, 42, 43, 44,
+45, 46, 46, 47, 48, 49, 50, 51,
+52, 53, 53, 54, 55, 56, 57, 58,
+59, 60, 61, 62, 63, 64, 65, 65,
+66, 67, 68, 69, 70, 71, 72, 73,
+74, 75, 76, 77, 78, 79, 80, 81,
+82, 83, 84, 85, 86, 88, 89, 90,
+91, 92, 93, 94, 95, 96, 97, 98,
+99, 100, 102, 103, 104, 105, 106, 107,
+108, 109, 110, 112, 113, 114, 115, 116,
+117, 119, 120, 121, 122, 123, 124, 126,
+127, 128, 129, 130, 132, 133, 134, 135,
+136, 138, 139, 140, 141, 142, 144, 145,
+146, 147, 149, 150, 151, 152, 154, 155,
+156, 158, 159, 160, 161, 163, 164, 165,
+167, 168, 169, 171, 172, 173, 174, 176,
+177, 178, 180, 181, 182, 184, 185, 187,
+188, 189, 191, 192, 193, 195, 196, 197,
+199, 200, 202, 203, 204, 206, 207, 209,
+210, 211, 213, 214, 216, 217, 218, 220,
+221, 223, 224, 226, 227, 228, 230, 231,
+233, 234, 236, 237, 239, 240, 242, 243,
+245, 246, 248, 249, 251, 252, 254, 255,
+};
+
+const u8 xgamma_16[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 1, 1,
+1, 1, 1, 2, 2, 2, 2, 3,
+3, 3, 4, 4, 4, 5, 5, 5,
+6, 6, 7, 7, 7, 8, 8, 9,
+9, 10, 10, 11, 11, 12, 12, 13,
+13, 14, 14, 15, 15, 16, 16, 17,
+18, 18, 19, 19, 20, 21, 21, 22,
+23, 23, 24, 25, 25, 26, 27, 27,
+28, 29, 29, 30, 31, 31, 32, 33,
+34, 34, 35, 36, 37, 38, 38, 39,
+40, 41, 42, 42, 43, 44, 45, 46,
+46, 47, 48, 49, 50, 51, 52, 53,
+53, 54, 55, 56, 57, 58, 59, 60,
+61, 62, 63, 64, 64, 65, 66, 67,
+68, 69, 70, 71, 72, 73, 74, 75,
+76, 77, 78, 79, 80, 81, 83, 84,
+85, 86, 87, 88, 89, 90, 91, 92,
+93, 94, 95, 97, 98, 99, 100, 101,
+102, 103, 104, 106, 107, 108, 109, 110,
+111, 113, 114, 115, 116, 117, 119, 120,
+121, 122, 123, 125, 126, 127, 128, 130,
+131, 132, 133, 135, 136, 137, 138, 140,
+141, 142, 143, 145, 146, 147, 149, 150,
+151, 153, 154, 155, 157, 158, 159, 161,
+162, 163, 165, 166, 167, 169, 170, 171,
+173, 174, 176, 177, 178, 180, 181, 183,
+184, 185, 187, 188, 190, 191, 193, 194,
+196, 197, 198, 200, 201, 203, 204, 206,
+207, 209, 210, 212, 213, 215, 216, 218,
+219, 221, 222, 224, 225, 227, 228, 230,
+231, 233, 235, 236, 238, 239, 241, 242,
+244, 245, 247, 249, 250, 252, 253, 255,
+};
+
+const u8 xgamma_17[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 1,
+1, 1, 1, 1, 1, 2, 2, 2,
+2, 3, 3, 3, 3, 4, 4, 4,
+5, 5, 5, 6, 6, 6, 7, 7,
+7, 8, 8, 9, 9, 10, 10, 10,
+11, 11, 12, 12, 13, 13, 14, 14,
+15, 15, 16, 17, 17, 18, 18, 19,
+19, 20, 21, 21, 22, 22, 23, 24,
+24, 25, 26, 26, 27, 28, 28, 29,
+30, 30, 31, 32, 33, 33, 34, 35,
+36, 36, 37, 38, 39, 39, 40, 41,
+42, 43, 43, 44, 45, 46, 47, 48,
+48, 49, 50, 51, 52, 53, 54, 55,
+56, 56, 57, 58, 59, 60, 61, 62,
+63, 64, 65, 66, 67, 68, 69, 70,
+71, 72, 73, 74, 75, 76, 77, 78,
+79, 80, 81, 82, 83, 84, 85, 86,
+88, 89, 90, 91, 92, 93, 94, 95,
+97, 98, 99, 100, 101, 102, 103, 105,
+106, 107, 108, 109, 111, 112, 113, 114,
+115, 117, 118, 119, 120, 122, 123, 124,
+125, 127, 128, 129, 131, 132, 133, 134,
+136, 137, 138, 140, 141, 142, 144, 145,
+146, 148, 149, 151, 152, 153, 155, 156,
+157, 159, 160, 162, 163, 164, 166, 167,
+169, 170, 172, 173, 174, 176, 177, 179,
+180, 182, 183, 185, 186, 188, 189, 191,
+192, 194, 195, 197, 198, 200, 201, 203,
+205, 206, 208, 209, 211, 212, 214, 216,
+217, 219, 220, 222, 224, 225, 227, 228,
+230, 232, 233, 235, 237, 238, 240, 242,
+243, 245, 247, 248, 250, 252, 253, 255,
+};
+
+const u8 xgamma_18[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+1, 1, 1, 1, 1, 1, 1, 2,
+2, 2, 2, 2, 3, 3, 3, 3,
+4, 4, 4, 4, 5, 5, 5, 6,
+6, 6, 7, 7, 8, 8, 8, 9,
+9, 10, 10, 10, 11, 11, 12, 12,
+13, 13, 14, 14, 15, 15, 16, 16,
+17, 17, 18, 18, 19, 19, 20, 21,
+21, 22, 22, 23, 24, 24, 25, 26,
+26, 27, 28, 28, 29, 30, 30, 31,
+32, 32, 33, 34, 35, 35, 36, 37,
+38, 38, 39, 40, 41, 41, 42, 43,
+44, 45, 46, 46, 47, 48, 49, 50,
+51, 52, 53, 53, 54, 55, 56, 57,
+58, 59, 60, 61, 62, 63, 64, 65,
+66, 67, 68, 69, 70, 71, 72, 73,
+74, 75, 76, 77, 78, 79, 80, 81,
+82, 83, 84, 86, 87, 88, 89, 90,
+91, 92, 93, 95, 96, 97, 98, 99,
+100, 102, 103, 104, 105, 107, 108, 109,
+110, 111, 113, 114, 115, 116, 118, 119,
+120, 122, 123, 124, 126, 127, 128, 129,
+131, 132, 134, 135, 136, 138, 139, 140,
+142, 143, 145, 146, 147, 149, 150, 152,
+153, 154, 156, 157, 159, 160, 162, 163,
+165, 166, 168, 169, 171, 172, 174, 175,
+177, 178, 180, 181, 183, 184, 186, 188,
+189, 191, 192, 194, 195, 197, 199, 200,
+202, 204, 205, 207, 208, 210, 212, 213,
+215, 217, 218, 220, 222, 224, 225, 227,
+229, 230, 232, 234, 236, 237, 239, 241,
+243, 244, 246, 248, 250, 251, 253, 255,
+};
+
+const u8 xgamma_19[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 1, 1, 1, 1, 1, 1,
+1, 1, 2, 2, 2, 2, 2, 3,
+3, 3, 3, 4, 4, 4, 4, 5,
+5, 5, 6, 6, 6, 7, 7, 7,
+8, 8, 8, 9, 9, 9, 10, 10,
+11, 11, 12, 12, 12, 13, 13, 14,
+14, 15, 15, 16, 16, 17, 17, 18,
+18, 19, 20, 20, 21, 21, 22, 22,
+23, 24, 24, 25, 26, 26, 27, 28,
+28, 29, 30, 30, 31, 32, 32, 33,
+34, 35, 35, 36, 37, 38, 38, 39,
+40, 41, 41, 42, 43, 44, 45, 46,
+46, 47, 48, 49, 50, 51, 52, 53,
+53, 54, 55, 56, 57, 58, 59, 60,
+61, 62, 63, 64, 65, 66, 67, 68,
+69, 70, 71, 72, 73, 74, 75, 76,
+77, 78, 79, 81, 82, 83, 84, 85,
+86, 87, 88, 90, 91, 92, 93, 94,
+95, 97, 98, 99, 100, 101, 103, 104,
+105, 106, 108, 109, 110, 112, 113, 114,
+115, 117, 118, 119, 121, 122, 123, 125,
+126, 127, 129, 130, 132, 133, 134, 136,
+137, 139, 140, 141, 143, 144, 146, 147,
+149, 150, 152, 153, 155, 156, 158, 159,
+161, 162, 164, 165, 167, 168, 170, 172,
+173, 175, 176, 178, 180, 181, 183, 184,
+186, 188, 189, 191, 193, 194, 196, 198,
+199, 201, 203, 204, 206, 208, 210, 211,
+213, 215, 217, 218, 220, 222, 224, 225,
+227, 229, 231, 233, 235, 236, 238, 240,
+242, 244, 246, 247, 249, 251, 253, 255,
+};
+
+const u8 xgamma_20[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 1, 1, 1, 1,
+1, 1, 1, 1, 2, 2, 2, 2,
+2, 2, 3, 3, 3, 3, 4, 4,
+4, 4, 5, 5, 5, 5, 6, 6,
+6, 7, 7, 7, 8, 8, 8, 9,
+9, 9, 10, 10, 11, 11, 11, 12,
+12, 13, 13, 14, 14, 15, 15, 16,
+16, 17, 17, 18, 18, 19, 19, 20,
+20, 21, 21, 22, 23, 23, 24, 24,
+25, 26, 26, 27, 28, 28, 29, 30,
+30, 31, 32, 32, 33, 34, 35, 35,
+36, 37, 38, 38, 39, 40, 41, 42,
+42, 43, 44, 45, 46, 47, 47, 48,
+49, 50, 51, 52, 53, 54, 55, 56,
+56, 57, 58, 59, 60, 61, 62, 63,
+64, 65, 66, 67, 68, 69, 70, 71,
+73, 74, 75, 76, 77, 78, 79, 80,
+81, 82, 84, 85, 86, 87, 88, 89,
+91, 92, 93, 94, 95, 97, 98, 99,
+100, 102, 103, 104, 105, 107, 108, 109,
+111, 112, 113, 115, 116, 117, 119, 120,
+121, 123, 124, 126, 127, 128, 130, 131,
+133, 134, 136, 137, 139, 140, 142, 143,
+145, 146, 148, 149, 151, 152, 154, 155,
+157, 158, 160, 162, 163, 165, 166, 168,
+170, 171, 173, 175, 176, 178, 180, 181,
+183, 185, 186, 188, 190, 192, 193, 195,
+197, 199, 200, 202, 204, 206, 207, 209,
+211, 213, 215, 217, 218, 220, 222, 224,
+226, 228, 230, 232, 233, 235, 237, 239,
+241, 243, 245, 247, 249, 251, 253, 255,
+};
+
+const u8 xgamma_21[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 2,
+2, 2, 2, 2, 2, 3, 3, 3,
+3, 3, 4, 4, 4, 4, 5, 5,
+5, 5, 6, 6, 6, 7, 7, 7,
+8, 8, 8, 9, 9, 9, 10, 10,
+11, 11, 11, 12, 12, 13, 13, 14,
+14, 14, 15, 15, 16, 16, 17, 17,
+18, 18, 19, 20, 20, 21, 21, 22,
+22, 23, 24, 24, 25, 25, 26, 27,
+27, 28, 29, 29, 30, 31, 31, 32,
+33, 33, 34, 35, 36, 36, 37, 38,
+39, 40, 40, 41, 42, 43, 44, 44,
+45, 46, 47, 48, 49, 50, 51, 51,
+52, 53, 54, 55, 56, 57, 58, 59,
+60, 61, 62, 63, 64, 65, 66, 67,
+68, 69, 70, 71, 72, 73, 75, 76,
+77, 78, 79, 80, 81, 83, 84, 85,
+86, 87, 88, 90, 91, 92, 93, 95,
+96, 97, 98, 100, 101, 102, 104, 105,
+106, 107, 109, 110, 112, 113, 114, 116,
+117, 118, 120, 121, 123, 124, 126, 127,
+129, 130, 131, 133, 134, 136, 137, 139,
+141, 142, 144, 145, 147, 148, 150, 151,
+153, 155, 156, 158, 160, 161, 163, 165,
+166, 168, 170, 171, 173, 175, 176, 178,
+180, 182, 183, 185, 187, 189, 191, 192,
+194, 196, 198, 200, 202, 203, 205, 207,
+209, 211, 213, 215, 217, 219, 221, 223,
+225, 226, 228, 230, 232, 234, 236, 238,
+241, 243, 245, 247, 249, 251, 253, 255,
+};
+
+const u8 xgamma_22[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 2, 2, 2, 2, 2, 2, 2,
+3, 3, 3, 3, 3, 4, 4, 4,
+4, 5, 5, 5, 5, 6, 6, 6,
+6, 7, 7, 7, 8, 8, 8, 9,
+9, 9, 10, 10, 11, 11, 11, 12,
+12, 13, 13, 13, 14, 14, 15, 15,
+16, 16, 17, 17, 18, 18, 19, 19,
+20, 20, 21, 22, 22, 23, 23, 24,
+25, 25, 26, 26, 27, 28, 28, 29,
+30, 30, 31, 32, 33, 33, 34, 35,
+35, 36, 37, 38, 39, 39, 40, 41,
+42, 43, 43, 44, 45, 46, 47, 48,
+49, 49, 50, 51, 52, 53, 54, 55,
+56, 57, 58, 59, 60, 61, 62, 63,
+64, 65, 66, 67, 68, 69, 70, 71,
+73, 74, 75, 76, 77, 78, 79, 81,
+82, 83, 84, 85, 87, 88, 89, 90,
+91, 93, 94, 95, 97, 98, 99, 100,
+102, 103, 105, 106, 107, 109, 110, 111,
+113, 114, 116, 117, 119, 120, 121, 123,
+124, 126, 127, 129, 130, 132, 133, 135,
+137, 138, 140, 141, 143, 145, 146, 148,
+149, 151, 153, 154, 156, 158, 159, 161,
+163, 165, 166, 168, 170, 172, 173, 175,
+177, 179, 181, 182, 184, 186, 188, 190,
+192, 194, 196, 197, 199, 201, 203, 205,
+207, 209, 211, 213, 215, 217, 219, 221,
+223, 225, 227, 229, 231, 234, 236, 238,
+240, 242, 244, 246, 248, 251, 253, 255,
+};
+
+const u8 xgamma_23[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 2, 2, 2, 2,
+2, 2, 2, 3, 3, 3, 3, 3,
+4, 4, 4, 4, 4, 5, 5, 5,
+5, 6, 6, 6, 7, 7, 7, 7,
+8, 8, 8, 9, 9, 10, 10, 10,
+11, 11, 11, 12, 12, 13, 13, 13,
+14, 14, 15, 15, 16, 16, 17, 17,
+18, 18, 19, 19, 20, 20, 21, 21,
+22, 23, 23, 24, 24, 25, 26, 26,
+27, 28, 28, 29, 30, 30, 31, 32,
+32, 33, 34, 35, 35, 36, 37, 38,
+38, 39, 40, 41, 42, 42, 43, 44,
+45, 46, 47, 48, 49, 49, 50, 51,
+52, 53, 54, 55, 56, 57, 58, 59,
+60, 61, 62, 63, 64, 65, 66, 67,
+69, 70, 71, 72, 73, 74, 75, 76,
+78, 79, 80, 81, 82, 84, 85, 86,
+87, 89, 90, 91, 92, 94, 95, 96,
+98, 99, 100, 102, 103, 104, 106, 107,
+109, 110, 112, 113, 114, 116, 117, 119,
+120, 122, 123, 125, 126, 128, 130, 131,
+133, 134, 136, 138, 139, 141, 143, 144,
+146, 148, 149, 151, 153, 154, 156, 158,
+160, 161, 163, 165, 167, 169, 170, 172,
+174, 176, 178, 180, 182, 183, 185, 187,
+189, 191, 193, 195, 197, 199, 201, 203,
+205, 207, 209, 211, 213, 215, 218, 220,
+222, 224, 226, 228, 230, 233, 235, 237,
+239, 241, 244, 246, 248, 250, 253, 255,
+};
+
+const u8 xgamma_24[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 2,
+2, 2, 2, 2, 2, 2, 3, 3,
+3, 3, 3, 4, 4, 4, 4, 4,
+5, 5, 5, 5, 6, 6, 6, 6,
+7, 7, 7, 8, 8, 8, 9, 9,
+9, 10, 10, 10, 11, 11, 11, 12,
+12, 13, 13, 14, 14, 14, 15, 15,
+16, 16, 17, 17, 18, 18, 19, 19,
+20, 20, 21, 22, 22, 23, 23, 24,
+24, 25, 26, 26, 27, 28, 28, 29,
+30, 30, 31, 32, 32, 33, 34, 35,
+35, 36, 37, 38, 39, 39, 40, 41,
+42, 43, 43, 44, 45, 46, 47, 48,
+49, 50, 51, 52, 53, 53, 54, 55,
+56, 57, 58, 59, 60, 62, 63, 64,
+65, 66, 67, 68, 69, 70, 71, 73,
+74, 75, 76, 77, 78, 80, 81, 82,
+83, 85, 86, 87, 88, 90, 91, 92,
+94, 95, 96, 98, 99, 100, 102, 103,
+105, 106, 108, 109, 111, 112, 114, 115,
+117, 118, 120, 121, 123, 124, 126, 127,
+129, 131, 132, 134, 136, 137, 139, 141,
+142, 144, 146, 148, 149, 151, 153, 155,
+156, 158, 160, 162, 164, 166, 167, 169,
+171, 173, 175, 177, 179, 181, 183, 185,
+187, 189, 191, 193, 195, 197, 199, 201,
+203, 205, 207, 210, 212, 214, 216, 218,
+220, 223, 225, 227, 229, 232, 234, 236,
+239, 241, 243, 246, 248, 250, 253, 255,
+};
+
+const u8 xgamma_25[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 2, 2, 2, 2, 2, 2, 2,
+2, 3, 3, 3, 3, 3, 4, 4,
+4, 4, 4, 5, 5, 5, 5, 6,
+6, 6, 6, 7, 7, 7, 7, 8,
+8, 8, 9, 9, 9, 10, 10, 10,
+11, 11, 12, 12, 12, 13, 13, 14,
+14, 15, 15, 15, 16, 16, 17, 17,
+18, 18, 19, 19, 20, 20, 21, 22,
+22, 23, 23, 24, 25, 25, 26, 26,
+27, 28, 28, 29, 30, 30, 31, 32,
+33, 33, 34, 35, 36, 36, 37, 38,
+39, 40, 40, 41, 42, 43, 44, 45,
+46, 46, 47, 48, 49, 50, 51, 52,
+53, 54, 55, 56, 57, 58, 59, 60,
+61, 62, 63, 64, 65, 67, 68, 69,
+70, 71, 72, 73, 75, 76, 77, 78,
+80, 81, 82, 83, 85, 86, 87, 89,
+90, 91, 93, 94, 95, 97, 98, 99,
+101, 102, 104, 105, 107, 108, 110, 111,
+113, 114, 116, 117, 119, 121, 122, 124,
+125, 127, 129, 130, 132, 134, 135, 137,
+139, 141, 142, 144, 146, 148, 150, 151,
+153, 155, 157, 159, 161, 163, 165, 166,
+168, 170, 172, 174, 176, 178, 180, 182,
+184, 186, 189, 191, 193, 195, 197, 199,
+201, 204, 206, 208, 210, 212, 215, 217,
+219, 221, 224, 226, 228, 231, 233, 235,
+238, 240, 243, 245, 248, 250, 253, 255,
+};
+
+const u8 xgamma_26[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 2, 2, 2, 2,
+2, 2, 2, 2, 3, 3, 3, 3,
+3, 3, 4, 4, 4, 4, 5, 5,
+5, 5, 5, 6, 6, 6, 6, 7,
+7, 7, 8, 8, 8, 9, 9, 9,
+10, 10, 10, 11, 11, 11, 12, 12,
+13, 13, 13, 14, 14, 15, 15, 16,
+16, 17, 17, 18, 18, 19, 19, 20,
+20, 21, 21, 22, 22, 23, 24, 24,
+25, 25, 26, 27, 27, 28, 29, 29,
+30, 31, 31, 32, 33, 34, 34, 35,
+36, 37, 38, 38, 39, 40, 41, 42,
+42, 43, 44, 45, 46, 47, 48, 49,
+50, 51, 52, 53, 54, 55, 56, 57,
+58, 59, 60, 61, 62, 63, 64, 65,
+66, 68, 69, 70, 71, 72, 73, 75,
+76, 77, 78, 80, 81, 82, 84, 85,
+86, 88, 89, 90, 92, 93, 94, 96,
+97, 99, 100, 102, 103, 105, 106, 108,
+109, 111, 112, 114, 115, 117, 119, 120,
+122, 124, 125, 127, 129, 130, 132, 134,
+136, 137, 139, 141, 143, 145, 146, 148,
+150, 152, 154, 156, 158, 160, 162, 164,
+166, 168, 170, 172, 174, 176, 178, 180,
+182, 184, 186, 188, 191, 193, 195, 197,
+199, 202, 204, 206, 209, 211, 213, 215,
+218, 220, 223, 225, 227, 230, 232, 235,
+237, 240, 242, 245, 247, 250, 252, 255,
+};
+
+const u8 xgamma_27[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 2,
+2, 2, 2, 2, 2, 2, 3, 3,
+3, 3, 3, 3, 3, 4, 4, 4,
+4, 4, 5, 5, 5, 5, 6, 6,
+6, 6, 7, 7, 7, 7, 8, 8,
+8, 9, 9, 9, 10, 10, 10, 11,
+11, 12, 12, 12, 13, 13, 14, 14,
+14, 15, 15, 16, 16, 17, 17, 18,
+18, 19, 19, 20, 20, 21, 21, 22,
+23, 23, 24, 24, 25, 26, 26, 27,
+28, 28, 29, 30, 30, 31, 32, 33,
+33, 34, 35, 36, 36, 37, 38, 39,
+40, 41, 41, 42, 43, 44, 45, 46,
+47, 48, 49, 50, 51, 51, 52, 53,
+55, 56, 57, 58, 59, 60, 61, 62,
+63, 64, 65, 66, 68, 69, 70, 71,
+72, 74, 75, 76, 77, 79, 80, 81,
+83, 84, 85, 87, 88, 89, 91, 92,
+94, 95, 97, 98, 100, 101, 103, 104,
+106, 107, 109, 110, 112, 114, 115, 117,
+119, 120, 122, 124, 125, 127, 129, 131,
+132, 134, 136, 138, 140, 141, 143, 145,
+147, 149, 151, 153, 155, 157, 159, 161,
+163, 165, 167, 169, 171, 173, 175, 178,
+180, 182, 184, 186, 188, 191, 193, 195,
+198, 200, 202, 205, 207, 209, 212, 214,
+216, 219, 221, 224, 226, 229, 231, 234,
+237, 239, 242, 244, 247, 250, 252, 255,
+};
+
+const u8 xgamma_28[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 2, 2, 2, 2, 2, 2, 2,
+2, 3, 3, 3, 3, 3, 3, 3,
+4, 4, 4, 4, 4, 5, 5, 5,
+5, 6, 6, 6, 6, 7, 7, 7,
+7, 8, 8, 8, 9, 9, 9, 10,
+10, 10, 11, 11, 11, 12, 12, 13,
+13, 13, 14, 14, 15, 15, 16, 16,
+17, 17, 18, 18, 19, 19, 20, 20,
+21, 21, 22, 22, 23, 24, 24, 25,
+25, 26, 27, 27, 28, 29, 29, 30,
+31, 32, 32, 33, 34, 35, 35, 36,
+37, 38, 39, 39, 40, 41, 42, 43,
+44, 45, 46, 47, 48, 49, 50, 50,
+51, 52, 54, 55, 56, 57, 58, 59,
+60, 61, 62, 63, 64, 66, 67, 68,
+69, 70, 72, 73, 74, 75, 77, 78,
+79, 81, 82, 83, 85, 86, 87, 89,
+90, 92, 93, 95, 96, 98, 99, 101,
+102, 104, 105, 107, 109, 110, 112, 114,
+115, 117, 119, 120, 122, 124, 126, 127,
+129, 131, 133, 135, 137, 138, 140, 142,
+144, 146, 148, 150, 152, 154, 156, 158,
+160, 162, 164, 167, 169, 171, 173, 175,
+177, 180, 182, 184, 186, 189, 191, 193,
+196, 198, 200, 203, 205, 208, 210, 213,
+215, 218, 220, 223, 225, 228, 231, 233,
+236, 239, 241, 244, 247, 249, 252, 255,
+};
+
+const u8 xgamma_29[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 2, 2, 2, 2,
+2, 2, 2, 2, 3, 3, 3, 3,
+3, 3, 3, 4, 4, 4, 4, 4,
+5, 5, 5, 5, 6, 6, 6, 6,
+7, 7, 7, 7, 8, 8, 8, 9,
+9, 9, 9, 10, 10, 11, 11, 11,
+12, 12, 12, 13, 13, 14, 14, 15,
+15, 15, 16, 16, 17, 17, 18, 18,
+19, 19, 20, 21, 21, 22, 22, 23,
+23, 24, 25, 25, 26, 27, 27, 28,
+29, 29, 30, 31, 32, 32, 33, 34,
+35, 35, 36, 37, 38, 39, 39, 40,
+41, 42, 43, 44, 45, 46, 47, 48,
+49, 50, 51, 52, 53, 54, 55, 56,
+57, 58, 59, 60, 61, 62, 64, 65,
+66, 67, 68, 70, 71, 72, 73, 75,
+76, 77, 79, 80, 81, 83, 84, 86,
+87, 88, 90, 91, 93, 94, 96, 97,
+99, 101, 102, 104, 105, 107, 109, 110,
+112, 114, 115, 117, 119, 121, 122, 124,
+126, 128, 130, 132, 134, 135, 137, 139,
+141, 143, 145, 147, 149, 151, 153, 155,
+158, 160, 162, 164, 166, 168, 171, 173,
+175, 177, 180, 182, 184, 187, 189, 191,
+194, 196, 199, 201, 204, 206, 209, 211,
+214, 216, 219, 222, 224, 227, 230, 232,
+235, 238, 241, 244, 246, 249, 252, 255,
+};
+
+const u8 xgamma_30[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 2,
+2, 2, 2, 2, 2, 2, 2, 3,
+3, 3, 3, 3, 3, 3, 4, 4,
+4, 4, 4, 5, 5, 5, 5, 6,
+6, 6, 6, 6, 7, 7, 7, 8,
+8, 8, 8, 9, 9, 9, 10, 10,
+10, 11, 11, 12, 12, 12, 13, 13,
+14, 14, 14, 15, 15, 16, 16, 17,
+17, 18, 18, 19, 19, 20, 20, 21,
+22, 22, 23, 23, 24, 25, 25, 26,
+27, 27, 28, 29, 29, 30, 31, 32,
+32, 33, 34, 35, 35, 36, 37, 38,
+39, 40, 40, 41, 42, 43, 44, 45,
+46, 47, 48, 49, 50, 51, 52, 53,
+54, 55, 56, 57, 58, 60, 61, 62,
+63, 64, 65, 67, 68, 69, 70, 72,
+73, 74, 76, 77, 78, 80, 81, 82,
+84, 85, 87, 88, 90, 91, 93, 94,
+96, 97, 99, 101, 102, 104, 105, 107,
+109, 111, 112, 114, 116, 118, 119, 121,
+123, 125, 127, 129, 131, 132, 134, 136,
+138, 140, 142, 144, 147, 149, 151, 153,
+155, 157, 159, 162, 164, 166, 168, 171,
+173, 175, 178, 180, 182, 185, 187, 190,
+192, 195, 197, 200, 202, 205, 207, 210,
+213, 215, 218, 221, 223, 226, 229, 232,
+235, 237, 240, 243, 246, 249, 252, 255,
+};
+
+const u8 xgamma_31[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 2, 2, 2, 2, 2, 2, 2,
+2, 2, 3, 3, 3, 3, 3, 3,
+4, 4, 4, 4, 4, 4, 5, 5,
+5, 5, 6, 6, 6, 6, 6, 7,
+7, 7, 8, 8, 8, 8, 9, 9,
+9, 10, 10, 10, 11, 11, 12, 12,
+12, 13, 13, 14, 14, 14, 15, 15,
+16, 16, 17, 17, 18, 18, 19, 19,
+20, 20, 21, 22, 22, 23, 23, 24,
+25, 25, 26, 27, 27, 28, 29, 29,
+30, 31, 32, 32, 33, 34, 35, 36,
+36, 37, 38, 39, 40, 41, 42, 42,
+43, 44, 45, 46, 47, 48, 49, 50,
+51, 52, 53, 54, 56, 57, 58, 59,
+60, 61, 62, 64, 65, 66, 67, 69,
+70, 71, 73, 74, 75, 77, 78, 79,
+81, 82, 84, 85, 87, 88, 90, 91,
+93, 94, 96, 97, 99, 101, 102, 104,
+106, 108, 109, 111, 113, 115, 116, 118,
+120, 122, 124, 126, 128, 130, 132, 134,
+136, 138, 140, 142, 144, 146, 148, 150,
+152, 155, 157, 159, 161, 164, 166, 168,
+171, 173, 175, 178, 180, 183, 185, 188,
+190, 193, 195, 198, 201, 203, 206, 209,
+211, 214, 217, 220, 222, 225, 228, 231,
+234, 237, 240, 243, 246, 249, 252, 255,
+};
+
+const u8 xgamma_32[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 2, 2, 2, 2,
+2, 2, 2, 2, 2, 3, 3, 3,
+3, 3, 3, 4, 4, 4, 4, 4,
+4, 5, 5, 5, 5, 6, 6, 6,
+6, 6, 7, 7, 7, 8, 8, 8,
+8, 9, 9, 9, 10, 10, 10, 11,
+11, 12, 12, 12, 13, 13, 14, 14,
+14, 15, 15, 16, 16, 17, 17, 18,
+18, 19, 19, 20, 21, 21, 22, 22,
+23, 23, 24, 25, 25, 26, 27, 27,
+28, 29, 30, 30, 31, 32, 33, 33,
+34, 35, 36, 37, 37, 38, 39, 40,
+41, 42, 43, 44, 45, 46, 47, 48,
+49, 50, 51, 52, 53, 54, 55, 56,
+57, 59, 60, 61, 62, 63, 65, 66,
+67, 68, 70, 71, 72, 74, 75, 76,
+78, 79, 81, 82, 84, 85, 87, 88,
+90, 91, 93, 95, 96, 98, 99, 101,
+103, 105, 106, 108, 110, 112, 113, 115,
+117, 119, 121, 123, 125, 127, 129, 131,
+133, 135, 137, 139, 141, 143, 146, 148,
+150, 152, 154, 157, 159, 161, 164, 166,
+168, 171, 173, 176, 178, 181, 183, 186,
+188, 191, 194, 196, 199, 202, 204, 207,
+210, 213, 216, 219, 221, 224, 227, 230,
+233, 236, 239, 242, 246, 249, 252, 255,
+};
+
+const u8 xgamma_33[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 2, 2,
+2, 2, 2, 2, 2, 2, 2, 3,
+3, 3, 3, 3, 3, 3, 4, 4,
+4, 4, 4, 4, 5, 5, 5, 5,
+6, 6, 6, 6, 7, 7, 7, 7,
+8, 8, 8, 9, 9, 9, 9, 10,
+10, 11, 11, 11, 12, 12, 12, 13,
+13, 14, 14, 15, 15, 15, 16, 16,
+17, 17, 18, 18, 19, 19, 20, 21,
+21, 22, 22, 23, 24, 24, 25, 26,
+26, 27, 28, 28, 29, 30, 31, 31,
+32, 33, 34, 34, 35, 36, 37, 38,
+39, 40, 40, 41, 42, 43, 44, 45,
+46, 47, 48, 49, 50, 51, 53, 54,
+55, 56, 57, 58, 59, 61, 62, 63,
+64, 66, 67, 68, 70, 71, 72, 74,
+75, 76, 78, 79, 81, 82, 84, 85,
+87, 88, 90, 92, 93, 95, 97, 98,
+100, 102, 103, 105, 107, 109, 111, 113,
+114, 116, 118, 120, 122, 124, 126, 128,
+130, 132, 134, 136, 139, 141, 143, 145,
+147, 150, 152, 154, 157, 159, 161, 164,
+166, 169, 171, 174, 176, 179, 181, 184,
+187, 189, 192, 195, 198, 200, 203, 206,
+209, 212, 215, 217, 220, 223, 226, 230,
+233, 236, 239, 242, 245, 248, 252, 255,
+};
+
+const u8 xgamma_34[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 2, 2, 2, 2, 2, 2, 2,
+2, 2, 3, 3, 3, 3, 3, 3,
+3, 4, 4, 4, 4, 4, 5, 5,
+5, 5, 5, 6, 6, 6, 6, 7,
+7, 7, 7, 8, 8, 8, 9, 9,
+9, 10, 10, 10, 11, 11, 11, 12,
+12, 12, 13, 13, 14, 14, 15, 15,
+16, 16, 17, 17, 18, 18, 19, 19,
+20, 20, 21, 21, 22, 23, 23, 24,
+24, 25, 26, 26, 27, 28, 29, 29,
+30, 31, 32, 32, 33, 34, 35, 36,
+37, 37, 38, 39, 40, 41, 42, 43,
+44, 45, 46, 47, 48, 49, 50, 51,
+52, 53, 55, 56, 57, 58, 59, 60,
+62, 63, 64, 66, 67, 68, 70, 71,
+72, 74, 75, 77, 78, 80, 81, 83,
+84, 86, 87, 89, 90, 92, 94, 95,
+97, 99, 101, 102, 104, 106, 108, 110,
+112, 114, 115, 117, 119, 121, 123, 125,
+128, 130, 132, 134, 136, 138, 141, 143,
+145, 147, 150, 152, 154, 157, 159, 162,
+164, 167, 169, 172, 174, 177, 180, 182,
+185, 188, 190, 193, 196, 199, 202, 205,
+208, 210, 213, 216, 219, 223, 226, 229,
+232, 235, 238, 242, 245, 248, 252, 255,
+};
+
+const u8 xgamma_35[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 2, 2, 2, 2, 2,
+2, 2, 2, 2, 2, 3, 3, 3,
+3, 3, 3, 4, 4, 4, 4, 4,
+4, 5, 5, 5, 5, 5, 6, 6,
+6, 6, 7, 7, 7, 7, 8, 8,
+8, 9, 9, 9, 10, 10, 10, 11,
+11, 11, 12, 12, 13, 13, 13, 14,
+14, 15, 15, 16, 16, 17, 17, 18,
+18, 19, 19, 20, 20, 21, 22, 22,
+23, 23, 24, 25, 25, 26, 27, 28,
+28, 29, 30, 30, 31, 32, 33, 34,
+35, 35, 36, 37, 38, 39, 40, 41,
+42, 43, 44, 45, 46, 47, 48, 49,
+50, 51, 52, 53, 54, 56, 57, 58,
+59, 60, 62, 63, 64, 66, 67, 68,
+70, 71, 72, 74, 75, 77, 78, 80,
+81, 83, 85, 86, 88, 89, 91, 93,
+94, 96, 98, 100, 102, 103, 105, 107,
+109, 111, 113, 115, 117, 119, 121, 123,
+125, 127, 129, 131, 134, 136, 138, 140,
+143, 145, 147, 150, 152, 155, 157, 159,
+162, 165, 167, 170, 172, 175, 178, 180,
+183, 186, 189, 192, 194, 197, 200, 203,
+206, 209, 212, 215, 219, 222, 225, 228,
+231, 235, 238, 241, 245, 248, 252, 255,
+};
+
+const u8 xgamma_36[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 2, 2,
+2, 2, 2, 2, 2, 2, 2, 3,
+3, 3, 3, 3, 3, 3, 4, 4,
+4, 4, 4, 4, 5, 5, 5, 5,
+6, 6, 6, 6, 6, 7, 7, 7,
+8, 8, 8, 8, 9, 9, 9, 10,
+10, 10, 11, 11, 12, 12, 12, 13,
+13, 14, 14, 15, 15, 15, 16, 16,
+17, 17, 18, 18, 19, 20, 20, 21,
+21, 22, 23, 23, 24, 24, 25, 26,
+27, 27, 28, 29, 29, 30, 31, 32,
+33, 33, 34, 35, 36, 37, 38, 39,
+40, 41, 42, 42, 43, 44, 46, 47,
+48, 49, 50, 51, 52, 53, 54, 56,
+57, 58, 59, 61, 62, 63, 64, 66,
+67, 69, 70, 71, 73, 74, 76, 77,
+79, 80, 82, 83, 85, 87, 88, 90,
+92, 94, 95, 97, 99, 101, 103, 104,
+106, 108, 110, 112, 114, 116, 118, 120,
+122, 125, 127, 129, 131, 133, 136, 138,
+140, 143, 145, 147, 150, 152, 155, 157,
+160, 162, 165, 168, 170, 173, 176, 179,
+181, 184, 187, 190, 193, 196, 199, 202,
+205, 208, 211, 214, 218, 221, 224, 227,
+231, 234, 237, 241, 244, 248, 251, 255,
+};
+
+const u8 xgamma_37[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+2, 2, 2, 2, 2, 2, 2, 2,
+2, 2, 3, 3, 3, 3, 3, 3,
+3, 4, 4, 4, 4, 4, 5, 5,
+5, 5, 5, 6, 6, 6, 6, 7,
+7, 7, 7, 8, 8, 8, 9, 9,
+9, 10, 10, 10, 11, 11, 11, 12,
+12, 13, 13, 13, 14, 14, 15, 15,
+16, 16, 17, 17, 18, 18, 19, 19,
+20, 20, 21, 22, 22, 23, 24, 24,
+25, 26, 26, 27, 28, 28, 29, 30,
+31, 32, 32, 33, 34, 35, 36, 37,
+38, 39, 39, 40, 41, 42, 43, 44,
+45, 47, 48, 49, 50, 51, 52, 53,
+54, 56, 57, 58, 59, 61, 62, 63,
+65, 66, 67, 69, 70, 72, 73, 75,
+76, 78, 79, 81, 83, 84, 86, 88,
+89, 91, 93, 95, 96, 98, 100, 102,
+104, 106, 108, 110, 112, 114, 116, 118,
+120, 122, 124, 127, 129, 131, 133, 136,
+138, 140, 143, 145, 148, 150, 153, 155,
+158, 160, 163, 166, 169, 171, 174, 177,
+180, 183, 186, 188, 191, 194, 198, 201,
+204, 207, 210, 213, 217, 220, 223, 227,
+230, 233, 237, 241, 244, 248, 251, 255,
+};
+
+const u8 xgamma_38[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 2, 2, 2, 2, 2,
+2, 2, 2, 2, 3, 3, 3, 3,
+3, 3, 3, 4, 4, 4, 4, 4,
+4, 5, 5, 5, 5, 6, 6, 6,
+6, 6, 7, 7, 7, 8, 8, 8,
+8, 9, 9, 9, 10, 10, 10, 11,
+11, 12, 12, 12, 13, 13, 14, 14,
+15, 15, 15, 16, 16, 17, 18, 18,
+19, 19, 20, 20, 21, 21, 22, 23,
+23, 24, 25, 25, 26, 27, 28, 28,
+29, 30, 31, 31, 32, 33, 34, 35,
+36, 37, 38, 38, 39, 40, 41, 42,
+43, 44, 45, 47, 48, 49, 50, 51,
+52, 53, 55, 56, 57, 58, 60, 61,
+62, 64, 65, 66, 68, 69, 71, 72,
+74, 75, 77, 78, 80, 82, 83, 85,
+87, 88, 90, 92, 94, 96, 98, 99,
+101, 103, 105, 107, 109, 111, 113, 115,
+118, 120, 122, 124, 126, 129, 131, 133,
+136, 138, 141, 143, 146, 148, 151, 153,
+156, 158, 161, 164, 167, 169, 172, 175,
+178, 181, 184, 187, 190, 193, 196, 199,
+203, 206, 209, 212, 216, 219, 222, 226,
+229, 233, 237, 240, 244, 247, 251, 255,
+};
+
+const u8 xgamma_39[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 2, 2, 2,
+2, 2, 2, 2, 2, 2, 3, 3,
+3, 3, 3, 3, 3, 4, 4, 4,
+4, 4, 4, 5, 5, 5, 5, 5,
+6, 6, 6, 6, 7, 7, 7, 7,
+8, 8, 8, 9, 9, 9, 10, 10,
+10, 11, 11, 11, 12, 12, 13, 13,
+13, 14, 14, 15, 15, 16, 16, 17,
+17, 18, 18, 19, 20, 20, 21, 21,
+22, 23, 23, 24, 25, 25, 26, 27,
+27, 28, 29, 30, 31, 31, 32, 33,
+34, 35, 36, 37, 38, 38, 39, 40,
+41, 42, 43, 45, 46, 47, 48, 49,
+50, 51, 52, 54, 55, 56, 57, 59,
+60, 61, 63, 64, 66, 67, 68, 70,
+71, 73, 74, 76, 78, 79, 81, 83,
+84, 86, 88, 90, 91, 93, 95, 97,
+99, 101, 103, 105, 107, 109, 111, 113,
+115, 117, 120, 122, 124, 126, 129, 131,
+133, 136, 138, 141, 143, 146, 149, 151,
+154, 157, 159, 162, 165, 168, 171, 173,
+176, 179, 182, 185, 189, 192, 195, 198,
+201, 205, 208, 211, 215, 218, 222, 225,
+229, 232, 236, 240, 243, 247, 251, 255,
+};
+
+const u8 xgamma_40[GAMMA_TABLE_LENGTH] = {
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 0, 0,
+0, 0, 0, 0, 0, 0, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 1,
+1, 1, 1, 1, 1, 1, 1, 2,
+2, 2, 2, 2, 2, 2, 2, 2,
+2, 3, 3, 3, 3, 3, 3, 3,
+4, 4, 4, 4, 4, 5, 5, 5,
+5, 5, 6, 6, 6, 6, 7, 7,
+7, 7, 8, 8, 8, 9, 9, 9,
+9, 10, 10, 11, 11, 11, 12, 12,
+13, 13, 13, 14, 14, 15, 15, 16,
+16, 17, 17, 18, 18, 19, 19, 20,
+21, 21, 22, 23, 23, 24, 25, 25,
+26, 27, 27, 28, 29, 30, 31, 31,
+32, 33, 34, 35, 36, 37, 38, 39,
+40, 41, 42, 43, 44, 45, 46, 47,
+48, 49, 50, 52, 53, 54, 55, 57,
+58, 59, 61, 62, 63, 65, 66, 68,
+69, 71, 72, 74, 75, 77, 79, 80,
+82, 84, 85, 87, 89, 91, 93, 95,
+96, 98, 100, 102, 104, 107, 109, 111,
+113, 115, 117, 120, 122, 124, 126, 129,
+131, 134, 136, 139, 141, 144, 146, 149,
+152, 155, 157, 160, 163, 166, 169, 172,
+175, 178, 181, 184, 187, 190, 194, 197,
+200, 203, 207, 210, 214, 217, 221, 224,
+228, 232, 236, 239, 243, 247, 251, 255,
+};
+
+const u8 *xgamma_curves[GAMMA_CURVE_LENGTH] =  {
+	&xgamma_01[0],
+	&xgamma_02[0],
+	&xgamma_03[0],
+	&xgamma_04[0],
+	&xgamma_05[0],
+	&xgamma_06[0],
+	&xgamma_07[0],
+	&xgamma_08[0],
+	&xgamma_09[0],
+	&xgamma_10[0],
+	&xgamma_11[0],
+	&xgamma_12[0],
+	&xgamma_13[0],
+	&xgamma_14[0],
+	&xgamma_15[0],
+	&xgamma_16[0],
+	&xgamma_17[0],
+	&xgamma_18[0],
+	&xgamma_19[0],
+	&xgamma_20[0],
+	&xgamma_21[0],
+	&xgamma_22[0],
+	&xgamma_23[0],
+	&xgamma_24[0],
+	&xgamma_25[0],
+	&xgamma_26[0],
+	&xgamma_27[0],
+	&xgamma_28[0],
+	&xgamma_29[0],
+	&xgamma_30[0],
+	&xgamma_31[0],
+	&xgamma_32[0],
+	&xgamma_33[0],
+	&xgamma_34[0],
+	&xgamma_35[0],
+	&xgamma_36[0],
+	&xgamma_37[0],
+	&xgamma_38[0],
+	&xgamma_39[0],
+	&xgamma_40[0],
+};
diff --git a/drivers/media/platform/xilinx/xilinx-gamma.c b/drivers/media/platform/xilinx/xilinx-gamma.c
new file mode 100644
index 0000000..d2f2bb4
--- /dev/null
+++ b/drivers/media/platform/xilinx/xilinx-gamma.c
@@ -0,0 +1,492 @@
+/*
+ * Xilinx Gamma Correction IP
+ *
+ * Copyright (C) 2017 Xilinx, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/xilinx-v4l2-controls.h>
+
+#include <media/v4l2-async.h>
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-subdev.h>
+
+#include "xilinx-vip.h"
+#include "xilinx-gamma.h"
+#include "xilinx-gamma-coeff.h"
+
+#define XGAMMA_LUT_LENGTH	(128)
+#define XGAMMA_MIN_HEIGHT	(32)
+#define XGAMMA_MAX_HEIGHT	(2160)
+#define XGAMMA_DEF_HEIGHT	(720)
+#define XGAMMA_MIN_WIDTH	(32)
+#define XGAMMA_MAX_WIDTH	(3840)
+#define XGAMMA_DEF_WIDTH	(1280)
+
+#define XGAMMA_POWER_ON		(0)
+#define XGAMMA_POWER_OFF	(1)
+
+enum xgamma_video_format {
+	XGAMMA_RGB = 0,
+};
+
+struct xgamma_dev {
+	struct xvip_device xvip;
+	struct media_pad pads[2];
+	struct v4l2_mbus_framefmt formats[2];
+	struct v4l2_mbus_framefmt default_formats[2];
+	struct v4l2_ctrl_handler ctrl_handler;
+
+	enum xgamma_video_format vid_fmt;
+	const u8 *red_lut;
+	const u8 *green_lut;
+	const u8 *blue_lut;
+
+	struct gpio_desc *rst_gpio;
+};
+
+static inline u32 xg_read(struct xgamma_dev *xg, u32 reg)
+{
+	u32 data;
+
+	data = xvip_read(&xg->xvip, reg);
+	dev_dbg(xg->xvip.dev,
+		"Reading 0x%x from reg offset 0x%x", data, reg);
+	return data;
+}
+
+static inline void xg_write(struct xgamma_dev *xg, u32 reg, u32 data)
+{
+	u32 rb;
+
+	dev_dbg(xg->xvip.dev,
+		"Writing 0x%x to reg offset 0x%x", data, reg);
+	xvip_write(&xg->xvip, reg, data);
+	rb = xg_read(xg, reg);
+	if (rb != data) {
+		dev_dbg(xg->xvip.dev,
+			"Wrote 0x%x does not match read back 0x%x",
+			data, rb);
+	}
+}
+
+static inline struct xgamma_dev *to_xg(struct v4l2_subdev *subdev)
+{
+	return container_of(subdev, struct xgamma_dev, xvip.subdev);
+}
+
+static struct v4l2_mbus_framefmt *
+__xg_get_pad_format(struct xgamma_dev *xg,
+		    struct v4l2_subdev_pad_config *cfg,
+		    unsigned int pad, u32 which)
+{
+	switch (which) {
+	case V4L2_SUBDEV_FORMAT_TRY:
+		return v4l2_subdev_get_try_format(
+					&xg->xvip.subdev, cfg, pad);
+	case V4L2_SUBDEV_FORMAT_ACTIVE:
+		return &xg->formats[pad];
+	default:
+		return NULL;
+	}
+}
+
+static void xg_set_default_state(struct xgamma_dev *xg)
+{
+	xg->vid_fmt = XGAMMA_RGB;
+}
+
+static void xg_set_lut_entries(struct xgamma_dev *xg,
+			       const u8 *lut, const u32 lut_base,
+			       const char *component)
+{
+	int itr;
+	u32 lut_offset, lut_data;
+
+	lut_offset = lut_base;
+	/* Write LUT Entries */
+	for (itr = 0; itr < XGAMMA_LUT_LENGTH; itr++) {
+		lut_data = (lut[2 * itr + 1] << 16) | lut[2 * itr];
+		xg_write(xg, lut_offset, lut_data);
+		lut_offset += 4;
+	}
+}
+
+static int xg_s_stream(struct v4l2_subdev *subdev, int enable)
+{
+	struct xgamma_dev *xg = to_xg(subdev);
+
+	if (!enable) {
+		dev_dbg(xg->xvip.dev, "%s : Off", __func__);
+		gpiod_set_value_cansleep(xg->rst_gpio, XGAMMA_POWER_OFF);
+		usleep_range(100, 150);
+		gpiod_set_value_cansleep(xg->rst_gpio, XGAMMA_POWER_ON);
+		return 0;
+	}
+	dev_dbg(xg->xvip.dev, "%s : Started", __func__);
+
+	dev_dbg(xg->xvip.dev, "%s : Setting width %d and height %d",
+		__func__, xg->formats[XVIP_PAD_SINK].width,
+		xg->formats[XVIP_PAD_SINK].height);
+	xg_write(xg, XGAMMA_WIDTH, xg->formats[XVIP_PAD_SINK].width);
+	xg_write(xg, XGAMMA_HEIGHT, xg->formats[XVIP_PAD_SINK].height);
+	xg_write(xg, XGAMMA_VIDEO_FORMAT, xg->vid_fmt);
+	xg_set_lut_entries(xg, xg->red_lut,
+			   XGAMMA_GAMMA_LUT_0_BASE, "Red");
+	xg_set_lut_entries(xg, xg->green_lut,
+			   XGAMMA_GAMMA_LUT_1_BASE, "Green");
+	xg_set_lut_entries(xg, xg->blue_lut,
+			   XGAMMA_GAMMA_LUT_2_BASE, "Blue");
+
+	/* Start GAMMA Correction LUT Video IP */
+	xg_write(xg, XGAMMA_AP_CTRL, 0X81);
+	return 0;
+}
+
+static const struct v4l2_subdev_video_ops xg_video_ops = {
+	.s_stream = xg_s_stream,
+};
+
+static int xg_get_format(struct v4l2_subdev *subdev,
+			 struct v4l2_subdev_pad_config *cfg,
+			 struct v4l2_subdev_format *fmt)
+{
+	struct xgamma_dev *xg = to_xg(subdev);
+
+	fmt->format = *__xg_get_pad_format(xg, cfg, fmt->pad, fmt->which);
+	return 0;
+}
+
+static int xg_set_format(struct v4l2_subdev *subdev,
+			 struct v4l2_subdev_pad_config *cfg,
+			 struct v4l2_subdev_format *fmt)
+{
+	struct xgamma_dev *xg = to_xg(subdev);
+	struct v4l2_mbus_framefmt *__format;
+
+	__format = __xg_get_pad_format(xg, cfg, fmt->pad, fmt->which);
+	*__format = fmt->format;
+
+	if (fmt->pad == XVIP_PAD_SINK) {
+		if (__format->code != MEDIA_BUS_FMT_RBG888_1X24) {
+			dev_err(xg->xvip.dev,
+				"Unsupported sink media bus code format");
+			__format->code = MEDIA_BUS_FMT_RBG888_1X24;
+		}
+	}
+	__format->width = clamp_t(unsigned int, fmt->format.width,
+					XGAMMA_MIN_WIDTH, XGAMMA_MAX_WIDTH);
+	__format->height = clamp_t(unsigned int, fmt->format.height,
+					XGAMMA_MIN_HEIGHT, XGAMMA_MAX_HEIGHT);
+
+	fmt->format = *__format;
+	/* Propagate to Source Pad */
+	__format = __xg_get_pad_format(xg, cfg, XVIP_PAD_SOURCE, fmt->which);
+	*__format = fmt->format;
+	return 0;
+}
+
+static int xg_open(struct v4l2_subdev *subdev, struct v4l2_subdev_fh *fh)
+{
+	struct xgamma_dev *xg = to_xg(subdev);
+	struct v4l2_mbus_framefmt *format;
+
+	format = v4l2_subdev_get_try_format(subdev, fh->pad, XVIP_PAD_SINK);
+	*format = xg->default_formats[XVIP_PAD_SINK];
+
+	format = v4l2_subdev_get_try_format(subdev, fh->pad, XVIP_PAD_SOURCE);
+	*format = xg->default_formats[XVIP_PAD_SOURCE];
+	return 0;
+}
+
+static int xg_close(struct v4l2_subdev *subdev, struct v4l2_subdev_fh *fh)
+{
+	return 0;
+}
+
+static const struct v4l2_subdev_internal_ops xg_internal_ops = {
+	.open = xg_open,
+	.close = xg_close,
+};
+
+static const struct v4l2_subdev_pad_ops xg_pad_ops = {
+	.enum_mbus_code = xvip_enum_mbus_code,
+	.enum_frame_size = xvip_enum_frame_size,
+	.get_fmt = xg_get_format,
+	.set_fmt = xg_set_format,
+};
+
+static const struct v4l2_subdev_ops xg_ops = {
+	.video = &xg_video_ops,
+	.pad = &xg_pad_ops,
+};
+
+static int
+select_gamma(s32 value, const uint8_t **coeff)
+{
+	if (!coeff)
+		return -EINVAL;
+	if (value <= 0 || value > GAMMA_CURVE_LENGTH)
+		return -EINVAL;
+
+	*coeff = *(xgamma_curves + value - 1);
+	return 0;
+}
+
+static int xg_s_ctrl(struct v4l2_ctrl *ctrl)
+{
+	int rval;
+	struct xgamma_dev *xg =
+		container_of(ctrl->handler,
+			     struct xgamma_dev, ctrl_handler);
+	dev_dbg(xg->xvip.dev, "%s called", __func__);
+	switch (ctrl->id) {
+	case V4L2_CID_XILINX_GAMMA_CORR_RED_GAMMA:
+		rval = select_gamma(ctrl->val, &xg->red_lut);
+		if (rval != 0) {
+			dev_err(xg->xvip.dev, "Invalid Red Gamma");
+			return rval;
+		}
+		dev_dbg(xg->xvip.dev, "%s: Setting Red Gamma to %d.%d",
+			__func__, ctrl->val / 10, ctrl->val % 10);
+		xg_set_lut_entries(xg, xg->red_lut,
+				   XGAMMA_GAMMA_LUT_0_BASE, "Red");
+		break;
+	case V4L2_CID_XILINX_GAMMA_CORR_BLUE_GAMMA:
+		rval = select_gamma(ctrl->val, &xg->blue_lut);
+		if (rval != 0) {
+			dev_err(xg->xvip.dev, "Invalid Blue Gamma");
+			return rval;
+		}
+		dev_dbg(xg->xvip.dev, "%s: Setting Blue Gamma to %d.%d",
+			__func__, ctrl->val / 10, ctrl->val % 10);
+		xg_set_lut_entries(xg, xg->blue_lut,
+				   XGAMMA_GAMMA_LUT_1_BASE, "Blue");
+		break;
+	case V4L2_CID_XILINX_GAMMA_CORR_GREEN_GAMMA:
+		rval = select_gamma(ctrl->val, &xg->green_lut);
+		if (rval != 0) {
+			dev_err(xg->xvip.dev, "Invalid Green Gamma");
+			return -EINVAL;
+		}
+		dev_dbg(xg->xvip.dev, "%s: Setting Green Gamma to %d.%d",
+			__func__, ctrl->val / 10, ctrl->val % 10);
+		xg_set_lut_entries(xg, xg->green_lut,
+				   XGAMMA_GAMMA_LUT_2_BASE, "Green");
+			break;
+	}
+	return 0;
+}
+
+static const struct v4l2_ctrl_ops xg_ctrl_ops = {
+	.s_ctrl = xg_s_ctrl,
+};
+
+static struct v4l2_ctrl_config xg_ctrls[] = {
+	/* Red Gamma */
+	{
+		.ops = &xg_ctrl_ops,
+		.id = V4L2_CID_XILINX_GAMMA_CORR_RED_GAMMA,
+		.name = "Red Gamma Correction(1 = 0.1 & 10 = 1.0)",
+		.type = V4L2_CTRL_TYPE_INTEGER,
+		.min = 1,
+		.max = 40,
+		.step = 1,
+		.def = 10,
+		.flags = V4L2_CTRL_FLAG_SLIDER,
+	},
+	/* Blue Gamma */
+	{
+		.ops = &xg_ctrl_ops,
+		.id = V4L2_CID_XILINX_GAMMA_CORR_BLUE_GAMMA,
+		.name = "Blue Gamma Correction(1 = 0.1 & 10 = 1.0)",
+		.type = V4L2_CTRL_TYPE_INTEGER,
+		.min = 1,
+		.max = 40,
+		.step = 1,
+		.def = 10,
+		.flags = V4L2_CTRL_FLAG_SLIDER,
+	},
+	/* Green Gamma */
+	{
+		.ops = &xg_ctrl_ops,
+		.id = V4L2_CID_XILINX_GAMMA_CORR_GREEN_GAMMA,
+		.name = "Green Gamma Correction(1 = 0.1 & 10 = 1.0)",
+		.type = V4L2_CTRL_TYPE_INTEGER,
+		.min = 1,
+		.max = 40,
+		.step = 1,
+		.def = 10,
+		.flags = V4L2_CTRL_FLAG_SLIDER,
+	},
+};
+
+static const struct media_entity_operations xg_media_ops = {
+	.link_validate = v4l2_subdev_link_validate,
+};
+
+static int xg_parse_of(struct xgamma_dev *xg)
+{
+	struct device *dev = xg->xvip.dev;
+	struct device_node *node = dev->of_node;
+	struct device_node *ports;
+	struct device_node *port;
+	u32 port_id = 0;
+	int rval;
+
+	ports = of_get_child_by_name(node, "ports");
+	if (!ports)
+		ports = node;
+
+	/* Get the format description for each pad */
+	for_each_child_of_node(ports, port) {
+		if (port->name && (of_node_cmp(port->name, "port") == 0)) {
+			rval = of_property_read_u32(port, "reg", &port_id);
+			if (rval < 0) {
+				dev_err(dev, "No reg in DT");
+				return rval;
+			}
+			if (port_id != 0 && port_id != 1) {
+				dev_err(dev, "Invalid reg in DT");
+				return -EINVAL;
+			}
+		}
+	}
+
+	xg->rst_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(xg->rst_gpio)) {
+		if (PTR_ERR(xg->rst_gpio) != -EPROBE_DEFER)
+			dev_err(dev, "Reset GPIO not setup in DT");
+		return PTR_ERR(xg->rst_gpio);
+	}
+	return 0;
+}
+
+static int xg_probe(struct platform_device *pdev)
+{
+	struct xgamma_dev *xg;
+	struct v4l2_subdev *subdev;
+	struct v4l2_mbus_framefmt *def_fmt;
+	int rval, itr;
+
+	dev_dbg(&pdev->dev, "Gamma LUT Probe Started");
+	xg = devm_kzalloc(&pdev->dev, sizeof(*xg), GFP_KERNEL);
+	if (!xg)
+		return -ENOMEM;
+	xg->xvip.dev = &pdev->dev;
+	rval = xg_parse_of(xg);
+	if (rval < 0)
+		return rval;
+	rval = xvip_init_resources(&xg->xvip);
+
+	dev_dbg(xg->xvip.dev, "Reset Xilinx Video Gamma Corrrection");
+	gpiod_set_value_cansleep(xg->rst_gpio, XGAMMA_POWER_ON);
+	usleep_range(100, 150);
+
+	/* Init V4L2 subdev */
+	subdev = &xg->xvip.subdev;
+	v4l2_subdev_init(subdev, &xg_ops);
+	subdev->dev = &pdev->dev;
+	subdev->internal_ops = &xg_internal_ops;
+	strlcpy(subdev->name, dev_name(&pdev->dev), sizeof(subdev->name));
+	subdev->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
+
+	/* Default Formats Initialization */
+	xg_set_default_state(xg);
+	def_fmt = &xg->default_formats[XVIP_PAD_SINK];
+	/* GAMMA LUT IP only to be supported for RGB */
+	def_fmt->code = MEDIA_BUS_FMT_RBG888_1X24;
+	def_fmt->field = V4L2_FIELD_NONE;
+	def_fmt->colorspace = V4L2_COLORSPACE_SRGB;
+	def_fmt->width = XGAMMA_DEF_WIDTH;
+	def_fmt->height = XGAMMA_DEF_HEIGHT;
+	xg->formats[XVIP_PAD_SINK] = *def_fmt;
+
+	def_fmt = &xg->default_formats[XVIP_PAD_SOURCE];
+	*def_fmt = xg->default_formats[XVIP_PAD_SINK];
+	xg->formats[XVIP_PAD_SOURCE] = *def_fmt;
+
+	xg->pads[XVIP_PAD_SINK].flags = MEDIA_PAD_FL_SINK;
+	xg->pads[XVIP_PAD_SOURCE].flags = MEDIA_PAD_FL_SOURCE;
+
+	/* Init Media Entity */
+	subdev->entity.ops = &xg_media_ops;
+	rval = media_entity_pads_init(&subdev->entity, 2, xg->pads);
+	if (rval < 0)
+		goto media_error;
+
+	/* V4L2 Controls */
+	v4l2_ctrl_handler_init(&xg->ctrl_handler, ARRAY_SIZE(xg_ctrls));
+	for (itr = 0; itr < ARRAY_SIZE(xg_ctrls); itr++) {
+		v4l2_ctrl_new_custom(&xg->ctrl_handler,
+				     &xg_ctrls[itr], NULL);
+	}
+	if (xg->ctrl_handler.error) {
+		dev_err(&pdev->dev, "Failed to add V4L2 controls");
+		rval = xg->ctrl_handler.error;
+		goto ctrl_error;
+	}
+	subdev->ctrl_handler = &xg->ctrl_handler;
+	rval = v4l2_ctrl_handler_setup(&xg->ctrl_handler);
+	if (rval < 0) {
+		dev_err(&pdev->dev, "Failed to setup control handler");
+		goto  ctrl_error;
+	}
+
+	platform_set_drvdata(pdev, xg);
+	rval = v4l2_async_register_subdev(subdev);
+	if (rval < 0) {
+		dev_err(&pdev->dev, "failed to register subdev");
+		goto v4l2_subdev_error;
+	}
+	dev_info(&pdev->dev, "Xilinx Video Gamma Correction LUT registered");
+	return 0;
+ctrl_error:
+	v4l2_ctrl_handler_free(&xg->ctrl_handler);
+v4l2_subdev_error:
+	media_entity_cleanup(&subdev->entity);
+media_error:
+	xvip_cleanup_resources(&xg->xvip);
+	return rval;
+}
+
+static int xg_remove(struct platform_device *pdev)
+{
+	struct xgamma_dev *xg = platform_get_drvdata(pdev);
+	struct v4l2_subdev *subdev = &xg->xvip.subdev;
+
+	v4l2_async_unregister_subdev(subdev);
+	/* Add entry to cleanup v4l2 control handle */
+	media_entity_cleanup(&subdev->entity);
+	xvip_cleanup_resources(&xg->xvip);
+	return 0;
+}
+
+static const struct of_device_id xg_of_id_table[] = {
+	{.compatible = "xlnx,v-gamma-lut-v1.0"},
+	{ }
+};
+MODULE_DEVICE_TABLE(of, xg_of_id_table);
+
+static struct platform_driver xg_driver = {
+	.driver = {
+		.name = "xilinx-gamma-lut",
+		.of_match_table = xg_of_id_table,
+	},
+	.probe = xg_probe,
+	.remove = xg_remove,
+
+};
+
+module_platform_driver(xg_driver);
+MODULE_DESCRIPTION("Xilinx Video Gamma Correction LUT Driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/platform/xilinx/xilinx-gamma.h b/drivers/media/platform/xilinx/xilinx-gamma.h
new file mode 100644
index 0000000..8291e52
--- /dev/null
+++ b/drivers/media/platform/xilinx/xilinx-gamma.h
@@ -0,0 +1,68 @@
+/* ==============================================================
+ * File generated by Vivado(TM) HLS - High-Level Synthesis from C,
+ * C++ and SystemC
+ * Version: 2016.4
+ * Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
+ *
+ * ==============================================================
+ *
+ * CTRL
+ * 0x0000 : Control signals
+ *          bit 0  - ap_start (Read/Write/COH)
+ *          bit 1  - ap_done (Read/COR)
+ *          bit 2  - ap_idle (Read)
+ *          bit 3  - ap_ready (Read)
+ *          bit 7  - auto_restart (Read/Write)
+ *          others - reserved
+ * 0x0004 : Global Interrupt Enable Register
+ *          bit 0  - Global Interrupt Enable (Read/Write)
+ *          others - reserved
+ * 0x0008 : IP Interrupt Enable Register (Read/Write)
+ *          bit 0  - Channel 0 (ap_done)
+ *          bit 1  - Channel 1 (ap_ready)
+ *          others - reserved
+ * 0x000c : IP Interrupt Status Register (Read/TOW)
+ *          bit 0  - Channel 0 (ap_done)
+ *          bit 1  - Channel 1 (ap_ready)
+ *          others - reserved
+ * 0x0010 : Data signal of HwReg_width
+ *          bit 15~0 - HwReg_width[15:0] (Read/Write)
+ *          others   - reserved
+ * 0x0014 : reserved
+ * 0x0018 : Data signal of HwReg_height
+ *          bit 15~0 - HwReg_height[15:0] (Read/Write)
+ *          others   - reserved
+ * 0x001c : reserved
+ * 0x0020 : Data signal of HwReg_video_format
+ *          bit 15~0 - HwReg_video_format[15:0] (Read/Write)
+ *          others   - reserved
+ * 0x0024 : reserved
+ * 0x0800 ~
+ * 0x0fff : Memory 'HwReg_gamma_lut_0' (1024 * 16b)
+ *          Word n : bit [15: 0] - HwReg_gamma_lut_0[2n]
+ *                   bit [31:16] - HwReg_gamma_lut_0[2n+1]
+ * 0x1000 ~
+ * 0x17ff : Memory 'HwReg_gamma_lut_1' (1024 * 16b)
+ *          Word n : bit [15: 0] - HwReg_gamma_lut_1[2n]
+ *                   bit [31:16] - HwReg_gamma_lut_1[2n+1]
+ * 0x1800 ~
+ * 0x1fff : Memory 'HwReg_gamma_lut_2' (1024 * 16b)
+ *          Word n : bit [15: 0] - HwReg_gamma_lut_2[2n]
+ *                   bit [31:16] - HwReg_gamma_lut_2[2n+1]
+ * (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write,
+ *  COH = Clear on Handshake)
+ *
+ */
+#define XGAMMA_AP_CTRL			(0x0000)
+#define XGAMMA_GIE			(0x0004)
+#define XGAMMA_IER			(0x0008)
+#define XGAMMA_ISR			(0x000c)
+#define XGAMMA_WIDTH			(0x0010)
+#define XGAMMA_HEIGHT			(0x0018)
+#define XGAMMA_VIDEO_FORMAT		(0x0020)
+#define XGAMMA_GAMMA_LUT_0_BASE		(0x0800)
+#define XGAMMA_GAMMA_LUT_0_HIGH		(0x0fff)
+#define XGAMMA_GAMMA_LUT_1_BASE		(0x1000)
+#define XGAMMA_GAMMA_LUT_1_HIGH		(0x17ff)
+#define XGAMMA_GAMMA_LUT_2_BASE		(0x1800)
+#define XGAMMA_GAMMA_LUT_2_HIGH		(0x1fff)
diff --git a/include/uapi/linux/xilinx-v4l2-controls.h b/include/uapi/linux/xilinx-v4l2-controls.h
index a87ac43..7311c49 100644
--- a/include/uapi/linux/xilinx-v4l2-controls.h
+++ b/include/uapi/linux/xilinx-v4l2-controls.h
@@ -160,4 +160,17 @@
 /* Adjust Blue Gain */
 #define V4L2_CID_XILINX_CSC_BLUE_GAIN		(V4L2_CID_XILINX_CSC + 5)
 
+/*
+ * Xilinx Gamma Correction HLS IP
+ */
+
+/* Base ID */
+#define V4L2_CID_XILINX_GAMMA_CORR		(V4L2_CID_USER_BASE + 0xc0c0)
+/* Adjust Red Gamma */
+#define V4L2_CID_XILINX_GAMMA_CORR_RED_GAMMA	(V4L2_CID_XILINX_GAMMA_CORR + 1)
+/* Adjust Blue Gamma */
+#define V4L2_CID_XILINX_GAMMA_CORR_BLUE_GAMMA	(V4L2_CID_XILINX_GAMMA_CORR + 2)
+/* Adjust Green Gamma */
+#define V4L2_CID_XILINX_GAMMA_CORR_GREEN_GAMMA	(V4L2_CID_XILINX_GAMMA_CORR + 3)
+
 #endif /* __UAPI_XILINX_V4L2_CONTROLS_H__ */
-- 
1.7.5.4

