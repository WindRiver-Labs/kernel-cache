From 5d8c88fc4971c0c92ca0ee84a8e1f5c8f0f3e613 Mon Sep 17 00:00:00 2001
From: Wendy Liang <wendy.liang@xilinx.com>
Date: Wed, 1 Feb 2017 23:23:20 -0800
Subject: [PATCH 1222/1566] remoteproc: zynq: update rproc driver for 4.9
 kernel

commit  d2a1c1726d522d61006015612b9a5b81c7e81c69 from
https://github.com/Xilinx/linux-xlnx.git

Update the Zynq remoteproc driver for the v4.9 kernel.

Signed-off-by: Wendy Liang <jliang@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/remoteproc/Kconfig           |    6 +-
 drivers/remoteproc/zynq_remoteproc.c |  144 +++++++++++++++++++---------------
 2 files changed, 83 insertions(+), 67 deletions(-)

diff --git a/drivers/remoteproc/Kconfig b/drivers/remoteproc/Kconfig
index 01ab907..5530efb 100644
--- a/drivers/remoteproc/Kconfig
+++ b/drivers/remoteproc/Kconfig
@@ -34,10 +34,10 @@ config OMAP_REMOTEPROC
 
 config ZYNQ_REMOTEPROC
 	tristate "Support ZYNQ remoteproc"
-	depends on ARCH_ZYNQ
+	depends on ARCH_ZYNQ && SMP && !DEBUG_SG
 	select REMOTEPROC
-	select RPMSG
-	select SMP
+	select RPMSG_VIRTIO
+	select HOTPLUG_CPU
 	help
 	  Say y here to support Xilinx ZynQ remote processors (the second
 	  ARM CORTEX-A9 cpu) via the remote processor framework.
diff --git a/drivers/remoteproc/zynq_remoteproc.c b/drivers/remoteproc/zynq_remoteproc.c
index 7c064a3..4dea29f 100644
--- a/drivers/remoteproc/zynq_remoteproc.c
+++ b/drivers/remoteproc/zynq_remoteproc.c
@@ -36,8 +36,11 @@
 
 #include "remoteproc_internal.h"
 
+#define MAX_NUM_VRINGS 2
+#define NOTIFYID_ANY (-1)
+
 /* Module parameter */
-static char *firmware;
+static char *firmware = "firmware";
 
 /* Structure for storing IRQs */
 struct irq_list {
@@ -45,46 +48,48 @@ struct irq_list {
 	struct list_head list;
 };
 
+/* Structure for IPIs */
+struct ipi_info {
+	u32 irq;
+	u32 notifyid;
+};
+
 /* Private data */
 struct zynq_rproc_pdata {
-	struct irq_list mylist;
+	struct irq_list irqs;
 	struct rproc *rproc;
-	u32 vring0;
-	u32 vring1;
+	struct ipi_info ipis[MAX_NUM_VRINGS];
 	u32 mem_start;
 	u32 mem_end;
 };
 
 /* Store rproc for IPI handler */
-static struct platform_device *remoteprocdev;
+static struct rproc *rproc;
 static struct work_struct workqueue;
 
 static void handle_event(struct work_struct *work)
 {
-	struct zynq_rproc_pdata *local = platform_get_drvdata(remoteprocdev);
+	struct zynq_rproc_pdata *local = rproc->priv;
 
-	if (rproc_vq_interrupt(local->rproc, 0) == IRQ_NONE)
-		dev_dbg(&remoteprocdev->dev, "no message found in vqid 0\n");
+	if (rproc_vq_interrupt(local->rproc, local->ipis[0].notifyid) ==
+				IRQ_NONE)
+		dev_dbg(rproc->dev.parent, "no message found in vqid 0\n");
 }
 
 static void ipi_kick(void)
 {
-	dev_dbg(&remoteprocdev->dev, "KICK Linux because of pending message\n");
+	dev_dbg(rproc->dev.parent, "KICK Linux because of pending message\n");
 	schedule_work(&workqueue);
 }
 
 static int zynq_rproc_start(struct rproc *rproc)
 {
 	struct device *dev = rproc->dev.parent;
-	struct platform_device *pdev = to_platform_device(dev);
 	int ret;
 
 	dev_dbg(dev, "%s\n", __func__);
 	INIT_WORK(&workqueue, handle_event);
 
-
-	mb();
-	remoteprocdev = pdev;
 	ret = zynq_cpun_start(rproc->bootaddr, 1);
 
 	return ret;
@@ -94,16 +99,27 @@ static int zynq_rproc_start(struct rproc *rproc)
 static void zynq_rproc_kick(struct rproc *rproc, int vqid)
 {
 	struct device *dev = rproc->dev.parent;
-	struct platform_device *pdev = to_platform_device(dev);
-	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+	struct zynq_rproc_pdata *local = rproc->priv;
+	struct rproc_vdev *rvdev, *rvtmp;
+	struct fw_rsc_vdev *rsc;
+	int i;
 
 	dev_dbg(dev, "KICK Firmware to start send messages vqid %d\n", vqid);
 
-	/* Send swirq to firmware */
-	if (!vqid)
-		gic_raise_softirq(cpumask_of(1), local->vring0);
-	else
-		gic_raise_softirq(cpumask_of(1), local->vring1);
+	list_for_each_entry_safe(rvdev, rvtmp, &rproc->rvdevs, node) {
+		rsc = (void *)rproc->table_ptr + rvdev->rsc_offset;
+		for (i = 0; i < MAX_NUM_VRINGS; i++) {
+			struct rproc_vring *rvring = &rvdev->vring[i];
+
+			/* Send swirq to firmware */
+			if (rvring->notifyid == vqid) {
+				local->ipis[i].notifyid = vqid;
+				gic_raise_softirq(cpumask_of(1),
+						local->ipis[i].irq);
+			}
+		}
+
+	}
 }
 
 /* power off the remote processor */
@@ -145,16 +161,16 @@ static irqreturn_t zynq_remoteproc_interrupt(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
-static void clear_irq(struct platform_device *pdev)
+static void clear_irq(struct rproc *rproc)
 {
 	struct list_head *pos, *q;
 	struct irq_list *tmp;
-	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+	struct zynq_rproc_pdata *local = rproc->priv;
 
-	dev_info(&pdev->dev, "Deleting the irq_list\n");
-	list_for_each_safe(pos, q, &local->mylist.list) {
+	dev_info(rproc->dev.parent, "Deleting the irq_list\n");
+	list_for_each_safe(pos, q, &local->irqs.list) {
 		tmp = list_entry(pos, struct irq_list, list);
-		free_irq(tmp->irq, &pdev->dev);
+		free_irq(tmp->irq, rproc->dev.parent);
 		gic_set_cpu(0, tmp->irq);
 		list_del(pos);
 		kfree(tmp);
@@ -174,21 +190,28 @@ static int __devinit zynq_remoteproc_probe(struct platform_device *pdev)
 	/* EBUSY means CPU is already released */
 	if (ret && (ret != -EBUSY)) {
 		dev_err(&pdev->dev, "Can't release cpu1\n");
-		return -ENOMEM;
+		return ret;
 	}
 
-	local = devm_kzalloc(&pdev->dev, sizeof(struct zynq_rproc_pdata),
-			     GFP_KERNEL);
-	if (!local)
-		return -ENOMEM;
+	rproc = rproc_alloc(&pdev->dev, dev_name(&pdev->dev),
+		&zynq_rproc_ops, firmware,
+		sizeof(struct zynq_rproc_pdata));
+	if (!rproc) {
+		dev_err(&pdev->dev, "rproc allocation failed\n");
+		ret = -ENOMEM;
+		goto cpu_down_fault;
+	}
+	local = rproc->priv;
+	local->rproc = rproc;
 
-	platform_set_drvdata(pdev, local);
+	platform_set_drvdata(pdev, rproc);
 
 	/* Declare memory for firmware */
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
 		dev_err(&pdev->dev, "invalid address\n");
-		return -ENODEV;
+		ret = -ENODEV;
+		goto rproc_fault;
 	}
 
 	local->mem_start = res->start;
@@ -201,7 +224,7 @@ static int __devinit zynq_remoteproc_probe(struct platform_device *pdev)
 	if (!ret) {
 		dev_err(&pdev->dev, "dma_declare_coherent_memory failed\n");
 		ret = -ENOMEM;
-		goto dma_fault;
+		goto rproc_fault;
 	}
 
 	ret = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
@@ -211,7 +234,7 @@ static int __devinit zynq_remoteproc_probe(struct platform_device *pdev)
 	}
 
 	/* Init list for IRQs - it can be long list */
-	INIT_LIST_HEAD(&local->mylist.list);
+	INIT_LIST_HEAD(&local->irqs.list);
 
 	/* Alloc IRQ based on DTS to be sure that no other driver will use it */
 	while (1) {
@@ -249,36 +272,33 @@ static int __devinit zynq_remoteproc_probe(struct platform_device *pdev)
 		 * MS: Comment if you want to count IRQs on Linux
 		 */
 		gic_set_cpu(1, tmp->irq);
-		list_add(&(tmp->list), &(local->mylist.list));
+		list_add(&(tmp->list), &(local->irqs.list));
 	}
 
 	/* Allocate free IPI number */
 	/* Read vring0 ipi number */
-	ret = of_property_read_u32(pdev->dev.of_node, "vring0", &local->vring0);
+	ret = of_property_read_u32(pdev->dev.of_node, "vring0",
+				&local->ipis[0].irq);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "unable to read property");
-		goto ipi_fault;
+		goto irq_fault;
 	}
 
-	ret = set_ipi_handler(local->vring0, ipi_kick, "Firmware kick");
+	ret = set_ipi_handler(local->ipis[0].irq, ipi_kick,
+			"Firmware kick");
 	if (ret) {
 		dev_err(&pdev->dev, "IPI handler already registered\n");
 		goto irq_fault;
 	}
 
 	/* Read vring1 ipi number */
-	ret = of_property_read_u32(pdev->dev.of_node, "vring1", &local->vring1);
+	ret = of_property_read_u32(pdev->dev.of_node, "vring1",
+				&local->ipis[1].irq);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "unable to read property");
 		goto ipi_fault;
 	}
 
-	/* Module param firmware first */
-	if (firmware)
-		prop = firmware;
-	else
-		prop = of_get_property(pdev->dev.of_node, "firmware", NULL);
-
 	if (!prop) {
 		ret = -ENODEV;
 		dev_err(&pdev->dev, "No firmware\n");
@@ -286,34 +306,28 @@ static int __devinit zynq_remoteproc_probe(struct platform_device *pdev)
 	}
 
 	dev_dbg(&pdev->dev, "Using firmware: %s\n", prop);
-	local->rproc = rproc_alloc(&pdev->dev, dev_name(&pdev->dev),
-			&zynq_rproc_ops, prop, sizeof(struct rproc));
-	if (!local->rproc) {
-		ret = -ENOMEM;
-		dev_err(&pdev->dev, "rproc allocation failed\n");
-		goto ipi_fault;
-	}
 
 	ret = rproc_add(local->rproc);
 	if (ret) {
 		dev_err(&pdev->dev, "rproc registration failed\n");
-		goto rproc_fault;
+		goto ipi_fault;
 	}
 
 	return 0;
 
-rproc_fault:
-	rproc_put(local->rproc);
 ipi_fault:
-	clear_ipi_handler(local->vring0);
+	clear_ipi_handler(local->ipis[0].irq);
 
 irq_fault:
-	clear_irq(pdev);
+	clear_irq(rproc);
 
 dma_mask_fault:
 	dma_release_declared_memory(&pdev->dev);
 
-dma_fault:
+rproc_fault:
+	rproc_free(rproc);
+
+cpu_down_fault:
 	if (cpu_up(1)) /* Cpu can't power on for example in nosmp mode */
 		dev_err(&pdev->dev, "Can't power on cpu1\n");
 
@@ -322,18 +336,20 @@ dma_fault:
 
 static int __devexit zynq_remoteproc_remove(struct platform_device *pdev)
 {
-	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+	struct rproc *rproc = platform_get_drvdata(pdev);
+	struct zynq_rproc_pdata *local = rproc->priv;
 	u32 ret;
 
 	dev_info(&pdev->dev, "%s\n", __func__);
 
-	dma_release_declared_memory(&pdev->dev);
+	rproc_del(rproc);
+
+	clear_ipi_handler(local->ipis[0].irq);
+	clear_irq(rproc);
 
-	clear_ipi_handler(local->vring0);
-	clear_irq(pdev);
+	dma_release_declared_memory(&pdev->dev);
 
-	rproc_del(local->rproc);
-	rproc_put(local->rproc);
+	rproc_free(rproc);
 
 	/* Cpu can't be power on - for example in nosmp mode */
 	ret = cpu_up(1);
-- 
1.7.5.4

