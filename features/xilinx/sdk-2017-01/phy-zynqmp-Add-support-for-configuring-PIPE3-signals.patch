From ede4e4abeac629419a4a4e6a111bdb27da1b6a1e Mon Sep 17 00:00:00 2001
From: Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
Date: Tue, 18 Apr 2017 21:21:13 +0530
Subject: [PATCH 1517/1566] phy: zynqmp: Add support for configuring PIPE3
 signals for USB

commit  88c556536eaec9f816d17a0f7484c278be60e1ea from
https://github.com/Xilinx/linux-xlnx.git

Set PIPE signals to configure internal mux which makes connect/disconnect
depend on ULPI instead of SERDES. These PIPE_POWER and PIPE_CLK signals
need to be configured after releasing USB APB reset and before releasing
USB CORE and HIB reset. These PIPE signals helps in proper detection of
disconnect/connect events on the phy.

Note:
This patch is a temporary workaround which is done to set pipe signals
without effecting USB CCI and this will be redesigned. This change will
get it into v2017.1 and expected to change once the proper solution is
available.

Signed-off-by: Anurag Kumar Vulisha <anuragku@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/phy/phy-zynqmp.c       |   52 ++++++++++++++++++++++++++++++++++++++-
 include/linux/phy/phy-zynqmp.h |    6 ++++
 2 files changed, 56 insertions(+), 2 deletions(-)

diff --git a/drivers/phy/phy-zynqmp.c b/drivers/phy/phy-zynqmp.c
index 7db1d8c..a047cf6 100644
--- a/drivers/phy/phy-zynqmp.c
+++ b/drivers/phy/phy-zynqmp.c
@@ -179,6 +179,13 @@
 #define GEM_SGMII_MODE			0x4
 #define GEM_FIFO_CLK_PL			0x8
 
+#define PIPE_CLK_OFFSET			0x7c
+#define PIPE_CLK_ON			1
+#define PIPE_CLK_OFF			0
+#define PIPE_POWER_OFFSET		0x80
+#define PIPE_POWER_ON			1
+#define PIPE_POWER_OFF			0
+
 #define XPSGTR_TYPE_USB0	0 /* USB controller 0 */
 #define XPSGTR_TYPE_USB1	1 /* USB controller 1 */
 #define XPSGTR_TYPE_SATA_0	2 /* SATA controller lane 0 */
@@ -289,6 +296,7 @@ static struct xpsgtr_ssc ssc_lookup[] = {
  * @gtr_mutex: mutex for locking
  * @phys: pointer to all the lanes
  * @lpd: base address for low power domain devices reset control
+ * @regs: address that phy needs to configure during configuring lane protocol
  * @tx_term_fix: fix for GT issue
  */
 struct xpsgtr_dev {
@@ -298,6 +306,7 @@ struct xpsgtr_dev {
 	struct mutex gtr_mutex;
 	struct xpsgtr_phy **phys;
 	void __iomem *lpd;
+	void __iomem *regs;
 	bool tx_term_fix;
 	struct reset_control *sata_rst;
 	struct reset_control *dp_rst;
@@ -313,6 +322,23 @@ struct xpsgtr_dev {
 	struct reset_control *gem3_rst;
 };
 
+/**
+ * xpsgtr_set_protregs - Called by the lane protocol to set phy related control
+ *			 regs into gtr_dev, so that these address can be used
+ *			 by phy while configuring lane.(Currently USB does this)
+ *
+ * @gtr_phy: pointer to lane
+ * @regs:    pointer to protocol control register address
+ */
+int xpsgtr_set_protregs(struct phy *phy, void *regs)
+{
+	struct xpsgtr_phy *gtr_phy = phy_get_drvdata(phy);
+	struct xpsgtr_dev *gtr_dev = gtr_phy->data;
+
+	gtr_dev->regs = regs;
+	return 0;
+}
+
 int xpsgtr_override_deemph(struct phy *phy, u8 plvl, u8 vlvl)
 {
 	struct xpsgtr_phy *gtr_phy = phy_get_drvdata(phy);
@@ -536,6 +562,20 @@ static int xpsgtr_configure_lane(struct xpsgtr_phy *gtr_phy)
 }
 
 /**
+ * xpsgtr_config_usbpipe - configures the PIPE3 signals for USB
+ * @xpsgtr_dev: pointer to gtr device
+ */
+static void xpsgtr_config_usbpipe(struct xpsgtr_dev *gtr_dev)
+{
+	if (gtr_dev->regs != NULL) {
+		/* Set PIPE power present signal */
+		writel(PIPE_POWER_ON, gtr_dev->regs + PIPE_POWER_OFFSET);
+		/* Clear PIPE CLK signal */
+		writel(PIPE_CLK_OFF, gtr_dev->regs + PIPE_CLK_OFFSET);
+	}
+}
+
+/**
  * xpsgtr_reset_assert - asserts reset using reset framework
  * @gtr_phy: pointer to reset_control
  *
@@ -649,14 +689,22 @@ static int xpsgtr_controller_release_reset(struct xpsgtr_phy *gtr_phy)
 
 	switch (gtr_phy->type) {
 	case XPSGTR_TYPE_USB0:
+		xpsgtr_reset_release(gtr_dev->usb0_apbrst);
+
+		/* Config PIPE3 signals after releasing APB reset */
+		xpsgtr_config_usbpipe(gtr_dev);
+
 		ret = xpsgtr_reset_release(gtr_dev->usb0_crst);
 		ret = xpsgtr_reset_release(gtr_dev->usb0_hibrst);
-		ret = xpsgtr_reset_release(gtr_dev->usb0_apbrst);
 		break;
 	case XPSGTR_TYPE_USB1:
+		xpsgtr_reset_release(gtr_dev->usb1_apbrst);
+
+		/* Config PIPE3 signals after releasing APB reset */
+		xpsgtr_config_usbpipe(gtr_dev);
+
 		ret = xpsgtr_reset_release(gtr_dev->usb1_crst);
 		ret = xpsgtr_reset_release(gtr_dev->usb1_hibrst);
-		ret = xpsgtr_reset_release(gtr_dev->usb1_apbrst);
 		break;
 	case XPSGTR_TYPE_SATA_0:
 	case XPSGTR_TYPE_SATA_1:
diff --git a/include/linux/phy/phy-zynqmp.h b/include/linux/phy/phy-zynqmp.h
index 8dcb15e..4da3352 100644
--- a/include/linux/phy/phy-zynqmp.h
+++ b/include/linux/phy/phy-zynqmp.h
@@ -26,6 +26,7 @@ struct phy;
 extern int xpsgtr_override_deemph(struct phy *phy, u8 plvl, u8 vlvl);
 extern int xpsgtr_margining_factor(struct phy *phy, u8 plvl, u8 vlvl);
 extern int xpsgtr_wait_pll_lock(struct phy *phy);
+extern int xpsgtr_set_protregs(struct phy *phy, void *regs);
 
 #else
 
@@ -44,6 +45,11 @@ extern inline int xpsgtr_wait_pll_lock(struct phy *phy)
 	return -ENODEV;
 }
 
+extern inline int xpsgtr_set_protregs(struct phy *phy, void *regs)
+{
+	return -ENODEV;
+}
+
 #endif
 
 #endif /* _PHY_ZYNQMP_H_ */
-- 
1.7.5.4

