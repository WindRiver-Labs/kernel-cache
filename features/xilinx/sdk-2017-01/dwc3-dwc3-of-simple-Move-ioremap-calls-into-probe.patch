From be7c2de7e430832bef2a895efc3b878968646506 Mon Sep 17 00:00:00 2001
From: Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
Date: Tue, 18 Apr 2017 21:21:14 +0530
Subject: [PATCH 1518/1566] dwc3: dwc3-of-simple: Move ioremap calls into
 probe

commit  c297380a5d45b87416e349fdefd7cebd6347d490 from
https://github.com/Xilinx/linux-xlnx.git

Currently ioremap_resource & ioremap_release of USB vendor specific
control regions are being done in dwc3_enable_hw_coherency() when
CCI is enabled. These USB vendor specific regions has the PIPE3
control registers, which needs to be configured everytime to get
proper connect/disconnect events. Because of this reason moving the
ioremap_resource into probe.

Note:
This patch is a temporary workaround which is done to set pipe signals
without effecting usb cci and this will be redesigned. this change will
get it into v2017.1 and expected to change once the proper solution is
available.

Signed-off-by: Anurag Kumar Vulisha <anuragku@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/usb/dwc3/dwc3-of-simple.c |   32 ++++++++++++++++----------------
 1 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/drivers/usb/dwc3/dwc3-of-simple.c b/drivers/usb/dwc3/dwc3-of-simple.c
index e90159c..996ab7e 100644
--- a/drivers/usb/dwc3/dwc3-of-simple.c
+++ b/drivers/usb/dwc3/dwc3-of-simple.c
@@ -44,6 +44,7 @@ struct dwc3_of_simple {
 	struct device		*dev;
 	struct clk		**clks;
 	int			num_clocks;
+	void __iomem		*regs;
 };
 
 int dwc3_enable_hw_coherency(struct device *dev)
@@ -52,30 +53,17 @@ int dwc3_enable_hw_coherency(struct device *dev)
 
 	if (of_device_is_compatible(node, "xlnx,zynqmp-dwc3")) {
 		struct platform_device *pdev_parent;
-		struct resource *res;
+		struct dwc3_of_simple *simple;
 		void __iomem *regs;
 		u32 reg;
-		int ret;
 
 		pdev_parent = of_find_device_by_node(node);
-		res = platform_get_resource(pdev_parent,
-					    IORESOURCE_MEM, 0);
-		if (!res) {
-			dev_err(dev, "missing memory resource\n");
-			return -ENODEV;
-		}
-
-		regs = devm_ioremap_resource(&pdev_parent->dev, res);
-		if (IS_ERR(regs)) {
-			ret = PTR_ERR(regs);
-			return ret;
-		}
+		simple = platform_get_drvdata(pdev_parent);
+		regs = simple->regs;
 
 		reg = readl(regs + XLNX_USB_COHERENCY);
 		reg |= XLNX_USB_COHERENCY_ENABLE;
 		writel(reg, regs + XLNX_USB_COHERENCY);
-
-		devm_ioremap_release(&pdev_parent->dev, res);
 	}
 
 	return 0;
@@ -146,6 +134,18 @@ static int dwc3_of_simple_probe(struct platform_device *pdev)
 
 		struct device_node	*child;
 		char			*soc_rev;
+		struct resource		*res;
+		void __iomem		*regs;
+
+		res = platform_get_resource(pdev,
+					    IORESOURCE_MEM, 0);
+
+		regs = devm_ioremap_resource(&pdev->dev, res);
+		if (IS_ERR(regs))
+			return PTR_ERR(regs);
+
+		/* Store the usb control regs into simple for further usage */
+		simple->regs = regs;
 
 		/* read Silicon version using nvmem driver */
 		soc_rev = zynqmp_nvmem_get_silicon_version(&pdev->dev,
-- 
1.7.5.4

