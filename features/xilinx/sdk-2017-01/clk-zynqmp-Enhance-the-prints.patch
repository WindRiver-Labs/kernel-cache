From 50e585825eeef26b2e102e6cb7dfc46e8950d797 Mon Sep 17 00:00:00 2001
From: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Date: Thu, 26 Jan 2017 14:02:47 -0800
Subject: [PATCH 1241/1566] clk: zynqmp: Enhance the prints

commit  0ca321eaf0f0ccd896b8245d8f76db896fa9d972 from
https://github.com/Xilinx/linux-xlnx.git

Enhance the prints to be more informative.
Also move to pr_warn_once to remove the cluttering of the logs

Signed-off-by: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/clk/zynqmp/clk-gate-zynqmp.c |   16 +++++++++++++---
 drivers/clk/zynqmp/clk-mux-zynqmp.c  |   18 +++++++++++++++---
 drivers/clk/zynqmp/divider.c         |   19 ++++++++++++++++---
 drivers/clk/zynqmp/pll.c             |   14 ++++++++++++--
 include/linux/clk/zynqmp.h           |    8 ++------
 5 files changed, 58 insertions(+), 17 deletions(-)

diff --git a/drivers/clk/zynqmp/clk-gate-zynqmp.c b/drivers/clk/zynqmp/clk-gate-zynqmp.c
index 32824d2..61d489b 100644
--- a/drivers/clk/zynqmp/clk-gate-zynqmp.c
+++ b/drivers/clk/zynqmp/clk-gate-zynqmp.c
@@ -48,13 +48,17 @@ static void clk_gate_endisable(struct clk_hw *hw, int enable)
 	struct clk_gate *gate = to_clk_gate(hw);
 	int set = gate->flags & CLK_GATE_SET_TO_DISABLE ? 1 : 0;
 	u32 reg;
+	int ret;
 
 	set ^= enable;
 
 	if (gate->flags & CLK_GATE_HIWORD_MASK) {
 		reg = BIT(gate->bit_idx + 16);
 	} else {
-		reg = zynqmp_pm_mmio_readl(gate->reg);
+		ret = zynqmp_pm_mmio_read((u32)(ulong)gate->reg, &reg);
+		if (ret)
+			pr_warn_once("Read fail gate address: %x\n",
+					(u32)(ulong)gate->reg);
 
 		if (!set)
 			reg &= ~BIT(gate->bit_idx);
@@ -62,7 +66,9 @@ static void clk_gate_endisable(struct clk_hw *hw, int enable)
 
 	if (set)
 		reg |= BIT(gate->bit_idx);
-	zynqmp_pm_mmio_writel(reg, gate->reg);
+	ret = zynqmp_pm_mmio_writel(reg, gate->reg);
+	if (ret)
+		pr_warn_once("Write failed gate address:%x\n", (u32)(ulong)reg);
 }
 
 static int zynqmp_clk_gate_enable(struct clk_hw *hw)
@@ -80,9 +86,13 @@ static void zynqmp_clk_gate_disable(struct clk_hw *hw)
 static int zynqmp_clk_gate_is_enabled(struct clk_hw *hw)
 {
 	u32 reg;
+	int ret;
 	struct clk_gate *gate = to_clk_gate(hw);
 
-	reg = zynqmp_pm_mmio_readl(gate->reg);
+	ret = zynqmp_pm_mmio_read((u32)(ulong)gate->reg, &reg);
+	if (ret)
+		pr_warn_once("Read failed gate address: %x\n",
+				(u32)(ulong)gate->reg);
 
 	/* if a set bit disables this clk, flip it before masking */
 	if (gate->flags & CLK_GATE_SET_TO_DISABLE)
diff --git a/drivers/clk/zynqmp/clk-mux-zynqmp.c b/drivers/clk/zynqmp/clk-mux-zynqmp.c
index bd28c5b..208b03d 100644
--- a/drivers/clk/zynqmp/clk-mux-zynqmp.c
+++ b/drivers/clk/zynqmp/clk-mux-zynqmp.c
@@ -33,6 +33,7 @@ static u8 zynqmp_clk_mux_get_parent(struct clk_hw *hw)
 	struct clk_mux *mux = to_clk_mux(hw);
 	int num_parents = clk_hw_get_num_parents(hw);
 	u32 val;
+	int ret;
 
 	/*
 	 * FIXME need a mux-specific flag to determine if val is bitwise or
@@ -41,7 +42,11 @@ static u8 zynqmp_clk_mux_get_parent(struct clk_hw *hw)
 	 * OTOH, pmd_trace_clk_mux_ck uses a separate bit for each clock, so
 	 * val = 0x4 really means "bit 2, index starts at bit 0"
 	 */
-	val = zynqmp_pm_mmio_readl(mux->reg) >> mux->shift;
+	ret = zynqmp_pm_mmio_read((u32)(ulong)mux->reg, &val);
+	if (ret)
+		pr_warn_once("Read fail mux address: %x\n",
+				(u32)(ulong)mux->reg);
+	val = val >> mux->shift;
 	val &= mux->mask;
 
 	if (mux->table) {
@@ -66,6 +71,7 @@ static int zynqmp_clk_mux_set_parent(struct clk_hw *hw, u8 index)
 {
 	struct clk_mux *mux = to_clk_mux(hw);
 	u32 val;
+	int ret;
 
 	if (mux->table) {
 		index = mux->table[index];
@@ -80,11 +86,17 @@ static int zynqmp_clk_mux_set_parent(struct clk_hw *hw, u8 index)
 	if (mux->flags & CLK_MUX_HIWORD_MASK) {
 		val = mux->mask << (mux->shift + 16);
 	} else {
-		val = zynqmp_pm_mmio_readl(mux->reg);
+		ret = zynqmp_pm_mmio_read((u32)(ulong)mux->reg, &val);
+		if (ret)
+			pr_warn_once("Read fail mux address: %x\n",
+					(u32)(ulong)mux->reg);
 		val &= ~(mux->mask << mux->shift);
 	}
 	val |= index << mux->shift;
-	zynqmp_pm_mmio_writel(val, mux->reg);
+	ret = zynqmp_pm_mmio_writel(val, mux->reg);
+	if (ret)
+		pr_warn_once("Write failed to mux address:%x\n",
+				(u32)(ulong)mux->reg);
 
 	return 0;
 }
diff --git a/drivers/clk/zynqmp/divider.c b/drivers/clk/zynqmp/divider.c
index 8d4bff5c8..e744a09 100644
--- a/drivers/clk/zynqmp/divider.c
+++ b/drivers/clk/zynqmp/divider.c
@@ -62,8 +62,14 @@ static unsigned long zynqmp_clk_divider_recalc_rate(struct clk_hw *hw,
 {
 	struct clk_divider *divider = to_clk_divider(hw);
 	unsigned int val;
+	int ret;
 
-	val = zynqmp_pm_mmio_readl(divider->reg) >> divider->shift;
+	ret = zynqmp_pm_mmio_read((u32)(ulong)divider->reg, &val);
+	if (ret)
+		pr_warn_once("Read fail divider address: %x\n",
+				(u32)(ulong)divider->reg);
+
+	val = val >> divider->shift;
 	val &= div_mask(divider->width);
 
 	return divider_recalc_rate(hw, parent_rate, val, divider->table,
@@ -98,6 +104,7 @@ static int zynqmp_clk_divider_set_rate(struct clk_hw *hw, unsigned long rate,
 	struct clk_divider *divider = to_clk_divider(hw);
 	unsigned int value;
 	u32 val;
+	int ret;
 
 	value = divider_get_val(rate, parent_rate, divider->table,
 				divider->width, divider->flags);
@@ -105,11 +112,17 @@ static int zynqmp_clk_divider_set_rate(struct clk_hw *hw, unsigned long rate,
 	if (divider->flags & CLK_DIVIDER_HIWORD_MASK) {
 		val = div_mask(divider->width) << (divider->shift + 16);
 	} else {
-		val = zynqmp_pm_mmio_readl(divider->reg);
+		ret = zynqmp_pm_mmio_read((u32)(ulong)divider->reg, &val);
+		if (ret)
+			pr_warn_once("Read fail divider address: %x\n",
+					(u32)(ulong)divider->reg);
 		val &= ~(div_mask(divider->width) << divider->shift);
 	}
 	val |= value << divider->shift;
-	zynqmp_pm_mmio_writel(val, divider->reg);
+	ret = zynqmp_pm_mmio_writel(val, divider->reg);
+	if (ret)
+		pr_warn_once("Write failed to divider address:%x\n",
+				(u32)(ulong)divider->reg);
 
 	return 0;
 }
diff --git a/drivers/clk/zynqmp/pll.c b/drivers/clk/zynqmp/pll.c
index 046fad2..ec02903 100644
--- a/drivers/clk/zynqmp/pll.c
+++ b/drivers/clk/zynqmp/pll.c
@@ -68,8 +68,14 @@ static inline enum pll_mode pll_frac_get_mode(struct clk_hw *hw)
 {
 	struct zynqmp_pll *clk = to_zynqmp_pll(hw);
 	u32 reg;
+	int ret;
+
+	ret = zynqmp_pm_mmio_read((u32)(ulong)(clk->pll_ctrl + FRAC_OFFSET),
+					&reg);
+	if (ret)
+		pr_warn_once("Read fail pll address: %x\n",
+				(u32)(ulong)(clk->pll_ctrl + FRAC_OFFSET));
 
-	reg = zynqmp_pm_mmio_readl(clk->pll_ctrl + FRAC_OFFSET);
 	reg = reg & PLLFCFG_FRAC_EN;
 	return reg ? PLL_MODE_FRAC : PLL_MODE_INT;
 }
@@ -184,8 +190,12 @@ static int zynqmp_pll_is_enabled(struct clk_hw *hw)
 {
 	u32 reg;
 	struct zynqmp_pll *clk = to_zynqmp_pll(hw);
+	int ret;
 
-	reg = zynqmp_pm_mmio_readl(clk->pll_ctrl);
+	ret = zynqmp_pm_mmio_read((u32)(ulong)clk->pll_ctrl, &reg);
+	if (ret)
+		pr_warn_once("Read fail pll address: %x\n",
+				(u32)(ulong)clk->pll_ctrl);
 
 	return !(reg & (PLLCTRL_RESET_MASK));
 }
diff --git a/include/linux/clk/zynqmp.h b/include/linux/clk/zynqmp.h
index 18cb15b..71fe720 100644
--- a/include/linux/clk/zynqmp.h
+++ b/include/linux/clk/zynqmp.h
@@ -28,18 +28,14 @@ static inline u32 zynqmp_pm_mmio_readl(void __iomem *reg)
 
 	ret = zynqmp_pm_mmio_read((u32)(ulong)reg, &val);
 	if (ret)
-		pr_err("Read failed\n");
+		pr_err("Read failed address: %x\n", (u32)(ulong)reg);
 	return val;
 }
 
 static inline int zynqmp_pm_mmio_writel(u32 val, void __iomem *reg)
 {
-	int ret;
 
-	ret = zynqmp_pm_mmio_write((u32)(ulong)reg, 0xffffffff, val);
-	if (ret)
-		pr_err("Write failed\n");
-	return ret;
+	return zynqmp_pm_mmio_write((u32)(ulong)reg, 0xffffffff, val);
 }
 
 struct clk *clk_register_zynqmp_pll(const char *name, const char *parent,
-- 
1.7.5.4

