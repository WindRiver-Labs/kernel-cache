From d3106f65510ad59c3f76c13ac4beb2a39a1e8cc0 Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudh@xilinx.com>
Date: Tue, 27 Nov 2012 20:55:04 +0530
Subject: [PATCH 0064/1566] net: xilinx_emacps: Corrects Rx/Tx error reporting

The existing driver reports wrong Rx/Tx error count (ifconfig).
The Rx/Tx error counters get incremented twice for most of.
the error cases. This patch fixes it.

Signed-off-by: Anirudha Sarangi <anirudh@xilinx.com>
Acked-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   27 ++++++++++-----------------
 1 files changed, 10 insertions(+), 17 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 4159a3f..eb042b9 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1337,8 +1337,10 @@ static void xemacps_DmaSetupRecvBuffers(struct net_device *ndev)
 
 	for (num_sk_buffs = 0; num_sk_buffs < free_bd_count; num_sk_buffs++) {
 		new_skb = netdev_alloc_skb(ndev, XEMACPS_RX_BUF_SIZE);
-		if (new_skb == NULL)
+		if (new_skb == NULL) {
+			lp->stats.rx_dropped++;
 			break;
+		}
 
 		result = xemacps_bdringalloc(rxringptr, 1, &bdptr);
 		if (result) {
@@ -1504,6 +1506,7 @@ static int xemacps_rx(struct net_local *lp, int budget)
 			dev_info(&lp->pdev->dev,
 				"%s: SOF and EOF not set (0x%08x) BD %p\n",
 				__func__, regval, bdptr);
+			lp->stats.rx_dropped++;
 			return 0;
 		}
 
@@ -1588,7 +1591,8 @@ static int xemacps_rx_poll(struct napi_struct *napi, int budget)
 	xemacps_write(lp->baseaddr, XEMACPS_RXSR_OFFSET, regval);
 
 	while (work_done < budget) {
-		if (regval & XEMACPS_RXSR_ERROR_MASK)
+		if (regval & (XEMACPS_RXSR_HRESPNOK_MASK |
+					XEMACPS_RXSR_BUFFNA_MASK))
 			lp->stats.rx_errors++;
 		temp_work_done = xemacps_rx(lp, budget - work_done);
 		work_done += temp_work_done;
@@ -1633,12 +1637,9 @@ static void xemacps_tx_poll(struct net_device *ndev)
 	 * we can do to revive hardware other than reset hardware.
 	 * Or try to close this interface and reopen it.
 	 */
-	if (regval & (XEMACPS_TXSR_URUN_MASK | XEMACPS_TXSR_RXOVR_MASK |
-		XEMACPS_TXSR_HRESPNOK_MASK | XEMACPS_TXSR_COL1000_MASK |
-		XEMACPS_TXSR_BUFEXH_MASK)) {
-		dev_err(&lp->pdev->dev, "TX ERROR 0x%x\n", regval);
+	if (regval & (XEMACPS_TXSR_RXOVR_MASK | XEMACPS_TXSR_HRESPNOK_MASK
+					| XEMACPS_TXSR_BUFEXH_MASK))
 		lp->stats.tx_errors++;
-	}
 
 	/* This may happen when a buffer becomes complete
 	 * between reading the ISR and scanning the descriptors.
@@ -1697,8 +1698,6 @@ static void xemacps_tx_poll(struct net_device *ndev)
 			if (!(regval & XEMACPS_TXBUF_ERR_MASK)) {
 				lp->stats.tx_packets++;
 				lp->stats.tx_bytes += bdlen;
-			} else {
-				lp->stats.tx_errors++;
 			}
 		}
 
@@ -2746,20 +2745,14 @@ static struct net_device_stats
 		xemacps_read(lp->baseaddr, XEMACPS_RXJABCNT_OFFSET) +
 		xemacps_read(lp->baseaddr, XEMACPS_RXFCSCNT_OFFSET) +
 		xemacps_read(lp->baseaddr, XEMACPS_RXLENGTHCNT_OFFSET) +
-		xemacps_read(lp->baseaddr, XEMACPS_RXSYMBCNT_OFFSET) +
-		xemacps_read(lp->baseaddr, XEMACPS_RXALIGNCNT_OFFSET) +
-		xemacps_read(lp->baseaddr, XEMACPS_RXRESERRCNT_OFFSET) +
-		xemacps_read(lp->baseaddr, XEMACPS_RXORCNT_OFFSET) +
-		xemacps_read(lp->baseaddr, XEMACPS_RXIPCCNT_OFFSET) +
-		xemacps_read(lp->baseaddr, XEMACPS_RXTCPCCNT_OFFSET) +
-		xemacps_read(lp->baseaddr, XEMACPS_RXUDPCCNT_OFFSET));
+		xemacps_read(lp->baseaddr, XEMACPS_RXALIGNCNT_OFFSET));
 	nstat->rx_length_errors +=
 		(xemacps_read(lp->baseaddr, XEMACPS_RXUNDRCNT_OFFSET) +
 		xemacps_read(lp->baseaddr, XEMACPS_RXOVRCNT_OFFSET) +
 		xemacps_read(lp->baseaddr, XEMACPS_RXJABCNT_OFFSET) +
 		xemacps_read(lp->baseaddr, XEMACPS_RXLENGTHCNT_OFFSET));
 	nstat->rx_over_errors +=
-		xemacps_read(lp->baseaddr, XEMACPS_RXRESERRCNT_OFFSET);
+		xemacps_read(lp->baseaddr, XEMACPS_RXORCNT_OFFSET);
 	nstat->rx_crc_errors +=
 		xemacps_read(lp->baseaddr, XEMACPS_RXFCSCNT_OFFSET);
 	nstat->rx_frame_errors +=
-- 
1.7.5.4

