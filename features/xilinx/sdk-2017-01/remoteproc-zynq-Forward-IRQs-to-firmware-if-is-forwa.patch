From fdd7e519f95018180bb54692ae2594b798483633 Mon Sep 17 00:00:00 2001
From: Michal Simek <monstr@monstr.eu>
Date: Tue, 22 May 2012 13:51:29 +0200
Subject: [PATCH 1004/1566] remoteproc: zynq: Forward IRQs to firmware if is
 forwarded to Linux

commit  faf5b8d191ddb15ce417c0449cb51368e5d8f620 from
https://github.com/Xilinx/linux-xlnx.git

If module is forcly removed and firmware is not aware about it
and IPs can still generate IRQs. When modules is reloaded there
is space between request_irq and gic_set_cpu where IRQ can happen.
In that case forward it to firmware which should be able to handle it.

Firmware after load has IRQ off and do partially reinit GIC controller.

Signed-off-by: Michal Simek <monstr@monstr.eu>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/remoteproc/zynq_remoteproc.c |   24 +++++++++++++++++++++++-
 1 files changed, 23 insertions(+), 1 deletions(-)

diff --git a/drivers/remoteproc/zynq_remoteproc.c b/drivers/remoteproc/zynq_remoteproc.c
index 108d2ab..85748e5 100644
--- a/drivers/remoteproc/zynq_remoteproc.c
+++ b/drivers/remoteproc/zynq_remoteproc.c
@@ -133,7 +133,22 @@ static irqreturn_t zynq_remoteproc_interrupt(int irq, void *dev_id)
 {
 	struct device *dev = dev_id;
 
-	dev_err(dev, "GIC IRQ is not forwarded correctly\n");
+	dev_err(dev, "GIC IRQ %d is not forwarded correctly\n", irq);
+
+	/*
+	 *  MS: Calling this function doesn't need to be BUG 
+	 * especially for cases where firmware doesn't disable
+	 * interrupts. In next probing can be som interrupts pending.
+	 * The next scenario is for cases when you want to monitor
+	 * non frequent interrupt through Linux kernel. Interrupt happen
+	 * and it is forwarded to Linux which update own statistic 
+	 * in (/proc/interrupt) and forward it to firmware.
+	 * 
+	 * gic_set_cpu(1, irq);	- setup cpu1 as destination cpu
+	 * gic_raise_softirq(cpumask_of(1), irq); - forward irq to firmware
+	 */
+	
+	gic_set_cpu(1, irq);
 	return IRQ_HANDLED;
 }
 
@@ -221,6 +236,13 @@ static int __devinit zynq_remoteproc_probe(struct platform_device *pdev)
 								tmp->irq);
 			goto irq_fault;
 		}
+		
+		/* 
+		 * MS: Here is place for detecting problem with firmware
+		 * which doesn't work correctly with interrupts
+		 * 
+		 * MS: Comment if you want to count IRQs on Linux 
+		 */
 		gic_set_cpu(1, tmp->irq);
 		list_add(&(tmp->list), &(local->mylist.list));
 	}
-- 
1.7.5.4

