From 9dc4941cac32fce61713cfce4d430a93c0689992 Mon Sep 17 00:00:00 2001
From: Michal Simek <michal.simek@xilinx.com>
Date: Thu, 1 Aug 2013 07:17:51 +0200
Subject: [PATCH 0858/1566] apf: Fix driver module initialization

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Use module_platform_driver and sort init and exit functions.

Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 1e31ee3b21d07055241b644cf4b39b8443924fe9)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c |   21 +----------------
 drivers/staging/apf/xlnk-eng.c       |   19 +---------------
 drivers/staging/apf/xlnk.c           |   41 +++++++++++++++------------------
 3 files changed, 21 insertions(+), 60 deletions(-)

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index 49f4e2c..d3b7c35 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -1251,26 +1251,7 @@ static struct platform_driver xdma_driver = {
 	},
 };
 
-/*----------------------------------------------------------------------------*/
-/* Module Init / Exit                                                         */
-/*----------------------------------------------------------------------------*/
-
-static __init int xdma_init(void)
-{
-	int status;
-
-	mutex_init(&dma_list_mutex);
-	status = platform_driver_register(&xdma_driver);
-	return status;
-}
-module_init(xdma_init);
-
-static void __exit xdma_exit(void)
-{
-	platform_driver_unregister(&xdma_driver);
-}
-
-module_exit(xdma_exit);
+module_platform_driver(xdma_driver);
 
 MODULE_DESCRIPTION("Xilinx DMA driver");
 MODULE_LICENSE("GPL");
diff --git a/drivers/staging/apf/xlnk-eng.c b/drivers/staging/apf/xlnk-eng.c
index 23b9530..892441c 100644
--- a/drivers/staging/apf/xlnk-eng.c
+++ b/drivers/staging/apf/xlnk-eng.c
@@ -255,24 +255,7 @@ static struct platform_driver xlnk_eng_driver = {
 	},
 };
 
-/*----------------------------------------------------------------------------*/
-/* Module Init / Exit                                                         */
-/*----------------------------------------------------------------------------*/
-
-static __init int xlnk_eng_init(void)
-{
-	int status;
-	status = platform_driver_register(&xlnk_eng_driver);
-	return status;
-}
-module_init(xlnk_eng_init);
-
-static void __exit xlnk_eng_exit(void)
-{
-	platform_driver_unregister(&xlnk_eng_driver);
-}
-
-module_exit(xlnk_eng_exit);
+module_platform_driver(xlnk_eng_driver);
 
 MODULE_DESCRIPTION("Xilinx xlnk engine generic driver");
 MODULE_LICENSE("GPL");
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index cd92f3d..cd07d15 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -93,8 +93,6 @@ static size_t xlnk_buflen[XLNK_BUF_POOL_SIZE];
 static unsigned int  xlnk_bufcacheable[XLNK_BUF_POOL_SIZE];
 
 
-static int __init xlnk_init(void);  /* Initialize bridge */
-static void __exit xlnk_exit(void); /* Opposite of initialize */
 static int xlnk_open(struct inode *ip, struct file *filp);  /* Open */
 static int xlnk_release(struct inode *ip, struct file *filp);   /* Release */
 static long xlnk_ioctl(struct file *filp, unsigned int code,
@@ -396,26 +394,6 @@ static struct platform_device xlnk_device = {
 	.num_resources = 0,
 };
 
-
-static int __init xlnk_init(void)
-{
-	pr_info("%s driver initializing\n", DRIVER_NAME);
-
-	xlnk_dev_buf = NULL;
-	xlnk_dev_size = 0;
-	xlnk_dev_vmas = 0;
-	xlnk_bufpool = NULL;
-
-	platform_device_register(&xlnk_device);
-
-	return platform_driver_register(&xlnk_driver);
-}
-
-static void __exit xlnk_exit(void)
-{
-	platform_driver_unregister(&xlnk_driver);
-}
-
 /*
  * This function is called when an application opens handle to the
  * bridge driver.
@@ -1303,6 +1281,25 @@ static int xlnk_recover_resource(unsigned long buf)
 	return 0;
 }
 
+static int __init xlnk_init(void)
+{
+	pr_info("%s driver initializing\n", DRIVER_NAME);
+
+	xlnk_dev_buf = NULL;
+	xlnk_dev_size = 0;
+	xlnk_dev_vmas = 0;
+	xlnk_bufpool = NULL;
+
+	platform_device_register(&xlnk_device);
+
+	return platform_driver_register(&xlnk_driver);
+}
+
+static void __exit xlnk_exit(void)
+{
+	platform_driver_unregister(&xlnk_driver);
+}
+
 /* APF driver initialization and de-initialization functions */
 module_init(xlnk_init);
 module_exit(xlnk_exit);
-- 
1.7.5.4

