From 0f6d7678480180d5ed3f298299f8aebc571f2dc6 Mon Sep 17 00:00:00 2001
From: Jeffrey Mouroux <jmouroux@xilinx.com>
Date: Mon, 8 May 2017 15:55:14 -0700
Subject: [PATCH 1555/1566] Documentation: devicetree: bindings: drm: xilinx:
 Video Mixer IP

commit  7624f6a3620a31224ea200fa7c0b093f1cc8d187 from
https://github.com/Xilinx/linux-xlnx.git

Open Firmware device tree bindings for the DRM driver enabling
the Xilinx Video Mixer IP.

Signed-off-by: Jeffrey Mouroux <jmouroux@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../bindings/drm/xilinx/xilinx_video_mixer.txt     |  272 ++++++++++++++++++++
 1 files changed, 272 insertions(+), 0 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/drm/xilinx/xilinx_video_mixer.txt

diff --git a/Documentation/devicetree/bindings/drm/xilinx/xilinx_video_mixer.txt b/Documentation/devicetree/bindings/drm/xilinx/xilinx_video_mixer.txt
new file mode 100644
index 0000000..b435f72
--- /dev/null
+++ b/Documentation/devicetree/bindings/drm/xilinx/xilinx_video_mixer.txt
@@ -0,0 +1,272 @@
+Device Tree Bindings for Xilinx Video Mixer IP core
+
+Required properties for Core IP Node:
+
+    Required General Properties:
+    - compatible: "xlnx,video_mixer-1.00.a"
+
+    - reg: MMIO base address and size of the Xilinx Video Mixer IP core address
+           space
+
+    - interrupts-parent: Phandle for interrupt controller
+
+    - interrupts: Interrupt number
+
+    Required Mixer IP Core Properties
+    - xlnx,bpc [number]: The data width per video component (8,10,12,16) Note:
+	only 8 is supported at this time
+
+    - xlnx,num-layers [number]: Number of active layers supported (1-8)
+	(count does NOT include logo layer but does include base layer)
+
+    - xlnx,ppc [number]: Required if any overlay layers will be utilizing
+	a memory-based interface.  The value should represent the number of
+	pixels-per-clock being processed by the mixer.
+
+    Optional Mixer IP Core Properties:
+    - xlnx,logo-layer: Boolean indicating that logo layer is enabled
+
+Layer Sub Node Properties:
+    The device tree will need to include a sub node for each enabled layer
+    in the IP core that is to be utilized by the driver.
+    These layer nodes describe the base layer as well as each overlay layer
+    but not the logo layer (see Logo Layer Properties below).
+    Each layer node should be named using "layer_#" format (e.g.
+	layer_0 { }; layer_1 {}; ...)
+
+    Required Properties:
+    - xlnx,layer-id [number]: Mixer layer number; should correspond to layer
+	number in the IP (e.g.  layer_1 should use xlnx,layer_id = <1).  Node
+	Layer_0 is the only required node (exception: if xlnx,logo-layer
+	property exists, then a logo {}; node must be present).  Layer_0 will
+	be interpreted as the background layer and must use layer-id = <0>.
+
+    - xlnx,vformat [string]: Describes the DMA memory format for a layer.
+
+	The proper choice will depend on how each mixer hardware layer is
+	configured in the Xilinx Vivado IP Integrator (IPI) tool and, if
+	a streaming layer, what format is produced on the bus by the
+	connected DMA.
+
+	Layers in the mixer can receive data either as a video stream
+	or can use the mixer's built-in dma capabilities.  The choice
+	is fixed to use either streaming or dma in the hardware design
+	and must be known to choose the correct video format string in
+	the device tree for a given layer node.  The list of possible
+	choices, depending on the hardware configuration, are listed in
+	the table below:
+
+	Interface Type	| IPI Video Format |  xlnx,vformat value
+	-------------------------------------------------------------
+	  Streaming	|  RGB		   | various (see note below)
+	  Streaming	|  YUV 4:4:4	   | various (see note below)
+	  Streaming	|  YUV 4:2:2	   | various (see note below)
+	  Streaming	|  YUV 4:2:0	   | Supported in future version
+			|		   |
+	  Memory	|  RGB8		   | "bgr888"
+	  Memory	|  YUV8		   | Supported in future version
+	  Memory	|  RGBX8	   | "xbgr8888"
+	  Memory	|  YUVX8	   | Supported in future version
+	  Memory	|  YUYV8	   | "yuv422"
+	  Memory	|  RGBA8	   | "abgr8888"
+	  Memory	|  BGRA8	   | "argb8888"
+	  Memory	|  YUVA8	   | Supported in future version
+	  Memory	|  RGBX10	   | Supported in future version
+	  Memory	|  YUVX10	   | Supported in future version
+	  Memory	|  RGB565	   | Supported in future version
+	  Memory	|  Y_UV8	   | "nv16"
+	  Memory	|  Y_UV8_420	   | "nv12"
+	  Memory	|  Y_UV10	   | Supported in future version
+	  Memory	|  Y_UV10_420	   | Supported in future version
+	  Memory	|  Y8		   | Supported in future version
+	  Memory	|  Y10		   | Supported in future version
+
+	Each video format string in the device tree will map to a DRM fourcc code.
+	This is how user space will be instructed to format the memory buffer for
+	a given mixer layer.  It is important to ensure that the correct value
+	for video format be chosen for a given layer depending on its interface
+	type.  For "memory" type layers, the xlnx,vformat value indicated in the
+	table above is required (e.g. Y_UV8 in your mixer IP design must use "nv16"
+	as the value of the layer xlnx,vformat property).  For "streaming"
+	layers, however, what is important to know is how the data will be
+	provided on the media bus to the mixer by the connected DMA. A streaming
+	layer specified as "RGB" expects any dma to provide data on the media
+	bus in that format.  You are free to indicate any of the driver
+	understood xlnx,vformat values listed in the table below for a
+	streaming layer if, and only if, the dma IP connected to the streaming
+	layer is capable of reading video data in that memory format and
+	providing it to the mixer layer according to its media bus setting.
+
+	The table below indicates the mapping between the device tree
+	xlnx,vformat codes and the corresponding code which will be communicated
+	to user space applications that interact with the DRM driver.
+
+	xlnx,vformat value | Corresponding DRM fourcc code
+	--------------------------------------------------
+	  "bgr888"	   |  DRM_FORMAT_BGR888
+	  "rgb888"	   |  DRM_FORMAT_RGB888 **
+	  "bgr565"	   |  DRM_FORMAT_BGR565 *
+	  "yuv422"	   |  DRM_FORMAT_YUYV
+	  "ayuv"	   |  DRM_FORMAT_AYUV *
+	  "nv12"	   |  DRM_FORMAT_NV12
+	  "nv16"	   |  DRM_FORMAT_NV16
+	  "rgba8888"	   |  DRM_FORMAT_RGBA8888 **
+	  "abgr8888"	   |  DRM_FORMAT_ABGR8888
+	  "argb8888"	   |  DRM_FORMAT_ARGB8888
+	  "xbgr8888"	   |  DRM_FORMAT_XBGR8888
+
+	* not yet supported in driver
+	** native formats for mixer logo layer (depending on whether per-pixel
+	   transparency is enabled)
+
+    - xlnx,layer-height [number]: Only required for layer_0 node (master layer).
+	Indicates maximum vertical size of active screen display in pixels
+
+    Optional Properties:
+    - xlnx,layer-alpha: Indicates that this layer supports global alpha blending
+
+    - xlnx,layer-scale: Indicates that this layer supports mixer scaling. Not
+	applicable to layer_0 (i.e. master) node.
+
+    - xlnx,layer-width [number]: Required if xlnx,layer-scale property exists
+	for layer.  Indicates maximum number of columns (before scaling) for
+	this layer (i.e. horizontal pixels)
+
+    - xlnx,layer-streaming: Layer obtains data as video stream. If omitted,
+	layer is presumed to be memory mapped if it is an overlay layer.  If
+	omitted for layer_0 (background layer), then the background layer will
+	be disabled and generate only a solid background color (typically blue).
+
+
+Logo Layer Sub Node Properties:
+    This node is only required if the core IP node contains the
+    'xlnx,logo-layer' property indicating the the core supports a logo layer.
+    This subnode should be labled "logo" (e.g. logo { }; ).
+
+    Required Properties:
+    - xlnx,layer-id [number]: This should be set to <8>.
+
+    - xlnx,logo-height [number]: Maximum number of vertical pixels for the logo
+	layer
+
+    - xlnx,logo-width [number]: Maximum number of horizontal pixels for the logo
+	layer
+
+
+    Optional Properties:
+    - xlnx,logo-transp: Logo support color key transparency feature (note:
+	not supported at this time)
+
+    - xlnx,logo-pixel-alpha: Logo supports per pixel alpha data (e.g. RGBA).
+
+
+Additional Nodes Requiring Modificaton
+
+There must exist a drm node in the dts which much be updated as follows
+(see xilinx_drm.txt for more information about the composition of the DRM
+driver node in the device tree):
+
+    Additional Required Properties for xilinx_drm Node:
+
+    - xlnx,mixer: Phandle reference to mixer IP node
+
+    - xlnx,mixer-reset-gpios: Should include a phandle reference to
+	the gpio controller with the proper gpio id and level (mixer reset
+	default should be set to "low")
+
+
+    Required Properties for each drm plane# Node:
+
+    Each plane node served by a mixer layer should include the
+    the following property:
+
+    - xlnx,mixer-layer: A phandle reference to the mixer layer node serving
+	this plane.
+
+
+Example:
+
+This sample is of a mixer IP core that has two overlay layers enabled in
+addition to the logo layer.  The mixer's layer_0 is configured to expect "RGB"
+on the media bus.  The DMA device streaming to layer_0 is capable of delivering
+RGB data on the bus provided memory is formated as RBG type data.  As such,
+we've chosen "bgr888" as our intended memory format for layer_0.
+Overlay 1 is a streaming video input layer which is served by a separate dma
+IP core. Overlay 2 is memory-based (i.e. dma-driven) layer (no need for a
+separate dma IP core). Additionally, the mixer's reset line is on gpio #79
+as indicated in the xilinx_drm node.  This Mixer-based design is configured
+for 8 bits per component and one pixel per clock.
+
+v_mix_0: v_mix@80040000 {
+	compatible = "xlnx,v-mix-1.00.a";
+	interrupt-parent = <&gic>;
+	interrupts = <0 90 4>;
+	reg = <0x0 0x80040000 0x0 0x40000>;
+
+	xlnx,bpc = <8>;
+	xlnx,ppc = <1>;
+	xlnx,num-layers = <3>;
+	xlnx,logo-layer;
+
+	mixer_master_layer: layer_0 {
+		xlnx,layer-id = <0>;
+		xlnx,vformat = "bgr888";
+		xlnx,layer-streaming;
+		xlnx,layer-width = <1920>;
+		xlnx,layer-height = <1080>;
+	};
+
+	mixer_overlay_1: layer_1 {
+		xlnx,layer-id = <1>;
+		xlnx,vformat = "yuv422";
+		xlnx,layer-streaming;
+		xlnx,layer-alpha;
+	};
+
+	mixer_overlay_2: layer_2 {
+		xlnx,layer-id = <2>;
+		xlnx,vformat = "nv12";
+		xlnx,layer-scale;
+		xlnx,layer-width = <1920>;
+	};
+
+	mixer_logo: logo {
+		xlnx,layer-id = <8>;
+		xlnx,logo-width = <64>;
+		xlnx,logo-height = <64>;
+	};
+};
+
+
+
+xilinx_drm: xilinx_drm {
+	compatible = "xlnx,drm";
+	status = "okay";
+
+	/* mixer IP specific additions to this node */
+	xlnx,mixer = <&v_mix_0>;
+	xlnx,mixer-reset-gpios = <&gpio 79 1>;
+
+	xlnx,vtc = <&v_tc_0>;
+	xlnx,encoder-slave = <&adv7511>;
+	xlnx,connector-type = "HDMIA";
+	planes {
+		xlnx,pixel-format = "bgr888";
+		plane0 {
+			dmas = <&vdma_0 0>;
+			dma-names = "dma0";
+			xlnx,mixer-layer = <&mixer_master_layer>;
+		};
+		plane1 {
+			dmas = <&vdma_1 0>;
+			dma-names = "dma0";
+			xlnx,mixer-layer = <&mixer_overlay_1>;
+		};
+		plane2 {
+			xlnx,mixer-layer = <&mixer_overlay_2>;
+		};
+		plane3 {
+			xlnx,mixer-layer = <&mixer_logo>;
+		};
+	};
+};
-- 
1.7.5.4

