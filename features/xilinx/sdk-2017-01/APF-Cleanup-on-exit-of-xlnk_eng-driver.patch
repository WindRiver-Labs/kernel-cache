From 892717f9c7d936505f5ba1ba556a37d613a76d02 Mon Sep 17 00:00:00 2001
From: S Mohan <s.mohan@xilinx.com>
Date: Fri, 4 Apr 2014 09:35:55 -0700
Subject: [PATCH 0877/1566] APF: Cleanup on exit of xlnk_eng driver

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Implement the xlnk_eng_remove and xlnk_eng_release functions
and modify xlnk_eng_probe to enable this

Signed-off-by: S Mohan <s.mohan@xilinx.com>
(cherry picked from commit a8d40e1ed38decd749d01b8e075f050aa6dc0cc0)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xlnk-eng.c |   45 ++++++++++++++++++++++++++++++---------
 drivers/staging/apf/xlnk-eng.h |    1 -
 2 files changed, 34 insertions(+), 12 deletions(-)

diff --git a/drivers/staging/apf/xlnk-eng.c b/drivers/staging/apf/xlnk-eng.c
index ab8547c..bc40128 100644
--- a/drivers/staging/apf/xlnk-eng.c
+++ b/drivers/staging/apf/xlnk-eng.c
@@ -72,25 +72,37 @@ struct xlnk_eng_device *xlnk_eng_request_by_name(char *name)
 }
 EXPORT_SYMBOL(xlnk_eng_request_by_name);
 
-void xlnk_eng_release(struct xlnk_eng_device *xlnk_dev)
+/**
+ * struct xilinx_xlnk_eng_device - device structure for xilinx_xlnk_eng
+ * @common:	common device info
+ * @base:	base address for device
+ * @lock:	lock used by device
+ * @cnt:	usage count
+ * @info:	info for registering and unregistering uio device
+ */
+struct xilinx_xlnk_eng_device {
+	struct xlnk_eng_device common;
+	void __iomem *base;
+	spinlock_t lock;
+	int cnt;
+	struct uio_info *info;
+};
+
+static void xlnk_eng_release(struct device *dev)
 {
+	struct xilinx_xlnk_eng_device *xdev;
+	struct xlnk_eng_device *xlnk_dev;
+
+	xdev = dev_get_drvdata(dev);
+	xlnk_dev = &xdev->common;
 	if (!xlnk_dev)
 		return;
 
 	xlnk_dev->free(xlnk_dev);
 }
-EXPORT_SYMBOL(xlnk_eng_release);
 
 #define DRIVER_NAME "xilinx-xlnk-eng"
 
-struct xilinx_xlnk_eng_device {
-	struct xlnk_eng_device common;
-	void __iomem *base;
-	spinlock_t lock;
-	int cnt;
-};
-
-
 #define to_xilinx_xlnk(dev)	container_of(dev, \
 					struct xilinx_xlnk_eng_device, common)
 
@@ -140,7 +152,7 @@ static int xlnk_eng_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "Not enough memory for device\n");
 		return -ENOMEM;
 	}
-
+	xdev->info = info;
 	devname = devm_kzalloc(&pdev->dev, 64, GFP_KERNEL);
 	if (!devname) {
 		dev_err(&pdev->dev, "Not enough memory for device\n");
@@ -181,6 +193,7 @@ static int xlnk_eng_probe(struct platform_device *pdev)
 
 	xdev->common.alloc = xilinx_xlnk_alloc;
 	xdev->common.free = xilinx_xlnk_free;
+	xdev->common.dev->release = xlnk_eng_release;
 
 	dev_set_drvdata(&pdev->dev, xdev);
 
@@ -201,6 +214,16 @@ static int xlnk_eng_probe(struct platform_device *pdev)
 
 static int xlnk_eng_remove(struct platform_device *pdev)
 {
+	struct uio_info *info;
+	struct xilinx_xlnk_eng_device *xdev;
+
+	xdev = dev_get_drvdata(&pdev->dev);
+	info = xdev->info;
+
+	uio_unregister_device(info);
+	dev_info(&pdev->dev, "xilinx-xlnk-eng uio unregistered\n");
+	xlnk_eng_unregister_device(&xdev->common);
+
 	return 0;
 }
 
diff --git a/drivers/staging/apf/xlnk-eng.h b/drivers/staging/apf/xlnk-eng.h
index c00d85c..db9550c 100644
--- a/drivers/staging/apf/xlnk-eng.h
+++ b/drivers/staging/apf/xlnk-eng.h
@@ -28,6 +28,5 @@ struct xlnk_eng_device {
 extern int xlnk_eng_register_device(struct xlnk_eng_device *xlnk_dev);
 extern void xlnk_eng_unregister_device(struct xlnk_eng_device *xlnk_dev);
 extern struct xlnk_eng_device *xlnk_eng_request_by_name(char *name);
-extern void xlnk_eng_release(struct xlnk_eng_device *xlnk_dev);
 
 #endif
-- 
1.7.5.4

