From f5d55615e8c3e24f93f8b1a92fa6beb70868856a Mon Sep 17 00:00:00 2001
From: Michal Simek <monstr@monstr.eu>
Date: Fri, 19 Oct 2012 13:01:02 +0200
Subject: [PATCH 1010/1566] zynq: Fix boot_secondary to directly reset cpu1

commit  39adec9173095045244b31d5dc9136fb1ae4ed35 from
https://github.com/Xilinx/linux-xlnx.git

Do not use any expectations from bootloader setup.
Reset cpu1 directly via SLCR registers which must
be separately mapped because SLCR driver is probed
later.
Also map 0x0-0x0xb addresses for jump trampoline.

Based on the patch
ARM: SMP: use a timing out completion for cpu hotplug
(sha1: 75349086923783f02f79f978b9d3b32510681bd1)

is possible to remove all timing code from Zynq smp bootup code.
Generic code will be responsible for.

If cpu is already released cpu_down returns EBUSY.

Signed-off-by: Michal Simek <monstr@monstr.eu>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/remoteproc/zynq_remoteproc.c |   22 ++++++++++++++++++----
 1 files changed, 18 insertions(+), 4 deletions(-)

diff --git a/drivers/remoteproc/zynq_remoteproc.c b/drivers/remoteproc/zynq_remoteproc.c
index 7ab5a23..c3568c3 100644
--- a/drivers/remoteproc/zynq_remoteproc.c
+++ b/drivers/remoteproc/zynq_remoteproc.c
@@ -84,6 +84,7 @@ static int zynq_rproc_start(struct rproc *rproc)
 	struct device *dev = rproc->dev.parent;
 	struct platform_device *pdev = to_platform_device(dev);
 	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+	int ret;
 
 	dev_dbg(dev, "%s\n", __func__);
 	INIT_WORK(&workqueue, handle_event);
@@ -92,9 +93,9 @@ static int zynq_rproc_start(struct rproc *rproc)
 	outer_flush_range(local->mem_start, local->mem_end);
 
 	remoteprocdev = pdev;
-	zynq_cpu1_start(0);
+	ret = zynq_cpu1_start(0);
 
-	return 0;
+	return ret;
 }
 
 /* kick a firmware */
@@ -176,9 +177,16 @@ static int __devinit zynq_remoteproc_probe(struct platform_device *pdev)
 	int ret = 0;
 	struct irq_list *tmp;
 	int count;
+	struct zynq_rproc_pdata *local;
+
+	ret = cpu_down(1);
+	/* EBUSY means CPU is already released */
+	if (ret && (ret != -EBUSY)) {
+		dev_err(&pdev->dev, "Can't release cpu1\n");
+		return -ENOMEM;
+	}
 
-	struct zynq_rproc_pdata *local = kzalloc(
-				sizeof(struct zynq_rproc_pdata), GFP_KERNEL);
+	local = kzalloc(sizeof(struct zynq_rproc_pdata), GFP_KERNEL);
 	if (!local) {
 		dev_err(&pdev->dev, "Unable to alloc private data\n");
 		return -ENOMEM;
@@ -322,6 +330,7 @@ irq_fault:
 static int __devexit zynq_remoteproc_remove(struct platform_device *pdev)
 {
 	struct zynq_rproc_pdata *local = platform_get_drvdata(pdev);
+	u32 ret;
 
 	dev_info(&pdev->dev, "%s\n", __func__);
 
@@ -333,6 +342,11 @@ static int __devexit zynq_remoteproc_remove(struct platform_device *pdev)
 	rproc_del(local->rproc);
 	rproc_put(local->rproc);
 
+	/* Cpu can't be power on - for example in nosmp mode */
+	ret = cpu_up(1);
+	if (ret)
+		dev_err(&pdev->dev, "Can't power on cpu1 %d\n", ret);
+
 	return 0;
 }
 
-- 
1.7.5.4

