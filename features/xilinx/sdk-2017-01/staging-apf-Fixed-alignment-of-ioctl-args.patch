From 26e8c20e313e98dc95c71941d39182a513dcaa16 Mon Sep 17 00:00:00 2001
From: Michael Gill <michael.gill@xilinx.com>
Date: Mon, 11 Apr 2016 21:24:03 -0700
Subject: [PATCH 0889/1566] staging: apf: Fixed alignment of ioctl args

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Some changes to the user-space code resulted in a shift in the
alignment of several arguments in structures that are used
to communicate to the apf kernel driver via ioctl.  This mirrors
those changes in the kernel code.

Signed-off-by: Michael Gill <gill@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 3cb7229a854358374cf2624b3a69e5f2b98d1b2c)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c |    2 +-
 drivers/staging/apf/xlnk.c           |    3 +-
 drivers/staging/apf/xlnk.h           |  150 ++++++++++++++++++----------------
 3 files changed, 81 insertions(+), 74 deletions(-)

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index b0de6a2..06363cc 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -782,7 +782,6 @@ int xdma_submit(struct xdma_chan *chan,
 	unsigned int sgcnt, sgcnt_dma;
 	enum dma_data_direction dmadir;
 	int status;
-	void *kaddr;
 	DEFINE_DMA_ATTRS(attrs);
 
 
@@ -829,6 +828,7 @@ int xdma_submit(struct xdma_chan *chan,
 		sglist_dma = sglist;
 		sgcnt_dma = sgcnt;
 		if (user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE) {
+			void *kaddr = phys_to_virt((phys_addr_t)userbuf);
 			__cpuc_flush_dcache_area(kaddr, size);
 			outer_clean_range((phys_addr_t)userbuf,
 					  (u32)userbuf + size);
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index 4243586..2c6c368 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -636,7 +636,7 @@ static int xlnk_dmaregister(char *name, unsigned int id,
 			  GFP_KERNEL);
 	if (!devpack)
 		return -ENOMEM;
-
+	strcpy(devpack->name, name);
 	devpack->pdev.name = "xilinx-axidma";
 
 	devpack->pdev.id = id;
@@ -1245,7 +1245,6 @@ static long xlnk_ioctl(struct file *filp, unsigned int code,
 		status = xlnk_recover_resource(args);
 		break;
 	default:
-		pr_err("xlnk- Unknown ioctl code emitted\n");
 		status = -EINVAL;
 	}
 
diff --git a/drivers/staging/apf/xlnk.h b/drivers/staging/apf/xlnk.h
index 2939e63..ac20c2a 100644
--- a/drivers/staging/apf/xlnk.h
+++ b/drivers/staging/apf/xlnk.h
@@ -13,7 +13,6 @@
 #define CF_FLAG_PHYSICALLY_CONTIGUOUS	0x00000002
 #define CF_FLAG_DMAPOLLING		0x00000004
 
-
 enum xlnk_dma_direction {
 	XLNK_DMA_BI = 0,
 	XLNK_DMA_TO_DEVICE = 1,
@@ -38,95 +37,104 @@ struct xlnk_dmabuf_reg {
 };
 
 union xlnk_args {
-	struct {
-		unsigned int len;
-		int id;
-		unsigned int phyaddr;
+	struct __attribute__ ((__packed__))  {
+		__aligned(4) unsigned int len;
+		__aligned(4) int id;
+		__aligned(4) unsigned int phyaddr;
 		unsigned char cacheable;
 	} allocbuf;
-	struct {
-		unsigned int id;
-		void *buf;
+	struct __attribute__ ((__packed__))  {
+		__aligned(4) unsigned int id;
+		__aligned(4) void *buf;
 	} freebuf;
-	struct {
-		int dmabuf_fd;
-		void *user_addr;
+	struct __attribute__ ((__packed__))  {
+		__aligned(4) int dmabuf_fd;
+		__aligned(4) void *user_addr;
 	} dmabuf;
-	struct {
+	struct __attribute__ ((__packed__))  {
 		char name[64]; /* max length of 64 */
-		u32 dmachan; /* return value */
-		unsigned int bd_space_phys_addr;/*for bd chain used by dmachan*/
-		unsigned int bd_space_size; /* bd chain size in bytes */
+		/* return value */
+		__aligned(4) unsigned int dmachan;
+		/*for bd chain used by dmachan*/
+		__aligned(4) unsigned int bd_space_phys_addr;
+		/* bd chain size in bytes */
+		__aligned(4) unsigned int bd_space_size;
 	} dmarequest;
 #define XLNK_MAX_APPWORDS 5
-	struct {
-		u32 dmachan;
-		void *buf;      /* buffer base address */
-		void *buf2;	/* used to point src_buf in cdma case */
-		unsigned int buf_offset; /* used on kernel allocated buffers */
-		unsigned int len;
-		unsigned int bufflag; /* zero all the time so far */
-		u32 sglist; /* ignored */
-		unsigned int sgcnt; /* ignored */
-		enum xlnk_dma_direction dmadir;
-		unsigned int nappwords_i; /* n appwords passed to BD */
-		unsigned int appwords_i[XLNK_MAX_APPWORDS];
-		unsigned int nappwords_o; /* n appwords passed from BD */
+	struct __attribute__ ((__packed__))  {
+		__aligned(4) unsigned int dmachan;
+		/* buffer base address */
+		__aligned(4) void *buf;
+		/* used to point src_buf in cdma case */
+		__aligned(4) void *buf2;
+		/* used on kernel allocated buffers */
+		__aligned(4) unsigned int buf_offset;
+		__aligned(4) unsigned int len;
+		/* zero all the time so far */
+		__aligned(4) unsigned int bufflag;
+		__aligned(4) unsigned int sglist; /* ignored */
+		__aligned(4) unsigned int sgcnt; /* ignored */
+		__aligned(4) int dmadir;
+		__aligned(4) unsigned int nappwords_i;
+		__aligned(4) unsigned int appwords_i[XLNK_MAX_APPWORDS];
+		__aligned(4) unsigned int nappwords_o;
 		/* appwords array we only accept 5 max */
-		unsigned int flag;
-		u32 dmahandle; /* return value */
-		unsigned int last_bd_index; /*index of last bd used by request*/
+		__aligned(4) unsigned int flag;
+		/* return value */
+		__aligned(4) unsigned int dmahandle;
+		/*index of last bd used by request*/
+		__aligned(4) unsigned int last_bd_index;
 	} dmasubmit;
-	struct {
-		u32 dmahandle;
-		unsigned int nappwords; /* n appwords read from BD */
-		unsigned int appwords[XLNK_MAX_APPWORDS];
+	struct __attribute__ ((__packed__))  {
+		__aligned(4) unsigned int dmahandle;
+		__aligned(4) unsigned int nappwords;
+		__aligned(4) unsigned int appwords[XLNK_MAX_APPWORDS];
 		/* appwords array we only accept 5 max */
 	} dmawait;
-	struct {
-		u32 dmachan;
+	struct __attribute__ ((__packed__))  {
+		__aligned(4) unsigned int dmachan;
 	} dmarelease;
-	struct {
-		unsigned int base;
-		unsigned int size;
-		unsigned int irqs[8];
+	struct __attribute__ ((__packed__))  {
+		__aligned(4) unsigned int base;
+		__aligned(4) unsigned int size;
+		__aligned(4) unsigned int irqs[8];
 		char name[32];
-		unsigned int id;
+		__aligned(4) unsigned int id;
 	} devregister;
-	struct {
-		unsigned int base;
+	struct __attribute__ ((__packed__))  {
+		__aligned(4) unsigned int base;
 	} devunregister;
-	struct {
+	struct __attribute__ ((__packed__))  {
 		char name[32];
-		unsigned int id;
-		unsigned int base;
-		unsigned int size;
-		unsigned int chan_num;
-		unsigned int chan0_dir;
-		unsigned int chan0_irq;
-		unsigned int chan0_poll_mode;
-		unsigned int chan0_include_dre;
-		unsigned int chan0_data_width;
-		unsigned int chan1_dir;
-		unsigned int chan1_irq;
-		unsigned int chan1_poll_mode;
-		unsigned int chan1_include_dre;
-		unsigned int chan1_data_width;
+		__aligned(4) unsigned int id;
+		__aligned(4) unsigned int base;
+		__aligned(4) unsigned int size;
+		__aligned(4) unsigned int chan_num;
+		__aligned(4) unsigned int chan0_dir;
+		__aligned(4) unsigned int chan0_irq;
+		__aligned(4) unsigned int chan0_poll_mode;
+		__aligned(4) unsigned int chan0_include_dre;
+		__aligned(4) unsigned int chan0_data_width;
+		__aligned(4) unsigned int chan1_dir;
+		__aligned(4) unsigned int chan1_irq;
+		__aligned(4) unsigned int chan1_poll_mode;
+		__aligned(4) unsigned int chan1_include_dre;
+		__aligned(4) unsigned int chan1_data_width;
 	} dmaregister;
-	struct {
+	struct __attribute__ ((__packed__))  {
 		char name[32];
-		unsigned int id;
-		unsigned int base;
-		unsigned int size;
-		unsigned int mm2s_chan_num;
-		unsigned int mm2s_chan_irq;
-		unsigned int s2mm_chan_num;
-		unsigned int s2mm_chan_irq;
+		__aligned(4) unsigned int id;
+		__aligned(4) unsigned int base;
+		__aligned(4) unsigned int size;
+		__aligned(4) unsigned int mm2s_chan_num;
+		__aligned(4) unsigned int mm2s_chan_irq;
+		__aligned(4) unsigned int s2mm_chan_num;
+		__aligned(4) unsigned int s2mm_chan_irq;
 	} mcdmaregister;
-	struct {
-		void *phys_addr;
-		int size;
-		int action;
+	struct __attribute__ ((__packed__))  {
+		__aligned(4) void *phys_addr;
+		__aligned(4) int size;
+		__aligned(4) int action;
 	} cachecontrol;
 };
 
-- 
1.7.5.4

