From 4f3695222b8baf102b6e9bad21786ac7f2cdc9a5 Mon Sep 17 00:00:00 2001
From: Michael Gill <michael.gill@xilinx.com>
Date: Tue, 31 Jan 2017 15:30:30 -0800
Subject: [PATCH 1191/1566] staging: apf: Fixed race condition in DMA/device
 unregistration
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

commit  86bf95620fe1caad4485c7f72c40712f7883086a from
https://github.com/Xilinx/linux-xlnx.git

When the apf driver released released devices, there was a
potential race condition that could cause errors if devices
are unregistered in specific orders from multiple processes.
This patch resolves that.

Signed-off-by: Michael Gill <gill@xilinx.com>
Tested-by: SÃ¶ren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c |   35 +---
 drivers/staging/apf/xlnk.c           |  285 +++++++++++++++++++---------------
 2 files changed, 167 insertions(+), 153 deletions(-)

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index ff111ef..4bfe62d 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -275,10 +275,12 @@ static void dump_cur_bd(struct xdma_chan *chan)
 			sizeof(struct xdma_desc_hw);
 
 	dev_err(chan->dev, "cur bd @ %08x\n",   (u32)DMA_IN(&chan->regs->cdr));
-	dev_err(chan->dev, "  buf  = 0x%08x\n", chan->bds[index]->src_addr);
+	dev_err(chan->dev, "  buf  = %p\n",
+		(void *)chan->bds[index]->src_addr);
 	dev_err(chan->dev, "  ctrl = 0x%08x\n", chan->bds[index]->control);
 	dev_err(chan->dev, "  sts  = 0x%08x\n", chan->bds[index]->status);
-	dev_err(chan->dev, "  next = 0x%08x\n", chan->bds[index]->next_desc);
+	dev_err(chan->dev, "  next = %p\n",
+		(void *)chan->bds[index]->next_desc);
 }
 
 static irqreturn_t xdma_rx_intr_handler(int irq, void *data)
@@ -637,7 +639,6 @@ static int pin_user_pages(xlnk_intptr_type uaddr,
 {
 	int status;
 	struct mm_struct *mm = current->mm;
-	struct task_struct *curr_task = current;
 	unsigned int first_page;
 	unsigned int last_page;
 	unsigned int num_pages;
@@ -735,35 +736,19 @@ struct xdma_chan *xdma_request_channel(char *name)
 	int i;
 	struct xdma_device *device, *tmp;
 
-	mutex_lock(&dma_list_mutex);
 	list_for_each_entry_safe(device, tmp, &dma_device_list, node) {
 		for (i = 0; i < device->channel_count; i++) {
-			if (device->chan[i]->client_count)
-				continue;
 			if (!strcmp(device->chan[i]->name, name)) {
-				device->chan[i]->client_count++;
-				mutex_unlock(&dma_list_mutex);
 				return device->chan[i];
 			}
 		}
 	}
-	mutex_unlock(&dma_list_mutex);
 	return NULL;
 }
 EXPORT_SYMBOL(xdma_request_channel);
 
 void xdma_release_channel(struct xdma_chan *chan)
-{
-	mutex_lock(&dma_list_mutex);
-	if (!chan->client_count) {
-		mutex_unlock(&dma_list_mutex);
-		return;
-	}
-	chan->client_count--;
-	dma_halt(chan);
-	xilinx_chan_desc_reinit(chan);
-	mutex_unlock(&dma_list_mutex);
-}
+{ }
 EXPORT_SYMBOL(xdma_release_channel);
 
 void xdma_release_all_channels(void)
@@ -776,7 +761,6 @@ void xdma_release_all_channels(void)
 			if (device->chan[i]->client_count) {
 				dma_halt(device->chan[i]);
 				xilinx_chan_desc_reinit(device->chan[i]);
-				device->chan[i]->client_count = 0;
 				pr_info("%s: chan %s freed\n",
 						__func__,
 						device->chan[i]->name);
@@ -834,8 +818,8 @@ int xdma_submit(struct xdma_chan *chan,
 		dp->dbuf_sg_table = dma_buf_map_attachment(dp->dbuf_attach,
 							   chan->direction);
 		if (IS_ERR_OR_NULL(dp->dbuf_sg_table)) {
-			pr_err("%s unable to map sg_table for dbuf: %d\n",
-			       __func__, (int)dp->dbuf_sg_table);
+			pr_err("%s unable to map sg_table for dbuf: %p\n",
+			       __func__, dp->dbuf_sg_table);
 			return -EINVAL;
 		}
 		cpy_size = dp->dbuf_sg_table->nents *
@@ -1068,9 +1052,8 @@ static int xdma_probe(struct platform_device *pdev)
 	int dma_chan_dir;
 	int dma_chan_reg_offset;
 
-	pr_info("%s: probe dma %x, nres %d, id %d\n", __func__,
-		 (unsigned int)&pdev->dev,
-		 pdev->num_resources, pdev->id);
+	pr_info("%s: probe dma %p, nres %d, id %d\n", __func__,
+		&pdev->dev, pdev->num_resources, pdev->id);
 
 	xdev = devm_kzalloc(&pdev->dev, sizeof(struct xdma_device), GFP_KERNEL);
 	if (!xdev) {
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index fedb6d6..d8d541f 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -48,6 +48,7 @@
 #include <linux/dma/xilinx_dma.h>
 #include <linux/uio_driver.h>
 #include <asm/cacheflush.h>
+#include <linux/semaphore.h>
 
 #include "xlnk-ioctl.h"
 #include "xlnk-config.h"
@@ -135,6 +136,7 @@ struct xlnk_device_pack {
 	struct platform_device pdev;
 	struct resource res[8];
 	struct uio_info *io_ptr;
+	int refs;
 
 #ifdef CONFIG_XILINX_DMA_APF
 	struct xdma_channel_config dma_chan_cfg[4];  /* for xidane dma only */
@@ -147,13 +149,13 @@ struct xlnk_device_pack {
 
 };
 
-static spinlock_t xlnk_devpack_lock;
+static struct semaphore xlnk_devpack_sem;
 static struct xlnk_device_pack *xlnk_devpacks[MAX_XLNK_DMAS];
 static void xlnk_devpacks_init(void)
 {
 	unsigned int i;
 
-	spin_lock_init(&xlnk_devpack_lock);
+	sema_init(&xlnk_devpack_sem, 1);
 	for (i = 0; i < MAX_XLNK_DMAS; i++)
 		xlnk_devpacks[i] = NULL;
 
@@ -162,7 +164,6 @@ static void xlnk_devpacks_init(void)
 static void xlnk_devpacks_delete(struct xlnk_device_pack *devpack)
 {
 	unsigned int i;
-
 	for (i = 0; i < MAX_XLNK_DMAS; i++) {
 		if (xlnk_devpacks[i] == devpack)
 			xlnk_devpacks[i] = NULL;
@@ -172,15 +173,13 @@ static void xlnk_devpacks_delete(struct xlnk_device_pack *devpack)
 static void xlnk_devpacks_add(struct xlnk_device_pack *devpack)
 {
 	unsigned int i;
-
-	spin_lock_irq(&xlnk_devpack_lock);
+	devpack->refs = 1;
 	for (i = 0; i < MAX_XLNK_DMAS; i++) {
 		if (xlnk_devpacks[i] == NULL) {
 			xlnk_devpacks[i] = devpack;
 			break;
 		}
 	}
-	spin_unlock_irq(&xlnk_devpack_lock);
 }
 
 static struct xlnk_device_pack *xlnk_devpacks_find(xlnk_intptr_type base)
@@ -199,19 +198,28 @@ static void xlnk_devpacks_free(xlnk_intptr_type base)
 {
 	struct xlnk_device_pack *devpack;
 
+	down(&xlnk_devpack_sem);
 	devpack = xlnk_devpacks_find(base);
-	if (devpack) {
-		if (xlnk_config_dma_type(xlnk_config_dma_standard)) {
-			if (devpack->io_ptr)
-				uio_unregister_device(devpack->io_ptr);
-			if (strcmp(devpack->pdev.name, "xilinx-axidma") != 0)
-				platform_device_unregister(&devpack->pdev);
-		} else {
+	if (!devpack) {
+		up(&xlnk_devpack_sem);
+		return;
+	}
+	devpack->refs--;
+	if (devpack->refs) {
+		up(&xlnk_devpack_sem);
+		return;
+	}
+	if (xlnk_config_dma_type(xlnk_config_dma_standard)) {
+		if (devpack->io_ptr)
+			uio_unregister_device(devpack->io_ptr);
+		if (strcmp(devpack->pdev.name, "xilinx-axidma") != 0)
 			platform_device_unregister(&devpack->pdev);
-		}
-		xlnk_devpacks_delete(devpack);
-		kfree(devpack);
+	} else {
+		platform_device_unregister(&devpack->pdev);
 	}
+	xlnk_devpacks_delete(devpack);
+	kfree(devpack);
+	up(&xlnk_devpack_sem);
 }
 
 static void xlnk_devpacks_free_all(void)
@@ -260,7 +268,7 @@ static void xlnk_load_config_from_dt(struct platform_device *pdev)
 
 static int xlnk_probe(struct platform_device *pdev)
 {
-	int err, i;
+	int err;
 	dev_t dev = 0;
 
 	xlnk_dev_buf = NULL;
@@ -369,7 +377,6 @@ static int xlnk_allocbuf(unsigned int len, unsigned int cacheable)
 	int id;
 	void *kaddr;
 	dma_addr_t phys_addr_anchor;
-	unsigned int page_dst;
 
 	if (cacheable)
 		kaddr = dma_alloc_noncoherent(xlnk_dev,
@@ -551,56 +558,63 @@ static int xlnk_devregister(char *name, unsigned int id,
 	unsigned int i;
 	int status;
 
+	down(&xlnk_devpack_sem);
 	devpack = xlnk_devpacks_find(base);
 	if (devpack) {
 		*handle = (xlnk_intptr_type)devpack;
-		return 0;
-	}
-	nirq = 0;
-	irqptr = irqs;
+		devpack->refs++;
+		status = 0;
+	} else {
+		nirq = 0;
+		irqptr = irqs;
 
-	while (*irqptr) {
-		nirq++;
-		irqptr++;
-	}
+		while (*irqptr) {
+			nirq++;
+			irqptr++;
+		}
 
-	if (nirq > 7)
-		return -ENOMEM;
+		if (nirq > 7) {
+			up(&xlnk_devpack_sem);
+			return -ENOMEM;
+		}
 
-	nres = nirq + 1;
+		nres = nirq + 1;
 
-	devpack = kzalloc(sizeof(struct xlnk_device_pack),
-			  GFP_KERNEL);
-	devpack->io_ptr = NULL;
-	strcpy(devpack->name, name);
-	devpack->pdev.name = devpack->name;
+		devpack = kzalloc(sizeof(*devpack),
+				  GFP_KERNEL);
+		devpack->io_ptr = NULL;
+		strcpy(devpack->name, name);
+		devpack->pdev.name = devpack->name;
 
-	devpack->pdev.id = id;
+		devpack->pdev.id = id;
 
-	devpack->pdev.dev.dma_mask = &dma_mask;
-	devpack->pdev.dev.coherent_dma_mask = dma_mask;
+		devpack->pdev.dev.dma_mask = &dma_mask;
+		devpack->pdev.dev.coherent_dma_mask = dma_mask;
 
-	devpack->res[0].start = base;
-	devpack->res[0].end = base + size - 1;
-	devpack->res[0].flags = IORESOURCE_MEM;
+		devpack->res[0].start = base;
+		devpack->res[0].end = base + size - 1;
+		devpack->res[0].flags = IORESOURCE_MEM;
 
-	for (i = 0; i < nirq; i++) {
-		devpack->res[i+1].start = irqs[i];
-		devpack->res[i+1].end = irqs[i];
-		devpack->res[i+1].flags = IORESOURCE_IRQ;
-	}
+		for (i = 0; i < nirq; i++) {
+			devpack->res[i + 1].start = irqs[i];
+			devpack->res[i + 1].end = irqs[i];
+			devpack->res[i + 1].flags = IORESOURCE_IRQ;
+		}
 
-	devpack->pdev.resource = devpack->res;
-	devpack->pdev.num_resources = nres;
+		devpack->pdev.resource = devpack->res;
+		devpack->pdev.num_resources = nres;
 
-	status = platform_device_register(&devpack->pdev);
-	if (status) {
-		kfree(devpack);
-		*handle = 0;
-	} else {
-		xlnk_devpacks_add(devpack);
-		*handle = (xlnk_intptr_type)devpack;
+		status = platform_device_register(&devpack->pdev);
+		if (status) {
+			kfree(devpack);
+			*handle = 0;
+		} else {
+			xlnk_devpacks_add(devpack);
+			*handle = (xlnk_intptr_type)devpack;
+		}
 	}
+	up(&xlnk_devpack_sem);
+
 	return status;
 }
 
@@ -631,84 +645,94 @@ static int xlnk_dmaregister(char *name, unsigned int id,
 		return -EINVAL;
 	}
 
+	down(&xlnk_devpack_sem);
 	devpack = xlnk_devpacks_find(base);
 	if (devpack) {
 		*handle = (xlnk_intptr_type)devpack;
-		return 0;
-	}
-
-	devpack = kzalloc(sizeof(struct xlnk_device_pack),
-			  GFP_KERNEL);
-	if (!devpack)
-		return -ENOMEM;
-	strcpy(devpack->name, name);
-	devpack->pdev.name = "xilinx-axidma";
-	if (xlnk_config_dma_type(xlnk_config_dma_standard) &&
-	    chan0_data_width == 0 && chan1_data_width == 0) {
-		devpack->io_ptr = kzalloc(sizeof(*devpack->io_ptr),
-					  GFP_KERNEL);
-		if (!devpack->io_ptr)
-			return -EFAULT;
-		devpack->io_ptr->name = devpack->name;
-		devpack->io_ptr->version = "0.0.1";
-		devpack->io_ptr->irq = -1;
-		if (uio_register_device(xlnk_dev, devpack->io_ptr)) {
-			pr_err("UIO dummy failed to install\n");
-			return -EFAULT;
-		}
+		devpack->refs++;
+		status = 0;
 	} else {
-		devpack->io_ptr = NULL;
-	}
-
-	devpack->pdev.id = id;
+		devpack = kzalloc(sizeof(*devpack),
+				  GFP_KERNEL);
+		if (!devpack) {
+			up(&xlnk_devpack_sem);
+			return -ENOMEM;
+		}
+		strcpy(devpack->name, name);
+		devpack->pdev.name = "xilinx-axidma";
+		if (xlnk_config_dma_type(xlnk_config_dma_standard) &&
+		    chan0_data_width == 0 &&
+		    chan1_data_width == 0) {
+			devpack->io_ptr = kzalloc(sizeof(*devpack->io_ptr),
+						  GFP_KERNEL);
+			if (!devpack->io_ptr) {
+				up(&xlnk_devpack_sem);
+				return -EFAULT;
+			}
+			devpack->io_ptr->name = devpack->name;
+			devpack->io_ptr->version = "0.0.1";
+			devpack->io_ptr->irq = -1;
+			if (uio_register_device(xlnk_dev, devpack->io_ptr)) {
+				pr_err("UIO dummy failed to install\n");
+				up(&xlnk_devpack_sem);
+				return -EFAULT;
+			}
+		} else {
+			devpack->io_ptr = NULL;
+		}
 
-	devpack->dma_chan_cfg[0].include_dre = chan0_include_dre;
-	devpack->dma_chan_cfg[0].datawidth   = chan0_data_width;
-	devpack->dma_chan_cfg[0].irq = chan0_irq;
-	devpack->dma_chan_cfg[0].poll_mode   = chan0_poll_mode;
-	devpack->dma_chan_cfg[0].type =
-		(chan0_dir == XLNK_DMA_FROM_DEVICE) ?
+		devpack->pdev.id = id;
+
+		devpack->dma_chan_cfg[0].include_dre = chan0_include_dre;
+		devpack->dma_chan_cfg[0].datawidth   = chan0_data_width;
+		devpack->dma_chan_cfg[0].irq = chan0_irq;
+		devpack->dma_chan_cfg[0].poll_mode   = chan0_poll_mode;
+		devpack->dma_chan_cfg[0].type =
+			(chan0_dir == XLNK_DMA_FROM_DEVICE) ?
+				"axi-dma-s2mm-channel" :
+				"axi-dma-mm2s-channel";
+
+		if (chan_num > 1) {
+			devpack->dma_chan_cfg[1].include_dre =
+				chan1_include_dre;
+			devpack->dma_chan_cfg[1].datawidth = chan1_data_width;
+			devpack->dma_chan_cfg[1].irq = chan1_irq;
+			devpack->dma_chan_cfg[1].poll_mode = chan1_poll_mode;
+			devpack->dma_chan_cfg[1].type =
+				(chan1_dir == XLNK_DMA_FROM_DEVICE) ?
 					"axi-dma-s2mm-channel" :
 					"axi-dma-mm2s-channel";
+		}
 
-	if (chan_num > 1) {
-		devpack->dma_chan_cfg[1].include_dre = chan1_include_dre;
-		devpack->dma_chan_cfg[1].datawidth   = chan1_data_width;
-		devpack->dma_chan_cfg[1].irq = chan1_irq;
-		devpack->dma_chan_cfg[1].poll_mode   = chan1_poll_mode;
-		devpack->dma_chan_cfg[1].type =
-			(chan1_dir == XLNK_DMA_FROM_DEVICE) ?
-						"axi-dma-s2mm-channel" :
-						"axi-dma-mm2s-channel";
-	}
-
-	devpack->dma_dev_cfg.name = devpack->name;
-	devpack->dma_dev_cfg.type = "axi-dma";
-	devpack->dma_dev_cfg.include_sg = 1;
-	devpack->dma_dev_cfg.sg_include_stscntrl_strm = 1;
-	devpack->dma_dev_cfg.channel_count = chan_num;
-	devpack->dma_dev_cfg.channel_config = &devpack->dma_chan_cfg[0];
+		devpack->dma_dev_cfg.name = devpack->name;
+		devpack->dma_dev_cfg.type = "axi-dma";
+		devpack->dma_dev_cfg.include_sg = 1;
+		devpack->dma_dev_cfg.sg_include_stscntrl_strm = 1;
+		devpack->dma_dev_cfg.channel_count = chan_num;
+		devpack->dma_dev_cfg.channel_config = &devpack->dma_chan_cfg[0];
 
-	devpack->pdev.dev.platform_data = &devpack->dma_dev_cfg;
+		devpack->pdev.dev.platform_data = &devpack->dma_dev_cfg;
 
-	devpack->pdev.dev.dma_mask = &dma_mask;
-	devpack->pdev.dev.coherent_dma_mask = dma_mask;
+		devpack->pdev.dev.dma_mask = &dma_mask;
+		devpack->pdev.dev.coherent_dma_mask = dma_mask;
 
-	devpack->res[0].start = base;
-	devpack->res[0].end = base + size - 1;
-	devpack->res[0].flags = IORESOURCE_MEM;
+		devpack->res[0].start = base;
+		devpack->res[0].end = base + size - 1;
+		devpack->res[0].flags = IORESOURCE_MEM;
 
-	devpack->pdev.resource = devpack->res;
-	devpack->pdev.num_resources = 1;
-	if (xlnk_config_dma_type(xlnk_config_dma_manual))
-		status = platform_device_register(&devpack->pdev);
-	if (status) {
-		kfree(devpack);
-		*handle = 0;
-	} else {
-		xlnk_devpacks_add(devpack);
-		*handle = (xlnk_intptr_type)devpack;
+		devpack->pdev.resource = devpack->res;
+		devpack->pdev.num_resources = 1;
+		if (xlnk_config_dma_type(xlnk_config_dma_manual))
+			status = platform_device_register(&devpack->pdev);
+		if (status) {
+			kfree(devpack);
+			*handle = 0;
+		} else {
+			xlnk_devpacks_add(devpack);
+			*handle = (xlnk_intptr_type)devpack;
+		}
 	}
+	up(&xlnk_devpack_sem);
 
 #endif
 	return status;
@@ -734,9 +758,11 @@ static int xlnk_mcdmaregister(char *name, unsigned int id,
 	if (strcmp(name, "xdma"))
 		return -EINVAL;
 
-
 	devpack = xlnk_devpacks_find(base);
 	if (devpack) {
+		devpack->refs++;
+	}
+	if (devpack) {
 		*handle = (xlnk_intptr_type)devpack;
 		return 0;
 	}
@@ -807,7 +833,9 @@ static int xlnk_allocbuf_ioctl(struct file *filp, unsigned int code,
 
 	temp_args.allocbuf.id = id;
 	temp_args.allocbuf.phyaddr = (xlnk_intptr_type)(xlnk_phyaddr[id]);
-	status = copy_to_user(args, &temp_args, sizeof(union xlnk_args));
+	status = copy_to_user((void __user *)args,
+			      &temp_args,
+			      sizeof(union xlnk_args));
 
 	return status;
 }
@@ -959,9 +987,11 @@ static int xlnk_dmarequest_ioctl(struct file *filp, unsigned int code,
 		}
 		temp_args.dmarequest.dmachan = (xlnk_intptr_type)chan;
 	} else {
-		struct xdma_chan *chan =
-			xdma_request_channel(temp_args.dmarequest.name);
+		struct xdma_chan *chan;
 
+		down(&xlnk_devpack_sem);
+		chan = xdma_request_channel(temp_args.dmarequest.name);
+		up(&xlnk_devpack_sem);
 		if (!chan)
 			return -ENOMEM;
 		temp_args.dmarequest.dmachan = (xlnk_intptr_type)chan;
@@ -1211,7 +1241,6 @@ static int xlnk_dmawait_ioctl(struct file *filp, unsigned int code,
 
 #ifdef CONFIG_XILINX_DMA_APF
 	union xlnk_args temp_args;
-	struct xdma_head *dmahead;
 
 	status = copy_from_user(&temp_args, (void __user *)args,
 				sizeof(union xlnk_args));
@@ -1287,13 +1316,14 @@ static int xlnk_dmarelease_ioctl(struct file *filp, unsigned int code,
 
 	if (status)
 		return -ENOMEM;
-
+	down(&xlnk_devpack_sem);
 	if (xlnk_config_dma_type(xlnk_config_dma_standard))
 		dma_release_channel((struct dma_chan *)
 				   (temp_args.dmarelease.dmachan));
 	else
 		xdma_release_channel((struct xdma_chan *)
 				    (temp_args.dmarelease.dmachan));
+	up(&xlnk_devpack_sem);
 #endif
 
 	return status;
@@ -1404,7 +1434,8 @@ static int xlnk_cachecontrol_ioctl(struct file *filp, unsigned int code,
 {
 	union xlnk_args temp_args;
 	int status, size;
-	void *paddr, *kaddr;
+	void *kaddr;
+	xlnk_intptr_type paddr;
 	int buf_id;
 
 	if (xlnk_config_dma_type(xlnk_config_dma_standard)) {
@@ -1474,7 +1505,7 @@ static int xlnk_config_ioctl(struct file *filp, unsigned long args)
 		status = xlnk_set_config(&block);
 	} else {
 		xlnk_get_config(&block);
-		status = copy_to_user(args, &block,
+		status = copy_to_user((void __user *)args, &block,
 				      sizeof(struct xlnk_config_block));
 	}
 	return status;
-- 
1.7.5.4

