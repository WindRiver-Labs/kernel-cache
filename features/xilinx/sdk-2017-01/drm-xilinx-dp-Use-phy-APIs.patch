From 3f30beeec62e89d1253823a670b28a9c96fc341b Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Wed, 18 May 2016 11:54:35 -0700
Subject: [PATCH 0956/1566] drm: xilinx: dp: Use phy APIs

commit  e00f1853383c2bd2f753dafeac7c88c9d5e912a5 from
https://github.com/Xilinx/linux-xlnx.git

Configure the phy through generic PHY APIs.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/gpu/drm/xilinx/xilinx_drm_dp.c |   93 ++++++++++++++++++++++++++-----
 1 files changed, 78 insertions(+), 15 deletions(-)

diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_dp.c b/drivers/gpu/drm/xilinx/xilinx_drm_dp.c
index c4697de..939a239 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_dp.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_dp.c
@@ -26,6 +26,8 @@
 #include <linux/device.h>
 #include <linux/module.h>
 #include <linux/mutex.h>
+#include <linux/phy/phy.h>
+#include <linux/phy/phy-zynqmp.h>
 #include <linux/platform_device.h>
 #include <linux/pm.h>
 
@@ -229,6 +231,7 @@
 #define DP_HIGH_BIT_RATE				270000
 #define DP_HIGH_BIT_RATE2				540000
 #define DP_MAX_TRAINING_TRIES				5
+#define DP_MAX_LANES					4
 
 enum dp_version {
 	DP_V1_1A = 0x11,
@@ -306,6 +309,7 @@ struct xilinx_drm_dp {
 	struct xilinx_drm_dp_config config;
 	struct drm_dp_aux aux;
 	struct xilinx_drm_dp_sub *dp_sub;
+	struct phy *phy[DP_MAX_LANES];
 	struct clk *aclk;
 	struct clk *aud_clk;
 
@@ -313,7 +317,7 @@ struct xilinx_drm_dp {
 	u8 dpcd[DP_RECEIVER_CAP_SIZE];
 	struct xilinx_drm_dp_link_config link_config;
 	struct xilinx_drm_dp_mode mode;
-	u8 train_set[4];
+	u8 train_set[DP_MAX_LANES];
 };
 
 static inline struct xilinx_drm_dp *to_dp(struct drm_encoder *encoder)
@@ -506,15 +510,20 @@ static int xilinx_drm_dp_update_vs_emph(struct xilinx_drm_dp *dp)
 		p_level = (train_set[i] & DP_TRAIN_PRE_EMPHASIS_MASK) >>
 			  DP_TRAIN_PRE_EMPHASIS_SHIFT;
 
-		xilinx_drm_writel(dp->iomem,
-				  XILINX_DP_TX_PHY_VOLTAGE_DIFF_LANE_0 + i * 4,
-				  vs[p_level][v_level]);
-		xilinx_drm_writel(dp->iomem,
-				  XILINX_DP_TX_PHY_PRECURSOR_LANE_0 + i * 4,
-				  pe[p_level][v_level]);
-		xilinx_drm_writel(dp->iomem,
-				  XILINX_DP_TX_PHY_POSTCURSOR_LANE_0 + i * 4,
-				  0);
+		if (dp->phy[i]) {
+			xpsgtr_margining_factor(dp->phy[i], p_level, v_level);
+			xpsgtr_override_deemph(dp->phy[i], p_level, v_level);
+
+		} else {
+			u32 reg;
+
+			reg = XILINX_DP_TX_PHY_VOLTAGE_DIFF_LANE_0 + i + 4;
+			xilinx_drm_writel(dp->iomem, reg, vs[p_level][v_level]);
+			reg = XILINX_DP_TX_PHY_PRECURSOR_LANE_0 + i + 4;
+			xilinx_drm_writel(dp->iomem, reg, pe[p_level][v_level]);
+			reg = XILINX_DP_TX_PHY_POSTCURSOR_LANE_0 + i + 4;
+			xilinx_drm_writel(dp->iomem, reg, 0);
+		}
 	}
 
 	return 0;
@@ -1133,8 +1142,6 @@ static int xilinx_drm_dp_encoder_init(struct platform_device *pdev,
 
 	reg |= clock_rate / XILINX_DP_TX_CLK_DIVIDER_MHZ;
 	xilinx_drm_writel(dp->iomem, XILINX_DP_TX_CLK_DIVIDER, reg);
-	xilinx_drm_clr(dp->iomem, XILINX_DP_TX_PHY_CONFIG,
-		       XILINX_DP_TX_PHY_CONFIG_ALL_RESET);
 
 	if (dp->dp_sub)
 		xilinx_drm_writel(dp->iomem, XILINX_DP_SUB_TX_INTR_EN,
@@ -1336,7 +1343,7 @@ static int xilinx_drm_dp_probe(struct platform_device *pdev)
 {
 	struct xilinx_drm_dp *dp;
 	struct resource *res;
-	u32 version;
+	u32 version, i;
 	int irq, ret;
 
 	dp = devm_kzalloc(&pdev->dev, sizeof(*dp), GFP_KERNEL);
@@ -1390,16 +1397,54 @@ static int xilinx_drm_dp_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, dp);
 
+	xilinx_drm_writel(dp->iomem, XILINX_DP_TX_PHY_POWER_DOWN,
+			  XILINX_DP_TX_PHY_POWER_DOWN_ALL);
 	xilinx_drm_set(dp->iomem, XILINX_DP_TX_PHY_CONFIG,
 		       XILINX_DP_TX_PHY_CONFIG_ALL_RESET);
 	xilinx_drm_writel(dp->iomem, XILINX_DP_TX_FORCE_SCRAMBLER_RESET, 1);
 	xilinx_drm_writel(dp->iomem, XILINX_DP_TX_ENABLE, 0);
-	if (dp->dp_sub)
+
+	if (dp->dp_sub) {
+		for (i = 0; i < dp->config.max_lanes; i++) {
+			char phy_name[16];
+
+			snprintf(phy_name, sizeof(phy_name), "dp-phy%d", i);
+			dp->phy[i] = devm_phy_get(dp->dev, phy_name);
+			if (IS_ERR(dp->phy[i])) {
+				dev_err(dp->dev, "failed to get phy lane\n");
+				ret = PTR_ERR(dp->phy[i]);
+				goto error_dp_sub;
+			}
+
+			ret = phy_init(dp->phy[i]);
+			if (ret) {
+				dev_err(dp->dev,
+					"failed to init phy lane %d\n", i);
+				goto error_dp_sub;
+			}
+		}
+
 		xilinx_drm_writel(dp->iomem, XILINX_DP_SUB_TX_INTR_DS,
 				  XILINX_DP_TX_INTR_ALL);
-	else
+		xilinx_drm_clr(dp->iomem, XILINX_DP_TX_PHY_CONFIG,
+			       XILINX_DP_TX_PHY_CONFIG_ALL_RESET);
+		xilinx_drm_writel(dp->iomem, XILINX_DP_TX_PHY_POWER_DOWN, 0);
+
+		/* Wait for PLL to be locked for the primary (1st) */
+		if (dp->phy[0]) {
+			ret = xpsgtr_wait_pll_lock(dp->phy[0]);
+			if (ret) {
+				dev_err(dp->dev, "failed to lock pll\n");
+				goto error_dp_sub;
+			}
+		}
+	} else {
 		xilinx_drm_writel(dp->iomem, XILINX_DP_TX_INTR_MASK,
 				  XILINX_DP_TX_INTR_ALL);
+		xilinx_drm_clr(dp->iomem, XILINX_DP_TX_PHY_CONFIG,
+				XILINX_DP_TX_PHY_CONFIG_ALL_RESET);
+		xilinx_drm_writel(dp->iomem, XILINX_DP_TX_PHY_POWER_DOWN, 0);
+	}
 
 	dp->aux.name = "Xilinx DP AUX";
 	dp->aux.dev = dp->dev;
@@ -1452,6 +1497,14 @@ static int xilinx_drm_dp_probe(struct platform_device *pdev)
 error:
 	drm_dp_aux_unregister(&dp->aux);
 error_dp_sub:
+	if (dp->dp_sub) {
+		for (i = 0; i < dp->config.max_lanes; i++) {
+			if (dp->phy[i]) {
+				phy_exit(dp->phy[i]);
+				dp->phy[i] = NULL;
+			}
+		}
+	}
 	xilinx_drm_dp_sub_put(dp->dp_sub);
 error_aud_clk:
 	if (dp->aud_clk)
@@ -1464,11 +1517,21 @@ error_aclk:
 static int xilinx_drm_dp_remove(struct platform_device *pdev)
 {
 	struct xilinx_drm_dp *dp = platform_get_drvdata(pdev);
+	unsigned int i;
 
 	xilinx_drm_writel(dp->iomem, XILINX_DP_TX_ENABLE, 0);
 
 	drm_dp_aux_unregister(&dp->aux);
 
+	if (dp->dp_sub) {
+		for (i = 0; i < dp->config.max_lanes; i++) {
+			if (dp->phy[i]) {
+				phy_exit(dp->phy[i]);
+				dp->phy[i] = NULL;
+			}
+		}
+	}
+
 	xilinx_drm_dp_sub_put(dp->dp_sub);
 
 	if (dp->aud_clk)
-- 
1.7.5.4

