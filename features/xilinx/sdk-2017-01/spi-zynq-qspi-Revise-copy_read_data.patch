From bc1e5091f873da2d03c9e58683f8b84874b06d79 Mon Sep 17 00:00:00 2001
From: Thomas Betker <thomas.betker@rohde-schwarz.com>
Date: Tue, 19 May 2015 07:25:50 +0200
Subject: [PATCH 0533/1566] spi: zynq-qspi: Revise copy_read_data

Combine zynq_qspi_copy_read_data() with reading the RxFIFO register, in
analogy to the Tx path; rename the function to zynq_qspi_read_rx_fifo().

The new function reads the RXD register and copies the data to
xqspi->rxbuf. It also handles the pad byte in the dual-parallel case.

This is just a cleanup; the control flow is not affected

Signed-off-by: Thomas Betker <thomas.betker@rohde-schwarz.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Reviewed-by: Harini Katakam <harinik@xilinx.com>
---
 drivers/spi/spi-zynq-qspi.c |   16 +++++++++-------
 1 files changed, 9 insertions(+), 7 deletions(-)

diff --git a/drivers/spi/spi-zynq-qspi.c b/drivers/spi/spi-zynq-qspi.c
index 152ccc3..8748d80 100644
--- a/drivers/spi/spi-zynq-qspi.c
+++ b/drivers/spi/spi-zynq-qspi.c
@@ -234,17 +234,20 @@ static void zynq_qspi_init_hw(struct zynq_qspi *xqspi)
 }
 
 /**
- * zynq_qspi_copy_read_data - Copy data to RX buffer
+ * zynq_qspi_read_rx_fifo - Read 1..4 bytes from RxFIFO to RX buffer
  * @xqspi:	Pointer to the zynq_qspi structure
- * @data:	The 32 bit variable where data is stored
- * @size:	Number of bytes to be copied from data to RX buffer
+ * @size:	Number of bytes to be read (1..4)
  *
  * Note: In case of dual parallel connection, even number of bytes are read
  * when odd bytes are requested to avoid transfer of a nibble to each flash.
  * The receive buffer though, is populated with the number of bytes requested.
  */
-static void zynq_qspi_copy_read_data(struct zynq_qspi *xqspi, u32 data, u8 size)
+static void zynq_qspi_read_rx_fifo(struct zynq_qspi *xqspi, unsigned size)
 {
+	u32 data;
+
+	data = zynq_qspi_read(xqspi, ZYNQ_QSPI_RXD_OFFSET);
+
 	if (xqspi->rxbuf) {
 		if (!xqspi->is_dual || xqspi->is_instr) {
 			memcpy(xqspi->rxbuf, ((u8 *) &data) + 4 - size, size);
@@ -258,6 +261,7 @@ static void zynq_qspi_copy_read_data(struct zynq_qspi *xqspi, u32 data, u8 size)
 			xqspi->rxbuf += len;
 		}
 	}
+
 	xqspi->bytes_to_receive -= size;
 	if (xqspi->bytes_to_receive < 0)
 		xqspi->bytes_to_receive = 0;
@@ -540,9 +544,7 @@ static irqreturn_t zynq_qspi_irq(int irq, void *dev_id)
 				}
 				xqspi->bytes_to_receive -= 4;
 			} else {
-				data = zynq_qspi_read(xqspi,
-						      ZYNQ_QSPI_RXD_OFFSET);
-				zynq_qspi_copy_read_data(xqspi, data,
+				zynq_qspi_read_rx_fifo(xqspi,
 						xqspi->bytes_to_receive);
 			}
 			rxindex++;
-- 
1.7.5.4

