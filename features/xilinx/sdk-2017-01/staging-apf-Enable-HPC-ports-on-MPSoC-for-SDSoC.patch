From 3441df88334112b841f060b5c71dba35f588f6f8 Mon Sep 17 00:00:00 2001
From: Michael Gill <michael.gill@xilinx.com>
Date: Thu, 2 Feb 2017 09:59:08 -0800
Subject: [PATCH 1254/1566] staging: apf: Enable HPC ports on MPSoC for SDSoC

commit  712fed3371f3769aa4e25f671d04d688aeb7d387 from
https://github.com/Xilinx/linux-xlnx.git

This patch is to enable HPC ports on all SDSoC datamovers.

Signed-off-by: Michael Gill <gill@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/apf/xlnk-ioctl.h |    5 +-
 drivers/staging/apf/xlnk.c       |  179 +++++++++++++++++++++++++++++---------
 drivers/staging/apf/xlnk.h       |   12 +++-
 3 files changed, 151 insertions(+), 45 deletions(-)

diff --git a/drivers/staging/apf/xlnk-ioctl.h b/drivers/staging/apf/xlnk-ioctl.h
index 0cf8151..1b9ef93 100644
--- a/drivers/staging/apf/xlnk-ioctl.h
+++ b/drivers/staging/apf/xlnk-ioctl.h
@@ -17,10 +17,7 @@
 #define XLNK_IOCDMAWAIT		_IOWR(XLNK_IOC_MAGIC, 9, unsigned long)
 #define XLNK_IOCDMARELEASE	_IOWR(XLNK_IOC_MAGIC, 10, unsigned long)
 
-
-
-
-
+#define XLNK_IOCMEMOP		_IOWR(XLNK_IOC_MAGIC, 25, unsigned long)
 #define XLNK_IOCDEVREGISTER	_IOWR(XLNK_IOC_MAGIC, 16, unsigned long)
 #define XLNK_IOCDMAREGISTER	_IOWR(XLNK_IOC_MAGIC, 17, unsigned long)
 #define XLNK_IOCDEVUNREGISTER	_IOWR(XLNK_IOC_MAGIC, 18, unsigned long)
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index d8d541f..2d654be 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -92,6 +92,7 @@ static unsigned int xlnk_bufpool_size = XLNK_BUF_POOL_SIZE;
 static void *xlnk_bufpool[XLNK_BUF_POOL_SIZE];
 static void *xlnk_bufpool_alloc_point[XLNK_BUF_POOL_SIZE];
 static xlnk_intptr_type xlnk_userbuf[XLNK_BUF_POOL_SIZE];
+static int xlnk_buf_process[XLNK_BUF_POOL_SIZE];
 static dma_addr_t xlnk_phyaddr[XLNK_BUF_POOL_SIZE];
 static size_t xlnk_buflen[XLNK_BUF_POOL_SIZE];
 static unsigned int xlnk_bufcacheable[XLNK_BUF_POOL_SIZE];
@@ -368,6 +369,21 @@ static int xlnk_buf_find_by_phys_addr(xlnk_intptr_type addr)
 	return 0;
 }
 
+static int xlnk_buf_find_by_user_addr(xlnk_intptr_type addr, int pid)
+{
+	int i;
+
+	for (i = 1; i < xlnk_bufpool_size; i++) {
+		if (xlnk_bufpool[i] &&
+		    xlnk_buf_process[i] == pid &&
+		    xlnk_userbuf[i] <= addr &&
+		    xlnk_userbuf[i] + xlnk_buflen[i] > addr)
+			return i;
+	}
+
+	return 0;
+}
+
 /**
  * allocate and return an id
  * id must be a positve number
@@ -1511,13 +1527,110 @@ static int xlnk_config_ioctl(struct file *filp, unsigned long args)
 	return status;
 }
 
-/* This function provides IO interface to the bridge driver. */
-static long xlnk_ioctl(struct file *filp, unsigned int code,
-			 unsigned long args)
+static int xlnk_memop_ioctl(struct file *filp, unsigned long arg_addr)
 {
+	union xlnk_args args;
+	xlnk_intptr_type p_addr;
 	int status = 0;
+	int buf_id;
+	int cacheable;
+	void *k_addr;
+	enum dma_data_direction dmadir;
+	xlnk_intptr_type page_id;
+	unsigned int page_offset;
+	struct scatterlist sg;
+	DEFINE_DMA_ATTRS(attrs);
+
+	status = copy_from_user(&args,
+				(void __user *)arg_addr,
+				sizeof(union xlnk_args));
+
+	if (status) {
+		pr_err("Error in copy_from_user.  status = %d\n", status);
+		return status;
+	}
+
+	if (!(args.memop.flags & XLNK_FLAG_MEM_ACQUIRE) &&
+	    !(args.memop.flags & XLNK_FLAG_MEM_RELEASE)) {
+		pr_err("memop lacks acquire or release flag\n");
+		return -EINVAL;
+	}
+
+	if (args.memop.flags & XLNK_FLAG_MEM_ACQUIRE &&
+	    args.memop.flags & XLNK_FLAG_MEM_RELEASE) {
+		pr_err("memop has both acquire and release defined\n");
+		return -EINVAL;
+	}
 
+	spin_lock(&xlnk_buf_lock);
+	buf_id = xlnk_buf_find_by_user_addr(args.memop.virt_addr,
+					    current->pid);
+	if (buf_id > 0) {
+		cacheable = xlnk_bufcacheable[buf_id];
+		k_addr = xlnk_bufpool[buf_id] +
+			(args.memop.virt_addr - xlnk_userbuf[buf_id]);
+		p_addr = xlnk_phyaddr[buf_id] +
+			(args.memop.virt_addr - xlnk_userbuf[buf_id]);
+	}
+	spin_unlock(&xlnk_buf_lock);
+
+	if (buf_id <= 0) {
+		pr_err("Error, buffer not found\n");
+		return -EINVAL;
+	}
+
+	dmadir = (enum dma_data_direction)args.memop.dir;
 
+	if (args.memop.flags & XLNK_FLAG_COHERENT || !cacheable) {
+		pr_err("Skipping flush.  cacheable=%d, flags = %d\n",
+		       cacheable,
+		       args.memop.flags);
+		dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
+	}
+
+	page_id = p_addr >> PAGE_SHIFT;
+	page_offset = p_addr - (page_id << PAGE_SHIFT);
+	sg_init_table(&sg, 1);
+	sg_set_page(&sg, pfn_to_page(page_id), args.memop.size, page_offset);
+	sg_dma_len(&sg) = args.memop.size;
+
+	if (args.memop.flags & XLNK_FLAG_MEM_ACQUIRE) {
+		status = get_dma_ops(xlnk_dev)->map_sg(xlnk_dev,
+						       &sg,
+						       1,
+						       dmadir,
+						       &attrs);
+		if (!status) {
+			pr_err("Failed to map address\n");
+			return -EINVAL;
+		}
+		args.memop.phys_addr = (xlnk_intptr_type)sg_dma_address(&sg);
+		args.memop.token = (xlnk_intptr_type)sg_dma_address(&sg);
+		status = copy_to_user((void __user *)arg_addr,
+				      &args,
+				      sizeof(union xlnk_args));
+		if (status) {
+			pr_err("Error in copy_to_user.  status = %d\n",
+			       status);
+		}
+	} else {
+		sg_dma_address(&sg) = (dma_addr_t)args.memop.token;
+		sg_dma_len(&sg) = args.memop.size;
+		get_dma_ops(xlnk_dev)->unmap_sg(xlnk_dev,
+						&sg,
+						1,
+						dmadir,
+						&attrs);
+	}
+
+	return status;
+}
+
+/* This function provides IO interface to the bridge driver. */
+static long xlnk_ioctl(struct file *filp,
+		       unsigned int code,
+		       unsigned long args)
+{
 	if (_IOC_TYPE(code) != XLNK_IOC_MAGIC)
 		return -ENOTTY;
 	if (_IOC_NR(code) > XLNK_IOC_MAXNR)
@@ -1526,58 +1639,43 @@ static long xlnk_ioctl(struct file *filp, unsigned int code,
 	/* some sanity check */
 	switch (code) {
 	case XLNK_IOCALLOCBUF:
-		status = xlnk_allocbuf_ioctl(filp, code, args);
-		break;
+		return xlnk_allocbuf_ioctl(filp, code, args);
 	case XLNK_IOCFREEBUF:
-		status = xlnk_freebuf_ioctl(filp, code, args);
-		break;
+		return xlnk_freebuf_ioctl(filp, code, args);
 	case XLNK_IOCADDDMABUF:
-		status = xlnk_adddmabuf_ioctl(filp, code, args);
-		break;
+		return xlnk_adddmabuf_ioctl(filp, code, args);
 	case XLNK_IOCCLEARDMABUF:
-		status = xlnk_cleardmabuf_ioctl(filp, code, args);
-		break;
+		return xlnk_cleardmabuf_ioctl(filp, code, args);
 	case XLNK_IOCDMAREQUEST:
-		status = xlnk_dmarequest_ioctl(filp, code, args);
-		break;
+		return xlnk_dmarequest_ioctl(filp, code, args);
 	case XLNK_IOCDMASUBMIT:
-		status = xlnk_dmasubmit_ioctl(filp, code, args);
-		break;
+		return xlnk_dmasubmit_ioctl(filp, code, args);
 	case XLNK_IOCDMAWAIT:
-		status = xlnk_dmawait_ioctl(filp, code, args);
-		break;
+		return xlnk_dmawait_ioctl(filp, code, args);
 	case XLNK_IOCDMARELEASE:
-		status = xlnk_dmarelease_ioctl(filp, code, args);
-		break;
+		return xlnk_dmarelease_ioctl(filp, code, args);
 	case XLNK_IOCDEVREGISTER:
-		status = xlnk_devregister_ioctl(filp, code, args);
-		break;
+		return xlnk_devregister_ioctl(filp, code, args);
 	case XLNK_IOCDMAREGISTER:
-		status = xlnk_dmaregister_ioctl(filp, code, args);
-		break;
+		return xlnk_dmaregister_ioctl(filp, code, args);
 	case XLNK_IOCMCDMAREGISTER:
-		status = xlnk_mcdmaregister_ioctl(filp, code, args);
-		break;
+		return xlnk_mcdmaregister_ioctl(filp, code, args);
 	case XLNK_IOCDEVUNREGISTER:
-		status = xlnk_devunregister_ioctl(filp, code, args);
-		break;
+		return xlnk_devunregister_ioctl(filp, code, args);
 	case XLNK_IOCCACHECTRL:
-		status = xlnk_cachecontrol_ioctl(filp, code, args);
-		break;
+		return xlnk_cachecontrol_ioctl(filp, code, args);
 	case XLNK_IOCSHUTDOWN:
-		status = xlnk_shutdown(args);
-		break;
-	case XLNK_IOCRECRES: /* recover resource */
-		status = xlnk_recover_resource(args);
-		break;
+		return xlnk_shutdown(args);
+	case XLNK_IOCRECRES:
+		return xlnk_recover_resource(args);
 	case XLNK_IOCCONFIG:
-		status = xlnk_config_ioctl(filp, args);
-		break;
+		return xlnk_config_ioctl(filp, args);
+	case XLNK_IOCMEMOP:
+		return xlnk_memop_ioctl(filp, args);
 	default:
-		status = -EINVAL;
+		pr_err("%s:Unrecognized ioctl code%u\n", __func__, code);
+		return -EINVAL;
 	}
-
-	return status;
 }
 
 static struct vm_operations_struct xlnk_vm_ops = {
@@ -1625,8 +1723,9 @@ static int xlnk_mmap(struct file *filp, struct vm_area_struct *vma)
 						 >> PAGE_SHIFT,
 						 vma->vm_end - vma->vm_start,
 						 vma->vm_page_prot);
+			xlnk_userbuf[bufid] = vma->vm_start;
+			xlnk_buf_process[bufid] = current->pid;
 		}
-
 	}
 	if (status) {
 		pr_err("xlnk_mmap failed with code %d\n", EAGAIN);
diff --git a/drivers/staging/apf/xlnk.h b/drivers/staging/apf/xlnk.h
index 637d8b6..2042e05 100644
--- a/drivers/staging/apf/xlnk.h
+++ b/drivers/staging/apf/xlnk.h
@@ -9,9 +9,11 @@
 #define XLNK_FLAG_COHERENT		0x00000001
 #define XLNK_FLAG_KERNEL_BUFFER		0x00000002
 #define XLNK_FLAG_DMAPOLLING		0x00000004
+#define XLNK_FLAG_IOMMU_VALID		0x00000008
 #define XLNK_FLAG_PHYSICAL_ADDR		0x00000100
 #define XLNK_FLAG_VIRTUAL_ADDR		0x00000200
-
+#define XLNK_FLAG_MEM_ACQUIRE		0x00001000
+#define XLNK_FLAG_MEM_RELEASE		0x00002000
 #define CF_FLAG_CACHE_FLUSH_INVALIDATE	0x00000001
 #define CF_FLAG_PHYSICALLY_CONTIGUOUS	0x00000002
 #define CF_FLAG_DMAPOLLING		0x00000004
@@ -144,6 +146,14 @@ union xlnk_args {
 		xlnk_uint_type size;
 		xlnk_int_type action;
 	} cachecontrol;
+	struct __attribute__ ((__packed__)) {
+		xlnk_intptr_type virt_addr;
+		xlnk_int_type size;
+		xlnk_enum_type dir;
+		xlnk_int_type flags;
+		xlnk_intptr_type phys_addr;
+		xlnk_intptr_type token;
+	} memop;
 };
 
 #endif
-- 
1.7.5.4

