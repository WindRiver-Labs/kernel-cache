From 840ae6e2c26bc03f673d5f6bab366b0d0472551a Mon Sep 17 00:00:00 2001
From: Michael Gill <michael.gill@xilinx.com>
Date: Mon, 11 Apr 2016 22:48:10 -0700
Subject: [PATCH 0890/1566] staging: apf: Introductory MPSoC support

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Code has been moved to compile under 64-bit and 32-bit.
MPSoC cache flushing now supported.  Additionally, ioctl
arguments have been moved to a data-width stable
form, and correct data widths have been used throughout.
This is the first MPSoC supporting patch

Signed-off-by: Michael Gill <gill@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 322334a1d1a21affb00553c5817a3d7a0e74c3d1)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c |   33 +++++-
 drivers/staging/apf/xilinx-dma-apf.h |   28 +++--
 drivers/staging/apf/xlnk-sysdef.h    |   34 ++++++
 drivers/staging/apf/xlnk.c           |   60 +++++++----
 drivers/staging/apf/xlnk.h           |  189 ++++++++++++++++++----------------
 5 files changed, 217 insertions(+), 127 deletions(-)
 create mode 100644 drivers/staging/apf/xlnk-sysdef.h

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index 06363cc..708cdc9 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -51,6 +51,8 @@ static LIST_HEAD(dma_device_list);
 #define DMA_OUT(addr, val)      (iowrite32(val, addr))
 #define DMA_IN(addr)            (ioread32(addr))
 
+#define GET_LOW(x) ((u32)((x) & 0xFFFFFFFF))
+#define GET_HI(x) ((u32)((x) / 0x100000000))
 
 static int unpin_user_pages(struct scatterlist *sglist, unsigned int cnt);
 /* Driver functions */
@@ -365,12 +367,21 @@ static void xdma_start_transfer(struct xdma_chan *chan,
 					sizeof(struct xdma_desc_hw));
 	/* If hardware is busy, move the tail & return */
 	if (dma_is_running(chan) || dma_is_idle(chan)) {
-		/* Update tail ptr register and start the transfer */
+#if XLNK_SYS_BIT_WIDTH == 32
 		DMA_OUT(&chan->regs->tdr, tail_phys);
+#else
+		DMA_OUT(&chan->regs->tdr, GET_LOW(tail_phys));
+		DMA_OUT(&chan->regs->tdr_hi, GET_HI(tail_phys));
+#endif
 		return;
 	}
 
+#if XLNK_SYS_BIT_WIDTH == 32
 	DMA_OUT(&chan->regs->cdr, cur_phys);
+#else
+	DMA_OUT(&chan->regs->cdr, GET_LOW(cur_phys));
+	DMA_OUT(&chan->regs->cdr_hi, GET_HI(cur_phys));
+#endif
 
 	dma_start(chan);
 
@@ -381,7 +392,12 @@ static void xdma_start_transfer(struct xdma_chan *chan,
 	DMA_OUT(&chan->regs->cr, regval);
 
 	/* Update tail ptr register and start the transfer */
+#if XLNK_SYS_BIT_WIDTH == 32
 	DMA_OUT(&chan->regs->tdr, tail_phys);
+#else
+	DMA_OUT(&chan->regs->tdr, GET_LOW(tail_phys));
+	DMA_OUT(&chan->regs->tdr_hi, GET_HI(tail_phys));
+#endif
 }
 
 static int xdma_setup_hw_desc(struct xdma_chan *chan,
@@ -481,7 +497,7 @@ static int xdma_setup_hw_desc(struct xdma_chan *chan,
 		goto out_unlock;
 	}
 
-	bd->dmahead = (u32) dmahead;
+	bd->dmahead = (xlnk_intptr_type) dmahead;
 	bd->sw_flag = chan->poll_mode ? XDMA_BD_SF_POLL_MODE_MASK : 0;
 	dmahead->last_bd_index = end_index2;
 
@@ -797,6 +813,10 @@ int xdma_submit(struct xdma_chan *chan,
 	dmadir = chan->direction;
 	if (dp) {
 		if (!dp->is_mapped) {
+#if XLNK_SYS_BIT_WIDTH == 64
+			return -EINVAL;
+#else
+
 			dp->dbuf_attach = dma_buf_attach(dp->dbuf, chan->dev);
 			dp->dbuf_sg_table = dma_buf_map_attachment(
 				dp->dbuf_attach, chan->direction);
@@ -807,6 +827,7 @@ int xdma_submit(struct xdma_chan *chan,
 				return -EINVAL;
 			}
 			dp->is_mapped = 1;
+#endif
 		}
 
 		sglist_dma = dp->dbuf_sg_table->sgl;
@@ -829,6 +850,7 @@ int xdma_submit(struct xdma_chan *chan,
 		sgcnt_dma = sgcnt;
 		if (user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE) {
 			void *kaddr = phys_to_virt((phys_addr_t)userbuf);
+#if XLNK_SYS_BIT_WIDTH == 32
 			__cpuc_flush_dcache_area(kaddr, size);
 			outer_clean_range((phys_addr_t)userbuf,
 					  (u32)userbuf + size);
@@ -836,6 +858,9 @@ int xdma_submit(struct xdma_chan *chan,
 				outer_inv_range((phys_addr_t)userbuf,
 						(u32)userbuf + size);
 			}
+#else
+			__dma_map_area(kaddr, size, dmadir);
+#endif
 		}
 	} else {
 		/* pin user pages is monitored separately */
@@ -997,7 +1022,7 @@ static int xdma_probe(struct platform_device *pdev)
 	struct resource *res;
 	int err, i, j;
 	struct xdma_chan *chan;
-	struct dma_device_config *dma_config;
+	struct xdma_device_config *dma_config;
 	int dma_chan_dir;
 	int dma_chan_reg_offset;
 
@@ -1012,7 +1037,7 @@ static int xdma_probe(struct platform_device *pdev)
 	}
 	xdev->dev = &(pdev->dev);
 
-	dma_config = (struct dma_device_config *)xdev->dev->platform_data;
+	dma_config = (struct xdma_device_config *)xdev->dev->platform_data;
 	if (dma_config->channel_count < 1 || dma_config->channel_count > 2)
 		return -EFAULT;
 
diff --git a/drivers/staging/apf/xilinx-dma-apf.h b/drivers/staging/apf/xilinx-dma-apf.h
index 65c9463..cd90d32 100644
--- a/drivers/staging/apf/xilinx-dma-apf.h
+++ b/drivers/staging/apf/xilinx-dma-apf.h
@@ -24,6 +24,7 @@
 
 /* xlnk structures */
 #include "xlnk.h"
+#include "xlnk-sysdef.h"
 
 #define XDMA_IOC_MAGIC 'X'
 #define XDMA_IOCRESET		_IO(XDMA_IOC_MAGIC, 0)
@@ -96,7 +97,7 @@
 #define XDMA_BD_CLEANUP_THRESHOLD	((XDMA_MAX_BD_CNT * 8) / 10)
 
 /* Platform data definition until ARM supports device tree */
-struct dma_channel_config {
+struct xdma_channel_config {
 	char *type;
 	unsigned int include_dre;
 	unsigned int datawidth;
@@ -105,27 +106,34 @@ struct dma_channel_config {
 	unsigned int poll_mode;
 	unsigned int lite_mode;
 };
-struct dma_device_config {
+
+struct xdma_device_config {
 	char *type;
 	char *name;
 	unsigned int include_sg;
 	unsigned int sg_include_stscntrl_strm;  /* dma only */
 	unsigned int channel_count;
-	struct dma_channel_config *channel_config;
+	struct xdma_channel_config *channel_config;
 };
 
 struct xdma_desc_hw {
-	u32 next_desc;	/* 0x00 */
+	xlnk_intptr_type next_desc;	/* 0x00 */
+#if XLNK_SYS_BIT_WIDTH == 32
 	u32 pad1;       /* 0x04 */
-	u32 src_addr;   /* 0x08 */
+#endif
+	xlnk_intptr_type src_addr;   /* 0x08 */
+#if XLNK_SYS_BIT_WIDTH == 32
 	u32 pad2;       /* 0x0c */
+#endif
 	u32 addr_vsize; /* 0x10 */
 	u32 hsize;       /* 0x14 */
 	u32 control;    /* 0x18 */
 	u32 status;     /* 0x1c */
 	u32 app[5];      /* 0x20 */
-	u32 dmahead;
+	xlnk_intptr_type dmahead;
+#if XLNK_SYS_BIT_WIDTH == 32
 	u32 Reserved0;
+#endif
 	u32 sw_flag;	/* 0x3C */
 } __aligned(64);
 
@@ -134,13 +142,13 @@ struct xdma_regs {
 	u32 cr;        /* 0x00 Control Register */
 	u32 sr;        /* 0x04 Status Register */
 	u32 cdr;       /* 0x08 Current Descriptor Register */
-	u32 pad1;
+	u32 cdr_hi;
 	u32 tdr;       /* 0x10 Tail Descriptor Register */
-	u32 pad2;
+	u32 tdr_hi;
 	u32 src;       /* 0x18 Source Address Register (cdma) */
-	u32 pad3;
+	u32 src_hi;
 	u32 dst;       /* 0x20 Destination Address Register (cdma) */
-	u32 pad4;
+	u32 dst_hi;
 	u32 btt_ref;   /* 0x28 Bytes To Transfer (cdma) or
 					park_ref (vdma) */
 	u32 version;   /* 0x2c version (vdma) */
diff --git a/drivers/staging/apf/xlnk-sysdef.h b/drivers/staging/apf/xlnk-sysdef.h
new file mode 100644
index 0000000..5a6b512
--- /dev/null
+++ b/drivers/staging/apf/xlnk-sysdef.h
@@ -0,0 +1,34 @@
+#ifndef XLNK_SYSDEF_H
+#define XLNK_SYSDEF_H
+
+#if __SIZEOF_POINTER__  == 4
+	#define XLNK_SYS_BIT_WIDTH 32
+#elif __SIZEOF_POINTER__  == 8
+	#define XLNK_SYS_BIT_WIDTH 64
+#endif
+
+#include <linux/types.h>
+
+#if XLNK_SYS_BIT_WIDTH == 32
+
+	typedef __aligned(4) u32 xlnk_intptr_type;
+	typedef __aligned(4) s32 xlnk_int_type;
+	typedef __aligned(4) u32 xlnk_uint_type;
+	typedef u8 xlnk_byte_type;
+	typedef s8 xlnk_char_type;
+	#define xlnk_enum_type __aligned(4) s32
+
+#elif XLNK_SYS_BIT_WIDTH == 64
+
+	typedef __aligned(8) u64 xlnk_intptr_type;
+	typedef __aligned(4) s32 xlnk_int_type;
+	typedef __aligned(4) u32 xlnk_uint_type;
+	typedef u8 xlnk_byte_type;
+	typedef s8 xlnk_char_type;
+	#define xlnk_enum_type __aligned(4) s32
+
+#else
+	#error "Please define application bit width and system bit width"
+#endif
+
+#endif
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index 2c6c368..1080535 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -49,6 +49,7 @@
 #include <asm/cacheflush.h>
 
 #include "xlnk-ioctl.h"
+#include "xlnk-sysdef.h"
 #include "xlnk.h"
 
 #ifdef CONFIG_XILINX_DMA_APF
@@ -87,10 +88,10 @@ static int xlnk_dev_vmas;
 static unsigned int xlnk_bufpool_size = XLNK_BUF_POOL_SIZE;
 static void *xlnk_bufpool[XLNK_BUF_POOL_SIZE];
 static void *xlnk_bufpool_alloc_point[XLNK_BUF_POOL_SIZE];
-static unsigned int xlnk_userbuf[XLNK_BUF_POOL_SIZE];
+static xlnk_intptr_type xlnk_userbuf[XLNK_BUF_POOL_SIZE];
 static dma_addr_t xlnk_phyaddr[XLNK_BUF_POOL_SIZE];
 static size_t xlnk_buflen[XLNK_BUF_POOL_SIZE];
-static unsigned int  xlnk_bufcacheable[XLNK_BUF_POOL_SIZE];
+static unsigned int xlnk_bufcacheable[XLNK_BUF_POOL_SIZE];
 
 static int xlnk_open(struct inode *ip, struct file *filp);  /* Open */
 static int xlnk_release(struct inode *ip, struct file *filp);   /* Release */
@@ -128,8 +129,8 @@ struct xlnk_device_pack {
 	struct resource res[8];
 
 #ifdef CONFIG_XILINX_DMA_APF
-	struct dma_channel_config dma_chan_cfg[4];  /* for xidane dma only */
-	struct dma_device_config dma_dev_cfg;	   /* for xidane dma only */
+	struct xdma_channel_config dma_chan_cfg[4];  /* for xidane dma only */
+	struct xdma_device_config dma_dev_cfg;	   /* for xidane dma only */
 #endif
 
 #ifdef CONFIG_XILINX_MCDMA
@@ -538,7 +539,7 @@ static int xlnk_release(struct inode *ip, struct file *filp)
 static int xlnk_devregister(char *name, unsigned int id,
 				unsigned long base, unsigned int size,
 				unsigned int *irqs,
-				u32 *handle)
+				xlnk_intptr_type *handle)
 {
 	unsigned int nres;
 	unsigned int nirq;
@@ -549,7 +550,7 @@ static int xlnk_devregister(char *name, unsigned int id,
 
 	devpack = xlnk_devpacks_find(base);
 	if (devpack) {
-		*handle = (u32)devpack;
+		*handle = (xlnk_intptr_type)devpack;
 		return 0;
 	}
 	nirq = 0;
@@ -594,7 +595,7 @@ static int xlnk_devregister(char *name, unsigned int id,
 		*handle = 0;
 	} else {
 		xlnk_devpacks_add(devpack);
-		*handle = (u32)devpack;
+		*handle = (xlnk_intptr_type)devpack;
 	}
 	return status;
 }
@@ -612,7 +613,7 @@ static int xlnk_dmaregister(char *name, unsigned int id,
 				unsigned int chan1_poll_mode,
 				unsigned int chan1_include_dre,
 				unsigned int chan1_data_width,
-				u32 *handle)
+				xlnk_intptr_type *handle)
 {
 	int status = -1;
 
@@ -628,7 +629,7 @@ static int xlnk_dmaregister(char *name, unsigned int id,
 
 	devpack = xlnk_devpacks_find(base);
 	if (devpack) {
-		*handle = (u32)devpack;
+		*handle = (xlnk_intptr_type)devpack;
 		return 0;
 	}
 
@@ -686,7 +687,7 @@ static int xlnk_dmaregister(char *name, unsigned int id,
 		*handle = 0;
 	} else {
 		xlnk_devpacks_add(devpack);
-		*handle = (u32)devpack;
+		*handle = (xlnk_intptr_type)devpack;
 	}
 
 #endif
@@ -699,7 +700,7 @@ static int xlnk_mcdmaregister(char *name, unsigned int id,
 			      unsigned int mm2s_chan_irq,
 			      unsigned int s2mm_chan_num,
 			      unsigned int s2mm_chan_irq,
-			      u32 *handle)
+			      xlnk_intptr_type *handle)
 {
 	int status = -1;
 
@@ -712,7 +713,7 @@ static int xlnk_mcdmaregister(char *name, unsigned int id,
 
 	devpack = xlnk_devpacks_find(base);
 	if (devpack) {
-		*handle = (u32)devpack;
+		*handle = (xlnk_intptr_type)devpack;
 		return 0;
 	}
 
@@ -752,7 +753,7 @@ static int xlnk_mcdmaregister(char *name, unsigned int id,
 		*handle = 0;
 	} else {
 		xlnk_devpacks_add(devpack);
-		*handle = (u32)devpack;
+		*handle = (xlnk_intptr_type)devpack;
 	}
 
 #endif
@@ -766,7 +767,7 @@ static int xlnk_allocbuf_ioctl(struct file *filp, unsigned int code,
 
 	union xlnk_args temp_args;
 	int status;
-	int id;
+	xlnk_intptr_type id;
 
 	status = copy_from_user(&temp_args, (void __user *)args,
 				sizeof(union xlnk_args));
@@ -781,7 +782,7 @@ static int xlnk_allocbuf_ioctl(struct file *filp, unsigned int code,
 		return -ENOMEM;
 
 	temp_args.allocbuf.id = id;
-	temp_args.allocbuf.phyaddr = xlnk_phyaddr[id];
+	temp_args.allocbuf.phyaddr = (xlnk_intptr_type)(xlnk_phyaddr[id]);
 	status = copy_to_user(args, &temp_args, sizeof(union xlnk_args));
 
 	return status;
@@ -833,6 +834,9 @@ static int xlnk_freebuf_ioctl(struct file *filp, unsigned int code,
 static int xlnk_adddmabuf_ioctl(struct file *filp, unsigned int code,
 			unsigned long args)
 {
+#if XLNK_SYS_BIT_WIDTH == 64
+	return -EINVAL;
+#else
 	struct dmabuf_args db_args;
 	struct xlnk_dmabuf_reg *db;
 	int status;
@@ -865,11 +869,15 @@ static int xlnk_adddmabuf_ioctl(struct file *filp, unsigned int code,
 	list_add_tail(&db->list, &xlnk_dmabuf_list);
 
 	return 0;
+#endif
 }
 
 static int xlnk_cleardmabuf_ioctl(struct file *filp, unsigned int code,
 				unsigned long args)
 {
+#if XLNK_SYS_BIT_WIDTH == 64
+	return -EINVAL;
+#else
 	struct dmabuf_args db_args;
 	struct xlnk_dmabuf_reg *dp, *dp_temp;
 	int status;
@@ -894,6 +902,7 @@ static int xlnk_cleardmabuf_ioctl(struct file *filp, unsigned int code,
 		}
 	}
 	return 1;
+#endif
 }
 
 static int xlnk_dmarequest_ioctl(struct file *filp, unsigned int code,
@@ -921,7 +930,7 @@ static int xlnk_dmarequest_ioctl(struct file *filp, unsigned int code,
 		return -ENOMEM;
 	}
 
-	temp_args.dmarequest.dmachan = (u32)chan;
+	temp_args.dmarequest.dmachan = (xlnk_intptr_type)chan;
 	temp_args.dmarequest.bd_space_phys_addr = chan->bd_phys_addr;
 	temp_args.dmarequest.bd_space_size = chan->bd_chain_size;
 
@@ -978,9 +987,9 @@ static int xlnk_dmasubmit_ioctl(struct file *filp, unsigned int code,
 						cp);
 
 	if (!status) {
-		temp_args.dmasubmit.dmahandle = (u32)dmahead;
+		temp_args.dmasubmit.dmahandle = (xlnk_intptr_type)dmahead;
 		temp_args.dmasubmit.last_bd_index =
-					(u32)dmahead->last_bd_index;
+			(xlnk_intptr_type)dmahead->last_bd_index;
 		if (copy_to_user((void __user *)args, &temp_args,
 				sizeof(union xlnk_args)))
 			return -EFAULT;
@@ -1050,7 +1059,7 @@ static int xlnk_devregister_ioctl(struct file *filp, unsigned int code,
 {
 	union xlnk_args temp_args;
 	int status;
-	u32 handle;
+	xlnk_intptr_type handle;
 
 	status = copy_from_user(&temp_args, (void __user *)args,
 				sizeof(union xlnk_args));
@@ -1073,7 +1082,7 @@ static int xlnk_dmaregister_ioctl(struct file *filp, unsigned int code,
 {
 	union xlnk_args temp_args;
 	int status;
-	u32 handle;
+	xlnk_intptr_type handle;
 
 	status = copy_from_user(&temp_args, (void __user *)args,
 				sizeof(union xlnk_args));
@@ -1106,7 +1115,7 @@ static int xlnk_mcdmaregister_ioctl(struct file *filp, unsigned int code,
 {
 	union xlnk_args temp_args;
 	int status;
-	u32 handle;
+	xlnk_intptr_type handle;
 
 	status = copy_from_user(&temp_args, (void __user *)args,
 				sizeof(union xlnk_args));
@@ -1176,12 +1185,17 @@ static int xlnk_cachecontrol_ioctl(struct file *filp, unsigned int code,
 		return -EINVAL;
 	}
 	kaddr = xlnk_bufpool[buf_id];
-
+#if XLNK_SYS_BIT_WIDTH == 32
 	__cpuc_flush_dcache_area(kaddr, size);
 	outer_flush_range(paddr, paddr + size);
 	if (temp_args.cachecontrol.action == 1)
 		outer_inv_range(paddr, paddr + size);
-
+#else
+	if (temp_args.cachecontrol.action == 1)
+		__dma_map_area(kaddr, size, DMA_FROM_DEVICE);
+	else
+		__dma_map_area(kaddr, size, DMA_TO_DEVICE);
+#endif
 	return 0;
 }
 
diff --git a/drivers/staging/apf/xlnk.h b/drivers/staging/apf/xlnk.h
index ac20c2a..9bf9a1b 100644
--- a/drivers/staging/apf/xlnk.h
+++ b/drivers/staging/apf/xlnk.h
@@ -2,6 +2,9 @@
 #define _XLNK_OS_H
 
 #include <linux/stddef.h>
+#include <linux/dmaengine.h>
+#include "xilinx-dma-apf.h"
+#include "xlnk-sysdef.h"
 
 #define XLNK_FLAG_COHERENT		0x00000001
 #define XLNK_FLAG_KERNEL_BUFFER		0x00000002
@@ -20,14 +23,30 @@ enum xlnk_dma_direction {
 	XLNK_DMA_NONE = 3,
 };
 
-struct dmabuf_args {
-	int dmabuf_fd;
-	void *user_vaddr;
+struct __attribute__ ((__packed__)) dmabuf_args {
+	xlnk_int_type dmabuf_fd;
+	xlnk_intptr_type user_vaddr;
+};
+
+struct xlnk_dma_transfer_handle {
+	dma_addr_t dma_addr;
+	unsigned long transfer_length;
+	void *kern_addr;
+	unsigned long user_addr;
+	enum dma_data_direction transfer_direction;
+	struct scatterlist *sg_list;
+	int sg_list_size;
+	int sg_effective_length;
+	int flags;
+	struct dma_chan *channel;
+	dma_cookie_t dma_cookie;
+	struct dma_async_tx_descriptor *async_desc;
+	struct completion completion_handle;
 };
 
 struct xlnk_dmabuf_reg {
-	int dmabuf_fd;
-	void *user_vaddr;
+	xlnk_int_type dmabuf_fd;
+	xlnk_intptr_type user_vaddr;
 	struct dma_buf *dbuf;
 	struct dma_buf_attachment *dbuf_attach;
 	struct sg_table *dbuf_sg_table;
@@ -36,107 +55,97 @@ struct xlnk_dmabuf_reg {
 	struct list_head list;
 };
 
+/* CROSSES KERNEL-USER BOUNDARY */
 union xlnk_args {
-	struct __attribute__ ((__packed__))  {
-		__aligned(4) unsigned int len;
-		__aligned(4) int id;
-		__aligned(4) unsigned int phyaddr;
-		unsigned char cacheable;
+	struct __attribute__ ((__packed__)) {
+		xlnk_uint_type len;
+		xlnk_int_type id;
+		xlnk_intptr_type phyaddr;
+		xlnk_byte_type cacheable;
 	} allocbuf;
-	struct __attribute__ ((__packed__))  {
-		__aligned(4) unsigned int id;
-		__aligned(4) void *buf;
+	struct __attribute__ ((__packed__)) {
+		xlnk_uint_type id;
+		xlnk_intptr_type buf;
 	} freebuf;
-	struct __attribute__ ((__packed__))  {
-		__aligned(4) int dmabuf_fd;
-		__aligned(4) void *user_addr;
+	struct __attribute__ ((__packed__)) {
+		xlnk_int_type dmabuf_fd;
+		xlnk_intptr_type user_addr;
 	} dmabuf;
-	struct __attribute__ ((__packed__))  {
-		char name[64]; /* max length of 64 */
-		/* return value */
-		__aligned(4) unsigned int dmachan;
-		/*for bd chain used by dmachan*/
-		__aligned(4) unsigned int bd_space_phys_addr;
-		/* bd chain size in bytes */
-		__aligned(4) unsigned int bd_space_size;
+	struct __attribute__ ((__packed__)) {
+		xlnk_char_type name[64];
+		xlnk_intptr_type dmachan;
+		xlnk_uint_type bd_space_phys_addr;
+		xlnk_uint_type bd_space_size;
 	} dmarequest;
 #define XLNK_MAX_APPWORDS 5
-	struct __attribute__ ((__packed__))  {
-		__aligned(4) unsigned int dmachan;
-		/* buffer base address */
-		__aligned(4) void *buf;
-		/* used to point src_buf in cdma case */
-		__aligned(4) void *buf2;
-		/* used on kernel allocated buffers */
-		__aligned(4) unsigned int buf_offset;
-		__aligned(4) unsigned int len;
-		/* zero all the time so far */
-		__aligned(4) unsigned int bufflag;
-		__aligned(4) unsigned int sglist; /* ignored */
-		__aligned(4) unsigned int sgcnt; /* ignored */
-		__aligned(4) int dmadir;
-		__aligned(4) unsigned int nappwords_i;
-		__aligned(4) unsigned int appwords_i[XLNK_MAX_APPWORDS];
-		__aligned(4) unsigned int nappwords_o;
-		/* appwords array we only accept 5 max */
-		__aligned(4) unsigned int flag;
-		/* return value */
-		__aligned(4) unsigned int dmahandle;
-		/*index of last bd used by request*/
-		__aligned(4) unsigned int last_bd_index;
+	struct __attribute__ ((__packed__)) {
+		xlnk_intptr_type dmachan;
+		xlnk_intptr_type buf;
+		xlnk_intptr_type buf2;
+		xlnk_uint_type buf_offset;
+		xlnk_uint_type len;
+		xlnk_uint_type bufflag;
+		xlnk_intptr_type sglist;
+		xlnk_uint_type sgcnt;
+		xlnk_enum_type dmadir;
+		xlnk_uint_type nappwords_i;
+		xlnk_uint_type appwords_i[XLNK_MAX_APPWORDS];
+		xlnk_uint_type nappwords_o;
+		xlnk_uint_type flag;
+		xlnk_intptr_type dmahandle; /* return value */
+		xlnk_uint_type last_bd_index;
 	} dmasubmit;
-	struct __attribute__ ((__packed__))  {
-		__aligned(4) unsigned int dmahandle;
-		__aligned(4) unsigned int nappwords;
-		__aligned(4) unsigned int appwords[XLNK_MAX_APPWORDS];
+	struct __attribute__ ((__packed__)) {
+		xlnk_intptr_type dmahandle;
+		xlnk_uint_type nappwords;
+		xlnk_uint_type appwords[XLNK_MAX_APPWORDS];
 		/* appwords array we only accept 5 max */
 	} dmawait;
-	struct __attribute__ ((__packed__))  {
-		__aligned(4) unsigned int dmachan;
+	struct __attribute__ ((__packed__)) {
+		xlnk_intptr_type dmachan;
 	} dmarelease;
 	struct __attribute__ ((__packed__))  {
-		__aligned(4) unsigned int base;
-		__aligned(4) unsigned int size;
-		__aligned(4) unsigned int irqs[8];
-		char name[32];
-		__aligned(4) unsigned int id;
+		xlnk_intptr_type base;
+		xlnk_uint_type size;
+		xlnk_uint_type irqs[8];
+		xlnk_char_type name[32];
+		xlnk_uint_type id;
 	} devregister;
-	struct __attribute__ ((__packed__))  {
-		__aligned(4) unsigned int base;
+	struct __attribute__ ((__packed__)) {
+		xlnk_intptr_type base;
 	} devunregister;
-	struct __attribute__ ((__packed__))  {
-		char name[32];
-		__aligned(4) unsigned int id;
-		__aligned(4) unsigned int base;
-		__aligned(4) unsigned int size;
-		__aligned(4) unsigned int chan_num;
-		__aligned(4) unsigned int chan0_dir;
-		__aligned(4) unsigned int chan0_irq;
-		__aligned(4) unsigned int chan0_poll_mode;
-		__aligned(4) unsigned int chan0_include_dre;
-		__aligned(4) unsigned int chan0_data_width;
-		__aligned(4) unsigned int chan1_dir;
-		__aligned(4) unsigned int chan1_irq;
-		__aligned(4) unsigned int chan1_poll_mode;
-		__aligned(4) unsigned int chan1_include_dre;
-		__aligned(4) unsigned int chan1_data_width;
+	struct __attribute__ ((__packed__)) {
+		xlnk_char_type name[32];
+		xlnk_uint_type id;
+		xlnk_intptr_type base;
+		xlnk_uint_type size;
+		xlnk_uint_type chan_num;
+		xlnk_uint_type chan0_dir;
+		xlnk_uint_type chan0_irq;
+		xlnk_uint_type chan0_poll_mode;
+		xlnk_uint_type chan0_include_dre;
+		xlnk_uint_type chan0_data_width;
+		xlnk_uint_type chan1_dir;
+		xlnk_uint_type chan1_irq;
+		xlnk_uint_type chan1_poll_mode;
+		xlnk_uint_type chan1_include_dre;
+		xlnk_uint_type chan1_data_width;
 	} dmaregister;
-	struct __attribute__ ((__packed__))  {
-		char name[32];
-		__aligned(4) unsigned int id;
-		__aligned(4) unsigned int base;
-		__aligned(4) unsigned int size;
-		__aligned(4) unsigned int mm2s_chan_num;
-		__aligned(4) unsigned int mm2s_chan_irq;
-		__aligned(4) unsigned int s2mm_chan_num;
-		__aligned(4) unsigned int s2mm_chan_irq;
+	struct __attribute__ ((__packed__)) {
+		xlnk_char_type name[32];
+		xlnk_uint_type id;
+		xlnk_intptr_type base;
+		xlnk_uint_type size;
+		xlnk_uint_type mm2s_chan_num;
+		xlnk_uint_type mm2s_chan_irq;
+		xlnk_uint_type s2mm_chan_num;
+		xlnk_uint_type s2mm_chan_irq;
 	} mcdmaregister;
-	struct __attribute__ ((__packed__))  {
-		__aligned(4) void *phys_addr;
-		__aligned(4) int size;
-		__aligned(4) int action;
+	struct __attribute__ ((__packed__)) {
+		xlnk_intptr_type phys_addr;
+		xlnk_uint_type size;
+		xlnk_int_type action;
 	} cachecontrol;
 };
 
-
 #endif
-- 
1.7.5.4

