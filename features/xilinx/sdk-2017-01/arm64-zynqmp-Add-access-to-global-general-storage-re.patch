From a6848421eb2d985c4b960a3b5b27ea89ea28dad2 Mon Sep 17 00:00:00 2001
From: Will Wong <WILLW@xilinx.com>
Date: Thu, 9 Mar 2017 10:07:46 -0800
Subject: [PATCH 1431/1566] arm64: zynqmp: Add access to global general
 storage registers

commit  13344ace6f4a4a40b394ac2efc771ba0dc97d661 from
https://github.com/Xilinx/linux-xlnx.git

This provides the proper interface for user applications to access
the PMU Global General Storage registers 0 to 3, and the PMU Persistent
Global General Storage registers 0 to 3.  These registers are commonly
used to track the number of normal and unexpected reboots, system up
times, etc.  Until now, these registers can only be accessed through
the debugfs.  It is desirable to provide a more proper interface for
them.

For example:
To read from persistent global general storage register 0:
cat /sys/devices/platform/firmware/pggs0

To write 1 byte to persistent global general storage register 0:
echo 0x000000FF 0x000000AB > /sys/devices/platform/firmware/pggs0

Signed-off-by: Will Wong <willw@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/soc/xilinx/zynqmp/pm.c |  335 ++++++++++++++++++++++++++++++++++++++++
 1 files changed, 335 insertions(+), 0 deletions(-)

diff --git a/drivers/soc/xilinx/zynqmp/pm.c b/drivers/soc/xilinx/zynqmp/pm.c
index 2b6ff38..6b475e0 100644
--- a/drivers/soc/xilinx/zynqmp/pm.c
+++ b/drivers/soc/xilinx/zynqmp/pm.c
@@ -47,6 +47,14 @@
 /* Payload size (consists of callback API ID + arguments) */
 #define CB_PAYLOAD_SIZE	(CB_ARG_CNT + 1)
 
+/* Global general storage register base address */
+#define GGS_BASEADDR	(0xFFD80030U)
+#define GSS_NUM_REGS	(4)
+
+/* Persistent global general storage register base address */
+#define PGGS_BASEADDR	(0xFFD80050U)
+#define PGSS_NUM_REGS	(4)
+
 #define DRIVER_NAME	"zynqmp_pm"
 
 /**
@@ -1216,6 +1224,321 @@ static int zynqmp_pm_sysfs_init(struct device *dev)
 }
 
 /**
+ * ggs_show - Show global general storage (ggs) sysfs attribute
+ * @dev: Device structure
+ * @attr: Device attribute structure
+ * @buf: Requested available shutdown_scope attributes string
+ * @reg: Register number
+ *
+ * Return:Number of bytes printed into the buffer.
+ *
+ * Helper function for viewing a ggs register value.
+ *
+ * User-space interface for viewing the content of the ggs0 register.
+ * cat /sys/devices/platform/firmware/ggs0
+ */
+static ssize_t ggs_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf,
+			u32 reg)
+{
+	u32 value;
+	int len;
+	int ret;
+
+	ret = zynqmp_pm_mmio_read(GGS_BASEADDR + (reg << 2), &value);
+	if (ret)
+		return ret;
+
+	len = sprintf(buf, "0x%x", (s32)value);
+	if (len <= 0)
+		return 0;
+
+	strcat(buf, "\n");
+
+	return strlen(buf);
+}
+
+/**
+ * ggs_store - Store global general storage (ggs) sysfs attribute
+ * @dev: Device structure
+ * @attr: Device attribute structure
+ * @buf: User entered shutdown_scope attribute string
+ * @count: Size of buf
+ * @reg: Register number
+ *
+ * Return: count argument if request succeeds, the corresponding
+ * error code otherwise
+ *
+ * Helper function for storing a ggs register value.
+ *
+ * For example, the user-space interface for storing a value to the
+ * ggs0 register:
+ * echo 0xFFFFFFFF 0x1234ABCD > /sys/devices/platform/firmware/ggs0
+ */
+static ssize_t ggs_store(struct device *dev,
+			 struct device_attribute *attr,
+			 const char *buf,
+			 size_t count,
+			 u32 reg)
+{
+	char *kern_buff;
+	char *inbuf;
+	char *tok;
+	long mask;
+	long value;
+	int ret;
+
+	if (!dev || !attr || !buf || !count || (reg >= GSS_NUM_REGS))
+		return -EINVAL;
+
+	kern_buff = kzalloc(count, GFP_KERNEL);
+	if (!kern_buff)
+		return -ENOMEM;
+
+	ret = strlcpy(kern_buff, buf, count);
+	if (ret < 0) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	inbuf = kern_buff;
+
+	/* Read the write mask */
+	tok = strsep(&inbuf, " ");
+	if (!tok) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	ret = kstrtol(tok, 16, &mask);
+	if (ret) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	/* Read the write value */
+	tok = strsep(&inbuf, " ");
+	if (!tok) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	ret = kstrtol(tok, 16, &value);
+	if (ret) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	ret = zynqmp_pm_mmio_write(GGS_BASEADDR + (reg << 2),
+				   (u32)mask, (u32)value);
+	if (ret)
+		ret = -EFAULT;
+
+err:
+	kfree(kern_buff);
+	if (ret)
+		return ret;
+
+	return count;
+}
+
+/* GGS register show functions */
+#define GGS0_SHOW(N) \
+	ssize_t ggs##N##_show(struct device *dev, \
+			 struct device_attribute *attr, \
+			 char *buf) \
+	{ \
+		return ggs_show(dev, attr, buf, N); \
+	}
+
+static GGS0_SHOW(0);
+static GGS0_SHOW(1);
+static GGS0_SHOW(2);
+static GGS0_SHOW(3);
+
+/* GGS register store function */
+#define GGS0_STORE(N) \
+	ssize_t ggs##N##_store(struct device *dev, \
+				   struct device_attribute *attr, \
+				   const char *buf, \
+				   size_t count) \
+	{ \
+		return ggs_store(dev, attr, buf, count, N); \
+	}
+
+static GGS0_STORE(0);
+static GGS0_STORE(1);
+static GGS0_STORE(2);
+static GGS0_STORE(3);
+
+/* GGS regsiter device attributes */
+static DEVICE_ATTR_RW(ggs0);
+static DEVICE_ATTR_RW(ggs1);
+static DEVICE_ATTR_RW(ggs2);
+static DEVICE_ATTR_RW(ggs3);
+
+#define CREATE_GGS_DEVICE(N) \
+do { \
+	if (device_create_file(&pdev->dev, &dev_attr_ggs##N)) \
+		dev_err(&pdev->dev, "unable to create ggs%d attribute\n", N); \
+} while (0)
+
+/**
+ * pggs_show - Show persistent global general storage (pggs) sysfs attribute
+ * @dev: Device structure
+ * @attr: Device attribute structure
+ * @buf: Requested available shutdown_scope attributes string
+ * @reg: Register number
+ *
+ * Return:Number of bytes printed into the buffer.
+ *
+ * Helper function for viewing a pggs register value.
+ */
+static ssize_t pggs_show(struct device *dev,
+			 struct device_attribute *attr,
+			 char *buf,
+			 u32 reg)
+{
+	u32 value;
+	int len;
+	int ret;
+
+	ret = zynqmp_pm_mmio_read(PGGS_BASEADDR + (reg << 2), &value);
+	if (ret)
+		return ret;
+
+	len = sprintf(buf, "0x%x", (s32)value);
+	if (len <= 0)
+		return 0;
+
+	strcat(buf, "\n");
+
+	return strlen(buf);
+}
+
+/**
+ * pggs_store - Store persistent global general storage (pggs) sysfs attribute
+ * @dev: Device structure
+ * @attr: Device attribute structure
+ * @buf: User entered shutdown_scope attribute string
+ * @count: Size of buf
+ * @reg: Register number
+ *
+ * Return: count argument if request succeeds, the corresponding
+ * error code otherwise
+ *
+ * Helper function for storing a pggs register value.
+ */
+static ssize_t pggs_store(struct device *dev,
+			  struct device_attribute *attr,
+			  const char *buf,
+			  size_t count,
+			  u32 reg)
+{
+	char *kern_buff;
+	char *inbuf;
+	char *tok;
+	long mask;
+	long value;
+	int ret;
+
+	if (!dev || !attr || !buf || !count || (reg >= PGSS_NUM_REGS))
+		return -EINVAL;
+
+	kern_buff = kzalloc(count, GFP_KERNEL);
+	if (!kern_buff)
+		return -ENOMEM;
+
+	ret = strlcpy(kern_buff, buf, count);
+	if (ret < 0) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	inbuf = kern_buff;
+
+	/* Read the write mask */
+	tok = strsep(&inbuf, " ");
+	if (!tok) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	ret = kstrtol(tok, 16, &mask);
+	if (ret) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	/* Read the write value */
+	tok = strsep(&inbuf, " ");
+	if (!tok) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	ret = kstrtol(tok, 16, &value);
+	if (ret) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	ret = zynqmp_pm_mmio_write(PGGS_BASEADDR + (reg << 2),
+				   (u32)mask, (u32)value);
+	if (ret)
+		ret = -EFAULT;
+
+err:
+	kfree(kern_buff);
+	if (ret)
+		return ret;
+
+	return count;
+}
+
+#define PGGS0_SHOW(N) \
+	ssize_t pggs##N##_show(struct device *dev, \
+			 struct device_attribute *attr, \
+			 char *buf) \
+	{ \
+		return pggs_show(dev, attr, buf, N); \
+	}
+
+/* PGGS register show functions */
+static PGGS0_SHOW(0);
+static PGGS0_SHOW(1);
+static PGGS0_SHOW(2);
+static PGGS0_SHOW(3);
+
+#define PGGS0_STORE(N) \
+	ssize_t pggs##N##_store(struct device *dev, \
+				   struct device_attribute *attr, \
+				   const char *buf, \
+				   size_t count) \
+	{ \
+		return pggs_store(dev, attr, buf, count, N); \
+	}
+
+/* PGGS register store functions */
+static PGGS0_STORE(0);
+static PGGS0_STORE(1);
+static PGGS0_STORE(2);
+static PGGS0_STORE(3);
+
+/* PGGS register device attributes */
+static DEVICE_ATTR_RW(pggs0);
+static DEVICE_ATTR_RW(pggs1);
+static DEVICE_ATTR_RW(pggs2);
+static DEVICE_ATTR_RW(pggs3);
+
+#define CREATE_PGGS_DEVICE(N) \
+do { \
+	if (device_create_file(&pdev->dev, &dev_attr_pggs##N)) \
+		dev_err(&pdev->dev, "unable to create pggs%d attribute\n", N); \
+} while (0)
+
+/**
  * zynqmp_pm_probe - Probe existence of the PMU Firmware
  *			and initialize debugfs interface
  *
@@ -1279,6 +1602,18 @@ static int zynqmp_pm_probe(struct platform_device *pdev)
 		pinctrl_select_state(pinctrl, pins_default);
 	}
 
+	/* Create Global General Storage register. */
+	CREATE_GGS_DEVICE(0);
+	CREATE_GGS_DEVICE(1);
+	CREATE_GGS_DEVICE(2);
+	CREATE_GGS_DEVICE(3);
+
+	/* Create Persistent Global General Storage register. */
+	CREATE_PGGS_DEVICE(0);
+	CREATE_PGGS_DEVICE(1);
+	CREATE_PGGS_DEVICE(2);
+	CREATE_PGGS_DEVICE(3);
+
 	return 0;
 
 error:
-- 
1.7.5.4

