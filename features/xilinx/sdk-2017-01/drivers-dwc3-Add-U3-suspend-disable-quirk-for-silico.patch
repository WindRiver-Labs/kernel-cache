From 1ce6c12d916638b840c155cad3c4ee7ff5a2ec0a Mon Sep 17 00:00:00 2001
From: Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
Date: Thu, 2 Mar 2017 14:40:50 +0530
Subject: [PATCH 1388/1566] drivers: dwc3: Add U3 suspend disable quirk for
 silicon versions less than v4

commit  8fac503148054836f042687d3a08f1ed4e7f266a from
https://github.com/Xilinx/linux-xlnx.git

The logic for updating dwc->revision flag got corrected in 4.9 kernel,
which sets USB3PIPECTL.SUSPENDENABLE bit for dwc3 core versions >= 2.90A.
Because of this bit being set we are seeing failure while configuring
endpoints and below error is seen

"Failure to configure ep0out"

When this bit is set the control enables autosuspended of phy. As a part
of this feature controller automatically disables the phy clocking when
it is idle. This issue is observed with silicon revisions < 4.0.

This patch adds "snps,dis_u3_susphy_quirk" into platform node if silicon
revision is found to be less than 4.0

This patch is based on the fix provided in "85e618a1be2b2092318178d1d66b"

Signed-off-by: Anurag Kumar Vulisha <anuragku@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
fs
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../devicetree/bindings/usb/dwc3-xilinx.txt        |    6 +++
 drivers/usb/dwc3/dwc3-of-simple.c                  |   42 ++++++++++++++++++++
 2 files changed, 48 insertions(+), 0 deletions(-)

diff --git a/Documentation/devicetree/bindings/usb/dwc3-xilinx.txt b/Documentation/devicetree/bindings/usb/dwc3-xilinx.txt
index 30361b3..fb42a14 100644
--- a/Documentation/devicetree/bindings/usb/dwc3-xilinx.txt
+++ b/Documentation/devicetree/bindings/usb/dwc3-xilinx.txt
@@ -13,6 +13,10 @@ Required child node:
 A child node must exist to represent the core DWC3 IP block. The name of
 the node is not important. The content of the node is defined in dwc3.txt.
 
+Optional properties for xlnx,zynqmp-dwc3:
+- nvmem-cells:       list of phandle to the nvmem data cells.
+- nvmem-cell-names:  Names for the each nvmem-cells specified.
+
 Example device node:
 
 		usb@0 {
@@ -23,6 +27,8 @@ Example device node:
 			clock-names = "bus_clk" "ref_clk";
 			clocks = <&clk125>, <&clk125>;
 			ranges;
+			nvmem-cells = <&soc_revision>;
+			nvmem-cell-names = "soc_revision";
 
 			dwc3@fe200000 {
 				compatible = "snps,dwc3";
diff --git a/drivers/usb/dwc3/dwc3-of-simple.c b/drivers/usb/dwc3/dwc3-of-simple.c
index ffde96b..482071d 100644
--- a/drivers/usb/dwc3/dwc3-of-simple.c
+++ b/drivers/usb/dwc3/dwc3-of-simple.c
@@ -29,6 +29,8 @@
 #include <linux/of.h>
 #include <linux/of_platform.h>
 #include <linux/pm_runtime.h>
+#include <linux/soc/xilinx/zynqmp/fw.h>
+#include <linux/slab.h>
 
 struct dwc3_of_simple {
 	struct device		*dev;
@@ -96,6 +98,46 @@ static int dwc3_of_simple_probe(struct platform_device *pdev)
 	platform_set_drvdata(pdev, simple);
 	simple->dev = dev;
 
+	if (of_device_is_compatible(pdev->dev.of_node,
+				    "xlnx,zynqmp-dwc3")) {
+
+		struct device_node	*child;
+		char			*soc_rev;
+
+		/* read Silicon version using nvmem driver */
+		soc_rev = zynqmp_nvmem_get_silicon_version(&pdev->dev,
+						   "soc_revision");
+
+		if (PTR_ERR(soc_rev) == -EPROBE_DEFER) {
+			/* Do a deferred probe */
+			return -EPROBE_DEFER;
+
+		} else if (!IS_ERR(soc_rev) &&
+					(*soc_rev < ZYNQMP_SILICON_V4)) {
+
+			for_each_child_of_node(np, child) {
+				/* Add snps,dis_u3_susphy_quirk
+				 * for SOC revison less than v4
+				 */
+				struct property *new_prop;
+
+				new_prop = kzalloc(sizeof(*new_prop),
+								GFP_KERNEL);
+				new_prop->name =
+					kstrdup("snps,dis_u3_susphy_quirk",
+								GFP_KERNEL);
+				new_prop->length =
+					sizeof("snps,dis_u3_susphy_quirk");
+				new_prop->value =
+					kstrdup("snps,dis_u3_susphy_quirk",
+								GFP_KERNEL);
+				of_add_property(child, new_prop);
+			}
+		}
+
+		kfree(soc_rev);
+	}
+
 	ret = dwc3_of_simple_clk_init(simple, of_clk_get_parent_count(np));
 	if (ret)
 		return ret;
-- 
1.7.5.4

