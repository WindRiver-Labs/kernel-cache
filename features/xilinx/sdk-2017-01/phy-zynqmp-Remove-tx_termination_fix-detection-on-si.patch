From c9eea6f1ee9eb9cb3b83ff30993ec7cacefbfb88 Mon Sep 17 00:00:00 2001
From: Michal Simek <michal.simek@xilinx.com>
Date: Tue, 17 Jan 2017 14:36:54 +0100
Subject: [PATCH 1095/1566] phy: zynqmp: Remove tx_termination_fix detection
 on silicon v1

commit  27aa0146b24961ad2e4fce0579694e462a733b71 from
https://github.com/Xilinx/linux-xlnx.git

Only silicon v1 requires this termination fix. With new nvmem soc
revision nvmem detection driver this can be autodetected at run time and
this flag is not needed.

Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../devicetree/bindings/phy/phy-zynqmp.txt         |    6 ---
 arch/arm64/boot/dts/xilinx/zynqmp.dtsi             |    3 +-
 drivers/phy/phy-zynqmp.c                           |   13 +++++-
 include/linux/soc/xilinx/zynqmp/fw.h               |   47 ++++++++++++++++++++
 4 files changed, 60 insertions(+), 9 deletions(-)
 create mode 100644 include/linux/soc/xilinx/zynqmp/fw.h

diff --git a/Documentation/devicetree/bindings/phy/phy-zynqmp.txt b/Documentation/devicetree/bindings/phy/phy-zynqmp.txt
index 5808baf1..ad39295 100644
--- a/Documentation/devicetree/bindings/phy/phy-zynqmp.txt
+++ b/Documentation/devicetree/bindings/phy/phy-zynqmp.txt
@@ -16,11 +16,6 @@ Required properties (controller (parent) node):
 			- lpd: Low power domain peripherals reset control
 			- fpd: Full power domain peripherals reset control
 
--xlnx,tx_termination_fix: Include fix for a functional issue in the GT. The TX
-			  termination resistance can be out of spec due to a
-			  bug in the calibration logic. This issue maybe be fixed
-			  in future silicon versions.
-
 Required nodes	:  A sub-node is required for each lane the controller
 		   provides.
 
@@ -69,7 +64,6 @@ Example:
 		reg = <0x0 0xfd400000 0x0 0x40000>, <0x0 0xfd3d0000 0x0 0x1000>,
 			<0x0 0xfd1a0000 0x0 0x1000>, <0x0 0xff5e0000 0x0 0x1000>;
 		reg-names = "serdes", "siou", "fpd", "lpd";
-		xlnx,tx_termination_fix;
 
 		lane0: lane@0 {
 			#phy-cells = <4>;
diff --git a/arch/arm64/boot/dts/xilinx/zynqmp.dtsi b/arch/arm64/boot/dts/xilinx/zynqmp.dtsi
index be02612..d3b621d 100644
--- a/arch/arm64/boot/dts/xilinx/zynqmp.dtsi
+++ b/arch/arm64/boot/dts/xilinx/zynqmp.dtsi
@@ -745,7 +745,8 @@
 			      <0x0 0xfd1a0000 0x0 0x1000>,
 			      <0x0 0xff5e0000 0x0 0x1000>;
 			reg-names = "serdes", "siou", "fpd", "lpd";
-			xlnx,tx_termination_fix;
+			nvmem-cells = <&soc_revision>;
+			nvmem-cell-names = "soc_revision";
 			lane0: lane@0 {
 				#phy-cells = <4>;
 			};
diff --git a/drivers/phy/phy-zynqmp.c b/drivers/phy/phy-zynqmp.c
index 25ff174..c6930ea 100644
--- a/drivers/phy/phy-zynqmp.c
+++ b/drivers/phy/phy-zynqmp.c
@@ -33,6 +33,7 @@
 #include <linux/platform_device.h>
 #include <linux/delay.h>
 #include <dt-bindings/phy/phy.h>
+#include <linux/soc/xilinx/zynqmp/fw.h>
 #include <linux/soc/xilinx/zynqmp/pm.h>
 #include <linux/list.h>
 
@@ -1161,6 +1162,7 @@ static int xpsgtr_probe(struct platform_device *pdev)
 	struct phy_provider *provider;
 	struct phy *phy;
 	struct resource *res;
+	char *soc_rev;
 	int lanecount, port = 0, index = 0;
 
 	gtr_dev = devm_kzalloc(&pdev->dev, sizeof(*gtr_dev), GFP_KERNEL);
@@ -1199,8 +1201,15 @@ static int xpsgtr_probe(struct platform_device *pdev)
 	gtr_dev->dev = &pdev->dev;
 	platform_set_drvdata(pdev, gtr_dev);
 	mutex_init(&gtr_dev->gtr_mutex);
-	gtr_dev->tx_term_fix = of_property_read_bool(np,
-					"xlnx,tx_termination_fix");
+
+	/* Deferred probe is also handled if nvmem is not ready */
+	soc_rev = zynqmp_nvmem_get_silicon_version(&pdev->dev,
+						   "soc_revision");
+	if (IS_ERR(soc_rev))
+		return PTR_ERR(soc_rev);
+
+	if (*soc_rev == ZYNQMP_SILICON_V1)
+		gtr_dev->tx_term_fix = true;
 
 	for_each_child_of_node(np, child) {
 		struct xpsgtr_phy *gtr_phy;
diff --git a/include/linux/soc/xilinx/zynqmp/fw.h b/include/linux/soc/xilinx/zynqmp/fw.h
new file mode 100644
index 0000000..80dd955
--- /dev/null
+++ b/include/linux/soc/xilinx/zynqmp/fw.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2017 Xilinx, Inc.
+ *
+ * Michal Simek <michal.simek@xilinx.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __SOC_ZYNQMP_FW_H__
+#define __SOC_ZYNQMP_FW_H__
+
+#include <linux/nvmem-consumer.h>
+
+enum {
+	ZYNQMP_SILICON_V1 = 0,
+	ZYNQMP_SILICON_V2,
+	ZYNQMP_SILICON_V3,
+	ZYNQMP_SILICON_V4,
+};
+
+static inline char *zynqmp_nvmem_get_silicon_version(struct device *dev,
+						     const char *cname)
+{
+	struct nvmem_cell *cell;
+	ssize_t data;
+	char *ret;
+
+	cell = nvmem_cell_get(dev, cname);
+	if (IS_ERR(cell)) {
+		return ERR_CAST(cell);
+	}
+
+	ret = nvmem_cell_read(cell, &data);
+	nvmem_cell_put(cell);
+
+	return ret;
+}
+
+#endif /* __SOC_ZYNQMP_FW_H__ */
-- 
1.7.5.4

