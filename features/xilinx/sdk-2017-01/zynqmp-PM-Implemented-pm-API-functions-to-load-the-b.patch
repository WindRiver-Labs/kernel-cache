From 18910954aed5ec69db1b50eaa11441eb115fb61e Mon Sep 17 00:00:00 2001
From: Nava kishore Manne <nava.manne@xilinx.com>
Date: Tue, 16 Aug 2016 16:15:12 +0530
Subject: [PATCH 0810/1566] zynqmp: PM: Implemented pm API functions to load
 the bitstream into PL

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

This patch adds PM API's to provide the Access to the xilfpga
library to load the bitstream into the zynqmp PL region.

Signed-off-by: Nava kishore Manne <navam@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 710cf3c8532d5087500af4d1c35c229318ff531b)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/soc/xilinx/zynqmp/pm.c       |   77 ++++++++++++++++++++++++++++++++++
 include/linux/soc/xilinx/zynqmp/pm.h |    4 ++
 2 files changed, 81 insertions(+), 0 deletions(-)

diff --git a/drivers/soc/xilinx/zynqmp/pm.c b/drivers/soc/xilinx/zynqmp/pm.c
index 18ecc37..80f8ce4 100644
--- a/drivers/soc/xilinx/zynqmp/pm.c
+++ b/drivers/soc/xilinx/zynqmp/pm.c
@@ -33,6 +33,11 @@
 /* SMC SIP service Call Function Identifier Prefix */
 #define PM_SIP_SVC	0xC2000000
 
+/* FPGA PCAP Interface Identifiers */
+#define PCAP_INIT      0x00000001
+#define PCAP_WRITE     0x00000002
+#define PCAP_DONE      0x00000004
+
 /* Number of 32bits values in payload */
 #define PAYLOAD_ARG_CNT	5U
 
@@ -65,6 +70,9 @@ enum pm_api_id {
 	RESET_GET_STATUS,
 	MMIO_WRITE,
 	MMIO_READ,
+	PM_INIT,
+	FPGA_LOAD,
+	FPGA_GET_STATUS,
 };
 
 /* PMU-FW return status codes */
@@ -581,6 +589,75 @@ int zynqmp_pm_mmio_read(const u32 address, u32 *value)
 }
 EXPORT_SYMBOL_GPL(zynqmp_pm_mmio_read);
 
+/**
+ * zynqmp_pm_fpga_init -This function initialize the PCAP interface.
+ *
+ * This function provides access to xilfpga library to initialize the
+ * the PCAP interface.
+ *
+ * Return:      Returns status, either success or error+reason
+ */
+int zynqmp_pm_fpga_init(void)
+{
+	return invoke_pm_fn(FPGA_LOAD, 0, 0, 0, PCAP_INIT, NULL);
+}
+EXPORT_SYMBOL_GPL(zynqmp_pm_fpga_init);
+
+/**
+ * zynqmp_pm_fpga_load - Perform the fpga load
+ * @address:    Address to write to
+ * @size        pl bitstream size
+ *
+ * This function provides access to xilfpga library to transfer
+ * the required bitstream into PL.
+ *
+ * Return:      Returns status, either success or error+reason
+ */
+int zynqmp_pm_fpga_load(const u64 address, const u32 size)
+{
+	return invoke_pm_fn(FPGA_LOAD, (u32)address,
+			((u32)(address >> 32)), size, PCAP_WRITE, NULL);
+}
+EXPORT_SYMBOL_GPL(zynqmp_pm_fpga_load);
+
+/**
+ * zynqmp_pm_fpga_done -This function checks whether the bitstream
+ *                      is properly programmed or NOT
+ *
+ * This function provides access to xilfpga library to checks
+ * whether the bitstream is properly programmed or NOT.
+ *
+ * Return:      Returns status, either success or error+reason
+ */
+int zynqmp_pm_fpga_done(void)
+{
+	return invoke_pm_fn(FPGA_LOAD, 0, 0, 0, PCAP_DONE, NULL);
+}
+EXPORT_SYMBOL_GPL(zynqmp_pm_fpga_done);
+
+/**
+ * zynqmp_pm_fpga_get_status - Read value from PCAP status register
+ * @value:      Value to read
+ *
+ *This function provides access to the xilfpga library to get
+ *the PCAP status
+ *
+ * Return:      Returns status, either success or error+reason
+ */
+int zynqmp_pm_fpga_get_status(u32 *value)
+{
+	u32 ret_payload[PAYLOAD_ARG_CNT];
+
+	if (!value)
+		return -EINVAL;
+
+	invoke_pm_fn(FPGA_GET_STATUS, 0, 0, 0, 0, ret_payload);
+	*value = ret_payload[1];
+
+	return zynqmp_pm_ret_code((enum pm_ret_status)ret_payload[0]);
+}
+EXPORT_SYMBOL_GPL(zynqmp_pm_fpga_get_status);
+
 #ifdef CONFIG_ZYNQMP_PM_API_DEBUGFS
 /**
  * zynqmp_pm_argument_value - Extract argument value from a PM-API request
diff --git a/include/linux/soc/xilinx/zynqmp/pm.h b/include/linux/soc/xilinx/zynqmp/pm.h
index 0a353bb..3f7cee0 100644
--- a/include/linux/soc/xilinx/zynqmp/pm.h
+++ b/include/linux/soc/xilinx/zynqmp/pm.h
@@ -244,5 +244,9 @@ int zynqmp_pm_mmio_write(const u32 address,
 				     const u32 mask,
 				     const u32 value);
 int zynqmp_pm_mmio_read(const u32 address, u32 *value);
+int zynqmp_pm_fpga_init(void);
+int zynqmp_pm_fpga_load(const u64 address, const u32 size);
+int zynqmp_pm_fpga_done(void);
+int zynqmp_pm_fpga_get_status(u32 *value);
 
 #endif /* __SOC_ZYNQMP_PM_H__ */
-- 
1.7.5.4

