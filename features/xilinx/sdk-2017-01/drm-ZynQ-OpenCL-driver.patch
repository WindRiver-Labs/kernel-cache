From 9c10bfeba83f2084fb33411cc01f55be879c26df Mon Sep 17 00:00:00 2001
From: Umang Parekh <umang.parekh@xilinx.com>
Date: Thu, 10 Nov 2016 14:28:10 -0800
Subject: [PATCH 1045/1566] drm: ZynQ OpenCL driver

commit  47c0694dd246f4699afa4c82bd2a70d63f5fec02 from
https://github.com/Xilinx/linux-xlnx.git

Adding the GEM based memory manager mainly for running OpenCL on Zynq
and MPSOC products. Today, this driver is responsible mainly for the
following:

1.    memory manager backed by CMA
2.    support for buffer import as well as export to other subsystems
3.    memory map accelerator control port

Signed-off-by: Umang Parekh <umang.parekh@xilinx.com>
Signed-off-by: Sonal Santan <sonal.santan@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../devicetree/bindings/drm/zocl/zocl_drm.txt      |   13 +
 drivers/gpu/drm/Kconfig                            |    2 +
 drivers/gpu/drm/Makefile                           |    1 +
 drivers/gpu/drm/zocl/Kconfig                       |    8 +
 drivers/gpu/drm/zocl/Makefile                      |    4 +
 drivers/gpu/drm/zocl/zocl_bo.c                     |  271 ++++++++++++++++++++
 drivers/gpu/drm/zocl/zocl_drv.c                    |  217 ++++++++++++++++
 drivers/gpu/drm/zocl/zocl_drv.h                    |   59 +++++
 include/uapi/linux/Kbuild                          |    1 +
 include/uapi/linux/zocl_ioctl.h                    |  125 +++++++++
 10 files changed, 701 insertions(+), 0 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/drm/zocl/zocl_drm.txt
 create mode 100644 drivers/gpu/drm/zocl/Kconfig
 create mode 100644 drivers/gpu/drm/zocl/Makefile
 create mode 100644 drivers/gpu/drm/zocl/zocl_bo.c
 create mode 100644 drivers/gpu/drm/zocl/zocl_drv.c
 create mode 100644 drivers/gpu/drm/zocl/zocl_drv.h
 create mode 100644 include/uapi/linux/zocl_ioctl.h

diff --git a/Documentation/devicetree/bindings/drm/zocl/zocl_drm.txt b/Documentation/devicetree/bindings/drm/zocl/zocl_drm.txt
new file mode 100644
index 0000000..bb9e30a
--- /dev/null
+++ b/Documentation/devicetree/bindings/drm/zocl/zocl_drm.txt
@@ -0,0 +1,13 @@
+Binding for ZynQ OpenCL DRM driver
+
+Required properties:
+- compatible: should contain "xlnx,zocl"
+- reg: base address and size for memory mapped control port for opencl kernel
+
+Example:
+
+	zocl_drm {
+		compatible = "xlnx,zocl";
+		status = "okay";
+		reg = <0x80000000 0x10000>;
+	};
diff --git a/drivers/gpu/drm/Kconfig b/drivers/gpu/drm/Kconfig
index 1c6fcab..2e9262c 100644
--- a/drivers/gpu/drm/Kconfig
+++ b/drivers/gpu/drm/Kconfig
@@ -279,6 +279,8 @@ source "drivers/gpu/drm/sti/Kconfig"
 
 source "drivers/gpu/drm/xilinx/Kconfig"
 
+source "drivers/gpu/drm/zocl/Kconfig"
+
 source "drivers/gpu/drm/xylon/Kconfig"
 
 source "drivers/gpu/drm/amd/amdkfd/Kconfig"
diff --git a/drivers/gpu/drm/Makefile b/drivers/gpu/drm/Makefile
index 092e83a..d1ef721 100644
--- a/drivers/gpu/drm/Makefile
+++ b/drivers/gpu/drm/Makefile
@@ -75,6 +75,7 @@ obj-$(CONFIG_DRM_MSM) += msm/
 obj-$(CONFIG_DRM_TEGRA) += tegra/
 obj-$(CONFIG_DRM_STI) += sti/
 obj-$(CONFIG_DRM_XILINX)	+= xilinx/
+obj-$(CONFIG_DRM_ZOCL))	+= zocl/
 obj-$(CONFIG_DRM_XYLON)	+= xylon/
 obj-$(CONFIG_DRM_IMX) += imx/
 obj-$(CONFIG_DRM_MEDIATEK) += mediatek/
diff --git a/drivers/gpu/drm/zocl/Kconfig b/drivers/gpu/drm/zocl/Kconfig
new file mode 100644
index 0000000..6a54d01
--- /dev/null
+++ b/drivers/gpu/drm/zocl/Kconfig
@@ -0,0 +1,8 @@
+config DRM_ZOCL
+	tristate "Xilinx Zynq OpenCL"
+	depends on DRM
+	select DRM_KMS_HELPER
+	select DRM_KMS_CMA_HELPER
+	select DRM_GEM_CMA_HELPER
+	help
+	  Xilinx Zynq OpenCL Manager
diff --git a/drivers/gpu/drm/zocl/Makefile b/drivers/gpu/drm/zocl/Makefile
new file mode 100644
index 0000000..da58e50
--- /dev/null
+++ b/drivers/gpu/drm/zocl/Makefile
@@ -0,0 +1,4 @@
+ccflags-y := -Iinclude/drm
+zocl-y := zocl_drv.o zocl_bo.o
+
+obj-$(CONFIG_DRM_ZOCL)	+= zocl.o
diff --git a/drivers/gpu/drm/zocl/zocl_bo.c b/drivers/gpu/drm/zocl/zocl_bo.c
new file mode 100644
index 0000000..bd4d802
--- /dev/null
+++ b/drivers/gpu/drm/zocl/zocl_bo.c
@@ -0,0 +1,271 @@
+/*
+ * A GEM style CMA backed memory manager for ZynQ based OpenCL accelerators.
+ *
+ * Copyright (C) 2016 Xilinx, Inc. All rights reserved.
+ *
+ * Authors:
+ *    Sonal Santan <sonal.santan@xilinx.com>
+ *    Umang Parekh <umang.parekh@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/dma-buf.h>
+#include <linux/module.h>
+#include <linux/ramfs.h>
+#include <linux/shmem_fs.h>
+#include "zocl_drv.h"
+#include <drm/drmP.h>
+#include <drm/drm_gem.h>
+#include <linux/zocl_ioctl.h>
+
+static inline void __user *to_user_ptr(u64 address)
+{
+	return (void __user *)(uintptr_t)address;
+}
+
+void zocl_describe(const struct drm_zocl_bo *obj)
+{
+	size_t size_in_kb = obj->base.base.size / 1024;
+	size_t physical_addr = obj->base.paddr;
+
+	DRM_INFO("%p: H[0x%zxKB] D[0x%zx]\n",
+		  obj,
+		  size_in_kb,
+		  physical_addr);
+}
+
+static struct drm_zocl_bo *zocl_create_bo(struct drm_device *dev,
+	uint64_t unaligned_size)
+{
+	size_t size = PAGE_ALIGN(unaligned_size);
+	struct drm_gem_cma_object *cma_obj;
+
+	DRM_DEBUG("%s:%s:%d: %zd\n", __FILE__, __func__, __LINE__, size);
+
+	if (!size)
+		return ERR_PTR(-EINVAL);
+
+	cma_obj = drm_gem_cma_create(dev, size);
+	if (IS_ERR(cma_obj))
+		return ERR_PTR(-ENOMEM);
+
+	return to_zocl_bo(&cma_obj->base);
+}
+
+int zocl_create_bo_ioctl(struct drm_device *dev,
+		void *data,
+		struct drm_file *filp)
+{
+	int ret;
+	struct drm_zocl_create_bo *args = data;
+	struct drm_zocl_bo *bo;
+
+	if (((args->flags & DRM_ZOCL_BO_FLAGS_COHERENT) == 0) ||
+	    ((args->flags & DRM_ZOCL_BO_FLAGS_CMA) == 0))
+		return -EINVAL;
+
+	bo = zocl_create_bo(dev, args->size);
+	bo->flags |= DRM_ZOCL_BO_FLAGS_COHERENT;
+	bo->flags |= DRM_ZOCL_BO_FLAGS_CMA;
+
+	DRM_DEBUG("%s:%s:%d: %p\n", __FILE__, __func__, __LINE__, bo);
+
+	if (IS_ERR(bo)) {
+		DRM_DEBUG("object creation failed\n");
+		return PTR_ERR(bo);
+	}
+	ret = drm_gem_handle_create(filp, &bo->base.base, &args->handle);
+	if (ret) {
+		drm_gem_cma_free_object(&bo->base.base);
+		DRM_DEBUG("handle creation failed\n");
+		return ret;
+	}
+
+	zocl_describe(bo);
+	drm_gem_object_unreference_unlocked(&bo->base.base);
+
+	return ret;
+}
+
+int zocl_map_bo_ioctl(struct drm_device *dev,
+		void *data,
+		struct drm_file *filp)
+{
+	struct drm_zocl_map_bo *args = data;
+	struct drm_gem_object *gem_obj;
+
+	DRM_DEBUG("%s:%s:%d: %p\n", __FILE__, __func__, __LINE__, data);
+	gem_obj = drm_gem_object_lookup(dev, filp, args->handle);
+	if (!gem_obj) {
+		DRM_ERROR("Failed to look up GEM BO %d\n", args->handle);
+		return -EINVAL;
+	}
+
+	/* The mmap offset was set up at BO allocation time. */
+	args->offset = drm_vma_node_offset_addr(&gem_obj->vma_node);
+	zocl_describe(to_zocl_bo(gem_obj));
+	drm_gem_object_unreference_unlocked(gem_obj);
+
+	return 0;
+}
+
+int zocl_sync_bo_ioctl(struct drm_device *dev,
+		void *data,
+		struct drm_file *filp)
+{
+	const struct drm_zocl_sync_bo *args = data;
+	struct drm_gem_object *gem_obj = drm_gem_object_lookup(dev, filp,
+							       args->handle);
+	void *kaddr;
+	int ret = 0;
+
+	DRM_DEBUG("%s:%s:%d: %p\n", __FILE__, __func__, __LINE__, data);
+
+	if (!gem_obj) {
+		DRM_ERROR("Failed to look up GEM BO %d\n", args->handle);
+		return -EINVAL;
+	}
+
+	if ((args->offset > gem_obj->size) || (args->size > gem_obj->size) ||
+		((args->offset + args->size) > gem_obj->size)) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	kaddr = drm_gem_cma_prime_vmap(gem_obj);
+
+	/* only invalidate the range of addresses requested by the user */
+	kaddr += args->offset;
+
+	if (args->dir == DRM_ZOCL_SYNC_BO_TO_DEVICE)
+		flush_kernel_vmap_range(kaddr, args->size);
+	else if (args->dir == DRM_ZOCL_SYNC_BO_FROM_DEVICE)
+		invalidate_kernel_vmap_range(kaddr, args->size);
+	else
+		ret = -EINVAL;
+
+out:
+	drm_gem_object_unreference_unlocked(gem_obj);
+
+	return ret;
+}
+
+int zocl_info_bo_ioctl(struct drm_device *dev,
+		void *data,
+		struct drm_file *filp)
+{
+	const struct drm_zocl_bo *bo;
+	struct drm_zocl_info_bo *args = data;
+	struct drm_gem_object *gem_obj = drm_gem_object_lookup(dev, filp,
+							       args->handle);
+
+	DRM_DEBUG("%s:%s:%d: %p\n", __FILE__, __func__, __LINE__, data);
+
+	if (!gem_obj) {
+		DRM_ERROR("Failed to look up GEM BO %d\n", args->handle);
+		return -EINVAL;
+	}
+
+	bo = to_zocl_bo(gem_obj);
+
+	args->size = bo->base.base.size;
+	args->paddr = bo->base.paddr;
+	drm_gem_object_unreference_unlocked(gem_obj);
+
+	return 0;
+}
+
+int zocl_pwrite_bo_ioctl(struct drm_device *dev, void *data,
+		struct drm_file *filp)
+{
+	const struct drm_zocl_pwrite_bo *args = data;
+	struct drm_gem_object *gem_obj = drm_gem_object_lookup(dev, filp,
+							       args->handle);
+	char __user *user_data = to_user_ptr(args->data_ptr);
+	int ret = 0;
+	void *kaddr;
+
+	DRM_DEBUG("%s:%s:%d: %p\n", __FILE__, __func__, __LINE__, data);
+
+	if (!gem_obj) {
+		DRM_ERROR("Failed to look up GEM BO %d\n", args->handle);
+		return -EINVAL;
+	}
+
+	if ((args->offset > gem_obj->size) || (args->size > gem_obj->size)
+		|| ((args->offset + args->size) > gem_obj->size)) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	if (args->size == 0) {
+		ret = 0;
+		goto out;
+	}
+
+	if (!access_ok(VERIFY_READ, user_data, args->size)) {
+		ret = -EFAULT;
+		goto out;
+	}
+
+	kaddr = drm_gem_cma_prime_vmap(gem_obj);
+	kaddr += args->offset;
+
+	ret = copy_from_user(kaddr, user_data, args->size);
+out:
+	drm_gem_object_unreference_unlocked(gem_obj);
+
+	return ret;
+}
+
+int zocl_pread_bo_ioctl(struct drm_device *dev, void *data,
+		struct drm_file *filp)
+{
+	const struct drm_zocl_pread_bo *args = data;
+	struct drm_gem_object *gem_obj = drm_gem_object_lookup(dev, filp,
+							       args->handle);
+	char __user *user_data = to_user_ptr(args->data_ptr);
+	int ret = 0;
+	void *kaddr;
+
+	DRM_DEBUG("%s:%s:%d: %p\n", __FILE__, __func__, __LINE__, data);
+
+	if (!gem_obj) {
+		DRM_ERROR("Failed to look up GEM BO %d\n", args->handle);
+		return -EINVAL;
+	}
+
+	if ((args->offset > gem_obj->size) || (args->size > gem_obj->size)
+		|| ((args->offset + args->size) > gem_obj->size)) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	if (args->size == 0) {
+		ret = 0;
+		goto out;
+	}
+
+	if (!access_ok(VERIFY_WRITE, user_data, args->size)) {
+		ret = EFAULT;
+		goto out;
+	}
+
+	kaddr = drm_gem_cma_prime_vmap(gem_obj);
+	kaddr += args->offset;
+
+	ret = copy_to_user(user_data, kaddr, args->size);
+
+out:
+	drm_gem_object_unreference_unlocked(gem_obj);
+
+	return ret;
+}
diff --git a/drivers/gpu/drm/zocl/zocl_drv.c b/drivers/gpu/drm/zocl/zocl_drv.c
new file mode 100644
index 0000000..9b05de3
--- /dev/null
+++ b/drivers/gpu/drm/zocl/zocl_drv.c
@@ -0,0 +1,217 @@
+/*
+ * A GEM style CMA backed memory manager for ZynQ based OpenCL accelerators.
+ *
+ * Copyright (C) 2016 Xilinx, Inc. All rights reserved.
+ *
+ * Authors:
+ *    Sonal Santan <sonal.santan@xilinx.com>
+ *    Umang Parekh <umang.parekh@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/dma-buf.h>
+#include <linux/module.h>
+#include <linux/ramfs.h>
+#include <linux/shmem_fs.h>
+#include "zocl_drv.h"
+#include <drm/drmP.h>
+#include <drm/drm_gem.h>
+#include <linux/zocl_ioctl.h>
+
+#define ZOCL_DRIVER_NAME        "zocl"
+#define ZOCL_DRIVER_DESC        "Zynq BO manager"
+#define ZOCL_DRIVER_DATE        "20161024"
+#define ZOCL_DRIVER_MAJOR       2016
+#define ZOCL_DRIVER_MINOR       3
+#define ZOCL_DRIVER_PATCHLEVEL  1
+#define ZOCL_FILE_PAGE_OFFSET   0x00100000
+
+#ifndef VM_RESERVED
+#define VM_RESERVED (VM_DONTEXPAND | VM_DONTDUMP)
+#endif
+
+static const struct vm_operations_struct reg_physical_vm_ops = {
+#ifdef CONFIG_HAVE_IOREMAP_PROT
+	.access = generic_access_phys,
+#endif
+};
+
+static int zocl_drm_load(struct drm_device *drm, unsigned long flags)
+{
+	struct platform_device *pdev;
+	struct resource *res;
+	struct drm_zocl_dev *zdev;
+	void __iomem *map;
+
+	pdev = to_platform_device(drm->dev);
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	map = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(map)) {
+		DRM_ERROR("Failed to map registers: %ld\n", PTR_ERR(map));
+		return PTR_ERR(map);
+	}
+
+	zdev = devm_kzalloc(drm->dev, sizeof(*zdev), GFP_KERNEL);
+	if (!zdev)
+		return -ENOMEM;
+
+	zdev->ddev = drm;
+	drm->dev_private = zdev;
+	zdev->regs = map;
+	zdev->res_start = res->start;
+	zdev->res_len = resource_size(res);
+	platform_set_drvdata(pdev, zdev);
+
+	return 0;
+}
+
+static int zocl_drm_unload(struct drm_device *drm)
+{
+	return 0;
+}
+
+static void zocl_free_object(struct drm_gem_object *obj)
+{
+	struct drm_zocl_bo *zocl_obj = to_zocl_bo(obj);
+
+	DRM_INFO("Freeing BO\n");
+	zocl_describe(zocl_obj);
+	drm_gem_cma_free_object(obj);
+}
+
+static int zocl_mmap(struct file *filp, struct vm_area_struct *vma)
+{
+	struct drm_file *priv = filp->private_data;
+	struct drm_device *dev = priv->minor->dev;
+	struct drm_zocl_dev *zdev = dev->dev_private;
+	unsigned long vsize;
+	int rc;
+
+	/* If the page offset is > than 4G, then let GEM handle that and do what
+	 * it thinks is best,we will only handle page offsets less than 4G.
+	 */
+	if (likely(vma->vm_pgoff >= ZOCL_FILE_PAGE_OFFSET))
+		return drm_gem_cma_mmap(filp, vma);
+
+	if (vma->vm_pgoff != 0)
+		return -EINVAL;
+
+	vsize = vma->vm_end - vma->vm_start;
+	if (vsize > zdev->res_len)
+		return -EINVAL;
+
+	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
+	vma->vm_flags |= VM_IO;
+	vma->vm_flags |= VM_RESERVED;
+
+	vma->vm_ops = &reg_physical_vm_ops;
+	rc = io_remap_pfn_range(vma, vma->vm_start,
+				zdev->res_start >> PAGE_SHIFT,
+				vsize, vma->vm_page_prot);
+
+	return rc;
+}
+
+static const struct drm_ioctl_desc zocl_ioctls[] = {
+	DRM_IOCTL_DEF_DRV(ZOCL_CREATE_BO, zocl_create_bo_ioctl,
+			  DRM_AUTH|DRM_UNLOCKED|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(ZOCL_MAP_BO, zocl_map_bo_ioctl,
+			  DRM_AUTH|DRM_UNLOCKED|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(ZOCL_SYNC_BO, zocl_sync_bo_ioctl,
+			  DRM_AUTH|DRM_UNLOCKED|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(ZOCL_INFO_BO, zocl_info_bo_ioctl,
+			  DRM_AUTH|DRM_UNLOCKED|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(ZOCL_PWRITE_BO, zocl_pwrite_bo_ioctl,
+			  DRM_AUTH|DRM_UNLOCKED|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(ZOCL_PREAD_BO, zocl_pread_bo_ioctl,
+			  DRM_AUTH|DRM_UNLOCKED|DRM_RENDER_ALLOW),
+};
+
+static const struct file_operations zocl_driver_fops = {
+	.owner		= THIS_MODULE,
+	.open		= drm_open,
+	.mmap		= zocl_mmap,
+	.poll		= drm_poll,
+	.read		= drm_read,
+	.unlocked_ioctl = drm_ioctl,
+	.release	= drm_release,
+};
+
+static struct drm_driver zocl_driver = {
+	.driver_features		= DRIVER_GEM | DRIVER_PRIME |
+					  DRIVER_RENDER,
+	.load				= zocl_drm_load,
+	.unload				= zocl_drm_unload,
+	.gem_free_object		= zocl_free_object,
+	.gem_vm_ops			= &drm_gem_cma_vm_ops,
+	.prime_handle_to_fd		= drm_gem_prime_handle_to_fd,
+	.prime_fd_to_handle		= drm_gem_prime_fd_to_handle,
+	.gem_prime_import		= drm_gem_prime_import,
+	.gem_prime_export		= drm_gem_prime_export,
+	.gem_prime_get_sg_table		= drm_gem_cma_prime_get_sg_table,
+	.gem_prime_import_sg_table	= drm_gem_cma_prime_import_sg_table,
+	.gem_prime_vmap			= drm_gem_cma_prime_vmap,
+	.gem_prime_vunmap		= drm_gem_cma_prime_vunmap,
+	.gem_prime_mmap			= drm_gem_cma_prime_mmap,
+	.ioctls				= zocl_ioctls,
+	.num_ioctls			= ARRAY_SIZE(zocl_ioctls),
+	.fops				= &zocl_driver_fops,
+	.name				= ZOCL_DRIVER_NAME,
+	.desc				= ZOCL_DRIVER_DESC,
+	.date				= ZOCL_DRIVER_DATE,
+	.major				= ZOCL_DRIVER_MAJOR,
+	.minor				= ZOCL_DRIVER_MINOR,
+	.patchlevel			= ZOCL_DRIVER_PATCHLEVEL,
+};
+
+/* init xilinx opencl drm platform */
+static int zocl_drm_platform_probe(struct platform_device *pdev)
+{
+	return drm_platform_init(&zocl_driver, pdev);
+}
+
+/* exit xilinx opencl drm platform */
+static int zocl_drm_platform_remove(struct platform_device *pdev)
+{
+	struct drm_zocl_dev *zdev = platform_get_drvdata(pdev);
+
+	if (zdev->ddev) {
+		drm_dev_unregister(zdev->ddev);
+		drm_dev_unref(zdev->ddev);
+	}
+
+	return 0;
+}
+
+static const struct of_device_id zocl_drm_of_match[] = {
+	{ .compatible = "xlnx,zocl", },
+	{ /* end of table */ },
+};
+MODULE_DEVICE_TABLE(of, zocl_drm_of_match);
+
+static struct platform_driver zocl_drm_private_driver = {
+	.probe			= zocl_drm_platform_probe,
+	.remove			= zocl_drm_platform_remove,
+	.driver			= {
+		.name		= "zocl-drm",
+		.of_match_table	= zocl_drm_of_match,
+	},
+};
+
+module_platform_driver(zocl_drm_private_driver);
+
+MODULE_VERSION(__stringify(ZOCL_DRIVER_MAJOR) "."
+		__stringify(ZOCL_DRIVER_MINOR) "."
+		__stringify(ZOCL_DRIVER_PATCHLEVEL));
+
+MODULE_DESCRIPTION(ZOCL_DRIVER_DESC);
+MODULE_AUTHOR("Sonal Santan <sonal.santan@xilinx.com>");
+MODULE_LICENSE("GPL");
diff --git a/drivers/gpu/drm/zocl/zocl_drv.h b/drivers/gpu/drm/zocl/zocl_drv.h
new file mode 100644
index 0000000..ef6a9ac
--- /dev/null
+++ b/drivers/gpu/drm/zocl/zocl_drv.h
@@ -0,0 +1,59 @@
+/*
+ * A GEM style CMA backed memory manager for ZynQ based OpenCL accelerators.
+ *
+ * Copyright (C) 2016 Xilinx, Inc. All rights reserved.
+ *
+ * Authors:
+ *    Sonal Santan <sonal.santan@xilinx.com>
+ *    Umang Parekh <umang.parekh@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _ZOCL_DRV_H_
+#define _ZOCL_DRV_H_
+#include <drm/drmP.h>
+#include <drm/drm_gem.h>
+#include <drm/drm_mm.h>
+#include <drm/drm_gem_cma_helper.h>
+
+struct drm_zocl_bo {
+	struct drm_gem_cma_object base;
+	uint32_t                  flags;
+};
+
+struct drm_zocl_dev {
+	struct drm_device       *ddev;
+	void __iomem            *regs;
+	phys_addr_t              res_start;
+	resource_size_t          res_len;
+	unsigned int             irq;
+};
+
+static inline struct drm_zocl_bo *to_zocl_bo(struct drm_gem_object *bo)
+{
+	return (struct drm_zocl_bo *) bo;
+}
+
+int zocl_create_bo_ioctl(struct drm_device *dev, void *data,
+			 struct drm_file *filp);
+int zocl_sync_bo_ioctl(struct drm_device *dev, void *data,
+		       struct drm_file *filp);
+int zocl_map_bo_ioctl(struct drm_device *dev, void *data,
+		      struct drm_file *filp);
+int zocl_info_bo_ioctl(struct drm_device *dev, void *data,
+		       struct drm_file *filp);
+int zocl_pwrite_bo_ioctl(struct drm_device *dev, void *data,
+			 struct drm_file *filp);
+int zocl_pread_bo_ioctl(struct drm_device *dev, void *data,
+			struct drm_file *filp);
+void zocl_describe(const struct drm_zocl_bo *obj);
+
+#endif
diff --git a/include/uapi/linux/Kbuild b/include/uapi/linux/Kbuild
index befa784..48d70ee 100644
--- a/include/uapi/linux/Kbuild
+++ b/include/uapi/linux/Kbuild
@@ -471,6 +471,7 @@ header-y += xfrm.h
 header-y += xilinx-csi2rxss.h
 header-y += xilinx-hls.h
 header-y += xilinx-v4l2-controls.h
+header-y += zocl_ioctl.h
 header-y += zorro.h
 header-y += zorro_ids.h
 header-y += userfaultfd.h
diff --git a/include/uapi/linux/zocl_ioctl.h b/include/uapi/linux/zocl_ioctl.h
new file mode 100644
index 0000000..ee1f1e2
--- /dev/null
+++ b/include/uapi/linux/zocl_ioctl.h
@@ -0,0 +1,125 @@
+/*
+ * A GEM style CMA backed memory manager for ZynQ based OpenCL accelerators.
+ *
+ * Copyright (C) 2016 Xilinx, Inc. All rights reserved.
+ *
+ * Authors:
+ *    Sonal Santan <sonal.santan@xilinx.com>
+ *    Umang Parekh <umang.parekh@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _XCL_ZOCL_IOCTL_H_
+#define _XCL_ZOCL_IOCTL_H_
+
+enum {
+	DRM_ZOCL_CREATE_BO = 0,
+	DRM_ZOCL_MAP_BO,
+	DRM_ZOCL_SYNC_BO,
+	DRM_ZOCL_INFO_BO,
+	DRM_ZOCL_PWRITE_BO,
+	DRM_ZOCL_PREAD_BO,
+	DRM_ZOCL_NUM_IOCTLS
+};
+
+enum drm_zocl_sync_bo_dir {
+	DRM_ZOCL_SYNC_BO_TO_DEVICE,
+	DRM_ZOCL_SYNC_BO_FROM_DEVICE
+};
+
+#define DRM_ZOCL_BO_FLAGS_COHERENT   0x00000001
+#define DRM_ZOCL_BO_FLAGS_CMA        0x00000002
+
+struct drm_zocl_create_bo {
+	uint64_t size;
+	uint32_t handle;
+	uint32_t flags;
+};
+
+struct drm_zocl_map_bo {
+	uint32_t handle;
+	uint32_t pad;
+	uint64_t offset;
+};
+
+/**
+ * struct drm_zocl_sync_bo - used for SYNQ_BO IOCTL
+ * @handle:	GEM object handle
+ * @dir:	DRM_ZOCL_SYNC_DIR_XXX
+ * @offset:	Offset into the object to write to
+ * @size:	Length of data to write
+ */
+struct drm_zocl_sync_bo {
+	uint32_t handle;
+	enum drm_zocl_sync_bo_dir dir;
+	uint64_t offset;
+	uint64_t size;
+};
+
+/**
+ * struct drm_zocl_info_bo - used for INFO_BO IOCTL
+ * @handle:	GEM object handle
+ * @size:	Size of BO
+ * @paddr:	physical address
+ */
+struct drm_zocl_info_bo {
+	uint32_t	handle;
+	uint64_t	size;
+	uint64_t	paddr;
+};
+
+/**
+ * struct drm_zocl_pwrite_bo - used for PWRITE_BO IOCTL
+ * @handle:	GEM object handle
+ * @pad:	Padding
+ * @offset:	Offset into the object to write to
+ * @size:	Length of data to write
+ * @data_ptr:	Pointer to read the data from (pointers not 32/64 compatible)
+ */
+struct drm_zocl_pwrite_bo {
+	uint32_t handle;
+	uint32_t pad;
+	uint64_t offset;
+	uint64_t size;
+	uint64_t data_ptr;
+};
+
+/**
+ * struct drm_zocl_pread_bo - used for PREAD_BO IOCTL
+ * @handle:	GEM object handle
+ * @pad:	Padding
+ * @offset:	Offset into the object to read from
+ * @size:	Length of data to wrreadite
+ * @data_ptr:	Pointer to write the data into (pointers not 32/64 compatible)
+ */
+struct drm_zocl_pread_bo {
+	uint32_t handle;
+	uint32_t pad;
+	uint64_t offset;
+	uint64_t size;
+	uint64_t data_ptr;
+};
+
+#define DRM_IOCTL_ZOCL_CREATE_BO   DRM_IOWR(DRM_COMMAND_BASE + \
+				   DRM_ZOCL_CREATE_BO, \
+				   struct drm_zocl_create_bo)
+#define DRM_IOCTL_ZOCL_MAP_BO      DRM_IOWR(DRM_COMMAND_BASE + \
+				   DRM_ZOCL_MAP_BO, struct drm_zocl_map_bo)
+#define DRM_IOCTL_ZOCL_SYNC_BO     DRM_IOWR(DRM_COMMAND_BASE + \
+				   DRM_ZOCL_SYNC_BO, struct drm_zocl_sync_bo)
+#define DRM_IOCTL_ZOCL_INFO_BO     DRM_IOWR(DRM_COMMAND_BASE + \
+				   DRM_ZOCL_INFO_BO, struct drm_zocl_info_bo)
+#define DRM_IOCTL_ZOCL_PWRITE_BO   DRM_IOWR(DRM_COMMAND_BASE + \
+				   DRM_ZOCL_PWRITE_BO, \
+				   struct drm_zocl_pwrite_bo)
+#define DRM_IOCTL_ZOCL_PREAD_BO    DRM_IOWR(DRM_COMMAND_BASE + \
+				   DRM_ZOCL_PREAD_BO, struct drm_zocl_pread_bo)
+#endif
-- 
1.7.5.4

