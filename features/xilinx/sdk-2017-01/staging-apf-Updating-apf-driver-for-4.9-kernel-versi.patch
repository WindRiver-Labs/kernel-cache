From 7ca0eaaa1b216ff006fd71f37189218152df352d Mon Sep 17 00:00:00 2001
From: Michael Gill <michael.gill@xilinx.com>
Date: Thu, 23 Feb 2017 18:32:19 -0800
Subject: [PATCH 1360/1566] staging: apf: Updating apf driver for 4.9 kernel
 version

commit  d41696969cb3eb5be69777c0a8cf2a5cc8dae03b from
https://github.com/Xilinx/linux-xlnx.git

The move from 4.6 to 4.9 broke some things in the apf kernel
driver.  Due to petalinux build issues, I'd been unable to
resolve it until now.  This patch resolves the breaking changes.

Signed-off-by: Michael Gill <gill@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c |   22 +++++++++++-----------
 drivers/staging/apf/xlnk.c           |   11 ++++++-----
 2 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index 4bfe62d..997e7c95 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -24,7 +24,6 @@
 #include <linux/dmapool.h>
 #include <linux/slab.h>
 #include <linux/dma-mapping.h>
-#include <linux/dma-attrs.h>
 #include <linux/pagemap.h>
 #include <linux/device.h>
 #include <linux/types.h>
@@ -658,7 +657,8 @@ static int pin_user_pages(xlnk_intptr_type uaddr,
 		return -ENOMEM;
 
 	down_read(&mm->mmap_sem);
-	status = get_user_pages(uaddr, num_pages, write, 1,
+	status = get_user_pages(uaddr, num_pages,
+				(write ? FOLL_WRITE : 0) | FOLL_FORCE,
 				mapped_pages, NULL);
 	up_read(&mm->mmap_sem);
 
@@ -790,7 +790,7 @@ int xdma_submit(struct xdma_chan *chan,
 	unsigned int sgcnt, sgcnt_dma;
 	enum dma_data_direction dmadir;
 	int status;
-	DEFINE_DMA_ATTRS(attrs);
+	unsigned long attrs = 0;
 
 	dmahead = kzalloc(sizeof(struct xdma_head), GFP_KERNEL);
 	if (!dmahead)
@@ -805,7 +805,7 @@ int xdma_submit(struct xdma_chan *chan,
 	dmadir = chan->direction;
 
 	if (!(user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE))
-		dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
+		attrs |= DMA_ATTR_SKIP_CPU_SYNC;
 
 	if (dp) {
 		int i;
@@ -863,7 +863,7 @@ int xdma_submit(struct xdma_chan *chan,
 							sglist,
 							sgcnt,
 							dmadir,
-							&attrs);
+							attrs);
 
 		if (!status) {
 			pr_err("sg contiguous mapping failed\n");
@@ -879,7 +879,7 @@ int xdma_submit(struct xdma_chan *chan,
 		}
 
 		status = get_dma_ops(chan->dev)->map_sg(chan->dev, sglist,
-							sgcnt, dmadir, &attrs);
+							sgcnt, dmadir, attrs);
 		if (!status) {
 			pr_err("dma_map_sg failed\n");
 			unpin_user_pages(sglist, sgcnt);
@@ -891,7 +891,7 @@ int xdma_submit(struct xdma_chan *chan,
 		sgcnt_dma = sgl_merge(sglist, sgcnt, sglist_dma);
 		if (!sgcnt_dma) {
 			get_dma_ops(chan->dev)->unmap_sg(chan->dev, sglist,
-							 sgcnt, dmadir, &attrs);
+							 sgcnt, dmadir, attrs);
 			unpin_user_pages(sglist, sgcnt);
 			return -ENOMEM;
 		}
@@ -916,7 +916,7 @@ int xdma_submit(struct xdma_chan *chan,
 		pr_err("setup hw desc failed\n");
 		if (!(user_flags & CF_FLAG_PHYSICALLY_CONTIGUOUS)) {
 			get_dma_ops(chan->dev)->unmap_sg(chan->dev, sglist,
-							 sgcnt, dmadir, &attrs);
+							 sgcnt, dmadir, attrs);
 			unpin_user_pages(sglist, sgcnt);
 		}
 		return -ENOMEM;
@@ -932,7 +932,7 @@ int xdma_wait(struct xdma_head *dmahead,
 	      unsigned int *operating_flags)
 {
 	struct xdma_chan *chan = dmahead->chan;
-	DEFINE_DMA_ATTRS(attrs);
+	unsigned long attrs;
 
 	if (chan->poll_mode) {
 		xilinx_chan_desc_cleanup(chan);
@@ -957,13 +957,13 @@ int xdma_wait(struct xdma_head *dmahead,
 			       dmahead->dmabuf->dbuf_attach);
 	} else {
 		if (!(user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE))
-			dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
+			attrs |= DMA_ATTR_SKIP_CPU_SYNC;
 
 		get_dma_ops(chan->dev)->unmap_sg(chan->dev,
 						 dmahead->sglist,
 						 dmahead->sgcnt,
 						 dmahead->dmadir,
-						 &attrs);
+						 attrs);
 		if (!(user_flags & CF_FLAG_PHYSICALLY_CONTIGUOUS))
 			unpin_user_pages(dmahead->sglist, dmahead->sgcnt);
 	}
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index 37c2cdd..9033861 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -1135,7 +1135,8 @@ static int xlnk_dmasubmit_ioctl(struct file *filp, unsigned int code,
 			down_read(&current->mm->mmap_sem);
 			locked_page_count =
 				get_user_pages(first_page * PAGE_SIZE,
-					       t->sg_list_size, 1, 1,
+					       t->sg_list_size,
+					       FOLL_FORCE | FOLL_WRITE,
 					       xlnk_page_store, NULL);
 			up_read(&current->mm->mmap_sem);
 			if (locked_page_count != t->sg_list_size) {
@@ -1540,7 +1541,7 @@ static int xlnk_memop_ioctl(struct file *filp, unsigned long arg_addr)
 	xlnk_intptr_type page_id;
 	unsigned int page_offset;
 	struct scatterlist sg;
-	DEFINE_DMA_ATTRS(attrs);
+	unsigned long attrs = 0;
 
 	status = copy_from_user(&args,
 				(void __user *)arg_addr,
@@ -1592,7 +1593,7 @@ static int xlnk_memop_ioctl(struct file *filp, unsigned long arg_addr)
 	dmadir = (enum dma_data_direction)args.memop.dir;
 
 	if (args.memop.flags & XLNK_FLAG_COHERENT || !cacheable) {
-		dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
+		attrs |= DMA_ATTR_SKIP_CPU_SYNC;
 	}
 
 	if (buf_id > 0) {
@@ -1612,7 +1613,7 @@ static int xlnk_memop_ioctl(struct file *filp, unsigned long arg_addr)
 							       &sg,
 							       1,
 							       dmadir,
-							       &attrs);
+							       attrs);
 			if (!status) {
 				pr_err("Failed to map address\n");
 				return -EINVAL;
@@ -1654,7 +1655,7 @@ static int xlnk_memop_ioctl(struct file *filp, unsigned long arg_addr)
 							&sg,
 							1,
 							dmadir,
-							&attrs);
+							attrs);
 		} else {
 			dma_buf_unmap_attachment(cp->dbuf_attach,
 						 cp->dbuf_sg_table,
-- 
1.7.5.4

