From eb5d2f7f66ab2b0aa06b5250f9a71a6b38bb6017 Mon Sep 17 00:00:00 2001
From: Wendy Liang <wendy.liang@xilinx.com>
Date: Tue, 7 Mar 2017 23:09:12 -0800
Subject: [PATCH 1412/1566] remoteproc: zynq: move cpu_down from probe

commit  d6738c7f3c54ed3752fc18aa0b99cfe5863e2fbe from
https://github.com/Xilinx/linux-xlnx.git

This patch is to workaround the issue with the latest udev
in rootfs.

As long as there is device nodes in the device tree, udev
will load the modules during init.

If cpu_down take some time to take down the CPU, udev will
report it is taking long time, and Linux cannot go to login
prompt.

I move the cpu_down from probe() to start() to avoid this
issue.

Signed-off-by: Wendy Liang <jliang@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/remoteproc/zynq_remoteproc.c |   62 +++++++++++++++++++++++-----------
 1 files changed, 42 insertions(+), 20 deletions(-)

diff --git a/drivers/remoteproc/zynq_remoteproc.c b/drivers/remoteproc/zynq_remoteproc.c
index 6629174..050e7ce 100644
--- a/drivers/remoteproc/zynq_remoteproc.c
+++ b/drivers/remoteproc/zynq_remoteproc.c
@@ -57,6 +57,7 @@ struct irq_list {
 struct ipi_info {
 	u32 irq;
 	u32 notifyid;
+	bool pending;
 };
 
 /* On-chip memory pool element */
@@ -96,6 +97,22 @@ static void ipi_kick(void)
 	schedule_work(&workqueue);
 }
 
+static void kick_pending_ipi(struct rproc *rproc)
+{
+	struct zynq_rproc_pdata *local = rproc->priv;
+	int i;
+
+	for (i = 0; i < MAX_NUM_VRINGS; i++) {
+
+		/* Send swirq to firmware */
+		if (local->ipis[i].pending == true) {
+			gic_raise_softirq(cpumask_of(1),
+					local->ipis[i].irq);
+			local->ipis[i].pending = false;
+		}
+	}
+}
+
 static int zynq_rproc_start(struct rproc *rproc)
 {
 	struct device *dev = rproc->dev.parent;
@@ -104,7 +121,16 @@ static int zynq_rproc_start(struct rproc *rproc)
 	dev_dbg(dev, "%s\n", __func__);
 	INIT_WORK(&workqueue, handle_event);
 
+	ret = cpu_down(1);
+	/* EBUSY means CPU is already released */
+	if (ret && (ret != -EBUSY)) {
+		dev_err(dev, "Can't release cpu1\n");
+		return ret;
+	}
+
 	ret = zynq_cpun_start(rproc->bootaddr, 1);
+	/* Trigger pending kicks */
+	kick_pending_ipi(rproc);
 
 	return ret;
 }
@@ -128,8 +154,14 @@ static void zynq_rproc_kick(struct rproc *rproc, int vqid)
 			/* Send swirq to firmware */
 			if (rvring->notifyid == vqid) {
 				local->ipis[i].notifyid = vqid;
-				gic_raise_softirq(cpumask_of(1),
+				/* As we do not turn off CPU1 until start,
+				 * we delay firmware kick
+				 */
+				if (rproc->state == RPROC_RUNNING)
+					gic_raise_softirq(cpumask_of(1),
 						local->ipis[i].irq);
+				else
+					local->ipis[i].pending = true;
 			}
 		}
 
@@ -139,9 +171,16 @@ static void zynq_rproc_kick(struct rproc *rproc, int vqid)
 /* power off the remote processor */
 static int zynq_rproc_stop(struct rproc *rproc)
 {
+	int ret;
+	struct device *dev = rproc->dev.parent;
+
 	dev_dbg(rproc->dev.parent, "%s\n", __func__);
 
-	/* FIXME missing reset option */
+	/* Cpu can't be power on - for example in nosmp mode */
+	ret = cpu_up(1);
+	if (ret)
+		dev_err(dev, "Can't power on cpu1 %d\n", ret);
+
 	return 0;
 }
 
@@ -263,20 +302,13 @@ static int __devinit zynq_remoteproc_probe(struct platform_device *pdev)
 	char mem_name[16];
 	int i;
 
-	ret = cpu_down(1);
-	/* EBUSY means CPU is already released */
-	if (ret && (ret != -EBUSY)) {
-		dev_err(&pdev->dev, "Can't release cpu1\n");
-		return ret;
-	}
-
 	rproc = rproc_alloc(&pdev->dev, dev_name(&pdev->dev),
 		&zynq_rproc_ops, firmware,
 		sizeof(struct zynq_rproc_pdata));
 	if (!rproc) {
 		dev_err(&pdev->dev, "rproc allocation failed\n");
 		ret = -ENOMEM;
-		goto cpu_down_fault;
+		return ret;
 	}
 	local = rproc->priv;
 	local->rproc = rproc;
@@ -409,10 +441,6 @@ irq_fault:
 dma_mask_fault:
 	rproc_free(rproc);
 
-cpu_down_fault:
-	if (cpu_up(1)) /* Cpu can't power on for example in nosmp mode */
-		dev_err(&pdev->dev, "Can't power on cpu1\n");
-
 	return ret;
 }
 
@@ -421,7 +449,6 @@ static int __devexit zynq_remoteproc_remove(struct platform_device *pdev)
 	struct rproc *rproc = platform_get_drvdata(pdev);
 	struct zynq_rproc_pdata *local = rproc->priv;
 	struct rproc_mem_entry *mem;
-	u32 ret;
 
 	dev_info(&pdev->dev, "%s\n", __func__);
 
@@ -438,11 +465,6 @@ static int __devexit zynq_remoteproc_remove(struct platform_device *pdev)
 
 	rproc_free(rproc);
 
-	/* Cpu can't be power on - for example in nosmp mode */
-	ret = cpu_up(1);
-	if (ret)
-		dev_err(&pdev->dev, "Can't power on cpu1 %d\n", ret);
-
 	return 0;
 }
 
-- 
1.7.5.4

