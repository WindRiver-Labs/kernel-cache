From 7a68874d9839bc6b38c6fbd7524f58e1668b6cbd Mon Sep 17 00:00:00 2001
From: Michal Simek <michal.simek@xilinx.com>
Date: Tue, 14 Feb 2017 14:37:15 +0100
Subject: [PATCH 1324/1566] fpga: Add support for PR Decoupler fpga bridge

commit  29a705275729be860110796d8bc65d8fc9b4065b from
https://github.com/Xilinx/linux-xlnx.git

Add driver is able to handle logical isolation of
PR region (Reconfiguration partition).
Driver requires clk to be present and MMIO access.

Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/fpga/Kconfig               |    7 ++
 drivers/fpga/Makefile              |    1 +
 drivers/fpga/xilinx-pr-decoupler.c |  122 ++++++++++++++++++++++++++++++++++++
 3 files changed, 130 insertions(+), 0 deletions(-)
 create mode 100644 drivers/fpga/xilinx-pr-decoupler.c

diff --git a/drivers/fpga/Kconfig b/drivers/fpga/Kconfig
index 62f033d..7f9152e 100644
--- a/drivers/fpga/Kconfig
+++ b/drivers/fpga/Kconfig
@@ -44,6 +44,13 @@ config FPGA_BRIDGE
 	  Say Y here if you want to support bridges connected between host
 	  processors and FPGAs or between FPGAs.
 
+config XILINX_PR_DECOUPLER
+	tristate "Xilinx PR Decoupler"
+	depends on FPGA_BRIDGE
+	help
+	  Say Y to enable drivers for Xilinx PR Decoupler. For more information
+	  look at pg227.pdf.
+
 endif # FPGA
 
 endmenu
diff --git a/drivers/fpga/Makefile b/drivers/fpga/Makefile
index fdecb14..95de0e9 100644
--- a/drivers/fpga/Makefile
+++ b/drivers/fpga/Makefile
@@ -12,6 +12,7 @@ obj-$(CONFIG_FPGA_MGR_ZYNQMP_FPGA)	+= zynqmp-fpga.o
 
 # FPGA Bridge Drivers
 obj-$(CONFIG_FPGA_BRIDGE)		+= fpga-bridge.o
+obj-$(CONFIG_XILINX_PR_DECOUPLER)	+= xilinx-pr-decoupler.o
 
 # High Level Interfaces
 obj-$(CONFIG_FPGA_REGION)		+= fpga-region.o
diff --git a/drivers/fpga/xilinx-pr-decoupler.c b/drivers/fpga/xilinx-pr-decoupler.c
new file mode 100644
index 0000000..08caadb
--- /dev/null
+++ b/drivers/fpga/xilinx-pr-decoupler.c
@@ -0,0 +1,122 @@
+/*
+ * Copyright (c) 2017 Xilinx Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ */
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/fpga/fpga-bridge.h>
+
+struct pr_decoupler_priv {
+	void __iomem *base;
+	struct device *dev;
+	struct clk *clk;
+};
+
+/* 1 - decouple, 0 - normal */
+#define DECOUPLE	1
+#define NORMAL		0
+
+static int pr_decoupler_enable_set(struct fpga_bridge *bridge, bool enable)
+{
+	struct pr_decoupler_priv *priv = bridge->priv;
+	struct device *dev = priv->dev;
+
+	if (enable) {
+		dev_dbg(dev, "Normal mode - traffic can go through\n");
+		writel(NORMAL, priv->base);
+	} else {
+		dev_dbg(dev, "Decouple mode - traffic can't go through\n");
+		writel(DECOUPLE, priv->base);
+	}
+
+	return 0;
+}
+
+static int pr_decoupler_enable_show(struct fpga_bridge *bridge)
+{
+	struct pr_decoupler_priv *priv = bridge->priv;
+
+	return !readl(priv->base);
+}
+
+static struct fpga_bridge_ops pr_decoupler_ops = {
+	.enable_set = pr_decoupler_enable_set,
+	.enable_show = pr_decoupler_enable_show,
+};
+
+static int pr_decoupler_probe(struct platform_device *pdev)
+{
+	struct pr_decoupler_priv *priv;
+	struct resource *res;
+	struct device *dev = &pdev->dev;
+	int ret;
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	priv->base = devm_ioremap_resource(dev, res);
+	if (IS_ERR(priv->base))
+		return PTR_ERR(priv->base);
+
+	priv->dev = dev;
+
+	priv->clk = devm_clk_get(dev, "aclk");
+	if (IS_ERR(priv->clk)) {
+		dev_err(dev, "Input clock not found\n");
+		return PTR_ERR(priv->clk);
+	}
+
+	ret = clk_prepare_enable(priv->clk);
+	if (ret) {
+		dev_err(&pdev->dev, "unable to enable clk\n");
+		return ret;
+	}
+
+	platform_set_drvdata(pdev, priv);
+
+	return fpga_bridge_register(dev, "pr_decoupler",
+				    &pr_decoupler_ops, priv);
+}
+
+static int pr_decoupler_remove(struct platform_device *pdev)
+{
+	struct pr_decoupler_priv *priv;
+
+	priv = platform_get_drvdata(pdev);
+	fpga_bridge_unregister(priv->dev);
+
+	clk_disable_unprepare(priv->clk);
+
+	return 0;
+}
+
+static const struct of_device_id pr_decoupler_of_match[] = {
+	{ .compatible = "xlnx,pr_decoupler", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, pr_decoupler_of_match);
+
+static struct platform_driver pr_decoupler_driver = {
+	.probe = pr_decoupler_probe,
+	.remove = pr_decoupler_remove,
+	.driver = {
+		.name	= "pr_decoupler",
+		.of_match_table = of_match_ptr(pr_decoupler_of_match),
+	},
+};
+
+module_platform_driver(pr_decoupler_driver);
+
+MODULE_DESCRIPTION("Xilinx PR Decoupler");
+MODULE_AUTHOR("Michal Simek <michal.simek@xilinx.com>");
+MODULE_LICENSE("GPL v2");
-- 
1.7.5.4

