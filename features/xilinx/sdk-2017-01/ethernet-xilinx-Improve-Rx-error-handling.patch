From 0abe5c6f7f3a43bad4e93366b3397a7f4a2e4b28 Mon Sep 17 00:00:00 2001
From: Kedareswara rao Appana <appana.durga.rao@xilinx.com>
Date: Tue, 10 Nov 2015 12:17:45 +0530
Subject: [PATCH 0605/1566] ethernet: xilinx: Improve Rx error handling

While running iperf in bi-directional mode seeing the
Receive memory overrun interrupts when reading through devmem the driver is not
updating the over run errors. This patch updates the same.

Signed-off-by: Kedareswara rao Appana <appanad@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_axienet.h      |    2 +
 drivers/net/ethernet/xilinx/xilinx_axienet_main.c |   48 +++++++++++++++++++++
 2 files changed, 50 insertions(+), 0 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet.h b/drivers/net/ethernet/xilinx/xilinx_axienet.h
index 1d12047..34103d7 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet.h
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet.h
@@ -407,6 +407,7 @@ struct axidma_bd {
  * @tx_lock:	Spin lock for tx path
  * @tx_irq:	Axidma TX IRQ number
  * @rx_irq:	Axidma RX IRQ number
+ * @eth_irq:	Axi Ethernet IRQ number
  * @phy_type:	Phy type to identify between MII/GMII/RGMII/SGMII/1000 Base-X
  * @options:	AxiEthernet option word
  * @last_link:	Phy link state in which the PHY was negotiated earlier
@@ -459,6 +460,7 @@ struct axienet_local {
 
 	int tx_irq;
 	int rx_irq;
+	int eth_irq;
 	u32 phy_type;
 
 	u32 options;			/* Current options word */
diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 7ec7e65..f79a38d 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -517,6 +517,9 @@ static void axienet_device_reset(struct net_device *ndev)
 		axienet_status = axienet_ior(lp, XAE_IP_OFFSET);
 		if (axienet_status & XAE_INT_RXRJECT_MASK)
 			axienet_iow(lp, XAE_IS_OFFSET, XAE_INT_RXRJECT_MASK);
+
+		/* Enable Receive errors */
+		axienet_iow(lp, XAE_IE_OFFSET, XAE_INT_RECV_ERROR_MASK);
 	}
 
 	axienet_iow(lp, XAE_FCC_OFFSET, XAE_FCC_FCRX_MASK);
@@ -1054,6 +1057,35 @@ static int xaxienet_rx_poll(struct napi_struct *napi, int quota)
 }
 
 /**
+ * axienet_err_irq - Axi Ethernet error irq.
+ * @irq:	irq number
+ * @_ndev:	net_device pointer
+ *
+ * Return: IRQ_HANDLED for all cases.
+ *
+ * This is the Axi DMA error ISR. It updates the rx memory over run condition.
+ */
+static irqreturn_t axienet_err_irq(int irq, void *_ndev)
+{
+	unsigned int status;
+	struct net_device *ndev = _ndev;
+	struct axienet_local *lp = netdev_priv(ndev);
+
+	status = axienet_ior(lp, XAE_IS_OFFSET);
+	if (status & XAE_INT_RXFIFOOVR_MASK) {
+		ndev->stats.rx_fifo_errors++;
+		axienet_iow(lp, XAE_IS_OFFSET, XAE_INT_RXFIFOOVR_MASK);
+	}
+
+	if (status & XAE_INT_RXRJECT_MASK) {
+		axienet_iow(lp, XAE_IS_OFFSET, XAE_INT_RXRJECT_MASK);
+		axienet_device_reset(ndev);
+	}
+
+	return IRQ_HANDLED;
+}
+
+/**
  * axienet_tx_irq - Tx Done Isr.
  * @irq:	irq number
  * @_ndev:	net_device pointer
@@ -1218,10 +1250,20 @@ static int axienet_open(struct net_device *ndev)
 	if (ret)
 		goto err_rx_irq;
 
+	if (!lp->eth_hasnobuf) {
+		/* Enable interrupts for Axi Ethernet */
+		ret = request_irq(lp->eth_irq, axienet_err_irq, 0, ndev->name,
+				  ndev);
+		if (ret)
+			goto err_eth_irq;
+	}
+
 	napi_enable(&lp->napi);
 
 	return 0;
 
+err_eth_irq:
+	free_irq(lp->rx_irq, ndev);
 err_rx_irq:
 	free_irq(lp->tx_irq, ndev);
 err_tx_irq:
@@ -1263,6 +1305,9 @@ static int axienet_stop(struct net_device *ndev)
 	free_irq(lp->tx_irq, ndev);
 	free_irq(lp->rx_irq, ndev);
 
+	if (!lp->eth_hasnobuf)
+		free_irq(lp->eth_irq, ndev);
+
 	if (ndev->phydev)
 		phy_disconnect(ndev->phydev);
 
@@ -1961,6 +2006,9 @@ static int axienet_probe(struct platform_device *pdev)
 	lp->eth_hasnobuf = of_property_read_bool(pdev->dev.of_node,
 						 "xlnx,eth-hasnobuf");
 
+	if (!lp->eth_hasnobuf)
+		lp->eth_irq = platform_get_irq(pdev, 0);
+
 #ifdef CONFIG_XILINX_AXI_EMAC_HWTSTAMP
 	struct resource txtsres;
 
-- 
1.7.5.4

