From 1d595752f6113832eb95d7e72ebb7502664b85af Mon Sep 17 00:00:00 2001
From: Thomas Betker <thomas.betker@rohde-schwarz.com>
Date: Sat, 11 May 2013 11:10:45 +0200
Subject: [PATCH 0114/1566] xilinx_emacps: Fix deadlock in
 xemacps_reinit_for_txtimeout()

In xemacps_reinit_for_txtimeout(), do not hold tx_lock when calling
tasklet_disable(). If xemacps_tx_poll() starts to run between acquiring
tx_lock and tasklet_disable(), we are caught in a deadlock because
tasklet_disable() waits until xemacps_tx_poll() has finished.

Also use netif_wake_queue() instead of netif_start_queue(), and don't
forget to update ndev->trans_start.

Signed-off-by: Thomas Betker <thomas.betker@rohde-schwarz.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |    7 +++++--
 1 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index fa9b2a3..8e8224f 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1917,9 +1917,9 @@ static void xemacps_reinit_for_txtimeout(struct work_struct *data)
 	int rc;
 
 	netif_stop_queue(lp->ndev);
-	spin_lock_bh(&lp->tx_lock);
 	napi_disable(&lp->napi);
 	tasklet_disable(&lp->tx_bdreclaim_tasklet);
+	spin_lock_bh(&lp->tx_lock);
 	xemacps_reset_hw(lp);
 	spin_unlock_bh(&lp->tx_lock);
 
@@ -1939,11 +1939,14 @@ static void xemacps_reinit_for_txtimeout(struct work_struct *data)
 	lp->link    = 0;
 	lp->speed   = 0;
 	lp->duplex  = -1;
+
 	if (lp->phy_dev)
 		phy_start(lp->phy_dev);
+
 	napi_enable(&lp->napi);
 	tasklet_enable(&lp->tx_bdreclaim_tasklet);
-	netif_start_queue(lp->ndev);
+	lp->ndev->trans_start = jiffies;
+	netif_wake_queue(lp->ndev);
 }
 
 /**
-- 
1.7.5.4

