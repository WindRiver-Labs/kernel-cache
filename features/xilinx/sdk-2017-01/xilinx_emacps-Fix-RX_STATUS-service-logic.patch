From bd48b975fe5b86b5e0c7e4a7810f8187aa351987 Mon Sep 17 00:00:00 2001
From: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
Date: Wed, 2 Jan 2013 18:27:53 +1000
Subject: [PATCH 0069/1566] xilinx_emacps: Fix RX_STATUS service logic

This function was unconditionally servicing the RX_STATUS register after
returning from xemacps_rx. The issue is there is a path out of the function
from here without calling xemaps_rx again (via work_done >= budget). Every
servicing of RXSR needs to be dominated by a call to xemacps_rx or you risk
servicing packets without ever actually receiving them.

Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
Acked-by: Anirudha Sarangi <anirudha.sarangi@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |    6 ++----
 1 files changed, 2 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 23336d9..f8ce41e 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1592,17 +1592,15 @@ static int xemacps_rx_poll(struct napi_struct *napi, int budget)
 	int temp_work_done;
 	u32 regval;
 
-	regval = xemacps_read(lp->baseaddr, XEMACPS_RXSR_OFFSET);
-	xemacps_write(lp->baseaddr, XEMACPS_RXSR_OFFSET, regval);
 
 	while (work_done < budget) {
+		regval = xemacps_read(lp->baseaddr, XEMACPS_RXSR_OFFSET);
+		xemacps_write(lp->baseaddr, XEMACPS_RXSR_OFFSET, regval);
 		if (regval & (XEMACPS_RXSR_HRESPNOK_MASK |
 					XEMACPS_RXSR_BUFFNA_MASK))
 			lp->stats.rx_errors++;
 		temp_work_done = xemacps_rx(lp, budget - work_done);
 		work_done += temp_work_done;
-		regval = xemacps_read(lp->baseaddr, XEMACPS_RXSR_OFFSET);
-		xemacps_write(lp->baseaddr, XEMACPS_RXSR_OFFSET, regval);
 		if (temp_work_done <= 0)
 			break;
 	}
-- 
1.7.5.4

