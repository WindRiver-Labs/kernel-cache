From bf2f7cbd35bfd6b2dec374bb8fac0ed77667cd22 Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Thu, 26 Jan 2017 14:02:42 -0800
Subject: [PATCH 1236/1566] drm: xilinx: crtc: Change the order of CCF API
 calls

commit  04742fda6d2a4eeee778c6edee92289010ece48d from
https://github.com/Xilinx/linux-xlnx.git

The clock should be disabled/unprepared before calling
set_rate() operations. Change the calling sequence accordingly.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/gpu/drm/xilinx/xilinx_drm_crtc.c |   36 +++++++++++++++++++++++++----
 1 files changed, 31 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c b/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
index 94ddf87..bebe3ba 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
@@ -42,6 +42,7 @@ struct xilinx_drm_crtc {
 	struct xilinx_cresample *cresample;
 	struct xilinx_rgb2yuv *rgb2yuv;
 	struct clk *pixel_clock;
+	bool pixel_clock_enabled;
 	struct xilinx_vtc *vtc;
 	struct xilinx_drm_plane_manager *plane_manager;
 	int dpms;
@@ -128,6 +129,11 @@ static int xilinx_drm_crtc_mode_set(struct drm_crtc *base_crtc,
 	long diff;
 	int ret;
 
+	if (crtc->pixel_clock_enabled) {
+		clk_disable_unprepare(crtc->pixel_clock);
+		crtc->pixel_clock_enabled = false;
+	}
+
 	/* set pixel clock */
 	ret = clk_set_rate(crtc->pixel_clock, adjusted_mode->clock * 1000);
 	if (ret) {
@@ -140,6 +146,16 @@ static int xilinx_drm_crtc_mode_set(struct drm_crtc *base_crtc,
 		DRM_DEBUG_KMS("actual pixel clock rate(%d) is off by %ld\n",
 				adjusted_mode->clock, diff);
 
+	if (!crtc->pixel_clock_enabled) {
+		ret = clk_prepare_enable(crtc->pixel_clock);
+		if (ret) {
+			DRM_ERROR("failed to enable a pixel clock\n");
+			crtc->pixel_clock_enabled = false;
+			return ret;
+		}
+	}
+	crtc->pixel_clock_enabled = true;
+
 	if (crtc->vtc) {
 		/* set video timing */
 		vm.hactive = adjusted_mode->hdisplay;
@@ -258,7 +274,10 @@ void xilinx_drm_crtc_destroy(struct drm_crtc *base_crtc)
 	if (crtc->dp_sub)
 		xilinx_drm_dp_sub_put(crtc->dp_sub);
 
-	clk_disable_unprepare(crtc->pixel_clock);
+	if (crtc->pixel_clock_enabled) {
+		clk_disable_unprepare(crtc->pixel_clock);
+		crtc->pixel_clock_enabled = false;
+	}
 
 	xilinx_drm_plane_remove_manager(crtc->plane_manager);
 }
@@ -511,9 +530,11 @@ struct drm_crtc *xilinx_drm_crtc_create(struct drm_device *drm)
 
 	ret = clk_prepare_enable(crtc->pixel_clock);
 	if (ret) {
-		DRM_DEBUG_KMS("failed to prepare/enable clock\n");
+		DRM_ERROR("failed to enable a pixel clock\n");
+		crtc->pixel_clock_enabled = false;
 		goto err_plane;
 	}
+	crtc->pixel_clock_enabled = true;
 
 	sub_node = of_parse_phandle(drm->dev->of_node, "xlnx,vtc", 0);
 	if (sub_node) {
@@ -522,7 +543,7 @@ struct drm_crtc *xilinx_drm_crtc_create(struct drm_device *drm)
 		if (IS_ERR(crtc->vtc)) {
 			DRM_ERROR("failed to probe video timing controller\n");
 			ret = PTR_ERR(crtc->vtc);
-			goto err_plane;
+			goto err_pixel_clk;
 		}
 	}
 
@@ -531,7 +552,7 @@ struct drm_crtc *xilinx_drm_crtc_create(struct drm_device *drm)
 		ret = PTR_ERR(crtc->dp_sub);
 		if (ret != -EPROBE_DEFER)
 			DRM_ERROR("failed to get a dp_sub\n");
-		goto err_plane;
+		goto err_pixel_clk;
 	}
 
 	crtc->dpms = DRM_MODE_DPMS_OFF;
@@ -541,12 +562,17 @@ struct drm_crtc *xilinx_drm_crtc_create(struct drm_device *drm)
 					NULL, &xilinx_drm_crtc_funcs, NULL);
 	if (ret) {
 		DRM_ERROR("failed to initialize crtc\n");
-		goto err_plane;
+		goto err_pixel_clk;
 	}
 	drm_crtc_helper_add(&crtc->base, &xilinx_drm_crtc_helper_funcs);
 
 	return &crtc->base;
 
+err_pixel_clk:
+	if (crtc->pixel_clock_enabled) {
+		clk_disable_unprepare(crtc->pixel_clock);
+		crtc->pixel_clock_enabled = false;
+	}
 err_plane:
 	xilinx_drm_plane_remove_manager(crtc->plane_manager);
 	return ERR_PTR(ret);
-- 
1.7.5.4

