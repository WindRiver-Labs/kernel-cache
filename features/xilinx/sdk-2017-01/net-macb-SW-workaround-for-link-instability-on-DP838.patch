From e880ba782c17db202e25eef358608622f0e3f034 Mon Sep 17 00:00:00 2001
From: Harini Katakam <harini.katakam@xilinx.com>
Date: Tue, 7 Mar 2017 16:20:16 +0530
Subject: [PATCH 1407/1566] net: macb: SW workaround for link instability on
 DP83867

commit  7557928cecc63c43191eb23b41f66ad93c497f1b from
https://github.com/Xilinx/linux-xlnx.git

RX_CTRL of DP83867 has to be strapped to MODE 3 or 4 according to
TI datasheet. If this is not done link instability may be observed
with some partners. This was observed on ZCU102 at 100Mbps and
also previously with on SGMII DC when connected to switches.
From communication with TI, we learnt that the following can be
used as a SW workaround to solve these issues.
Added this workaround with a DT property to make it configurable.

Signed-off-by: Harini Katakam <harinik@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/phy/dp83867.c |   40 ++++++++++++++++++++++++++++++++++++++++
 1 files changed, 40 insertions(+), 0 deletions(-)

diff --git a/drivers/net/phy/dp83867.c b/drivers/net/phy/dp83867.c
index 90a3c0e..d37ab88 100644
--- a/drivers/net/phy/dp83867.c
+++ b/drivers/net/phy/dp83867.c
@@ -33,6 +33,7 @@
 #define DP83867_CTRL		0x1f
 
 /* Extended Registers */
+#define DP83867_CFG4		0x0031
 #define DP83867_RGMIICTL	0x0032
 #define DP83867_RGMIIDCTL	0x0086
 
@@ -78,10 +79,20 @@
 #define MII_DP83867_CFG2_SPEEDOPT_INTLOW	0x2000
 #define MII_DP83867_CFG2_MASK			0x003F
 
+/* CFG4 bits */
+#define DP83867_CFG4_SGMII_AUTONEG_TIMER_MASK	0x60
+#define DP83867_CFG4_SGMII_AUTONEG_TIMER_16MS	0x00
+#define DP83867_CFG4_SGMII_AUTONEG_TIMER_2US	0x20
+#define DP83867_CFG4_SGMII_AUTONEG_TIMER_800US	0x40
+#define DP83867_CFG4_SGMII_AUTONEG_TIMER_11MS	0x60
+#define DP83867_CFG4_RESVDBIT7	BIT(7)
+#define DP83867_CFG4_RESVDBIT8	BIT(8)
+
 struct dp83867_private {
 	int rx_id_delay;
 	int tx_id_delay;
 	int fifo_depth;
+	bool rxctrl_strap_worka;
 };
 
 static int dp83867_ack_interrupt(struct phy_device *phydev)
@@ -137,6 +148,10 @@ static int dp83867_of_init(struct phy_device *phydev)
 	if (ret)
 		return ret;
 
+	dp83867->rxctrl_strap_worka =
+				of_property_read_bool(of_node,
+						      "ti,rxctrl-strap-worka");
+
 	return of_property_read_u32(of_node, "ti,fifo-depth",
 				   &dp83867->fifo_depth);
 }
@@ -177,6 +192,17 @@ static int dp83867_config_init(struct phy_device *phydev)
 		ret = phy_write(phydev, MII_DP83867_PHYCTRL, val);
 		if (ret)
 			return ret;
+
+		/* This is a SW workaround for link instability if
+		 * RX_CTRL is not strapped to mode 3 or 4 in HW.
+		 */
+		if (dp83867->rxctrl_strap_worka) {
+			val = phy_read_mmd_indirect(phydev, DP83867_CFG4,
+						    DP83867_DEVADDR);
+			val &= ~DP83867_CFG4_RESVDBIT7;
+			phy_write_mmd_indirect(phydev, DP83867_CFG4,
+					       DP83867_DEVADDR, val);
+		}
 	} else {
 		phy_write(phydev, MII_BMCR,
 			  (BMCR_ANENABLE | BMCR_FULLDPLX | BMCR_SPEED1000));
@@ -199,6 +225,20 @@ static int dp83867_config_init(struct phy_device *phydev)
 			  (dp83867->fifo_depth << DP83867_PHYCTRL_RXFIFO_SHIFT) |
 			  (dp83867->fifo_depth  << DP83867_PHYCTRL_TXFIFO_SHIFT));
 		phy_write(phydev, MII_DP83867_BISCR, 0x0);
+
+		/* This is a SW workaround for link instability if
+		 * RX_CTRL is not strapped to mode 3 or 4 in HW.
+		 */
+		if (dp83867->rxctrl_strap_worka) {
+			val = phy_read_mmd_indirect(phydev, DP83867_CFG4,
+						    DP83867_DEVADDR);
+			val &= ~DP83867_CFG4_RESVDBIT7;
+			val |= DP83867_CFG4_RESVDBIT8;
+			val &= ~DP83867_CFG4_SGMII_AUTONEG_TIMER_MASK;
+			val |= DP83867_CFG4_SGMII_AUTONEG_TIMER_11MS;
+			phy_write_mmd_indirect(phydev, DP83867_CFG4,
+					       DP83867_DEVADDR, val);
+		}
 	}
 
 	if ((phydev->interface >= PHY_INTERFACE_MODE_RGMII_ID) &&
-- 
1.7.5.4

