From d84e6e0358d8a98408d4aae0ea40cf57c3bd0ea4 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Tue, 16 Apr 2013 14:38:33 -0700
Subject: [PATCH 0316/1566] arm: zynq: Migrate to clock controller

Switch Zynq, including its drivers, over to use the new clock
controller. And remove old clock implementation.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
---
 arch/arm/mach-zynq/pm.c |   34 +++++++++++++---------------------
 1 files changed, 13 insertions(+), 21 deletions(-)

diff --git a/arch/arm/mach-zynq/pm.c b/arch/arm/mach-zynq/pm.c
index 061180e..4f09824 100644
--- a/arch/arm/mach-zynq/pm.c
+++ b/arch/arm/mach-zynq/pm.c
@@ -20,6 +20,7 @@
  */
 
 #include <linux/clk.h>
+#include <linux/clk/zynq.h>
 #include <linux/bitops.h>
 #include <linux/err.h>
 #include <linux/genalloc.h>
@@ -59,10 +60,19 @@
 #define SCU_STBY_EN_MASK	BIT(5)
 #define TOPSW_CLK_CTRL_DIS_MASK	BIT(0)
 
-static struct clk *cpupll;
 static void __iomem *ddrc_base;
 static void __iomem *ocm_base;
 
+static int zynq_pm_prepare_late(void)
+{
+	return zynq_clk_suspend_early();
+}
+
+static void zynq_pm_wake(void)
+{
+	zynq_clk_resume_late();
+}
+
 static int zynq_pm_suspend(unsigned long arg)
 {
 	u32 reg;
@@ -117,23 +127,6 @@ static int zynq_pm_suspend(unsigned long arg)
 		do_ddrpll_bypass = 0;
 	}
 
-	/*
-	 * at this point PLLs are supposed to be bypassed:
-	 *
-	 * DDRPLL: Is bypassed without further sanity checking in the suspend
-	 * routine which is called below and executed from OCM.
-	 *
-	 * IOPLL/ARMPLL: By now all clock consumers should have released their
-	 * clock resulting in the PLLs to be bypassed. To account for timers and
-	 * similar which run in the CPU clock domain we call a disable on the
-	 * CPU clock's PLL to bypass it.
-	 *
-	 * A wake up device would prevent its source PLL from
-	 * being bypassed, unless its the DDRPLL.
-	 */
-	if (!IS_ERR(cpupll))
-		clk_disable(cpupll);
-
 	/* Transfer to suspend code in OCM */
 	if (do_ddrpll_bypass) {
 		/*
@@ -150,9 +143,6 @@ static int zynq_pm_suspend(unsigned long arg)
 		wfi();
 	}
 
-	if (!IS_ERR(cpupll))
-		clk_enable(cpupll);
-
 	/* Restore original OCM contents */
 	if (do_ddrpll_bypass) {
 		memcpy((__force void *)ocm_base, ocm_swap_area,
@@ -211,7 +201,9 @@ static int zynq_pm_enter(suspend_state_t suspend_state)
 }
 
 static const struct platform_suspend_ops zynq_pm_ops = {
+	.prepare_late	= zynq_pm_prepare_late,
 	.enter		= zynq_pm_enter,
+	.wake		= zynq_pm_wake,
 	.valid		= suspend_valid_only_mem,
 };
 
-- 
1.7.5.4

