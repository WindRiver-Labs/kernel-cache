From ac88980ff315c17508c06ef09fe4383d1a8a6ed6 Mon Sep 17 00:00:00 2001
From: Filip Drazic <filip.drazic@aggios.com>
Date: Mon, 29 Aug 2016 19:32:59 +0200
Subject: [PATCH 0812/1566] ARM64: zynqmp: Support for multiple PM IDs
 assigned to a PM domain

This commit 3faac20b comes from:
  https://github.com/Xilinx/linux-xlnx.git

Previously, it was assumed that there is a 1:1 mapping between
PM ID defined in the platform firmware and a PM domain. However, there
can be a situation where multiple PM IDs belong to a single PM domain
(e.g. PM IDs for GPU and two pixel processors correspond to a single
PM domain).

This patch adds support for assigning more than one PM ID to
a single PM domain.

Updated documentation accordingly.

Assigned pixel processors PM IDs to GPU PM domain.

Signed-off-by: Filip Drazic <filip.drazic@aggios.com>
Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/power/zynqmp-genpd.txt     |    9 ++-
 drivers/soc/xilinx/zynqmp/pm_domains.c             |   93 +++++++++++--------
 2 files changed, 61 insertions(+), 41 deletions(-)

diff --git a/Documentation/devicetree/bindings/power/zynqmp-genpd.txt b/Documentation/devicetree/bindings/power/zynqmp-genpd.txt
index 8960112..25f9711 100644
--- a/Documentation/devicetree/bindings/power/zynqmp-genpd.txt
+++ b/Documentation/devicetree/bindings/power/zynqmp-genpd.txt
@@ -16,8 +16,8 @@ that PM domain consumer devices reference.
 
 Required properties:
  - #power-domain-cells: Number of cells in a PM domain specifier. Must be 0.
- - pd-id: Unique domain identifier of as defined by platform firmware. This
-	  identifier is passed to the PM firmware.
+ - pd-id: List of domain identifiers of as defined by platform firmware. These
+	  identifiers are passed to the PM firmware.
 
 Example:
 	zynqmp-genpd {
@@ -32,6 +32,11 @@ Example:
 			pd-id = <25>;
 			#power-domain-cells = <0>;
 		};
+
+		pd_gpu: pd-gpu {
+			pd-id = <58 20 21>;
+			#power-domain-cells = <0x0>;
+		};
 	};
 
 	sata0: ahci@SATA_AHCI_HBA {
diff --git a/drivers/soc/xilinx/zynqmp/pm_domains.c b/drivers/soc/xilinx/zynqmp/pm_domains.c
index a34f51e..c14e572 100644
--- a/drivers/soc/xilinx/zynqmp/pm_domains.c
+++ b/drivers/soc/xilinx/zynqmp/pm_domains.c
@@ -32,61 +32,42 @@
 /**
  * struct zynqmp_pm_domain - Wrapper around struct generic_pm_domain
  * @gpd:		Generic power domain
- * @node_id:	PM node id of a device inside PM domain
+ * @node_ids:		PM node IDs corresponding to device(s) inside PM domain
+ * @node_id_num:	Number of PM node IDs
  */
 struct zynqmp_pm_domain {
 	struct generic_pm_domain gpd;
-	u32 node_id;
+	u32 *node_ids;
+	int node_id_num;
 };
 
 /**
- * zynqmp_gpd_set_power - power on/off PM domain
+ * zynqmp_gpd_power_on - Power on PM domain
  * @domain:	Generic PM domain
- * @power_on:	Flag to specify whether to power on or off PM domain
  *
- * This functions calls zynqmp_pm_set_requirement to trigger power state change
- * of a resource (device inside PM domain), depending on power_on flag.
+ * This function is called before devices inside a PM domain are resumed, to
+ * power on PM domain.
  *
  * Return:	0 on success, error code otherwise.
  */
-static int zynqmp_gpd_set_power(struct generic_pm_domain *domain, bool power_on)
+static int zynqmp_gpd_power_on(struct generic_pm_domain *domain)
 {
-	int status;
+	int i, status = 0;
 	struct zynqmp_pm_domain *pd;
 
 	pd = container_of(domain, struct zynqmp_pm_domain, gpd);
-	if (pd->node_id == 0) {
-		pr_err("%s: unknown node specified, powering %s domain %s\n",
-			__func__, power_on ? "on" : "off", pd->gpd.name);
-		return -EINVAL;
+	for (i = 0; i < pd->node_id_num; i++) {
+		status = zynqmp_pm_set_requirement(pd->node_ids[i],
+					ZYNQMP_PM_CAPABILITY_ACCESS,
+					ZYNQMP_PM_MAX_QOS,
+					ZYNQMP_PM_REQUEST_ACK_NO);
+		if (status)
+			break;
 	}
-
-	if (!power_on)
-		status = zynqmp_pm_set_requirement(pd->node_id, 0, 0,
-						ZYNQMP_PM_REQUEST_ACK_NO);
-	else
-		status = zynqmp_pm_set_requirement(pd->node_id,
-						ZYNQMP_PM_CAPABILITY_ACCESS,
-						ZYNQMP_PM_MAX_QOS,
-						ZYNQMP_PM_REQUEST_ACK_NO);
 	return status;
 }
 
 /**
- * zynqmp_gpd_power_on - Power on PM domain
- * @domain:	Generic PM domain
- *
- * This function is called before devices inside a PM domain are resumed, to
- * power on PM domain.
- *
- * Return:	0 on success, error code otherwise.
- */
-static int zynqmp_gpd_power_on(struct generic_pm_domain *domain)
-{
-	return zynqmp_gpd_set_power(domain, true);
-}
-
-/**
  * zynqmp_gpd_power_off - Power off PM domain
  * @domain:	Generic PM domain
  *
@@ -97,7 +78,30 @@ static int zynqmp_gpd_power_on(struct generic_pm_domain *domain)
  */
 static int zynqmp_gpd_power_off(struct generic_pm_domain *domain)
 {
-	return zynqmp_gpd_set_power(domain, false);
+	int i, status = 0;
+	struct zynqmp_pm_domain *pd;
+
+	pd = container_of(domain, struct zynqmp_pm_domain, gpd);
+	for (i = pd->node_id_num - 1; i >= 0; i--) {
+		status = zynqmp_pm_set_requirement(pd->node_ids[i], 0, 0,
+						ZYNQMP_PM_REQUEST_ACK_NO);
+		/**
+		 * If powering down of any node inside this domain fails,
+		 * turn on previously powered down nodes of this domain
+		 */
+		if (status)
+			goto err_turn_on;
+	}
+	return 0;
+
+err_turn_on:
+	for (i++; i < pd->node_id_num; i++) {
+		zynqmp_pm_set_requirement(pd->node_ids[i],
+					ZYNQMP_PM_CAPABILITY_ACCESS,
+					ZYNQMP_PM_MAX_QOS,
+					ZYNQMP_PM_REQUEST_ACK_NO);
+	}
+	return status;
 }
 
 /**
@@ -116,7 +120,6 @@ static int __init zynqmp_gpd_probe(struct platform_device *pdev)
 	struct device_node *child_err, *child, *np = pdev->dev.of_node;
 
 	for_each_child_of_node(np, child) {
-		u32 node_id;
 		struct zynqmp_pm_domain *pd;
 
 		pd = devm_kzalloc(&pdev->dev, sizeof(*pd), GFP_KERNEL);
@@ -125,11 +128,23 @@ static int __init zynqmp_gpd_probe(struct platform_device *pdev)
 			goto err_cleanup;
 		}
 
-		ret = of_property_read_u32(child, "pd-id", &node_id);
+		ret = of_property_count_u32_elems(child, "pd-id");
+		if (ret <= 0)
+			goto err_cleanup;
+
+		pd->node_id_num = ret;
+		pd->node_ids = devm_kcalloc(&pdev->dev, ret,
+					sizeof(*pd->node_ids), GFP_KERNEL);
+		if (!pd->node_ids) {
+			ret = -ENOMEM;
+			goto err_cleanup;
+		}
+
+		ret = of_property_read_u32_array(child, "pd-id", pd->node_ids,
+							pd->node_id_num);
 		if (ret)
 			goto err_cleanup;
 
-		pd->node_id = node_id;
 		pd->gpd.name = kstrdup(child->name, GFP_KERNEL);
 		pd->gpd.power_off = zynqmp_gpd_power_off;
 		pd->gpd.power_on = zynqmp_gpd_power_on;
-- 
1.7.5.4

