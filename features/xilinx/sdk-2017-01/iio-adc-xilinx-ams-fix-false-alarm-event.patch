From 5cc71f3428195c8a33170027933c18b9ebdd172e Mon Sep 17 00:00:00 2001
From: Rajnikant Bhojani <rajnikant.bhojani@xilinx.com>
Date: Thu, 16 Feb 2017 05:29:37 -0800
Subject: [PATCH 1327/1566] iio: adc: xilinx-ams: fix false alarm event

commit  55157c770a0f6805f6e90e0b8e09f82d11c4abb9 from
https://github.com/Xilinx/linux-xlnx.git

- fix false alarm event for temperature and voltage channels
- remove IIO_EV_INFO_HYSTERESIS flag for temperature channel
  as driver does not support that

Signed-off-by: Rajnikant Bhojani <rajnikant.bhojani@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/iio/adc/xilinx-ams.c |   47 +++++++++++++++++++++++++++++++++++------
 drivers/iio/adc/xilinx-ams.h |    6 ++++-
 2 files changed, 45 insertions(+), 8 deletions(-)

diff --git a/drivers/iio/adc/xilinx-ams.c b/drivers/iio/adc/xilinx-ams.c
index 61b229e..d74b1e6 100644
--- a/drivers/iio/adc/xilinx-ams.c
+++ b/drivers/iio/adc/xilinx-ams.c
@@ -143,14 +143,14 @@ static void iio_ams_update_alarm(struct ams *ams, unsigned long alarm_mask)
 	if (ams->pl_base) {
 		pl_alarm_mask = (alarm_mask >> AMS_PL_ALARM_START);
 		/* Configuring PL alarm enable */
-		cfg = ~((alarm_mask & AMS_ISR0_ALARM_2_TO_0_MASK) <<
+		cfg = ~((pl_alarm_mask & AMS_ISR0_ALARM_2_TO_0_MASK) <<
 			       AMS_CONF1_ALARM_2_TO_0_SHIFT);
-		cfg &= ~((alarm_mask & AMS_ISR0_ALARM_6_TO_3_MASK) <<
+		cfg &= ~((pl_alarm_mask & AMS_ISR0_ALARM_6_TO_3_MASK) <<
 				AMS_CONF1_ALARM_6_TO_3_SHIFT);
 		ams->pl_bus->update(ams, AMS_REG_CONFIG1,
 				AMS_REGCFG1_ALARM_MASK, cfg);
 
-		cfg = ~((alarm_mask >> AMS_CONF3_ALARM_12_TO_7_SHIFT) &
+		cfg = ~((pl_alarm_mask >> AMS_CONF3_ALARM_12_TO_7_SHIFT) &
 				AMS_ISR0_ALARM_12_TO_7_MASK);
 		ams->pl_bus->update(ams, AMS_REG_CONFIG3,
 				AMS_REGCFG3_ALARM_MASK, cfg);
@@ -495,10 +495,26 @@ static int ams_write_event_value(struct iio_dev *indio_dev,
 			 enum iio_event_info info, int val, int val2)
 {
 	struct ams *ams = iio_priv(indio_dev);
-	unsigned int offset = ams_get_alarm_offset(chan->scan_index, dir);
+	unsigned int offset;
 
 	mutex_lock(&ams->mutex);
 
+	/* Set temperature channel threshold to direct threshold */
+	if (chan->type == IIO_TEMP) {
+		offset = ams_get_alarm_offset(chan->scan_index,
+				IIO_EV_DIR_FALLING);
+
+		if (chan->scan_index >= PS_SEQ_MAX)
+			ams->pl_bus->update(ams, offset,
+					AMS_ALARM_THR_DIRECT_MASK,
+					AMS_ALARM_THR_DIRECT_MASK);
+		else
+			ams_ps_update_reg(ams, offset,
+					AMS_ALARM_THR_DIRECT_MASK,
+					AMS_ALARM_THR_DIRECT_MASK);
+	}
+
+	offset = ams_get_alarm_offset(chan->scan_index, dir);
 	if (chan->scan_index >= PS_SEQ_MAX)
 		ams->pl_bus->write(ams, offset, val);
 	else
@@ -565,6 +581,10 @@ static void ams_unmask_worker(struct work_struct *work)
 
 	/* Clear those bits which are not active anymore */
 	unmask = (ams->masked_alarm ^ status) & ams->masked_alarm;
+
+	/* clear status of disabled alarm */
+	unmask |= ams->intr_mask;
+
 	ams->masked_alarm &= status;
 
 	/* Also clear those which are masked out anyway */
@@ -623,8 +643,7 @@ static const struct iio_event_spec ams_temp_events[] = {
 		.type = IIO_EV_TYPE_THRESH,
 		.dir = IIO_EV_DIR_RISING,
 		.mask_separate = BIT(IIO_EV_INFO_ENABLE) |
-				BIT(IIO_EV_INFO_VALUE) |
-				BIT(IIO_EV_INFO_HYSTERESIS),
+				BIT(IIO_EV_INFO_VALUE),
 	},
 };
 
@@ -751,9 +770,10 @@ static int ams_init_module(struct iio_dev *indio_dev, struct device_node *np,
 
 static int ams_parse_dt(struct iio_dev *indio_dev, struct platform_device *pdev)
 {
+	struct ams *ams = iio_priv(indio_dev);
 	struct iio_chan_spec *ams_channels, *dev_channels;
 	struct device_node *child_node = NULL, *np = pdev->dev.of_node;
-	int ret, chan_vol = 0, chan_temp = 0, i;
+	int ret, chan_vol = 0, chan_temp = 0, i, rising_off, falling_off;
 	unsigned int num_channels = 0;
 
 	/* Initialize buffer for channel specification */
@@ -780,6 +800,19 @@ static int ams_parse_dt(struct iio_dev *indio_dev, struct platform_device *pdev)
 			ams_channels[i].channel = chan_vol++;
 		else
 			ams_channels[i].channel = chan_temp++;
+
+		/* set threshold to max and min for each channel */
+		falling_off = ams_get_alarm_offset(ams_channels[i].scan_index,
+				IIO_EV_DIR_FALLING);
+		rising_off = ams_get_alarm_offset(ams_channels[i].scan_index,
+				IIO_EV_DIR_RISING);
+		if (ams_channels[i].scan_index >= PS_SEQ_MAX) {
+			ams->pl_bus->write(ams, falling_off, AMS_ALARM_THR_MIN);
+			ams->pl_bus->write(ams, rising_off, AMS_ALARM_THR_MAX);
+		} else {
+			ams_ps_write_reg(ams, falling_off, AMS_ALARM_THR_MIN);
+			ams_ps_write_reg(ams, rising_off, AMS_ALARM_THR_MAX);
+		}
 	}
 
 	dev_channels = devm_kzalloc(&pdev->dev, sizeof(*dev_channels) *
diff --git a/drivers/iio/adc/xilinx-ams.h b/drivers/iio/adc/xilinx-ams.h
index b170638..1b9ef27 100644
--- a/drivers/iio/adc/xilinx-ams.h
+++ b/drivers/iio/adc/xilinx-ams.h
@@ -78,6 +78,10 @@
 #define AMS_ALARM_THRESOLD_OFF_10 0x10
 #define AMS_ALARM_THRESOLD_OFF_20 0x20
 
+#define AMS_ALARM_THR_DIRECT_MASK 0x01
+#define AMS_ALARM_THR_MIN         0x0000
+#define AMS_ALARM_THR_MAX         0xffff
+
 #define AMS_NO_OF_ALARMS             32
 #define AMS_PL_ALARM_START           16
 #define AMS_ISR0_ALARM_MASK          0xFFFFFFFFU
@@ -87,7 +91,7 @@
 #define AMS_ISR0_ALARM_6_TO_3_MASK     0x78
 #define AMS_ISR0_ALARM_12_TO_7_MASK    0x3F
 #define AMS_CONF1_ALARM_2_TO_0_SHIFT   1
-#define AMS_CONF1_ALARM_6_TO_3_SHIFT   8
+#define AMS_CONF1_ALARM_6_TO_3_SHIFT   5
 #define AMS_CONF3_ALARM_12_TO_7_SHIFT  8
 
 #define AMS_PS_CSTS_PS_READY       0x08010000U
-- 
1.7.5.4

