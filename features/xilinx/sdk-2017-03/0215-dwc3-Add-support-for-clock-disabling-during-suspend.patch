From c7a8e5608c0c8c9d64a067fb2819300b4370eb9e Mon Sep 17 00:00:00 2001
From: Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
Date: Wed, 19 Jul 2017 19:25:51 +0530
Subject: [PATCH 215/532] dwc3: Add support for clock disabling during suspend

commit 80ac0da9010ebabef6ed1d66b6607b345fd14cb4 from
https://github.com/Xilinx/linux-xlnx.git

In dwc3 usb controller, when remote wakeup feature is enabled and
the controller is in U3 state (suspended), it requires suspend_clk
to be active to detect wakeup signalling driven on the link.
For all other cases usb clocks can be disabled once the controller
enters U3 state.

This patch adds the logic for disabling usb clocks when remote
wakeup feature is not enabled.

Signed-off-by: Anurag Kumar Vulisha <anuragku@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/usb/dwc3/core.c           | 10 +++++++
 drivers/usb/dwc3/core.h           |  3 +++
 drivers/usb/dwc3/dwc3-of-simple.c | 55 +++++++++++++++++++++++++++++++++++++++
 drivers/usb/dwc3/host.c           |  6 +++++
 drivers/usb/host/xhci-plat.c      |  9 +++++++
 include/linux/usb/xhci_pdriver.h  | 29 +++++++++++++++++++++
 6 files changed, 112 insertions(+)
 create mode 100644 include/linux/usb/xhci_pdriver.h

diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index 84eb0ba..6a33fe6 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -1403,6 +1403,16 @@ static int dwc3_suspend(struct device *dev)
 	struct dwc3	*dwc = dev_get_drvdata(dev);
 	int		ret;
 
+	/* Inform dwc3-of-simple about wakeup capability when dr_mode is set
+	 * to peripheral mode only. xhci-plat.c takes care of host mode.
+	 */
+	if (dwc->dr_mode != USB_DR_MODE_HOST) {
+		if (dwc->remote_wakeup)
+			dwc3_simple_wakeup_capable(dev, true);
+		else
+			dwc3_simple_wakeup_capable(dev, false);
+	}
+
 	ret = dwc3_suspend_common(dwc);
 	if (ret)
 		return ret;
diff --git a/drivers/usb/dwc3/core.h b/drivers/usb/dwc3/core.h
index a3377e7..fe822eb 100644
--- a/drivers/usb/dwc3/core.h
+++ b/drivers/usb/dwc3/core.h
@@ -1160,11 +1160,14 @@ static inline bool dwc3_is_usb31(struct dwc3 *dwc)
 #if IS_ENABLED(CONFIG_USB_DWC3_OF_SIMPLE)
 int dwc3_enable_hw_coherency(struct device *dev);
 void dwc3_set_phydata(struct device *dev, struct phy *phy);
+void dwc3_simple_wakeup_capable(struct device *dev, bool wakeup);
 #else
 static inline int dwc3_enable_hw_coherency(struct device *dev)
 { return 1; }
 static inline void dwc3_set_phydata(struct device *dev, struct phy *phy)
 { ; }
+void dwc3_simple_wakeup_capable(struct device *dev, bool wakeup)
+{ ; }
 #endif
 
 #if IS_ENABLED(CONFIG_USB_DWC3_HOST) || IS_ENABLED(CONFIG_USB_DWC3_DUAL_ROLE)\
diff --git a/drivers/usb/dwc3/dwc3-of-simple.c b/drivers/usb/dwc3/dwc3-of-simple.c
index 7f3f9ad..6b3e59a 100644
--- a/drivers/usb/dwc3/dwc3-of-simple.c
+++ b/drivers/usb/dwc3/dwc3-of-simple.c
@@ -46,6 +46,7 @@ struct dwc3_of_simple {
 	struct clk		**clks;
 	int			num_clocks;
 	void __iomem		*regs;
+	bool			wakeup_capable;
 };
 
 void dwc3_set_phydata(struct device *dev, struct phy *phy)
@@ -92,6 +93,23 @@ int dwc3_enable_hw_coherency(struct device *dev)
 	return 0;
 }
 
+void dwc3_simple_wakeup_capable(struct device *dev, bool wakeup)
+{
+	struct device_node *node =
+		of_find_compatible_node(NULL, NULL, "xlnx,zynqmp-dwc3");
+
+	if (node)  {
+		struct platform_device *pdev_parent;
+		struct dwc3_of_simple   *simple;
+
+		pdev_parent = of_find_device_by_node(node);
+		simple = platform_get_drvdata(pdev_parent);
+
+		/* Set wakeup capable as true or false */
+		simple->wakeup_capable = wakeup;
+	}
+}
+
 static int dwc3_of_simple_clk_init(struct dwc3_of_simple *simple, int count)
 {
 	struct device		*dev = simple->dev;
@@ -251,6 +269,40 @@ static int dwc3_of_simple_remove(struct platform_device *pdev)
 }
 
 #ifdef CONFIG_PM
+static int dwc3_of_simple_suspend(struct device *dev)
+{
+	struct dwc3_of_simple	*simple = dev_get_drvdata(dev);
+	int			i;
+
+	if (!simple->wakeup_capable) {
+		for (i = 0; i < simple->num_clocks; i++)
+			clk_disable(simple->clks[i]);
+	}
+
+	return 0;
+}
+
+static int dwc3_of_simple_resume(struct device *dev)
+{
+	struct dwc3_of_simple	*simple = dev_get_drvdata(dev);
+	int			ret;
+	int			i;
+
+	if (simple->wakeup_capable)
+		return 0;
+
+	for (i = 0; i < simple->num_clocks; i++) {
+		ret = clk_enable(simple->clks[i]);
+		if (ret < 0) {
+			while (--i >= 0)
+				clk_disable(simple->clks[i]);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
 static int dwc3_of_simple_runtime_suspend(struct device *dev)
 {
 	struct dwc3_of_simple	*simple = dev_get_drvdata(dev);
@@ -282,6 +334,8 @@ static int dwc3_of_simple_runtime_resume(struct device *dev)
 #endif
 
 static const struct dev_pm_ops dwc3_of_simple_dev_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(dwc3_of_simple_suspend,
+				dwc3_of_simple_resume)
 	SET_RUNTIME_PM_OPS(dwc3_of_simple_runtime_suspend,
 			dwc3_of_simple_runtime_resume, NULL)
 };
@@ -299,6 +353,7 @@ static struct platform_driver dwc3_of_simple_driver = {
 	.driver		= {
 		.name	= "dwc3-of-simple",
 		.of_match_table = of_dwc3_simple_match,
+		.pm = &dwc3_of_simple_dev_pm_ops,
 	},
 };
 
diff --git a/drivers/usb/dwc3/host.c b/drivers/usb/dwc3/host.c
index 5c80a31..ab33bd5 100644
--- a/drivers/usb/dwc3/host.c
+++ b/drivers/usb/dwc3/host.c
@@ -17,9 +17,15 @@
 
 #include <linux/platform_device.h>
 #include <linux/of_device.h>
+#include <linux/usb/xhci_pdriver.h>
 
 #include "core.h"
 
+void dwc3_host_wakeup_capable(struct device *dev, bool wakeup)
+{
+	dwc3_simple_wakeup_capable(dev, wakeup);
+}
+
 int dwc3_host_init(struct dwc3 *dwc)
 {
 	struct property_entry	props[3];
diff --git a/drivers/usb/host/xhci-plat.c b/drivers/usb/host/xhci-plat.c
index 1e9612b..96bb65d 100644
--- a/drivers/usb/host/xhci-plat.c
+++ b/drivers/usb/host/xhci-plat.c
@@ -20,6 +20,7 @@
 #include <linux/slab.h>
 #include <linux/acpi.h>
 #include <linux/usb/otg.h>
+#include <linux/usb/xhci_pdriver.h>
 
 #include "xhci.h"
 #include "xhci-plat.h"
@@ -336,6 +337,14 @@ static int xhci_plat_suspend(struct device *dev)
 	struct usb_hcd	*hcd = dev_get_drvdata(dev);
 	struct xhci_hcd	*xhci = hcd_to_xhci(hcd);
 
+#if IS_ENABLED(CONFIG_USB_DWC3_OF_SIMPLE)
+	/* Inform dwc3 driver about the device wakeup capability */
+	if (device_may_wakeup(dev))
+		dwc3_host_wakeup_capable(dev, true);
+	else
+		dwc3_host_wakeup_capable(dev, false);
+#endif
+
 	/*
 	 * xhci_suspend() needs `do_wakeup` to know whether host is allowed
 	 * to do wakeup during suspend. Since xhci_plat_suspend is currently
diff --git a/include/linux/usb/xhci_pdriver.h b/include/linux/usb/xhci_pdriver.h
new file mode 100644
index 0000000..94f01b5
--- /dev/null
+++ b/include/linux/usb/xhci_pdriver.h
@@ -0,0 +1,29 @@
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
+ * for more details.
+ *
+ */
+
+#ifndef __USB_CORE_XHCI_PDRIVER_H
+#define __USB_CORE_XHCI_PDRIVER_H
+
+/* Call dwc3_host_wakeup_capable() only for dwc3 DRD mode or HOST only mode */
+#if (IS_ENABLED(CONFIG_USB_DWC3_HOST) || \
+		(IS_ENABLED(CONFIG_USB_DWC3_OF_SIMPLE) && \
+			!IS_ENABLED(CONFIG_USB_DWC3_GADGET)))
+
+ /* Let the dwc3 driver know about device wakeup capability */
+void dwc3_host_wakeup_capable(struct device *dev, bool wakeup);
+
+#else
+void dwc3_host_wakeup_capable(struct device *dev, bool wakeup)
+{ ; }
+#endif
+
+#endif /* __USB_CORE_XHCI_PDRIVER_H */
-- 
2.7.4

