From 56df13c75b3ea135189366de80e40c35ca268cdd Mon Sep 17 00:00:00 2001
From: Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
Date: Sat, 29 Jul 2017 09:59:43 +0530
Subject: [PATCH 254/532] dwc3: Correct errors when dwc3 loaded as module

commit 244ddcbd8d1c0bc8df49172e973f0384abf7fe9f from
https://github.com/Xilinx/linux-xlnx.git

This patch fixes the errors when dwc3 is selected as a loadable
moodule.

Signed-off-by: Anurag Kumar Vulisha <anuragku@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/phy/phy-zynqmp.c          |  1 +
 drivers/usb/dwc3/core.c           |  3 +++
 drivers/usb/dwc3/core.h           |  3 +++
 drivers/usb/dwc3/dwc3-of-simple.c | 54 +++++++++++++++++++++++----------------
 drivers/usb/dwc3/host.c           |  1 +
 include/linux/usb/xhci_pdriver.h  |  6 ++---
 6 files changed, 43 insertions(+), 25 deletions(-)

diff --git a/drivers/phy/phy-zynqmp.c b/drivers/phy/phy-zynqmp.c
index 384f30d..908235d 100644
--- a/drivers/phy/phy-zynqmp.c
+++ b/drivers/phy/phy-zynqmp.c
@@ -352,6 +352,7 @@ int xpsgtr_set_protregs(struct phy *phy, void __iomem *regs)
 	gtr_dev->regs = regs;
 	return 0;
 }
+EXPORT_SYMBOL_GPL(xpsgtr_set_protregs);
 
 int xpsgtr_override_deemph(struct phy *phy, u8 plvl, u8 vlvl)
 {
diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index ab8a3b5..93fe4fc 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -1130,6 +1130,9 @@ static int dwc3_probe(struct platform_device *pdev)
 	dwc->hird_threshold = hird_threshold
 		| (dwc->is_utmi_l1_suspend << 4);
 
+	/* Check if extra quirks to be added */
+	dwc3_simple_check_quirks(dwc);
+
 	platform_set_drvdata(pdev, dwc);
 	dwc3_cache_hwparams(dwc);
 
diff --git a/drivers/usb/dwc3/core.h b/drivers/usb/dwc3/core.h
index 182cc71..c55947e 100644
--- a/drivers/usb/dwc3/core.h
+++ b/drivers/usb/dwc3/core.h
@@ -1162,6 +1162,7 @@ int dwc3_enable_hw_coherency(struct device *dev);
 void dwc3_set_phydata(struct device *dev, struct phy *phy);
 void dwc3_simple_wakeup_capable(struct device *dev, bool wakeup);
 void dwc3_set_simple_data(struct dwc3 *dwc);
+void dwc3_simple_check_quirks(struct dwc3 *dwc);
 #else
 static inline int dwc3_enable_hw_coherency(struct device *dev)
 { return 1; }
@@ -1171,6 +1172,8 @@ void dwc3_simple_wakeup_capable(struct device *dev, bool wakeup)
 { ; }
 void dwc3_set_simple_data(struct dwc3 *dwc)
 { ; }
+void dwc3_simple_check_quirks(struct dwc3 *dwc)
+{ ; }
 #endif
 
 #if IS_ENABLED(CONFIG_USB_DWC3_HOST) || IS_ENABLED(CONFIG_USB_DWC3_DUAL_ROLE)\
diff --git a/drivers/usb/dwc3/dwc3-of-simple.c b/drivers/usb/dwc3/dwc3-of-simple.c
index fb69604..c792b20 100644
--- a/drivers/usb/dwc3/dwc3-of-simple.c
+++ b/drivers/usb/dwc3/dwc3-of-simple.c
@@ -36,7 +36,6 @@
 #include <linux/of_address.h>
 
 #include "core.h"
-#include "io.h"
 
 /* Xilinx USB 3.0 IP Register */
 #define XLNX_USB_COHERENCY		0x005C
@@ -47,6 +46,8 @@
 #define ULPI_OTG_CTRL_CLEAR		0XC
 #define OTG_CTRL_DRVVBUS_OFFSET		5
 
+#define DWC3_OF_ADDRESS(ADDR)		((ADDR) - DWC3_GLOBALS_REGS_START)
+
 struct dwc3_of_simple {
 	struct device		*dev;
 	struct clk		**clks;
@@ -54,6 +55,7 @@ struct dwc3_of_simple {
 	void __iomem		*regs;
 	struct dwc3		*dwc;
 	bool			wakeup_capable;
+	bool			dis_u3_susphy_quirk;
 };
 
 void dwc3_set_phydata(struct device *dev, struct phy *phy)
@@ -77,6 +79,7 @@ void dwc3_set_phydata(struct device *dev, struct phy *phy)
 		}
 	}
 }
+EXPORT_SYMBOL(dwc3_set_phydata);
 
 int dwc3_enable_hw_coherency(struct device *dev)
 {
@@ -99,6 +102,7 @@ int dwc3_enable_hw_coherency(struct device *dev)
 
 	return 0;
 }
+EXPORT_SYMBOL(dwc3_enable_hw_coherency);
 
 void dwc3_set_simple_data(struct dwc3 *dwc)
 {
@@ -116,6 +120,25 @@ void dwc3_set_simple_data(struct dwc3 *dwc)
 		simple->dwc =  dwc;
 	}
 }
+EXPORT_SYMBOL(dwc3_set_simple_data);
+
+void dwc3_simple_check_quirks(struct dwc3 *dwc)
+{
+	struct device_node *node =
+		of_find_compatible_node(NULL, NULL, "xlnx,zynqmp-dwc3");
+
+	if (node)  {
+		struct platform_device *pdev_parent;
+		struct dwc3_of_simple   *simple;
+
+		pdev_parent = of_find_device_by_node(node);
+		simple = platform_get_drvdata(pdev_parent);
+
+		/* Add snps,dis_u3_susphy_quirk */
+		dwc->dis_u3_susphy_quirk = simple->dis_u3_susphy_quirk;
+	}
+}
+EXPORT_SYMBOL(dwc3_simple_check_quirks);
 
 void dwc3_simple_wakeup_capable(struct device *dev, bool wakeup)
 {
@@ -133,6 +156,7 @@ void dwc3_simple_wakeup_capable(struct device *dev, bool wakeup)
 		simple->wakeup_capable = wakeup;
 	}
 }
+EXPORT_SYMBOL(dwc3_simple_wakeup_capable);
 
 static int dwc3_of_simple_clk_init(struct dwc3_of_simple *simple, int count)
 {
@@ -197,7 +221,6 @@ static int dwc3_of_simple_probe(struct platform_device *pdev)
 	if (of_device_is_compatible(pdev->dev.of_node,
 				    "xlnx,zynqmp-dwc3")) {
 
-		struct device_node	*child;
 		char			*soc_rev;
 		struct resource		*res;
 		void __iomem		*regs;
@@ -222,25 +245,10 @@ static int dwc3_of_simple_probe(struct platform_device *pdev)
 
 		} else if (!IS_ERR(soc_rev) &&
 					(*soc_rev < ZYNQMP_SILICON_V4)) {
-
-			for_each_child_of_node(np, child) {
-				/* Add snps,dis_u3_susphy_quirk
-				 * for SOC revison less than v4
-				 */
-				struct property *new_prop;
-
-				new_prop = kzalloc(sizeof(*new_prop),
-								GFP_KERNEL);
-				new_prop->name =
-					kstrdup("snps,dis_u3_susphy_quirk",
-								GFP_KERNEL);
-				new_prop->length =
-					sizeof("snps,dis_u3_susphy_quirk");
-				new_prop->value =
-					kstrdup("snps,dis_u3_susphy_quirk",
-								GFP_KERNEL);
-				of_add_property(child, new_prop);
-			}
+			/* Add snps,dis_u3_susphy_quirk
+			 * for SOC revison less than v4
+			 */
+			simple->dis_u3_susphy_quirk = true;
 		}
 
 		/* Clean soc_rev if got a valid pointer from nvmem driver
@@ -308,7 +316,9 @@ static void dwc3_simple_vbus(struct dwc3 *dwc, bool vbus_off)
 
 	reg = DWC3_GUSB2PHYACC_NEWREGREQ | DWC3_GUSB2PHYACC_ADDR(addr);
 	reg |= DWC3_GUSB2PHYACC_WRITE | val;
-	dwc3_writel(dwc->regs, DWC3_GUSB2PHYACC(0), reg);
+
+	addr = DWC3_OF_ADDRESS(DWC3_GUSB2PHYACC(0));
+	writel(reg, dwc->regs + addr);
 }
 
 static int dwc3_of_simple_suspend(struct device *dev)
diff --git a/drivers/usb/dwc3/host.c b/drivers/usb/dwc3/host.c
index ab33bd5..9aec91d 100644
--- a/drivers/usb/dwc3/host.c
+++ b/drivers/usb/dwc3/host.c
@@ -25,6 +25,7 @@ void dwc3_host_wakeup_capable(struct device *dev, bool wakeup)
 {
 	dwc3_simple_wakeup_capable(dev, wakeup);
 }
+EXPORT_SYMBOL(dwc3_host_wakeup_capable);
 
 int dwc3_host_init(struct dwc3 *dwc)
 {
diff --git a/include/linux/usb/xhci_pdriver.h b/include/linux/usb/xhci_pdriver.h
index 94f01b5..af80431 100644
--- a/include/linux/usb/xhci_pdriver.h
+++ b/include/linux/usb/xhci_pdriver.h
@@ -14,9 +14,9 @@
 #define __USB_CORE_XHCI_PDRIVER_H
 
 /* Call dwc3_host_wakeup_capable() only for dwc3 DRD mode or HOST only mode */
-#if (IS_ENABLED(CONFIG_USB_DWC3_HOST) || \
-		(IS_ENABLED(CONFIG_USB_DWC3_OF_SIMPLE) && \
-			!IS_ENABLED(CONFIG_USB_DWC3_GADGET)))
+#if (IS_REACHABLE(CONFIG_USB_DWC3_HOST) || \
+		(IS_REACHABLE(CONFIG_USB_DWC3_OF_SIMPLE) && \
+			!IS_REACHABLE(CONFIG_USB_DWC3_GADGET)))
 
  /* Let the dwc3 driver know about device wakeup capability */
 void dwc3_host_wakeup_capable(struct device *dev, bool wakeup);
-- 
2.7.4

