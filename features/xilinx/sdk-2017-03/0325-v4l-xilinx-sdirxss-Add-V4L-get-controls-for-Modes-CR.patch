From 5d67bd4118ea3e86d2dda9f795b6cb8e0f1d4384 Mon Sep 17 00:00:00 2001
From: Vishal Sagar <vishal.sagar@xilinx.com>
Date: Wed, 16 Aug 2017 16:44:07 +0530
Subject: [PATCH 325/532] v4l: xilinx: sdirxss: Add V4L get controls for Modes,
 CRC, EDH and Video Bridge Status

commit 206948a2e2a00996e43793c86d9d593461636213 from
https://github.com/Xilinx/linux-xlnx.git

Added V4L controls for getting detected modes, CRC, EDH status and Video
Bridge status.

Signed-off-by: Vishal Sagar <vsagar@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/media/platform/xilinx/xilinx-sdirxss.c | 108 ++++++++++++++++++++++++-
 include/uapi/linux/xilinx-sdirxss.h            |   8 ++
 include/uapi/linux/xilinx-v4l2-controls.h      |  10 +++
 3 files changed, 123 insertions(+), 3 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-sdirxss.c b/drivers/media/platform/xilinx/xilinx-sdirxss.c
index 74c977b..b1bb7dd 100644
--- a/drivers/media/platform/xilinx/xilinx-sdirxss.c
+++ b/drivers/media/platform/xilinx/xilinx-sdirxss.c
@@ -170,7 +170,6 @@
 #define XSDIRXSS_SDI_STD_12G_8DS	2
 
 #define XSDIRX_DEFAULT_VIDEO_LOCK_WINDOW	0x3000
-#define XSDIRX_DEFAULT_EDH_ERRCNT		0x420
 
 #define XSDIRX_MODE_HD_MASK	0x0
 #define XSDIRX_MODE_SD_MASK	0x1
@@ -550,18 +549,72 @@ static int xsdirxss_s_ctrl(struct v4l2_ctrl *ctrl)
  */
 static int xsdirxss_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 {
+	u32 val;
 	struct xsdirxss_state *xsdirxss =
 		container_of(ctrl->handler,
 			     struct xsdirxss_state, ctrl_handler);
 	struct xsdirxss_core *core = &xsdirxss->core;
 
 	switch (ctrl->id) {
+	case V4L2_CID_XILINX_SDIRX_MODE_DETECT:
+		if (!xsdirxss->vidlocked) {
+			dev_err(core->dev, "Can't get values when video not locked!\n");
+			return -EINVAL;
+		}
+		val = xsdirxss_read(core, XSDIRX_MODE_DET_STAT_REG);
+		val &= XSDIRX_MODE_DET_STAT_RX_MODE_MASK;
+
+		switch (val) {
+		case XSDIRX_MODE_SD_MASK:
+			ctrl->val = XSDIRX_MODE_SD_OFFSET;
+			break;
+		case XSDIRX_MODE_HD_MASK:
+			ctrl->val = XSDIRX_MODE_HD_OFFSET;
+			break;
+		case XSDIRX_MODE_3G_MASK:
+			ctrl->val = XSDIRX_MODE_3G_OFFSET;
+			break;
+		case XSDIRX_MODE_6G_MASK:
+			ctrl->val = XSDIRX_MODE_6G_OFFSET;
+			break;
+		case XSDIRX_MODE_12GI_MASK:
+			ctrl->val = XSDIRX_MODE_12GI_OFFSET;
+			break;
+		case XSDIRX_MODE_12GF_MASK:
+			ctrl->val = XSDIRX_MODE_12GF_OFFSET;
+			break;
+		}
+		break;
+	case V4L2_CID_XILINX_SDIRX_CRC:
+		ctrl->val = xsdirxss_read(core, XSDIRX_CRC_ERRCNT_REG);
+		break;
+	case V4L2_CID_XILINX_SDIRX_EDH_ERRCNT:
+		ctrl->val = xsdirxss_read(core, XSDIRX_EDH_ERRCNT_REG);
+		break;
+	case V4L2_CID_XILINX_SDIRX_EDH_STATUS:
+		ctrl->val = xsdirxss_read(core, XSDIRX_EDH_STAT_REG);
+		break;
+	case V4L2_CID_XILINX_SDIRX_AXIS4_STATUS:
+		val = xsdirxss_read(core, XSDIRX_VID_IN_AXIS4_CTRL_REG);
+		if (val & (XSDIRX_VID_IN_AXIS4_CTRL_ALL_MASK)) {
+			val = xsdirxss_read(core, XSDIRX_VID_IN_AXIS4_STAT_REG);
+			if (val & XSDIRX_VID_IN_AXIS4_STAT_OVERFLOW_MASK)
+				ctrl->val = XSDIRX_AXIS4_STATUS_OVERFLOW;
+			else if (val & XSDIRX_VID_IN_AXIS4_STAT_UNDERFLOW_MASK)
+				ctrl->val = XSDIRX_AXIS4_STATUS_UNDERFLOW;
+			else
+				ctrl->val = XSDIRX_AXIS4_STATUS_OK;
+		} else {
+			dev_err(core->dev, "Video Bridge not enabled!\n");
+			return -EINVAL;
+		}
+		break;
 	default:
 		dev_err(core->dev, "Get Invalid control id 0x%0x\n", ctrl->id);
 		return -EINVAL;
 	}
 	dev_dbg(core->dev, "Get ctrl id = 0x%08x val = 0x%08x\n",
-		ctrl->val, ctrl->id);
+		ctrl->id, ctrl->val);
 	return 0;
 }
 
@@ -796,7 +849,56 @@ static struct v4l2_ctrl_config xsdirxss_ctrls[] = {
 		.min	= 0,
 		.max	= XSDIRX_DETECT_ALL_MODES,
 		.def	= XSDIRX_DETECT_ALL_MODES,
-	},
+	}, {
+		.ops	= &xsdirxss_ctrl_ops,
+		.id	= V4L2_CID_XILINX_SDIRX_MODE_DETECT,
+		.name	= "SDI Rx : Mode Detect Status",
+		.type	= V4L2_CTRL_TYPE_INTEGER,
+		.min	= XSDIRX_MODE_SD_OFFSET,
+		.max	= XSDIRX_MODE_12GF_OFFSET,
+		.step	= 1,
+		.flags  = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
+	}, {
+		.ops	= &xsdirxss_ctrl_ops,
+		.id	= V4L2_CID_XILINX_SDIRX_CRC,
+		.name	= "SDI Rx : CRC Error status",
+		.type	= V4L2_CTRL_TYPE_INTEGER,
+		.min	= 0,
+		.max	= 0xFFFFFFFF,
+		.step	= 1,
+		.def	= 0,
+		.flags  = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
+	},  {
+		.ops	= &xsdirxss_ctrl_ops,
+		.id	= V4L2_CID_XILINX_SDIRX_EDH_ERRCNT,
+		.name	= "SDI Rx : EDH Error Count",
+		.type	= V4L2_CTRL_TYPE_INTEGER,
+		.min	= 0,
+		.max	= 0xFFFF,
+		.step	= 1,
+		.def	= 0,
+		.flags  = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
+	}, {
+		.ops	= &xsdirxss_ctrl_ops,
+		.id	= V4L2_CID_XILINX_SDIRX_EDH_STATUS,
+		.name	= "SDI Rx : EDH Status",
+		.type	= V4L2_CTRL_TYPE_INTEGER,
+		.min	= 0,
+		.max	= 0xFFFFFFFF,
+		.step	= 1,
+		.def	= 0,
+		.flags  = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
+	}, {
+		.ops	= &xsdirxss_ctrl_ops,
+		.id	= V4L2_CID_XILINX_SDIRX_AXIS4_STATUS,
+		.name	= "SDI Rx : AXIS4 Status",
+		.type	= V4L2_CTRL_TYPE_INTEGER,
+		.min	= XSDIRX_AXIS4_STATUS_OK,
+		.max	= XSDIRX_AXIS4_STATUS_UNDERFLOW,
+		.step	= 1,
+		.def	= XSDIRX_AXIS4_STATUS_OK,
+		.flags  = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
+	}
 };
 
 static const struct v4l2_subdev_core_ops xsdirxss_core_ops = {
diff --git a/include/uapi/linux/xilinx-sdirxss.h b/include/uapi/linux/xilinx-sdirxss.h
index e116369..bc21f62 100644
--- a/include/uapi/linux/xilinx-sdirxss.h
+++ b/include/uapi/linux/xilinx-sdirxss.h
@@ -23,6 +23,14 @@ enum {
 					BIT(XSDIRX_MODE_12GF_OFFSET))
 
 /*
+ * AXIS4 Bridge Status
+ */
+
+#define	XSDIRX_AXIS4_STATUS_OK		0x0
+#define	XSDIRX_AXIS4_STATUS_OVERFLOW	0x1
+#define	XSDIRX_AXIS4_STATUS_UNDERFLOW	0x2
+
+/*
  * EDH Error Types
  * ANC - Ancillary Data Packet Errors
  * FF - Full Field Errors
diff --git a/include/uapi/linux/xilinx-v4l2-controls.h b/include/uapi/linux/xilinx-v4l2-controls.h
index fd3b967..38f5b75 100644
--- a/include/uapi/linux/xilinx-v4l2-controls.h
+++ b/include/uapi/linux/xilinx-v4l2-controls.h
@@ -204,5 +204,15 @@
 #define V4L2_CID_XILINX_SDIRX_EDH_ERRCNT_ENABLE	(V4L2_CID_XILINX_SDIRX + 3)
 /* Mode search Control */
 #define V4L2_CID_XILINX_SDIRX_SEARCH_MODES	(V4L2_CID_XILINX_SDIRX + 4)
+/* Get Detected Mode control */
+#define V4L2_CID_XILINX_SDIRX_MODE_DETECT	(V4L2_CID_XILINX_SDIRX + 5)
+/* Get CRC error status */
+#define V4L2_CID_XILINX_SDIRX_CRC		(V4L2_CID_XILINX_SDIRX + 6)
+/* Get EDH error count control */
+#define V4L2_CID_XILINX_SDIRX_EDH_ERRCNT	(V4L2_CID_XILINX_SDIRX + 7)
+/* Get EDH status control */
+#define V4L2_CID_XILINX_SDIRX_EDH_STATUS	(V4L2_CID_XILINX_SDIRX + 8)
+/* Get AXIS4 Bridge Status control */
+#define V4L2_CID_XILINX_SDIRX_AXIS4_STATUS	(V4L2_CID_XILINX_SDIRX + 9)
 
 #endif /* __UAPI_XILINX_V4L2_CONTROLS_H__ */
-- 
2.7.4

