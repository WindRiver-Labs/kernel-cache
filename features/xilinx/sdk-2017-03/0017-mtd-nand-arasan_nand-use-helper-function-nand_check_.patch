From 7316b3f4b93a93009da62e5e27415f2d83dbaa98 Mon Sep 17 00:00:00 2001
From: Naga Sureshkumar Relli <naga.sureshkumar.relli@xilinx.com>
Date: Mon, 15 May 2017 12:00:26 +0530
Subject: [PATCH 017/532] mtd: nand: arasan_nand: use helper function
 nand_check_erased_ecc_chunk

commit 6216d9d254bebb803665a00d143306de77e36dee from
https://github.com/Xilinx/linux-xlnx.git

When erasing a nand page all the bits are erased to 1s. i.e 0xff but
the ECC of that page can't update in the oob region, hence there will
be ECC errors when reading erased page.

As an example, when we use UBIFS on NAND, UBIFS assumes that empty space
is really empty and the below layer deals with bitflips in empty pages.
So, when we enable HW ECC, and when the erased command issued, then
the page will be erased with out ECC update. and while reading arasan
controller detects ECC error and corrects the erased page data (not 0xffs).
With this data when UBIFS is checking for ffs in erased page, it won't
find proper ffs causing UBIFS errors.

So to avoid this, driver should correct bitflips in the buffer and pass
that to upper layers. This can be solved by the API
nand_check_erased_ecc_chunk.

Signed-off-by: Naga Sureshkumar Relli <nagasure@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/mtd/nand/arasan_nand.c | 28 +++++++++++++++++++++++++++-
 1 file changed, 27 insertions(+), 1 deletion(-)

diff --git a/drivers/mtd/nand/arasan_nand.c b/drivers/mtd/nand/arasan_nand.c
index 660996f..05c1bb1 100644
--- a/drivers/mtd/nand/arasan_nand.c
+++ b/drivers/mtd/nand/arasan_nand.c
@@ -434,6 +434,12 @@ static int anfc_read_page_hwecc(struct mtd_info *mtd,
 	u32 val;
 	struct anfc *nfc = to_anfc(chip->controller);
 	struct anfc_nand_chip *achip = to_anfc_nand(chip);
+	u8 *ecc_code = chip->buffers->ecccode;
+	u8 *p = buf;
+	int eccsize = chip->ecc.size;
+	int eccbytes = chip->ecc.bytes;
+	int eccsteps = chip->ecc.steps;
+	int stat = 0, i;
 
 	anfc_set_eccsparecmd(nfc, achip, NAND_CMD_RNDOUT, NAND_CMD_RNDOUTSTART);
 	anfc_config_ecc(nfc, 1);
@@ -445,8 +451,9 @@ static int anfc_read_page_hwecc(struct mtd_info *mtd,
 	chip->read_buf(mtd, buf, mtd->writesize);
 
 	val = readl(nfc->base + ECC_ERR_CNT_OFST);
+	val = ((val & PAGE_ERR_CNT_MASK) >> 8);
 	if (achip->bch) {
-		mtd->ecc_stats.corrected += val & PAGE_ERR_CNT_MASK;
+		mtd->ecc_stats.corrected += val;
 	} else {
 		val = readl(nfc->base + ECC_ERR_CNT_1BIT_OFST);
 		mtd->ecc_stats.corrected += val;
@@ -460,6 +467,25 @@ static int anfc_read_page_hwecc(struct mtd_info *mtd,
 	if (oob_required)
 		chip->ecc.read_oob(mtd, chip, page);
 
+	if (val) {
+		anfc_config_ecc(nfc, 0);
+		chip->cmdfunc(mtd, NAND_CMD_READOOB, 0, page);
+		chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
+		mtd_ooblayout_get_eccbytes(mtd, ecc_code, chip->oob_poi, 0,
+					   chip->ecc.total);
+		for (i = 0 ; eccsteps; eccsteps--, i += eccbytes,
+		     p += eccsize) {
+			stat = nand_check_erased_ecc_chunk(p,
+				chip->ecc.size, &ecc_code[i], eccbytes,
+				NULL, 0, chip->ecc.strength);
+		}
+		if (stat < 0)
+			stat = 0;
+		else
+			mtd->ecc_stats.corrected += stat;
+		return stat;
+	}
+
 	return 0;
 }
 
-- 
2.7.4

