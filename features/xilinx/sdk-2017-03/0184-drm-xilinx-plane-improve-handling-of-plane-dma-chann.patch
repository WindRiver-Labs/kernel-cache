From 6cae418a0daa2dda57be561c67ce7be08e784e49 Mon Sep 17 00:00:00 2001
From: Jean-Francois Dagenais <jeff.dagenais@gmail.com>
Date: Fri, 7 Jul 2017 09:00:39 -0400
Subject: [PATCH 184/532] drm: xilinx: plane: improve handling of plane dma
 channels

commit 03066e43dec534ce7a23f37d52262ddf7914e01e from
https://github.com/Xilinx/linux-xlnx.git

With the previous code, it was possible to exit the function without
having any dma channels enabled if they all failed with -ENODEV. Failure
of the primary plane would break a hard assumption and cause a null
pointer dereference further in xilinx_drm_plane_get_align.

Instead of trying each dma-name, then trying to guess if it existed or
not in the DT, loop over the names that are actually given in the DT.
This allows to properly fail if a dma-name is not found, signaling a bad
plane node setup in DT.

Also improve the error feedback to help developers properly identify the
DT node setup error.

Signed-off-by: Jean-Francois Dagenais <jeff.dagenais@gmail.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/gpu/drm/xilinx/xilinx_drm_plane.c | 32 +++++++++++++++++++++++--------
 1 file changed, 24 insertions(+), 8 deletions(-)

diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_plane.c b/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
index 8338cfe..1bc9012 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
@@ -716,6 +716,8 @@ xilinx_drm_plane_create(struct xilinx_drm_plane_manager *manager,
 	char name[16];
 	struct device_node *plane_node;
 	struct device_node *sub_node;
+	struct property *prop;
+	const char *dma_name;
 	struct device_node *layer_node;
 	enum drm_plane_type type;
 	uint32_t fmt_in = -1;
@@ -760,21 +762,35 @@ xilinx_drm_plane_create(struct xilinx_drm_plane_manager *manager,
 
 	DRM_DEBUG_KMS("plane->id: %d\n", plane->id);
 
-	for (i = 0; i < MAX_NUM_SUB_PLANES; i++) {
-		snprintf(name, sizeof(name), "dma%d", i);
-		plane->dma[i].chan = of_dma_request_slave_channel(plane_node,
-								  name);
-		if (PTR_ERR(plane->dma[i].chan) == -ENODEV) {
-			plane->dma[i].chan = NULL;
-			continue;
+	i = 0;
+	of_property_for_each_string(plane_node, "dma-names", prop, dma_name) {
+		if (i >= MAX_NUM_SUB_PLANES) {
+			DRM_WARN("%s contains too many sub-planes (dma-names), indexes %d and above ignored\n",
+				 of_node_full_name(plane_node),
+				 MAX_NUM_SUB_PLANES);
+			break;
+
 		}
 
+		plane->dma[i].chan = of_dma_request_slave_channel(plane_node,
+								  dma_name);
+
 		if (IS_ERR(plane->dma[i].chan)) {
-			DRM_ERROR("failed to request dma channel\n");
 			ret = PTR_ERR(plane->dma[i].chan);
+			DRM_ERROR("failed to request dma channel \"%s\" for plane %s (err:%d)\n",
+				  dma_name, of_node_full_name(plane_node), ret);
 			plane->dma[i].chan = NULL;
 			goto err_dma;
 		}
+		++i;
+	}
+
+	if (i == 0) {
+		DRM_ERROR("plane \"%s\" doesn't have any dma channels (dma-names)\n",
+			  of_node_full_name(plane_node));
+		ret = -EINVAL;
+		goto err_out;
+
 	}
 
 	/* probe color space converter */
-- 
2.7.4

