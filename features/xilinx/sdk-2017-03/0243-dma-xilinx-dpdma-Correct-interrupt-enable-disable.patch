From f75f5bbe8f629d3ea84a16259b38db10ec4c3e0b Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Fri, 28 Jul 2017 00:23:15 -0700
Subject: [PATCH 243/532] dma: xilinx: dpdma: Correct interrupt enable /
 disable

commit 9a8ee603789572e16810eb69e94f5bc5891e9f4d from
https://github.com/Xilinx/linux-xlnx.git

The global bits are from 24 to 27, so fix the macro.
And the enable / disable registers are write only,
so there's no need to read-modifty-write.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/dma/xilinx/xilinx_dpdma.c | 85 ++++++++++++++++-----------------------
 1 file changed, 34 insertions(+), 51 deletions(-)

diff --git a/drivers/dma/xilinx/xilinx_dpdma.c b/drivers/dma/xilinx/xilinx_dpdma.c
index 8c28e51..74c705f 100644
--- a/drivers/dma/xilinx/xilinx_dpdma.c
+++ b/drivers/dma/xilinx/xilinx_dpdma.c
@@ -61,7 +61,7 @@
 #define XILINX_DPDMA_INTR_GLOBAL_ERR			0x7000000
 #define XILINX_DPDMA_INTR_ERR_ALL			0x7fff000
 #define XILINX_DPDMA_INTR_CHAN_MASK			0x41041
-#define XILINX_DPDMA_INTR_GLOBAL_MASK			0xf00000
+#define XILINX_DPDMA_INTR_GLOBAL_MASK			0xf000000
 #define XILINX_DPDMA_INTR_ALL				0xfffffff
 #define XILINX_DPDMA_EISR				0x14
 #define XILINX_DPDMA_EIMR				0x18
@@ -1268,10 +1268,10 @@ static inline void xilinx_dpdma_chan_enable(struct xilinx_dpdma_chan *chan)
 
 	reg = XILINX_DPDMA_INTR_CHAN_MASK << chan->id;
 	reg |= XILINX_DPDMA_INTR_GLOBAL_MASK;
-	dpdma_set(chan->xdev->reg, XILINX_DPDMA_IEN, reg);
+	dpdma_write(chan->xdev->reg, XILINX_DPDMA_IEN, reg);
 	reg = XILINX_DPDMA_EINTR_CHAN_ERR_MASK << chan->id;
 	reg |= XILINX_DPDMA_INTR_GLOBAL_ERR;
-	dpdma_set(chan->xdev->reg, XILINX_DPDMA_EIEN, reg);
+	dpdma_write(chan->xdev->reg, XILINX_DPDMA_EIEN, reg);
 
 	reg = XILINX_DPDMA_CH_CNTL_ENABLE;
 	reg |= XILINX_DPDMA_CH_CNTL_QOS_VID_CLASS <<
@@ -1294,9 +1294,9 @@ static inline void xilinx_dpdma_chan_disable(struct xilinx_dpdma_chan *chan)
 	u32 reg;
 
 	reg = XILINX_DPDMA_INTR_CHAN_MASK << chan->id;
-	dpdma_clr(chan->xdev->reg, XILINX_DPDMA_IEN, reg);
+	dpdma_write(chan->xdev->reg, XILINX_DPDMA_IEN, reg);
 	reg = XILINX_DPDMA_EINTR_CHAN_ERR_MASK << chan->id;
-	dpdma_clr(chan->xdev->reg, XILINX_DPDMA_EIEN, reg);
+	dpdma_write(chan->xdev->reg, XILINX_DPDMA_EIEN, reg);
 
 	dpdma_clr(chan->reg, XILINX_DPDMA_CH_CNTL, XILINX_DPDMA_CH_CNTL_ENABLE);
 }
@@ -1712,15 +1712,6 @@ static void xilinx_dpdma_chan_handle_err(struct xilinx_dpdma_chan *chan)
 	spin_unlock_irqrestore(&chan->lock, flags);
 }
 
-static int xilinx_dpdma_chan_config(struct xilinx_dpdma_chan *chan,
-				    struct dma_slave_config *config)
-{
-	if (config->direction != DMA_MEM_TO_DEV)
-		return -EINVAL;
-
-	return 0;
-}
-
 /* DMA tx descriptor */
 
 static dma_cookie_t xilinx_dpdma_tx_submit(struct dma_async_tx_descriptor *tx)
@@ -1830,33 +1821,6 @@ static void xilinx_dpdma_free_chan_resources(struct dma_chan *dchan)
 	xilinx_dpdma_chan_free_resources(chan);
 }
 
-static int xilinx_dpdma_device_control(struct dma_chan *dchan,
-				       enum dma_ctrl_cmd cmd, unsigned long arg)
-{
-	struct xilinx_dpdma_chan *chan = to_xilinx_chan(dchan);
-	int ret = 0;
-
-	switch (cmd) {
-	case DMA_TERMINATE_ALL:
-		ret = xilinx_dpdma_chan_terminate_all(chan);
-		break;
-	case DMA_PAUSE:
-		xilinx_dpdma_chan_pause(chan);
-		break;
-	case DMA_RESUME:
-		xilinx_dpdma_chan_unpause(chan);
-		break;
-	case DMA_SLAVE_CONFIG:
-		ret = xilinx_dpdma_chan_config(chan,
-					       (struct dma_slave_config *)arg);
-		break;
-	default:
-		return -ENOSYS;
-	}
-
-	return ret;
-}
-
 static enum dma_status xilinx_dpdma_tx_status(struct dma_chan *dchan,
 					      dma_cookie_t cookie,
 					      struct dma_tx_state *txstate)
@@ -1872,20 +1836,34 @@ static void xilinx_dpdma_issue_pending(struct dma_chan *dchan)
 	xilinx_dpdma_chan_issue_pending(chan);
 }
 
-#define XILINX_DPDMA_BUSWIDTHS	BIT(DMA_SLAVE_BUSWIDTH_UNDEFINED)
+static int xilinx_dpdma_config(struct dma_chan *dchan,
+			       struct dma_slave_config *config)
+{
+	if (config->direction != DMA_MEM_TO_DEV)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int xilinx_dpdma_pause(struct dma_chan *dchan)
+{
+	xilinx_dpdma_chan_pause(to_xilinx_chan(dchan));
+
+	return 0;
+}
 
-static int xilinx_dpdma_slave_caps(struct dma_chan *dchan,
-				   struct dma_slave_caps *caps)
+static int xilinx_dpdma_resume(struct dma_chan *dchan)
 {
-	caps->src_addr_widths = XILINX_DPDMA_BUSWIDTHS;
-	caps->directions = BIT(DMA_MEM_TO_DEV);
-	caps->cmd_pause = true;
-	caps->cmd_terminate = true;
-	caps->residue_granularity = DMA_RESIDUE_GRANULARITY_DESCRIPTOR;
+	xilinx_dpdma_chan_unpause(to_xilinx_chan(dchan));
 
 	return 0;
 }
 
+static int xilinx_dpdma_terminate_all(struct dma_chan *dchan)
+{
+	return xilinx_dpdma_chan_terminate_all(to_xilinx_chan(dchan));
+}
+
 /* Xilinx DPDMA device operations */
 
 /**
@@ -2183,10 +2161,15 @@ static int xilinx_dpdma_probe(struct platform_device *pdev)
 	ddev->device_prep_slave_sg = xilinx_dpdma_prep_slave_sg;
 	ddev->device_prep_dma_cyclic = xilinx_dpdma_prep_dma_cyclic;
 	ddev->device_prep_interleaved_dma = xilinx_dpdma_prep_interleaved_dma;
-	ddev->device_control = xilinx_dpdma_device_control;
 	ddev->device_tx_status = xilinx_dpdma_tx_status;
 	ddev->device_issue_pending = xilinx_dpdma_issue_pending;
-	ddev->device_slave_caps = xilinx_dpdma_slave_caps;
+	ddev->device_config = xilinx_dpdma_config;
+	ddev->device_pause = xilinx_dpdma_pause;
+	ddev->device_resume = xilinx_dpdma_resume;
+	ddev->device_terminate_all = xilinx_dpdma_terminate_all;
+	ddev->src_addr_widths = BIT(DMA_SLAVE_BUSWIDTH_UNDEFINED);
+	ddev->directions = BIT(DMA_MEM_TO_DEV);
+	ddev->residue_granularity = DMA_RESIDUE_GRANULARITY_DESCRIPTOR;
 
 	for_each_child_of_node(node, child) {
 		chan = xilinx_dpdma_chan_probe(child, xdev);
-- 
2.7.4

