From f7498207409ad20a491def16786b07da26bad512 Mon Sep 17 00:00:00 2001
From: Rohit Athavale <rohit.athavale@xilinx.com>
Date: Tue, 18 Jul 2017 17:05:20 -0700
Subject: [PATCH 199/532] v4l: xilinx-vpss-scaler: add bilinear and bicubic
 scaling support

commit 0c99a1e78778ff252e44ab7a3e7cc77f2628582d from
https://github.com/Xilinx/linux-xlnx.git

This commit adds bilinear and bicubic scaling support to
the driver.Bilinear scaling is much simpler as the driver
need not program coefficients.

Signed-off-by: Rohit Athavale <rohit.athavale@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/media/platform/xilinx/xilinx-vpss-scaler.c | 55 ++++++++++++++++------
 1 file changed, 40 insertions(+), 15 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-vpss-scaler.c b/drivers/media/platform/xilinx/xilinx-vpss-scaler.c
index d82af95..c7fdd37 100644
--- a/drivers/media/platform/xilinx/xilinx-vpss-scaler.c
+++ b/drivers/media/platform/xilinx/xilinx-vpss-scaler.c
@@ -92,6 +92,8 @@ enum xscaler_vid_reg_fmts {
 #define XV_VSCALER_MAX_V_TAPS           (12)
 #define XV_VSCALER_MAX_V_PHASES         (64)
 
+#define XV_HSCALER_TAPS_2		(2)
+#define XV_HSCALER_TAPS_4		(4)
 /* Mask definitions for Low and high 16 bits in a 32 bit number */
 #define XVSC_MASK_LOW_16BITS            (0x0000FFFF)
 #define XVSC_MASK_HIGH_16BITS           (0xFFFF0000)
@@ -100,6 +102,8 @@ enum xscaler_vid_reg_fmts {
 #define XV_HSCALER_TAPS_8		(8)
 #define XV_HSCALER_TAPS_10		(10)
 #define XV_HSCALER_TAPS_12		(12)
+#define XV_VSCALER_TAPS_2		(2)
+#define XV_VSCALER_TAPS_4		(4)
 #define XV_VSCALER_TAPS_6		(6)
 #define XV_VSCALER_TAPS_8		(8)
 #define XV_VSCALER_TAPS_10		(10)
@@ -726,6 +730,7 @@ xvsc_coeff_taps12[XV_VSCALER_MAX_V_PHASES][XV_VSCALER_TAPS_12] = {
  * @H_phases: The phases needed to program the H-scaler for different taps
  * @hscaler_coeff: The complete array of H-scaler coefficients
  * @vscaler_coeff: The complete array of V-scaler coefficients
+ * @is_polyphase: Track if scaling algorithm is polyphase or not
  * @rst_gpio: GPIO reset line to bring VPSS Scaler out of reset
  *
  * This is the driver structure that keeps a track of the device context.
@@ -754,6 +759,7 @@ struct xscaler_device {
 	u64 H_phases[XV_HSCALER_MAX_LINE_WIDTH];
 	short hscaler_coeff[XV_HSCALER_MAX_H_PHASES][XV_HSCALER_MAX_H_TAPS];
 	short vscaler_coeff[XV_VSCALER_MAX_V_PHASES][XV_VSCALER_MAX_V_TAPS];
+	bool is_polyphase;
 
 	struct gpio_desc *rst_gpio;
 };
@@ -1367,9 +1373,13 @@ static int xscaler_s_stream(struct v4l2_subdev *subdev, int enable)
 	 */
 	line_rate = (height_in * STEP_PRECISION) / height_out;
 
-	xv_vscaler_select_coeff(xscaler, height_in, height_out);
-	xv_vscaler_set_coeff(xscaler);
-
+	if (xscaler->is_polyphase) {
+		ret = xv_vscaler_select_coeff(xscaler, height_in, height_out);
+		if (ret < 0)
+			return ret;
+		xv_vscaler_set_coeff(xscaler);
+	}
+ 
 	xvip_write(&xscaler->xvip, V_VSCALER_OFF +
 		   XV_VSCALER_CTRL_ADDR_HWREG_HEIGHTIN_DATA, height_in);
 	xvip_write(&xscaler->xvip, V_VSCALER_OFF +
@@ -1400,12 +1410,13 @@ static int xscaler_s_stream(struct v4l2_subdev *subdev, int enable)
 		return -EINVAL;
 	}
 
-	/* Set Polyphase coeff */
-	xv_hscaler_select_coeff(xscaler, width_in, width_out);
-	/* Program generated coefficients into the IP register bank */
-	xv_hscaler_set_coeff(xscaler);
-
-	/* Set HPHASE coeff */
+	if (xscaler->is_polyphase) {
+		ret = xv_hscaler_select_coeff(xscaler, width_in, width_out);
+		if (ret < 0)
+			return ret;
+		xv_hscaler_set_coeff(xscaler);
+	}
+ 
 	calculate_phases(xscaler, width_in, width_out, pixel_rate);
 	rval = xv_hscaler_set_phases(xscaler);
 	if (rval < 0)
@@ -1592,13 +1603,15 @@ static int xscaler_parse_of(struct xscaler_device *xscaler)
 		return ret;
 
 	switch (xscaler->num_hori_taps) {
-	case XV_HSCALER_TAPS_6:
+	case XV_HSCALER_TAPS_2:
+	case XV_HSCALER_TAPS_4:
+		xscaler->is_polyphase = false;
 		break;
+	case XV_HSCALER_TAPS_6:
 	case XV_HSCALER_TAPS_8:
-		break;
 	case XV_HSCALER_TAPS_10:
-		break;
 	case XV_HSCALER_TAPS_12:
+		xscaler->is_polyphase = true;
 		break;
 	default:
 		dev_err(dev, "Unsupported num-hori-taps %d",
@@ -1611,14 +1624,26 @@ static int xscaler_parse_of(struct xscaler_device *xscaler)
 	if (ret < 0)
 		return ret;
 
+	/*
+	 * For Bilinear and Bicubic case
+	 * number of vertical and horizontal taps must match
+	 */
 	switch (xscaler->num_vert_taps) {
-	case XV_VSCALER_TAPS_6:
+	case XV_HSCALER_TAPS_2:
+	case XV_VSCALER_TAPS_4:
+		if (xscaler->num_vert_taps != xscaler->num_hori_taps) {
+			dev_err(dev,
+				"H-scaler taps %d mismatches V-scaler taps %d",
+				 xscaler->num_hori_taps,
+				 xscaler->num_vert_taps);
+			return -EINVAL;
+		}
 		break;
+	case XV_VSCALER_TAPS_6:
 	case XV_VSCALER_TAPS_8:
-		break;
 	case XV_VSCALER_TAPS_10:
-		break;
 	case XV_VSCALER_TAPS_12:
+		xscaler->is_polyphase = true;
 		break;
 	default:
 		dev_err(dev, "Unsupported num-vert-taps %d",
-- 
2.7.4

