From 3f4aab7ceb377397e34358ab7c4bd0783996fbaf Mon Sep 17 00:00:00 2001
From: Rohit Athavale <rohit.athavale@xilinx.com>
Date: Fri, 4 Aug 2017 15:54:08 -0700
Subject: [PATCH 288/532] v4l: xilinx-vpss-csc: Any-to-any color space
 conversion

commit 1437167470651ab76267bb0433274efb0e22a758 from
https://github.com/Xilinx/linux-xlnx.git

In 2017.3, the VPSS CSC IP supports any-to-any color space converion.
This implies the color space conversion can occur from an
input format consisting of - RGB, YUV 444, YUV 422, YUV 420 to an
output format list consisting of - RGB, YUV 444, YUV 422, YUV 420.

The IP supports YUV 420, but due to the lack of YUV 420 in
media-bus-format.h that support in the driver will be deferred to later.

Signed-off-by: Rohit Athavale <rathaval@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/media/platform/xilinx/xilinx-vpss-csc.c | 184 ++++++++++++------------
 1 file changed, 88 insertions(+), 96 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-vpss-csc.c b/drivers/media/platform/xilinx/xilinx-vpss-csc.c
index 9da6ebf..581edd8 100644
--- a/drivers/media/platform/xilinx/xilinx-vpss-csc.c
+++ b/drivers/media/platform/xilinx/xilinx-vpss-csc.c
@@ -25,13 +25,9 @@
 
 enum xcsc_color_fmt {
 	XVIDC_CSF_RGB = 0,
-	XVIDC_CSF_YCRCB_444
-};
-
-enum xcsc_color_std {
-	XVIDC_BT_2020 = 1,
-	XVIDC_BT_709,
-	XVIDC_BT_601
+	XVIDC_CSF_YCRCB_444,
+	XVIDC_CSF_YCRCB_422,
+	XVIDC_CSF_YCRCB_420,
 };
 
 enum xcsc_output_range {
@@ -54,8 +50,6 @@ struct xcsc_dev {
 
 	enum xcsc_color_fmt cft_in;
 	enum xcsc_color_fmt cft_out;
-	enum xcsc_color_std std_in;
-	enum xcsc_color_std std_out;
 	enum xcsc_output_range output_range;
 	enum xcsc_color_depth color_depth;
 	s32 brightness;
@@ -188,45 +182,59 @@ static void xcsc_write_coeff(struct xcsc_dev *xcsc)
 	xcsc_write_rgb_offset(xcsc);
 }
 
-static void xcsc_rgb_to_ycrcb(struct xcsc_dev *xcsc,
-			      s32 *clamp_min, s32 *clip_max)
+static void xcsc_ycrcb_to_rgb(struct xcsc_dev *xcsc, s32 *clip_max)
 {
-	s32 bpc_scale = (1 << (xcsc->color_depth - 8));
-
-	switch (xcsc->std_out) {
-	case XVIDC_BT_709:
-		dev_info(xcsc->xvip.dev, "Performing RGB to YCrCb BT 709");
-		xcsc->k_hw[0][0] =
-			(1826 * XV_CSC_SCALE_FACTOR) / XV_CSC_DIVISOR;
-		xcsc->k_hw[0][1] =
-			(6142 * XV_CSC_SCALE_FACTOR) / XV_CSC_DIVISOR;
-		xcsc->k_hw[0][2] =
-			(620 * XV_CSC_SCALE_FACTOR) / XV_CSC_DIVISOR;
-		xcsc->k_hw[1][0] =
-			(-1006 * XV_CSC_SCALE_FACTOR) / XV_CSC_DIVISOR;
-		xcsc->k_hw[1][1] =
-			(-3386 * XV_CSC_SCALE_FACTOR) / XV_CSC_DIVISOR;
-		xcsc->k_hw[1][2] =
-			(4392 * XV_CSC_SCALE_FACTOR) / XV_CSC_DIVISOR;
-		xcsc->k_hw[2][0] =
-			(4392 * XV_CSC_SCALE_FACTOR) / XV_CSC_DIVISOR;
-		xcsc->k_hw[2][1] =
-			(-3989 * XV_CSC_SCALE_FACTOR) / XV_CSC_DIVISOR;
-		xcsc->k_hw[2][2] =
-			(-403 * XV_CSC_SCALE_FACTOR) / XV_CSC_DIVISOR;
-		xcsc->k_hw[0][3] = 16 * bpc_scale;
-		xcsc->k_hw[1][3] = 128 * bpc_scale;
-		xcsc->k_hw[2][3] = 128 * bpc_scale;
-		break;
-	default:
-		dev_err(xcsc->xvip.dev,
-			"%s : Unsupported Output Standard", __func__);
-	}
+	u16 bpc_scale = (1 << (xcsc->color_depth - 8));
+
+	xcsc->k_hw[0][0] = 11644 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[0][1] = 0;
+	xcsc->k_hw[0][2] = 17927 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[1][0] = 11644 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[1][1] = -2132 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[1][2] = -5329 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[2][0] = 11644 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[2][1] = 21124 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[2][2] = 0;
+	xcsc->k_hw[0][3] = -248 * bpc_scale;
+	xcsc->k_hw[1][3] = 77 * bpc_scale;
+	xcsc->k_hw[2][3] = -289 * bpc_scale;
+	*clip_max = ((1 <<  xcsc->color_depth) - 1);
 
 	*clamp_min = 0;
 	*clip_max = ((1 <<  xcsc->color_depth) - 1);
 }
 
+static void xcsc_rgb_to_ycrcb(struct xcsc_dev *xcsc, s32 *clip_max)
+{
+	u16 bpc_scale = (1 << (xcsc->color_depth - 8));
+
+	/*
+	 * See http://graficaobscura.com/matrix/index.html for
+	 * how these numbers are derived. The VPSS CSC IP is
+	 * derived from this Matrix style algorithm. And the
+	 * 'magic' numbers here are derived from the algorithm.
+	 *
+	 * XV_CSC_DIVISOR is used to help with floating constants
+	 * while performing multiplicative operations
+	 *
+	 * Coefficients valid only for BT 709
+	 */
+	dev_dbg(xcsc->xvip.dev, "Performing RGB to YCrCb BT 709");
+	xcsc->k_hw[0][0] = 1826 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[0][1] = 6142 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[0][2] = 620 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[1][0] = -1006 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[1][1] = -3386 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[1][2] = 4392 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[2][0] = 4392 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[2][1] = -3989 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[2][2] = -403 * XV_CSC_SCALE_FACTOR / XV_CSC_DIVISOR;
+	xcsc->k_hw[0][3] = 16 * bpc_scale;
+	xcsc->k_hw[1][3] = 128 * bpc_scale;
+	xcsc->k_hw[2][3] = 128 * bpc_scale;
+	*clip_max = ((1 <<  xcsc->color_depth) - 1);
+}
+
 static int xcsc_set_coeff(struct xcsc_dev *xcsc)
 {
 	u32 color_in, color_out;
@@ -234,22 +242,41 @@ static int xcsc_set_coeff(struct xcsc_dev *xcsc)
 	/* Write In and Out Video Formats */
 	color_in = xcsc->formats[XVIP_PAD_SINK].code;
 	color_out = xcsc->formats[XVIP_PAD_SOURCE].code;
-	if (color_in != MEDIA_BUS_FMT_RBG888_1X24 &&
-	    xcsc->cft_in != XVIDC_CSF_RGB) {
-		dev_err(xcsc->xvip.dev, "Unsupported sink pad media code");
+
+	switch (color_in) {
+	case MEDIA_BUS_FMT_RBG888_1X24:
+		dev_dbg(xcsc->xvip.dev, "Media Format In : RGB");
 		xcsc->cft_in = XVIDC_CSF_RGB;
-		xcsc->formats[XVIP_PAD_SINK].code = MEDIA_BUS_FMT_RBG888_1X24;
+		break;
+	case MEDIA_BUS_FMT_VUY8_1X24:
+		dev_dbg(xcsc->xvip.dev, "Media Format In : YUV 444");
+		xcsc->cft_in = XVIDC_CSF_YCRCB_444;
+		break;
+	case MEDIA_BUS_FMT_UYVY8_1X16:
+		dev_dbg(xcsc->xvip.dev, "Media Format In : YUV 422");
+		xcsc->cft_in = XVIDC_CSF_YCRCB_422;
+		break;
 	}
 
-	if (color_out == MEDIA_BUS_FMT_RBG888_1X24) {
+	switch (color_out) {
+	case MEDIA_BUS_FMT_RBG888_1X24:
 		xcsc->cft_out = XVIDC_CSF_RGB;
-	} else if (color_out == MEDIA_BUS_FMT_VUY8_1X24) {
+		dev_dbg(xcsc->xvip.dev, "Media Format Out : RGB");
+		if (color_in != MEDIA_BUS_FMT_RBG888_1X24)
+			xcsc_ycrcb_to_rgb(xcsc, &xcsc->clip_max);
+		break;
+	case MEDIA_BUS_FMT_VUY8_1X24:
 		xcsc->cft_out = XVIDC_CSF_YCRCB_444;
-		xcsc_rgb_to_ycrcb(xcsc, &xcsc->clamp_min, &xcsc->clip_max);
-	} else {
-		dev_err(xcsc->xvip.dev, "Unsupported source pad media code");
-		xcsc->cft_out = XVIDC_CSF_RGB;
-		xcsc->formats[XVIP_PAD_SOURCE].code = MEDIA_BUS_FMT_RBG888_1X24;
+		dev_dbg(xcsc->xvip.dev, "Media Format Out : YUV 444");
+		if (color_in == MEDIA_BUS_FMT_RBG888_1X24)
+			xcsc_rgb_to_ycrcb(xcsc, &xcsc->clip_max);
+		break;
+	case MEDIA_BUS_FMT_UYVY8_1X16:
+		xcsc->cft_out = XVIDC_CSF_YCRCB_422;
+		dev_dbg(xcsc->xvip.dev, "Media Format Out : YUV 422");
+		if (color_in == MEDIA_BUS_FMT_RBG888_1X24)
+			xcsc_rgb_to_ycrcb(xcsc, &xcsc->clip_max);
+		break;
 	}
 
 	xcsc_write(xcsc, XV_CSC_INVIDEOFORMAT, xcsc->cft_in, __func__);
@@ -288,8 +315,6 @@ static void xcsc_set_default_state(struct xcsc_dev *xcsc)
 {
 	xcsc->cft_in = XVIDC_CSF_RGB;
 	xcsc->cft_out = XVIDC_CSF_RGB;
-	xcsc->std_in = XVIDC_BT_709;
-	xcsc->std_out = XVIDC_BT_709;
 	xcsc->output_range = XVIDC_CR_0_255;
 	xcsc->color_depth = XVIDC_BPC_8;
 	xcsc->brightness  = 120;
@@ -458,9 +483,6 @@ static int xcsc_s_stream(struct v4l2_subdev *subdev, int enable)
 		usleep_range(150, 200);
 		gpiod_set_value_cansleep(xcsc->rst_gpio, 0x0);
 		usleep_range(150, 200);
-		/* Restore hw state */
-		xcsc_set_coeff(xcsc);
-		xcsc_set_size(xcsc);
 		return 0;
 	}
 	dev_dbg(xcsc->xvip.dev, "%s : On", __func__);
@@ -501,28 +523,13 @@ static int xcsc_set_format(struct v4l2_subdev *subdev,
 					    XVIP_PAD_SOURCE, fmt->which);
 	*__format = fmt->format;
 
-	if (fmt->pad == XVIP_PAD_SINK) {
-		if (fmt->format.code != MEDIA_BUS_FMT_RBG888_1X24)
-			dev_err(xcsc->xvip.dev, "Not supported Sink Media Format");
-		xcsc->cft_in = XVIDC_CSF_RGB;
-		__format->code = MEDIA_BUS_FMT_RBG888_1X24;
-
-	} else if (fmt->pad == XVIP_PAD_SOURCE) {
-		if ((fmt->format.code != MEDIA_BUS_FMT_VUY8_1X24) &&
-		    (fmt->format.code != MEDIA_BUS_FMT_RBG888_1X24)) {
-			dev_err(xcsc->xvip.dev, "Not supported Source Format");
-			xcsc->cft_out = XVIDC_CSF_RGB;
-			__format->code = MEDIA_BUS_FMT_RBG888_1X24;
-		} else {
-			if (fmt->format.code == MEDIA_BUS_FMT_RBG888_1X24)
-				xcsc->cft_out = XVIDC_CSF_RGB;
-			else
-				xcsc->cft_out = XVIDC_CSF_YCRCB_444;
-		}
-
-	} else {
-		/* Should never get here */
-		dev_err(xcsc->xvip.dev, "Undefined media pad");
+	switch (__format->code) {
+	case MEDIA_BUS_FMT_VUY8_1X24:
+	case MEDIA_BUS_FMT_RBG888_1X24:
+	case MEDIA_BUS_FMT_UYVY8_1X16:
+		break;
+	default:
+		/* Unsupported Format. Default to RGB */
 		return -EINVAL;
 	}
 
@@ -762,31 +769,16 @@ static int xcsc_probe(struct platform_device *pdev)
 	/* Default Formats Initialization */
 	def_fmt = &xcsc->default_formats[XVIP_PAD_SINK];
 	def_fmt->code = xcsc->vip_formats[XVIP_PAD_SINK]->code;
-	/* Sink only supports RGB888 */
-	if (xcsc->vip_formats[XVIP_PAD_SINK]->code !=
-				MEDIA_BUS_FMT_RBG888_1X24) {
-		def_fmt->code = MEDIA_BUS_FMT_RBG888_1X24;
-		xcsc->cft_in = XVIDC_CSF_RGB;
-	}
 	def_fmt->field = V4L2_FIELD_NONE;
 	def_fmt->colorspace = V4L2_COLORSPACE_SRGB;
 	def_fmt->width = XV_CSC_DEFAULT_WIDTH;
 	def_fmt->height = XV_CSC_DEFAULT_HEIGHT;
 	xcsc->formats[XVIP_PAD_SINK] = *def_fmt;
 
-	/* Source supports only YUV 444 or RGB 888 */
+	/* Source supports only YUV 444, YUV 422, and RGB */
 	def_fmt = &xcsc->default_formats[XVIP_PAD_SOURCE];
 	*def_fmt = xcsc->default_formats[XVIP_PAD_SINK];
 	def_fmt->code = xcsc->vip_formats[XVIP_PAD_SOURCE]->code;
-	if (def_fmt->code == MEDIA_BUS_FMT_VUY8_1X24) {
-		xcsc->cft_out = XVIDC_CSF_YCRCB_444;
-	} else if (def_fmt->code == MEDIA_BUS_FMT_RBG888_1X24) {
-		xcsc->cft_out = XVIDC_CSF_RGB;
-	} else {
-		/* Default to RGB */
-		xcsc->cft_out = XVIDC_CSF_RGB;
-		def_fmt->code = MEDIA_BUS_FMT_RBG888_1X24;
-	}
 	def_fmt->width = XV_CSC_DEFAULT_WIDTH;
 	def_fmt->height = XV_CSC_DEFAULT_HEIGHT;
 	xcsc->formats[XVIP_PAD_SOURCE] = *def_fmt;
-- 
2.7.4

