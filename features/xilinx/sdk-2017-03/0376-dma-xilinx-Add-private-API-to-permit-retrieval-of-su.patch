From d30237af03c512a4220f7984ec1d935bbac16dc2 Mon Sep 17 00:00:00 2001
From: Jeffrey Mouroux <jeff.mouroux@xilinx.com>
Date: Wed, 6 Sep 2017 16:32:59 -0700
Subject: [PATCH 376/532] dma: xilinx: Add private API to permit retrieval of
 supported mem formats

commit f618d3b9e121d8036139419b139f7011903c77dc from
https://github.com/Xilinx/linux-xlnx.git

The video Framebuffer DMA IP requires clients to send a fourcc code
to indicate the memory format layout.  The IP can be configured to support
a variety of memory formats ranging from YUYV, RGB and in either 8 bit
or 10 bit formats.  There has been no method for clients to obtain
this list of supported formats.  This patch adds private APIs that
can be called from clients to retrieve this list so that user space
applications can choose from any of the available memory formats.

Depends on patch 13fd162 (dma: xilinx: Bug fix to ensure only video formats
enabled in IP are in driver)

Signed-off-by: Jeffrey Mouroux <jmouroux@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/dma/xilinx/xilinx_frmbuf.c | 253 ++++++++++++++++++++++++++-----------
 include/linux/dma/xilinx_frmbuf.h  |  36 ++++++
 2 files changed, 217 insertions(+), 72 deletions(-)

diff --git a/drivers/dma/xilinx/xilinx_frmbuf.c b/drivers/dma/xilinx/xilinx_frmbuf.c
index d3219c2..6d29828 100644
--- a/drivers/dma/xilinx/xilinx_frmbuf.c
+++ b/drivers/dma/xilinx/xilinx_frmbuf.c
@@ -21,8 +21,9 @@
  */
 
 #include <linux/bitops.h>
+#include <linux/dma/xilinx_frmbuf.h>
 #include <linux/dmapool.h>
-#include <linux/dma/xilinx_dma.h>
+#include <linux/gpio/consumer.h>
 #include <linux/init.h>
 #include <linux/interrupt.h>
 #include <linux/io.h>
@@ -30,19 +31,15 @@
 #include <linux/module.h>
 #include <linux/of_address.h>
 #include <linux/of_dma.h>
-#include <linux/of_platform.h>
 #include <linux/of_irq.h>
+#include <linux/of_platform.h>
 #include <linux/slab.h>
-#include <linux/gpio/consumer.h>
+#include <linux/videodev2.h>
 
-#include <uapi/drm/drm_fourcc.h>
-#include <uapi/linux/videodev2.h>
+#include <drm/drm_fourcc.h>
 
 #include "../dmaengine.h"
 
-#define XILINX_FBMBUF_WR			0x0
-#define XILINX_FBMBUF_RD			0x1
-
 /* Register/Descriptor Offsets */
 #define XILINX_FRMBUF_CTRL_OFFSET		0x00
 #define XILINX_FRMBUF_GIE_OFFSET		0x04
@@ -135,6 +132,7 @@ struct xilinx_frmbuf_chan {
 	struct xilinx_frmbuf_device *xdev;
 	/* Descriptor operation lock */
 	spinlock_t lock;
+	struct list_head chan_node;
 	struct list_head pending_list;
 	struct list_head done_list;
 	struct xilinx_frmbuf_tx_descriptor *staged_desc;
@@ -151,28 +149,10 @@ struct xilinx_frmbuf_chan {
 };
 
 /**
- * struct xilinx_frmbuf_device - dma device structure
- * @regs: I/O mapped base address
- * @dev: Device Structure
- * @common: DMA device structure
- * @chan: Driver specific dma channel
- * @rst_gpio: GPIO reset
- * @enabled_vid_fmts: Bitmask of video formats enabled in hardware
- */
-struct xilinx_frmbuf_device {
-	void __iomem *regs;
-	struct device *dev;
-	struct dma_device common;
-	struct xilinx_frmbuf_chan chan;
-	struct gpio_desc *rst_gpio;
-	u32 enabled_vid_fmts;
-};
-
-/**
- * struct xilinx_frmbuf_format_desc
+ * struct xilinx_frmbuf_format_desc - lookup table to match fourcc to format
  * @dts_name: Device tree name for this entry.
  * @id: Format ID
- * @bytes_per_pixel: Bytes per pixel
+ * @bpp: Bytes per pixel
  * @num_planes: Expected number of plane buffers in framebuffer for this format
  * @drm_fmt: DRM video framework equivalent fourcc code
  * @v4l2_fmt: Video 4 Linux framework equivalent fourcc code
@@ -181,17 +161,20 @@ struct xilinx_frmbuf_device {
  */
 struct xilinx_frmbuf_format_desc {
 	const char *dts_name;
-	unsigned int id;
-	unsigned int bytes_per_pixel;
+	u32 id;
+	u32 bpp;
 	u32 num_planes;
 	u32 drm_fmt;
 	u32 v4l2_fmt;
 	u32 fmt_bitmask;
 };
 
+static LIST_HEAD(frmbuf_chan_list);
+static DEFINE_MUTEX(frmbuf_chan_list_lock);
+
 static const struct xilinx_frmbuf_format_desc xilinx_frmbuf_formats[] = {
-	{		
-		.dts_name = "xbgr8888",	
+	{
+		.dts_name = "xbgr8888",
 		.id = XILINX_FRMBUF_FMT_RGBX8,
 		.bpp = 4,
 		.num_planes = 1,
@@ -264,6 +247,32 @@ static const struct xilinx_frmbuf_format_desc xilinx_frmbuf_formats[] = {
 	},
 };
 
+/**
+ * struct xilinx_frmbuf_device - dma device structure
+ * @regs: I/O mapped base address
+ * @dev: Device Structure
+ * @common: DMA device structure
+ * @chan: Driver specific dma channel
+ * @rst_gpio: GPIO reset
+ * @enabled_vid_fmts: Bitmask of video formats enabled in hardware
+ * @drm_memory_fmts: Array of supported DRM fourcc codes
+ * @drm_fmt_cnt: Count of supported DRM fourcc codes
+ * @v4l2_memory_fmts: Array of supported V4L2 fourcc codes
+ * @v4l2_fmt_cnt: Count of supported V4L2 fourcc codes
+ */
+struct xilinx_frmbuf_device {
+	void __iomem *regs;
+	struct device *dev;
+	struct dma_device common;
+	struct xilinx_frmbuf_chan chan;
+	struct gpio_desc *rst_gpio;
+	u32 enabled_vid_fmts;
+	u32 drm_memory_fmts[ARRAY_SIZE(xilinx_frmbuf_formats)];
+	u32 drm_fmt_cnt;
+	u32 v4l2_memory_fmts[ARRAY_SIZE(xilinx_frmbuf_formats)];
+	u32 v4l2_fmt_cnt;
+};
+
 static const struct of_device_id xilinx_frmbuf_of_ids[] = {
 	{ .compatible = "xlnx,axi-frmbuf-wr-v2",
 		.data = (void *)DMA_DEV_TO_MEM},
@@ -273,10 +282,6 @@ static const struct of_device_id xilinx_frmbuf_of_ids[] = {
 };
 
 /******************************PROTOTYPES*************************************/
-static void xilinx_frmbuf_chan_reset(struct xilinx_frmbuf_chan *chan);
-
-static int xilinx_frmbuf_set_vid_fmt(struct xilinx_frmbuf_chan *chan);
-
 #define to_xilinx_chan(chan) \
 	container_of(chan, struct xilinx_frmbuf_chan, common)
 #define to_dma_tx_descriptor(tx) \
@@ -324,6 +329,49 @@ static inline void frmbuf_set(struct xilinx_frmbuf_chan *chan, u32 reg,
 	frmbuf_write(chan, reg, frmbuf_read(chan, reg) | set);
 }
 
+static void frmbuf_init_format_array(struct xilinx_frmbuf_device *xdev)
+{
+	u32 i, cnt;
+
+	for (i = 0; i < ARRAY_SIZE(xilinx_frmbuf_formats); i++) {
+		if (!(xdev->enabled_vid_fmts &
+		      xilinx_frmbuf_formats[i].fmt_bitmask))
+			continue;
+
+		if (xilinx_frmbuf_formats[i].drm_fmt) {
+			cnt = xdev->drm_fmt_cnt++;
+			xdev->drm_memory_fmts[cnt] =
+				xilinx_frmbuf_formats[i].drm_fmt;
+		}
+
+		if (xilinx_frmbuf_formats[i].v4l2_fmt) {
+			cnt = xdev->v4l2_fmt_cnt++;
+			xdev->v4l2_memory_fmts[cnt] =
+				xilinx_frmbuf_formats[i].v4l2_fmt;
+		}
+	}
+}
+
+static struct xilinx_frmbuf_device *frmbuf_find_dev(struct dma_chan *chan)
+{
+	struct xilinx_frmbuf_chan *xchan, *temp;
+	struct xilinx_frmbuf_device *xdev;
+	bool is_frmbuf_chan = false;
+
+	list_for_each_entry_safe(xchan, temp, &frmbuf_chan_list, chan_node) {
+		if (chan == &xchan->common)
+			is_frmbuf_chan = true;
+	}
+
+	if (!is_frmbuf_chan)
+		return ERR_PTR(-ENODEV);
+
+	xchan = to_xilinx_chan(chan);
+	xdev = container_of(xchan, struct xilinx_frmbuf_device, chan);
+
+	return xdev;
+}
+
 static int frmbuf_verify_format(struct dma_chan *chan, u32 fourcc, u32 type)
 {
 	struct xilinx_frmbuf_chan *xil_chan = to_xilinx_chan(chan);
@@ -346,25 +394,81 @@ static int frmbuf_verify_format(struct dma_chan *chan, u32 fourcc, u32 type)
 	return -EINVAL;
 }
 
-/**
- * Get bytes per pixel of given format
- * @id IP-specific integer representing a specific video memory format
- *
- * Returns bytes per pixel; 0 otherwise
- */
-unsigned int xilinx_frmbuf_format_bpp(unsigned int id)
+static void xilinx_xdma_set_config(struct dma_chan *chan, u32 fourcc, u32 type)
 {
-	const struct xilinx_frmbuf_format_desc *format;
-	unsigned int i;
+	struct xilinx_frmbuf_chan *xil_chan;
+	bool found_xchan = false;
+	int ret;
+
+	mutex_lock(&frmbuf_chan_list_lock);
+	list_for_each_entry(xil_chan, &frmbuf_chan_list, chan_node) {
+		if (chan == &xil_chan->common) {
+			found_xchan = true;
+			break;
+		}
+	}
+	mutex_unlock(&frmbuf_chan_list_lock);
 
-	for (i = 0; i < ARRAY_SIZE(xilinx_frmbuf_formats); i++) {
-		format = &xilinx_frmbuf_formats[i];
-		if (id == format->id)
-			return format->bytes_per_pixel;
+	if (!found_xchan) {
+		dev_dbg(chan->device->dev,
+			"dma chan not a Video Framebuffer channel instance\n");
+		return;
+	}
+
+	ret = frmbuf_verify_format(chan, fourcc, type);
+	if (ret == -EINVAL) {
+		dev_err(chan->device->dev,
+			"Framebuffer not configured for fourcc 0x%x\n",
+			fourcc);
+		return;
 	}
+}
+
+void xilinx_xdma_drm_config(struct dma_chan *chan, u32 drm_fourcc)
+{
+	xilinx_xdma_set_config(chan, drm_fourcc, XDMA_DRM);
+
+} EXPORT_SYMBOL_GPL(xilinx_xdma_drm_config);
+
+void xilinx_xdma_v4l2_config(struct dma_chan *chan, u32 v4l2_fourcc)
+{
+	xilinx_xdma_set_config(chan, v4l2_fourcc, XDMA_V4L2);
+
+} EXPORT_SYMBOL_GPL(xilinx_xdma_v4l2_config);
+
+int xilinx_xdma_get_drm_vid_fmts(struct dma_chan *chan, u32 *fmt_cnt,
+				 u32 **fmts)
+{
+	struct xilinx_frmbuf_device *xdev;
+
+	xdev = frmbuf_find_dev(chan);
+
+	if (IS_ERR(xdev))
+		return PTR_ERR(xdev);
+
+	*fmt_cnt = xdev->drm_fmt_cnt;
+	*fmts = xdev->drm_memory_fmts;
+
+	return 0;
+}
+EXPORT_SYMBOL(xilinx_xdma_get_drm_vid_fmts);
+
+int xilinx_xdma_get_v4l2_vid_fmts(struct dma_chan *chan, u32 *fmt_cnt,
+				  u32 **fmts)
+{
+	struct xilinx_frmbuf_device *xdev;
+
+	xdev = frmbuf_find_dev(chan);
+
+	if (IS_ERR(xdev))
+		return PTR_ERR(xdev);
+
+	*fmt_cnt = xdev->v4l2_fmt_cnt;
+	*fmts = xdev->v4l2_memory_fmts;
 
 	return 0;
 }
+EXPORT_SYMBOL(xilinx_xdma_get_v4l2_vid_fmts);
 
 /**
  * of_dma_xilinx_xlate - Translation function
@@ -604,8 +708,6 @@ static void xilinx_frmbuf_start_transfer(struct xilinx_frmbuf_chan *chan)
 	frmbuf_write(chan, XILINX_FRMBUF_STRIDE_OFFSET, desc->hw.stride);
 	frmbuf_write(chan, XILINX_FRMBUF_HEIGHT_OFFSET, desc->hw.vsize);
 	frmbuf_write(chan, XILINX_FRMBUF_FMT_OFFSET, chan->vid_fmt->id);
-	frmbuf_write(chan, XILINX_FRMBUF_IE_OFFSET, XILINX_FRMBUF_IE_AP_READY);
-	frmbuf_write(chan, XILINX_FRMBUF_GIE_OFFSET, XILINX_FRMBUF_GIE_EN);
 
 	/* Start the hardware */
 	xilinx_frmbuf_start(chan);
@@ -721,7 +823,6 @@ xilinx_frmbuf_dma_prep_interleaved(struct dma_chan *dchan,
 	struct xilinx_frmbuf_chan *chan = to_xilinx_chan(dchan);
 	struct xilinx_frmbuf_tx_descriptor *desc;
 	struct xilinx_frmbuf_desc_hw *hw;
-	int bytes_per_pixel;
 
 	if (chan->direction != xt->dir || !chan->vid_fmt)
 		goto error;
@@ -740,27 +841,9 @@ xilinx_frmbuf_dma_prep_interleaved(struct dma_chan *dchan,
 	desc->async_tx.tx_submit = xilinx_frmbuf_tx_submit;
 	async_tx_ack(&desc->async_tx);
 
-	if (xilinx_frmbuf_set_vid_fmt(chan))
-		goto error;
-
-	bytes_per_pixel = xilinx_frmbuf_format_bpp(chan->vid_fmt_id);
-
-	if (bytes_per_pixel < 1)
-		goto error;
-
-	/* Fill in the hardware descriptor */
 	hw = &desc->hw;
-
-	/* vsize is number of active hor pixels */
 	hw->vsize = xt->numf;
-
-	/* hsize is number of active ver pixels */
-	hw->hsize = xt->sgl[0].size / bytes_per_pixel;
-
-	/* Stride is given in bytes.
-	 * It is width x bytes/pixel rounded up to
-	 * a multiple of AXI_MM_DATA_WIDTH in bytes.
-	 */
+	hw->hsize = xt->sgl[0].size / chan->vid_fmt->bpp;
 	hw->stride = xt->sgl[0].icg + xt->sgl[0].size;
 
 	if (chan->direction == DMA_MEM_TO_DEV) {
@@ -807,6 +890,17 @@ static int xilinx_frmbuf_terminate_all(struct dma_chan *dchan)
 	return 0;
 }
 
+/**
+ * xilinx_frmbuf_synchronize - kill tasklet to stop further descr processing
+ * @dchan: Driver specific dma channel pointer
+ */
+static void xilinx_frmbuf_synchronize(struct dma_chan *dchan)
+{
+	struct xilinx_frmbuf_chan *chan = to_xilinx_chan(dchan);
+
+	tasklet_kill(&chan->tasklet);
+}
+
 /* -----------------------------------------------------------------------------
  * Probe and remove
  */
@@ -823,6 +917,10 @@ static void xilinx_frmbuf_chan_remove(struct xilinx_frmbuf_chan *chan)
 
 	tasklet_kill(&chan->tasklet);
 	list_del(&chan->common.device_node);
+
+	mutex_lock(&frmbuf_chan_list_lock);
+	list_del(&chan->chan_node);
+	mutex_unlock(&frmbuf_chan_list_lock);
 }
 
 /**
@@ -884,6 +982,10 @@ static int xilinx_frmbuf_chan_probe(struct xilinx_frmbuf_device *xdev,
 
 	list_add_tail(&chan->common.device_node, &xdev->common.channels);
 
+	mutex_lock(&frmbuf_chan_list_lock);
+	list_add_tail(&chan->chan_node, &frmbuf_chan_list);
+	mutex_unlock(&frmbuf_chan_list_lock);
+
 	xilinx_frmbuf_chan_reset(chan);
 
 	return 0;
@@ -960,6 +1062,7 @@ static int xilinx_frmbuf_probe(struct platform_device *pdev)
 		xdev->common.directions = BIT(DMA_MEM_TO_DEV);
 		dev_info(&pdev->dev, "Xilinx AXI frmbuf DMA_MEM_TO_DEV\n");
 	} else {
+		xilinx_frmbuf_chan_remove(&xdev->chan);
 		return -EINVAL;
 	}
 
@@ -989,6 +1092,9 @@ static int xilinx_frmbuf_probe(struct platform_device *pdev)
 		}
 	}
 
+	/* Determine supported vid framework formats */
+	frmbuf_init_format_array(xdev);
+
 	xdev->common.device_alloc_chan_resources =
 				xilinx_frmbuf_alloc_chan_resources;
 	xdev->common.device_free_chan_resources =
@@ -996,6 +1102,7 @@ static int xilinx_frmbuf_probe(struct platform_device *pdev)
 	xdev->common.device_prep_interleaved_dma =
 				xilinx_frmbuf_dma_prep_interleaved;
 	xdev->common.device_terminate_all = xilinx_frmbuf_terminate_all;
+	xdev->common.device_synchronize = xilinx_frmbuf_synchronize;
 	xdev->common.device_tx_status = xilinx_frmbuf_tx_status;
 	xdev->common.device_issue_pending = xilinx_frmbuf_issue_pending;
 
@@ -1007,7 +1114,9 @@ static int xilinx_frmbuf_probe(struct platform_device *pdev)
 
 	if (err < 0) {
 		dev_err(&pdev->dev, "Unable to register DMA to DT\n");
+		xilinx_frmbuf_chan_remove(&xdev->chan);
 		dma_async_device_unregister(&xdev->common);
+		return err;
 	}
 
 	dev_info(&pdev->dev, "Xilinx AXI FrameBuffer Engine Driver Probed!!\n");
@@ -1046,4 +1155,4 @@ module_platform_driver(xilinx_frmbuf_driver);
 
 MODULE_AUTHOR("Xilinx, Inc.");
 MODULE_DESCRIPTION("Xilinx Framebuffer driver");
-MODULE_LICENSE("GPL");
+MODULE_LICENSE("GPL v2");
diff --git a/include/linux/dma/xilinx_frmbuf.h b/include/linux/dma/xilinx_frmbuf.h
index 6356d05..0c71605 100644
--- a/include/linux/dma/xilinx_frmbuf.h
+++ b/include/linux/dma/xilinx_frmbuf.h
@@ -48,6 +48,30 @@ void xilinx_xdma_drm_config(struct dma_chan *chan, u32 drm_fourcc);
  * data memory format within the hardware DMA.
  */
 void xilinx_xdma_v4l2_config(struct dma_chan *chan, u32 v4l2_fourcc);
+
+/**
+ * xilinx_xdma_get_drm_vid_fmts - obtain list of supported DRM mem formats
+ * @chan: dma channel instance
+ * @fmt_cnt: Output param - total count of supported DRM fourcc codes
+ * @fmts: Output param - pointer to array of DRM fourcc codes (not a copy)
+ *
+ * Return: a reference to an array of DRM fourcc codes supported by this
+ * instance of the Video Framebuffer Driver
+ */
+int xilinx_xdma_get_drm_vid_fmts(struct dma_chan *chan, u32 *fmt_cnt,
+				 u32 **fmts);
+
+/**
+ * xilinx_xdma_get_v4l2_vid_fmts - obtain list of supported V4L2 mem formats
+ * @chan: dma channel instance
+ * @fmt_cnt: Output param - total count of supported V4L2 fourcc codes
+ * @fmts: Output param - pointer to array of V4L2 fourcc codes (not a copy)
+ *
+ * Return: a reference to an array of V4L2 fourcc codes supported by this
+ * instance of the Video Framebuffer Driver
+ */
+int xilinx_xdma_get_v4l2_vid_fmts(struct dma_chan *chan, u32 *fmt_cnt,
+				  u32 **fmts);
 #else
 static inline void xilinx_xdma_drm_config(struct dma_chan *chan, u32 drm_fourcc)
 { }
@@ -55,6 +79,18 @@ static inline void xilinx_xdma_drm_config(struct dma_chan *chan, u32 drm_fourcc)
 static inline void xilinx_xdma_v4l2_config(struct dma_chan *chan,
 					   u32 v4l2_fourcc)
 { }
+
+int xilinx_xdma_get_drm_vid_fmts(struct dma_chan *chan, u32 *fmt_cnt,
+				 u32 **fmts);
+{
+	return -ENODEV;
+}
+
+int xilinx_xdma_get_v4l2_vid_fmts(struct dma_chan *chan, u32 *fmt_cnt,
+				  u32 **fmts);
+{
+	return -ENODEV;
+}
 #endif
 
 #endif /*__XILINX_FRMBUF_DMA_H*/
-- 
2.7.4

