From 7ce9971802045490d76fff34b3c67e870f093a99 Mon Sep 17 00:00:00 2001
From: Saurabh Sengar <saurabh.singh@xilinx.com>
Date: Thu, 16 Mar 2017 20:26:14 +0530
Subject: [PATCH 008/532] drivers: net: ethernet: TSN QBV module

commit 4128ee3dfd9aa439d48c0ace8eeaeff03ac51336 from
https://github.com/Xilinx/linux-xlnx.git

Addidng TSN QBV (time aware shaper) APIs

Signed-off-by: Saurabh Sengar <saurabhs@xilinx.com>
Acked-by: Kedareswara rao Appana <appanad@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_tsn_shaper.c | 125 ++++++++++++++++++++++
 drivers/net/ethernet/xilinx/xilinx_tsn_shaper.h | 131 ++++++++++++++++++++++++
 2 files changed, 256 insertions(+)
 create mode 100644 drivers/net/ethernet/xilinx/xilinx_tsn_shaper.c
 create mode 100644 drivers/net/ethernet/xilinx/xilinx_tsn_shaper.h

diff --git a/drivers/net/ethernet/xilinx/xilinx_tsn_shaper.c b/drivers/net/ethernet/xilinx/xilinx_tsn_shaper.c
new file mode 100644
index 0000000..ca325ff
--- /dev/null
+++ b/drivers/net/ethernet/xilinx/xilinx_tsn_shaper.c
@@ -0,0 +1,125 @@
+/*
+ * Xilinx FPGA Xilinx TSN QBV sheduler module.
+ *
+ * Copyright (c) 2017 Xilinx Pvt., Ltd
+ *
+ * Author: Syed S <syeds@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include "xilinx_axienet.h"
+#include "xilinx_tsn_shaper.h"
+
+static int __axienet_set_schedule(struct net_device *ndev, struct qbv_info *qbv)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+	int i;
+	u32 u_config_change = 0;
+	u8 port = qbv->port;
+
+	if (qbv->cycle_time == 0) {
+		/* clear the gate enable bit */
+		u_config_change &= ~CC_ADMIN_GATE_ENABLE_BIT;
+		/* open all the gates */
+		u_config_change |= CC_ADMIN_GATE_STATE_SHIFT;
+
+		axienet_iow(lp, CONFIG_CHANGE(port), u_config_change);
+
+		return 0;
+	}
+
+	/* write admin time */
+	axienet_iow(lp, ADMIN_CYCLE_TIME_DENOMINATOR(port), qbv->cycle_time);
+
+	axienet_iow(lp, ADMIN_BASE_TIME_NS(port), qbv->ptp_time_ns);
+
+	axienet_iow(lp, ADMIN_BASE_TIME_SEC(port), qbv->ptp_time_sec);
+
+	u_config_change = axienet_ior(lp, CONFIG_CHANGE(port));
+
+	/* write control list length */
+	u_config_change |= (qbv->list_length & CC_ADMIN_CTRL_LIST_LENGTH_MASK)
+					<< CC_ADMIN_CTRL_LIST_LENGTH_SHIFT;
+
+	/* program each list */
+	for (i = 0; i < qbv->list_length; i++) {
+		axienet_iow(lp,  ADMIN_CTRL_LIST(port, i),
+			    (qbv->acl_gate_state[i] & (ACL_GATE_STATE_MASK)) <<
+			    ACL_GATE_STATE_SHIFT);
+
+	    /* set the time for each entry */
+	    axienet_iow(lp, ADMIN_CTRL_LIST_TIME(port, i),
+			qbv->acl_gate_time[i]);
+	}
+
+	/* clear interrupt status */
+	axienet_iow(lp, INT_STATUS(port), 0);
+
+	/* kick in new config change */
+	u_config_change |= CC_ADMIN_CONFIG_CHANGE_BIT;
+
+	/* enable gate */
+	u_config_change |= CC_ADMIN_GATE_ENABLE_BIT;
+
+	/* start */
+	axienet_iow(lp, CONFIG_CHANGE(port), u_config_change);
+
+	return 0;
+}
+
+int axienet_set_schedule(struct net_device *ndev, void __user *useraddr)
+{
+	struct qbv_info config;
+
+	if (copy_from_user(&config, useraddr, sizeof(struct qbv_info)))
+		return -EFAULT;
+
+	pr_debug("setting new schedule\n");
+
+	return __axienet_set_schedule(ndev, &config);
+}
+
+int axienet_get_schedule(struct net_device *ndev, u8 port, struct qbv_info *qbv)
+{
+	return 0;
+}
+
+static irqreturn_t axienet_qbv_irq(int irq, void *_ndev)
+{
+	struct net_device *ndev = _ndev;
+	struct axienet_local *lp = netdev_priv(ndev);
+	u8  port = 0; /* TODO */
+
+	/* clear status */
+	axienet_iow(lp, INT_CLEAR(port), 0);
+
+	return IRQ_HANDLED;
+}
+
+int axienet_qbv_init(struct net_device *ndev)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+	int rc;
+
+	rc = request_irq(lp->qbv_irq, axienet_qbv_irq, 0, ndev->name, ndev);
+	if (rc)
+		goto err_qbv_irq;
+
+err_qbv_irq:
+	return rc;
+}
+
+void axienet_qbv_remove(struct net_device *ndev)
+{
+	struct axienet_local *lp = netdev_priv(ndev);
+
+	free_irq(lp->qbv_irq, ndev);
+}
diff --git a/drivers/net/ethernet/xilinx/xilinx_tsn_shaper.h b/drivers/net/ethernet/xilinx/xilinx_tsn_shaper.h
new file mode 100644
index 0000000..587862d
--- /dev/null
+++ b/drivers/net/ethernet/xilinx/xilinx_tsn_shaper.h
@@ -0,0 +1,131 @@
+/*
+ * Xilinx TSN QBV scheduler header
+ *
+ * Copyright (C) 2017 Xilinx, Inc.
+ *
+ * Author: Syed S <syeds@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef XILINX_TSN_SHAPER_H
+#define XILINX_TSN_SHAPER_H
+
+/* 0x0		CONFIG_CHANGE
+ * 0x8		GATE_STATE
+ * 0x10		ADMIN_CTRL_LIST_LENGTH
+ * 0x18	ADMIN_CYCLE_TIME_DENOMINATOR
+ * 0x20         ADMIN_BASE_TIME_NS
+ * 0x24		ADMIN_BASE_TIME_SEC
+ * 0x28		ADMIN_BASE_TIME_SECS
+ * 0x30	INT_STAT
+ * 0x34	INT_EN
+ * 0x38		INT_CLR
+ * 0x3c		STATUS
+ * 0x40		CONFIG_CHANGE_TIME_NS
+ * 0x44		CONFIG_CHANGE_TIME_SEC
+ * 0x48		CONFIG_CHANGE_TIME_SECS
+ * 0x50		OPER_CTRL_LIST_LENGTH
+ * 0x58	OPER_CYCLE_TIME_DENOMINATOR
+ * 0x60		OPER_BASE_TIME_NS
+ * 0x64		OPER_BASE_TIME_SEC
+ * 0x68		OPER_BASE_TIME_SECS
+ * 0x6c	BE_XMIT_OVRRUN_CNT
+ * 0x74		RES_XMIT_OVRRUN_CNT
+ * 0x7c		ST_XMIT_OVRRUN_CNT
+ */
+
+enum hw_port {
+	PORT_EP = 0,
+	PORT_TEMAC_1,
+	PORT_TEMAC_2,
+};
+
+			     /* EP */ /* TEMAC1 */ /* TEMAC2*/
+static u32 qbv_reg_map[3] = { 0x16000,   0x14000,     0x14000 };
+
+/* 0x14000	0x14FFC	Time Schedule Registers (Control & Status)
+ * 0x15000	0x15FFF	Time Schedule Control List Entries
+ */
+
+#define TIME_SCHED_BASE(port)  qbv_reg_map[(port)]
+
+#define CTRL_LIST_BASE(port)  (TIME_SCHED_BASE(port) + 0x1000)
+
+/* control list entries
+ * admin control list 0 : 31
+ * "Time interval between two gate entries" must be greater than
+ * "time required to transmit biggest supported frame" on that queue when
+ * the gate for the queue is going from open to close state.
+ */
+#define ADMIN_CTRL_LIST(port, n)  (CTRL_LIST_BASE(port) + ((n) * 8))
+#define ACL_GATE_STATE_SHIFT	8
+#define ACL_GATE_STATE_MASK	0x7
+#define ADMIN_CTRL_LIST_TIME(port, n)  (ADMIN_CTRL_LIST((port), n) + 4)
+
+#define CONFIG_CHANGE(port)    (TIME_SCHED_BASE(port) + 0x0)
+#define CC_ADMIN_GATE_STATE_SHIFT            0x7
+#define CC_ADMIN_GATE_STATE_MASK             (7)
+#define CC_ADMIN_CTRL_LIST_LENGTH_SHIFT      (8)
+#define CC_ADMIN_CTRL_LIST_LENGTH_MASK       (0x3F)
+/* This request bit is set when all the related Admin* filelds are populated.
+ * This bit is set by S/W and clear by core when core start with new schedule.
+ * Once set it can only be cleared by core or hard/soft reset.
+ */
+#define CC_ADMIN_CONFIG_CHANGE_BIT           BIT(30)
+#define CC_ADMIN_GATE_ENABLE_BIT             BIT(31)
+
+#define GATE_STATE(port)      (TIME_SCHED_BASE(port) + 0x8)
+#define GS_OPER_GATE_STATE_SHIFT		(0)
+#define GS_OPER_GATE_STATE_MASK		(0x7)
+#define GS_OPER_CTRL_LIST_LENGTH_SHIFT	(8)
+#define GS_OPER_CTRL_LIST_LENGTH_MASK		(0x3F)
+#define GS_SUP_MAX_LIST_LENGTH_SHIFT		(16)
+#define GS_SUP_MAX_LIST_LENGTH_MASK		(0x3F)
+#define GS_TICK_GRANULARITY_SHIFT		(24)
+#define GS_TICK_GRANULARITY_MASK		(0x3F)
+
+#define ADMIN_CYCLE_TIME_DENOMINATOR(port)	(TIME_SCHED_BASE(port) + 0x18)
+#define ADMIN_BASE_TIME_NS(port)		(TIME_SCHED_BASE(port) + 0x20)
+#define ADMIN_BASE_TIME_SEC(port)		(TIME_SCHED_BASE(port) + 0x24)
+#define ADMIN_BASE_TIME_SECS(port)		(TIME_SCHED_BASE(port) + 0x28)
+
+#define INT_STATUS(port)			(TIME_SCHED_BASE(port) + 0x30)
+#define INT_ENABLE(port)			(TIME_SCHED_BASE(port) + 0x34)
+#define INT_CLEAR(port)				(TIME_SCHED_BASE(port) + 0x38)
+#define PORT_STATUS(port)			(TIME_SCHED_BASE(port) + 0x3c)
+
+/* Config Change time is valid after Config Pending bit is set. */
+#define CONFIG_CHANGE_TIME_NS(port)		(TIME_SCHED_BASE((port)) + 0x40)
+#define CONFIG_CHANGE_TIME_SEC(port)		(TIME_SCHED_BASE((port)) + 0x44)
+#define CONFIG_CHANGE_TIME_SECS(port)		(TIME_SCHED_BASE((port)) + 0x48)
+
+#define OPER_CONTROL_LIST_LENGTH(port)		(TIME_SCHED_BASE(port) + 0x50)
+#define OPER_CYCLE_TIME_DENOMINATOR(port)	(TIME_SCHED_BASE(port) + 0x58)
+
+#define OPER_BASE_TIME_NS(port)			(TIME_SCHED_BASE(port) + 0x60)
+#define OPER_BASE_TIME_SEC(port)		(TIME_SCHED_BASE(port) + 0x64)
+#define OPER_BASE_TIME_SECS(port)		(TIME_SCHED_BASE(port) + 0x68)
+
+#define BE_XMIT_OVERRUN_COUNT(port)		(TIME_SCHED_BASE(port) + 0x6c)
+#define RES_XMIT_OVERRUN_COUNT(port)		(TIME_SCHED_BASE(port) + 0x74)
+#define ST_XMIT_OVERRUN_COUNT(port)		(TIME_SCHED_BASE(port) + 0x7c)
+
+struct qbv_info {
+	u8 port;
+	u32 cycle_time;
+	u32 ptp_time_sec;
+	u32 ptp_time_ns;
+	u32 list_length;
+	u32 acl_gate_state[32];
+	u32 acl_gate_time[32];
+};
+
+#endif /* XILINX_TSN_SHAPER_H */
-- 
2.7.4

