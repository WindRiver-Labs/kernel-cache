From 072ee6fc3aa12b5ae114c7a4a80e5907d65b490b Mon Sep 17 00:00:00 2001
From: Vishal Sagar <vishal.sagar@xilinx.com>
Date: Mon, 28 Aug 2017 11:36:11 +0530
Subject: [PATCH 351/532] v4l: xilinx: sdirxss: Don't register EDH controls if
 EDH not enabled in IP core

commit 865daaa8e0935f7f9c065ded125358f5ab387121 from
https://github.com/Xilinx/linux-xlnx.git

Don't register the EDH related V4L controls when EDH processor is
disabled in IP core settings.

Signed-off-by: Vishal Sagar <vsagar@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/media/platform/xilinx/xilinx-sdirxss.c | 92 +++++++++++++++++---------
 1 file changed, 61 insertions(+), 31 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-sdirxss.c b/drivers/media/platform/xilinx/xilinx-sdirxss.c
index b56fc4c..1a47ed5 100644
--- a/drivers/media/platform/xilinx/xilinx-sdirxss.c
+++ b/drivers/media/platform/xilinx/xilinx-sdirxss.c
@@ -951,6 +951,38 @@ static const struct v4l2_ctrl_ops xsdirxss_ctrl_ops = {
 	.s_ctrl	= xsdirxss_s_ctrl
 };
 
+static struct v4l2_ctrl_config xsdirxss_edh_ctrls[] = {
+	{
+		.ops	= &xsdirxss_ctrl_ops,
+		.id	= V4L2_CID_XILINX_SDIRX_EDH_ERRCNT_ENABLE,
+		.name	= "SDI Rx : EDH Error Count Enable",
+		.type	= V4L2_CTRL_TYPE_BITMASK,
+		.min	= 0,
+		.max	= XSDIRX_EDH_ALLERR_MASK,
+		.def	= 0,
+	}, {
+		.ops	= &xsdirxss_ctrl_ops,
+		.id	= V4L2_CID_XILINX_SDIRX_EDH_ERRCNT,
+		.name	= "SDI Rx : EDH Error Count",
+		.type	= V4L2_CTRL_TYPE_INTEGER,
+		.min	= 0,
+		.max	= 0xFFFF,
+		.step	= 1,
+		.def	= 0,
+		.flags  = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
+	}, {
+		.ops	= &xsdirxss_ctrl_ops,
+		.id	= V4L2_CID_XILINX_SDIRX_EDH_STATUS,
+		.name	= "SDI Rx : EDH Status",
+		.type	= V4L2_CTRL_TYPE_INTEGER,
+		.min	= 0,
+		.max	= 0xFFFFFFFF,
+		.step	= 1,
+		.def	= 0,
+		.flags  = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
+	}
+};
+
 static struct v4l2_ctrl_config xsdirxss_ctrls[] = {
 	{
 		.ops	= &xsdirxss_ctrl_ops,
@@ -972,14 +1004,6 @@ static struct v4l2_ctrl_config xsdirxss_ctrls[] = {
 		.def	= XSDIRX_DEFAULT_VIDEO_LOCK_WINDOW,
 	}, {
 		.ops	= &xsdirxss_ctrl_ops,
-		.id	= V4L2_CID_XILINX_SDIRX_EDH_ERRCNT_ENABLE,
-		.name	= "SDI Rx : EDH Error Count Enable",
-		.type	= V4L2_CTRL_TYPE_BITMASK,
-		.min	= 0,
-		.max	= XSDIRX_EDH_ALLERR_MASK,
-		.def	= 0,
-	}, {
-		.ops	= &xsdirxss_ctrl_ops,
 		.id	= V4L2_CID_XILINX_SDIRX_SEARCH_MODES,
 		.name	= "SDI Rx : Modes search Mask",
 		.type	= V4L2_CTRL_TYPE_BITMASK,
@@ -1005,26 +1029,6 @@ static struct v4l2_ctrl_config xsdirxss_ctrls[] = {
 		.step	= 1,
 		.def	= 0,
 		.flags  = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
-	},  {
-		.ops	= &xsdirxss_ctrl_ops,
-		.id	= V4L2_CID_XILINX_SDIRX_EDH_ERRCNT,
-		.name	= "SDI Rx : EDH Error Count",
-		.type	= V4L2_CTRL_TYPE_INTEGER,
-		.min	= 0,
-		.max	= 0xFFFF,
-		.step	= 1,
-		.def	= 0,
-		.flags  = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
-	}, {
-		.ops	= &xsdirxss_ctrl_ops,
-		.id	= V4L2_CID_XILINX_SDIRX_EDH_STATUS,
-		.name	= "SDI Rx : EDH Status",
-		.type	= V4L2_CTRL_TYPE_INTEGER,
-		.min	= 0,
-		.max	= 0xFFFFFFFF,
-		.step	= 1,
-		.def	= 0,
-		.flags  = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
 	}
 };
 
@@ -1154,7 +1158,7 @@ static int xsdirxss_probe(struct platform_device *pdev)
 	struct xsdirxss_core *core;
 	struct resource *res;
 	int ret;
-	unsigned int num_ctrls, i;
+	unsigned int num_ctrls, num_edh_ctrls = 0, i;
 
 	xsdirxss = devm_kzalloc(&pdev->dev, sizeof(*xsdirxss), GFP_KERNEL);
 	if (!xsdirxss)
@@ -1213,12 +1217,19 @@ static int xsdirxss_probe(struct platform_device *pdev)
 
 	/* Initialise and register the controls */
 	num_ctrls = ARRAY_SIZE(xsdirxss_ctrls);
-	v4l2_ctrl_handler_init(&xsdirxss->ctrl_handler, num_ctrls);
+
+	if (xsdirxss->core.include_edh)
+		num_edh_ctrls = ARRAY_SIZE(xsdirxss_edh_ctrls);
+
+	v4l2_ctrl_handler_init(&xsdirxss->ctrl_handler,
+			       (num_ctrls + num_edh_ctrls));
+
 	for (i = 0; i < num_ctrls; i++) {
 		struct v4l2_ctrl *ctrl;
 
 		dev_dbg(xsdirxss->core.dev, "%d %s ctrl = 0x%x\n",
 			i, xsdirxss_ctrls[i].name, xsdirxss_ctrls[i].id);
+
 		ctrl = v4l2_ctrl_new_custom(&xsdirxss->ctrl_handler,
 					    &xsdirxss_ctrls[i], NULL);
 		if (!ctrl) {
@@ -1228,7 +1239,26 @@ static int xsdirxss_probe(struct platform_device *pdev)
 		}
 	}
 
-	dev_dbg(xsdirxss->core.dev, "# v4l2 ctrls registered = %d\n", i - 1);
+	if (xsdirxss->core.include_edh) {
+		for (i = 0; i < num_edh_ctrls; i++) {
+			struct v4l2_ctrl *ctrl;
+
+			dev_dbg(xsdirxss->core.dev, "%d %s ctrl = 0x%x\n",
+				i, xsdirxss_edh_ctrls[i].name,
+				xsdirxss_edh_ctrls[i].id);
+
+			ctrl = v4l2_ctrl_new_custom(&xsdirxss->ctrl_handler,
+						    &xsdirxss_edh_ctrls[i],
+						    NULL);
+			if (!ctrl) {
+				dev_dbg(xsdirxss->core.dev, "Failed to add %s ctrl\n",
+					xsdirxss_edh_ctrls[i].name);
+				goto error;
+			}
+		}
+	} else {
+		dev_dbg(xsdirxss->core.dev, "Not registering the EDH controls as EDH is disabled in IP\n");
+	}
 
 	if (xsdirxss->ctrl_handler.error) {
 		dev_err(&pdev->dev, "failed to add controls\n");
-- 
2.7.4

