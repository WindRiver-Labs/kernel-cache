From 7fd84079598fb1b21a3a5baffb5875a980b2bafa Mon Sep 17 00:00:00 2001
From: Michal Simek <michal.simek@xilinx.com>
Date: Thu, 27 Jul 2017 10:42:26 +0200
Subject: [PATCH 235/532] remoteproc: zynqmp_r5: Fix code alignment

commit 06ff15aabf33f964f63cb524e35dc763bee35500 from
https://github.com/Xilinx/linux-xlnx.git

Fix issues reported by checkpatch strict.

Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/remoteproc/zynqmp_r5_remoteproc.c | 40 +++++++++++++++----------------
 1 file changed, 19 insertions(+), 21 deletions(-)

diff --git a/drivers/remoteproc/zynqmp_r5_remoteproc.c b/drivers/remoteproc/zynqmp_r5_remoteproc.c
index 7468154..0cec6fe 100644
--- a/drivers/remoteproc/zynqmp_r5_remoteproc.c
+++ b/drivers/remoteproc/zynqmp_r5_remoteproc.c
@@ -164,7 +164,7 @@ static void r5_boot_addr_config(struct zynqmp_r5_rproc_pdata *pdata)
 	u32 offset = RPU_CFG_OFFSET;
 
 	pr_debug("%s: R5 ID: %d, boot_dev %d\n",
-			 __func__, pdata->rpu_id, pdata->bootmem);
+		 __func__, pdata->rpu_id, pdata->bootmem);
 
 	tmp = reg_read(pdata->rpu_base, offset);
 	if (pdata->bootmem == OCM)
@@ -212,7 +212,7 @@ static bool r5_is_running(struct zynqmp_r5_rproc_pdata *pdata)
 
 	pr_debug("%s: rpu id: %d\n", __func__, pdata->rpu_id);
 	if (zynqmp_pm_get_node_status(pdata->rpu_pd_id,
-		&status, &requirements, &usage)) {
+				      &status, &requirements, &usage)) {
 		pr_err("Failed to get RPU node status.\n");
 		return false;
 	} else if (status != PM_PROC_STATE_ACTIVE) {
@@ -243,7 +243,7 @@ static int r5_request_tcm(struct zynqmp_r5_rproc_pdata *pdata)
 
 		list_for_each_entry(pd_id, &mem_node->pd_ids, node)
 			zynqmp_pm_request_node(pd_id->id,
-				ZYNQMP_PM_CAPABILITY_ACCESS,
+					       ZYNQMP_PM_CAPABILITY_ACCESS,
 				0, ZYNQMP_PM_REQUEST_ACK_BLOCKING);
 	}
 
@@ -324,7 +324,6 @@ static void handle_event_notified(struct work_struct *work)
 	idr_for_each(&rproc->notifyids, event_notified_idr_cb, rproc);
 }
 
-
 static int zynqmp_r5_rproc_start(struct rproc *rproc)
 {
 	struct device *dev = rproc->dev.parent;
@@ -343,16 +342,16 @@ static int zynqmp_r5_rproc_start(struct rproc *rproc)
 	else
 		local->bootmem = TCM;
 	dev_info(dev, "RPU boot from %s.",
-		local->bootmem == OCM ? "OCM" : "TCM");
+		 local->bootmem == OCM ? "OCM" : "TCM");
 
 	r5_mode_config(local);
 	zynqmp_pm_force_powerdown(local->rpu_pd_id,
-		ZYNQMP_PM_REQUEST_ACK_BLOCKING);
+				  ZYNQMP_PM_REQUEST_ACK_BLOCKING);
 	r5_boot_addr_config(local);
 	/* Add delay before release from halt and reset */
 	udelay(500);
 	zynqmp_pm_request_wakeup(local->rpu_pd_id,
-		1, local->bootmem,
+				 1, local->bootmem,
 		ZYNQMP_PM_REQUEST_ACK_NO);
 
 	/* Make sure IPI is enabled */
@@ -393,7 +392,7 @@ static int zynqmp_r5_rproc_stop(struct rproc *rproc)
 
 	disable_ipi(local);
 	zynqmp_pm_force_powerdown(local->rpu_pd_id,
-		ZYNQMP_PM_REQUEST_ACK_BLOCKING);
+				  ZYNQMP_PM_REQUEST_ACK_BLOCKING);
 
 	/* After it reset was once asserted, TCM will be initialized
 	 * before it can be read. E.g. remoteproc virtio will access
@@ -465,7 +464,7 @@ static int zynqmp_r5_rproc_add_mems(struct zynqmp_r5_rproc_pdata *pdata)
 		mem_pool = mem_node->pool;
 		mem_size = gen_pool_size(mem_pool);
 		mem  = devm_kzalloc(dev, sizeof(struct rproc_mem_entry),
-				GFP_KERNEL);
+				    GFP_KERNEL);
 		if (!mem)
 			return -ENOMEM;
 
@@ -496,7 +495,6 @@ static int zynqmp_r5_rproc_add_mems(struct zynqmp_r5_rproc_pdata *pdata)
 	return 0;
 }
 
-
 /* Release R5 from reset and make it halted.
  * In case the firmware uses TCM, in order to load firmware to TCM,
  * will need to release R5 from reset and stay in halted state.
@@ -576,7 +574,7 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	struct device_node *tmp_node;
 
 	rproc = rproc_alloc(&pdev->dev, dev_name(&pdev->dev),
-		&zynqmp_r5_rproc_ops, NULL,
+			    &zynqmp_r5_rproc_ops, NULL,
 		sizeof(struct zynqmp_r5_rproc_pdata));
 	if (!rproc) {
 		dev_err(&pdev->dev, "rproc allocation failed\n");
@@ -633,7 +631,7 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	}
 
 	res = platform_get_resource_byname(pdev, IORESOURCE_MEM,
-		"rpu_base");
+					   "rpu_base");
 	local->rpu_base = devm_ioremap(&pdev->dev, res->start,
 					resource_size(res));
 	if (IS_ERR(local->rpu_base)) {
@@ -643,7 +641,7 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	}
 
 	res = platform_get_resource_byname(pdev, IORESOURCE_MEM,
-		"rpu_glbl_base");
+					   "rpu_glbl_base");
 	local->rpu_glbl_base = devm_ioremap(&pdev->dev, res->start,
 					resource_size(res));
 	if (IS_ERR(local->rpu_glbl_base)) {
@@ -672,17 +670,17 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 		char *srams_name = "srams";
 
 		mem_pool = of_gen_pool_get(pdev->dev.of_node,
-					srams_name, i);
+					   srams_name, i);
 		if (mem_pool) {
 			mem_node = devm_kzalloc(&pdev->dev,
-					sizeof(struct mem_pool_st),
+						sizeof(struct mem_pool_st),
 					GFP_KERNEL);
 			if (!mem_node)
 				goto rproc_fault;
 			mem_node->pool = mem_pool;
 			/* Get the memory node power domain id */
 			tmp_node = of_parse_phandle(pdev->dev.of_node,
-						srams_name, i);
+						    srams_name, i);
 			if (tmp_node) {
 				struct device_node *pd_node;
 				struct pd_id_st *pd_id;
@@ -691,20 +689,20 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 				INIT_LIST_HEAD(&mem_node->pd_ids);
 				for (j = 0; ; j++) {
 					pd_node = of_parse_phandle(tmp_node,
-						"pd-handle", j);
+								   "pd-handle", j);
 					if (!pd_node)
 						break;
 					pd_id = devm_kzalloc(&pdev->dev,
-							sizeof(*pd_id),
+							     sizeof(*pd_id),
 							GFP_KERNEL);
 					if (!pd_id) {
 						ret = -ENOMEM;
 						goto rproc_fault;
 					}
 					of_property_read_u32(pd_node,
-						"pd-id", &pd_id->id);
+							     "pd-id", &pd_id->id);
 					list_add_tail(&pd_id->node,
-						&mem_node->pd_ids);
+						      &mem_node->pd_ids);
 					dev_dbg(&pdev->dev,
 						"mem[%d] pd_id = %d.\n",
 						i, pd_id->id);
@@ -809,7 +807,7 @@ module_platform_driver(zynqmp_r5_remoteproc_driver);
 
 module_param_named(autoboot,  autoboot, bool, 0444);
 MODULE_PARM_DESC(autoboot,
-	"enable | disable autoboot. (default: true)");
+		 "enable | disable autoboot. (default: true)");
 
 MODULE_AUTHOR("Jason Wu <j.wu@xilinx.com>");
 MODULE_LICENSE("GPL v2");
-- 
2.7.4

