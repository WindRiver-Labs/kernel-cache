From 9cce1e8897ec62904279808021e356d234d6b5c1 Mon Sep 17 00:00:00 2001
From: Manish Narani <manish.narani@xilinx.com>
Date: Thu, 10 Aug 2017 13:52:03 +0530
Subject: [PATCH 297/532] zynqmp: sdhci: Prevent SD driver deferred probe after
 host init

commit a49e5e4ac91e660a2b58f845b8588cf9ae3837bf from
https://github.com/Xilinx/linux-xlnx.git

This patch prevents deferred probe after the host initialization is
done. Instead if the deferred probe is necessary, do it before the host
initialization. This way the unnecessary increase in host id can be
avoided.
In standard boot flow deferred probe is called at least 2 times
that's why it is better to extract it out.
Also add error message when getting silicon version fails.

Signed-off-by: Manish Narani <mnarani@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/mmc/host/sdhci-of-arasan.c | 32 +++++++++++++++++++-------------
 1 file changed, 19 insertions(+), 13 deletions(-)

diff --git a/drivers/mmc/host/sdhci-of-arasan.c b/drivers/mmc/host/sdhci-of-arasan.c
index aa60d8a..8e06dad 100644
--- a/drivers/mmc/host/sdhci-of-arasan.c
+++ b/drivers/mmc/host/sdhci-of-arasan.c
@@ -693,18 +693,7 @@ static int sdhci_arasan_probe(struct platform_device *pdev)
 	struct sdhci_pltfm_host *pltfm_host;
 	struct sdhci_arasan_data *sdhci_arasan;
 	struct device_node *np = pdev->dev.of_node;
-
-	host = sdhci_pltfm_init(pdev, &sdhci_arasan_pdata,
-				sizeof(*sdhci_arasan));
-	if (IS_ERR(host))
-		return PTR_ERR(host);
-
-	pltfm_host = sdhci_priv(host);
-	sdhci_arasan = sdhci_pltfm_priv(pltfm_host);
-	sdhci_arasan->host = host;
-
-	match = of_match_node(sdhci_arasan_of_match, pdev->dev.of_node);
-	sdhci_arasan->soc_ctl_map = match->data;
+	unsigned int host_quirks2 = 0;
 
 	if (of_device_is_compatible(pdev->dev.of_node, "xlnx,zynqmp-8.9a")) {
 		char *soc_rev;
@@ -715,9 +704,12 @@ static int sdhci_arasan_probe(struct platform_device *pdev)
 		if (PTR_ERR(soc_rev) == -EPROBE_DEFER)
 			/* Do a deferred probe */
 			return -EPROBE_DEFER;
+		else if (IS_ERR(soc_rev))
+			dev_dbg(&pdev->dev, "Error getting silicon version\n");
 
+		/* Set host quirk if the silicon version is v1.0 */
 		if (!IS_ERR(soc_rev) && (*soc_rev == ZYNQMP_SILICON_V1))
-			host->quirks2 |= SDHCI_QUIRK2_NO_1_8_V;
+			host_quirks2 |= SDHCI_QUIRK2_NO_1_8_V;
 
 		/* Clean soc_rev if got a valid pointer from nvmem driver
 		 * else we may end up in kernel panic
@@ -726,6 +718,20 @@ static int sdhci_arasan_probe(struct platform_device *pdev)
 			kfree(soc_rev);
 	}
 
+	host = sdhci_pltfm_init(pdev, &sdhci_arasan_pdata,
+				sizeof(*sdhci_arasan));
+	if (IS_ERR(host))
+		return PTR_ERR(host);
+
+	pltfm_host = sdhci_priv(host);
+	sdhci_arasan = sdhci_pltfm_priv(pltfm_host);
+	sdhci_arasan->host = host;
+
+	match = of_match_node(sdhci_arasan_of_match, pdev->dev.of_node);
+	sdhci_arasan->soc_ctl_map = match->data;
+
+	host->quirks2 |= host_quirks2;
+
 	node = of_parse_phandle(pdev->dev.of_node, "arasan,soc-ctl-syscon", 0);
 	if (node) {
 		sdhci_arasan->soc_ctl_base = syscon_node_to_regmap(node);
-- 
2.7.4

