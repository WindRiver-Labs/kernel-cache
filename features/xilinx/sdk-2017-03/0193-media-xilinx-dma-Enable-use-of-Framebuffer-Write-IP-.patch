From 71d3890f1e8776972c55260f35fac70877e730bd Mon Sep 17 00:00:00 2001
From: Jeffrey Mouroux <jeff.mouroux@xilinx.com>
Date: Thu, 13 Jul 2017 18:31:13 -0700
Subject: [PATCH 193/532] media: xilinx: dma: Enable use of Framebuffer Write
 IP in V4L2 Driver

commit d3ac87f034613cadc97cb34b11dd386b1039cdaf from
https://github.com/Xilinx/linux-xlnx.git

The Xilinx Video Framebuffer driver is video 'format aware' and
requires clients to pass video format information as part of DMA
programming. As the DMA Engine interface does not support passing
this information, a configuration object is passed through the
dma channel's private data to the Framebuffer Driver with this
information.

Signed-off-by: Jeffrey Mouroux <jmouroux@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/media/platform/xilinx/xilinx-dma.c | 52 ++++++++++++++++++++++--------
 1 file changed, 39 insertions(+), 13 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-dma.c b/drivers/media/platform/xilinx/xilinx-dma.c
index af8bca6..5e0a643 100644
--- a/drivers/media/platform/xilinx/xilinx-dma.c
+++ b/drivers/media/platform/xilinx/xilinx-dma.c
@@ -13,12 +13,12 @@
  */
 
 #include <linux/dma/xilinx_dma.h>
+#include <linux/dma/xilinx_frmbuf.h>
 #include <linux/lcm.h>
 #include <linux/list.h>
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/slab.h>
-#include <linux/dma/xilinx_dma.h>
 
 #include <media/v4l2-dev.h>
 #include <media/v4l2-fh.h>
@@ -86,6 +86,35 @@ static int xvip_dma_verify_format(struct xvip_dma *dma)
  * Pipeline Stream Management
  */
 
+/* Get the sink pad internally connected to a source pad in the given entity. */
+static struct media_pad *xvip_get_entity_sink(struct media_entity *entity,
+					      struct media_pad *source)
+{
+	unsigned int i;
+
+	/* The source pad can be NULL when the entity has no source pad. Return
+	 * the first pad in that case, guaranteed to be a sink pad.
+	 */
+	if (source == NULL)
+		return &entity->pads[0];
+
+	/* Iterates through the pads to find a connected sink pad. */
+	for (i = 0; i < entity->num_pads; ++i) {
+		struct media_pad *sink = &entity->pads[i];
+
+		if (!(sink->flags & MEDIA_PAD_FL_SINK))
+			continue;
+
+		if (sink == source)
+			continue;
+
+		if (media_entity_has_route(entity, sink->index, source->index))
+			return sink;
+	}
+
+	return NULL;
+}
+
 /**
  * xvip_pipeline_start_stop - Start ot stop streaming on a pipeline
  * @pipe: The pipeline
@@ -106,8 +135,13 @@ static int xvip_pipeline_start_stop(struct xvip_pipeline *pipe, bool start)
 	int ret;
 
 	entity = &dma->video.entity;
+	pad = NULL;
+
 	while (1) {
-		pad = &entity->pads[0];
+		pad = xvip_get_entity_sink(entity, pad);
+		if (pad == NULL)
+			break;
+
 		if (!(pad->flags & MEDIA_PAD_FL_SINK))
 			break;
 
@@ -351,9 +385,8 @@ static void xvip_dma_buffer_queue(struct vb2_buffer *vb)
 	struct dma_async_tx_descriptor *desc;
 	dma_addr_t addr = vb2_dma_contig_plane_dma_addr(vb, 0);
 	u32 flags;
-#ifdef CONFIG_XILINX_FRMBUF
-	struct xilinx_xdma_config dma_config;
-#endif
+
+	xilinx_xdma_v4l2_config(dma->dma, dma->format.pixelformat);
 
 	if (dma->queue.type == V4L2_BUF_TYPE_VIDEO_CAPTURE) {
 		flags = DMA_PREP_INTERRUPT | DMA_CTRL_ACK;
@@ -369,13 +402,6 @@ static void xvip_dma_buffer_queue(struct vb2_buffer *vb)
 		dma->xt.src_start = addr;
 	}
 
-#ifdef CONFIG_XILINX_FRMBUF
-	/*Consumed by frmbuf dma driver, if present*/
-	dma_config.fourcc = dma->format.pixelformat;
-	dma_config.type = XDMA_V4L2;
-	dma->dma->private = &dma_config;
-#endif
-
 	dma->xt.frame_size = 1;
 	dma->sgl[0].size = dma->format.width * dma->fmtinfo->bpp;
 	dma->sgl[0].icg = dma->format.bytesperline - dma->sgl[0].size;
@@ -485,7 +511,7 @@ static void xvip_dma_stop_streaming(struct vb2_queue *vq)
 	spin_unlock_irq(&dma->queued_lock);
 }
 
-static struct vb2_ops xvip_dma_queue_qops = {
+static const struct vb2_ops xvip_dma_queue_qops = {
 	.queue_setup = xvip_dma_queue_setup,
 	.buf_prepare = xvip_dma_buffer_prepare,
 	.buf_queue = xvip_dma_buffer_queue,
-- 
2.7.4

