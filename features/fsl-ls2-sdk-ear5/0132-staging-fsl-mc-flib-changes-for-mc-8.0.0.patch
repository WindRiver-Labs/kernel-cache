From afeecef21266595161614071cda554f78a131d18 Mon Sep 17 00:00:00 2001
From: Itai Katz <itai.katz@freescale.com>
Date: Wed, 24 Jun 2015 12:59:53 +0300
Subject: [PATCH 132/214] staging: fsl-mc: flib changes for mc 8.0.0

Signed-off-by: Itai Katz <itai.katz@freescale.com>
Change-Id: I70af8b983478aea431e2f9d2109f6c6b0d29a7b5
Reviewed-on: http://git.am.freescale.net:8181/38643
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch extracted from FSL LS2085 SDK EAR5.0,
Layerscape2-SDK-SOURCE-20150828-yocto.iso]
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpmcp-cmd.h    |   2 +-
 drivers/staging/fsl-mc/bus/dpmcp.c        | 123 ++++---
 drivers/staging/fsl-mc/bus/dpmcp.h        | 123 ++++---
 drivers/staging/fsl-mc/bus/dpmng.c        |  14 +-
 drivers/staging/fsl-mc/bus/dprc-cmd.h     |   5 +-
 drivers/staging/fsl-mc/bus/dprc-driver.c  |  57 ++-
 drivers/staging/fsl-mc/bus/dprc.c         | 411 ++++++++++++++++------
 drivers/staging/fsl-mc/bus/mc-allocator.c |   2 +-
 drivers/staging/fsl-mc/bus/mc-bus.c       |  14 +-
 drivers/staging/fsl-mc/bus/mc-sys.c       |  35 +-
 drivers/staging/fsl-mc/include/dpmng.h    |  12 +-
 drivers/staging/fsl-mc/include/dprc-cmd.h | 564 +-----------------------------
 drivers/staging/fsl-mc/include/dprc.h     | 281 ++++++++++-----
 drivers/staging/fsl-mc/include/mc-cmd.h   |  28 +-
 drivers/vfio/fsl-mc/vfio_fsl_mc.c         |  13 +-
 15 files changed, 783 insertions(+), 901 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpmcp-cmd.h b/drivers/staging/fsl-mc/bus/dpmcp-cmd.h
index 62bdc18..a87e9f8 100644
--- a/drivers/staging/fsl-mc/bus/dpmcp-cmd.h
+++ b/drivers/staging/fsl-mc/bus/dpmcp-cmd.h
@@ -34,7 +34,7 @@
 
 /* DPMCP Version */
 #define DPMCP_VER_MAJOR				2
-#define DPMCP_VER_MINOR				0
+#define DPMCP_VER_MINOR				1
 
 /* Command IDs */
 #define DPMCP_CMDID_CLOSE				0x800
diff --git a/drivers/staging/fsl-mc/bus/dpmcp.c b/drivers/staging/fsl-mc/bus/dpmcp.c
index 6b9da5b..ee63380 100644
--- a/drivers/staging/fsl-mc/bus/dpmcp.c
+++ b/drivers/staging/fsl-mc/bus/dpmcp.c
@@ -34,14 +34,18 @@
 #include "dpmcp.h"
 #include "dpmcp-cmd.h"
 
-int dpmcp_open(struct fsl_mc_io *mc_io, int dpmcp_id, uint16_t *token)
+int dpmcp_open(struct fsl_mc_io *mc_io,
+	       uint32_t cmd_flags,
+	       int dpmcp_id,
+	       uint16_t *token)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_OPEN,
-					  MC_CMD_PRI_LOW, 0);
+					  cmd_flags,
+					  0);
 	cmd.params[0] |= mc_enc(0, 32, dpmcp_id);
 
 	/* send command to mc*/
@@ -55,12 +59,15 @@ int dpmcp_open(struct fsl_mc_io *mc_io, int dpmcp_id, uint16_t *token)
 	return err;
 }
 
-int dpmcp_close(struct fsl_mc_io *mc_io, uint16_t token)
+int dpmcp_close(struct fsl_mc_io *mc_io,
+		uint32_t cmd_flags,
+		uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_CLOSE, MC_CMD_PRI_HIGH,
+	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_CLOSE,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -68,15 +75,17 @@ int dpmcp_close(struct fsl_mc_io *mc_io, uint16_t token)
 }
 
 int dpmcp_create(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
 		 const struct dpmcp_cfg *cfg,
-		uint16_t *token)
+		 uint16_t *token)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_CREATE,
-					  MC_CMD_PRI_LOW, 0);
+					  cmd_flags,
+					  0);
 	cmd.params[0] |= mc_enc(0, 32, cfg->portal_id);
 
 	/* send command to mc*/
@@ -90,65 +99,71 @@ int dpmcp_create(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
-int dpmcp_destroy(struct fsl_mc_io *mc_io, uint16_t token)
+int dpmcp_destroy(struct fsl_mc_io *mc_io,
+		  uint32_t cmd_flags,
+		  uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_DESTROY,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpmcp_reset(struct fsl_mc_io *mc_io, uint16_t token)
+int dpmcp_reset(struct fsl_mc_io *mc_io,
+		uint32_t cmd_flags,
+		uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_RESET,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
 int dpmcp_set_irq(struct fsl_mc_io *mc_io,
+		  uint32_t cmd_flags,
 		  uint16_t token,
-		 uint8_t irq_index,
-		 uint64_t irq_addr,
-		 uint32_t irq_val,
-		 int user_irq_id)
+		  uint8_t irq_index,
+		  struct dpmcp_irq_cfg	*irq_cfg)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_SET_IRQ,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 8, irq_index);
-	cmd.params[0] |= mc_enc(32, 32, irq_val);
-	cmd.params[1] |= mc_enc(0, 64, irq_addr);
-	cmd.params[2] |= mc_enc(0, 32, user_irq_id);
+	cmd.params[0] |= mc_enc(32, 32, irq_cfg->val);
+	cmd.params[1] |= mc_enc(0, 64, irq_cfg->paddr);
+	cmd.params[2] |= mc_enc(0, 32, irq_cfg->user_irq_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
 int dpmcp_get_irq(struct fsl_mc_io *mc_io,
+		  uint32_t cmd_flags,
 		  uint16_t token,
-		 uint8_t irq_index,
-		 int *type,
-		 uint64_t *irq_addr,
-		 uint32_t *irq_val,
-		 int *user_irq_id)
+		  uint8_t irq_index,
+		  int *type,
+		  struct dpmcp_irq_cfg	*irq_cfg)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_GET_IRQ,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
 	/* send command to mc*/
@@ -157,23 +172,25 @@ int dpmcp_get_irq(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	*irq_val = (uint32_t)mc_dec(cmd.params[0], 0, 32);
-	*irq_addr = (uint64_t)mc_dec(cmd.params[1], 0, 64);
-	*user_irq_id = (int)mc_dec(cmd.params[2], 0, 32);
+	irq_cfg->val = (uint32_t)mc_dec(cmd.params[0], 0, 32);
+	irq_cfg->paddr = (uint64_t)mc_dec(cmd.params[1], 0, 64);
+	irq_cfg->user_irq_id = (int)mc_dec(cmd.params[2], 0, 32);
 	*type = (int)mc_dec(cmd.params[2], 32, 32);
 	return 0;
 }
 
 int dpmcp_set_irq_enable(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
-			uint8_t irq_index,
-			uint8_t en)
+			 uint8_t irq_index,
+			 uint8_t en)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_SET_IRQ_ENABLE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 8, en);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
@@ -182,16 +199,18 @@ int dpmcp_set_irq_enable(struct fsl_mc_io *mc_io,
 }
 
 int dpmcp_get_irq_enable(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
-			uint8_t irq_index,
-			uint8_t *en)
+			 uint8_t irq_index,
+			 uint8_t *en)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_GET_IRQ_ENABLE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
 	/* send command to mc*/
@@ -205,15 +224,17 @@ int dpmcp_get_irq_enable(struct fsl_mc_io *mc_io,
 }
 
 int dpmcp_set_irq_mask(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t token,
-		      uint8_t irq_index,
-		      uint32_t mask)
+		       uint8_t irq_index,
+		       uint32_t mask)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_SET_IRQ_MASK,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 32, mask);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
@@ -222,16 +243,18 @@ int dpmcp_set_irq_mask(struct fsl_mc_io *mc_io,
 }
 
 int dpmcp_get_irq_mask(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t token,
-		      uint8_t irq_index,
-		      uint32_t *mask)
+		       uint8_t irq_index,
+		       uint32_t *mask)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_GET_IRQ_MASK,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
 	/* send command to mc*/
@@ -245,16 +268,18 @@ int dpmcp_get_irq_mask(struct fsl_mc_io *mc_io,
 }
 
 int dpmcp_get_irq_status(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
-			uint8_t irq_index,
-			uint32_t *status)
+			 uint8_t irq_index,
+			 uint32_t *status)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_GET_IRQ_STATUS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
 	/* send command to mc*/
@@ -268,15 +293,17 @@ int dpmcp_get_irq_status(struct fsl_mc_io *mc_io,
 }
 
 int dpmcp_clear_irq_status(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
 			   uint16_t token,
-			  uint8_t irq_index,
-			  uint32_t status)
+			   uint8_t irq_index,
+			   uint32_t status)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_CLEAR_IRQ_STATUS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 32, status);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
@@ -285,15 +312,17 @@ int dpmcp_clear_irq_status(struct fsl_mc_io *mc_io,
 }
 
 int dpmcp_get_attributes(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
-			struct dpmcp_attr *attr)
+			 struct dpmcp_attr *attr)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMCP_CMDID_GET_ATTR,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
diff --git a/drivers/staging/fsl-mc/bus/dpmcp.h b/drivers/staging/fsl-mc/bus/dpmcp.h
index 5e7c219..164684f 100644
--- a/drivers/staging/fsl-mc/bus/dpmcp.h
+++ b/drivers/staging/fsl-mc/bus/dpmcp.h
@@ -41,6 +41,7 @@ struct fsl_mc_io;
 /**
  * dpmcp_open() - Open a control session for the specified object.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @dpmcp_id:	DPMCP unique ID
  * @token:	Returned token; use in subsequent API calls
  *
@@ -54,7 +55,10 @@ struct fsl_mc_io;
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmcp_open(struct fsl_mc_io *mc_io, int dpmcp_id, uint16_t *token);
+int dpmcp_open(struct fsl_mc_io	*mc_io,
+	       uint32_t		cmd_flags,
+	       int			dpmcp_id,
+	       uint16_t		*token);
 
 /* Get portal ID from pool */
 #define DPMCP_GET_PORTAL_ID_FROM_POOL (-1)
@@ -62,6 +66,7 @@ int dpmcp_open(struct fsl_mc_io *mc_io, int dpmcp_id, uint16_t *token);
 /**
  * dpmcp_close() - Close the control session of the object
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  *
  * After this function is called, no further operations are
@@ -69,12 +74,14 @@ int dpmcp_open(struct fsl_mc_io *mc_io, int dpmcp_id, uint16_t *token);
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmcp_close(struct fsl_mc_io *mc_io, uint16_t token);
+int dpmcp_close(struct fsl_mc_io	*mc_io,
+		uint32_t		cmd_flags,
+		uint16_t		token);
 
 /**
- * struct dpmcp_cfg() - Structure representing DPMCP configuration
+ * struct dpmcp_cfg - Structure representing DPMCP configuration
  * @portal_id:	Portal ID; 'DPMCP_GET_PORTAL_ID_FROM_POOL' to get the portal ID
- *		from pool
+ *				from pool
  */
 struct dpmcp_cfg {
 	int portal_id;
@@ -83,6 +90,7 @@ struct dpmcp_cfg {
 /**
  * dpmcp_create() - Create the DPMCP object.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @cfg:	Configuration structure
  * @token:	Returned token; use in subsequent API calls
  *
@@ -101,81 +109,91 @@ struct dpmcp_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmcp_create(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
 		 const struct dpmcp_cfg	*cfg,
-		uint16_t		*token);
+		 uint16_t		*token);
 
 /**
  * dpmcp_destroy() - Destroy the DPMCP object and release all its resources.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  *
  * Return:	'0' on Success; error code otherwise.
  */
-int dpmcp_destroy(struct fsl_mc_io *mc_io, uint16_t token);
+int dpmcp_destroy(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
+		  uint16_t		token);
 
 /**
  * dpmcp_reset() - Reset the DPMCP, returns the object to initial state.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmcp_reset(struct fsl_mc_io *mc_io, uint16_t token);
+int dpmcp_reset(struct fsl_mc_io	*mc_io,
+		uint32_t		cmd_flags,
+		uint16_t			token);
 
 /* IRQ */
-/*!
- * @name dpmcp IRQ Index and Events
- */
+/* IRQ Index */
 #define DPMCP_IRQ_INDEX                             0
-/*!< Irq index */
+/* irq event - Indicates that the link state changed */
 #define DPMCP_IRQ_EVENT_CMD_DONE                    0x00000001
-/*!< irq event - Indicates that the link state changed */
-/* @} */
+
+/**
+ * struct dpmcp_irq_cfg - IRQ configuration
+ * @paddr:	Address that must be written to signal a message-based interrupt
+ * @val:	Value to write into irq_addr address
+ * @user_irq_id: A user defined number associated with this IRQ
+ */
+struct dpmcp_irq_cfg {
+	     uint64_t		paddr;
+	     uint32_t		val;
+	     int		user_irq_id;
+};
 
 /**
  * dpmcp_set_irq() - Set IRQ information for the DPMCP to trigger an interrupt.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  * @irq_index:	Identifies the interrupt index to configure
- * @irq_addr:	Address that must be written to
- *				signal a message-based interrupt
- * @irq_val:	Value to write into irq_addr address
- * @user_irq_id: A user defined number associated with this IRQ
+ * @irq_cfg:	IRQ configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmcp_set_irq(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
 		  uint16_t		token,
-		 uint8_t		irq_index,
-		 uint64_t		irq_addr,
-		 uint32_t		irq_val,
-		 int			user_irq_id);
+		  uint8_t		irq_index,
+		  struct dpmcp_irq_cfg	*irq_cfg);
 
 /**
  * dpmcp_get_irq() - Get IRQ information from the DPMCP.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  * @irq_index:	The interrupt index to configure
  * @type:	Interrupt type: 0 represents message interrupt
- *				type (both irq_addr and irq_val are valid)
- * @irq_addr:	Returned address that must be written to
- *				signal the message-based interrupt
- * @irq_val:	Value to write into irq_addr address
- * @user_irq_id: A user defined number associated with this IRQ
+ *		type (both irq_addr and irq_val are valid)
+ * @irq_cfg:	IRQ attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmcp_get_irq(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
 		  uint16_t		token,
-		 uint8_t		irq_index,
-		 int			*type,
-		 uint64_t		*irq_addr,
-		 uint32_t		*irq_val,
-		 int			*user_irq_id);
+		  uint8_t		irq_index,
+		  int			*type,
+		  struct dpmcp_irq_cfg	*irq_cfg);
 
 /**
  * dpmcp_set_irq_enable() - Set overall interrupt state.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  * @irq_index:	The interrupt index to configure
  * @en:	Interrupt state - enable = 1, disable = 0
@@ -188,13 +206,15 @@ int dpmcp_get_irq(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmcp_set_irq_enable(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
 			 uint16_t		token,
-			uint8_t			irq_index,
-			uint8_t			en);
+			 uint8_t		irq_index,
+			 uint8_t		en);
 
 /**
  * dpmcp_get_irq_enable() - Get overall interrupt state
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  * @irq_index:	The interrupt index to configure
  * @en:		Returned interrupt state - enable = 1, disable = 0
@@ -202,13 +222,15 @@ int dpmcp_set_irq_enable(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmcp_get_irq_enable(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
 			 uint16_t		token,
-			uint8_t			irq_index,
-			uint8_t			*en);
+			 uint8_t		irq_index,
+			 uint8_t		*en);
 
 /**
  * dpmcp_set_irq_mask() - Set interrupt mask.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  * @irq_index:	The interrupt index to configure
  * @mask:	Event mask to trigger interrupt;
@@ -221,14 +243,16 @@ int dpmcp_get_irq_enable(struct fsl_mc_io	*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmcp_set_irq_mask(struct fsl_mc_io	*mc_io,
+int dpmcp_set_irq_mask(struct fsl_mc_io *mc_io,
+		       uint32_t	cmd_flags,
 		       uint16_t		token,
-		      uint8_t		irq_index,
-		      uint32_t		mask);
+		       uint8_t		irq_index,
+		       uint32_t		mask);
 
 /**
  * dpmcp_get_irq_mask() - Get interrupt mask.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  * @irq_index:	The interrupt index to configure
  * @mask:	Returned event mask to trigger interrupt
@@ -238,15 +262,17 @@ int dpmcp_set_irq_mask(struct fsl_mc_io	*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmcp_get_irq_mask(struct fsl_mc_io	*mc_io,
+int dpmcp_get_irq_mask(struct fsl_mc_io *mc_io,
+		       uint32_t	cmd_flags,
 		       uint16_t		token,
-		      uint8_t		irq_index,
-		      uint32_t		*mask);
+		       uint8_t		irq_index,
+		       uint32_t		*mask);
 
 /**
  * dpmcp_get_irq_status() - Get the current status of any pending interrupts.
  *
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  * @irq_index:	The interrupt index to configure
  * @status:	Returned interrupts status - one bit per cause:
@@ -256,14 +282,16 @@ int dpmcp_get_irq_mask(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmcp_get_irq_status(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
 			 uint16_t		token,
-			uint8_t			irq_index,
-			uint32_t		*status);
+			 uint8_t		irq_index,
+			 uint32_t		*status);
 
 /**
  * dpmcp_clear_irq_status() - Clear a pending interrupt's status
  *
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  * @irq_index:	The interrupt index to configure
  * @status:	Bits to clear (W1C) - one bit per cause:
@@ -273,9 +301,10 @@ int dpmcp_get_irq_status(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmcp_clear_irq_status(struct fsl_mc_io	*mc_io,
+			   uint32_t		cmd_flags,
 			   uint16_t		token,
-			  uint8_t		irq_index,
-			  uint32_t		status);
+			   uint8_t		irq_index,
+			   uint32_t		status);
 
 /**
  * struct dpmcp_attr - Structure representing DPMCP attributes
@@ -299,13 +328,15 @@ struct dpmcp_attr {
  * dpmcp_get_attributes - Retrieve DPMCP attributes.
  *
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMCP object
  * @attr:	Returned object's attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmcp_get_attributes(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
 			 uint16_t		token,
-			struct dpmcp_attr	*attr);
+			 struct dpmcp_attr	*attr);
 
 #endif /* __FSL_DPMCP_H */
diff --git a/drivers/staging/fsl-mc/bus/dpmng.c b/drivers/staging/fsl-mc/bus/dpmng.c
index 58328e8..1aeca05 100644
--- a/drivers/staging/fsl-mc/bus/dpmng.c
+++ b/drivers/staging/fsl-mc/bus/dpmng.c
@@ -34,14 +34,17 @@
 #include "../include/dpmng.h"
 #include "dpmng-cmd.h"
 
-int mc_get_version(struct fsl_mc_io *mc_io, struct mc_version *mc_ver_info)
+int mc_get_version(struct fsl_mc_io *mc_io,
+		   uint32_t cmd_flags,
+		   struct mc_version *mc_ver_info)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMNG_CMDID_GET_VERSION,
-					  MC_CMD_PRI_LOW, 0);
+					  cmd_flags,
+					  0);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -56,14 +59,17 @@ int mc_get_version(struct fsl_mc_io *mc_io, struct mc_version *mc_ver_info)
 	return 0;
 }
 
-int dpmng_get_container_id(struct fsl_mc_io *mc_io, int *container_id)
+int dpmng_get_container_id(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
+			   int *container_id)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMNG_CMDID_GET_CONT_ID,
-					  MC_CMD_PRI_LOW, 0);
+					  cmd_flags,
+					  0);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
diff --git a/drivers/staging/fsl-mc/bus/dprc-cmd.h b/drivers/staging/fsl-mc/bus/dprc-cmd.h
index df5ad5f..6552c20 100644
--- a/drivers/staging/fsl-mc/bus/dprc-cmd.h
+++ b/drivers/staging/fsl-mc/bus/dprc-cmd.h
@@ -72,9 +72,10 @@
 #define DPRC_CMDID_GET_RES_COUNT		0x15B
 #define DPRC_CMDID_GET_RES_IDS			0x15C
 #define DPRC_CMDID_GET_OBJ_REG			0x15E
-#define DPRC_CMDID_OBJ_SET_IRQ			0x15F
-#define DPRC_CMDID_OBJ_GET_IRQ			0x160
+#define DPRC_CMDID_SET_OBJ_IRQ			0x15F
+#define DPRC_CMDID_GET_OBJ_IRQ			0x160
 #define DPRC_CMDID_SET_OBJ_LABEL		0x161
+#define DPRC_CMDID_GET_OBJ_DESC			0x162
 
 #define DPRC_CMDID_CONNECT			0x167
 #define DPRC_CMDID_DISCONNECT			0x168
diff --git a/drivers/staging/fsl-mc/bus/dprc-driver.c b/drivers/staging/fsl-mc/bus/dprc-driver.c
index 7a9e7c0..5231410 100644
--- a/drivers/staging/fsl-mc/bus/dprc-driver.c
+++ b/drivers/staging/fsl-mc/bus/dprc-driver.c
@@ -278,6 +278,7 @@ int dprc_scan_objects(struct fsl_mc_device *mc_bus_dev,
 	struct dprc_obj_desc *child_obj_desc_array = NULL;
 
 	error = dprc_get_obj_count(mc_bus_dev->mc_io,
+				   0,
 				   mc_bus_dev->mc_handle,
 				   &num_child_objects);
 	if (error < 0) {
@@ -305,6 +306,7 @@ int dprc_scan_objects(struct fsl_mc_device *mc_bus_dev,
 			    &child_obj_desc_array[i];
 
 			error = dprc_get_obj(mc_bus_dev->mc_io,
+					     0,
 					     mc_bus_dev->mc_handle,
 					     i, obj_desc);
 			if (error < 0) {
@@ -424,7 +426,7 @@ static irqreturn_t dprc_irq0_handler_thread(int irq_num, void *arg)
 	if (WARN_ON(mc_dev->irqs[irq_index]->irq_number != (uint32_t)irq_num))
 		goto out;
 
-	error = dprc_get_irq_status(mc_io, mc_dev->mc_handle, irq_index,
+	error = dprc_get_irq_status(mc_io, 0, mc_dev->mc_handle, irq_index,
 				    &status);
 	if (error < 0) {
 		dev_err(dev,
@@ -432,7 +434,7 @@ static irqreturn_t dprc_irq0_handler_thread(int irq_num, void *arg)
 		goto out;
 	}
 
-	error = dprc_clear_irq_status(mc_io, mc_dev->mc_handle, irq_index,
+	error = dprc_clear_irq_status(mc_io, 0, mc_dev->mc_handle, irq_index,
 				      status);
 	if (error < 0) {
 		dev_err(dev,
@@ -487,7 +489,7 @@ static int disable_dprc_irqs(struct fsl_mc_device *mc_dev)
 		/*
 		 * Disable generation of interrupt i, while we configure it:
 		 */
-		error = dprc_set_irq_enable(mc_io, mc_dev->mc_handle, i, 0);
+		error = dprc_set_irq_enable(mc_io, 0, mc_dev->mc_handle, i, 0);
 		if (error < 0) {
 			dev_err(&mc_dev->dev,
 				"Disabling DPRC IRQ %d failed: dprc_set_irq_enable() failed: %d\n",
@@ -499,7 +501,7 @@ static int disable_dprc_irqs(struct fsl_mc_device *mc_dev)
 		/*
 		 * Disable all interrupt causes for interrupt i:
 		 */
-		error = dprc_set_irq_mask(mc_io, mc_dev->mc_handle, i, 0x0);
+		error = dprc_set_irq_mask(mc_io, 0, mc_dev->mc_handle, i, 0x0);
 		if (error < 0) {
 			dev_err(&mc_dev->dev,
 				"Disabling DPRC IRQ %d failed: dprc_set_irq_mask() failed: %d\n",
@@ -511,7 +513,7 @@ static int disable_dprc_irqs(struct fsl_mc_device *mc_dev)
 		/*
 		 * Clear any leftover interrupt i:
 		 */
-		error = dprc_clear_irq_status(mc_io, mc_dev->mc_handle, i,
+		error = dprc_clear_irq_status(mc_io, 0, mc_dev->mc_handle, i,
 					      ~0x0U);
 		if (error < 0) {
 			dev_err(&mc_dev->dev,
@@ -557,6 +559,7 @@ static int register_dprc_irq_handlers(struct fsl_mc_device *mc_dev)
 	struct fsl_mc_device_irq *irq;
 	unsigned int num_irq_handlers_registered = 0;
 	int irq_count = mc_dev->obj_desc.irq_count;
+	struct dprc_irq_cfg irq_cfg;
 
 	if (WARN_ON(irq_count != ARRAY_SIZE(irq_handlers)))
 		return -EINVAL;
@@ -596,12 +599,14 @@ static int register_dprc_irq_handlers(struct fsl_mc_device *mc_dev)
 		}
 
 		num_irq_handlers_registered++;
+		irq_cfg.paddr = irq->msi_paddr;
+		irq_cfg.val = irq->msi_value;
+		irq_cfg.user_irq_id = irq->irq_number;
 		error = dprc_set_irq(mc_dev->mc_io,
+				     0,
 				     mc_dev->mc_handle,
 				     i,
-				     irq->msi_paddr,
-				     irq->msi_value,
-				     irq->irq_number);
+				     &irq_cfg);
 		if (error < 0) {
 			dev_err(&mc_dev->dev,
 				"dprc_set_irq() failed for IRQ %u: %d\n",
@@ -633,6 +638,7 @@ static int enable_dprc_irqs(struct fsl_mc_device *mc_dev)
 		 * Enable all interrupt causes for the interrupt:
 		 */
 		error = dprc_set_irq_mask(mc_dev->mc_io,
+					  0,
 					  mc_dev->mc_handle,
 					  i,
 					  ~0x0u);
@@ -648,6 +654,7 @@ static int enable_dprc_irqs(struct fsl_mc_device *mc_dev)
 		 * Enable generation of the interrupt:
 		 */
 		error = dprc_set_irq_enable(mc_dev->mc_io,
+					    0,
 					    mc_dev->mc_handle,
 					    i, 1);
 		if (error < 0) {
@@ -708,7 +715,10 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 	struct fsl_mc_bus *mc_bus = to_fsl_mc_bus(dprc_dev);
 
 	dpmcp_cfg.portal_id = mc_bus->dprc_attr.portal_id;
-	error = dpmcp_create(dprc_dev->mc_io, &dpmcp_cfg, &dpmcp_handle);
+	error = dpmcp_create(dprc_dev->mc_io,
+			     MC_CMD_FLAG_INTR_DIS,
+			     &dpmcp_cfg,
+			     &dpmcp_handle);
 	if (error < 0) {
 		dev_err(&dprc_dev->dev, "dpmcp_create() failed: %d\n",
 			error);
@@ -719,7 +729,9 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 	 * Set the state of the newly created DPMCP object to be "plugged":
 	 */
 
-	error = dpmcp_get_attributes(dprc_dev->mc_io, dpmcp_handle,
+	error = dpmcp_get_attributes(dprc_dev->mc_io,
+				     MC_CMD_FLAG_INTR_DIS,
+				     dpmcp_handle,
 				     &dpmcp_attr);
 	if (error < 0) {
 		dev_err(&dprc_dev->dev, "dpmcp_get_attributes() failed: %d\n",
@@ -739,6 +751,7 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 	res_req.id_base_align = dpmcp_attr.id;
 
 	error = dprc_assign(dprc_dev->mc_io,
+			    MC_CMD_FLAG_INTR_DIS,
 			    dprc_dev->mc_handle,
 			    dprc_dev->obj_desc.id,
 			    &res_req);
@@ -748,11 +761,15 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 		goto error_destroy_dpmcp;
 	}
 
-	(void)dpmcp_close(dprc_dev->mc_io, dpmcp_handle);
+	(void)dpmcp_close(dprc_dev->mc_io,
+			  MC_CMD_FLAG_INTR_DIS,
+			  dpmcp_handle);
 	return 0;
 
 error_destroy_dpmcp:
-	(void)dpmcp_destroy(dprc_dev->mc_io, dpmcp_handle);
+	(void)dpmcp_destroy(dprc_dev->mc_io,
+			    MC_CMD_FLAG_INTR_DIS,
+			    dpmcp_handle);
 	return error;
 }
 
@@ -768,7 +785,9 @@ static void dprc_destroy_dpmcp(struct fsl_mc_device *dprc_dev)
 	if (WARN_ON(!dprc_dev->mc_io || dprc_dev->mc_io->dpmcp_dev))
 		return;
 
-	error = dpmcp_open(dprc_dev->mc_io, mc_bus->dprc_attr.portal_id,
+	error = dpmcp_open(dprc_dev->mc_io,
+			   MC_CMD_FLAG_INTR_DIS,
+			   mc_bus->dprc_attr.portal_id,
 			   &dpmcp_handle);
 	if (error < 0) {
 		dev_err(&dprc_dev->dev, "dpmcp_open() failed: %d\n",
@@ -776,7 +795,9 @@ static void dprc_destroy_dpmcp(struct fsl_mc_device *dprc_dev)
 		return;
 	}
 
-	error = dpmcp_destroy(dprc_dev->mc_io, dpmcp_handle);
+	error = dpmcp_destroy(dprc_dev->mc_io,
+			      MC_CMD_FLAG_INTR_DIS,
+			      dpmcp_handle);
 	if (error < 0) {
 		dev_err(&dprc_dev->dev, "dpmcp_destroy() failed: %d\n",
 			error);
@@ -837,14 +858,14 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 		mc_io_created = true;
 	}
 
-	error = dprc_open(mc_dev->mc_io, mc_dev->obj_desc.id,
+	error = dprc_open(mc_dev->mc_io, 0, mc_dev->obj_desc.id,
 			  &mc_dev->mc_handle);
 	if (error < 0) {
 		dev_err(&mc_dev->dev, "dprc_open() failed: %d\n", error);
 		goto error_cleanup_mc_io;
 	}
 
-	error = dprc_get_attributes(mc_dev->mc_io, mc_dev->mc_handle,
+	error = dprc_get_attributes(mc_dev->mc_io, 0, mc_dev->mc_handle,
 				    &mc_bus->dprc_attr);
 	if (error < 0) {
 		dev_err(&mc_dev->dev, "dprc_get_attributes() failed: %d\n",
@@ -916,7 +937,7 @@ error_destroy_dpmcp:
 	dprc_destroy_dpmcp(mc_dev);
 
 error_cleanup_open:
-	(void)dprc_close(mc_dev->mc_io, mc_dev->mc_handle);
+	(void)dprc_close(mc_dev->mc_io, 0, mc_dev->mc_handle);
 
 error_cleanup_mc_io:
 	if (mc_io_created) {
@@ -970,7 +991,7 @@ static int dprc_remove(struct fsl_mc_device *mc_dev)
 	device_for_each_child(&mc_dev->dev, NULL, __fsl_mc_device_remove);
 	dprc_cleanup_all_resource_pools(mc_dev);
 	dprc_destroy_dpmcp(mc_dev);
-	error = dprc_close(mc_dev->mc_io, mc_dev->mc_handle);
+	error = dprc_close(mc_dev->mc_io, 0, mc_dev->mc_handle);
 	if (error < 0)
 		dev_err(&mc_dev->dev, "dprc_close() failed: %d\n", error);
 
diff --git a/drivers/staging/fsl-mc/bus/dprc.c b/drivers/staging/fsl-mc/bus/dprc.c
index 7a37d2d..a1cdafd 100644
--- a/drivers/staging/fsl-mc/bus/dprc.c
+++ b/drivers/staging/fsl-mc/bus/dprc.c
@@ -34,13 +34,16 @@
 #include "../include/dprc.h"
 #include "dprc-cmd.h"
 
-int dprc_open(struct fsl_mc_io *mc_io, int container_id, uint16_t *token)
+int dprc_open(struct fsl_mc_io *mc_io,
+	      uint32_t cmd_flags,
+	      int container_id,
+	      uint16_t *token)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPRC_CMDID_OPEN, MC_CMD_PRI_LOW,
+	cmd.header = mc_encode_cmd_header(DPRC_CMDID_OPEN, cmd_flags,
 					  0);
 	cmd.params[0] |= mc_enc(0, 32, container_id);
 
@@ -56,12 +59,14 @@ int dprc_open(struct fsl_mc_io *mc_io, int container_id, uint16_t *token)
 }
 EXPORT_SYMBOL(dprc_open);
 
-int dprc_close(struct fsl_mc_io *mc_io, uint16_t token)
+int dprc_close(struct fsl_mc_io *mc_io,
+	       uint32_t cmd_flags,
+	       uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPRC_CMDID_CLOSE, MC_CMD_PRI_HIGH,
+	cmd.header = mc_encode_cmd_header(DPRC_CMDID_CLOSE, cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -70,6 +75,7 @@ int dprc_close(struct fsl_mc_io *mc_io, uint16_t token)
 EXPORT_SYMBOL(dprc_close);
 
 int dprc_create_container(struct fsl_mc_io *mc_io,
+			  uint32_t cmd_flags,
 			  uint16_t token,
 			  struct dprc_cfg *cfg,
 			  int *child_container_id,
@@ -100,7 +106,8 @@ int dprc_create_container(struct fsl_mc_io *mc_io,
 	cmd.params[3] |= mc_enc(56, 8, cfg->label[15]);
 
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_CREATE_CONT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -116,6 +123,7 @@ int dprc_create_container(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_create_container);
 
 int dprc_destroy_container(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
 			   uint16_t token,
 			   int child_container_id)
 {
@@ -123,7 +131,8 @@ int dprc_destroy_container(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_DESTROY_CONT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 32, child_container_id);
 
 	/* send command to mc*/
@@ -132,6 +141,7 @@ int dprc_destroy_container(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_destroy_container);
 
 int dprc_reset_container(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
 			 int child_container_id)
 {
@@ -139,7 +149,8 @@ int dprc_reset_container(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_RESET_CONT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 32, child_container_id);
 
 	/* send command to mc*/
@@ -148,19 +159,18 @@ int dprc_reset_container(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_reset_container);
 
 int dprc_get_irq(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
 		 uint16_t token,
 		 uint8_t irq_index,
 		 int *type,
-		 uint64_t *irq_paddr,
-		 uint32_t *irq_val,
-		 int *user_irq_id)
+		 struct dprc_irq_cfg *irq_cfg)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_IRQ,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
@@ -170,99 +180,39 @@ int dprc_get_irq(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	*irq_val = mc_dec(cmd.params[0], 0, 32);
-	*irq_paddr = mc_dec(cmd.params[1], 0, 64);
-	*user_irq_id = mc_dec(cmd.params[2], 0, 32);
+	irq_cfg->val = mc_dec(cmd.params[0], 0, 32);
+	irq_cfg->paddr = mc_dec(cmd.params[1], 0, 64);
+	irq_cfg->user_irq_id = mc_dec(cmd.params[2], 0, 32);
 	*type = mc_dec(cmd.params[2], 32, 32);
 
 	return 0;
 }
 EXPORT_SYMBOL(dprc_get_irq);
 
-int dprc_obj_get_irq(struct fsl_mc_io *mc_io,
-		     uint16_t token,
-		     int obj_index,
-		     uint8_t irq_index,
-		     int *type,
-		     uint64_t *irq_addr,
-		     uint32_t *irq_val,
-		     int *user_irq_id)
-{
-	struct mc_command cmd = { 0 };
-	int err;
-
-	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPRC_CMDID_OBJ_GET_IRQ,
-					  MC_CMD_PRI_LOW,
-					  token);
-
-	cmd.params[0] |= mc_enc(0, 32, obj_index);
-	cmd.params[0] |= mc_enc(32, 8, irq_index);
-
-	/* send command to mc*/
-	err = mc_send_command(mc_io, &cmd);
-	if (err)
-		return err;
-
-	/* retrieve response parameters */
-	*irq_val = mc_dec(cmd.params[0], 0, 32);
-	*irq_addr = mc_dec(cmd.params[1], 0, 64);
-	*user_irq_id = mc_dec(cmd.params[2], 0, 32);
-	*type = mc_dec(cmd.params[2], 32, 32);
-	return 0;
-}
-EXPORT_SYMBOL(dprc_obj_get_irq);
-
 int dprc_set_irq(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
 		 uint16_t token,
 		 uint8_t irq_index,
-		 uint64_t irq_paddr,
-		 uint32_t irq_val,
-		 int user_irq_id)
+		 struct dprc_irq_cfg *irq_cfg)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_SET_IRQ,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
-	cmd.params[0] |= mc_enc(0, 32, irq_val);
-	cmd.params[1] |= mc_enc(0, 64, irq_paddr);
-	cmd.params[2] |= mc_enc(0, 32, user_irq_id);
+	cmd.params[0] |= mc_enc(0, 32, irq_cfg->val);
+	cmd.params[1] |= mc_enc(0, 64, irq_cfg->paddr);
+	cmd.params[2] |= mc_enc(0, 32, irq_cfg->user_irq_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 EXPORT_SYMBOL(dprc_set_irq);
 
-int dprc_obj_set_irq(struct fsl_mc_io *mc_io,
-		     uint16_t token,
-		     int obj_index,
-		     uint8_t irq_index,
-		     uint64_t irq_addr,
-		     uint32_t irq_val,
-		     int user_irq_id)
-{
-	struct mc_command cmd = { 0 };
-
-	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPRC_CMDID_OBJ_SET_IRQ,
-					  MC_CMD_PRI_LOW,
-					  token);
-
-	cmd.params[0] |= mc_enc(32, 8, irq_index);
-	cmd.params[0] |= mc_enc(0, 32, irq_val);
-	cmd.params[1] |= mc_enc(0, 64, irq_addr);
-	cmd.params[2] |= mc_enc(0, 32, user_irq_id);
-	cmd.params[2] |= mc_enc(32, 32, obj_index);
-
-	/* send command to mc*/
-	return mc_send_command(mc_io, &cmd);
-}
-EXPORT_SYMBOL(dprc_obj_set_irq);
-
 int dprc_get_irq_enable(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			uint8_t irq_index,
 			uint8_t *en)
@@ -272,7 +222,8 @@ int dprc_get_irq_enable(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_IRQ_ENABLE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
 	/* send command to mc*/
@@ -288,6 +239,7 @@ int dprc_get_irq_enable(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_get_irq_enable);
 
 int dprc_set_irq_enable(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			uint8_t irq_index,
 			uint8_t en)
@@ -296,7 +248,8 @@ int dprc_set_irq_enable(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_SET_IRQ_ENABLE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 8, en);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
@@ -306,6 +259,7 @@ int dprc_set_irq_enable(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_set_irq_enable);
 
 int dprc_get_irq_mask(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
 		      uint16_t token,
 		      uint8_t irq_index,
 		      uint32_t *mask)
@@ -315,7 +269,8 @@ int dprc_get_irq_mask(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_IRQ_MASK,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
 	/* send command to mc*/
@@ -331,6 +286,7 @@ int dprc_get_irq_mask(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_get_irq_mask);
 
 int dprc_set_irq_mask(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
 		      uint16_t token,
 		      uint8_t irq_index,
 		      uint32_t mask)
@@ -339,7 +295,8 @@ int dprc_set_irq_mask(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_SET_IRQ_MASK,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 32, mask);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
@@ -349,6 +306,7 @@ int dprc_set_irq_mask(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_set_irq_mask);
 
 int dprc_get_irq_status(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			uint8_t irq_index,
 			uint32_t *status)
@@ -358,7 +316,8 @@ int dprc_get_irq_status(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_IRQ_STATUS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
 	/* send command to mc*/
@@ -374,6 +333,7 @@ int dprc_get_irq_status(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_get_irq_status);
 
 int dprc_clear_irq_status(struct fsl_mc_io *mc_io,
+			  uint32_t cmd_flags,
 			  uint16_t token,
 			  uint8_t irq_index,
 			  uint32_t status)
@@ -382,7 +342,8 @@ int dprc_clear_irq_status(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_CLEAR_IRQ_STATUS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 32, status);
 	cmd.params[0] |= mc_enc(32, 8, irq_index);
 
@@ -392,6 +353,7 @@ int dprc_clear_irq_status(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_clear_irq_status);
 
 int dprc_get_attributes(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			struct dprc_attributes *attr)
 {
@@ -400,7 +362,7 @@ int dprc_get_attributes(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_ATTR,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -421,6 +383,7 @@ int dprc_get_attributes(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_get_attributes);
 
 int dprc_set_res_quota(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t token,
 		       int child_container_id,
 		       char *type,
@@ -430,7 +393,8 @@ int dprc_set_res_quota(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_SET_RES_QUOTA,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 32, child_container_id);
 	cmd.params[0] |= mc_enc(32, 16, quota);
 	cmd.params[1] |= mc_enc(0, 8, type[0]);
@@ -456,6 +420,7 @@ int dprc_set_res_quota(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_set_res_quota);
 
 int dprc_get_res_quota(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t token,
 		       int child_container_id,
 		       char *type,
@@ -466,7 +431,8 @@ int dprc_get_res_quota(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_RES_QUOTA,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 32, child_container_id);
 	cmd.params[1] |= mc_enc(0, 8, type[0]);
 	cmd.params[1] |= mc_enc(8, 8, type[1]);
@@ -498,6 +464,7 @@ int dprc_get_res_quota(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_get_res_quota);
 
 int dprc_assign(struct fsl_mc_io *mc_io,
+		uint32_t cmd_flags,
 		uint16_t token,
 		int container_id,
 		struct dprc_res_req *res_req)
@@ -506,7 +473,8 @@ int dprc_assign(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_ASSIGN,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 32, container_id);
 	cmd.params[0] |= mc_enc(32, 32, res_req->options);
 	cmd.params[1] |= mc_enc(0, 32, res_req->num);
@@ -534,6 +502,7 @@ int dprc_assign(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_assign);
 
 int dprc_unassign(struct fsl_mc_io *mc_io,
+		  uint32_t cmd_flags,
 		  uint16_t token,
 		  int child_container_id,
 		  struct dprc_res_req *res_req)
@@ -542,7 +511,7 @@ int dprc_unassign(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_UNASSIGN,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	cmd.params[0] |= mc_enc(0, 32, child_container_id);
 	cmd.params[0] |= mc_enc(32, 32, res_req->options);
@@ -571,6 +540,7 @@ int dprc_unassign(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_unassign);
 
 int dprc_get_pool_count(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			int *pool_count)
 {
@@ -579,7 +549,8 @@ int dprc_get_pool_count(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_POOL_COUNT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -594,6 +565,7 @@ int dprc_get_pool_count(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_get_pool_count);
 
 int dprc_get_pool(struct fsl_mc_io *mc_io,
+		  uint32_t cmd_flags,
 		  uint16_t token,
 		  int pool_index,
 		  char *type)
@@ -603,7 +575,7 @@ int dprc_get_pool(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_POOL,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	cmd.params[0] |= mc_enc(0, 32, pool_index);
 
@@ -634,14 +606,18 @@ int dprc_get_pool(struct fsl_mc_io *mc_io,
 }
 EXPORT_SYMBOL(dprc_get_pool);
 
-int dprc_get_obj_count(struct fsl_mc_io *mc_io, uint16_t token, int *obj_count)
+int dprc_get_obj_count(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
+		       uint16_t token,
+		       int *obj_count)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_OBJ_COUNT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -656,6 +632,7 @@ int dprc_get_obj_count(struct fsl_mc_io *mc_io, uint16_t token, int *obj_count)
 EXPORT_SYMBOL(dprc_get_obj_count);
 
 int dprc_get_obj(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
 		 uint16_t token,
 		 int obj_index,
 		 struct dprc_obj_desc *obj_desc)
@@ -665,7 +642,7 @@ int dprc_get_obj(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_OBJ,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	cmd.params[0] |= mc_enc(0, 32, obj_index);
 
@@ -718,7 +695,181 @@ int dprc_get_obj(struct fsl_mc_io *mc_io,
 }
 EXPORT_SYMBOL(dprc_get_obj);
 
+int dprc_get_obj_desc(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
+		      uint16_t token,
+		      char *obj_type,
+		      int obj_id,
+		      struct dprc_obj_desc *obj_desc)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_OBJ_DESC,
+					  cmd_flags,
+					  token);
+	cmd.params[0] |= mc_enc(0, 32, obj_id);
+	cmd.params[1] |= mc_enc(0, 8, obj_type[0]);
+	cmd.params[1] |= mc_enc(8, 8, obj_type[1]);
+	cmd.params[1] |= mc_enc(16, 8, obj_type[2]);
+	cmd.params[1] |= mc_enc(24, 8, obj_type[3]);
+	cmd.params[1] |= mc_enc(32, 8, obj_type[4]);
+	cmd.params[1] |= mc_enc(40, 8, obj_type[5]);
+	cmd.params[1] |= mc_enc(48, 8, obj_type[6]);
+	cmd.params[1] |= mc_enc(56, 8, obj_type[7]);
+	cmd.params[2] |= mc_enc(0, 8, obj_type[8]);
+	cmd.params[2] |= mc_enc(8, 8, obj_type[9]);
+	cmd.params[2] |= mc_enc(16, 8, obj_type[10]);
+	cmd.params[2] |= mc_enc(24, 8, obj_type[11]);
+	cmd.params[2] |= mc_enc(32, 8, obj_type[12]);
+	cmd.params[2] |= mc_enc(40, 8, obj_type[13]);
+	cmd.params[2] |= mc_enc(48, 8, obj_type[14]);
+	cmd.params[2] |= mc_enc(56, 8, obj_type[15]);
+
+	/* send command to mc*/
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	/* retrieve response parameters */
+	obj_desc->id = (int)mc_dec(cmd.params[0], 32, 32);
+	obj_desc->vendor = (uint16_t)mc_dec(cmd.params[1], 0, 16);
+	obj_desc->vendor = (uint8_t)mc_dec(cmd.params[1], 16, 8);
+	obj_desc->region_count = (uint8_t)mc_dec(cmd.params[1], 24, 8);
+	obj_desc->state = (uint32_t)mc_dec(cmd.params[1], 32, 32);
+	obj_desc->ver_major = (uint16_t)mc_dec(cmd.params[2], 0, 16);
+	obj_desc->ver_minor = (uint16_t)mc_dec(cmd.params[2], 16, 16);
+	obj_desc->type[0] = (char)mc_dec(cmd.params[3], 0, 8);
+	obj_desc->type[1] = (char)mc_dec(cmd.params[3], 8, 8);
+	obj_desc->type[2] = (char)mc_dec(cmd.params[3], 16, 8);
+	obj_desc->type[3] = (char)mc_dec(cmd.params[3], 24, 8);
+	obj_desc->type[4] = (char)mc_dec(cmd.params[3], 32, 8);
+	obj_desc->type[5] = (char)mc_dec(cmd.params[3], 40, 8);
+	obj_desc->type[6] = (char)mc_dec(cmd.params[3], 48, 8);
+	obj_desc->type[7] = (char)mc_dec(cmd.params[3], 56, 8);
+	obj_desc->type[8] = (char)mc_dec(cmd.params[4], 0, 8);
+	obj_desc->type[9] = (char)mc_dec(cmd.params[4], 8, 8);
+	obj_desc->type[10] = (char)mc_dec(cmd.params[4], 16, 8);
+	obj_desc->type[11] = (char)mc_dec(cmd.params[4], 24, 8);
+	obj_desc->type[12] = (char)mc_dec(cmd.params[4], 32, 8);
+	obj_desc->type[13] = (char)mc_dec(cmd.params[4], 40, 8);
+	obj_desc->type[14] = (char)mc_dec(cmd.params[4], 48, 8);
+	obj_desc->type[15] = (char)mc_dec(cmd.params[4], 56, 8);
+	obj_desc->label[0] = (char)mc_dec(cmd.params[5], 0, 8);
+	obj_desc->label[1] = (char)mc_dec(cmd.params[5], 8, 8);
+	obj_desc->label[2] = (char)mc_dec(cmd.params[5], 16, 8);
+	obj_desc->label[3] = (char)mc_dec(cmd.params[5], 24, 8);
+	obj_desc->label[4] = (char)mc_dec(cmd.params[5], 32, 8);
+	obj_desc->label[5] = (char)mc_dec(cmd.params[5], 40, 8);
+	obj_desc->label[6] = (char)mc_dec(cmd.params[5], 48, 8);
+	obj_desc->label[7] = (char)mc_dec(cmd.params[5], 56, 8);
+	obj_desc->label[8] = (char)mc_dec(cmd.params[6], 0, 8);
+	obj_desc->label[9] = (char)mc_dec(cmd.params[6], 8, 8);
+	obj_desc->label[10] = (char)mc_dec(cmd.params[6], 16, 8);
+	obj_desc->label[11] = (char)mc_dec(cmd.params[6], 24, 8);
+	obj_desc->label[12] = (char)mc_dec(cmd.params[6], 32, 8);
+	obj_desc->label[13] = (char)mc_dec(cmd.params[6], 40, 8);
+	obj_desc->label[14] = (char)mc_dec(cmd.params[6], 48, 8);
+	obj_desc->label[15] = (char)mc_dec(cmd.params[6], 56, 8);
+
+	return 0;
+}
+EXPORT_SYMBOL(dprc_get_obj_desc);
+
+int dprc_set_obj_irq(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
+		     uint16_t token,
+		     char *obj_type,
+		     int obj_id,
+		     uint8_t irq_index,
+		     struct dprc_irq_cfg *irq_cfg)
+{
+	struct mc_command cmd = { 0 };
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(DPRC_CMDID_SET_OBJ_IRQ,
+					  cmd_flags,
+					  token);
+	cmd.params[0] |= mc_enc(32, 8, irq_index);
+	cmd.params[0] |= mc_enc(0, 32, irq_cfg->val);
+	cmd.params[1] |= mc_enc(0, 64, irq_cfg->paddr);
+	cmd.params[2] |= mc_enc(0, 32, irq_cfg->user_irq_id);
+	cmd.params[2] |= mc_enc(32, 32, obj_id);
+	cmd.params[3] |= mc_enc(0, 8, obj_type[0]);
+	cmd.params[3] |= mc_enc(8, 8, obj_type[1]);
+	cmd.params[3] |= mc_enc(16, 8, obj_type[2]);
+	cmd.params[3] |= mc_enc(24, 8, obj_type[3]);
+	cmd.params[3] |= mc_enc(32, 8, obj_type[4]);
+	cmd.params[3] |= mc_enc(40, 8, obj_type[5]);
+	cmd.params[3] |= mc_enc(48, 8, obj_type[6]);
+	cmd.params[3] |= mc_enc(56, 8, obj_type[7]);
+	cmd.params[4] |= mc_enc(0, 8, obj_type[8]);
+	cmd.params[4] |= mc_enc(8, 8, obj_type[9]);
+	cmd.params[4] |= mc_enc(16, 8, obj_type[10]);
+	cmd.params[4] |= mc_enc(24, 8, obj_type[11]);
+	cmd.params[4] |= mc_enc(32, 8, obj_type[12]);
+	cmd.params[4] |= mc_enc(40, 8, obj_type[13]);
+	cmd.params[4] |= mc_enc(48, 8, obj_type[14]);
+	cmd.params[4] |= mc_enc(56, 8, obj_type[15]);
+
+	/* send command to mc*/
+	return mc_send_command(mc_io, &cmd);
+}
+EXPORT_SYMBOL(dprc_set_obj_irq);
+
+int dprc_get_obj_irq(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
+		     uint16_t token,
+		     char *obj_type,
+		     int obj_id,
+		     uint8_t irq_index,
+		     int *type,
+		     struct dprc_irq_cfg *irq_cfg)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_OBJ_IRQ,
+					  cmd_flags,
+					  token);
+	cmd.params[0] |= mc_enc(0, 32, obj_id);
+	cmd.params[0] |= mc_enc(32, 8, irq_index);
+	cmd.params[1] |= mc_enc(0, 8, obj_type[0]);
+	cmd.params[1] |= mc_enc(8, 8, obj_type[1]);
+	cmd.params[1] |= mc_enc(16, 8, obj_type[2]);
+	cmd.params[1] |= mc_enc(24, 8, obj_type[3]);
+	cmd.params[1] |= mc_enc(32, 8, obj_type[4]);
+	cmd.params[1] |= mc_enc(40, 8, obj_type[5]);
+	cmd.params[1] |= mc_enc(48, 8, obj_type[6]);
+	cmd.params[1] |= mc_enc(56, 8, obj_type[7]);
+	cmd.params[2] |= mc_enc(0, 8, obj_type[8]);
+	cmd.params[2] |= mc_enc(8, 8, obj_type[9]);
+	cmd.params[2] |= mc_enc(16, 8, obj_type[10]);
+	cmd.params[2] |= mc_enc(24, 8, obj_type[11]);
+	cmd.params[2] |= mc_enc(32, 8, obj_type[12]);
+	cmd.params[2] |= mc_enc(40, 8, obj_type[13]);
+	cmd.params[2] |= mc_enc(48, 8, obj_type[14]);
+	cmd.params[2] |= mc_enc(56, 8, obj_type[15]);
+
+	/* send command to mc*/
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	/* retrieve response parameters */
+	irq_cfg->val = (uint32_t)mc_dec(cmd.params[0], 0, 32);
+	irq_cfg->paddr = (uint64_t)mc_dec(cmd.params[1], 0, 64);
+	irq_cfg->user_irq_id = (int)mc_dec(cmd.params[2], 0, 32);
+	*type = (int)mc_dec(cmd.params[2], 32, 32);
+
+	return 0;
+}
+EXPORT_SYMBOL(dprc_get_obj_irq);
+
 int dprc_get_res_count(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t token,
 		       char *type,
 		       int *res_count)
@@ -730,7 +881,8 @@ int dprc_get_res_count(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_RES_COUNT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[1] |= mc_enc(0, 8, type[0]);
 	cmd.params[1] |= mc_enc(8, 8, type[1]);
 	cmd.params[1] |= mc_enc(16, 8, type[2]);
@@ -761,6 +913,7 @@ int dprc_get_res_count(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_get_res_count);
 
 int dprc_get_res_ids(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
 		     uint16_t token,
 		     char *type,
 		     struct dprc_res_ids_range_desc *range_desc)
@@ -770,7 +923,8 @@ int dprc_get_res_ids(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_RES_IDS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(42, 7, range_desc->iter_status);
 	cmd.params[1] |= mc_enc(0, 32, range_desc->base_id);
 	cmd.params[1] |= mc_enc(32, 32, range_desc->last_id);
@@ -806,6 +960,7 @@ int dprc_get_res_ids(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_get_res_ids);
 
 int dprc_get_obj_region(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			char *obj_type,
 			int obj_id,
@@ -817,7 +972,8 @@ int dprc_get_obj_region(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_OBJ_REG,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	cmd.params[0] |= mc_enc(0, 32, obj_id);
 	cmd.params[0] |= mc_enc(48, 8, region_index);
 	cmd.params[3] |= mc_enc(0, 8, obj_type[0]);
@@ -851,17 +1007,20 @@ int dprc_get_obj_region(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_get_obj_region);
 
 int dprc_set_obj_label(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t  token,
-		       int  obj_index,
+		       char *obj_type,
+		       int  obj_id,
 		       char *label)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_SET_OBJ_LABEL,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
-	cmd.params[0] |= mc_enc(0, 32, obj_index);
+	cmd.params[0] |= mc_enc(0, 32, obj_id);
 	cmd.params[1] |= mc_enc(0, 8, label[0]);
 	cmd.params[1] |= mc_enc(8, 8, label[1]);
 	cmd.params[1] |= mc_enc(16, 8, label[2]);
@@ -878,6 +1037,22 @@ int dprc_set_obj_label(struct fsl_mc_io *mc_io,
 	cmd.params[2] |= mc_enc(40, 8, label[13]);
 	cmd.params[2] |= mc_enc(48, 8, label[14]);
 	cmd.params[2] |= mc_enc(56, 8, label[15]);
+	cmd.params[3] |= mc_enc(0, 8, obj_type[0]);
+	cmd.params[3] |= mc_enc(8, 8, obj_type[1]);
+	cmd.params[3] |= mc_enc(16, 8, obj_type[2]);
+	cmd.params[3] |= mc_enc(24, 8, obj_type[3]);
+	cmd.params[3] |= mc_enc(32, 8, obj_type[4]);
+	cmd.params[3] |= mc_enc(40, 8, obj_type[5]);
+	cmd.params[3] |= mc_enc(48, 8, obj_type[6]);
+	cmd.params[3] |= mc_enc(56, 8, obj_type[7]);
+	cmd.params[4] |= mc_enc(0, 8, obj_type[8]);
+	cmd.params[4] |= mc_enc(8, 8, obj_type[9]);
+	cmd.params[4] |= mc_enc(16, 8, obj_type[10]);
+	cmd.params[4] |= mc_enc(24, 8, obj_type[11]);
+	cmd.params[4] |= mc_enc(32, 8, obj_type[12]);
+	cmd.params[4] |= mc_enc(40, 8, obj_type[13]);
+	cmd.params[4] |= mc_enc(48, 8, obj_type[14]);
+	cmd.params[4] |= mc_enc(56, 8, obj_type[15]);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -885,20 +1060,22 @@ int dprc_set_obj_label(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_set_obj_label);
 
 int dprc_connect(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
 		 uint16_t token,
 		 const struct dprc_endpoint *endpoint1,
-		 const struct dprc_endpoint *endpoint2)
+		 const struct dprc_endpoint *endpoint2,
+		 const struct dprc_connection_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_CONNECT,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	cmd.params[0] |= mc_enc(0, 32, endpoint1->id);
-	cmd.params[0] |= mc_enc(32, 32, endpoint1->interface_id);
+	cmd.params[0] |= mc_enc(32, 32, endpoint1->if_id);
 	cmd.params[1] |= mc_enc(0, 32, endpoint2->id);
-	cmd.params[1] |= mc_enc(32, 32, endpoint2->interface_id);
+	cmd.params[1] |= mc_enc(32, 32, endpoint2->if_id);
 	cmd.params[2] |= mc_enc(0, 8, endpoint1->type[0]);
 	cmd.params[2] |= mc_enc(8, 8, endpoint1->type[1]);
 	cmd.params[2] |= mc_enc(16, 8, endpoint1->type[2]);
@@ -915,6 +1092,8 @@ int dprc_connect(struct fsl_mc_io *mc_io,
 	cmd.params[3] |= mc_enc(40, 8, endpoint1->type[13]);
 	cmd.params[3] |= mc_enc(48, 8, endpoint1->type[14]);
 	cmd.params[3] |= mc_enc(56, 8, endpoint1->type[15]);
+	cmd.params[4] |= mc_enc(0, 32, cfg->max_rate);
+	cmd.params[4] |= mc_enc(32, 32, cfg->committed_rate);
 	cmd.params[5] |= mc_enc(0, 8, endpoint2->type[0]);
 	cmd.params[5] |= mc_enc(8, 8, endpoint2->type[1]);
 	cmd.params[5] |= mc_enc(16, 8, endpoint2->type[2]);
@@ -938,6 +1117,7 @@ int dprc_connect(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_connect);
 
 int dprc_disconnect(struct fsl_mc_io *mc_io,
+		    uint32_t cmd_flags,
 		    uint16_t token,
 		    const struct dprc_endpoint *endpoint)
 {
@@ -945,10 +1125,10 @@ int dprc_disconnect(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_DISCONNECT,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	cmd.params[0] |= mc_enc(0, 32, endpoint->id);
-	cmd.params[0] |= mc_enc(32, 32, endpoint->interface_id);
+	cmd.params[0] |= mc_enc(32, 32, endpoint->if_id);
 	cmd.params[1] |= mc_enc(0, 8, endpoint->type[0]);
 	cmd.params[1] |= mc_enc(8, 8, endpoint->type[1]);
 	cmd.params[1] |= mc_enc(16, 8, endpoint->type[2]);
@@ -972,20 +1152,21 @@ int dprc_disconnect(struct fsl_mc_io *mc_io,
 EXPORT_SYMBOL(dprc_disconnect);
 
 int dprc_get_connection(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
-					const struct dprc_endpoint *endpoint1,
-					struct dprc_endpoint *endpoint2,
-					int *state)
+			const struct dprc_endpoint *endpoint1,
+			struct dprc_endpoint *endpoint2,
+			int *state)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPRC_CMDID_GET_CONNECTION,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	cmd.params[0] |= mc_enc(0, 32, endpoint1->id);
-	cmd.params[0] |= mc_enc(32, 32, endpoint1->interface_id);
+	cmd.params[0] |= mc_enc(32, 32, endpoint1->if_id);
 	cmd.params[1] |= mc_enc(0, 8, endpoint1->type[0]);
 	cmd.params[1] |= mc_enc(8, 8, endpoint1->type[1]);
 	cmd.params[1] |= mc_enc(16, 8, endpoint1->type[2]);
@@ -1010,7 +1191,7 @@ int dprc_get_connection(struct fsl_mc_io *mc_io,
 
 	/* retrieve response parameters */
 	endpoint2->id = mc_dec(cmd.params[3], 0, 32);
-	endpoint2->interface_id = mc_dec(cmd.params[3], 32, 32);
+	endpoint2->if_id = mc_dec(cmd.params[3], 32, 32);
 	endpoint2->type[0] = mc_dec(cmd.params[4], 0, 8);
 	endpoint2->type[1] = mc_dec(cmd.params[4], 8, 8);
 	endpoint2->type[2] = mc_dec(cmd.params[4], 16, 8);
diff --git a/drivers/staging/fsl-mc/bus/mc-allocator.c b/drivers/staging/fsl-mc/bus/mc-allocator.c
index d1bfa3a..3531ca3 100644
--- a/drivers/staging/fsl-mc/bus/mc-allocator.c
+++ b/drivers/staging/fsl-mc/bus/mc-allocator.c
@@ -384,7 +384,7 @@ int fsl_mc_portal_reset(struct fsl_mc_io *mc_io)
 	if (WARN_ON(!dpmcp_dev))
 		return -EINVAL;
 
-	error = dpmcp_reset(mc_io, dpmcp_dev->mc_handle);
+	error = dpmcp_reset(mc_io, 0, dpmcp_dev->mc_handle);
 	if (error < 0) {
 		dev_err(&dpmcp_dev->dev, "dpmcp_reset() failed: %d\n", error);
 		return error;
diff --git a/drivers/staging/fsl-mc/bus/mc-bus.c b/drivers/staging/fsl-mc/bus/mc-bus.c
index f39cd42..a4c8cf9 100644
--- a/drivers/staging/fsl-mc/bus/mc-bus.c
+++ b/drivers/staging/fsl-mc/bus/mc-bus.c
@@ -302,14 +302,14 @@ static int get_dprc_icid(struct fsl_mc_io *mc_io,
 	struct dprc_attributes attr;
 	int error;
 
-	error = dprc_open(mc_io, container_id, &dprc_handle);
+	error = dprc_open(mc_io, 0, container_id, &dprc_handle);
 	if (error < 0) {
 		pr_err("dprc_open() failed: %d\n", error);
 		return error;
 	}
 
 	memset(&attr, 0, sizeof(attr));
-	error = dprc_get_attributes(mc_io, dprc_handle, &attr);
+	error = dprc_get_attributes(mc_io, 0, dprc_handle, &attr);
 	if (error < 0) {
 		pr_err("dprc_get_attributes() failed: %d\n", error);
 		goto common_cleanup;
@@ -319,7 +319,7 @@ static int get_dprc_icid(struct fsl_mc_io *mc_io,
 	error = 0;
 
 common_cleanup:
-	(void)dprc_close(mc_io, dprc_handle);
+	(void)dprc_close(mc_io, 0, dprc_handle);
 	return error;
 }
 
@@ -387,6 +387,7 @@ static int fsl_mc_device_get_mmio_regions(struct fsl_mc_device *mc_dev,
 		struct dprc_region_desc region_desc;
 
 		error = dprc_get_obj_region(mc_bus_dev->mc_io,
+					    0,
 					    mc_bus_dev->mc_handle,
 					    obj_desc->type,
 					    obj_desc->id, i, &region_desc);
@@ -402,7 +403,7 @@ static int fsl_mc_device_get_mmio_regions(struct fsl_mc_device *mc_dev,
 					  &regions[i].start);
 		if (error < 0) {
 			dev_err(parent_dev,
-				"Invalid MC offset: %#llx (for %s.%d\'s region %d)\n",
+				"Invalid MC offset: %#x (for %s.%d\'s region %d)\n",
 				region_desc.base_offset,
 				obj_desc->type, obj_desc->id, i);
 			goto error_cleanup_regions;
@@ -625,6 +626,7 @@ static int mc_bus_msi_prepare(struct irq_domain *domain, struct device *dev,
 		return -EINVAL;
 
 	error = dprc_get_attributes(mc_bus_dev->mc_io,
+				    0,
 				    mc_bus_dev->mc_handle, &dprc_attr);
 	if (error < 0) {
 		dev_err(&mc_bus_dev->dev,
@@ -1045,7 +1047,7 @@ static int fsl_mc_bus_probe(struct platform_device *pdev)
 	if (error < 0)
 		goto error_cleanup_irq_domain;
 
-	error = mc_get_version(mc_io, &mc_version);
+	error = mc_get_version(mc_io, 0, &mc_version);
 	if (error != 0) {
 		dev_err(&pdev->dev,
 			"mc_get_version() failed with error %d\n", error);
@@ -1076,7 +1078,7 @@ static int fsl_mc_bus_probe(struct platform_device *pdev)
 	if (error < 0)
 		goto error_cleanup_mc_io;
 
-	error = dpmng_get_container_id(mc_io, &container_id);
+	error = dpmng_get_container_id(mc_io, 0, &container_id);
 	if (error < 0) {
 		dev_err(&pdev->dev,
 			"dpmng_get_container_id() failed: %d\n", error);
diff --git a/drivers/staging/fsl-mc/bus/mc-sys.c b/drivers/staging/fsl-mc/bus/mc-sys.c
index 1af35a1..4fb9e8e 100644
--- a/drivers/staging/fsl-mc/bus/mc-sys.c
+++ b/drivers/staging/fsl-mc/bus/mc-sys.c
@@ -97,6 +97,7 @@ static int disable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 	 * Disable generation of the DPMCP interrupt:
 	 */
 	error = dpmcp_set_irq_enable(dpmcp_dev->mc_io,
+				     MC_CMD_FLAG_INTR_DIS,
 				     dpmcp_dev->mc_handle,
 				     DPMCP_IRQ_INDEX, 0);
 	if (error < 0) {
@@ -109,7 +110,9 @@ static int disable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 	/*
 	 * Disable all DPMCP interrupt causes:
 	 */
-	error = dpmcp_set_irq_mask(dpmcp_dev->mc_io, dpmcp_dev->mc_handle,
+	error = dpmcp_set_irq_mask(dpmcp_dev->mc_io,
+				   MC_CMD_FLAG_INTR_DIS,
+				   dpmcp_dev->mc_handle,
 				   DPMCP_IRQ_INDEX, 0x0);
 	if (error < 0) {
 		dev_err(&dpmcp_dev->dev,
@@ -121,7 +124,9 @@ static int disable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 	/*
 	 * Clear any leftover interrupts:
 	 */
-	error = dpmcp_clear_irq_status(dpmcp_dev->mc_io, dpmcp_dev->mc_handle,
+	error = dpmcp_clear_irq_status(dpmcp_dev->mc_io,
+				       MC_CMD_FLAG_INTR_DIS,
+				       dpmcp_dev->mc_handle,
 				       DPMCP_IRQ_INDEX, ~0x0U);
 	if (error < 0) {
 		dev_err(&dpmcp_dev->dev,
@@ -144,6 +149,7 @@ static int register_dpmcp_irq_handler(struct fsl_mc_device *dpmcp_dev)
 {
 	int error;
 	struct fsl_mc_device_irq *irq = dpmcp_dev->irqs[DPMCP_IRQ_INDEX];
+	struct dpmcp_irq_cfg irq_cfg;
 
 	error = devm_request_irq(&dpmcp_dev->dev,
 				 irq->irq_number,
@@ -158,12 +164,15 @@ static int register_dpmcp_irq_handler(struct fsl_mc_device *dpmcp_dev)
 		return error;
 	}
 
+	irq_cfg.paddr = irq->msi_paddr;
+	irq_cfg.val = irq->msi_value;
+	irq_cfg.user_irq_id = irq->irq_number;
+
 	error = dpmcp_set_irq(dpmcp_dev->mc_io,
+			      MC_CMD_FLAG_INTR_DIS,
 			      dpmcp_dev->mc_handle,
 			      DPMCP_IRQ_INDEX,
-			      irq->msi_paddr,
-			      irq->msi_value,
-			      irq->irq_number);
+			      &irq_cfg);
 	if (error < 0) {
 		dev_err(&dpmcp_dev->dev,
 			"dpmcp_set_irq() failed: %d\n", error);
@@ -185,6 +194,7 @@ static int enable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 	 * Enable MC command completion event to trigger DPMCP interrupt:
 	 */
 	error = dpmcp_set_irq_mask(dpmcp_dev->mc_io,
+				   MC_CMD_FLAG_INTR_DIS,
 				   dpmcp_dev->mc_handle,
 				   DPMCP_IRQ_INDEX,
 				   DPMCP_IRQ_EVENT_CMD_DONE);
@@ -199,6 +209,7 @@ static int enable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 	 * Enable generation of the interrupt:
 	 */
 	error = dpmcp_set_irq_enable(dpmcp_dev->mc_io,
+				     MC_CMD_FLAG_INTR_DIS,
 				     dpmcp_dev->mc_handle,
 				     DPMCP_IRQ_INDEX, 1);
 	if (error < 0) {
@@ -403,7 +414,9 @@ int fsl_mc_io_set_dpmcp(struct fsl_mc_io *mc_io,
 		return -EINVAL;
 
 	if (!(mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL)) {
-		error = dpmcp_open(mc_io, dpmcp_dev->obj_desc.id,
+		error = dpmcp_open(mc_io,
+				   0,
+				   dpmcp_dev->obj_desc.id,
 				   &dpmcp_dev->mc_handle);
 		if (error < 0)
 			return error;
@@ -430,7 +443,9 @@ void fsl_mc_io_unset_dpmcp(struct fsl_mc_io *mc_io)
 		if (dpmcp_dev->irqs)
 			teardown_dpmcp_irq(mc_io);
 
-		error = dpmcp_close(mc_io, dpmcp_dev->mc_handle);
+		error = dpmcp_close(mc_io,
+				    0,
+				    dpmcp_dev->mc_handle);
 		if (error < 0) {
 			dev_err(&dpmcp_dev->dev, "dpmcp_close() failed: %d\n",
 				error);
@@ -616,7 +631,8 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 	int error;
 	enum mc_cmd_status status;
 
-	if (WARN_ON(in_irq()))
+	if (WARN_ON(in_irq() &&
+		!(MC_CMD_HDR_READ_FLAGS(cmd->header) & MC_CMD_FLAG_INTR_DIS)))
 		return -EINVAL;
 
 	if (mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL)
@@ -632,7 +648,8 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 	/*
 	 * Wait for response from the MC hardware:
 	 */
-	if (mc_io->mc_command_done_irq_armed)
+	if (mc_io->mc_command_done_irq_armed &&
+	    !(MC_CMD_HDR_READ_FLAGS(cmd->header) & MC_CMD_FLAG_INTR_DIS))
 		error = mc_completion_wait(mc_io, cmd, &status);
 	else
 		error = mc_polling_wait(mc_io, cmd, &status);
diff --git a/drivers/staging/fsl-mc/include/dpmng.h b/drivers/staging/fsl-mc/include/dpmng.h
index a38eb1a..4a0996c 100644
--- a/drivers/staging/fsl-mc/include/dpmng.h
+++ b/drivers/staging/fsl-mc/include/dpmng.h
@@ -41,7 +41,7 @@ struct fsl_mc_io;
 /**
  * Management Complex firmware version information
  */
-#define MC_VER_MAJOR 7
+#define MC_VER_MAJOR 8
 #define MC_VER_MINOR 0
 
 /**
@@ -62,19 +62,25 @@ struct mc_version {
  * mc_get_version() - Retrieves the Management Complex firmware
  *			version information
  * @mc_io:		Pointer to opaque I/O object
+ * @cmd_flags:		Command flags; one or more of 'MC_CMD_FLAG_'
  * @mc_ver_info:	Returned version information structure
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int mc_get_version(struct fsl_mc_io *mc_io, struct mc_version *mc_ver_info);
+int mc_get_version(struct fsl_mc_io	*mc_io,
+		   uint32_t		cmd_flags,
+		   struct mc_version	*mc_ver_info);
 
 /**
  * dpmng_get_container_id() - Get container ID associated with a given portal.
  * @mc_io:		Pointer to MC portal's I/O object
+ * @cmd_flags:		Command flags; one or more of 'MC_CMD_FLAG_'
  * @container_id:	Requested container ID
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmng_get_container_id(struct fsl_mc_io *mc_io, int *container_id);
+int dpmng_get_container_id(struct fsl_mc_io	*mc_io,
+			   uint32_t		cmd_flags,
+			   int			*container_id);
 
 #endif /* __FSL_DPMNG_H */
diff --git a/drivers/staging/fsl-mc/include/dprc-cmd.h b/drivers/staging/fsl-mc/include/dprc-cmd.h
index 4436622..5589df5 100644
--- a/drivers/staging/fsl-mc/include/dprc-cmd.h
+++ b/drivers/staging/fsl-mc/include/dprc-cmd.h
@@ -33,7 +33,7 @@
 #define _FSL_DPRC_CMD_H
 
 /* DPRC Version */
-#define DPRC_VER_MAJOR				4
+#define DPRC_VER_MAJOR				5
 #define DPRC_VER_MINOR				0
 
 /* Command IDs */
@@ -65,9 +65,10 @@
 #define DPRC_CMDID_GET_RES_COUNT		0x15B
 #define DPRC_CMDID_GET_RES_IDS			0x15C
 #define DPRC_CMDID_GET_OBJ_REG			0x15E
-#define DPRC_CMDID_OBJ_SET_IRQ			0x15F
-#define DPRC_CMDID_OBJ_GET_IRQ			0x160
+#define DPRC_CMDID_SET_OBJ_IRQ			0x15F
+#define DPRC_CMDID_GET_OBJ_IRQ			0x160
 #define DPRC_CMDID_SET_OBJ_LABEL		0x161
+#define DPRC_CMDID_GET_OBJ_DESC			0x162
 
 #define DPRC_CMDID_CONNECT			0x167
 #define DPRC_CMDID_DISCONNECT			0x168
@@ -76,561 +77,4 @@
 
 #define DPRC_CMDID_GET_CONNECTION		0x16C
 
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_CONTAINER_ID(cmd, container_id) \
-	MC_RSP_OP(cmd, 0, 0,  32,  int,	    container_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_OPEN(cmd, container_id) \
-	MC_CMD_OP(cmd, 0, 0,  32, int,	    container_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_CREATE_CONTAINER(cmd, cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 32, 16, uint16_t, cfg->icid); \
-	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, cfg->options); \
-	MC_CMD_OP(cmd, 1, 32, 32, int,	    cfg->portal_id); \
-	MC_CMD_OP(cmd, 2, 0,  8,  char,	    cfg->label[0]);\
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    cfg->label[1]);\
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    cfg->label[2]);\
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    cfg->label[3]);\
-	MC_CMD_OP(cmd, 2, 32, 8,  char,	    cfg->label[4]);\
-	MC_CMD_OP(cmd, 2, 40, 8,  char,	    cfg->label[5]);\
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    cfg->label[6]);\
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    cfg->label[7]);\
-	MC_CMD_OP(cmd, 3, 0,  8,  char,	    cfg->label[8]);\
-	MC_CMD_OP(cmd, 3, 8,  8,  char,	    cfg->label[9]);\
-	MC_CMD_OP(cmd, 3, 16, 8,  char,	    cfg->label[10]);\
-	MC_CMD_OP(cmd, 3, 24, 8,  char,	    cfg->label[11]);\
-	MC_CMD_OP(cmd, 3, 32, 8,  char,	    cfg->label[12]);\
-	MC_CMD_OP(cmd, 3, 40, 8,  char,	    cfg->label[13]);\
-	MC_CMD_OP(cmd, 3, 48, 8,  char,	    cfg->label[14]);\
-	MC_CMD_OP(cmd, 3, 56, 8,  char,	    cfg->label[15]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_CREATE_CONTAINER(cmd, child_container_id, child_portal_offset)\
-do { \
-	MC_RSP_OP(cmd, 1, 0,  32, int,	   child_container_id); \
-	MC_RSP_OP(cmd, 2, 0,  64, uint64_t, child_portal_offset);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_DESTROY_CONTAINER(cmd, child_container_id) \
-	MC_CMD_OP(cmd, 0, 0,  32, int,	    child_container_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_RESET_CONTAINER(cmd, child_container_id) \
-	MC_CMD_OP(cmd, 0, 0,  32, int,	    child_container_id)
-
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_SET_IRQ(cmd, irq_index, irq_addr, irq_val, user_irq_id) \
-do { \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index); \
-	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, irq_val); \
-	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_addr);\
-	MC_CMD_OP(cmd, 2, 0,  32, int,	    user_irq_id); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_IRQ(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_IRQ(cmd, type, irq_addr, irq_val, user_irq_id) \
-do { \
-	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_val); \
-	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_addr);\
-	MC_RSP_OP(cmd, 2, 0,  32, int,	    user_irq_id); \
-	MC_RSP_OP(cmd, 2, 32, 32, int,      type); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_SET_IRQ_ENABLE(cmd, irq_index, en) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  8, uint8_t, en); \
-	MC_CMD_OP(cmd, 0, 32, 8, uint8_t, irq_index);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_IRQ_ENABLE(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_IRQ_ENABLE(cmd, en) \
-	MC_RSP_OP(cmd, 0, 0,  8,  uint8_t,  en)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_SET_IRQ_MASK(cmd, irq_index, mask) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, mask); \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_IRQ_MASK(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_IRQ_MASK(cmd, mask) \
-	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, mask)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_IRQ_STATUS(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_IRQ_STATUS(cmd, status) \
-	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, status)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_CLEAR_IRQ_STATUS(cmd, irq_index, status) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, status); \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index);\
-} while (0)
-
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_ATTRIBUTES(cmd, attr) \
-do { \
-	MC_RSP_OP(cmd, 0, 0,  32, int,	    attr->container_id); \
-	MC_RSP_OP(cmd, 0, 32, 16, uint16_t, attr->icid); \
-	MC_RSP_OP(cmd, 1, 0,  32, uint32_t, attr->options);\
-	MC_RSP_OP(cmd, 1, 32, 32, int,      attr->portal_id); \
-	MC_RSP_OP(cmd, 2, 0,  16, uint16_t, attr->version.major);\
-	MC_RSP_OP(cmd, 2, 16, 16, uint16_t, attr->version.minor);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_SET_RES_QUOTA(cmd, child_container_id, type, quota) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, int,	    child_container_id); \
-	MC_CMD_OP(cmd, 0, 32, 16, uint16_t, quota);\
-	MC_CMD_OP(cmd, 1, 0,  8,  char,	    type[0]);\
-	MC_CMD_OP(cmd, 1, 8,  8,  char,     type[1]);\
-	MC_CMD_OP(cmd, 1, 16, 8,  char,	    type[2]);\
-	MC_CMD_OP(cmd, 1, 24, 8,  char,	    type[3]);\
-	MC_CMD_OP(cmd, 1, 32, 8,  char,	    type[4]);\
-	MC_CMD_OP(cmd, 1, 40, 8,  char,     type[5]);\
-	MC_CMD_OP(cmd, 1, 48, 8,  char,	    type[6]);\
-	MC_CMD_OP(cmd, 1, 56, 8,  char,	    type[7]);\
-	MC_CMD_OP(cmd, 2, 0,  8,  char,     type[8]);\
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    type[9]);\
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    type[10]);\
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    type[11]);\
-	MC_CMD_OP(cmd, 2, 32, 8,  char,	    type[12]);\
-	MC_CMD_OP(cmd, 2, 40, 8,  char,	    type[13]);\
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    type[14]);\
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    type[15]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_RES_QUOTA(cmd, child_container_id, type) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, int,	    child_container_id); \
-	MC_CMD_OP(cmd, 1, 0,  8,  char,	    type[0]);\
-	MC_CMD_OP(cmd, 1, 8,  8,  char,     type[1]);\
-	MC_CMD_OP(cmd, 1, 16, 8,  char,	    type[2]);\
-	MC_CMD_OP(cmd, 1, 24, 8,  char,	    type[3]);\
-	MC_CMD_OP(cmd, 1, 32, 8,  char,	    type[4]);\
-	MC_CMD_OP(cmd, 1, 40, 8,  char,     type[5]);\
-	MC_CMD_OP(cmd, 1, 48, 8,  char,	    type[6]);\
-	MC_CMD_OP(cmd, 1, 56, 8,  char,	    type[7]);\
-	MC_CMD_OP(cmd, 2, 0,  8,  char,     type[8]);\
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    type[9]);\
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    type[10]);\
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    type[11]);\
-	MC_CMD_OP(cmd, 2, 32, 8,  char,	    type[12]);\
-	MC_CMD_OP(cmd, 2, 40, 8,  char,	    type[13]);\
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    type[14]);\
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    type[15]);\
-} while (0)
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_RES_QUOTA(cmd, quota) \
-	MC_RSP_OP(cmd,	  0,	32,	16,	uint16_t, quota)
-
-/*	param, offset, width,	type,		arg_name */
-#define DPRC_CMD_ASSIGN(cmd, container_id, res_req) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, int,      container_id); \
-	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, res_req->options);\
-	MC_CMD_OP(cmd, 1, 0,  32, uint32_t, res_req->num); \
-	MC_CMD_OP(cmd, 1, 32, 32, int,	    res_req->id_base_align); \
-	MC_CMD_OP(cmd, 2, 0,  8,  char,	    res_req->type[0]);\
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    res_req->type[1]);\
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    res_req->type[2]);\
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    res_req->type[3]);\
-	MC_CMD_OP(cmd, 2, 32, 8,  char,	    res_req->type[4]);\
-	MC_CMD_OP(cmd, 2, 40, 8,  char,	    res_req->type[5]);\
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    res_req->type[6]);\
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    res_req->type[7]);\
-	MC_CMD_OP(cmd, 3, 0,  8,  char,	    res_req->type[8]);\
-	MC_CMD_OP(cmd, 3, 8,  8,  char,	    res_req->type[9]);\
-	MC_CMD_OP(cmd, 3, 16, 8,  char,	    res_req->type[10]);\
-	MC_CMD_OP(cmd, 3, 24, 8,  char,	    res_req->type[11]);\
-	MC_CMD_OP(cmd, 3, 32, 8,  char,	    res_req->type[12]);\
-	MC_CMD_OP(cmd, 3, 40, 8,  char,	    res_req->type[13]);\
-	MC_CMD_OP(cmd, 3, 48, 8,  char,	    res_req->type[14]);\
-	MC_CMD_OP(cmd, 3, 56, 8,  char,	    res_req->type[15]);\
-} while (0)
-
-/*	param, offset, width,	type,		arg_name */
-#define DPRC_CMD_UNASSIGN(cmd, child_container_id, res_req) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, int,      child_container_id); \
-	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, res_req->options);\
-	MC_CMD_OP(cmd, 1, 0,  32, uint32_t, res_req->num); \
-	MC_CMD_OP(cmd, 1, 32, 32, int,	    res_req->id_base_align); \
-	MC_CMD_OP(cmd, 2, 0,  8,  char,	    res_req->type[0]);\
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    res_req->type[1]);\
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    res_req->type[2]);\
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    res_req->type[3]);\
-	MC_CMD_OP(cmd, 2, 32, 8,  char,	    res_req->type[4]);\
-	MC_CMD_OP(cmd, 2, 40, 8,  char,	    res_req->type[5]);\
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    res_req->type[6]);\
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    res_req->type[7]);\
-	MC_CMD_OP(cmd, 3, 0,  8,  char,	    res_req->type[8]);\
-	MC_CMD_OP(cmd, 3, 8,  8,  char,	    res_req->type[9]);\
-	MC_CMD_OP(cmd, 3, 16, 8,  char,	    res_req->type[10]);\
-	MC_CMD_OP(cmd, 3, 24, 8,  char,	    res_req->type[11]);\
-	MC_CMD_OP(cmd, 3, 32, 8,  char,	    res_req->type[12]);\
-	MC_CMD_OP(cmd, 3, 40, 8,  char,	    res_req->type[13]);\
-	MC_CMD_OP(cmd, 3, 48, 8,  char,	    res_req->type[14]);\
-	MC_CMD_OP(cmd, 3, 56, 8,  char,	    res_req->type[15]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_POOL_COUNT(cmd, pool_count) \
-	MC_RSP_OP(cmd, 0, 0,  32, int,	    pool_count)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_POOL(cmd, pool_index) \
-	MC_CMD_OP(cmd,	  0,	0,	32,	int,	pool_index)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_POOL(cmd, type) \
-do { \
-	MC_RSP_OP(cmd, 1, 0,  8,  char,     type[0]);\
-	MC_RSP_OP(cmd, 1, 8,  8,  char,	    type[1]);\
-	MC_RSP_OP(cmd, 1, 16, 8,  char,	    type[2]);\
-	MC_RSP_OP(cmd, 1, 24, 8,  char,	    type[3]);\
-	MC_RSP_OP(cmd, 1, 32, 8,  char,	    type[4]);\
-	MC_RSP_OP(cmd, 1, 40, 8,  char,	    type[5]);\
-	MC_RSP_OP(cmd, 1, 48, 8,  char,	    type[6]);\
-	MC_RSP_OP(cmd, 1, 56, 8,  char,	    type[7]);\
-	MC_RSP_OP(cmd, 2, 0,  8,  char,	    type[8]);\
-	MC_RSP_OP(cmd, 2, 8,  8,  char,	    type[9]);\
-	MC_RSP_OP(cmd, 2, 16, 8,  char,	    type[10]);\
-	MC_RSP_OP(cmd, 2, 24, 8,  char,	    type[11]);\
-	MC_RSP_OP(cmd, 2, 32, 8,  char,	    type[12]);\
-	MC_RSP_OP(cmd, 2, 40, 8,  char,	    type[13]);\
-	MC_RSP_OP(cmd, 2, 48, 8,  char,     type[14]);\
-	MC_RSP_OP(cmd, 2, 56, 8,  char,	    type[15]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_OBJ_COUNT(cmd, obj_count) \
-	MC_RSP_OP(cmd, 0, 32, 32, int,      obj_count)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_OBJ(cmd, obj_index) \
-	MC_CMD_OP(cmd, 0, 0,  32, int,	    obj_index)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_OBJ(cmd, obj_desc) \
-do { \
-	MC_RSP_OP(cmd, 0, 32, 32, int,	    obj_desc->id); \
-	MC_RSP_OP(cmd, 1, 0,  16, uint16_t, obj_desc->vendor); \
-	MC_RSP_OP(cmd, 1, 16, 8,  uint8_t,  obj_desc->irq_count); \
-	MC_RSP_OP(cmd, 1, 24, 8,  uint8_t,  obj_desc->region_count); \
-	MC_RSP_OP(cmd, 1, 32, 32, uint32_t, obj_desc->state);\
-	MC_RSP_OP(cmd, 2, 0,  16, uint16_t, obj_desc->ver_major);\
-	MC_RSP_OP(cmd, 2, 16, 16, uint16_t, obj_desc->ver_minor);\
-	MC_RSP_OP(cmd, 3, 0,  8,  char,	    obj_desc->type[0]);\
-	MC_RSP_OP(cmd, 3, 8,  8,  char,	    obj_desc->type[1]);\
-	MC_RSP_OP(cmd, 3, 16, 8,  char,	    obj_desc->type[2]);\
-	MC_RSP_OP(cmd, 3, 24, 8,  char,	    obj_desc->type[3]);\
-	MC_RSP_OP(cmd, 3, 32, 8,  char,	    obj_desc->type[4]);\
-	MC_RSP_OP(cmd, 3, 40, 8,  char,	    obj_desc->type[5]);\
-	MC_RSP_OP(cmd, 3, 48, 8,  char,	    obj_desc->type[6]);\
-	MC_RSP_OP(cmd, 3, 56, 8,  char,	    obj_desc->type[7]);\
-	MC_RSP_OP(cmd, 4, 0,  8,  char,	    obj_desc->type[8]);\
-	MC_RSP_OP(cmd, 4, 8,  8,  char,	    obj_desc->type[9]);\
-	MC_RSP_OP(cmd, 4, 16, 8,  char,	    obj_desc->type[10]);\
-	MC_RSP_OP(cmd, 4, 24, 8,  char,	    obj_desc->type[11]);\
-	MC_RSP_OP(cmd, 4, 32, 8,  char,	    obj_desc->type[12]);\
-	MC_RSP_OP(cmd, 4, 40, 8,  char,	    obj_desc->type[13]);\
-	MC_RSP_OP(cmd, 4, 48, 8,  char,	    obj_desc->type[14]);\
-	MC_RSP_OP(cmd, 4, 56, 8,  char,	    obj_desc->type[15]);\
-	MC_RSP_OP(cmd, 5, 0,  8,  char,	    obj_desc->label[0]);\
-	MC_RSP_OP(cmd, 5, 8,  8,  char,	    obj_desc->label[1]);\
-	MC_RSP_OP(cmd, 5, 16, 8,  char,	    obj_desc->label[2]);\
-	MC_RSP_OP(cmd, 5, 24, 8,  char,	    obj_desc->label[3]);\
-	MC_RSP_OP(cmd, 5, 32, 8,  char,	    obj_desc->label[4]);\
-	MC_RSP_OP(cmd, 5, 40, 8,  char,	    obj_desc->label[5]);\
-	MC_RSP_OP(cmd, 5, 48, 8,  char,	    obj_desc->label[6]);\
-	MC_RSP_OP(cmd, 5, 56, 8,  char,	    obj_desc->label[7]);\
-	MC_RSP_OP(cmd, 6, 0,  8,  char,	    obj_desc->label[8]);\
-	MC_RSP_OP(cmd, 6, 8,  8,  char,	    obj_desc->label[9]);\
-	MC_RSP_OP(cmd, 6, 16, 8,  char,	    obj_desc->label[10]);\
-	MC_RSP_OP(cmd, 6, 24, 8,  char,	    obj_desc->label[11]);\
-	MC_RSP_OP(cmd, 6, 32, 8,  char,	    obj_desc->label[12]);\
-	MC_RSP_OP(cmd, 6, 40, 8,  char,	    obj_desc->label[13]);\
-	MC_RSP_OP(cmd, 6, 48, 8,  char,	    obj_desc->label[14]);\
-	MC_RSP_OP(cmd, 6, 56, 8,  char,	    obj_desc->label[15]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_RES_COUNT(cmd, type) \
-do { \
-	MC_CMD_OP(cmd, 1, 0,  8,  char,	    type[0]);\
-	MC_CMD_OP(cmd, 1, 8,  8,  char,	    type[1]);\
-	MC_CMD_OP(cmd, 1, 16, 8,  char,	    type[2]);\
-	MC_CMD_OP(cmd, 1, 24, 8,  char,	    type[3]);\
-	MC_CMD_OP(cmd, 1, 32, 8,  char,	    type[4]);\
-	MC_CMD_OP(cmd, 1, 40, 8,  char,	    type[5]);\
-	MC_CMD_OP(cmd, 1, 48, 8,  char,	    type[6]);\
-	MC_CMD_OP(cmd, 1, 56, 8,  char,	    type[7]);\
-	MC_CMD_OP(cmd, 2, 0,  8,  char,	    type[8]);\
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    type[9]);\
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    type[10]);\
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    type[11]);\
-	MC_CMD_OP(cmd, 2, 32, 8,  char,	    type[12]);\
-	MC_CMD_OP(cmd, 2, 40, 8,  char,	    type[13]);\
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    type[14]);\
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    type[15]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_RES_COUNT(cmd, res_count) \
-	MC_RSP_OP(cmd, 0, 0,  32, int,	    res_count)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_RES_IDS(cmd, range_desc, type) \
-do { \
-	MC_CMD_OP(cmd, 0, 42, 7,  enum dprc_iter_status, \
-					    range_desc->iter_status); \
-	MC_CMD_OP(cmd, 1, 0,  32, int,	    range_desc->base_id); \
-	MC_CMD_OP(cmd, 1, 32, 32, int,	    range_desc->last_id);\
-	MC_CMD_OP(cmd, 2, 0,  8,  char,	    type[0]);\
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    type[1]);\
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    type[2]);\
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    type[3]);\
-	MC_CMD_OP(cmd, 2, 32, 8,  char,	    type[4]);\
-	MC_CMD_OP(cmd, 2, 40, 8,  char,     type[5]);\
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    type[6]);\
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    type[7]);\
-	MC_CMD_OP(cmd, 3, 0,  8,  char,	    type[8]);\
-	MC_CMD_OP(cmd, 3, 8,  8,  char,	    type[9]);\
-	MC_CMD_OP(cmd, 3, 16, 8,  char,	    type[10]);\
-	MC_CMD_OP(cmd, 3, 24, 8,  char,	    type[11]);\
-	MC_CMD_OP(cmd, 3, 32, 8,  char,	    type[12]);\
-	MC_CMD_OP(cmd, 3, 40, 8,  char,	    type[13]);\
-	MC_CMD_OP(cmd, 3, 48, 8,  char,	    type[14]);\
-	MC_CMD_OP(cmd, 3, 56, 8,  char,	    type[15]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_RES_IDS(cmd, range_desc) \
-do { \
-	MC_RSP_OP(cmd, 0, 42, 7,  enum dprc_iter_status, \
-					    range_desc->iter_status);\
-	MC_RSP_OP(cmd, 1, 0,  32, int,	    range_desc->base_id); \
-	MC_RSP_OP(cmd, 1, 32, 32, int,	    range_desc->last_id);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_OBJ_REGION(cmd, obj_type, obj_id, region_index) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, int,	    obj_id); \
-	MC_CMD_OP(cmd, 0, 48, 8,  uint8_t,  region_index);\
-	MC_CMD_OP(cmd, 3, 0,  8,  char,	    obj_type[0]);\
-	MC_CMD_OP(cmd, 3, 8,  8,  char,	    obj_type[1]);\
-	MC_CMD_OP(cmd, 3, 16, 8,  char,	    obj_type[2]);\
-	MC_CMD_OP(cmd, 3, 24, 8,  char,	    obj_type[3]);\
-	MC_CMD_OP(cmd, 3, 32, 8,  char,	    obj_type[4]);\
-	MC_CMD_OP(cmd, 3, 40, 8,  char,	    obj_type[5]);\
-	MC_CMD_OP(cmd, 3, 48, 8,  char,	    obj_type[6]);\
-	MC_CMD_OP(cmd, 3, 56, 8,  char,	    obj_type[7]);\
-	MC_CMD_OP(cmd, 4, 0,  8,  char,	    obj_type[8]);\
-	MC_CMD_OP(cmd, 4, 8,  8,  char,	    obj_type[9]);\
-	MC_CMD_OP(cmd, 4, 16, 8,  char,	    obj_type[10]);\
-	MC_CMD_OP(cmd, 4, 24, 8,  char,	    obj_type[11]);\
-	MC_CMD_OP(cmd, 4, 32, 8,  char,	    obj_type[12]);\
-	MC_CMD_OP(cmd, 4, 40, 8,  char,	    obj_type[13]);\
-	MC_CMD_OP(cmd, 4, 48, 8,  char,	    obj_type[14]);\
-	MC_CMD_OP(cmd, 4, 56, 8,  char,	    obj_type[15]);\
-} while (0)
-
-/*	param, offset, width,	type,		arg_name */
-#define DPRC_RSP_GET_OBJ_REGION(cmd, region_desc) \
-do { \
-	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, region_desc->base_offset);\
-	MC_RSP_OP(cmd, 2, 0,  32, uint32_t, region_desc->size); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_SET_OBJ_LABEL(cmd, obj_index, label) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, int,      obj_index); \
-	MC_CMD_OP(cmd, 1, 0,  8,  char,	    label[0]);\
-	MC_CMD_OP(cmd, 1, 8,  8,  char,	    label[1]);\
-	MC_CMD_OP(cmd, 1, 16, 8,  char,	    label[2]);\
-	MC_CMD_OP(cmd, 1, 24, 8,  char,	    label[3]);\
-	MC_CMD_OP(cmd, 1, 32, 8,  char,	    label[4]);\
-	MC_CMD_OP(cmd, 1, 40, 8,  char,	    label[5]);\
-	MC_CMD_OP(cmd, 1, 48, 8,  char,	    label[6]);\
-	MC_CMD_OP(cmd, 1, 56, 8,  char,	    label[7]);\
-	MC_CMD_OP(cmd, 2, 0,  8,  char,	    label[8]);\
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    label[9]);\
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    label[10]);\
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    label[11]);\
-	MC_CMD_OP(cmd, 2, 32, 8,  char,	    label[12]);\
-	MC_CMD_OP(cmd, 2, 40, 8,  char,	    label[13]);\
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    label[14]);\
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    label[15]);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_OBJ_SET_IRQ(cmd, irq_index, obj_index, irq_addr, irq_val, \
-			     user_irq_id) \
-do { \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index); \
-	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, irq_val); \
-	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_addr);\
-	MC_CMD_OP(cmd, 2, 0,  32, int,	    user_irq_id); \
-	MC_CMD_OP(cmd, 2, 32, 32, int,	    obj_index); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_OBJ_GET_IRQ(cmd, irq_index, obj_index) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, int,	    obj_index); \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_OBJ_GET_IRQ(cmd, type, irq_addr, irq_val, user_irq_id) \
-do { \
-	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_val); \
-	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_addr);\
-	MC_RSP_OP(cmd, 2, 0,  32, int,	    user_irq_id); \
-	MC_RSP_OP(cmd, 2, 32, 32, int,      type); \
-} while (0)
-
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_CONNECT(cmd, endpoint1, endpoint2) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, int,      endpoint1->id); \
-	MC_CMD_OP(cmd, 0, 32, 32, int,	    endpoint1->interface_id); \
-	MC_CMD_OP(cmd, 1, 0,  32, int,	    endpoint2->id); \
-	MC_CMD_OP(cmd, 1, 32, 32, int,	    endpoint2->interface_id); \
-	MC_CMD_OP(cmd, 2, 0,  8,  char,     endpoint1->type[0]); \
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    endpoint1->type[1]); \
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    endpoint1->type[2]); \
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    endpoint1->type[3]); \
-	MC_CMD_OP(cmd, 2, 32, 8,  char,	    endpoint1->type[4]); \
-	MC_CMD_OP(cmd, 2, 40, 8,  char,	    endpoint1->type[5]); \
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    endpoint1->type[6]); \
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    endpoint1->type[7]); \
-	MC_CMD_OP(cmd, 3, 0,  8,  char,	    endpoint1->type[8]); \
-	MC_CMD_OP(cmd, 3, 8,  8,  char,	    endpoint1->type[9]); \
-	MC_CMD_OP(cmd, 3, 16, 8,  char,	    endpoint1->type[10]); \
-	MC_CMD_OP(cmd, 3, 24, 8,  char,	    endpoint1->type[11]); \
-	MC_CMD_OP(cmd, 3, 32, 8,  char,     endpoint1->type[12]); \
-	MC_CMD_OP(cmd, 3, 40, 8,  char,	    endpoint1->type[13]); \
-	MC_CMD_OP(cmd, 3, 48, 8,  char,	    endpoint1->type[14]); \
-	MC_CMD_OP(cmd, 3, 56, 8,  char,	    endpoint1->type[15]); \
-	MC_CMD_OP(cmd, 5, 0,  8,  char,	    endpoint2->type[0]); \
-	MC_CMD_OP(cmd, 5, 8,  8,  char,	    endpoint2->type[1]); \
-	MC_CMD_OP(cmd, 5, 16, 8,  char,	    endpoint2->type[2]); \
-	MC_CMD_OP(cmd, 5, 24, 8,  char,	    endpoint2->type[3]); \
-	MC_CMD_OP(cmd, 5, 32, 8,  char,	    endpoint2->type[4]); \
-	MC_CMD_OP(cmd, 5, 40, 8,  char,	    endpoint2->type[5]); \
-	MC_CMD_OP(cmd, 5, 48, 8,  char,	    endpoint2->type[6]); \
-	MC_CMD_OP(cmd, 5, 56, 8,  char,	    endpoint2->type[7]); \
-	MC_CMD_OP(cmd, 6, 0,  8,  char,	    endpoint2->type[8]); \
-	MC_CMD_OP(cmd, 6, 8,  8,  char,	    endpoint2->type[9]); \
-	MC_CMD_OP(cmd, 6, 16, 8,  char,	    endpoint2->type[10]); \
-	MC_CMD_OP(cmd, 6, 24, 8,  char,	    endpoint2->type[11]); \
-	MC_CMD_OP(cmd, 6, 32, 8,  char,	    endpoint2->type[12]); \
-	MC_CMD_OP(cmd, 6, 40, 8,  char,	    endpoint2->type[13]); \
-	MC_CMD_OP(cmd, 6, 48, 8,  char,	    endpoint2->type[14]); \
-	MC_CMD_OP(cmd, 6, 56, 8,  char,	    endpoint2->type[15]); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_DISCONNECT(cmd, endpoint) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, int,	    endpoint->id); \
-	MC_CMD_OP(cmd, 0, 32, 32, int,	    endpoint->interface_id); \
-	MC_CMD_OP(cmd, 1, 0,  8,  char,	    endpoint->type[0]); \
-	MC_CMD_OP(cmd, 1, 8,  8,  char,	    endpoint->type[1]); \
-	MC_CMD_OP(cmd, 1, 16, 8,  char,	    endpoint->type[2]); \
-	MC_CMD_OP(cmd, 1, 24, 8,  char,	    endpoint->type[3]); \
-	MC_CMD_OP(cmd, 1, 32, 8,  char,	    endpoint->type[4]); \
-	MC_CMD_OP(cmd, 1, 40, 8,  char,	    endpoint->type[5]); \
-	MC_CMD_OP(cmd, 1, 48, 8,  char,	    endpoint->type[6]); \
-	MC_CMD_OP(cmd, 1, 56, 8,  char,	    endpoint->type[7]); \
-	MC_CMD_OP(cmd, 2, 0,  8,  char,	    endpoint->type[8]); \
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    endpoint->type[9]); \
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    endpoint->type[10]); \
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    endpoint->type[11]); \
-	MC_CMD_OP(cmd, 2, 32, 8,  char,	    endpoint->type[12]); \
-	MC_CMD_OP(cmd, 2, 40, 8,  char,	    endpoint->type[13]); \
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    endpoint->type[14]); \
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    endpoint->type[15]); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_CMD_GET_CONNECTION(cmd, endpoint1) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  32, int,      endpoint1->id); \
-	MC_CMD_OP(cmd, 0, 32, 32, int,	    endpoint1->interface_id); \
-	MC_CMD_OP(cmd, 1, 0,  8,  char,     endpoint1->type[0]); \
-	MC_CMD_OP(cmd, 1, 8,  8,  char,	    endpoint1->type[1]); \
-	MC_CMD_OP(cmd, 1, 16, 8,  char,	    endpoint1->type[2]); \
-	MC_CMD_OP(cmd, 1, 24, 8,  char,	    endpoint1->type[3]); \
-	MC_CMD_OP(cmd, 1, 32, 8,  char,	    endpoint1->type[4]); \
-	MC_CMD_OP(cmd, 1, 40, 8,  char,	    endpoint1->type[5]); \
-	MC_CMD_OP(cmd, 1, 48, 8,  char,	    endpoint1->type[6]); \
-	MC_CMD_OP(cmd, 1, 56, 8,  char,	    endpoint1->type[7]); \
-	MC_CMD_OP(cmd, 2, 0,  8,  char,	    endpoint1->type[8]); \
-	MC_CMD_OP(cmd, 2, 8,  8,  char,	    endpoint1->type[9]); \
-	MC_CMD_OP(cmd, 2, 16, 8,  char,	    endpoint1->type[10]); \
-	MC_CMD_OP(cmd, 2, 24, 8,  char,	    endpoint1->type[11]); \
-	MC_CMD_OP(cmd, 2, 32, 8,  char,     endpoint1->type[12]); \
-	MC_CMD_OP(cmd, 2, 40, 8,  char,	    endpoint1->type[13]); \
-	MC_CMD_OP(cmd, 2, 48, 8,  char,	    endpoint1->type[14]); \
-	MC_CMD_OP(cmd, 2, 56, 8,  char,	    endpoint1->type[15]); \
-} while (0)
-
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPRC_RSP_GET_CONNECTION(cmd, endpoint2, state) \
-do { \
-	MC_RSP_OP(cmd, 3, 0,  32, int,	    endpoint2->id); \
-	MC_RSP_OP(cmd, 3, 32, 32, int,	    endpoint2->interface_id); \
-	MC_RSP_OP(cmd, 4, 0,  8,  char,	    endpoint2->type[0]); \
-	MC_RSP_OP(cmd, 4, 8,  8,  char,	    endpoint2->type[1]); \
-	MC_RSP_OP(cmd, 4, 16, 8,  char,	    endpoint2->type[2]); \
-	MC_RSP_OP(cmd, 4, 24, 8,  char,	    endpoint2->type[3]); \
-	MC_RSP_OP(cmd, 4, 32, 8,  char,	    endpoint2->type[4]); \
-	MC_RSP_OP(cmd, 4, 40, 8,  char,	    endpoint2->type[5]); \
-	MC_RSP_OP(cmd, 4, 48, 8,  char,	    endpoint2->type[6]); \
-	MC_RSP_OP(cmd, 4, 56, 8,  char,	    endpoint2->type[7]); \
-	MC_RSP_OP(cmd, 5, 0,  8,  char,	    endpoint2->type[8]); \
-	MC_RSP_OP(cmd, 5, 8,  8,  char,	    endpoint2->type[9]); \
-	MC_RSP_OP(cmd, 5, 16, 8,  char,	    endpoint2->type[10]); \
-	MC_RSP_OP(cmd, 5, 24, 8,  char,	    endpoint2->type[11]); \
-	MC_RSP_OP(cmd, 5, 32, 8,  char,	    endpoint2->type[12]); \
-	MC_RSP_OP(cmd, 5, 40, 8,  char,	    endpoint2->type[13]); \
-	MC_RSP_OP(cmd, 5, 48, 8,  char,	    endpoint2->type[14]); \
-	MC_RSP_OP(cmd, 5, 56, 8,  char,	    endpoint2->type[15]); \
-	MC_RSP_OP(cmd, 6, 0,  32, int,	    state); \
-} while (0)
-
 #endif /* _FSL_DPRC_CMD_H */
diff --git a/drivers/staging/fsl-mc/include/dprc.h b/drivers/staging/fsl-mc/include/dprc.h
index 610ea31..0ace820 100644
--- a/drivers/staging/fsl-mc/include/dprc.h
+++ b/drivers/staging/fsl-mc/include/dprc.h
@@ -32,6 +32,8 @@
 #ifndef _FSL_DPRC_H
 #define _FSL_DPRC_H
 
+#include "mc-cmd.h"
+
 /* Data Path Resource Container API
  * Contains DPRC API for managing and querying DPAA resources
  */
@@ -55,6 +57,7 @@ struct fsl_mc_io;
 /**
  * dprc_open() - Open DPRC object for use
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @container_id: Container ID to open
  * @token:	Returned token of DPRC object
  *
@@ -62,11 +65,15 @@ struct fsl_mc_io;
  *
  * @warning	Required before any operation on the object.
  */
-int dprc_open(struct fsl_mc_io *mc_io, int container_id, uint16_t *token);
+int dprc_open(struct fsl_mc_io	*mc_io,
+	      uint32_t		cmd_flags,
+	      int		container_id,
+	      uint16_t		*token);
 
 /**
  * dprc_close() - Close the control session of the object
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  *
  * After this function is called, no further operations are
@@ -74,7 +81,9 @@ int dprc_open(struct fsl_mc_io *mc_io, int container_id, uint16_t *token);
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dprc_close(struct fsl_mc_io *mc_io, uint16_t token);
+int dprc_close(struct fsl_mc_io	*mc_io,
+	       uint32_t		cmd_flags,
+	       uint16_t		token);
 
 /**
  * Container general options
@@ -128,15 +137,16 @@ int dprc_close(struct fsl_mc_io *mc_io, uint16_t token);
  * @label: Object's label
  */
 struct dprc_cfg {
-	uint16_t icid;
-	int portal_id;
-	uint64_t options;
-	char label[16];
+	uint16_t	icid;
+	int		portal_id;
+	uint64_t	options;
+	char		label[16];
 };
 
 /**
  * dprc_create_container() - Create child container
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @cfg:	Child container configuration
  * @child_container_id:	Returned child container ID
@@ -145,6 +155,7 @@ struct dprc_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_create_container(struct fsl_mc_io	*mc_io,
+			  uint32_t		cmd_flags,
 			  uint16_t		token,
 			  struct dprc_cfg	*cfg,
 			  int			*child_container_id,
@@ -153,6 +164,7 @@ int dprc_create_container(struct fsl_mc_io	*mc_io,
 /**
  * dprc_destroy_container() - Destroy child container.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @child_container_id:	ID of the container to destroy
  *
@@ -172,12 +184,14 @@ int dprc_create_container(struct fsl_mc_io	*mc_io,
  *
  */
 int dprc_destroy_container(struct fsl_mc_io	*mc_io,
+			   uint32_t		cmd_flags,
 			   uint16_t		token,
 			   int			child_container_id);
 
 /**
  * dprc_reset_container - Reset child container.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @child_container_id:	ID of the container to reset
  *
@@ -196,12 +210,16 @@ int dprc_destroy_container(struct fsl_mc_io	*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dprc_reset_container(struct fsl_mc_io *mc_io,
-			 uint16_t token,
-			 int child_container_id);
+int dprc_reset_container(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
+			 uint16_t		token,
+			 int			child_container_id);
 
 /* IRQ */
 
+/* IRQ index */
+#define DPRC_IRQ_INDEX          0
+
 /* Number of dprc's IRQs */
 #define DPRC_NUM_OF_IRQS		1
 
@@ -233,49 +251,56 @@ int dprc_reset_container(struct fsl_mc_io *mc_io,
 #define DPRC_IRQ_EVENT_OBJ_CREATED		0x00000040
 
 /**
+ * struct dprc_irq_cfg - IRQ configuration
+ * @paddr:	Address that must be written to signal a message-based interrupt
+ * @val:	Value to write into irq_addr address
+ * @user_irq_id: A user defined number associated with this IRQ
+ */
+struct dprc_irq_cfg {
+	     uint64_t		paddr;
+	     uint32_t		val;
+	     int		user_irq_id;
+};
+
+/**
  * dprc_set_irq() - Set IRQ information for the DPRC to trigger an interrupt.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @irq_index:	Identifies the interrupt index to configure
- * @irq_addr:	Address that must be written to
- *			signal a message-based interrupt
- * @irq_val:	Value to write into irq_addr address
- * @user_irq_id: Returned a user defined number associated with this IRQ
+ * @irq_cfg:	IRQ configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_set_irq(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
 		 uint16_t		token,
 		 uint8_t		irq_index,
-		 uint64_t		irq_addr,
-		 uint32_t		irq_val,
-		 int			user_irq_id);
+		 struct dprc_irq_cfg	*irq_cfg);
 
 /**
  * dprc_get_irq() - Get IRQ information from the DPRC.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @irq_index:	The interrupt index to configure
- * @type:	Returned interrupt type: 0 represents message interrupt
- *			type (both irq_addr and irq_val are valid)
- * @irq_addr:	Returned address that must be written to
- *			signal the message-based interrupt
- * @irq_val:	Value to write into irq_addr address
- * @user_irq_id: A user defined number associated with this IRQ
+ * @type:	Interrupt type: 0 represents message interrupt
+ *		type (both irq_addr and irq_val are valid)
+ * @irq_cfg:	IRQ attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_get_irq(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
 		 uint16_t		token,
 		 uint8_t		irq_index,
 		 int			*type,
-		 uint64_t		*irq_addr,
-		 uint32_t		*irq_val,
-		 int			*user_irq_id);
+		 struct dprc_irq_cfg	*irq_cfg);
 
 /**
  * dprc_set_irq_enable() - Set overall interrupt state.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @irq_index:	The interrupt index to configure
  * @en:		Interrupt state - enable = 1, disable = 0
@@ -288,6 +313,7 @@ int dprc_get_irq(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_set_irq_enable(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			uint8_t			irq_index,
 			uint8_t			en);
@@ -295,6 +321,7 @@ int dprc_set_irq_enable(struct fsl_mc_io	*mc_io,
 /**
  * dprc_get_irq_enable() - Get overall interrupt state.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @irq_index:  The interrupt index to configure
  * @en:		Returned interrupt state - enable = 1, disable = 0
@@ -302,6 +329,7 @@ int dprc_set_irq_enable(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_get_irq_enable(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			uint8_t			irq_index,
 			uint8_t			*en);
@@ -309,6 +337,7 @@ int dprc_get_irq_enable(struct fsl_mc_io	*mc_io,
 /**
  * dprc_set_irq_mask() - Set interrupt mask.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @irq_index:	The interrupt index to configure
  * @mask:	event mask to trigger interrupt;
@@ -322,6 +351,7 @@ int dprc_get_irq_enable(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_set_irq_mask(struct fsl_mc_io	*mc_io,
+		      uint32_t		cmd_flags,
 		      uint16_t		token,
 		      uint8_t		irq_index,
 		      uint32_t		mask);
@@ -329,6 +359,7 @@ int dprc_set_irq_mask(struct fsl_mc_io	*mc_io,
 /**
  * dprc_get_irq_mask() - Get interrupt mask.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @irq_index:	The interrupt index to configure
  * @mask:	Returned event mask to trigger interrupt
@@ -339,6 +370,7 @@ int dprc_set_irq_mask(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_get_irq_mask(struct fsl_mc_io	*mc_io,
+		      uint32_t		cmd_flags,
 		      uint16_t		token,
 		      uint8_t		irq_index,
 		      uint32_t		*mask);
@@ -346,6 +378,7 @@ int dprc_get_irq_mask(struct fsl_mc_io	*mc_io,
 /**
  * dprc_get_irq_status() - Get the current status of any pending interrupts.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @irq_index:	The interrupt index to configure
  * @status:	Returned interrupts status - one bit per cause:
@@ -355,6 +388,7 @@ int dprc_get_irq_mask(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_get_irq_status(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			uint8_t			irq_index,
 			uint32_t		*status);
@@ -362,6 +396,7 @@ int dprc_get_irq_status(struct fsl_mc_io	*mc_io,
 /**
  * dprc_clear_irq_status() - Clear a pending interrupt's status
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @irq_index:	The interrupt index to configure
  * @status:	bits to clear (W1C) - one bit per cause:
@@ -371,6 +406,7 @@ int dprc_get_irq_status(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_clear_irq_status(struct fsl_mc_io	*mc_io,
+			  uint32_t		cmd_flags,
 			  uint16_t		token,
 			  uint8_t		irq_index,
 			  uint32_t		status);
@@ -402,12 +438,14 @@ struct dprc_attributes {
 /**
  * dprc_get_attributes() - Obtains container attributes
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
- * @attributes	Returned container attributes
+ * @attributes:	Returned container attributes
  *
  * Return:     '0' on Success; Error code otherwise.
  */
 int dprc_get_attributes(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			struct dprc_attributes	*attributes);
 
@@ -415,6 +453,7 @@ int dprc_get_attributes(struct fsl_mc_io	*mc_io,
  * dprc_set_res_quota() - Set allocation policy for a specific resource/object
  *		type in a child container
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @child_container_id:	ID of the child container
  * @type:	Resource/object type
@@ -436,6 +475,7 @@ int dprc_get_attributes(struct fsl_mc_io	*mc_io,
  * @warning	Only the parent container is allowed to change a child policy.
  */
 int dprc_set_res_quota(struct fsl_mc_io	*mc_io,
+		       uint32_t		cmd_flags,
 		       uint16_t		token,
 		       int		child_container_id,
 		       char		*type,
@@ -445,8 +485,9 @@ int dprc_set_res_quota(struct fsl_mc_io	*mc_io,
  * dprc_get_res_quota() - Gets the allocation policy of a specific
  *		resource/object type in a child container
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
- * @child_container_id;	ID of the child container
+ * @child_container_id:	ID of the child container
  * @type:	resource/object type
  * @quota:	Returnes the maximum number of resources of the selected type
  *		that the child container is allowed to allocate from the parent;
@@ -456,6 +497,7 @@ int dprc_set_res_quota(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_get_res_quota(struct fsl_mc_io	*mc_io,
+		       uint32_t		cmd_flags,
 		       uint16_t		token,
 		       int		child_container_id,
 		       char		*type,
@@ -508,6 +550,7 @@ struct dprc_res_req {
 /**
  * dprc_assign() - Assigns objects or resource to a child container.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @container_id: ID of the child container
  * @res_req:	Describes the type and amount of resources to
@@ -537,6 +580,7 @@ struct dprc_res_req {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_assign(struct fsl_mc_io	*mc_io,
+		uint32_t		cmd_flags,
 		uint16_t		token,
 		int			container_id,
 		struct dprc_res_req	*res_req);
@@ -545,6 +589,7 @@ int dprc_assign(struct fsl_mc_io	*mc_io,
  * dprc_unassign() - Un-assigns objects or resources from a child container
  *		and moves them into this (parent) DPRC.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @child_container_id:	ID of the child container
  * @res_req:	Describes the type and amount of resources to un-assign from
@@ -556,12 +601,14 @@ int dprc_assign(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_unassign(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
 		  uint16_t		token,
 		  int			child_container_id,
 		  struct dprc_res_req	*res_req);
 
 /**
  * dprc_get_pool_count() - Get the number of dprc's pools
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @mc_io:	Pointer to MC portal's I/O object
  * @token:	Token of DPRC object
  * @pool_count:	Returned number of resource pools in the dprc
@@ -569,14 +616,16 @@ int dprc_unassign(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_get_pool_count(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			int			*pool_count);
 
 /**
  * dprc_get_pool() - Get the type (string) of a certain dprc's pool
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
- * @pool_index;	Index of the pool to be queried (< pool_count)
+ * @pool_index:	Index of the pool to be queried (< pool_count)
  * @type:	The type of the pool
  *
  * The pool types retrieved one by one by incrementing
@@ -587,6 +636,7 @@ int dprc_get_pool_count(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_get_pool(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
 		  uint16_t		token,
 		  int			pool_index,
 		  char			*type);
@@ -594,12 +644,16 @@ int dprc_get_pool(struct fsl_mc_io	*mc_io,
 /**
  * dprc_get_obj_count() - Obtains the number of objects in the DPRC
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @obj_count:	Number of objects assigned to the DPRC
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dprc_get_obj_count(struct fsl_mc_io *mc_io, uint16_t token, int *obj_count);
+int dprc_get_obj_count(struct fsl_mc_io	*mc_io,
+		       uint32_t		cmd_flags,
+		       uint16_t		token,
+		       int		*obj_count);
 
 /* Objects Attributes Flags */
 
@@ -635,6 +689,7 @@ struct dprc_obj_desc {
 /**
  * dprc_get_obj() - Get general information on an object
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @obj_index:	Index of the object to be queried (< obj_count)
  * @obj_desc:	Returns the requested object descriptor
@@ -647,61 +702,79 @@ struct dprc_obj_desc {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_get_obj(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
 		 uint16_t		token,
 		 int			obj_index,
 		 struct dprc_obj_desc	*obj_desc);
 
 /**
- * dprc_obj_set_irq() - Set IRQ information for object to trigger an interrupt.
+ * dprc_get_obj_desc() - Get object descriptor.
+ *
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
- * @obj_index:  Index of the object to set its IRQ (< obj_count returned from
- *		dprc_get_obj_count())
- * @irq_index:	Identifies the interrupt index to configure
- * @irq_addr:	Address that must be written to
- *			signal a message-based interrupt
- * @irq_val:	Value to write into irq_addr address
- * @user_irq_id: Returned a user defined number associated with this IRQ
+ * @obj_type:	The type of the object to get its descriptor.
+ * @obj_id:	The id of the object to get its descriptor
+ * @obj_desc:	The returned descriptor to fill and return to the user
  *
  * Return:	'0' on Success; Error code otherwise.
+ *
  */
-int dprc_obj_set_irq(struct fsl_mc_io	*mc_io,
-		     uint16_t		token,
-		     int		obj_index,
-		     uint8_t		irq_index,
-		     uint64_t		irq_addr,
-		     uint32_t		irq_val,
-		     int		user_irq_id);
+int dprc_get_obj_desc(struct fsl_mc_io		*mc_io,
+		      uint32_t		cmd_flags,
+			uint16_t		token,
+			char			*obj_type,
+			int			obj_id,
+			struct dprc_obj_desc	*obj_desc);
 
 /**
- * dprc_obj_get_irq() - Get IRQ information from object.
+ * dprc_set_obj_irq() - Set IRQ information for object to trigger an interrupt.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
- * @obj_index:  Index of the object to get its IRQ (< obj_count returned from
- *		dprc_get_obj_count())
+ * @obj_type:	Type of the object to set its IRQ
+ * @obj_id:	ID of the object to set its IRQ
  * @irq_index:	The interrupt index to configure
- * @type:	Returned interrupt type: 0 represents message interrupt
- *			type (both irq_addr and irq_val are valid)
- * @irq_addr:	Returned address that must be written to
- *			signal the message-based interrupt
- * @irq_val:	Value to write into irq_addr address
- * @user_irq_id: A user defined number associated with this IRQ
+ * @irq_cfg:	IRQ configuration
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
+int dprc_set_obj_irq(struct fsl_mc_io		*mc_io,
+		     uint32_t			cmd_flags,
+		     uint16_t			token,
+		     char			*obj_type,
+		     int			obj_id,
+		     uint8_t			irq_index,
+		     struct dprc_irq_cfg	*irq_cfg);
+
+/**
+ * dprc_get_obj_irq() - Get IRQ information from object.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPRC object
+ * @obj_type:	Type od the object to get its IRQ
+ * @obj_id:	ID of the object to get its IRQ
+ * @irq_index:	The interrupt index to configure
+ * @type:	Interrupt type: 0 represents message interrupt
+ *		type (both irq_addr and irq_val are valid)
+ * @irq_cfg:	The returned IRQ attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dprc_obj_get_irq(struct fsl_mc_io	*mc_io,
-		     uint16_t		token,
-		     int		obj_index,
-		     uint8_t		irq_index,
-		     int		*type,
-		     uint64_t		*irq_addr,
-		     uint32_t		*irq_val,
-		     int		*user_irq_id);
+int dprc_get_obj_irq(struct fsl_mc_io		*mc_io,
+		     uint32_t			cmd_flags,
+		     uint16_t			token,
+		     char			*obj_type,
+		     int			obj_id,
+		     uint8_t			irq_index,
+		     int			*type,
+		     struct dprc_irq_cfg	*irq_cfg);
 
 /**
  * dprc_get_res_count() - Obtains the number of free resources that are assigned
  *		to this container, by pool type
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @type:	pool type
  * @res_count:	Returned number of free resources of the given
@@ -709,7 +782,8 @@ int dprc_obj_get_irq(struct fsl_mc_io	*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dprc_get_res_count(struct fsl_mc_io	*mc_io,
+int dprc_get_res_count(struct		fsl_mc_io *mc_io,
+		       uint32_t		cmd_flags,
 		       uint16_t		token,
 		       char		*type,
 		       int		*res_count);
@@ -744,6 +818,7 @@ struct dprc_res_ids_range_desc {
 /**
  * dprc_get_res_ids() - Obtains IDs of free resources in the container
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @type:	pool type
  * @range_desc:	range descriptor
@@ -751,10 +826,25 @@ struct dprc_res_ids_range_desc {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_get_res_ids(struct fsl_mc_io			*mc_io,
+		     uint32_t				cmd_flags,
 		     uint16_t				token,
 		     char				*type,
 		     struct dprc_res_ids_range_desc	*range_desc);
 
+/* Region flags */
+/* Cacheable - Indicates that region should be mapped as cacheable */
+#define DPRC_REGION_CACHEABLE	0x00000001
+
+/**
+ * enum dprc_region_type - Region type
+ * @DPRC_REGION_TYPE_MC_PORTAL: MC portal region
+ * @DPRC_REGION_TYPE_QBMAN_PORTAL: Qbman portal region
+ */
+enum dprc_region_type {
+	DPRC_REGION_TYPE_MC_PORTAL,
+	DPRC_REGION_TYPE_QBMAN_PORTAL
+};
+
 /**
  * struct dprc_region_desc - Mappable region descriptor
  * @base_offset: Region offset from region's base address.
@@ -762,17 +852,22 @@ int dprc_get_res_ids(struct fsl_mc_io			*mc_io,
  *	base address; For DPIO, region base is offset from SoC QMan portals
  *	base address
  * @size: Region size (in bytes)
+ * @flags: Region attributes
+ * @type: Portal region type
  */
 struct dprc_region_desc {
-	uint64_t base_offset;
-	uint32_t size;
+	uint32_t		base_offset;
+	uint32_t		size;
+	uint32_t		flags;
+	enum dprc_region_type	type;
 };
 
 /**
  * dprc_get_obj_region() - Get region information for a specified object.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
- * @obj_type;	Object type as returned in dprc_get_obj()
+ * @obj_type:	Object type as returned in dprc_get_obj()
  * @obj_id:	Unique object instance as returned in dprc_get_obj()
  * @region_index: The specific region to query
  * @region_desc:  Returns the requested region descriptor
@@ -780,6 +875,7 @@ struct dprc_region_desc {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_get_obj_region(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			char			*obj_type,
 			int			obj_id,
@@ -789,69 +885,94 @@ int dprc_get_obj_region(struct fsl_mc_io	*mc_io,
 /**
  * dprc_set_obj_label() - Set object label.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
- * @obj_index;	Object index
+ * @obj_type:	Object's type
+ * @obj_id:	Object's ID
  * @label:	The required label. The maximum length is 16 chars.
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dprc_set_obj_label(struct fsl_mc_io *mc_io,
-		       uint16_t  token,
-		       int obj_index,
-		       char *label);
+int dprc_set_obj_label(struct fsl_mc_io	*mc_io,
+		       uint32_t		cmd_flags,
+		       uint16_t		token,
+		       char		*obj_type,
+		       int		obj_id,
+		       char		*label);
 
 /**
  * struct dprc_endpoint - Endpoint description for link connect/disconnect
  *			operations
  * @type: Endpoint object type: NULL terminated string
  * @id: Endpoint object ID
- * @interface_id: Interface ID; should be set for endpoints with multiple
+ * @if_id: Interface ID; should be set for endpoints with multiple
  *		interfaces ("dpsw", "dpdmux"); for others, always set to 0
  */
 struct dprc_endpoint {
 	char type[16];
 	int id;
-	int interface_id;
+	int if_id;
+};
+
+/**
+ * struct dprc_connection_cfg - Connection configuration.
+ *				Used for virtual connections only
+ * @committed_rate: Committed rate (Mbits/s)
+ * @max_rate: Maximum rate (Mbits/s)
+ */
+struct dprc_connection_cfg {
+	uint32_t committed_rate;
+	uint32_t max_rate;
 };
 
 /**
  * dprc_connect() - Connect two endpoints to create a network link between them
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @endpoint1:	Endpoint 1 configuration parameters
  * @endpoint2:	Endpoint 2 configuration parameters
+ * @cfg: Connection configuration. The connection configuration is ignored for
+ *	connections made to DPMAC objects, where rate is retrieved from the
+ *	MAC configuration.
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dprc_connect(struct fsl_mc_io		*mc_io,
-		 uint16_t			token,
-		 const struct dprc_endpoint	*endpoint1,
-		 const struct dprc_endpoint	*endpoint2);
+int dprc_connect(struct fsl_mc_io			*mc_io,
+		 uint32_t				cmd_flags,
+		 uint16_t				token,
+		 const struct dprc_endpoint		*endpoint1,
+		 const struct dprc_endpoint		*endpoint2,
+		 const struct dprc_connection_cfg	*cfg);
 
 /**
  * dprc_disconnect() - Disconnect one endpoint to remove its network connection
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPRC object
  * @endpoint:	Endpoint configuration parameters
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dprc_disconnect(struct fsl_mc_io		*mc_io,
+		    uint32_t			cmd_flags,
 		    uint16_t			token,
 		    const struct dprc_endpoint	*endpoint);
 
 /**
 * dprc_get_connection() - Get connected endpoint and link status if connection
 *			exists.
-* @mc_io	Pointer to MC portal's I/O object
-* @token	Token of DPRC object
-* @endpoint1	Endpoint 1 configuration parameters
-* @endpoint2	Returned endpoint 2 configuration parameters
+* @mc_io:	Pointer to MC portal's I/O object
+* @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+* @token:	Token of DPRC object
+* @endpoint1:	Endpoint 1 configuration parameters
+* @endpoint2:	Returned endpoint 2 configuration parameters
 * @state:	Returned link state: 1 - link is up, 0 - link is down
 *
 * Return:     '0' on Success; -ENAVAIL if connection does not exist.
 */
 int dprc_get_connection(struct fsl_mc_io		*mc_io,
+			uint32_t			cmd_flags,
 			uint16_t			token,
 			const struct dprc_endpoint	*endpoint1,
 			struct dprc_endpoint		*endpoint2,
diff --git a/drivers/staging/fsl-mc/include/mc-cmd.h b/drivers/staging/fsl-mc/include/mc-cmd.h
index 32501e0..57fefd2 100644
--- a/drivers/staging/fsl-mc/include/mc-cmd.h
+++ b/drivers/staging/fsl-mc/include/mc-cmd.h
@@ -67,14 +67,29 @@ enum mc_cmd_status {
 	MC_CMD_STATUS_INVALID_STATE = 0xC /* Invalid state */
 };
 
+/*
+ * MC command flags
+ */
+
+/* High priority flag */
+#define MC_CMD_FLAG_PRI		0x00008000
+/* Command completion flag */
+#define MC_CMD_FLAG_INTR_DIS	0x01000000
+
+/* TODO Remove following two defines after completion of flib 8.0.0
+integration */
+#define MC_CMD_PRI_LOW		0 /*!< Low Priority command indication */
+#define MC_CMD_PRI_HIGH		1 /*!< High Priority command indication */
+
 #define MC_CMD_HDR_CMDID_O	52	/* Command ID field offset */
 #define MC_CMD_HDR_CMDID_S	12	/* Command ID field size */
 #define MC_CMD_HDR_TOKEN_O	38	/* Token field offset */
 #define MC_CMD_HDR_TOKEN_S	10	/* Token field size */
 #define MC_CMD_HDR_STATUS_O	16	/* Status field offset */
 #define MC_CMD_HDR_STATUS_S	8	/* Status field size*/
-#define MC_CMD_HDR_PRI_O	15	/* Priority field offset */
-#define MC_CMD_HDR_PRI_S	1	/* Priority field size */
+#define MC_CMD_HDR_FLAGS_O	0	/* Flags field offset */
+#define MC_CMD_HDR_FLAGS_S	32	/* Flags field size*/
+#define MC_CMD_HDR_FLAGS_MASK	0xFF00FF00 /* Command flags mask */
 
 #define MC_CMD_HDR_READ_STATUS(_hdr) \
 	((enum mc_cmd_status)mc_dec((_hdr), \
@@ -83,8 +98,8 @@ enum mc_cmd_status {
 #define MC_CMD_HDR_READ_TOKEN(_hdr) \
 	((uint16_t)mc_dec((_hdr), MC_CMD_HDR_TOKEN_O, MC_CMD_HDR_TOKEN_S))
 
-#define MC_CMD_PRI_LOW		0 /* Low Priority command indication */
-#define MC_CMD_PRI_HIGH		1 /* High Priority command indication */
+#define MC_CMD_HDR_READ_FLAGS(_hdr) \
+	((uint32_t)mc_dec((_hdr), MC_CMD_HDR_FLAGS_O, MC_CMD_HDR_FLAGS_S))
 
 #define MC_EXT_OP(_ext, _param, _offset, _width, _type, _arg) \
 	((_ext)[_param] |= mc_enc((_offset), (_width), _arg))
@@ -96,14 +111,15 @@ enum mc_cmd_status {
 	(_arg = (_type)mc_dec(_cmd.params[_param], (_offset), (_width)))
 
 static inline uint64_t mc_encode_cmd_header(uint16_t cmd_id,
-					    uint8_t priority,
+					    uint32_t cmd_flags,
 					    uint16_t token)
 {
 	uint64_t hdr;
 
 	hdr = mc_enc(MC_CMD_HDR_CMDID_O, MC_CMD_HDR_CMDID_S, cmd_id);
+	hdr |= mc_enc(MC_CMD_HDR_FLAGS_O, MC_CMD_HDR_FLAGS_S,
+		       (cmd_flags & MC_CMD_HDR_FLAGS_MASK));
 	hdr |= mc_enc(MC_CMD_HDR_TOKEN_O, MC_CMD_HDR_TOKEN_S, token);
-	hdr |= mc_enc(MC_CMD_HDR_PRI_O, MC_CMD_HDR_PRI_S, priority);
 	hdr |= mc_enc(MC_CMD_HDR_STATUS_O, MC_CMD_HDR_STATUS_S,
 		       MC_CMD_STATUS_READY);
 
diff --git a/drivers/vfio/fsl-mc/vfio_fsl_mc.c b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
index 86f2921..393a05d 100644
--- a/drivers/vfio/fsl-mc/vfio_fsl_mc.c
+++ b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
@@ -286,6 +286,7 @@ static int vfio_fsl_mc_probe(struct fsl_mc_device *mc_dev)
 		mc_dev->mc_io = vfio_mc_io;
 
 		ret = dprc_open(mc_dev->mc_io,
+				0,
 				mc_dev->obj_desc.id,
 				&mc_dev->mc_handle);
 		if (ret) {
@@ -301,7 +302,9 @@ static int vfio_fsl_mc_probe(struct fsl_mc_device *mc_dev)
 		mutex_unlock(&mc_bus->scan_mutex);
 		if (ret) {
 			dev_err(dev, "dprc_scan_objects() fails (%d)\n", ret);
-			dprc_close(mc_dev->mc_io, mc_dev->mc_handle);
+			dprc_close(mc_dev->mc_io,
+				   0,
+				   mc_dev->mc_handle);
 			goto err;
 		}
 
@@ -311,7 +314,9 @@ static int vfio_fsl_mc_probe(struct fsl_mc_device *mc_dev)
 				__func__);
 			device_for_each_child(&mc_dev->dev, NULL,
 					      vfio_fsl_mc_device_remove);
-			dprc_close(mc_dev->mc_io, mc_dev->mc_handle);
+			dprc_close(mc_dev->mc_io,
+				   0,
+				   mc_dev->mc_handle);
 			goto err;
 		}
 	} else {
@@ -349,7 +354,9 @@ static int vfio_fsl_mc_remove(struct fsl_mc_device *mc_dev)
 		device_for_each_child(&mc_dev->dev, NULL,
 				      vfio_fsl_mc_device_remove);
 
-		ret = dprc_close(mc_dev->mc_io, mc_dev->mc_handle);
+		ret = dprc_close(mc_dev->mc_io,
+				 0,
+				 mc_dev->mc_handle);
 		if (ret < 0) {
 			dev_err(&mc_dev->dev, "dprc_close() fails: error %d\n",
 				ret);
-- 
2.5.3

