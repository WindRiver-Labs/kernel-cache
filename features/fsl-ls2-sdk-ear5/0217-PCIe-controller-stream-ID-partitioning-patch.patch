From e20eaf8ce9e43d647bd4720dd526f341cb515f0c Mon Sep 17 00:00:00 2001
From: Varun Sethi <Varun.Sethi@freescale.com>
Date: Thu, 18 Jun 2015 17:20:43 +0530
Subject: [PATCH 217/218] PCIe controller stream ID partitioning patch.

U-boot sets up the device Id to stream ID translation table. The SMMU
driver while creating the IOMMU group programs the hardware table with
these values.

Signed-off-by: Varun Sethi <Varun.Sethi@freescale.com>
[Original patch extracted from FSL LS2085 SDK EAR5.0,
Layerscape2-SDK-SOURCE-20150828-yocto.iso]
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/iommu/arm-smmu.c          | 20 +++++++++++++++
 drivers/pci/host/pci-layerscape.c | 51 ++++++++++++++++++++++++++++++---------
 drivers/pci/host/pci-layerscape.h | 32 ++++++++++++++++++++++++
 3 files changed, 91 insertions(+), 12 deletions(-)
 create mode 100644 drivers/pci/host/pci-layerscape.h

diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c
index e7fddc7..6757913 100644
--- a/drivers/iommu/arm-smmu.c
+++ b/drivers/iommu/arm-smmu.c
@@ -50,6 +50,10 @@
 #include <../drivers/staging/fsl-mc/include/mc.h>
 #endif
 
+#ifdef CONFIG_PCI_LAYERSCAPE
+#include <../drivers/pci/host/pci-layerscape.h>
+#endif
+
 #include <asm/pgalloc.h>
 
 /* Maximum number of stream IDs assigned to a single device */
@@ -1382,6 +1386,9 @@ static int arm_smmu_add_pci_device(struct pci_dev *pdev)
 	u16 sid;
 	struct iommu_group *group;
 	struct arm_smmu_master_cfg *cfg;
+#ifdef CONFIG_PCI_LAYERSCAPE
+	u32 streamid;
+#endif
 
 	group = iommu_group_get_for_dev(&pdev->dev);
 	if (IS_ERR(group))
@@ -1417,6 +1424,19 @@ static int arm_smmu_add_pci_device(struct pci_dev *pdev)
 	if (i == cfg->num_streamids)
 		cfg->streamids[cfg->num_streamids++] = sid;
 
+#ifdef CONFIG_PCI_LAYERSCAPE
+		streamid = set_pcie_streamid_translation(pdev, sid);
+		if (~streamid == 0) {
+			ret = -ENODEV;
+			goto out_put_group;
+		}
+		cfg->streamids[0] = streamid;
+		cfg->mask = 0x7c00;
+
+		pdev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVFN;
+		pdev->dma_alias_devfn = streamid;
+#endif
+
 	return 0;
 out_put_group:
 	iommu_group_put(group);
diff --git a/drivers/pci/host/pci-layerscape.c b/drivers/pci/host/pci-layerscape.c
index 4bcce38..c1f7dc1 100644
--- a/drivers/pci/host/pci-layerscape.c
+++ b/drivers/pci/host/pci-layerscape.c
@@ -21,18 +21,7 @@
 #include <linux/resource.h>
 
 #include "pcie-designware-base.h"
-
-/* PEX1/2 Misc Ports Status Register */
-#define SCFG_PEXMSCPORTSR(pex_idx)	(0x94 + (pex_idx) * 4)
-#define LTSSM_STATE_SHIFT	20
-#define LTSSM_STATE_MASK	0x3f
-#define LTSSM_PCIE_L0		0x11 /* L0 state */
-
-/* PEX LUT registers */
-#define PCIE_LUT_BASE		0x80000
-#define PCIE_LUT_DBG		0x7FC /* PEX LUT Debug register */
-
-#define PCIE_ATU_NUM		6
+#include "pci-layerscape.h"
 
 struct ls_pcie {
 	struct dw_pcie_port	pp;
@@ -40,10 +29,30 @@ struct ls_pcie {
 	void __iomem		*lut;
 	struct regmap		*scfg;
 	int			index;
+	const u32 *avail_streamids;
+	int streamid_index;
 };
 
 #define to_ls_pcie(x)	container_of(x, struct ls_pcie, pp)
 
+u32 set_pcie_streamid_translation(struct pci_dev *pdev, u32 devid)
+{
+	u32 index, streamid;
+	struct dw_pcie_port *pp = pdev->bus->sysdata;
+	struct ls_pcie *pcie = to_ls_pcie(pp);
+
+	if (!pcie->avail_streamids || !pcie->streamid_index)
+		return ~(u32)0;
+
+	index = --pcie->streamid_index;
+	/* mask is set as all zeroes, want to match all bits */
+	iowrite32((devid << 16), pcie->lut + PCIE_LUT_UDR(index));
+	streamid = be32_to_cpup(&pcie->avail_streamids[index]);
+	iowrite32(streamid | PCIE_LUT_ENABLE, pcie->lut + PCIE_LUT_LDR(index));
+
+	return streamid;
+}
+
 static bool ls_pcie_is_bridge(struct ls_pcie *pcie)
 {
 	u32 header_type;
@@ -136,6 +145,8 @@ static int ls2_pcie_host_init(struct dw_pcie_port *pp)
 	u32 val;
 
 	pcie->lut = pp->dbi + PCIE_LUT_BASE;
+	/* Disable LDR zero */
+	iowrite32(0, pcie->lut + PCIE_LUT_LDR(0));
 
 	dw_pcie_dbi_write(pp, 1, PCIE_DBI_RO_WR_EN);
 	/* Fix class value */
@@ -192,11 +203,27 @@ static int __init ls_pcie_probe(struct platform_device *pdev)
 		return PTR_ERR(pcie->regs);
 
 	pcie->lut = pcie->regs + PCIE_LUT_BASE;
+	/* Disable LDR zero */
+	iowrite32(0, pcie->lut + PCIE_LUT_LDR(0));
 	pcie->pp.dev = &pdev->dev;
 	pcie->pp.dbi = pcie->regs;
 	pcie->pp.dw_ops = (struct dw_host_ops *)match->data;
 	pcie->pp.atu_num = PCIE_ATU_NUM;
 
+	if (of_device_is_compatible(pdev->dev.of_node, "fsl,ls2085a-pcie")) {
+		int len;
+		const u32 *prop;
+		struct device_node *np;
+
+		np = pdev->dev.of_node;
+		prop = (u32 *)of_get_property(np, "available-stream-ids", &len);
+		if (prop) {
+			pcie->avail_streamids = prop;
+			pcie->streamid_index = len/sizeof(u32);
+		} else
+			dev_err(&pdev->dev, "PCIe endpoint partitioning not possible\n");
+	}
+
 	if (!ls_pcie_is_bridge(pcie))
 		return -ENODEV;
 
diff --git a/drivers/pci/host/pci-layerscape.h b/drivers/pci/host/pci-layerscape.h
new file mode 100644
index 0000000..8c0642a
--- /dev/null
+++ b/drivers/pci/host/pci-layerscape.h
@@ -0,0 +1,32 @@
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef _PCI_LAYERSCAPE_H
+#define _PCI_LAYERSCAPE_H
+
+/* PEX1/2 Misc Ports Status Register */
+#define SCFG_PEXMSCPORTSR(pex_idx)	(0x94 + (pex_idx) * 4)
+#define LTSSM_STATE_SHIFT	20
+#define LTSSM_STATE_MASK	0x3f
+#define LTSSM_PCIE_L0		0x11 /* L0 state */
+
+/* PEX LUT registers */
+#define PCIE_LUT_BASE		0x80000
+#define PCIE_LUT_PEXLSR		0x020 /* PEX LUT Status Register */
+#define PCIE_LUT_PEXLCR		0x024 /* PEX LUT Control Register */
+#define PCIE_LUT_DBG		0x7FC /* PEX LUT Debug register */
+#define PCIE_LUT_UDR(n)		(0x800 + (n) * 8)
+#define PCIE_LUT_LDR(n)		(0x804 + (n) * 8)
+#define PCIE_LUT_MASK_ALL	0xffff
+#define PCIE_LUT_DR_NUM		32
+#define PCIE_LUT_ENABLE		(1 << 31)
+
+/* function for setting up stream id to device id translation */
+u32 set_pcie_streamid_translation(struct pci_dev *pdev, u32 devid);
+
+#define PCIE_ATU_NUM		6
+
+#endif /* _PCI_LAYERSCAPE_H */
-- 
2.0.2

