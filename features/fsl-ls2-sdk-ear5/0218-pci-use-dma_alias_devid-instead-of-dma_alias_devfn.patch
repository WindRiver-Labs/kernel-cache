From cec89e559d9a025e6a0f8bd6ec81b4f1512e6576 Mon Sep 17 00:00:00 2001
From: Minghuan Lian <Minghuan.Lian@freescale.com>
Date: Fri, 3 Jul 2015 14:57:07 +0800
Subject: [PATCH 218/218] pci: use dma_alias_devid instead of dma_alias_devfn

Some devices use a stream ID other than their physical device
ID including devfn and bus number. There has been a field
dma_alias_devfn to store an alternate devfn. The patch extends
and rename it to dma_alias_devid to including an alternate bus
number. PCI_DEV_FLAGS_DMA_ALIAS_DEVFN is changed to
PCI_DEV_FLAGS_DMA_ALIAS_DEVID as well.

Signed-off-by: Minghuan Lian <Minghuan.Lian@freescale.com>
[Original patch extracted from FSL LS2085 SDK EAR5.0,
Layerscape2-SDK-SOURCE-20150828-yocto.iso]
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/iommu/arm-smmu.c |  4 ++--
 drivers/iommu/iommu.c    |  7 +++++++
 drivers/pci/quirks.c     | 21 +++++++++++++++++++++
 drivers/pci/search.c     |  5 +++++
 include/linux/pci.h      | 10 +++++++++-
 5 files changed, 44 insertions(+), 3 deletions(-)

diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c
index 6757913..bbdd3d2 100644
--- a/drivers/iommu/arm-smmu.c
+++ b/drivers/iommu/arm-smmu.c
@@ -1433,8 +1433,8 @@ static int arm_smmu_add_pci_device(struct pci_dev *pdev)
 		cfg->streamids[0] = streamid;
 		cfg->mask = 0x7c00;
 
-		pdev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVFN;
-		pdev->dma_alias_devfn = streamid;
+		pdev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVID;
+		pdev->dma_alias_devid = streamid;
 #endif
 
 	return 0;
diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c
index d4f527e..a999e32 100644
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@ -591,10 +591,17 @@ static struct iommu_group *get_pci_alias_group(struct pci_dev *pdev,
 			continue;
 
 		/* We alias them or they alias us */
+#ifndef CONFIG_PCI_LAYERSCAPE
 		if (((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&
 		     pdev->dma_alias_devfn == tmp->devfn) ||
 		    ((tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&
 		     tmp->dma_alias_devfn == pdev->devfn)) {
+#else
+		if (((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVID) &&
+		     (pdev->dma_alias_devid & 0xff) == tmp->devfn) ||
+		    ((tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVID) &&
+		     (tmp->dma_alias_devid & 0xff) == pdev->devfn)) {
+#endif
 
 			group = get_pci_alias_group(tmp, devfns);
 			if (group) {
diff --git a/drivers/pci/quirks.c b/drivers/pci/quirks.c
index 804cd3b..69c5e0c 100644
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@ -3569,8 +3569,14 @@ int pci_dev_specific_reset(struct pci_dev *dev, int probe)
 static void quirk_dma_func0_alias(struct pci_dev *dev)
 {
 	if (PCI_FUNC(dev->devfn) != 0) {
+#ifndef CONFIG_PCI_LAYERSCAPE
 		dev->dma_alias_devfn = PCI_DEVFN(PCI_SLOT(dev->devfn), 0);
 		dev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVFN;
+#else
+		dev->dma_alias_devid = PCI_DEVID(dev->bus->number,
+				       PCI_DEVFN(PCI_SLOT(dev->devfn), 0));
+		dev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVID;
+#endif
 	}
 }
 
@@ -3585,8 +3591,14 @@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_RICOH, 0xe476, quirk_dma_func0_alias);
 static void quirk_dma_func1_alias(struct pci_dev *dev)
 {
 	if (PCI_FUNC(dev->devfn) != 1) {
+#ifndef CONFIG_PCI_LAYERSCAPE
 		dev->dma_alias_devfn = PCI_DEVFN(PCI_SLOT(dev->devfn), 1);
 		dev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVFN;
+#else
+		dev->dma_alias_devid = PCI_DEVID(dev->bus->number,
+				       PCI_DEVFN(PCI_SLOT(dev->devfn), 1));
+		dev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVID;
+#endif
 	}
 }
 
@@ -3648,11 +3660,20 @@ static void quirk_fixed_dma_alias(struct pci_dev *dev)
 
 	id = pci_match_id(fixed_dma_alias_tbl, dev);
 	if (id) {
+#ifndef CONFIG_PCI_LAYERSCAPE
 		dev->dma_alias_devfn = id->driver_data;
 		dev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVFN;
 		dev_info(&dev->dev, "Enabling fixed DMA alias to %02x.%d\n",
 			 PCI_SLOT(dev->dma_alias_devfn),
 			 PCI_FUNC(dev->dma_alias_devfn));
+#else
+		dev->dma_alias_devid = PCI_DEVID(dev->bus->number,
+						 id->driver_data);
+		dev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVID;
+		dev_info(&dev->dev, "Enabling fixed DMA alias to %02x.%d\n",
+			 PCI_SLOT(dev->dma_alias_devid),
+			 PCI_FUNC(dev->dma_alias_devid));
+#endif
 	}
 }
 
diff --git a/drivers/pci/search.c b/drivers/pci/search.c
index a20ce7d..b17d976 100644
--- a/drivers/pci/search.c
+++ b/drivers/pci/search.c
@@ -40,9 +40,14 @@ int pci_for_each_dma_alias(struct pci_dev *pdev,
 	 * If the device is broken and uses an alias requester ID for
 	 * DMA, iterate over that too.
 	 */
+#ifndef CONFIG_PCI_LAYERSCAPE
 	if (unlikely(pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)) {
 		ret = fn(pdev, PCI_DEVID(pdev->bus->number,
 					 pdev->dma_alias_devfn), data);
+#else
+	if (unlikely(pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVID)) {
+		ret = fn(pdev, pdev->dma_alias_devid, data);
+#endif
 		if (ret)
 			return ret;
 	}
diff --git a/include/linux/pci.h b/include/linux/pci.h
index 5ef0e6f..08e24b6 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -172,8 +172,13 @@ enum pci_dev_flags {
 	PCI_DEV_FLAGS_ASSIGNED = (__force pci_dev_flags_t) (1 << 2),
 	/* Flag for quirk use to store if quirk-specific ACS is enabled */
 	PCI_DEV_FLAGS_ACS_ENABLED_QUIRK = (__force pci_dev_flags_t) (1 << 3),
+#ifndef CONFIG_PCI_LAYERSCAPE
 	/* Flag to indicate the device uses dma_alias_devfn */
 	PCI_DEV_FLAGS_DMA_ALIAS_DEVFN = (__force pci_dev_flags_t) (1 << 4),
+#else
+	/* Flag to indicate the device uses dma_alias_devid */
+	PCI_DEV_FLAGS_DMA_ALIAS_DEVID = (__force pci_dev_flags_t) (1 << 4),
+#endif
 	/* Use a PCIe-to-PCI bridge alias even if !pci_is_pcie */
 	PCI_DEV_FLAG_PCIE_BRIDGE_ALIAS = (__force pci_dev_flags_t) (1 << 5),
 	/* Do not use bus resets for device */
@@ -279,8 +284,11 @@ struct pci_dev {
 	u8		rom_base_reg;	/* which config register controls the ROM */
 	u8		pin;		/* which interrupt pin this device uses */
 	u16		pcie_flags_reg;	/* cached PCIe Capabilities Register */
+#ifndef CONFIG_PCI_LAYERSCAPE
 	u8		dma_alias_devfn;/* devfn of DMA alias, if any */
-
+#else
+	u32		dma_alias_devid;/* devid of DMA alias */
+#endif
 	struct pci_driver *driver;	/* which driver has allocated this device */
 	u64		dma_mask;	/* Mask of the bits of bus address this
 					   device implements.  Normally this is
-- 
2.0.2

