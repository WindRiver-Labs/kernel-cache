From c2c9cf84962c630e535de0f1e776338adb48c304 Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Tue, 2 Jun 2015 16:51:55 +0300
Subject: [PATCH 112/214] dpaa2-eth: Implement ndo_select_queue

Use a very simple selection function for the egress FQ. The purpose
behind this is to more evenly distribute Tx Confirmation traffic,
especially in the case of multiple egress flows, when bundling it all on
CPU 0 would make that CPU a bottleneck.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Change-Id: Ibfe8aad7ad5c719cc95d7817d7de6d2094f0f7ed
Reviewed-on: http://git.am.freescale.net:8181/37685
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch extracted from FSL LS2085 SDK EAR5.0,
Layerscape2-SDK-SOURCE-20150828-yocto.iso]
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c | 15 ++++++++++++++-
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h |  2 +-
 2 files changed, 15 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
index 6411a10..bbdb092 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
@@ -534,6 +534,7 @@ static int ldpaa_eth_tx(struct sk_buff *skb, struct net_device *net_dev)
 	struct rtnl_link_stats64 *percpu_stats;
 	struct ldpaa_eth_stats *percpu_extras;
 	int err, i;
+	int queue_mapping = skb_get_queue_mapping(skb);
 
 	percpu_stats = this_cpu_ptr(priv->percpu_stats);
 	percpu_extras = this_cpu_ptr(priv->percpu_extras);
@@ -584,7 +585,7 @@ static int ldpaa_eth_tx(struct sk_buff *skb, struct net_device *net_dev)
 
 	for (i = 0; i < (LDPAA_ETH_TX_QUEUES << 1); i++) {
 		err = dpaa_io_service_enqueue_qd(NULL, priv->tx_qdid, 0,
-						 priv->fq[0].flowid,
+						 priv->fq[queue_mapping].flowid,
 						 &fd);
 		if (err != -EBUSY)
 			break;
@@ -1135,6 +1136,17 @@ static int ldpaa_eth_set_features(struct net_device *net_dev,
 	return 0;
 }
 
+static inline u16 ldpaa_eth_select_queue(struct net_device *dev,
+					 struct sk_buff *skb,
+					 void *accel_priv,
+					 select_queue_fallback_t fallback)
+{
+	if (likely(!preemptible()))
+		return smp_processor_id();
+
+	return skb_get_hash(skb) % dev->real_num_tx_queues;
+}
+
 static const struct net_device_ops ldpaa_eth_ops = {
 	.ndo_open = ldpaa_eth_open,
 	.ndo_start_xmit = ldpaa_eth_tx,
@@ -1145,6 +1157,7 @@ static const struct net_device_ops ldpaa_eth_ops = {
 	.ndo_change_mtu = ldpaa_eth_change_mtu,
 	.ndo_set_rx_mode = ldpaa_eth_set_rx_mode,
 	.ndo_set_features = ldpaa_eth_set_features,
+	.ndo_select_queue = ldpaa_eth_select_queue,
 };
 
 static void ldpaa_eth_fqdan_cb(struct dpaa_io_notification_ctx *ctx)
diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
index 450be55..0bdbfe8 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
@@ -43,7 +43,7 @@
 #include "ldpaa_eth_trace.h"
 
 /* TODO : how many queues here? NR_CPUS? */
-#define LDPAA_ETH_TX_QUEUES		1
+#define LDPAA_ETH_TX_QUEUES		8	/* FIXME */
 #define LDPAA_ETH_STORE_SIZE		16
 /* NAPI weights *must* be a multiple of 16, i.e. the store size. */
 #define LDPAA_ETH_RX_NAPI_WEIGHT	64
-- 
2.5.3

