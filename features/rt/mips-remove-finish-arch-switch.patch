From: Frank Rowand <frank.rowand@am.sony.com>
Subject: [PATCH 3/4] RT: remove finish_arch_switch
To: linux-kernel@vger.kernel.org
Cc: mingo@redhat.com, tglx@linutronix.de
Date: Tue, 15 Jan 2008 14:20:46 -0800

From: Frank Rowand <frank.rowand@am.sony.com>

This is probably just a temporary workaround for one procssor - the MIPS
community will most likely want to architect a solution to this issue.

Make of preempt kernel barfs in kernel/sched.c ifdef finish_arch_switch.
Remove the finish_arch_switch() for boards with TX49xx MIPS processor.

Signed-off-by: Frank Rowand <frank.rowand@am.sony.com>
---
 include/asm-mips/mach-tx49xx/cpu-feature-overrides.h |    7 +++++++
 include/asm-mips/system.h                            |    3 +++
 2 files changed, 10 insertions(+)

Index: linux-2.6.26.3-rt6/include/asm-mips/mach-tx49xx/cpu-feature-overrides.h
===================================================================
--- linux-2.6.26.3-rt6.orig/include/asm-mips/mach-tx49xx/cpu-feature-overrides.h	2008-09-05 00:21:46.000000000 -0400
+++ linux-2.6.26.3-rt6/include/asm-mips/mach-tx49xx/cpu-feature-overrides.h	2008-09-05 00:23:44.000000000 -0400
@@ -1,6 +1,13 @@
 #ifndef __ASM_MACH_TX49XX_CPU_FEATURE_OVERRIDES_H
 #define __ASM_MACH_TX49XX_CPU_FEATURE_OVERRIDES_H
 
+/* finish_arch_switch_empty is defined if we know finish_arch_switch() will
+ * be empty, based on the lack of features defined in this file.  This is
+ * needed because config preempt will barf in kernel/sched.c ifdef
+ * finish_arch_switch
+ */
+#define finish_arch_switch_empty
+
 #define cpu_has_llsc	1
 #define cpu_has_64bits	1
 #define cpu_has_inclusive_pcaches	0
Index: linux-2.6.26.3-rt6/include/asm-mips/system.h
===================================================================
--- linux-2.6.26.3-rt6.orig/include/asm-mips/system.h	2008-09-05 00:21:47.000000000 -0400
+++ linux-2.6.26.3-rt6/include/asm-mips/system.h	2008-09-05 00:23:44.000000000 -0400
@@ -70,6 +70,8 @@ do {									\
 	(last) = resume(prev, next, task_thread_info(next));		\
 } while (0)
 
+/* preempt kernel barfs in kernel/sched.c ifdef finish_arch_switch */
+#ifndef finish_arch_switch_empty
 #define finish_arch_switch(prev)					\
 do {									\
 	if (cpu_has_dsp)						\
@@ -77,6 +79,7 @@ do {									\
 	if (cpu_has_userlocal)						\
 		write_c0_userlocal(current_thread_info()->tp_value);	\
 } while (0)
+#endif
 
 static inline unsigned long __xchg_u32(volatile int * m, unsigned int val)
 {
