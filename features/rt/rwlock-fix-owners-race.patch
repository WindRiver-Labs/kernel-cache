From: Steven Rostedt <srostedt@redhat.com>
Subject: rwlock: fix modification of owners race

Thomas Gleixner has been hitting a bug where everything would freeze.
It was caused by the race between the owner of a reader lock releasing
it and before it updates its owner count. The pending owner tries to
take the lock, but sees the owners count is too high and fails. This causes
the lock to be unowned, with the owner sleeping.

The fix is to only check the owners count if the lock happens to be held.
Do not check it if the lock is pending.

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
---
 kernel/rtmutex.c |   20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

Index: linux-2.6.26.8-rt12/kernel/rtmutex.c
===================================================================
--- linux-2.6.26.8-rt12.orig/kernel/rtmutex.c	2008-12-19 23:31:02.000000000 -0500
+++ linux-2.6.26.8-rt12/kernel/rtmutex.c	2008-12-19 23:31:07.000000000 -0500
@@ -1176,7 +1176,6 @@ static int try_to_take_rw_read(struct rw
 	struct rt_mutex_waiter *waiter;
 	struct reader_lock_struct *rls;
 	struct task_struct *mtxowner;
-	int owners;
 	int reader_count, i;
 	int incr = 1;
 
@@ -1216,13 +1215,6 @@ static int try_to_take_rw_read(struct rw
 		goto taken;
 	}
 
-	owners = atomic_read(&rwm->owners);
-	rt_rwlock_update_owner(rwm, rt_rwlock_owner(rwm));
-
-	/* Check for rwlock limits */
-	if (rt_rwlock_limit && owners >= rt_rwlock_limit)
-		return 0;
-
 	if (mtxowner && mtxowner != RT_RW_READER) {
 		int mode = mtx ? STEAL_NORMAL : STEAL_LATERAL;
 
@@ -1262,6 +1254,18 @@ static int try_to_take_rw_read(struct rw
 		}
 		/* Readers never own the mutex */
 		rt_mutex_set_owner(mutex, RT_RW_READER, 0);
+	} else {
+		int owners;
+		/*
+		 * Only check the owner condition when the lock is
+		 * held for readers.
+		 */
+		owners = atomic_read(&rwm->owners);
+		rt_rwlock_update_owner(rwm, rt_rwlock_owner(rwm));
+
+		/* Check for rwlock limits */
+		if (rt_rwlock_limit && owners >= rt_rwlock_limit)
+			return 0;
 	}
 
 	/* RT_RW_READER forces slow paths */
