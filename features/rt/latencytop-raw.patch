latencytop: use raw lock for account_scheduler_latency

Given the context of where/when we are calling this accounting,
we need this to be a raw lock, else we will get the following:

BUG: sleeping function called from invalid context gdmgreeter(3555)
at kernel/rtmutex.c:743
in_atomic():1 [00000003], irqs_disabled():1                                     
Pid: 3555, comm: gdmgreeter Not tainted 2.6.27.15-26rt15 #2                     
                                                                                
Call Trace:                                                                     
 [<ffffffff8023066b>] __might_sleep+0xfb/0x120                                  
 [<ffffffff805aedc1>] __rt_spin_lock+0x81/0x90                                  
 [<ffffffff805aedf3>] rt_spin_lock+0x23/0x60                                    
 [<ffffffff805ae69c>] account_scheduler_latency+0x8c/0x361                      
 [<ffffffff80253c11>] ? remove_wait_queue+0x21/0x60                             
 [<ffffffff802cb98b>] ? poll_freewait+0x3b/0xc0                                 
 [<ffffffff802cc7dc>] ? do_select+0x5bc/0x610                                   
 [<ffffffff802cc9ff>] ? core_sys_select+0x1cf/0x2e0                             
 [<ffffffff802ccf1b>] ? sys_select+0xeb/0x1c0                                   
 [<ffffffff8020bcec>] ? system_call_fastpath+0x87/0xf4                          
 [<ffffffff8022a1b4>] ? place_entity+0x84/0x100                                 
 [<ffffffff8022def0>] enqueue_task_fair+0x1e0/0x210                             
 [<ffffffff8022a5f0>] enqueue_task+0x50/0x60                                    
 [<ffffffff802349e3>] activate_task+0x53/0xd0                                   
 [<ffffffff80234d3a>] try_to_wake_up+0x23a/0x300                                

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 kernel/latencytop.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/kernel/latencytop.c b/kernel/latencytop.c
index 5e7b45c..b66f3aa 100644
--- a/kernel/latencytop.c
+++ b/kernel/latencytop.c
@@ -21,7 +21,7 @@
 #include <linux/slab.h>
 #include <linux/stacktrace.h>
 
-static DEFINE_SPINLOCK(latency_lock);
+static DEFINE_RAW_SPINLOCK(latency_lock);
 
 #define MAXLR 128
 static struct latency_record latency_record[MAXLR];
