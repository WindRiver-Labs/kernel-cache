From 1e390582f64197b08259c8eac47615175c3e58c4 Mon Sep 17 00:00:00 2001
From: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
Date: Fri, 5 Sep 2008 00:24:05 -0400
Subject: [PATCH] From paulmck@linux.vnet.ibm.com Fri Aug  1 17:39:23 2008
 Date: Fri, 1 Aug 2008 14:11:17 -0700
 To: J?rgen Mell <j.mell@t-online.de>
 Cc: Thomas Gleixner <tglx@linutronix.de>, LKML <linux-kernel@vger.kernel.org>, rt-users <linux-rt-users@vger.kernel.org>, Steven Rostedt <rostedt@goodmis.org>, Ingo Molnar <mingo@elte.hu>, Clark Williams <williams@redhat.com>, Peter Zijlstra <peterz@infradead.org>, Carsten Emde <ce@ceag.ch>
 Subject: Re: 2.6.26-rt1
     [ The following text is in the "iso-8859-1" character set. ]
     [ Your display is set for the "ANSI_X3.4-1968" character set.  ]
     [ Some characters may be displayed incorrectly. ]

On Wed, Jul 30, 2008 at 11:01:32AM +0200, J?rgen Mell wrote:
> Hello Thomas,
>
> On Wednesday, 30. July 2008, Thomas Gleixner wrote:
> > We are pleased to announce the 2.6.26-rt1 tree, which can be
> > downloaded from the location:
>
> I have tried the new kernel and have some good news and some bad news:
>
> The good news: The machine boots and seems to run without major problems.
>
> The bad news: It produces continuously lots of bug messages in the error
> logs (cf. attached dmesg.tgz). The error at rtmutex.c:743 was already
> present in 2.6.25-rt* when ACPI was enabled. The 'using smp_processor_id
> ()  in preemptible code' is new here with 2.6.26.
>
> Machine is an old Athlon XP (single core) on an EPOX mainboard with VIA
> chipset.
>
> If I can help with testing, please let me know.

The following patch should clear things up.  It is against 2.6.25.8-rt7,
but should still apply.

------------------------------------------------------------------------

Disable preemption around statistics for RCU boost and unboost calls.

Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
---
 kernel/rcupreempt-boost.c |   20 ++++++++++++++++----
 1 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/kernel/rcupreempt-boost.c b/kernel/rcupreempt-boost.c
index 5282b19..e7c882e 100644
--- a/kernel/rcupreempt-boost.c
+++ b/kernel/rcupreempt-boost.c
@@ -205,14 +205,26 @@ RCU_BOOST_TRACE_FUNC_DECL(boost_readers)
 RCU_BOOST_TRACE_FUNC_DECL(try_unboost_readers)
 RCU_BOOST_TRACE_FUNC_DECL(unboost_readers)
 RCU_BOOST_TRACE_FUNC_DECL(over_taken)
+static void rcu_trace_boost_boost_called_preempt(void)
+{
+	preempt_disable();
+	rcu_trace_boost_boost_called(RCU_BOOST_ME);
+	preempt_enable();
+}
+static void rcu_trace_boost_unboost_called_preempt(void)
+{
+	preempt_disable();
+	rcu_trace_boost_unboost_called(RCU_BOOST_ME);
+	preempt_enable();
+}
 #else /* CONFIG_RCU_TRACE */
 /* These were created by the above macro "RCU_BOOST_TRACE_FUNC_DECL" */
 # define rcu_trace_boost_task_boost_called(rbd) do { } while (0)
 # define rcu_trace_boost_task_boosted(rbd) do { } while (0)
-# define rcu_trace_boost_boost_called(rbd) do { } while (0)
+# define rcu_trace_boost_boost_called_preempt() do { } while (0)
 # define rcu_trace_boost_try_boost(rbd) do { } while (0)
 # define rcu_trace_boost_boosted(rbd) do { } while (0)
-# define rcu_trace_boost_unboost_called(rbd) do { } while (0)
+# define rcu_trace_boost_unboost_called_preempt() do { } while (0)
 # define rcu_trace_boost_unboosted(rbd) do { } while (0)
 # define rcu_trace_boost_try_boost_readers(rbd) do { } while (0)
 # define rcu_trace_boost_boost_readers(rbd) do { } while (0)
@@ -261,7 +273,7 @@ void __rcu_preempt_boost(void)
 
 	WARN_ON(!current->rcu_read_lock_nesting);
 
-	rcu_trace_boost_boost_called(RCU_BOOST_ME);
+	rcu_trace_boost_boost_called_preempt();
 
 	/* check to see if we are already boosted */
 	if (unlikely(rcu_is_boosted(curr)))
@@ -313,7 +325,7 @@ void __rcu_preempt_unboost(void)
 	int prio;
 	unsigned long flags;
 
-	rcu_trace_boost_unboost_called(RCU_BOOST_ME);
+	rcu_trace_boost_unboost_called_preempt();
 
 	/* if not boosted, then ignore */
 	if (likely(!rcu_is_boosted(curr)))
-- 
1.6.0.90.g436ed

