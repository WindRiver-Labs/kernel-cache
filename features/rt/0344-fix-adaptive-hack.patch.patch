From 474cebc4fe605f48a70869b138b855b6482f4259 Mon Sep 17 00:00:00 2001
From: Thomas Gleixner <tglx@linutronix.de>
Date: Fri, 5 Sep 2008 00:23:58 -0400
Subject: [PATCH] fix-adaptive-hack.patch
 Date: Tue, 17 Jun 2008 18:01:12 +0200
 Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

---
 kernel/rtmutex.c |   34 +++++++++-------------------------
 1 files changed, 9 insertions(+), 25 deletions(-)

diff --git a/kernel/rtmutex.c b/kernel/rtmutex.c
index 23e3c86..502bd9e 100644
--- a/kernel/rtmutex.c
+++ b/kernel/rtmutex.c
@@ -775,41 +775,22 @@ update_current(unsigned long new_state, unsigned long *saved_state)
 static int adaptive_wait(struct rt_mutex_waiter *waiter,
 			 struct task_struct *orig_owner)
 {
-	int sleep = 0;
-
 	for (;;) {
 
 		/* we are the owner? */
 		if (!waiter->task)
-			break;
+			return 0;
 
-		/*
-		 * We need to read the owner of the lock and then check
-		 * its state. But we can't let the owner task be freed
-		 * while we read the state. We grab the rcu_lock and
-		 * this makes sure that the owner task wont disappear
-		 * between testing that it still has the lock, and checking
-		 * its state.
-		 */
-		rcu_read_lock();
 		/* Owner changed? Then lets update the original */
-		if (orig_owner != rt_mutex_owner(waiter->lock)) {
-			rcu_read_unlock();
-			break;
-		}
+		if (orig_owner != rt_mutex_owner(waiter->lock))
+			return 0;
 
 		/* Owner went to bed, so should we */
-		if (!task_is_current(orig_owner)) {
-			sleep = 1;
-			rcu_read_unlock();
-			break;
-		}
-		rcu_read_unlock();
+		if (!task_is_current(orig_owner))
+			return 1;
 
 		cpu_relax();
 	}
-
-	return sleep;
 }
 #else
 static int adaptive_wait(struct rt_mutex_waiter *waiter,
@@ -890,11 +871,13 @@ rt_spin_lock_slowlock(struct rt_mutex *lock)
 		current->lock_depth = -1;
 		current->flags &= ~PF_NOSCHED;
 		orig_owner = rt_mutex_owner(lock);
+		get_task_struct(orig_owner);
 		spin_unlock_irqrestore(&lock->wait_lock, flags);
 
 		debug_rt_mutex_print_deadlock(&waiter);
 
 		if (adaptive_wait(&waiter, orig_owner)) {
+			put_task_struct(orig_owner);
 			update_current(TASK_UNINTERRUPTIBLE, &saved_state);
 			/*
 			 * The xchg() in update_current() is an implicit
@@ -903,7 +886,8 @@ rt_spin_lock_slowlock(struct rt_mutex *lock)
 			 */
 			if (waiter.task)
 				schedule_rt_mutex(lock);
-		}
+		} else
+			put_task_struct(orig_owner);
 
 		spin_lock_irqsave(&lock->wait_lock, flags);
 		current->flags |= saved_flags;
-- 
1.6.0.90.g436ed

