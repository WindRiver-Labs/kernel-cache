From 109f16fa970959e30bd5698513474ef4f0e6ccef Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Tue, 30 Sep 2008 17:03:07 -0400
Subject: [PATCH] add priority support to flush_work()

The priority support for workqueues was added prior to flush_work()
existing (which was added in db70089).  The search for the barrier
insertion location used to look for the previous node, but with
plist/priority, you no longer specify an insertion point for a barrier.
---
 kernel/workqueue.c |   13 ++++++-------
 1 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index b5b7c6a..ba983a7 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -514,8 +514,8 @@ EXPORT_SYMBOL_GPL(flush_workqueue);
 int flush_work(struct work_struct *work)
 {
 	struct cpu_workqueue_struct *cwq;
-	struct list_head *prev;
 	struct wq_barrier barr;
+	int found = 0;
 
 	might_sleep();
 	cwq = get_wq_data(work);
@@ -525,9 +525,8 @@ int flush_work(struct work_struct *work)
 	lock_map_acquire(&cwq->wq->lockdep_map);
 	lock_map_release(&cwq->wq->lockdep_map);
 
-	prev = NULL;
 	spin_lock_irq(&cwq->lock);
-	if (!list_empty(&work->entry)) {
+	if (!plist_node_empty(&work->entry)) {
 		/*
 		 * See the comment near try_to_grab_pending()->smp_rmb().
 		 * If it was re-queued under us we are not going to wait.
@@ -535,16 +534,16 @@ int flush_work(struct work_struct *work)
 		smp_rmb();
 		if (unlikely(cwq != get_wq_data(work)))
 			goto out;
-		prev = &work->entry;
+		found = 1;
 	} else {
 		if (cwq->current_work != work)
 			goto out;
-		prev = &cwq->worklist;
+		found = 1;
 	}
-	insert_wq_barrier(cwq, &barr, prev->next);
+	insert_wq_barrier(cwq, &barr);
 out:
 	spin_unlock_irq(&cwq->lock);
-	if (!prev)
+	if (!found)
 		return 0;
 
 	wait_for_completion(&barr.done);
-- 
1.6.0.90.g436ed

