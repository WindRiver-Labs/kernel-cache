From d3bc263486a0bb4e402ad4b0ee7c3c2e9360ae0c Mon Sep 17 00:00:00 2001
From: Sebastian Siewior <bigeasy@linutronix.de>
Date: Fri, 5 Sep 2008 00:22:31 -0400
Subject: [PATCH] From 616acbc45cdc24f145edd2960f6f6a0a5c2579b6 Mon Sep 17 00:00:00 2001
 Date: Wed, 9 Jul 2008 13:36:37 +0200
 Subject: [PATCH] m68knommu: generic stacktrace function
 This provides the generic stack trace interface which is based
 on x86 and required by ftrace.
 A proper sollution will come once I unify this and the current
 m68knommu stack trace algo.

Signed-off-by: Sebastian Siewior <bigeasy@linutronix.de>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
---
 arch/m68knommu/kernel/Makefile     |    5 ++-
 arch/m68knommu/kernel/stacktrace.c |   69 ++++++++++++++++++++++++++++++++++++
 2 files changed, 72 insertions(+), 2 deletions(-)
 create mode 100644 arch/m68knommu/kernel/stacktrace.c

diff --git a/arch/m68knommu/kernel/Makefile b/arch/m68knommu/kernel/Makefile
index f0eab3d..8dc0fd5 100644
--- a/arch/m68knommu/kernel/Makefile
+++ b/arch/m68knommu/kernel/Makefile
@@ -7,5 +7,6 @@ extra-y := vmlinux.lds
 obj-y += dma.o entry.o init_task.o irq.o m68k_ksyms.o process.o ptrace.o \
 	 setup.o signal.o syscalltable.o sys_m68k.o time.o traps.o
 
-obj-$(CONFIG_MODULES)	+= module.o
-obj-$(CONFIG_COMEMPCI)	+= comempci.o
+obj-$(CONFIG_MODULES)		+= module.o
+obj-$(CONFIG_COMEMPCI)		+= comempci.o
+obj-$(CONFIG_STACKTRACE)	+= stacktrace.o
diff --git a/arch/m68knommu/kernel/stacktrace.c b/arch/m68knommu/kernel/stacktrace.c
new file mode 100644
index 0000000..9897b7a
--- /dev/null
+++ b/arch/m68knommu/kernel/stacktrace.c
@@ -0,0 +1,69 @@
+/*
+ * Quick & dirty stacktrace implementation.
+ */
+#include <linux/sched.h>
+#include <linux/stacktrace.h>
+
+typedef void (save_stack_addr_t)(void *data, unsigned long addr, int reliable);
+
+static void save_stack_address(void *data, unsigned long addr, int reliable)
+{
+	struct stack_trace *trace = data;
+	if (!reliable)
+		return;
+	if (trace->skip > 0) {
+		trace->skip--;
+		return;
+	}
+	if (trace->nr_entries < trace->max_entries)
+		trace->entries[trace->nr_entries++] = addr;
+}
+
+static void print_context_stack(unsigned long *stack,
+		save_stack_addr_t *sstack_func, struct stack_trace *trace)
+{
+	unsigned long *last_stack;
+	unsigned long *endstack;
+	unsigned long addr;
+
+	addr = (unsigned long) stack;
+	endstack = (unsigned long *) PAGE_ALIGN(addr);
+
+	last_stack = stack - 1;
+	while (stack <= endstack && stack > last_stack) {
+
+		addr = *(stack + 1);
+		sstack_func(trace, addr, 1);
+
+		last_stack = stack;
+		stack = (unsigned long *)*stack;
+	}
+}
+
+static noinline long *get_current_stack(void)
+{
+	unsigned long *stack;
+
+	stack = (unsigned long *)&stack;
+	stack++;
+	return stack;
+}
+
+static void save_current_stack(save_stack_addr_t *sstack_func,
+		struct stack_trace *trace)
+{
+	unsigned long *stack;
+
+	stack = get_current_stack();
+	print_context_stack(stack, save_stack_address, trace);
+}
+
+/*
+ * Save stack-backtrace addresses into a stack_trace buffer.
+ */
+void save_stack_trace(struct stack_trace *trace)
+{
+	save_current_stack(save_stack_address, trace);
+	if (trace->nr_entries < trace->max_entries)
+		trace->entries[trace->nr_entries++] = ULONG_MAX;
+}
-- 
1.6.0.90.g436ed

