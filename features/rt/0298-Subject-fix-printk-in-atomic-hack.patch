From b831485ab4835b343f551bd1c61ef364a0bbce17 Mon Sep 17 00:00:00 2001
From: Steven Rostedt <srostedt@redhat.com>
Date: Fri, 5 Sep 2008 00:23:45 -0400
Subject: [PATCH] Subject: fix printk in atomic hack
 The printk in atomic hack had a slight bug. This but was triggered
 by debug locking options. The hack prevents grabbing sleeping spin
 locks in printk console drivers if we are in atomic (can't sleep).
 But the unlock had a bug where it incorrectely assumed that if
 we are in printk and atomic, that we didn't grab the lock. The debug
 locking can encapsulate these options and cause unlocks to be in atomic
 when the lock was not. This means we would not release the lock after
 it was taken.

The patch only skips releasing the lock if in printk - atomic *and*
not the lock owner.

Special thanks goes to Jon Masters for digging his head deep into
this crap and narrowing it down to a problem with printks and locks.

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
---
 kernel/rtmutex.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/kernel/rtmutex.c b/kernel/rtmutex.c
index 8938919..3f7afde 100644
--- a/kernel/rtmutex.c
+++ b/kernel/rtmutex.c
@@ -635,7 +635,7 @@ rt_spin_lock_fastlock(struct rt_mutex *lock,
 		void  (*slowfn)(struct rt_mutex *lock))
 {
 	/* Temporary HACK! */
-	if (!current->in_printk)
+	if (likely(!current->in_printk))
 		might_sleep();
 	else if (in_atomic() || irqs_disabled())
 		/* don't grab locks for printk in atomic */
@@ -652,7 +652,7 @@ rt_spin_lock_fastunlock(struct rt_mutex *lock,
 			void  (*slowfn)(struct rt_mutex *lock))
 {
 	/* Temporary HACK! */
-	if (current->in_printk && (in_atomic() || irqs_disabled()))
+	if (unlikely(rt_mutex_owner(lock) != current) && current->in_printk)
 		/* don't grab locks for printk in atomic */
 		return;
 
-- 
1.6.0.90.g436ed

