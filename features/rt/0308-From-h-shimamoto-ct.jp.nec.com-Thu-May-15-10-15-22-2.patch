From b21662de4e31a1595bbcd99fe04ece9ab1f2bfa4 Mon Sep 17 00:00:00 2001
From: Hiroshi Shimamoto <h-shimamoto@ct.jp.nec.com>
Date: Tue, 30 Sep 2008 17:01:33 -0400
Subject: [PATCH] From h-shimamoto@ct.jp.nec.com Thu May 15 10:15:22 2008
 Date: Mon, 28 Apr 2008 11:19:21 -0700
 To: Ingo Molnar <mingo@elte.hu>, Steven Rostedt <rostedt@goodmis.org>,
      Thomas Gleixner <tglx@linutronix.de>
 Cc: linux-kernel@vger.kernel.org, linux-rt-users@vger.kernel.org
 Subject: [PATCH -rt 4/4] wait for finish show_regs() before panic
 It might cause kdump failure that the kernel doesn't wait for finish
 show_regs(). The nmi_show_regs variable for show_regs() flag is cleared
 before show_regs() is really called. This flag should be cleared after
 show_regs().
 kdump stops all CPUs other than crashing CPU by NMI handler, but if
 show_regs() takes a bit time, kdump cannot wait and will continue process.
 It means that the 2nd kernel and the old kernel run simultaneously and it
 might cause unexpected behavior, such as randomly reboot.

Signed-off-by: Hiroshi Shimamoto <h-shimamoto@ct.jp.nec.com>
Signed-off-by: Maxim Uvarov <muvarov@ru.mvista.com>
---
 arch/x86/kernel/nmi.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/arch/x86/kernel/nmi.c b/arch/x86/kernel/nmi.c
index 721fe20..69a7dfd 100644
--- a/arch/x86/kernel/nmi.c
+++ b/arch/x86/kernel/nmi.c
@@ -414,13 +414,13 @@ notrace int irq_show_regs_callback(int cpu, struct pt_regs *regs)
 	if (!nmi_show_regs[cpu])
 		return 0;
 
-	nmi_show_regs[cpu] = 0;
 	spin_lock(&nmi_print_lock);
 	printk(KERN_WARNING "NMI show regs on CPU#%d:\n", cpu);
 	printk(KERN_WARNING "apic_timer_irqs: %d\n",
 		per_cpu(irq_stat, cpu).apic_timer_irqs);
 	show_regs(regs);
 	spin_unlock(&nmi_print_lock);
+	nmi_show_regs[cpu] = 0;
 	return 1;
 }
 
-- 
1.6.0.90.g436ed

