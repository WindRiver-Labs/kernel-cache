From 99b7b823b6b84d8c29493c8e898feaaa27cef6fd Mon Sep 17 00:00:00 2001
From: Mark Asselstine <mark.asselstine@windriver.com>
Date: Wed, 11 Oct 2017 20:26:26 -0400
Subject: [PATCH] sched: match on TASK_INTERRUPTIBLE too

The commit [sched: Prevent task state corruption by spurious lock
wakeup] assumed additional changes (specifically in futex_pi) were
present. These were not in the scope of the backport to fix the task
state corruption, however. As such the assumption that all 'sleepers'
would be TASK_UNITERRUPTIBLE was incorrect. It is possible that
'sleepers' are in fact TASK_INTERRUPTIBLE given the current state of
the kernel. We therefor use TASK_NORMAL which will match on both
TASK_UNITERRUPTIBLE and TASK_INTERRUPTIBLE in try_to_wake_up(). Since
we are not reverting to use TASK_ALL we are still excluding
TASK_TRACED and as such the intent of the 'state corruption' patch
remains true and there should be no regression around state
corruption.

Without this change tasks can permamently 'sleep' causing issues like
VMs failing to boot with kvm tasks unable to wake.

Signed-off-by: Mark Asselstine <mark.asselstine@windriver.com>
---
 kernel/sched/core.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index a217001..02436f8 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -2275,7 +2275,7 @@ EXPORT_SYMBOL(wake_up_process);
  */
 int wake_up_lock_sleeper(struct task_struct *p)
 {
-	return try_to_wake_up(p, TASK_UNINTERRUPTIBLE, WF_LOCK_SLEEPER);
+	return try_to_wake_up(p, TASK_NORMAL, WF_LOCK_SLEEPER);
 }
 
 int wake_up_state(struct task_struct *p, unsigned int state)
-- 
1.7.5.4

