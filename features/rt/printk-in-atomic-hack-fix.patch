From: Steven Rostedt <srostedt@redhat.com>
Subject: fix printk in atomic hack

The printk in atomic hack had a slight bug. This but was triggered
by debug locking options. The hack prevents grabbing sleeping spin
locks in printk console drivers if we are in atomic (can't sleep).
But the unlock had a bug where it incorrectely assumed that if
we are in printk and atomic, that we didn't grab the lock. The debug
locking can encapsulate these options and cause unlocks to be in atomic
when the lock was not. This means we would not release the lock after
it was taken.

The patch only skips releasing the lock if in printk - atomic *and*
not the lock owner.

Special thanks goes to Jon Masters for digging his head deep into
this crap and narrowing it down to a problem with printks and locks.

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
---
 kernel/rtmutex.c |    4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

Index: linux-2.6.26.3-rt6/kernel/rtmutex.c
===================================================================
--- linux-2.6.26.3-rt6.orig/kernel/rtmutex.c	2008-09-05 00:23:40.000000000 -0400
+++ linux-2.6.26.3-rt6/kernel/rtmutex.c	2008-09-05 00:23:45.000000000 -0400
@@ -635,7 +635,7 @@ rt_spin_lock_fastlock(struct rt_mutex *l
 		void  (*slowfn)(struct rt_mutex *lock))
 {
 	/* Temporary HACK! */
-	if (!current->in_printk)
+	if (likely(!current->in_printk))
 		might_sleep();
 	else if (in_atomic() || irqs_disabled())
 		/* don't grab locks for printk in atomic */
@@ -652,7 +652,7 @@ rt_spin_lock_fastunlock(struct rt_mutex 
 			void  (*slowfn)(struct rt_mutex *lock))
 {
 	/* Temporary HACK! */
-	if (current->in_printk && (in_atomic() || irqs_disabled()))
+	if (unlikely(rt_mutex_owner(lock) != current) && current->in_printk)
 		/* don't grab locks for printk in atomic */
 		return;
 
