From 77ddc254b1f6c8cec01d208c8f86dd80278aeed1 Mon Sep 17 00:00:00 2001
From: Daniel Walker <dwalker@mvista.com>
Date: Fri, 5 Sep 2008 00:23:36 -0400
Subject: [PATCH] From dwalker@mvista.com Tue Oct 23 16:15:26 2007
 Date: Mon, 22 Oct 2007 11:53:03 -0700
 To: Steven Rostedt <rostedt@goodmis.org>
 Cc: Remy Bohmer <linux@bohmer.net>, Ingo Molnar <mingo@elte.hu>,
      LKML <linux-kernel@vger.kernel.org>, RT <linux-rt-users@vger.kernel.org>,
      Thomas Gleixner <tglx@linutronix.de>
 Subject: Re: [RT] seqlocks: use of PICK_FUNCTION breaks kernel compile when
     CONFIG_GENERIC_TIME is NOT set
 On Wed, 2007-10-17 at 11:34 -0400, Steven Rostedt wrote:

>
> Hmm, what about a __seq_irqsave_raw and __seq_nop?
>
> That way it spells out that irqs are NOT touched if it is not a raw lock.

I took out the nop , and just did a save flags which makes sense.. There
is still more cleanup to do in that regard.

Signed-off-by: Daniel Walker <dwalker@mvista.com>
---
 include/linux/seqlock.h |   26 +++++++++++++++-----------
 1 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/include/linux/seqlock.h b/include/linux/seqlock.h
index e663480..e6ecb46 100644
--- a/include/linux/seqlock.h
+++ b/include/linux/seqlock.h
@@ -92,8 +92,11 @@ static inline void __write_seqlock(seqlock_t *sl)
 
 static __always_inline unsigned long __write_seqlock_irqsave(seqlock_t *sl)
 {
+	unsigned long flags;
+
+	local_save_flags(flags);
 	__write_seqlock(sl);
-	return 0;
+	return flags;
 }
 
 static inline void __write_sequnlock(seqlock_t *sl)
@@ -286,26 +289,27 @@ do {								\
 	PICK_SEQ_OP(__write_sequnlock_irq_raw, __write_sequnlock, lock)
 
 static __always_inline
-unsigned long __read_seqbegin_irqsave_raw(raw_seqlock_t *sl)
+unsigned long __seq_irqsave_raw(raw_seqlock_t *sl)
 {
 	unsigned long flags;
 
 	local_irq_save(flags);
-	__read_seqbegin_raw(sl);
 	return flags;
 }
 
-static __always_inline unsigned long __read_seqbegin_irqsave(seqlock_t *sl)
+static __always_inline unsigned long __seq_irqsave(seqlock_t *sl)
 {
-	__read_seqbegin(sl);
-	return 0;
+	unsigned long flags;
+
+	local_save_flags(flags);
+	return flags;
 }
 
-#define read_seqbegin_irqsave(lock, flags)			\
-do {								\
-	flags = PICK_SEQ_OP_RET(__read_seqbegin_irqsave_raw,	\
-		__read_seqbegin_irqsave, lock);			\
-} while (0)
+#define read_seqbegin_irqsave(lock, flags)				\
+({									\
+	flags = PICK_SEQ_OP_RET(__seq_irqsave_raw, __seq_irqsave, lock);\
+	read_seqbegin(lock);						\
+})
 
 static __always_inline int
 __read_seqretry_irqrestore(seqlock_t *sl, unsigned iv, unsigned long flags)
-- 
1.6.0.90.g436ed

