From 63756577e2655f15d4ed7dc77901fd1b3c6e4ef1 Mon Sep 17 00:00:00 2001
From: Thomas Gleixner <tglx@linutronix.de>
Date: Fri, 5 Sep 2008 00:23:59 -0400
Subject: [PATCH] rt-mutex-namespace.patch
 Date: Fri, 20 Jun 2008 12:22:52 +0200
 Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

---
 kernel/rtmutex.c        |   21 ++++++++++++---------
 kernel/rtmutex_common.h |   18 ++++++++++--------
 2 files changed, 22 insertions(+), 17 deletions(-)

diff --git a/kernel/rtmutex.c b/kernel/rtmutex.c
index 125a25f..9ce2ee3 100644
--- a/kernel/rtmutex.c
+++ b/kernel/rtmutex.c
@@ -1292,7 +1292,7 @@ try_to_take_rw_write(struct rw_mutex *rwm, int mtx)
 	}
 
 	/*
-	 * RT_RW_PENDING means that the lock is free, but there are
+	 * RT_RWLOCK_PENDING means that the lock is free, but there are
 	 * pending owners on the mutex
 	 */
 	WARN_ON(own && !rt_mutex_owner_pending(mutex));
@@ -1628,7 +1628,8 @@ static inline void
 rt_write_fastlock(struct rw_mutex *rwm,
 		  void (*slowfn)(struct rw_mutex *rwm, int mtx), int mtx)
 {
-	struct task_struct *val = (void *)((unsigned long)current | RT_RWLOCK_WRITER);
+	struct task_struct *val = (void *)((unsigned long)current |
+					   RT_RWLOCK_WRITER);
 
 	if (likely(rt_rwlock_cmpxchg(rwm, NULL, val)))
 		rt_mutex_deadlock_account_lock(&rwm->mutex, current);
@@ -1668,7 +1669,8 @@ static inline int
 rt_write_fasttrylock(struct rw_mutex *rwm,
 		     int (*slowfn)(struct rw_mutex *rwm, int mtx), int mtx)
 {
-	struct task_struct *val = (void *)((unsigned long)current | RT_RWLOCK_WRITER);
+	struct task_struct *val = (void *)((unsigned long)current |
+					   RT_RWLOCK_WRITER);
 
 	if (likely(rt_rwlock_cmpxchg(rwm, NULL, val))) {
 		rt_mutex_deadlock_account_lock(&rwm->mutex, current);
@@ -1761,7 +1763,7 @@ rt_read_slowunlock(struct rw_mutex *rwm, int mtx)
 		/* We could still have a pending reader waiting */
 		if (rt_mutex_owner_pending(mutex)) {
 			/* set the rwm back to pending */
-			rwm->owner = RT_RW_PENDING_READ;
+			rwm->owner = RT_RWLOCK_PENDING_READ;
 		} else {
 			rwm->owner = NULL;
 			mutex->owner = NULL;
@@ -1782,7 +1784,7 @@ rt_read_slowunlock(struct rw_mutex *rwm, int mtx)
 		/* only wake up if there are no readers */
 		if (reader_count)
 			goto out;
-		rwm->owner = RT_RW_PENDING_WRITE;
+		rwm->owner = RT_RWLOCK_PENDING_WRITE;
 	} else {
 		/*
 		 * It is also possible that the reader limit decreased.
@@ -1793,7 +1795,7 @@ rt_read_slowunlock(struct rw_mutex *rwm, int mtx)
 		    unlikely(atomic_read(&rwm->owners) >= rt_rwlock_limit))
 			goto out;
 		if (!reader_count)
-			rwm->owner = RT_RW_PENDING_READ;
+			rwm->owner = RT_RWLOCK_PENDING_READ;
 	}
 
 	pendowner = waiter->task;
@@ -1917,11 +1919,11 @@ rt_write_slowunlock(struct rw_mutex *rwm, int mtx)
 
 	/* another writer is next? */
 	if (waiter->write_lock) {
-		rwm->owner = RT_RW_PENDING_WRITE;
+		rwm->owner = RT_RWLOCK_PENDING_WRITE;
 		goto out;
 	}
 
-	rwm->owner = RT_RW_PENDING_READ;
+	rwm->owner = RT_RWLOCK_PENDING_READ;
 
 	if (!rt_mutex_has_waiters(mutex))
 		goto out;
@@ -1995,7 +1997,8 @@ static inline void
 rt_write_fastunlock(struct rw_mutex *rwm,
 		   void (*slowfn)(struct rw_mutex *rwm, int mtx), int mtx)
 {
-	struct task_struct *val = (void *)((unsigned long)current | RT_RWLOCK_WRITER);
+	struct task_struct *val = (void *)((unsigned long)current |
+					   RT_RWLOCK_WRITER);
 
 	WARN_ON(rt_rwlock_owner(rwm) != current);
 	if (likely(rt_rwlock_cmpxchg(rwm, (struct task_struct *)val, NULL)))
diff --git a/kernel/rtmutex_common.h b/kernel/rtmutex_common.h
index 2119f55..70df5f5 100644
--- a/kernel/rtmutex_common.h
+++ b/kernel/rtmutex_common.h
@@ -123,29 +123,31 @@ static inline unsigned long rt_mutex_owner_pending(struct rt_mutex *lock)
 #define RT_RWLOCK_WRITER	2UL
 #define RT_RWLOCK_MASKALL	3UL
 
-/* used as reader owner of the mutex */
-#define RT_RW_READER		(struct task_struct *)0x100
-
 /* used when a writer releases the lock with waiters */
 /*   pending owner is a reader */
-#define RT_RW_PENDING_READ	(struct task_struct *)0x200
+#define RT_RWLOCK_PENDING_READ	((struct task_struct *)0x200)
 /*   pending owner is a writer */
-#define RT_RW_PENDING_WRITE	(struct task_struct *)0x400
+#define RT_RWLOCK_PENDING_WRITE	((struct task_struct *)0x400)
 /* Either of the above is true */
-#define RT_RW_PENDING_MASK	(0x600 | RT_RWLOCK_MASKALL)
+#define RT_RWLOCK_PENDING_MASK	\
+	((unsigned long) RT_RWLOCK_PENDING_READ | \
+	 (unsigned long) RT_RWLOCK_PENDING_WRITE | RT_RWLOCK_MASKALL)
+
+/* used as reader owner of the rt_mutex inside of the rw_mutex */
+#define RT_RW_READER		(struct task_struct *)0x100
 
 /* Return true if lock is not owned but has pending owners */
 static inline int rt_rwlock_pending(struct rw_mutex *rwm)
 {
 	unsigned long owner = (unsigned long)rwm->owner;
-	return (owner & RT_RW_PENDING_MASK) == owner;
+	return (owner & RT_RWLOCK_PENDING_MASK) == owner;
 }
 
 static inline int rt_rwlock_pending_writer(struct rw_mutex *rwm)
 {
 	unsigned long owner = (unsigned long)rwm->owner;
 	return rt_rwlock_pending(rwm) &&
-		(owner & (unsigned long)RT_RW_PENDING_WRITE);
+		(owner & (unsigned long)RT_RWLOCK_PENDING_WRITE);
 }
 
 static inline struct task_struct *rt_rwlock_owner(struct rw_mutex *rwm)
-- 
1.6.0.90.g436ed

