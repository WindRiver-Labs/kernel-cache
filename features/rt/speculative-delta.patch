From: Paul Gortmaker <paul.gortmaker@windriver.com>
Subject: speculative get page: merge deltas vs e286781d
    
At a glance it would appear that the content of the 26-RT patch
2.6.21-rc6-lockless6-speculative-get-page.patch is present in 27rc1
as commit e286781d.  However it is not quite 100% the same.  The
obvious difference is the use of count vs NoNewRefs for locking,
but this delta here is also missing; since it is specific to RT.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

---
 include/linux/pagemap.h |   28 ++++++++++++++++++++++++++++
 1 files changed, 28 insertions(+), 0 deletions(-)

diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h
index 74b6c05..2ffb3b5 100644
--- a/include/linux/pagemap.h
+++ b/include/linux/pagemap.h
@@ -231,6 +231,34 @@ static inline int page_cache_get_speculative(struct page *page)
 		 */
 		return 0;
 	}
+
+	/*
+	 * Note that get_page_unless_zero provides a memory barrier.
+	 * This is needed to ensure PageNoNewRefs is evaluated after the
+	 * page refcount has been raised. See below comment.
+	 */
+
+	wait_on_page_ref(page);
+
+	/*
+	 * smp_rmb is to ensure the load of page->flags (for PageNoNewRefs())
+	 * is performed before a future load used to ensure the page is
+	 * the correct on (usually: page->mapping and page->index).
+	 *
+	 * Those places that set PageNoNewRefs have the following pattern:
+	 * 	SetPageNoNewRefs(page)
+	 * 	wmb();
+	 * 	if (page_count(page) == X)
+	 * 		remove page from pagecache
+	 * 	wmb();
+	 * 	ClearPageNoNewRefs(page)
+	 *
+	 * If the load was out of order, page->mapping might be loaded before
+	 * the page is removed from pagecache but PageNoNewRefs evaluated
+	 * after the ClearPageNoNewRefs().
+	 */
+	smp_rmb();
+
 #endif
 	VM_BUG_ON(PageTail(page));
 
