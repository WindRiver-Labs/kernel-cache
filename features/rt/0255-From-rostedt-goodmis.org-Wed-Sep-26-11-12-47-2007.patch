From ca4f6c70ee8406e5db02026ed3bd7c78b4566b5a Mon Sep 17 00:00:00 2001
From: Steven Rostedt <rostedt@goodmis.org>
Date: Fri, 5 Sep 2008 00:23:35 -0400
Subject: [PATCH] From rostedt@goodmis.org Wed Sep 26 11:12:47 2007
 Date: Tue, 25 Sep 2007 11:29:51 -0400 (EDT)
 To: Peter Zijlstra <peterz@infradead.org>
 Cc: LKML <linux-kernel@vger.kernel.org>,
      linux-rt-users <linux-rt-users@vger.kernel.org>, mingo@goodmis.org,
      Thomas Gleixner <tglx@linutronix.de>
 Subject: [PATCH RT] Don't let -rt rw_semaphors do _non_owner locks

--
On Tue, 25 Sep 2007, Peter Zijlstra wrote:

> How about teaching {up,down}_read_non_owner() to barf on rw_semaphore
> in -rt?
>

Sure thing!

This patch prevents rw_semaphore in PREEMPT_RT from performing
down_read_non_owner and up_read_non_owner. If this must be used, then
either convert to a completion or use compat_rw_semaphore.

Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
---
 include/linux/rt_lock.h |   15 +++++----------
 kernel/rt.c             |   45 ---------------------------------------------
 2 files changed, 5 insertions(+), 55 deletions(-)

diff --git a/include/linux/rt_lock.h b/include/linux/rt_lock.h
index 8786429..74a0d27 100644
--- a/include/linux/rt_lock.h
+++ b/include/linux/rt_lock.h
@@ -204,25 +204,20 @@ do {							\
 	__rt_rwsem_init((sem), #sem, &__key);		\
 } while (0)
 
+extern void __dont_do_this_in_rt(struct rw_semaphore *rwsem);
+
+#define rt_down_read_non_owner(rwsem)	__dont_do_this_in_rt(rwsem)
+#define rt_up_read_non_owner(rwsem)	__dont_do_this_in_rt(rwsem)
+
 extern void  rt_down_write(struct rw_semaphore *rwsem);
 extern void
 rt_down_read_nested(struct rw_semaphore *rwsem, int subclass);
 extern void
 rt_down_write_nested(struct rw_semaphore *rwsem, int subclass);
 extern void  rt_down_read(struct rw_semaphore *rwsem);
-#ifdef CONFIG_DEBUG_LOCK_ALLOC
-extern void  rt_down_read_non_owner(struct rw_semaphore *rwsem);
-#else
-# define rt_down_read_non_owner(rwsem)		rt_down_read(rwsem)
-#endif
 extern int  rt_down_write_trylock(struct rw_semaphore *rwsem);
 extern int  rt_down_read_trylock(struct rw_semaphore *rwsem);
 extern void  rt_up_read(struct rw_semaphore *rwsem);
-#ifdef CONFIG_DEBUG_LOCK_ALLOC
-extern void  rt_up_read_non_owner(struct rw_semaphore *rwsem);
-#else
-# define rt_up_read_non_owner(rwsem)	rt_up_read(rwsem)
-#endif
 extern void  rt_up_write(struct rw_semaphore *rwsem);
 extern void  rt_downgrade_write(struct rw_semaphore *rwsem);
 
diff --git a/kernel/rt.c b/kernel/rt.c
index 62a3133..5721ce5 100644
--- a/kernel/rt.c
+++ b/kernel/rt.c
@@ -349,25 +349,6 @@ void  rt_up_read(struct rw_semaphore *rwsem)
 }
 EXPORT_SYMBOL(rt_up_read);
 
-#ifdef CONFIG_DEBUG_LOCK_ALLOC
-void  rt_up_read_non_owner(struct rw_semaphore *rwsem)
-{
-	unsigned long flags;
-	/*
-	 * Read locks within the self-held write lock succeed.
-	 */
-	spin_lock_irqsave(&rwsem->lock.wait_lock, flags);
-	if (rt_mutex_real_owner(&rwsem->lock) == current && rwsem->read_depth) {
-		spin_unlock_irqrestore(&rwsem->lock.wait_lock, flags);
-		rwsem->read_depth--;
-		return;
-	}
-	spin_unlock_irqrestore(&rwsem->lock.wait_lock, flags);
-	rt_mutex_unlock(&rwsem->lock);
-}
-EXPORT_SYMBOL(rt_up_read_non_owner);
-#endif
-
 /*
  * downgrade a write lock into a read lock
  * - just wake up any readers at the front of the queue
@@ -458,32 +439,6 @@ void  rt_down_read_nested(struct rw_semaphore *rwsem, int subclass)
 }
 EXPORT_SYMBOL(rt_down_read_nested);
 
-
-#ifdef CONFIG_DEBUG_LOCK_ALLOC
-
-/*
- * Same as rt_down_read() but no lockdep calls:
- */
-void  rt_down_read_non_owner(struct rw_semaphore *rwsem)
-{
-	unsigned long flags;
-	/*
-	 * Read locks within the write lock succeed.
-	 */
-	spin_lock_irqsave(&rwsem->lock.wait_lock, flags);
-
-	if (rt_mutex_real_owner(&rwsem->lock) == current) {
-		spin_unlock_irqrestore(&rwsem->lock.wait_lock, flags);
-		rwsem->read_depth++;
-		return;
-	}
-	spin_unlock_irqrestore(&rwsem->lock.wait_lock, flags);
-	rt_mutex_lock(&rwsem->lock);
-}
-EXPORT_SYMBOL(rt_down_read_non_owner);
-
-#endif
-
 void  __rt_rwsem_init(struct rw_semaphore *rwsem, char *name,
 			      struct lock_class_key *key)
 {
-- 
1.6.0.90.g436ed

