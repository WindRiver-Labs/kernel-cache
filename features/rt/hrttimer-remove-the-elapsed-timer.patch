From 9a6696a80730a8283b084339d804ee0c353d6228 Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Fri, 8 Mar 2013 14:56:27 +0800
Subject: [PATCH] hrttimer: remove the elapsed timer

As -rt commit 43732c3 "hrtimer: Don't call the timer handler from hrtimer_start"

In case we failed to reprogram the timer (mostly because out current timer
is already elapsed), remove it again and report a failure. This avoids stale
base->first entries.

Looks we missed something to do this logic completely when merge -rt, so re-pick
the remains from that -rt commit to work.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 kernel/hrtimer.c |   15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/kernel/hrtimer.c b/kernel/hrtimer.c
index b0d236b..2de5355 100644
--- a/kernel/hrtimer.c
+++ b/kernel/hrtimer.c
@@ -1041,8 +1041,18 @@ int __hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
 			 * case it expired already. Otherwise we would have a
 			 * stale base->first entry until the softirq runs.
 			 */
-			if (!hrtimer_rt_defer(timer))
-				return -ETIME;
+			if (!hrtimer_rt_defer(timer)) {
+				/*
+				 * In case we failed to reprogram the timer (mostly
+				 * because out current timer is already elapsed),
+				 * remove it again and report a failure. This avoids
+				 * stale base->first entries.
+				 */
+				debug_deactivate(timer);
+				__remove_hrtimer(timer, new_base,
+					timer->state & HRTIMER_STATE_CALLBACK, 0);
+				goto etime;
+			}
 #endif
 			/*
 			 * We need to drop cpu_base->lock to avoid a
@@ -1057,6 +1067,7 @@ int __hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
 		}
 	}
 
+etime:
 	unlock_hrtimer_base(timer, &flags);
 
 	return ret;
-- 
1.7.9.7

