From 3c69441ffff98d43b841e9b53863d24dcdcbd184 Mon Sep 17 00:00:00 2001
From: Thomas Gleixner <tglx@linutronix.de>
Date: Sat, 31 Oct 2015 10:40:18 +0100
Subject: [PATCH] softirq: Sanitize local_bh_[en|dis]able for RT

There is no point in doing that check for disabling/enabling
preemption in __local_bh_disable_ip/__local_bh_enable_ip on RT because
PREEMPT_CHECK_OFFSET is 0 on RT so the check is always false.

The raw_spin_lock variant is never used on RT because nothing ever uses
raw_spin_*_bh() on RT.

Simplify the rest of the interfaces as well.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/include/linux/bottom_half.h b/include/linux/bottom_half.h
index 8ca9389352f2..d3c0c02acc97 100644
--- a/include/linux/bottom_half.h
+++ b/include/linux/bottom_half.h
@@ -6,12 +6,34 @@
 
 #ifdef CONFIG_PREEMPT_RT_FULL
 
-extern void local_bh_disable(void);
+extern void __local_bh_disable(void);
 extern void _local_bh_enable(void);
-extern void local_bh_enable(void);
-extern void local_bh_enable_ip(unsigned long ip);
-extern void __local_bh_disable_ip(unsigned long ip, unsigned int cnt);
-extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);
+extern void __local_bh_enable(void);
+
+static inline void local_bh_disable(void)
+{
+	__local_bh_disable();
+}
+
+static inline void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
+{
+	__local_bh_disable();
+}
+
+static inline void local_bh_enable(void)
+{
+	__local_bh_enable();
+}
+
+static inline void __local_bh_enable_ip(unsigned long ip, unsigned int cnt)
+{
+	__local_bh_enable();
+}
+
+static inline void local_bh_enable_ip(unsigned long ip)
+{
+	__local_bh_enable();
+}
 
 #else
 
diff --git a/kernel/softirq.c b/kernel/softirq.c
index 49baf81848d6..0fd93311536f 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -554,26 +554,14 @@ static void do_current_softirqs(void)
 	}
 }
 
-static void __local_bh_disable(void)
+void __local_bh_disable(void)
 {
 	if (++current->softirq_nestcnt == 1)
 		migrate_disable();
 }
+EXPORT_SYMBOL(__local_bh_disable);
 
-void local_bh_disable(void)
-{
-	__local_bh_disable();
-}
-EXPORT_SYMBOL(local_bh_disable);
-
-void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
-{
-	__local_bh_disable();
-	if (cnt & PREEMPT_CHECK_OFFSET)
-		preempt_disable();
-}
-
-static void __local_bh_enable(void)
+void __local_bh_enable(void)
 {
 	if (WARN_ON(current->softirq_nestcnt == 0))
 		return;
@@ -586,25 +574,7 @@ static void __local_bh_enable(void)
 	if (--current->softirq_nestcnt == 0)
 		migrate_enable();
 }
-
-void local_bh_enable(void)
-{
-	__local_bh_enable();
-}
-EXPORT_SYMBOL(local_bh_enable);
-
-extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt)
-{
-	__local_bh_enable();
-	if (cnt & PREEMPT_CHECK_OFFSET)
-		preempt_enable();
-}
-
-void local_bh_enable_ip(unsigned long ip)
-{
-	local_bh_enable();
-}
-EXPORT_SYMBOL(local_bh_enable_ip);
+EXPORT_SYMBOL(__local_bh_enable);
 
 void _local_bh_enable(void)
 {
-- 
2.5.0

