lockdep-rt: annotate PREEMPT_RT DEFINE_MUTEX


Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
---
 include/linux/mutex.h   |   16 ++++++----
 include/linux/rt_lock.h |   70 ++++++++++++++++++++----------------------------
 2 files changed, 39 insertions(+), 47 deletions(-)

Index: linux-2.6.26.3-rt6/include/linux/mutex.h
===================================================================
--- linux-2.6.26.3-rt6.orig/include/linux/mutex.h	2008-09-05 00:22:50.000000000 -0400
+++ linux-2.6.26.3-rt6/include/linux/mutex.h	2008-09-05 00:23:30.000000000 -0400
@@ -18,6 +18,13 @@
 
 #include <asm/atomic.h>
 
+#ifdef CONFIG_DEBUG_LOCK_ALLOC
+# define __DEP_MAP_MUTEX_INITIALIZER(lockname) \
+		, .dep_map = { .name = #lockname }
+#else
+# define __DEP_MAP_MUTEX_INITIALIZER(lockname)
+#endif
+
 #ifdef CONFIG_PREEMPT_RT
 
 #include <linux/rtmutex.h>
@@ -29,9 +36,11 @@ struct mutex {
 #endif
 };
 
+
 #define __MUTEX_INITIALIZER(mutexname)					\
 	{								\
 		.lock = __RT_MUTEX_INITIALIZER(mutexname.lock)		\
+		__DEP_MAP_MUTEX_INITIALIZER(mutexname)			\
 	}
 
 #define DEFINE_MUTEX(mutexname)						\
@@ -148,13 +157,6 @@ do {							\
 # define mutex_destroy(mutex)				do { } while (0)
 #endif
 
-#ifdef CONFIG_DEBUG_LOCK_ALLOC
-# define __DEP_MAP_MUTEX_INITIALIZER(lockname) \
-		, .dep_map = { .name = #lockname }
-#else
-# define __DEP_MAP_MUTEX_INITIALIZER(lockname)
-#endif
-
 #define __MUTEX_INITIALIZER(lockname) \
 		{ .count = ATOMIC_INIT(1) \
 		, .wait_lock = __SPIN_LOCK_UNLOCKED(lockname.wait_lock) \
Index: linux-2.6.26.3-rt6/include/linux/rt_lock.h
===================================================================
--- linux-2.6.26.3-rt6.orig/include/linux/rt_lock.h	2008-09-05 00:22:50.000000000 -0400
+++ linux-2.6.26.3-rt6/include/linux/rt_lock.h	2008-09-05 00:23:30.000000000 -0400
@@ -27,30 +27,31 @@ typedef struct {
 } spinlock_t;
 
 #ifdef CONFIG_DEBUG_RT_MUTEXES
-# define __SPIN_LOCK_UNLOCKED(name) \
-	(spinlock_t) { { .wait_lock = _RAW_SPIN_LOCK_UNLOCKED(name) \
-	, .save_state = 1, .file = __FILE__, .line = __LINE__ }, SPIN_DEP_MAP_INIT(name) }
+# define __RT_SPIN_INITIALIZER(name)					\
+	{ .wait_lock = _RAW_SPIN_LOCK_UNLOCKED(name.wait_lock),		\
+	  .save_state = 1,						\
+	  .file = __FILE__,						\
+	  .line = __LINE__, }
 #else
-# define __SPIN_LOCK_UNLOCKED(name) \
-	(spinlock_t) { { .wait_lock = _RAW_SPIN_LOCK_UNLOCKED(name) }, SPIN_DEP_MAP_INIT(name) }
+# define __RT_SPIN_INITIALIZER(name)					\
+	{ .wait_lock = _RAW_SPIN_LOCK_UNLOCKED(name.wait_lock) }
 #endif
-# define SPIN_LOCK_UNLOCKED	__SPIN_LOCK_UNLOCKED(spin_old_style)
+
+#define __SPIN_LOCK_UNLOCKED(name) (spinlock_t)				\
+	{ .lock = __RT_SPIN_INITIALIZER(name),				\
+	  SPIN_DEP_MAP_INIT(name) }
+
 #else /* !PREEMPT_RT */
-  typedef raw_spinlock_t spinlock_t;
-# ifdef CONFIG_DEBUG_SPINLOCK
-#  define _SPIN_LOCK_UNLOCKED						\
-			{	.raw_lock = __RAW_SPIN_LOCK_UNLOCKED,	\
-				.magic = SPINLOCK_MAGIC,		\
-				.owner = SPINLOCK_OWNER_INIT,		\
-				.owner_cpu = -1 }
-# else
-#  define _SPIN_LOCK_UNLOCKED \
-			{	.raw_lock = __RAW_SPIN_LOCK_UNLOCKED }
-# endif
-# define SPIN_LOCK_UNLOCKED		_SPIN_LOCK_UNLOCKED
-# define __SPIN_LOCK_UNLOCKED(name)	_SPIN_LOCK_UNLOCKED
+
+typedef raw_spinlock_t spinlock_t;
+
+#define __SPIN_LOCK_UNLOCKED	_RAW_SPIN_LOCK_UNLOCKED
+
 #endif
 
+#define SPIN_LOCK_UNLOCKED	__SPIN_LOCK_UNLOCKED(spin_old_style)
+
+
 #define __DEFINE_SPINLOCK(name) \
 	spinlock_t name = __SPIN_LOCK_UNLOCKED(name)
 
@@ -89,32 +90,20 @@ typedef struct {
 #endif
 } rwlock_t;
 
-# ifdef CONFIG_DEBUG_RT_MUTEXES
-#  define __RW_LOCK_UNLOCKED(name) (rwlock_t) \
-	{ .lock = { .wait_lock = _RAW_SPIN_LOCK_UNLOCKED(name), \
-	 .save_state = 1, .file = __FILE__, .line = __LINE__ } }
-# else
-#  define __RW_LOCK_UNLOCKED(name) (rwlock_t) \
-	{ .lock = { .wait_lock = _RAW_SPIN_LOCK_UNLOCKED(name) } }
-# endif
+#define __RW_LOCK_UNLOCKED(name) (rwlock_t) \
+	{ .lock = __RT_SPIN_INITIALIZER(name),	\
+	  RW_DEP_MAP_INIT(name) }
 #else /* !PREEMPT_RT */
 
-  typedef raw_rwlock_t rwlock_t;
-# ifdef CONFIG_DEBUG_SPINLOCK
-# define _RW_LOCK_UNLOCKED						\
-	(rwlock_t)	{	.raw_lock = __RAW_RW_LOCK_UNLOCKED,	\
-				.magic = RWLOCK_MAGIC,			\
-				.owner = SPINLOCK_OWNER_INIT,		\
-				.owner_cpu = -1 }
-# else
-#  define _RW_LOCK_UNLOCKED						\
-	(rwlock_t)	{	.raw_lock = __RAW_RW_LOCK_UNLOCKED }
-# endif
-# define __RW_LOCK_UNLOCKED(name)	_RW_LOCK_UNLOCKED
+typedef raw_rwlock_t rwlock_t;
+
+#define __RW_LOCK_UNLOCKED	_RAW_RW_LOCK_UNLOCKED
+
 #endif
 
 #define RW_LOCK_UNLOCKED	__RW_LOCK_UNLOCKED(rw_old_style)
 
+
 #define DEFINE_RWLOCK(name) \
 	rwlock_t name __cacheline_aligned_in_smp = __RW_LOCK_UNLOCKED(name)
 
@@ -199,7 +188,8 @@ extern int __bad_func_type(void);
  */
 
 #define __RWSEM_INITIALIZER(name) \
-	{ .lock = __RT_MUTEX_INITIALIZER(name.lock) }
+	{ .lock = __RT_MUTEX_INITIALIZER(name.lock), \
+	  RW_DEP_MAP_INIT(name) }
 
 #define DECLARE_RWSEM(lockname) \
 	struct rw_semaphore lockname = __RWSEM_INITIALIZER(lockname)
