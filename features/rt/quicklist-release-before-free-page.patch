From peterz@infradead.org Mon Jul 23 21:40:44 2007
Return-Path: <mingo@elte.hu>
X-Spam-Checker-Version: SpamAssassin 3.1.7-deb (2006-10-05) on debian
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=none autolearn=ham 
	version=3.1.7-deb
Received: from mx2.mail.elte.hu (mx2.mail.elte.hu [157.181.151.9]) (using
	TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits)) (No client certificate
	requested) by mail.tglx.de (Postfix) with ESMTP id CAC4B65C003 for
	<tglx@linutronix.de>; Mon, 23 Jul 2007 21:40:44 +0200 (CEST)
Received: from elvis.elte.hu ([157.181.1.14]) by mx2.mail.elte.hu with
	esmtp (Exim) id 1ID3lr-0000tI-MW from <mingo@elte.hu> for
	<tglx@linutronix.de>; Mon, 23 Jul 2007 21:40:43 +0200
Received: by elvis.elte.hu (Postfix, from userid 1004) id 1D9593E2153; Mon,
	23 Jul 2007 21:40:43 +0200 (CEST)
Resent-From: Ingo Molnar <mingo@elte.hu>
Resent-Date: Mon, 23 Jul 2007 21:40:40 +0200
Resent-Message-ID: <20070723194040.GA7831@elte.hu>
Resent-To: Thomas Gleixner <tglx@linutronix.de>
X-Original-To: mingo@elvis.elte.hu
Delivered-To: mingo@elvis.elte.hu
Received: from mx3.mail.elte.hu (mx3.mail.elte.hu [157.181.1.138]) by
	elvis.elte.hu (Postfix) with ESMTP id 03EA13E214E for
	<mingo@elvis.elte.hu>; Mon, 23 Jul 2007 18:33:06 +0200 (CEST)
Received: from pentafluge.infradead.org ([213.146.154.40]) by
	mx3.mail.elte.hu with esmtp (Exim) id 1ID0qK-0003mK-9A from
	<peterz@infradead.org> for <mingo@elte.hu>; Mon, 23 Jul 2007 18:33:08 +0200
Received: from i55087.upc-i.chello.nl ([62.195.55.87] helo=[192.168.0.111])
	by pentafluge.infradead.org with esmtpsa (Exim 4.63 #1 (Red Hat Linux)) id
	1ID0qB-0003Kf-Tf; Mon, 23 Jul 2007 17:33:00 +0100
Subject: Re: [PATCH] release quicklist before free_page
From: Peter Zijlstra <peterz@infradead.org>
To: Daniel Walker <dwalker@mvista.com>
Cc: mingo@elte.hu, paulmck@linux.vnet.ibm.com, linux-kernel@vger.kernel.org,  linux-rt-users@vger.kernel.org
In-Reply-To: <20070723152129.036573829@mvista.com>
References: <20070723152129.036573829@mvista.com>
Content-Type: text/plain
Date: Mon, 23 Jul 2007 18:32:58 +0200
Message-Id: <1185208378.8197.20.camel@twins>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.1 
X-ELTE-VirusStatus: clean
X-ELTE-SpamScore: -1.0
X-ELTE-SpamLevel: 
X-ELTE-SpamCheck: no
X-ELTE-SpamVersion: ELTE 2.0 
X-ELTE-SpamCheck-Details: score=-1.0 required=5.9 tests=BAYES_00
	autolearn=no SpamAssassin version=3.0.3 -1.0 BAYES_00               BODY:
	Bayesian spam probability is 0 to 1% [score: 0.0000]
Received-SPF: softfail (mx2: transitioning domain of elte.hu does not
	designate 157.181.1.14 as permitted sender) client-ip=157.181.1.14;
	envelope-from=mingo@elte.hu; helo=elvis.elte.hu;
X-ELTE-VirusStatus: clean
X-Evolution-Source: imap://tglx%40linutronix.de@localhost:8993/
Content-Transfer-Encoding: 8bit

On Mon, 2007-07-23 at 08:21 -0700, Daniel Walker wrote:
> Resolves,
> 
> BUG: sleeping function called from invalid context cc1(29651) at kernel/rtmutex.c:636
> in_atomic():1 [00000001], irqs_disabled():0
>  [<c0119f50>] __might_sleep+0xf3/0xf9
>  [<c031600e>] __rt_spin_lock+0x21/0x3c
>  [<c014102c>] get_zone_pcp+0x20/0x29
>  [<c0141a40>] free_hot_cold_page+0xdc/0x167
>  [<c013a3f4>] add_preempt_count+0x12/0xcc
>  [<c0110d92>] pgd_dtor+0x0/0x1
>  [<c015d865>] quicklist_trim+0xb7/0xe3
>  [<c0111025>] check_pgt_cache+0x19/0x1c
>  [<c0148df5>] free_pgtables+0x54/0x12c
>  [<c013a3f4>] add_preempt_count+0x12/0xcc
>  [<c014e5be>] unmap_region+0xeb/0x13b
> 
> 
> It looks like the quicklist isn't used after a few variables are evaluated.
> So no need to keep preemption disabled over the whole function.

Not quite, it uses preempt_disable() to avoid migration and stick to a
cpu. Without that it might end up freeing pages from another quicklist.

How about this - compile tested only
---
 include/linux/quicklist.h |   19 +++++++++++++++----
 mm/quicklist.c            |    9 +++++----
 2 files changed, 20 insertions(+), 8 deletions(-)

diff --git a/include/linux/quicklist.h b/include/linux/quicklist.h
index bd46643..2b5707a 100644
--- a/include/linux/quicklist.h
+++ b/include/linux/quicklist.h
@@ -18,7 +18,7 @@ struct quicklist {
 	int nr_pages;
 };
 
-DECLARE_PER_CPU(struct quicklist, quicklist)[CONFIG_NR_QUICK];
+DECLARE_PER_CPU_LOCKED(struct quicklist, quicklist)[CONFIG_NR_QUICK];
 
 /*
  * The two key functions quicklist_alloc and quicklist_free are inline so
@@ -30,19 +30,30 @@ DECLARE_PER_CPU(struct quicklist, quicklist)[CONFIG_NR_QUICK];
  * The fast patch in quicklist_alloc touched only a per cpu cacheline and
  * the first cacheline of the page itself. There is minmal overhead involved.
  */
-static inline void *quicklist_alloc(int nr, gfp_t flags, void (*ctor)(void *))
+static inline void *__quicklist_alloc(int cpu, int nr, gfp_t flags, void (*ctor)(void *))
 {
 	struct quicklist *q;
 	void **p = NULL;
 
-	q =&get_cpu_var(quicklist)[nr];
+	q = &__get_cpu_var_locked(quicklist, cpu)[nr];
 	p = q->page;
 	if (likely(p)) {
 		q->page = p[0];
 		p[0] = NULL;
 		q->nr_pages--;
 	}
-	put_cpu_var(quicklist);
+	return p;
+}
+
+static inline void *quicklist_alloc(int nr, gfp_t flags, void (*ctor)(void *))
+{
+	struct quicklist *q;
+	void **p = NULL;
+	int cpu;
+
+	(void)get_cpu_var_locked(quicklist, &cpu)[nr];
+	p = __quicklist_alloc(cpu, nr, flags, ctor);
+	put_cpu_var_locked(quicklist, cpu);
 	if (likely(p))
 		return p;
 
diff --git a/mm/quicklist.c b/mm/quicklist.c
index 8dbb680..b275f6e 100644
--- a/mm/quicklist.c
+++ b/mm/quicklist.c
@@ -19,7 +19,7 @@
 #include <linux/module.h>
 #include <linux/quicklist.h>
 
-DEFINE_PER_CPU(struct quicklist, quicklist)[CONFIG_NR_QUICK];
+DEFINE_PER_CPU_LOCKED(struct quicklist, quicklist)[CONFIG_NR_QUICK];
 
 #define FRACTION_OF_NODE_MEM	16
 
@@ -66,8 +66,9 @@ void quicklist_trim(int nr, void (*dtor)(void *),
 {
 	long pages_to_free;
 	struct quicklist *q;
+	int cpu;
 
-	q = &get_cpu_var(quicklist)[nr];
+	q = &get_cpu_var_locked(quicklist, &cpu)[nr];
 	if (q->nr_pages > min_pages) {
 		pages_to_free = min_pages_to_free(q, min_pages, max_free);
 
@@ -76,7 +77,7 @@ void quicklist_trim(int nr, void (*dtor)(void *),
 			 * We pass a gfp_t of 0 to quicklist_alloc here
 			 * because we will never call into the page allocator.
 			 */
-			void *p = quicklist_alloc(nr, 0, NULL);
+			void *p = __quicklist_alloc(cpu, nr, 0, NULL);
 
 			if (dtor)
 				dtor(p);
@@ -84,7 +85,7 @@ void quicklist_trim(int nr, void (*dtor)(void *),
 			pages_to_free--;
 		}
 	}
-	put_cpu_var(quicklist);
+	put_cpu_var_locked(quicklist, cpu);
 }
 
 unsigned long quicklist_total_size(void)
