From c45e8017ff477c9f3d144b399fe14787f80529f7 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 17 Sep 2014 20:17:59 -0400
Subject: [PATCH] rtmutex: fix up for conflict between stable and rt patches

The 3.4.99 stable release brought in several CVE rtmutex patches.

These in turn conflicted with RT content somewhat significantly.

In the fast forward version of 3.10-rt, the fixup can be seen in
the merge commit:

  commit 5199a25812dba986ead61f29e36d33132cf6ed46
  Merge: a5863c9 d02dae4
  Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
  Date:   Tue Aug 26 18:25:09 2014 -0400

      Merge tag 'v3.10.49' into v3.10-rt

      This is the 3.10.49 stable release

      Conflicts:
          kernel/rtmutex.c

We duplicated that merge here in v3.4-rt, in the fast forward
linux-stable-rt branch.

More specifically we are interested in the manual additions that
are represented by "++" in this chunk:

@@@ -180,6 -194,11 +232,13 @@@ static void rt_mutex_wake_waiter(struc
   */
  int max_lock_depth = 1024;

+ static inline struct rt_mutex *task_blocked_on_lock(struct task_struct *p)
+ {
 -      return p->pi_blocked_on ? p->pi_blocked_on->lock : NULL;
++      struct rt_mutex_waiter *waiter = p->pi_blocked_on;
++
++      return rt_mutex_real_waiter(waiter) ? waiter->lock : NULL;
+ }
+

Here we update the code to match the implicit manual fixup done in
the above merge commit.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/kernel/rtmutex.c b/kernel/rtmutex.c
index a6356c8024a0..9b27df0ce2b5 100644
--- a/kernel/rtmutex.c
+++ b/kernel/rtmutex.c
@@ -201,7 +201,9 @@ int max_lock_depth = 1024;
 
 static inline struct rt_mutex *task_blocked_on_lock(struct task_struct *p)
 {
-	return p->pi_blocked_on ? p->pi_blocked_on->lock : NULL;
+	struct rt_mutex_waiter *waiter = p->pi_blocked_on;
+
+	return rt_mutex_real_waiter(waiter) ? waiter->lock : NULL;
 }
 
 /*
-- 
2.0.1

