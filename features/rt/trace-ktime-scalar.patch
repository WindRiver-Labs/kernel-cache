Subject: ftrace: print ktime values in readable form
From: Thomas Gleixner <tglx@linutronix.de>
Date: Sat, 26 Jul 2008 23:01:37 +0200

Printing the tv64 member of the ktime_t expiry/timestamp is unreadable
on 32bit machines which don't have KTIME_SCALAR set.

Convert the ktime_t value to a timespec instead and print sec.nsec
value, which makes the time values much easier to read also on those
machines which use the 64bit scalar nsec storage.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
---
 kernel/trace/trace.c |   40 ++++++++++++++++++++++++----------------
 1 files changed, 24 insertions(+), 16 deletions(-)

diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index ee025d4..96e2b86 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -1524,6 +1524,13 @@ extern unsigned long ia32_sys_call_table[], ia32_syscall_end[];
 # define IA32_NR_syscalls (ia32_syscall_end - ia32_sys_call_table)
 #endif
 
+static void trace_print_ktime(struct trace_seq *s, ktime_t t)
+{
+	struct timespec ts = ktime_to_timespec(t);
+
+	trace_seq_printf(s, " (%ld.%09ld)", ts.tv_sec, ts.tv_nsec);
+}
+
 static void print_lat_help_header(struct seq_file *m)
 {
 	seq_puts(m, "#                _------=> CPU#            \n");
@@ -1765,23 +1772,23 @@ print_lat_fmt(struct trace_iterator *iter, unsigned int trace_idx, int cpu)
 		break;
 	case TRACE_TIMER_SET:
 		seq_print_ip_sym(s, entry->timer.ip, sym_flags);
-		trace_seq_printf(s, " (%Ld) (%p)\n",
-			   entry->timer.expire, entry->timer.timer);
+		trace_print_ktime(s, entry->timer.expire);
+		trace_seq_printf(s, " (%p)\n", entry->timer.timer);
 		break;
 	case TRACE_TIMER_TRIG:
 		seq_print_ip_sym(s, entry->timer.ip, sym_flags);
-		trace_seq_printf(s, " (%Ld) (%p)\n",
-			   entry->timer.expire, entry->timer.timer);
+		trace_print_ktime(s, entry->timer.expire);
+		trace_seq_printf(s, " (%p)\n", entry->timer.timer);
 		break;
 	case TRACE_TIMESTAMP:
 		seq_print_ip_sym(s, entry->timestamp.ip, sym_flags);
-		trace_seq_printf(s, " (%Ld)\n",
-			   entry->timestamp.now.tv64);
+		trace_print_ktime(s, entry->timestamp.now);
+		trace_seq_puts(s, "\n");
 		break;
 	case TRACE_PROGRAM_EVENT:
 		seq_print_ip_sym(s, entry->program.ip, sym_flags);
-		trace_seq_printf(s, " (%Ld) (%Ld)\n",
-			   entry->program.expire, entry->program.delta);
+		trace_print_ktime(s, entry->program.expire);
+		trace_seq_printf(s, " (%Ld)\n", entry->program.delta);
 		break;
 	case TRACE_TASK_ACT:
 		seq_print_ip_sym(s, entry->task.ip, sym_flags);
@@ -1859,6 +1866,7 @@ static int print_trace_fmt(struct trace_iterator *iter)
 	ret = trace_seq_printf(s, "[%02d] ", iter->cpu);
 	if (!ret)
 		return 0;
+
 	ret = trace_seq_printf(s, "%5lu.%06lu: ", secs, usec_rem);
 	if (!ret)
 		return 0;
@@ -1948,23 +1956,23 @@ static int print_trace_fmt(struct trace_iterator *iter)
 		break;
 	case TRACE_TIMER_SET:
 		seq_print_ip_sym(s, entry->timer.ip, sym_flags);
-		trace_seq_printf(s, " (%Ld) (%p)\n",
-			   entry->timer.expire, entry->timer.timer);
+		trace_print_ktime(s, entry->timer.expire);
+		trace_seq_printf(s, " (%p)\n", entry->timer.timer);
 		break;
 	case TRACE_TIMER_TRIG:
 		seq_print_ip_sym(s, entry->timer.ip, sym_flags);
-		trace_seq_printf(s, " (%Ld) (%p)\n",
-			   entry->timer.expire, entry->timer.timer);
+		trace_print_ktime(s, entry->timer.expire);
+		trace_seq_printf(s, " (%p)\n", entry->timer.timer);
 		break;
 	case TRACE_TIMESTAMP:
 		seq_print_ip_sym(s, entry->timestamp.ip, sym_flags);
-		trace_seq_printf(s, " (%Ld)\n",
-			   entry->timestamp.now.tv64);
+		trace_print_ktime(s, entry->timestamp.now);
+		trace_seq_puts(s, "\n");
 		break;
 	case TRACE_PROGRAM_EVENT:
 		seq_print_ip_sym(s, entry->program.ip, sym_flags);
-		trace_seq_printf(s, " (%Ld) (%Ld)\n",
-			   entry->program.expire, entry->program.delta);
+		trace_print_ktime(s, entry->program.expire);
+		trace_seq_printf(s, " (%Ld)\n", entry->program.delta);
 		break;
 	case TRACE_TASK_ACT:
 		seq_print_ip_sym(s, entry->task.ip, sym_flags);
