From 603ae5e126b4bc714cefa87883112bb71442d724 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Tue, 27 Aug 2013 19:29:17 +0800
Subject: [PATCH] net/qsp: don't use dev_kfree_skb() in process_tx()

The function process_tx() may be invoked in both interrupt context or
non-interrupt context. And it tries to use the dev_kfree_skb() to
free the skb for non-interrupt context. But this is not correct
because the caller of process_tx will explicitly disable the irq
in non-interrupt context. So in this case we also need to use
dev_kfree_skb_irq() to free the skb. Otherwise we would get the
following call trace.

WARNING: at kernel/softirq.c:182
Modules linked in:
NIP: c0044284 LR: c0580b84 CTR: c067388c
REGS: dffe5c40 TRAP: 0700   Not tainted  (3.4.43-WR5.0.1.0_standard+)
MSR: 00021032 <ME,IR,DR,RI>  CR: 22002048  XER: 20000000
TASK = c094a650[0] 'swapper/0' THREAD: c0992000 CPU: 0
GPR00: c0580b84 dffe5cf0 c094a650 c0580b84 00000200 00000800 df16a600
00000000
GPR08: 00000000 c098eddc 00000001 000000fe 22002042 00000000 000000e4
c0998040
GPR16: 00000000 ded10800 00000000 c0986700 c099fd8c 00000000 c0990c04
c099fd5c
GPR24: c099fd60 c0703c74 df16a600 00000000 00000001 00000008 c0580b84
dffe4000
NIP [c0044284] local_bh_enable_ip+0xb8/0x120
LR [c0580b84] sock_wfree+0xa8/0xb0
Call Trace:
[dffe5cf0] [c0697bf0] _raw_read_unlock_bh+0x3c/0x54 (unreliable)
[dffe5d00] [c0580b84] sock_wfree+0xa8/0xb0
[dffe5d10] [c058261c] skb_release_head_state+0x98/0xfc
[dffe5d20] [c0582a68] __kfree_skb+0x24/0xf4
[dffe5d30] [c04947c8] process_tx+0x154/0x158
[dffe5d50] [c0494894] qsp_net_start_xmit+0xc8/0x170
[dffe5d70] [c05951f4] dev_hard_start_xmit+0x3c4/0x6d8
[dffe5dc0] [c05b1c10] sch_direct_xmit+0xd4/0x1f8
[dffe5de0] [c05956b0] dev_queue_xmit+0x1a8/0x674
[dffe5e10] [c05a0e54] neigh_update+0x280/0x440
[dffe5e50] [c05f76cc] arp_process+0x268/0x610
[dffe5eb0] [c05908bc] __netif_receive_skb+0x770/0x778
[dffe5f20] [c05939e0] process_backlog+0xd4/0x1c4
[dffe5f50] [c059473c] net_rx_action+0x124/0x304
[dffe5fa0] [c0044858] __do_softirq+0x100/0x264
[dffe5ff0] [c0011230] call_do_softirq+0x14/0x24
[c0993e60] [c00071cc] do_softirq+0xf0/0x11c
[c0993e80] [c0044d24] irq_exit+0xcc/0xec
[c0993ea0] [c0006f94] do_IRQ+0x100/0x190
[c0993ed0] [c0017514] ret_from_except+0x0/0x14

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/qsp/qsp_main.c | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/qsp/qsp_main.c b/drivers/net/ethernet/qsp/qsp_main.c
index 0d5aa28..1458125 100644
--- a/drivers/net/ethernet/qsp/qsp_main.c
+++ b/drivers/net/ethernet/qsp/qsp_main.c
@@ -223,10 +223,7 @@ static void process_tx(struct net_device *ndev, int in_interrupt)
 		loops++;
 		skb = lp->tx_skb[ti];
 		WARN_ON(skb == NULL);
-		if (in_interrupt)
-			dev_kfree_skb_irq(skb);
-		else
-			dev_kfree_skb(skb);
+		dev_kfree_skb_irq(skb);
 		lp->tx_skb[ti] = 0;
 		ndev->stats.tx_packets++;
 		ndev->stats.tx_bytes += BD_GET_LEN(lp->tx_bd_v[ti]);
-- 
1.8.3.1

