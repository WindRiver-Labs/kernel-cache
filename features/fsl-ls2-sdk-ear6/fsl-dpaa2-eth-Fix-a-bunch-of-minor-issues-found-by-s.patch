From d4aeda2a03534f5fa50fe5f2cdc83a9d59cc97c9 Mon Sep 17 00:00:00 2001
From: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Date: Mon, 21 Sep 2015 11:18:54 +0300
Subject: [PATCH 398/452] fsl-dpaa2: eth: Fix a bunch of minor issues found by
 static analysis tools

As found by Klocworks and Checkpatch:
 - Unused variables
 - Integer type replacements
 - Unchecked memory allocations
 - Whitespace, alignment and newlining

Signed-off-by: Cristian Sovaiala <cristi.sovaiala@nxp.com>
Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@nxp.com>
[Xulin: Original patch taken from FSL LS2085 SDK EAR6.0,
LS2085A-SDK-SOURCE-20160304-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c     |   22 ++++++++--------
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h     |    1 +
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c |   26 +++++++++++--------
 3 files changed, 27 insertions(+), 22 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index fffc3a0..1e3c95a 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -467,7 +467,7 @@ static int dpaa2_eth_build_sg_fd(struct dpaa2_eth_priv *priv,
 		dpaa2_sg_set_addr(&sgt[i], sg_dma_address(crt_scl));
 		dpaa2_sg_set_len(&sgt[i], sg_dma_len(crt_scl));
 	}
-	dpaa2_sg_set_final(&sgt[i-1], true);
+	dpaa2_sg_set_final(&sgt[i - 1], true);
 
 	/* Store the skb backpointer in the SGT buffer.
 	 * Fit the scatterlist and the number of buffers alongside the
@@ -563,14 +563,14 @@ static int dpaa2_eth_build_single_fd(struct dpaa2_eth_priv *priv,
  * to be checked if we're on the confirmation path.
  */
 static void dpaa2_eth_free_fd(const struct dpaa2_eth_priv *priv,
-			       const struct dpaa2_fd *fd,
-			       uint32_t *status)
+			      const struct dpaa2_fd *fd,
+			      uint32_t *status)
 {
 	struct device *dev = priv->net_dev->dev.parent;
 	dma_addr_t fd_addr;
 	struct sk_buff **skbh, *skb;
 	unsigned char *buffer_start;
-	int nr_frags, unmap_size;
+	int unmap_size;
 	struct scatterlist *scl;
 	int num_sg, num_dma_bufs;
 	struct dpaa2_eth_swa *bps;
@@ -602,7 +602,6 @@ static void dpaa2_eth_free_fd(const struct dpaa2_eth_priv *priv,
 		kfree(scl);
 
 		/* Unmap the SGT buffer */
-		nr_frags = skb_shinfo(skb)->nr_frags;
 		unmap_size = priv->tx_data_offset +
 		       sizeof(struct dpaa2_sg_entry) * (1 + num_dma_bufs);
 		dma_unmap_single(dev, fd_addr, unmap_size, DMA_TO_DEVICE);
@@ -649,7 +648,7 @@ static int dpaa2_eth_tx(struct sk_buff *skb, struct net_device *net_dev)
 	/* TxConf FQ selection primarily based on cpu affinity; this is
 	 * non-migratable context, so it's safe to call smp_processor_id().
 	 */
-	int queue_mapping = smp_processor_id() % priv->dpni_attrs.max_senders;
+	u16 queue_mapping = smp_processor_id() % priv->dpni_attrs.max_senders;
 
 	percpu_stats = this_cpu_ptr(priv->percpu_stats);
 	percpu_extras = this_cpu_ptr(priv->percpu_extras);
@@ -686,8 +685,10 @@ static int dpaa2_eth_tx(struct sk_buff *skb, struct net_device *net_dev)
 		err = dpaa2_eth_build_sg_fd(priv, skb, &fd);
 		percpu_extras->tx_sg_frames++;
 		percpu_extras->tx_sg_bytes += skb->len;
-	} else
+	} else {
 		err = dpaa2_eth_build_single_fd(priv, skb, &fd);
+	}
+
 	if (unlikely(err)) {
 		percpu_stats->tx_dropped++;
 		goto err_build_fd;
@@ -1453,7 +1454,7 @@ dpaa2_alloc_channel(struct dpaa2_eth_priv *priv, int cpu)
 	struct device *dev = priv->net_dev->dev.parent;
 	int err;
 
-	channel = kzalloc(sizeof(struct dpaa2_eth_channel), GFP_ATOMIC);
+	channel = kzalloc(sizeof(*channel), GFP_ATOMIC);
 	if (!channel) {
 		dev_err(dev, "Memory allocation failed\n");
 		return NULL;
@@ -1839,7 +1840,6 @@ err_open:
 	return err;
 }
 
-
 static void __dpaa2_dpbp_free(struct dpaa2_eth_priv *priv)
 {
 	int cpu, *count;
@@ -1973,8 +1973,8 @@ static int dpaa2_dpni_setup(struct fsl_mc_device *ls_dev)
 	priv->tx_data_offset += DPAA2_ETH_SWA_SIZE;
 
 	/* allocate classification rule space */
-	priv->cls_rule = kzalloc(sizeof(struct dpaa2_cls_rule)
-				 * DPAA2_CLASSIFIER_ENTRY_COUNT, GFP_KERNEL);
+	priv->cls_rule = kzalloc(sizeof(*priv->cls_rule) *
+				 DPAA2_CLASSIFIER_ENTRY_COUNT, GFP_KERNEL);
 	if (!priv->cls_rule)
 		goto err_cls_rule;
 
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index 6c3c809..e0d466b 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -199,6 +199,7 @@ struct dpaa2_eth_stats {
 	/* Enqueues retried due to portal busy */
 	__u64	tx_portal_busy;
 };
+
 /* Per-FQ statistics */
 struct dpaa2_eth_fq_stats {
 	/* Number of frames received on this queue */
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
index 2de87b6..bca95e8 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
@@ -49,7 +49,9 @@ char dpaa2_ethtool_stats[][ETH_GSTRING_LEN] = {
 	"tx bytes",
 	"tx err frames",
 };
+
 #define DPAA2_ETH_NUM_STATS	ARRAY_SIZE(dpaa2_ethtool_stats)
+
 /* To be kept in sync with 'struct dpaa2_eth_stats' */
 char dpaa2_ethtool_extras[][ETH_GSTRING_LEN] = {
 	/* per-cpu stats */
@@ -78,6 +80,7 @@ char dpaa2_ethtool_extras[][ETH_GSTRING_LEN] = {
 	"buffer count"
 #endif
 };
+
 #define DPAA2_ETH_NUM_EXTRA_STATS	ARRAY_SIZE(dpaa2_ethtool_extras)
 
 static void dpaa2_get_drvinfo(struct net_device *net_dev,
@@ -353,9 +356,9 @@ static int dpaa2_cls_key_off(struct net_device *net_dev, u64 flag)
 	return -1;
 }
 
-static int dpaa2_cls_key_size(struct net_device *net_dev)
+static u8 dpaa2_cls_key_size(struct net_device *net_dev)
 {
-	int i, size = 0;
+	u8 i, size = 0;
 
 	for (i = 0; i < ARRAY_SIZE(dpaa2_hash_fields); i++) {
 		if (!dpaa2_cls_is_enabled(net_dev,
@@ -367,9 +370,9 @@ static int dpaa2_cls_key_size(struct net_device *net_dev)
 	return size;
 }
 
-static int dpaa2_cls_max_key_size(struct net_device *net_dev)
+static u8 dpaa2_cls_max_key_size(struct net_device *net_dev)
 {
-	int i, size = 0;
+	u8 i, size = 0;
 
 	for (i = 0; i < ARRAY_SIZE(dpaa2_hash_fields); i++)
 		size += dpaa2_hash_fields[i].size;
@@ -379,7 +382,7 @@ static int dpaa2_cls_max_key_size(struct net_device *net_dev)
 
 void dpaa2_cls_check(struct net_device *net_dev)
 {
-	int key_size = dpaa2_cls_max_key_size(net_dev);
+	u8 key_size = dpaa2_cls_max_key_size(net_dev);
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
 
 	if (priv->dpni_attrs.options & DPNI_OPT_DIST_FS &&
@@ -440,6 +443,8 @@ int dpaa2_set_hash(struct net_device *net_dev, u64 flags)
 	}
 
 	dma_mem = kzalloc(DPAA2_CLASSIFIER_DMA_SIZE, GFP_DMA | GFP_KERNEL);
+	if (!dma_mem)
+		return -ENOMEM;
 
 	err = dpni_prepare_key_cfg(&cls_cfg, dma_mem);
 	if (err) {
@@ -455,6 +460,7 @@ int dpaa2_set_hash(struct net_device *net_dev, u64 flags)
 					       DMA_TO_DEVICE);
 	if (dma_mapping_error(net_dev->dev.parent, dist_cfg.key_cfg_iova)) {
 		dev_err(dev, "DMA mapping failed\n");
+		kfree(dma_mem);
 		return -ENOMEM;
 	}
 
@@ -487,12 +493,11 @@ static int dpaa2_cls_prep_rule(struct net_device *net_dev,
 	struct ethtool_tcpip4_spec *l4ip4_h, *l4ip4_m;
 	struct ethhdr *eth_h, *eth_m;
 	struct ethtool_flow_ext *ext_h, *ext_m;
-	const int key_size = dpaa2_cls_key_size(net_dev);
+	const u8 key_size = dpaa2_cls_key_size(net_dev);
 	void *msk = key + key_size;
 
 	memset(key, 0, key_size * 2);
 
-
 	/* This code is a major mess, it has to be cleaned up after the
 	 * classification mask issue is fixed and key format will be made static
 	 */
@@ -646,9 +651,9 @@ static int dpaa2_do_cls(struct net_device *net_dev,
 		return -EOPNOTSUPP;
 	}
 
-	if ((fs->ring_cookie != RX_CLS_FLOW_DISC
-	    && fs->ring_cookie >= dpaa2_queue_count(priv))
-	    || fs->location >= rule_cnt)
+	if ((fs->ring_cookie != RX_CLS_FLOW_DISC &&
+	     fs->ring_cookie >= dpaa2_queue_count(priv)) ||
+	     fs->location >= rule_cnt)
 		return -EINVAL;
 
 	memset(&rule_cfg, 0, sizeof(rule_cfg));
@@ -706,7 +711,6 @@ err_free_mem:
 	kfree(dma_mem);
 
 	return err;
-
 }
 
 static int dpaa2_add_cls(struct net_device *net_dev,
-- 
1.7.5.4

