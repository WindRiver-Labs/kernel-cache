From eb7a7c809106cc5bae17b49941a2b2e4eeed5a16 Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Sun, 25 Oct 2015 11:26:45 +0200
Subject: [PATCH 274/452] dpaa2-eth: Enforce 256-byte Rx alignment

Hardware erratum enforced by MC requires that Rx buffer lengths and
addresses be 265-byte aligned.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
[Xulin: Original patch taken from FSL LS2085 SDK EAR6.0,
LS2085A-SDK-SOURCE-20160304-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c |   11 ++++++++---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h |    5 +++--
 2 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 70188e46..d03a498 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -1579,7 +1579,7 @@ static int ldpaa_bp_add_7(struct ldpaa_eth_priv *priv, uint16_t bpid)
 			dev_err(dev, "buffer allocation failed\n");
 			goto err_alloc;
 		}
-		buf = PTR_ALIGN(buf, LDPAA_ETH_BUF_ALIGN);
+		buf = PTR_ALIGN(buf, LDPAA_ETH_RX_BUF_ALIGN);
 
 		addr = dma_map_single(dev, buf, LDPAA_ETH_RX_BUFFER_SIZE,
 				      DMA_FROM_DEVICE);
@@ -1775,10 +1775,13 @@ static int __cold ldpaa_dpni_setup(struct fsl_mc_device *ls_dev)
 	/* Configure our buffers' layout */
 	priv->buf_layout.options = DPNI_BUF_LAYOUT_OPT_PARSER_RESULT |
 				   DPNI_BUF_LAYOUT_OPT_FRAME_STATUS |
-				   DPNI_BUF_LAYOUT_OPT_PRIVATE_DATA_SIZE;
+				   DPNI_BUF_LAYOUT_OPT_PRIVATE_DATA_SIZE |
+				   DPNI_BUF_LAYOUT_OPT_DATA_ALIGN;
 	priv->buf_layout.pass_parser_result = true;
 	priv->buf_layout.pass_frame_status = true;
 	priv->buf_layout.private_data_size = LDPAA_ETH_SWA_SIZE;
+	/* HW erratum mandates data alignment in multiples of 256 */
+	priv->buf_layout.data_align = LDPAA_ETH_RX_BUF_ALIGN;
 	/* ...rx, ... */
 	err = dpni_set_rx_buffer_layout(priv->mc_io, 0, priv->mc_token,
 					&priv->buf_layout);
@@ -1787,7 +1790,9 @@ static int __cold ldpaa_dpni_setup(struct fsl_mc_device *ls_dev)
 		goto err_buf_layout;
 	}
 	/* ... tx, ... */
-	priv->buf_layout.options &= ~DPNI_BUF_LAYOUT_OPT_PARSER_RESULT;
+	/* remove Rx-only options */
+	priv->buf_layout.options &= ~(DPNI_BUF_LAYOUT_OPT_DATA_ALIGN |
+				      DPNI_BUF_LAYOUT_OPT_PARSER_RESULT);
 	err = dpni_set_tx_buffer_layout(priv->mc_io, 0, priv->mc_token,
 					&priv->buf_layout);
 	if (err) {
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index 10e0c1e..7defb74 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -72,14 +72,15 @@
  * and ingress buffer lengths.
  */
 #define LDPAA_ETH_RX_BUFFER_SIZE	2048
-#define LDPAA_ETH_BUF_ALIGN		64
+#define LDPAA_ETH_BUF_ALIGN		64 /* TODO rename to TX_BUF_ALIGN */
+#define LDPAA_ETH_RX_BUF_ALIGN		256
 #define LDPAA_ETH_NEEDED_HEADROOM(p_priv) \
 	((p_priv)->tx_data_offset + LDPAA_ETH_BUF_ALIGN)
 
 #define LDPAA_ETH_BUF_RAW_SIZE \
 	(LDPAA_ETH_RX_BUFFER_SIZE + \
 	SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) + \
-	LDPAA_ETH_BUF_ALIGN)
+	LDPAA_ETH_RX_BUF_ALIGN)
 
 /* We are accomodating a skb backpointer and potentially other data (see
  * struct backpointers) in the frame's software annotation. The hardware
-- 
1.7.5.4

