From 89e4a60fdeff8610e462674440874ac1cd5ed591 Mon Sep 17 00:00:00 2001
From: Razvan Stefanescu <razvan.stefanescu@freescale.com>
Date: Mon, 14 Dec 2015 16:05:44 +0200
Subject: [PATCH 375/452] dpaa2-ethsw: Update dpsw binary interface to 7.0

This corresponds to MC release 0.8.0.

Signed-off-by: Razvan Stefanescu <razvan.stefanescu@freescale.com>
[Xulin: Original patch taken from FSL LS2085 SDK EAR6.0,
LS2085A-SDK-SOURCE-20160304-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h |   96 +++++++++++++++++----
 drivers/staging/fsl-dpaa2/ethsw/dpsw.c     |   32 +-------
 drivers/staging/fsl-dpaa2/ethsw/dpsw.h     |  126 ++++++++++++++++++----------
 3 files changed, 162 insertions(+), 92 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h b/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h
index db86f66..c65fe38 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h
@@ -32,11 +32,8 @@
 #ifndef __FSL_DPSW_CMD_H
 #define __FSL_DPSW_CMD_H
 
-#define DPSW_CMD_EXTRACT_EXT_PARAMS		10
-#define DPSW_CMD_EARLY_DROP_EXT_PARAMS		13
-
 /* DPSW Version */
-#define DPSW_VER_MAJOR				6
+#define DPSW_VER_MAJOR				7
 #define DPSW_VER_MINOR				0
 
 /* Command IDs */
@@ -91,7 +88,7 @@
 #define DPSW_CMDID_IF_SET_BROADCAST		0x048
 #define DPSW_CMDID_IF_SET_MULTICAST		0x049
 #define DPSW_CMDID_IF_GET_TCI			0x04A
-#define DPSW_CMDID_IF_GET_TOKEN			0x04B
+
 #define DPSW_CMDID_IF_SET_LINK_CFG		0x04C
 
 #define DPSW_CMDID_VLAN_ADD			0x060
@@ -141,6 +138,8 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, cfg->num_ifs);\
 	MC_CMD_OP(cmd, 0, 16,  8, uint8_t,  cfg->adv.max_fdbs);\
 	MC_CMD_OP(cmd, 0, 24,  8, uint8_t,  cfg->adv.max_meters_per_if);\
+	MC_CMD_OP(cmd, 0, 32,  4, enum dpsw_component_type,  \
+			cfg->adv.component_type);\
 	MC_CMD_OP(cmd, 1, 0,  16, uint16_t, cfg->adv.max_vlans);\
 	MC_CMD_OP(cmd, 1, 16, 16, uint16_t, cfg->adv.max_fdb_entries);\
 	MC_CMD_OP(cmd, 1, 32, 16, uint16_t, cfg->adv.fdb_aging_time);\
@@ -158,7 +157,7 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  8,  uint8_t,  irq_index);\
 	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, irq_cfg->val);\
 	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr);\
-	MC_CMD_OP(cmd, 2, 0,  32, int,	    irq_cfg->user_irq_id); \
+	MC_CMD_OP(cmd, 2, 0,  32, int,	    irq_cfg->irq_num); \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -170,7 +169,7 @@ do { \
 do { \
 	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_cfg->val); \
 	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr);\
-	MC_RSP_OP(cmd, 2, 0,  32, int,	    irq_cfg->user_irq_id); \
+	MC_RSP_OP(cmd, 2, 0,  32, int,	    irq_cfg->irq_num); \
 	MC_RSP_OP(cmd, 2, 32, 32, int,	    type); \
 } while (0)
 
@@ -205,8 +204,11 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, mask)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_GET_IRQ_STATUS(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
+#define DPSW_CMD_GET_IRQ_STATUS(cmd, irq_index, status) \
+do { \
+	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, status);\
+	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index);\
+} while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
 #define DPSW_RSP_GET_IRQ_STATUS(cmd, status) \
@@ -236,6 +238,8 @@ do { \
 	MC_RSP_OP(cmd, 2, 48, 16, uint16_t, attr->max_fdb_mc_groups);\
 	MC_RSP_OP(cmd, 3, 0,  64, uint64_t, attr->options);\
 	MC_RSP_OP(cmd, 4, 0,  8,  uint8_t, attr->max_meters_per_if);\
+	MC_RSP_OP(cmd, 4, 8,  4,  enum dpsw_component_type, \
+			attr->component_type);\
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -408,6 +412,21 @@ do { \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
+#define DPSW_PREP_EARLY_DROP(ext, cfg) \
+do { \
+	MC_PREP_OP(ext, 0, 0,  2, enum dpsw_early_drop_mode, cfg->drop_mode); \
+	MC_PREP_OP(ext, 0, 2,  2, \
+		  enum dpsw_early_drop_unit, cfg->units); \
+	MC_PREP_OP(ext, 0, 32, 32, uint32_t, cfg->tail_drop_threshold); \
+	MC_PREP_OP(ext, 1, 0,  8,  uint8_t,  cfg->green.drop_probability); \
+	MC_PREP_OP(ext, 2, 0,  64, uint64_t, cfg->green.max_threshold); \
+	MC_PREP_OP(ext, 3, 0,  64, uint64_t, cfg->green.min_threshold); \
+	MC_PREP_OP(ext, 5, 0,  8,  uint8_t,  cfg->yellow.drop_probability);\
+	MC_PREP_OP(ext, 6, 0,  64, uint64_t, cfg->yellow.max_threshold); \
+	MC_PREP_OP(ext, 7, 0,  64, uint64_t, cfg->yellow.min_threshold); \
+} while (0)
+
+/*                cmd, param, offset, width, type, arg_name */
 #define DPSW_EXT_EARLY_DROP(ext, cfg) \
 do { \
 	MC_EXT_OP(ext, 0, 0,  2, enum dpsw_early_drop_mode, cfg->drop_mode); \
@@ -447,14 +466,6 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPSW_CMD_IF_GET_TOKEN(cmd, if_id) \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSW_RSP_IF_GET_TOKEN(cmd, if_token) \
-	MC_RSP_OP(cmd, 0, 32,  16, uint16_t, if_token)
-
-/*                cmd, param, offset, width, type, arg_name */
 #define DPSW_CMD_IF_GET_ATTR(cmd, if_id) \
 	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id)
 
@@ -466,7 +477,7 @@ do { \
 	MC_RSP_OP(cmd, 0, 5,  1,  int,      attr->enabled);\
 	MC_RSP_OP(cmd, 0, 6,  1,  int,      attr->accept_all_vlan);\
 	MC_RSP_OP(cmd, 0, 16, 8,  uint8_t,  attr->num_tcs);\
-	MC_RSP_OP(cmd, 0, 32, 32, uint32_t, attr->tx_fqid);\
+	MC_RSP_OP(cmd, 0, 32, 16, uint16_t,	attr->qdid);\
 	MC_RSP_OP(cmd, 1, 0,  32, uint32_t, attr->options);\
 	MC_RSP_OP(cmd, 2, 0,  32, uint32_t, attr->rate);\
 } while (0)
@@ -721,6 +732,55 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, acl_id)
 
 /*                cmd, param, offset, width, type, arg_name */
+#define DPSW_PREP_ACL_ENTRY(ext, key) \
+do { \
+	MC_PREP_OP(ext, 0, 0,  8,  uint8_t,  key->match.l2_dest_mac[5]);\
+	MC_PREP_OP(ext, 0, 8,  8,  uint8_t,  key->match.l2_dest_mac[4]);\
+	MC_PREP_OP(ext, 0, 16, 8,  uint8_t,  key->match.l2_dest_mac[3]);\
+	MC_PREP_OP(ext, 0, 24, 8,  uint8_t,  key->match.l2_dest_mac[2]);\
+	MC_PREP_OP(ext, 0, 32, 8,  uint8_t,  key->match.l2_dest_mac[1]);\
+	MC_PREP_OP(ext, 0, 40, 8,  uint8_t,  key->match.l2_dest_mac[0]);\
+	MC_PREP_OP(ext, 0, 48, 16, uint16_t, key->match.l2_tpid);\
+	MC_PREP_OP(ext, 1, 0,  8,  uint8_t,  key->match.l2_source_mac[5]);\
+	MC_PREP_OP(ext, 1, 8,  8,  uint8_t,  key->match.l2_source_mac[4]);\
+	MC_PREP_OP(ext, 1, 16, 8,  uint8_t,  key->match.l2_source_mac[3]);\
+	MC_PREP_OP(ext, 1, 24, 8,  uint8_t,  key->match.l2_source_mac[2]);\
+	MC_PREP_OP(ext, 1, 32, 8,  uint8_t,  key->match.l2_source_mac[1]);\
+	MC_PREP_OP(ext, 1, 40, 8,  uint8_t,  key->match.l2_source_mac[0]);\
+	MC_PREP_OP(ext, 1, 48, 16, uint16_t, key->match.l2_vlan_id);\
+	MC_PREP_OP(ext, 2, 0,  32, uint32_t, key->match.l3_dest_ip);\
+	MC_PREP_OP(ext, 2, 32, 32, uint32_t, key->match.l3_source_ip);\
+	MC_PREP_OP(ext, 3, 0,  16, uint16_t, key->match.l4_dest_port);\
+	MC_PREP_OP(ext, 3, 16, 16, uint16_t, key->match.l4_source_port);\
+	MC_PREP_OP(ext, 3, 32, 16, uint16_t, key->match.l2_ether_type);\
+	MC_PREP_OP(ext, 3, 48, 8,  uint8_t,  key->match.l2_pcp_dei);\
+	MC_PREP_OP(ext, 3, 56, 8,  uint8_t,  key->match.l3_dscp);\
+	MC_PREP_OP(ext, 4, 0,  8,  uint8_t,  key->mask.l2_dest_mac[5]);\
+	MC_PREP_OP(ext, 4, 8,  8,  uint8_t,  key->mask.l2_dest_mac[4]);\
+	MC_PREP_OP(ext, 4, 16, 8,  uint8_t,  key->mask.l2_dest_mac[3]);\
+	MC_PREP_OP(ext, 4, 24, 8,  uint8_t,  key->mask.l2_dest_mac[2]);\
+	MC_PREP_OP(ext, 4, 32, 8,  uint8_t,  key->mask.l2_dest_mac[1]);\
+	MC_PREP_OP(ext, 4, 40, 8,  uint8_t,  key->mask.l2_dest_mac[0]);\
+	MC_PREP_OP(ext, 4, 48, 16, uint16_t, key->mask.l2_tpid);\
+	MC_PREP_OP(ext, 5, 0,  8,  uint8_t,  key->mask.l2_source_mac[5]);\
+	MC_PREP_OP(ext, 5, 8,  8,  uint8_t,  key->mask.l2_source_mac[4]);\
+	MC_PREP_OP(ext, 5, 16, 8,  uint8_t,  key->mask.l2_source_mac[3]);\
+	MC_PREP_OP(ext, 5, 24, 8,  uint8_t,  key->mask.l2_source_mac[2]);\
+	MC_PREP_OP(ext, 5, 32, 8,  uint8_t,  key->mask.l2_source_mac[1]);\
+	MC_PREP_OP(ext, 5, 40, 8,  uint8_t,  key->mask.l2_source_mac[0]);\
+	MC_PREP_OP(ext, 5, 48, 16, uint16_t, key->mask.l2_vlan_id);\
+	MC_PREP_OP(ext, 6, 0,  32, uint32_t, key->mask.l3_dest_ip);\
+	MC_PREP_OP(ext, 6, 32, 32, uint32_t, key->mask.l3_source_ip);\
+	MC_PREP_OP(ext, 7, 0,  16, uint16_t, key->mask.l4_dest_port);\
+	MC_PREP_OP(ext, 7, 16, 16, uint16_t, key->mask.l4_source_port);\
+	MC_PREP_OP(ext, 7, 32, 16, uint16_t, key->mask.l2_ether_type);\
+	MC_PREP_OP(ext, 7, 48, 8,  uint8_t,  key->mask.l2_pcp_dei);\
+	MC_PREP_OP(ext, 7, 56, 8,  uint8_t,  key->mask.l3_dscp);\
+	MC_PREP_OP(ext, 8, 0,  8,  uint8_t,  key->match.l3_protocol);\
+	MC_PREP_OP(ext, 8, 8,  8,  uint8_t,  key->mask.l3_protocol);\
+} while (0)
+
+/*                cmd, param, offset, width, type, arg_name */
 #define DPSW_EXT_ACL_ENTRY(ext, key) \
 do { \
 	MC_EXT_OP(ext, 0, 0,  8,  uint8_t,  key->match.l2_dest_mac[5]);\
diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
index 308b738..1db1a70 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
@@ -369,7 +369,7 @@ int dpsw_get_irq_status(struct fsl_mc_io *mc_io,
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_GET_IRQ_STATUS,
 					  cmd_flags,
 					  token);
-	DPSW_CMD_GET_IRQ_STATUS(cmd, irq_index);
+	DPSW_CMD_GET_IRQ_STATUS(cmd, irq_index, *status);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -779,7 +779,7 @@ void dpsw_prepare_early_drop(const struct dpsw_early_drop_cfg *cfg,
 {
 	uint64_t *ext_params = (uint64_t *)early_drop_buf;
 
-	DPSW_EXT_EARLY_DROP(ext_params, cfg);
+	DPSW_PREP_EARLY_DROP(ext_params, cfg);
 }
 
 int dpsw_if_set_early_drop(struct fsl_mc_io	*mc_io,
@@ -869,32 +869,6 @@ int dpsw_if_disable(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpsw_if_get_token(struct fsl_mc_io *mc_io,
-		      uint32_t cmd_flags,
-		      uint16_t token,
-		      uint16_t if_id,
-		      uint16_t *if_token)
-{
-	struct mc_command cmd = { 0 };
-	int err;
-
-	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPSW_CMDID_IF_GET_TOKEN,
-					  cmd_flags,
-					  token);
-	DPSW_CMD_IF_GET_TOKEN(cmd, if_id);
-
-	/* send command to mc*/
-	err = mc_send_command(mc_io, &cmd);
-	if (err)
-		return err;
-
-	/* retrieve response parameters */
-	DPSW_RSP_IF_GET_TOKEN(cmd, *if_token);
-
-	return 0;
-}
-
 int dpsw_if_get_attributes(struct fsl_mc_io *mc_io,
 			   uint32_t cmd_flags,
 			   uint16_t token,
@@ -1482,7 +1456,7 @@ void dpsw_acl_prepare_entry_cfg(const struct dpsw_acl_key *key,
 {
 	uint64_t *ext_params = (uint64_t *)entry_cfg_buf;
 
-	DPSW_EXT_ACL_ENTRY(ext_params, key);
+	DPSW_PREP_ACL_ENTRY(ext_params, key);
 }
 
 int dpsw_acl_add_entry(struct fsl_mc_io *mc_io,
diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw.h b/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
index dc57954..34296f3 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
@@ -34,17 +34,23 @@
 
 #include "../../fsl-mc/include/net.h"
 
-/* Data Path DPSW API
+/* Data Path L2-Switch API
  * Contains API for handling DPSW topology and functionality
  */
 
 struct fsl_mc_io;
 
-/* DPSW general definitions */
+/**
+ * DPSW general definitions
+ */
 
-/*!< Maximum number of traffic class priorities */
+/**
+ * Maximum number of traffic class priorities
+ */
 #define DPSW_MAX_PRIORITIES	8
-/*!< Maximum number of interfaces */
+/**
+ * Maximum number of interfaces
+ */
 #define DPSW_MAX_IF		64
 
 /**
@@ -84,20 +90,46 @@ int dpsw_close(struct fsl_mc_io *mc_io,
 	       uint32_t	cmd_flags,
 	       uint16_t	token);
 
-/* DPSW options */
+/**
+ * DPSW options
+ */
 
-/* Disable flooding */
+/**
+ * Disable flooding
+ */
 #define DPSW_OPT_FLOODING_DIS		0x0000000000000001ULL
-/* Disable Multicast */
+/**
+ * Disable Multicast
+ */
 #define DPSW_OPT_MULTICAST_DIS		0x0000000000000004ULL
-/* Support control interface */
+/**
+ * Support control interface
+ */
 #define DPSW_OPT_CTRL_IF_DIS		0x0000000000000010ULL
-/* Disable flooding metering */
+/**
+ * Disable flooding metering
+ */
 #define DPSW_OPT_FLOODING_METERING_DIS  0x0000000000000020ULL
-/* Enable metering */
+/**
+ * Enable metering
+ */
 #define DPSW_OPT_METERING_EN            0x0000000000000040ULL
 
 /**
+ * enum dpsw_component_type - component type of a bridge
+ * @DPSW_COMPONENT_TYPE_C_VLAN: A C-VLAN component of an
+ *   enterprise VLAN bridge or of a Provider Bridge used
+ *   to process C-tagged frames
+ * @DPSW_COMPONENT_TYPE_S_VLAN: An S-VLAN component of a
+ *   Provider Bridge
+ *
+ */
+enum dpsw_component_type {
+	DPSW_COMPONENT_TYPE_C_VLAN = 0,
+	DPSW_COMPONENT_TYPE_S_VLAN
+};
+
+/**
  * struct dpsw_cfg - DPSW configuration
  * @num_ifs: Number of external and internal interfaces
  * @adv: Advanced parameters; default is all zeros;
@@ -117,6 +149,7 @@ struct dpsw_cfg {
 	 *			0 - indicates default 300 seconds
 	 * @max_fdb_mc_groups: Number of multicast groups in each FDB table;
 	 *			0 - indicates default 32
+	 * @component_type: Indicates the component type of this bridge
 	 */
 	struct {
 		uint64_t	options;
@@ -126,6 +159,7 @@ struct dpsw_cfg {
 		uint16_t	max_fdb_entries;
 		uint16_t	fdb_aging_time;
 		uint16_t	max_fdb_mc_groups;
+		enum dpsw_component_type component_type;
 	} adv;
 };
 
@@ -219,24 +253,28 @@ int dpsw_reset(struct fsl_mc_io *mc_io,
 	       uint32_t	cmd_flags,
 	       uint16_t	token);
 
-/* DPSW IRQ Index and Events */
+/**
+ * DPSW IRQ Index and Events
+ */
 
 #define DPSW_IRQ_INDEX_IF		0x0000
 #define DPSW_IRQ_INDEX_L2SW		0x0001
 
-/*!< IRQ event - Indicates that the link state changed */
+/**
+ * IRQ event - Indicates that the link state changed
+ */
 #define DPSW_IRQ_EVENT_LINK_CHANGED	0x0001
 
 /**
  * struct dpsw_irq_cfg - IRQ configuration
  * @addr:	Address that must be written to signal a message-based interrupt
  * @val:	Value to write into irq_addr address
- * @user_irq_id: A user defined number associated with this IRQ
+ * @irq_num: A user defined number associated with this IRQ
  */
 struct dpsw_irq_cfg {
 	     uint64_t		addr;
 	     uint32_t		val;
-	     int		user_irq_id;
+	     int		irq_num;
 };
 
 /**
@@ -321,7 +359,7 @@ int dpsw_get_irq_enable(struct fsl_mc_io	*mc_io,
  * @mask:		event mask to trigger interrupt;
  *				each bit:
  *					0 = ignore event
- *					1 = consider event for asserting irq
+ *					1 = consider event for asserting IRQ
  *
  * Every interrupt can have up to 32 causes and the interrupt model supports
  * masking/unmasking each cause independently
@@ -406,6 +444,7 @@ int dpsw_clear_irq_status(struct fsl_mc_io	*mc_io,
  * @num_ifs: Number of interfaces
  * @num_vlans: Current number of VLANs
  * @num_fdbs: Current number of FDBs
+ * @component_type: Component type of this bridge
  */
 struct dpsw_attr {
 	int		id;
@@ -429,6 +468,7 @@ struct dpsw_attr {
 	uint16_t	mem_size;
 	uint16_t	num_vlans;
 	uint8_t		num_fdbs;
+	enum dpsw_component_type component_type;
 };
 
 /**
@@ -471,13 +511,21 @@ enum dpsw_action {
 	DPSW_ACTION_REDIRECT = 1
 };
 
-/* Enable auto-negotiation */
+/**
+ * Enable auto-negotiation
+ */
 #define DPSW_LINK_OPT_AUTONEG		0x0000000000000001ULL
-/* Enable half-duplex mode */
+/**
+ * Enable half-duplex mode
+ */
 #define DPSW_LINK_OPT_HALF_DUPLEX	0x0000000000000002ULL
-/* Enable pause frames */
+/**
+ * Enable pause frames
+ */
 #define DPSW_LINK_OPT_PAUSE		0x0000000000000004ULL
-/* Enable a-symmetric pause frames */
+/**
+ * Enable a-symmetric pause frames
+ */
 #define DPSW_LINK_OPT_ASYM_PAUSE	0x0000000000000008ULL
 
 /**
@@ -811,7 +859,9 @@ int dpsw_if_set_counter(struct fsl_mc_io	*mc_io,
 			enum dpsw_counter	type,
 			uint64_t		counter);
 
-/* Maximum number of TC */
+/**
+ * Maximum number of TC
+ */
 #define DPSW_MAX_TC             8
 
 /**
@@ -951,12 +1001,12 @@ enum dpsw_metering_mode {
 
 /**
  * enum dpsw_metering_unit - Metering count
- * @DPSW_METERING_UNIT_BYTES: bytes units
- * @DPSW_METERING_UNIT_PACKETS: packets units
+ * @DPSW_METERING_UNIT_BYTES: count bytes
+ * @DPSW_METERING_UNIT_FRAMES: count frames
  */
 enum dpsw_metering_unit {
 	DPSW_METERING_UNIT_BYTES = 0,
-	DPSW_METERING_UNIT_PACKETS
+	DPSW_METERING_UNIT_FRAMES
 };
 
 /**
@@ -1017,11 +1067,11 @@ int dpsw_if_set_metering(struct fsl_mc_io			*mc_io,
 /**
  * enum dpsw_early_drop_unit - DPSW early drop unit
  * @DPSW_EARLY_DROP_UNIT_BYTE: count bytes
- * @DPSW_EARLY_DROP_UNIT_PACKETS: count frames
+ * @DPSW_EARLY_DROP_UNIT_FRAMES: count frames
  */
 enum dpsw_early_drop_unit {
 	DPSW_EARLY_DROP_UNIT_BYTE = 0,
-	DPSW_EARLY_DROP_UNIT_PACKETS
+	DPSW_EARLY_DROP_UNIT_FRAMES
 };
 
 /**
@@ -1172,22 +1222,6 @@ int dpsw_if_disable(struct fsl_mc_io	*mc_io,
 		    uint16_t		if_id);
 
 /**
- * dpsw_if_get_token - Obtains interface token
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @if_id:	Interface id
- * @if_token:	Interface token
- *
- * @returns      Completion status. '0' on Success; Error code otherwise.
- */
-int dpsw_if_get_token(struct fsl_mc_io	*mc_io,
-		      uint32_t		cmd_flags,
-		      uint16_t		token,
-		      uint16_t		if_id,
-		      uint16_t		*if_token);
-
-/**
  * struct dpsw_if_attr - Structure representing DPSW interface attributes
  * @num_tcs: Number of traffic classes
  * @rate: Transmit rate in bits per second
@@ -1200,7 +1234,7 @@ int dpsw_if_get_token(struct fsl_mc_io	*mc_io,
  *		this interface;
  *		When set to 'DPSW_ADMIT_ALL', untagged frames or priority-
  *		tagged frames received on this interface are accepted
- * @tx_fqid Transmit FQID
+ * @qdid: control frames transmit qdid
  */
 struct dpsw_if_attr {
 	uint8_t				num_tcs;
@@ -1209,7 +1243,7 @@ struct dpsw_if_attr {
 	int				enabled;
 	int				accept_all_vlan;
 	enum dpsw_accepted_frames	admit_untagged;
-	uint32_t			tx_fqid;
+	uint16_t			qdid;
 };
 
 /**
@@ -2063,7 +2097,9 @@ int dpsw_ctrl_if_get_attributes(struct fsl_mc_io		*mc_io,
 				uint16_t			token,
 				struct dpsw_ctrl_if_attr	*attr);
 
-/* Maximum number of DPBP */
+/**
+ * Maximum number of DPBP
+ */
 #define DPSW_MAX_DPBP     8
 
 /**
@@ -2114,7 +2150,7 @@ int dpsw_ctrl_if_enable(struct fsl_mc_io	*mc_io,
 			uint16_t		token);
 
 /**
-* @brief    Function disables control interface
+* dpsw_ctrl_if_disable() - Function disables control interface
 * @mc_io:	Pointer to MC portal's I/O object
 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
 * @token:	Token of DPSW object
-- 
1.7.5.4

