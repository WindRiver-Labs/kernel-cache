From b9f1bd6d9fbe69c2f7f151d29de24d90f8c397d7 Mon Sep 17 00:00:00 2001
From: Roy Pledge <Roy.Pledge@freescale.com>
Date: Thu, 25 Jun 2015 16:12:21 -0400
Subject: [PATCH 131/452] fsl_qbman: Enable CDAN generation

Enable CDAN notificiation registration in both QBMan and DPIO

Signed-off-by: Roy Pledge <Roy.Pledge@freescale.com>
[Xulin: Original patch taken from FSL LS2085 SDK EAR6.0,
LS2085A-SDK-SOURCE-20160304-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/dpio_service.c     |   16 +++++++++++++---
 drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h |    1 +
 drivers/staging/fsl-mc/bus/dpio/qbman_portal.c     |    7 ++++++-
 3 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
index f3c8f33..e7bb180 100644
--- a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
+++ b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
@@ -377,7 +377,7 @@ int dpaa_io_poll(struct dpaa_io *obj)
 	swp = obj->object.swp;
 	dq = qbman_swp_dqrr_next(swp);
 	while (dq) {
-		if (qbman_result_is_FQDAN(dq)) {
+		if (qbman_result_is_SCN(dq)) {
 			struct dpaa_io_notification_ctx *ctx;
 			uint64_t q64;
 
@@ -469,6 +469,11 @@ int dpaa_io_service_register(struct dpaa_io *d,
 	spin_lock_irqsave(&d->object.lock_notifications, irqflags);
 	list_add(&ctx->node, &d->object.notifications);
 	spin_unlock_irqrestore(&d->object.lock_notifications, irqflags);
+	if (ctx->is_cdan)
+		/* Enable the generation of CDAN notifications */
+		qbman_swp_CDAN_set_context_enable(d->object.swp,
+						  ctx->id,
+						  ctx->qman64);
 	return 0;
 }
 EXPORT_SYMBOL(dpaa_io_service_register);
@@ -482,6 +487,9 @@ int dpaa_io_service_deregister(struct dpaa_io *service,
 	if (!service)
 		service = &def_serv;
 	BUG_ON((service != d) && (service != d->object.service));
+	if (ctx->is_cdan)
+		qbman_swp_CDAN_disable(d->object.swp,
+				       ctx->id);
 	spin_lock_irqsave(&d->object.lock_notifications, irqflags);
 	list_del(&ctx->node);
 	spin_unlock_irqrestore(&d->object.lock_notifications, irqflags);
@@ -495,12 +503,14 @@ int dpaa_io_service_rearm(struct dpaa_io *d,
 	unsigned long irqflags;
 	int err;
 
-	BUG_ON(ctx->is_cdan);
 	d = _service_select(d);
 	if (!d)
 		return -ENODEV;
 	spin_lock_irqsave(&d->object.lock_mgmt_cmd, irqflags);
-	err = qbman_swp_fq_schedule(d->object.swp, ctx->id);
+	if (ctx->is_cdan)
+		err = qbman_swp_CDAN_enable(d->object.swp, ctx->id);
+	else
+		err = qbman_swp_fq_schedule(d->object.swp, ctx->id);
 	spin_unlock_irqrestore(&d->object.lock_mgmt_cmd, irqflags);
 	return err;
 }
diff --git a/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h b/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h
index 104736b..69fd8c4 100644
--- a/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h
+++ b/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h
@@ -387,6 +387,7 @@ int qbman_swp_fq_xoff(struct qbman_swp *, uint32_t fqid);
 int qbman_swp_CDAN_set_context(struct qbman_swp *, uint16_t channelid,
 				uint64_t ctx);
 int qbman_swp_CDAN_enable(struct qbman_swp *, uint16_t channelid);
+int qbman_swp_CDAN_disable(struct qbman_swp *, uint16_t channelid);
 int qbman_swp_CDAN_set_context_enable(struct qbman_swp *, uint16_t channelid,
 				      uint64_t ctx);
 
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
index 9897e25..4cefac5 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
@@ -1205,7 +1205,12 @@ int qbman_swp_CDAN_enable(struct qbman_swp *s, uint16_t channelid)
 				  CODE_CDAN_WE_EN,
 				  1, 0);
 }
-
+int qbman_swp_CDAN_disable(struct qbman_swp *s, uint16_t channelid)
+{
+	return qbman_swp_CDAN_set(s, channelid,
+				  CODE_CDAN_WE_EN,
+				  0, 0);
+}
 int qbman_swp_CDAN_set_context_enable(struct qbman_swp *s, uint16_t channelid,
 				      uint64_t ctx)
 {
-- 
1.7.5.4

