From ec5272ccd4c789a078c453b7f8a226c69eaf75fd Mon Sep 17 00:00:00 2001
From: "J. German Rivera" <German.Rivera@freescale.com>
Date: Tue, 30 Jun 2015 17:48:32 -0500
Subject: [PATCH 179/452] staging: dpaa2-eth: migrated remaining flibs for MC
 fw 8.0.0

Signed-off-by: J. German Rivera <German.Rivera@freescale.com>
[Stuart: split eth part into separate patch, updated subject]
Signed-off-by: Stuart Yoder <stuart.yoder@freescale.com>
[Xulin: Original patch taken from FSL LS2085 SDK EAR6.0,
LS2085A-SDK-SOURCE-20160304-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c     |  119 ++--
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c |   12 +-
 drivers/staging/fsl-dpaa2/ethernet/dpni-cmd.h      |   89 +++-
 drivers/staging/fsl-dpaa2/ethernet/dpni.c          |  478 +++++++++++----
 drivers/staging/fsl-dpaa2/ethernet/dpni.h          |  641 ++++++++++++++------
 5 files changed, 949 insertions(+), 390 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 6c62683..67a5898 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -690,7 +690,7 @@ static int ldpaa_eth_set_rx_csum(struct ldpaa_eth_priv *priv, bool enable)
 {
 	int err;
 
-	err = dpni_set_l3_chksum_validation(priv->mc_io, priv->mc_token,
+	err = dpni_set_l3_chksum_validation(priv->mc_io, 0, priv->mc_token,
 					    enable);
 	if (unlikely(err)) {
 		netdev_err(priv->net_dev,
@@ -698,7 +698,7 @@ static int ldpaa_eth_set_rx_csum(struct ldpaa_eth_priv *priv, bool enable)
 		return err;
 	}
 
-	err = dpni_set_l4_chksum_validation(priv->mc_io, priv->mc_token,
+	err = dpni_set_l4_chksum_validation(priv->mc_io, 0, priv->mc_token,
 					    enable);
 	if (unlikely(err)) {
 		netdev_err(priv->net_dev,
@@ -728,7 +728,7 @@ static int ldpaa_eth_set_tx_csum(struct ldpaa_eth_priv *priv, bool enable)
 			continue;
 
 		/* The Tx flowid is kept in the corresponding TxConf FQ. */
-		err = dpni_set_tx_flow(priv->mc_io, priv->mc_token,
+		err = dpni_set_tx_flow(priv->mc_io, 0, priv->mc_token,
 				       &fq->flowid, &tx_flow_cfg);
 		if (unlikely(err)) {
 			netdev_err(priv->net_dev, "dpni_set_tx_flow failed\n");
@@ -844,7 +844,7 @@ static int __cold ldpaa_eth_open(struct net_device *net_dev)
 	 */
 	netif_tx_stop_all_queues(net_dev);
 
-	err = dpni_enable(priv->mc_io, priv->mc_token);
+	err = dpni_enable(priv->mc_io, 0, priv->mc_token);
 	if (err < 0) {
 		dev_err(net_dev->dev.parent, "dpni_enable() failed\n");
 		goto enable_err;
@@ -865,7 +865,7 @@ static int __cold ldpaa_eth_stop(struct net_device *net_dev)
 
 	/* Stop Tx and Rx traffic */
 	netif_tx_stop_all_queues(net_dev);
-	dpni_disable(priv->mc_io, priv->mc_token);
+	dpni_disable(priv->mc_io, 0, priv->mc_token);
 
 	/* TODO: Make sure queues are drained before if down is complete! */
 	msleep(100);
@@ -922,7 +922,7 @@ static int ldpaa_eth_set_addr(struct net_device *net_dev, void *addr)
 		return err;
 	}
 
-	err = dpni_set_primary_mac_addr(priv->mc_io, priv->mc_token,
+	err = dpni_set_primary_mac_addr(priv->mc_io, 0, priv->mc_token,
 					net_dev->dev_addr);
 	if (err) {
 		dev_err(dev, "dpni_set_primary_mac_addr() failed (%d)\n", err);
@@ -970,7 +970,7 @@ static int ldpaa_eth_change_mtu(struct net_device *net_dev, int mtu)
 	/* Set the maximum Rx frame length to match the transmit side;
 	 * account for L2 headers when computing the MFL
 	 */
-	err = dpni_set_max_frame_length(priv->mc_io, priv->mc_token,
+	err = dpni_set_max_frame_length(priv->mc_io, 0, priv->mc_token,
 					(uint16_t)LDPAA_ETH_L2_MAX_FRM(mtu));
 	if (err) {
 		netdev_err(net_dev, "dpni_set_mfl() failed\n");
@@ -998,7 +998,8 @@ static inline void _ldpaa_eth_hw_add_uc_addr(const struct net_device *net_dev,
 	int err;
 
 	netdev_for_each_uc_addr(ha, net_dev) {
-		err = dpni_add_mac_addr(priv->mc_io, priv->mc_token, ha->addr);
+		err = dpni_add_mac_addr(priv->mc_io, 0, priv->mc_token,
+					ha->addr);
 		LDPAA_ETH_WARN_IF_ERR(err, priv->net_dev,
 				      "Could not add ucast MAC %pM to the filtering table (err %d)\n",
 				      ha->addr, err);
@@ -1015,7 +1016,8 @@ static inline void _ldpaa_eth_hw_add_mc_addr(const struct net_device *net_dev,
 	int err;
 
 	netdev_for_each_mc_addr(ha, net_dev) {
-		err = dpni_add_mac_addr(priv->mc_io, priv->mc_token, ha->addr);
+		err = dpni_add_mac_addr(priv->mc_io, 0, priv->mc_token,
+					ha->addr);
 		LDPAA_ETH_WARN_IF_ERR(err, priv->net_dev,
 				      "Could not add mcast MAC %pM to the filtering table (err %d)\n",
 				      ha->addr, err);
@@ -1069,16 +1071,16 @@ static void ldpaa_eth_set_rx_mode(struct net_device *net_dev)
 		 * making an MC call to find it is expensive; so set uc promisc
 		 * nonetheless.
 		 */
-		err = dpni_set_unicast_promisc(mc_io, mc_token, 1);
+		err = dpni_set_unicast_promisc(mc_io, 0, mc_token, 1);
 		LDPAA_ETH_WARN_IF_ERR(err, net_dev, "Can't set uc promisc\n");
 
 		/* Actual uc table reconstruction. */
-		err = dpni_clear_mac_filters(mc_io, mc_token, 1, 0);
+		err = dpni_clear_mac_filters(mc_io, 0, mc_token, 1, 0);
 		LDPAA_ETH_WARN_IF_ERR(err, net_dev, "Can't clear uc filters\n");
 		_ldpaa_eth_hw_add_uc_addr(net_dev, priv);
 
 		/* Finally, clear uc promisc and set mc promisc as requested. */
-		err = dpni_set_unicast_promisc(mc_io, mc_token, 0);
+		err = dpni_set_unicast_promisc(mc_io, 0, mc_token, 0);
 		LDPAA_ETH_WARN_IF_ERR(err, net_dev, "Can't clear uc promisc\n");
 		goto force_mc_promisc;
 	}
@@ -1086,13 +1088,13 @@ static void ldpaa_eth_set_rx_mode(struct net_device *net_dev)
 	/* Neither unicast, nor multicast promisc will be on... eventually.
 	 * For now, rebuild mac filtering tables while forcing both of them on.
 	 */
-	err = dpni_set_unicast_promisc(mc_io, mc_token, 1);
+	err = dpni_set_unicast_promisc(mc_io, 0, mc_token, 1);
 	LDPAA_ETH_WARN_IF_ERR(err, net_dev, "Can't set uc promisc (%d)\n", err);
-	err = dpni_set_multicast_promisc(mc_io, mc_token, 1);
+	err = dpni_set_multicast_promisc(mc_io, 0, mc_token, 1);
 	LDPAA_ETH_WARN_IF_ERR(err, net_dev, "Can't set mc promisc (%d)\n", err);
 
 	/* Actual mac filtering tables reconstruction */
-	err = dpni_clear_mac_filters(mc_io, mc_token, 1, 1);
+	err = dpni_clear_mac_filters(mc_io, 0, mc_token, 1, 1);
 	LDPAA_ETH_WARN_IF_ERR(err, net_dev, "Can't clear mac filters\n");
 	_ldpaa_eth_hw_add_mc_addr(net_dev, priv);
 	_ldpaa_eth_hw_add_uc_addr(net_dev, priv);
@@ -1100,18 +1102,18 @@ static void ldpaa_eth_set_rx_mode(struct net_device *net_dev)
 	/* Now we can clear both ucast and mcast promisc, without risking
 	 * to drop legitimate frames anymore.
 	 */
-	err = dpni_set_unicast_promisc(mc_io, mc_token, 0);
+	err = dpni_set_unicast_promisc(mc_io, 0, mc_token, 0);
 	LDPAA_ETH_WARN_IF_ERR(err, net_dev, "Can't clear ucast promisc\n");
-	err = dpni_set_multicast_promisc(mc_io, mc_token, 0);
+	err = dpni_set_multicast_promisc(mc_io, 0, mc_token, 0);
 	LDPAA_ETH_WARN_IF_ERR(err, net_dev, "Can't clear mcast promisc\n");
 
 	return;
 
 force_promisc:
-	err = dpni_set_unicast_promisc(mc_io, mc_token, 1);
+	err = dpni_set_unicast_promisc(mc_io, 0, mc_token, 1);
 	LDPAA_ETH_WARN_IF_ERR(err, net_dev, "Can't set ucast promisc\n");
 force_mc_promisc:
-	err = dpni_set_multicast_promisc(mc_io, mc_token, 1);
+	err = dpni_set_multicast_promisc(mc_io, 0, mc_token, 1);
 	LDPAA_ETH_WARN_IF_ERR(err, net_dev, "Can't set mcast promisc\n");
 }
 
@@ -1465,20 +1467,20 @@ static int __cold ldpaa_dpbp_setup(struct ldpaa_eth_priv *priv)
 
 	priv->dpbp_dev = dpbp_dev;
 
-	err = dpbp_open(priv->mc_io, priv->dpbp_dev->obj_desc.id,
+	err = dpbp_open(priv->mc_io, 0, priv->dpbp_dev->obj_desc.id,
 			&dpbp_dev->mc_handle);
 	if (err) {
 		dev_err(dev, "dpbp_open() failed\n");
 		goto err_open;
 	}
 
-	err = dpbp_enable(priv->mc_io, dpbp_dev->mc_handle);
+	err = dpbp_enable(priv->mc_io, 0, dpbp_dev->mc_handle);
 	if (err) {
 		dev_err(dev, "dpbp_enable() failed\n");
 		goto err_enable;
 	}
 
-	err = dpbp_get_attributes(priv->mc_io, dpbp_dev->mc_handle,
+	err = dpbp_get_attributes(priv->mc_io, 0, dpbp_dev->mc_handle,
 				  &priv->dpbp_attrs);
 	if (err) {
 		dev_err(dev, "dpbp_get_attributes() failed\n");
@@ -1488,9 +1490,9 @@ static int __cold ldpaa_dpbp_setup(struct ldpaa_eth_priv *priv)
 	return 0;
 
 err_get_attr:
-	dpbp_disable(priv->mc_io, dpbp_dev->mc_handle);
+	dpbp_disable(priv->mc_io, 0, dpbp_dev->mc_handle);
 err_enable:
-	dpbp_close(priv->mc_io, dpbp_dev->mc_handle);
+	dpbp_close(priv->mc_io, 0, dpbp_dev->mc_handle);
 err_open:
 	fsl_mc_object_free(dpbp_dev);
 
@@ -1513,8 +1515,8 @@ static void __cold __ldpaa_dpbp_free(struct ldpaa_eth_priv *priv)
 static void __cold ldpaa_dpbp_free(struct ldpaa_eth_priv *priv)
 {
 	__ldpaa_dpbp_free(priv);
-	dpbp_disable(priv->mc_io, priv->dpbp_dev->mc_handle);
-	dpbp_close(priv->mc_io, priv->dpbp_dev->mc_handle);
+	dpbp_disable(priv->mc_io, 0, priv->dpbp_dev->mc_handle);
+	dpbp_close(priv->mc_io, 0, priv->dpbp_dev->mc_handle);
 	fsl_mc_object_free(priv->dpbp_dev);
 }
 
@@ -1531,7 +1533,7 @@ static int __cold ldpaa_dpni_setup(struct fsl_mc_device *ls_dev)
 	priv->dpni_id = ls_dev->obj_desc.id;
 
 	/* and get a handle for the DPNI this interface is associate with */
-	err = dpni_open(priv->mc_io, priv->dpni_id, &priv->mc_token);
+	err = dpni_open(priv->mc_io, 0, priv->dpni_id, &priv->mc_token);
 	if (err) {
 		dev_err(dev, "dpni_open() failed\n");
 		goto err_open;
@@ -1540,7 +1542,7 @@ static int __cold ldpaa_dpni_setup(struct fsl_mc_device *ls_dev)
 	/* FIXME Alex's moral compass says this must be done */
 	ls_dev->mc_io = priv->mc_io;
 	ls_dev->mc_handle = priv->mc_token;
-	err = dpni_get_attributes(priv->mc_io, priv->mc_token,
+	err = dpni_get_attributes(priv->mc_io, 0, priv->mc_token,
 				  &priv->dpni_attrs);
 	if (err) {
 		dev_err(dev, "dpni_get_attributes() failed (err=%d)\n", err);
@@ -1555,7 +1557,7 @@ static int __cold ldpaa_dpni_setup(struct fsl_mc_device *ls_dev)
 	priv->buf_layout.pass_frame_status = true;
 	priv->buf_layout.private_data_size = LDPAA_ETH_SWA_SIZE;
 	/* ...rx, ... */
-	err = dpni_set_rx_buffer_layout(priv->mc_io, priv->mc_token,
+	err = dpni_set_rx_buffer_layout(priv->mc_io, 0, priv->mc_token,
 					&priv->buf_layout);
 	if (err) {
 		dev_err(dev, "dpni_set_rx_buffer_layout() failed");
@@ -1563,7 +1565,7 @@ static int __cold ldpaa_dpni_setup(struct fsl_mc_device *ls_dev)
 	}
 	/* ... tx, ... */
 	priv->buf_layout.options &= ~DPNI_BUF_LAYOUT_OPT_PARSER_RESULT;
-	err = dpni_set_tx_buffer_layout(priv->mc_io, priv->mc_token,
+	err = dpni_set_tx_buffer_layout(priv->mc_io, 0, priv->mc_token,
 					&priv->buf_layout);
 	if (err) {
 		dev_err(dev, "dpni_set_tx_buffer_layout() failed");
@@ -1571,7 +1573,7 @@ static int __cold ldpaa_dpni_setup(struct fsl_mc_device *ls_dev)
 	}
 	/* ... tx-confirm. */
 	priv->buf_layout.options &= ~DPNI_BUF_LAYOUT_OPT_PRIVATE_DATA_SIZE;
-	err = dpni_set_tx_conf_buffer_layout(priv->mc_io, priv->mc_token,
+	err = dpni_set_tx_conf_buffer_layout(priv->mc_io, 0, priv->mc_token,
 					     &priv->buf_layout);
 	if (err) {
 		dev_err(dev, "dpni_set_tx_conf_buffer_layout() failed");
@@ -1580,7 +1582,7 @@ static int __cold ldpaa_dpni_setup(struct fsl_mc_device *ls_dev)
 	/* Now that we've set our tx buffer layout, retrieve the minimum
 	 * required tx data offset.
 	 */
-	err = dpni_get_tx_data_offset(priv->mc_io, priv->mc_token,
+	err = dpni_get_tx_data_offset(priv->mc_io, 0, priv->mc_token,
 				      &priv->tx_data_offset);
 	if (err) {
 		dev_err(dev, "dpni_get_tx_data_offset() failed\n");
@@ -1604,7 +1606,7 @@ static int __cold ldpaa_dpni_setup(struct fsl_mc_device *ls_dev)
 err_data_offset:
 err_buf_layout:
 err_get_attr:
-	dpni_close(priv->mc_io, priv->mc_token);
+	dpni_close(priv->mc_io, 0, priv->mc_token);
 err_open:
 	return err;
 }
@@ -1613,12 +1615,12 @@ static void ldpaa_dpni_free(struct ldpaa_eth_priv *priv)
 {
 	int err;
 
-	err = dpni_reset(priv->mc_io, priv->mc_token);
+	err = dpni_reset(priv->mc_io, 0, priv->mc_token);
 	if (unlikely(err))
 		netdev_warn(priv->net_dev, "dpni_reset() failed (err %d)\n",
 			    err);
 
-	dpni_close(priv->mc_io, priv->mc_token);
+	dpni_close(priv->mc_io, 0, priv->mc_token);
 }
 
 static int ldpaa_rx_flow_setup(struct ldpaa_eth_priv *priv,
@@ -1634,7 +1636,7 @@ static int ldpaa_rx_flow_setup(struct ldpaa_eth_priv *priv,
 	queue_cfg.dest_cfg.priority = 3;
 	queue_cfg.user_ctx = fq->nctx.qman64;
 	queue_cfg.dest_cfg.dest_id = fq->nctx.dpio_id;
-	err = dpni_set_rx_flow(priv->mc_io, priv->mc_token, 0, fq->flowid,
+	err = dpni_set_rx_flow(priv->mc_io, 0, priv->mc_token, 0, fq->flowid,
 			       &queue_cfg);
 	if (unlikely(err)) {
 		netdev_err(priv->net_dev, "dpni_set_rx_flow() failed\n");
@@ -1642,7 +1644,7 @@ static int ldpaa_rx_flow_setup(struct ldpaa_eth_priv *priv,
 	}
 
 	/* Get the actual FQID that was assigned by MC */
-	err = dpni_get_rx_flow(priv->mc_io, priv->mc_token, 0, fq->flowid,
+	err = dpni_get_rx_flow(priv->mc_io, 0, priv->mc_token, 0, fq->flowid,
 			       &rx_queue_attr);
 	if (unlikely(err)) {
 		netdev_err(priv->net_dev, "dpni_get_rx_flow() failed\n");
@@ -1672,14 +1674,14 @@ static int ldpaa_tx_flow_setup(struct ldpaa_eth_priv *priv,
 	queue_cfg.dest_cfg.dest_id = fq->nctx.dpio_id;
 	queue_cfg.dest_cfg.priority = 3;
 	tx_flow_cfg.conf_err_cfg.queue_cfg = queue_cfg;
-	err = dpni_set_tx_flow(priv->mc_io, priv->mc_token,
+	err = dpni_set_tx_flow(priv->mc_io, 0, priv->mc_token,
 			       &fq->flowid, &tx_flow_cfg);
 	if (unlikely(err)) {
 		netdev_err(priv->net_dev, "dpni_set_tx_flow() failed\n");
 		return err;
 	}
 
-	err = dpni_get_tx_flow(priv->mc_io, priv->mc_token,
+	err = dpni_get_tx_flow(priv->mc_io, 0, priv->mc_token,
 			       fq->flowid, &tx_flow_attr);
 	if (unlikely(err)) {
 		netdev_err(priv->net_dev, "dpni_get_tx_flow() failed\n");
@@ -1737,7 +1739,7 @@ static int ldpaa_dpni_bind(struct ldpaa_eth_priv *priv)
 	pools_params.num_dpbp = 1;
 	pools_params.pools[0].dpbp_id = priv->dpbp_dev->obj_desc.id;
 	pools_params.pools[0].buffer_size = LDPAA_ETH_RX_BUFFER_SIZE;
-	err = dpni_set_pools(priv->mc_io, priv->mc_token, &pools_params);
+	err = dpni_set_pools(priv->mc_io, 0, priv->mc_token, &pools_params);
 	if (unlikely(err)) {
 		dev_err(dev, "dpni_set_pools() failed\n");
 		return err;
@@ -1762,7 +1764,8 @@ static int ldpaa_dpni_bind(struct ldpaa_eth_priv *priv)
 #else
 	err_cfg.error_action = DPNI_ERROR_ACTION_DISCARD;
 #endif
-	err = dpni_set_errors_behavior(priv->mc_io, priv->mc_token, &err_cfg);
+	err = dpni_set_errors_behavior(priv->mc_io, 0, priv->mc_token,
+				       &err_cfg);
 	if (unlikely(err)) {
 		netdev_err(priv->net_dev, "dpni_set_errors_behavior failed\n");
 		return err;
@@ -1791,7 +1794,7 @@ static int ldpaa_dpni_bind(struct ldpaa_eth_priv *priv)
 			return err;
 	}
 
-	err = dpni_get_qdid(priv->mc_io, priv->mc_token, &priv->tx_qdid);
+	err = dpni_get_qdid(priv->mc_io, 0, priv->mc_token, &priv->tx_qdid);
 	if (unlikely(err)) {
 		netdev_err(net_dev, "dpni_get_qdid() failed\n");
 		return err;
@@ -1842,7 +1845,8 @@ static int ldpaa_eth_netdev_init(struct net_device *net_dev)
 	net_dev->netdev_ops = &ldpaa_eth_ops;
 
 	/* If the DPL contains all-0 mac_addr, set a random hardware address */
-	err = dpni_get_primary_mac_addr(priv->mc_io, priv->mc_token, mac_addr);
+	err = dpni_get_primary_mac_addr(priv->mc_io, 0, priv->mc_token,
+					mac_addr);
 	if (unlikely(err)) {
 		netdev_err(net_dev, "dpni_get_primary_mac_addr() failed (%d)",
 			   err);
@@ -1855,7 +1859,7 @@ static int ldpaa_eth_netdev_init(struct net_device *net_dev)
 		eth_hw_addr_random(net_dev);
 		netdev_info(net_dev, "Replacing all-zero hwaddr with %pM",
 			    net_dev->dev_addr);
-		err = dpni_set_primary_mac_addr(priv->mc_io, priv->mc_token,
+		err = dpni_set_primary_mac_addr(priv->mc_io, 0, priv->mc_token,
 						net_dev->dev_addr);
 		if (unlikely(err)) {
 			netdev_err(net_dev,
@@ -1896,7 +1900,7 @@ static int ldpaa_link_state_update(struct ldpaa_eth_priv *priv)
 	struct dpni_link_state state;
 	int err;
 
-	err = dpni_get_link_state(priv->mc_io, priv->mc_token, &state);
+	err = dpni_get_link_state(priv->mc_io, 0, priv->mc_token, &state);
 	if (unlikely(err)) {
 		netdev_err(priv->net_dev,
 			   "dpni_get_link_state() failed\n");
@@ -1959,7 +1963,7 @@ static irqreturn_t dpni_irq0_handler_thread(int irq_num, void *arg)
 	if (WARN_ON(dpni_dev->irqs[irq_index]->irq_number != irq_num))
 		goto out;
 
-	err = dpni_get_irq_status(dpni_dev->mc_io, dpni_dev->mc_handle,
+	err = dpni_get_irq_status(dpni_dev->mc_io, 0, dpni_dev->mc_handle,
 				  irq_index, &status);
 	if (unlikely(err)) {
 		netdev_err(net_dev, "Can't get irq status (err %d)", err);
@@ -1973,7 +1977,7 @@ static irqreturn_t dpni_irq0_handler_thread(int irq_num, void *arg)
 	}
 
 out:
-	dpni_clear_irq_status(dpni_dev->mc_io, dpni_dev->mc_handle,
+	dpni_clear_irq_status(dpni_dev->mc_io, 0, dpni_dev->mc_handle,
 			      irq_index, clear);
 	return IRQ_HANDLED;
 }
@@ -1982,6 +1986,7 @@ static int ldpaa_eth_setup_irqs(struct fsl_mc_device *ls_dev)
 {
 	int err = 0;
 	struct fsl_mc_device_irq *irq;
+	struct dpni_irq_cfg irq_cfg;
 	int irq_count = ls_dev->obj_desc.irq_count;
 	uint8_t irq_index = DPNI_IRQ_INDEX;
 	uint32_t mask = ~0x0u;
@@ -2001,22 +2006,24 @@ static int ldpaa_eth_setup_irqs(struct fsl_mc_device *ls_dev)
 		return err;
 	}
 
-	err = dpni_set_irq(ls_dev->mc_io, ls_dev->mc_handle,
-			   irq_index, irq->msi_paddr,
-			   irq->msi_value, irq->irq_number);
+	irq_cfg.addr = irq->msi_paddr;
+	irq_cfg.val = irq->msi_value;
+	irq_cfg.user_irq_id = irq->irq_number;
+	err = dpni_set_irq(ls_dev->mc_io, 0, ls_dev->mc_handle,
+			   irq_index, &irq_cfg);
 	if (err < 0) {
 		dev_err(&ls_dev->dev, "dpni_set_irq(): %d", err);
 		return err;
 	}
 
-	err = dpni_set_irq_mask(ls_dev->mc_io, ls_dev->mc_handle,
+	err = dpni_set_irq_mask(ls_dev->mc_io, 0, ls_dev->mc_handle,
 				irq_index, mask);
 	if (err < 0) {
 		dev_err(&ls_dev->dev, "dpni_set_irq_mask(): %d", err);
 		return err;
 	}
 
-	err = dpni_set_irq_enable(ls_dev->mc_io, ls_dev->mc_handle,
+	err = dpni_set_irq_enable(ls_dev->mc_io, 0, ls_dev->mc_handle,
 				  irq_index, 1);
 	if (err < 0) {
 		dev_err(&ls_dev->dev, "dpni_set_irq_enable(): %d", err);
@@ -2116,7 +2123,7 @@ static ssize_t ldpaa_eth_write_txconf_cpumask(struct device *dev,
 		queue_cfg.dest_cfg.dest_id = priv->fq[i].nctx.dpio_id;
 		queue_cfg.dest_cfg.priority = 2;
 		tx_flow_cfg.conf_err_cfg.queue_cfg = queue_cfg;
-		err = dpni_set_tx_flow(priv->mc_io, priv->mc_token,
+		err = dpni_set_tx_flow(priv->mc_io, 0, priv->mc_token,
 				       &priv->fq[i].flowid, &tx_flow_cfg);
 		if (unlikely(err)) {
 			netdev_err(priv->net_dev,
@@ -2124,7 +2131,7 @@ static ssize_t ldpaa_eth_write_txconf_cpumask(struct device *dev,
 			return -EPERM;
 		}
 
-		err = dpni_get_tx_flow(priv->mc_io, priv->mc_token,
+		err = dpni_get_tx_flow(priv->mc_io, 0, priv->mc_token,
 				       priv->fq[i].flowid, &tx_flow_attr);
 		if (unlikely(err)) {
 			netdev_err(priv->net_dev,
@@ -2279,7 +2286,7 @@ ldpaa_eth_probe(struct fsl_mc_device *dpni_dev)
 	 * the MC won't do that for us.
 	 */
 	eth_broadcast_addr(bcast_addr);
-	err = dpni_add_mac_addr(priv->mc_io, priv->mc_token, bcast_addr);
+	err = dpni_add_mac_addr(priv->mc_io, 0, priv->mc_token, bcast_addr);
 	if (err) {
 		netdev_warn(net_dev,
 			    "dpni_add_mac_addr() failed with code %d\n", err);
@@ -2345,7 +2352,7 @@ err_alloc_bp_count:
 err_dpio_setup:
 	ldpaa_eth_napi_del(priv);
 	kfree(priv->cls_rule);
-	dpni_close(priv->mc_io, priv->mc_token);
+	dpni_close(priv->mc_io, 0, priv->mc_token);
 err_dpni_setup:
 #ifndef CONFIG_FSL_DPAA2_ETH_LINK_POLL
 	fsl_mc_free_irqs(dpni_dev);
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
index 57099e0..33cc38a 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
@@ -108,7 +108,7 @@ static int __cold ldpaa_get_settings(struct net_device *net_dev,
 	int err = 0;
 	struct ldpaa_eth_priv *priv = netdev_priv(net_dev);
 
-	err = dpni_get_link_state(priv->mc_io, priv->mc_token, &state);
+	err = dpni_get_link_state(priv->mc_io, 0, priv->mc_token, &state);
 	if (unlikely(err)) {
 		netdev_err(net_dev, "ERROR %d getting link state", err);
 		goto out;
@@ -143,7 +143,7 @@ static int __cold ldpaa_set_settings(struct net_device *net_dev,
 	else
 		cfg.options &= ~DPNI_LINK_OPT_HALF_DUPLEX;
 
-	err = dpni_set_link_cfg(priv->mc_io, priv->mc_token, &cfg);
+	err = dpni_set_link_cfg(priv->mc_io, 0, priv->mc_token, &cfg);
 	if (unlikely(err))
 		netdev_err(net_dev, "ERROR %d setting link cfg", err);
 
@@ -206,7 +206,7 @@ static void ldpaa_get_ethtool_stats(struct net_device *net_dev,
 
 	/* Print standard counters, from DPNI statistics */
 	for (i = 0; i < DPNI_CNT_NUM_STATS; i++) {
-		err = dpni_get_counter(priv->mc_io, priv->mc_token, i,
+		err = dpni_get_counter(priv->mc_io, 0, priv->mc_token, i,
 				       data + i);
 		if (err != 0)
 			netdev_warn(net_dev, "Err %d getting DPNI counter %d",
@@ -464,7 +464,7 @@ int ldpaa_set_hash(struct net_device *net_dev, u64 flags)
 		dist_cfg.dist_mode = DPNI_DIST_MODE_HASH;
 	}
 
-	err = dpni_set_rx_tc_dist(priv->mc_io, priv->mc_token, 0, &dist_cfg);
+	err = dpni_set_rx_tc_dist(priv->mc_io, 0, priv->mc_token, 0, &dist_cfg);
 	dma_unmap_single(net_dev->dev.parent, dist_cfg.key_cfg_iova,
 			 LDPAA_CLASSIFIER_DMA_SIZE, DMA_TO_DEVICE);
 	kfree(dma_mem);
@@ -684,10 +684,10 @@ static int ldpaa_do_cls(struct net_device *net_dev,
 
 	/* TODO: no way to control rule order in firmware! */
 	if (add)
-		err = dpni_add_fs_entry(priv->mc_io, priv->mc_token, 0,
+		err = dpni_add_fs_entry(priv->mc_io, 0, priv->mc_token, 0,
 					&rule_cfg, (u16)fs->ring_cookie);
 	else
-		err = dpni_remove_fs_entry(priv->mc_io, priv->mc_token, 0,
+		err = dpni_remove_fs_entry(priv->mc_io, 0, priv->mc_token, 0,
 					   &rule_cfg);
 
 	dma_unmap_single(net_dev->dev.parent, rule_cfg.mask_iova,
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpni-cmd.h b/drivers/staging/fsl-dpaa2/ethernet/dpni-cmd.h
index 08f25af..8d2b25d 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpni-cmd.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpni-cmd.h
@@ -37,7 +37,7 @@
 
 /* DPNI Version */
 #define DPNI_VER_MAJOR				5
-#define DPNI_VER_MINOR				0
+#define DPNI_VER_MINOR				1
 
 /* Command IDs */
 #define DPNI_CMDID_OPEN				0x801
@@ -72,9 +72,10 @@
 #define DPNI_CMDID_SET_L4_CHKSUM_VALIDATION	0x209
 #define DPNI_CMDID_GET_L4_CHKSUM_VALIDATION	0x20A
 #define DPNI_CMDID_SET_ERRORS_BEHAVIOR		0x20B
+#define DPNI_CMDID_SET_TX_CONF_REVOKE		0x20C
 
 #define DPNI_CMDID_GET_QDID			0x210
-#define DPNI_CMDID_GET_SPID			0x211
+#define DPNI_CMDID_GET_SP_INFO			0x211
 #define DPNI_CMDID_GET_TX_DATA_OFFSET		0x212
 #define DPNI_CMDID_GET_COUNTER			0x213
 #define DPNI_CMDID_SET_COUNTER			0x214
@@ -83,7 +84,8 @@
 #define DPNI_CMDID_GET_MAX_FRAME_LENGTH		0x217
 #define DPNI_CMDID_SET_MTU			0x218
 #define DPNI_CMDID_GET_MTU			0x219
-#define DPNI_CMDID_SET_LINK_CFG		0x21A
+#define DPNI_CMDID_SET_LINK_CFG			0x21A
+#define DPNI_CMDID_SET_TX_SHAPING		0x21B
 
 #define DPNI_CMDID_SET_MCAST_PROMISC		0x220
 #define DPNI_CMDID_GET_MCAST_PROMISC		0x221
@@ -124,6 +126,8 @@
 #define DPNI_CMDID_SET_IPR			0x249
 #define DPNI_CMDID_SET_IPF			0x24A
 
+#define DPNI_CMDID_SET_TX_SELECTION			0x250
+
 /*                cmd, param, offset, width, type, arg_name */
 #define DPNI_CMD_OPEN(cmd, dpni_id) \
 	MC_CMD_OP(cmd,	 0,	0,	32,	int,	dpni_id)
@@ -173,6 +177,14 @@ do { \
 #define DPNI_CMD_SET_POOLS(cmd, cfg) \
 do { \
 	MC_CMD_OP(cmd, 0, 0,  8,  uint8_t,  cfg->num_dpbp); \
+	MC_CMD_OP(cmd, 0, 8,  1,  int,      cfg->pools[0].backup_pool); \
+	MC_CMD_OP(cmd, 0, 9,  1,  int,      cfg->pools[1].backup_pool); \
+	MC_CMD_OP(cmd, 0, 10, 1,  int,      cfg->pools[2].backup_pool); \
+	MC_CMD_OP(cmd, 0, 11, 1,  int,      cfg->pools[3].backup_pool); \
+	MC_CMD_OP(cmd, 0, 12, 1,  int,      cfg->pools[4].backup_pool); \
+	MC_CMD_OP(cmd, 0, 13, 1,  int,      cfg->pools[5].backup_pool); \
+	MC_CMD_OP(cmd, 0, 14, 1,  int,      cfg->pools[6].backup_pool); \
+	MC_CMD_OP(cmd, 0, 15, 1,  int,      cfg->pools[7].backup_pool); \
 	MC_CMD_OP(cmd, 0, 32, 32, int,      cfg->pools[0].dpbp_id); \
 	MC_CMD_OP(cmd, 4, 32, 16, uint16_t, cfg->pools[0].buffer_size);\
 	MC_CMD_OP(cmd, 1, 0,  32, int,      cfg->pools[1].dpbp_id); \
@@ -196,12 +208,12 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  1,  int,	    en)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPNI_CMD_SET_IRQ(cmd, irq_index, irq_addr, irq_val, user_irq_id) \
+#define DPNI_CMD_SET_IRQ(cmd, irq_index, irq_cfg) \
 do { \
-	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, irq_val); \
+	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, irq_cfg->val); \
 	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index); \
-	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_addr); \
-	MC_CMD_OP(cmd, 2, 0,  32, int,	     user_irq_id); \
+	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr); \
+	MC_CMD_OP(cmd, 2, 0,  32, int,	    irq_cfg->user_irq_id); \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -209,11 +221,11 @@ do { \
 	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPNI_RSP_GET_IRQ(cmd, type, irq_addr, irq_val, user_irq_id) \
+#define DPNI_RSP_GET_IRQ(cmd, type, irq_cfg) \
 do { \
-	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_val); \
-	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_addr); \
-	MC_RSP_OP(cmd, 2, 0,  32, int,      user_irq_id); \
+	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_cfg->val); \
+	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr); \
+	MC_RSP_OP(cmd, 2, 0,  32, int,      irq_cfg->user_irq_id); \
 	MC_RSP_OP(cmd, 2, 32, 32, int,	    type); \
 } while (0)
 
@@ -404,8 +416,11 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, qdid)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPNI_RSP_GET_SPID(cmd, spid) \
-	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, spid)
+#define DPNI_RSP_GET_SP_INFO(cmd, sp_info) \
+do { \
+	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, sp_info->spids[0]); \
+	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, sp_info->spids[1]); \
+} while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
 #define DPNI_RSP_GET_TX_DATA_OFFSET(cmd, data_offset) \
@@ -442,6 +457,13 @@ do { \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
+#define DPNI_CMD_SET_TX_SHAPING(cmd, tx_shaper) \
+do { \
+	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, tx_shaper->max_burst_size);\
+	MC_CMD_OP(cmd, 1, 0,  32, uint32_t, tx_shaper->rate_limit);\
+} while (0)
+
+/*                cmd, param, offset, width, type, arg_name */
 #define DPNI_CMD_SET_MAX_FRAME_LENGTH(cmd, max_frame_length) \
 	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, max_frame_length)
 
@@ -544,6 +566,35 @@ do { \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
+#define DPNI_CMD_SET_TX_SELECTION(cmd, cfg) \
+do { \
+	MC_CMD_OP(cmd, 0, 0,  16,  uint16_t, cfg->tc_sched[0].delta_bandwidth);\
+	MC_CMD_OP(cmd, 0, 16,  4,  enum dpni_tx_schedule_mode, \
+				cfg->tc_sched[0].mode); \
+	MC_CMD_OP(cmd, 0, 32, 16,  uint16_t, cfg->tc_sched[1].delta_bandwidth);\
+	MC_CMD_OP(cmd, 0, 48, 4,  enum dpni_tx_schedule_mode, \
+				cfg->tc_sched[1].mode); \
+	MC_CMD_OP(cmd, 1, 0,  16,  uint16_t, cfg->tc_sched[2].delta_bandwidth);\
+	MC_CMD_OP(cmd, 1, 16,  4,  enum dpni_tx_schedule_mode, \
+				cfg->tc_sched[2].mode); \
+	MC_CMD_OP(cmd, 1, 32, 16,  uint16_t, cfg->tc_sched[3].delta_bandwidth);\
+	MC_CMD_OP(cmd, 1, 48, 4,  enum dpni_tx_schedule_mode, \
+				cfg->tc_sched[3].mode); \
+	MC_CMD_OP(cmd, 2, 0,  16,  uint16_t, cfg->tc_sched[4].delta_bandwidth);\
+	MC_CMD_OP(cmd, 2, 16,  4,  enum dpni_tx_schedule_mode, \
+				cfg->tc_sched[4].mode); \
+	MC_CMD_OP(cmd, 2, 32, 16,  uint16_t, cfg->tc_sched[5].delta_bandwidth);\
+	MC_CMD_OP(cmd, 2, 48, 4,  enum dpni_tx_schedule_mode, \
+				cfg->tc_sched[5].mode); \
+	MC_CMD_OP(cmd, 3, 0,  16,  uint16_t, cfg->tc_sched[6].delta_bandwidth);\
+	MC_CMD_OP(cmd, 3, 16,  4,  enum dpni_tx_schedule_mode, \
+				cfg->tc_sched[6].mode); \
+	MC_CMD_OP(cmd, 3, 32, 16,  uint16_t, cfg->tc_sched[7].delta_bandwidth);\
+	MC_CMD_OP(cmd, 3, 48, 4,  enum dpni_tx_schedule_mode, \
+				cfg->tc_sched[7].mode); \
+} while (0)
+
+/*                cmd, param, offset, width, type, arg_name */
 #define DPNI_CMD_SET_RX_TC_DIST(cmd, tc_id, cfg) \
 do { \
 	MC_CMD_OP(cmd, 0, 0,  8,  uint8_t,  cfg->dist_size); \
@@ -611,10 +662,11 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  32, int,      cfg->dest_cfg.dest_id); \
 	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  cfg->dest_cfg.priority);\
 	MC_CMD_OP(cmd, 0, 40, 2,  enum dpni_dest, cfg->dest_cfg.dest_type);\
+	MC_CMD_OP(cmd, 0, 42, 1,  int,      cfg->order_preservation_en);\
 	MC_CMD_OP(cmd, 0, 48, 16, uint16_t, flow_id); \
 	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, cfg->user_ctx); \
 	MC_CMD_OP(cmd, 2, 16, 8,  uint8_t,  tc_id); \
-	MC_CMD_OP(cmd, 2, 32,  32, uint32_t, cfg->options); \
+	MC_CMD_OP(cmd, 2, 32, 32, uint32_t, cfg->options); \
 	MC_CMD_OP(cmd, 3, 0,  4,  enum dpni_flc_type, cfg->flc_cfg.flc_type); \
 	MC_CMD_OP(cmd, 3, 4,  4,  enum dpni_stash_size, \
 		cfg->flc_cfg.frame_data_size);\
@@ -637,6 +689,7 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  32, int,      attr->dest_cfg.dest_id); \
 	MC_RSP_OP(cmd, 0, 32, 8,  uint8_t,  attr->dest_cfg.priority);\
 	MC_RSP_OP(cmd, 0, 40, 2,  enum dpni_dest, attr->dest_cfg.dest_type); \
+	MC_CMD_OP(cmd, 0, 42, 1,  int,      attr->order_preservation_en);\
 	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, attr->user_ctx); \
 	MC_RSP_OP(cmd, 2, 32, 32, uint32_t, attr->fqid); \
 	MC_RSP_OP(cmd, 3, 0,  4,  enum dpni_flc_type, attr->flc_cfg.flc_type); \
@@ -654,6 +707,7 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  32, int,      cfg->dest_cfg.dest_id); \
 	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  cfg->dest_cfg.priority);\
 	MC_CMD_OP(cmd, 0, 40, 2,  enum dpni_dest, cfg->dest_cfg.dest_type);\
+	MC_CMD_OP(cmd, 0, 42, 1,  int,      cfg->order_preservation_en);\
 	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, cfg->user_ctx); \
 	MC_CMD_OP(cmd, 2, 0,  32, uint32_t, cfg->options); \
 	MC_CMD_OP(cmd, 3, 0,  4,  enum dpni_flc_type, cfg->flc_cfg.flc_type); \
@@ -671,6 +725,7 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  32, int,      attr->dest_cfg.dest_id); \
 	MC_RSP_OP(cmd, 0, 32, 8,  uint8_t,  attr->dest_cfg.priority);\
 	MC_RSP_OP(cmd, 0, 40, 2,  enum dpni_dest, attr->dest_cfg.dest_type);\
+	MC_CMD_OP(cmd, 0, 42, 1,  int,      attr->order_preservation_en);\
 	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, attr->user_ctx); \
 	MC_RSP_OP(cmd, 2, 32, 32, uint32_t, attr->fqid); \
 	MC_RSP_OP(cmd, 3, 0,  4,  enum dpni_flc_type, attr->flc_cfg.flc_type); \
@@ -703,6 +758,10 @@ do { \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
+#define DPNI_CMD_SET_TX_CONF_REVOKE(cmd, revoke) \
+	MC_CMD_OP(cmd, 0, 0,  1,  int,      revoke)
+
+/*                cmd, param, offset, width, type, arg_name */
 #define DPNI_CMD_SET_QOS_TABLE(cmd, cfg) \
 do { \
 	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  cfg->default_tc); \
@@ -773,7 +832,7 @@ do { \
 	MC_CMD_OP(cmd, 0, 4,  4, enum dpni_policer_color, cfg->default_color); \
 	MC_CMD_OP(cmd, 0, 8,  4, enum dpni_policer_unit, cfg->units); \
 	MC_CMD_OP(cmd, 0, 16, 8,  uint8_t,  tc_id); \
-	MC_CMD_OP(cmd, 0, 32, 32, uint32_t,  cfg->options); \
+	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, cfg->options); \
 	MC_CMD_OP(cmd, 1, 0,  32, uint32_t, cfg->cir); \
 	MC_CMD_OP(cmd, 1, 32, 32, uint32_t, cfg->cbs); \
 	MC_CMD_OP(cmd, 2, 0,  32, uint32_t, cfg->eir); \
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpni.c b/drivers/staging/fsl-dpaa2/ethernet/dpni.c
index 19e4ef0..5a7f7ac 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpni.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpni.c
@@ -116,14 +116,18 @@ int dpni_prepare_key_cfg(struct dpkg_profile_cfg *cfg,
 	return 0;
 }
 
-int dpni_open(struct fsl_mc_io *mc_io, int dpni_id, uint16_t *token)
+int dpni_open(struct fsl_mc_io *mc_io,
+	      uint32_t cmd_flags,
+	      int dpni_id,
+	      uint16_t *token)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_OPEN,
-					  MC_CMD_PRI_LOW, 0);
+					  cmd_flags,
+					  0);
 	DPNI_CMD_OPEN(cmd, dpni_id);
 
 	/* send command to mc*/
@@ -137,19 +141,23 @@ int dpni_open(struct fsl_mc_io *mc_io, int dpni_id, uint16_t *token)
 	return 0;
 }
 
-int dpni_close(struct fsl_mc_io *mc_io, uint16_t token)
+int dpni_close(struct fsl_mc_io *mc_io,
+	       uint32_t cmd_flags,
+	       uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_CLOSE,
-					  MC_CMD_PRI_HIGH, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
 int dpni_create(struct fsl_mc_io *mc_io,
+		uint32_t cmd_flags,
 		const struct dpni_cfg *cfg,
 		uint16_t *token)
 {
@@ -158,7 +166,7 @@ int dpni_create(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_CREATE,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  0);
 	DPNI_CMD_CREATE(cmd, cfg);
 
@@ -173,13 +181,15 @@ int dpni_create(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
-int dpni_destroy(struct fsl_mc_io *mc_io, uint16_t token)
+int dpni_destroy(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
+		 uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_DESTROY,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -187,6 +197,7 @@ int dpni_destroy(struct fsl_mc_io *mc_io, uint16_t token)
 }
 
 int dpni_set_pools(struct fsl_mc_io *mc_io,
+		   uint32_t cmd_flags,
 		   uint16_t token,
 		   const struct dpni_pools_cfg *cfg)
 {
@@ -194,7 +205,7 @@ int dpni_set_pools(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_POOLS,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_SET_POOLS(cmd, cfg);
 
@@ -202,37 +213,45 @@ int dpni_set_pools(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_enable(struct fsl_mc_io *mc_io, uint16_t token)
+int dpni_enable(struct fsl_mc_io *mc_io,
+		uint32_t cmd_flags,
+		uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_ENABLE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_disable(struct fsl_mc_io *mc_io, uint16_t token)
+int dpni_disable(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
+		 uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_DISABLE,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_is_enabled(struct fsl_mc_io *mc_io, uint16_t token, int *en)
+int dpni_is_enabled(struct fsl_mc_io *mc_io,
+		    uint32_t cmd_flags,
+		    uint16_t token,
+		    int *en)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPNI_CMDID_IS_ENABLED, MC_CMD_PRI_LOW,
+	cmd.header = mc_encode_cmd_header(DPNI_CMDID_IS_ENABLED, cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -246,54 +265,52 @@ int dpni_is_enabled(struct fsl_mc_io *mc_io, uint16_t token, int *en)
 	return 0;
 }
 
-int dpni_reset(struct fsl_mc_io *mc_io, uint16_t token)
+int dpni_reset(struct fsl_mc_io *mc_io,
+	       uint32_t cmd_flags,
+	       uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_RESET,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-
-
-int dpni_set_irq(struct fsl_mc_io *mc_io,
-		 uint16_t token,
-		 uint8_t irq_index,
-		 uint64_t irq_addr,
-		 uint32_t irq_val,
-		 int user_irq_id)
+int dpni_set_irq(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
+		 uint16_t		token,
+		 uint8_t		irq_index,
+		 struct dpni_irq_cfg	*irq_cfg)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_IRQ,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
-	DPNI_CMD_SET_IRQ(cmd, irq_index, irq_addr, irq_val, user_irq_id);
+	DPNI_CMD_SET_IRQ(cmd, irq_index, irq_cfg);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-
-int dpni_get_irq(struct fsl_mc_io *mc_io,
-		 uint16_t token,
-		 uint8_t irq_index,
-		 int *type,
-		 uint64_t *irq_addr,
-		 uint32_t *irq_val,
-		 int *user_irq_id)
+int dpni_get_irq(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
+		 uint16_t		token,
+		 uint8_t		irq_index,
+		 int			*type,
+		 struct dpni_irq_cfg	*irq_cfg)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_IRQ,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_GET_IRQ(cmd, irq_index);
 
@@ -303,12 +320,13 @@ int dpni_get_irq(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPNI_RSP_GET_IRQ(cmd, *type, *irq_addr, *irq_val, *user_irq_id);
+	DPNI_RSP_GET_IRQ(cmd, *type, irq_cfg);
 
 	return 0;
 }
 
 int dpni_set_irq_enable(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			uint8_t irq_index,
 			uint8_t en)
@@ -317,7 +335,8 @@ int dpni_set_irq_enable(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_IRQ_ENABLE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_IRQ_ENABLE(cmd, irq_index, en);
 
 	/* send command to mc*/
@@ -325,6 +344,7 @@ int dpni_set_irq_enable(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_irq_enable(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			uint8_t irq_index,
 			uint8_t *en)
@@ -334,7 +354,8 @@ int dpni_get_irq_enable(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_IRQ_ENABLE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_GET_IRQ_ENABLE(cmd, irq_index);
 
 	/* send command to mc*/
@@ -349,6 +370,7 @@ int dpni_get_irq_enable(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_irq_mask(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
 		      uint16_t token,
 		      uint8_t irq_index,
 		      uint32_t mask)
@@ -357,7 +379,8 @@ int dpni_set_irq_mask(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_IRQ_MASK,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_IRQ_MASK(cmd, irq_index, mask);
 
 	/* send command to mc*/
@@ -365,6 +388,7 @@ int dpni_set_irq_mask(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_irq_mask(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
 		      uint16_t token,
 		      uint8_t irq_index,
 		      uint32_t *mask)
@@ -374,7 +398,8 @@ int dpni_get_irq_mask(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_IRQ_MASK,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_GET_IRQ_MASK(cmd, irq_index);
 
 	/* send command to mc*/
@@ -389,6 +414,7 @@ int dpni_get_irq_mask(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_irq_status(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			uint8_t irq_index,
 			uint32_t *status)
@@ -398,7 +424,8 @@ int dpni_get_irq_status(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_IRQ_STATUS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_GET_IRQ_STATUS(cmd, irq_index);
 
 	/* send command to mc*/
@@ -413,6 +440,7 @@ int dpni_get_irq_status(struct fsl_mc_io *mc_io,
 }
 
 int dpni_clear_irq_status(struct fsl_mc_io *mc_io,
+			  uint32_t cmd_flags,
 			  uint16_t token,
 			  uint8_t irq_index,
 			  uint32_t status)
@@ -421,7 +449,8 @@ int dpni_clear_irq_status(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_CLEAR_IRQ_STATUS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_CLEAR_IRQ_STATUS(cmd, irq_index, status);
 
 	/* send command to mc*/
@@ -429,6 +458,7 @@ int dpni_clear_irq_status(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_attributes(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			struct dpni_attr *attr)
 {
@@ -437,7 +467,7 @@ int dpni_get_attributes(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_ATTR,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -452,6 +482,7 @@ int dpni_get_attributes(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_errors_behavior(struct fsl_mc_io *mc_io,
+			     uint32_t cmd_flags,
 			     uint16_t token,
 			      struct dpni_error_cfg *cfg)
 {
@@ -459,7 +490,8 @@ int dpni_set_errors_behavior(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_ERRORS_BEHAVIOR,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_ERRORS_BEHAVIOR(cmd, cfg);
 
 	/* send command to mc*/
@@ -467,6 +499,7 @@ int dpni_set_errors_behavior(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_rx_buffer_layout(struct fsl_mc_io *mc_io,
+			      uint32_t cmd_flags,
 			      uint16_t token,
 			      struct dpni_buffer_layout *layout)
 {
@@ -475,7 +508,8 @@ int dpni_get_rx_buffer_layout(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_RX_BUFFER_LAYOUT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -489,6 +523,7 @@ int dpni_get_rx_buffer_layout(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_rx_buffer_layout(struct fsl_mc_io *mc_io,
+			      uint32_t cmd_flags,
 			      uint16_t token,
 			      const struct dpni_buffer_layout *layout)
 {
@@ -496,7 +531,8 @@ int dpni_set_rx_buffer_layout(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_RX_BUFFER_LAYOUT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_RX_BUFFER_LAYOUT(cmd, layout);
 
 	/* send command to mc*/
@@ -504,6 +540,7 @@ int dpni_set_rx_buffer_layout(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_tx_buffer_layout(struct fsl_mc_io *mc_io,
+			      uint32_t cmd_flags,
 			      uint16_t token,
 			      struct dpni_buffer_layout *layout)
 {
@@ -512,7 +549,8 @@ int dpni_get_tx_buffer_layout(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_TX_BUFFER_LAYOUT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -526,6 +564,7 @@ int dpni_get_tx_buffer_layout(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_tx_buffer_layout(struct fsl_mc_io *mc_io,
+			      uint32_t cmd_flags,
 			      uint16_t token,
 			      const struct dpni_buffer_layout *layout)
 {
@@ -533,7 +572,8 @@ int dpni_set_tx_buffer_layout(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_TX_BUFFER_LAYOUT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_TX_BUFFER_LAYOUT(cmd, layout);
 
 	/* send command to mc*/
@@ -541,6 +581,7 @@ int dpni_set_tx_buffer_layout(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_tx_conf_buffer_layout(struct fsl_mc_io *mc_io,
+				   uint32_t cmd_flags,
 				   uint16_t token,
 				   struct dpni_buffer_layout *layout)
 {
@@ -549,7 +590,8 @@ int dpni_get_tx_conf_buffer_layout(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_TX_CONF_BUFFER_LAYOUT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -563,6 +605,7 @@ int dpni_get_tx_conf_buffer_layout(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_tx_conf_buffer_layout(struct fsl_mc_io *mc_io,
+				   uint32_t cmd_flags,
 				   uint16_t token,
 				   const struct dpni_buffer_layout *layout)
 {
@@ -570,7 +613,8 @@ int dpni_set_tx_conf_buffer_layout(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_TX_CONF_BUFFER_LAYOUT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_TX_CONF_BUFFER_LAYOUT(cmd, layout);
 
 	/* send command to mc*/
@@ -578,6 +622,7 @@ int dpni_set_tx_conf_buffer_layout(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_l3_chksum_validation(struct fsl_mc_io *mc_io,
+				  uint32_t cmd_flags,
 				  uint16_t token,
 				  int *en)
 {
@@ -586,7 +631,7 @@ int dpni_get_l3_chksum_validation(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_L3_CHKSUM_VALIDATION,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -601,6 +646,7 @@ int dpni_get_l3_chksum_validation(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_l3_chksum_validation(struct fsl_mc_io *mc_io,
+				  uint32_t cmd_flags,
 				  uint16_t token,
 				  int en)
 {
@@ -608,7 +654,8 @@ int dpni_set_l3_chksum_validation(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_L3_CHKSUM_VALIDATION,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_L3_CHKSUM_VALIDATION(cmd, en);
 
 	/* send command to mc*/
@@ -616,6 +663,7 @@ int dpni_set_l3_chksum_validation(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_l4_chksum_validation(struct fsl_mc_io *mc_io,
+				  uint32_t cmd_flags,
 				  uint16_t token,
 				  int *en)
 {
@@ -624,7 +672,8 @@ int dpni_get_l4_chksum_validation(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_L4_CHKSUM_VALIDATION,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -638,6 +687,7 @@ int dpni_get_l4_chksum_validation(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_l4_chksum_validation(struct fsl_mc_io *mc_io,
+				  uint32_t cmd_flags,
 				  uint16_t token,
 				  int en)
 {
@@ -645,21 +695,25 @@ int dpni_set_l4_chksum_validation(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_L4_CHKSUM_VALIDATION,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_L4_CHKSUM_VALIDATION(cmd, en);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_get_qdid(struct fsl_mc_io *mc_io, uint16_t token, uint16_t *qdid)
+int dpni_get_qdid(struct fsl_mc_io *mc_io,
+		  uint32_t cmd_flags,
+		  uint16_t token,
+		  uint16_t *qdid)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_QDID,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -673,14 +727,17 @@ int dpni_get_qdid(struct fsl_mc_io *mc_io, uint16_t token, uint16_t *qdid)
 	return 0;
 }
 
-int dpni_get_spid(struct fsl_mc_io *mc_io, uint16_t token, uint16_t *spid)
+int dpni_get_sp_info(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
+		     uint16_t token,
+		     struct dpni_sp_info *sp_info)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_SPID,
-					  MC_CMD_PRI_LOW,
+	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_SP_INFO,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -689,12 +746,13 @@ int dpni_get_spid(struct fsl_mc_io *mc_io, uint16_t token, uint16_t *spid)
 		return err;
 
 	/* retrieve response parameters */
-	DPNI_RSP_GET_SPID(cmd, *spid);
+	DPNI_RSP_GET_SP_INFO(cmd, sp_info);
 
 	return 0;
 }
 
 int dpni_get_tx_data_offset(struct fsl_mc_io *mc_io,
+			    uint32_t cmd_flags,
 			    uint16_t token,
 			    uint16_t *data_offset)
 {
@@ -703,7 +761,8 @@ int dpni_get_tx_data_offset(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_TX_DATA_OFFSET,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -717,6 +776,7 @@ int dpni_get_tx_data_offset(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_counter(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
 		     uint16_t token,
 		     enum dpni_counter counter,
 		     uint64_t *value)
@@ -726,7 +786,8 @@ int dpni_get_counter(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_COUNTER,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_GET_COUNTER(cmd, counter);
 
 	/* send command to mc*/
@@ -741,6 +802,7 @@ int dpni_get_counter(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_counter(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
 		     uint16_t token,
 		     enum dpni_counter counter,
 		     uint64_t value)
@@ -749,7 +811,8 @@ int dpni_set_counter(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_COUNTER,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_COUNTER(cmd, counter, value);
 
 	/* send command to mc*/
@@ -757,14 +820,16 @@ int dpni_set_counter(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_link_cfg(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
 		      uint16_t token,
-		     const struct dpni_link_cfg *cfg)
+		      const struct dpni_link_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_LINK_CFG,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_LINK_CFG(cmd, cfg);
 
 	/* send command to mc*/
@@ -772,6 +837,7 @@ int dpni_set_link_cfg(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_link_state(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			struct dpni_link_state *state)
 {
@@ -780,7 +846,8 @@ int dpni_get_link_state(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_LINK_STATE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -793,14 +860,33 @@ int dpni_get_link_state(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
-int dpni_set_max_frame_length(struct fsl_mc_io *mc_io, uint16_t token,
+int dpni_set_tx_shaping(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
+			uint16_t token,
+			const struct dpni_tx_shaping_cfg *tx_shaper)
+{
+	struct mc_command cmd = { 0 };
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_TX_SHAPING,
+					  cmd_flags,
+					  token);
+	DPNI_CMD_SET_TX_SHAPING(cmd, tx_shaper);
+
+	/* send command to mc*/
+	return mc_send_command(mc_io, &cmd);
+}
+
+int dpni_set_max_frame_length(struct fsl_mc_io *mc_io,
+			      uint32_t cmd_flags,
+			      uint16_t token,
 			      uint16_t max_frame_length)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_MAX_FRAME_LENGTH,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_SET_MAX_FRAME_LENGTH(cmd, max_frame_length);
 
@@ -808,7 +894,9 @@ int dpni_set_max_frame_length(struct fsl_mc_io *mc_io, uint16_t token,
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_get_max_frame_length(struct fsl_mc_io *mc_io, uint16_t token,
+int dpni_get_max_frame_length(struct fsl_mc_io *mc_io,
+			      uint32_t cmd_flags,
+			      uint16_t token,
 			      uint16_t *max_frame_length)
 {
 	struct mc_command cmd = { 0 };
@@ -816,7 +904,7 @@ int dpni_get_max_frame_length(struct fsl_mc_io *mc_io, uint16_t token,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_MAX_FRAME_LENGTH,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -830,13 +918,16 @@ int dpni_get_max_frame_length(struct fsl_mc_io *mc_io, uint16_t token,
 	return 0;
 }
 
-int dpni_set_mtu(struct fsl_mc_io *mc_io, uint16_t token, uint16_t mtu)
+int dpni_set_mtu(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
+		 uint16_t token,
+		 uint16_t mtu)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_MTU,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_SET_MTU(cmd, mtu);
 
@@ -844,14 +935,17 @@ int dpni_set_mtu(struct fsl_mc_io *mc_io, uint16_t token, uint16_t mtu)
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_get_mtu(struct fsl_mc_io *mc_io, uint16_t token, uint16_t *mtu)
+int dpni_get_mtu(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
+		 uint16_t token,
+		 uint16_t *mtu)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_MTU,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -865,27 +959,35 @@ int dpni_get_mtu(struct fsl_mc_io *mc_io, uint16_t token, uint16_t *mtu)
 	return 0;
 }
 
-int dpni_set_multicast_promisc(struct fsl_mc_io *mc_io, uint16_t token, int en)
+int dpni_set_multicast_promisc(struct fsl_mc_io *mc_io,
+			       uint32_t cmd_flags,
+			       uint16_t token,
+			       int en)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_MCAST_PROMISC,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_MULTICAST_PROMISC(cmd, en);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_get_multicast_promisc(struct fsl_mc_io *mc_io, uint16_t token, int *en)
+int dpni_get_multicast_promisc(struct fsl_mc_io *mc_io,
+			       uint32_t cmd_flags,
+			       uint16_t token,
+			       int *en)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_MCAST_PROMISC,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -898,27 +1000,35 @@ int dpni_get_multicast_promisc(struct fsl_mc_io *mc_io, uint16_t token, int *en)
 	return 0;
 }
 
-int dpni_set_unicast_promisc(struct fsl_mc_io *mc_io, uint16_t token, int en)
+int dpni_set_unicast_promisc(struct fsl_mc_io *mc_io,
+			     uint32_t cmd_flags,
+			     uint16_t token,
+			     int en)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_UNICAST_PROMISC,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_UNICAST_PROMISC(cmd, en);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_get_unicast_promisc(struct fsl_mc_io *mc_io, uint16_t token, int *en)
+int dpni_get_unicast_promisc(struct fsl_mc_io *mc_io,
+			     uint32_t cmd_flags,
+			     uint16_t token,
+			     int *en)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_UNICAST_PROMISC,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -932,6 +1042,7 @@ int dpni_get_unicast_promisc(struct fsl_mc_io *mc_io, uint16_t token, int *en)
 }
 
 int dpni_set_primary_mac_addr(struct fsl_mc_io *mc_io,
+			      uint32_t cmd_flags,
 			      uint16_t token,
 			      const uint8_t mac_addr[6])
 {
@@ -939,7 +1050,8 @@ int dpni_set_primary_mac_addr(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_PRIM_MAC,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_PRIMARY_MAC_ADDR(cmd, mac_addr);
 
 	/* send command to mc*/
@@ -947,6 +1059,7 @@ int dpni_set_primary_mac_addr(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_primary_mac_addr(struct fsl_mc_io *mc_io,
+			      uint32_t cmd_flags,
 			      uint16_t token,
 			      uint8_t mac_addr[6])
 {
@@ -955,7 +1068,8 @@ int dpni_get_primary_mac_addr(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_PRIM_MAC,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -969,6 +1083,7 @@ int dpni_get_primary_mac_addr(struct fsl_mc_io *mc_io,
 }
 
 int dpni_add_mac_addr(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
 		      uint16_t token,
 		      const uint8_t mac_addr[6])
 {
@@ -976,7 +1091,8 @@ int dpni_add_mac_addr(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_ADD_MAC_ADDR,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_ADD_MAC_ADDR(cmd, mac_addr);
 
 	/* send command to mc*/
@@ -984,6 +1100,7 @@ int dpni_add_mac_addr(struct fsl_mc_io *mc_io,
 }
 
 int dpni_remove_mac_addr(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
 			 const uint8_t mac_addr[6])
 {
@@ -991,47 +1108,60 @@ int dpni_remove_mac_addr(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_REMOVE_MAC_ADDR,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_REMOVE_MAC_ADDR(cmd, mac_addr);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_clear_mac_filters(struct fsl_mc_io *mc_io, uint16_t token, int unicast,
+int dpni_clear_mac_filters(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
+			   uint16_t token,
+			   int unicast,
 			   int multicast)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_CLR_MAC_FILTERS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_CLEAR_MAC_FILTERS(cmd, unicast, multicast);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_set_vlan_filters(struct fsl_mc_io *mc_io, uint16_t token, int en)
+int dpni_set_vlan_filters(struct fsl_mc_io *mc_io,
+			  uint32_t cmd_flags,
+			  uint16_t token,
+			  int en)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_VLAN_FILTERS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_VLAN_FILTERS(cmd, en);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_add_vlan_id(struct fsl_mc_io *mc_io, uint16_t token, uint16_t vlan_id)
+int dpni_add_vlan_id(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
+		     uint16_t token,
+		     uint16_t vlan_id)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_ADD_VLAN_ID,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_ADD_VLAN_ID(cmd, vlan_id);
 
 	/* send command to mc*/
@@ -1039,6 +1169,7 @@ int dpni_add_vlan_id(struct fsl_mc_io *mc_io, uint16_t token, uint16_t vlan_id)
 }
 
 int dpni_remove_vlan_id(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			uint16_t vlan_id)
 {
@@ -1046,26 +1177,31 @@ int dpni_remove_vlan_id(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_REMOVE_VLAN_ID,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_REMOVE_VLAN_ID(cmd, vlan_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_clear_vlan_filters(struct fsl_mc_io *mc_io, uint16_t token)
+int dpni_clear_vlan_filters(struct fsl_mc_io *mc_io,
+			    uint32_t cmd_flags,
+			    uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_CLR_VLAN_FILTERS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
 int dpni_set_tx_tc(struct fsl_mc_io *mc_io,
+		   uint32_t cmd_flags,
 		   uint16_t token,
 		   uint8_t tc_id,
 		   const struct dpni_tx_tc_cfg *cfg)
@@ -1074,7 +1210,7 @@ int dpni_set_tx_tc(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_TX_TC,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_SET_TX_TC(cmd, tc_id, cfg);
 
@@ -1082,7 +1218,25 @@ int dpni_set_tx_tc(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
+int dpni_set_tx_selection(struct fsl_mc_io			*mc_io,
+			  uint32_t				cmd_flags,
+			  uint16_t				token,
+			  const struct dpni_tx_selection_cfg	*cfg)
+{
+	struct mc_command cmd = { 0 };
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_TX_SELECTION,
+					  cmd_flags,
+					  token);
+	DPNI_CMD_SET_TX_SELECTION(cmd, cfg);
+
+	/* send command to mc*/
+	return mc_send_command(mc_io, &cmd);
+}
+
 int dpni_set_rx_tc_dist(struct fsl_mc_io *mc_io,
+			uint32_t cmd_flags,
 			uint16_t token,
 			uint8_t tc_id,
 			const struct dpni_rx_tc_dist_cfg *cfg)
@@ -1091,7 +1245,7 @@ int dpni_set_rx_tc_dist(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_RX_TC_DIST,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_SET_RX_TC_DIST(cmd, tc_id, cfg);
 
@@ -1100,6 +1254,7 @@ int dpni_set_rx_tc_dist(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_tx_flow(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
 		     uint16_t token,
 		     uint16_t *flow_id,
 		     const struct dpni_tx_flow_cfg *cfg)
@@ -1109,7 +1264,8 @@ int dpni_set_tx_flow(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_TX_FLOW,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_TX_FLOW(cmd, *flow_id, cfg);
 
 	/* send command to mc*/
@@ -1124,6 +1280,7 @@ int dpni_set_tx_flow(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_tx_flow(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
 		     uint16_t token,
 		     uint16_t flow_id,
 		     struct dpni_tx_flow_attr *attr)
@@ -1133,7 +1290,8 @@ int dpni_get_tx_flow(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_TX_FLOW,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_GET_TX_FLOW(cmd, flow_id);
 
 	/* send command to mc*/
@@ -1148,6 +1306,7 @@ int dpni_get_tx_flow(struct fsl_mc_io *mc_io,
 }
 
 int dpni_set_rx_flow(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
 		     uint16_t token,
 		     uint8_t tc_id,
 		     uint16_t flow_id,
@@ -1157,7 +1316,8 @@ int dpni_set_rx_flow(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_RX_FLOW,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_RX_FLOW(cmd, tc_id, flow_id, cfg);
 
 	/* send command to mc*/
@@ -1165,6 +1325,7 @@ int dpni_set_rx_flow(struct fsl_mc_io *mc_io,
 }
 
 int dpni_get_rx_flow(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
 		     uint16_t token,
 		     uint8_t tc_id,
 		     uint16_t flow_id,
@@ -1174,7 +1335,8 @@ int dpni_get_rx_flow(struct fsl_mc_io *mc_io,
 	int err;
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_RX_FLOW,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_GET_RX_FLOW(cmd, tc_id, flow_id);
 
 	/* send command to mc*/
@@ -1188,22 +1350,26 @@ int dpni_get_rx_flow(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
-
-int dpni_set_rx_err_queue(struct fsl_mc_io *mc_io, uint16_t token,
+int dpni_set_rx_err_queue(struct fsl_mc_io *mc_io,
+			  uint32_t cmd_flags,
+			  uint16_t token,
 			  const struct dpni_queue_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_RX_ERR_QUEUE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_RX_ERR_QUEUE(cmd, cfg);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_get_rx_err_queue(struct fsl_mc_io *mc_io, uint16_t token,
+int dpni_get_rx_err_queue(struct fsl_mc_io *mc_io,
+			  uint32_t cmd_flags,
+			  uint16_t token,
 			  struct dpni_queue_attr *attr)
 {
 	struct mc_command cmd = { 0 };
@@ -1211,7 +1377,7 @@ int dpni_get_rx_err_queue(struct fsl_mc_io *mc_io, uint16_t token,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_RX_ERR_QUEUE,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -1225,21 +1391,26 @@ int dpni_get_rx_err_queue(struct fsl_mc_io *mc_io, uint16_t token,
 	return 0;
 }
 
-int dpni_set_tx_conf_err_queue(struct fsl_mc_io *mc_io, uint16_t token,
+int dpni_set_tx_conf_err_queue(struct fsl_mc_io *mc_io,
+			       uint32_t cmd_flags,
+			       uint16_t token,
 			       const struct dpni_queue_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_TX_CONF_ERR_QUEUE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_TX_CONF_ERR_QUEUE(cmd, cfg);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_get_tx_conf_err_queue(struct fsl_mc_io *mc_io, uint16_t token,
+int dpni_get_tx_conf_err_queue(struct fsl_mc_io *mc_io,
+			       uint32_t cmd_flags,
+			       uint16_t token,
 			       struct dpni_queue_attr *attr)
 {
 	struct mc_command cmd = { 0 };
@@ -1247,7 +1418,7 @@ int dpni_get_tx_conf_err_queue(struct fsl_mc_io *mc_io, uint16_t token,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_GET_TX_CONF_ERR_QUEUE,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -1261,8 +1432,25 @@ int dpni_get_tx_conf_err_queue(struct fsl_mc_io *mc_io, uint16_t token,
 	return 0;
 }
 
+int dpni_set_tx_conf_revoke(struct fsl_mc_io	*mc_io,
+			    uint32_t		cmd_flags,
+			    uint16_t		token,
+			    int		revoke)
+{
+	struct mc_command cmd = { 0 };
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_TX_CONF_REVOKE,
+					  cmd_flags,
+					  token);
+	DPNI_CMD_SET_TX_CONF_REVOKE(cmd, revoke);
+
+	/* send command to mc*/
+	return mc_send_command(mc_io, &cmd);
+}
 
 int dpni_set_qos_table(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t token,
 		       const struct dpni_qos_tbl_cfg *cfg)
 {
@@ -1270,7 +1458,8 @@ int dpni_set_qos_table(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_QOS_TBL,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_SET_QOS_TABLE(cmd, cfg);
 
 	/* send command to mc*/
@@ -1278,6 +1467,7 @@ int dpni_set_qos_table(struct fsl_mc_io *mc_io,
 }
 
 int dpni_add_qos_entry(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t token,
 		       const struct dpni_rule_cfg *cfg,
 		       uint8_t tc_id)
@@ -1286,8 +1476,8 @@ int dpni_add_qos_entry(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_ADD_QOS_ENT,
-					  MC_CMD_PRI_LOW, token);
-
+					  cmd_flags,
+					  token);
 	DPNI_CMD_ADD_QOS_ENTRY(cmd, cfg, tc_id);
 
 	/* send command to mc*/
@@ -1295,6 +1485,7 @@ int dpni_add_qos_entry(struct fsl_mc_io *mc_io,
 }
 
 int dpni_remove_qos_entry(struct fsl_mc_io *mc_io,
+			  uint32_t cmd_flags,
 			  uint16_t token,
 			  const struct dpni_rule_cfg *cfg)
 {
@@ -1302,26 +1493,31 @@ int dpni_remove_qos_entry(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_REMOVE_QOS_ENT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_REMOVE_QOS_ENTRY(cmd, cfg);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_clear_qos_table(struct fsl_mc_io *mc_io, uint16_t token)
+int dpni_clear_qos_table(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
+			 uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_CLR_QOS_TBL,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
 int dpni_add_fs_entry(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
 		      uint16_t token,
 		      uint8_t tc_id,
 		      const struct dpni_rule_cfg *cfg,
@@ -1331,7 +1527,7 @@ int dpni_add_fs_entry(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_ADD_FS_ENT,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_ADD_FS_ENTRY(cmd, tc_id, cfg, flow_id);
 
@@ -1340,6 +1536,7 @@ int dpni_add_fs_entry(struct fsl_mc_io *mc_io,
 }
 
 int dpni_remove_fs_entry(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
 			 uint8_t tc_id,
 			 const struct dpni_rule_cfg *cfg)
@@ -1348,21 +1545,24 @@ int dpni_remove_fs_entry(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_REMOVE_FS_ENT,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPNI_CMD_REMOVE_FS_ENTRY(cmd, tc_id, cfg);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_clear_fs_entries(struct fsl_mc_io *mc_io, uint16_t token,
+int dpni_clear_fs_entries(struct fsl_mc_io *mc_io,
+			  uint32_t cmd_flags,
+			  uint16_t token,
 			  uint8_t tc_id)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_CLR_FS_ENT,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_CLEAR_FS_ENTRIES(cmd, tc_id);
 
@@ -1370,39 +1570,48 @@ int dpni_clear_fs_entries(struct fsl_mc_io *mc_io, uint16_t token,
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_set_vlan_insertion(struct fsl_mc_io *mc_io, uint16_t token, int en)
+int dpni_set_vlan_insertion(struct fsl_mc_io *mc_io,
+			    uint32_t cmd_flags,
+			    uint16_t token,
+			    int en)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_VLAN_INSERTION,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags, token);
 	DPNI_CMD_SET_VLAN_INSERTION(cmd, en);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_set_vlan_removal(struct fsl_mc_io *mc_io, uint16_t token, int en)
+int dpni_set_vlan_removal(struct fsl_mc_io *mc_io,
+			  uint32_t cmd_flags,
+			  uint16_t token,
+			  int en)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_VLAN_REMOVAL,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags, token);
 	DPNI_CMD_SET_VLAN_REMOVAL(cmd, en);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_set_ipr(struct fsl_mc_io *mc_io, uint16_t token, int en)
+int dpni_set_ipr(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
+		 uint16_t token,
+		 int en)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_IPR,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_SET_IPR(cmd, en);
 
@@ -1410,13 +1619,16 @@ int dpni_set_ipr(struct fsl_mc_io *mc_io, uint16_t token, int en)
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpni_set_ipf(struct fsl_mc_io *mc_io, uint16_t token, int en)
+int dpni_set_ipf(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
+		 uint16_t token,
+		 int en)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_IPF,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_SET_IPF(cmd, en);
 
@@ -1425,6 +1637,7 @@ int dpni_set_ipf(struct fsl_mc_io *mc_io, uint16_t token, int en)
 }
 
 int dpni_set_rx_tc_policing(struct fsl_mc_io	*mc_io,
+			    uint32_t		cmd_flags,
 			    uint16_t		token,
 			    uint8_t		tc_id,
 			    const struct dpni_rx_tc_policing_cfg *cfg)
@@ -1433,7 +1646,7 @@ int dpni_set_rx_tc_policing(struct fsl_mc_io	*mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_RX_TC_POLICING,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_SET_RX_TC_POLICING(cmd, tc_id, cfg);
 
@@ -1450,15 +1663,16 @@ void dpni_prepare_rx_tc_early_drop(const struct dpni_rx_tc_early_drop_cfg *cfg,
 }
 
 int dpni_set_rx_tc_early_drop(struct fsl_mc_io	*mc_io,
+			      uint32_t		cmd_flags,
 			      uint16_t		token,
-			    uint8_t		tc_id,
-			    uint64_t		early_drop_iova)
+			      uint8_t		tc_id,
+			      uint64_t		early_drop_iova)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPNI_CMDID_SET_RX_TC_EARLY_DROP,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPNI_CMD_SET_RX_TC_EARLY_DROP(cmd, tc_id, early_drop_iova);
 
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpni.h b/drivers/staging/fsl-dpaa2/ethernet/dpni.h
index 8703cc4..bfda601 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpni.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpni.h
@@ -34,19 +34,21 @@
 
 #include "dpkg.h"
 
+struct fsl_mc_io;
+
 /**
  * Data Path Network Interface API
  * Contains initialization APIs and runtime control APIs for DPNI
  */
 
-struct fsl_mc_io;
-
 /* General DPNI macros */
 
 /* Maximum number of traffic classes */
 #define DPNI_MAX_TC				8
 /* Maximum number of buffer pools per DPNI */
 #define DPNI_MAX_DPBP				8
+/* Maximum number of storage-profiles per DPNI */
+#define DPNI_MAX_SP				2
 
 /* All traffic classes considered; see dpni_set_rx_flow() */
 #define DPNI_ALL_TCS				(uint8_t)(-1)
@@ -58,6 +60,7 @@ struct fsl_mc_io;
 /**
  * dpni_open() - Open a control session for the specified object
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @dpni_id:	DPNI unique ID
  * @token:	Returned token; use in subsequent API calls
  *
@@ -71,11 +74,15 @@ struct fsl_mc_io;
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_open(struct fsl_mc_io *mc_io, int dpni_id, uint16_t *token);
+int dpni_open(struct fsl_mc_io	*mc_io,
+	      uint32_t		cmd_flags,
+	      int		dpni_id,
+	      uint16_t		*token);
 
 /**
  * dpni_close() - Close the control session of the object
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  *
  * After this function is called, no further operations are
@@ -83,7 +90,9 @@ int dpni_open(struct fsl_mc_io *mc_io, int dpni_id, uint16_t *token);
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_close(struct fsl_mc_io *mc_io, uint16_t token);
+int dpni_close(struct fsl_mc_io	*mc_io,
+	       uint32_t		cmd_flags,
+	       uint16_t		token);
 
 /* DPNI configuration options */
 
@@ -192,26 +201,27 @@ struct dpni_cfg {
 	 * @ipr_cfg: IP reassembly configuration
 	 */
 	struct {
-		uint32_t options;
-		enum net_prot start_hdr;
-		uint8_t max_senders;
-		uint8_t max_tcs;
-		uint8_t max_dist_per_tc[DPNI_MAX_TC];
-		uint8_t max_unicast_filters;
-		uint8_t max_multicast_filters;
-		uint8_t max_vlan_filters;
-		uint8_t max_qos_entries;
-		uint8_t max_qos_key_size;
-		uint8_t max_dist_key_size;
-		uint8_t max_policers;
-		uint8_t max_congestion_ctrl;
-		struct dpni_ipr_cfg ipr_cfg;
+		uint32_t		options;
+		enum net_prot		start_hdr;
+		uint8_t		max_senders;
+		uint8_t		max_tcs;
+		uint8_t			max_dist_per_tc[DPNI_MAX_TC];
+		uint8_t		max_unicast_filters;
+		uint8_t		max_multicast_filters;
+		uint8_t			max_vlan_filters;
+		uint8_t		max_qos_entries;
+		uint8_t		max_qos_key_size;
+		uint8_t		max_dist_key_size;
+		uint8_t		max_policers;
+		uint8_t		max_congestion_ctrl;
+		struct dpni_ipr_cfg	ipr_cfg;
 	} adv;
 };
 
 /**
  * dpni_create() - Create the DPNI object
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @cfg:	Configuration structure
  * @token:	Returned token; use in subsequent API calls
  *
@@ -231,17 +241,21 @@ struct dpni_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_create(struct fsl_mc_io	*mc_io,
+		uint32_t		cmd_flags,
 		const struct dpni_cfg	*cfg,
 		uint16_t		*token);
 
 /**
  * dpni_destroy() - Destroy the DPNI object and release all its resources.
- * @mc_io	Pointer to MC portal's I/O object
- * @token	Token of DPNI object
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPNI object
  *
  * Return:	'0' on Success; error code otherwise.
  */
-int dpni_destroy(struct fsl_mc_io *mc_io, uint16_t token);
+int dpni_destroy(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
+		 uint16_t		token);
 
 /**
  * struct dpni_pools_cfg - Structure representing buffer pools configuration
@@ -250,21 +264,24 @@ int dpni_destroy(struct fsl_mc_io *mc_io, uint16_t token);
  *	must match 'num_dpbp' value
  */
 struct dpni_pools_cfg {
-	uint8_t num_dpbp;
+	uint8_t		num_dpbp;
 	/**
 	 * struct pools - Buffer pools parameters
 	 * @dpbp_id: DPBP object ID
 	 * @buffer_size: Buffer size
+	 * @backup_pool: Backup pool
 	 */
 	struct {
-		int dpbp_id;
-		uint16_t buffer_size;
+		int		dpbp_id;
+		uint16_t	buffer_size;
+		int		backup_pool;
 	} pools[DPNI_MAX_DPBP];
 };
 
 /**
  * dpni_set_pools() - Set buffer pools configuration
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @cfg:	Buffer pools configuration
  *
@@ -274,45 +291,59 @@ struct dpni_pools_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_pools(struct fsl_mc_io		*mc_io,
+		   uint32_t			cmd_flags,
 		   uint16_t			token,
 		   const struct dpni_pools_cfg	*cfg);
 
 /**
  * dpni_enable() - Enable the DPNI, allow sending and receiving frames.
- * @mc_io:		Pointer to MC portal's I/O object
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:		Token of DPNI object
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_enable(struct fsl_mc_io *mc_io, uint16_t token);
+int dpni_enable(struct fsl_mc_io	*mc_io,
+		uint32_t		cmd_flags,
+		uint16_t		token);
 
 /**
  * dpni_disable() - Disable the DPNI, stop sending and receiving frames.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_disable(struct fsl_mc_io *mc_io, uint16_t token);
+int dpni_disable(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
+		 uint16_t		token);
 
 /**
  * dpni_is_enabled() - Check if the DPNI is enabled.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Returns '1' if object is enabled; '0' otherwise
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_is_enabled(struct fsl_mc_io *mc_io, uint16_t token, int *en);
+int dpni_is_enabled(struct fsl_mc_io	*mc_io,
+		    uint32_t		cmd_flags,
+		    uint16_t		token,
+		    int		*en);
 
 /**
- * @dpni_reset() - Reset the DPNI, returns the object to initial state.
+ * dpni_reset() - Reset the DPNI, returns the object to initial state.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_reset(struct fsl_mc_io *mc_io, uint16_t token);
+int dpni_reset(struct fsl_mc_io	*mc_io,
+	       uint32_t		cmd_flags,
+	       uint16_t		token);
 
 /* DPNI IRQ Index and Events */
 
@@ -322,49 +353,56 @@ int dpni_reset(struct fsl_mc_io *mc_io, uint16_t token);
 #define DPNI_IRQ_EVENT_LINK_CHANGED		0x00000001
 
 /**
+ * struct dpni_irq_cfg - IRQ configuration
+ * @addr:	Address that must be written to signal a message-based interrupt
+ * @val:	Value to write into irq_addr address
+ * @user_irq_id: A user defined number associated with this IRQ
+ */
+struct dpni_irq_cfg {
+	     uint64_t		addr;
+	     uint32_t		val;
+	     int		user_irq_id;
+};
+
+/**
  * dpni_set_irq() - Set IRQ information for the DPNI to trigger an interrupt.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @irq_index:	Identifies the interrupt index to configure
- * @irq_addr:	Address that must be written to
- *			signal a message-based interrupt
- * @irq_val:	Value to write into irq_addr address
- * @user_irq_id: A user defined number associated with this IRQ
+ * @irq_cfg:	IRQ configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_irq(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
 		 uint16_t		token,
 		 uint8_t		irq_index,
-		 uint64_t		irq_addr,
-		 uint32_t		irq_val,
-		 int			user_irq_id);
+		 struct dpni_irq_cfg	*irq_cfg);
 
 /**
  * dpni_get_irq() - Get IRQ information from the DPNI.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @irq_index:	The interrupt index to configure
  * @type:	Interrupt type: 0 represents message interrupt
- *			type (both irq_addr and irq_val are valid)
- * @irq_addr:	Returned address that must be written to
- *			signal the message-based interrupt
- * @irq_val:	Value to write into irq_addr address
- * @user_irq_id: Returned a user defined number associated with this IRQ
+ *		type (both irq_addr and irq_val are valid)
+ * @irq_cfg:	IRQ attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_irq(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
 		 uint16_t		token,
 		 uint8_t		irq_index,
 		 int			*type,
-		 uint64_t		*irq_addr,
-		 uint32_t		*irq_val,
-		 int			*user_irq_id);
+		 struct dpni_irq_cfg	*irq_cfg);
 
 /**
  * dpni_set_irq_enable() - Set overall interrupt state.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @irq_index:	The interrupt index to configure
  * @en:		Interrupt state: - enable = 1, disable = 0
@@ -377,6 +415,7 @@ int dpni_get_irq(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_irq_enable(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			uint8_t			irq_index,
 			uint8_t			en);
@@ -384,6 +423,7 @@ int dpni_set_irq_enable(struct fsl_mc_io	*mc_io,
 /**
  * dpni_get_irq_enable() - Get overall interrupt state
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @irq_index:	The interrupt index to configure
  * @en:		Returned interrupt state - enable = 1, disable = 0
@@ -391,6 +431,7 @@ int dpni_set_irq_enable(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_irq_enable(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			uint8_t			irq_index,
 			uint8_t			*en);
@@ -398,6 +439,7 @@ int dpni_get_irq_enable(struct fsl_mc_io	*mc_io,
 /**
  * dpni_set_irq_mask() - Set interrupt mask.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @irq_index:	The interrupt index to configure
  * @mask:	event mask to trigger interrupt;
@@ -411,6 +453,7 @@ int dpni_get_irq_enable(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_irq_mask(struct fsl_mc_io	*mc_io,
+		      uint32_t		cmd_flags,
 		      uint16_t		token,
 		      uint8_t		irq_index,
 		      uint32_t		mask);
@@ -418,6 +461,7 @@ int dpni_set_irq_mask(struct fsl_mc_io	*mc_io,
 /**
  * dpni_get_irq_mask() - Get interrupt mask.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @irq_index:	The interrupt index to configure
  * @mask:	Returned event mask to trigger interrupt
@@ -428,6 +472,7 @@ int dpni_set_irq_mask(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_irq_mask(struct fsl_mc_io	*mc_io,
+		      uint32_t		cmd_flags,
 		      uint16_t		token,
 		      uint8_t		irq_index,
 		      uint32_t		*mask);
@@ -435,6 +480,7 @@ int dpni_get_irq_mask(struct fsl_mc_io	*mc_io,
 /**
  * dpni_get_irq_status() - Get the current status of any pending interrupts.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @irq_index:	The interrupt index to configure
  * @status:	Returned interrupts status - one bit per cause:
@@ -444,6 +490,7 @@ int dpni_get_irq_mask(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_irq_status(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			uint8_t			irq_index,
 			uint32_t		*status);
@@ -451,6 +498,7 @@ int dpni_get_irq_status(struct fsl_mc_io	*mc_io,
 /**
  * dpni_clear_irq_status() - Clear a pending interrupt's status
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @irq_index:	The interrupt index to configure
  * @status:	bits to clear (W1C) - one bit per cause:
@@ -460,6 +508,7 @@ int dpni_get_irq_status(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_clear_irq_status(struct fsl_mc_io	*mc_io,
+			  uint32_t		cmd_flags,
 			  uint16_t		token,
 			  uint8_t		irq_index,
 			  uint32_t		status);
@@ -487,7 +536,7 @@ int dpni_clear_irq_status(struct fsl_mc_io	*mc_io,
  * @ipr_cfg: IP reassembly configuration
  */
 struct dpni_attr {
-	int id;
+	int			id;
 	/**
 	 * struct version - DPNI version
 	 * @major: DPNI major version
@@ -497,31 +546,33 @@ struct dpni_attr {
 		uint16_t major;
 		uint16_t minor;
 	} version;
-	enum net_prot start_hdr;
-	uint32_t options;
-	uint8_t max_senders;
-	uint8_t max_tcs;
-	uint8_t max_dist_per_tc[DPNI_MAX_TC];
-	uint8_t max_unicast_filters;
-	uint8_t max_multicast_filters;
-	uint8_t max_vlan_filters;
-	uint8_t max_qos_entries;
-	uint8_t max_qos_key_size;
-	uint8_t max_dist_key_size;
-	uint8_t max_policers;
-	uint8_t max_congestion_ctrl;
-	struct dpni_ipr_cfg ipr_cfg;
+	enum net_prot		start_hdr;
+	uint32_t		options;
+	uint8_t			max_senders;
+	uint8_t		max_tcs;
+	uint8_t		max_dist_per_tc[DPNI_MAX_TC];
+	uint8_t		max_unicast_filters;
+	uint8_t		max_multicast_filters;
+	uint8_t		max_vlan_filters;
+	uint8_t		max_qos_entries;
+	uint8_t		max_qos_key_size;
+	uint8_t		max_dist_key_size;
+	uint8_t			max_policers;
+	uint8_t		max_congestion_ctrl;
+	struct dpni_ipr_cfg	ipr_cfg;
 };
 
 /**
  * dpni_get_attributes() - Retrieve DPNI attributes.
- * @mc_io:	Pointer to MC portal's I/O objec
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @attr:	Returned object's attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_attributes(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			struct dpni_attr	*attr);
 
@@ -540,7 +591,6 @@ int dpni_get_attributes(struct fsl_mc_io	*mc_io,
 /* Parser L3 checksum error */
 #define DPNI_ERROR_L4CE		0x00000001
 
-
 /**
  *  enum dpni_error_action - Defines DPNI behavior for errors
  *  @DPNI_ERROR_ACTION_DISCARD: Discard the frame
@@ -561,14 +611,15 @@ enum dpni_error_action {
  *		status (FAS); relevant only for the non-discard action
  */
 struct dpni_error_cfg {
-	uint32_t errors;
-	enum dpni_error_action error_action;
-	int set_frame_annotation;
+	uint32_t		errors;
+	enum dpni_error_action	error_action;
+	int			set_frame_annotation;
 };
 
 /**
  * dpni_set_errors_behavior() - Set errors behavior
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @cfg:	Errors configuration
  *
@@ -578,6 +629,7 @@ struct dpni_error_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_errors_behavior(struct fsl_mc_io		*mc_io,
+			     uint32_t			cmd_flags,
 			     uint16_t			token,
 			     struct dpni_error_cfg	*cfg);
 
@@ -611,31 +663,34 @@ int dpni_set_errors_behavior(struct fsl_mc_io		*mc_io,
  * @data_tail_room: Data tail room
  */
 struct dpni_buffer_layout {
-	uint32_t options;
-	int pass_timestamp;
-	int pass_parser_result;
-	int pass_frame_status;
-	uint16_t private_data_size;
-	uint16_t data_align;
-	uint16_t data_head_room;
-	uint16_t data_tail_room;
+	uint32_t	options;
+	int		pass_timestamp;
+	int		pass_parser_result;
+	int		pass_frame_status;
+	uint16_t	private_data_size;
+	uint16_t	data_align;
+	uint16_t	data_head_room;
+	uint16_t	data_tail_room;
 };
 
 /**
  * dpni_get_rx_buffer_layout() - Retrieve Rx buffer layout attributes.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @layout:	Returns buffer layout attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_rx_buffer_layout(struct fsl_mc_io		*mc_io,
+			      uint32_t			cmd_flags,
 			      uint16_t			token,
 			      struct dpni_buffer_layout	*layout);
 
 /**
  * dpni_set_rx_buffer_layout() - Set Rx buffer layout configuration.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @layout:	Buffer layout configuration
  *
@@ -644,24 +699,28 @@ int dpni_get_rx_buffer_layout(struct fsl_mc_io		*mc_io,
  * @warning	Allowed only when DPNI is disabled
  */
 int dpni_set_rx_buffer_layout(struct fsl_mc_io			*mc_io,
+			      uint32_t				cmd_flags,
 			      uint16_t				token,
 			      const struct dpni_buffer_layout	*layout);
 
 /**
  * dpni_get_tx_buffer_layout() - Retrieve Tx buffer layout attributes.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @layout:	Returns buffer layout attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_tx_buffer_layout(struct fsl_mc_io		*mc_io,
+			      uint32_t			cmd_flags,
 			      uint16_t			token,
 			      struct dpni_buffer_layout	*layout);
 
 /**
  * dpni_set_tx_buffer_layout() - Set Tx buffer layout configuration.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @layout:	Buffer layout configuration
  *
@@ -670,6 +729,7 @@ int dpni_get_tx_buffer_layout(struct fsl_mc_io		*mc_io,
  * @warning	Allowed only when DPNI is disabled
  */
 int dpni_set_tx_buffer_layout(struct fsl_mc_io			*mc_io,
+			      uint32_t				cmd_flags,
 			      uint16_t				token,
 			      const struct dpni_buffer_layout	*layout);
 
@@ -677,12 +737,14 @@ int dpni_set_tx_buffer_layout(struct fsl_mc_io			*mc_io,
  * dpni_get_tx_conf_buffer_layout() - Retrieve Tx confirmation buffer layout
  *				attributes.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @layout:	Returns buffer layout attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_tx_conf_buffer_layout(struct fsl_mc_io		*mc_io,
+				   uint32_t			cmd_flags,
 				   uint16_t			token,
 				   struct dpni_buffer_layout	*layout);
 
@@ -690,6 +752,7 @@ int dpni_get_tx_conf_buffer_layout(struct fsl_mc_io		*mc_io,
  * dpni_set_tx_conf_buffer_layout() - Set Tx confirmation buffer layout
  *					configuration.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @layout:	Buffer layout configuration
  *
@@ -698,54 +761,63 @@ int dpni_get_tx_conf_buffer_layout(struct fsl_mc_io		*mc_io,
  * @warning	Allowed only when DPNI is disabled
  */
 int dpni_set_tx_conf_buffer_layout(struct fsl_mc_io		   *mc_io,
+				   uint32_t			   cmd_flags,
 				   uint16_t			   token,
 				   const struct dpni_buffer_layout *layout);
 
 /**
  * dpni_set_l3_chksum_validation() - Enable/disable L3 checksum validation
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Set to '1' to enable; '0' to disable
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_l3_chksum_validation(struct fsl_mc_io	*mc_io,
+				  uint32_t		cmd_flags,
 				  uint16_t		token,
 				  int			en);
 
 /**
  * dpni_get_l3_chksum_validation() - Get L3 checksum validation mode
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Returns '1' if enabled; '0' otherwise
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_l3_chksum_validation(struct fsl_mc_io	*mc_io,
+				  uint32_t		cmd_flags,
 				  uint16_t		token,
 				  int			*en);
 
 /**
  * dpni_set_l4_chksum_validation() - Enable/disable L4 checksum validation
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Set to '1' to enable; '0' to disable
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_l4_chksum_validation(struct fsl_mc_io	*mc_io,
+				  uint32_t		cmd_flags,
 				  uint16_t		token,
 				  int			en);
 
 /**
  * dpni_get_l4_chksum_validation() - Get L4 checksum validation mode
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Returns '1' if enabled; '0' otherwise
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_l4_chksum_validation(struct fsl_mc_io	*mc_io,
+				  uint32_t		cmd_flags,
 				  uint16_t		token,
 				  int			*en);
 
@@ -753,35 +825,54 @@ int dpni_get_l4_chksum_validation(struct fsl_mc_io	*mc_io,
  * dpni_get_qdid() - Get the Queuing Destination ID (QDID) that should be used
  *			for enqueue operations
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @qdid:	Returned virtual QDID value that should be used as an argument
  *			in all enqueue operations
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_get_qdid(struct fsl_mc_io *mc_io, uint16_t token, uint16_t *qdid);
+int dpni_get_qdid(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
+		  uint16_t		token,
+		  uint16_t		*qdid);
 
 /**
- * dpni_get_spid() - Get the AIOP storage profile ID associated with the DPNI
+ * struct dpni_sp_info - Structure representing DPNI storage-profile information
+ * (relevant only for DPNI owned by AIOP)
+ * @spids: array of storage-profiles
+ */
+struct dpni_sp_info {
+	uint16_t spids[DPNI_MAX_SP];
+};
+
+/**
+ * dpni_get_spids() - Get the AIOP storage profile IDs associated with the DPNI
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
- * @spid:	Returned aiop storage-profile ID
+ * @sp_info:	Returned AIOP storage-profile information
  *
  * Return:	'0' on Success; Error code otherwise.
  *
  * @warning	Only relevant for DPNI that belongs to AIOP container.
  */
-int dpni_get_spid(struct fsl_mc_io *mc_io, uint16_t token, uint16_t *spid);
+int dpni_get_sp_info(struct fsl_mc_io		*mc_io,
+		     uint32_t			cmd_flags,
+		     uint16_t			token,
+		     struct dpni_sp_info	*sp_info);
 
 /**
  * dpni_get_tx_data_offset() - Get the Tx data offset (from start of buffer)
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @data_offset: Tx data offset (from start of buffer)
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_tx_data_offset(struct fsl_mc_io	*mc_io,
+			    uint32_t		cmd_flags,
 			    uint16_t		token,
 			    uint16_t		*data_offset);
 
@@ -818,6 +909,7 @@ enum dpni_counter {
 /**
  * dpni_get_counter() - Read a specific DPNI counter
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @counter:	The requested counter
  * @value:	Returned counter's current value
@@ -825,6 +917,7 @@ enum dpni_counter {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_counter(struct fsl_mc_io	*mc_io,
+		     uint32_t		cmd_flags,
 		     uint16_t		token,
 		     enum dpni_counter	counter,
 		     uint64_t		*value);
@@ -832,6 +925,7 @@ int dpni_get_counter(struct fsl_mc_io	*mc_io,
 /**
  * dpni_set_counter() - Set (or clear) a specific DPNI counter
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @counter:	The requested counter
  * @value:	New counter value; typically pass '0' for resetting
@@ -840,6 +934,7 @@ int dpni_get_counter(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_counter(struct fsl_mc_io	*mc_io,
+		     uint32_t		cmd_flags,
 		     uint16_t		token,
 		     enum dpni_counter	counter,
 		     uint64_t		value);
@@ -866,14 +961,16 @@ struct dpni_link_cfg {
 /**
  * dpni_set_link_cfg() - set the link configuration.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @cfg:	Link configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_link_cfg(struct fsl_mc_io *mc_io,
-		      uint16_t token,
-		      const struct dpni_link_cfg *cfg);
+int dpni_set_link_cfg(struct fsl_mc_io			*mc_io,
+		      uint32_t				cmd_flags,
+		      uint16_t				token,
+		      const struct dpni_link_cfg	*cfg);
 
 /**
  * struct dpni_link_state - Structure representing DPNI link state
@@ -882,22 +979,24 @@ int dpni_set_link_cfg(struct fsl_mc_io *mc_io,
  * @up: Link state; '0' for down, '1' for up
  */
 struct dpni_link_state {
-	uint32_t rate;
-	uint64_t options;
-	int up;
+	uint32_t	rate;
+	uint64_t	options;
+	int		up;
 };
 
 /**
  * dpni_get_link_state() - Return the link state (either up or down)
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @state:	Returned link state;
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_get_link_state(struct fsl_mc_io *mc_io,
-			uint16_t token,
-			struct dpni_link_state *state);
+int dpni_get_link_state(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
+			uint16_t		token,
+			struct dpni_link_state	*state);
 
 /**
  * struct dpni_tx_shaping - Structure representing DPNI tx shaping configuration
@@ -905,25 +1004,28 @@ int dpni_get_link_state(struct fsl_mc_io *mc_io,
  * @max_burst_size: burst size in bytes (up to 64KB)
  */
 struct dpni_tx_shaping_cfg {
-	uint64_t rate_limit;
+	uint32_t rate_limit;
 	uint16_t max_burst_size;
 };
 
 /**
  * dpni_set_tx_shaping() - Set the transmit shaping
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @tx_shaper:  tx shaping configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_tx_shaping(struct fsl_mc_io *mc_io,
-			uint16_t token,
-			const struct dpni_tx_shaping_cfg *tx_shaper);
+int dpni_set_tx_shaping(struct fsl_mc_io			*mc_io,
+			uint32_t				cmd_flags,
+			uint16_t				token,
+			const struct dpni_tx_shaping_cfg	*tx_shaper);
 
 /**
  * dpni_set_max_frame_length() - Set the maximum received frame length.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @max_frame_length:	Maximum received frame length (in
  *				bytes); frame is discarded if its
@@ -932,12 +1034,14 @@ int dpni_set_tx_shaping(struct fsl_mc_io *mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_max_frame_length(struct fsl_mc_io	*mc_io,
+			      uint32_t		cmd_flags,
 			      uint16_t		token,
 			      uint16_t		max_frame_length);
 
 /**
  * dpni_get_max_frame_length() - Get the maximum received frame length.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @max_frame_length:	Maximum received frame length (in
  *				bytes); frame is discarded if its
@@ -946,12 +1050,14 @@ int dpni_set_max_frame_length(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_max_frame_length(struct fsl_mc_io	*mc_io,
+			      uint32_t		cmd_flags,
 			      uint16_t		token,
 			      uint16_t		*max_frame_length);
 
 /**
  * dpni_set_mtu() - Set the MTU for the interface.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @mtu:	MTU length (in bytes)
  *
@@ -959,113 +1065,141 @@ int dpni_get_max_frame_length(struct fsl_mc_io	*mc_io,
  * fragmentation on egress packets.
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_mtu(struct fsl_mc_io *mc_io, uint16_t token, uint16_t mtu);
+int dpni_set_mtu(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
+		 uint16_t		token,
+		 uint16_t		mtu);
 
 /**
  * dpni_get_mtu() - Get the MTU.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @mtu:	Returned MTU length (in bytes)
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_get_mtu(struct fsl_mc_io *mc_io, uint16_t token, uint16_t *mtu);
+int dpni_get_mtu(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
+		 uint16_t		token,
+		 uint16_t		*mtu);
 
 /**
  * dpni_set_multicast_promisc() - Enable/disable multicast promiscuous mode
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Set to '1' to enable; '0' to disable
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_multicast_promisc(struct fsl_mc_io	*mc_io,
+int dpni_set_multicast_promisc(struct fsl_mc_io *mc_io,
+			       uint32_t	cmd_flags,
 			       uint16_t		token,
 			       int		en);
 
 /**
  * dpni_get_multicast_promisc() - Get multicast promiscuous mode
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Returns '1' if enabled; '0' otherwise
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_get_multicast_promisc(struct fsl_mc_io	*mc_io,
+int dpni_get_multicast_promisc(struct fsl_mc_io *mc_io,
+			       uint32_t	cmd_flags,
 			       uint16_t		token,
 			       int		*en);
 
 /**
  * dpni_set_unicast_promisc() - Enable/disable unicast promiscuous mode
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Set to '1' to enable; '0' to disable
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_unicast_promisc(struct fsl_mc_io *mc_io, uint16_t token, int en);
+int dpni_set_unicast_promisc(struct fsl_mc_io	*mc_io,
+			     uint32_t		cmd_flags,
+			     uint16_t		token,
+			     int		en);
 
 /**
  * dpni_get_unicast_promisc() - Get unicast promiscuous mode
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Returns '1' if enabled; '0' otherwise
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_get_unicast_promisc(struct fsl_mc_io *mc_io, uint16_t token, int *en);
+int dpni_get_unicast_promisc(struct fsl_mc_io	*mc_io,
+			     uint32_t		cmd_flags,
+			     uint16_t		token,
+			     int		*en);
 
 /**
  * dpni_set_primary_mac_addr() - Set the primary MAC address
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @mac_addr:	MAC address to set as primary address
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_primary_mac_addr(struct fsl_mc_io	*mc_io,
+int dpni_set_primary_mac_addr(struct fsl_mc_io *mc_io,
+			      uint32_t		cmd_flags,
 			      uint16_t		token,
 			      const uint8_t	mac_addr[6]);
 
 /**
  * dpni_get_primary_mac_addr() - Get the primary MAC address
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @mac_addr:	Returned MAC address
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_primary_mac_addr(struct fsl_mc_io	*mc_io,
+			      uint32_t		cmd_flags,
 			      uint16_t		token,
 			      uint8_t		mac_addr[6]);
 
 /**
  * dpni_add_mac_addr() - Add MAC address filter
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @mac_addr:	MAC address to add
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_add_mac_addr(struct fsl_mc_io	*mc_io,
+		      uint32_t		cmd_flags,
 		      uint16_t		token,
 		      const uint8_t	mac_addr[6]);
 
 /**
  * dpni_remove_mac_addr() - Remove MAC address filter
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @mac_addr:	MAC address to remove
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_remove_mac_addr(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
 			 uint16_t		token,
 			 const uint8_t		mac_addr[6]);
 
 /**
  * dpni_clear_mac_filters() - Clear all unicast and/or multicast MAC filters
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @unicast:	Set to '1' to clear unicast addresses
  * @multicast:	Set to '1' to clear multicast addresses
@@ -1075,6 +1209,7 @@ int dpni_remove_mac_addr(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_clear_mac_filters(struct fsl_mc_io	*mc_io,
+			   uint32_t		cmd_flags,
 			   uint16_t		token,
 			   int			unicast,
 			   int			multicast);
@@ -1082,45 +1217,56 @@ int dpni_clear_mac_filters(struct fsl_mc_io	*mc_io,
 /**
  * dpni_set_vlan_filters() - Enable/disable VLAN filtering mode
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Set to '1' to enable; '0' to disable
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_vlan_filters(struct fsl_mc_io *mc_io, uint16_t token, int en);
+int dpni_set_vlan_filters(struct fsl_mc_io	*mc_io,
+			  uint32_t		cmd_flags,
+			  uint16_t		token,
+			  int			en);
 
 /**
  * dpni_add_vlan_id() - Add VLAN ID filter
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @vlan_id:	VLAN ID to add
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_add_vlan_id(struct fsl_mc_io	*mc_io,
+		     uint32_t		cmd_flags,
 		     uint16_t		token,
 		     uint16_t		vlan_id);
 
 /**
  * dpni_remove_vlan_id() - Remove VLAN ID filter
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @vlan_id:	VLAN ID to remove
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_remove_vlan_id(struct fsl_mc_io	*mc_io,
+			uint32_t		cmd_flags,
 			uint16_t		token,
 			uint16_t		vlan_id);
 
 /**
  * dpni_clear_vlan_filters() - Clear all VLAN filters
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_clear_vlan_filters(struct fsl_mc_io *mc_io, uint16_t token);
+int dpni_clear_vlan_filters(struct fsl_mc_io	*mc_io,
+			    uint32_t		cmd_flags,
+			    uint16_t		token);
 
 /**
  * struct dpni_tx_tc_cfg - Structure representing Tx traffic class configuration
@@ -1135,6 +1281,7 @@ struct dpni_tx_tc_cfg {
 /**
  * dpni_set_tx_tc() - Set Tx traffic class configuration
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @tc_id:	Traffic class selection (0-7)
  * @cfg:	Traffic class configuration
@@ -1142,11 +1289,59 @@ struct dpni_tx_tc_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_tx_tc(struct fsl_mc_io		*mc_io,
+		   uint32_t			cmd_flags,
 		   uint16_t			token,
 		   uint8_t			tc_id,
 		   const struct dpni_tx_tc_cfg	*cfg);
 
 /**
+ * enum dpni_tx_schedule_mode - DPNI Tx scheduling mode
+ * @DPNI_TX_SCHED_STRICT_PRIORITY: strict priority
+ * @DPNI_TX_SCHED_WEIGHTED: weighted based scheduling
+ */
+enum dpni_tx_schedule_mode {
+	DPNI_TX_SCHED_STRICT_PRIORITY,
+	DPNI_TX_SCHED_WEIGHTED,
+};
+
+/**
+ * struct dpni_tx_schedule_cfg - Structure representing Tx
+ *	scheduling configuration
+ * @mode: scheduling mode
+ * @delta_bandwidth: Bandwidth represented in weights from 100 to 10000;
+ *	not applicable for 'strict-priority' mode;
+ */
+struct dpni_tx_schedule_cfg {
+	enum dpni_tx_schedule_mode	mode;
+	uint16_t		delta_bandwidth;
+};
+
+/**
+ * struct dpni_tx_selection_cfg - Structure representing transmission
+ *	selection configuration
+ * @tc_sched: an array of traffic-classes
+ */
+struct dpni_tx_selection_cfg {
+	struct dpni_tx_schedule_cfg tc_sched[DPNI_MAX_TC];
+};
+
+/**
+ * dpni_set_tx_selection() - Set transmission selection configuration
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPNI object
+ * @cfg:	transmission selection configuration
+ *
+ * warning:	Allowed only when DPNI is disabled
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
+int dpni_set_tx_selection(struct fsl_mc_io			*mc_io,
+			  uint32_t				cmd_flags,
+			  uint16_t				token,
+			  const struct dpni_tx_selection_cfg	*cfg);
+
+/**
  * enum dpni_dist_mode - DPNI distribution mode
  * @DPNI_DIST_MODE_NONE: No distribution
  * @DPNI_DIST_MODE_HASH: Use hash distribution; only relevant if
@@ -1178,8 +1373,8 @@ enum dpni_fs_miss_action {
  * @default_flow_id: Used when 'miss_action = DPNI_FS_MISS_EXPLICIT_FLOWID'
  */
 struct dpni_fs_tbl_cfg {
-	enum dpni_fs_miss_action miss_action;
-	uint16_t default_flow_id;
+	enum dpni_fs_miss_action	miss_action;
+	uint16_t			default_flow_id;
 };
 
 /**
@@ -1191,8 +1386,8 @@ struct dpni_fs_tbl_cfg {
  *	- dpni_set_rx_tc_dist()
  *		- dpni_set_qos_table()
  */
-int dpni_prepare_key_cfg(struct dpkg_profile_cfg *cfg,
-			 uint8_t *key_cfg_buf);
+int dpni_prepare_key_cfg(struct dpkg_profile_cfg	*cfg,
+			 uint8_t			*key_cfg_buf);
 
 /**
  * struct dpni_rx_tc_dist_cfg - Rx traffic class distribution configuration
@@ -1209,15 +1404,16 @@ int dpni_prepare_key_cfg(struct dpkg_profile_cfg *cfg,
  *		'dist_mode = DPNI_DIST_MODE_FS'
  */
 struct dpni_rx_tc_dist_cfg {
-	uint8_t dist_size;
-	enum dpni_dist_mode dist_mode;
-	uint64_t key_cfg_iova;
-	struct dpni_fs_tbl_cfg fs_cfg;
+	uint8_t		dist_size;
+	enum dpni_dist_mode	dist_mode;
+	uint64_t		key_cfg_iova;
+	struct dpni_fs_tbl_cfg	fs_cfg;
 };
 
 /**
  * dpni_set_rx_tc_dist() - Set Rx traffic class distribution configuration
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @tc_id:	Traffic class selection (0-7)
  * @cfg:	Traffic class distribution configuration
@@ -1228,6 +1424,7 @@ struct dpni_rx_tc_dist_cfg {
  * Return:	'0' on Success; error code otherwise.
  */
 int dpni_set_rx_tc_dist(struct fsl_mc_io			*mc_io,
+			uint32_t				cmd_flags,
 			uint16_t				token,
 			uint8_t					tc_id,
 			const struct dpni_rx_tc_dist_cfg	*cfg);
@@ -1257,7 +1454,8 @@ enum dpni_policer_mode {
  *  @DPNI_POLICER_UNIT_PACKETS: packets units
  */
 enum dpni_policer_unit {
-	DPNI_POLICER_UNIT_BYTES = 0, DPNI_POLICER_UNIT_PACKETS
+	DPNI_POLICER_UNIT_BYTES = 0,
+	DPNI_POLICER_UNIT_PACKETS
 };
 
 /**
@@ -1288,28 +1486,30 @@ enum dpni_policer_color {
  *       Excess burst size (EBS, rfc4115) in bytes or packets
  */
 struct dpni_rx_tc_policing_cfg {
-	uint32_t options;
-	enum dpni_policer_mode mode;
-	enum dpni_policer_unit units;
+	uint32_t		options;
+	enum dpni_policer_mode	mode;
+	enum dpni_policer_unit	units;
 	enum dpni_policer_color default_color;
-	uint32_t cir;
-	uint32_t cbs;
-	uint32_t eir;
-	uint32_t ebs;
+	uint32_t		cir;
+	uint32_t		cbs;
+	uint32_t		eir;
+	uint32_t		ebs;
 };
 
 /**
  * dpni_set_rx_tc_policing() - Set Rx traffic class policing configuration
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @tc_id:	Traffic class selection (0-7)
  * @cfg:	Traffic class policing configuration
  *
  * Return:	'0' on Success; error code otherwise.
  */
-int dpni_set_rx_tc_policing(struct fsl_mc_io	*mc_io,
-			    uint16_t		token,
-			    uint8_t		tc_id,
+int dpni_set_rx_tc_policing(struct fsl_mc_io			*mc_io,
+			    uint32_t				cmd_flags,
+			    uint16_t				token,
+			    uint8_t				tc_id,
 			    const struct dpni_rx_tc_policing_cfg *cfg);
 
 /**
@@ -1330,7 +1530,8 @@ enum dpni_early_drop_mode {
  * @DPNI_EARLY_DROP_UNIT_FRAMES: frames units
  */
 enum dpni_early_drop_unit {
-	DPNI_EARLY_DROP_UNIT_BYTES = 0, DPNI_EARLY_DROP_UNIT_FRAMES
+	DPNI_EARLY_DROP_UNIT_BYTES = 0,
+	DPNI_EARLY_DROP_UNIT_FRAMES
 };
 
 /**
@@ -1344,14 +1545,14 @@ enum dpni_early_drop_unit {
  *			associated with the max_threshold).
  */
 struct dpni_wred_cfg {
-	uint64_t max_threshold;
-	uint64_t min_threshold;
-	uint8_t drop_probability;
+	uint64_t	max_threshold;
+	uint64_t	min_threshold;
+	uint8_t	drop_probability;
 };
 
 /**
  * struct dpni_rx_tc_early_drop_cfg - early-drop configuration
- * @drop_mode: drop mode
+ * @mode: drop mode
  * @units: untis type
  * @green: WRED - 'green' configuration
  * @yellow: WRED - 'yellow' configuration
@@ -1359,14 +1560,14 @@ struct dpni_wred_cfg {
  * @tail_drop_threshold: tail drop threshold
  */
 struct dpni_rx_tc_early_drop_cfg {
-	enum dpni_early_drop_mode mode;
-	enum dpni_early_drop_unit units;
+	enum dpni_early_drop_mode	mode;
+	enum dpni_early_drop_unit	units;
 
-	struct dpni_wred_cfg green;
-	struct dpni_wred_cfg yellow;
-	struct dpni_wred_cfg red;
+	struct dpni_wred_cfg		green;
+	struct dpni_wred_cfg		yellow;
+	struct dpni_wred_cfg		red;
 
-	uint32_t tail_drop_threshold;
+	uint32_t			tail_drop_threshold;
 };
 
 /**
@@ -1378,11 +1579,12 @@ struct dpni_rx_tc_early_drop_cfg {
  *
  */
 void dpni_prepare_rx_tc_early_drop(const struct dpni_rx_tc_early_drop_cfg *cfg,
-				   uint8_t *early_drop_buf);
+				   uint8_t		*early_drop_buf);
 
 /**
  * dpni_set_rx_tc_early_drop() - Set Rx traffic class early-drop configuration
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @tc_id:	Traffic class selection (0-7)
  * @early_drop_iova:  I/O virtual address of 64 bytes;
@@ -1394,9 +1596,10 @@ void dpni_prepare_rx_tc_early_drop(const struct dpni_rx_tc_early_drop_cfg *cfg,
  * Return:	'0' on Success; error code otherwise.
  */
 int dpni_set_rx_tc_early_drop(struct fsl_mc_io	*mc_io,
+			      uint32_t		cmd_flags,
 			      uint16_t		token,
-			    uint8_t		tc_id,
-			    uint64_t		early_drop_iova);
+			      uint8_t		tc_id,
+			      uint64_t		early_drop_iova);
 
 /**
  * enum dpni_dest - DPNI destination types
@@ -1426,9 +1629,9 @@ enum dpni_dest {
  *		channel; not relevant for 'DPNI_DEST_NONE' option
  */
 struct dpni_dest_cfg {
-	enum dpni_dest dest_type;
-	int dest_id;
-	uint8_t priority;
+	enum dpni_dest	dest_type;
+	int		dest_id;
+	uint8_t	priority;
 };
 
 /**
@@ -1476,11 +1679,11 @@ enum dpni_stash_size {
  *			Must be cacheline-aligned and DMA-able memory
  */
 struct dpni_flc_cfg {
-	enum dpni_flc_type flc_type;
-	uint32_t options;
-	enum dpni_stash_size frame_data_size;
-	enum dpni_stash_size flow_context_size;
-	uint64_t flow_context;
+	enum dpni_flc_type	flc_type;
+	uint32_t		options;
+	enum dpni_stash_size	frame_data_size;
+	enum dpni_stash_size	flow_context_size;
+	uint64_t		flow_context;
 };
 
 /* DPNI queue modification options */
@@ -1493,7 +1696,8 @@ struct dpni_flc_cfg {
  * not applicable for Tx-conf/Err queues as the FD comes from the user
  */
 #define DPNI_QUEUE_OPT_FLC		0x00000004
-
+/* Select to modify the queue's order preservation */
+#define DPNI_QUEUE_OPT_ORDER_PRESERVATION 0x00000008
 
 /**
  * struct dpni_queue_cfg - Structure representing queue configuration
@@ -1509,12 +1713,16 @@ struct dpni_flc_cfg {
  *		in the case of FS (flow-steering) the flow's FLC settings
  *		are used.
  *		valid only if 'DPNI_QUEUE_OPT_FLC' is contained in 'options'
+ * @order_preservation_en: enable/disable order preservation;
+ *		valid only if 'DPNI_QUEUE_OPT_ORDER_PRESERVATION' is contained
+ *		in 'options'
  */
 struct dpni_queue_cfg {
-	uint32_t options;
-	uint64_t user_ctx;
-	struct dpni_dest_cfg dest_cfg;
-	struct dpni_flc_cfg flc_cfg;
+	uint32_t		options;
+	uint64_t		user_ctx;
+	struct dpni_dest_cfg	dest_cfg;
+	struct dpni_flc_cfg	flc_cfg;
+	int			order_preservation_en;
 };
 
 /**
@@ -1523,13 +1731,16 @@ struct dpni_queue_cfg {
  *	dequeued frame
  * @dest_cfg: Queue destination configuration
  * @flc_cfg: Flow context configuration
+ * @order_preservation_en: enable/disable order preservation
  * @fqid: Virtual fqid value to be used for dequeue operations
  */
 struct dpni_queue_attr {
-	uint64_t user_ctx;
-	struct dpni_dest_cfg dest_cfg;
-	struct dpni_flc_cfg flc_cfg;
-	uint32_t fqid;
+	uint64_t		user_ctx;
+	struct dpni_dest_cfg	dest_cfg;
+	struct dpni_flc_cfg	flc_cfg;
+	int			order_preservation_en;
+
+	uint32_t		fqid;
 };
 
 /* DPNI Tx flow modification options */
@@ -1560,7 +1771,7 @@ struct dpni_queue_attr {
  *		'options'
  */
 struct dpni_tx_flow_cfg {
-	uint32_t options;
+	uint32_t			options;
 	/**
 	 * struct cnf_err_cfg - Tx confirmation and error configuration
 	 * @use_default_queue: Set to '1' to use the common (default) Tx
@@ -1577,17 +1788,18 @@ struct dpni_tx_flow_cfg {
 	 *		'DPNI_TX_FLOW_OPT_QUEUE' is contained in 'options'
 	 */
 	struct {
-		int use_default_queue;
-		int errors_only;
-		struct dpni_queue_cfg queue_cfg;
+		int			use_default_queue;
+		int			errors_only;
+		struct dpni_queue_cfg	queue_cfg;
 	} conf_err_cfg;
-	int l3_chksum_gen;
-	int l4_chksum_gen;
+	int				l3_chksum_gen;
+	int				l4_chksum_gen;
 };
 
 /**
  * dpni_set_tx_flow() - Set Tx flow configuration
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @flow_id:	Provides (or returns) the sender's flow ID;
  *				for each new sender set (*flow_id) to
@@ -1599,6 +1811,7 @@ struct dpni_tx_flow_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_tx_flow(struct fsl_mc_io			*mc_io,
+		     uint32_t				cmd_flags,
 		     uint16_t				token,
 		     uint16_t				*flow_id,
 		     const struct dpni_tx_flow_cfg	*cfg);
@@ -1621,17 +1834,18 @@ struct dpni_tx_flow_attr {
 	 * @queue_attr: Queue attributes
 	 */
 	struct {
-		int use_default_queue;
-		int errors_only;
-		struct dpni_queue_attr queue_attr;
+		int			use_default_queue;
+		int			errors_only;
+		struct dpni_queue_attr	queue_attr;
 	} conf_err_attr;
-	int l3_chksum_gen;
-	int l4_chksum_gen;
+	int				l3_chksum_gen;
+	int				l4_chksum_gen;
 };
 
 /**
  * dpni_get_tx_flow() - Get Tx flow attributes
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @flow_id:	The sender's flow ID, as returned by the
  *			dpni_set_tx_flow() function
@@ -1640,6 +1854,7 @@ struct dpni_tx_flow_attr {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_tx_flow(struct fsl_mc_io		*mc_io,
+		     uint32_t			cmd_flags,
 		     uint16_t			token,
 		     uint16_t			flow_id,
 		     struct dpni_tx_flow_attr	*attr);
@@ -1647,10 +1862,11 @@ int dpni_get_tx_flow(struct fsl_mc_io		*mc_io,
 /**
  * dpni_set_rx_flow() - Set Rx flow configuration
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @tc_id:	Traffic class selection (0-7);
  *			use 'DPNI_ALL_TCS' to set all TCs and all flows
- * @flow_id	Rx flow id within the traffic class; use
+ * @flow_id:	Rx flow id within the traffic class; use
  *			'DPNI_ALL_TC_FLOWS' to set all flows within
  *			this tc_id; ignored if tc_id is set to
  *			'DPNI_ALL_TCS';
@@ -1659,6 +1875,7 @@ int dpni_get_tx_flow(struct fsl_mc_io		*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_rx_flow(struct fsl_mc_io			*mc_io,
+		     uint32_t				cmd_flags,
 		     uint16_t				token,
 		     uint8_t				tc_id,
 		     uint16_t				flow_id,
@@ -1667,6 +1884,7 @@ int dpni_set_rx_flow(struct fsl_mc_io			*mc_io,
 /**
  * dpni_get_rx_flow() -	Get Rx flow attributes
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @tc_id:	Traffic class selection (0-7)
  * @flow_id:	Rx flow id within the traffic class
@@ -1675,6 +1893,7 @@ int dpni_set_rx_flow(struct fsl_mc_io			*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_rx_flow(struct fsl_mc_io		*mc_io,
+		     uint32_t			cmd_flags,
 		     uint16_t			token,
 		     uint8_t			tc_id,
 		     uint16_t			flow_id,
@@ -1683,24 +1902,28 @@ int dpni_get_rx_flow(struct fsl_mc_io		*mc_io,
 /**
  * dpni_set_rx_err_queue() - Set Rx error queue configuration
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @cfg:	Queue configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_set_rx_err_queue(struct fsl_mc_io		*mc_io,
+			  uint32_t			cmd_flags,
 			  uint16_t			token,
 			  const struct dpni_queue_cfg	*cfg);
 
 /**
  * dpni_get_rx_err_queue() - Get Rx error queue attributes
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @attr:	Returned Queue attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_get_rx_err_queue(struct fsl_mc_io		*mc_io,
+			  uint32_t			cmd_flags,
 			  uint16_t			token,
 			  struct dpni_queue_attr	*attr);
 
@@ -1708,6 +1931,7 @@ int dpni_get_rx_err_queue(struct fsl_mc_io		*mc_io,
  * dpni_set_tx_conf_err_queue() - Set Tx confirmation and error queue
  *			configuration
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @cfg:	Queue configuration
  *
@@ -1722,15 +1946,17 @@ int dpni_get_rx_err_queue(struct fsl_mc_io		*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_tx_conf_err_queue(struct fsl_mc_io			*mc_io,
+int dpni_set_tx_conf_err_queue(struct fsl_mc_io		*mc_io,
+			       uint32_t			cmd_flags,
 			       uint16_t				token,
 			       const struct dpni_queue_cfg	*cfg);
 
 /**
  * dpni_get_tx_conf_err_queue() - Get Tx confirmation and error queue attributes
- * @mc_io	Pointer to MC portal's I/O object
- * @token	Token of DPNI object
- * @attr	Returned queue attributes
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPNI object
+ * @attr:	Returned queue attributes
  *
  * If 'DPNI_OPT_TX_CONF_DISABLED' was selected at DPNI creation,
  * only error frames are reported back - successfully transmitted
@@ -1743,11 +1969,35 @@ int dpni_set_tx_conf_err_queue(struct fsl_mc_io			*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_get_tx_conf_err_queue(struct fsl_mc_io		*mc_io,
+int dpni_get_tx_conf_err_queue(struct fsl_mc_io	*mc_io,
+			       uint32_t		cmd_flags,
 			       uint16_t			token,
 			       struct dpni_queue_attr	*attr);
 
 /**
+ * dpni_set_tx_conf_revoke() - Tx confirmation revocation
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPNI object
+ * @revoke:	revoke or not
+ *
+ * This function is useful only when 'DPNI_OPT_TX_CONF_DISABLED' is not
+ * selected at DPNI creation.
+ * Calling this function with 'revoke' set to '1' disables all transmit
+ * confirmation (including the private confirmation queues), regardless of
+ * previous settings; Note that in this case, Tx error frames are still
+ * enqueued to the general transmit errors queue.
+ * Calling this function with 'revoke' set to '0' restores the previous
+ * settings for both general and private transmit confirmation.
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
+int dpni_set_tx_conf_revoke(struct fsl_mc_io		*mc_io,
+			    uint32_t			cmd_flags,
+			    uint16_t			token,
+			    int			revoke);
+
+/**
  * struct dpni_qos_tbl_cfg - Structure representing QOS table configuration
  * @key_cfg_iova: I/O virtual address of 256 bytes DMA-able memory filled with
  *		key extractions to be used as the QoS criteria by calling
@@ -1757,14 +2007,15 @@ int dpni_get_tx_conf_err_queue(struct fsl_mc_io		*mc_io,
  * @default_tc: Used in case of no-match and 'discard_on_miss'= 0
  */
 struct dpni_qos_tbl_cfg {
-	uint64_t key_cfg_iova;
-	int discard_on_miss;
-	uint8_t default_tc;
+	uint64_t	key_cfg_iova;
+	int		discard_on_miss;
+	uint8_t	default_tc;
 };
 
 /**
  * dpni_set_qos_table() - Set QoS mapping table
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @cfg:	QoS table configuration
  *
@@ -1776,7 +2027,8 @@ struct dpni_qos_tbl_cfg {
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_qos_table(struct fsl_mc_io			*mc_io,
+int dpni_set_qos_table(struct fsl_mc_io		*mc_io,
+		       uint32_t			cmd_flags,
 		       uint16_t				token,
 		       const struct dpni_qos_tbl_cfg	*cfg);
 
@@ -1787,21 +2039,23 @@ int dpni_set_qos_table(struct fsl_mc_io			*mc_io,
  * @key_size: key and mask size (in bytes)
  */
 struct dpni_rule_cfg {
-	uint64_t key_iova;
-	uint64_t mask_iova;
-	uint8_t key_size;
+	uint64_t	key_iova;
+	uint64_t	mask_iova;
+	uint8_t	key_size;
 };
 
 /**
  * dpni_add_qos_entry() - Add QoS mapping entry (to select a traffic class)
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @cfg:	QoS rule to add
  * @tc_id:	Traffic class selection (0-7)
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_add_qos_entry(struct fsl_mc_io			*mc_io,
+int dpni_add_qos_entry(struct fsl_mc_io		*mc_io,
+		       uint32_t			cmd_flags,
 		       uint16_t				token,
 		       const struct dpni_rule_cfg	*cfg,
 		       uint8_t				tc_id);
@@ -1809,18 +2063,21 @@ int dpni_add_qos_entry(struct fsl_mc_io			*mc_io,
 /**
  * dpni_remove_qos_entry() - Remove QoS mapping entry
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @cfg:	QoS rule to remove
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_remove_qos_entry(struct fsl_mc_io		*mc_io,
+			  uint32_t			cmd_flags,
 			  uint16_t			token,
 			  const struct dpni_rule_cfg	*cfg);
 
 /**
  * dpni_clear_qos_table() - Clear all QoS mapping entries
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  *
  * Following this function call, all frames are directed to
@@ -1828,12 +2085,15 @@ int dpni_remove_qos_entry(struct fsl_mc_io		*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_clear_qos_table(struct fsl_mc_io *mc_io, uint16_t token);
+int dpni_clear_qos_table(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
+			 uint16_t		token);
 
 /**
  * dpni_add_fs_entry() - Add Flow Steering entry for a specific traffic class
  *			(to select a flow ID)
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @tc_id:	Traffic class selection (0-7)
  * @cfg:	Flow steering rule to add
@@ -1843,6 +2103,7 @@ int dpni_clear_qos_table(struct fsl_mc_io *mc_io, uint16_t token);
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_add_fs_entry(struct fsl_mc_io			*mc_io,
+		      uint32_t				cmd_flags,
 		      uint16_t				token,
 		      uint8_t				tc_id,
 		      const struct dpni_rule_cfg	*cfg,
@@ -1852,6 +2113,7 @@ int dpni_add_fs_entry(struct fsl_mc_io			*mc_io,
  * dpni_remove_fs_entry() - Remove Flow Steering entry from a specific
  *			traffic class
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @tc_id:	Traffic class selection (0-7)
  * @cfg:	Flow steering rule to remove
@@ -1859,6 +2121,7 @@ int dpni_add_fs_entry(struct fsl_mc_io			*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_remove_fs_entry(struct fsl_mc_io		*mc_io,
+			 uint32_t			cmd_flags,
 			 uint16_t			token,
 			 uint8_t			tc_id,
 			 const struct dpni_rule_cfg	*cfg);
@@ -1867,18 +2130,21 @@ int dpni_remove_fs_entry(struct fsl_mc_io		*mc_io,
  * dpni_clear_fs_entries() - Clear all Flow Steering entries of a specific
  *			traffic class
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @tc_id:	Traffic class selection (0-7)
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpni_clear_fs_entries(struct fsl_mc_io	*mc_io,
+			  uint32_t		cmd_flags,
 			  uint16_t		token,
 			  uint8_t		tc_id);
 
 /**
  * dpni_set_vlan_insertion() - Enable/disable VLAN insertion for egress frames
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Set to '1' to enable; '0' to disable
  *
@@ -1887,11 +2153,15 @@ int dpni_clear_fs_entries(struct fsl_mc_io	*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_vlan_insertion(struct fsl_mc_io *mc_io, uint16_t token, int en);
+int dpni_set_vlan_insertion(struct fsl_mc_io	*mc_io,
+			    uint32_t		cmd_flags,
+			    uint16_t		token,
+			    int		en);
 
 /**
  * dpni_set_vlan_removal() - Enable/disable VLAN removal for ingress frames
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Set to '1' to enable; '0' to disable
  *
@@ -1900,11 +2170,15 @@ int dpni_set_vlan_insertion(struct fsl_mc_io *mc_io, uint16_t token, int en);
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_vlan_removal(struct fsl_mc_io *mc_io, uint16_t token, int en);
+int dpni_set_vlan_removal(struct fsl_mc_io	*mc_io,
+			  uint32_t		cmd_flags,
+			  uint16_t		token,
+			  int			en);
 
 /**
  * dpni_set_ipr() - Enable/disable IP reassembly of ingress frames
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Set to '1' to enable; '0' to disable
  *
@@ -1912,11 +2186,15 @@ int dpni_set_vlan_removal(struct fsl_mc_io *mc_io, uint16_t token, int en);
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_ipr(struct fsl_mc_io *mc_io, uint16_t token, int en);
+int dpni_set_ipr(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
+		 uint16_t		token,
+		 int			en);
 
 /**
  * dpni_set_ipf() - Enable/disable IP fragmentation of egress frames
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPNI object
  * @en:		Set to '1' to enable; '0' to disable
  *
@@ -1926,8 +2204,9 @@ int dpni_set_ipr(struct fsl_mc_io *mc_io, uint16_t token, int en);
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpni_set_ipf(struct fsl_mc_io *mc_io, uint16_t token, int en);
-
-/** @} */
+int dpni_set_ipf(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
+		 uint16_t		token,
+		 int			en);
 
 #endif /* __FSL_DPNI_H */
-- 
1.7.5.4

