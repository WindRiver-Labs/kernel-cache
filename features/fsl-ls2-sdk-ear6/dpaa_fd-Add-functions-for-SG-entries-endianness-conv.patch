From ae3bdaa97789bb4571f86f4a59aa89b8f0e08424 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Wed, 21 Oct 2015 16:14:26 +0300
Subject: [PATCH 269/452] dpaa_fd: Add functions for SG entries endianness
 conversions

Scatter gather entries are little endian at the hardware level.
Add functions for converting the SG entry structure to cpu
endianness to avoid incorrect behaviour on BE kernels.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
[Xulin: Original patch taken from FSL LS2085 SDK EAR6.0,
LS2085A-SDK-SOURCE-20160304-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/staging/fsl-mc/include/fsl_dpaa_fd.h |   37 ++++++++++++++++++++++++++
 1 files changed, 37 insertions(+), 0 deletions(-)

diff --git a/drivers/staging/fsl-mc/include/fsl_dpaa_fd.h b/drivers/staging/fsl-mc/include/fsl_dpaa_fd.h
index 42d1e40..c9692a2 100644
--- a/drivers/staging/fsl-mc/include/fsl_dpaa_fd.h
+++ b/drivers/staging/fsl-mc/include/fsl_dpaa_fd.h
@@ -117,6 +117,7 @@ static inline void ldpaa_fd_set_bpid(struct dpaa_fd *fd, uint16_t bpid)
 	fd->simple.bpid_offset |= (u32)bpid;
 }
 
+/* Scatter gather entry */
 struct dpaa_sg_entry {
 	u32 addr_lo;
 	u32 addr_hi;
@@ -130,6 +131,13 @@ enum dpaa_sg_format {
 	dpaa_sg_sgt_ext
 };
 
+/* Accessors for SG entry fields
+ *
+ * These setters and getters assume little endian format. For converting
+ * between LE and cpu endianness, the specific conversion functions must be
+ * called before the SGE contents are accessed by the core (on Rx),
+ * respectively before the SG table is sent to hardware (on Tx)
+ */
 static inline dma_addr_t ldpaa_sg_get_addr(const struct dpaa_sg_entry *sg)
 {
 	return (dma_addr_t)((((u64)sg->addr_hi) << 32) + sg->addr_lo);
@@ -206,6 +214,35 @@ static inline void ldpaa_sg_set_final(struct dpaa_sg_entry *sg, bool final)
 	sg->bpid_offset |= (u32)final << 31;
 }
 
+/* Endianness conversion helper functions
+ * The accelerator drivers which construct / read scatter gather entries
+ * need to call these in order to account for endianness mismatches between
+ * hardware and cpu
+ */
+#ifdef __BIG_ENDIAN
+static inline void ldpaa_sg_cpu_to_le(struct dpaa_sg_entry *sg)
+{
+	uint32_t *p = (uint32_t *)sg;
+	int i;
+
+	for (i = 0; i < sizeof(*sg) / sizeof(u32); i++)
+		cpu_to_le32s(p++);
+}
+
+static inline void ldpaa_sg_le_to_cpu(struct dpaa_sg_entry *sg)
+{
+	uint32_t *p = (uint32_t *)sg;
+	int i;
+
+	for (i = 0; i < sizeof(*sg) / sizeof(u32); i++)
+		le32_to_cpus(p++);
+}
+#else
+#define ldpaa_sg_cpu_to_le(sg)
+#define ldpaa_sg_le_to_cpu(sg)
+#endif /* __BIG_ENDIAN */
+
+
 /* When frames are dequeued, the FDs show up inside "dequeue" result structures
  * (if at all, not all dequeue results contain valid FDs). This structure type
  * is intentionally defined without internal detail, and the only reason it
-- 
1.7.5.4

