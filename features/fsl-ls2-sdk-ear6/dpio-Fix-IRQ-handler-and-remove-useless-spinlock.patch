From 417f66d18b385f530e662f0251448cdb292a669f Mon Sep 17 00:00:00 2001
From: Jeffrey Ladouceur <Jeffrey.Ladouceur@freescale.com>
Date: Thu, 9 Apr 2015 10:41:18 -0400
Subject: [PATCH 111/452] dpio: Fix IRQ handler and remove useless spinlock

The IRQ handler for a threaded IRQ requires two parts: initally the handler
should check status and inhibit the IRQ then the threaded portion should
process and reenable.

Also remove a spinlock that was redundant with the QMan driver and a debug
check that could trigger under a race condition

Signed-off-by: Roy Pledge <Roy.Pledge@freescale.com>
Signed-off-by: Jeffrey Ladouceur <Jeffrey.Ladouceur@freescale.com>
Change-Id: I64926583af0be954228de94ae354fa005c8ec88a
Reviewed-on: http://git.am.freescale.net:8181/34706
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Haiying Wang <Haiying.Wang@freescale.com>
Reviewed-by: Roy Pledge <roy.pledge@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Xulin: Original patch taken from FSL LS2085 SDK EAR6.0,
LS2085A-SDK-SOURCE-20160304-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/dpio-drv.c     |   10 ++++++-
 drivers/staging/fsl-mc/bus/dpio/dpio_service.c |   34 ++++++++++++------------
 drivers/staging/fsl-mc/include/fsl_dpaa_io.h   |    1 +
 3 files changed, 27 insertions(+), 18 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c b/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
index dec3785..7e03f79 100644
--- a/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
+++ b/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
@@ -60,6 +60,14 @@ struct dpio_priv {
 	char irq_name[MAX_DPIO_IRQ_NAME];
 };
 
+static irqreturn_t dpio_irq_pre_handler(int irq_num, void *arg)
+{
+	struct device *dev = (struct device *)arg;
+	struct dpio_priv *priv = dev_get_drvdata(dev);
+
+	return dpaa_io_preirq(priv->io);
+}
+
 static irqreturn_t dpio_irq_handler(int irq_num, void *arg)
 {
 	struct device *dev = (struct device *)arg;
@@ -98,7 +106,7 @@ static int register_dpio_irq_handlers(struct fsl_mc_device *ls_dev)
 		irq = ls_dev->irqs[i];
 		error = devm_request_threaded_irq(&ls_dev->dev,
 						irq->irq_number,
-						NULL,
+						dpio_irq_pre_handler,
 						dpio_irq_handler,
 						IRQF_NO_SUSPEND |
 							IRQF_ONESHOT,
diff --git a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
index 025f261..0033d87 100644
--- a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
+++ b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
@@ -90,7 +90,6 @@ struct dpaa_io {
 			 * eventually adherence to cpu-affinity will presumably
 			 * relax the locking requirements. */
 			spinlock_t lock_mgmt_cmd;
-			spinlock_t lock_pull_start;
 			spinlock_t lock_notifications;
 			struct list_head notifications;
 		} object;
@@ -103,7 +102,6 @@ struct dpaa_io_store {
 	struct ldpaa_dq *vaddr;
 	void *alloced_addr; /* the actual return from kmalloc as it may
 			       be adjusted for alignment purposes */
-	int busy;
 	uint8_t token; /* current token if busy, otherwise next token */
 	unsigned int idx; /* position of the next-to-be-returned entry */
 	struct qbman_swp *swp; /* portal used to issue VDQCR */
@@ -233,7 +231,6 @@ struct dpaa_io *dpaa_io_create(const struct dpaa_io_desc *desc)
 	}
 	INIT_LIST_HEAD(&o->node);
 	spin_lock_init(&o->lock_mgmt_cmd);
-	spin_lock_init(&o->lock_pull_start);
 	spin_lock_init(&o->lock_notifications);
 	INIT_LIST_HEAD(&o->notifications);
 	if (!o->dpio_desc.has_irq)
@@ -355,6 +352,21 @@ int dpaa_io_poll(struct dpaa_io *obj)
 }
 EXPORT_SYMBOL(dpaa_io_poll);
 
+int dpaa_io_preirq(struct dpaa_io *obj)
+{
+	struct qbman_swp *swp;
+	uint32_t status;
+
+	if (obj->magic != MAGIC_OBJECT)
+		return -EINVAL;
+	swp = obj->object.swp;
+	status = qbman_swp_interrupt_read_status(swp);
+	if (!status)
+		return IRQ_NONE;
+	qbman_swp_interrupt_set_inhibit(swp, 1);
+	return IRQ_WAKE_THREAD;
+}
+
 int dpaa_io_irq(struct dpaa_io *obj)
 {
 	struct qbman_swp *swp;
@@ -368,6 +380,7 @@ int dpaa_io_irq(struct dpaa_io *obj)
 		return IRQ_NONE;
 	dpaa_io_poll(obj);
 	qbman_swp_interrupt_clear_status(swp, status);
+	qbman_swp_interrupt_set_inhibit(swp, 0);
 	return IRQ_HANDLED;
 }
 EXPORT_SYMBOL(dpaa_io_irq);
@@ -505,16 +518,9 @@ int dpaa_io_service_pull_fq(struct dpaa_io *d, uint32_t fqid,
 			    struct dpaa_io_store *s)
 {
 	struct qbman_pull_desc pd;
-	unsigned long irqflags;
 	int err;
 
-	/* This is a debug check, so no need for hand-wringing over
-	 * atomic test-and-set, or locking, etc. */
-	BUG_ON(s->busy);
-	s->busy = 1;
-
 	qbman_pull_desc_clear(&pd);
-	/* TODO: 'stash'==1? */
 	qbman_pull_desc_set_storage(&pd, s->vaddr, s->paddr, 1);
 	qbman_pull_desc_set_numframes(&pd, s->max);
 	qbman_pull_desc_set_token(&pd, s->token);
@@ -522,14 +528,12 @@ int dpaa_io_service_pull_fq(struct dpaa_io *d, uint32_t fqid,
 	d = service_select_by_cpu(d, -1);
 	if (d) {
 		s->swp = d->object.swp;
-		spin_lock_irqsave(&d->object.lock_pull_start, irqflags);
 		err = qbman_swp_pull(d->object.swp, &pd);
-		spin_unlock_irqrestore(&d->object.lock_pull_start, irqflags);
 	}
 	if (!d)
 		return -ENODEV;
 	if (err)
-		s->busy = 0;
+		s->swp = NULL;
 	return err;
 }
 EXPORT_SYMBOL(dpaa_io_service_pull_fq);
@@ -643,7 +647,6 @@ struct dpaa_io_store *dpaa_io_store_create(unsigned int max_frames,
 		kfree(ret);
 		return NULL;
 	}
-	ret->busy = 0;
 	ret->token = 0x53;
 	ret->idx = 0;
 	ret->dev = dev;
@@ -666,8 +669,6 @@ struct ldpaa_dq *dpaa_io_store_next(struct dpaa_io_store *s, int *is_last)
 	int match;
 	struct ldpaa_dq *ret = &s->vaddr[s->idx];
 
-	BUG_ON(!s->busy);
-
 	match = qbman_dq_entry_has_newtoken(s->swp, ret, s->token);
 	if (!match) {
 		*is_last = 0;
@@ -682,7 +683,6 @@ struct ldpaa_dq *dpaa_io_store_next(struct dpaa_io_store *s, int *is_last)
 		else
 			s->token++;
 		s->idx = 0;
-		s->busy = 0;
 		/* If we get an empty dequeue result to terminate a zero-results
 		 * vdqcr, return NULL to the caller rather than expecting him to
 		 * check non-NULL results every time. */
diff --git a/drivers/staging/fsl-mc/include/fsl_dpaa_io.h b/drivers/staging/fsl-mc/include/fsl_dpaa_io.h
index 62a97ef..6ace52f 100644
--- a/drivers/staging/fsl-mc/include/fsl_dpaa_io.h
+++ b/drivers/staging/fsl-mc/include/fsl_dpaa_io.h
@@ -110,6 +110,7 @@ int dpaa_io_poll(struct dpaa_io *);
 
 /* Process any notifications and h/w-initiated events that are irq-driven.
  * Obligatory for DPIO objects that have dpaa_io_desc::has_irq non-zero. */
+int dpaa_io_preirq(struct dpaa_io *);
 int dpaa_io_irq(struct dpaa_io *);
 
 /* If a polling application is going to stop polling for a period of time and
-- 
1.7.5.4

