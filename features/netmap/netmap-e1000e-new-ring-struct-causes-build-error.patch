From 729bf198f3b80d30b6d87038546af74ea0a65c42 Mon Sep 17 00:00:00 2001
From: Vu Tran <vu.tran@windriver.com>
Date: Fri, 11 Oct 2013 13:52:59 -0400
Subject: [PATCH] netmap: e1000e new ring struct causes build error

There are errors while building e1000e netmap plugin driver due to the
newer version of e1000e driver.  With newer version txr/rxr->tail/head
is not an index any more but is a real address.

Signed-off-by: Vu Tran <vu.tran@windriver.com>
---
 drivers/staging/netmap/if_e1000e_netmap.h | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/drivers/staging/netmap/if_e1000e_netmap.h b/drivers/staging/netmap/if_e1000e_netmap.h
index 35905eb..ff26c70 100644
--- a/drivers/staging/netmap/if_e1000e_netmap.h
+++ b/drivers/staging/netmap/if_e1000e_netmap.h
@@ -42,6 +42,7 @@
 #include "netmap_kern.h"
 #define SOFTC_T	e1000_adapter
 
+#define E1000_RX_DESC(R, i)		E1000_GET_DESC(R, i, e1000_rx_desc)
 
 /*
  * Register/unregister, similar to e1000_reinit_safe()
@@ -152,7 +153,7 @@ e1000_netmap_txsync(struct ifnet *ifp, u_int ring_nr, int do_lock)
 		wmb(); /* synchronize writes to the NIC ring */
 
 		txr->next_to_use = l;
-		writel(l, adapter->hw.hw_addr + txr->tail);
+		writel(l, txr->tail);
 		mmiowb(); // XXX where do we need this ?
 	}
 
@@ -160,7 +161,7 @@ e1000_netmap_txsync(struct ifnet *ifp, u_int ring_nr, int do_lock)
 		int delta;
 
 		/* record completed transmissions using TDH */
-		l = readl(adapter->hw.hw_addr + txr->head);
+		l = readl(txr->head);
 		if (l >= kring->nkr_num_slots) { /* XXX can it happen ? */
 			D("TDH wrap %d", l);
 			l -= kring->nkr_num_slots;
@@ -269,7 +270,7 @@ e1000_netmap_rxsync(struct ifnet *ifp, u_int ring_nr, int do_lock)
 		 * so move l back by one unit
 		 */
 		l = (l == 0) ? lim : l - 1;
-		writel(l, adapter->hw.hw_addr + rxr->tail);
+		writel(l, rxr->tail);
 	}
 	/* tell userspace that there are new packets */
 	ring->avail = kring->nr_hwavail - resvd;
@@ -320,7 +321,7 @@ static int e1000e_netmap_init_buffers(struct SOFTC_T *adapter)
 	/* preserve buffers already made available to clients */
 	i = rxr->count - 1 - na->rx_rings[0].nr_hwavail;
 	wmb();	/* Force memory writes to complete */
-	writel(i, adapter->hw.hw_addr + rxr->tail);
+	writel(i, rxr->tail);
 
 	/* now initialize the tx ring */
 	slot = netmap_reset(na, NR_TX, 0, 0);
-- 
1.8.4

