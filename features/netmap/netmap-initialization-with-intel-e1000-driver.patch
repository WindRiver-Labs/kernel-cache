From a06c6743cacdb75e58a12dbdb0dc5aa0ca30e130 Mon Sep 17 00:00:00 2001
From: Vu Tran <vu.tran@windriver.com>
Date: Fri, 11 Oct 2013 13:52:57 -0400
Subject: [PATCH] netmap: initialization with intel e1000 driver

The files added in this commit were originally sourced from the netmap package:
  http://info.iet.unipi.it/~luigi/doc/20120813-netmap.tgz

patch file:
  LINUX/patches/diff--e1000--20632--99999--ok

Integrate the initialization of netmap with the intel e1000
driver. This patch can be applied to all kernel after 2.6.32.

Also the patch modifies the new path of the include
if_e1000_netmap.h file.

Signed-off-by: Michel Thebeau <michel.thebeau@windriver.com>
Signed-off-by: Vu Tran <vu.tran@windriver.com>
---
 drivers/net/ethernet/intel/e1000/e1000_main.c | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/drivers/net/ethernet/intel/e1000/e1000_main.c b/drivers/net/ethernet/intel/e1000/e1000_main.c
index 8d8908d..f22fe48 100644
--- a/drivers/net/ethernet/intel/e1000/e1000_main.c
+++ b/drivers/net/ethernet/intel/e1000/e1000_main.c
@@ -222,6 +222,10 @@ static int debug = -1;
 module_param(debug, int, 0);
 MODULE_PARM_DESC(debug, "Debug level (0=none,...,16=all)");
 
+#if defined(CONFIG_NETMAP) || defined(CONFIG_NETMAP_MODULE)
+#include <../drivers/staging/netmap/if_e1000_netmap.h>
+#endif
+
 /**
  * e1000_get_hw_dev - return device
  * used by hardware layer to print debugging information
@@ -396,6 +400,10 @@ static void e1000_configure(struct e1000_adapter *adapter)
 	e1000_configure_tx(adapter);
 	e1000_setup_rctl(adapter);
 	e1000_configure_rx(adapter);
+#ifdef DEV_NETMAP
+	if (e1000_netmap_init_buffers(adapter))
+		return;
+#endif /* DEV_NETMAP */
 	/* call E1000_DESC_UNUSED which always leaves
 	 * at least 1 descriptor unused to make sure
 	 * next_to_use != next_to_clean */
@@ -1223,6 +1231,10 @@ static int __devinit e1000_probe(struct pci_dev *pdev,
 
 	e1000_vlan_filter_on_off(adapter, false);
 
+#ifdef DEV_NETMAP
+	e1000_netmap_attach(adapter);
+#endif /* DEV_NETMAP */
+
 	/* print bus type/speed/width info */
 	e_info(probe, "(PCI%s:%dMHz:%d-bit) %pM\n",
 	       ((hw->bus_type == e1000_bus_type_pcix) ? "-X" : ""),
@@ -1289,6 +1301,10 @@ static void __devexit e1000_remove(struct pci_dev *pdev)
 	kfree(adapter->tx_ring);
 	kfree(adapter->rx_ring);
 
+#ifdef DEV_NETMAP
+	netmap_detach(netdev);
+#endif /* DEV_NETMAP */
+
 	if (hw->mac_type == e1000_ce4100)
 		iounmap(hw->ce4100_gbe_mdio_base_virt);
 	iounmap(hw->hw_addr);
@@ -3833,6 +3849,10 @@ static bool e1000_clean_tx_irq(struct e1000_adapter *adapter,
 	unsigned int count = 0;
 	unsigned int total_tx_bytes=0, total_tx_packets=0;
 
+#ifdef DEV_NETMAP
+	if (netmap_tx_irq(netdev, 0))
+		return 1; /* cleaned ok */
+#endif /* DEV_NETMAP */
 	i = tx_ring->next_to_clean;
 	eop = tx_ring->buffer_info[i].next_to_watch;
 	eop_desc = E1000_TX_DESC(*tx_ring, eop);
@@ -4218,6 +4238,11 @@ static bool e1000_clean_rx_irq(struct e1000_adapter *adapter,
 	bool cleaned = false;
 	unsigned int total_rx_bytes=0, total_rx_packets=0;
 
+#ifdef DEV_NETMAP
+	ND("calling netmap_rx_irq");
+	if (netmap_rx_irq(netdev, 0, work_done))
+		return 1; /* seems to be ignored */
+#endif /* DEV_NETMAP */
 	i = rx_ring->next_to_clean;
 	rx_desc = E1000_RX_DESC(*rx_ring, i);
 	buffer_info = &rx_ring->buffer_info[i];
-- 
1.8.4

