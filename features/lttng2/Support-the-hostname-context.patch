From 37af99f116f916fc4af4d39e47b83c9d8c54af27 Mon Sep 17 00:00:00 2001
From: Julien Desfossez <jdesfossez@efficios.com>
Date: Thu, 23 Aug 2012 16:54:03 -0400
Subject: [PATCH 17/55] Support the hostname context

commit 975da2c003441a8a16a36947e9500237c197e91b lttng.org/lttng-modules.git

This is particularly useful when tracing a machine with containers
(lxc), that way we can easily distinguish events generated inside
a container.

[ Edit by Mathieu Desnoyers: various fix. ]

Signed-off-by: Julien Desfossez <jdesfossez@efficios.com>
Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Signed-off-by: Paul Barrette <paul.barrette@windriver.com>
---
 drivers/staging/lttng/Makefile                 |    2 +-
 drivers/staging/lttng/lttng-abi.c              |    2 +
 drivers/staging/lttng/lttng-abi.h              |    1 +
 drivers/staging/lttng/lttng-context-hostname.c |   97 +++++++++++++++++++++++
 drivers/staging/lttng/lttng-events.h           |    1 +
 5 files changed, 102 insertions(+), 1 deletion(-)
 create mode 100644 drivers/staging/lttng/lttng-context-hostname.c

diff --git a/drivers/staging/lttng/Makefile b/drivers/staging/lttng/Makefile
index b91113e..d4b09bb 100644
--- a/drivers/staging/lttng/Makefile
+++ b/drivers/staging/lttng/Makefile
@@ -20,7 +20,7 @@ lttng-tracer-objs :=  lttng-events.o lttng-abi.o \
 			lttng-context-vpid.o lttng-context-tid.o \
 			lttng-context-vtid.o lttng-context-ppid.o \
 			lttng-context-vppid.o lttng-calibrate.o \
-			wrapper/random.o
+			lttng-context-hostname.o wrapper/random.o
 
 obj-m += lttng-statedump.o
 lttng-statedump-objs := lttng-statedump-impl.o wrapper/irqdesc.o
diff --git a/drivers/staging/lttng/lttng-abi.c b/drivers/staging/lttng/lttng-abi.c
index 26a02ed..eadf0a8 100644
--- a/drivers/staging/lttng/lttng-abi.c
+++ b/drivers/staging/lttng/lttng-abi.c
@@ -195,6 +195,8 @@ long lttng_abi_add_context(struct file *file,
 				ctx);
 	case LTTNG_KERNEL_CONTEXT_PROCNAME:
 		return lttng_add_procname_to_ctx(ctx);
+	case LTTNG_KERNEL_CONTEXT_HOSTNAME:
+		return lttng_add_hostname_to_ctx(ctx);
 	default:
 		return -EINVAL;
 	}
diff --git a/drivers/staging/lttng/lttng-abi.h b/drivers/staging/lttng/lttng-abi.h
index dc230d8..cf72b12 100644
--- a/drivers/staging/lttng/lttng-abi.h
+++ b/drivers/staging/lttng/lttng-abi.h
@@ -123,6 +123,7 @@ enum lttng_kernel_context_type {
 	LTTNG_KERNEL_CONTEXT_VTID		= 7,
 	LTTNG_KERNEL_CONTEXT_PPID		= 8,
 	LTTNG_KERNEL_CONTEXT_VPPID		= 9,
+	LTTNG_KERNEL_CONTEXT_HOSTNAME		= 10,
 };
 
 struct lttng_kernel_perf_counter_ctx {
diff --git a/drivers/staging/lttng/lttng-context-hostname.c b/drivers/staging/lttng/lttng-context-hostname.c
new file mode 100644
index 0000000..e38340b
--- /dev/null
+++ b/drivers/staging/lttng/lttng-context-hostname.c
@@ -0,0 +1,97 @@
+/*
+ * lttng-context-hostname.c
+ *
+ * LTTng hostname context.
+ *
+ * Copyright (C) 2009-2012 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; only
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/sched.h>
+#include <linux/utsname.h>
+#include "lttng-events.h"
+#include "wrapper/ringbuffer/frontend_types.h"
+#include "wrapper/vmalloc.h"
+#include "lttng-tracer.h"
+
+#define LTTNG_HOSTNAME_CTX_LEN	(__NEW_UTS_LEN + 1)
+
+static
+size_t hostname_get_size(size_t offset)
+{
+	size_t size = 0;
+
+	size += LTTNG_HOSTNAME_CTX_LEN;
+	return size;
+}
+
+static
+void hostname_record(struct lttng_ctx_field *field,
+		 struct lib_ring_buffer_ctx *ctx,
+		 struct lttng_channel *chan)
+{
+	struct nsproxy *nsproxy;
+	struct uts_namespace *ns;
+	char *hostname;
+
+	rcu_read_lock();
+	nsproxy = task_nsproxy(current);
+	if (nsproxy) {
+		ns = nsproxy->uts_ns;
+		hostname = ns->name.nodename;
+		chan->ops->event_write(ctx, hostname,
+				LTTNG_HOSTNAME_CTX_LEN);
+	} else {
+		chan->ops->event_memset(ctx, 0,
+				LTTNG_HOSTNAME_CTX_LEN);
+	}
+	rcu_read_unlock();
+}
+
+int lttng_add_hostname_to_ctx(struct lttng_ctx **ctx)
+{
+	struct lttng_ctx_field *field;
+
+	field = lttng_append_context(ctx);
+	if (!field)
+		return -ENOMEM;
+	if (lttng_find_context(*ctx, "hostname")) {
+		lttng_remove_context_field(ctx, field);
+		return -EEXIST;
+	}
+	field->event_field.name = "hostname";
+	field->event_field.type.atype = atype_array;
+	field->event_field.type.u.array.elem_type.atype = atype_integer;
+	field->event_field.type.u.array.elem_type.u.basic.integer.size = sizeof(char) * CHAR_BIT;
+	field->event_field.type.u.array.elem_type.u.basic.integer.alignment = lttng_alignof(char) * CHAR_BIT;
+	field->event_field.type.u.array.elem_type.u.basic.integer.signedness = is_signed_type(char);
+	field->event_field.type.u.array.elem_type.u.basic.integer.reverse_byte_order = 0;
+	field->event_field.type.u.array.elem_type.u.basic.integer.base = 10;
+	field->event_field.type.u.array.elem_type.u.basic.integer.encoding = lttng_encode_UTF8;
+	field->event_field.type.u.array.length = LTTNG_HOSTNAME_CTX_LEN;
+
+	field->get_size = hostname_get_size;
+	field->record = hostname_record;
+	wrapper_vmalloc_sync_all();
+	return 0;
+}
+EXPORT_SYMBOL_GPL(lttng_add_hostname_to_ctx);
+
+MODULE_LICENSE("GPL and additional rights");
+MODULE_AUTHOR("Mathieu Desnoyers");
+MODULE_DESCRIPTION("Linux Trace Toolkit Perf Support");
diff --git a/drivers/staging/lttng/lttng-events.h b/drivers/staging/lttng/lttng-events.h
index f12d91f..be3979a 100644
--- a/drivers/staging/lttng/lttng-events.h
+++ b/drivers/staging/lttng/lttng-events.h
@@ -349,6 +349,7 @@ int lttng_add_tid_to_ctx(struct lttng_ctx **ctx);
 int lttng_add_vtid_to_ctx(struct lttng_ctx **ctx);
 int lttng_add_ppid_to_ctx(struct lttng_ctx **ctx);
 int lttng_add_vppid_to_ctx(struct lttng_ctx **ctx);
+int lttng_add_hostname_to_ctx(struct lttng_ctx **ctx);
 #if defined(CONFIG_PERF_EVENTS) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33))
 int lttng_add_perf_counter_to_ctx(uint32_t type,
 				  uint64_t config,
-- 
1.7.9.7

