From c77369a449c8c3d9fa53a97e8bae58a89924b43f Mon Sep 17 00:00:00 2001
From: Paul Barrette <paul.barrette@windriver.com>
Date: Wed, 11 Jul 2012 15:37:01 -0400
Subject: [PATCH] LTTNG2: fix compilation issue for 64bit targets.

vsyscall_64.c calls _trace_clock_is_sync even if
CONFIG_HAVE_TRACE_CLOCK is not defined.  The result is:

linux/arch/x86/kernel/vsyscall_64.c:124: undefined reference to
`_trace_clock_is_sync'

cf: arch/x86/kernel/Makefile:
	obj-$(CONFIG_X86_64)	+= vsyscall_64.o
	....
	obj-$(CONFIG_HAVE_TRACE_CLOCK)	+= trace-clock.o

Added the appropriate ifdefs to make sure _trace_clock_is_sync is not
referenced.  This fix is only required for 64bit compilations.

Signed-off-by: Paul Barrette <paul.barrette@windriver.com>
---
 arch/x86/kernel/vsyscall_64.c |    4 ++++
 1 file changed, 4 insertions(+)

diff --git a/arch/x86/kernel/vsyscall_64.c b/arch/x86/kernel/vsyscall_64.c
index 4d00f2a..fe0e792 100644
--- a/arch/x86/kernel/vsyscall_64.c
+++ b/arch/x86/kernel/vsyscall_64.c
@@ -85,6 +85,7 @@ void update_vsyscall_tz(void)
 	vsyscall_gtod_data.sys_tz = sys_tz;
 }
 
+#ifdef CONFIG_HAVE_TRACE_CLOCK
 void update_trace_clock_is_sync_vdso(void)
 {
 	unsigned long flags;
@@ -96,6 +97,7 @@ void update_trace_clock_is_sync_vdso(void)
 	local_irq_restore(flags);
 }
 EXPORT_SYMBOL_GPL(update_trace_clock_is_sync_vdso);
+#endif
 
 void update_vsyscall(struct timespec *wall_time, struct timespec *wtm,
 			struct clocksource *clock, u32 mult)
@@ -121,7 +123,9 @@ void update_vsyscall(struct timespec *wall_time, struct timespec *wtm,
 	vsyscall_gtod_data.wall_time_coarse	= __current_kernel_time();
 	vsyscall_gtod_data.monotonic_time_coarse =
 		timespec_add(vsyscall_gtod_data.wall_time_coarse, *wtm);
+#ifdef CONFIG_HAVE_TRACE_CLOCK
 	vsyscall_gtod_data.trace_clock_is_sync = _trace_clock_is_sync;
+#endif
 
 	write_seqcount_end(&vsyscall_gtod_data.seq);
 }
-- 
1.7.9.7

