From 2e391efe0a547d578e9567a3f18ea971e83099a3 Mon Sep 17 00:00:00 2001
From: Gregory Haskins <ghaskins@novell.com>
Date: Thu, 5 Nov 2009 09:35:00 -0500
Subject: [PATCH 078/119] vbus: fix kobject_init

We are failing to check error codes with the kobject subsystem, so
lets fix this.

Signed-off-by: Gregory Haskins <ghaskins@novell.com>
---
 kernel/vbus/core.c |   32 +++++++++++++++++++++++---------
 1 files changed, 23 insertions(+), 9 deletions(-)

diff --git a/kernel/vbus/core.c b/kernel/vbus/core.c
index 4041669..e6d191b 100644
--- a/kernel/vbus/core.c
+++ b/kernel/vbus/core.c
@@ -108,8 +108,10 @@ int vbus_device_interface_register(struct vbus_device *dev,
 		return ret;
 	}
 
-	kobject_init_and_add(&intf->kobj, &interface_ktype,
-			     &vbus->devices.kobj, "%ld", intf->id);
+	ret = kobject_init_and_add(&intf->kobj, &interface_ktype,
+				   &vbus->devices.kobj, "%ld", intf->id);
+	if (ret < 0)
+		goto error;
 
 	/* Create the basic attribute files associated with this kobject */
 	ret = sysfs_create_group(&intf->kobj, &attr_group);
@@ -346,8 +348,9 @@ int vbus_create(const char *name, struct vbus **bus)
 	kref_init(&_bus->kref);
 	mutex_init(&_bus->lock);
 
-	kobject_init_and_add(&_bus->kobj, &vbus_ktype,
-			     vbus_root.buses.kobj, name);
+	ret = kobject_init_and_add(&_bus->kobj, &vbus_ktype,
+				   vbus_root.buses.kobj, name);
+	BUG_ON(ret < 0);
 
 	vbus_subdir_init(&_bus->devices, "devices", &_bus->kobj,
 			 &null_ktype, &interface_map_ops);
@@ -442,23 +445,34 @@ static struct kobj_type devshell_ktype = {
 	.sysfs_ops = &vbus_dev_attr_ops,
 };
 
-static void _interfaces_init(struct vbus_devshell *ds)
+static int _interfaces_init(struct vbus_devshell *ds)
 {
-	kobject_init_and_add(&ds->intfs, &null_ktype, &ds->kobj, "interfaces");
+	return kobject_init_and_add(&ds->intfs, &null_ktype, &ds->kobj,
+				    "interfaces");
 }
 
 int vbus_devshell_create(const char *name, struct vbus_devshell **ds)
 {
 	struct vbus_devshell *_ds = NULL;
+	int ret;
 
 	_ds = kzalloc(sizeof(*_ds), GFP_KERNEL);
 	if (!_ds)
 		return -ENOMEM;
 
-	kobject_init_and_add(&_ds->kobj, &devshell_ktype,
-			     vbus_root.devices.kobj, name);
+	ret = kobject_init_and_add(&_ds->kobj, &devshell_ktype,
+				   vbus_root.devices.kobj, name);
+	if (ret < 0) {
+		kfree(_ds);
+		return ret;
+	}
 
-	_interfaces_init(_ds);
+	ret = _interfaces_init(_ds);
+	if (ret < 0) {
+		kobject_put(&_ds->kobj);
+		kfree(_ds);
+		return ret;
+	}
 
 	*ds = _ds;
 
-- 
1.6.5.2

