From c8b74f96fc9a144a3f0ca859af19952b139b63f0 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Wed, 3 Dec 2008 11:39:54 +0800
Subject: [PATCH] memcg fix page mapping null pointer

original commit number:
    b7abea9630bc8ffc663a751e46680db25c4cdf8d

  memcg: make page->mapping NULL before uncharge

  This patch tries to make page->mapping to be NULL before
  mem_cgroup_uncharge_cache_page() is called.

  "page->mapping == NULL" is a good check for "whether the
  page is still radix-tree or not".  This patch also adds
  BUG_ON() to mem_cgroup_uncharge_cache_page();

Integrated-by: Zumeng Chen <zumeng.chen@windriver.com>
Signed-off-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
---
 mm/filemap.c    |    2 +-
 mm/memcontrol.c |    1 +
 mm/migrate.c    |    9 +++++++--
 3 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/mm/filemap.c b/mm/filemap.c
index d2a6609..0b0632f 100644
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -116,12 +116,12 @@ void __remove_from_page_cache(struct page *page)
 {
 	struct address_space *mapping = page->mapping;
 
-	mem_cgroup_uncharge_cache_page(page);
 	radix_tree_delete(&mapping->page_tree, page->index);
 	page->mapping = NULL;
 	mapping->nrpages--;
 	__dec_zone_page_state(page, NR_FILE_PAGES);
 	BUG_ON(page_mapped(page));
+	mem_cgroup_uncharge_cache_page(page);
 
 	/*
 	 * Some filesystems seem to re-dirty the page even after
diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index 41cd095..c55da10 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -1204,6 +1204,7 @@ void mem_cgroup_uncharge_page(struct page *page)
 void mem_cgroup_uncharge_cache_page(struct page *page)
 {
 	VM_BUG_ON(page_mapped(page));
+	VM_BUG_ON(page->mapping);
 	__mem_cgroup_uncharge_common(page, MEM_CGROUP_CHARGE_TYPE_CACHE);
 }
 
diff --git a/mm/migrate.c b/mm/migrate.c
index 2a80136..6ca4eb8 100644
--- a/mm/migrate.c
+++ b/mm/migrate.c
@@ -374,8 +374,6 @@ static int migrate_page_move_mapping(struct address_space *mapping,
 	__inc_zone_page_state(newpage, NR_FILE_PAGES);
 
 	spin_unlock_irq(&mapping->tree_lock);
-	if (!PageSwapCache(newpage))
-		mem_cgroup_uncharge_cache_page(page);
 
 	return 0;
 }
@@ -385,6 +383,8 @@ static int migrate_page_move_mapping(struct address_space *mapping,
  */
 static void migrate_page_copy(struct page *newpage, struct page *page)
 {
+	int anon;
+
 	copy_highpage(newpage, page);
 
 	if (PageError(page))
@@ -418,8 +418,13 @@ static void migrate_page_copy(struct page *newpage, struct page *page)
 	ClearPageActive(page);
 	ClearPagePrivate(page);
 	set_page_private(page, 0);
+	/* page->mapping contains a flag for PageAnon() */
+	anon = PageAnon(page);
 	page->mapping = NULL;
 
+	if (!anon) /* This page was removed from radix-tree. */
+		mem_cgroup_uncharge_cache_page(page);
+
 	/*
 	 * If any waiters have accumulated on the new page then
 	 * wake them up.
-- 
1.6.0.2.GIT

