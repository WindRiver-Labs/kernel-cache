From a00f8657573cf0ee4a9478d9e68a443c32bf16cb Mon Sep 17 00:00:00 2001
From: dengtaiping <dengtaiping@actions-semi.com>
Date: Tue, 15 Dec 2015 19:25:08 +0800
Subject: [PATCH 40/62] usb: aotg: reset fifo addr after adding udc device

commit 16f0f215b33b57bedd2e6c45c2d213d60414c184 from
https://github.com/xapp-le/kernel.git

Change-Id: Iddfdc28e8afb8b1b0fa23cdf34b9d96e251a56f0
---
 drivers/usb/Kconfig          |    3 +-
 drivers/usb/aotg/aotg_core.c |   11 ++-
 drivers/usb/aotg/aotg_hcd.c  |  152 ++----------------------------------------
 drivers/usb/aotg/aotg_hcd.h  |    2 +-
 drivers/usb/aotg/aotg_mon.c  |    2 +-
 drivers/usb/aotg/aotg_mon.h  |    2 +-
 drivers/usb/aotg/aotg_udc.c  |   19 +++--
 drivers/usb/aotg/aotg_udc.h  |    1 +
 8 files changed, 31 insertions(+), 161 deletions(-)

diff --git a/drivers/usb/Kconfig b/drivers/usb/Kconfig
index b165fdc..9502825 100755
--- a/drivers/usb/Kconfig
+++ b/drivers/usb/Kconfig
@@ -95,9 +95,10 @@ source "drivers/usb/image/Kconfig"
 
 source "drivers/usb/usbip/Kconfig"
 
+source "drivers/usb/aotg/Kconfig"
+
 endif
 
-source "drivers/usb/aotg/Kconfig"
 
 source "drivers/usb/musb/Kconfig"
 
diff --git a/drivers/usb/aotg/aotg_core.c b/drivers/usb/aotg/aotg_core.c
index 64d37c3..cbbc654 100755
--- a/drivers/usb/aotg/aotg_core.c
+++ b/drivers/usb/aotg/aotg_core.c
@@ -43,6 +43,7 @@
 #include <linux/of_address.h>
 #include <linux/of_device.h>
 #include <linux/of_irq.h>
+#include <mach/bootdev.h>
 
 #include <asm/irq.h>
 #include <linux/regulator/consumer.h>
@@ -495,8 +496,8 @@ int aotg_probe(struct platform_device *pdev)
 
 err2:
 	aotg_clk_enable(pdev->id, 0);
-	owl_powergate_power_off(acthcd->id ? OWL_POWERGATE_USB2_1 : OWL_POWERGATE_USB2_0);
-	iounmap(hcd->regs);
+	owl_powergate_power_off(pdev->id ? OWL_POWERGATE_USB2_1 : OWL_POWERGATE_USB2_0);
+	iounmap(regs);
 err1:
 	release_mem_region(res_mem->start, res_mem->end - res_mem->start + 1);
 err0:
@@ -732,6 +733,7 @@ int aotg_udc_register(int id)
 			}
 		}
 		aotg_udc_init(id);
+		aotg_udc_endpoint_config(acts_udc_controller);
 		pullup(acts_udc_controller, 1);
 		usb_setbitsb(USBEIRQ_USBIEN, acts_udc_controller->base + USBEIEN);
 	} else {
@@ -816,7 +818,8 @@ int is_udc_enable(int id)
 void aotg_udc_add(void)
 {
 	int id;
-	printk("%s %d.............\n",__func__,__LINE__);
+	if(owl_get_boot_mode() == OWL_BOOT_MODE_UPGRADE)
+		return;
 	if (is_udc_enable(0)) {
 		id = 0;
 	} else if (is_udc_enable(1)) {
@@ -831,6 +834,8 @@ void aotg_udc_add(void)
 void aotg_udc_remove(void)
 {
 	int id;
+	if(owl_get_boot_mode() == OWL_BOOT_MODE_UPGRADE)
+		return;
 	if (aotg_udc_enable[0])
 		id = 0;
 	else if (aotg_udc_enable[1])
diff --git a/drivers/usb/aotg/aotg_hcd.c b/drivers/usb/aotg/aotg_hcd.c
index 831395e..af4718c 100755
--- a/drivers/usb/aotg/aotg_hcd.c
+++ b/drivers/usb/aotg/aotg_hcd.c
@@ -269,7 +269,7 @@ static ulong get_fifo_addr(struct aotg_hcd *acthcd, int size)
 	for (i = 2; i < max_unit;) {
 		if (acthcd->fifo_map[i] != 0) {
 			i++;
-			continue;    //find first unused addr
+			continue; /*find first unused addr*/
 		}
 
 		for (j = i; j < max_unit; j++) {
@@ -283,16 +283,16 @@ static ulong get_fifo_addr(struct aotg_hcd *acthcd, int size)
 			}
 		}
 
-		if (j == 64) {
+		if (j == max_unit) {
 			break;
 		} else if (find_next) {
 			find_next = 0;
 			continue;
 		} else {
 			int k;
-			for (k = i; k <= j; k++) {
+			for (k = i; k <= j; k++)
 				acthcd->fifo_map[k] = (1 << 31) | (i * 64);
-			}
+
 			addr = i * ALLOC_FIFO_UNIT;
 			break;
 		}
@@ -544,149 +544,7 @@ static void aotg_start_ring_transfer(struct aotg_hcd *acthcd, struct aotg_hcep *
 	aotg_start_ring(ring, addr);
 }
 #endif
-/*
-static void aotg_stop_ring_transfer(struct aotg_hcd *acthcd, struct aotg_hcep *ep)
-{
-	struct aotg_ring *ring = ep->ring;
-
-	ep_disable(ep);
-	aotg_stop_ring(ring);
-}
-*/
-static int aotg_hcep_config_iso(struct aotg_hcd *acthcd, struct aotg_hcep *ep,
-			u8 type, u8 buftype, int is_out)
-{
-	int index = 0;
-	ulong addr = 0;
-	int get_ep = 0;
-	int subbuffer_count;
-	//u8 fifo_ctrl;
-
-	if (0 == (subbuffer_count = get_subbuffer_count(buftype))) {
-		dev_err(acthcd->dev, "error buftype: %02X, %s, %d\n", buftype, __func__, __LINE__);
-		return -EPIPE;
-	}
-
-	if (is_out) {
-		for (index = 1; index < MAX_EP_NUM; index++) {
-			if (acthcd->outep[index] == NULL) {
-				ep->is_out = 1;
-				ep->index = index;
-				ep->mask = (u8) (USB_HCD_OUT_MASK | index);
-				acthcd->outep[index] = ep;
-				get_ep = 1;
-				break;
-			}
-		}
-	} else {
-		for (index = 1; index < MAX_EP_NUM; index++) {
-			if (acthcd->inep[index] == NULL) {
-				ep->is_out = 0;
-				ep->index = index;
-				ep->mask = (u8) index;
-				acthcd->inep[index] = ep;
-				get_ep = 1;
-				break;
-			}
-		}
-	}
-
-	if (!get_ep) {
-		dev_err(acthcd->dev, "%s: no more available space for ep\n", __func__);
-		return -ENOSPC;
-	}
-
-	addr = get_fifo_addr(acthcd, subbuffer_count * MAX_PACKET(ep->maxpacket));
-	if (addr == 0) {
-		dev_err(acthcd->dev, "buffer configuration overload!! addr: %08X, subbuffer_count: %d, ep->maxpacket: %u\n",
-				(u32)addr, subbuffer_count, MAX_PACKET(ep->maxpacket));
-		if (is_out) {
-			acthcd->outep[ep->index] = NULL;
-		}
-		else {
-			acthcd->inep[ep->index] = NULL;
-		}
-		return -ENOSPC;
-	}
-	else {
-		ep->fifo_addr = addr;
-	}
-
-	ep->reg_hcepcon = get_hcepcon_reg(is_out, 
-							acthcd->base + HCOUT1CON, 
-							acthcd->base + HCIN1CON, 
-							ep->index);
-	ep->reg_hcepcs = get_hcepcs_reg(is_out, 
-							acthcd->base + HCOUT1CS, 
-							acthcd->base + HCIN1CS, 
-							ep->index);
-	ep->reg_hcepbc = get_hcepbc_reg(is_out, 
-							acthcd->base + HCOUT1BCL, 
-							acthcd->base + HCIN1BCL, 
-							ep->index);
-	ep->reg_hcepctrl = get_hcepctrl_reg(is_out, 
-							acthcd->base + HCOUT1CTRL, 
-							acthcd->base + HCIN1CTRL, 
-							ep->index);
-	ep->reg_hcmaxpck = get_hcepmaxpck_reg(is_out, 
-							acthcd->base + HCOUT1MAXPCKL, 
-							acthcd->base + HCIN1MAXPCKL, 
-							ep->index);
-	ep->reg_hcepaddr = get_hcepaddr_reg(is_out, 
-							acthcd->base + HCOUT1STADDR, 
-	    						acthcd->base + HCIN1STADDR, 
-	    						ep->index);
-	ep->reg_hcep_dev_addr = get_hcep_dev_addr_reg(is_out,
-							acthcd->base + HCOUT1ADDR, 
-	    						acthcd->base + HCIN1ADDR, 
-	    						ep->index);
-	ep->reg_hcep_port = get_hcep_port_reg(is_out,
-							acthcd->base + HCOUT1PORT, 
-	    						acthcd->base + HCIN1PORT, 
-	    						ep->index);
-	ep->reg_hcep_splitcs = get_hcep_splitcs_reg(is_out,
-							acthcd->base + HCOUT1SPILITCS, 
-	    						acthcd->base + HCIN1SPILITCS, 
-	    						ep->index);
-
-	//ep->reg_hcfifo = get_hcfifo_reg(acthcd->base + FIFO1DATA, ep->index);
-	if (!is_out) {
-		///* 5202 is just for write, read's HCINXCOUNT address is not the same with write address. */
-		//ep->reg_hcincount_wt = acthcd->base + HCIN1_COUNTL + (ep->index - 1) * 4;
-		//ep->reg_hcincount_rd = acthcd->base + HCIN1_COUNTL + (ep->index - 1) * 2;
-		ep->reg_hcerr = acthcd->base + HCIN0ERR + ep->index * 0x4;
-		ep->reg_hcep_interval = acthcd->base + HCEP0BINTERVAL + ep->index * 0x8;
-	}
-	else {
-		ep->reg_hcerr = acthcd->base + HCOUT0ERR + ep->index * 0x4;
-		ep->reg_hcep_interval = acthcd->base + HCOUT1BINTERVAL + (ep->index - 1) * 0x8;
-	}
-
-#ifdef DEBUG_EP_CONFIG
-	dev_info(acthcd->dev, "== ep->index: %d, is_out: %d, fifo addr: %08X\n", ep->index, is_out, (u32)addr);
-	dev_info(acthcd->dev, "== reg_hcepcon: %08lX, reg_hcepcs: %08lX, reg_hcepbc: %08lX, reg_hcepctrl: %08lX, reg_hcmaxpck: %08lX, ep->reg_hcepaddr: %08lX\n",
-			ep->reg_hcepcon,
-			ep->reg_hcepcs,
-			ep->reg_hcepbc,
-			ep->reg_hcepctrl,
-			ep->reg_hcmaxpck,
-			ep->reg_hcepaddr);
-#endif
-	
-	/*allocate buffer address of ep fifo */
-	writel(addr, ep->reg_hcepaddr);
-	writew(ep->maxpacket, ep->reg_hcmaxpck);
-	ep_setup(ep, type, buftype);	/*ep setup */
-	
-	/*reset this ep */
-	usb_settoggle(ep->udev, ep->epnum, is_out, 0);
-	aotg_hcep_reset(acthcd, ep->mask, ENDPRST_FIFORST | ENDPRST_TOGRST);
-	writeb(ep->epnum, ep->reg_hcepctrl);
-
-	return 0;
-}
 
-//support 3 bulk, 1 interrupt
 static int aotg_hcep_config(struct aotg_hcd *acthcd,
 			    struct aotg_hcep *ep,
 			    u8 type, u8 buftype, int is_out)
@@ -2220,7 +2078,7 @@ static struct aotg_hcep	*aotg_hcep_alloc(struct usb_hcd *hcd, struct urb *urb)
 		break;
 
 	case PIPE_ISOCHRONOUS:
-		retval = aotg_hcep_config_iso(acthcd, ep, EPCON_TYPE_ISO, EPCON_BUF_SINGLE, is_out);
+		retval = aotg_hcep_config(acthcd, ep, EPCON_TYPE_ISO, EPCON_BUF_SINGLE, is_out);
 		ep->iso_packets = (urb->ep->desc.wMaxPacketSize >> 11) & 3;
 		ep->interval = urb->ep->desc.bInterval;
 		writeb(ep->interval, ep->reg_hcep_interval);
diff --git a/drivers/usb/aotg/aotg_hcd.h b/drivers/usb/aotg/aotg_hcd.h
index f58e35d..c2aaecd 100755
--- a/drivers/usb/aotg/aotg_hcd.h
+++ b/drivers/usb/aotg/aotg_hcd.h
@@ -23,7 +23,7 @@
 #define  USB_HCD_IN_MASK	0x00 
 #define  USB_HCD_OUT_MASK 0x10 
  
-#define  AOTG_MAX_FIFO_SIZE    (512*10 + 64*2)	//5k
+#define  AOTG_MAX_FIFO_SIZE    (1024*15 + 64*2)
 #define  ALLOC_FIFO_UNIT        64
 //#define  AOTG_MIN_DMA_SIZE	  512
 //#define  AOTG_MIN_DMA_SIZE	  64
diff --git a/drivers/usb/aotg/aotg_mon.c b/drivers/usb/aotg/aotg_mon.c
index 78de6b8..33ebdbd 100755
--- a/drivers/usb/aotg/aotg_mon.c
+++ b/drivers/usb/aotg/aotg_mon.c
@@ -244,7 +244,7 @@ static struct aotg_uhost_mon_t * aotg_uhost_mon_alloc(void)
 	return umon;
 }
 
-void aotg_uhost_mon_init(void)
+void aotg_uhost_mon_init(struct work_struct *w)
 {
 	struct device_node *of_node;
 	enum of_gpio_flags flags;
diff --git a/drivers/usb/aotg/aotg_mon.h b/drivers/usb/aotg/aotg_mon.h
index f502146..828b2aa 100755
--- a/drivers/usb/aotg/aotg_mon.h
+++ b/drivers/usb/aotg/aotg_mon.h
@@ -6,7 +6,7 @@ extern int port_host_plug_detect[2];
 extern struct aotg_uhost_mon_t *aotg_uhost_mon0;
 extern struct aotg_uhost_mon_t *aotg_uhost_mon1;
 
-void aotg_uhost_mon_init(void);
+void aotg_uhost_mon_init(struct work_struct *w);
 void aotg_uhost_mon_exit(void);
 int usb2_set_dp_500k_15k(struct aotg_uhost_mon_t * umon, int enable_500k_up, int enable_15k_down);
 
diff --git a/drivers/usb/aotg/aotg_udc.c b/drivers/usb/aotg/aotg_udc.c
index f4c29fa..f55fbda 100755
--- a/drivers/usb/aotg/aotg_udc.c
+++ b/drivers/usb/aotg/aotg_udc.c
@@ -76,7 +76,6 @@ static inline void udc_handle_status(struct aotg_udc *udc);
 extern void done(struct aotg_ep *ep, struct aotg_request *req, int status);
 static int write_ep0_fifo(struct aotg_ep *ep, struct aotg_request *req);
 int pullup(struct aotg_udc *udc, int is_active);
-static int aotg_udc_endpoint_config(struct aotg_udc *udc, struct usb_gadget_driver *driver);
 static void udc_enable(struct aotg_udc *dev);
 static void udc_disable(struct aotg_udc *dev);
 
@@ -883,7 +882,7 @@ static int aotg_udc_start(struct usb_gadget *g, struct usb_gadget_driver *driver
 	udc->driver = driver;
 	extern_irq_enable(udc);
 	udc_enable(udc);
-	aotg_udc_endpoint_config(udc, driver);
+	aotg_udc_endpoint_config(udc);
 
 	if (udc->transceiver) {
 		retval = otg_set_peripheral(udc->transceiver->otg, &udc->gadget);
@@ -1718,17 +1717,25 @@ irqreturn_t aotg_udc_irq(int irq, void *data)
 				udc->driver->disconnect(&udc->gadget);
 			}
 			udc->gadget.speed = USB_SPEED_UNKNOWN;
-			printk("%d,===============set speed unknown=============\n",__LINE__);
 		}
 		spin_unlock_irqrestore(&udc->lock, flags);
 		return retval;
 	}
 
 	irqvector = readb(udc->base + IVECT);
-	printk("i%x\n", irqvector);
 
 	switch (irqvector) {
 	case UIV_IDLE:
+		if (  udc->gadget.speed != USB_SPEED_UNKNOWN)
+		{
+			printk("%p %p\n",udc->driver, udc->driver->disconnect);
+			if (udc->driver && udc->driver->disconnect) {
+				spin_unlock_irqrestore(&udc->lock, flags);
+				udc->driver->disconnect(&udc->gadget);
+				spin_lock_irqsave(&udc->lock, flags);
+				//aotg_dev_plugout_msg(udc->id);
+			}
+		}
 	case UIV_SRPDET:
 	case UIV_LOCSOF:
 	case UIV_VBUSERR:
@@ -1757,7 +1764,6 @@ UDC_DBG_ERR;
 		UDC_DEBUG("UIV_OTG_IRQ 0x%x\n", otgint);
 		break;
 	case UIV_USBRESET:
-		printk("reset irq come!\n");
 		if (  udc->gadget.speed != USB_SPEED_UNKNOWN)
 		{
 			if (udc->driver && udc->driver->disconnect) {
@@ -1880,7 +1886,7 @@ void udc_reinit(struct aotg_udc *dev)
 	}
 }
 
-static int aotg_udc_endpoint_config(struct aotg_udc *udc, struct usb_gadget_driver *driver)
+void aotg_udc_endpoint_config(struct aotg_udc *udc)
 {
 	UDC_BULK_EP(1, "ep1out", USB_DIR_OUT | 1, EPCON_BUF_SINGLE);
 	UDC_BULK_EP(2, "ep1in", USB_DIR_IN | 1, EPCON_BUF_SINGLE);
@@ -1891,7 +1897,6 @@ static int aotg_udc_endpoint_config(struct aotg_udc *udc, struct usb_gadget_driv
 	UDC_ISO_EP(7, "ep4in", USB_DIR_IN | 4, EPCON_BUF_SINGLE);
 
 	udc_ep_packet_config(USB_SPEED_FULL, udc);
-	return 0;
 }
 
 struct aotg_udc memory = {
diff --git a/drivers/usb/aotg/aotg_udc.h b/drivers/usb/aotg/aotg_udc.h
index 7dfcf66..d7b7e87 100755
--- a/drivers/usb/aotg/aotg_udc.h
+++ b/drivers/usb/aotg/aotg_udc.h
@@ -228,5 +228,6 @@ extern struct platform_driver aotg_udc_driver;
 irqreturn_t aotg_udc_irq(int irq, void *data);
 void udc_reinit(struct aotg_udc *dev);
 int pullup(struct aotg_udc *udc, int is_active);
+void aotg_udc_endpoint_config(struct aotg_udc *udc);
 
 #endif				/* __LINUX_USB_GADGET_AOTG_H */
-- 
1.7.5.4

