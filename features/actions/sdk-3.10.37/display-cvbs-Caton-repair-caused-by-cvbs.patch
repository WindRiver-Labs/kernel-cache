From 9e7bfb96ca96e3841f3b2949ba82cce311ef9cb8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E8=B0=A2=E5=8F=8C=E5=8F=8C?= <xieshsh@srv-pad-compile2.actions.com.cn>
Date: Wed, 13 Jan 2016 17:01:36 +0800
Subject: [PATCH 60/62] display: cvbs: Caton repair caused by cvbs

commit ae252424c240d7890db6c93b6b17d8a356f0ec59 from
https://github.com/xapp-le/kernel.git

Change-Id: Iacec342dcc27c0088363d6524bc7ad0661213d8e
---
 drivers/video/fbdev/owl/displays/cvbs/cvbs.c |   35 ++++++++++++++------------
 drivers/video/fbdev/owl/fb/owlfb-dc.c        |   18 ++++---------
 drivers/video/fbdev/owl/fb/owlfb-ioctl.c     |    3 --
 3 files changed, 25 insertions(+), 31 deletions(-)

diff --git a/drivers/video/fbdev/owl/displays/cvbs/cvbs.c b/drivers/video/fbdev/owl/displays/cvbs/cvbs.c
index 1304078..4cfcb69 100755
--- a/drivers/video/fbdev/owl/displays/cvbs/cvbs.c
+++ b/drivers/video/fbdev/owl/displays/cvbs/cvbs.c
@@ -262,14 +262,10 @@ void disable_cvbs_output(void)
 
 }
 
-
-
 static irqreturn_t cvbs_irq_handler(int irq, void *dev_id)
 {
 	DEBUG_CVBS("[%s start]\n", __func__);
-	
-	
-			//\B2\E5\C8\EB	
+
 	if (cvbs_pending(CVBS_IN))
 	{
 		DEBUG_CVBS("CVBS is in \n");
@@ -283,7 +279,8 @@ static irqreturn_t cvbs_irq_handler(int irq, void *dev_id)
 	
 		auto_detect_bit(CVBS_OUT);
 	}
- if (cvbs_pending(CVBS_OUT))
+ 	
+	if (cvbs_pending(CVBS_OUT))
 	{
 		DEBUG_CVBS("CVBS is out \n"); 
 		cvbs_irq_enable(CVBS_OUT,false);
@@ -305,8 +302,7 @@ static irqreturn_t cvbs_irq_handler(int irq, void *dev_id)
 
 static int  cvbs_uevent_state = -1;
 static void set_cvbs_status(struct switch_dev *cdev, int state)
-{
-	printk("cvbs_uevent_state = %d , state=%d\n",cvbs_uevent_state,state);
+{	
 	if(cvbs_uevent_state == state){
 		return; 
 	}
@@ -339,7 +335,6 @@ static void do_cvbs_out(struct work_struct *work)
 		{
 			set_cvbs_status(&cdev, 0);	
 		}
-		disable_cvbs_output();
 }
 
 static void cvbs_check_status (struct work_struct *work) 
@@ -560,9 +555,14 @@ static void cvbs_boot_inited(void)
        }      
 }
 
+static int  cvbs_hpd_state = -1;
 void owldss_cvbs_display_enable_hpd(struct owl_dss_device *dssdev, bool enable)
 {
 	int val;
+		if(cvbs_hpd_state == enable){
+		return; 
+	}
+	
 	mutex_lock(&cvbs.lock);
 	if (enable)
 	{	 
@@ -574,19 +574,18 @@ void owldss_cvbs_display_enable_hpd(struct owl_dss_device *dssdev, bool enable)
 			cvbs_write_reg(TVOUT_OCR , TVOUT_OCR_PI_ADEN | TVOUT_OCR_PO_ADEN);
 		
 			mdelay(600);
-			if ((atomic_read(&cvbs_connected_state) == 1) && (cvbs_read_reg(TVOUT_STA) & TVOUT_STA_DAC3ILS))
-			{
-		   set_cvbs_status(&cdev, 1);		
-			}
-			cvbs_write_reg(TVOUT_OCR,val);
-			cvbs_irq_enable(CVBS_IN,true);	
+
+			cvbs_write_reg(TVOUT_OCR,0x300);
+			cvbs_irq_enable(CVBS_IN,true);				
 	}else
 		{	
+			msleep(500);
 			set_cvbs_status(&cdev, 0);
 			cvbs_irq_enable(CVBS_IN,false);	
 			cvbs_irq_enable(CVBS_OUT,false);			
 		}
 	mutex_unlock(&cvbs.lock);
+	cvbs_hpd_state = enable;
 }
 
 
@@ -602,7 +601,10 @@ int owldss_cvbs_display_enable(struct owl_dss_device *dssdev)
 	timings = &dssdev->timings;	
 
 	DEBUG_CVBS("ENTER cvbs_display_enable\n");
-
+	if(cvbs_read_reg(TVOUT_EN))
+		{
+			return 0;
+		}
 	mutex_lock(&cvbs.lock);
 
     	if (mgr == NULL) {
@@ -622,6 +624,7 @@ int owldss_cvbs_display_enable(struct owl_dss_device *dssdev)
 	if(atomic_read(&cvbs_connected_state) == 1)
 	{
 		configure_cvbs(cvbs.current_vid);
+		msleep(500);
 		enable_cvbs_output();
 		DEBUG_CVBS("cvbs_boot_inited vid  =%d\n",cvbs.current_vid);
 		
diff --git a/drivers/video/fbdev/owl/fb/owlfb-dc.c b/drivers/video/fbdev/owl/fb/owlfb-dc.c
index 62f06bd..1c63ff4 100755
--- a/drivers/video/fbdev/owl/fb/owlfb-dc.c
+++ b/drivers/video/fbdev/owl/fb/owlfb-dc.c
@@ -151,7 +151,7 @@ static int owlfb_dc_mark_buffer_done(struct owlfb_dc * dispc, int index)
  * 	It is used to avoid that layers switch between two path frequently,
  *	which will lead to blurred screen on LCD or HDMI.
  */
-static bool external_manager_is_enable = false;
+
 static int boot_hdmi_enable = 0;
 static int boot_hdmi_status = 0;
 static int boot_hdmi_rotate = 0;
@@ -209,23 +209,18 @@ static int owlfb_dc_arrange_overlay(setup_dispc_data_t *psDispcData,
 	if (primary_used_overlay != 0) {
 		 dss_mgr_enable(owl_dc.primary_manager);
 	}
-
+	
 	if (external_used_overlay != 0) {
-		external_manager_is_enable = true;
 		dss_mgr_enable(owl_dc.external_manager);
 		boot_hdmi_status = HDMI_STATUS_ANDROID_INIT;
 		boot_cvbs_status=CVBS_STATUS_ANDROID_INIT;
 	
 	}else{
 		if(boot_hdmi_status == HDMI_STATUS_ANDROID_INIT||boot_cvbs_status==CVBS_STATUS_ANDROID_INIT){
-			if(external_manager_is_enable && atomic_read(&want_close_external_devices)){	
+			if(atomic_read(&want_close_external_devices)){	
 				owl_dc.external_manager->apply(owl_dc.external_manager);
 				owl_dc.external_manager->wait_for_go(owl_dc.external_manager);	
-				if (atomic_read(&want_close_external_devices))
-				{
-					owl_dc.external_manager->device->driver->disable(owl_dc.external_manager->device);
-				}	
-				external_manager_is_enable = false;
+				owl_dc.external_manager->device->driver->disable(owl_dc.external_manager->device);
 				atomic_set(&want_close_external_devices,false);
 			}
 		}else{
@@ -392,9 +387,8 @@ static int owlfb_dc_update_overlay(struct owl_disp_info * disp_info)
 			info.global_alpha =  layer->alpha_val; 
 			info.pre_mult_alpha_en =  layer->fb.pre_multiply;  
 			  
-			ovl->set_overlay_info(ovl,&info);
-			
-			if(hdmi_discard_frame < 10){
+			ovl->set_overlay_info(ovl,&info);		
+			if(hdmi_discard_frame < 15){
 				ovl->disable(ovl);
 				ovl->manager->apply(ovl->manager);
 				ovl->manager->wait_for_go(ovl->manager);
diff --git a/drivers/video/fbdev/owl/fb/owlfb-ioctl.c b/drivers/video/fbdev/owl/fb/owlfb-ioctl.c
index 88fa7e7..ff513b2 100755
--- a/drivers/video/fbdev/owl/fb/owlfb-ioctl.c
+++ b/drivers/video/fbdev/owl/fb/owlfb-ioctl.c
@@ -728,9 +728,6 @@ int owlfb_ioctl(struct fb_info *fbi, unsigned int cmd, unsigned long arg)
 			device->driver->enable(device);
 		}
 		
-		unlock_fb_info(fbi);
-		msleep(500);
-		lock_fb_info(fbi);
 		break;
 	}	
 	case OWLFB_CVBS_OFF:{
-- 
1.7.5.4

