From 9a3cf37bb6d2b516e7d30dad69603c79b4fc6860 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Mon, 31 Oct 2016 11:16:45 +0800
Subject: [PATCH 62/62] rose-apple-pi: driver: watchdog: change wdt_lock to
 raw spin lock

In owl_wdt.c, the function __owl_wdt_keepalive() maybe invoked
in irq context. And the normal spinlock will become sleepable in
rt kernel and will trigger the following
call trace:
CPU: 0 PID: 0 Comm: swapper/0 Tainted: G        W       4.1.21-rt13-WR8.0.0.0_preempt-rt #1
Hardware name: gs705a
[<c0019564>] (unwind_backtrace) from [<c0013b88>] (show_stack+0x30/0x3c)
[<c0013b88>] (show_stack) from [<c087a4e4>] (dump_stack+0x84/0xa8)
[<c087a4e4>] (dump_stack) from [<c0058d90>] (___might_sleep+0x184/0x1b8)
[<c0058d90>] (___might_sleep) from [<c0881c70>] (rt_spin_lock+0x28/0x78)
[<c0881c70>] (rt_spin_lock) from [<c05acf60>] (__owl_wdt_keepalive+0x2c/0x80)
[<c05acf60>] (__owl_wdt_keepalive) from [<c00a5548>] (flush_smp_call_function_queue+0xc4/0x170)
[<c00a5548>] (flush_smp_call_function_queue) from [<c00a6178>] (generic_smp_call_function_single_interrupt+0x1c/0x20)
[<c00a6178>] (generic_smp_call_function_single_interrupt) from [<c0016484>] (handle_IPI+0x158/0x3b0)
[<c0016484>] (handle_IPI) from [<c0009470>] (gic_handle_irq+0x64/0x6c)
[<c0009470>] (gic_handle_irq) from [<c0014700>] (__irq_svc+0x40/0x88)
Exception stack(0xc0c43f28 to 0xc0c43f70)
3f20:                   00000001 00000000 00000000 c0022da0 00000000 c0c3b564
3f40: 00000000 00000001 ecaff900 c0c0bd98 00000000 c0c43f7c c0c43f80 c0c43f70
3f60: c001062c c0010630 60030013 ffffffff
[<c0014700>] (__irq_svc) from [<c0010630>] (arch_cpu_idle+0x3c/0x48)
[<c0010630>] (arch_cpu_idle) from [<c007109c>] (cpu_startup_entry+0x420/0x4f0)
[<c007109c>] (cpu_startup_entry) from [<c0876d94>] (rest_init+0x84/0x9c)
[<c0876d94>] (rest_init) from [<c0babcb8>] (start_kernel+0x368/0x3d8)
BUG: sleeping function called from invalid context at /home/wrsadmin/Project/extend_disk/
rose-apple-pi-rt/bitbake_build/tmp/work-shared/rose-apple-pi/kernel-source/kernel/locking/rtmut7
in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper/0
Preemption disabled at:[<  (null)>]   (null)

Change the wdt_lock to raw spin lock to fix this issue.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/watchdog/owl_wdt.c |   10 +++++-----
 1 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/watchdog/owl_wdt.c b/drivers/watchdog/owl_wdt.c
index 44ebc74..44ce6c3 100755
--- a/drivers/watchdog/owl_wdt.c
+++ b/drivers/watchdog/owl_wdt.c
@@ -41,7 +41,7 @@ struct owl_wdt {
 	int wd_type;	//0-hard watchdog; 1-soft watchdog
 };
 
-static DEFINE_SPINLOCK(wdt_lock);
+static DEFINE_RAW_SPINLOCK(wdt_lock);
 
 #define TIMER_MARGIN	60		/* Default is 60 seconds */
 static unsigned int owl_margin = TIMER_MARGIN;	/* in seconds */
@@ -85,12 +85,12 @@ static void __owl_wdt_keepalive(struct watchdog_device *wdd)
 	struct owl_wdt *wdt = watchdog_get_drvdata(wdd);
 	unsigned long count;
 
-	spin_lock(&wdt_lock);
+	raw_spin_lock(&wdt_lock);
 	twd_clk_hz = owl_get_periphclk(wdt);
 	count = wdd->timeout * (twd_clk_hz / 256);
 	/* Reload the counter */
 	writel_relaxed(count, wdt->wd_base + TWD_WDOG_LOAD);
-	spin_unlock(&wdt_lock);
+	raw_spin_unlock(&wdt_lock);
 }
 
 static void __owl_wdt_start(struct watchdog_device *wdd)
@@ -196,14 +196,14 @@ static void periph_clk_notify_on_cpu0(struct clk_notifier_data *cnd)
 	unsigned int oldcount;
 	struct owl_wdt *wdt = watchdog_get_drvdata(&owl_wdt_wdd);
 
-	spin_lock(&wdt_lock);
+	raw_spin_lock(&wdt_lock);
 	if(readl_relaxed(wdt->wd_base + TWD_WDOG_CONTROL) & 0x1) {
 		oldcount =  readl_relaxed(wdt->wd_base + TWD_WDOG_COUNTER);
 		newcount = (unsigned long long)oldcount * cnd->new_rate;
 		do_div(newcount, cnd->old_rate);
 		writel_relaxed((unsigned int)newcount, wdt->wd_base + TWD_WDOG_LOAD);
 	}
-	spin_unlock(&wdt_lock);
+	raw_spin_unlock(&wdt_lock);
 }
 
 static int periph_clk_notify(struct notifier_block *nb, unsigned long action, void *data)
-- 
1.7.5.4

