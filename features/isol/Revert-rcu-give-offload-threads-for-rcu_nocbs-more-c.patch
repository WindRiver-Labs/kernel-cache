From d34dda72e28c0c3dd05ad7a9d177afeb5de46ad3 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Thu, 25 Apr 2013 10:31:38 -0400
Subject: [PATCH] Revert "rcu: give offload threads for rcu_nocbs more complete
 names"

This reverts commit 8f61c75c1e3d32656ae713e2c4f78df70653e89d.

We'll take the mainline commit that does almost the same thing,
but uses a slightly different naming scheme.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index a551840..e43ecdd 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -2364,7 +2364,7 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 			In kernels built with CONFIG_RCU_NOCB_CPU=y, set
 			the specified list of CPUs to be no-callback CPUs.
 			Invocation of these CPUs' RCU callbacks will
-			be offloaded to "rcuoN_*" kthreads created for
+			be offloaded to "rcuoN" kthreads created for
 			that purpose.  This reduces OS jitter on the
 			offloaded CPUs, which can be useful for HPC and
 			real-time workloads.  It can also improve energy
diff --git a/init/Kconfig b/init/Kconfig
index cf73383..446aa69 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -675,9 +675,8 @@ config RCU_NOCB_CPU
 
 	  This option offloads callback invocation from the set of
 	  CPUs specified at boot time by the rcu_nocbs parameter.
-	  For each such CPU, several kthread ("rcuoN*") are created to
+	  For each such CPU, a kthread ("rcuoN") will be created to
 	  invoke callbacks, where the "N" is the CPU being offloaded.
-	  The suffix for "*" above will be _bh, _sched, or _preempt.
 	  Nothing prevents this kthread from running on the specified
 	  CPUs, but (1) the kthreads may be preempted between each
 	  callback, and (2) affinity or cgroups can be used to force
diff --git a/kernel/rcutree_plugin.h b/kernel/rcutree_plugin.h
index 1d1fd4b..9478472 100644
--- a/kernel/rcutree_plugin.h
+++ b/kernel/rcutree_plugin.h
@@ -2528,8 +2528,7 @@ static void __init rcu_spawn_nocb_kthreads(struct rcu_state *rsp)
 		return;
 	for_each_cpu(cpu, rcu_nocb_mask) {
 		rdp = per_cpu_ptr(rsp->rda, cpu);
-		t = kthread_run(rcu_nocb_kthread, rdp, "rcuo%d%s", cpu,
-				rsp->name + 3); /* +3 -> skip rcu prefix */
+		t = kthread_run(rcu_nocb_kthread, rdp, "rcuo%d", cpu);
 		BUG_ON(IS_ERR(t));
 		ACCESS_ONCE(rdp->nocb_kthread) = t;
 	}
-- 
1.8.1.2

