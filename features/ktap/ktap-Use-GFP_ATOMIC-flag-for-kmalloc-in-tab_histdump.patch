From af56637ed10b3e75710ec02ed046209a31a6ebae Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Wed, 8 Oct 2014 13:53:13 -0700
Subject: [PATCH] ktap: Use GFP_ATOMIC flag for kmalloc in tab_histdump

From the below ktap script:

tick-60s {
        print_hist(s)
}

The following call chain may happen:
-> hrtimer_ktap_fn
   -> kplib_print_hist
      -> kp_tab_print_hist
         -> tab_histdump
            -> kmalloc

But, hrtimer_ktap_fn is called in timer interrupt with IRQ disabled, so it may
cause the below BUG:

BUG: sleeping function called from invalid context at linux/mm/page_alloc.c:2718
in_atomic(): 1, irqs_disabled(): 1, pid: 0, name: swapper/0
no locks held by swapper/0/0.
CPU: 0 PID: 0 Comm: swapper/0 Not tainted 3.14.19-WR7.0.0.0_standard #5
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.7.5-0-ge51488c-20140602_164612-nilsson.home.kraxel.org 04/01/2014
 00000000000000d0 ffff880017c03a00 ffffffff81865607 00000000001040d0
 ffff880017c03a10 ffffffff8107aefe ffff880017c03b70 ffffffff81126293
 ffff88001563f600 ffff880017c03b50 ffff880017c03c50 0000000000000000
Call Trace:
 <IRQ>  [<ffffffff81865607>] dump_stack+0x4e/0x7a
 [<ffffffff8107aefe>] __might_sleep+0xee/0x100
 [<ffffffff81126293>] __alloc_pages_nodemask+0x263/0xce0
 [<ffffffff81115fbd>] ? __perf_event_overflow+0x8d/0x310
 [<ffffffff8112592b>] ? free_compound_page+0x1b/0x20
 [<ffffffff8112b7df>] ? __put_compound_page+0x1f/0x30
 [<ffffffff8109850a>] ? __lock_acquire.isra.24+0x35a/0xfa0
 [<ffffffff81116419>] ? perf_swevent_overflow+0xa9/0xe0
 [<ffffffff81126d27>] __get_free_pages+0x17/0x50
 [<ffffffff8113f4ae>] kmalloc_order_trace+0x2e/0xc0
 [<ffffffff811687f9>] __kmalloc+0x159/0x2d0
 [<ffffffffa003ace5>] tab_histdump+0x55/0x420 [ktapvm]
 [<ffffffff8109850a>] ? __lock_acquire.isra.24+0x35a/0xfa0
 [<ffffffff81097afc>] ? __lock_is_held+0x4c/0x70
 [<ffffffff8109850a>] ? __lock_acquire.isra.24+0x35a/0xfa0
 [<ffffffff81097afc>] ? __lock_is_held+0x4c/0x70
 [<ffffffff810ee525>] ? tracing_is_on+0x15/0x30
 [<ffffffff8107f9ee>] ? try_to_wake_up+0x21e/0x340
 [<ffffffffa003c413>] kp_tab_print_hist+0x43/0x50 [ktapvm]
 [<ffffffffa0041c40>] kplib_print_hist+0x60/0xc0 [ktapvm]
 [<ffffffffa003e345>] kp_vm_call+0x1bb5/0x1fd0 [ktapvm]
 [<ffffffff8109850a>] ? __lock_acquire.isra.24+0x35a/0xfa0
 [<ffffffff8109850a>] ? __lock_acquire.isra.24+0x35a/0xfa0
 [<ffffffffa004226c>] hrtimer_ktap_fn+0xbc/0x140 [ktapvm]
 [<ffffffff81072054>] __run_hrtimer+0x84/0x280
 [<ffffffffa00421b0>] ? kp_lib_init_kdebug+0x20/0x20 [ktapvm]
 [<ffffffff81072be7>] hrtimer_interrupt+0x107/0x250
 [<ffffffff81033127>] local_apic_timer_interrupt+0x37/0x60
 [<ffffffff8187723f>] smp_apic_timer_interrupt+0x3f/0x50
 [<ffffffff8187618a>] apic_timer_interrupt+0x6a/0x70
 <EOI>  [<ffffffff8100bc20>] ? default_idle+0x20/0x100
 [<ffffffff8100c59e>] arch_cpu_idle+0x1e/0x20
 [<ffffffff810a2b25>] cpu_startup_entry+0x185/0x290
 [<ffffffff81860c2b>] rest_init+0xbb/0xd0
 [<ffffffff81f18d55>] start_kernel+0x3db/0x3e8
 [<ffffffff81f18495>] x86_64_start_reservations+0x2a/0x2c
 [<ffffffff81f1858e>] x86_64_start_kernel+0xf7/0xfa

The kmalloc may be called in atomic context, so change GFP_KERNEL to
GFP_ATOMIC to avoid the bug.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 kernel/trace/ktap/kp_tab.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/kernel/trace/ktap/kp_tab.c b/kernel/trace/ktap/kp_tab.c
index 478aa7b..79e3ce7 100644
--- a/kernel/trace/ktap/kp_tab.c
+++ b/kernel/trace/ktap/kp_tab.c
@@ -748,7 +748,7 @@ static void tab_histdump(ktap_state_t *ks, ktap_tab_t *t, int shownums)
 	start_time = gettimeofday_ns();
 
 	sort_mem = kmalloc((t->asize + t->hnum) * sizeof(ktap_node2_t),
-				GFP_KERNEL);
+				GFP_ATOMIC);
 	if (!sort_mem)
 		return;
 
-- 
2.0.2

