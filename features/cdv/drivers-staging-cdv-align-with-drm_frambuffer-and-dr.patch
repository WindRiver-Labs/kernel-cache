From e4fd0fd2d4a75e13d3e86dd6af83fc3e80849f0c Mon Sep 17 00:00:00 2001
From: Liang Li <liang.li@windriver.com>
Date: Fri, 19 Oct 2012 11:35:00 +0800
Subject: [PATCH 5/8] drivers: staging: cdv: align with drm_frambuffer and
 drm_mode_fb_cmd2

Since the code base is 3.0 kernel, certain data structure and function
prototypes changes dramatically. Here we need to align with new
drm_frambuffer and drm_mod_fb_cmd2 data structure, as well as related
function prototypes.

Signed-off-by: Phil Staub <Phil.Staub@windriver.com>
Signed-off-by: Liang Li <liang.li@windriver.com>
---
 drivers/staging/cdv/drv/psb_fb.c                   |   31 ++++++++++++--------
 drivers/staging/cdv/drv/psb_intel_display.c        |    4 +--
 .../linux_framebuffer_mrst/mrstlfb_displayclass.c  |    2 +-
 3 files changed, 22 insertions(+), 15 deletions(-)

diff --git a/drivers/staging/cdv/drv/psb_fb.c b/drivers/staging/cdv/drv/psb_fb.c
index 6e6d348..27fe348 100644
--- a/drivers/staging/cdv/drv/psb_fb.c
+++ b/drivers/staging/cdv/drv/psb_fb.c
@@ -203,7 +203,7 @@ static struct fb_ops psbfb_ops = {
 };
 
 static struct drm_framebuffer *psb_framebuffer_create
-			(struct drm_device *dev, struct drm_mode_fb_cmd *r,
+			(struct drm_device *dev, struct drm_mode_fb_cmd2 *r,
 			 void *mm_private)
 {
 	struct psb_framebuffer *fb;
@@ -231,12 +231,12 @@ err:
 
 static struct drm_framebuffer *psb_user_framebuffer_create
 			(struct drm_device *dev, struct drm_file *filp,
-			 struct drm_mode_fb_cmd *r)
+			 struct drm_mode_fb_cmd2 *r)
 {
 	struct psb_framebuffer *psbfb;
 	struct drm_framebuffer *fb;
 	PVRSRV_KERNEL_MEM_INFO *psKernelMemInfo = IMG_NULL;
-	IMG_HANDLE hKernelMemInfo = (IMG_HANDLE)r->handle;
+	IMG_HANDLE hKernelMemInfo = (IMG_HANDLE)r->handles[0];
 	struct drm_psb_private *dev_priv
 		= (struct drm_psb_private *) dev->dev_private;
 	struct psb_gtt *pg = dev_priv->pg;
@@ -258,7 +258,7 @@ static struct drm_framebuffer *psb_user_framebuffer_create
 
 	/* JB: TODO not drop, make smarter */
 	size = psKernelMemInfo->uAllocSize;
-	if (size < r->height * r->pitch)
+	if (size < r->height * r->pitches[0])
 		return NULL;
 
 	/* JB: TODO not drop, refcount buffer */
@@ -308,7 +308,7 @@ static int psbfb_create(struct psb_fbdev * fbdev, struct drm_fb_helper_surface_s
 	struct fb_info * info;
 	struct drm_framebuffer *fb;
 	struct psb_framebuffer * psbfb;
-	struct drm_mode_fb_cmd mode_cmd;
+	struct drm_mode_fb_cmd2 mode_cmd;
 	struct device * device = &dev->pdev->dev;
 	struct MRSTLFB_BUFFER_TAG *buffer = NULL;
 	int size, aligned_size;
@@ -316,9 +316,10 @@ static int psbfb_create(struct psb_fbdev * fbdev, struct drm_fb_helper_surface_s
 
 	mode_cmd.width = sizes->surface_width;
 	mode_cmd.height = sizes->surface_height;
-
+	stride = ALIGN(mode_cmd.width, 32);
 	DRM_DEBUG_KMS("psbfb_create called with w = %d h = %d\n", sizes->surface_width, sizes->surface_height);
 
+	#if 0
 	mode_cmd.bpp = 32;
         //HW requires pitch to be 64 byte aligned
         /*
@@ -327,11 +328,17 @@ static int psbfb_create(struct psb_fbdev * fbdev, struct drm_fb_helper_surface_s
 	 * 32. As currently it uses the 32bpp in framebuffer, it can assure that
 	 * it is aligned to 64 bytes.	
 	 */
-        stride = ALIGN(mode_cmd.width, 32);
-        mode_cmd.pitch =  ALIGN(stride * ((mode_cmd.bpp + 1) / 8), 64);
-        mode_cmd.depth = 24;
+	mode_cmd.pitch =  ALIGN(stride * ((mode_cmd.bpp + 1) / 8), 64);
+	mode_cmd.depth = 24;
+	#endif
+
+	mode_cmd.pitches[0] = ALIGN(mode_cmd.width * ((32 + 7) / 8), 64);
+	mode_cmd.pixel_format = drm_mode_legacy_fb_format(sizes->surface_bpp, sizes->surface_depth);
+	/* try:
+	 * mode_cmd.pixel_format = drm_mode_legacy_fb_format(32, 32);
+	 */
 
-	size = mode_cmd.pitch * mode_cmd.height;
+	size = mode_cmd.pitches[0] * mode_cmd.height;
 	aligned_size = ALIGN(size, PAGE_SIZE);
 
 	mutex_lock(&dev->struct_mutex);
@@ -398,7 +405,7 @@ static int psbfb_create(struct psb_fbdev * fbdev, struct drm_fb_helper_surface_s
 		info->apertures->ranges[0].size = pg->stolen_size;                                                                   
 	}
 	  
-	drm_fb_helper_fill_fix(info, fb->pitch, fb->depth);
+	drm_fb_helper_fill_fix(info, fb->pitches[0], fb->depth);
 	drm_fb_helper_fill_var(info, &fbdev->psb_fb_helper, sizes->fb_width, sizes->fb_height);
 
 	info->fix.mmio_start = pci_resource_start(dev->pdev, 0);
@@ -411,7 +418,7 @@ static int psbfb_create(struct psb_fbdev * fbdev, struct drm_fb_helper_surface_s
 	info->pixmap.scan_align = 1;
 
 	DRM_DEBUG_KMS("fb depth is %d\n", fb->depth);
-	DRM_DEBUG_KMS("   pitch is %d\n", fb->pitch);
+	DRM_DEBUG_KMS("   pitch is %d\n", fb->pitches[0]);
 	DRM_DEBUG_KMS("allocated %dx%d fb\n", psbfb->base.width, psbfb->base.height);	
 	DRM_DEBUG_KMS("The GTT offset %x for FB ID %d\n", psbfb->offset, fb->base.id);	
 
diff --git a/drivers/staging/cdv/drv/psb_intel_display.c b/drivers/staging/cdv/drv/psb_intel_display.c
index cfc8de9..2b644f4 100644
--- a/drivers/staging/cdv/drv/psb_intel_display.c
+++ b/drivers/staging/cdv/drv/psb_intel_display.c
@@ -583,9 +583,9 @@ int psb_intel_pipe_set_base(struct drm_crtc *crtc,
 	}
 
 	Start = mode_dev->bo_offset(dev, psbfb);
-	Offset = y * crtc->fb->pitch + x * (crtc->fb->bits_per_pixel / 8);
+	Offset = y * crtc->fb->pitches[0] + x * (crtc->fb->bits_per_pixel / 8);
 
-	REG_WRITE(dspstride, crtc->fb->pitch);
+	REG_WRITE(dspstride, crtc->fb->pitches[0]);
 
 	dspcntr = REG_READ(dspcntr_reg);
 	dspcntr &= ~DISPPLANE_PIXFORMAT_MASK;
diff --git a/drivers/staging/cdv/pvr/services4/3rdparty/linux_framebuffer_mrst/mrstlfb_displayclass.c b/drivers/staging/cdv/pvr/services4/3rdparty/linux_framebuffer_mrst/mrstlfb_displayclass.c
index 2b7fa83..9479680 100644
--- a/drivers/staging/cdv/pvr/services4/3rdparty/linux_framebuffer_mrst/mrstlfb_displayclass.c
+++ b/drivers/staging/cdv/pvr/services4/3rdparty/linux_framebuffer_mrst/mrstlfb_displayclass.c
@@ -1196,7 +1196,7 @@ int MRSTLFBHandleChangeFB(struct drm_device* dev, struct psb_framebuffer *psbfb)
 	}
 	psDevInfo->sDisplayFormat.pixelformat = (psbfb->base.depth == 16) ? PVRSRV_PIXEL_FORMAT_RGB565 : PVRSRV_PIXEL_FORMAT_ARGB8888;
 
-	psDevInfo->sDisplayDim.ui32ByteStride = psbfb->base.pitch;
+	psDevInfo->sDisplayDim.ui32ByteStride = psbfb->base.pitches[0];
 	psDevInfo->sDisplayDim.ui32Width = psbfb->base.width;
 	psDevInfo->sDisplayDim.ui32Height = psbfb->base.height;
 
-- 
1.7.9.7

