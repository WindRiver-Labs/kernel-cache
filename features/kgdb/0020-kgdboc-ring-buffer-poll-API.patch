From 9330ecd68d6440353bf246e6c7506864815964d2 Mon Sep 17 00:00:00 2001
From: Jason Wessel <jason.wessel@windriver.com>
Date: Mon, 3 Nov 2008 12:41:38 -0600
Subject: [PATCH] kgdboc: ring buffer poll API

The kgdboc driver was extended to include a ring buffer which can use
he rx callback to insert characters while the system is frozen in the
debugger active state.

This call back only works if the low level driver returns a -2, which
indicates that this special type of polling is required.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
---
 drivers/serial/kgdboc.c |   37 +++++++++++++++++++++++++++++++++++--
 1 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/drivers/serial/kgdboc.c b/drivers/serial/kgdboc.c
index b274a36..b96ce1d 100644
--- a/drivers/serial/kgdboc.c
+++ b/drivers/serial/kgdboc.c
@@ -17,6 +17,7 @@
 #include <linux/tty.h>
 
 #define MAX_CONFIG_LEN		40
+#define MAX_CHAR_RING		512
 
 static struct kgdb_io		kgdboc_io_ops;
 
@@ -45,6 +46,9 @@ static int kgdboc_option_setup(char *opt)
 }
 
 static int buffered_char = -1;
+static u8 ch_ring[MAX_CHAR_RING];
+static int ch_head;
+static int ch_tail;
 static u8 break_char;
 static int no_polled_breaks;
 static int schedule_breakpoints;
@@ -69,6 +73,16 @@ static int kgdboc_rx_callback(u8 c)
 		}
 		return 0;
 	}
+	/* Assume the debugger is active and store the characters in an
+	 * array which will be decremented at a later point.
+	 */
+	ch_ring[ch_tail] = c;
+	ch_tail++;
+	if (ch_tail >= MAX_CHAR_RING)
+		ch_tail = 0;
+	if (ch_tail == ch_head)
+		printk(KERN_CRIT "kgdboc: ERROR rx buffer overflow\n");
+
 	return 1;
 }
 
@@ -164,11 +178,28 @@ static void cleanup_kgdboc(void)
 
 static int kgdboc_get_char(void)
 {
+	int ret;
+
 	if (buffered_char >= 0)
 		return xchg(&buffered_char, -1);
 
-	return kgdb_tty_driver->ops->poll_get_char(kgdb_tty_driver,
-						   kgdb_tty_line);
+	do {
+		ret = kgdb_tty_driver->ops->poll_get_char(kgdb_tty_driver,
+						kgdb_tty_line);
+		if (ret != -2)
+			return ret;
+
+		/* A return of -2 means use the poll character ring */
+		if (ch_head != ch_tail) {
+			ret = ch_ring[ch_head];
+			ch_head++;
+			if (ch_head >= MAX_CHAR_RING)
+				ch_head = 0;
+			return ret;
+		}
+	} while (ret == -2);
+
+	return -1;
 }
 
 static void kgdboc_put_char(u8 chr)
@@ -216,6 +247,8 @@ static void kgdboc_pre_exp_handler(void)
 	/* Increment the module count when the debugger is active */
 	if (!kgdb_connected)
 		try_module_get(THIS_MODULE);
+	ch_head = 0;
+	ch_tail = 0;
 }
 
 static void kgdboc_post_exp_handler(void)
-- 
1.6.0.90.g436ed

