From b860640c0222b04a2d2cbf12961e45a4b53e48e8 Mon Sep 17 00:00:00 2001
From: Mark Asselstine <mark.asselstine@windriver.com>
Date: Thu, 28 Feb 2013 13:45:52 -0500
Subject: [PATCH] modules,kgdb: Add module gone event

When a debugger such as gdb is attached, it cares when a kernel module
is either in the coming state or the gone state such that it can
update the debugger state for mapping symbols to actual code that is
loaded by the kernel.  The module "GOING" state is not good enough
because the kernel will still list the module as being in the section
maps and occupying virtual memory.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
CC: Mark Asselstine <mark.asselstine@windriver.com>
---
 include/linux/module.h |    1 +
 kernel/module.c        |    5 +++++
 2 files changed, 6 insertions(+)

diff --git a/include/linux/module.h b/include/linux/module.h
index 606acd3..dbb05ab 100644
--- a/include/linux/module.h
+++ b/include/linux/module.h
@@ -202,6 +202,7 @@ enum module_state
 	MODULE_STATE_LIVE,
 	MODULE_STATE_COMING,
 	MODULE_STATE_GOING,
+	MODULE_STATE_GONE,
 };
 
 /**
diff --git a/kernel/module.c b/kernel/module.c
index 2215782..2ae96d1 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -669,6 +669,8 @@ static void module_unload_free(struct module *mod)
 		list_del(&use->target_list);
 		kfree(use);
 	}
+	blocking_notifier_call_chain(&module_notify_list,
+				     MODULE_STATE_GONE, mod);
 	mutex_unlock(&module_mutex);
 
 	free_percpu(mod->refptr);
@@ -1014,6 +1016,9 @@ static ssize_t show_initstate(struct module_attribute *mattr,
 	case MODULE_STATE_GOING:
 		state = "going";
 		break;
+	case MODULE_STATE_GONE:
+		state = "gone";
+		break;
 	}
 	return sprintf(buffer, "%s\n", state);
 }
-- 
1.7.10.4

