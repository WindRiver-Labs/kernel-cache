From 8ebfeb262d430dbaab54697666598ec2ae7c4a9b Mon Sep 17 00:00:00 2001
From: Mark Asselstine <mark.asselstine@windriver.com>
Date: Thu, 28 Feb 2013 13:45:52 -0500
Subject: [PATCH 19/34] modules,kgdb: Add module gone event

When a debugger such as gdb is attached, it cares when a kernel module
is either in the coming state or the gone state such that it can
update the debugger state for mapping symbols to actual code that is
loaded by the kernel.  The module "GOING" state is not good enough
because the kernel will still list the module as being in the section
maps and occupying virtual memory.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
CC: Mark Asselstine <mark.asselstine@windriver.com>
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 include/linux/module.h | 1 +
 kernel/module.c        | 5 +++++
 2 files changed, 6 insertions(+)

diff --git a/include/linux/module.h b/include/linux/module.h
index eaf60ff..73d58cc 100644
--- a/include/linux/module.h
+++ b/include/linux/module.h
@@ -210,6 +210,7 @@ enum module_state {
 	MODULE_STATE_LIVE,	/* Normal state. */
 	MODULE_STATE_COMING,	/* Full formed, running module_init. */
 	MODULE_STATE_GOING,	/* Going away. */
+	MODULE_STATE_GONE, /* It has gone away. */
 	MODULE_STATE_UNFORMED,	/* Still setting it up. */
 };
 
diff --git a/kernel/module.c b/kernel/module.c
index 6716a1f..c2da7c8 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -721,6 +721,8 @@ static void module_unload_free(struct module *mod)
 		list_del(&use->target_list);
 		kfree(use);
 	}
+	blocking_notifier_call_chain(&module_notify_list,
+				     MODULE_STATE_GONE, mod);
 	mutex_unlock(&module_mutex);
 
 	free_percpu(mod->refptr);
@@ -1033,6 +1035,9 @@ static ssize_t show_initstate(struct module_attribute *mattr,
 	case MODULE_STATE_GOING:
 		state = "going";
 		break;
+	case MODULE_STATE_GONE:
+		state = "gone";
+		break;
 	default:
 		BUG();
 	}
-- 
2.0.2

