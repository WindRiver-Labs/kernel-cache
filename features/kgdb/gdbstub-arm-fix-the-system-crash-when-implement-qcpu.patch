From 5da48b97d01870577cb318c4d41d285becdd27c0 Mon Sep 17 00:00:00 2001
From: Dongdong Deng <dongdong.deng@windriver.com>
Date: Wed, 14 Jul 2010 23:05:44 -0700
Subject: [PATCH] gdbstub, arm: fix the system crash when implement "qcpu" command

The lookup_processor_type() should never get called because it uses
physical addressing at the assembly level and at certain times the
virtual addressing will no longer match, which results in a target
crash.

This patch uses ARM_cpu_name directly for "qcpu" command on ARM.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
Integrated-by: Dongdong Deng <dongdong.deng@windriver.com>
---
 arch/arm/kernel/setup.c |    8 ++++----
 kernel/debug/gdbstub.c  |   14 +++-----------
 2 files changed, 7 insertions(+), 15 deletions(-)

diff --git a/arch/arm/kernel/setup.c b/arch/arm/kernel/setup.c
index c91c77b..ec429fe 100644
--- a/arch/arm/kernel/setup.c
+++ b/arch/arm/kernel/setup.c
@@ -117,7 +117,7 @@ static struct stack stacks[NR_CPUS];
 char elf_platform[ELF_PLATFORM_SIZE];
 EXPORT_SYMBOL(elf_platform);
 
-static const char *cpu_name;
+const char *ARM_cpu_name;
 static const char *machine_name;
 static char __initdata cmd_line[COMMAND_LINE_SIZE];
 
@@ -285,7 +285,7 @@ static void __init setup_processor(void)
 		while (1);
 	}
 
-	cpu_name = list->cpu_name;
+	ARM_cpu_name = list->cpu_name;
 
 #ifdef MULTI_CPU
 	processor = *list->proc;
@@ -301,7 +301,7 @@ static void __init setup_processor(void)
 #endif
 
 	printk("CPU: %s [%08x] revision %d (ARMv%s), cr=%08lx\n",
-	       cpu_name, read_cpuid_id(), read_cpuid_id() & 15,
+	       ARM_cpu_name, read_cpuid_id(), read_cpuid_id() & 15,
 	       proc_arch[cpu_architecture()], cr_alignment);
 
 	sprintf(init_utsname()->machine, "%s%c", list->arch_name, ENDIANNESS);
@@ -793,7 +793,7 @@ static int c_show(struct seq_file *m, void *v)
 	int i;
 
 	seq_printf(m, "Processor\t: %s rev %d (%s)\n",
-		   cpu_name, read_cpuid_id() & 15, elf_platform);
+		   ARM_cpu_name, read_cpuid_id() & 15, elf_platform);
 
 #if defined(CONFIG_SMP)
 	for_each_online_cpu(i) {
diff --git a/kernel/debug/gdbstub.c b/kernel/debug/gdbstub.c
index 80faa46..f29ad6b 100644
--- a/kernel/debug/gdbstub.c
+++ b/kernel/debug/gdbstub.c
@@ -36,10 +36,6 @@
 #include <linux/uaccess.h>
 #include <asm/cacheflush.h>
 #include <asm/unaligned.h>
-#ifdef CONFIG_ARM
-#include <asm/procinfo.h>
-#include <asm/cputype.h>
-#endif
 #include "debug_core.h"
 
 #define KGDB_MAX_THREAD_QUERY 17
@@ -774,13 +770,9 @@ static void gdb_cmd_query(struct kgdb_state *ks)
 			strcat(remcom_out_buffer, cur_cpu_spec[0].cpu_name);
 #elif defined(CONFIG_ARM)
 			{
-				extern struct proc_info_list
-					*lookup_processor_type(unsigned int);
-				struct proc_info_list *list;
-				list = lookup_processor_type(read_cpuid_id());
-				if (list)
-					strcat(remcom_out_buffer,
-					       list->cpu_name);
+				extern const char *ARM_cpu_name;
+				if (ARM_cpu_name)
+					strcat(remcom_out_buffer, ARM_cpu_name);
 			}
 #elif defined(CONFIG_MIPS)
 			{
-- 
1.6.5.2

