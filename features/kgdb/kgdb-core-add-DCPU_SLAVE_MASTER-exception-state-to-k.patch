From c2e1f0dd9c11932370aee6648bb85391013ec12c Mon Sep 17 00:00:00 2001
From: Dongdong Deng <dongdong.deng@windriver.com>
Date: Wed, 28 Apr 2010 23:34:34 -0700
Subject: [PATCH 3/3] kgdb core: add DCPU_SLAVE_MASTER exception state to kgdb

DCPU_SLAVE_MASTER is a special DCPU_IS_SLAVE state,
it was set to the slave cpu which have been set to
DCPU_WANT_MASTER before it enter kgdb slave mode.

Signed-off-by: Dongdong Deng <dongdong.deng@windriver.com>
---
 kernel/debug/debug_core.c |   18 ++++++++++++++++++
 kernel/debug/debug_core.h |    6 ++++++
 2 files changed, 24 insertions(+), 0 deletions(-)

diff --git a/kernel/debug/debug_core.c b/kernel/debug/debug_core.c
index 38fee3b..0125553 100644
--- a/kernel/debug/debug_core.c
+++ b/kernel/debug/debug_core.c
@@ -525,6 +525,12 @@ return_normal:
 				tracing_on();
 
 			kgdb_info[cpu].exception_state &= ~DCPU_IS_SLAVE;
+
+			if (kgdb_info[cpu].exception_state & DCPU_SLAVE_MASTER) {
+				kgdb_info[cpu].exception_state &= ~DCPU_SLAVE_MASTER;
+				kgdb_info[cpu].exception_state |= DCPU_WANT_MASTER;
+			}
+
 			atomic_dec(&cpu_in_kgdb[cpu]);
 			touch_softlockup_watchdog_sync();
 			clocksource_touch_watchdog();
@@ -661,6 +667,12 @@ kgdb_restore:
 
 	kgdb_info[cpu].exception_state &= ~(DCPU_WANT_MASTER |
 			DCPU_IS_SLAVE);
+
+	/* slave cpu could become master by dbg_cpu_switch() */
+	if (kgdb_info[cpu].exception_state & DCPU_SLAVE_MASTER) {
+		kgdb_info[cpu].exception_state &= ~DCPU_SLAVE_MASTER;
+		kgdb_info[cpu].exception_state |= DCPU_WANT_MASTER;
+	}
 	/* Free kgdb_active */
 	atomic_set(&kgdb_active, -1);
 	touch_softlockup_watchdog_sync();
@@ -726,6 +738,12 @@ int kgdb_nmicallback(int cpu, void *regs)
 	    atomic_read(&kgdb_active) != -1 &&
 	    atomic_read(&kgdb_active) != cpu) {
 		kgdb_info[cpu].exception_state |= DCPU_IS_SLAVE;
+
+		if (kgdb_info[cpu].exception_state & DCPU_WANT_MASTER) {
+			kgdb_info[cpu].exception_state &= ~DCPU_WANT_MASTER;
+			kgdb_info[cpu].exception_state |= DCPU_SLAVE_MASTER;
+		}
+
 		kgdb_cpu_enter(ks, regs);
 		return 0;
 	}
diff --git a/kernel/debug/debug_core.h b/kernel/debug/debug_core.h
index 60862ea..0ae3db3 100644
--- a/kernel/debug/debug_core.h
+++ b/kernel/debug/debug_core.h
@@ -34,6 +34,12 @@ struct kgdb_state {
 #define DCPU_IS_SLAVE    0x4 /* Slave cpu enter exception */
 #define DCPU_SSTEP       0x8 /* CPU is single stepping */
 
+/* a special DCPU_IS_SLAVE state that:
+ *  Before it enter kgdb as Slave mode, the cpu
+ *  exception state have been set to DCPU_WANT_MASTER.
+ */
+#define DCPU_SLAVE_MASTER 0x16
+
 struct debuggerinfo_struct {
 	void			*debuggerinfo;
 	struct task_struct	*task;
-- 
1.6.5.2

