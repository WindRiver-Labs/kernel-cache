From 6d852cd9b75cda014bf679c124fe988f2b9815c3 Mon Sep 17 00:00:00 2001
From: Jason Wessel <jason.wessel@windriver.com>
Date: Thu, 9 Jun 2011 16:54:21 -0500
Subject: [PATCH 22/28] kgdboc: fix lost characters with scheduled breakpoint

When using the rx_poll api to snoop a tty session for the '$'
character or a control-c, a break point is scheduled when either
character is detected.  All of the data must then go into the queue up
until kgdb is fully entered.

Prior to this patch these characters would be lost and as a result the
debugger connection sequences for gdb would end up timing out or have
a retry or sometimes occasionally complete failure to connect.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 drivers/tty/serial/kgdboc.c | 19 +++++++++++--------
 include/linux/kgdb.h        |  1 +
 kernel/debug/debug_core.c   |  6 ++++++
 kernel/debug/gdbstub.c      |  1 +
 4 files changed, 19 insertions(+), 8 deletions(-)

diff --git a/drivers/tty/serial/kgdboc.c b/drivers/tty/serial/kgdboc.c
index bf46ba5..513781d 100644
--- a/drivers/tty/serial/kgdboc.c
+++ b/drivers/tty/serial/kgdboc.c
@@ -187,7 +187,8 @@ static int schedule_breakpoints;
  */
 static int kgdboc_rx_callback(u8 c)
 {
-	if (likely(atomic_read(&kgdb_active) == -1)) {
+	if (likely(atomic_read(&kgdb_active) == -1 &&
+		   !kgdb_is_waiting_on_breakpoint())) {
 		if (no_polled_breaks)
 			return 0;
 		if (c == break_char ||
@@ -308,6 +309,8 @@ do_register:
 		goto nmi_con_failed;
 
 	configured = 1;
+	ch_head = 0;
+	ch_tail = 0;
 
 	return 0;
 
@@ -354,11 +357,6 @@ static int kgdboc_get_char(void)
 	if (buffered_char >= 0)
 		return xchg(&buffered_char, -1);
 
-	ret = kgdb_tty_driver->ops->poll_get_char(kgdb_tty_driver,
-						  kgdb_tty_line);
-	if (ret != -2)
-		return ret;
-
 	/* A return of -2 means use the poll character ring */
 	if (ch_head != ch_tail) {
 		ret = ch_ring[ch_head];
@@ -368,6 +366,11 @@ static int kgdboc_get_char(void)
 		return ret;
 	}
 
+	ret = kgdb_tty_driver->ops->poll_get_char(kgdb_tty_driver,
+						  kgdb_tty_line);
+	if (ret != -2)
+		return ret;
+
 	return -1;
 }
 
@@ -424,8 +427,6 @@ static void kgdboc_pre_exp_handler(void)
 	/* Increment the module count when the debugger is active */
 	if (!kgdb_connected)
 		try_module_get(THIS_MODULE);
-	ch_head = 0;
-	ch_tail = 0;
 }
 
 static void kgdboc_post_exp_handler(void)
@@ -437,6 +438,8 @@ static void kgdboc_post_exp_handler(void)
 		dbg_restore_graphics = 0;
 		con_debug_leave();
 	}
+	ch_head = 0;
+	ch_tail = 0;
 	kgdboc_restore_input();
 }
 
diff --git a/include/linux/kgdb.h b/include/linux/kgdb.h
index e3c181d..599bfac 100644
--- a/include/linux/kgdb.h
+++ b/include/linux/kgdb.h
@@ -305,6 +305,7 @@ extern int kgdb_hex2mem(char *buf, char *mem, int count);
 
 extern int kgdb_isremovedbreak(unsigned long addr);
 extern void kgdb_schedule_breakpoint(void);
+extern int kgdb_is_waiting_on_breakpoint(void);
 
 extern int
 kgdb_handle_exception(int ex_vector, int signo, int err_code,
diff --git a/kernel/debug/debug_core.c b/kernel/debug/debug_core.c
index 0874e2e..2196def 100644
--- a/kernel/debug/debug_core.c
+++ b/kernel/debug/debug_core.c
@@ -965,6 +965,12 @@ void kgdb_schedule_breakpoint(void)
 }
 EXPORT_SYMBOL_GPL(kgdb_schedule_breakpoint);
 
+int kgdb_is_waiting_on_breakpoint(void)
+{
+	return atomic_read(&kgdb_break_tasklet_var);
+}
+EXPORT_SYMBOL_GPL(kgdb_is_waiting_on_breakpoint);
+
 static void kgdb_initial_breakpoint(void)
 {
 	kgdb_break_asap = 0;
diff --git a/kernel/debug/gdbstub.c b/kernel/debug/gdbstub.c
index 5c3ffaf..959b542 100644
--- a/kernel/debug/gdbstub.c
+++ b/kernel/debug/gdbstub.c
@@ -1137,6 +1137,7 @@ int gdbstub_state(struct kgdb_state *ks, char *cmd)
 	case 'c':
 		strcpy(remcom_in_buffer, cmd);
 		return 0;
+	case '+':
 	case '$':
 		strcpy(remcom_in_buffer, cmd);
 		gdbstub_use_prev_in_buf = strlen(remcom_in_buffer);
-- 
2.0.2

