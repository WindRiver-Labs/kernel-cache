From 9968afe008fa2cc1962583e2c55284a727dedfbf Mon Sep 17 00:00:00 2001
From: "Kexin(Casey) Chen" <Casey.Chen@windriver.com>
Date: Wed, 21 Sep 2016 15:30:00 -0700
Subject: [PATCH 18/28] kgdboc: use kthread to schedule restore_input work

Convert from using an atomically scheduled bottom half to using a an
additional kernel thread which restores the input subsystem state. The
flags are set in the post_exception handler to wake the kthread which
calls do_restore_input() so as to avoid kernel warning when running in
the preempt-rt case that leads to kernel instability. Below is an
example stack trace including the warning.

...kernel/rtmutex.c:646
in_atomic(): 1, irqs_disabled(): 1, pid: 760, name: sh
root@localhost:~Pid: 760, comm: sh Not tainted 3.4.20-rt29_preempt-rt #4
Call Trace:
[<ffffffff816f50b5>] rt_spin_lock+0x25/0x50
[<ffffffff810516c5>] __queue_work+0x65/0x4a0
[<ffffffff810a29b9>] ? gdb_serial_stub+0x199/0xe70
[<ffffffff816f9509>] ? sub_preempt_count+0xa9/0xe0
[<ffffffff81051b1d>] queue_work_on+0x1d/0x30
[<ffffffff81051bf4>] queue_work+0x34/0x50
[<ffffffff81051c28>] schedule_work+0x18/0x20
[<ffffffff813b99d0>] kgdboc_post_exp_handler+0x50/0x80
[<ffffffff810a19f9>] kgdb_cpu_enter+0x579/0x630
[<ffffffff810a1c31>] kgdb_handle_exception+0x71/0x180
[<ffffffff81022686>] __kgdb_notify+0x36/0xd0
[<ffffffff810227cc>] kgdb_ll_trap+0x3c/0x40
[<ffffffff816f64e7>] do_int3+0x47/0x130
[<ffffffff816f5ae7>] int3+0x27/0x40
[<ffffffff8103341d>] ? console_unlock+0x21d/0x2a0
[<ffffffff816f54cb>] ? _raw_spin_unlock_irqrestore+0x2b/0x60
[<ffffffff810a0e64>] ? kgdb_breakpoint+0x14/0x20
[<ffffffff810a105e>] sysrq_handle_dbg+0x2e/0x50
[<ffffffff813a1baa>] __handle_sysrq+0x12a/0x190
[<ffffffff813a1c10>] ? __handle_sysrq+0x190/0x190
[<ffffffff813a1c7d>] write_sysrq_trigger+0x6d/0x70
[<ffffffff81199c72>] proc_reg_write+0x92/0xe0
[<ffffffff8113c754>] vfs_write+0xb4/0x170
[<ffffffff8113caf9>] sys_write+0x59/0x140
[<ffffffff816fd077>] system_call_fastpath+0x16/0x1b

Calling schedule_work from an atomic exception context is not
permitted in the preempt RT kernel. The new implementation will work
well for both a preempt RT kernel and non-preempt RT kernel.

Signed-off-by: Liang Li <liang.li@windriver.com>
Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
Signed-off-by: He Zhe <zhe.he@windriver.com>
Signed-off-by: Kexin(Casey) Chen <Casey.Chen@windriver.com>
---
 drivers/tty/serial/kgdboc.c | 32 +++++++++++++++++++++++++++++++-
 1 file changed, 31 insertions(+), 1 deletion(-)

diff --git a/drivers/tty/serial/kgdboc.c b/drivers/tty/serial/kgdboc.c
index 680c84b..bf46ba5 100644
--- a/drivers/tty/serial/kgdboc.c
+++ b/drivers/tty/serial/kgdboc.c
@@ -16,6 +16,7 @@
 #include <linux/kgdb.h>
 #include <linux/kdb.h>
 #include <linux/tty.h>
+#include <linux/kthread.h>
 #include <linux/console.h>
 #include <linux/vt_kern.h>
 #include <linux/input.h>
@@ -91,14 +92,29 @@ static void kgdboc_restore_input_helper(struct work_struct *dummy)
 
 static DECLARE_WORK(kgdboc_restore_input_work, kgdboc_restore_input_helper);
 
-static void kgdboc_restore_input(void)
+static struct task_struct *delay_schedule_work_task = NULL;
+static int do_reschedule_work = 0;
+static int do_restore_input(void *dummy);
+
+static void _kgdboc_restore_input(void)
 {
 	if (likely(system_state == SYSTEM_RUNNING))
 		schedule_work(&kgdboc_restore_input_work);
 }
 
+static void kgdboc_restore_input(void)
+{
+	do_reschedule_work = 1;
+}
+
 static int kgdboc_register_kbd(char **cptr)
 {
+	if (delay_schedule_work_task == NULL) {
+		delay_schedule_work_task = kthread_create(do_restore_input, NULL, "kgdboc_do_restore_input");
+		if (delay_schedule_work_task)
+			wake_up_process(delay_schedule_work_task);
+	}
+
 	if (strncmp(*cptr, "kbd", 3) == 0 ||
 		strncmp(*cptr, "kdb", 3) == 0) {
 		if (kdb_poll_idx < KDB_POLL_FUNC_MAX) {
@@ -127,6 +143,20 @@ static void kgdboc_unregister_kbd(void)
 	}
 	flush_work(&kgdboc_restore_input_work);
 }
+
+static int do_restore_input(void *dummy)
+{
+	for (;;) {
+		if (do_reschedule_work) {
+			do_reschedule_work = 0;
+			_kgdboc_restore_input();
+		}
+		schedule_timeout_interruptible(HZ);
+	}
+
+	return 0;
+}
+
 #else /* ! CONFIG_KDB_KEYBOARD */
 #define kgdboc_register_kbd(x) 0
 #define kgdboc_unregister_kbd()
-- 
2.0.2

