From 80e100cfe80ebdf52e524790f0f826c5a2760f94 Mon Sep 17 00:00:00 2001
From: Dongdong Deng <dongdong.deng@windriver.com>
Date: Tue, 1 Mar 2011 17:14:42 +0800
Subject: [PATCH 25/29] kgdb,ppc: following gdb's fix about "e500mc/e500mc64"

gdb fix a problem about "e500mc/e500mc64" arch identifying in
[PATCH] fix debugging code compiled for newer PPC BookE processors
http://sourceware.org/ml/gdb-patches/2010-10/msg00391.html

It identify "e500mc/e500mc64" to "powerpc:common" from "powerpc:e500".

This patch is used for following gdb's fix in kgdb.

Signed-off-by: Dongdong Deng <dongdong.deng@windriver.com>
Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
---
 arch/powerpc/include/asm/kgdb.h | 12 +++++++-----
 arch/powerpc/kernel/kgdb.c      |  6 +-----
 2 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/arch/powerpc/include/asm/kgdb.h b/arch/powerpc/include/asm/kgdb.h
index 9db24e7..91d54eb 100644
--- a/arch/powerpc/include/asm/kgdb.h
+++ b/arch/powerpc/include/asm/kgdb.h
@@ -47,14 +47,16 @@ static inline void arch_kgdb_breakpoint(void)
 #define NUMCRITREGBYTES		184
 #else /* CONFIG_PPC32 */
 /* On non-E500 family PPC32 we determine the size by picking the last
- * register we need, but on E500 we skip sections so we list what we
- * need to store, and add it up. */
-#ifndef CONFIG_E500
-#define MAXREG			(PT_FPSCR+1)
-#else
+ * register we need, but on E500 which with SPE support we skip sections
+ * so we list what we need to store, and add it up. */
+
+#if defined(CONFIG_E500) && defined(CONFIG_SPE)
 /* 32 GPRs (8 bytes), nip, msr, ccr, link, ctr, xer, acc (8 bytes), spefscr*/
 #define MAXREG                 ((32*2)+6+2+1)
+#else
+#define MAXREG			(PT_FPSCR+1)
 #endif
+
 #define NUMREGBYTES		(MAXREG * sizeof(int))
 /* CR/LR, R1, R2, R13-R31 inclusive. */
 #define NUMCRITREGBYTES		(23 * sizeof(int))
diff --git a/arch/powerpc/kernel/kgdb.c b/arch/powerpc/kernel/kgdb.c
index c1eef24..55c1cb7 100644
--- a/arch/powerpc/kernel/kgdb.c
+++ b/arch/powerpc/kernel/kgdb.c
@@ -238,14 +238,10 @@ void sleeping_thread_to_gdb_regs(unsigned long *gdb_regs, struct task_struct *p)
 	for (reg = 14; reg < 32; reg++)
 		PACK64(ptr, regs->gpr[reg]);
 
-#ifdef CONFIG_FSL_BOOKE
-#ifdef CONFIG_SPE
+#if defined(CONFIG_FSL_BOOKE) && defined(CONFIG_SPE)
 	for (reg = 0; reg < 32; reg++)
 		PACK64(ptr, p->thread.evr[reg]);
 #else
-	ptr += 32;
-#endif
-#else
 	/* fp registers not used by kernel, leave zero */
 	ptr += 32 * 8 / sizeof(long);
 #endif
-- 
1.8.4.93.g57e4c17

