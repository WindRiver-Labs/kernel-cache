From dcd45f51e0277c69aba4b04e7321504fd683974d Mon Sep 17 00:00:00 2001
From: DDD <Dongdong.deng@windriver.com>
Date: Wed, 9 Sep 2009 10:12:44 +0800
Subject: [PATCH 3/4] kgdboe: increase the OUT_BUF_SIZE to 256 from 30

On an unreliable/noisy network, gdb can disconnect frequently from kgdb
when it receives UDP packets out of order.

EX:
Error case:
gdb-W: $ma80000000dc50f10,10#d6
kgdb-R: +
kgdb-R: 590#ad$a80000000f93b560ffffffffc0004

Right case:
gdb-W: $ma80000000dc50f10,10#d6
kgdb-R: +
kgdb-R: $a80000000f93b560ffffffffc0004590#ad

Analysis:
The length of "$a80000000f93b560ffffffffc0004590#ad" is more than 30,
so it will be split into two skbs before being sent out to gdb:
skb A "$a80000000f93b560ffffffffc0004" and skb B "590#ad".

Because of the properties of UDP, it is possible that gdb receive skb
B first, then receive skb A in unreliable/noisy network.
That's why the "Error case" was caused.

Workaround:
The size of out buff 30 is too small for kgdb, the length of the
most of kgdb's replies is more than 30(especially in 64bit machine).

Increasing the OUT_BUF_SIZE to 256, so that we can let
"one kgdb's reply" in "one skb" to make kgdb connection more stable
in unreliable/noisy network environment.

Signed-off-by: Dongdong Deng <dongdong.deng@windriver.com>
---
 drivers/net/kgdboe.c |    3 +--
 1 files changed, 1 insertions(+), 2 deletions(-)

diff --git a/drivers/net/kgdboe.c b/drivers/net/kgdboe.c
index 939797a..6537e00 100644
--- a/drivers/net/kgdboe.c
+++ b/drivers/net/kgdboe.c
@@ -31,7 +31,7 @@
 #include <asm/atomic.h>
 
 #define IN_BUF_SIZE 512		/* power of 2, please */
-#define OUT_BUF_SIZE 30		/* We don't want to send too big of a packet. */
+#define OUT_BUF_SIZE 256	/* We don't want to send too big of a packet. */
 #define MAX_CONFIG_LEN 256
 
 static char in_buf[IN_BUF_SIZE], out_buf[OUT_BUF_SIZE];
@@ -133,7 +133,6 @@ static void eth_flush_buf(void)
 {
 	if (out_count && np.dev) {
 		netpoll_send_udp(&np, out_buf, out_count);
-		memset(out_buf, 0, sizeof(out_buf));
 		out_count = 0;
 	}
 }
-- 
1.6.5.2

