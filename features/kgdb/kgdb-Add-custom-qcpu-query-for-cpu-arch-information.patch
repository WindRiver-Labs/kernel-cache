From 15b0d6329ce509b25cce2fd4c4de44b1a0171d3e Mon Sep 17 00:00:00 2001
From: Jason Wessel <jason.wessel@windriver.com>
Date: Wed, 16 Oct 2013 14:51:06 -0500
Subject: [PATCH 12/28] kgdb: Add custom qcpu query for cpu / arch information

This patch implements the ability to query the target architecture
via the gdb serial protocol.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>

Adjust hunk #3 #4 of arch/arm/kernel/setup.c

Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 arch/arm/include/asm/kgdb.h |  2 ++
 arch/arm/kernel/setup.c     |  8 ++++----
 kernel/debug/gdbstub.c      | 42 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 48 insertions(+), 4 deletions(-)

diff --git a/arch/arm/include/asm/kgdb.h b/arch/arm/include/asm/kgdb.h
index 0a9d5dd..93e7f31 100644
--- a/arch/arm/include/asm/kgdb.h
+++ b/arch/arm/include/asm/kgdb.h
@@ -47,6 +47,8 @@ static inline void arch_kgdb_breakpoint(void)
 
 extern void kgdb_handle_bus_error(void);
 extern int kgdb_fault_expected;
+/* export cpu name for qcpu kgdb query */
+extern const char *ARM_cpu_name;
 
 #endif /* !__ASSEMBLY__ */
 
diff --git a/arch/arm/kernel/setup.c b/arch/arm/kernel/setup.c
index 6e16dcd..14e5dc2 100644
--- a/arch/arm/kernel/setup.c
+++ b/arch/arm/kernel/setup.c
@@ -144,7 +144,7 @@ static struct stack stacks[NR_CPUS];
 char elf_platform[ELF_PLATFORM_SIZE];
 EXPORT_SYMBOL(elf_platform);
 
-static const char *cpu_name;
+const char *ARM_cpu_name;
 static const char *machine_name;
 static char __initdata cmd_line[COMMAND_LINE_SIZE];
 const struct machine_desc *machine_desc __initdata;
@@ -612,7 +612,7 @@ static void __init setup_processor(void)
 		while (1);
 	}
 
-	cpu_name = list->cpu_name;
+	ARM_cpu_name = list->cpu_name;
 	__cpu_architecture = __get_cpu_architecture();
 
 #ifdef MULTI_CPU
@@ -629,7 +629,7 @@ static void __init setup_processor(void)
 #endif
 
 	pr_info("CPU: %s [%08x] revision %d (ARMv%s), cr=%08lx\n",
-		cpu_name, read_cpuid_id(), read_cpuid_id() & 15,
+		ARM_cpu_name, read_cpuid_id(), read_cpuid_id() & 15,
 		proc_arch[cpu_architecture()], get_cr());
 
 	snprintf(init_utsname()->machine, __NEW_UTS_LEN + 1, "%s%c",
@@ -1064,7 +1064,7 @@ static int c_show(struct seq_file *m, void *v)
 		seq_printf(m, "processor\t: %d\n", i);
 		cpuid = is_smp() ? per_cpu(cpu_data, i).cpuid : read_cpuid_id();
 		seq_printf(m, "model name\t: %s rev %d (%s)\n",
-			   cpu_name, cpuid & 15, elf_platform);
+			   ARM_cpu_name, cpuid & 15, elf_platform);
 
 #if defined(CONFIG_SMP)
 		seq_printf(m, "BogoMIPS\t: %lu.%02lu\n",
diff --git a/kernel/debug/gdbstub.c b/kernel/debug/gdbstub.c
index 19d9a57..5c3ffaf 100644
--- a/kernel/debug/gdbstub.c
+++ b/kernel/debug/gdbstub.c
@@ -33,6 +33,7 @@
 #include <linux/kdb.h>
 #include <linux/serial_core.h>
 #include <linux/reboot.h>
+#include <linux/utsname.h>
 #include <linux/uaccess.h>
 #include <asm/cacheflush.h>
 #include <asm/unaligned.h>
@@ -739,6 +740,47 @@ static void gdb_cmd_query(struct kgdb_state *ks)
 		*(--ptr) = '\0';
 		break;
 
+	case 'c':
+		if (memcmp(remcom_in_buffer + 1, "cpu,", 3) == 0) {
+			/* This is the qcpu command.
+			 *
+			 * The response is
+			 * arch,endian,kernel rev,arch specific
+			 */
+			strcpy(remcom_out_buffer, utsname()->machine);
+			strcat(remcom_out_buffer, ",");
+#ifdef __BIG_ENDIAN
+			strcat(remcom_out_buffer, "big,");
+#else
+			strcat(remcom_out_buffer, "little,");
+#endif
+			strcat(remcom_out_buffer, utsname()->release);
+			strcat(remcom_out_buffer, ",");
+#if defined(CONFIG_PPC64) || defined(CONFIG_PPC)
+			strcat(remcom_out_buffer, cur_cpu_spec[0].cpu_name);
+#elif defined(CONFIG_ARM)
+			{
+				if (ARM_cpu_name)
+					strcat(remcom_out_buffer, ARM_cpu_name);
+			}
+#elif defined(CONFIG_MIPS)
+			{
+				char fmt[64];
+				char fmt2[80];
+				unsigned int version =
+					cpu_data[0].processor_id;
+				unsigned int fp_vers = cpu_data[0].fpu_id;
+				sprintf(fmt, "%%s V%%d.%%d%s",
+					cpu_data[0].options &
+					MIPS_CPU_FPU ? "  FPU V%d.%d" : "");
+				sprintf(fmt2, fmt, __cpu_name[0],
+					(version >> 4) & 0x0f, version & 0x0f,
+					(fp_vers >> 4) & 0x0f, fp_vers & 0x0f);
+				strcat(remcom_out_buffer, fmt2);
+			}
+#endif
+		}
+		break;
 	case 'C':
 		/* Current thread id */
 		strcpy(remcom_out_buffer, "QC");
-- 
2.0.2

