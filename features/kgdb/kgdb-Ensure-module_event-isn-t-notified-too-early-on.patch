From bc1d8bc163ff3f939bc52a02e372c927248a08f9 Mon Sep 17 00:00:00 2001
From: Mark Asselstine <mark.asselstine@windriver.com>
Date: Thu, 28 Feb 2013 13:45:52 -0500
Subject: [PATCH] kgdb: Ensure module_event isn't notified too early on module unload

When a kernel module is unloaded a notifier call made to module_event
triggers GDB to reevaluate the module list. If this notifier call is
made too early the module list will still contain the module being
unloaded when GDB reevaluates the module list. GDB will continue to
act as if the module is loaded, as well as demonstrate other
nondeterministic behavior related to module handling, until it
reevaluates the module list due to some other stimulus.

Move the notifier call to after the module list->del to ensure GDB
reevaluates the module list after the module has been removed from it.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
CC: Mark Asselstine <mark.asselstine@windriver.com>
---
 kernel/module.c |    4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/kernel/module.c b/kernel/module.c
index 2215782..c0933df 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -669,6 +669,8 @@ static void module_unload_free(struct module *mod)
 		list_del(&use->target_list);
 		kfree(use);
 	}
+	blocking_notifier_call_chain(&module_notify_list,
+				     MODULE_STATE_GOING, mod);
 	mutex_unlock(&module_mutex);
 
 	free_percpu(mod->refptr);
@@ -835,8 +837,6 @@ SYSCALL_DEFINE2(delete_module, const char __user *, name_user,
 	/* Final destruction now no one is using it. */
 	if (mod->exit != NULL)
 		mod->exit();
-	blocking_notifier_call_chain(&module_notify_list,
-				     MODULE_STATE_GOING, mod);
 	async_synchronize_full();
 
 	/* Store the name of the last unloaded module for diagnostic purposes */
-- 
1.7.10.4

