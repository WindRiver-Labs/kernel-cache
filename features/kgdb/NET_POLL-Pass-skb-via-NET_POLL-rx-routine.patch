From bbb1d21c9be15e04eb0ac5e3e0c2dc747e9d38c2 Mon Sep 17 00:00:00 2001
From: Jason Wessel <jason.wessel@windriver.com>
Date: Wed, 16 Oct 2013 14:51:02 -0500
Subject: [PATCH 05/29] NET_POLL: Pass skb via NET_POLL rx routine

This patch is a change to the NET POLL api so that the MAC address or
IP frame information can be parsed by the driver that wishes to use
it.  Speficially for kgdboe, it is used to automatically collect the
MAC address of the GDB host.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
Acked-by: Matt Mackall <mpm@selenic.com>
---
 include/linux/netpoll.h | 4 ++--
 net/core/netpoll.c      | 6 ++++--
 2 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/include/linux/netpoll.h b/include/linux/netpoll.h
index fa2cb76..0543461 100644
--- a/include/linux/netpoll.h
+++ b/include/linux/netpoll.h
@@ -24,7 +24,7 @@ struct netpoll {
 	struct net_device *dev;
 	char dev_name[IFNAMSIZ];
 	const char *name;
-	void (*rx_hook)(struct netpoll *, int, char *, int);
+	void (*rx_hook)(struct netpoll *, int, char *, int, struct sk_buff *);
 
 	union inet_addr local_ip, remote_ip;
 	bool ipv6;
@@ -60,6 +60,7 @@ static inline int netpoll_rx_disable(struct net_device *dev) { return 0; }
 static inline void netpoll_rx_enable(struct net_device *dev) { return; }
 #endif
 
+void netpoll_poll_dev(struct net_device *dev);
 void netpoll_send_udp(struct netpoll *np, const char *msg, int len);
 void netpoll_print_options(struct netpoll *np);
 int netpoll_parse_options(struct netpoll *np, char *opt);
@@ -82,7 +83,6 @@ static inline void netpoll_send_skb(struct netpoll *np, struct sk_buff *skb)
 }
 
 
-
 #ifdef CONFIG_NETPOLL
 static inline bool netpoll_rx_on(struct sk_buff *skb)
 {
diff --git a/net/core/netpoll.c b/net/core/netpoll.c
index cec074b..b1592bd 100644
--- a/net/core/netpoll.c
+++ b/net/core/netpoll.c
@@ -197,7 +197,7 @@ static void service_neigh_queue(struct netpoll_info *npi)
 	}
 }
 
-static void netpoll_poll_dev(struct net_device *dev)
+void netpoll_poll_dev(struct net_device *dev)
 {
 	const struct net_device_ops *ops;
 	struct netpoll_info *ni = rcu_dereference_bh(dev->npinfo);
@@ -246,6 +246,7 @@ static void netpoll_poll_dev(struct net_device *dev)
 
 	zap_completion_queue();
 }
+EXPORT_SYMBOL_GPL(netpoll_poll_dev);
 
 int netpoll_rx_disable(struct net_device *dev)
 {
@@ -841,7 +842,8 @@ int __netpoll_rx(struct sk_buff *skb, struct netpoll_info *npinfo)
 
 			np->rx_hook(np, ntohs(uh->source),
 				       (char *)(uh+1),
-				       ulen - sizeof(struct udphdr));
+				       ulen - sizeof(struct udphdr),
+				       skb);
 			hits++;
 		}
 	} else {
-- 
1.8.4.93.g57e4c17

