From 7239fecaf5ba424bf26a9d7e0a98447e839c838f Mon Sep 17 00:00:00 2001
From: Yong Zhang <yong.zhang@windriver.com>
Date: Fri, 24 Apr 2009 23:40:48 +0800
Subject: [PATCH] sparc64: Reschedule KGDB capture to pseudo-NMI

The slave capture operation must be done with a software interrupt
to avoid corrupting the register window state in the context switch
code.  The software interrupt must further be non-maskable in order
to make the entry reliable.  We use the software interrupt approach
from the upstream kernel, but tie it to the pseudo-NMI, rather than
running it at level 8.

Except for the level -- which is a big exception -- this is otherwise
a back-port of commit 42cc77c861e8e850e86252bb5b1e12e006261973:

    sparc64: Reschedule KGDB capture to a software interrupt.

    Otherwise it might interrupt switch_to() midstream and use
    half-cooked register window state.

    Reported-by: Chris Torek <chris.torek@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Vu Tran <vu.tran@windriver.com>
Signed-off-by: Chris Torek <chris.torek@windriver.com>
Signed-off-by: Yong Zhang <yong.zhang@windriver.com>
---
 arch/sparc/include/asm/pil.h |    1 +
 arch/sparc64/kernel/kgdb.c   |   13 ++-----------
 arch/sparc64/kernel/ttable.S |    4 ++++
 arch/sparc64/mm/ultra.S      |   25 +++----------------------
 4 files changed, 10 insertions(+), 33 deletions(-)

diff --git a/arch/sparc/include/asm/pil.h b/arch/sparc/include/asm/pil.h
index d573820..f09c67f 100644
--- a/arch/sparc/include/asm/pil.h
+++ b/arch/sparc/include/asm/pil.h
@@ -24,6 +24,7 @@
 #define PIL_DEVICE_IRQ		5
 #define PIL_SMP_CALL_FUNC_SNGL	6
 #define PIL_NORMAL_MAX		14
+#define PIL_KGDB_CAPTURE	15
 #define PIL_NMI			15
 
 #endif /* !(_SPARC64_PIL_H) */
diff --git a/arch/sparc64/kernel/kgdb.c b/arch/sparc64/kernel/kgdb.c
index 5671b2a..9d25069 100644
--- a/arch/sparc64/kernel/kgdb.c
+++ b/arch/sparc64/kernel/kgdb.c
@@ -115,22 +115,13 @@ void gdb_regs_to_pt_regs(unsigned long *gdb_regs, struct pt_regs *regs)
 }
 
 #ifdef CONFIG_SMP
-void smp_kgdb_capture_client(struct pt_regs *regs)
+void smp_kgdb_capture_client(int irq, struct pt_regs *regs)
 {
-	unsigned long flags;
-
-	__asm__ __volatile__("rdpr      %%pstate, %0\n\t"
-			     "wrpr      %0, %1, %%pstate"
-			     : "=r" (flags)
-			     : "i" (PSTATE_IE));
-
-	flushw_all();
+	clear_softint(1 << irq);
 
 	if (atomic_read(&kgdb_active) != -1)
 		kgdb_nmicallback(raw_smp_processor_id(), regs);
 
-	__asm__ __volatile__("wrpr	%0, 0, %%pstate"
-			     : : "r" (flags));
 }
 #endif
 
diff --git a/arch/sparc64/kernel/ttable.S b/arch/sparc64/kernel/ttable.S
index 6164e8b..4e80def 100644
--- a/arch/sparc64/kernel/ttable.S
+++ b/arch/sparc64/kernel/ttable.S
@@ -67,7 +67,11 @@ tl0_irq6:	BTRAP(0x46)
 tl0_irq7:	BTRAP(0x47) BTRAP(0x48) BTRAP(0x49)
 tl0_irq10:	BTRAP(0x4a) BTRAP(0x4b) BTRAP(0x4c) BTRAP(0x4d)
 tl0_irq14:	TRAP_IRQ(timer_interrupt, 14)
+#ifdef CONFIG_SMP
+tl0_irq15:	TRAP_NMI_IRQ(smp_kgdb_capture_client, 15)
+#else
 tl0_irq15:	TRAP_NMI_IRQ(handler_irq, 15)
+#endif
 tl0_resv050:	BTRAP(0x50) BTRAP(0x51) BTRAP(0x52) BTRAP(0x53) BTRAP(0x54) BTRAP(0x55)
 tl0_resv056:	BTRAP(0x56) BTRAP(0x57) BTRAP(0x58) BTRAP(0x59) BTRAP(0x5a) BTRAP(0x5b)
 tl0_resv05c:	BTRAP(0x5c) BTRAP(0x5d) BTRAP(0x5e) BTRAP(0x5f)
diff --git a/arch/sparc64/mm/ultra.S b/arch/sparc64/mm/ultra.S
index 3c40c5a..4782ea7 100644
--- a/arch/sparc64/mm/ultra.S
+++ b/arch/sparc64/mm/ultra.S
@@ -681,28 +681,9 @@ xcall_new_mmu_context_version:
 #ifdef CONFIG_KGDB
 	.globl		xcall_kgdb_capture
 xcall_kgdb_capture:
-661:	rdpr		%pstate, %g2
-	wrpr		%g2, PSTATE_IG | PSTATE_AG, %pstate
-	.section	.sun4v_2insn_patch, "ax"
-	.word		661b
-	nop
-	nop
-	.previous
-
-	rdpr		%pil, %g2
-	wrpr		%g0, PIL_NORMAL_MAX, %pil
-	sethi		%hi(109f), %g7
-	ba,pt		%xcc, etrap_irq
-109:	 or		%g7, %lo(109b), %g7
-#ifdef CONFIG_TRACE_IRQFLAGS
-	call		trace_hardirqs_off
-	 nop
-#endif
-	call		smp_kgdb_capture_client
-	 add		%sp, PTREGS_OFF, %o0
-	/* Has to be a non-v9 branch due to the large distance. */
-	ba		rtrap_xcall
-	 ldx		[%sp + PTREGS_OFF + PT_V9_TSTATE], %l1
+	sethi		%hi(1 << PIL_KGDB_CAPTURE), %g1
+	wr		%g0, %g1, %set_softint
+	retry
 #endif
 
 #endif /* CONFIG_SMP */
-- 
1.6.0.4

