From 6466e191b4c868770bc387bf1e4547c096675f36 Mon Sep 17 00:00:00 2001
From: "Kexin(Casey) Chen" <Casey.Chen@windriver.com>
Date: Fri, 4 Nov 2016 17:06:16 -0700
Subject: [PATCH 11/28] Add ability to unoptimize module compiles

This patch adds in the ability to unoptimize a single kernel module to
make source stepping more linear and not optimize out variables that
the developer might like to inspect.  It used with adding
COPTIMIZE=-O0 to the build line.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>

Adjust hunk #1 in Makefile

Signed-off-by: He Zhe <zhe.he@windriver.com>

Ajust hunk #1 in Makefile

Signed-off-by: Kexin(Casey) Chen <Casey.Chen@windriver.com>
---
 Makefile | 12 +++++-------
 1 file changed, 5 insertions(+), 7 deletions(-)

diff --git a/Makefile b/Makefile
index 0967a10..bfaece0 100644
--- a/Makefile
+++ b/Makefile
@@ -620,18 +620,16 @@ ARCH_CFLAGS :=
 include arch/$(SRCARCH)/Makefile
 
 KBUILD_CFLAGS	+= $(call cc-option,-fno-delete-null-pointer-checks,)
-KBUILD_CFLAGS	+= $(call cc-disable-warning,maybe-uninitialized,)
 KBUILD_CFLAGS	+= $(call cc-disable-warning,frame-address,)
 
 ifdef CONFIG_CC_OPTIMIZE_FOR_SIZE
-KBUILD_CFLAGS	+= -Os
+COPTIMIZE       += -Os $(call cc-disable-warning,maybe-uninitialized,)
 else
-ifdef CONFIG_PROFILE_ALL_BRANCHES
-KBUILD_CFLAGS	+= -O2
-else
-KBUILD_CFLAGS   += -O2
-endif
+COPTIMIZE       += -O2
 endif
+# COPTIMIZE may be overridden on the make command line with
+#       make ... COPTIMIZE=""
+KBUILD_CFLAGS   += $(COPTIMIZE)
 
 # Tell gcc to never replace conditional load with a non-conditional one
 KBUILD_CFLAGS	+= $(call cc-option,--param=allow-store-data-races=0)
-- 
2.0.2

