From 18bc75a77742e2b1e0b0ce80c7118b607ad617bd Mon Sep 17 00:00:00 2001
From: Jason Wessel <jason.wessel@windriver.com>
Date: Fri, 10 Aug 2012 22:24:52 -0500
Subject: [PATCH 30/31] kgdboc, tty: use tty open to start low level drivers

This patch adds two new hooks to the tty layer in tty_io.c to allow
kgdboc to open a tty prior to the start of the user space processes,
as well as to open a tty to serial port which has nothing connected on
it.  This is for the purpose of starting the low level serial drivers
such that a control-c can be caught via the RX poll mechanism.

The two new functions, tty_console_poll_open() and
tty_console_poll_close() take care of setting/cleaning up an empty
"struct file *filp" as well as keeping the reference counts correct
for the tty device.  The new function are only accessible if
CONFIG_CONSOLE_POLL as it is a direct extension to the console poll
API.  All the filp operation for the new functions take place in the
tty_io.c so no further functions have to be exported externally as
well as allowing for the internals of the tty layer to remain private.

A few minor changes were needed in tty_io.c to deal with the fact that
the inode and fpath.dentry were NULL with the generic flip structure.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
---
 drivers/tty/serial/kgdboc.c |   26 +++++++++----
 drivers/tty/tty_io.c        |   90 +++++++++++++++++++++++++++++++++++++++++++
 drivers/tty/tty_mutex.c     |    5 +++
 include/linux/tty.h         |    1 +
 include/linux/tty_driver.h  |    5 +++
 5 files changed, 119 insertions(+), 8 deletions(-)

diff --git a/drivers/tty/serial/kgdboc.c b/drivers/tty/serial/kgdboc.c
index 2ebd59f..d948992 100644
--- a/drivers/tty/serial/kgdboc.c
+++ b/drivers/tty/serial/kgdboc.c
@@ -40,6 +40,7 @@ static struct kparam_string kps = {
 static int kgdboc_use_kms;  /* 1 if we use kernel mode switching */
 static struct tty_driver	*kgdb_tty_driver;
 static int			kgdb_tty_line;
+static struct file		*kgdb_filp;
 
 #ifdef CONFIG_KDB_KEYBOARD
 static int kgdboc_reset_connect(struct input_handler *handler,
@@ -211,6 +212,16 @@ static void cleanup_kgdboc(void)
 		kgdb_unregister_io_module(&kgdboc_io_ops);
 }
 
+static void release_kgdboc_tty(void)
+{
+	if (kgdb_tty_driver)
+		kgdb_tty_driver->ops->poll_init(kgdb_tty_driver, kgdb_tty_line,
+						NULL, (void *)-1);
+	if (kgdb_filp)
+		tty_console_poll_close(&kgdb_filp);
+	kgdb_tty_driver = NULL;
+}
+
 static int configure_kgdboc(void)
 {
 	struct tty_driver *p;
@@ -226,10 +237,7 @@ static int configure_kgdboc(void)
 
 	err = -ENODEV;
 	/* If a driver was previously configured remove it now */
-	if (kgdb_tty_driver)
-		kgdb_tty_driver->ops->poll_init(kgdb_tty_driver, kgdb_tty_line,
-						NULL, (void *)-1);
-	kgdb_tty_driver = NULL;
+	release_kgdboc_tty();
 	kgdboc_io_ops.is_console = 0;
 	kgdb_tty_driver = NULL;
 
@@ -283,6 +291,11 @@ static int configure_kgdboc(void)
 	if (p->ops->poll_init(p, tty_line, str, kgdboc_rx_callback))
 		goto noconfig;
 
+	/* Open the port and obtain a tty which call low level driver startup */
+	if (tty_console_poll_open(kgdb_tty_driver, &kgdb_filp,
+				  kgdb_tty_line) != 0)
+		goto noconfig;
+
 do_register:
 	err = kgdb_register_io_module(&kgdboc_io_ops);
 	if (err)
@@ -295,10 +308,7 @@ do_register:
 	return 0;
 
 noconfig:
-	if (kgdb_tty_driver)
-		kgdb_tty_driver->ops->poll_init(kgdb_tty_driver, kgdb_tty_line,
-						NULL, (void *)-1);
-	kgdb_tty_driver = NULL;
+	release_kgdboc_tty();
 	config[0] = 0;
 	configured = 0;
 	cleanup_kgdboc();
diff --git a/drivers/tty/tty_io.c b/drivers/tty/tty_io.c
index 8ab1ce5..916cfd6 100644
--- a/drivers/tty/tty_io.c
+++ b/drivers/tty/tty_io.c
@@ -143,6 +143,9 @@ ssize_t redirected_tty_write(struct file *, const char __user *,
 							size_t, loff_t *);
 static unsigned int tty_poll(struct file *, poll_table *);
 static int tty_open(struct inode *, struct file *);
+static struct tty_struct *tty_driver_lookup_tty(struct tty_driver *driver,
+					 struct inode *inode, int idx);
+
 long tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
 #ifdef CONFIG_COMPAT
 static long tty_compat_ioctl(struct file *file, unsigned int cmd,
@@ -340,6 +343,91 @@ static struct tty_driver *get_tty_driver(dev_t device, int *index)
 }
 
 #ifdef CONFIG_CONSOLE_POLL
+/**
+ *	tty_console_poll_open	-	allocate a tty for a polled device
+ *	@driver: the tty driver
+ *	@filp: file pointer to point to the tty
+ *	@tty_line: the minor device number
+ *
+ *	This routine returns allocates an empty struct file structure
+ *	to allow a polling device to open a tty.  This ultimately
+ *	allows the low level startup code for the uart to only be
+ *	called one time, for either the polling device init or user
+ *	space tty init.
+ */
+int tty_console_poll_open(struct tty_driver *driver, struct file **filp,
+			  int tty_line)
+{
+	static struct address_space fi_mapping;
+	static struct inode finode = { .i_mapping = &fi_mapping };
+	static struct dentry fdentry = { .d_inode = &finode };
+	static struct path fpath = { .dentry = &fdentry };
+	int ret = -EIO;
+	int do_tty_lock;
+	struct tty_struct *tty;
+	int inc_tty = 1;
+
+	if (!*filp)
+		*filp = alloc_file(&fpath, 0, NULL);
+	if (!*filp)
+		goto out;
+
+	if (!tty_is_locked())
+		do_tty_lock = 1;
+	if (do_tty_lock) {
+		mutex_lock(&tty_mutex);
+		tty_lock();
+	}
+	tty = tty_driver_lookup_tty(driver, NULL, tty_line);
+	if (!tty) {
+		tty = tty_init_dev(driver, tty_line);
+		inc_tty = 0;
+	}
+	ret = tty_alloc_file(*filp);
+	/*
+	 * Force clocal temporarily while opening and then restore the
+	 * setting when finished
+	 */
+	if (!ret) {
+		bool force_clocal = (tty->termios && !C_CLOCAL(tty));
+
+		if (force_clocal)
+			tty->termios->c_cflag |= CLOCAL;
+		ret = tty->ops->open(tty, *filp);
+		if (force_clocal)
+			tty->termios->c_cflag &= ~CLOCAL;
+	}
+	if (do_tty_lock)
+		tty_unlock();
+	if (ret == 0) {
+		tty_add_file(tty, *filp);
+		tty->count += inc_tty;
+	} else {
+		put_filp(*filp);
+		tty_free_file(*filp);
+		*filp = NULL;
+	}
+	if (do_tty_lock)
+		mutex_unlock(&tty_mutex);
+out:
+	return ret;
+}
+EXPORT_SYMBOL_GPL(tty_console_poll_open);
+
+/**
+ *	tty_console_poll_close	-	shutdown a tty for a polled device
+ *	@filp: file pointer to point to the tty
+ *
+ *	Deallocate the tty device used by the polling driver, and free
+ *	the associated filp.
+ */
+void tty_console_poll_close(struct file **filp)
+{
+	tty_release(NULL, *filp);
+	put_filp(*filp);
+	*filp = NULL;
+}
+EXPORT_SYMBOL_GPL(tty_console_poll_close);
 
 /**
  *	tty_find_polling_driver	-	find device of a polled tty
@@ -582,6 +670,8 @@ void __tty_hangup(struct tty_struct *tty)
 	/* This breaks for file handles being sent over AF_UNIX sockets ? */
 	list_for_each_entry(priv, &tty->tty_files, list) {
 		filp = priv->file;
+		if (!filp->f_op)
+			continue;
 		if (filp->f_op->write == redirected_tty_write)
 			cons_filp = filp;
 		if (filp->f_op->write != tty_write)
diff --git a/drivers/tty/tty_mutex.c b/drivers/tty/tty_mutex.c
index 9ff986c..68bc237 100644
--- a/drivers/tty/tty_mutex.c
+++ b/drivers/tty/tty_mutex.c
@@ -30,3 +30,8 @@ void __lockfunc tty_unlock(void)
 	mutex_unlock(&big_tty_mutex);
 }
 EXPORT_SYMBOL(tty_unlock);
+
+int tty_is_locked(void)
+{
+	return mutex_is_locked(&big_tty_mutex);
+}
diff --git a/include/linux/tty.h b/include/linux/tty.h
index 9f47ab5..cf2feee 100644
--- a/include/linux/tty.h
+++ b/include/linux/tty.h
@@ -607,6 +607,7 @@ extern long vt_compat_ioctl(struct tty_struct *tty,
 /* functions for preparation of BKL removal */
 extern void __lockfunc tty_lock(void) __acquires(tty_lock);
 extern void __lockfunc tty_unlock(void) __releases(tty_lock);
+extern int tty_is_locked(void);
 
 /*
  * this shall be called only from where BTM is held (like close)
diff --git a/include/linux/tty_driver.h b/include/linux/tty_driver.h
index 3d1d229..7e534ec 100644
--- a/include/linux/tty_driver.h
+++ b/include/linux/tty_driver.h
@@ -331,7 +331,12 @@ extern struct tty_driver *__alloc_tty_driver(int lines, struct module *owner);
 extern void put_tty_driver(struct tty_driver *driver);
 extern void tty_set_operations(struct tty_driver *driver,
 			const struct tty_operations *op);
+#ifdef CONFIG_CONSOLE_POLL
 extern struct tty_driver *tty_find_polling_driver(char *name, int *line);
+extern int tty_console_poll_open(struct tty_driver *driver,
+			struct file **filp, int line);
+extern void tty_console_poll_close(struct file **filp);
+#endif
 
 extern void tty_driver_kref_put(struct tty_driver *driver);
 
-- 
1.7.9.7

