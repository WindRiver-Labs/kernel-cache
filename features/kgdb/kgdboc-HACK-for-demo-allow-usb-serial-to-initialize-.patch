From 37158e385d77f07a7c53d5c577cad998a7f3177c Mon Sep 17 00:00:00 2001
From: Wally Gleemer <wally.gleemer@windriver.com>
Date: Fri, 10 Aug 2012 12:01:49 -0500
Subject: [PATCH 12/29] kgdboc,HACK: for demo allow usb serial to initialize
 later

The idea is to allow kgdboc=ttyUSB...

At the current time this is mostly a prototype patch.

Signed-off-by: Wally Gleemer <wally.gleemer@windriver.com>
Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
---
 drivers/tty/serial/kgdboc.c     | 43 ++++++++++++++++++++++++++---------------
 drivers/usb/serial/usb-serial.c | 10 +++++++---
 include/linux/kgdb.h            |  8 ++++++++
 3 files changed, 42 insertions(+), 19 deletions(-)

diff --git a/drivers/tty/serial/kgdboc.c b/drivers/tty/serial/kgdboc.c
index 24d8dbd..a008594 100644
--- a/drivers/tty/serial/kgdboc.c
+++ b/drivers/tty/serial/kgdboc.c
@@ -30,6 +30,7 @@ static struct kgdb_io		kgdboc_io_ops;
 static int configured		= -1;
 
 static char config[MAX_CONFIG_LEN];
+static char config_try_later;
 static struct kparam_string kps = {
 	.string			= config,
 	.maxlen			= MAX_CONFIG_LEN,
@@ -227,8 +228,10 @@ static int configure_kgdboc(void)
 		goto do_register;
 
 	p = tty_find_polling_driver(cptr, &tty_line);
-	if (!p)
+	if (!p) {
+		config_try_later = config[0];
 		goto noconfig;
+	}
 
 	cons = console_drivers;
 	while (cons) {
@@ -293,6 +296,16 @@ noconfig:
 	return err;
 }
 
+#ifdef CONFIG_KGDB_SERIAL_CONSOLE
+void kgdboc_init_hook(void)
+{
+	if (config_try_later && configured == 0) {
+		config[0] = config_try_later;
+		configure_kgdboc();
+	}
+}
+#endif
+
 static int __init init_kgdboc(void)
 {
 	/* Already configured? */
@@ -311,21 +324,19 @@ static int kgdboc_get_char(void)
 	if (buffered_char >= 0)
 		return xchg(&buffered_char, -1);
 
-	do {
-		ret = kgdb_tty_driver->ops->poll_get_char(kgdb_tty_driver,
-						kgdb_tty_line);
-		if (ret != -2)
-			return ret;
-
-		/* A return of -2 means use the poll character ring */
-		if (ch_head != ch_tail) {
-			ret = ch_ring[ch_head];
-			ch_head++;
-			if (ch_head >= MAX_CHAR_RING)
-				ch_head = 0;
-			return ret;
-		}
-	} while (ret == -2);
+	ret = kgdb_tty_driver->ops->poll_get_char(kgdb_tty_driver,
+						  kgdb_tty_line);
+	if (ret != -2)
+		return ret;
+
+	/* A return of -2 means use the poll character ring */
+	if (ch_head != ch_tail) {
+		ret = ch_ring[ch_head];
+		ch_head++;
+		if (ch_head >= MAX_CHAR_RING)
+			ch_head = 0;
+		return ret;
+	}
 
 	return -1;
 }
diff --git a/drivers/usb/serial/usb-serial.c b/drivers/usb/serial/usb-serial.c
index b56c27a..45a2df4 100644
--- a/drivers/usb/serial/usb-serial.c
+++ b/drivers/usb/serial/usb-serial.c
@@ -1064,6 +1064,7 @@ static int usb_serial_probe(struct usb_interface *interface,
 	usb_serial_console_init(minor);
 exit:
 	module_put(type->driver.owner);
+	kgdboc_init_hook();
 	return 0;
 
 probe_error:
@@ -1208,8 +1209,10 @@ static int serial_poll_init(struct tty_driver *driver, int line,
 	if (!serial)
 		return -1;
 
-	if (!serial->type->poll_get_char)
+	if (!serial->type->poll_get_char) {
+		mutex_unlock(&serial->disc_mutex);
 		return -1;
+	}
 
 	port = serial->port[line - serial->minor];
 	if (rx_callback + 1 == 0)
@@ -1228,6 +1231,7 @@ static int serial_poll_init(struct tty_driver *driver, int line,
 	}
 #endif
 
+	mutex_unlock(&serial->disc_mutex);
 	return 0;
 }
 
@@ -1239,7 +1243,7 @@ static int serial_poll_get_char(struct tty_driver *driver, int line)
 	struct urb *urb;
 	int ret = -1;
 
-	serial = usb_serial_get_by_index(line);
+	serial = serial_table[line];
 	if (!serial)
 		return -1;
 
@@ -1276,7 +1280,7 @@ static void serial_poll_put_char(struct tty_driver *driver, int line, char ch)
 	char buf[2];
 	int retval;
 
-	serial = usb_serial_get_by_index(line);
+	serial = serial_table[line];
 	if (!serial)
 		return;
 
diff --git a/include/linux/kgdb.h b/include/linux/kgdb.h
index c6e091b..31bc226 100644
--- a/include/linux/kgdb.h
+++ b/include/linux/kgdb.h
@@ -322,4 +322,12 @@ extern void __init dbg_late_init(void);
 #define in_dbg_master() (0)
 #define dbg_late_init()
 #endif /* ! CONFIG_KGDB */
+#ifdef CONFIG_KGDB_SERIAL_CONSOLE
+extern void __init early_kgdboc_init(void);
+extern void kgdboc_init_hook(void);
+#else /* ! CONFIG_KGDB_SERIAL_CONSOLE */
+static inline void kgdboc_init_hook(void)
+{
+}
+#endif /* ! CONFIG_KGDB_SERIAL_CONSOLE */
 #endif /* _KGDB_H_ */
-- 
1.8.4.93.g57e4c17

