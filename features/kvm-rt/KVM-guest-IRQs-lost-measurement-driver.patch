From 5521ca864230e5a6073815a7eff59bad58974d21 Mon Sep 17 00:00:00 2001
From: Nam Ninh <nam.ninh@windriver.com>
Date: Wed, 13 Nov 2013 15:55:25 -0500
Subject: [PATCH] KVM-guest: IRQs lost measurement driver

This driver is the guest-side of the tool to measure the number
and the percentage of lost interrupts when the interrupst are
injected from host at a certain rate. The driver also calculates
the injection duration and rate in IRQs/second. testintlost
application is used to retrieve and display statistics from this
driver.

Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index afeebea..2a865d8 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -592,13 +592,32 @@ config KVM_GUEST
 	  This option enables various optimizations for running under the KVM
 	  hypervisor.
 
-config VIRT_INT_LAT_GUEST
-	bool "Measure interrupt latency from KVM host to guest"
+menuconfig IRQ_BENCHMARK_GUEST
+	bool "IRQs benchmark tool"
 	depends on KVM_GUEST
 	default n
 	---help---
+	 Say Y here to see options related to IRQs benchmark.
+	 If you say N, all options in this submenu will be skipped and disabled.
+
+choice
+	prompt "IRQs Latency or lost benchmark"
+	depends on IRQ_BENCHMARK_GUEST
+	default VIRT_INT_LAT_GUEST
+
+config VIRT_INT_LAT_GUEST
+	bool "Interrupt latency from KVM host to guest"
+	---help---
 	  This is a generic driver to measure minimum, average and maximum
-	  latency from KVM host to guest for X86 platform.
+	  latency from KVM host to guest.
+
+config VIRT_INT_LOST_GUEST
+	bool "Interrupt lost from KVM host to guest"
+	---help---
+	  This is a generic driver to detect inject rate threshold at
+	  which the interrupts from KVM host to guest starts being lost,
+	  and measure how much interrupts are lost at a certain rate.
+endchoice
 
 source "arch/x86/lguest/Kconfig"
 
diff --git a/arch/x86/include/asm/paravirt.h b/arch/x86/include/asm/paravirt.h
index ded6f59..9baf0a2 100644
--- a/arch/x86/include/asm/paravirt.h
+++ b/arch/x86/include/asm/paravirt.h
@@ -339,6 +339,22 @@ static inline u64 paravirt_read_virq_start_tsc(int cpu)
 }
 #endif
 
+#ifdef CONFIG_VIRT_INT_LOST_GUEST
+/*
+ * Before KVM host injects each vIRQ to the guest, it puts
+ * the number of vIRQs that has been injected on a MSR
+ * shared memory buffer. This function is called by the guest
+ * to read out the total generated vIRQs from this shared
+ * memory. Locally, the guest records the total of vIRQs it
+ * has received. Based on the generated number and the received
+ * number, it calculates the percentage of lost interrupts.
+ */
+static inline u64 paravirt_read_generated_virq_total(int cpu)
+{
+	return PVOP_CALL1(u64, pv_time_ops.gen_total, cpu);
+}
+#endif
+
 static inline void write_ldt_entry(struct desc_struct *dt, int entry,
 				   const void *desc)
 {
diff --git a/arch/x86/include/asm/paravirt_types.h b/arch/x86/include/asm/paravirt_types.h
index ae49972..0471a17 100644
--- a/arch/x86/include/asm/paravirt_types.h
+++ b/arch/x86/include/asm/paravirt_types.h
@@ -99,6 +99,7 @@ struct pv_time_ops {
 	unsigned long long (*steal_clock)(int cpu);
 	unsigned long (*get_tsc_khz)(void);
 	unsigned long long (*read_tsc)(int cpu);
+	unsigned long long (*gen_total)(int cpu);
 };
 
 struct pv_cpu_ops {
diff --git a/arch/x86/kernel/Makefile b/arch/x86/kernel/Makefile
index 4b56460..255399d 100644
--- a/arch/x86/kernel/Makefile
+++ b/arch/x86/kernel/Makefile
@@ -102,6 +102,7 @@ obj-$(CONFIG_X86_CHECK_BIOS_CORRUPTION) += check.o
 obj-$(CONFIG_SWIOTLB)			+= pci-swiotlb.o
 obj-$(CONFIG_OF)			+= devicetree.o
 obj-$(CONFIG_VIRT_INT_LAT_GUEST)		+= intlatdrv.o
+obj-$(CONFIG_VIRT_INT_LOST_GUEST)		+= intlostdrv.o
 obj-$(CONFIG_UPROBES)			+= uprobes.o
 
 ###
diff --git a/arch/x86/kernel/intlostdrv.c b/arch/x86/kernel/intlostdrv.c
new file mode 100644
index 0000000..af6868e
--- /dev/null
+++ b/arch/x86/kernel/intlostdrv.c
@@ -0,0 +1,208 @@
+/*
+ * Virtual Interrupt Lost Measurement Driver
+ *
+ * Copyright (c) 2013 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/printk.h>
+#include <linux/fs.h>
+#include <linux/pci.h>
+#include <asm/paravirt.h>
+#include <asm/msr.h>
+
+#include "intlostdrv.h"
+
+#define DEVICE_NAME				"vintlost"
+
+struct intlost_info_s {
+	void *intlost_va;
+	void *intlost_ptr;
+};
+
+static int major;
+static uint32_t current_scale_factor;
+static uint64_t start_tsc, current_tsc, duration_tsc;
+static struct intlost_info_s *lost_info;
+
+static int device_open(struct inode *, struct file *);
+static int device_release(struct inode *, struct file *);
+static int device_mmap(struct file *file, struct vm_area_struct *vma);
+static long device_ioctl(struct file *file, unsigned int cmd,
+							unsigned long arg);
+
+static const struct file_operations fops = {
+	.open = device_open,
+	.release = device_release,
+	.mmap = device_mmap,
+	.unlocked_ioctl = device_ioctl
+};
+
+/* Called when a process tries to open the device file. */
+static int device_open(struct inode *inode, struct file *file)
+{
+	pr_debug("Device open");
+	if (try_module_get(THIS_MODULE))
+		return 0;
+	return -EBUSY;
+}
+
+/*
+ * Called when a process closes the device file.
+ */
+static int device_release(struct inode *inode, struct file *file)
+{
+	/*
+	 * Decrement the usage count, or else once you opened the file, you'll
+	 * never get rid of the module.
+	 */
+	module_put(THIS_MODULE);
+	return 0;
+}
+
+/*
+ * Called when the user-space library calls the mmap libc function.
+ * Usage:
+ * intlost_va = (void *)mmap(NULL, sizeof(struct intlost_stats_s),
+ *             PROT_READ | PROT_WRITE, MAP_SHARED | MAP_LOCKED, fd, 0);
+ */
+static int device_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	unsigned long start = vma->vm_start;
+	unsigned long size  = vma->vm_end - vma->vm_start;
+	unsigned long pfn;
+	struct intlost_stats_s *intlost_stats = (struct intlost_stats_s *)
+						lost_info->intlost_va;
+
+	intlost_stats->scale_factor = current_scale_factor;
+	intlost_stats->inject_duration_tsc = duration_tsc;
+	pfn = page_to_pfn(virt_to_page((unsigned long)lost_info->intlost_va));
+	if (remap_pfn_range(vma, start, pfn, size, vma->vm_page_prot)) {
+		pr_err("remap_pfn_range failed\n");
+		return -EAGAIN;
+	}
+	return 0;
+}
+
+static long device_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	int result = -ENOIOCTLCMD;
+
+	switch (cmd) {
+	case INTLOST_CMD_INT:
+		result = 0;
+		break;
+	default:
+		{
+		pr_err("Unknown ioctl: %u\n", cmd);
+		break;
+		}
+	}
+	return result;
+}
+
+void update_irqs_lost_stats(void)
+{
+	struct intlost_stats_s *intlost_stats = (struct intlost_stats_s *)
+						lost_info->intlost_va;
+
+	intlost_stats->received_total++;
+	/*
+	 * Data with first virq is the start scale factor
+	 * of the maximum injection rate, i.e., scale factor of 4
+	 * is a quater of max rate, and 2 is half rate.
+	 */
+	if (unlikely(intlost_stats->received_total == 1)) {
+		rdtscll(start_tsc);
+		current_tsc = start_tsc;
+		current_scale_factor =
+			paravirt_read_generated_virq_total(smp_processor_id());
+		pr_debug("Start max inject rate scale factor: %u\n",
+			current_scale_factor);
+	} else {
+		intlost_stats->injected_total =
+			paravirt_read_generated_virq_total(smp_processor_id());
+		rdtscll(current_tsc);
+		if (likely(current_tsc > start_tsc))
+			duration_tsc = current_tsc - start_tsc;
+		else
+			/* TSC rollover */
+			duration_tsc = (current_tsc + (~0ULL - start_tsc));
+	}
+
+	/* Print out debug info */
+	pr_debug("vIRQs injected: %llu, vIRQs received: %llu\n",
+		intlost_stats->injected_total,
+		intlost_stats->received_total);
+}
+
+static int __init intlost_init_module(void)
+{
+	lost_info = kzalloc(sizeof(struct intlost_info_s), GFP_KERNEL);
+	if (lost_info == NULL) {
+		pr_err("Failed to allocate memory for for intlost_info\n");
+		return -ENOMEM;
+	}
+
+	/* Allocate the shared memory for timer info */
+	lost_info->intlost_ptr = kzalloc(((sizeof(struct intlost_stats_s)/
+					PAGE_SIZE)+3)*PAGE_SIZE, GFP_KERNEL);
+	if (lost_info->intlost_ptr == NULL) {
+		pr_err("Failed to allocate memory for for intlost_ptr\n");
+		kfree(lost_info);
+		return -ENOMEM;
+	}
+	lost_info->intlost_va = (int *)((((unsigned long)
+		lost_info->intlost_ptr) + PAGE_SIZE - 1) & PAGE_MASK);
+	SetPageReserved(virt_to_page((
+				(unsigned long)lost_info->intlost_va)));
+
+	major = register_chrdev(0, DEVICE_NAME, &fops);
+	if (major < 0) {
+		pr_err("Registering char device failed with %d for master\n",
+									major);
+		ClearPageReserved(virt_to_page(
+				(unsigned long)lost_info->intlost_va));
+		kfree(lost_info->intlost_ptr);
+		kfree(lost_info);
+		return major;
+	} else
+		pr_debug("Char Dev Drv with major %d\n", major);
+
+	return 0;
+}
+
+static void intlost_cleanup_module(void)
+{
+	/* Clear reserved page for timer info */
+	ClearPageReserved(virt_to_page(
+				(unsigned long)lost_info->intlost_va));
+	kfree(lost_info->intlost_ptr);
+	kfree(lost_info);
+
+	/* Unregister the device */
+	unregister_chrdev(major, DEVICE_NAME);
+}
+
+module_init(intlost_init_module);
+module_exit(intlost_cleanup_module);
+
+MODULE_AUTHOR("Wind River");
+MODULE_DESCRIPTION("Interrupts Lost Benchmark Driver");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("0.1");
diff --git a/arch/x86/kernel/intlostdrv.h b/arch/x86/kernel/intlostdrv.h
new file mode 100644
index 0000000..de53fda
--- /dev/null
+++ b/arch/x86/kernel/intlostdrv.h
@@ -0,0 +1,43 @@
+/*
+ * Virtual Interrupt Lost Measurement Driver
+ *
+ * Copyright (c) 2013 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ */
+
+#ifndef INTLOSTDRV_H
+#define INTLOSTDRV_H
+
+#define INTLOST_CMD_MAGIC			'e'
+#define INTLOST_CMD_INT				(0)
+#define INTLOST_IOCTL_INT \
+		_IOWR(INTLOST_CMD_MAGIC, INTLOST_CMD_INT, unsigned int)
+
+struct intlost_stats_s {
+	uint64_t injected_total;
+	uint64_t received_total;
+	uint64_t inject_duration_tsc;
+	/*
+	 * Scale factor of maximum injection rate, i.e, with scale
+	 * factor of 4, the host injects one quarter of the max
+	 * injection rate.
+	 */
+	uint32_t scale_factor;
+};
+
+extern void update_irqs_lost_stats(void);
+
+#endif
diff --git a/arch/x86/kernel/kvm.c b/arch/x86/kernel/kvm.c
index d63b108..df81cf5 100644
--- a/arch/x86/kernel/kvm.c
+++ b/arch/x86/kernel/kvm.c
@@ -316,23 +316,29 @@ static void kvm_guest_apic_eoi_write(u32 reg, u32 val)
 	apic_write(APIC_EOI, APIC_EOI_ACK);
 }
 
-#ifdef CONFIG_VIRT_INT_LAT_GUEST
-static DEFINE_PER_CPU(u64, kvm_guest_tsc);
-static void kvm_init_read_tsc_area(void)
+#ifdef CONFIG_IRQ_BENCHMARK_GUEST
+/*
+ * Data from host is either tsc timestamp of generate virq
+ * if the tool is used to measure interrupt latency, or
+ * the current total number of generated vIRQs if the tool
+ * is used to benchmark vIRQs lost
+ */
+static DEFINE_PER_CPU(u64, kvm_data_from_host);
+static void kvm_init_read_data_from_host(void)
 {
 	int cpu = smp_processor_id();
-	u64 *tsc = &per_cpu(kvm_guest_tsc, cpu);
+	u64 *tsc = &per_cpu(kvm_data_from_host, cpu);
 
-	wrmsrl(MSR_KVM_GUEST_TSC, __pa(tsc));
-	printk(KERN_INFO "register_inject_tsc: cpu %d, msr %lx\n",
+	wrmsrl(MSR_KVM_VIRQ_DATA_TO_GUEST, __pa(tsc));
+	printk(KERN_INFO "%s: cpu %d, msr %lx\n", __func__,
 						cpu, __pa(tsc));
 }
 
-static u64 kvm_read_inject_tsc(int cpu)
+static u64 kvm_read_data_from_host(int cpu)
 {
 	u64 tsc;
 
-	tsc = per_cpu(kvm_guest_tsc, cpu);
+	tsc = per_cpu(kvm_data_from_host, cpu);
 	/*
 	 * Make sure there is no reordering between reading and
 	 * writing to the shared buffer.
@@ -371,8 +377,8 @@ void __cpuinit kvm_guest_cpu_init(void)
 	if (has_steal_clock)
 		kvm_register_steal_time();
 
-#ifdef CONFIG_VIRT_INT_LAT_GUEST
-	kvm_init_read_tsc_area();
+#ifdef CONFIG_IRQ_BENCHMARK_GUEST
+	kvm_init_read_data_from_host();
 #endif
 }
 
@@ -514,7 +520,11 @@ void __init kvm_guest_init(void)
 		apic_set_eoi_write(kvm_guest_apic_eoi_write);
 
 #ifdef CONFIG_VIRT_INT_LAT_GUEST
-	pv_time_ops.read_tsc = kvm_read_inject_tsc;
+	pv_time_ops.read_tsc = kvm_read_data_from_host;
+#endif
+
+#ifdef CONFIG_VIRT_INT_LOST_GUEST
+	pv_time_ops.gen_total = kvm_read_data_from_host;
 #endif
 
 #ifdef CONFIG_SMP
diff --git a/arch/x86/kernel/nmi.c b/arch/x86/kernel/nmi.c
index 5a8442d..1e2de5a 100644
--- a/arch/x86/kernel/nmi.c
+++ b/arch/x86/kernel/nmi.c
@@ -35,6 +35,10 @@
 #include "intlatdrv.h"
 #endif
 
+#ifdef CONFIG_VIRT_INT_LOST_GUEST
+#include "intlostdrv.h"
+#endif
+
 #define NMI_MAX_NAMELEN	16
 struct nmiaction {
 	struct list_head list;
@@ -298,9 +302,9 @@ unknown_nmi_error(unsigned char reason, struct pt_regs *regs)
 #endif
 
 	/*
-	 * Quiet these messages when the virq latency test is run
+	 * Quiet these messages when the virq test tool is run
 	 */
-#ifndef CONFIG_VIRT_INT_LAT_GUEST
+#ifndef CONFIG_IRQ_BENCHMARK_GUEST
 	pr_emerg("Uhhuh. NMI received for unknown reason %02x on CPU %d.\n",
 		 reason, smp_processor_id());
 
@@ -520,6 +524,9 @@ do_nmi(struct pt_regs *regs, long error_code)
 #ifdef CONFIG_VIRT_INT_LAT_GUEST
 	update_latency_timestamp();
 #endif
+#ifdef CONFIG_VIRT_INT_LOST_GUEST
+	update_irqs_lost_stats();
+#endif
 	nmi_nesting_preprocess(regs);
 
 	nmi_enter();
-- 
1.8.4.1

