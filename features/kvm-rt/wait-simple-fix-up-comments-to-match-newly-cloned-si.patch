From 484034058e04e88597c451d8d23aad4f9d993a00 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Tue, 30 Apr 2013 21:12:15 -0400
Subject: [PATCH] wait-simple: fix up comments to match newly cloned simple
 waits

It is clear that these were cloned from the standard wait.h support, but
the comments did not get remapped from the parallel non-simple versions.

For example, the mapping is apparent, when we see this list:

include/linux/wait.h:#define wake_up(x)                            __wake_up(x, TASK_NORMAL, 1, NULL)
include/linux/wait.h:#define wake_up_all(x)                        __wake_up(x, TASK_NORMAL, 0, NULL)
include/linux/wait.h:#define wake_up_interruptible(x)              __wake_up(x, TASK_INTERRUPTIBLE, 1, NULL)

include/linux/wait-simple.h:#define swait_wake(head)               __swait_wake(head, TASK_NORMAL, 1)
include/linux/wait-simple.h:#define swait_wake_all(head)           __swait_wake(head, TASK_NORMAL, 0)
include/linux/wait-simple.h:#define swait_wake_interruptible(head) __swait_wake(head, TASK_INTERRUPTIBLE, 1)

However, the functions in wait-simple.h still refer to the non-simple
wake_up() primitive, instead of the swait_wake() equivalent.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/wait-simple.h b/include/linux/wait-simple.h
index 1045367..9b841f3 100644
--- a/include/linux/wait-simple.h
+++ b/include/linux/wait-simple.h
@@ -88,7 +88,7 @@ do {									\
  * @condition evaluates to true. The @condition is checked each time
  * the waitqueue @wq is woken up.
  *
- * wake_up() has to be called after changing any variable that could
+ * swait_wake() has to be called after changing any variable that could
  * change the result of the wait condition.
  */
 #define swait_event(wq, condition)					\
@@ -124,7 +124,7 @@ do {									\
  * @condition evaluates to true. The @condition is checked each time
  * the waitqueue @wq is woken up.
  *
- * wake_up() has to be called after changing any variable that could
+ * swait_wake() has to be called after changing any variable that could
  * change the result of the wait condition.
  */
 #define swait_event_interruptible(wq, condition)			\
@@ -160,7 +160,7 @@ do {									\
  * @condition evaluates to true. The @condition is checked each time
  * the waitqueue @wq is woken up.
  *
- * wake_up() has to be called after changing any variable that could
+ * swait_wake() has to be called after changing any variable that could
  * change the result of the wait condition.
  *
  * The function returns 0 if the @timeout elapsed, and the remaining
-- 
1.8.1.2

