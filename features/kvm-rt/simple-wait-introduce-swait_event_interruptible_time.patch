From 36a425bd524613b9ab2ff4cbedbc3c3f18c807ec Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Tue, 30 Apr 2013 20:57:30 -0400
Subject: [PATCH] simple-wait: introduce swait_event_interruptible_timeout()

The existing simple wait queue support does not have an interruptible
timeout event function.  However it has all the chunks needed to create
one.  This does so, by using those chunks, to make a parallel to the
existing wait_event_interruptible_timeout() call.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/wait-simple.h b/include/linux/wait-simple.h
index 9b841f3..7a0a59e 100644
--- a/include/linux/wait-simple.h
+++ b/include/linux/wait-simple.h
@@ -135,6 +135,51 @@ do {									\
 	__ret;								\
 })
 
+#define __swait_event_interruptible_timeout(wq, condition, ret)		\
+do {									\
+	DEFINE_SWAITER(__wait);						\
+									\
+	for (;;) {							\
+		swait_prepare(&wq, &__wait, TASK_INTERRUPTIBLE);	\
+		if (condition)						\
+			break;						\
+		if (!signal_pending(current)) {				\
+			ret = schedule_timeout(ret);			\
+			if (!ret)					\
+				break;					\
+			continue;					\
+		}							\
+		ret = -ERESTARTSYS;					\
+		break;							\
+	}								\
+	swait_finish(&wq, &__wait);					\
+} while (0)
+
+/**
+ * swait_event_interruptible_timeout - sleep until a condition gets true or a timeout elapses
+ * @wq: the waitqueue to wait on
+ * @condition: a C expression for the event to wait for
+ * @timeout: timeout, in jiffies
+ *
+ * The process is put to sleep (TASK_INTERRUPTIBLE) until the
+ * @condition evaluates to true or a signal is received.
+ * The @condition is checked each time the waitqueue @wq is woken up.
+ *
+ * swait_wake() has to be called after changing any variable that could
+ * change the result of the wait condition.
+ *
+ * The function returns 0 if the @timeout elapsed, -ERESTARTSYS if it
+ * was interrupted by a signal, and the remaining jiffies otherwise
+ * if the condition evaluated to true before the timeout elapsed.
+ */
+#define swait_event_interruptible_timeout(wq, condition, timeout)	\
+({									\
+	long __ret = timeout;						\
+	if (!(condition))						\
+		__swait_event_interruptible_timeout(wq, condition, __ret); \
+	__ret;								\
+})
+
 #define __swait_event_timeout(wq, condition, ret)			\
 do {									\
 	DEFINE_SWAITER(__wait);						\
-- 
1.8.1.2

