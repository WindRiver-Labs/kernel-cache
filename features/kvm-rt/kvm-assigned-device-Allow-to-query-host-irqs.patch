From 44c029a39eaa875281cb76348c6683da693410d4 Mon Sep 17 00:00:00 2001
From: Thomas Gleixner <tglx@linutronix.de>
Date: Sat, 17 Dec 2011 23:55:50 +0100
Subject: [PATCH] kvm: assigned-device: Allow to query host irqs

Provide an ioctl to query the host interrupt number of an msix entry
of an assigned device. User space can use this to set the affinity of
the host irq to the pinned vcpu physical core.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
[relocate to include/uapi/linux/kvm.h for 3.10 kernel]
Signed-off-by: Michael Barabanov <michael.barabanov@windriver.com>

diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
index 932d7f2..0acb760 100644
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@ -829,6 +829,8 @@ struct kvm_arm_device_addr {
 	__u64 addr;
 };
 
+#define KVM_ASSIGN_QUERY_IRQ      _IO(KVMIO,  0xe8)
+
 /*
  * Device control API, available with KVM_CAP_DEVICE_CTRL
  */
@@ -1077,4 +1079,9 @@ struct kvm_assigned_msix_entry {
 	__u16 padding[3];
 };
 
+struct kvm_assigned_msix_query_irq {
+	__u32 assigned_dev_id;
+	__u32 entry;
+};
+
 #endif /* __LINUX_KVM_H */
diff --git a/virt/kvm/assigned-dev.c b/virt/kvm/assigned-dev.c
index 8db4370..dcf7dfb 100644
--- a/virt/kvm/assigned-dev.c
+++ b/virt/kvm/assigned-dev.c
@@ -877,6 +877,30 @@ msix_entry_out:
 
 	return r;
 }
+
+static int kvm_vm_ioctl_query_irq(struct kvm *kvm, u32 assigned_dev_id,
+				  u32 entry)
+{
+	struct kvm_assigned_dev_kernel *dev;
+	int r = -EINVAL;
+
+	mutex_lock(&kvm->lock);
+
+	dev = kvm_find_assigned_dev(&kvm->arch.assigned_dev_head,
+				      assigned_dev_id);
+	if (!dev)
+		goto out;
+	if (entry >= dev->entries_nr)
+		goto out;
+	if (dev->host_irq_disabled)
+		goto out;
+
+	r = dev->host_msix_entries[entry].vector;
+out:
+	mutex_unlock(&kvm->lock);
+	return r;
+}
+
 #endif
 
 static int kvm_vm_ioctl_set_pci_irq_mask(struct kvm *kvm,
@@ -1004,6 +1028,17 @@ long kvm_vm_ioctl_assigned_device(struct kvm *kvm, unsigned ioctl,
 			goto out;
 		break;
 	}
+	case KVM_ASSIGN_QUERY_IRQ: {
+		struct kvm_assigned_msix_query_irq query;
+
+		r = -EFAULT;
+		if (copy_from_user(&query, argp, sizeof query))
+			goto out;
+
+		r = kvm_vm_ioctl_query_irq(kvm, query.assigned_dev_id,
+					   query.entry);
+		break;
+	}
 #endif
 	case KVM_ASSIGN_SET_INTX_MASK: {
 		struct kvm_assigned_pci_dev assigned_dev;
-- 
2.2.0

