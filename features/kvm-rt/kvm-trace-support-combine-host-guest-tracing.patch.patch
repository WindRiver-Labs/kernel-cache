From 365c269d74d5adf9f1e87659e06a83ec095817b1 Mon Sep 17 00:00:00 2001
From: Thomas Gleixner <tglx@linutronix.de>
Date: Sun, 18 Dec 2011 12:49:38 +0100
Subject: [PATCH] kvm-trace-support-combine-host-guest-tracing.patch

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
[BA: ringbuffer/trace: 3.6 build/compile fixups]
Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>
Signed-off-by: Michael Barabanov <michael.barabanov@windriver.com>
[PG: forward port to 3.10.x-rt]
Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/arch/x86/kvm/trace.h b/arch/x86/kvm/trace.h
index 0a6cc6754ec5..a1f0807a1374 100644
--- a/arch/x86/kvm/trace.h
+++ b/arch/x86/kvm/trace.h
@@ -223,6 +223,7 @@ TRACE_EVENT(kvm_exit,
 	TP_ARGS(exit_reason, vcpu, isa),
 
 	TP_STRUCT__entry(
+		__field(	unsigned int,	vcpu_id		)
 		__field(	unsigned int,	exit_reason	)
 		__field(	unsigned long,	guest_rip	)
 		__field(	u32,	        isa             )
@@ -231,6 +232,7 @@ TRACE_EVENT(kvm_exit,
 	),
 
 	TP_fast_assign(
+		__entry->vcpu_id	= vcpu->vcpu_id;
 		__entry->exit_reason	= exit_reason;
 		__entry->guest_rip	= kvm_rip_read(vcpu);
 		__entry->isa            = isa;
@@ -238,7 +240,8 @@ TRACE_EVENT(kvm_exit,
 					   &__entry->info2);
 	),
 
-	TP_printk("reason %s rip 0x%lx info %llx %llx",
+	TP_printk("vcpu %u reason %s rip 0x%lx info %llx %llx",
+		  __entry->vcpu_id,
 		 (__entry->isa == KVM_ISA_VMX) ?
 		 __print_symbolic(__entry->exit_reason, VMX_EXIT_REASONS) :
 		 __print_symbolic(__entry->exit_reason, SVM_EXIT_REASONS),
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index c3cf2fd552b0..a892948083f6 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -171,6 +171,8 @@ module_param(ple_window_max, int, S_IRUGO);
 
 extern const ulong vmx_return;
 
+u64 global_trace_time_stamp(void);
+
 #define NR_AUTOLOAD_MSRS 8
 #define VMCS02_POOL_SIZE 1
 
@@ -5581,6 +5583,13 @@ static int handle_io(struct kvm_vcpu *vcpu)
 	int size, in, string;
 	unsigned port;
 
+#ifdef CONFIG_TRACING
+	static bool got_2nd_part = true;
+	static u64 guest_time;
+	static u64 host_time;
+	extern s64 host_guest_delta;
+#endif
+
 	exit_qualification = vmcs_readl(EXIT_QUALIFICATION);
 	string = (exit_qualification & 16) != 0;
 	in = (exit_qualification & 8) != 0;
@@ -5592,6 +5601,36 @@ static int handle_io(struct kvm_vcpu *vcpu)
 
 	port = exit_qualification >> 16;
 	size = (exit_qualification & 7) + 1;
+
+#ifdef CONFIG_TRACING
+	/* magic trap from KVM guest */
+	if (port == 0x55) {
+		trace_printk("Delta between host and guest: %lli\n", host_guest_delta);
+		trace_printk("Disabling tracing due to magic trap from KVM guest!\n");
+		tracing_off();
+	}
+	if (port == 0x56) {
+		if (got_2nd_part) {
+			tracing_on();
+			trace_printk("Enabling tracing due to magic trap from KVM guest!\n");
+
+			guest_time = kvm_register_read(vcpu, VCPU_REGS_RAX);
+			guest_time = guest_time << 32;
+			host_time = global_trace_time_stamp();
+		}
+		else {
+			guest_time += kvm_register_read(vcpu, VCPU_REGS_RAX);
+			host_guest_delta = (host_time - guest_time) / 1000;
+
+			trace_printk("Guest time: %llu\n", guest_time);
+			trace_printk("Host time: %llu\n", host_time);
+			trace_printk("Delta between host and guest: %lli\n", host_guest_delta);
+		}
+
+		got_2nd_part = !got_2nd_part;
+	}
+#endif
+
 	skip_emulated_instruction(vcpu);
 
 	return kvm_fast_pio_out(vcpu, size, port);
diff --git a/kernel/trace/ring_buffer.c b/kernel/trace/ring_buffer.c
index f5c016e8fc88..02f4408b4f68 100644
--- a/kernel/trace/ring_buffer.c
+++ b/kernel/trace/ring_buffer.c
@@ -24,6 +24,7 @@
 #include <linux/cpu.h>
 
 #include <asm/local.h>
+#include <asm/kvm_para.h>
 
 static void update_pages_handler(struct work_struct *work);
 
@@ -685,7 +686,7 @@ int ring_buffer_poll_wait(struct ring_buffer *buffer, int cpu,
 /* Up this if you want to test the TIME_EXTENTS and normalization */
 #define DEBUG_SHIFT 0
 
-static inline u64 rb_time_stamp(struct ring_buffer *buffer)
+inline u64 rb_time_stamp(struct ring_buffer *buffer)
 {
 	/* shift to debug/test normalization and TIME_EXTENTS */
 	return buffer->clock() << DEBUG_SHIFT;
@@ -1308,7 +1309,7 @@ struct ring_buffer *__ring_buffer_alloc(unsigned long size, unsigned flags,
 
 	nr_pages = DIV_ROUND_UP(size, BUF_PAGE_SIZE);
 	buffer->flags = flags;
-	buffer->clock = trace_clock_local;
+	buffer->clock = trace_clock_global;
 	buffer->reader_lock_key = key;
 
 	init_irq_work(&buffer->irq_work.work, rb_wake_up_waiters);
diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index be995682e3cc..30bd5a868118 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -41,6 +41,7 @@
 #include <linux/nmi.h>
 #include <linux/fs.h>
 #include <linux/sched/rt.h>
+#include <linux/kvm_para.h>
 
 #include "trace.h"
 #include "trace_output.h"
@@ -275,6 +276,12 @@ static struct trace_array global_trace = {
 
 LIST_HEAD(ftrace_trace_arrays);
 
+u64 global_trace_time_stamp(void)
+{
+	return rb_time_stamp(global_trace.trace_buffer.buffer);
+}
+EXPORT_SYMBOL_GPL(global_trace_time_stamp);
+
 int trace_array_get(struct trace_array *this_tr)
 {
 	struct trace_array *tr;
@@ -755,6 +762,19 @@ static void tracer_tracing_on(struct trace_array *tr)
 	smp_wmb();
 }
 
+s64 host_guest_delta = 0;
+EXPORT_SYMBOL_GPL(host_guest_delta);
+
+static inline void host_tracing_on(void)
+{
+	u64 now = global_trace_time_stamp();
+	trace_printk("Notifying host (trace enabled)!\n");
+	trace_printk("My time: %llu\n", now);
+	outl((u32)(now >> 32), 0x56);
+	outl((u32)now, 0x56);
+}
+
+
 /**
  * tracing_on - enable tracing buffers
  *
@@ -763,6 +783,12 @@ static void tracer_tracing_on(struct trace_array *tr)
  */
 void tracing_on(void)
 {
+	trace_printk("Tracing enabled!\n");
+
+	/* notify host kernel */
+	if (kvm_para_available())
+		host_tracing_on();
+
 	tracer_tracing_on(&global_trace);
 }
 EXPORT_SYMBOL_GPL(tracing_on);
@@ -818,6 +844,7 @@ int __trace_puts(unsigned long ip, const char *str, int size)
 }
 EXPORT_SYMBOL_GPL(__trace_puts);
 
+
 /**
  * __trace_bputs - write the pointer to a constant string into trace buffer
  * @ip:	   The address of the caller
@@ -1021,6 +1048,14 @@ static void tracer_tracing_off(struct trace_array *tr)
 	smp_wmb();
 }
 
+
+static inline void host_tracing_off(void)
+{
+	trace_printk("Notifying host (trace disabled)!\n");
+	outl(0x1, 0x55);
+}
+
+
 /**
  * tracing_off - turn off tracing buffers
  *
@@ -1031,6 +1066,12 @@ static void tracer_tracing_off(struct trace_array *tr)
  */
 void tracing_off(void)
 {
+	trace_printk("Tracing disabled!\n");
+
+	/* notify host kernel */
+	if (kvm_para_available())
+		host_tracing_off();
+
 	tracer_tracing_off(&global_trace);
 }
 EXPORT_SYMBOL_GPL(tracing_off);
@@ -6874,6 +6915,18 @@ static void create_trace_options_dir(struct trace_array *tr)
 }
 
 static ssize_t
+host_guest_delta_read(struct file *filp, char __user *ubuf,
+               size_t cnt, loff_t *ppos)
+{
+	char buf[64];
+	int r;
+
+	r = sprintf(buf, "%lli\n", host_guest_delta);
+
+	return simple_read_from_buffer(ubuf, cnt, ppos, buf, r);
+}
+
+static ssize_t
 rb_simple_read(struct file *filp, char __user *ubuf,
 	       size_t cnt, loff_t *ppos)
 {
@@ -6906,7 +6959,17 @@ rb_simple_write(struct file *filp, const char __user *ubuf,
 			tracer_tracing_on(tr);
 			if (tr->current_trace->start)
 				tr->current_trace->start(tr);
+			/* notify host kernel */
+			if (kvm_para_available()) {
+				trace_printk("Notifying host (trace enabled)!\n");
+				host_tracing_on();
+			}
 		} else {
+			/* notify host kernel */
+			if (kvm_para_available()) {
+				trace_printk("Notifying host (trace disabled)!\n");
+				host_tracing_off();
+			}
 			tracer_tracing_off(tr);
 			if (tr->current_trace->stop)
 				tr->current_trace->stop(tr);
@@ -7370,6 +7433,14 @@ static struct notifier_block trace_module_nb = {
 };
 #endif /* CONFIG_MODULES */
 
+static const struct file_operations host_guest_delta_fops = {
+	.open		= tracing_open_generic,
+	.read		= host_guest_delta_read,
+	.llseek		= default_llseek,
+};
+
+extern unsigned long ring_buffer_flags;
+
 static __init int tracer_init_tracefs(void)
 {
 	struct dentry *d_tracer;
@@ -7403,6 +7474,9 @@ static __init int tracer_init_tracefs(void)
 	register_module_notifier(&trace_module_nb);
 #endif
 
+	trace_create_file("host_guest_delta", 0644, d_tracer,
+			    NULL, &host_guest_delta_fops);
+
 #ifdef CONFIG_DYNAMIC_FTRACE
 	trace_create_file("dyn_ftrace_total_info", 0444, d_tracer,
 			&ftrace_update_tot_cnt, &tracing_dyn_info_fops);
diff --git a/kernel/trace/trace.h b/kernel/trace/trace.h
index 6ec5d805a0a5..fa5fa356e274 100644
--- a/kernel/trace/trace.h
+++ b/kernel/trace/trace.h
@@ -747,6 +747,9 @@ enum print_line_t print_trace_line(struct trace_iterator *iter);
 
 extern char trace_find_mark(unsigned long long duration);
 
+u64 rb_time_stamp(struct ring_buffer *buffer);
+u64 global_trace_time_stamp(void);
+
 /* Standard output formatting function used for function return traces */
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
 
-- 
2.7.4

