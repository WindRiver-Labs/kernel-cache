From 4ca43efbf3b60035ba911fbfd184f420ae4a4240 Mon Sep 17 00:00:00 2001
From: Nam Ninh <nam.ninh@windriver.com>
Date: Mon, 24 Nov 2014 10:13:27 -0500
Subject: [PATCH] kvm: ignore writing to read-only MSRs

We occationally see this message when we run a guest on OVP host
on Canoe Pass, but it should also be on Nehalem and other Intel
targets too:

[91234.028940] kvm [3889]: vcpu0 unhandled wrmsr: 0x680 data 0
[91234.033709] kvm [3889]: vcpu0 unhandled wrmsr: 0x6c0 data 0
[91234.038477] kvm [3889]: vcpu0 unhandled wrmsr: 0x681 data 0
[91234.043248] kvm [3889]: vcpu0 unhandled wrmsr: 0x6c1 data 0
[91234.048016] kvm [3889]: vcpu0 unhandled wrmsr: 0x682 data 0
[91234.052783] kvm [3889]: vcpu0 unhandled wrmsr: 0x6c2 data 0
[91234.057552] kvm [3889]: vcpu0 unhandled wrmsr: 0x683 data 0
[91234.062320] kvm [3889]: vcpu0 unhandled wrmsr: 0x6c3 data 0
[91234.067088] kvm [3889]: vcpu0 unhandled wrmsr: 0x684 data 0
[91234.071857] kvm [3889]: vcpu0 unhandled wrmsr: 0x6c4 data 0

We see these warnings because kvm_set_msr_common does not contain
handler for the MSR offsets 0x680-0x68f and 0x6c0-0x6cf. According
to this document section 3.8.3:
https://software.intel.com/sites/default/files/76/87/30320
registers offsets 0x680-0x68f and 0x6c0-0x6cf is on-chip LBR stack
containing 16 pairs of MSRs containing source and target addresses of
LBR instructions. These registers are read-only, so we ignore the write
requests to these registers.

Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index 11415fc48f39..d8565a987f29 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@ -72,7 +72,9 @@
 #define MSR_LBR_SELECT			0x000001c8
 #define MSR_LBR_TOS			0x000001c9
 #define MSR_LBR_NHM_FROM		0x00000680
+#define MSR_LBR_NHM_FROM_MAX	0x0000068f
 #define MSR_LBR_NHM_TO			0x000006c0
+#define MSR_LBR_NHM_TO_MAX		0x000006cf
 #define MSR_LBR_CORE_FROM		0x00000040
 #define MSR_LBR_CORE_TO			0x00000060
 
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 136df7d76841..dedb936f8969 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -2061,6 +2061,8 @@ int kvm_set_msr_common(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
 	case MSR_VM_HSAVE_PA:
 	case MSR_AMD64_PATCH_LOADER:
 	case MSR_AMD64_BU_CFG2:
+	case MSR_LBR_NHM_FROM ... MSR_LBR_NHM_FROM_MAX:
+	case MSR_LBR_NHM_TO ... MSR_LBR_NHM_TO_MAX:
 		break;
 
 	case MSR_EFER:
-- 
2.7.4

