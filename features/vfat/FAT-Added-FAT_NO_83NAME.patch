From 2fa9e7a7528b6e2b765daaab6e76c0f3162f169d Mon Sep 17 00:00:00 2001
From: Andrew Tridgell <tridge@samba.org>
Date: Thu, 16 Jul 2009 12:47:15 +1000
Subject: [PATCH] FAT: Added FAT_NO_83NAME

This patch adds a new flag field 'FAT_NO_83NAME' for FAT files. When
this flag is set on an 8.3 FAT entry, both the MSDOS and VFAT
filesystems will skip the entry. For MSDOS this makes the file
inaccessible. For VFAT it makes the file only accessible by the long
filename.

Signed-off-by: Andrew Tridgell <tridge@samba.org>
---
 fs/fat/dir.c             |   17 ++++++++++++++++-
 include/linux/msdos_fs.h |    1 +
 2 files changed, 17 insertions(+), 1 deletions(-)

diff --git a/fs/fat/dir.c b/fs/fat/dir.c
index dc49ed2..99ce0d0 100644
--- a/fs/fat/dir.c
+++ b/fs/fat/dir.c
@@ -368,7 +368,8 @@ static int fat_parse_short(struct super_block *sb,
 		dotoffset = 1;
 	}
 
-	memcpy(work, de->name, sizeof(work));
+	memcpy(work, de->name, sizeof(de->name));
+
 	/* see namei.c, msdos_format_name */
 	if (work[0] == 0x05)
 		work[0] = 0xE5;
@@ -499,6 +500,13 @@ parse_record:
 				goto end_of_dir;
 		}
 
+		/*
+		 * The FAT_NO_83NAME flag is used to mark files
+		 * created with no 8.3 short name
+		 */
+		if (de->lcase & FAT_NO_83NAME)
+			goto compare_longname;
+
 		/* Never prepend '.' to hidden files here.
 		 * That is done only for msdos mounts (and only when
 		 * 'dotsOK=yes'); if we are executing here, it is in the
@@ -512,6 +520,7 @@ parse_record:
 		if (fat_name_match(sbi, name, name_len, bufname, len))
 			goto found;
 
+compare_longname:
 		if (nr_slots) {
 			void *longname = unicode + FAT_MAX_UNI_CHARS;
 			int size = PATH_MAX - FAT_MAX_UNI_SIZE;
@@ -608,6 +617,8 @@ parse_record:
 		if (de->attr != ATTR_EXT && IS_FREE(de->name))
 			goto record_end;
 	} else {
+		if (de->lcase & FAT_NO_83NAME)
+			goto record_end;
 		if ((de->attr & ATTR_VOLUME) || IS_FREE(de->name))
 			goto record_end;
 	}
@@ -950,6 +961,10 @@ int fat_scan(struct inode *dir, const unsigned char *name,
 	sinfo->bh = NULL;
 	while (fat_get_short_entry(dir, &sinfo->slot_off, &sinfo->bh,
 				   &sinfo->de) >= 0) {
+		/* skip files marked as having no 8.3 short name  */
+		if (sinfo->de->lcase & FAT_NO_83NAME)
+			continue;
+
 		if (!strncmp(sinfo->de->name, name, MSDOS_NAME)) {
 			sinfo->slot_off -= sizeof(*sinfo->de);
 			sinfo->nr_slots = 1;
diff --git a/include/uapi/linux/msdos_fs.h b/include/uapi/linux/msdos_fs.h
index 11cc2ac..0e3c229 100644
--- a/include/uapi/linux/msdos_fs.h
+++ b/include/uapi/linux/msdos_fs.h
@@ -45,6 +45,7 @@
 
 #define CASE_LOWER_BASE	8	/* base is lower case */
 #define CASE_LOWER_EXT	16	/* extension is lower case */
+#define FAT_NO_83NAME	32	/* no 8.3 short filename for this file */
 
 #define DELETED_FLAG	0xe5	/* marks file as deleted when in name[0] */
 #define IS_FREE(n)	(!*(n) || *(n) == DELETED_FLAG)
-- 
1.7.5.4

