From be149c6e386f1de83131edf05542fab8d37e6928 Mon Sep 17 00:00:00 2001
From: Dave Lerner <Dave.Lerner@windriver.com>
Date: Mon, 1 Jun 2009 14:16:47 -0700
Subject: [PATCH 06/21] oprofile: add a kconfig option to enable backtrace through syscall

The oprofile backtrace through a system call requires additional frame
information stored on a system call stack. This patch provides users
the option of avoiding the extra instructions during the system call
and extra stack space conusmed, by providing a new config param,
CONFIG_OPROFILE_SYSCALL_TRAVERSE, that has a default value of n.

Signed-off-by: Dave Lerner <dave.lerner@windriver.com>
Integrated-by: Liming Wang <liming.wang@windriver.com>
---
 arch/Kconfig               |    8 ++++++++
 arch/x86/ia32/ia32entry.S  |    8 ++++----
 arch/x86/kernel/entry_64.S |    8 ++++----
 3 files changed, 16 insertions(+), 8 deletions(-)

diff --git a/arch/Kconfig b/arch/Kconfig
index e5eb133..ece0dca 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -30,6 +30,14 @@ config OPROFILE_EVENT_MULTIPLEX
 config HAVE_OPROFILE
 	bool
 
+config OPROFILE_SYSCALL_TRAVERSE
+	bool "Enable OProfile unwind from kernel through syscall"
+	depends on OPROFILE
+	default n
+	help
+	  Enable OProfile unwind from kernel through syscall to user
+	  space.
+
 config KPROBES
 	bool "Kprobes"
 	depends on KALLSYMS && MODULES
diff --git a/arch/x86/ia32/ia32entry.S b/arch/x86/ia32/ia32entry.S
index 9e410e9..dca076d 100644
--- a/arch/x86/ia32/ia32entry.S
+++ b/arch/x86/ia32/ia32entry.S
@@ -25,14 +25,14 @@
 #define sysretl_audit ia32_ret_from_sys_call
 #endif
 
-#ifdef CONFIG_OPROFILE
+#ifdef CONFIG_OPROFILE_SYSCALL_TRAVERSE
 #define OPROF_ARGOFFSET	0
 #else
 #define OPROF_ARGOFFSET ARGOFFSET
 #endif
 
 	.macro OPROF_SAVE_REST reg, tmp, savereg=1
-#ifdef CONFIG_OPROFILE
+#ifdef CONFIG_OPROFILE_SYSCALL_TRAVERSE
 	SAVE_REST
 	movq	RBP(%rsp), \tmp
 	.if \savereg
@@ -42,7 +42,7 @@
 	.endm
 
 	.macro OPROF_RESTORE_REST tmp, restorereg=1
-#ifdef CONFIG_OPROFILE
+#ifdef CONFIG_OPROFILE_SYSCALL_TRAVERSE
 	.if \restorereg
 	movq	\tmp, RBP(%rsp)
 	.endif
@@ -531,7 +531,7 @@ ENTRY(ia32_ptregs_common)
 /*	CFI_REL_OFFSET	rflags,EFLAGS-OPROF_ARGOFFSET*/
 	CFI_REL_OFFSET	rsp,RSP-OPROF_ARGOFFSET
 /*	CFI_REL_OFFSET	ss,SS-OPROF_ARGOFFSET*/
-#ifdef CONFIG_OPROFILE
+#ifdef CONFIG_OPROFILE_SYSCALL_TRAVERSE
 	movq	%r15, RBP(%rsp)	/* SAVE_REST at syscall */
 #else
 	SAVE_REST
diff --git a/arch/x86/kernel/entry_64.S b/arch/x86/kernel/entry_64.S
index a4cf012..1f9fecc 100644
--- a/arch/x86/kernel/entry_64.S
+++ b/arch/x86/kernel/entry_64.S
@@ -174,7 +174,7 @@ ENTRY(native_usergs_sysret64)
 ENDPROC(native_usergs_sysret64)
 #endif /* CONFIG_PARAVIRT */
 
-#ifdef CONFIG_OPROFILE
+#ifdef CONFIG_OPROFILE_SYSCALL_TRAVERSE
 #define OPROF_ARGOFFSET		0
 #define OPROF_SAVE_REST		SAVE_REST
 #define OPROF_RESTORE_REST	RESTORE_REST
@@ -356,7 +356,7 @@ END(save_args)
 
 ENTRY(save_rest)
 	PARTIAL_FRAME 1 REST_SKIP+8
-#ifndef CONFIG_OPROFILE
+#ifndef CONFIG_OPROFILE_SYSCALL_TRAVERSE
 	movq 5*8+16(%rsp), %r11	/* save return address */
 	movq_cfi rbx, RBX+16
 	movq_cfi rbp, RBP+16
@@ -705,7 +705,7 @@ END(system_call)
 	.macro PTREGSCALL label,func,arg
 ENTRY(\label)
 	PARTIAL_FRAME 1 8		/* offset 8: return address */
-#ifndef CONFIG_OPROFILE
+#ifndef CONFIG_OPROFILE_SYSCALL_TRAVERSE
 	subq $REST_SKIP, %rsp
 #endif
 	CFI_ADJUST_CFA_OFFSET REST_SKIP
@@ -727,7 +727,7 @@ END(\label)
 ENTRY(ptregscall_common)
 	DEFAULT_FRAME 1 8	/* offset 8: return address */
 	RESTORE_TOP_OF_STACK %r11, 8
-#ifndef CONFIG_OPROFILE
+#ifndef CONFIG_OPROFILE_SYSCALL_TRAVERSE
 	movq_cfi_restore R15+8, r15
 	movq_cfi_restore R14+8, r14
 	movq_cfi_restore R13+8, r13
-- 
1.6.5.2

