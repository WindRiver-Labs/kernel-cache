From e9ed42dc23a117e96ae7be88ca9d8d353ec4cde6 Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Tue, 11 Oct 2011 15:28:01 +0800
Subject: [PATCH] oprofile: protect from not being in an IRQ context

commit 9414e99672271adcc661f3c160a30b374179b92f upstream

http://lkml.org/lkml/2010/4/27/285

Protect against dereferencing regs when it's NULL, and
force a magic number into pc to prevent too deep processing.
This approach permits the dropped samples to be tallied as
invalid Instruction Pointer events.

e.g. output from about 15mins at 10kHz sample rate:
Nr. samples received: 2565380
Nr. samples lost invalid pc: 4

Signed-off-by: Phil Carmody <ext-phil.2.carmody@nokia.com>
Signed-off-by: Robert Richter <robert.richter@amd.com>

[Fixed context to apply to Wind River kernel tree.]
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/oprofile/cpu_buffer.c |   11 +++++++++--
 1 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/drivers/oprofile/cpu_buffer.c b/drivers/oprofile/cpu_buffer.c
index 69f6c4b..c1db97a 100644
--- a/drivers/oprofile/cpu_buffer.c
+++ b/drivers/oprofile/cpu_buffer.c
@@ -317,8 +317,8 @@ void oprofile_add_ext_sample(unsigned long pc, struct pt_regs * const regs,
 
 void oprofile_add_sample(struct pt_regs * const regs, unsigned long event)
 {
-	int is_kernel = !user_mode(regs);
-	unsigned long pc = profile_pc(regs);
+	int is_kernel;
+	unsigned long pc;
 	unsigned int this_cpu = get_cpu();
 
 	if (!cpu_isset(this_cpu, fs_sampled_cpus)) {
@@ -326,6 +326,13 @@ void oprofile_add_sample(struct pt_regs * const regs, unsigned long event)
 		return;
 	}
 
+	if (likely(regs)) {
+		is_kernel = !user_mode(regs);
+		pc = profile_pc(regs);
+	} else {
+		is_kernel = 0;    /* This value will not be used */
+		pc = ESCAPE_CODE; /* as this causes an early return. */
+	}
 	__oprofile_add_ext_sample(pc, regs, event, is_kernel);
 	put_cpu();
 }
-- 
1.7.0.4

