From d9585cfb15840d3e5fedbb1008e821311bf7b0f1 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Wed, 20 Nov 2013 17:09:45 -0600
Subject: [PATCH 0997/1587] CLK: TI: DRA7: initialize DSP DPLL and associated
 output clocks

The DSP DPLL is a new DPLL compared to previous OMAP generations and
is currently not configured by bootloader. This DPLL supplies the root
clocks for the DSP processors, as well as a mux input source for EVE
sub-system. Initialize the DSP DPLL at boot time to avoid any functional
issues caused when using any of the DSP processors. The DPLL will
automatically transition into a low-power stop mode when the associated
output clocks are not utilized or gated automatically.

The DSP DPLL provides two output clocks, DSP_GFCLK and EVE_GCLK. The
desired rate for DSP_GFCLK is 600 MHz (same as DSP DPLL CLKOUT frequency),
and is currently auto set due to the desired M2 divider value being the
same as reset value for the locked frequency of 600 MHz. The EVE_GCLK
however is required to be 400 MHz, so set the dpll_dsp_m3x2_ck's rate
explicitly so that the divider is set properly. The dpll_dsp_m2_ck rate
is also set explicitly to not rely on any implicit matching divider reset
values to the locked DPLL frequency.

The desired frequency values are defined as per the DRA7xx PLL spec
v0.3.5.

Signed-off-by: Suman Anna <s-anna@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 drivers/clk/ti/clk-7xx.c |   22 ++++++++++++++++++++++
 1 files changed, 22 insertions(+), 0 deletions(-)

diff --git a/drivers/clk/ti/clk-7xx.c b/drivers/clk/ti/clk-7xx.c
index 9b49cd2..2d9fa62 100644
--- a/drivers/clk/ti/clk-7xx.c
+++ b/drivers/clk/ti/clk-7xx.c
@@ -18,6 +18,9 @@
 
 #define DRA7_DPLL_ABE_DEFFREQ				361267200
 #define DRA7_DPLL_GMAC_DEFFREQ				1000000000
+#define DRA7_DPLL_DSP_DEFFREQ				600000000
+#define DRA7_DPLL_DSP_GFCLK_NOMFREQ			600000000
+#define DRA7_DPLL_EVE_GCLK_NOMFREQ			400000000
 
 
 static struct ti_dt_clk dra7xx_clks[] = {
@@ -309,6 +312,7 @@ int __init dra7xx_dt_clk_init(void)
 	int rc;
 	struct clk *abe_dpll_mux, *sys_clkin2, *dpll_ck, *dss_deshdcp_ck;
 	struct clk *ipu1_gfclk, *ipu1_gfclk_parent;
+	struct clk *dsp_dpll, *dsp_m2_dpll, *dsp_m3x2_dpll;
 
 	ti_dt_clocks_register(dra7xx_clks);
 
@@ -340,5 +344,23 @@ int __init dra7xx_dt_clk_init(void)
 	if (rc)
 		pr_err("%s: failed to reparent ipu1_gfclk_mux\n", __func__);
 
+	dsp_dpll = clk_get_sys(NULL, "dpll_dsp_ck");
+	rc = clk_set_rate(dsp_dpll, DRA7_DPLL_DSP_DEFFREQ);
+	if (!rc) {
+		dsp_m2_dpll = clk_get_sys(NULL, "dpll_dsp_m2_ck");
+		rc = clk_set_rate(dsp_m2_dpll, DRA7_DPLL_DSP_GFCLK_NOMFREQ);
+		if (rc)
+			pr_err("%s: failed to configure DSP DPLL m2 output!\n",
+			       __func__);
+
+		dsp_m3x2_dpll = clk_get_sys(NULL, "dpll_dsp_m3x2_ck");
+		rc = clk_set_rate(dsp_m3x2_dpll, DRA7_DPLL_EVE_GCLK_NOMFREQ);
+		if (rc)
+			pr_err("%s: failed to configure DSP DPLL m3x2 divider!\n",
+			       __func__);
+	} else {
+		pr_err("%s: failed to configure DSP DPLL!\n", __func__);
+	}
+
 	return rc;
 }
-- 
1.7.5.4

