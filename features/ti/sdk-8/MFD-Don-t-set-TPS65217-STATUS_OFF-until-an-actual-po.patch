From 0d8d1a622fbc018d52b79f91946f74400df94b46 Mon Sep 17 00:00:00 2001
From: Russ Dill <Russ.Dill@ti.com>
Date: Tue, 26 Aug 2014 11:13:20 +0530
Subject: [PATCH 1083/1587] MFD: Don't set TPS65217 STATUS_OFF until an actual
 power off event.

This allows the TPS to be used with RTC only suspend/resume, otherwise
it powers off when attempting suspend.

Signed-off-by: Russ Dill <Russ.Dill@ti.com>
[j-keerthy@ti.com] ported to 3.14 with minor fixes
Signed-off-by: Keerthy <j-keerthy@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 drivers/mfd/tps65217.c       |   44 +++++++++++++++++++++++++++++++++++++----
 include/linux/mfd/tps65217.h |    4 +++
 2 files changed, 43 insertions(+), 5 deletions(-)

diff --git a/drivers/mfd/tps65217.c b/drivers/mfd/tps65217.c
index 21eea21..4353047 100644
--- a/drivers/mfd/tps65217.c
+++ b/drivers/mfd/tps65217.c
@@ -24,6 +24,7 @@
 #include <linux/slab.h>
 #include <linux/regmap.h>
 #include <linux/err.h>
+#include <linux/reboot.h>
 #include <linux/of.h>
 #include <linux/of_device.h>
 
@@ -149,6 +150,27 @@ static struct regmap_config tps65217_regmap_config = {
 	.max_register = 0x1e,
 };
 
+static int tps65217_reboot_handler(struct notifier_block *this,
+				   unsigned long code,
+				   void *unused)
+{
+	struct tps65217 *tps = container_of(this, struct tps65217,
+					    reboot_notifier);
+
+	if (code == SYS_POWER_OFF && tps->write_status_off) {
+		int ret;
+		dev_info(tps->dev, "%s: Enabling STATUS_OFF\n", __func__);
+		ret = tps65217_set_bits(tps, TPS65217_REG_STATUS,
+					TPS65217_STATUS_OFF,
+					TPS65217_STATUS_OFF,
+					TPS65217_PROTECT_NONE);
+		if (ret < 0)
+			dev_err(tps->dev, "Failed to set status OFF\n");
+	}
+
+	return NOTIFY_OK;
+}
+
 static const struct of_device_id tps65217_of_match[] = {
 	{ .compatible = "ti,tps65217", .data = (void *)TPS65217 },
 	{ /* sentinel */ },
@@ -213,11 +235,20 @@ static int tps65217_probe(struct i2c_client *client,
 
 	/* Set the PMIC to shutdown on PWR_EN toggle */
 	if (status_off) {
-		ret = tps65217_set_bits(tps, TPS65217_REG_STATUS,
-				TPS65217_STATUS_OFF, TPS65217_STATUS_OFF,
-				TPS65217_PROTECT_NONE);
-		if (ret)
-			dev_warn(tps->dev, "unable to set the status OFF\n");
+		tps->write_status_off = 1;
+		tps->reboot_notifier.notifier_call = tps65217_reboot_handler;
+		ret = register_reboot_notifier(&tps->reboot_notifier);
+		if (ret < 0) {
+			dev_err(tps->dev, "Failed to register reboot handler\n");
+			return ret;
+		}
+		ret = tps65217_clear_bits(tps, TPS65217_REG_STATUS,
+					  TPS65217_STATUS_OFF,
+					  TPS65217_PROTECT_NONE);
+		if (ret < 0) {
+			dev_err(tps->dev, "Failed to clear status-off bit\n");
+			return ret;
+		}
 	}
 
 	dev_info(tps->dev, "TPS65217 ID %#x version 1.%d\n",
@@ -231,6 +262,9 @@ static int tps65217_remove(struct i2c_client *client)
 {
 	struct tps65217 *tps = i2c_get_clientdata(client);
 
+	if (tps->write_status_off)
+		unregister_reboot_notifier(&tps->reboot_notifier);
+
 	mfd_remove_devices(tps->dev);
 
 	return 0;
diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 54b5458..4c80913 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -21,6 +21,7 @@
 #include <linux/i2c.h>
 #include <linux/regulator/driver.h>
 #include <linux/regulator/machine.h>
+#include <linux/notifier.h>
 
 /* TPS chip id list */
 #define TPS65217			0xF0
@@ -256,6 +257,9 @@ struct tps65217 {
 	struct regulator_desc desc[TPS65217_NUM_REGULATOR];
 	struct regulator_dev *rdev[TPS65217_NUM_REGULATOR];
 	struct regmap *regmap;
+
+	int write_status_off;
+	struct notifier_block reboot_notifier;
 };
 
 static inline struct tps65217 *dev_to_tps65217(struct device *dev)
-- 
1.7.5.4

