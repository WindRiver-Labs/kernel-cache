From bb4ff636f9db210c4716b49eb326432a78122c35 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Wed, 20 Nov 2013 17:05:19 -0600
Subject: [PATCH 0974/1587] CLK: TI: OMAP5: initialize IVA DPLL and associated
 output clocks

The IVA DPLL is not an essential DPLL for the functionality of a
bootloader and is usually not configured (e.g. older u-boots configure
it only if CONFIG_SYS_CLOCKS_ENABLE_ALL is enabled and u-boots newer
than 2014.01 do not even have an option), and this results in various
issues when trying to use a DSP or IVAHD, whose root clocks are sourced
from this DPLL. Initialize the IVA DPLL at boot time to avoid the
functional issues caused when using either of these devices if the
DPLL is not locked. The DPLL will automatically transition into a
low-power stop mode when the associated output clocks are not utilized
or gated automatically.

The reset values of the dividers H11 & H12 are identical to each other,
but are different at each OPP. The reset values also may not match a
specific OPP. So, the derived output clocks from the IVA DPLL have to
be initialized as well (OPP100 values chosen currently) to avoid
initializing these divider outputs to incorrect frequencies.

Signed-off-by: Suman Anna <s-anna@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 drivers/clk/ti/clk-54xx.c |   36 ++++++++++++++++++++++++++++++++++++
 1 files changed, 36 insertions(+), 0 deletions(-)

diff --git a/drivers/clk/ti/clk-54xx.c b/drivers/clk/ti/clk-54xx.c
index 5e18399..5ab6a1a 100644
--- a/drivers/clk/ti/clk-54xx.c
+++ b/drivers/clk/ti/clk-54xx.c
@@ -25,6 +25,18 @@
  */
 #define OMAP5_DPLL_USB_DEFFREQ				960000000
 
+/*
+ * OMAP5 IVA DPLL frequency settings. The recommended maximum DPLL locked
+ * frequency is 2330 MHz for OPP_LOW & OPP_NOM (value for DPLL_IVA_X2_CLK),
+ * so the DPLL_IVA_DEFFREQ is defined to be half of this value. Note that
+ * the value 1164.8 MHz is chosen so that the DPLL can be locked with proper
+ * M & N divider values. The output clock values are based on the OPP_NOM
+ * frequencies for DSP and IVAHD subsystems.
+ */
+#define OMAP5_DPLL_IVA_DEFFREQ				1164800000
+#define OMAP5_DSP_GCLK_NOMFREQ				466000000
+#define OMAP5_IVA_GCLK_NOMFREQ				388300000
+
 static struct ti_dt_clk omap54xx_clks[] = {
 	DT_CLK(NULL, "pad_clks_src_ck", "pad_clks_src_ck"),
 	DT_CLK(NULL, "pad_clks_ck", "pad_clks_ck"),
@@ -226,6 +238,7 @@ int __init omap5xxx_dt_clk_init(void)
 {
 	int rc;
 	struct clk *abe_dpll_ref, *abe_dpll, *sys_32k_ck, *usb_dpll;
+	struct clk *iva_dpll, *iva_h11x2_dpll, *iva_h12x2_dpll;
 
 	ti_dt_clocks_register(omap54xx_clks);
 
@@ -256,5 +269,28 @@ int __init omap5xxx_dt_clk_init(void)
 	if (rc)
 		pr_err("%s: failed to set USB_DPLL M2 OUT\n", __func__);
 
+	/*
+	 * Lock the IVA DPLL and its derivative clocks so that the DSP and
+	 * IVA processors are running at nominal operating points rather
+	 * than at a bypass clock rate or at a misconfigured output rate.
+	 */
+	iva_dpll = clk_get_sys(NULL, "dpll_iva_ck");
+	rc = clk_set_rate(iva_dpll, OMAP5_DPLL_IVA_DEFFREQ);
+	if (!rc) {
+		iva_h11x2_dpll = clk_get_sys(NULL, "dpll_iva_h11x2_ck");
+		rc = clk_set_rate(iva_h11x2_dpll, OMAP5_DSP_GCLK_NOMFREQ);
+		if (rc)
+			pr_err("%s: failed to configure IVA DPLL h11x2 divider!\n",
+			       __func__);
+
+		iva_h12x2_dpll = clk_get_sys(NULL, "dpll_iva_h12x2_ck");
+		rc = clk_set_rate(iva_h12x2_dpll, OMAP5_IVA_GCLK_NOMFREQ);
+		if (rc)
+			pr_err("%s: failed to configure IVA DPLL h12x2 divider!\n",
+			       __func__);
+	} else {
+		pr_err("%s: failed to configure IVA DPLL!\n", __func__);
+	}
+
 	return 0;
 }
-- 
1.7.5.4

