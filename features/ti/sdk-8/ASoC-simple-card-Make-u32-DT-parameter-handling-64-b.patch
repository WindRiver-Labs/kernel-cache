From 6e5c053e31d68153f6daad8c1edb8d3947774d3a Mon Sep 17 00:00:00 2001
From: Jyri Sarha <jsarha@ti.com>
Date: Fri, 13 Jun 2014 13:04:36 +0300
Subject: [PATCH] ASoC: simple-card: Make u32 DT parameter handling 64-bit
 proof

commit c7099eb1c19e60251e6725d6302354dfabae5303 upstream

Passing unsigned int pointers as u32 ponters may be dangerous on 64-bit
system.

Signed-off-by: Jyri Sarha <jsarha@ti.com>
Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/sound/soc/generic/simple-card.c b/sound/soc/generic/simple-card.c
index 2a1b1b5b5221..709f7054d611 100644
--- a/sound/soc/generic/simple-card.c
+++ b/sound/soc/generic/simple-card.c
@@ -63,6 +63,7 @@ asoc_simple_card_sub_parse_of(struct device_node *np,
 			      struct device_node **node)
 {
 	struct clk *clk;
+	u32 val;
 	int ret;
 
 	/*
@@ -99,10 +100,8 @@ asoc_simple_card_sub_parse_of(struct device_node *np,
 		}
 
 		dai->sysclk = clk_get_rate(clk);
-	} else if (of_property_read_bool(np, "system-clock-frequency")) {
-		of_property_read_u32(np,
-				     "system-clock-frequency",
-				     &dai->sysclk);
+	} else if (!of_property_read_u32(np, "system-clock-frequency", &val)) {
+		dai->sysclk = val;
 	} else {
 		clk = of_clk_get(*node, 0);
 		if (!IS_ERR(clk))
@@ -126,6 +125,9 @@ static int asoc_simple_card_parse_of(struct device_node *node,
 {
 	struct device_node *np;
 	char *name;
+	struct snd_soc_dai_link *dai_link = priv->snd_card.dai_link;
+	struct simple_dai_props *dai_props = priv->dai_props;
+	u32 val;
 	int ret;
 
 	/* get CPU/CODEC common format via simple-audio-card,format */
@@ -149,6 +151,32 @@ static int asoc_simple_card_parse_of(struct device_node *node,
 						  of_cpu);
 	if (ret < 0)
 		return ret;
+	/* Factor to mclk, used in hw_params() */
+	ret = of_property_read_u32(node, "simple-audio-card,mclk-fs", &val);
+	if (ret == 0)
+		priv->mclk_fs = val;
+
+	dev_dbg(dev, "New simple-card: %s\n", priv->snd_card.name ?
+		priv->snd_card.name : "");
+
+	if (multi) {
+		struct device_node *np = NULL;
+		int i;
+		for (i = 0; (np = of_get_next_child(node, np)); i++) {
+			dev_dbg(dev, "\tlink %d:\n", i);
+			ret = simple_card_dai_link_of(np, dev, dai_link + i,
+						      dai_props + i, false);
+			if (ret < 0) {
+				of_node_put(np);
+				return ret;
+			}
+		}
+	} else {
+		ret = simple_card_dai_link_of(node, dev, dai_link, dai_props,
+					      true);
+		if (ret < 0)
+			return ret;
+	}
 
 	/* CODEC sub-node */
 	ret = -EINVAL;
-- 
2.1.0

