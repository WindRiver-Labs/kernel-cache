From 2c79e26ff5d40bbb81af37eddb7962a558aa09fe Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Wed, 15 Oct 2014 16:36:31 -0500
Subject: [PATCH 1283/1587] rpmsg: rpc: fix a race condition resulting in
 blocked read thread

The rppc_read() uses the kernel low-level primitives - schedule(),
prepare_to_wait_exclusive() and finish_wait(), to put itself to
sleep when there are no pending messages to be read from the remote
processor. The current usage is incorrect and has an inherent race
condition between the user thread going to sleep and getting woken
up by a wakeup event. The wakeup event is triggered when either a
new message arrives or when the rpmsg-rpc device is being removed
as part of error recovery. This usually results in the user thread
never being woken up leading to a deadlock in userspace (most
common behavior would be an undelivered message to userspace
even after the message is placed on the read queue).

The user thread prepares to yield itself and invoke the scheduler
by using a wait queue only when there are no messages available.
The prepare_to_wait_exclusive() and wakeup_interruptible() operate
on the same wait queue and are protected by the wait queue's lock.
However, the user thread could have been marked for wakeup even
before it adds itself to the wait queue, with the wakeup event not
seeing any threads to wake up. This may result in the user thread
to be blocked forever if it never receives another new wakeup event
(unless a signal happens). The user thread, therefore, has to
recheck the condition (no pending buffers to be read or the file
descriptor is marked invalid due to device removal/reprobe during
an error recovery) before it can yield, eliminating the race
condition.

Reported-by: Pradeep Venkatasubbarao <pradeepv@ti.com>
Tested-by: Pradeep Venkatasubbarao <pradeepv@ti.com>
Signed-off-by: Ramsey Harris <ramsey@ti.com>
Signed-off-by: Suman Anna <s-anna@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 drivers/rpmsg/rpmsg_rpc.c |    4 +++-
 1 files changed, 3 insertions(+), 1 deletions(-)

diff --git a/drivers/rpmsg/rpmsg_rpc.c b/drivers/rpmsg/rpmsg_rpc.c
index e5aeb4d..3cff23d 100644
--- a/drivers/rpmsg/rpmsg_rpc.c
+++ b/drivers/rpmsg/rpmsg_rpc.c
@@ -718,7 +718,9 @@ static ssize_t rppc_read(struct file *filp, char __user *buf, size_t len,
 
 		prepare_to_wait_exclusive(&rpc->readq, &wait,
 					  TASK_INTERRUPTIBLE);
-		schedule();
+		if (skb_queue_empty(&rpc->queue) &&
+		    rpc->state != RPPC_STATE_STALE)
+			schedule();
 		finish_wait(&rpc->readq, &wait);
 		if (signal_pending(current))
 			return -ERESTARTSYS;
-- 
1.7.5.4

