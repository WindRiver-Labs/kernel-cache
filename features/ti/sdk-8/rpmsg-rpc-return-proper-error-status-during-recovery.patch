From b0d6fc87c6912f265a61c72375b67786ec0b0036 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Wed, 5 Nov 2014 17:04:44 -0600
Subject: [PATCH 1330/1587] rpmsg: rpc: return proper error status during
 recovery in read

An user thread can be blocked while waiting for new response
messages. The thread is unblocked either when a new message is
available for the thread to read or when the remote processor
has crashed and the rpmsg-rpc device has been removed and
recreated as part of the recovery process.

A special error number ENXIO is returned in the file operations
on the file descriptors for the rpmsg-rpc driver to notify the
user process that the underlying device is invalid due to a
crash of the remote processor. An incorrect error number of
EIO is being returned currently if the user thread blocked on
a read is woken up due to a recovery, fix the same to return
the correct value of -ENXIO so that the user process can take
an appropriate action.

Signed-off-by: Suman Anna <s-anna@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 drivers/rpmsg/rpmsg_rpc.c |    5 +++++
 1 files changed, 5 insertions(+), 0 deletions(-)

diff --git a/drivers/rpmsg/rpmsg_rpc.c b/drivers/rpmsg/rpmsg_rpc.c
index 0a7b582..79dabae 100644
--- a/drivers/rpmsg/rpmsg_rpc.c
+++ b/drivers/rpmsg/rpmsg_rpc.c
@@ -729,6 +729,11 @@ static ssize_t rppc_read(struct file *filp, char __user *buf, size_t len,
 		if (ret < 0)
 			return -ERESTARTSYS;
 
+		if (rpc->state == RPPC_STATE_STALE) {
+			mutex_unlock(&rpc->lock);
+			return -ENXIO;
+		}
+
 		/* make sure state is sane while we waited */
 		if (rpc->state != RPPC_STATE_CONNECTED) {
 			mutex_unlock(&rpc->lock);
-- 
1.7.5.4

