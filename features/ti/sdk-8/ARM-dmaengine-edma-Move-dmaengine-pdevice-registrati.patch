From 09e38ef42aa4faedfab12990b4329ec220e50d6a Mon Sep 17 00:00:00 2001
From: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date: Mon, 6 Oct 2014 17:46:46 +0530
Subject: [PATCH 1272/1587] ARM/dmaengine: edma: Move dmaengine pdevice
 registration to arm/common/edma.c

The platform device for the eDMA dmaengine driver should be created in the
arch/arm/common/edma.c driver and not by itself. This way we can avoid to
have extra (unconnected) logic in the edma dmaengine driver to create
correct number of devices (one or two) and also this way we can make sure
that the platform device for the dmaengine part is only registered when
the device is using edma. Currently the first device is registered without
unconditionally, and the dmaengine driver will fail since the platform does
not have support for eDMA.

Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 arch/arm/common/edma.c |   22 ++++++++++++++++++++++
 drivers/dma/edma.c     |   40 +---------------------------------------
 2 files changed, 23 insertions(+), 39 deletions(-)

diff --git a/arch/arm/common/edma.c b/arch/arm/common/edma.c
index 73d715bd..0eb9df8 100644
--- a/arch/arm/common/edma.c
+++ b/arch/arm/common/edma.c
@@ -31,6 +31,7 @@
 #include <linux/of_dma.h>
 #include <linux/of_irq.h>
 #include <linux/pm_runtime.h>
+#include <linux/dma-mapping.h>
 
 #include <linux/platform_data/edma.h>
 
@@ -1606,6 +1607,18 @@ static struct edma_soc_info *edma_setup_info_from_dt(struct device *dev,
 }
 #endif
 
+static const struct platform_device_info edma_dmaengine_dev[EDMA_MAX_CC] = {
+	{
+		.name = "edma-dma-engine",
+		.id = 0,
+		.dma_mask = DMA_BIT_MASK(32),
+	}, {
+		.name = "edma-dma-engine",
+		.id = 1,
+		.dma_mask = DMA_BIT_MASK(32),
+	},
+};
+
 static int edma_probe(struct platform_device *pdev)
 {
 	struct edma_soc_info	**info = pdev->dev.platform_data;
@@ -1623,6 +1636,7 @@ static int edma_probe(struct platform_device *pdev)
 	char			res_name[10];
 	struct device_node	*node = pdev->dev.of_node;
 	struct device		*dev = &pdev->dev;
+	struct platform_device	*dmaengine_pdev;
 	int			ret;
 
 	if (node) {
@@ -1793,6 +1807,14 @@ static int edma_probe(struct platform_device *pdev)
 			edma_write_array2(j, EDMA_DRAE, i, 1, 0x0);
 			edma_write_array(j, EDMA_QRAE, i, 0x0);
 		}
+
+		dmaengine_pdev = platform_device_register_full(
+							&edma_dmaengine_dev[j]);
+		if (IS_ERR(dmaengine_pdev))
+			dev_err(dev,
+				"device%d for dmaengine register failed (%ld)",
+				j, PTR_ERR(dmaengine_pdev));
+
 		edma_cc[j]->info = info[j];
 		arch_num_cc++;
 	}
diff --git a/drivers/dma/edma.c b/drivers/dma/edma.c
index bbac528..00f0a3b 100644
--- a/drivers/dma/edma.c
+++ b/drivers/dma/edma.c
@@ -1105,52 +1105,14 @@ bool edma_filter_fn(struct dma_chan *chan, void *param)
 }
 EXPORT_SYMBOL(edma_filter_fn);
 
-static struct platform_device *pdev0, *pdev1;
-
-static const struct platform_device_info edma_dev_info0 = {
-	.name = "edma-dma-engine",
-	.id = 0,
-	.dma_mask = DMA_BIT_MASK(32),
-};
-
-static const struct platform_device_info edma_dev_info1 = {
-	.name = "edma-dma-engine",
-	.id = 1,
-	.dma_mask = DMA_BIT_MASK(32),
-};
-
 static int edma_init(void)
 {
-	int ret = platform_driver_register(&edma_driver);
-
-	if (ret == 0) {
-		pdev0 = platform_device_register_full(&edma_dev_info0);
-		if (IS_ERR(pdev0)) {
-			platform_driver_unregister(&edma_driver);
-			ret = PTR_ERR(pdev0);
-			goto out;
-		}
-	}
-
-	if (EDMA_CTLRS == 2) {
-		pdev1 = platform_device_register_full(&edma_dev_info1);
-		if (IS_ERR(pdev1)) {
-			platform_driver_unregister(&edma_driver);
-			platform_device_unregister(pdev0);
-			ret = PTR_ERR(pdev1);
-		}
-	}
-
-out:
-	return ret;
+	return platform_driver_register(&edma_driver);
 }
 subsys_initcall(edma_init);
 
 static void __exit edma_exit(void)
 {
-	platform_device_unregister(pdev0);
-	if (pdev1)
-		platform_device_unregister(pdev1);
 	platform_driver_unregister(&edma_driver);
 }
 module_exit(edma_exit);
-- 
1.7.5.4

