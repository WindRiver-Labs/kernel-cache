From 9b3b28b769f3f39a3e8ffaa109418ef14497ca45 Mon Sep 17 00:00:00 2001
From: Roger Quadros <rogerq@ti.com>
Date: Fri, 28 Nov 2014 17:08:57 +0200
Subject: [PATCH 1464/1587] can: mark device as pm_runtime_irq_safe

When CONFIG_DEBUG_ATOMIC_SLEEP is enabled we get the below BUG trace
each time CAN interface is configured.

The problem is that networking core (rtnl_dump_ifinfo()) holds the
RCU read lock while calling  the CAN driver's c_can_get_berr_counter()
which calls pm_runtime_get_sync() which is not yet marked atomic safe.

The solution is to call pm_runtime_irq_safe() in the CAN driver.
At least for TI platforms that support CAN (AM33xx/AM43xx/DRA7) we are sure
that the runtime callbacks are IRQ safe. The CAN module's parent is OCP which
is most likely never runtime suspended due to other children like GPIO also
calling pm_runtime_irq_safe(). So we don't impact runtime power..

[   22.605856] BUG: sleeping function called from invalid context at drivers/base/power/runtime.c:953
[   22.615516] in_atomic(): 1, irqs_disabled(): 0, pid: 2279, name: ip
[   22.622231] CPU: 0 PID: 2279 Comm: ip Not tainted 3.14.25-02414-gc56aa19 #806
[   22.629854] Backtrace:
[   22.632498] [<c00121e4>] (dump_backtrace) from [<c00124e0>] (show_stack+0x18/0x1c)
[   22.640588]  r7:bf00147c r6:ecd8c018 r5:c0903514 r4:00000000
[   22.646652] [<c00124c8>] (show_stack) from [<c062c7b0>] (dump_stack+0x90/0xb8)
[   22.654382] [<c062c720>] (dump_stack) from [<c006b2a0>] (__might_sleep+0xd0/0x100)
[   22.662468]  r7:bf00147c r6:00000000 r5:00000004 r4:ecd8c000
[   22.668519] [<c006b1d0>] (__might_sleep) from [<c03b9ac0>] (__pm_runtime_resume+0x90/0xa0)
[   22.677358]  r4:ec96c210
[   22.680093] [<c03b9a30>] (__pm_runtime_resume) from [<bf0060e0>] (c_can_get_berr_counter+0x28/0x68 [c_can])
[   22.690495]  r7:bf00147c r6:00000000 r5:ecd8da9c r4:eccc2800
[   22.696561] [<bf0060b8>] (c_can_get_berr_counter [c_can]) from [<bf0006a4>] (can_fill_info+0x124/0x174 [can_dev])
[   22.707516]  r5:ece8a600 r4:eccc2800
[   22.711367] [<bf000580>] (can_fill_info [can_dev]) from [<c0570450>] (rtnl_fill_ifinfo+0x578/0x91c)
[   22.721028]  r6:ece8a600 r5:eb8c24b0 r4:eccc2800
[   22.725961] [<c056fed8>] (rtnl_fill_ifinfo) from [<c05711ec>] (rtnl_dump_ifinfo+0x10c/0x228)
[   22.734972]  r10:00000000 r9:ece8a600 r8:00000001 r7:00000000 r6:ecfd5234 r5:eccc2800
[   22.743340]  r4:00000000
[   22.746054] [<c05710e0>] (rtnl_dump_ifinfo) from [<c057c598>] (netlink_dump+0xa4/0x1d8)
[   22.754613]  r10:00000000 r9:ecfd5234 r8:ecf53c80 r7:ecd8dd24 r6:ecfd5234 r5:ece8a600
[   22.762983]  r4:ecfd5000
[   22.765684] [<c057c4f4>] (netlink_dump) from [<c057d56c>] (__netlink_dump_start+0x110/0x16c)
[   22.774694]  r6:00000000 r5:ecc7e840 r4:ecfd5000
[   22.779638] [<c057d45c>] (__netlink_dump_start) from [<c05716dc>] (rtnetlink_rcv_msg+0x118/0x210)
[   22.789110]  r9:00000000 r8:c05710e0 r7:00000000 r6:ecc7e840 r5:ecf53c80 r4:00000484
[   22.797382] [<c05715c4>] (rtnetlink_rcv_msg) from [<c057efd8>] (netlink_rcv_skb+0xa8/0xc4)
[   22.806214]  r8:ecd8dd9c r7:ecc7e840 r6:ecc7e840 r5:c05715c4 r4:ecf53c80
[   22.813387] [<c057ef30>] (netlink_rcv_skb) from [<c05715b4>] (rtnetlink_rcv+0x24/0x34)
[   22.821843]  r7:ecc7e840 r6:ecfd5000 r5:0000001c r4:ecc7e840
[   22.827894] [<c0571590>] (rtnetlink_rcv) from [<c057e910>] (netlink_unicast+0x15c/0x220)
[   22.836532]  r5:0000001c r4:ec8fd000
[   22.840365] [<c057e7b4>] (netlink_unicast) from [<c057ed5c>] (netlink_sendmsg+0x2c8/0x3a0)
[   22.849194]  r9:00000000 r8:ecc7e840 r7:ecfd5000 r6:ecd8de68 r5:00000000 r4:ecd8ded4
[   22.857482] [<c057ea94>] (netlink_sendmsg) from [<c05496ec>] (sock_sendmsg+0x8c/0xb0)
[   22.865846]  r10:00000000 r9:ecd8c000 r8:c000ec44 r7:be8d46bc r6:ec137580 r5:ecaaa4c0
[   22.874219]  r4:c057ea94
[   22.876921] [<c0549660>] (sock_sendmsg) from [<c054ba4c>] (SyS_sendto+0xbc/0xe0)
[   22.884821]  r5:00000000 r4:0000001c
[   22.888649] [<c054b990>] (SyS_sendto) from [<c054ba90>] (SyS_send+0x20/0x28)
[   22.896162]  r7:00000121 r6:0004961c r5:00045344 r4:0000001c
[   22.902234] [<c054ba70>] (SyS_send) from [<c000eac0>] (ret_fast_syscall+0x0/0x30)

Signed-off-by: Roger Quadros <rogerq@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 drivers/net/can/c_can/c_can.c |    4 +++-
 1 files changed, 3 insertions(+), 1 deletions(-)

diff --git a/drivers/net/can/c_can/c_can.c b/drivers/net/can/c_can/c_can.c
index d7e6ac3..66431fac 100644
--- a/drivers/net/can/c_can/c_can.c
+++ b/drivers/net/can/c_can/c_can.c
@@ -213,8 +213,10 @@ static const struct can_bittiming_const c_can_bittiming_const = {
 
 static inline void c_can_pm_runtime_enable(const struct c_can_priv *priv)
 {
-	if (priv->device)
+	if (priv->device) {
 		pm_runtime_enable(priv->device);
+		pm_runtime_irq_safe(priv->device);
+	}
 }
 
 static inline void c_can_pm_runtime_disable(const struct c_can_priv *priv)
-- 
1.7.5.4

