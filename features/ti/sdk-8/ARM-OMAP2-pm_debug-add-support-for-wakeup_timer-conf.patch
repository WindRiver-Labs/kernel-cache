From 79d0fd39586a6a08cccec91fc2fd8878cca7d996 Mon Sep 17 00:00:00 2001
From: Nishanth Menon <nm@ti.com>
Date: Thu, 5 Sep 2013 14:15:11 +0530
Subject: [PATCH 0849/1587] ARM: OMAP2+ / pm_debug: add support for
 wakeup_timer configuration

Add support for:
/sys/kernel/debug/pm_debug/wakeup_timer_seconds
/sys/kernel/debug/pm_debug/wakeup_timer_milliseconds

These allow for local interrupt source for testing purposes

NOTE: the timer is setup at suspend path, and the depth of the suspend
path *might* interfere with wakeup capability, for example, if very
short time period is provided, the timer may trigger before even the
kernel hits no_suspend_irq path, resulting in timer event being lost and
seemingly system in hung state.

Signed-off-by: Nishanth Menon <nm@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 arch/arm/mach-omap2/pm-debug.c |   12 ++++++++++++
 arch/arm/mach-omap2/pm.h       |    5 +++++
 arch/arm/mach-omap2/timer.c    |   28 +++++++++++++++++++++++++++-
 3 files changed, 44 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mach-omap2/pm-debug.c b/arch/arm/mach-omap2/pm-debug.c
index 0b33986..b3f5675 100644
--- a/arch/arm/mach-omap2/pm-debug.c
+++ b/arch/arm/mach-omap2/pm-debug.c
@@ -39,6 +39,10 @@
 
 u32 enable_off_mode;
 
+u32 wakeup_timer_seconds;
+u32 wakeup_timer_milliseconds;
+
+
 #ifdef CONFIG_DEBUG_FS
 #include <linux/debugfs.h>
 #include <linux/seq_file.h>
@@ -273,6 +277,14 @@ static int __init pm_dbg_init(void)
 
 	(void) debugfs_create_file("enable_off_mode", S_IRUGO | S_IWUSR, d,
 				   &enable_off_mode, &pm_dbg_option_fops);
+
+	(void) debugfs_create_file("wakeup_timer_seconds", S_IRUGO | S_IWUSR, d,
+				   &wakeup_timer_seconds, &pm_dbg_option_fops);
+	(void) debugfs_create_file("wakeup_timer_milliseconds",
+				   S_IRUGO | S_IWUSR, d,
+				   &wakeup_timer_milliseconds,
+				   &pm_dbg_option_fops);
+
 	pm_dbg_init_done = 1;
 
 	return 0;
diff --git a/arch/arm/mach-omap2/pm.h b/arch/arm/mach-omap2/pm.h
index b0e1e0f..4293f7f 100644
--- a/arch/arm/mach-omap2/pm.h
+++ b/arch/arm/mach-omap2/pm.h
@@ -15,6 +15,11 @@
 
 #include "powerdomain.h"
 
+#ifdef CONFIG_PM_DEBUG
+extern u32 wakeup_timer_seconds;
+extern u32 wakeup_timer_milliseconds;
+#endif
+
 #ifdef CONFIG_CPU_IDLE
 extern int __init omap3_idle_init(void);
 extern int __init omap4_idle_init(void);
diff --git a/arch/arm/mach-omap2/timer.c b/arch/arm/mach-omap2/timer.c
index b62de9f..39597d0 100644
--- a/arch/arm/mach-omap2/timer.c
+++ b/arch/arm/mach-omap2/timer.c
@@ -55,6 +55,7 @@
 #include "soc.h"
 #include "common.h"
 #include "powerdomain.h"
+#include "pm.h"
 #include "omap-secure.h"
 
 #define REALTIME_COUNTER_BASE				0x48243200
@@ -121,8 +122,33 @@ static void omap2_gp_timer_set_mode(enum clock_event_mode mode,
 		break;
 	case CLOCK_EVT_MODE_ONESHOT:
 		break;
-	case CLOCK_EVT_MODE_UNUSED:
 	case CLOCK_EVT_MODE_SHUTDOWN:
+#ifdef CONFIG_PM_DEBUG
+		if (wakeup_timer_seconds || wakeup_timer_milliseconds) {
+			u32 tick_rate, cycles;
+
+			tick_rate = clkev.rate;
+			cycles = tick_rate * wakeup_timer_seconds;
+			cycles += DIV_ROUND_UP(tick_rate *
+					       wakeup_timer_milliseconds,
+					       1000);
+
+			__omap_dm_timer_write(&clkev, OMAP_TIMER_LOAD_REG,
+					      0xffffffff - cycles,
+					      OMAP_TIMER_POSTED);
+			__omap_dm_timer_load_start(&clkev,
+						   OMAP_TIMER_CTRL_AR |
+						   OMAP_TIMER_CTRL_ST,
+						   0xffffffff - cycles,
+						   OMAP_TIMER_POSTED);
+
+			pr_info("Resume timer @%u.%03uSecs(%d ticks @ %d Hz)\n",
+				wakeup_timer_seconds, wakeup_timer_milliseconds,
+				cycles, tick_rate);
+		}
+#endif
+		break;
+	case CLOCK_EVT_MODE_UNUSED:
 	case CLOCK_EVT_MODE_RESUME:
 		break;
 	}
-- 
1.7.5.4

