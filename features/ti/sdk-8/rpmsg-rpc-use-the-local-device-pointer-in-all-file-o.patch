From f68ca1e530e507883d6f173f7aba8f2a67c00702 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Fri, 7 Nov 2014 14:14:09 -0600
Subject: [PATCH 1334/1587] rpmsg: rpc: use the local device pointer in all
 file operations

The remote processor recovery process includes the deletion and
recreation of an rpmsg-rpc device. The representative rppc_device
structure is retained and reused if there are any open applications
using the exposed character device. The underlying device pointer
for a rppc_device is though deleted and recreated and can become
NULL at any point if an error recovery happens. So, switch to using
the local reference device pointer in all the fop functions for
the exposed character device.

Signed-off-by: Suman Anna <s-anna@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 drivers/rpmsg/rpmsg_rpc.c        |   47 ++++++++++++++++++-------------------
 drivers/rpmsg/rpmsg_rpc_dmabuf.c |   15 +++++------
 2 files changed, 30 insertions(+), 32 deletions(-)

diff --git a/drivers/rpmsg/rpmsg_rpc.c b/drivers/rpmsg/rpmsg_rpc.c
index ff47b58..efb725f 100644
--- a/drivers/rpmsg/rpmsg_rpc.c
+++ b/drivers/rpmsg/rpmsg_rpc.c
@@ -74,7 +74,7 @@ phys_addr_t rppc_local_to_remote_da(struct rppc_instance *rpc, phys_addr_t pa)
 	struct rproc *rproc;
 	u64 da;
 	phys_addr_t rda;
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 
 	if (mutex_lock_interruptible(&rpc->rppcdev->lock))
 		return -EINTR;
@@ -106,7 +106,7 @@ static void rppc_print_msg(struct rppc_instance *rpc, char *prefix,
 	struct rppc_query_function *info = NULL;
 	struct rppc_packet *packet = NULL;
 	struct rppc_param_data *param = NULL;
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 	u32 i = 0, paramsz = sizeof(*param);
 
 	dev_dbg(dev, "%s HDR: msg_type = %d msg_len = %d\n",
@@ -162,7 +162,7 @@ struct rppc_function *rppc_find_fxn(struct rppc_instance *rpc, u16 msg_id)
 {
 	struct rppc_function *function = NULL;
 	struct rppc_function_list *pos, *n;
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 
 	mutex_lock(&rpc->lock);
 	list_for_each_entry_safe(pos, n, &rpc->fxn_list, list) {
@@ -184,7 +184,7 @@ static int rppc_add_fxn(struct rppc_instance *rpc,
 				struct rppc_function *function, u16 msg_id)
 {
 	struct rppc_function_list *fxn = NULL;
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 
 	fxn = kzalloc(sizeof(*fxn), GFP_KERNEL);
 	if (!fxn) {
@@ -206,7 +206,7 @@ static int rppc_add_fxn(struct rppc_instance *rpc,
 static
 void rppc_handle_create_resp(struct rppc_instance *rpc, char *data, int len)
 {
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 	struct rppc_msg_header *hdr = (struct rppc_msg_header *)data;
 	struct rppc_instance_handle *hdl;
 	u32 exp_len = sizeof(*hdl) + sizeof(*hdr);
@@ -238,7 +238,7 @@ void rppc_handle_create_resp(struct rppc_instance *rpc, char *data, int len)
 static
 void rppc_handle_delete_resp(struct rppc_instance *rpc, char *data, int len)
 {
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 	struct rppc_msg_header *hdr = (struct rppc_msg_header *)data;
 	struct rppc_instance_handle *hdl;
 	u32 exp_len = sizeof(*hdl) + sizeof(*hdr);
@@ -273,7 +273,7 @@ void rppc_handle_delete_resp(struct rppc_instance *rpc, char *data, int len)
  */
 static void rppc_handle_fxn_resp(struct rppc_instance *rpc, char *data, int len)
 {
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 	struct rppc_msg_header *hdr = (struct rppc_msg_header *)data;
 	struct sk_buff *skb;
 	char *skbdata;
@@ -304,7 +304,7 @@ static void rppc_cb(struct rpmsg_channel *rpdev,
 {
 	struct rppc_msg_header *hdr = data;
 	struct rppc_instance *rpc = priv;
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 	char *buf = (char *)data;
 
 	dev_dbg(dev, "<== incoming msg src %d len %d msg_type %d msg_len %d\n",
@@ -349,7 +349,7 @@ static int rppc_connect(struct rppc_instance *rpc,
 	struct rppc_msg_header *hdr = (struct rppc_msg_header *)&kbuf[0];
 
 	if (rpc->state == RPPC_STATE_CONNECTED) {
-		dev_dbg(rppcdev->dev, "endpoint already connected\n");
+		dev_dbg(rpc->dev, "endpoint already connected\n");
 		return -EISCONN;
 	}
 
@@ -363,7 +363,7 @@ static int rppc_connect(struct rppc_instance *rpc,
 	ret = rpmsg_send_offchannel(rppcdev->rpdev, rpc->ept->addr,
 				    rppcdev->rpdev->dst, (char *)kbuf, len);
 	if (ret > 0) {
-		dev_err(rppcdev->dev, "rpmsg_send failed: %d\n", ret);
+		dev_err(rpc->dev, "rpmsg_send failed: %d\n", ret);
 		return ret;
 	}
 
@@ -376,7 +376,7 @@ static int rppc_connect(struct rppc_instance *rpc,
 		return -ENXIO;
 
 	if (ret > 0) {
-		dev_err(rppcdev->dev, "premature wakeup: %d\n", ret);
+		dev_err(rpc->dev, "premature wakeup: %d\n", ret);
 		return -EIO;
 	}
 
@@ -402,12 +402,12 @@ static void rppc_disconnect(struct rppc_instance *rpc)
 	handle->status = 0;
 	len = sizeof(struct rppc_msg_header) + hdr->msg_len;
 
-	dev_dbg(rppcdev->dev, "disconnecting from RPC service at %d\n",
+	dev_dbg(rpc->dev, "disconnecting from RPC service at %d\n",
 		rpc->dst);
 	ret = rpmsg_send_offchannel(rppcdev->rpdev, rpc->ept->addr,
 					rppcdev->rpdev->dst, kbuf, len);
 	if (ret)
-		dev_err(rppcdev->dev, "rpmsg_send failed: %d\n", ret);
+		dev_err(rpc->dev, "rpmsg_send failed: %d\n", ret);
 
 	/*
 	 * TODO: should we wait for a message to come back?
@@ -574,7 +574,7 @@ static int rppc_open(struct inode *inode, struct file *filp)
 	rpc->ept = rpmsg_create_ept(rppcdev->rpdev, rppc_cb, rpc,
 								RPMSG_ADDR_ANY);
 	if (!rpc->ept) {
-		dev_err(rppcdev->dev, "create ept failed\n");
+		dev_err(rpc->dev, "create ept failed\n");
 		put_device(rpc->dev);
 		kfree(rpc);
 		return -ENOMEM;
@@ -585,7 +585,7 @@ static int rppc_open(struct inode *inode, struct file *filp)
 	list_add(&rpc->list, &rppcdev->instances);
 	mutex_unlock(&rppcdev->lock);
 
-	dev_dbg(rppcdev->dev, "local addr assigned: 0x%x\n", rpc->ept->addr);
+	dev_dbg(rpc->dev, "local addr assigned: 0x%x\n", rpc->ept->addr);
 
 	return 0;
 }
@@ -604,7 +604,7 @@ static int rppc_release(struct inode *inode, struct file *filp)
 	struct rppc_device *rppcdev = rpc->rppcdev;
 	struct sk_buff *skb = NULL;
 
-	dev_dbg(rppcdev->dev, "releasing Instance %p, in state %d\n", rpc,
+	dev_dbg(rpc->dev, "releasing Instance %p, in state %d\n", rpc,
 		rpc->state);
 
 	if (rpc->state != RPPC_STATE_STALE) {
@@ -631,9 +631,9 @@ static int rppc_release(struct inode *inode, struct file *filp)
 	list_del(&rpc->list);
 	mutex_unlock(&rppcdev->lock);
 
-	dev_dbg(rppcdev->dev, "instance %p has been deleted!\n", rpc);
+	dev_dbg(rpc->dev, "instance %p has been deleted!\n", rpc);
 	if (list_empty(&rppcdev->instances))
-		dev_dbg(rppcdev->dev, "all instances have been removed!\n");
+		dev_dbg(rpc->dev, "all instances have been removed!\n");
 
 	put_device(rpc->dev);
 	kfree(rpc);
@@ -643,11 +643,10 @@ static int rppc_release(struct inode *inode, struct file *filp)
 static long rppc_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 {
 	struct rppc_instance *rpc = filp->private_data;
-	struct rppc_device *rppcdev = rpc->rppcdev;
 	struct rppc_create_instance connect;
 	int ret = 0;
 
-	dev_dbg(rppcdev->dev, "%s: cmd %d, arg 0x%lx\n", __func__, cmd, arg);
+	dev_dbg(rpc->dev, "%s: cmd %d, arg 0x%lx\n", __func__, cmd, arg);
 
 	if (_IOC_TYPE(cmd) != RPPC_IOC_MAGIC)
 		return -ENOTTY;
@@ -660,7 +659,7 @@ static long rppc_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 		ret = copy_from_user(&connect, (char __user *)arg,
 							sizeof(connect));
 		if (ret) {
-			dev_err(rppcdev->dev, "%s: %d: copy_from_user fail: %d\n",
+			dev_err(rpc->dev, "%s: %d: copy_from_user fail: %d\n",
 				__func__, _IOC_NR(cmd), ret);
 			ret = -EFAULT;
 		} else {
@@ -675,7 +674,7 @@ static long rppc_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 		ret = rppc_unregister_buffers(rpc, arg);
 		break;
 	default:
-		dev_err(rppcdev->dev, "unhandled ioctl cmd: %d\n", cmd);
+		dev_err(rpc->dev, "unhandled ioctl cmd: %d\n", cmd);
 		break;
 	}
 
@@ -778,7 +777,7 @@ static ssize_t rppc_read(struct file *filp, char __user *buf, size_t len,
 	returned.status = packet->result;
 
 	if (copy_to_user(buf, &returned, use)) {
-		dev_err(rpc->rppcdev->dev, "%s: copy_to_user fail\n", __func__);
+		dev_err(rpc->dev, "%s: copy_to_user fail\n", __func__);
 		ret = -EFAULT;
 	} else {
 		ret = use;
@@ -796,7 +795,7 @@ static ssize_t rppc_write(struct file *filp, const char __user *ubuf,
 {
 	struct rppc_instance *rpc = filp->private_data;
 	struct rppc_device *rppcdev = rpc->rppcdev;
-	struct device *dev = rppcdev->dev;
+	struct device *dev = rpc->dev;
 	struct rppc_msg_header *hdr = NULL;
 	struct rppc_function *function = NULL;
 	struct rppc_packet *packet = NULL;
diff --git a/drivers/rpmsg/rpmsg_rpc_dmabuf.c b/drivers/rpmsg/rpmsg_rpc_dmabuf.c
index 2da48c4..39b8221 100644
--- a/drivers/rpmsg/rpmsg_rpc_dmabuf.c
+++ b/drivers/rpmsg/rpmsg_rpc_dmabuf.c
@@ -112,7 +112,6 @@ static inline long rppc_recalc_off(phys_addr_t lpa, long uoff)
 struct rppc_dma_buf *rppc_alloc_dmabuf(struct rppc_instance *rpc, int fd,
 					bool autoreg)
 {
-	struct rppc_device *rppcdev = rpc->rppcdev;
 	struct rppc_dma_buf *dma;
 	void *ret;
 	int id;
@@ -129,7 +128,7 @@ struct rppc_dma_buf *rppc_alloc_dmabuf(struct rppc_instance *rpc, int fd,
 		goto free_dma;
 	}
 
-	dma->attach = dma_buf_attach(dma->buf, rppcdev->dev);
+	dma->attach = dma_buf_attach(dma->buf, rpc->dev);
 	if (IS_ERR(dma->attach)) {
 		ret = dma->attach;
 		goto put_buf;
@@ -272,14 +271,14 @@ struct rppc_dma_buf *rppc_find_dmabuf(struct rppc_instance *rpc, int fd)
 	struct rppc_dma_buf *node = NULL;
 	void *data = (void *)fd;
 
-	dev_dbg(rpc->rppcdev->dev, "looking for fd %u\n", fd);
+	dev_dbg(rpc->dev, "looking for fd %u\n", fd);
 
 	mutex_lock(&rpc->lock);
 	node = (struct rppc_dma_buf *)
 			idr_for_each(&rpc->dma_idr, find_dma_by_fd, data);
 	mutex_unlock(&rpc->lock);
 
-	dev_dbg(rpc->rppcdev->dev, "returning node %p for fd %u\n",
+	dev_dbg(rpc->dev, "returning node %p for fd %u\n",
 		node, fd);
 
 	return node;
@@ -315,7 +314,7 @@ static int rppc_map_page(struct rppc_instance *rpc, int fd, u32 offset,
 	uint32_t pg_offset;
 	unsigned long pg_num;
 	size_t begin, end = PAGE_SIZE;
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 
 	if (!base_ptr || !dmabuf)
 		return -EINVAL;
@@ -378,7 +377,7 @@ static void rppc_unmap_page(struct rppc_instance *rpc, u32 offset,
 	uint32_t pg_offset;
 	unsigned long pg_num;
 	size_t begin, end = PAGE_SIZE;
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 
 	if (!base_ptr || !dmabuf)
 		return;
@@ -424,7 +423,7 @@ phys_addr_t rppc_buffer_lookup(struct rppc_instance *rpc, virt_addr_t uva,
 {
 	phys_addr_t lpa = 0, rda = 0;
 	long uoff = uva - buva;
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 	struct rppc_dma_buf *buf;
 
 	dev_dbg(dev, "buva = %p uva = %p offset = %ld [0x%016lx] fd = %d\n",
@@ -477,7 +476,7 @@ int rppc_xlate_buffers(struct rppc_instance *rpc, struct rppc_function *func,
 {
 	uint8_t *base_ptr = NULL;
 	struct dma_buf *dbuf = NULL;
-	struct device *dev = rpc->rppcdev->dev;
+	struct device *dev = rpc->dev;
 	uint32_t ptr_idx, pri_offset, sec_offset, offset, pg_offset, size;
 	int i, limit, inc = 1;
 	virt_addr_t kva, uva, buva;
-- 
1.7.5.4

