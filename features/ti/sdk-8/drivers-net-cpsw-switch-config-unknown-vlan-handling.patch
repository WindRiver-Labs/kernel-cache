From 2e72b00e7129f55cade504baf5a4245ac268eb1b Mon Sep 17 00:00:00 2001
From: Mugunthan V N <mugunthanvnm@ti.com>
Date: Tue, 2 Sep 2014 18:34:20 +0530
Subject: [PATCH 1116/1587] drivers: net: cpsw: switch-config: unknown vlan
 handling

Currently only known VLANs are handled inside the switch, when an
unknown VLAN is received the switch will drop the packets. This
ioctl allows user to subscribe the ports for unknown VLAN ids, then
switch will start forwarding unknown VLAN packets as configured by
the user. Additional features of the unknown vlan handling of the
switch other than port forwarding are untag on egress, registered
and unregistered multicast of the unknown VLAN ids

Signed-off-by: Mugunthan V N <mugunthanvnm@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 drivers/net/ethernet/ti/cpsw.c         |   26 ++++++++++++++++++++++++--
 include/uapi/linux/net_switch_config.h |    5 +++++
 2 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/ti/cpsw.c b/drivers/net/ethernet/ti/cpsw.c
index 291c6e1..2538de9 100644
--- a/drivers/net/ethernet/ti/cpsw.c
+++ b/drivers/net/ethernet/ti/cpsw.c
@@ -1524,7 +1524,7 @@ static int cpsw_switch_config_ioctl(struct net_device *ndev,
 {
 	struct cpsw_priv *priv = netdev_priv(ndev);
 	struct net_switch_config config;
-	int ret = -EFAULT;
+	int ret = 0;
 
 	if (priv->data.dual_emac) {
 		dev_err(priv->dev, "CPSW not in switch mode\n");
@@ -1537,7 +1537,7 @@ static int cpsw_switch_config_ioctl(struct net_device *ndev,
 	 */
 
 	if (copy_from_user(&config, (ifrq->ifr_data), sizeof(config)))
-		return ret;
+		return -EFAULT;
 
 	if (config.vid > 4095) {
 		dev_err(priv->dev, "Invalid VLAN Arguments for cmd %d\n",
@@ -1621,6 +1621,28 @@ static int cpsw_switch_config_ioctl(struct net_device *ndev,
 		ret = copy_to_user(ifrq->ifr_data, &config, sizeof(config));
 		break;
 	}
+	case CONFIG_SWITCH_ADD_UNKNOWN_VLAN_INFO:
+		if ((config.unknown_vlan_member <= 7) &&
+		    (config.unknown_vlan_untag <= 7) &&
+		    (config.unknown_vlan_unreg_multi <= 7) &&
+		    (config.unknown_vlan_reg_multi <= 7)) {
+			cpsw_ale_control_set(priv->ale, 0,
+					     ALE_PORT_UNTAGGED_EGRESS,
+					     config.unknown_vlan_untag);
+			cpsw_ale_control_set(priv->ale, 0,
+					     ALE_PORT_UNKNOWN_REG_MCAST_FLOOD,
+					     config.unknown_vlan_reg_multi);
+			cpsw_ale_control_set(priv->ale, 0,
+					     ALE_PORT_UNKNOWN_MCAST_FLOOD,
+					     config.unknown_vlan_unreg_multi);
+			cpsw_ale_control_set(priv->ale, 0,
+					     ALE_PORT_UNKNOWN_VLAN_MEMBER,
+					     config.unknown_vlan_member);
+		} else {
+			dev_err(priv->dev, "Invalid Arguments\n");
+			ret = -EINVAL;
+		}
+		break;
 
 	default:
 		ret = -EOPNOTSUPP;
diff --git a/include/uapi/linux/net_switch_config.h b/include/uapi/linux/net_switch_config.h
index f3c0b11..afc64d9 100644
--- a/include/uapi/linux/net_switch_config.h
+++ b/include/uapi/linux/net_switch_config.h
@@ -28,6 +28,7 @@ enum {
 	CONFIG_SWITCH_DEL_VLAN,
 	CONFIG_SWITCH_SET_PORT_CONFIG,
 	CONFIG_SWITCH_GET_PORT_CONFIG,
+	CONFIG_SWITCH_ADD_UNKNOWN_VLAN_INFO,
 };
 
 struct net_switch_config {
@@ -40,6 +41,10 @@ struct net_switch_config {
 	unsigned char	untag_port;	/* Untag ports */
 	unsigned char	addr[6];
 	unsigned int	super;
+	unsigned char	unknown_vlan_member;
+	unsigned char	unknown_vlan_untag;
+	unsigned int	unknown_vlan_unreg_multi;
+	unsigned int	unknown_vlan_reg_multi;
 	struct ethtool_cmd ecmd;
 
 	unsigned int ret_type;   /* Return  Success/Failure */
-- 
1.7.5.4

