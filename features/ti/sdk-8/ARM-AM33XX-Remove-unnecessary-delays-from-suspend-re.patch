From 25d1079597505b54ae246d8fcb6a30d0d4088e78 Mon Sep 17 00:00:00 2001
From: Russ Dill <russ.dill@ti.com>
Date: Fri, 25 Jul 2014 17:52:43 -0500
Subject: [PATCH 0942/1587] ARM: AM33XX: Remove unnecessary delays from
 suspend/resume path

No delays are mentioned as being required in any of the TRM documentation.
Instead, wait for the EMIF to indicate that it is ready.

This is needed for am33xx CPU idle support, which is sensitive to return
to active status.

Signed-off-by: Russ Dill <russ.dill@ti.com>
Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 arch/arm/mach-omap2/sleep33xx.S |   28 +++++++++++-----------------
 1 files changed, 11 insertions(+), 17 deletions(-)

diff --git a/arch/arm/mach-omap2/sleep33xx.S b/arch/arm/mach-omap2/sleep33xx.S
index 3dd1b6b..2d84c69 100644
--- a/arch/arm/mach-omap2/sleep33xx.S
+++ b/arch/arm/mach-omap2/sleep33xx.S
@@ -30,6 +30,7 @@
 #define EMIF_POWER_MGMT_SELF_REFRESH_MODE			0x0200
 #define EMIF_POWER_MGMT_SELF_REFRESH_MODE_MASK			0x0700
 #define EMIF_POWER_MGMT_DELAY_PERIOD				0x1000
+#define EMIF_STATUS_READY					0x0004
 
 #define AM33XX_CM_CLKCTRL_MODULEMODE_DISABLE			0x0003
 #define AM33XX_CM_CLKCTRL_MODULEMODE_ENABLE			0x0002
@@ -116,11 +117,6 @@ ENTRY(am33xx_do_wfi)
 	ldr	r2, [r1, #0]
 
 
-	mov	r1, #EMIF_POWER_MGMT_DELAY_PERIOD	@ Wait for system
-wait_self_refresh:					@ to enter SR
-	subs	r1, r1, #1
-	bne	wait_self_refresh
-
 	/* Disable EMIF */
 	ldr	r1, virt_emif_clkctrl
 	ldr	r2, [r1]
@@ -204,6 +200,11 @@ wait_emif_enable:
 	ldr	r1, emif_pmcr_shdw_val
 	str	r1, [r0, #EMIF_POWER_MANAGEMENT_CTRL_SHDW]
 
+	/* Wait for EMIF to become ready */
+1:	ldr	r1, [r0, #EMIF_STATUS]
+	tst	r1, #EMIF_STATUS_READY
+	beq	1b
+
 	/*
 	 * Set SCTLR.C bit to allow data cache allocation
 	 */
@@ -212,12 +213,6 @@ wait_emif_enable:
 	mcr	p15, 0, r0, c1, c0, 0
 	isb
 
-	/* EMIF needs some time before read/write possible */
-	mov r0, #EMIF_POWER_MGMT_DELAY_PERIOD
-wait_abt:
-	subs   r0, r0, #1
-	bne wait_abt
-
 	/* Let the suspend code know about the abort */
 	mov	r0, #1
 	ldmfd	sp!, {r4 - r11, pc}	@ restore regs and return
@@ -281,16 +276,15 @@ wait_emif_enable1:
 	ldr	r1, emif_zqcfg_val
 	str	r1, [r0, #EMIF_SDRAM_OUTPUT_IMPEDANCE_CALIBRATION_CONFIG]
 
-	/* EMIF needs some time before read/write possible */
-	mov	r1, #EMIF_POWER_MGMT_DELAY_PERIOD
-wait_resume:
-	subs	r1, r1, #1
-	bne	wait_resume
-
 	/* All done.. so restore back enter into suspend configuration */
 	ldr	r1, emif_pmcr_val
 	str	r1, [r0, #EMIF_POWER_MANAGEMENT_CONTROL]
 
+	/* Wait for EMIF to become ready */
+1:	ldr	r1, [r0, #EMIF_STATUS]
+	tst	r1, #EMIF_STATUS_READY
+	beq	1b
+
 	/* We are back. Branch to the common CPU resume routine */
 	mov	r0, #0
 	ldr	pc, resume_addr
-- 
1.7.5.4

