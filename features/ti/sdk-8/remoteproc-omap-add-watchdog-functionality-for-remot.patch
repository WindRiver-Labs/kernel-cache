From 35b9ef409354ac3c7c6975bcf83b6735f8221d74 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Tue, 5 Aug 2014 12:04:40 -0500
Subject: [PATCH 1064/1587] remoteproc/omap: add watchdog functionality for
 remote processors

Remote processors can be stuck in a loop, and may not be recoverable
if they do not have a built-in watchdog. The watchdog implementation
for OMAP remote processors uses external gptimers that can be used
to interrupt both the Linux host as well as the remote processor.

Each remote processor is responsible for refreshing the timer during
normal behavior - during OS task scheduling or entering the idle loop
properly. During a watchdog condition (executing a tight loop causing
no scheduling), the host processor gets interrupts and schedules a
recovery for the corresponding remote processor. The remote processor
may also get interrupted to be able to print a back trace.

A menuconfig option has also been added to enable/disable the Watchdog
functionality, with the default as disabled.

Signed-off-by: Suman Anna <s-anna@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 arch/arm/mach-omap2/remoteproc.c              |   32 ++++++
 arch/arm/mach-omap2/remoteproc.h              |    9 ++
 drivers/remoteproc/Kconfig                    |   12 +++
 drivers/remoteproc/omap_remoteproc.c          |  130 ++++++++++++++++++++++--
 include/linux/platform_data/remoteproc-omap.h |    6 +
 5 files changed, 178 insertions(+), 11 deletions(-)

diff --git a/arch/arm/mach-omap2/remoteproc.c b/arch/arm/mach-omap2/remoteproc.c
index 6872633..c78f4ca 100644
--- a/arch/arm/mach-omap2/remoteproc.c
+++ b/arch/arm/mach-omap2/remoteproc.c
@@ -201,3 +201,35 @@ int omap_rproc_release_timer(struct omap_dm_timer *timer)
 {
 	return omap_dm_timer_free(timer);
 }
+
+/**
+ * omap_rproc_get_timer_irq - get the irq for a timer
+ * @timer - handle to a OMAP timer
+ *
+ * This function is used to get the irq associated with a timer, obtained
+ * using the request_timer ops. The function is called by the OMAP remoteproc
+ * driver to register a interrupt handler to handle watchdog events on the
+ * remote processor.
+ *
+ * Returns the irq id on success, otherwise a failure as returned by DMTimer API
+ */
+int omap_rproc_get_timer_irq(struct omap_dm_timer *timer)
+{
+	return omap_dm_timer_get_irq(timer);
+}
+
+/**
+ * omap_rproc_ack_timer_irq - acknowledge a timer irq
+ * @timer - handle to a OMAP timer
+ *
+ * This function is used to clear the irq associated with a timer, obtained
+ * using the request_timer ops. The function is called by the OMAP remoteproc
+ * driver upon a watchdog event on the remote processor to clear the interrupt
+ * status of the watchdog timer.
+ *
+ * Returns the irq id on success, otherwise a failure as returned by DMTimer API
+ */
+void omap_rproc_ack_timer_irq(struct omap_dm_timer *timer)
+{
+	omap_dm_timer_write_status(timer, OMAP_TIMER_INT_OVERFLOW);
+}
diff --git a/arch/arm/mach-omap2/remoteproc.h b/arch/arm/mach-omap2/remoteproc.h
index cbcbde7..2e88a0f 100644
--- a/arch/arm/mach-omap2/remoteproc.h
+++ b/arch/arm/mach-omap2/remoteproc.h
@@ -28,6 +28,8 @@ struct omap_dm_timer *omap_rproc_request_timer(struct device_node *np);
 int omap_rproc_release_timer(struct omap_dm_timer *timer);
 int omap_rproc_start_timer(struct omap_dm_timer *timer);
 int omap_rproc_stop_timer(struct omap_dm_timer *timer);
+int omap_rproc_get_timer_irq(struct omap_dm_timer *timer);
+void omap_rproc_ack_timer_irq(struct omap_dm_timer *timer);
 #else
 static inline int omap_rproc_device_enable(struct platform_device *pdev)
 {
@@ -59,6 +61,13 @@ static inline int omap_rproc_stop_timer(struct omap_dm_timer *timer)
 {
 	return -ENODEV;
 }
+
+static inline int omap_rproc_get_timer_irq(struct omap_dm_timer *timer)
+{
+	return -1;
+}
+
+static inline void omap_rproc_ack_timer_irq(struct omap_dm_timer *timer) { }
 #endif
 
 #endif
diff --git a/drivers/remoteproc/Kconfig b/drivers/remoteproc/Kconfig
index 450a1e8..8edc282 100644
--- a/drivers/remoteproc/Kconfig
+++ b/drivers/remoteproc/Kconfig
@@ -32,6 +32,18 @@ config OMAP_REMOTEPROC
 	  It's safe to say n here if you're not interested in multimedia
 	  offloading or just want a bare minimum kernel.
 
+config OMAP_REMOTEPROC_WATCHDOG
+	bool "OMAP remoteproc watchdog timer"
+	depends on OMAP_REMOTEPROC
+	default n
+	help
+	  Say Y here to enable watchdog timer for remote processors.
+
+	  This option controls the watchdog functionality for the remote
+	  processors in OMAP. Dedicated OMAP DMTimers are used by the remote
+	  processors and triggers the timer interrupt upon a watchdog
+	  detection.
+
 config STE_MODEM_RPROC
 	tristate "STE-Modem remoteproc support"
 	depends on HAS_DMA
diff --git a/drivers/remoteproc/omap_remoteproc.c b/drivers/remoteproc/omap_remoteproc.c
index bff6f10..da42f14 100644
--- a/drivers/remoteproc/omap_remoteproc.c
+++ b/drivers/remoteproc/omap_remoteproc.c
@@ -27,6 +27,7 @@
 #include <linux/of_device.h>
 #include <linux/platform_device.h>
 #include <linux/dma-mapping.h>
+#include <linux/interrupt.h>
 #include <linux/remoteproc.h>
 #include <linux/mailbox_client.h>
 #include <linux/omap-mailbox.h>
@@ -39,9 +40,11 @@
 /**
  * struct omap_rproc_timers_info - timers for the omap rproc
  * @odt: timer pointer
+ * @irq: timer irq
  */
 struct omap_rproc_timers_info {
 	struct omap_dm_timer *odt;
+	int irq;
 };
 
 /**
@@ -49,6 +52,7 @@ struct omap_rproc_timers_info {
  * @mbox: mailbox channel handle
  * @client: mailbox client to request the mailbox channel
  * @num_timers: number of rproc timer(s)
+ * @num_wd_timers: number of rproc watchdog timers
  * @timers: timer(s) info used by rproc
  * @rproc: rproc handle
  */
@@ -56,11 +60,60 @@ struct omap_rproc {
 	struct mbox_chan *mbox;
 	struct mbox_client client;
 	int num_timers;
+	int num_wd_timers;
 	struct omap_rproc_timers_info *timers;
 	struct rproc *rproc;
 };
 
 /**
+ * omap_rproc_watchdog_isr - Watchdog ISR handler for remoteproc device
+ * @irq: IRQ number associated with a watchdog timer
+ * @data: IRQ handler data
+ *
+ * This ISR routine executes the required necessary low-level code to
+ * acknowledge a watchdog timer interrupt. There can be multiple watchdog
+ * timers associated with a rproc (like IPUs which have 2 watchdog timers,
+ * one per Cortex M3/M4 core), so a lookup has to be performed to identify
+ * the timer to acknowledge its interrupt.
+ *
+ * The function also invokes rproc_report_crash to report the watchdog event
+ * to the remoteproc driver core, to trigger a recovery.
+ *
+ * Return: IRQ_HANDLED or IRQ_NONE
+ */
+static irqreturn_t omap_rproc_watchdog_isr(int irq, void *data)
+{
+	struct platform_device *pdev = data;
+	struct rproc *rproc = platform_get_drvdata(pdev);
+	struct omap_rproc *oproc = rproc->priv;
+	struct device *dev = &pdev->dev;
+	struct omap_rproc_pdata *pdata = dev->platform_data;
+	struct omap_rproc_timer_ops *timer_ops = pdata->timer_ops;
+	struct omap_rproc_timers_info *timers = oproc->timers;
+	struct omap_dm_timer *timer = NULL;
+	int num_timers = oproc->num_timers + oproc->num_wd_timers;
+	int i;
+
+	for (i = oproc->num_timers; i < num_timers; i++) {
+		if (timers[i].irq > 0 && irq == timers[i].irq) {
+			timer = timers[i].odt;
+			break;
+		}
+	}
+
+	if (!timer) {
+		dev_err(dev, "invalid timer\n");
+		return IRQ_NONE;
+	}
+
+	timer_ops->ack_timer_irq(timer);
+
+	rproc_report_crash(rproc, RPROC_WATCHDOG);
+
+	return IRQ_HANDLED;
+}
+
+/**
  * omap_rproc_enable_timers - enable the timers for a remoteproc
  * @pdev - the remoteproc platform device
  * @configure - boolean flag used to acquire and configure the timer handle
@@ -82,22 +135,29 @@ omap_rproc_enable_timers(struct platform_device *pdev, bool configure)
 	struct omap_rproc_timers_info *timers = oproc->timers;
 	struct device *dev = &pdev->dev;
 	struct device_node *np = NULL;
+	int num_timers = oproc->num_timers + oproc->num_wd_timers;
 
-	if (oproc->num_timers <= 0)
+	if (num_timers <= 0)
 		return 0;
 
 	if (!configure)
 		goto start_timers;
 
-	for (i = 0; i < oproc->num_timers; i++) {
-		np = of_parse_phandle(dev->of_node, "timers", i);
+	for (i = 0; i < num_timers; i++) {
+		if (i < oproc->num_timers)
+			np = of_parse_phandle(dev->of_node, "timers", i);
+		else
+			np = of_parse_phandle(dev->of_node, "watchdog-timers",
+					      (i - oproc->num_timers));
 		if (!np) {
 			ret = -ENXIO;
 			dev_err(dev, "device node lookup for timer at index %d failed: %d\n",
-				i, ret);
+				i < oproc->num_timers ? i :
+				i - oproc->num_timers, ret);
 			goto free_timers;
 		}
 
+		timers[i].irq = -1;
 		timers[i].odt = timer_ops->request_timer(np);
 		of_node_put(np);
 		if (IS_ERR(timers[i].odt)) {
@@ -106,17 +166,42 @@ omap_rproc_enable_timers(struct platform_device *pdev, bool configure)
 			ret = -EBUSY;
 			goto free_timers;
 		}
+
+		if (i >= oproc->num_timers) {
+			timers[i].irq = timer_ops->get_timer_irq(timers[i].odt);
+			if (timers[i].irq < 0) {
+				dev_err(dev, "get_irq for timer %p failed: %d\n",
+					np, timers[i].irq);
+				ret = -EBUSY;
+				goto free_timers;
+			}
+
+			ret = request_irq(timers[i].irq,
+					  omap_rproc_watchdog_isr, IRQF_SHARED,
+					  "rproc-wdt", pdev);
+			if (ret) {
+				dev_err(&pdev->dev, "error requesting irq for timer %p\n",
+					np);
+				timer_ops->release_timer(timers[i].odt);
+				timers[i].odt = NULL;
+				timers[i].irq = -1;
+				goto free_timers;
+			}
+		}
 	}
 
 start_timers:
-	for (i = 0; i < oproc->num_timers; i++)
+	for (i = 0; i < num_timers; i++)
 		timer_ops->start_timer(timers[i].odt);
 	return 0;
 
 free_timers:
 	while (i--) {
+		if (i >= oproc->num_timers)
+			free_irq(timers[i].irq, pdev);
 		timer_ops->release_timer(timers[i].odt);
 		timers[i].odt = NULL;
+		timers[i].irq = -1;
 	}
 
 	return ret;
@@ -141,15 +226,19 @@ omap_rproc_disable_timers(struct platform_device *pdev, bool configure)
 	struct omap_rproc_pdata *pdata = pdev->dev.platform_data;
 	struct omap_rproc_timer_ops *timer_ops = pdata->timer_ops;
 	struct omap_rproc_timers_info *timers = oproc->timers;
+	int num_timers = oproc->num_timers + oproc->num_wd_timers;
 
-	if (oproc->num_timers <= 0)
+	if (num_timers <= 0)
 		return 0;
 
-	for (i = 0; i < oproc->num_timers; i++) {
+	for (i = 0; i < num_timers; i++) {
 		timer_ops->stop_timer(timers[i].odt);
 		if (configure) {
+			if (i >= oproc->num_timers)
+				free_irq(timers[i].irq, pdev);
 			timer_ops->release_timer(timers[i].odt);
 			timers[i].odt = NULL;
+			timers[i].irq = -1;
 		}
 	}
 
@@ -353,6 +442,7 @@ static int omap_rproc_probe(struct platform_device *pdev)
 	struct omap_rproc *oproc;
 	struct rproc *rproc;
 	const char *firmware;
+	int num_timers;
 	int ret;
 
 	if (!np) {
@@ -411,16 +501,34 @@ static int omap_rproc_probe(struct platform_device *pdev)
 		}
 	}
 
-	if (oproc->num_timers) {
+#ifdef CONFIG_OMAP_REMOTEPROC_WATCHDOG
+	oproc->num_wd_timers = of_count_phandle_with_args(np, "watchdog-timers",
+							  NULL);
+	if (oproc->num_wd_timers <= 0) {
+		dev_dbg(&pdev->dev, "device does not have watchdog timers, status = %d\n",
+			oproc->num_wd_timers);
+		oproc->num_wd_timers = 0;
+	} else {
+		if (!timer_ops || !timer_ops->get_timer_irq ||
+		    !timer_ops->ack_timer_irq) {
+			dev_err(&pdev->dev, "device does not have required watchdog timer ops\n");
+			ret = -ENODEV;
+			goto free_rproc;
+		}
+	}
+#endif
+
+	if (oproc->num_timers || oproc->num_wd_timers) {
+		num_timers = oproc->num_timers + oproc->num_wd_timers;
 		oproc->timers = devm_kzalloc(&pdev->dev, sizeof(*oproc->timers)
-					     * oproc->num_timers, GFP_KERNEL);
+					     * num_timers, GFP_KERNEL);
 		if (!oproc->timers) {
 			ret = -ENOMEM;
 			goto free_rproc;
 		}
 
-		dev_dbg(&pdev->dev, "device has %d tick timers\n",
-			oproc->num_timers);
+		dev_dbg(&pdev->dev, "device has %d tick timers and %d watchdog timers\n",
+			oproc->num_timers, oproc->num_wd_timers);
 	}
 
 	platform_set_drvdata(pdev, rproc);
diff --git a/include/linux/platform_data/remoteproc-omap.h b/include/linux/platform_data/remoteproc-omap.h
index 164e05f..4384eb9 100644
--- a/include/linux/platform_data/remoteproc-omap.h
+++ b/include/linux/platform_data/remoteproc-omap.h
@@ -28,12 +28,18 @@ struct omap_dm_timer;
  * @release_timer: omap-specific handler for freeing a rproc timer
  * @start_timer: omap-specific handler for enabling a rproc timer
  * @stop_timer: omap-specific handler for disabling a rproc timer
+ * @get_timer_irq: handler to retrieve the irq id of a OMAP DMTimer
+ * @ack_timer_irq: handler to acknowledge the interrupt of a OMAP DMTimer
  */
 struct omap_rproc_timer_ops {
 	struct omap_dm_timer * (*request_timer)(struct device_node *np);
 	int (*release_timer)(struct omap_dm_timer *timer);
 	int (*start_timer)(struct omap_dm_timer *timer);
 	int (*stop_timer)(struct omap_dm_timer *timer);
+
+	/* watchdog timer specific ops */
+	int (*get_timer_irq)(struct omap_dm_timer *timer);
+	void (*ack_timer_irq)(struct omap_dm_timer *timer);
 };
 
 /*
-- 
1.7.5.4

