From 87addc40d4466e7048531549f4a44d9b47dc027b Mon Sep 17 00:00:00 2001
From: Tero Kristo <t-kristo@ti.com>
Date: Mon, 1 Sep 2014 12:37:42 +0300
Subject: [PATCH 1112/1587] clk: ti: fix clk_init retry logic with generic
 of_clk_init use

Adding support for using generic of_clk_init caused an issue with retrying
clock init, in such way that retry init was never attempted for failed
clocks. Fixed by exporting the retry init call into its own driver API,
and calling this after of_clk_init from low level IO init.

Fixes: e80e55ebbf2856614 ("clk: ti: change clock init to use generic of_clk_init")
Reported-by: Carlos Hernandez <ceh@ti.com>
Signed-off-by: Tero Kristo <t-kristo@ti.com>
Tested-by: Sekhar Nori <nsekhar@ti.com>
[zou: Original patch taken from
ti-sdk-am335x-evm-08.00.00.00-Linux-x86-Install.bin]
Signed-off-by: Cao Zou <cao.zou@windriver.com>
---
 arch/arm/mach-omap2/io.c |    2 ++
 drivers/clk/ti/clk.c     |   22 +++++++++++++++-------
 include/linux/clk/ti.h   |    1 +
 3 files changed, 18 insertions(+), 7 deletions(-)

diff --git a/arch/arm/mach-omap2/io.c b/arch/arm/mach-omap2/io.c
index 1d420ff..1f4d5fc 100644
--- a/arch/arm/mach-omap2/io.c
+++ b/arch/arm/mach-omap2/io.c
@@ -750,6 +750,8 @@ int __init omap_clk_init(void)
 
 	of_clk_init(NULL);
 
+	ti_dt_clk_init_retry();
+
 	ti_dt_clockdomains_setup();
 
 	ret = omap_clk_soc_init();
diff --git a/drivers/clk/ti/clk.c b/drivers/clk/ti/clk.c
index f7201d0..94e7893 100644
--- a/drivers/clk/ti/clk.c
+++ b/drivers/clk/ti/clk.c
@@ -146,8 +146,6 @@ void __iomem *ti_clk_get_reg_addr(struct device_node *node, int index)
 void ti_dt_clk_init_provider(struct device_node *parent, int index)
 {
 	struct device_node *clocks;
-	struct clk_init_item *retry;
-	struct clk_init_item *tmp;
 
 	/* get clocks for this parent */
 	clocks = of_get_child_by_name(parent, "clocks");
@@ -158,11 +156,21 @@ void ti_dt_clk_init_provider(struct device_node *parent, int index)
 
 	/* add clocks node info */
 	clocks_node_ptr[index] = clocks;
+}
 
-	list_for_each_entry_safe(retry, tmp, &retry_list, link) {
-		pr_debug("retry-init: %s\n", retry->node->name);
-		retry->func(retry->hw, retry->node);
-		list_del(&retry->link);
-		kfree(retry);
+void ti_dt_clk_init_retry(void)
+{
+	struct clk_init_item *retry;
+	struct clk_init_item *tmp;
+	int retries = 5;
+
+	while (!list_empty(&retry_list) && retries) {
+		list_for_each_entry_safe(retry, tmp, &retry_list, link) {
+			pr_debug("retry-init: %s\n", retry->node->name);
+			retry->func(retry->hw, retry->node);
+			list_del(&retry->link);
+			kfree(retry);
+		}
+		retries--;
 	}
 }
diff --git a/include/linux/clk/ti.h b/include/linux/clk/ti.h
index 7eaf665..1bd1fb5 100644
--- a/include/linux/clk/ti.h
+++ b/include/linux/clk/ti.h
@@ -293,6 +293,7 @@ void omap2xxx_clkt_vps_init(void);
 void __iomem *ti_clk_get_reg_addr(struct device_node *node, int index);
 void ti_dt_clocks_register(struct ti_dt_clk *oclks);
 void ti_dt_clk_init_provider(struct device_node *np, int index);
+void ti_dt_clk_init_retry(void);
 void ti_dt_clockdomains_setup(void);
 int ti_clk_retry_init(struct device_node *node, struct clk_hw *hw,
 		      ti_of_clk_init_cb_t func);
-- 
1.7.5.4

