From 1a31fc77ffd6af4aef43c61980319a9a666c9223 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Thu, 2 Sep 2010 03:06:34 -0700
Subject: [PATCH 2/8] preempt_rt: kgdboc: Fixup of the "BUG: sleeping function
 called from invalid context"

This patch converts the rt spin lock to the raw one to ensure the
kdb_printf() can be used in PREEMPT_RT. without this converting, there
will be the following calltraces:

BUG: sleeping function called from invalid context at kernel/rtmutex.c:684
pcnt: 1 0 in_atomic(): 1, irqs_disabled(): 1, pid: 9, name: sirq-tasklet/0
Call Trace:
[cf83dbb0] [c0007eac] show_stack+0x44/0x160 (unreliable)
[cf83dbe0] [c0031280] __might_sleep+0xe4/0x108
[cf83dbf0] [c03fb744] rt_spin_lock+0x38/0xac
[cf83dc00] [c0087acc] vkdb_printf+0x430/0x6e4
[cf83dc80] [c0087dd0] kdb_printf+0x50/0x60
[cf83dcc0] [c008c178] kdb_main_loop+0x118/0x8d8
[cf83dd30] [c008f238] kdb_stub+0x160/0x3ac
[cf83dd60] [c0085800] kgdb_handle_exception+0x2f0/0x618
[cf83ddf0] [c0011664] kgdb_handle_breakpoint+0x4c/0x7c
[cf83de00] [c000e574] program_check_exception+0xc4/0x6b8
[cf83de40] [c0010e4c] ret_from_except_full+0x0/0x4c
[cf83df00] [c00396e4] T.1393+0x34/0xc8
[cf83df50] [c0044790] run_ksoftirqd+0x158/0x27c
[cf83dfa0] [c005caec] kthread+0x7c/0x80
[cf83dff0] [c001062c] original_kernel_thread+0x4c/0x68

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 kernel/debug/kdb/kdb_io.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/kernel/debug/kdb/kdb_io.c b/kernel/debug/kdb/kdb_io.c
index 399dba6..9b23746 100644
--- a/kernel/debug/kdb/kdb_io.c
+++ b/kernel/debug/kdb/kdb_io.c
@@ -560,7 +560,7 @@ int vkdb_printf(const char *fmt, va_list ap)
 	char *cp, *cp2, *cphold = NULL, replaced_byte = ' ';
 	char *moreprompt = "more> ";
 	struct console *c = console_drivers;
-	static DEFINE_SPINLOCK(kdb_printf_lock);
+	static DEFINE_RAW_SPINLOCK(kdb_printf_lock);
 	unsigned long uninitialized_var(flags);
 
 	preempt_disable();
@@ -571,7 +571,7 @@ int vkdb_printf(const char *fmt, va_list ap)
 	 */
 	if (!KDB_STATE(PRINTF_LOCK)) {
 		KDB_STATE_SET(PRINTF_LOCK);
-		spin_lock_irqsave(&kdb_printf_lock, flags);
+		raw_spin_lock_irqsave(&kdb_printf_lock, flags);
 		got_printf_lock = 1;
 		atomic_inc(&kdb_event);
 	} else {
@@ -824,7 +824,7 @@ kdb_print_out:
 		console_loglevel = saved_loglevel;
 	if (KDB_STATE(PRINTF_LOCK) && got_printf_lock) {
 		got_printf_lock = 0;
-		spin_unlock_irqrestore(&kdb_printf_lock, flags);
+		raw_spin_unlock_irqrestore(&kdb_printf_lock, flags);
 		KDB_STATE_CLEAR(PRINTF_LOCK);
 		atomic_dec(&kdb_event);
 	} else {
-- 
1.8.4.93.g57e4c17

