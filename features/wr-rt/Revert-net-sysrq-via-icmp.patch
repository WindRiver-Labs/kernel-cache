From 833a8b7e3afcd860149abbc8b148755af54373eb Mon Sep 17 00:00:00 2001
From: Li Zhou <li.zhou@windriver.com>
Date: Wed, 6 Jul 2016 16:13:51 +0800
Subject: [PATCH] Revert "net: sysrq via icmp"

This reverts commit 9a7e5a44fbfc9294a05cedcb585c7dd4dce723f0.

Revert this feature (ping-sysrq.patch for rt kernel) for CVE-2016-3707:

The icmp_check_sysrq function in net/ipv4/icmp.c in the kernel.org
projects/rt patches for the Linux kernel, allows remote attackers
to execute SysRq commands via crafted ICMP Echo Request packets, as
demonstrated by a brute-force attack to discover a cookie, or an attack
that occurs after reading the local icmp_echo_sysrq file.

There is no fix for this at the time, so revert the feature's code as a
workaround till a sufficient alternative has been developed.

Signed-off-by: Li Zhou <li.zhou@windriver.com>
---
 Documentation/sysrq.txt    |   11 ++---------
 include/net/netns/ipv4.h   |    1 -
 net/ipv4/icmp.c            |   30 ------------------------------
 net/ipv4/sysctl_net_ipv4.c |    7 -------
 4 files changed, 2 insertions(+), 47 deletions(-)

diff --git a/Documentation/sysrq.txt b/Documentation/sysrq.txt
index 6964d0f..0e307c9 100644
--- a/Documentation/sysrq.txt
+++ b/Documentation/sysrq.txt
@@ -59,16 +59,9 @@ On PowerPC - Press 'ALT - Print Screen (or F13) - <command key>,
 On other - If you know of the key combos for other architectures, please
            let me know so I can add them to this section.
 
-On all -  write a character to /proc/sysrq-trigger, e.g.:
-		echo t > /proc/sysrq-trigger
-
-On all - Enable network SysRq by writing a cookie to icmp_echo_sysrq, e.g.
-		echo 0x01020304 >/proc/sys/net/ipv4/icmp_echo_sysrq
-	 Send an ICMP echo request with this pattern plus the particular
-	 SysRq command key. Example:
-		# ping -c1 -s57 -p0102030468
-	 will trigger the SysRq-H (help) command.
+On all -  write a character to /proc/sysrq-trigger.  e.g.:
 
+		echo t > /proc/sysrq-trigger
 
 *  What are the 'command' keys?
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/include/net/netns/ipv4.h b/include/net/netns/ipv4.h
index 8c98927..57c2da9 100644
--- a/include/net/netns/ipv4.h
+++ b/include/net/netns/ipv4.h
@@ -62,7 +62,6 @@ struct netns_ipv4 {
 
 	int sysctl_icmp_echo_ignore_all;
 	int sysctl_icmp_echo_ignore_broadcasts;
-	int sysctl_icmp_echo_sysrq;
 	int sysctl_icmp_ignore_bogus_error_responses;
 	int sysctl_icmp_ratelimit;
 	int sysctl_icmp_ratemask;
diff --git a/net/ipv4/icmp.c b/net/ipv4/icmp.c
index 33fa458..1e4aa83 100644
--- a/net/ipv4/icmp.c
+++ b/net/ipv4/icmp.c
@@ -69,7 +69,6 @@
 #include <linux/jiffies.h>
 #include <linux/kernel.h>
 #include <linux/fcntl.h>
-#include <linux/sysrq.h>
 #include <linux/socket.h>
 #include <linux/in.h>
 #include <linux/inet.h>
@@ -802,30 +801,6 @@ static void icmp_redirect(struct sk_buff *skb)
 }
 
 /*
- * 32bit and 64bit have different timestamp length, so we check for
- * the cookie at offset 20 and verify it is repeated at offset 50
- */
-#define CO_POS0		20
-#define CO_POS1		50
-#define CO_SIZE		sizeof(int)
-#define ICMP_SYSRQ_SIZE	57
-
-/*
- * We got a ICMP_SYSRQ_SIZE sized ping request. Check for the cookie
- * pattern and if it matches send the next byte as a trigger to sysrq.
- */
-static void icmp_check_sysrq(struct net *net, struct sk_buff *skb)
-{
-	int cookie = htonl(net->ipv4.sysctl_icmp_echo_sysrq);
-	char *p = skb->data;
-
-	if (!memcmp(&cookie, p + CO_POS0, CO_SIZE) &&
-	    !memcmp(&cookie, p + CO_POS1, CO_SIZE) &&
-	    p[CO_POS0 + CO_SIZE] == p[CO_POS1 + CO_SIZE])
-		handle_sysrq(p[CO_POS0 + CO_SIZE]);
-}
-
-/*
  *	Handle ICMP_ECHO ("ping") requests.
  *
  *	RFC 1122: 3.2.2.6 MUST have an echo server that answers ICMP echo
@@ -852,11 +827,6 @@ static void icmp_echo(struct sk_buff *skb)
 		icmp_param.data_len	   = skb->len;
 		icmp_param.head_len	   = sizeof(struct icmphdr);
 		icmp_reply(&icmp_param, skb);
-
-		if (skb->len == ICMP_SYSRQ_SIZE &&
-		    net->ipv4.sysctl_icmp_echo_sysrq) {
-			icmp_check_sysrq(net, skb);
-		}
 	}
 }
 
diff --git a/net/ipv4/sysctl_net_ipv4.c b/net/ipv4/sysctl_net_ipv4.c
index dd69fa6..44eba05 100644
--- a/net/ipv4/sysctl_net_ipv4.c
+++ b/net/ipv4/sysctl_net_ipv4.c
@@ -776,13 +776,6 @@ static struct ctl_table ipv4_net_table[] = {
 		.proc_handler	= proc_dointvec
 	},
 	{
-		.procname	= "icmp_echo_sysrq",
-		.data		= &init_net.ipv4.sysctl_icmp_echo_sysrq,
-		.maxlen		= sizeof(int),
-		.mode		= 0644,
-		.proc_handler	= proc_dointvec
-	},
-	{
 		.procname	= "icmp_ignore_bogus_error_responses",
 		.data		= &init_net.ipv4.sysctl_icmp_ignore_bogus_error_responses,
 		.maxlen		= sizeof(int),
-- 
1.7.5.4

