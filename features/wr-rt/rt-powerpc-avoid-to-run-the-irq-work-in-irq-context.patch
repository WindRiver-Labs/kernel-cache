From dfdbdc4b1c9deea9a6cba812d150293f3387e841 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 30 Oct 2013 13:36:50 +0800
Subject: [PATCH 1/2] rt, powerpc: avoid to run the irq work in irq context

For rt kernel, most of the irq handlers run in thread context, so
we also need to make sure that the irq work also run in thread context
in order to fix the call trace like the following. The patch
(x86-no-perf-irq-work-rt.patch) has made corresponding changes for
the x86 and common parts. This is just for the powerpc part.

  BUG: sleeping function called from invalid context at kernel/rtmutex.c:659
  in_atomic(): 1, irqs_disabled(): 1, pid: 625, name: ftrace_current_
  Preemption disabled at:[<  (null)>]   (null)

  CPU: 0 PID: 625 Comm: ftrace_current_ Not tainted 3.10.15-rt11+ #21
  Call Trace:
  [c7a9fcf0] [c0008d1c] show_stack+0xfc/0x1c0 (unreliable)
  [c7a9fd40] [c06ffe14] rt_spin_lock+0x34/0x90
  [c7a9fd50] [c0080498] __wake_up+0x38/0x70
  [c7a9fd70] [c0109268] __irq_work_run+0xc8/0x110
  [c7a9fd90] [c000ae58] timer_interrupt+0x238/0x330
  [c7a9fdc0] [c001188c] ret_from_except+0x0/0x18
  --- Exception: 901 at sub_preempt_count+0x14/0xe0
  LR = arch_irq_work_raise+0x50/0xa0
  [c7a9fe80] [ef830200] 0xef830200 (unreliable)
  [c7a9fe90] [c000abd0] arch_irq_work_raise+0x50/0xa0
  [c7a9fea0] [c01094b4] irq_work_queue+0x114/0x170
  [c7a9feb0] [c00ec6e0] ring_buffer_unlock_commit+0x150/0x190
  [c7a9fed0] [c00f3ff0] trace_buffer_unlock_commit+0x20/0x60
  [c7a9fef0] [c0002b84] ftrace_raw_event_sys_enter+0xe4/0xf0
  [c7a9ff20] [c00047b8] do_syscall_trace_enter+0x148/0x190
  [c7a9ff40] [c001136c] syscall_dotrace+0x5c/0xc8
  --- Exception: c00 at 0xff22570

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/powerpc/kernel/time.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/arch/powerpc/kernel/time.c b/arch/powerpc/kernel/time.c
index 5fc29ad..d18aaa4 100644
--- a/arch/powerpc/kernel/time.c
+++ b/arch/powerpc/kernel/time.c
@@ -522,10 +522,12 @@ void timer_interrupt(struct pt_regs * regs)
 
 	trace_timer_interrupt_entry(regs);
 
+#ifndef CONFIG_PREEMPT_RT_FULL
 	if (test_irq_work_pending()) {
 		clear_irq_work_pending();
 		irq_work_run();
 	}
+#endif
 
 	now = get_tb_or_rtc();
 	if (now >= *next_tb) {
-- 
1.8.4.93.g57e4c17

