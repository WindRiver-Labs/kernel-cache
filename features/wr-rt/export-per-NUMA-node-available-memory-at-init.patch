From e60da2e128ba0381921101e170be61de5425f95e Mon Sep 17 00:00:00 2001
From: Chris Friesen <chris.friesen@windriver.com>
Date: Mon, 16 Nov 2015 20:26:14 -0500
Subject: [PATCH] export per-NUMA-node available memory at init

In order to get a better idea of how much memory is available
for use by the system, we export the free memory as of immediately
after running mem_init.

Using this in the compute-huge.sh script should give more accurate
numbers for how much memory can be allocated to hugepages.

Signed-off-by: Chris Friesen <chris.friesen@windriver.com>
[VT: move field to end of struct to minimize alignment fallout issues;
 checked size of struct pglist_data for the following cases:
 (1) without "node_free_pages_at_init" member: 7552bytes; (2) with
 "node_free_pages_at_init" member in the middle of the struct (from
 original patch): 7552bytes;  (3) with "node_free_pages_at_init" member
 at the end of the struct: 7552bytes. Since it appears the struct
 won't blow through 8192 bytes, we should be OK wrt. size issues as
 well.]
Signed-off-by: Vu Tran <vu.tran@windriver.com>

diff --git a/arch/x86/mm/init_64.c b/arch/x86/mm/init_64.c
index b04e50262088..a848b29233c0 100644
--- a/arch/x86/mm/init_64.c
+++ b/arch/x86/mm/init_64.c
@@ -33,6 +33,7 @@
 #include <linux/nmi.h>
 #include <linux/gfp.h>
 #include <linux/kcore.h>
+#include <linux/vmstat.h>
 
 #include <asm/processor.h>
 #include <asm/bios_ebda.h>
@@ -1060,6 +1061,7 @@ void __init mem_init(void)
 {
 	long codesize, reservedpages, datasize, initsize;
 	unsigned long absent_pages;
+	int nid;
 
 	pci_iommu_alloc();
 
@@ -1082,6 +1084,12 @@ void __init mem_init(void)
 	kclist_add(&kcore_vsyscall, (void *)VSYSCALL_START,
 			 VSYSCALL_END - VSYSCALL_START, KCORE_OTHER);
 
+	for_each_online_node(nid) {
+		pg_data_t *pgdat = NODE_DATA(nid);
+		pgdat->node_free_pages_at_init =
+			node_page_state(nid, NR_FREE_PAGES);
+	}
+
 	printk(KERN_INFO "Memory: %luk/%luk available (%ldk kernel code, "
 			 "%ldk absent, %ldk reserved, %ldk data, %ldk init)\n",
 		nr_free_pages() << (PAGE_SHIFT-10),
diff --git a/drivers/base/node.c b/drivers/base/node.c
index 7616a77ca322..3ebdff6f8a32 100644
--- a/drivers/base/node.c
+++ b/drivers/base/node.c
@@ -154,8 +154,19 @@ static ssize_t node_read_meminfo(struct device *dev,
 	return n;
 }
 
+static ssize_t node_read_meminfo_extra(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	int nid = dev->id;
+	pg_data_t *pgdat = NODE_DATA(nid);
+	int n = sprintf(buf, "Node %d MemFreeInit:    %8lu kB\n", nid,
+		       K(pgdat->node_free_pages_at_init));
+	return n;
+}
+
 #undef K
 static DEVICE_ATTR(meminfo, S_IRUGO, node_read_meminfo, NULL);
+static DEVICE_ATTR(meminfo_extra, S_IRUGO, node_read_meminfo_extra, NULL);
 
 static ssize_t node_read_numastat(struct device *dev,
 				struct device_attribute *attr, char *buf)
@@ -291,6 +302,7 @@ static int register_node(struct node *node, int num, struct node *parent)
 		device_create_file(&node->dev, &dev_attr_cpumap);
 		device_create_file(&node->dev, &dev_attr_cpulist);
 		device_create_file(&node->dev, &dev_attr_meminfo);
+		device_create_file(&node->dev, &dev_attr_meminfo_extra);
 		device_create_file(&node->dev, &dev_attr_numastat);
 		device_create_file(&node->dev, &dev_attr_distance);
 		device_create_file(&node->dev, &dev_attr_vmstat);
@@ -316,6 +328,7 @@ void unregister_node(struct node *node)
 	device_remove_file(&node->dev, &dev_attr_cpumap);
 	device_remove_file(&node->dev, &dev_attr_cpulist);
 	device_remove_file(&node->dev, &dev_attr_meminfo);
+	device_remove_file(&node->dev, &dev_attr_meminfo_extra);
 	device_remove_file(&node->dev, &dev_attr_numastat);
 	device_remove_file(&node->dev, &dev_attr_distance);
 	device_remove_file(&node->dev, &dev_attr_vmstat);
diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index 5c76737d836b..9d875ef3e02f 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -744,6 +744,8 @@ typedef struct pglist_data {
 	/* Number of pages migrated during the rate limiting time interval */
 	unsigned long numabalancing_migrate_nr_pages;
 #endif
+	unsigned long node_free_pages_at_init; /* number of free pages as of
+						  mem_init() */
 } pg_data_t;
 
 #define node_present_pages(nid)	(NODE_DATA(nid)->node_present_pages)
-- 
2.1.4

