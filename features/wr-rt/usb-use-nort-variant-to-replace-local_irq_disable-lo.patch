From f31bc9f7e75f665db9bf1cfd81042493516e5260 Mon Sep 17 00:00:00 2001
From: fupan li <fupan.li@windriver.com>
Date: Thu, 6 Nov 2014 16:31:35 +0800
Subject: [PATCH 1/7] usb: use nort variant to replace
 local_irq_disable/local_irq_enable

This commit will fix the following calltrace on RT kernel:

[   45.329087] BUG: sleeping function called from invalid context at linux/kernel/locking/rtmutex.c:905
[   45.329090] in_atomic(): 0, irqs_disabled(): 1, pid: 76, name: kworker/u16:2
[   45.329098] CPU: 1 PID: 76 Comm: kworker/u16:2 Not tainted 3.14.22-rt9-WR7.0.0.0_preempt-rt #3
[   45.329101] Hardware name: Intel Corporation Broadwell Client platform/Pearl Valley, BIOS BDW-E1R1.86C.0064.R02.1402251943 02/25/2014
[   45.329114] Workqueue: sysfsd sysfs_schedule_callback_work
[   45.329123]  ffff88014545b000 ffff88009b59bc28 ffffffff819df469 0000000000000000
[   45.329129]  ffff88009b59bc40 ffffffff8107ece3 ffff880144d9a048 ffff88009b59bc58
[   45.329135]  ffffffff819e5d50 ffff88009b531000 ffff88009b59bd00 ffffffff816e2811
[   45.329136] Call Trace:
[   45.329150]  [<ffffffff819df469>] dump_stack+0x4e/0x7a
[   45.329162]  [<ffffffff8107ece3>] __might_sleep+0xe3/0x160
[   45.329169]  [<ffffffff819e5d50>] rt_spin_lock+0x20/0x50
[   45.329178]  [<ffffffff816e2811>] xhci_irq+0x31/0x16d0
[   45.329186]  [<ffffffff81172542>] ? kfree+0x1b2/0x1d0
[   45.329195]  [<ffffffff813e0b7c>] ? kobject_release+0x4c/0x80
[   45.329202]  [<ffffffff813e0b7c>] ? kobject_release+0x4c/0x80
[   45.329210]  [<ffffffff816b1a76>] usb_hcd_irq+0x26/0x40
[   45.329223]  [<ffffffff816c4597>] usb_hcd_pci_remove+0x47/0x150
[   45.329231]  [<ffffffff816e66c1>] xhci_pci_remove+0x41/0x70
[   45.329239]  [<ffffffff81416c0b>] pci_device_remove+0x3b/0xc0
[   45.329247]  [<ffffffff8156a5ff>] __device_release_driver+0x7f/0xf0
[   45.329254]  [<ffffffff8156a693>] device_release_driver+0x23/0x30
[   45.329262]  [<ffffffff81411204>] pci_stop_bus_device+0x94/0xa0
[   45.329270]  [<ffffffff8141134a>] pci_stop_and_remove_bus_device_locked+0x1a/0x30
[   45.329278]  [<ffffffff81419695>] remove_callback+0x15/0x20
[   45.329285]  [<ffffffff811f2744>] sysfs_schedule_callback_work+0x14/0x80
[   45.329305]  [<ffffffff8106affa>] process_one_work+0x15a/0x4b0
[   45.329313]  [<ffffffff8106bdbb>] worker_thread+0x15b/0x400
[   45.329321]  [<ffffffff8106bc60>] ? manage_workers.isra.29+0x300/0x300
[   45.329329]  [<ffffffff810725fd>] kthread+0xcd/0xf0
[   45.329336]  [<ffffffff81072530>] ? flush_kthread_worker+0x90/0x90
[   45.329342]  [<ffffffff819e6eac>] ret_from_fork+0x7c/0xb0
[   45.329348]  [<ffffffff81072530>] ? flush_kthread_worker+0x90/0x90

Since "commit c548795abe0d3520b74e18f23ca0a0d72deddab9
USB: add check to detect host controller hardware removal"
fakes an interrupt request to check the status of the controller in
thread context. On not RT kernel, to disable the interrupt is reasonable
to avoiding the spinlock's deadlock between interrupt context and thread
context; But on RT kernel, usb_hcd_irq() will be run in threadirq context,
and no interrupt context exists for usb_hcd_irq(), so there is no need to
disable the interrupt at all.

Tested by removing the pci device of usb host controller when writing
on an usb flash disk.

Signed-off-by: fupan li <fupan.li@windriver.com>
---
 drivers/usb/core/hcd-pci.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/core/hcd-pci.c b/drivers/usb/core/hcd-pci.c
index 9eb1cff..6d6470a 100644
--- a/drivers/usb/core/hcd-pci.c
+++ b/drivers/usb/core/hcd-pci.c
@@ -333,9 +333,9 @@ void usb_hcd_pci_remove(struct pci_dev *dev)
 	 * to test whether the controller hardware has been removed (e.g.,
 	 * cardbus physical eject).
 	 */
-	local_irq_disable();
+	local_irq_disable_nort();
 	usb_hcd_irq(0, hcd);
-	local_irq_enable();
+	local_irq_enable_nort();
 
 	/* Note: dev_set_drvdata must be called while holding the rwsem */
 	if (dev->class == CL_EHCI) {
-- 
2.0.2

