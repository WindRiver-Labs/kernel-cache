From 11ebabc178e44f5990918cb5142568fa9fe3f539 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Tue, 22 Apr 2014 12:47:48 -0400
Subject: [PATCH 3/5] rt: make it clear that disabling the RT throttling check
 is not good

People think that disabling the RT throttling check, and clearing
off the normally 5% reserved non-RT task slice is perfectly OK.
But then they wonder why RCU or ksoftirqd never runs on that core.
Lets make it perfectly clear that if you disable the safety feature
then you better be darn sure you have your tuning right.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 kernel/sched/core.c | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 426e74545e77..4deb5359dc29 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -7737,8 +7737,13 @@ static int sched_group_set_rt_runtime(struct task_group *tg, long rt_runtime_us)
 
 	rt_period = ktime_to_ns(tg->rt_bandwidth.rt_period);
 	rt_runtime = (u64)rt_runtime_us * NSEC_PER_USEC;
-	if (rt_runtime_us < 0)
+	if (rt_runtime_us < 0) {
+		pr_warn("WARNING: RT throttling checks have been manually disabled.\n");
+		pr_warn("WARNING: misbehaving RT tasks can starve softirq, cause RCU stalls, etc.\n");
+		if (rt_runtime_us != -31337)
+			add_taint(TAINT_WARN, LOCKDEP_STILL_OK);
 		rt_runtime = RUNTIME_INF;
+	}
 
 	return tg_set_rt_bandwidth(tg, rt_period, rt_runtime);
 }
-- 
2.1.4

