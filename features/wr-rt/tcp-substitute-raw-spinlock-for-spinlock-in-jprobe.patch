From f4f8b59d4f5bf42bcd47110134e0a08e5c7d04ba Mon Sep 17 00:00:00 2001
From: Qi Hou <qi.hou@windriver.com>
Date: Thu, 2 Jun 2016 13:21:37 +0800
Subject: [PATCH 13/15] tcp: substitute raw spinlock for spinlock in jprobe

Jprobe is executed in the context of exception,where irq is disabled,
In preempt-rt kernel,if a spinlock is be used in func of jprobe entry,
it will cause a warning being reported.

A snippet of warning log is below:

[] BUG: sleeping function called from invalid context at
kernel-source/kernel/locking/rtmutex.c:917
[] in_atomic(): 1, irqs_disabled(): 128, pid: 2440, name: irq/36-acp-fema
[] INFO: lockdep is turned off.
[] irq event stamp: 0
[] hardirqs last  enabled at (0): [<  (null)>]   (null)
[] hardirqs last disabled at (0): [<c0432c94>] copy_process.part.5+0x3dc/0x16a4
[] softirqs last  enabled at (0): [<c0432c94>] copy_process.part.5+0x3dc/0x16a4
[] softirqs last disabled at (0): [<  (null)>]   (null)
[] Preemption disabled at:[<  (null)>]   (null)
[] CPU: 2 PID: 2440 Comm: irq/36-acp-fema Tainted: G        W
	       4.1.21-rt13-WR8.0.0.0_preempt-rt #37
[] Hardware name: LSI Axxia
[] [] (unwind_backtrace) from [<c0415c38>] (show_stack+0x20/0x24)
[] [] (show_stack) from [<c0e4ad84>] (dump_stack+0xb8/0xe8)
[] [] (dump_stack) from [<c0466f78>] (___might_sleep+0x1bc/0x2b0)
[] [] (___might_sleep) from [<c0e5496c>] (rt_spin_lock+0x34/0x6c)
[] [] (rt_spin_lock) from [<c0cce22c>] (jtcp_rcv_established+0xc0/0x264)
[] [] (jtcp_rcv_established) from [<c0c70df4>] (tcp_v4_do_rcv+0x1a4/0x44c)
[] [] (tcp_v4_do_rcv) from [<c0c74368>] (tcp_v4_rcv+0xe08/0xe10)
[] [] (   ...  ) from [    ...   ] (... + .../...)

Signed-off-by: Qi Hou <qi.hou@windriver.com>
---
 net/ipv4/tcp_probe.c | 27 +++++++++++++--------------
 1 file changed, 13 insertions(+), 14 deletions(-)

diff --git a/net/ipv4/tcp_probe.c b/net/ipv4/tcp_probe.c
index f6c50af..0aafe69 100644
--- a/net/ipv4/tcp_probe.c
+++ b/net/ipv4/tcp_probe.c
@@ -74,7 +74,7 @@ struct tcp_log {
 };
 
 static struct {
-	spinlock_t	lock;
+	raw_spinlock_t	lock;
 	wait_queue_head_t wait;
 	ktime_t		start;
 	u32		lastcwnd;
@@ -116,8 +116,7 @@ static void jtcp_rcv_established(struct sock *sk, struct sk_buff *skb,
 	     ntohs(inet->inet_sport) == port ||
 	     (fwmark > 0 && skb->mark == fwmark)) &&
 	    (full || tp->snd_cwnd != tcp_probe.lastcwnd)) {
-
-		spin_lock(&tcp_probe.lock);
+		raw_spin_lock(&tcp_probe.lock);
 		/* If log fills, just silently drop */
 		if (tcp_probe_avail() > 1) {
 			struct tcp_log *p = tcp_probe.log + tcp_probe.head;
@@ -157,9 +156,9 @@ static void jtcp_rcv_established(struct sock *sk, struct sk_buff *skb,
 			tcp_probe.head = (tcp_probe.head + 1) & (bufsize - 1);
 		}
 		tcp_probe.lastcwnd = tp->snd_cwnd;
-		spin_unlock(&tcp_probe.lock);
+		wake_up_locked(&tcp_probe.wait);
+		raw_spin_unlock(&tcp_probe.lock);
 
-		wake_up(&tcp_probe.wait);
 	}
 
 	jprobe_return();
@@ -175,10 +174,10 @@ static struct jprobe tcp_jprobe = {
 static int tcpprobe_open(struct inode *inode, struct file *file)
 {
 	/* Reset (empty) log */
-	spin_lock_bh(&tcp_probe.lock);
+	raw_spin_lock_bh(&tcp_probe.lock);
 	tcp_probe.head = tcp_probe.tail = 0;
 	tcp_probe.start = ktime_get();
-	spin_unlock_bh(&tcp_probe.lock);
+	raw_spin_unlock_bh(&tcp_probe.lock);
 
 	return 0;
 }
@@ -211,16 +210,17 @@ static ssize_t tcpprobe_read(struct file *file, char __user *buf,
 		char tbuf[256];
 		int width;
 
+		raw_spin_lock_bh(&tcp_probe.lock);
 		/* Wait for data in buffer */
-		error = wait_event_interruptible(tcp_probe.wait,
+		error = wait_event_interruptible_locked(tcp_probe.wait,
 						 tcp_probe_used() > 0);
-		if (error)
+		if (error) {
+			raw_spin_unlock_bh(&tcp_probe.lock);
 			break;
-
-		spin_lock_bh(&tcp_probe.lock);
+		}
 		if (tcp_probe.head == tcp_probe.tail) {
 			/* multiple readers race? */
-			spin_unlock_bh(&tcp_probe.lock);
+			raw_spin_unlock_bh(&tcp_probe.lock);
 			continue;
 		}
 
@@ -229,7 +229,6 @@ static ssize_t tcpprobe_read(struct file *file, char __user *buf,
 		if (cnt + width < len)
 			tcp_probe.tail = (tcp_probe.tail + 1) & (bufsize - 1);
 
-		spin_unlock_bh(&tcp_probe.lock);
 
 		/* if record greater than space available
 		   return partial buffer (so far) */
@@ -263,7 +262,7 @@ static __init int tcpprobe_init(void)
 				 jtcp_rcv_established) == 0);
 
 	init_waitqueue_head(&tcp_probe.wait);
-	spin_lock_init(&tcp_probe.lock);
+	raw_spin_lock_init(&tcp_probe.lock);
 
 	if (bufsize == 0)
 		return -EINVAL;
-- 
2.0.2

