From 806b6b1ebee384211647bfd466ef8710bacace0e Mon Sep 17 00:00:00 2001
From: Lans Zhang <jia.zhang@windriver.com>
Date: Mon, 14 Jan 2013 10:29:34 +0800
Subject: [PATCH 3/8] scsi/libsas: fix irq-disabled context for RT kernel.

We see the following trace on RT:

BUG: sleeping function called from invalid context at /buildarea/linux/kernel/rtmutex.c:646
in_atomic(): 0, irqs_disabled(): 1, pid: 1001, name: ata_id
Pid: 1001, comm: ata_id Not tainted 3.4.16-rt17-WR5.0.1.0_preempt-rt #1

Call Trace:
 [<ffffffff8206bd6f>] __might_sleep+0xdf/0x110
 [<ffffffff82777db4>] rt_spin_lock+0x24/0x50
 [<ffffffff82142bac>] kmem_cache_alloc+0x7c/0x2d0
 [<ffffffff8247c070>] sas_alloc_task+0x20/0x80
 [<ffffffff82485822>] sas_ata_qc_issue+0xd2/0x2f0
 [<ffffffff824a1db7>] ata_qc_issue+0x177/0x380
 [<ffffffff824a8f30>] ? ata_scsi_rw_xlat+0x210/0x210
 [<ffffffff824a71b7>] ata_scsi_translate+0xa7/0x180
 [<ffffffff824aa632>] ata_sas_queuecmd+0xf2/0x250
 [<ffffffff82483da5>] sas_queuecommand+0xb5/0x240
 [<ffffffff8277c089>] ? sub_preempt_count+0xa9/0xe0
 [<ffffffff82466ab1>] scsi_dispatch_cmd+0xd1/0x2d0
 [<ffffffff8246d3e0>] scsi_request_fn+0x350/0x500
 [<ffffffff82754516>] ? kmemleak_alloc+0x26/0x50
 [<ffffffff82308d80>] ? blk_rq_map_user+0x260/0x260
 [<ffffffff822fe33b>] __blk_run_queue+0x1b/0x20
 [<ffffffff822fd77b>] __elv_add_request+0xcb/0x2b0
 [<ffffffff82308d80>] ? blk_rq_map_user+0x260/0x260
 [<ffffffff82308e43>] blk_execute_rq_nowait+0x83/0x120
 [<ffffffff82308f54>] blk_execute_rq+0x74/0xd0
 [<ffffffff82304d20>] ? blk_rq_bio_prep+0x30/0xc0
 [<ffffffff823089bd>] ? blk_rq_append_bio+0x5d/0x70
 [<ffffffff82308c8d>] ? blk_rq_map_user+0x16d/0x260
 [<ffffffff8230e482>] sg_io+0x2d2/0x4d0
 [<ffffffff8218ca60>] ? blkdev_get+0x340/0x340
 [<ffffffff8230e923>] scsi_cmd_ioctl+0x203/0x510
 [<ffffffff8230ec7e>] scsi_cmd_blk_ioctl+0x4e/0x60
 [<ffffffff824981c7>] sd_ioctl+0xb7/0xe0
 [<ffffffff8230af73>] blkdev_ioctl+0xe3/0x830
 [<ffffffff8218ac10>] block_ioctl+0x40/0x50
 [<ffffffff821651a9>] do_vfs_ioctl+0x99/0x5e0
 [<ffffffff82165798>] sys_ioctl+0xa8/0x130
 [<ffffffff82334086>] ? trace_hardirqs_on_thunk+0x3a/0x3c
 [<ffffffff8277fb16>] system_call_fastpath+0x1a/0x1f

The relevant code parts here are:

    sas_ata_qc_issue()
         ...
         local_irq_save(flags)
         spin_unlock(ap->lock)
         sas_alloc_task(GFP_ATOMIC)
         ...
         spin_lock(ap->lock)
	 local_irq_restore(flags)

Given the code above, we can see that this happens because
we call kmem_cache_zalloc to grab a rt_spin_lock to acquire
an object from slub and IRQ state is disabled.

A irq-disabled context is required in non-RT. At this point
queuing scsi command is preferred to be relatively fast.
Normally it will not wait for IO to complete. To get this,
interrupt is kept to be disabled. Hence scsi_done callback
called from an interrupt is invoked after queuing scsi command
has returned. But RT pays more attention to real-time performance,
and a hard irq-disabled context is intolerable.

To fix this, we choose to fix it by replacing local_irq_save with
local_irq_save_nort. This change is OK because it is a legacy
way to grab shost->host_lock using spin_lock_irq/save, and now
they are degenerated into rt_spin_lock in RT. Thus, the call
path has never really disabled irq in RT.

Signed-off-by: Lans Zhang <jia.zhang@windriver.com>
---
 drivers/scsi/libsas/sas_ata.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/scsi/libsas/sas_ata.c b/drivers/scsi/libsas/sas_ata.c
index 161c98e..6e8f23e 100644
--- a/drivers/scsi/libsas/sas_ata.c
+++ b/drivers/scsi/libsas/sas_ata.c
@@ -191,7 +191,7 @@ static unsigned int sas_ata_qc_issue(struct ata_queued_cmd *qc)
 	/* TODO: audit callers to ensure they are ready for qc_issue to
 	 * unconditionally re-enable interrupts
 	 */
-	local_irq_save(flags);
+	local_irq_save_nort(flags);
 	spin_unlock(ap->lock);
 
 	/* If the device fell off, no sense in issuing commands */
@@ -261,7 +261,7 @@ static unsigned int sas_ata_qc_issue(struct ata_queued_cmd *qc)
 
  out:
 	spin_lock(ap->lock);
-	local_irq_restore(flags);
+	local_irq_restore_nort(flags);
 	return ret;
 }
 
-- 
1.8.4.93.g57e4c17

