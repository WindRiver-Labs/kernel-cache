From ab8e61090aa664c7457b3db14f2544b35e04db39 Mon Sep 17 00:00:00 2001
From: Shan Hai <shan.hai@windriver.com>
Date: Wed, 15 Oct 2014 15:56:17 +0800
Subject: [PATCH] softirq: call smp_processor_id from atomic context

The below kernel BUG is triggered on suspend/resume stress tests
because the smp_processor_id is called from preemptible context, fix
it by moving smp_processor_id call into an atomic context.

In the original code the local_irq_enable just before smp_processor_id
opens a preemptible context in which the smp_processor_id is called
while it should not be, this patch moves the smp_processor_id into
non-preemptible context to fix the BUG.

The cpu number can be collected before its usage here since we would not
be preempted or migrated in the irq disabled context, and the ksoftirqd
is cpu bound.

The BUG appeared during suspend/resume stress tests, but it was not easily
reproducible.

BUG: using smp_processor_id() in preemptible [00000000 00000000] code: ksoftirqd/1/12
caller is do_current_softirqs+0x9d/0x2f0
Pid: 12, comm: ksoftirqd/1 Tainted: preempt-rt #1
Call Trace:
[<c131a951>] debug_smp_processor_id+0xf1/0x110
[<c10369bd>] do_current_softirqs+0x9d/0x2f0
[<c175007b>] ? elf_map+0xbe/0xe8
[<c10300d8>] ? panic_smp_self_stop+0x8/0x20
[<c1036cf3>] run_ksoftirqd+0xe3/0x1b0
[<c1036c10>] ? do_current_softirqs+0x2f0/0x2f0
[<c104f3ae>] kthread+0x6e/0x80
[<c104f340>] ? __init_kthread_worker+0x40/0x40
[<c175ed3a>] kernel_thread_helper+0x6/0x10

Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 kernel/softirq.c |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/kernel/softirq.c b/kernel/softirq.c
index 8827a7b..b6f66ed 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -518,13 +518,14 @@ static void unlock_softirq(int which)
 static void do_single_softirq(int which, int need_rcu_bh_qs)
 {
 	unsigned long old_flags = current->flags;
+	int cpu = smp_processor_id();
 
 	current->flags &= ~PF_MEMALLOC;
 	vtime_account_irq_enter(current);
 	current->flags |= PF_IN_SOFTIRQ;
 	lockdep_softirq_enter();
 	local_irq_enable();
-	handle_softirq(which, smp_processor_id(), need_rcu_bh_qs);
+	handle_softirq(which, cpu, need_rcu_bh_qs);
 	local_irq_disable();
 	lockdep_softirq_exit();
 	current->flags &= ~PF_IN_SOFTIRQ;
-- 
1.7.5.4

