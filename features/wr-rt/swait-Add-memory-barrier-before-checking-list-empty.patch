From f9687c04baa83468f8ea0fc289540ab31d1c9429 Mon Sep 17 00:00:00 2001
From: Steven Rostedt <rostedt@goodmis.org>
Date: Mon, 19 Aug 2013 11:35:32 -0400
Subject: [PATCH 1/2] swait: Add memory barrier before checking list empty

There's a race condition with swait wakeups and adding to the list. The
__swait_wake() does a check for swait_head_has_waiters(), and if it is
empty it will exit without doing any wake ups. The problem is that the
check does not include any memory barriers before it makes a decision
to wake up or not.

	CPU0				CPU1
	----				----

  condition = 1

  load h->list (is empty)
				    raw_spin_lock(hlist->lock)
				    hlist_add();
				    __set_current_state();
				    raw_spin_unlock(hlist->lock)
  swait_wake()
   swait_head_has_waiters()
   (sees h->list as empty and returns)

				    check_condition (sees condition = 0)

   store condition = 1

				    schedule()

Now the task on CPU1 has just missed its wakeup. By adding a memory
barrier before the list empty check, we fix the problem of miss seeing
the list not empty as well as pushing out the condition for the other
task to see.

Reviewed-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
[PG: swait_head_has_waiters()  ---> swaitqueue_active()]
Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 include/linux/wait-simple.h | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/include/linux/wait-simple.h b/include/linux/wait-simple.h
index 7a0a59e..4f18612 100644
--- a/include/linux/wait-simple.h
+++ b/include/linux/wait-simple.h
@@ -49,6 +49,8 @@ extern void swait_finish(struct swait_head *head, struct swaiter *w);
 
 static inline bool swaitqueue_active(struct swait_head *h)
 {
+	/* Make sure the condition is visible before checking list_empty() */
+	smp_mb();
 	return !list_empty(&h->list);
 }
 
-- 
1.8.3.1

