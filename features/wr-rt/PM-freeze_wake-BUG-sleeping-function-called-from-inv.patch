From 735b1fb88f3d1146571e69d0ef2c57da6fc556e6 Mon Sep 17 00:00:00 2001
From: Jiping Ma <jiping.ma2@windriver.com>
Date: Mon, 4 Jun 2018 02:02:59 +0000
Subject: [PATCH] PM: freeze_wake, BUG: sleeping function called from invalid
 context at kernel/locking/rtmutex.c

BUG: sleeping function called from invalid context at
kernel/locking/rtmutex.c:995
in_atomic(): 1, irqs_disabled(): 1, pid: 28931, name: kworker/u8:1
Preemption disabled at:[<ffffffff81386b5a>] pci_bus_write_config_word
.part.0+0x2a/0x70

CPU: 0 PID: 28931 Comm: kworker/u8:1 Tainted: G O 4.8.24-rt11 #1
Hardware name: Insyde ApolloLake/1, BIOS 01.08 02/27/2018
Workqueue: events_unbound async_run_entry_fn
0000000000000000 ffff88017fc03eb0 ffffffff8134a456 0000000000000000
ffff880154804100 ffff88017fc03ed0 ffffffff810807ed ffffffff81e39e40
ffff88017587c2a8 ffff88017fc03ee8 ffffffff818859e0 ffff88017587c200
Call Trace:
<IRQ> [<ffffffff8134a456>] dump_stack+0x4f/0x69
[<ffffffff810807ed>] ___might_sleep+0xdd/0x150
[<ffffffff818859e0>] rt_spin_lock+0x20/0x50
[<ffffffff810a4265>] freeze_wake+0x15/0x50
[<ffffffff81571108>] pm_system_irq_wakeup+0x28/0x30
[<ffffffff810b832e>] irq_pm_check_wakeup+0x3e/0x50
[<ffffffff810b4344>] irq_may_run+0x24/0x50
[<ffffffff810b4622>] handle_edge_irq+0x32/0x160
[<ffffffff8101c14a>] handle_irq+0x1a/0x30
[<ffffffff81888138>] do_IRQ+0x58/0xf0
[<ffffffff81886786>] common_interrupt+0x86/0x86
<EOI> [<ffffffff81885764>] ? _raw_spin_unlock_irqrestore+0x14/0x60
[<ffffffff81386b8c>] pci_bus_write_config_word.part.0+0x5c/0x70
[<ffffffff81386bbe>] pci_bus_write_config_word+0x1e/0x20
[<ffffffff813a427d>] pci_restore_msi_state+0x20d/0x250
[<ffffffff8138df6f>] pci_restore_state.part.26+0x11f/0x250
[<ffffffff8138e0bc>] pci_restore_state+0x1c/0x20
[<ffffffff813926a2>] pci_pm_resume_noirq+0x32/0xb0
[<ffffffff81392670>] ? pci_pm_suspend+0x150/0x150
[<ffffffff8156cfc3>] dpm_run_callback+0x33/0x190
[<ffffffff8156d1a7>] device_resume_noirq+0x87/0x140
[<ffffffff8156d27d>] async_resume_noirq+0x1d/0x50
[<ffffffff8107b668>] async_run_entry_fn+0x38/0xe0
[<ffffffff81073474>] process_one_work+0x1d4/0x4d0
[<ffffffff810737c5>] worker_thread+0x55/0x560
[<ffffffff81073770>] ? process_one_work+0x4d0/0x4d0
[<ffffffff81079138>] kthread+0xe8/0x100
[<ffffffff81367cb7>] ? debug_smp_processor_id+0x17/0x20
[<ffffffff8188604f>] ret_from_fork+0x1f/0x40
[<ffffffff81079050>] ? kthread_worker_fn+0x1c0/0x1c0

In RT linux, rt_spin_lock() call function might_sleep_no_state_check(),
The BUG reported in this function because rt_mutex can cause sleep but
the context is atomic. The version of rt that we are using (and in fact,
pretty much any version of -rt) recommends against using cpu hotplug,
so there's really no way we can ever make it "stable".

We use raw_spin_lock replace of spin_lock for this issue, but we cannot
guarantee consistent cpu hotplug under all workloads.

Signed-off-by: Jiping Ma <jiping.ma2@windriver.com>
---
 kernel/power/suspend.c |   14 +++++++-------
 1 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/kernel/power/suspend.c b/kernel/power/suspend.c
index aac06aa..40e1db2 100644
--- a/kernel/power/suspend.c
+++ b/kernel/power/suspend.c
@@ -43,7 +43,7 @@ static const struct platform_freeze_ops *freeze_ops;
 static DECLARE_WAIT_QUEUE_HEAD(suspend_freeze_wait_head);
 
 enum freeze_state __read_mostly suspend_freeze_state;
-static DEFINE_SPINLOCK(suspend_freeze_lock);
+static DEFINE_RAW_SPINLOCK(suspend_freeze_lock);
 
 void freeze_set_ops(const struct platform_freeze_ops *ops)
 {
@@ -59,12 +59,12 @@ static void freeze_begin(void)
 
 static void freeze_enter(void)
 {
-	spin_lock_irq(&suspend_freeze_lock);
+	raw_spin_lock_irq(&suspend_freeze_lock);
 	if (pm_wakeup_pending())
 		goto out;
 
 	suspend_freeze_state = FREEZE_STATE_ENTER;
-	spin_unlock_irq(&suspend_freeze_lock);
+	raw_spin_unlock_irq(&suspend_freeze_lock);
 
 	get_online_cpus();
 	cpuidle_resume();
@@ -80,23 +80,23 @@ static void freeze_enter(void)
 	cpuidle_pause();
 	put_online_cpus();
 
-	spin_lock_irq(&suspend_freeze_lock);
+	raw_spin_lock_irq(&suspend_freeze_lock);
 
  out:
 	suspend_freeze_state = FREEZE_STATE_NONE;
-	spin_unlock_irq(&suspend_freeze_lock);
+	raw_spin_unlock_irq(&suspend_freeze_lock);
 }
 
 void freeze_wake(void)
 {
 	unsigned long flags;
 
-	spin_lock_irqsave(&suspend_freeze_lock, flags);
+	raw_spin_lock_irqsave(&suspend_freeze_lock, flags);
 	if (suspend_freeze_state > FREEZE_STATE_NONE) {
 		suspend_freeze_state = FREEZE_STATE_WAKE;
 		wake_up(&suspend_freeze_wait_head);
 	}
-	spin_unlock_irqrestore(&suspend_freeze_lock, flags);
+	raw_spin_unlock_irqrestore(&suspend_freeze_lock, flags);
 }
 EXPORT_SYMBOL_GPL(freeze_wake);
 
-- 
1.7.5.4

