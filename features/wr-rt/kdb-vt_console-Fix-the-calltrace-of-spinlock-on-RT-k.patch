From 4d085d2eb13f535144d7e210d1bd9a4a8d15dca5 Mon Sep 17 00:00:00 2001
From: fupan li <fupan.li@windriver.com>
Date: Mon, 10 Nov 2014 16:53:49 +0800
Subject: [PATCH 03/15] kdb,vt_console: Fix the calltrace of spinlock on RT
 kernel

Function vkdb_printf() is protected by preempt_disable(), so the inner
spinlock should replaced with raw_spinlock on RT kernel, otherwise kgdboc
will output the following calltrace:

linux/kernel/locking/rtm3in_atomic(): 1, irqs_disabled(): 1, pid: 1958, name: ir3Preemption disabled at:[<ffffffff810dc7ef>] kgdb_cpu_enter+0xdCPU: 2 PID: 1958 Comm: irq/4-serial Not tainted 3.14.22-rt9-WR7.0.0.0_predHardware name: Intel Corporation Broadwell Client platform/Pearl Valley, BIOS BDW-E1R1.86C.0064.R02.1402251943 02/25/2014
 ffff88014f488ca8 ffff88014f488bf8 ffffffff819df4f9 0000000000000000
 ffff88014f488c10 ffffffff8107ed43 ffffffff81e079c0 ffff88014f488c28
 ffffffff819e5df0 ffffffff81cc19c0 ffff88014f488c98 ffffffff810def7c
Call Trace:
 <#DB>  [<ffffffff819df4f9>] dump_stack+0x4e/0x7a
 [<ffffffff8107ed43>] __might_sleep+0xe3/0x160
 [<ffffffff819e5df0>] rt_spin_lock+0x20/0x50
 [<ffffffff810def7c>] vkdb_printf+0x48c/0x890
 [<ffffffff810df3cf>] kdb_printf+0x4f/0x60
 [<ffffffff810e38bf>] kdb_main_loop+0xff/0x7c0
 [<ffffffff810e6a1e>] kdb_stub+0x1de/0x450
 [<ffffffff810dc9ac>] kgdb_cpu_enter+0x30c/0x5b0
 [<ffffffff810dced0>] kgdb_handle_exception+0x160/0x1d0
more>
Only 'q' or 'Q' are processed at more prompt, input ignored
 [<ffffffff8103b9bc>] __kgdb_notify+0x3c/0xd0
 [<ffffffff8103ba65>] kgdb_notify+0x15/0x20
 [<ffffffff8107765d>] notifier_call_chain+0x4d/0x70
 [<ffffffff81077903>] atomic_notifier_call_chain+0x33/0x50
 [<ffffffff81077e8e>] notify_die+0x2e/0x30
 [<ffffffff81003beb>] do_int3+0x5b/0x100
 [<ffffffff819e67e5>] int3+0x25/0x40
 [<ffffffff810dc114>] ? kgdb_breakpoint+0x14/0x20
 <<EOE>>  [<ffffffff810dc12e>] kgdb_tasklet_bpt+0xe/0x20
 [<ffffffff81052e15>] __tasklet_action.isra.17+0x75/0x130
 [<ffffffff81052f95>] tasklet_action+0x75/0x80
 [<ffffffff81052992>] do_current_softirqs+0x202/0x3a0
 [<ffffffff810a8dc0>] ? irq_thread_fn+0x50/0x50
 [<ffffffff81052b9d>] __local_bh_enable+0x6d/0x90
 [<ffffffff81052bce>] local_bh_enable+0xe/0x10
 [<ffffffff810a8dfb>] irq_forced_thread_fn+0x3b/0x70
 [<ffffffff810a901f>] irq_thread+0x12f/0x180
 [<ffffffff810a9070>] ? irq_thread+0x180/0x180
 [<ffffffff810a8ef0>] ? wake_threads_waitq+0x30/0x30
 [<ffffffff8107265d>] kthread+0xcd/0xf0
 [<ffffffff81072590>] ? flush_kthread_worker+0x90/0x90
more>
Only 'q' or 'Q' are processed at more prompt, input ignored
 [<ffffffff819e6f6c>] ret_from_fork+0x7c/0xb0
 [<ffffffff81072590>] ? flush_kthread_worker+0x90/0x90

Signed-off-by: fupan li <fupan.li@windriver.com>
---
 kernel/debug/kdb/kdb_io.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/kernel/debug/kdb/kdb_io.c b/kernel/debug/kdb/kdb_io.c
index 83c6665..d9605be 100644
--- a/kernel/debug/kdb/kdb_io.c
+++ b/kernel/debug/kdb/kdb_io.c
@@ -560,7 +560,7 @@ int vkdb_printf(enum kdb_msgsrc src, const char *fmt, va_list ap)
 	char *cp, *cp2, *cphold = NULL, replaced_byte = ' ';
 	char *moreprompt = "more> ";
 	struct console *c = console_drivers;
-	static DEFINE_SPINLOCK(kdb_printf_lock);
+	static DEFINE_RAW_SPINLOCK(kdb_printf_lock);
 	unsigned long uninitialized_var(flags);
 
 	preempt_disable();
@@ -571,7 +571,7 @@ int vkdb_printf(enum kdb_msgsrc src, const char *fmt, va_list ap)
 	 */
 	if (!KDB_STATE(PRINTF_LOCK)) {
 		KDB_STATE_SET(PRINTF_LOCK);
-		spin_lock_irqsave(&kdb_printf_lock, flags);
+		raw_spin_lock_irqsave(&kdb_printf_lock, flags);
 		got_printf_lock = 1;
 		atomic_inc(&kdb_event);
 	} else {
@@ -846,7 +846,7 @@ kdb_print_out:
 		console_loglevel = saved_loglevel;
 	if (KDB_STATE(PRINTF_LOCK) && got_printf_lock) {
 		got_printf_lock = 0;
-		spin_unlock_irqrestore(&kdb_printf_lock, flags);
+		raw_spin_unlock_irqrestore(&kdb_printf_lock, flags);
 		KDB_STATE_CLEAR(PRINTF_LOCK);
 		atomic_dec(&kdb_event);
 	} else {
-- 
2.0.2

