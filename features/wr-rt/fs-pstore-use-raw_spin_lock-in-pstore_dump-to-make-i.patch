From caa7b4c49511f6de83de6d3a8a12dbaa42bf4e0a Mon Sep 17 00:00:00 2001
From: Zhang Xiao <xiao.zhang@windriver.com>
Date: Wed, 1 Mar 2017 11:00:31 +0800
Subject: [PATCH] fs/pstore: use raw_spin_lock in pstore_dump to make it irq
 safe

pstore_dump() maybe called from any context including hard-irq one, so
we have to use raw_spin_lock instead of common rt_mutex.

Note: such limitation may enlarge the rt latency.

Signed-off-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 arch/powerpc/kernel/nvram_64.c    |    2 +-
 drivers/acpi/apei/erst.c          |    2 +-
 drivers/firmware/efi/efi-pstore.c |    2 +-
 fs/pstore/platform.c              |   14 +++++++-------
 fs/pstore/ram.c                   |    2 +-
 include/linux/pstore.h            |    2 +-
 6 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/arch/powerpc/kernel/nvram_64.c b/arch/powerpc/kernel/nvram_64.c
index 1e703f8..baab67f 100644
--- a/arch/powerpc/kernel/nvram_64.c
+++ b/arch/powerpc/kernel/nvram_64.c
@@ -579,7 +579,7 @@ static int nvram_pstore_init(void)
 	nvram_pstore_info.buf = oops_data;
 	nvram_pstore_info.bufsize = oops_data_sz;
 
-	spin_lock_init(&nvram_pstore_info.buf_lock);
+	raw_spin_lock_init(&nvram_pstore_info.buf_lock);
 
 	rc = pstore_register(&nvram_pstore_info);
 	if (rc != 0)
diff --git a/drivers/acpi/apei/erst.c b/drivers/acpi/apei/erst.c
index 721083a..6375e5e 100644
--- a/drivers/acpi/apei/erst.c
+++ b/drivers/acpi/apei/erst.c
@@ -1189,7 +1189,7 @@ static int __init erst_init(void)
 	"Error Record Serialization Table (ERST) support is initialized.\n");
 
 	buf = kmalloc(erst_erange.size, GFP_KERNEL);
-	spin_lock_init(&erst_info.buf_lock);
+	raw_spin_lock_init(&erst_info.buf_lock);
 	if (buf) {
 		erst_info.buf = buf + sizeof(struct cper_pstore_record);
 		erst_info.bufsize = erst_erange.size -
diff --git a/drivers/firmware/efi/efi-pstore.c b/drivers/firmware/efi/efi-pstore.c
index e992abc..bd33a8f 100644
--- a/drivers/firmware/efi/efi-pstore.c
+++ b/drivers/firmware/efi/efi-pstore.c
@@ -380,7 +380,7 @@ static __init int efivars_pstore_init(void)
 		return -ENOMEM;
 
 	efi_pstore_info.bufsize = 1024;
-	spin_lock_init(&efi_pstore_info.buf_lock);
+	raw_spin_lock_init(&efi_pstore_info.buf_lock);
 
 	if (pstore_register(&efi_pstore_info)) {
 		kfree(efi_pstore_info.buf);
diff --git a/fs/pstore/platform.c b/fs/pstore/platform.c
index c4c9a10..88e7500 100644
--- a/fs/pstore/platform.c
+++ b/fs/pstore/platform.c
@@ -282,13 +282,13 @@ static void pstore_dump(struct kmsg_dumper *dumper,
 	why = get_reason_str(reason);
 
 	if (pstore_cannot_block_path(reason)) {
-		is_locked = spin_trylock_irqsave(&psinfo->buf_lock, flags);
+		is_locked = raw_spin_trylock_irqsave(&psinfo->buf_lock, flags);
 		if (!is_locked) {
 			pr_err("pstore dump routine blocked in %s path, may corrupt error record\n"
 				       , in_nmi() ? "NMI" : why);
 		}
 	} else
-		spin_lock_irqsave(&psinfo->buf_lock, flags);
+		raw_spin_lock_irqsave(&psinfo->buf_lock, flags);
 	oopscount++;
 	while (total < kmsg_bytes) {
 		char *dst;
@@ -344,9 +344,9 @@ static void pstore_dump(struct kmsg_dumper *dumper,
 	}
 	if (pstore_cannot_block_path(reason)) {
 		if (is_locked)
-			spin_unlock_irqrestore(&psinfo->buf_lock, flags);
+			raw_spin_unlock_irqrestore(&psinfo->buf_lock, flags);
 	} else
-		spin_unlock_irqrestore(&psinfo->buf_lock, flags);
+		raw_spin_unlock_irqrestore(&psinfo->buf_lock, flags);
 }
 
 static struct kmsg_dumper pstore_dumper = {
@@ -366,14 +366,14 @@ static void pstore_console_write(struct console *con, const char *s, unsigned c)
 			c = psinfo->bufsize;
 
 		if (oops_in_progress) {
-			if (!spin_trylock_irqsave(&psinfo->buf_lock, flags))
+			if (!raw_spin_trylock_irqsave(&psinfo->buf_lock, flags))
 				break;
 		} else {
-			spin_lock_irqsave(&psinfo->buf_lock, flags);
+			raw_spin_lock_irqsave(&psinfo->buf_lock, flags);
 		}
 		memcpy(psinfo->buf, s, c);
 		psinfo->write(PSTORE_TYPE_CONSOLE, 0, &id, 0, 0, 0, c, psinfo);
-		spin_unlock_irqrestore(&psinfo->buf_lock, flags);
+		raw_spin_unlock_irqrestore(&psinfo->buf_lock, flags);
 		s += c;
 		c = e - s;
 	}
diff --git a/fs/pstore/ram.c b/fs/pstore/ram.c
index 44a549b..928b141 100644
--- a/fs/pstore/ram.c
+++ b/fs/pstore/ram.c
@@ -518,7 +518,7 @@ static int ramoops_probe(struct platform_device *pdev)
 		cxt->pstore.bufsize = 1024; /* LOG_LINE_MAX */
 	cxt->pstore.bufsize = max(cxt->record_size, cxt->pstore.bufsize);
 	cxt->pstore.buf = kmalloc(cxt->pstore.bufsize, GFP_KERNEL);
-	spin_lock_init(&cxt->pstore.buf_lock);
+	raw_spin_lock_init(&cxt->pstore.buf_lock);
 	if (!cxt->pstore.buf) {
 		pr_err("cannot allocate pstore buffer\n");
 		err = -ENOMEM;
diff --git a/include/linux/pstore.h b/include/linux/pstore.h
index 8e7a25b..5d7d9e9 100644
--- a/include/linux/pstore.h
+++ b/include/linux/pstore.h
@@ -49,7 +49,7 @@ struct module;
 struct pstore_info {
 	struct module	*owner;
 	char		*name;
-	spinlock_t	buf_lock;	/* serialize access to 'buf' */
+	raw_spinlock_t	buf_lock;	/* serialize access to 'buf' */
 	char		*buf;
 	size_t		bufsize;
 	struct mutex	read_mutex;	/* serialize open/read/close */
-- 
1.7.5.4

