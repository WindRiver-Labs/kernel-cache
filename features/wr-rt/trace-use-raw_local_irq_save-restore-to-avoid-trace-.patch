From 79d2ac31c307eaae882d313802a20b9415df1cde Mon Sep 17 00:00:00 2001
From: Li Zhou <li.zhou@windriver.com>
Date: Fri, 15 Apr 2016 18:04:01 +0800
Subject: [PATCH 11/15] trace: use raw_local_irq_save/restore to avoid trace
 code loop

commit <tracing: Fix rcu splat from idle CPU on boot> from
linux rt branch upstream <https://git.kernel.org/cgit/linux/kernel/git/
rt/linux-rt-devel.git/log/?h=linux-4.1.y-rt>
will cause hang when do ftrace startup test in step
<Testing event preemptirqsoff_hist>, because
trace_preemptirqsoff_hist_rcuidle will use local_irq_save/restore
and cause a code loop. Change the local_irq_save/restore to
raw_local_irq_save/restore in trace_preemptirqsoff_hist_rcuidle_raw to
replace trace_preemptirqsoff_hist_rcuidle to avoid this code loop.

Signed-off-by: Li Zhou <li.zhou@windriver.com>
[ Adjust context ]
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 include/linux/rcupdate.h     |  2 ++
 include/linux/tracepoint.h   | 15 +++++++++++++++
 include/trace/events/hist.h  |  1 +
 kernel/rcu/tree.c            | 37 +++++++++++++++++++++++++++++++++++++
 kernel/trace/trace_irqsoff.c |  4 ++--
 5 files changed, 57 insertions(+), 2 deletions(-)

diff --git a/include/linux/rcupdate.h b/include/linux/rcupdate.h
index 9f18a50..ca748dc 100644
--- a/include/linux/rcupdate.h
+++ b/include/linux/rcupdate.h
@@ -344,6 +344,8 @@ void rcu_init(void);
 void rcu_sched_qs(void);
 void rcu_bh_qs(void);
 void rcu_check_callbacks(int user);
+void raw_rcu_irq_enter(void);
+void raw_rcu_irq_exit(void);
 void rcu_report_dead(unsigned int cpu);
 
 #ifndef CONFIG_TINY_RCU
diff --git a/include/linux/tracepoint.h b/include/linux/tracepoint.h
index be586c6..2acef4c 100644
--- a/include/linux/tracepoint.h
+++ b/include/linux/tracepoint.h
@@ -162,8 +162,21 @@ extern void syscall_unregfunc(void);
 				rcu_irq_enter_irqson(),			\
 				rcu_irq_exit_irqson());			\
 	}
+
+#define __DECLARE_TRACE_RCU_RAW(name, proto, args, cond, data_proto, data_args)	\
+	static inline void trace_##name##_rcuidle_raw(proto)		\
+	{								\
+		if (static_key_false(&__tracepoint_##name.key))		\
+			__DO_TRACE(&__tracepoint_##name,		\
+				TP_PROTO(data_proto),			\
+				TP_ARGS(data_args),			\
+				TP_CONDITION(cond),			\
+				raw_rcu_irq_enter(),			\
+				raw_rcu_irq_exit());			\
+	}
 #else
 #define __DECLARE_TRACE_RCU(name, proto, args, cond, data_proto, data_args)
+#define __DECLARE_TRACE_RCU_RAW(name, proto, args, cond, data_proto, data_args)
 #endif
 
 /*
@@ -195,6 +208,8 @@ extern void syscall_unregfunc(void);
 	}								\
 	__DECLARE_TRACE_RCU(name, PARAMS(proto), PARAMS(args),		\
 		PARAMS(cond), PARAMS(data_proto), PARAMS(data_args))	\
+	__DECLARE_TRACE_RCU_RAW(name, PARAMS(proto), PARAMS(args),		\
+		PARAMS(cond), PARAMS(data_proto), PARAMS(data_args))	\
 	static inline int						\
 	register_trace_##name(void (*probe)(data_proto), void *data)	\
 	{								\
diff --git a/include/trace/events/hist.h b/include/trace/events/hist.h
index f7710de..b6c1f77 100644
--- a/include/trace/events/hist.h
+++ b/include/trace/events/hist.h
@@ -10,6 +10,7 @@
 #if !defined(CONFIG_PREEMPT_OFF_HIST) && !defined(CONFIG_INTERRUPT_OFF_HIST)
 #define trace_preemptirqsoff_hist(a, b)
 #define trace_preemptirqsoff_hist_rcuidle(a, b)
+#define trace_preemptirqsoff_hist_rcuidle_raw(a, b)
 #else
 TRACE_EVENT(preemptirqsoff_hist,
 
diff --git a/kernel/rcu/tree.c b/kernel/rcu/tree.c
index b193aae..d38c9fb 100644
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@ -847,6 +847,24 @@ void rcu_irq_exit_irqson(void)
 	local_irq_restore(flags);
 }
 
+void raw_rcu_irq_exit(void)
+{
+	unsigned long flags;
+	long long oldval;
+	struct rcu_dynticks *rdtp;
+
+	raw_local_irq_save(flags);
+	rdtp = this_cpu_ptr(&rcu_dynticks);
+	oldval = rdtp->dynticks_nesting;
+	rdtp->dynticks_nesting--;
+	WARN_ON_ONCE(rdtp->dynticks_nesting < 0);
+	if (rdtp->dynticks_nesting)
+		trace_rcu_dyntick(TPS("--="), oldval, rdtp->dynticks_nesting);
+	else
+		rcu_eqs_enter_common(oldval, true);
+	rcu_sysidle_enter(1);
+	raw_local_irq_restore(flags);
+}
 /*
  * rcu_eqs_exit_common - current CPU moving away from extended quiescent state
  *
@@ -985,6 +1003,25 @@ void rcu_irq_enter_irqson(void)
 	local_irq_restore(flags);
 }
 
+void raw_rcu_irq_enter(void)
+{
+	unsigned long flags;
+	struct rcu_dynticks *rdtp;
+	long long oldval;
+
+	raw_local_irq_save(flags);
+	rdtp = this_cpu_ptr(&rcu_dynticks);
+	oldval = rdtp->dynticks_nesting;
+	rdtp->dynticks_nesting++;
+	WARN_ON_ONCE(rdtp->dynticks_nesting == 0);
+	if (oldval)
+		trace_rcu_dyntick(TPS("++="), oldval, rdtp->dynticks_nesting);
+	else
+		rcu_eqs_exit_common(oldval, true);
+	rcu_sysidle_exit(1);
+	raw_local_irq_restore(flags);
+}
+
 /**
  * rcu_nmi_enter - inform RCU of entry to NMI context
  *
diff --git a/kernel/trace/trace_irqsoff.c b/kernel/trace/trace_irqsoff.c
index 940bd10..f512b79 100644
--- a/kernel/trace/trace_irqsoff.c
+++ b/kernel/trace/trace_irqsoff.c
@@ -441,7 +441,7 @@ EXPORT_SYMBOL_GPL(stop_critical_timings);
 #ifdef CONFIG_PROVE_LOCKING
 void time_hardirqs_on(unsigned long a0, unsigned long a1)
 {
-	trace_preemptirqsoff_hist_rcuidle(IRQS_ON, 0);
+	trace_preemptirqsoff_hist_rcuidle_raw(IRQS_ON, 0);
 	if (!preempt_trace() && irq_trace())
 		stop_critical_timing(a0, a1);
 }
@@ -450,7 +450,7 @@ void time_hardirqs_off(unsigned long a0, unsigned long a1)
 {
 	if (!preempt_trace() && irq_trace())
 		start_critical_timing(a0, a1);
-	trace_preemptirqsoff_hist_rcuidle(IRQS_OFF, 1);
+	trace_preemptirqsoff_hist_rcuidle_raw(IRQS_OFF, 1);
 }
 
 #else /* !CONFIG_PROVE_LOCKING */
-- 
2.0.2

