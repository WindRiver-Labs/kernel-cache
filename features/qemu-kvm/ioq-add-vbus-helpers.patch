From c76184fa7d3a416c638b15c98e22eaaac6d5872e Mon Sep 17 00:00:00 2001
From: Gregory Haskins <ghaskins@novell.com>
Date: Wed, 29 Jul 2009 16:31:21 -0400
Subject: [PATCH 011/119] ioq: add vbus helpers

It will be common to map an IOQ over the VBUS shared-memory interfaces,
so lets generalize their setup so we can reuse the pattern.

Signed-off-by: Gregory Haskins <ghaskins@novell.com>
---
 include/linux/vbus_device.h |    7 +++
 kernel/vbus/Kconfig         |    2 +
 kernel/vbus/Makefile        |    3 +
 kernel/vbus/shm-ioq.c       |   89 +++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 101 insertions(+), 0 deletions(-)
 create mode 100644 kernel/vbus/shm-ioq.c

diff --git a/include/linux/vbus_device.h b/include/linux/vbus_device.h
index fdda88a..e45ab60 100644
--- a/include/linux/vbus_device.h
+++ b/include/linux/vbus_device.h
@@ -102,6 +102,7 @@
 #include <linux/configfs.h>
 #include <linux/rbtree.h>
 #include <linux/shm_signal.h>
+#include <linux/ioq.h>
 #include <linux/vbus.h>
 #include <linux/kref.h>
 
@@ -435,4 +436,10 @@ static inline void vbus_connection_put(struct vbus_connection *conn)
 	kref_put(&conn->kref, _vbus_connection_release);
 }
 
+/*
+ * device-side IOQ helper - dereferences device-shm as an IOQ
+ */
+int vbus_shm_ioq_attach(struct vbus_shm *shm, struct shm_signal *signal,
+			int maxcount, struct ioq **ioq);
+
 #endif /* _LINUX_VBUS_DEVICE_H */
diff --git a/kernel/vbus/Kconfig b/kernel/vbus/Kconfig
index b257b0f..aa5957c 100644
--- a/kernel/vbus/Kconfig
+++ b/kernel/vbus/Kconfig
@@ -6,6 +6,7 @@ menuconfig VBUS
        bool "Virtual-Bus Containers"
        select CONFIGFS_FS
        select SHM_SIGNAL
+       select IOQ
        default n
        help
         Provides a mechansism for declaring virtual resource containers
@@ -16,3 +17,4 @@ menuconfig VBUS
 
 	If you plan on using this kernel as a VBUS backend, say Y.  If
 	unsure, say N
+
diff --git a/kernel/vbus/Makefile b/kernel/vbus/Makefile
index 4d440e5..7d6d7fd 100644
--- a/kernel/vbus/Makefile
+++ b/kernel/vbus/Makefile
@@ -1 +1,4 @@
 obj-$(CONFIG_VBUS) += core.o devclass.o config.o attribute.o map.o client.o
+obj-$(CONFIG_VBUS) += shm-ioq.o
+
+
diff --git a/kernel/vbus/shm-ioq.c b/kernel/vbus/shm-ioq.c
new file mode 100644
index 0000000..a627337
--- /dev/null
+++ b/kernel/vbus/shm-ioq.c
@@ -0,0 +1,89 @@
+/*
+ * Copyright 2009 Novell.  All Rights Reserved.
+ *
+ * IOQ helper for devices - This module implements an IOQ which has
+ * been shared with a device via a vbus_shm segment.
+ *
+ * Author:
+ *      Gregory Haskins <ghaskins@novell.com>
+ *
+ * This file is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+ */
+
+#include <linux/ioq.h>
+#include <linux/vbus_device.h>
+
+struct _ioq {
+	struct vbus_shm *shm;
+	struct ioq ioq;
+};
+
+static void
+_shm_ioq_release(struct ioq *ioq)
+{
+	struct _ioq *_ioq = container_of(ioq, struct _ioq, ioq);
+
+	/* the signal is released by the IOQ infrastructure */
+	vbus_shm_put(_ioq->shm);
+	kfree(_ioq);
+}
+
+static struct ioq_ops _shm_ioq_ops = {
+	.release = _shm_ioq_release,
+};
+
+int vbus_shm_ioq_attach(struct vbus_shm *shm, struct shm_signal *signal,
+			int maxcount, struct ioq **ioq)
+{
+	struct _ioq *_ioq;
+	struct ioq_ring_head *head = NULL;
+	size_t ringcount;
+
+	if (!signal)
+		return -EINVAL;
+
+	_ioq = kzalloc(sizeof(*_ioq), GFP_KERNEL);
+	if (!_ioq)
+		return -ENOMEM;
+
+	head = (struct ioq_ring_head *)shm->ptr;
+
+	if (head->magic != IOQ_RING_MAGIC)
+		return -EINVAL;
+
+	if (head->ver != IOQ_RING_VER)
+		return -EINVAL;
+
+	ringcount = head->count;
+
+	if ((maxcount != -1) && (ringcount > maxcount))
+		return -EINVAL;
+
+	/*
+	 * Sanity check the ringcount against the actual length of the segment
+	 */
+	if (IOQ_HEAD_DESC_SIZE(ringcount) != shm->len)
+		return -EINVAL;
+
+	_ioq->shm = shm;
+
+	ioq_init(&_ioq->ioq, &_shm_ioq_ops, ioq_locality_south, head,
+		 signal, ringcount);
+
+	*ioq = &_ioq->ioq;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(vbus_shm_ioq_attach);
+
-- 
1.6.5.2

