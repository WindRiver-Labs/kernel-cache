From 874847dcc7fbe5be777274122297a7c6fb13dff5 Mon Sep 17 00:00:00 2001
From: Randy Dunlap <randy.dunlap@oracle.com>
Date: Wed, 28 Oct 2009 09:53:25 -0400
Subject: [PATCH 076/119] Eliminate all cast warnings in vbus-enet.c and pci-bridge.c.

Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
Signed-off-by: Gregory Haskins <ghaskins@novell.com>
---
 drivers/net/vbus-enet.c   |   52 ++++++++++++++++++++++----------------------
 drivers/vbus/pci-bridge.c |   13 ++++++-----
 2 files changed, 33 insertions(+), 32 deletions(-)

diff --git a/drivers/net/vbus-enet.c b/drivers/net/vbus-enet.c
index 6aaee1c..29b388f 100644
--- a/drivers/net/vbus-enet.c
+++ b/drivers/net/vbus-enet.c
@@ -162,18 +162,18 @@ rxdesc_alloc(struct vbus_enet_priv *priv, struct ioq_ring_desc *desc, size_t len
 		 * larger than MTU, the host will grab pages out of the
 		 * page-queue and populate additional IOVs
 		 */
-		struct venet_sg *vsg = (struct venet_sg *)desc->cookie;
+		struct venet_sg *vsg = (struct venet_sg *)(unsigned long)desc->cookie;
 		struct venet_iov *iov = &vsg->iov[0];
 
 		memset(vsg, 0, SG_DESC_SIZE);
 
-		vsg->cookie  = (u64)skb;
+		vsg->cookie  = (u64)(unsigned long)skb;
 		vsg->count   = 1;
 
 		iov->ptr     = (u64)__pa(skb->data);
 		iov->len     = len;
 	} else {
-		desc->cookie = (u64)skb;
+		desc->cookie = (u64)(unsigned long)skb;
 		desc->ptr    = (u64)__pa(skb->data);
 		desc->len    = len; /* total length  */
 	}
@@ -210,7 +210,7 @@ rx_pageq_refill(struct vbus_enet_priv *priv, gfp_t gfp_mask)
 			break;
 
 		added = 1;
-		iter.desc->cookie = (u64)page;
+		iter.desc->cookie = (u64)(unsigned long)page;
 		iter.desc->ptr    = (u64)__pa(page_address(page));
 		iter.desc->len    = PAGE_SIZE;
 
@@ -257,7 +257,7 @@ rx_setup(struct vbus_enet_priv *priv)
 			void *addr = &priv->l4ro.pool[offset];
 
 			iter.desc->ptr    = (u64)offset;
-			iter.desc->cookie = (u64)addr;
+			iter.desc->cookie = (u64)(unsigned long)addr;
 			iter.desc->len    = SG_DESC_SIZE;
 		}
 
@@ -301,19 +301,19 @@ rx_rxq_teardown(struct vbus_enet_priv *priv)
 			struct venet_sg *vsg;
 			int i;
 
-			vsg = (struct venet_sg *)iter.desc->cookie;
+			vsg = (struct venet_sg *)(unsigned long)iter.desc->cookie;
 
 			/* skip i=0, since that is the skb->data IOV */
 			for (i = 1; i < vsg->count; i++) {
 				struct venet_iov *iov = &vsg->iov[i];
-				struct page *page = (struct page *)iov->ptr;
+				struct page *page = (struct page *)(unsigned long)iov->ptr;
 
 				put_page(page);
 			}
 
-			skb = (struct sk_buff *)vsg->cookie;
+			skb = (struct sk_buff *)(unsigned long)vsg->cookie;
 		} else
-			skb = (struct sk_buff *)iter.desc->cookie;
+			skb = (struct sk_buff *)(unsigned long)iter.desc->cookie;
 
 		iter.desc->valid = 0;
 		wmb();
@@ -345,7 +345,7 @@ rx_l4ro_teardown(struct vbus_enet_priv *priv)
 	 * free each valid descriptor
 	 */
 	while (iter.desc->sown) {
-		struct page *page = (struct page *)iter.desc->cookie;
+		struct page *page = (struct page *)(unsigned long)iter.desc->cookie;
 
 		iter.desc->valid = 0;
 		wmb();
@@ -436,7 +436,7 @@ tx_setup(struct vbus_enet_priv *priv)
 			iter.desc->ptr = (u64)__pa(vsg);
 		}
 
-		iter.desc->cookie = (u64)vsg;
+		iter.desc->cookie = (u64)(unsigned long)vsg;
 		iter.desc->len    = SG_DESC_SIZE;
 
 		ret = ioq_iter_seek(&iter, ioq_seek_next, 0, 0);
@@ -484,7 +484,7 @@ tx_teardown(struct vbus_enet_priv *priv)
 	 * free each valid descriptor
 	 */
 	while (iter.desc->cookie) {
-		struct venet_sg *vsg = (struct venet_sg *)iter.desc->cookie;
+		struct venet_sg *vsg = (struct venet_sg *)(unsigned long)iter.desc->cookie;
 
 		iter.desc->valid = 0;
 		wmb();
@@ -601,8 +601,8 @@ vbus_enet_change_mtu(struct net_device *dev, int new_mtu)
 static struct sk_buff *
 vbus_enet_l4ro_import(struct vbus_enet_priv *priv, struct ioq_ring_desc *desc)
 {
-	struct venet_sg *vsg = (struct venet_sg *)desc->cookie;
-	struct sk_buff *skb = (struct sk_buff *)vsg->cookie;
+	struct venet_sg *vsg = (struct venet_sg *)(unsigned long)desc->cookie;
+	struct sk_buff *skb = (struct sk_buff *)(unsigned long)vsg->cookie;
 	struct skb_shared_info *sinfo = skb_shinfo(skb);
 	int i;
 
@@ -622,7 +622,7 @@ vbus_enet_l4ro_import(struct vbus_enet_priv *priv, struct ioq_ring_desc *desc)
 	/* skip i=0, since that is the skb->data IOV */
 	for (i = 1; i < vsg->count; i++) {
 		struct venet_iov *iov = &vsg->iov[i];
-		struct page *page = (struct page *)iov->ptr;
+		struct page *page = (struct page *)(unsigned long)iov->ptr;
 		skb_frag_t *f = &sinfo->frags[i-1];
 
 		f->page        = page;
@@ -695,7 +695,7 @@ fail:
 static struct sk_buff *
 vbus_enet_flat_import(struct vbus_enet_priv *priv, struct ioq_ring_desc *desc)
 {
-	struct sk_buff *skb = (struct sk_buff *)desc->cookie;
+	struct sk_buff *skb = (struct sk_buff *)(unsigned long)desc->cookie;
 
 	if (!desc->len) {
 		/*
@@ -820,7 +820,7 @@ vbus_enet_tx_start(struct sk_buff *skb, struct net_device *dev)
 	BUG_ON(iter.desc->sown);
 
 	if (priv->sg) {
-		struct venet_sg *vsg = (struct venet_sg *)iter.desc->cookie;
+		struct venet_sg *vsg = (struct venet_sg *)(unsigned long)iter.desc->cookie;
 		struct scatterlist sgl[MAX_SKB_FRAGS+1];
 		struct scatterlist *sg;
 		int count, maxcount = ARRAY_SIZE(sgl);
@@ -829,7 +829,7 @@ vbus_enet_tx_start(struct sk_buff *skb, struct net_device *dev)
 
 		memset(vsg, 0, sizeof(*vsg));
 
-		vsg->cookie = (u64)skb;
+		vsg->cookie = (u64)(unsigned long)skb;
 		vsg->len    = skb->len;
 
 		if (skb->ip_summed == CHECKSUM_PARTIAL) {
@@ -877,7 +877,7 @@ vbus_enet_tx_start(struct sk_buff *skb, struct net_device *dev)
 		 * non scatter-gather mode: simply put the skb right onto the
 		 * ring.
 		 */
-		iter.desc->cookie = (u64)skb;
+		iter.desc->cookie = (u64)(unsigned long)skb;
 		iter.desc->len = (u64)skb->len;
 		iter.desc->ptr = (u64)__pa(skb->data);
 	}
@@ -954,10 +954,10 @@ vbus_enet_tx_reap_one(struct vbus_enet_priv *priv)
 		if (priv->sg) {
 			struct venet_sg *vsg;
 
-			vsg = (struct venet_sg *)iter.desc->cookie;
-			skb = (struct sk_buff *)vsg->cookie;
+			vsg = (struct venet_sg *)(unsigned long)iter.desc->cookie;
+			skb = (struct sk_buff *)(unsigned long)vsg->cookie;
 		} else
-			skb = (struct sk_buff *)iter.desc->cookie;
+			skb = (struct sk_buff *)(unsigned long)iter.desc->cookie;
 
 		/* Reset the descriptor */
 		iter.desc->valid  = 0;
@@ -1073,7 +1073,7 @@ evq_txc_event(struct vbus_enet_priv *priv,
 
 	vbus_enet_tx_reap(priv);
 
-	vbus_enet_skb_complete(priv, (struct sk_buff *)event->cookie);
+	vbus_enet_skb_complete(priv, (struct sk_buff *)(unsigned long)event->cookie);
 }
 
 static void
@@ -1101,7 +1101,7 @@ deferred_evq_isr(unsigned long data)
 	while (!iter.desc->sown) {
 		struct venet_event_header *header;
 
-		header = (struct venet_event_header *)iter.desc->cookie;
+		header = (struct venet_event_header *)(unsigned long)iter.desc->cookie;
 
 		switch (header->id) {
 		case VENET_EVENT_LINKSTATE:
@@ -1116,7 +1116,7 @@ deferred_evq_isr(unsigned long data)
 			break;
 		}
 
-		memset((void *)iter.desc->cookie, 0, priv->evq.evsize);
+		memset((void *)(unsigned long)iter.desc->cookie, 0, priv->evq.evsize);
 
 		/* Advance the in-use tail */
 		ret = ioq_iter_pop(&iter, 0);
@@ -1258,7 +1258,7 @@ vbus_enet_evq_negcap(struct vbus_enet_priv *priv, unsigned long count)
 			void *addr = &priv->evq.pool[offset];
 
 			iter.desc->ptr    = (u64)offset;
-			iter.desc->cookie = (u64)addr;
+			iter.desc->cookie = (u64)(unsigned long)addr;
 			iter.desc->len    = query.evsize;
 
 			ret = ioq_iter_push(&iter, 0);
diff --git a/drivers/vbus/pci-bridge.c b/drivers/vbus/pci-bridge.c
index 7051e73..07eb383 100644
--- a/drivers/vbus/pci-bridge.c
+++ b/drivers/vbus/pci-bridge.c
@@ -325,9 +325,10 @@ vbus_pci_device_shm(struct vbus_device_proxy *vdev, const char *name,
 		 */
 		shm_signal_get(&_signal->signal);
 
-		params.signal.offset = (u64)sdesc - (u64)ptr;
+		params.signal.offset = (u64)(unsigned long)sdesc -
+					(u64)(unsigned long)ptr;
 		params.signal.prio   = prio;
-		params.signal.cookie = (u64)_signal;
+		params.signal.cookie = (u64)(unsigned long)_signal;
 
 	} else
 		params.signal.offset = -1; /* yes, this is a u32, but its ok */
@@ -526,7 +527,7 @@ event_devdrop(struct vbus_pci_handle_event *event)
 static void
 event_shmsignal(struct vbus_pci_handle_event *event)
 {
-	struct _signal *_signal = (struct _signal *)event->handle;
+	struct _signal *_signal = (struct _signal *)(unsigned long)event->handle;
 	struct irq_desc *desc = _signal->desc;
 
 	vbus_pci.stats.notify++;
@@ -536,7 +537,7 @@ event_shmsignal(struct vbus_pci_handle_event *event)
 static void
 event_shmclose(struct vbus_pci_handle_event *event)
 {
-	struct _signal *_signal = (struct _signal *)event->handle;
+	struct _signal *_signal = (struct _signal *)(unsigned long)event->handle;
 
 	/*
 	 * This reference was taken during the DEVICESHM call
@@ -593,7 +594,7 @@ eventq_init(int qlen)
 
 		BUG_ON(iter.desc->valid);
 
-		desc->cookie = (u64)event;
+		desc->cookie = (u64)(unsigned long)event;
 		desc->ptr    = (u64)__pa(event);
 		desc->len    = len; /* total length  */
 		desc->valid  = 1;
@@ -643,7 +644,7 @@ eventq_wakeup(struct ioq_notifier *notifier)
 		struct ioq_ring_desc *desc  = iter.desc;
 		struct vbus_pci_event *event;
 
-		event = (struct vbus_pci_event *)desc->cookie;
+		event = (struct vbus_pci_event *)(unsigned long)desc->cookie;
 
 		switch (event->eventid) {
 		case VBUS_PCI_EVENT_DEVADD:
-- 
1.6.5.2

