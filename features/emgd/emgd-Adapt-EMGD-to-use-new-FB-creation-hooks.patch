From 7b659e83d8e8a87942d1d823f3b4ae973a48c296 Mon Sep 17 00:00:00 2001
From: Donn Seeley <donn.seeley@windriver.com>
Date: Tue, 12 Jun 2012 09:42:01 -0600
Subject: [PATCH 03/19] emgd: Adapt EMGD to use new FB creation hooks.

The following commit changed the way that FB creation operations are
performed:

  commit 308e5bcbdb10452e8aba31aa21432fb67ee46d72
  Author: Jesse Barnes <jbarnes@virtuousgeek.org>
  Date:   Mon Nov 14 14:51:28 2011 -0800

  drm: add an fb creation ioctl that takes a pixel format v5

Instead of a single handle or pitch field, we now must deal with 4 handles
and 4 pitches.  For drivers such as EMGD that don't support multiple
planes using the new DRM scheme, we just use handles[0] and pitches[0]
instead of handle and pitch.

Signed-off-by: Donn Seeley <donn.seeley@windriver.com>
---
 drivers/gpu/drm/emgd/emgd/drm/emgd_crtc.c  |    6 +++---
 drivers/gpu/drm/emgd/emgd/drm/emgd_fb.c    |   20 ++++++++++----------
 drivers/gpu/drm/emgd/emgd/drm/emgd_fbcon.c |   18 +++++++++++-------
 3 files changed, 24 insertions(+), 20 deletions(-)

diff --git a/drivers/gpu/drm/emgd/emgd/drm/emgd_crtc.c b/drivers/gpu/drm/emgd/emgd/drm/emgd_crtc.c
index 76e0235..12633d9 100644
--- a/drivers/gpu/drm/emgd/emgd/drm/emgd_crtc.c
+++ b/drivers/gpu/drm/emgd/emgd/drm/emgd_crtc.c
@@ -343,11 +343,11 @@ static int emgd_crtc_mode_set_base(struct drm_crtc *crtc, int x, int y,
 
 	plane_fb_info->width          = fb->width;
 	plane_fb_info->height         = fb->height;
-	plane_fb_info->screen_pitch   = fb->pitch;
+	plane_fb_info->screen_pitch   = fb->pitches[0];
 	plane_fb_info->flags          = 0;
 	plane_fb_info->allocated      = 1;
 	plane_fb_info->fb_base_offset = emgd_fb->gtt_offset;
-	plane_fb_info->visible_offset = (y * fb->pitch) +
+	plane_fb_info->visible_offset = (y * fb->pitches[0]) +
 		(x * (fb->bits_per_pixel / 8));
 
 
@@ -828,7 +828,7 @@ void emgd_flip_worker(struct work_struct *w)
 		/* Rendering complete; program the plane registers */
 		igd_surface.flags        = IGD_SURFACE_DISPLAY;
 		igd_surface.offset       = crtc->newfb->gtt_offset;
-		igd_surface.pitch        = crtc->newfb->base.pitch;
+		igd_surface.pitch        = crtc->newfb->base.pitches[0];
 		igd_surface.width        = crtc->newfb->base.width;
 		igd_surface.height       = crtc->newfb->base.height;
 		igd_surface.pixel_format = IGD_PF_ARGB32;
diff --git a/drivers/gpu/drm/emgd/emgd/drm/emgd_fb.c b/drivers/gpu/drm/emgd/emgd/drm/emgd_fb.c
index 6e00b27..d5981f9e 100644
--- a/drivers/gpu/drm/emgd/emgd/drm/emgd_fb.c
+++ b/drivers/gpu/drm/emgd/emgd/drm/emgd_fb.c
@@ -110,12 +110,12 @@ static void emgd_fbdev_destroy(drm_emgd_priv_t *priv);
  */
 int emgd_framebuffer_init(struct drm_device *dev,
 			emgd_framebuffer_t *emgd_fb,
-			struct drm_mode_fb_cmd *mode_cmd,
+                        struct drm_mode_fb_cmd2 *mode_cmd,
 			unsigned long offset);
 static struct drm_framebuffer *emgd_user_framebuffer_create(
 								struct drm_device *dev,
 								struct drm_file *filp,
-								struct drm_mode_fb_cmd *r);
+                                                                struct drm_mode_fb_cmd2 *r);
 RETURN_PROBE_TYPE  emgd_fb_probe(struct drm_device *dev);
 static int emgd_fb_panic(struct notifier_block *n,
 			unsigned long res,
@@ -815,7 +815,7 @@ EXPORT_SYMBOL(emgd_fb_probe);
 static struct drm_framebuffer *emgd_user_framebuffer_create(
 								struct drm_device *dev,
 								struct drm_file *filp,
-								struct drm_mode_fb_cmd *mode_cmd)
+                                                                struct drm_mode_fb_cmd2 *mode_cmd)
 {
 	emgd_framebuffer_t *emgd_fb;
 	int                 ret;
@@ -830,7 +830,7 @@ static struct drm_framebuffer *emgd_user_framebuffer_create(
 
 	/* Create a framebuffer instance */
 	ret = emgd_framebuffer_init(dev, emgd_fb, mode_cmd,
-			(unsigned long)mode_cmd->handle);
+                        (unsigned long)mode_cmd->handles[0]);
 	if (ret) {
 		EMGD_ERROR("Failed to create framebuffer instance.");
 		/* TODO: Free the allocation at mode_cmd->handle */
@@ -869,7 +869,7 @@ static struct drm_framebuffer *emgd_user_framebuffer_create(
  */
 int emgd_framebuffer_init(struct drm_device *dev,
 		emgd_framebuffer_t *emgd_fb,
-		struct drm_mode_fb_cmd *mode_cmd,
+                struct drm_mode_fb_cmd2 *mode_cmd,
 		unsigned long handle)
 {
 	drm_emgd_priv_t *dev_priv = NULL;
@@ -1165,7 +1165,7 @@ static int emgd_fb_create(emgd_fbdev_t *emgd_fbdev,
 	drm_emgd_priv_t        *priv    = emgd_fbdev->priv;
 	struct drm_device      *dev     = priv->ddev;
 	struct fb_info         *info    = NULL;
-	struct drm_mode_fb_cmd  mode_cmd;
+        struct drm_mode_fb_cmd2 mode_cmd;
 	struct drm_framebuffer *fb       = NULL;
 	igd_context_t          *context  = NULL;
 	int                     ret;
@@ -1199,12 +1199,12 @@ static int emgd_fb_create(emgd_fbdev_t *emgd_fbdev,
 	priv->initfb_info.allocated = 1;
 	priv->initfb_info.visible_offset = 0;
 
-	mode_cmd.handle = EMGD_INITIAL_FRAMEBUFFER;
-	mode_cmd.pitch  = priv->initfb_info.screen_pitch;
+        mode_cmd.handles[0] = EMGD_INITIAL_FRAMEBUFFER;
+        mode_cmd.pitches[0] = priv->initfb_info.screen_pitch;
 	mode_cmd.width  = surface_info->surface_width;
 	mode_cmd.height = surface_info->surface_height;
-	mode_cmd.bpp    = surface_info->surface_bpp;
-	mode_cmd.depth  = surface_info->surface_depth;
+        mode_cmd.pixel_format = drm_mode_legacy_fb_format(surface_info->surface_bpp,
+                                                          surface_info->surface_depth);
 
 	/* Allocate fb_info */
 	info = kzalloc(sizeof(struct fb_info), GFP_KERNEL);
diff --git a/drivers/gpu/drm/emgd/emgd/drm/emgd_fbcon.c b/drivers/gpu/drm/emgd/emgd/drm/emgd_fbcon.c
index 5132d33..b81fcc5 100644
--- a/drivers/gpu/drm/emgd/emgd/drm/emgd_fbcon.c
+++ b/drivers/gpu/drm/emgd/emgd/drm/emgd_fbcon.c
@@ -36,6 +36,7 @@
 #include <drmP.h>
 #include <drm_crtc_helper.h>
 #include <linux/vga_switcheroo.h>
+#include <linux/export.h>
 
 
 #include "user_config.h"
@@ -57,7 +58,7 @@ extern emgd_drm_config_t config_drm;
  */
 extern int emgd_framebuffer_init(struct drm_device *dev,
 			emgd_framebuffer_t *emgd_fb,
-			struct drm_mode_fb_cmd *mode_cmd,
+                        struct drm_mode_fb_cmd2 *mode_cmd,
 			unsigned long handle);
 
 
@@ -124,7 +125,7 @@ static void fill_fix(emgd_fbdev_t *emgd_fbdev, struct fb_info *info)
 	info->fix.ywrapstep   = 0;
 	info->fix.accel       = FB_ACCEL_NONE;
 	info->fix.type_aux    = 0;
-	info->fix.line_length = fb->pitch;
+        info->fix.line_length = fb->pitches[0];
 }
 
 
@@ -246,7 +247,9 @@ static int alloc_initial_fb(emgd_fbdev_t *emgd_fbdev)
 	igd_context_t          *context;
 	int                     ret;
 	unsigned long           size;
-	struct drm_mode_fb_cmd  mode_cmd;
+        struct drm_mode_fb_cmd2 mode_cmd;
+        __u32                   bpp;
+        __u32                   depth;
 
 	EMGD_TRACE_ENTER;
 
@@ -291,12 +294,13 @@ static int alloc_initial_fb(emgd_fbdev_t *emgd_fbdev)
 
 
 	/* Initialize emgd_framebuffer_t */
-	mode_cmd.handle = EMGD_INITIAL_FRAMEBUFFER;
-	mode_cmd.pitch  = priv->initfb_info.screen_pitch;
+        mode_cmd.handles[0] = EMGD_INITIAL_FRAMEBUFFER;
+        mode_cmd.pitches[0]  = priv->initfb_info.screen_pitch;
 	mode_cmd.width  = priv->initfb_info.width;
 	mode_cmd.height = priv->initfb_info.height;
-	mode_cmd.bpp    = IGD_PF_BPP(priv->initfb_info.pixel_format);
-	mode_cmd.depth  = mode_cmd.bpp;  /* Ok for 32bpp, may not work for 16bpp */
+        bpp = IGD_PF_BPP(priv->initfb_info.pixel_format);
+        depth = bpp;  /* Ok for 32bpp, may not work for 16bpp */
+        mode_cmd.pixel_format = drm_mode_legacy_fb_format(bpp, depth);
 
 	ret = emgd_framebuffer_init(dev, emgd_fbdev->emgd_fb, &mode_cmd,
 			EMGD_INITIAL_FRAMEBUFFER);
-- 
1.7.9.7

