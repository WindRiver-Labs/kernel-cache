From 5bc3f29bc227ee63bb1f3bbdada618e03c5ab0b1 Mon Sep 17 00:00:00 2001
From: Bruce Ashfield <bruce.ashfield@windriver.com>
Date: Sun, 7 Sep 2008 22:52:40 -0400
Subject: [PATCH 3/4] bsdjail: fix getprocattr to return useful information

Also we cannot unload a LSM when running the kernel.

Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>
Integrated-by: Liming Wang <liming.wang@windriver.com>
---
 security/bsdjail.c |   36 ++++++++++++++++++++++++++----------
 1 files changed, 26 insertions(+), 10 deletions(-)

diff --git a/security/bsdjail.c b/security/bsdjail.c
index 2e2e13d..7edc935 100644
--- a/security/bsdjail.c
+++ b/security/bsdjail.c
@@ -451,26 +451,38 @@ static int print_jail_net_info(struct jail_struct *j, char *buf, int maxcnt)
  * A process in a jail gets -EINVAL for /proc/$$/attr/exec.
  * A process not in a jail gets hints on starting a jail.
  */
+#define JAIL_BUF_SIZE 512
 static int
 jail_getprocattr(struct task_struct *p, char *name, char **value)
 {
 	int err = 0;
-#if 0 // XXX
 	struct jail_struct *tsec;
+	int size;
+	char *cp;
 
+	/* our caller (proc_pid_attr_read) will free this buffer */
+	cp = kmalloc(JAIL_BUF_SIZE, GFP_ATOMIC);
+	if (cp == NULL)
+                return -ENOMEM;
+	size = JAIL_BUF_SIZE;
+
+	/* are we currently in jail ? */
 	if (in_jail(current)) {
 		if (strcmp(name, "current")==0) {
 			/* provide network info */
-			err = print_jail_net_info(jail_of(current), *value,
+			err = print_jail_net_info(jail_of(current), cp,
 				size);
+			*value = cp;
 			return err;
 		}
+		*value = cp;
 		return -EINVAL;  /* let them guess why */
 	}
 
+	/* not in jail */
 	if (strcmp(name, "exec") == 0) {
 		/* Print usage some help */
-		err = snprintf(*value, size,
+		err = snprintf(cp, size,
 			"Valid keywords:\n"
 			"root    <pathname>\n"
 			"ip      <ip4-addr>\n"
@@ -479,17 +491,22 @@ jail_getprocattr(struct task_struct *p, char *name, char **value)
 			"slice   <max timeslice per process in msecs>\n"
 			"data    <max data size per process in bytes>\n"
 			"memlock <max lockable memory per process in bytes>\n");
+		*value = cp;
 		return err;
 	}
 
-	if (strcmp(name, "current"))
+	/* not in jail, and anything but "current" was asked for */
+	if (strcmp(name, "current")) {
+		*value = cp;
 		return -EPERM;
+	}
 
+	/* asking about another task .. */
 	tsec = jail_of(p);
 	if (!tsec || !in_use(tsec)) {
-		err = snprintf(*value, size, "Not Jailed\n");
+		err = snprintf(cp, size, "Not Jailed\n");
 	} else {
-		err = snprintf(*value, size,
+		err = snprintf(cp, size,
 			"Root: %s\nIP: %s\n"
 			"max_nrtask %d current nrtask %d max_timeslice %lu "
 			"nice %lu\n"
@@ -500,7 +517,7 @@ jail_getprocattr(struct task_struct *p, char *name, char **value)
 			tsec->nice, tsec->max_data, tsec->max_memlock);
 	}
 
-#endif
+	*value = cp;
 	return err;
 }
 
@@ -1358,9 +1375,8 @@ static int __init bsdjail_init (void)
 
 static void __exit bsdjail_exit (void)
 {
-/* bva: in 2.6.24 the unregister options have been removed, they
-	either need to be reinstated or make the module a one way
-	process */
+     /* You cannot unload a LSM. This was removed in the 2.6.24
+	timeframe */
 #if 0
 	if (unregister_security (&bsdjail_security_ops)) {
 		printk (KERN_INFO "Failure unregistering BSD Jail "
-- 
1.6.5.2

