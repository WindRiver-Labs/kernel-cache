--- 0002-tasklookup.patch	2008-08-08 14:49:35.000000000 -0400
+++ ../../../tmp-kernel-next-cache/features/bsdjail/0002-tasklookup.patch	2008-06-03 01:21:20.000000000 -0400
@@ -1,4 +1,3 @@
-From 07fbe441677d40a0d77d74e356f44ac3461073cc Mon Sep 17 00:00:00 2001
 From: Bruce Ashfield <bruce@windriver.com>
 Date: Mon, 24 Mar 2008 11:17:59 -0400
 Subject: [PATCH] bsdjail tasklookup
@@ -6,29 +5,31 @@
 Add the ability to lookup a task from bsdjail
 
 Signed-off-by: Bruce Ashfield  <bruce.ashfield@windriver.com>
+
 ---
  fs/proc/base.c           |    2 ++
  include/linux/security.h |   16 ++++++++++++++++
- 2 files changed, 18 insertions(+), 0 deletions(-)
+ security/dummy.c         |    6 ++++++
+ 3 files changed, 24 insertions(+), 0 deletions(-)
 
 diff --git a/fs/proc/base.c b/fs/proc/base.c
-index a28840b..beb44d0 100644
+index c447e07..a8c6bdd 100644
 --- a/fs/proc/base.c
 +++ b/fs/proc/base.c
-@@ -1987,6 +1987,8 @@ static struct dentry *proc_pident_lookup(struct inode *dir,
+@@ -1942,6 +1942,8 @@ static struct dentry *proc_pident_lookup(struct inode *dir,
  	for (p = ents; p <= last; p++) {
  		if (p->len != dentry->d_name.len)
  			continue;
-+		if (security_task_lookup(task))
++		if (security_task_lookup(p))
 +			continue;
  		if (!memcmp(dentry->d_name.name, p->name, p->len))
  			break;
  	}
 diff --git a/include/linux/security.h b/include/linux/security.h
-index fd96e7f..ddea425 100644
+index 50737c7..1c47f5c 100644
 --- a/include/linux/security.h
 +++ b/include/linux/security.h
-@@ -724,6 +724,11 @@ static inline void security_free_mnt_opts(struct security_mnt_opts *opts)
+@@ -728,6 +728,11 @@ static inline void security_free_mnt_opts(struct security_mnt_opts *opts)
   *	Set the security attributes in @p->security for a kernel thread that
   *	is being reparented to the init task.
   *	@p contains the task_struct for the kernel thread.
@@ -40,7 +41,7 @@
   * @task_to_inode:
   *	Set the security attributes for an inode based on an associated task's
   *	security attributes, e.g. for /proc/pid inodes.
-@@ -1428,6 +1433,7 @@ struct security_operations {
+@@ -1436,6 +1441,7 @@ struct security_operations {
  			   unsigned long arg3, unsigned long arg4,
  			   unsigned long arg5, long *rc_p);
  	void (*task_reparent_to_init) (struct task_struct *p);
@@ -48,7 +49,7 @@
  	void (*task_to_inode) (struct task_struct *p, struct inode *inode);
  
  	int (*ipc_permission) (struct kern_ipc_perm *ipcp, short flag);
-@@ -2285,6 +2291,16 @@ static inline void security_task_reparent_to_init(struct task_struct *p)
+@@ -2297,6 +2303,16 @@ static inline void security_task_reparent_to_init(struct task_struct *p)
  	cap_task_reparent_to_init(p);
  }
  
@@ -65,6 +66,30 @@
  static inline void security_task_to_inode(struct task_struct *p, struct inode *inode)
  { }
  
+diff --git a/security/dummy.c b/security/dummy.c
+index f50c6c3..bcf59d4 100644
+--- a/security/dummy.c
++++ b/security/dummy.c
+@@ -616,6 +616,11 @@ static void dummy_task_reparent_to_init (struct task_struct *p)
+ 	return;
+ }
+ 
++static int dummy_task_lookup(struct task_struct *p)
++{
++	return 0;
++}
++
+ static void dummy_task_to_inode(struct task_struct *p, struct inode *inode)
+ { }
+ 
+@@ -1141,6 +1146,7 @@ void security_fixup_ops (struct security_operations *ops)
+ 	set_to_dummy_if_null(ops, task_kill);
+ 	set_to_dummy_if_null(ops, task_prctl);
+ 	set_to_dummy_if_null(ops, task_reparent_to_init);
++	set_to_dummy_if_null(ops, task_lookup);
+  	set_to_dummy_if_null(ops, task_to_inode);
+ 	set_to_dummy_if_null(ops, ipc_permission);
+ 	set_to_dummy_if_null(ops, ipc_getsecid);
 -- 
 1.5.5.1
 
