From 1183522c811034211dbdcf62a40ab0f9c9748485 Mon Sep 17 00:00:00 2001
From: Li Wang <li.wang@windriver.com>
Date: Wed, 26 Aug 2015 10:56:58 +0800
Subject: [PATCH 68/68] arch/arm/mach-axxia: Fixed L2 power up failure

the patch comes from:
git://git.yoctoproject.org/linux-yocto-3.10
commit 87c1d0a694a7670b54e6e0e72e2f3614509ad333 upstream

This patch fixes the L2 power up failure. It insures
that there is only one allocation of the dickens
variable.

Signed-off-by: Charlie Paul <cpaul.windriver@gmail.com>
Signed-off-by: John Jacques <john.jacques@intel.com>
Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>
Signed-off-by: Li Wang <li.wang@windriver.com>
---
 arch/arm/mach-axxia/axxia.c                |    2 --
 arch/arm/mach-axxia/ddr_retention.c        |    5 ++++-
 arch/arm/mach-axxia/lsi_power_management.c |    8 ++++----
 3 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/arch/arm/mach-axxia/axxia.c b/arch/arm/mach-axxia/axxia.c
index cfb2f0c..8b2d6c8 100644
--- a/arch/arm/mach-axxia/axxia.c
+++ b/arch/arm/mach-axxia/axxia.c
@@ -65,8 +65,6 @@ static void __iomem *base;
 
 #ifdef CONFIG_KEXEC
 
-static void __iomem *dickens;
-
 static void set_l3_pstate(u32 newstate)
 {
 	static const u8 hnf[] = {
diff --git a/arch/arm/mach-axxia/ddr_retention.c b/arch/arm/mach-axxia/ddr_retention.c
index 79d498e..cb9ee2f 100644
--- a/arch/arm/mach-axxia/ddr_retention.c
+++ b/arch/arm/mach-axxia/ddr_retention.c
@@ -32,10 +32,13 @@
 #include <asm/io.h>
 #include <asm/cacheflush.h>
 #include <mach/ncr.h>
+#include "axxia.h"
 
 static void __iomem *nca;
 static void __iomem *apb;
-static void __iomem *dickens;
+#ifndef CONFIG_SMP
+void __iomem *dickens;
+#endif
 static int ddr_retention_enabled;
 extern int ncr_read_nolock(unsigned long, unsigned long, int, void *);
 extern int ncr_write_nolock(unsigned long, unsigned long, int, void *);
diff --git a/arch/arm/mach-axxia/lsi_power_management.c b/arch/arm/mach-axxia/lsi_power_management.c
index ddc3c98..6c8897f 100644
--- a/arch/arm/mach-axxia/lsi_power_management.c
+++ b/arch/arm/mach-axxia/lsi_power_management.c
@@ -544,12 +544,12 @@ int pm_cpu_powerup(u32 cpu)
 	if (first_cpu) {
 
 		rval = pm_L2_logical_powerup(cluster, cpu);
-		if (rval)
-			pr_info("CPU %d is powered up with cluster: %d\n", reqcpu, cluster);
-		else {
+		if (rval) {
 			pr_err("CPU: Failed the logical L2 power up\n");
 			goto pm_power_up;
-		}
+		} else
+			pr_info("CPU %d is powered up with cluster: %d\n", reqcpu, cluster);
+
 		cluster_power_up[cluster] = true;
 		pm_clear_bits_syscon_register(NCP_SYSCON_GIC_DISABLE, cluster_mask);
 
-- 
1.7.5.4

