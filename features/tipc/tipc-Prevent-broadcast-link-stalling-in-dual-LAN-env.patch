From 759fcf8f80cb8fe4173666f3fb2cfa318a92f71e Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Wed, 10 Nov 2010 22:22:09 -0800
Subject: [PATCH 03/22] tipc: Prevent broadcast link stalling in dual LAN environments

commit 43aa2d174e04208c82bebc7398398e15c2a210f2 from
http://tipc.cslab.ericsson.net/cgi-bin/gitweb.cgi?p=people/allan/tipc.git;a=shortlog;h=tipc1.7

Ensure that sequence number information about incoming broadcast link
messages is initialized only by the activation of the first link to a
given cluster node.  Previously, a race condition allowed reset and/or
activation messages for a second link to re-initialize this sequence
number information with obsolete values.  This could trigger TIPC to
request the retransmission of previously acknowledged broadcast link
messages from that node, resulting in broadcast link processing becoming
stalled if the node had already released one or more of those messages
and was unable to perform the required retransmission.

Thanks to Laser <gotolaser@gmail.com> for identifying this problem
and assisting in the development of this fix.

Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
integrated-by: Howard Xu <Hao.Xu@windriver.com>
---
 net/tipc/tipc_link.c |   14 +++++++-------
 1 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/net/tipc/tipc_link.c b/net/tipc/tipc_link.c
index 715df28..0b59753 100644
--- a/net/tipc/tipc_link.c
+++ b/net/tipc/tipc_link.c
@@ -2295,19 +2295,19 @@ static void link_recv_proto_msg(struct link *l_ptr, struct sk_buff *buf)
 			in_own_cluster(l_ptr->owner->elm.addr) &&
 			(max_pkt_info != 0);
 
-		link_state_event(l_ptr, msg_type(msg));
-
-		l_ptr->peer_session = msg_session(msg);
-		l_ptr->peer_bearer_id = msg_bearer_id(msg);
-
-		/* Synchronize broadcast link information */
+		/* Synchronize broadcast link info, if not done previously */
 
-		if (!tipc_node_has_redundant_links(l_ptr->owner)) {
+		if (!tipc_node_is_up(l_ptr->owner)) {
 			l_ptr->owner->bclink.last_sent =
 				l_ptr->owner->bclink.last_in =
 				msg_last_bcast(msg);
 			l_ptr->owner->bclink.oos_state = 0;
 		}
+
+		link_state_event(l_ptr, msg_type(msg));
+
+		l_ptr->peer_session = msg_session(msg);
+		l_ptr->peer_bearer_id = msg_bearer_id(msg);
 		break;
 	case STATE_MSG:
 
-- 
1.6.5.2

