From b9231fa326aa10023960dbfbddb5a6d4169b34b5 Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Thu, 17 Nov 2011 13:45:30 +0800
Subject: [PATCH] tipc: Eliminate broadcast link retransimit failure deadlock problem

Prevents deadlock from occurring during broadcast link retransmit
failure recovery. The problem arises if the thread handling the
broadcast link retransmit request takes the broadcast link lock
at the start of processing and then takes the node lock for the
requesting node once retransmission failure is declared; if another
thread simultaneously attempts to acknowledge receipt of broadcast
messages from that node -- meaning it first takes the node lock for
the node and then takes the broadcast link lock -- deadlock occurs.

Deadlock is now prevented by relocating the code that prints out
state information about the retransmit failure to a different thread
of control that already takes the node lock safely; this eliminates
the need for the first thread to take the node lock.

Signed-off-by: Ying Xue <ying.xue@windriver.com>
Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 net/tipc/tipc_link.c |   21 ++++++++-------------
 1 files changed, 8 insertions(+), 13 deletions(-)

diff --git a/net/tipc/tipc_link.c b/net/tipc/tipc_link.c
index 3bf2e20..9148eb5 100644
--- a/net/tipc/tipc_link.c
+++ b/net/tipc/tipc_link.c
@@ -1586,7 +1586,14 @@ static void link_reset_all(unsigned long addr)
 
 	tipc_node_lock(n_ptr);
 
-	tipc_addr_string_fill(addr_string, addr);
+	tipc_addr_string_fill(addr_string, n_ptr->elm.addr);
+	dbg_printf(TIPC_OUTPUT, "Broadcast link info for %s\n", addr_string);
+	dbg_printf(TIPC_OUTPUT, "Supported: %d,  ", n_ptr->bclink.supported);
+	dbg_printf(TIPC_OUTPUT, "Acked: %u\n", n_ptr->bclink.acked);
+	dbg_printf(TIPC_OUTPUT, "Last in: %u,  ", n_ptr->bclink.last_in);
+	dbg_printf(TIPC_OUTPUT, "Oos state: %u,  ", n_ptr->bclink.oos_state);
+	dbg_printf(TIPC_OUTPUT, "Last sent: %u\n", n_ptr->bclink.last_sent);
+
 	warn("Resetting all links to %s\n", addr_string);
 
 	for (i = 0; i < TIPC_MAX_BEARERS; i++) {
@@ -1619,27 +1626,15 @@ static void link_retransmit_failure(struct link *l_ptr, struct sk_buff *buf)
 		/* Handle failure on broadcast link */
 
 		struct tipc_node *n_ptr;
-		char addr_string[16];
 
 		dbg_printf(TIPC_OUTPUT, "Msg seq number: %u,  ", buf_seqno(buf));
 		dbg_printf(TIPC_OUTPUT, "Outstanding acks: %u\n", (u32)buf_handle(buf));
 		
 		/* recover retransmit requester */
 		n_ptr = (struct tipc_node *)l_ptr->owner->node_list.next;
-		tipc_node_lock(n_ptr);
-
-		tipc_addr_string_fill(addr_string, n_ptr->elm.addr);
-		dbg_printf(TIPC_OUTPUT, "Broadcast link info for %s\n", addr_string);
-		dbg_printf(TIPC_OUTPUT, "Supported: %d,  ", n_ptr->bclink.supported);
-		dbg_printf(TIPC_OUTPUT, "Acked: %u\n", n_ptr->bclink.acked);
-		dbg_printf(TIPC_OUTPUT, "Last in: %u,  ", n_ptr->bclink.last_in);
-		dbg_printf(TIPC_OUTPUT, "Oos state: %u,  ", n_ptr->bclink.oos_state);
-		dbg_printf(TIPC_OUTPUT, "Last sent: %u\n", n_ptr->bclink.last_sent);
 
 		tipc_k_signal((Handler)link_reset_all, (unsigned long)n_ptr->elm.addr);
 
-		tipc_node_unlock(n_ptr);
-
 		l_ptr->stale_count = 0;
 	}
 }
-- 
1.7.0.4

