From 90ae68cadc9f6b031bd5a8eafe85d6974a8f363c Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Fri, 5 Nov 2010 10:35:25 -0400
Subject: [PATCH 05/32] tipc: Eliminate warnings associated with print buffer size values

commit cff98cd23b01893ecdb1c7d4bd1869cd6b2f6600 from
git://tipc.cslab.ericsson.net/pub/git/people/allan/tipc.git

Reworks TIPC's print buffer code to record the buffer size using "size_t",
rather than "int". This prevents warnings about potential loss of high
order significant bits when the results of C library string manipulation
routines (which use "size_t") are used by print buffer routines.

Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Howard Xu <hao.xu@windriver.com>
---
 net/tipc/tipc_bcast.c      |    2 +-
 net/tipc/tipc_bcast.h      |    2 +-
 net/tipc/tipc_cfgsrv.c     |    2 +-
 net/tipc/tipc_dbg.c        |   26 +++++++++++++-------------
 net/tipc/tipc_dbg.h        |   12 ++++++------
 net/tipc/tipc_link.c       |    5 +++--
 net/tipc/tipc_name_table.c |    2 +-
 net/tipc/tipc_port.c       |    2 +-
 8 files changed, 27 insertions(+), 26 deletions(-)

diff --git a/net/tipc/tipc_bcast.c b/net/tipc/tipc_bcast.c
index b13973e..58708bf 100644
--- a/net/tipc/tipc_bcast.c
+++ b/net/tipc/tipc_bcast.c
@@ -734,7 +734,7 @@ void tipc_bcbearer_push(void)
 
 #ifdef CONFIG_TIPC_CONFIG_SERVICE
 
-int tipc_bclink_stats(char *buf, const u32 buf_size)
+size_t tipc_bclink_stats(char *buf, const size_t buf_size)
 {
 	struct print_buf pb;
 
diff --git a/net/tipc/tipc_bcast.h b/net/tipc/tipc_bcast.h
index a7de51d..0bc7b1e 100644
--- a/net/tipc/tipc_bcast.h
+++ b/net/tipc/tipc_bcast.h
@@ -97,7 +97,7 @@ void tipc_bclink_recv_pkt(struct sk_buff *buf);
 u32  tipc_bclink_get_last_sent(void);
 u32  tipc_bclink_acks_missing(struct tipc_node *n_ptr);
 void tipc_bclink_update_link_state(struct tipc_node *n_ptr, u32 last_sent);
-int  tipc_bclink_stats(char *stats_buf, const u32 buf_size);
+size_t tipc_bclink_stats(char *stats_buf, const size_t buf_size);
 int  tipc_bclink_reset_stats(void);
 int  tipc_bclink_set_queue_limits(u32 limit);
 void tipc_bcbearer_sort(void);
diff --git a/net/tipc/tipc_cfgsrv.c b/net/tipc/tipc_cfgsrv.c
index 8289daf..f1b196d 100644
--- a/net/tipc/tipc_cfgsrv.c
+++ b/net/tipc/tipc_cfgsrv.c
@@ -261,7 +261,7 @@ static struct sk_buff *tipc_show_stats(void)
 	struct sk_buff *buf;
 	struct tlv_desc *rep_tlv;
 	struct print_buf pb;
-	int str_len;
+	size_t str_len;
 	u32 value;
 
 	if (!TLV_CHECK(req_tlv_area, req_tlv_space, TIPC_TLV_UNSIGNED))
diff --git a/net/tipc/tipc_dbg.c b/net/tipc/tipc_dbg.c
index b1d5809..4606165 100644
--- a/net/tipc/tipc_dbg.c
+++ b/net/tipc/tipc_dbg.c
@@ -2,7 +2,7 @@
  * net/tipc/tipc_dbg.c: TIPC print buffer routines
  *
  * Copyright (c) 1996-2006, Ericsson AB
- * Copyright (c) 2005-2007, Wind River Systems
+ * Copyright (c) 2005-2007, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -100,7 +100,7 @@ static DEFINE_SPINLOCK(print_lock);
  * becomes a null device that discards anything written to it.
  */
 
-void tipc_printbuf_init(struct print_buf *pb, char *raw, u32 size)
+void tipc_printbuf_init(struct print_buf *pb, char *raw, size_t size)
 {
 	pb->buf = raw;
 	pb->crs = raw;
@@ -151,7 +151,7 @@ int tipc_printbuf_empty(struct print_buf *pb)
  * Returns length of print buffer data string (including trailing NUL)
  */
 
-int tipc_printbuf_validate(struct print_buf *pb)
+size_t tipc_printbuf_validate(struct print_buf *pb)
 {
 	char *err = "\n\n*** PRINT BUFFER OVERFLOW ***\n\n";
 	char *cp_buf;
@@ -187,7 +187,7 @@ int tipc_printbuf_validate(struct print_buf *pb)
 
 void tipc_printbuf_move(struct print_buf *pb_to, struct print_buf *pb_from)
 {
-	int len;
+	size_t len;
 
 	/* Handle the cases where contents can't be moved */
 
@@ -232,8 +232,8 @@ void tipc_printbuf_move(struct print_buf *pb_to, struct print_buf *pb_from)
 
 void tipc_printf(struct print_buf *pb, const char *fmt, ...)
 {
-	int chars_to_add;
-	int chars_left;
+	size_t chars_to_add;
+	size_t chars_left;
 	char save_char;
 
 	spin_lock_bh(&print_lock);
@@ -275,12 +275,12 @@ void tipc_printf(struct print_buf *pb, const char *fmt, ...)
  * print_to_console - write string of bytes to console in multiple chunks
  */
 
-static void print_to_console(char *crs, int len)
+static void print_to_console(char *crs, size_t len)
 {
-	int rest = len;
+	size_t rest = len;
 
 	while (rest > 0) {
-		int sz = rest < TIPC_PB_MAX_STR ? rest : TIPC_PB_MAX_STR;
+		size_t sz = rest < TIPC_PB_MAX_STR ? rest : TIPC_PB_MAX_STR;
 		char c = crs[sz];
 
 		crs[sz] = 0;
@@ -297,7 +297,7 @@ static void print_to_console(char *crs, int len)
 
 static void printbuf_dump_dbg(struct print_buf *pb)
 {
-	int len;
+	size_t len;
 
 	if (!pb->buf) {
 		printk("*** PRINT BUFFER NOT ALLOCATED ***");
@@ -323,7 +323,7 @@ static void printbuf_dump_dbg(struct print_buf *pb)
 
 void tipc_dump_dbg(struct print_buf *pb, const char *fmt, ...)
 {
-	int len;
+	size_t len;
 
 	if (pb == TIPC_CONS)
 		return;
@@ -352,7 +352,7 @@ void tipc_dump_dbg(struct print_buf *pb, const char *fmt, ...)
  * @log_size: print buffer size to use
  */
 
-int tipc_log_resize(int log_size)
+int tipc_log_resize(size_t log_size)
 {
 	int res = 0;
 
@@ -415,7 +415,7 @@ struct sk_buff *tipc_log_dump(void)
 	else {
 		struct tlv_desc *rep_tlv;
 		struct print_buf pb;
-		int str_len;
+		size_t str_len;
 
 		str_len = min(TIPC_LOG->size, 32768u);
 		spin_unlock_bh(&print_lock);
diff --git a/net/tipc/tipc_dbg.h b/net/tipc/tipc_dbg.h
index 1e6e989..d3e5111 100644
--- a/net/tipc/tipc_dbg.h
+++ b/net/tipc/tipc_dbg.h
@@ -2,7 +2,7 @@
  * net/tipc/tipc_dbg.h: Include file for TIPC print buffer routines
  *
  * Copyright (c) 1997-2006, Ericsson AB
- * Copyright (c) 2005-2007, Wind River Systems
+ * Copyright (c) 2005-2007, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -47,7 +47,7 @@
 
 struct print_buf {
 	char *buf;
-	u32 size;
+	size_t size;
 	char *crs;
 	int echo;
 };
@@ -55,16 +55,16 @@ struct print_buf {
 #define TIPC_PB_MIN_SIZE 64	/* minimum size for a print buffer's array */
 #define TIPC_PB_MAX_STR 512	/* max printable string (with trailing NUL) */
 
-void tipc_printbuf_init(struct print_buf *pb, char *buf, u32 size);
+void tipc_printbuf_init(struct print_buf *pb, char *buf, size_t size);
 void tipc_printbuf_reset(struct print_buf *pb);
 int  tipc_printbuf_empty(struct print_buf *pb);
-int  tipc_printbuf_validate(struct print_buf *pb);
+size_t tipc_printbuf_validate(struct print_buf *pb);
 void tipc_printbuf_move(struct print_buf *pb_to, struct print_buf *pb_from);
 
 #ifdef CONFIG_TIPC_CONFIG_SERVICE
-int tipc_log_resize(int log_size);
+int tipc_log_resize(size_t log_size);
 #else
-static inline int tipc_log_resize(int log_size) { return 0; }
+static inline int tipc_log_resize(size_t log_size) { return 0; }
 #endif
 struct sk_buff *tipc_log_resize_cmd(const void *req_tlv_area,
 				    int req_tlv_space);
diff --git a/net/tipc/tipc_link.c b/net/tipc/tipc_link.c
index cb4956f..ebe4c81 100644
--- a/net/tipc/tipc_link.c
+++ b/net/tipc/tipc_link.c
@@ -3316,7 +3316,8 @@ static u32 percent(u32 count, u32 total)
  * Returns length of print buffer data string (or 0 if error)
  */
 
-static int tipc_link_stats(const char *name, char *buf, const u32 buf_size)
+static size_t tipc_link_stats(const char *name, char *buf,
+			      const size_t buf_size)
 {
 	struct print_buf pb;
 	struct link *l_ptr;
@@ -3406,7 +3407,7 @@ struct sk_buff *tipc_link_cmd_show_stats(const void *req_tlv_area, int req_tlv_s
 {
 	struct sk_buff *buf;
 	struct tlv_desc *rep_tlv;
-	int str_len;
+	size_t str_len;
 
 	if (!TLV_CHECK(req_tlv_area, req_tlv_space, TIPC_TLV_LINK_NAME))
 		return tipc_cfg_reply_error_string(TIPC_CFG_TLV_ERROR);
diff --git a/net/tipc/tipc_name_table.c b/net/tipc/tipc_name_table.c
index 95a423e..f4dc6a5 100644
--- a/net/tipc/tipc_name_table.c
+++ b/net/tipc/tipc_name_table.c
@@ -1174,7 +1174,7 @@ struct sk_buff *tipc_nametbl_get(const void *req_tlv_area, int req_tlv_space)
 	struct tipc_name_table_query *argv;
 	struct tlv_desc *rep_tlv;
 	struct print_buf b;
-	int str_len;
+	size_t str_len;
 
 	if (!TLV_CHECK(req_tlv_area, req_tlv_space, TIPC_TLV_NAME_TBL_QUERY))
 		return tipc_cfg_reply_error_string(TIPC_CFG_TLV_ERROR);
diff --git a/net/tipc/tipc_port.c b/net/tipc/tipc_port.c
index 5bc2a23..bf5002e 100644
--- a/net/tipc/tipc_port.c
+++ b/net/tipc/tipc_port.c
@@ -713,7 +713,7 @@ struct sk_buff *tipc_port_get_ports(void)
 	struct tlv_desc *rep_tlv;
 	struct print_buf pb;
 	struct port *p_ptr;
-	int str_len;
+	size_t str_len;
 
 	buf = tipc_cfg_reply_alloc(TLV_SPACE(MAX_PORT_QUERY));
 	if (!buf)
-- 
1.7.0

