From 7036248fe2ab95b4a22449ec5bd70b24ffb2f663 Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Mon, 8 Nov 2010 10:46:15 -0500
Subject: [PATCH 12/32] tipc: Clean up tracking of node requesting a broadcast retransmit

commit 17488faac2ae163e0c47d76b2ecdfa47ec2635d6 from
git://tipc.cslab.ericsson.net/pub/git/people/allan/tipc.git

Allows the broadcast link to track the node that is requesting a retransmit
in a new field dedicated to that purpose. This replaces the existing
mechanism that (ab)uses an existing node structure linked list field to do
the tracking.

Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Howard Xu <hao.xu@windriver.com>
---
 net/tipc/tipc_bcast.c |   19 +++++++++++++++----
 net/tipc/tipc_bcast.h |    3 ++-
 net/tipc/tipc_link.c  |    3 +--
 3 files changed, 18 insertions(+), 7 deletions(-)

diff --git a/net/tipc/tipc_bcast.c b/net/tipc/tipc_bcast.c
index 58708bf..0e0812f 100644
--- a/net/tipc/tipc_bcast.c
+++ b/net/tipc/tipc_bcast.c
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004-2006, Ericsson AB
  * Copyright (c) 2004, Intel Corporation.
- * Copyright (c) 2005-2008, Wind River Systems
+ * Copyright (c) 2005-2008, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -104,6 +104,7 @@ struct bcbearer {
  * @link: (non-standard) broadcast link structure
  * @node: (non-standard) node structure representing b'cast link's peer node
  * @bcast_nodes: map of b'cast capable nodes in cluster
+ * @retransmit_to: node that most recently requested a retransmit
  * 
  * Handles sequence numbering, fragmentation, bundling, etc.
  */
@@ -112,6 +113,7 @@ struct bclink {
 	struct link link;
 	struct tipc_node node;
 	struct tipc_node_map bcast_nodes;
+	struct tipc_node *retransmit_to;
 };
 
 
@@ -171,6 +173,17 @@ static void bclink_update_last_sent(struct tipc_node *node, u32 seqno)
 }
 
 /**
+ * tipc_bclink_retransmit_to - get most recent node to request retransmission
+ *
+ * Called with bc_lock locked
+ */
+
+struct tipc_node *tipc_bclink_retransmit_to(void)
+{
+	return bclink->retransmit_to;
+}
+
+ /**
  * bclink_retransmit_pkt - retransmit broadcast packets
  * @after: sequence number of last packet to *not* retransmit
  * @to: sequence number of last packet to retransmit
@@ -440,9 +453,7 @@ void tipc_bclink_recv_pkt(struct sk_buff *buf)
 			tipc_node_unlock(node);
 			spin_lock_bh(&bc_lock);
 			bcl->stats.recv_nacks++;
-			/* remember retransmit requester */
-			bcl->owner->node_list.next = 
-				(struct list_head *)node;
+			bclink->retransmit_to = node;
 			bclink_retransmit_pkt(msg_bcgap_after(msg),
 					      msg_bcgap_to(msg));
 			spin_unlock_bh(&bc_lock);
diff --git a/net/tipc/tipc_bcast.h b/net/tipc/tipc_bcast.h
index 0bc7b1e..2e668d1 100644
--- a/net/tipc/tipc_bcast.h
+++ b/net/tipc/tipc_bcast.h
@@ -2,7 +2,7 @@
  * net/tipc/tipc_bcast.h: Include file for TIPC broadcast code
  *
  * Copyright (c) 2003-2006, Ericsson AB
- * Copyright (c) 2005-2008, Wind River Systems
+ * Copyright (c) 2005-2008, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -91,6 +91,7 @@ int  tipc_bclink_init(void);
 void tipc_bclink_stop(void);
 void tipc_bclink_add_node(u32 addr);
 void tipc_bclink_remove_node(u32 addr);
+struct tipc_node *tipc_bclink_retransmit_to(void);
 void tipc_bclink_acknowledge(struct tipc_node *n_ptr, u32 acked);
 int  tipc_bclink_send_msg(struct sk_buff *buf);
 void tipc_bclink_recv_pkt(struct sk_buff *buf);
diff --git a/net/tipc/tipc_link.c b/net/tipc/tipc_link.c
index 53df6d0..bad6403 100644
--- a/net/tipc/tipc_link.c
+++ b/net/tipc/tipc_link.c
@@ -1627,8 +1627,7 @@ static void link_retransmit_failure(struct link *l_ptr, struct sk_buff *buf)
 		dbg_printf(TIPC_OUTPUT, "Outstanding acks: %u\n",
 			   (u32)(unsigned long)(char *)buf_handle(buf));
 		
-		/* recover retransmit requester */
-		n_ptr = (struct tipc_node *)l_ptr->owner->node_list.next;
+                n_ptr = tipc_bclink_retransmit_to();
 		tipc_node_lock(n_ptr);
 
 		tipc_addr_string_fill(addr_string, n_ptr->elm.addr);
-- 
1.7.0

