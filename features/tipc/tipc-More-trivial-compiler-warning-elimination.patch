From 7474a79a378d547b05f3390edc3121d577f87d97 Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Mon, 15 Nov 2010 16:40:37 -0500
Subject: [PATCH 22/32] tipc: More trivial compiler warning elimination

commit 0050570d29e8906b42d1b1889ec2c50efd647a76 from
git://tipc.cslab.ericsson.net/pub/git/people/allan/tipc.git

Simplifies several comparison operations to eliminate warnings about
useless comparisons to see if an unsigned value is less than zero.
(Replaces some checks with assertions that will fail if symbols are
later redefined to be non-zero values.) Adds a type case to eliminate
warning about possible truncation of high order bits when assigning
an "unsigned int" to an "unsigned char".

Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Howard Xu <hao.xu@windriver.com>
---
 net/tipc/tipc_bearer.c |    8 ++++----
 net/tipc/tipc_cfgsrv.c |    2 +-
 net/tipc/tipc_dbg.c    |    2 +-
 net/tipc/tipc_link.c   |    4 ++--
 net/tipc/tipc_msg.h    |    2 +-
 5 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/net/tipc/tipc_bearer.c b/net/tipc/tipc_bearer.c
index 91110cd..be56dd1 100644
--- a/net/tipc/tipc_bearer.c
+++ b/net/tipc/tipc_bearer.c
@@ -119,8 +119,8 @@ int  tipc_register_media(struct tipc_media *m_ptr)
 	if (!media_name_valid(m_ptr->name)) {
 		goto exit;
 	}
-	if ((m_ptr->priority < TIPC_MIN_LINK_PRI) ||
-	    (m_ptr->priority > TIPC_MAX_LINK_PRI)) {
+	assert(TIPC_MIN_LINK_PRI == 0);
+	if (m_ptr->priority > TIPC_MAX_LINK_PRI) {
 		goto exit;
 	}
 	if ((m_ptr->tolerance < TIPC_MIN_LINK_TOL) || 
@@ -516,8 +516,8 @@ int tipc_enable_bearer(const char *name, u32 disc_domain, u32 priority)
 		warn("Bearer <%s> rejected, illegal discovery domain\n", name);
 		return -EINVAL;
 	}
-	if ((priority < TIPC_MIN_LINK_PRI ||
-	     priority > TIPC_MAX_LINK_PRI) &&
+	assert(TIPC_MIN_LINK_PRI == 0);
+	if ((priority > TIPC_MAX_LINK_PRI) &&
 	    (priority != TIPC_MEDIA_LINK_PRI)) {
 		warn("Bearer <%s> rejected, illegal priority\n", name);
 		return -EINVAL;
diff --git a/net/tipc/tipc_cfgsrv.c b/net/tipc/tipc_cfgsrv.c
index e65ea39..bb7100d 100644
--- a/net/tipc/tipc_cfgsrv.c
+++ b/net/tipc/tipc_cfgsrv.c
@@ -327,7 +327,7 @@ static struct sk_buff *cfg_set_max_remotes(void)
 	value = ntohl(*(__be32 *)TLV_DATA(req_tlv_area));
 	if (value == tipc_max_remotes)
 		return tipc_cfg_reply_none();
-	if (value != delimit(value, 0, 255))
+	if (value > 255)
 		return tipc_cfg_reply_error_string(TIPC_CFG_INVALID_VALUE
 						   " (max remotes must be 0-255)");
 	if (tipc_mode == TIPC_NET_MODE)
diff --git a/net/tipc/tipc_dbg.c b/net/tipc/tipc_dbg.c
index 0f65f28..30f2e4f 100644
--- a/net/tipc/tipc_dbg.c
+++ b/net/tipc/tipc_dbg.c
@@ -387,7 +387,7 @@ struct sk_buff *tipc_log_resize_cmd(const void *req_tlv_area, u32 req_tlv_space)
 		return tipc_cfg_reply_error_string(TIPC_CFG_TLV_ERROR);
 
 	value = ntohl(*(__be32 *)TLV_DATA(req_tlv_area));
-	if (value != delimit(value, 0, 32768))
+	if (value > 32768)
 		return tipc_cfg_reply_error_string(TIPC_CFG_INVALID_VALUE
 						   " (log size must be 0-32768)");
 	if (tipc_log_resize(value))
diff --git a/net/tipc/tipc_link.c b/net/tipc/tipc_link.c
index 97229de..848a550 100644
--- a/net/tipc/tipc_link.c
+++ b/net/tipc/tipc_link.c
@@ -3049,8 +3049,8 @@ static int value_is_valid(u16 cmd, u32 new_value)
 		return (new_value >= TIPC_MIN_LINK_TOL) &&
 			(new_value <= TIPC_MAX_LINK_TOL);
 	case TIPC_CMD_SET_LINK_PRI:
-		return (new_value >= TIPC_MIN_LINK_PRI) &&
-			(new_value <= TIPC_MAX_LINK_PRI);
+		assert(TIPC_MIN_LINK_PRI == 0);
+		return (new_value <= TIPC_MAX_LINK_PRI);
 	case TIPC_CMD_SET_LINK_WINDOW:
 		return (new_value >= TIPC_MIN_LINK_WIN) &&
 			(new_value <= TIPC_MAX_LINK_WIN);
diff --git a/net/tipc/tipc_msg.h b/net/tipc/tipc_msg.h
index 4330ade..8698080 100644
--- a/net/tipc/tipc_msg.h
+++ b/net/tipc/tipc_msg.h
@@ -544,7 +544,7 @@ static inline void msg_set_probe(struct tipc_msg *m, u32 val)
 
 static inline unsigned char msg_net_plane(struct tipc_msg *m)
 {
-	return msg_bits(m, 5, 1, 7) + 'A';
+	return (unsigned char)(msg_bits(m, 5, 1, 7) + 'A');
 }
 
 static inline void msg_set_net_plane(struct tipc_msg *m, unsigned char n)
-- 
1.7.0

