From cdf238de372372d16c7b07f74c9fa5f4dffb0a89 Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Wed, 10 Nov 2010 22:22:10 -0800
Subject: [PATCH 04/22] tipc: Prevent broadcast link stalling when another node fails

commit ffddd6d9e50c080559b62f630af37f996ccc4f44 from
http://tipc.cslab.ericsson.net/cgi-bin/gitweb.cgi?p=people/allan/tipc.git;a=shortlog;h=tipc1.7

Ensure that broadcast link messages that have not been acknowledged
by a newly failed node do not get an implied acknowledgement until the
failed node is removed from the broadcast link's map of reachable nodes.

Previously, a race condition allowed a new broadcast link message to be
sent after the implicit acknowledgement processing was completed, but
before the map of reachable nodes was updated, resulting in the message
having an expected acknowledgement count that required the failed node
to explicitly acknowledge the message. Since this would never occur
the new message would remain in the broadcast link's transmit queue
forever, eventually causing the link to become congested and "stall".
Delaying the implicit acknowledgement processing until after the update
of the map of reachable nodes eliminates this race condition and prevents
stalling.

Integrated-by: Howard Xu <Hao.Xu@windriver.com>
---
 net/tipc/tipc_node.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/net/tipc/tipc_node.c b/net/tipc/tipc_node.c
index 453f0a2..4905699 100644
--- a/net/tipc/tipc_node.c
+++ b/net/tipc/tipc_node.c
@@ -358,8 +358,8 @@ static void node_lost_contact(struct tipc_node *n_ptr)
 			n_ptr->bclink.defragm = NULL;
 		}
 
-		tipc_bclink_acknowledge(n_ptr, mod(n_ptr->bclink.acked + 10000));
 		tipc_bclink_remove_node(n_ptr->elm.addr);
+		tipc_bclink_acknowledge(n_ptr, mod(n_ptr->bclink.acked + 10000));
 
 		n_ptr->bclink.supported = 0;
 	}
-- 
1.6.5.2

