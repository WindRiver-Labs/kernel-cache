From b8bf18fee1269c9d8567dc6463f706ef4802edf9 Mon Sep 17 00:00:00 2001
From: Xue Ying <ying.xue@windriver.com>
Date: Wed, 30 May 2012 14:57:25 +0800
Subject: [PATCH] tipc: Resolve TIPC_ERR_OVERLOAD issue

Currently TIPC connection is broken due to overload of receive socket queue
when running tipcTC & tipcTS unit test. As an upstream patch
(commit id: a31deff4d20232dfc8370f0320e8b0925f5655b0) is ported back, it
triggers the issue happening. Why can the upstream patch cause the issue?
Please see the header description of the patch as belows:

    net: sk_add_backlog() take rmem_alloc into account

    commit c377411f2494a931ff7facdbb3a6839b1266bcf6 upstream.

    Current socket backlog limit is not enough to really stop DDOS attacks,
    because user thread spend many time to process a full backlog each
    round, and user might crazy spin on socket lock.

    We should add backlog size and receive_queue size (aka rmem_alloc) to
    pace writers, and let user run without being slow down too much.

    Introduce a sk_rcvqueues_full() helper, to avoid taking socket lock in
    stress situations.

    Under huge stress from a multiqueue/RPS enabled NIC, a single flow udp
    receiver can now process ~200.000 pps (instead of ~100 pps before the
    patch) on a 8 core machine.

The change to the socket infrastructure means that a burst of incoming messages
that arrives while an application is using the receiving socket can also cause
overload problems.

In this case our one workaround is probably to increase the size of the
receiving socket's SO_RCVBUF option to prevent the Linux kernel infrastructure
from unexpectedly returning TIPC_ERR_OVERLOAD in cases where this didn't
previously happen. However, on Linux socket layer, the size of socket's
SO_RCVBUF option is also limited so that the overload issue still occurs under
some extreme condition. To completely avoid it, bypassing the check
in sk_add_backlog() is probably the best choice for us.

Signed-off-by: Xue Ying <ying.xue@windriver.com>
---
 net/tipc/tipc_socket.c |    6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/net/tipc/tipc_socket.c b/net/tipc/tipc_socket.c
index bff06ac..7b4d3e9 100644
--- a/net/tipc/tipc_socket.c
+++ b/net/tipc/tipc_socket.c
@@ -1390,10 +1390,8 @@ static u32 dispatch(struct tipc_port *tport, struct sk_buff *buf)
 		res = filter_rcv(sk, buf);
 	} else {
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 34)
-		if (sk_add_backlog(sk, buf))
-			res = TIPC_ERR_OVERLOAD;
-		else
-			res = TIPC_OK;
+		__sk_add_backlog(sk, buf);
+		res = TIPC_OK;
 #else
 		sk_add_backlog(sk, buf);
 		res = TIPC_OK;
-- 
1.7.9.7

