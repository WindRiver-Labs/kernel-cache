From 0e3a0a460635e22a767cd53217e3809234f17969 Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Wed, 10 Nov 2010 22:22:21 -0800
Subject: [PATCH 15/22] tipc: Give sending of discovery responses priority over link messages

commit 481bc70071a637c873de1918f8a602ed92ed9abe from
http://tipc.cslab.ericsson.net/cgi-bin/gitweb.cgi?p=people/allan/tipc.git;a=shortlog;h=tipc1.7

Delay releasing the node lock when processing a neighbor discovery
message until after the optional discovery response message has been
sent. This helps ensure that any link protocol messages sent by a
link endpoint created as a result of a neighbor discovery request
are received after the discovery response is received, thereby
giving the receiving node a chance to create a peer link endpoint to
consume those link protocol messages, if one does not already exist.

Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Howard Xu <Hao.Xu@windriver.com>
---
 net/tipc/tipc_discover.c |   23 ++++++++++-------------
 1 files changed, 10 insertions(+), 13 deletions(-)

diff --git a/net/tipc/tipc_discover.c b/net/tipc/tipc_discover.c
index 0abb898..0afacc8 100644
--- a/net/tipc/tipc_discover.c
+++ b/net/tipc/tipc_discover.c
@@ -404,24 +404,21 @@ void tipc_disc_recv_msg(struct sk_buff *buf, struct bearer *b_ptr)
 		}
 	}
 
-	/* Accept node info in discovery message */
+	/* Accept discovery message & send response, if necessary */
 
 	n_ptr->flags = node_flags;
         link_fully_up = link_working_working(link);
-        tipc_node_unlock(n_ptr);
 
-	/* Send response to discovery message, if necessary */
-
-        if ((type == DSC_RESP_MSG) || link_fully_up)
-                return;
-        if (b_ptr->publ.blocked)
-		return;
-        rbuf = disc_init_msg(DSC_RESP_MSG, orig, b_ptr);
-        if (rbuf != NULL) {
-                msg_dbg(buf_msg(rbuf), "SEND:");
-                tipc_bearer_send(b_ptr, rbuf, &media_addr);
-		buf_discard(rbuf);
+	if ((type == DSC_REQ_MSG) && !link_fully_up && !b_ptr->publ.blocked) {
+		rbuf = disc_init_msg(DSC_RESP_MSG, orig, b_ptr);
+		if (rbuf != NULL) {
+			msg_dbg(buf_msg(rbuf), "SEND:");
+			tipc_bearer_send(b_ptr, rbuf, &media_addr);
+			buf_discard(rbuf);
+		}
 	}
+
+	tipc_node_unlock(n_ptr);
 }
 
 /**
-- 
1.6.5.2

