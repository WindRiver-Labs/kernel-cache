From 83c2d0b91fbf133ad8d812bee16d7d572fe10ba9 Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Fri, 5 Nov 2010 11:25:35 -0400
Subject: [PATCH 08/32] tipc: Corrections to configuration code

commit f2f9e9b13f900469fba68deca1caa036d7a7824d from
git://tipc.cslab.ericsson.net/pub/git/people/allan/tipc.git

Modifies TIPC's configuration-related code to standardize the types
that signify the size of items used in configuration messages;
all size values (whether 16 bit, 32 bit, or size_t) are now unsigned.
These changes correct several places where a size value could be
accidentally truncated and also eliminate warnings where a mix of
signed and unsigned values are involved.

Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Howard Xu <hao.xu@windriver.com>
---
 include/linux/tipc_config.h |   25 +++++++++++++------------
 net/tipc/tipc_cfgsrv.c      |   12 ++++++------
 net/tipc/tipc_cfgsrv.h      |    8 ++++----
 net/tipc/tipc_dbg.c         |    2 +-
 net/tipc/tipc_dbg.h         |    2 +-
 net/tipc/tipc_discover.c    |    4 ++--
 net/tipc/tipc_discover.h    |    4 ++--
 net/tipc/tipc_link.c        |    8 ++++----
 net/tipc/tipc_link.h        |   10 +++++-----
 net/tipc/tipc_name_table.c  |    4 ++--
 net/tipc/tipc_name_table.h  |    4 ++--
 net/tipc/tipc_node.c        |    4 ++--
 net/tipc/tipc_node.h        |    4 ++--
 net/tipc/tipc_port.h        |    4 ++--
 14 files changed, 48 insertions(+), 47 deletions(-)

diff --git a/include/linux/tipc_config.h b/include/linux/tipc_config.h
index 4ee46f2..36ac21f 100644
--- a/include/linux/tipc_config.h
+++ b/include/linux/tipc_config.h
@@ -2,7 +2,7 @@
  * include/linux/tipc_config.h: Include file for TIPC configuration interface
  * 
  * Copyright (c) 2003-2006, Ericsson AB
- * Copyright (c) 2005-2007, Wind River Systems
+ * Copyright (c) 2005-2007, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -289,14 +289,15 @@ struct tlv_desc {
 	__be16 tlv_type;	/* TLV identifier */
 };
 
-#define TLV_ALIGNTO 4
+#define TLV_ALIGNTO 4u
 
-#define TLV_ALIGN(datalen) (((datalen)+(TLV_ALIGNTO-1)) & ~(TLV_ALIGNTO-1))
-#define TLV_LENGTH(datalen) (sizeof(struct tlv_desc) + (datalen))
+#define TLV_ALIGN(datalen) \
+		((__u16)(((datalen)+(TLV_ALIGNTO-1)) & ~(TLV_ALIGNTO-1)))
+#define TLV_LENGTH(datalen) ((__u16)(sizeof(struct tlv_desc) + (datalen)))
 #define TLV_SPACE(datalen) (TLV_ALIGN(TLV_LENGTH(datalen)))
 #define TLV_DATA(tlv) ((void *)((char *)(tlv) + TLV_LENGTH(0)))
 
-static inline int TLV_OK(const void *tlv, __u16 space)
+static inline int TLV_OK(const void *tlv, __u32 space)
 {
 	/*
 	 * Would also like to check that "tlv" is a multiple of 4,
@@ -311,13 +312,13 @@ static inline int TLV_OK(const void *tlv, __u16 space)
 		(ntohs(((struct tlv_desc *)tlv)->tlv_len) <= space);
 }
 
-static inline int TLV_CHECK(const void *tlv, __u16 space, __u16 exp_type)
+static inline int TLV_CHECK(const void *tlv, __u32 space, __u16 exp_type)
 {
 	return TLV_OK(tlv, space) && 
 		(ntohs(((struct tlv_desc *)tlv)->tlv_type) == exp_type);
 }
 
-static inline int TLV_SET(void *tlv, __u16 type, void *data, __u16 len)
+static inline __u16 TLV_SET(void *tlv, __u16 type, void *data, size_t len)
 {
 	struct tlv_desc *tlv_ptr;
 	__u16 tlv_len;
@@ -409,16 +410,16 @@ struct tipc_cfg_msg_hdr
 #define TCM_F_REQUEST	0x1	/* Flag: Request message */
 #define TCM_F_MORE	0x2	/* Flag: Message to be continued */
 
-#define TCM_ALIGN(datalen)  (((datalen)+3) & ~3)
-#define TCM_LENGTH(datalen) (sizeof(struct tipc_cfg_msg_hdr) + datalen)
+#define TCM_ALIGN(datalen)  ((__u32)(((datalen)+3) & ~3))
+#define TCM_LENGTH(datalen) ((__u32)(sizeof(struct tipc_cfg_msg_hdr) + datalen))
 #define TCM_SPACE(datalen)  (TCM_ALIGN(TCM_LENGTH(datalen)))
 #define TCM_DATA(tcm_hdr)   ((void *)((char *)(tcm_hdr) + TCM_LENGTH(0)))
 
-static inline int TCM_SET(void *msg, __u16 cmd, __u16 flags,
-			  void *data, __u16 data_len)
+static inline __u32 TCM_SET(void *msg, __u16 cmd, __u16 flags,
+			    void *data, __u32 data_len)
 {
 	struct tipc_cfg_msg_hdr *tcm_hdr;
-	int msg_len;
+	__u32 msg_len;
 
 	msg_len = TCM_LENGTH(data_len);
 	tcm_hdr = (struct tipc_cfg_msg_hdr *)msg;
diff --git a/net/tipc/tipc_cfgsrv.c b/net/tipc/tipc_cfgsrv.c
index f1b196d..5900f2b 100644
--- a/net/tipc/tipc_cfgsrv.c
+++ b/net/tipc/tipc_cfgsrv.c
@@ -2,7 +2,7 @@
  * net/tipc/tipc_cfgsrv.c: TIPC configuration service code
  *
  * Copyright (c) 2002-2006, Ericsson AB
- * Copyright (c) 2004-2007, Wind River Systems
+ * Copyright (c) 2004-2007, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -58,8 +58,8 @@ static struct manager mng = { 0 };
 static DEFINE_SPINLOCK(config_lock);
 
 static const void *req_tlv_area;	/* request message TLV area */
-static int req_tlv_space;		/* request message TLV area size */
-static int rep_headroom;		/* reply message headroom to use */
+static u32 req_tlv_space;		/* request message TLV area size */
+static u32 rep_headroom;		/* reply message headroom to use */
 
 
 struct sk_buff *tipc_cfg_reply_alloc(int payload_size)
@@ -73,7 +73,7 @@ struct sk_buff *tipc_cfg_reply_alloc(int payload_size)
 }
 
 int tipc_cfg_append_tlv(struct sk_buff *buf, int tlv_type,
-			void *tlv_data, int tlv_data_size)
+			void *tlv_data, size_t tlv_data_size)
 {
 	struct tlv_desc *tlv = (struct tlv_desc *)skb_tail_pointer(buf);
 	int new_tlv_space = TLV_SPACE(tlv_data_size);
@@ -107,7 +107,7 @@ struct sk_buff *tipc_cfg_reply_unsigned_type(u16 tlv_type, u32 value)
 struct sk_buff *tipc_cfg_reply_string_type(u16 tlv_type, char *string)
 {
 	struct sk_buff *buf;
-	int string_len = strlen(string) + 1;
+	size_t string_len = strlen(string) + 1;
 
 	buf = tipc_cfg_reply_alloc(TLV_SPACE(string_len));
 	if (buf)
@@ -495,7 +495,7 @@ static struct sk_buff *cfg_set_netid(void)
 }
 
 struct sk_buff *tipc_cfg_do_cmd(u32 orig_node, u16 cmd, const void *request_area,
-				int request_space, int reply_headroom)
+				u32 request_space, u32 reply_headroom)
 {
 	struct sk_buff *rep_tlv_buf;
 
diff --git a/net/tipc/tipc_cfgsrv.h b/net/tipc/tipc_cfgsrv.h
index 8a397ab..984437c 100644
--- a/net/tipc/tipc_cfgsrv.h
+++ b/net/tipc/tipc_cfgsrv.h
@@ -2,7 +2,7 @@
  * net/tipc/tipc_cfgsrv.h: Include file for TIPC configuration service code
  *
  * Copyright (c) 2003-2006, Ericsson AB
- * Copyright (c) 2005, Wind River Systems
+ * Copyright (c) 2005, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -44,7 +44,7 @@
 
 struct sk_buff *tipc_cfg_reply_alloc(int payload_size);
 int tipc_cfg_append_tlv(struct sk_buff *buf, int tlv_type,
-			void *tlv_data, int tlv_data_size);
+			void *tlv_data, size_t tlv_data_size);
 struct sk_buff *tipc_cfg_reply_unsigned_type(u16 tlv_type, u32 value);
 struct sk_buff *tipc_cfg_reply_string_type(u16 tlv_type, char *string);
 
@@ -69,8 +69,8 @@ static inline struct sk_buff *tipc_cfg_reply_ultra_string(char *string)
 }
 
 struct sk_buff *tipc_cfg_do_cmd(u32 orig_node, u16 cmd,
-				const void *req_tlv_area, int req_tlv_space,
-				int headroom);
+				const void *req_tlv_area, u32 req_tlv_space,
+				u32 headroom);
 
 int  tipc_cfg_init(void);
 void tipc_cfg_stop(void);
diff --git a/net/tipc/tipc_dbg.c b/net/tipc/tipc_dbg.c
index 4606165..0f65f28 100644
--- a/net/tipc/tipc_dbg.c
+++ b/net/tipc/tipc_dbg.c
@@ -379,7 +379,7 @@ int tipc_log_resize(size_t log_size)
  * tipc_log_resize_cmd - reconfigure size of TIPC log buffer
  */
 
-struct sk_buff *tipc_log_resize_cmd(const void *req_tlv_area, int req_tlv_space)
+struct sk_buff *tipc_log_resize_cmd(const void *req_tlv_area, u32 req_tlv_space)
 {
 	u32 value;
 
diff --git a/net/tipc/tipc_dbg.h b/net/tipc/tipc_dbg.h
index d3e5111..bc9303f 100644
--- a/net/tipc/tipc_dbg.h
+++ b/net/tipc/tipc_dbg.h
@@ -67,7 +67,7 @@ int tipc_log_resize(size_t log_size);
 static inline int tipc_log_resize(size_t log_size) { return 0; }
 #endif
 struct sk_buff *tipc_log_resize_cmd(const void *req_tlv_area,
-				    int req_tlv_space);
+				    u32 req_tlv_space);
 struct sk_buff *tipc_log_dump(void);
 
 #endif
diff --git a/net/tipc/tipc_discover.c b/net/tipc/tipc_discover.c
index 0afacc8..c1818cf 100644
--- a/net/tipc/tipc_discover.c
+++ b/net/tipc/tipc_discover.c
@@ -2,7 +2,7 @@
  * net/tipc/tipc_discover.c: TIPC neighbor discovery code
  * 
  * Copyright (c) 2003-2006, Ericsson AB
- * Copyright (c) 2005-2008, Wind River Systems
+ * Copyright (c) 2005-2008, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -85,7 +85,7 @@ static int disc_addr_match(struct tipc_media_addr *ma1, u32 ta1,
 }
 
 struct sk_buff *tipc_disc_cmd_create_link(const void *disc_tlv_area, 
-					  int disc_tlv_space) 
+					  u32 disc_tlv_space) 
 {
         char *cmd_str;
 	char cmd[TIPC_MAX_BEARER_NAME + TIPC_MAX_MEDIA_ADDR + TIPC_MAX_ADDR + 1];
diff --git a/net/tipc/tipc_discover.h b/net/tipc/tipc_discover.h
index 7cb6f62..38b74db 100644
--- a/net/tipc/tipc_discover.h
+++ b/net/tipc/tipc_discover.h
@@ -2,7 +2,7 @@
  * net/tipc/tipc_discover.h: Include file for TIPC neighbor discovery code
  *
  * Copyright (c) 2003-2006, Ericsson AB
- * Copyright (c) 2005-2007, Wind River Systems
+ * Copyright (c) 2005-2007, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -70,6 +70,6 @@ void tipc_disc_deactivate(struct discoverer *d_ptr);
 void tipc_disc_recv_msg(struct sk_buff *buf, struct bearer *b_ptr);
 void tipc_disc_send_msg(struct discoverer *d_ptr);
 struct sk_buff *tipc_disc_cmd_create_link(const void *disc_tlv_area, 
-					  int disc_tlv_space);
+					  u32 disc_tlv_space);
 
 #endif
diff --git a/net/tipc/tipc_link.c b/net/tipc/tipc_link.c
index 0ec7773..435d08c 100644
--- a/net/tipc/tipc_link.c
+++ b/net/tipc/tipc_link.c
@@ -3122,7 +3122,7 @@ static int cmd_set_link_value(const char *name, u32 new_value, u16 cmd)
 }
 
 
-struct sk_buff *tipc_link_cmd_config(const void *req_tlv_area, int req_tlv_space,
+struct sk_buff *tipc_link_cmd_config(const void *req_tlv_area, u32 req_tlv_space,
 				     u16 cmd)
 {
 	struct tipc_link_config *args;
@@ -3171,7 +3171,7 @@ static void link_reset_statistics(struct link *l_ptr)
 
 #ifdef CONFIG_TIPC_CONFIG_SERVICE
 
-struct sk_buff *tipc_link_cmd_reset_stats(const void *req_tlv_area, int req_tlv_space)
+struct sk_buff *tipc_link_cmd_reset_stats(const void *req_tlv_area, u32 req_tlv_space)
 {
 	char *link_name;
 	struct link *l_ptr;
@@ -3202,7 +3202,7 @@ struct sk_buff *tipc_link_cmd_reset_stats(const void *req_tlv_area, int req_tlv_
 }
 
 #ifdef PROTO_MULTI_DISCOVERY_OBJECT
-struct sk_buff *tipc_link_cmd_delete(const void *req_tlv_area, int req_tlv_space)
+struct sk_buff *tipc_link_cmd_delete(const void *req_tlv_area, u32 req_tlv_space)
 {
         char *cmd_str;
 	char *link_name;
@@ -3403,7 +3403,7 @@ static size_t tipc_link_stats(const char *name, char *buf,
 
 #define MAX_LINK_STATS_INFO 2000
 
-struct sk_buff *tipc_link_cmd_show_stats(const void *req_tlv_area, int req_tlv_space)
+struct sk_buff *tipc_link_cmd_show_stats(const void *req_tlv_area, u32 req_tlv_space)
 {
 	struct sk_buff *buf;
 	struct tlv_desc *rep_tlv;
diff --git a/net/tipc/tipc_link.h b/net/tipc/tipc_link.h
index c0fefdc..f74f410 100644
--- a/net/tipc/tipc_link.h
+++ b/net/tipc/tipc_link.h
@@ -2,7 +2,7 @@
  * net/tipc/tipc_link.h: Include file for TIPC link code
  *
  * Copyright (c) 1995-2006, Ericsson AB
- * Copyright (c) 2004-2008, Wind River Systems
+ * Copyright (c) 2004-2008, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -231,10 +231,10 @@ int tipc_link_is_active(struct link *l_ptr);
 void tipc_link_start(struct link *l_ptr);
 u32 tipc_link_push_packet(struct link *l_ptr);
 void tipc_link_stop(struct link *l_ptr);
-struct sk_buff *tipc_link_cmd_delete(const void *req_tlv_area, int req_tlv_space);
-struct sk_buff *tipc_link_cmd_config(const void *req_tlv_area, int req_tlv_space, u16 cmd);
-struct sk_buff *tipc_link_cmd_show_stats(const void *req_tlv_area, int req_tlv_space);
-struct sk_buff *tipc_link_cmd_reset_stats(const void *req_tlv_area, int req_tlv_space);
+struct sk_buff *tipc_link_cmd_delete(const void *req_tlv_area, u32 req_tlv_space);
+struct sk_buff *tipc_link_cmd_config(const void *req_tlv_area, u32 req_tlv_space, u16 cmd);
+struct sk_buff *tipc_link_cmd_show_stats(const void *req_tlv_area, u32 req_tlv_space);
+struct sk_buff *tipc_link_cmd_reset_stats(const void *req_tlv_area, u32 req_tlv_space);
 void tipc_link_reset(struct link *l_ptr);
 int tipc_link_send(struct sk_buff *buf, u32 dest, u32 selector);
 int tipc_link_send_buf(struct link *l_ptr, struct sk_buff *buf);
diff --git a/net/tipc/tipc_name_table.c b/net/tipc/tipc_name_table.c
index f4dc6a5..dd0b45c 100644
--- a/net/tipc/tipc_name_table.c
+++ b/net/tipc/tipc_name_table.c
@@ -1168,7 +1168,7 @@ void tipc_nametbl_print(struct print_buf *buf, const char *str)
 
 #define MAX_NAME_TBL_QUERY 32768
 
-struct sk_buff *tipc_nametbl_get(const void *req_tlv_area, int req_tlv_space)
+struct sk_buff *tipc_nametbl_get(const void *req_tlv_area, u32 req_tlv_space)
 {
 	struct sk_buff *buf;
 	struct tipc_name_table_query *argv;
@@ -1697,7 +1697,7 @@ void tipc_routetbl_purge(u32 region_addr)
  */
 
 struct sk_buff *tipc_nametbl_get_routes(const void *req_tlv_area,
-					int req_tlv_space)
+					u32 req_tlv_space)
 {
 	u32 target;
 	u32 payload_size;
diff --git a/net/tipc/tipc_name_table.h b/net/tipc/tipc_name_table.h
index 0991dd2..cc6b14e 100644
--- a/net/tipc/tipc_name_table.h
+++ b/net/tipc/tipc_name_table.h
@@ -92,7 +92,7 @@ extern int tipc_own_routes;
 extern int tipc_all_routes;
 
 u32 tipc_nametbl_publ_port(void);
-struct sk_buff *tipc_nametbl_get(const void *req_tlv_area, int req_tlv_space);
+struct sk_buff *tipc_nametbl_get(const void *req_tlv_area, u32 req_tlv_space);
 u32 tipc_nametbl_translate(u32 type, u32 instance, u32 *node);
 int tipc_nametbl_mc_translate(u32 type, u32 lower, u32 upper, u32 limit,
 			 struct port_list *dports);
@@ -127,6 +127,6 @@ void tipc_routetbl_withdraw(unsigned long node_addr);
 void tipc_routetbl_withdraw_node(unsigned long node_addr);
 void tipc_routetbl_purge(u32 region_addr);
 struct sk_buff *tipc_nametbl_get_routes(const void *req_tlv_area,
-					int req_tlv_space);
+					u32 req_tlv_space);
 
 #endif
diff --git a/net/tipc/tipc_node.c b/net/tipc/tipc_node.c
index 3b83f64..66d9fef 100644
--- a/net/tipc/tipc_node.c
+++ b/net/tipc/tipc_node.c
@@ -442,7 +442,7 @@ u32 tipc_available_nodes(const u32 domain)
 
 #ifdef CONFIG_TIPC_CONFIG_SERVICE
 
-struct sk_buff *tipc_node_get_nodes(const void *req_tlv_area, int req_tlv_space)
+struct sk_buff *tipc_node_get_nodes(const void *req_tlv_area, u32 req_tlv_space)
 {
 	u32 domain;
 	struct sk_buff *buf;
@@ -493,7 +493,7 @@ struct sk_buff *tipc_node_get_nodes(const void *req_tlv_area, int req_tlv_space)
 	return buf;
 }
 
-struct sk_buff *tipc_node_get_links(const void *req_tlv_area, int req_tlv_space)
+struct sk_buff *tipc_node_get_links(const void *req_tlv_area, u32 req_tlv_space)
 {
 	u32 domain;
 	struct sk_buff *buf;
diff --git a/net/tipc/tipc_node.h b/net/tipc/tipc_node.h
index 0b8bba2..b2f12ac 100644
--- a/net/tipc/tipc_node.h
+++ b/net/tipc/tipc_node.h
@@ -100,8 +100,8 @@ int tipc_node_has_redundant_links(struct tipc_node *n_ptr);
 int tipc_node_is_up(struct tipc_node *n_ptr);
 struct tipc_node *tipc_node_attach_link(struct link *l_ptr);
 void tipc_node_detach_link(struct tipc_node *n_ptr, struct link *l_ptr);
-struct sk_buff *tipc_node_get_nodes(const void *req_tlv_area, int req_tlv_space);
-struct sk_buff *tipc_node_get_links(const void *req_tlv_area, int req_tlv_space);
+struct sk_buff *tipc_node_get_nodes(const void *req_tlv_area, u32 req_tlv_space);
+struct sk_buff *tipc_node_get_links(const void *req_tlv_area, u32 req_tlv_space);
 
 
 static inline void tipc_node_lock(struct tipc_node *n_ptr)
diff --git a/net/tipc/tipc_port.h b/net/tipc/tipc_port.h
index 539ff43..841eca4 100644
--- a/net/tipc/tipc_port.h
+++ b/net/tipc/tipc_port.h
@@ -2,7 +2,7 @@
  * net/tipc/tipc_port.h: Include file for TIPC port code
  *
  * Copyright (c) 1994-2007, Ericsson AB
- * Copyright (c) 2004-2008, Wind River Systems
+ * Copyright (c) 2004-2008, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -115,7 +115,7 @@ int tipc_port_reject_sections(struct port *p_ptr, struct tipc_msg *hdr,
 			      struct iovec const *msg_sect, u32 num_sect,
 			      int err);
 struct sk_buff *tipc_port_get_ports(void);
-struct sk_buff *port_show_stats(const void *req_tlv_area, int req_tlv_space);
+struct sk_buff *port_show_stats(const void *req_tlv_area, u32 req_tlv_space);
 void tipc_port_recv_proto_msg(struct sk_buff *buf);
 void tipc_port_recv_mcast(struct sk_buff *buf, struct port_list *dp);
 void tipc_port_reinit(void);
-- 
1.7.0

