From d6b4a8387e4b0d2810fda1c3d290a39f5e629618 Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Wed, 10 Nov 2010 22:22:11 -0800
Subject: [PATCH 05/22] tipc: Add missing lock when broadcast link sends NACK

commit 43ef3aff3fd3a460f92a78ec3b41427ed72655c9
http://tipc.cslab.ericsson.net/cgi-bin/gitweb.cgi?p=people/allan/tipc.git;a=shortlog;h=tipc1.7

Ensure that the broadcast link lock is held when the link sends
a NACK message requesting retransmission of lost messages.
This eliminates the risk of tipc_bcbearer_send() being invoked
simultaneously to send a NACK and to send normal broadcast link
traffic, which would result in certain broadcast link and broadcast
bearer data structure fields being manipulated in a potentially
inconsistent manner by both sends at the same time.

Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Howard Xu <Hao.Xu@windriver.com>
---
 net/tipc/tipc_bcast.c |    5 ++---
 1 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/net/tipc/tipc_bcast.c b/net/tipc/tipc_bcast.c
index 78264a1..9c537e8 100644
--- a/net/tipc/tipc_bcast.c
+++ b/net/tipc/tipc_bcast.c
@@ -292,12 +292,11 @@ void tipc_bclink_update_link_state(struct tipc_node *n_ptr, u32 last_sent)
 				 ? buf_seqno(n_ptr->bclink.deferred_head) - 1
 				 : n_ptr->bclink.last_sent);
 
-		tipc_bearer_send(&bcbearer->bearer, buf, NULL);
-		buf_discard(buf);
-
 		spin_lock_bh(&bc_lock);
+		tipc_bearer_send(&bcbearer->bearer, buf, NULL);
 		bcl->stats.sent_nacks++;
 		spin_unlock_bh(&bc_lock);
+		buf_discard(buf);
 
 		n_ptr->bclink.oos_state++;
 	}
-- 
1.6.5.2

