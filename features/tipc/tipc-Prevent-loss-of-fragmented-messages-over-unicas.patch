From 143401cfdb8e303366bff519198c8639bc31529c Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Wed, 10 Nov 2010 22:22:23 -0800
Subject: [PATCH 17/22] tipc: Prevent loss of fragmented messages over unicast links

commit 76a4ca0748b6d50082ecc080829ae1e3ca918f05
http://tipc.cslab.ericsson.net/cgi-bin/gitweb.cgi?p=people/allan/tipc.git;a=shortlog;h=tipc1.7

Modifies TIPC's unicast link endpoint so that an incoming fragmented
message is not lost if reassembly cannot begin because there currently
is no buffer big enough to hold the entire reassembled message. The link
endpoint now ignores the first fragment completely, which causes the
sending node to retransmit the first fragment so that reassembly can be
re-attempted.

Signed-off-by: Howard Xu <hao.xu@windriver.com>
Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Howard Xu <Hao.Xu@windriver.com>
---
 net/tipc/tipc_link.c |   13 ++++++++++---
 1 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/net/tipc/tipc_link.c b/net/tipc/tipc_link.c
index 436f67c..42d666d 100644
--- a/net/tipc/tipc_link.c
+++ b/net/tipc/tipc_link.c
@@ -1801,6 +1801,7 @@ void tipc_recv_msg(struct sk_buff *head, struct tipc_bearer *tb_ptr)
 		u32 seq_no;
 		u32 ackd;
 		u32 released;
+		int ret;
 
 		buf = head;
 		head = head->next;
@@ -1959,11 +1960,15 @@ deliver:
                                         break;
                                 case MSG_FRAGMENTER:
                                         l_ptr->stats.recv_fragments++;
-                                        if (tipc_link_recv_fragment(&l_ptr->defragm_buf, 
-                                                                    &buf, &msg)) {
+                                        ret = tipc_link_recv_fragment(
+						&l_ptr->defragm_buf,
+						&buf, &msg);
+                                        if (ret == 1) {
                                                 l_ptr->stats.recv_fragmented++;
                                                 goto deliver;
                                         }
+                                        if (ret == -1)
+                                            l_ptr->next_in_no--;
                                         break;
 #ifdef CONFIG_TIPC_MULTIPLE_LINKS
                                 case CHANGEOVER_PROTOCOL:
@@ -2856,7 +2861,9 @@ int tipc_link_recv_fragment(struct sk_buff **pending, struct sk_buff **fb,
 			set_expected_frags(pbuf,exp_fragm_cnt - 1); 
 			reset_timer_cnt(pbuf);
 		} else {
-			warn("Link unable to reassemble fragmented message\n");
+			dbg("Link unable to reassemble fragmented message\n");
+			buf_discard(fbuf);
+			return -1;
 		}
 		buf_discard(fbuf);
 		return 0;
-- 
1.6.5.2

