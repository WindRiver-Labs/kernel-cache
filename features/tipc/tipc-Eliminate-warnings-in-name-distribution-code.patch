From 3be7670af2f35ecdb02aa3fc5664e23816533383 Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Fri, 5 Nov 2010 14:40:32 -0400
Subject: [PATCH 09/32] tipc: Eliminate warnings in name distribution code

commit 9ca888d8aa1a03d68cadfb41ec2a387def8ac4ef from
git://tipc.cslab.ericsson.net/pub/git/people/allan/tipc.git

Changes types of size-related variables in TIPC's name distribution code
to standardize on "u32". This prevents warnings about potential loss of
high order significant bits and/or warnings where a mix of signed and
unsigned values are involved.

Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Howard Xu <hao.xu@windriver.com>
---
 net/tipc/tipc_name_distr.c |   28 ++++++++++++++--------------
 1 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/net/tipc/tipc_name_distr.c b/net/tipc/tipc_name_distr.c
index 6e03935..a7614ca 100644
--- a/net/tipc/tipc_name_distr.c
+++ b/net/tipc/tipc_name_distr.c
@@ -69,7 +69,7 @@
 typedef struct 
 {
 	struct list_head list;
-	int list_size;
+	u32 list_size;
 } dist_list_t;
  
 
@@ -167,7 +167,7 @@ static dist_list_t dist_name_list[NUM_DIST_LISTS] = {
  */
 
 static void name_to_item(struct publication *publ, int dist_mask,
-			 unchar *item, int item_size)
+			 unchar *item, u32 item_size)
 {
 	struct name_item *i = (struct name_item *)item;
 
@@ -210,10 +210,10 @@ static void item_to_name(struct publication *publ, int *dist_mask,
  * named_prepare_buf - allocate & initialize a name info message
  */
 
-static struct sk_buff *named_prepare_buf(u32 type, u32 num_items, int item_size, 
+static struct sk_buff *named_prepare_buf(u32 type, u32 num_items, u32 item_size, 
 					 u32 dest)
 {
-	u32 size = LONG_H_SIZE + num_items * (item_size * sizeof(u32));
+	u32 size = (u32)(LONG_H_SIZE + num_items * (item_size * sizeof(u32)));
 	struct sk_buff *buf = buf_acquire(size);  
 	struct tipc_msg *msg;
 
@@ -259,14 +259,14 @@ void tipc_named_remove_publ(struct publication *publ)
  */
 
 static void named_distribute(struct list_head *delivery_list, u32 dest_node,
-			     int dist_list_id, int dist_mask, int item_size)
+			     int dist_list_id, int dist_mask, u32 item_size)
 {
 	struct publication *publ;
 	struct sk_buff *buf = NULL;
 	unchar *item = NULL;
 	u32 buf_todo_items = 0;
-	u32 name_items_max = MAX_DIST_MSG_DATA / (item_size * sizeof(u32));
-	int list_cnt;
+	u32 name_items_max = (u32)(MAX_DIST_MSG_DATA/(item_size * sizeof(u32)));
+	u32 list_cnt;
 
 	list_cnt = dist_name_list[dist_list_id].list_size;
 
@@ -593,8 +593,8 @@ void tipc_named_recv(struct sk_buff *buf)
 	struct tipc_msg *msg = buf_msg(buf);
 	u32 type = msg_type(msg);
 	unchar *item = msg_data(msg);
-	int item_size = msg_item_size(msg);
-	int item_size_min = NAME_ITEM_SIZE;
+	u32 item_size = msg_item_size(msg);
+	u32 item_size_min = NAME_ITEM_SIZE;
 	u32 item_count;
 	int dist_mask;
 
@@ -612,7 +612,7 @@ void tipc_named_recv(struct sk_buff *buf)
 		warn("Invalid name table item received\n");
 		item_count = 0;
 	} else {
-		item_count = msg_data_sz(msg) / (item_size * sizeof(u32));
+		item_count = (u32)(msg_data_sz(msg)/(item_size * sizeof(u32)));
 	}
 
 	while (item_count--) {
@@ -739,7 +739,7 @@ struct route_item {
 };
 
 #define ROUTE_ITEM_SIZE     4
-#define ROUTE_ITEM_BYTES    (ROUTE_ITEM_SIZE * sizeof(u32))
+#define ROUTE_ITEM_BYTES    ((u32)(ROUTE_ITEM_SIZE * sizeof(u32)))
 #define ROUTE_ITEMS_MAX     (MAX_DIST_MSG_DATA / ROUTE_ITEM_BYTES)
 
 /*
@@ -803,7 +803,7 @@ static void item_to_route(struct publication *publ, int *dist_mask,
 
 static struct sk_buff *route_prepare_buf(u32 type, u32 num_items, u32 dest)
 {
-	u32 size = LONG_H_SIZE + (num_items * ROUTE_ITEM_BYTES);
+	u32 size = (u32)(LONG_H_SIZE + (num_items * ROUTE_ITEM_BYTES));
 	struct sk_buff *buf = buf_acquire(size);  
 	struct tipc_msg *msg;
 
@@ -856,7 +856,7 @@ static void route_distribute(struct list_head *delivery_list, u32 dest_node,
 	struct sk_buff *buf = NULL;
 	unchar *item = NULL;
 	u32 buf_todo_items = 0;
-	int list_cnt = dist_route_list[dist_list_id].list_size;
+	u32 list_cnt = dist_route_list[dist_list_id].list_size;
 
 	list_for_each_entry(publ, &dist_route_list[dist_list_id].list,
 			    distr_list) {
@@ -1085,7 +1085,7 @@ void tipc_route_recv(struct sk_buff *buf)
 		warn("Invalid routing table item received\n");
 		item_count = 0;
 	} else {
-		item_count = msg_data_sz(msg) / (item_size * sizeof(u32));
+		item_count = (u32)(msg_data_sz(msg)/(item_size * sizeof(u32)));
 	}
 
 	while (item_count--) {
-- 
1.7.0

