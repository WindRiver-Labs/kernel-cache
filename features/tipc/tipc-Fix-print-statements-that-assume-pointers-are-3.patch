From cf37b7ccbb7e0d0fd385773d469498ec1da80b4e Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Thu, 4 Nov 2010 15:20:19 -0400
Subject: [PATCH 01/32] tipc: Fix print statements that assume pointers are 32-bit values

commit f4de57d2cb76e085042491081b363ea55e7c6e0b from
git://tipc.cslab.ericsson.net/pub/git/people/allan/tipc.git

Corrects print statements that use %x to print pointer values to use
%p, so that 64-bit pointer values are displayed correctly.

Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Howard Xu <hao.xu@windriver.com>
---
 net/tipc/tipc_link.c   |   18 +++++++++---------
 net/tipc/tipc_node.c   |    2 +-
 net/tipc/tipc_topsrv.c |    6 +++---
 3 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/net/tipc/tipc_link.c b/net/tipc/tipc_link.c
index 5628c57..cb4956f 100644
--- a/net/tipc/tipc_link.c
+++ b/net/tipc/tipc_link.c
@@ -512,7 +512,7 @@ static void link_remote_delete(struct link *l_ptr)
 void tipc_link_start(struct link *l_ptr)
 {
 	tipc_node_lock(l_ptr->owner);
-	dbg("tipc_link_start %x\n", l_ptr);
+	dbg("tipc_link_start %p\n", l_ptr);
 	link_state_event(l_ptr, STARTING_EVT);
 	tipc_node_unlock(l_ptr->owner);
 }
@@ -1109,7 +1109,7 @@ int tipc_link_send(struct sk_buff *buf, u32 dest, u32 selector)
 		tipc_node_lock(n_ptr);
 		l_ptr = n_ptr->active_links[selector & 1];
 		if (l_ptr) {
-			dbg("tipc_link_send: found link %x for dest %x\n", l_ptr, dest);
+			dbg("tipc_link_send: found link %p for dest %x\n", l_ptr, dest);
 			res = tipc_link_send_buf(l_ptr, buf);
 		} else {
 			dbg("Attempt to send msg to unreachable node:\n");
@@ -1184,7 +1184,7 @@ int tipc_send_buf_fast(struct sk_buff *buf, u32 destnode)
 	if (likely(n_ptr)) {
 		tipc_node_lock(n_ptr);
 		l_ptr = n_ptr->active_links[selector];
-		dbg("send_fast: buf %x selected %x, destnode = %x\n",
+		dbg("send_fast: buf %p selected %p, destnode = %x\n",
 		    buf, l_ptr, destnode);
 		if (likely(l_ptr)) {
 			res = link_send_buf_fast(l_ptr, buf, &dummy);
@@ -1665,7 +1665,7 @@ void tipc_link_retransmit(struct link *l_ptr, struct sk_buff *buf,
 
 	msg = buf_msg(buf);
 
-	dbg("Retransmitting %u in link %x\n", retransmits, l_ptr);
+	dbg("Retransmitting %u in link %p\n", retransmits, l_ptr);
 
 	if (tipc_bearer_congested(l_ptr->b_ptr, l_ptr)) {
 		if (l_ptr->retransm_queue_size == 0) {
@@ -2898,7 +2898,7 @@ int tipc_link_recv_fragment(struct sk_buff **pending, struct sk_buff **fb,
 		set_expected_frags(pbuf,exp_frags);
 		return 0;
 	}
-	dbg(" Discarding orphan fragment %x\n",fbuf);
+	dbg(" Discarding orphan fragment %p\n",fbuf);
 	msg_dbg(fragm,"ORPHAN:");
 	dbg("Pending long buffers:\n");
 	dbg_print_buf_chain(*pending);
@@ -3514,7 +3514,7 @@ static void link_dump_rec_queue(struct link *l_ptr)
 	crs = l_ptr->oldest_deferred_in;
 	while (crs) {
 		if (crs->data == (void *)0x0000a3a3) {
-			info("buffer %x invalid\n", crs);
+			info("buffer %p invalid\n", crs);
 			return;
 		}
 		msg_dbg(buf_msg(crs), "In rec queue: \n");
@@ -3559,9 +3559,9 @@ static void dbg_print_link_state(struct print_buf *buf, struct link *l_ptr)
 		     != (l_ptr->out_queue_size - 1))
 		    || (l_ptr->last_out->next != 0)) {
 			tipc_printf(buf, "\nSend queue inconsistency\n");
-			tipc_printf(buf, "first_out= %x ", l_ptr->first_out);
-			tipc_printf(buf, "next_out= %x ", l_ptr->next_out);
-			tipc_printf(buf, "last_out= %x ", l_ptr->last_out);
+			tipc_printf(buf, "first_out= %p ", l_ptr->first_out);
+			tipc_printf(buf, "next_out= %p ", l_ptr->next_out);
+			tipc_printf(buf, "last_out= %p ", l_ptr->last_out);
 			link_dump_send_queue(l_ptr);
 		}
 	} else
diff --git a/net/tipc/tipc_node.c b/net/tipc/tipc_node.c
index 68480a6..82bbcec 100644
--- a/net/tipc/tipc_node.c
+++ b/net/tipc/tipc_node.c
@@ -418,7 +418,7 @@ void node_print(struct print_buf *buf, struct tipc_node *n_ptr, char *str)
 			continue;
 		tipc_printf(buf, "Links[%u]: %x, ", i, n_ptr->links[i]);
 	}
-	tipc_printf(buf, "Active links: [%x,%x]\n",
+	tipc_printf(buf, "Active links: [%p,%p]\n",
 		    n_ptr->active_links[0], n_ptr->active_links[1]);
 }
 #endif
diff --git a/net/tipc/tipc_topsrv.c b/net/tipc/tipc_topsrv.c
index 341f80d..3381b1f 100644
--- a/net/tipc/tipc_topsrv.c
+++ b/net/tipc/tipc_topsrv.c
@@ -2,7 +2,7 @@
  * net/tipc/tipc_topsrv.c: TIPC network topology service
  *
  * Copyright (c) 2000-2006, Ericsson AB
- * Copyright (c) 2005-2008, Wind River Systems
+ * Copyright (c) 2005-2008, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -252,7 +252,7 @@ static void subscr_terminate(struct subscriber *subscriber)
 			k_cancel_timer(&sub->timer);
 			k_term_timer(&sub->timer);
 		}
-		dbg("Term: Removing sub %u,%u,%u from subscriber %x list\n",
+		dbg("Term: Removing sub %u,%u,%u from subscriber %p list\n",
 		    sub->seq.type, sub->seq.lower, sub->seq.upper, subscriber);
 		subscr_del(sub);
 	}
@@ -310,7 +310,7 @@ static void subscr_cancel(struct tipc_subscr *s,
 		k_term_timer(&sub->timer);
 		spin_lock_bh(subscriber->lock);
 	}
-	dbg("Cancel: removing sub %u,%u,%u from subscriber %x list\n",
+	dbg("Cancel: removing sub %u,%u,%u from subscriber %p list\n",
 	    sub->seq.type, sub->seq.lower, sub->seq.upper, subscriber);
 	subscr_del(sub);
 }
-- 
1.7.0

