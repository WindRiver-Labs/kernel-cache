From a5332834d6e06ee59a1bca3589cc4495f77a96c8 Mon Sep 17 00:00:00 2001
From: Allan Stephens <allan.stephens@windriver.com>
Date: Fri, 5 Nov 2010 14:57:42 -0400
Subject: [PATCH 10/32] tipc: Miscellaneous warning removal in link and message code

commit f9a6248eec0e934929883df99f6f6e0c2c6def4d from
git://tipc.cslab.ericsson.net/pub/git/people/allan/tipc.git

Removes a variety of warnings in link and message code:

- Some loop counters are now unsigned to prevent complaints about
  comparisons involving both signed and unsigned values.
- Adds type casts and/or changes variable types to prevent complaints
  about potential loss   of high-order significant bits when values
  are stored into smaller containers.

Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Integrated-by: Howard Xu <hao.xu@windriver.com>
---
 net/tipc/tipc_link.c |   15 ++++++++-------
 net/tipc/tipc_msg.c  |   15 ++++++++-------
 2 files changed, 16 insertions(+), 14 deletions(-)

diff --git a/net/tipc/tipc_link.c b/net/tipc/tipc_link.c
index 435d08c..fedf42d 100644
--- a/net/tipc/tipc_link.c
+++ b/net/tipc/tipc_link.c
@@ -261,8 +261,8 @@ static int link_name_validate(const char *name, struct link_name *name_parts)
 	char dummy;
 	u32 z_local, c_local, n_local;
 	u32 z_peer, c_peer, n_peer;
-	u32 if_local_len;
-	u32 if_peer_len;
+	size_t if_local_len;
+	size_t if_peer_len;
 
 	/* copy link name & ensure length is OK */
 
@@ -1254,7 +1254,7 @@ exit:
 			if (link_congested(l_ptr) || 
 			    !list_empty(&l_ptr->b_ptr->cong_links)) {
 				link_schedule_port(l_ptr, sender->publ.ref,
-						   res);
+						   (u32)res);
 				res = -ELINKCONG;
 				goto exit;
 			}
@@ -1364,7 +1364,7 @@ again:
 		u32 sz;
 
 		if (!sect_rest) {
-			sect_rest = msg_sect[++curr_sect].iov_len;
+			sect_rest = (u32)msg_sect[++curr_sect].iov_len;
 			sect_crs = (const unchar *)msg_sect[curr_sect].iov_base;
 		}
 
@@ -1596,7 +1596,7 @@ static void link_reset_all(unsigned long addr)
 
 	tipc_node_lock(n_ptr);
 
-	tipc_addr_string_fill(addr_string, addr);
+	tipc_addr_string_fill(addr_string, (u32)addr);
 	warn("Resetting all links to %s\n", addr_string);
 
 	for (i = 0; i < TIPC_MAX_BEARERS; i++) {
@@ -1632,7 +1632,8 @@ static void link_retransmit_failure(struct link *l_ptr, struct sk_buff *buf)
 		char addr_string[16];
 
 		dbg_printf(TIPC_OUTPUT, "Msg seq number: %u,  ", buf_seqno(buf));
-		dbg_printf(TIPC_OUTPUT, "Outstanding acks: %u\n", (u32)buf_handle(buf));
+		dbg_printf(TIPC_OUTPUT, "Outstanding acks: %u\n",
+			   (u32)(unsigned long)(char *)buf_handle(buf));
 		
 		/* recover retransmit requester */
 		n_ptr = (struct tipc_node *)l_ptr->owner->node_list.next;
@@ -2761,7 +2762,7 @@ exit:
 
 static inline u32 get_long_msg_orig(struct sk_buff *buf)
 {
-	return (u32)(unsigned long)buf_handle(buf);
+	return (u32)(unsigned long)(char *)buf_handle(buf);
 }
 
 static inline void set_long_msg_orig(struct sk_buff *buf, u32 orig)
diff --git a/net/tipc/tipc_msg.c b/net/tipc/tipc_msg.c
index a4f24b6..cf1c5f6 100644
--- a/net/tipc/tipc_msg.c
+++ b/net/tipc/tipc_msg.c
@@ -2,7 +2,7 @@
  * net/tipc/msg.c: TIPC message header routines
  *
  * Copyright (c) 2000-2006, Ericsson AB
- * Copyright (c) 2005-2007, Wind River Systems
+ * Copyright (c) 2005-2007, 2010, Wind River Systems
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -53,7 +53,8 @@ int tipc_msg_build(struct tipc_msg *hdr,
 		   struct iovec const *msg_sect, u32 num_sect,
 		   int max_size, int usrmem, struct sk_buff** buf)
 {
-	int dsz, sz, hsz, pos, res, cnt;
+	int dsz, sz, hsz, pos, res;
+	u32 cnt;
 
 	dsz = tipc_msg_calc_data_size(msg_sect, num_sect);
 	if (unlikely(dsz > TIPC_MAX_USER_MSG_SIZE)) {
@@ -80,9 +81,9 @@ int tipc_msg_build(struct tipc_msg *hdr,
 					      msg_sect[cnt].iov_len);
 		else
 			skb_copy_to_linear_data_offset(*buf, pos,
-						       msg_sect[cnt].iov_base,
-						       msg_sect[cnt].iov_len);
-		pos += msg_sect[cnt].iov_len;
+					msg_sect[cnt].iov_base,
+					(unsigned int)msg_sect[cnt].iov_len);
+		pos += (int)msg_sect[cnt].iov_len;
 	}
 	if (likely(res))
 		return dsz;
@@ -115,10 +116,10 @@ void tipc_msg_init(struct tipc_msg *m, u32 user, u32 type,
 int tipc_msg_calc_data_size(struct iovec const *msg_sect, u32 num_sect)
 {
 	int dsz = 0;
-	int i;
+	u32 i;
 
 	for (i = 0; i < num_sect; i++)
-		dsz += msg_sect[i].iov_len;
+		dsz += (int)msg_sect[i].iov_len;
 	return dsz;
 }
 
-- 
1.7.0

