From 287955609a566f6c794c9e2ca507309286e3f19f Mon Sep 17 00:00:00 2001
From: Ying Xue <ying.xue@windriver.com>
Date: Tue, 29 May 2012 14:33:16 +0800
Subject: [PATCH 4/5] tipc: Keep protocol compatibility backwards

In previous patch a flag bit has been involved to indicate whether a node
supports the enhanced broadcast synchronization mechanism or not. But to keep
TIPC protocol interoperability between nodes which do not support the new
broadcast synchronization mechanism and nodes which do support the new
mechanism, there must have a mechanism which can ensure that a node can simply
fall back to using the existing broadcast synchronization mechanism if it
recognizes its peer node doesn't support the new synchronization mechanism.

Signed-off-by: Ying Xue <ying.xue@windriver.com>
---
 net/tipc/tipc_link.c |    5 ++++-
 net/tipc/tipc_node.c |    3 ++-
 net/tipc/tipc_node.h |    2 ++
 3 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/net/tipc/tipc_link.c b/net/tipc/tipc_link.c
index 9436868..d8c98e9 100644
--- a/net/tipc/tipc_link.c
+++ b/net/tipc/tipc_link.c
@@ -2249,6 +2249,7 @@ void tipc_link_send_proto_msg(struct link *l_ptr, u32 msg_typ, int probe_msg,
 	}
 
 	msg_set_stop(msg, 0);
+	msg_set_bclink_sync(msg, 1);
 	msg_set_redundant_link(msg, tipc_node_alt_link_is_up(l_ptr));
 	msg_set_linkprio(msg, l_ptr->priority);
 	msg_set_timestamp(msg, jiffies_to_msecs(jiffies));
@@ -2362,10 +2363,12 @@ static void link_recv_proto_msg(struct link *l_ptr, struct sk_buff *buf)
 			l_ptr->max_pkt = l_ptr->max_pkt_target;
 		}
 		l_ptr->owner->bclink.supportable = (char)(max_pkt_info != 0);
+		l_ptr->owner->bclink.sync = msg_bclink_sync(msg);
 
 		/* Synchronize broadcast link info, if not done previously */
 
-		if (!tipc_node_is_up(l_ptr->owner)) {
+		if (!tipc_node_is_up(l_ptr->owner) &&
+		    !l_ptr->owner->bclink.sync) {
 			l_ptr->owner->bclink.last_sent =
 				l_ptr->owner->bclink.last_in =
 				msg_last_bcast(msg);
diff --git a/net/tipc/tipc_node.c b/net/tipc/tipc_node.c
index badff8d..d182504 100644
--- a/net/tipc/tipc_node.c
+++ b/net/tipc/tipc_node.c
@@ -264,7 +264,8 @@ static void node_established_contact(struct tipc_node *n_ptr)
 
 		if (n_ptr->bclink.supportable) {
 			tipc_bclink_add_node(n_ptr->elm.addr);
-			n_ptr->bclink.supported = 1;
+			if (!n_ptr->bclink.sync)
+				n_ptr->bclink.supported = 1;
 		}
 	} else {
 
diff --git a/net/tipc/tipc_node.h b/net/tipc/tipc_node.h
index d812b9b..07142be 100644
--- a/net/tipc/tipc_node.h
+++ b/net/tipc/tipc_node.h
@@ -63,6 +63,7 @@
  * @bclink: broadcast-related info
  *    @supportable: non-zero if node supports TIPC b'cast link capability
  *    @supported: non-zero if node is currently part of b'cast link group
+ *    @sync: non-zero if node supports new broadcast synchronziation mechanism
  *    @acked: sequence # of last outbound b'cast message acknowledged by node
  *    @last_in: sequence # of last in-sequence b'cast message received from node
  *    @last_sent: sequence # of last b'cast message sent by node
@@ -87,6 +88,7 @@ struct tipc_node {
 	struct {
 		char supportable;
 		char supported;
+		u32 sync;
 		u32 acked;
 		u32 last_in;
 		u32 last_sent;
-- 
1.7.0

