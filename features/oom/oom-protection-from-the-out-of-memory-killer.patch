From 1e45bd4fbbd4e8d4f2fc71d5e2003eb46d785614 Mon Sep 17 00:00:00 2001
From: Greg Moffatt <greg.moffatt@windriver.com>
Date: Mon, 26 Apr 2010 05:56:01 -0700
Subject: [PATCH] oom: protection from the out-of-memory killer

OOM Protection Feature:

This adds a new capability to the kernel which
may be called (by processes with appropriate priviledges) to
request protection from the out-of-memory killer as long as
the process is using less than the specified amount of virtual
memory.  This is accomplished through a call to setrlimit().

It was possible to get unitialized results returned from
getrlimit/setrlimit calls with OOM_MAXVM flags if passed invalid options
and the limits had not been previously set.  This also corrects a minor
race condition in getrlimit where the structure to be filled out with
OOM_MAXVM data was copied from userspace, it would occasionally cause no
data to be returned.

Child Protection:

When a process is flagged by OOM the first thing that happens is OOM
attempts to kill a child of that process to resolve the out of memory
condition.  It is never considered whether the child process has itself
registered to be protected from OOM.  An example of this happening is when
a number of processes are started manually by a user from a shell.  If one
of the children of shell misbehaves all children will be considered for
termination without seeing whether they are protected.

To address this the same check that is done for a process is added in the
children loop.  For a child if the total number of VM pages allocated are
less than the set value (as set by the child when protecting itself),
the child will not be immediately killed by OOM.

[ This squashes the original two OOM protection patches from the ECGL kernel
  and adds the child protection, all formatted to apply cleanly to the
  2.6.34 kernel as a single patch since they are all related to the same
  overall function. ]

[ The original two patches, as described in "OOM Protection Feature" : ]

Signed-off-by: Yongli he   <yongli.he@windriver.com>
Signed-off-by: MacDonald, Joe <Joe.MacDonald@windriver.com>

[ The child protection function, as described "Child Protection" : ]

Signed-off-by: Greg Moffatt <greg.moffatt@windriver.com>
---
 include/linux/oom-protect.h |   22 +++++++++
 kernel/oom-protect.c        |  104 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 126 insertions(+), 0 deletions(-)
 create mode 100644 include/linux/oom-protect.h
 create mode 100644 kernel/oom-protect.c

diff --git a/include/linux/oom-protect.h b/include/linux/oom-protect.h
new file mode 100644
index 0000000..4081c90
--- /dev/null
+++ b/include/linux/oom-protect.h
@@ -0,0 +1,22 @@
+#ifndef _LINUX_OOM_PROTECT_H
+#define _LINUX_OOM_PROTECT_H
+
+/* The following commands may be specified for oom protection */
+#define SET_OOM_PROTECT 1
+#define QUERY_OOM_PROTECT 2
+
+/* This is the data structure for setting oom protection.
+ * The caller fills in the pid of the process to protect
+ * and the number of bytes for which to request protection.
+ */
+struct set_oom_protect_info {
+	unsigned int cmd;
+	int pid;
+	unsigned int max_vm_bytes;
+};
+
+#ifdef __KERNEL__
+int do_oom_protect(unsigned long);
+#endif /* __KERNEL__ */
+
+#endif /* _LINUX_OOM_PROTECT_H */
diff --git a/kernel/oom-protect.c b/kernel/oom-protect.c
new file mode 100644
index 0000000..0b19f3d
--- /dev/null
+++ b/kernel/oom-protect.c
@@ -0,0 +1,104 @@
+/*
+ * kernel/oom-protect.c, Out Of Memory Protect  surport
+ *
+ * Copyright (c) 2006-2008 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+*/
+#ifdef __KERNEL__
+#include <linux/types.h>
+#endif
+
+#include <linux/errno.h>
+#include <linux/sched.h>
+#include <asm/uaccess.h>
+
+#include <linux/oom-protect.h>
+
+/*
+ * Protect the process whose pid is given from selection by the OOM killer
+ * when the system is out of memory.  If the total virtual memory allocated
+ * by the process (in pages) is less than the max_vm_bytes value passed,
+ * it will be exempt, otherwise it will be treated normally.
+ *
+ * On success we return the previous protection limit, on failure we return
+ * an appropriate error code.
+ *
+ * We take the read lock on tasklist to ensure the task doesn't go away
+ * between finding the task and setting oom protection on it.
+ *
+ * We take the task_lock to protect against others racing to  modify p->mm.
+ */
+int do_oom_protect(unsigned long arg)
+{
+	int ret = 0;
+	struct task_struct *p = NULL;
+	struct set_oom_protect_info args;
+
+	if (!capable(CAP_SYS_ADMIN))
+		return -EPERM;
+
+	if (copy_from_user(&args, (struct set_oom_protect_info __user *)arg,
+				sizeof(args)))
+		return -EFAULT;
+
+	ret = -ESRCH;
+	read_lock(&tasklist_lock);
+	p = args.pid ? find_task_by_pid_ns(args.pid,&init_pid_ns) : current;
+
+	if (!p)
+		goto tasklist_unlock_out;
+
+	ret = -EINVAL;
+	task_lock(p);
+	if (!p->mm)
+		goto task_unlock_out;
+
+	switch (args.cmd) {
+		case SET_OOM_PROTECT:
+			/*
+			 * Even though the standard setrlimit() code doesn't
+			 * allow you to reduce your limits, we will allow it
+			 * for OOM protection to let applications disable it.
+			 */
+			p->mm->oom_protect_bytes = args.max_vm_bytes;
+			ret = 0;
+			break;
+
+		case QUERY_OOM_PROTECT:
+			args.max_vm_bytes = p->mm->oom_protect_bytes;
+
+			if (copy_to_user((struct set_oom_protect_info __user *) arg,
+						&args, sizeof(struct set_oom_protect_info))) {
+				ret = -EFAULT;
+				goto task_unlock_out;
+			}
+
+			ret = 0;
+			break;
+
+		default:
+			printk(KERN_WARNING "do_oom_protect: args.cmd: %d\n",args.cmd);
+			ret = -EINVAL;
+			break;
+	}
+
+task_unlock_out:
+	task_unlock(p);
+
+tasklist_unlock_out:
+	read_unlock(&tasklist_lock);
+	return ret;
+}
-- 
1.6.5.2

