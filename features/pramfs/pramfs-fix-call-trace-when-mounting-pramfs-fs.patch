From f47224cdd431935a20e04d856f56afbbcda950d1 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Sun, 17 Oct 2010 19:12:58 +0800
Subject: [PATCH 3/3] pramfs: fix call trace when mounting pramfs fs

We invoke flush_tlb_kernel_range with irq disabled, and it will
cause the following call trace.
------------[ cut here ]------------
Badness at kernel/smp.c:421
NIP: c0069b54 LR: c0069abc CTR: 00000000
REGS: da80bc70 TRAP: 0700   Not tainted  (2.6.34.6-WR4.0.0.0_standard)
MSR: 00021002 <ME,CE>  CR: 22422422  XER: 00000000
TASK = db1d1280[749] 'mount' THREAD: da80a000 CPU: 0
GPR00: 00000001 da80bd20 db1d1280 00000000 c0016d90 00000000 00000001 ff541205
GPR08: db44fff8 c0619a18 00000ff8 da80a000 82422422 20193c60 00000000 00000000
GPR16: bf9b3590 2018d408 2018d3c8 00000000 c04aea50 00000001 00000000 c0600000
GPR24: 00000000 e9500000 c060d174 00100000 00000000 c0016d90 00000000 c060d174
NIP [c0069b54] smp_call_function_many+0xbc/0x254
LR [c0069abc] smp_call_function_many+0x24/0x254
Call Trace:
[da80bd20] [c0069abc] smp_call_function_many+0x24/0x254 (unreliable)
[da80bd60] [c0069d2c] smp_call_function+0x40/0x78
[da80bd80] [c0016de8] flush_tlb_kernel_range+0x28/0x60
[da80bd90] [c00c461c] writeable_kernel_pte_range+0xb0/0x110
[da80bdb0] [c01cf064] pram_writeable+0x34/0x3e4
[da80bdc0] [c01ce540] pram_fill_super+0x14c/0xa20
[da80be30] [c00ef1b8] get_sb_nodev+0x5c/0xb4
[da80be50] [c01ce200] pram_get_sb+0x1c/0x2c
[da80be60] [c00eee48] vfs_kern_mount+0x78/0x1b4
[da80be90] [c00eefd4] do_kern_mount+0x40/0x100
[da80beb0] [c0109f40] do_mount+0x240/0x89c
[da80bf10] [c010a62c] sys_mount+0x90/0xd8
[da80bf40] [c001067c] ret_from_syscall+0x0/0x4
Instruction dump:
baa10014 38210040 7c0803a6 4e800020 3d20c061 8009f168 2f800000 40beffb4
3d20c062 39299a18 88090004 68000001 <0f000000> 2f800000 419eff98 38000001

Message from syslogd@localhost at Wed Oct 13 11:04:50 2010 ...
localhost kernel: ------------[ cut here ]------------

We don't need to disable irq when acquiring page_table_lock.
So change the spin_lock_irq/spin_unlock_irq to spin_lock/spin_unlock,
and remove local_irq_disable in pram.h
It also make no sense to protect flush_tlb_kernel_range in
page_table_lock.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 fs/pramfs/pram.h |    2 --
 mm/memory.c      |    4 ++--
 2 files changed, 2 insertions(+), 4 deletions(-)

diff --git a/fs/pramfs/pram.h b/fs/pramfs/pram.h
index 3bfed39..d4193e5 100644
--- a/fs/pramfs/pram.h
+++ b/fs/pramfs/pram.h
@@ -182,7 +182,6 @@ extern unsigned long end;
 #ifdef CONFIG_PRAMFS_WRITE_PROTECT
 static inline void pram_memunlock_range(void *p, unsigned long len)
 {
-	local_irq_disable();
 	preempt_disable();
 	pram_writeable(p, len, 1);
 }
@@ -190,7 +189,6 @@ static inline void pram_memunlock_range(void *p, unsigned long len)
 static inline void pram_memlock_range(void *p, unsigned long len)
 {
 	pram_writeable(p, len, 0);
-	local_irq_enable();
 	preempt_enable();
 }
 #else
diff --git a/mm/memory.c b/mm/memory.c
index 420957b..efd294e 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -3630,7 +3630,7 @@ int writeable_kernel_pte_range(unsigned long address, unsigned long size,
 	pmd_t *pmd;
 	pte_t *ptep, pte;
 
-	spin_lock_irq(&init_mm.page_table_lock);
+	spin_lock(&init_mm.page_table_lock);
 
 	do {
 		pgd = pgd_offset(&init_mm, address);
@@ -3657,8 +3657,8 @@ int writeable_kernel_pte_range(unsigned long address, unsigned long size,
 	ret = 0;
 
 out:
+	spin_unlock(&init_mm.page_table_lock);
 	flush_tlb_kernel_range(start, end);
-	spin_unlock_irq(&init_mm.page_table_lock);
 	return ret;
 }
 EXPORT_SYMBOL(writeable_kernel_pte_range);
-- 
1.6.5.2

