From 977fb1725341ce6170c9d9de9b8d527d1461e776 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Wed, 16 Nov 2011 14:06:44 +0800
Subject: [PATCH 07/18] fs: pramfs: Added inode flags management and FALLOC_FL_KEEP_SIZE support

Upstream ID 1d70522450a27b8be1206f9197b4c19f0f4232b9
  git://pramfs.git.sourceforge.net/gitroot/pramfs/pramfs
  From: Marco <marco@ncc-1701-f.site>

Integrated-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 fs/pramfs/Makefile      |    2 +-
 fs/pramfs/dir.c         |    1 +
 fs/pramfs/file.c        |    2 +
 fs/pramfs/inode.c       |  109 +++++++++++++++++++++++++++++++++++++++-------
 fs/pramfs/pram.h        |   20 +++++++++
 include/linux/pram_fs.h |    1 +
 6 files changed, 117 insertions(+), 18 deletions(-)

diff --git a/fs/pramfs/Makefile b/fs/pramfs/Makefile
index 7f06f50..055f0bb 100644
--- a/fs/pramfs/Makefile
+++ b/fs/pramfs/Makefile
@@ -5,7 +5,7 @@
 obj-$(CONFIG_PRAMFS) += pramfs.o
 obj-$(CONFIG_PRAMFS_TEST_MODULE) += pramfs_test.o
 
-pramfs-y := balloc.o dir.o file.o inode.o namei.o super.o symlink.o
+pramfs-y := balloc.o dir.o file.o inode.o namei.o super.o symlink.o ioctl.o
 
 pramfs-$(CONFIG_PRAMFS_WRITE_PROTECT) += wprotect.o
 pramfs-$(CONFIG_PRAMFS_XIP) += xip.o
diff --git a/fs/pramfs/dir.c b/fs/pramfs/dir.c
index 7c9d8cb..8dc2b29 100644
--- a/fs/pramfs/dir.c
+++ b/fs/pramfs/dir.c
@@ -201,4 +201,5 @@ struct file_operations pram_dir_operations = {
 	.read		= generic_read_dir,
 	.readdir	= pram_readdir,
 	.fsync		= noop_fsync,
+	.unlocked_ioctl	= pram_ioctl,
 };
diff --git a/fs/pramfs/file.c b/fs/pramfs/file.c
index 1b522de..fe83132 100644
--- a/fs/pramfs/file.c
+++ b/fs/pramfs/file.c
@@ -275,6 +275,7 @@ struct file_operations pram_file_operations = {
 	.open		= pram_open_file,
 	.fsync		= noop_fsync,
 	.check_flags	= pram_check_flags,
+	.unlocked_ioctl	= pram_ioctl,
 };
 
 #ifdef CONFIG_PRAMFS_XIP
@@ -285,6 +286,7 @@ struct file_operations pram_xip_file_operations = {
 	.mmap		= xip_file_mmap,
 	.open		= generic_file_open,
 	.fsync		= noop_fsync,
+	.unlocked_ioctl	= pram_ioctl,
 };
 #endif
 
diff --git a/fs/pramfs/inode.c b/fs/pramfs/inode.c
index a3e53eb..3ccafe6 100644
--- a/fs/pramfs/inode.c
+++ b/fs/pramfs/inode.c
@@ -104,7 +104,12 @@ static void __pram_truncate_blocks(struct inode *inode, loff_t start,
 	mutex_lock(&PRAM_I(inode)->truncate_mutex);
 
 	first_blocknr = (start + sb->s_blocksize - 1) >> sb->s_blocksize_bits;
-	last_blocknr = (end + sb->s_blocksize - 1) >> sb->s_blocksize_bits;
+
+	if ((be32_to_cpu(pi->i_flags) & PRAM_EOFBLOCKS_FL) && start == 0)
+		last_blocknr = (1UL << (2*sb->s_blocksize_bits - 6)) - 1;
+	else
+		last_blocknr = (end + sb->s_blocksize - 1) >>
+							   sb->s_blocksize_bits;
 	first_row_index = first_blocknr >> Nbits;
 	last_row_index  = last_blocknr >> Nbits;
 
@@ -146,10 +151,14 @@ static void __pram_truncate_blocks(struct inode *inode, loff_t start,
 	inode->i_blocks -= freed;
 
 	if (start == 0) {
+		unsigned long flags;
 		blocknr = pram_get_blocknr(sb, be64_to_cpu(pi->i_type.reg.row_block));
 		pram_free_block(sb, blocknr);
 		pram_memunlock_inode(sb, pi);
 		pi->i_type.reg.row_block = 0;
+		flags = be32_to_cpu(pi->i_flags);
+		flags &= ~PRAM_EOFBLOCKS_FL;
+		pi->i_flags = cpu_to_be32(flags);
 		pram_memlock_inode(sb, pi);
 	}
 	pram_memunlock_inode(sb, pi);
@@ -280,6 +289,7 @@ static int pram_read_inode(struct inode *inode, struct pram_inode *pi)
 	inode->i_atime.tv_nsec = inode->i_mtime.tv_nsec =
 		inode->i_ctime.tv_nsec = 0;
 	inode->i_generation = be32_to_cpu(pi->i_generation);
+	pram_set_inode_flags(inode, pi);
 
 	/* check if the inode is active. */
 	if (inode->i_nlink == 0 && (inode->i_mode == 0 || be32_to_cpu(pi->i_dtime))) {
@@ -350,6 +360,7 @@ int pram_update_inode(struct inode *inode)
 	pi->i_ctime = cpu_to_be32(inode->i_ctime.tv_sec);
 	pi->i_mtime = cpu_to_be32(inode->i_mtime.tv_sec);
 	pi->i_generation = cpu_to_be32(inode->i_generation);
+	pram_get_inode_flags(inode, pi);
 
 	if (S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))
 		pi->i_type.dev.rdev = cpu_to_be32(inode->i_rdev);
@@ -464,6 +475,7 @@ struct inode *pram_new_inode(struct inode *dir, int mode)
 	struct pram_super_block *ps;
 	struct inode *inode;
 	struct pram_inode *pi = NULL;
+	struct pram_inode *diri = NULL;
 	int i, errval;
 	ino_t ino = 0;
 
@@ -490,28 +502,26 @@ struct inode *pram_new_inode(struct inode *dir, int mode)
 			}
 		}
 
-		if (i >= be32_to_cpu(ps->s_inodes_count)) {
+		if (unlikely(i >= be32_to_cpu(ps->s_inodes_count))) {
 			pram_err(sb, "s_free_inodes_count!=0 but none free!?\n");
 			errval = -ENOSPC;
 			goto fail1;
 		}
 
 		pram_dbg("allocating inode %lu\n", ino);
-		pram_memunlock_super(sb, ps);
-		be32_add_cpu(&ps->s_free_inodes_count, -1);
-		if (i < be32_to_cpu(ps->s_inodes_count)-1)
-			ps->s_free_inode_hint = cpu_to_be32(i+1);
-		else
-			ps->s_free_inode_hint = 0;
-		pram_memlock_super(sb, ps);
 	} else {
 		pram_dbg("no space left to create new inode!\n");
 		errval = -ENOSPC;
 		goto fail1;
 	}
 
-	/* chosen inode is in ino */
+	diri = pram_get_inode(sb, dir->i_ino);
+	if (!diri) {
+		errval = -EACCES;
+		goto fail1;
+	}
 
+	/* chosen inode is in ino */
 	inode->i_ino = ino;
 	inode_init_owner(inode, dir, mode);
 	inode->i_blocks = inode->i_size = 0;
@@ -522,6 +532,7 @@ struct inode *pram_new_inode(struct inode *dir, int mode)
 	pram_memunlock_inode(sb, pi);
 	pi->i_d.d_next = 0;
 	pi->i_d.d_prev = 0;
+	pi->i_flags = diri->i_flags;
 	pram_memlock_inode(sb, pi);
 
 	if (insert_inode_locked(inode) < 0) {
@@ -538,6 +549,14 @@ struct inode *pram_new_inode(struct inode *dir, int mode)
 	if (errval)
 		goto fail2;
 
+	pram_memunlock_super(sb, ps);
+	be32_add_cpu(&ps->s_free_inodes_count, -1);
+	if (i < be32_to_cpu(ps->s_inodes_count)-1)
+		ps->s_free_inode_hint = cpu_to_be32(i+1);
+	else
+		ps->s_free_inode_hint = 0;
+	pram_memlock_super(sb, ps);
+
 	unlock_super(sb);
 
 	return inode;
@@ -722,22 +741,25 @@ int pram_notify_change(struct dentry *dentry, struct iattr *attr)
 long pram_fallocate(struct inode *inode, int mode, loff_t offset, loff_t len)
 {
 	long ret = 0;
-	unsigned long blocknr, blockoff;
+	unsigned long blocknr, blockoff, flags_old;
 	int num_blocks, blocksize_mask;
+	struct pram_inode *pi;
 	loff_t new_size;
 
 	/* preallocation to directories is currently not supported */
 	if (S_ISDIR(inode->i_mode))
 		return -ENODEV;
 
-	/* keep size option not supported */
-	if (mode & FALLOC_FL_KEEP_SIZE)
-		return -EOPNOTSUPP;
-
 	mutex_lock(&inode->i_mutex);
 	mutex_lock(&PRAM_I(inode)->truncate_mutex);
+
+	if (IS_IMMUTABLE(inode) || IS_APPEND(inode)) {
+		ret = -EPERM;
+		goto out;
+	}
+
 	new_size = len + offset;
-	if (new_size > inode->i_size) {
+	if (!(mode & FALLOC_FL_KEEP_SIZE) && new_size > inode->i_size) {
 		ret = inode_newsize_ok(inode, new_size);
 		if (ret)
 			goto out;
@@ -752,8 +774,23 @@ long pram_fallocate(struct inode *inode, int mode, loff_t offset, loff_t len)
 	ret = pram_alloc_blocks(inode, blocknr, num_blocks);
 	if (ret)
 		goto out;
+
+	if (mode & FALLOC_FL_KEEP_SIZE) {
+		pi = pram_get_inode(inode->i_sb, inode->i_ino);
+		if (!pi) {
+			ret = -EACCES;
+			goto out;
+		}
+		pram_memunlock_inode(inode->i_sb, pi);
+		flags_old = be32_to_cpu(pi->i_flags);
+		flags_old |= PRAM_EOFBLOCKS_FL;
+		pi->i_flags = cpu_to_be32(flags_old);
+		pram_memlock_inode(inode->i_sb, pi);
+
+	}
+
 	inode->i_mtime = inode->i_ctime = CURRENT_TIME_SEC;
-	if (new_size > inode->i_size)
+	if (!(mode & FALLOC_FL_KEEP_SIZE) && new_size > inode->i_size)
 		inode->i_size = new_size;
 	ret = pram_update_inode(inode);
  out:
@@ -762,6 +799,44 @@ long pram_fallocate(struct inode *inode, int mode, loff_t offset, loff_t len)
 	return ret;
 }
 
+void pram_set_inode_flags(struct inode *inode, struct pram_inode *pi)
+{
+	unsigned int flags = be32_to_cpu(pi->i_flags);
+
+	inode->i_flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME|S_DIRSYNC);
+	if (flags & FS_SYNC_FL)
+		inode->i_flags |= S_SYNC;
+	if (flags & FS_APPEND_FL)
+		inode->i_flags |= S_APPEND;
+	if (flags & FS_IMMUTABLE_FL)
+		inode->i_flags |= S_IMMUTABLE;
+	if (flags & FS_NOATIME_FL)
+		inode->i_flags |= S_NOATIME;
+	if (flags & FS_DIRSYNC_FL)
+		inode->i_flags |= S_DIRSYNC;
+}
+
+void pram_get_inode_flags(struct inode *inode, struct pram_inode *pi)
+{
+	unsigned int flags = inode->i_flags;
+	unsigned int pram_flags = be32_to_cpu(pi->i_flags);
+
+	pram_flags &= ~(FS_SYNC_FL|FS_APPEND_FL|FS_IMMUTABLE_FL|
+			FS_NOATIME_FL|FS_DIRSYNC_FL);
+	if (flags & S_SYNC)
+		pram_flags |= FS_SYNC_FL;
+	if (flags & S_APPEND)
+		pram_flags |= FS_APPEND_FL;
+	if (flags & S_IMMUTABLE)
+		pram_flags |= FS_IMMUTABLE_FL;
+	if (flags & S_NOATIME)
+		pram_flags |= FS_NOATIME_FL;
+	if (flags & S_DIRSYNC)
+		pram_flags |= FS_DIRSYNC_FL;
+
+	pi->i_flags = cpu_to_be32(pram_flags);
+}
+
 struct address_space_operations pram_aops = {
 	.readpage	= pram_readpage,
 	.direct_IO	= pram_direct_IO,
diff --git a/fs/pramfs/pram.h b/fs/pramfs/pram.h
index 4e4d331..313473d 100644
--- a/fs/pramfs/pram.h
+++ b/fs/pramfs/pram.h
@@ -35,6 +35,22 @@
 #define pram_warn(s, args...)		pr_warning(s, ## args)
 #define pram_info(s, args...)		pr_info(s, ## args)
 
+#define pram_set_bit			ext2_set_bit
+#define pram_clear_bit			ext2_clear_bit
+#define pram_find_next_zero_bit		ext2_find_next_zero_bit
+
+#define clear_opt(o, opt)	(o &= ~PRAM_MOUNT_##opt)
+#define set_opt(o, opt)		(o |= PRAM_MOUNT_##opt)
+#define test_opt(sb, opt) \
+	(((struct pram_sb_info *)sb->s_fs_info)->s_mount_opt & PRAM_MOUNT_##opt)
+
+/*
+ * Pram inode flags
+ *
+ * PRAM_EOFBLOCKS_FL	There are blocks allocated beyond eof
+ */
+#define PRAM_EOFBLOCKS_FL	0x20000000
+
 /* Function Prototypes */
 extern void pram_error_mng(struct super_block * sb, const char * fmt, ...);
 extern int pram_get_and_update_block(struct inode *inode, sector_t iblock,
@@ -84,7 +100,11 @@ extern void pram_dirty_inode(struct inode *inode);
 extern int pram_notify_change(struct dentry *dentry, struct iattr *attr);
 extern long pram_fallocate(struct inode *inode, int mode, loff_t offset,
 			  loff_t len);
+extern void pram_set_inode_flags(struct inode *inode, struct pram_inode *pi);
+extern void pram_get_inode_flags(struct inode *inode, struct pram_inode *pi);
 
+/* ioctl.c */
+extern long pram_ioctl(struct file *filp, unsigned int cmd, unsigned long arg);
 
 /* super.c */
 #ifdef CONFIG_PRAMFS_TEST
diff --git a/include/linux/pram_fs.h b/include/linux/pram_fs.h
index 49237bc..8c32e89 100644
--- a/include/linux/pram_fs.h
+++ b/include/linux/pram_fs.h
@@ -73,6 +73,7 @@ struct pram_inode {
 	__be32	i_dtime;	/* Deletion Time */
 	__be64	i_xattr;	/* Extended attribute block */
 	__be32	i_generation;	/* File version (for NFS) */
+	__be32	i_flags;	/* Inode flags */
 
 	union {
 		struct {
-- 
1.7.0.4

