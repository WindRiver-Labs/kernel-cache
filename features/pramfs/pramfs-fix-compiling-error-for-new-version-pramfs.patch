From 2a4e586f9d1fdf3e6465077d0e9891304937d5aa Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Sun, 17 Oct 2010 19:12:57 +0800
Subject: [PATCH 2/3] pramfs: fix compiling error for new version pramfs

Some compiling fixes and short add-ons in favour of backporting pramfs
from 2.6.36

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 fs/inode.c         |   32 ++++++++++++++++++++++++++++++++
 fs/libfs.c         |    9 +++++++++
 fs/pramfs/dir.c    |    2 +-
 fs/pramfs/inode.c  |    2 +-
 fs/pramfs/xattr.c  |   10 +++++++---
 include/linux/fs.h |    4 ++++
 6 files changed, 54 insertions(+), 5 deletions(-)

diff --git a/fs/inode.c b/fs/inode.c
index 407bf39..0a3568a 100644
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -296,6 +296,18 @@ void __iget(struct inode *inode)
 	inodes_stat.nr_unused--;
 }
 
+void end_writeback(struct inode *inode)
+{
+	might_sleep();
+	BUG_ON(inode->i_data.nrpages);
+	BUG_ON(!list_empty(&inode->i_data.private_list));
+	BUG_ON(!(inode->i_state & I_FREEING));
+	BUG_ON(inode->i_state & I_CLEAR);
+	inode_sync_wait(inode);
+	inode->i_state = I_FREEING | I_CLEAR;
+}
+EXPORT_SYMBOL(end_writeback);
+
 /**
  * clear_inode - clear an inode
  * @inode: inode to clear
@@ -1610,3 +1622,23 @@ void init_special_inode(struct inode *inode, umode_t mode, dev_t rdev)
 				  inode->i_ino);
 }
 EXPORT_SYMBOL(init_special_inode);
+
+/**
+ * Init uid,gid,mode for new inode according to posix standards
+ * @inode: New inode
+ * @dir: Directory inode
+ * @mode: mode of the new inode
+ */
+void inode_init_owner(struct inode *inode, const struct inode *dir,
+			mode_t mode)
+{
+	inode->i_uid = current_fsuid();
+	if (dir && dir->i_mode & S_ISGID) {
+		inode->i_gid = dir->i_gid;
+		if (S_ISDIR(mode))
+			mode |= S_ISGID;
+	} else
+		inode->i_gid = current_fsgid();
+	inode->i_mode = mode;
+}
+EXPORT_SYMBOL(inode_init_owner);
diff --git a/fs/libfs.c b/fs/libfs.c
index b016af9..cce4d37 100644
--- a/fs/libfs.c
+++ b/fs/libfs.c
@@ -841,6 +841,15 @@ int simple_fsync(struct file *file, struct dentry *dentry, int datasync)
 }
 EXPORT_SYMBOL(simple_fsync);
 
+/*
+ * No-op implementation of ->fsync for in-memory filesystems.
+ */
+int noop_fsync(struct file *file, int datasync)
+{
+	return 0;
+}
+EXPORT_SYMBOL(noop_fsync);
+
 EXPORT_SYMBOL(dcache_dir_close);
 EXPORT_SYMBOL(dcache_dir_lseek);
 EXPORT_SYMBOL(dcache_dir_open);
diff --git a/fs/pramfs/dir.c b/fs/pramfs/dir.c
index 009d910..47e4215 100644
--- a/fs/pramfs/dir.c
+++ b/fs/pramfs/dir.c
@@ -211,5 +211,5 @@ static int pram_readdir(struct file *filp, void *dirent, filldir_t filldir)
 struct file_operations pram_dir_operations = {
 	.read		= generic_read_dir,
 	.readdir	= pram_readdir,
-	.fsync		= noop_fsync,
+	.fsync		= NULL,
 };
diff --git a/fs/pramfs/inode.c b/fs/pramfs/inode.c
index 2f47370..130dcff 100644
--- a/fs/pramfs/inode.c
+++ b/fs/pramfs/inode.c
@@ -695,7 +695,7 @@ int pram_notify_change(struct dentry *dentry, struct iattr *attr)
 		if (error)
 			return error;
 	}
-	setattr_copy(inode, attr);
+	inode_setattr(inode, attr);
 	if (attr->ia_valid & ATTR_MODE)
 		error = pram_acl_chmod(inode);
 	error = pram_update_inode(inode);
diff --git a/fs/pramfs/xattr.c b/fs/pramfs/xattr.c
index 17f6220..9c3b74c 100644
--- a/fs/pramfs/xattr.c
+++ b/fs/pramfs/xattr.c
@@ -962,7 +962,7 @@ static struct pram_xblock_desc *pram_xattr_cache_find(struct inode *inode, struc
 		return NULL;  /* never share */
 	ea_idebug(inode, "looking for cached blocks [%x]", (int)hash);
 again:
-	ce = mb_cache_entry_find_first(pram_xattr_cache, (struct block_device *)sbi, hash);
+	ce = mb_cache_entry_find_first(pram_xattr_cache, 0, (struct block_device *)sbi, hash);
 	while (ce) {
 		char *bp;
 
@@ -995,7 +995,7 @@ again:
 			}
 			mutex_unlock(&desc->lock);
 		}
-		ce = mb_cache_entry_find_next(ce, (struct block_device *)sbi, hash);
+		ce = mb_cache_entry_find_next(ce, 0, (struct block_device *)sbi, hash);
 	}
 	return NULL;
 }
@@ -1078,7 +1078,11 @@ static void init_xblock_desc_once(void *foo)
 int __init init_pram_xattr(void)
 {
 	int ret = 0;
-	pram_xattr_cache = mb_cache_create("pram_xattr", 6);
+
+	pram_xattr_cache = mb_cache_create("pram_xattr", NULL,
+		sizeof(struct mb_cache_entry) +
+		sizeof(((struct mb_cache_entry *) 0)->e_indexes[0]), 1, 6);
+
 	if (!pram_xattr_cache) {
 		ret = -ENOMEM;
 		goto fail1;
diff --git a/include/linux/fs.h b/include/linux/fs.h
index c379b9d..79990d5 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -1431,6 +1431,7 @@ extern void dentry_unhash(struct dentry *dentry);
  * VFS file helper functions.
  */
 extern int file_permission(struct file *, int);
+extern void inode_init_owner(struct inode *inode, const struct inode *dir, mode_t mode);
 
 /*
  * VFS FS_IOC_FIEMAP helper definitions.
@@ -1562,6 +1563,7 @@ struct super_operations {
    	void (*dirty_inode) (struct inode *);
 	int (*write_inode) (struct inode *, struct writeback_control *wbc);
 	void (*drop_inode) (struct inode *);
+	void (*evict_inode) (struct inode *);
 	void (*delete_inode) (struct inode *);
 	void (*put_super) (struct super_block *);
 	void (*write_super) (struct super_block *);
@@ -2182,6 +2184,7 @@ static inline void insert_inode_hash(struct inode *inode) {
 	__insert_inode_hash(inode, inode->i_ino);
 }
 
+extern void end_writeback(struct inode *);
 extern void file_move(struct file *f, struct list_head *list);
 extern void file_kill(struct file *f);
 #ifdef CONFIG_BLOCK
@@ -2352,6 +2355,7 @@ extern int simple_write_end(struct file *file, struct address_space *mapping,
 			struct page *page, void *fsdata);
 
 extern struct dentry *simple_lookup(struct inode *, struct dentry *, struct nameidata *);
+extern int noop_fsync(struct file *, int);
 extern ssize_t generic_read_dir(struct file *, char __user *, size_t, loff_t *);
 extern const struct file_operations simple_dir_operations;
 extern const struct inode_operations simple_dir_inode_operations;
-- 
1.6.5.2

