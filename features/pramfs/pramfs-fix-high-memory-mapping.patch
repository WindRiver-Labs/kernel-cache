From c40425b321bf1630664350c30d279e4a1975de20 Mon Sep 17 00:00:00 2001
From: Junxiao Bi <junxiao.bi@windriver.com>
Date: Tue, 21 Feb 2012 17:32:46 +0800
Subject: [PATCH] pramfs: fix high memory mapping

For pram mapped in high memory pages, bh->b_data is not set to
virutal address, reading a file in pramfs will cause oops like
following:

Unable to handle kernel paging request for data at address 0x00000000
Faulting instruction address: 0xc00185f4
Oops: Kernel access of bad area, sig: 11 [#1]
PREEMPT SMP NR_CPUS=8 LTT NESTING LEVEL : 0
P4080 DS
last sysfs file:
Modules linked in:
NIP: c00185f4 LR: c02d8f7c CTR: 00000100
REGS: eb01fbc0 TRAP: 0300   Not tainted  (2.6.34.10-WR4.3.0.0_standard)
MSR: 00029002 <EE,ME,CE>  CR: 24042444  XER: 00000000
DEAR: 00000000, ESR: 00800000
TASK = ebd4e3c0[163] 'cat' THREAD: eb01e000 CPU: 6
GPR00: 00000000 eb01fc70 ebd4e3c0 00000000 f9682004 00000800 fffffffc 6161610a
GPR08: 00000000 00000000 0000a9c4 eb01e000 24042444 1003ed88 00000002 c02d8dc0
GPR16: c07b30ec eb01fca8 00000000 00000001 00000001 c069c1e4 eb8af040 00000800
GPR24: 00000000 00000000 0000000b ebeb1a00 f9682000 eb8af040 eb9e0000 00000800
NIP [c00185f4] memcpy+0x24/0x9c
LR [c02d8f7c] pram_get_and_update_block+0x1bc/0x1c0
Call Trace:
[eb01fc70] [c02d8f6c] pram_get_and_update_block+0x1ac/0x1c0 (unreliable)
[eb01fca0] [c0131d04] block_read_full_page+0x32c/0x3f4
[eb01fd20] [c02d7990] pram_readpage+0x30/0x44
[eb01fd30] [c00cb614] __do_page_cache_readahead+0x288/0x2a4
[eb01fd90] [c00c3e08] generic_file_aio_read+0x390/0x780
[eb01fe40] [c0102ff0] do_sync_read+0xac/0x120
[eb01fee0] [c0103f28] vfs_read+0xb4/0x158
[eb01ff00] [c0104140] sys_read+0x50/0x10c
[eb01ff40] [c0010a54] ret_from_syscall+0x0/0x4

Signed-off-by: Xiao Zhang <xiao.zhang@windriver.com>
Signed-off-by: Junxiao Bi <junxiao.bi@windriver.com>
---
 fs/pramfs/inode.c |   13 ++++++++++++-
 1 files changed, 12 insertions(+), 1 deletions(-)

diff --git a/fs/pramfs/inode.c b/fs/pramfs/inode.c
index 3f6125b..c1be532 100644
--- a/fs/pramfs/inode.c
+++ b/fs/pramfs/inode.c
@@ -652,7 +652,18 @@ int pram_get_and_update_block(struct inode *inode, sector_t iblock,
 		pram_memlock_block(sb, bp);
 		memset(bh->b_data, 0, blocksize);
 	} else {
-		memcpy(bh->b_data, bp, blocksize);
+		/*
+		 * For pram mapped in high memory pages, bh->b_data is set
+		 * to the bh offset from the page in set_bh_page(). So we
+		 * map its virtual address here for copying the data
+		 */
+		if (PageHighMem(bh->b_page)) {
+			void *page_addr = kmap_atomic(bh->b_page, KM_USER0);
+			void *to = page_addr + (unsigned long)bh->b_data;
+			memcpy(to, bp, blocksize);
+			kunmap_atomic(page_addr, KM_USER0);
+		} else
+			memcpy(bh->b_data, bp, blocksize);
 	}
 
 	set_buffer_uptodate(bh);
-- 
1.7.0.4

