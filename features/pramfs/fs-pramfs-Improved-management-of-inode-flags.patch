From f5c312b4809004c86813eff8524a2d8e491096ca Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Wed, 16 Nov 2011 14:06:46 +0800
Subject: [PATCH 09/18] fs: pramfs: Improved management of inode flags

Upstream ID: 41000deef52baf3dda81bc91ebe12a0b600b3c51
  git://pramfs.git.sourceforge.net/gitroot/pramfs/pramfs
  From: Marco <marco@ncc-1701-f.site>

Integrated-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 fs/pramfs/inode.c |   19 +++++++++----------
 fs/pramfs/pram.h  |   22 ++++++++++++++++++++++
 2 files changed, 31 insertions(+), 10 deletions(-)

diff --git a/fs/pramfs/inode.c b/fs/pramfs/inode.c
index 2a6f95f..33d33c3 100644
--- a/fs/pramfs/inode.c
+++ b/fs/pramfs/inode.c
@@ -151,17 +151,16 @@ static void __pram_truncate_blocks(struct inode *inode, loff_t start,
 	inode->i_blocks -= freed;
 
 	if (start == 0) {
-		unsigned long flags;
 		blocknr = pram_get_blocknr(sb, be64_to_cpu(pi->i_type.reg.row_block));
 		pram_free_block(sb, blocknr);
 		pram_memunlock_inode(sb, pi);
 		pi->i_type.reg.row_block = 0;
-		flags = be32_to_cpu(pi->i_flags);
-		flags &= ~PRAM_EOFBLOCKS_FL;
-		pi->i_flags = cpu_to_be32(flags);
-		pram_memlock_inode(sb, pi);
+		pi->i_flags &= cpu_to_be32(~PRAM_EOFBLOCKS_FL);
+		goto update_blocks;
 	}
 	pram_memunlock_inode(sb, pi);
+
+ update_blocks:
 	pi->i_blocks = cpu_to_be32(inode->i_blocks);
 	pram_memlock_inode(sb, pi);
 
@@ -532,9 +531,11 @@ struct inode *pram_new_inode(struct inode *dir, int mode)
 	pram_memunlock_inode(sb, pi);
 	pi->i_d.d_next = 0;
 	pi->i_d.d_prev = 0;
-	pi->i_flags = diri->i_flags;
+	pi->i_flags = pram_mask_flags(mode, diri->i_flags);
 	pram_memlock_inode(sb, pi);
 
+	pram_set_inode_flags(inode, pi);
+
 	if (insert_inode_locked(inode) < 0) {
 		errval = -EINVAL;
 		goto fail2;
@@ -741,7 +742,7 @@ int pram_notify_change(struct dentry *dentry, struct iattr *attr)
 long pram_fallocate(struct inode *inode, int mode, loff_t offset, loff_t len)
 {
 	long ret = 0;
-	unsigned long blocknr, blockoff, flags_old;
+	unsigned long blocknr, blockoff;
 	int num_blocks, blocksize_mask;
 	struct pram_inode *pi;
 	loff_t new_size;
@@ -782,9 +783,7 @@ long pram_fallocate(struct inode *inode, int mode, loff_t offset, loff_t len)
 			goto out;
 		}
 		pram_memunlock_inode(inode->i_sb, pi);
-		flags_old = be32_to_cpu(pi->i_flags);
-		flags_old |= PRAM_EOFBLOCKS_FL;
-		pi->i_flags = cpu_to_be32(flags_old);
+		pi->i_flags |= cpu_to_be32(PRAM_EOFBLOCKS_FL);
 		pram_memlock_inode(inode->i_sb, pi);
 
 	}
diff --git a/fs/pramfs/pram.h b/fs/pramfs/pram.h
index 313473d..d39ae14 100644
--- a/fs/pramfs/pram.h
+++ b/fs/pramfs/pram.h
@@ -50,6 +50,16 @@
  * PRAM_EOFBLOCKS_FL	There are blocks allocated beyond eof
  */
 #define PRAM_EOFBLOCKS_FL	0x20000000
+/* Flags that should be inherited by new inodes from their parent. */
+#define PRAM_FL_INHERITED (FS_SECRM_FL | FS_UNRM_FL | FS_COMPR_FL |\
+			   FS_SYNC_FL | FS_IMMUTABLE_FL | FS_APPEND_FL |\
+			   FS_NODUMP_FL | FS_NOATIME_FL | FS_COMPRBLK_FL|\
+			   FS_NOCOMP_FL | FS_JOURNAL_DATA_FL |\
+			   FS_NOTAIL_FL | FS_DIRSYNC_FL)
+/* Flags that are appropriate for regular files (all but dir-specific ones). */
+#define PRAM_REG_FLMASK (~(FS_DIRSYNC_FL | FS_TOPDIR_FL))
+/* Flags that are appropriate for non-directories/regular files. */
+#define PRAM_OTHER_FLMASK (FS_NODUMP_FL | FS_NOATIME_FL)
 
 /* Function Prototypes */
 extern void pram_error_mng(struct super_block * sb, const char * fmt, ...);
@@ -122,6 +132,18 @@ extern int pram_block_symlink(struct inode *inode,
 
 /* Inline functions start here */
 
+/* Mask out flags that are inappropriate for the given type of inode. */
+static inline __be32 pram_mask_flags(umode_t mode, __be32 flags)
+{
+	flags &= cpu_to_be32(PRAM_FL_INHERITED);
+	if (S_ISDIR(mode))
+		return flags;
+	else if (S_ISREG(mode))
+		return flags & cpu_to_be32(PRAM_REG_FLMASK);
+	else
+		return flags & cpu_to_be32(PRAM_OTHER_FLMASK);
+}
+
 static inline int pram_calc_checksum(u8 *data, int n)
 {
 	u16 crc = 0;
-- 
1.7.0.4

