From e3ccd69eedc75c4484e34d2eaf079c86b7b6e371 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Wed, 16 Nov 2011 14:06:51 +0800
Subject: [PATCH 14/18] fs: pramfs: Improved block allocation in direct IO path

Upstream ID: b1f82a3384c61706a834ca03b857f40ce116ebc0
  git://pramfs.git.sourceforge.net/gitroot/pramfs/pramfs
  From: Marco <marco@ncc-1701-f.site>

Integrated-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 fs/pramfs/file.c  |   58 +++++++++++++++++++++++++++++++++-------------------
 fs/pramfs/inode.c |    2 +-
 fs/pramfs/pram.h  |    3 +-
 3 files changed, 40 insertions(+), 23 deletions(-)

diff --git a/fs/pramfs/file.c b/fs/pramfs/file.c
index 41b3c63..05a4af4 100644
--- a/fs/pramfs/file.c
+++ b/fs/pramfs/file.c
@@ -153,10 +153,10 @@ ssize_t pram_direct_IO(int rw, struct kiocb *iocb,
 	struct file *file = iocb->ki_filp;
 	struct inode *inode = file->f_mapping->host;
 	struct super_block *sb = inode->i_sb;
-	int progress = 0, hole = 0;
+	int progress = 0, hole = 0, alloc_once = 1;
 	ssize_t retval = 0;
 	void *tmp = NULL;
-	unsigned long blocknr, blockoff;
+	unsigned long blocknr, blockoff, blocknr_start;
 	struct iov_iter iter;
 	int num_blocks, blocksize_mask;
 	size_t length = iov_length(iov, nr_segs);
@@ -170,12 +170,13 @@ ssize_t pram_direct_IO(int rw, struct kiocb *iocb,
 
 	blocksize_mask = (1 << sb->s_blocksize_bits) - 1;
 	/* find starting block number to access */
-	blocknr = offset >> inode->i_sb->s_blocksize_bits;
+	blocknr = offset >> sb->s_blocksize_bits;
 	/* find starting offset within starting block */
 	blockoff = offset & blocksize_mask;
 	/* find number of blocks to access */
 	num_blocks = (blockoff + length + blocksize_mask) >>
 							sb->s_blocksize_bits;
+	blocknr_start = blocknr;
 
 	if (rw == WRITE) {
 		/* prepare a temporary buffer to hold a user data block
@@ -183,10 +184,6 @@ ssize_t pram_direct_IO(int rw, struct kiocb *iocb,
 		tmp = kmalloc(sb->s_blocksize, GFP_KERNEL);
 		if (!tmp)
 			return -ENOMEM;
-		/* now allocate the data blocks we'll need */
-		retval = pram_alloc_blocks(inode, blocknr, num_blocks);
-		if (retval)
-			goto fail1;
 	}
 
 	iov_iter_init(&iter, iov, nr_segs, length, 0);
@@ -194,15 +191,35 @@ ssize_t pram_direct_IO(int rw, struct kiocb *iocb,
 	while (length) {
 		int count;
 		u8 *bp = NULL;
-		u64 block = pram_find_data_block(inode, blocknr++);
-		if (unlikely(!block && rw == READ)) {
-			/* We are falling in a hole */
-			hole = 1;
-		} else {
-			bp = (u8 *)pram_get_block(sb, block);
-			if (!bp)
-				goto fail2;
+		u64 block = pram_find_data_block(inode, blocknr);
+		if (!block) {
+			if (alloc_once && rw == WRITE) {
+				/*
+				 * Allocate the data blocks starting from blocknr
+				 * to the end.
+				 */
+				retval = pram_alloc_blocks(inode, blocknr,
+							num_blocks - (blocknr -
+								 blocknr_start));
+				if (retval)
+					goto fail;
+				/* retry....*/
+				block = pram_find_data_block(inode, blocknr);
+				BUG_ON(!block);
+				alloc_once = 0;
+			} else if (unlikely(rw == READ)) {
+				/* We are falling in a hole */
+				hole = 1;
+				goto hole;
+			}
+		}
+		bp = (u8 *)pram_get_block(sb, block);
+		if (!bp) {
+			retval = -EACCES;
+			goto fail;
 		}
+ hole:
+		++blocknr;
 
 		count = blockoff + length > sb->s_blocksize ?
 			sb->s_blocksize - blockoff : length;
@@ -212,21 +229,21 @@ ssize_t pram_direct_IO(int rw, struct kiocb *iocb,
 				retval = pram_clear_user(&iter, count);
 				if (retval != count) {
 					retval = -EFAULT;
-					goto fail1;
+					goto fail;
 				}
 			} else {
 				retval = pram_iov_copy_to(&bp[blockoff], &iter,
 							  count);
 				if (retval != count) {
 					retval = -EFAULT;
-					goto fail1;
+					goto fail;
 				}
 			}
 		} else {
 			retval = pram_iov_copy_from(tmp, &iter, count);
 			if (retval != count) {
 				retval = -EFAULT;
-				goto fail1;
+				goto fail;
 			}
 
 			pram_memunlock_block(inode->i_sb, bp);
@@ -241,11 +258,10 @@ ssize_t pram_direct_IO(int rw, struct kiocb *iocb,
 		hole = 0;
 	}
 
-fail2:
 	retval = progress;
-fail1:
+ fail:
 	kfree(tmp);
-out:
+ out:
 	return retval;
 }
 
diff --git a/fs/pramfs/inode.c b/fs/pramfs/inode.c
index 973bf6a..a23e010 100644
--- a/fs/pramfs/inode.c
+++ b/fs/pramfs/inode.c
@@ -185,7 +185,7 @@ static void pram_truncate_blocks(struct inode *inode, loff_t start, loff_t end)
  * Allocate num data blocks for inode, starting at given file-relative
  * block number. All blocks except the last are zeroed out.
  */
-int pram_alloc_blocks(struct inode *inode, int file_blocknr, int num)
+int pram_alloc_blocks(struct inode *inode, int file_blocknr, unsigned int num)
 {
 	struct super_block *sb = inode->i_sb;
 	struct pram_inode *pi = pram_get_inode(sb, inode->i_ino);
diff --git a/fs/pramfs/pram.h b/fs/pramfs/pram.h
index 918f550..db08fd1 100644
--- a/fs/pramfs/pram.h
+++ b/fs/pramfs/pram.h
@@ -96,7 +96,8 @@ extern int pram_remove_link(struct inode *inode);
 extern struct dentry *pram_get_parent(struct dentry *child);
 
 /* inode.c */
-extern int pram_alloc_blocks(struct inode *inode, int file_blocknr, int num);
+extern int pram_alloc_blocks(struct inode *inode, int file_blocknr,
+						unsigned int num);
 extern u64 pram_find_data_block(struct inode *inode,
 					 unsigned long file_blocknr);
 
-- 
1.7.0.4

