From dd8c84251055d5ea24e7d2d3903bba4bbb2f8aae Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@nxp.com>
Date: Thu, 11 Feb 2016 17:17:44 +0200
Subject: [PATCH 499/752] fsl-dpaa2: mac: Replace "ppx" prefix with "dpaa2_mac"

Use a similar naming convention as for the Ethernet driver,
replacing "ppx" with "dpaa2_mac" as prefix for functions and
structures.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/mac/mac.c | 153 ++++++++++++++++++------------------
 1 file changed, 78 insertions(+), 75 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/mac/mac.c b/drivers/staging/fsl-dpaa2/mac/mac.c
index 0b8abda..f7fe944 100644
--- a/drivers/staging/fsl-dpaa2/mac/mac.c
+++ b/drivers/staging/fsl-dpaa2/mac/mac.c
@@ -51,9 +51,9 @@
 #include "dpmac.h"
 #include "dpmac-cmd.h"
 
-#define PPX_SUPPORTED_DPMAC_VERSION	3
+#define DPAA2_SUPPORTED_DPMAC_VERSION	3
 
-struct ppx_priv {
+struct dpaa2_mac_priv {
 	struct net_device		*netdev;
 	struct fsl_mc_device		*mc_dev;
 	struct dpmac_attr		attr;
@@ -68,7 +68,7 @@ struct ppx_priv {
  *
  * This must be kept in sync with enum dpmac_eth_if.
  */
-static phy_interface_t ppx_eth_iface_mode[] =  {
+static phy_interface_t dpaa2_mac_iface_mode[] =  {
 	/* DPMAC_ETH_IF_MII */
 	PHY_INTERFACE_MODE_MII,
 	/* DPMAC_ETH_IF_RMII */
@@ -89,11 +89,11 @@ static phy_interface_t ppx_eth_iface_mode[] =  {
 	PHY_INTERFACE_MODE_XGMII,
 };
 
-static void ppx_link_changed(struct net_device *netdev)
+static void dpaa2_mac_link_changed(struct net_device *netdev)
 {
 	struct phy_device	*phydev;
 	struct dpmac_link_state	state = { 0 };
-	struct ppx_priv		*priv = netdev_priv(netdev);
+	struct dpaa2_mac_priv	*priv = netdev_priv(netdev);
 	int			err;
 
 	/* the PHY just notified us of link state change */
@@ -134,14 +134,15 @@ static const u32 dpmac_irq_mask =  DPMAC_IRQ_EVENT_LINK_CFG_REQ |
 				   DPMAC_IRQ_EVENT_LINK_CHANGED;
 
 #ifdef CONFIG_FSL_DPAA2_MAC_NETDEVS
-static netdev_tx_t ppx_dropframe(struct sk_buff *skb, struct net_device *dev)
+static netdev_tx_t dpaa2_mac_drop_frame(struct sk_buff *skb,
+					struct net_device *dev)
 {
 	/* we don't support I/O for now, drop the frame */
 	dev_kfree_skb_any(skb);
 	return NETDEV_TX_OK;
 }
 
-static int ppx_open(struct net_device *netdev)
+static int dpaa2_mac_open(struct net_device *netdev)
 {
 	/* start PHY state machine */
 	phy_start(netdev->phydev);
@@ -149,7 +150,7 @@ static int ppx_open(struct net_device *netdev)
 	return 0;
 }
 
-static int ppx_stop(struct net_device *netdev)
+static int dpaa2_mac_stop(struct net_device *netdev)
 {
 	if (!netdev->phydev)
 		goto done;
@@ -159,28 +160,29 @@ static int ppx_stop(struct net_device *netdev)
 
 	/* signal link down to firmware */
 	netdev->phydev->link = 0;
-	ppx_link_changed(netdev);
+	dpaa2_mac_link_changed(netdev);
 
 done:
 	return 0;
 }
 
-static int ppx_ethtool_get_settings(struct net_device *netdev,
-				    struct ethtool_cmd *cmd)
+static int dpaa2_mac_get_settings(struct net_device *netdev,
+				  struct ethtool_cmd *cmd)
 {
 	return phy_ethtool_gset(netdev->phydev, cmd);
 }
 
-static int ppx_ethtool_set_settings(struct net_device *netdev,
-				    struct ethtool_cmd *cmd)
+static int dpaa2_mac_set_settings(struct net_device *netdev,
+				  struct ethtool_cmd *cmd)
 {
 	return phy_ethtool_sset(netdev->phydev, cmd);
 }
 
 static struct rtnl_link_stats64
-*ppx_get_stats(struct net_device *netdev, struct rtnl_link_stats64 *storage)
+*dpaa2_mac_get_stats(struct net_device *netdev,
+		     struct rtnl_link_stats64 *storage)
 {
-	struct ppx_priv		*priv = netdev_priv(netdev);
+	struct dpaa2_mac_priv	*priv = netdev_priv(netdev);
 	u64			tmp;
 	int			err;
 
@@ -250,7 +252,7 @@ error:
 static struct {
 	enum dpmac_counter id;
 	char name[ETH_GSTRING_LEN];
-} ppx_ethtool_counters[] =  {
+} dpaa2_mac_counters[] =  {
 	{DPMAC_CNT_ING_ALL_FRAME,		"rx all frames"},
 	{DPMAC_CNT_ING_GOOD_FRAME,		"rx frames ok"},
 	{DPMAC_CNT_ING_ERR_FRAME,		"rx frame errors"},
@@ -282,66 +284,68 @@ static struct {
 
 };
 
-static void ppx_ethtool_get_strings(struct net_device *netdev,
-				    u32 stringset, u8 *data)
+static void dpaa2_mac_get_strings(struct net_device *netdev,
+				  u32 stringset, u8 *data)
 {
 	int i;
 
 	switch (stringset) {
 	case ETH_SS_STATS:
-		for (i = 0; i < ARRAY_SIZE(ppx_ethtool_counters); i++)
+		for (i = 0; i < ARRAY_SIZE(dpaa2_mac_counters); i++)
 			memcpy(data + i * ETH_GSTRING_LEN,
-			       ppx_ethtool_counters[i].name, ETH_GSTRING_LEN);
+			       dpaa2_mac_counters[i].name,
+			       ETH_GSTRING_LEN);
 		break;
 	}
 }
 
-static void ppx_ethtool_get_stats(struct net_device *netdev,
-				  struct ethtool_stats *stats,
-				  u64 *data)
+static void dpaa2_mac_get_ethtool_stats(struct net_device *netdev,
+					struct ethtool_stats *stats,
+					u64 *data)
 {
-	struct ppx_priv		*priv = netdev_priv(netdev);
+	struct dpaa2_mac_priv	*priv = netdev_priv(netdev);
 	int			i;
 	int			err;
 
-	for (i = 0; i < ARRAY_SIZE(ppx_ethtool_counters); i++) {
+	for (i = 0; i < ARRAY_SIZE(dpaa2_mac_counters); i++) {
 		err = dpmac_get_counter(priv->mc_dev->mc_io,
 					0,
 					priv->mc_dev->mc_handle,
-					ppx_ethtool_counters[i].id, &data[i]);
+					dpaa2_mac_counters[i].id, &data[i]);
 		if (err)
 			netdev_err(netdev, "dpmac_get_counter[%s] err %d\n",
-				   ppx_ethtool_counters[i].name, err);
+				   dpaa2_mac_counters[i].name, err);
 	}
 }
 
-static int ppx_ethtool_get_sset_count(struct net_device *dev, int sset)
+static int dpaa2_mac_get_sset_count(struct net_device *dev, int sset)
 {
 	switch (sset) {
 	case ETH_SS_STATS:
-		return ARRAY_SIZE(ppx_ethtool_counters);
+		return ARRAY_SIZE(dpaa2_mac_counters);
 	default:
 		return -EOPNOTSUPP;
 	}
 }
 
-static const struct net_device_ops ppx_ndo = {
-	.ndo_start_xmit		= &ppx_dropframe,
-	.ndo_open		= &ppx_open,
-	.ndo_stop		= &ppx_stop,
-	.ndo_get_stats64	= &ppx_get_stats,
+static const struct net_device_ops dpaa2_mac_ndo_ops = {
+	.ndo_start_xmit		= &dpaa2_mac_drop_frame,
+	.ndo_open		= &dpaa2_mac_open,
+	.ndo_stop		= &dpaa2_mac_stop,
+	.ndo_get_stats64	= &dpaa2_mac_get_stats,
 };
 
-static const struct ethtool_ops ppx_ethtool_ops = {
-	.get_settings		= &ppx_ethtool_get_settings,
-	.set_settings		= &ppx_ethtool_set_settings,
-	.get_strings		= &ppx_ethtool_get_strings,
-	.get_ethtool_stats	= &ppx_ethtool_get_stats,
-	.get_sset_count		= &ppx_ethtool_get_sset_count,
+static const struct ethtool_ops dpaa2_mac_ethtool_ops = {
+	.get_settings		= &dpaa2_mac_get_settings,
+	.set_settings		= &dpaa2_mac_set_settings,
+	.get_strings		= &dpaa2_mac_get_strings,
+	.get_ethtool_stats	= &dpaa2_mac_get_ethtool_stats,
+	.get_sset_count		= &dpaa2_mac_get_sset_count,
 };
 #endif /* CONFIG_FSL_DPAA2_MAC_NETDEVS */
 
-static int ppx_configure_link(struct ppx_priv *priv, struct dpmac_link_cfg *cfg)
+static int configure_link(struct dpaa2_mac_priv *priv,
+			  struct dpmac_link_cfg *cfg)
 {
 	struct phy_device *phydev = priv->netdev->phydev;
 
@@ -367,11 +371,11 @@ static int ppx_configure_link(struct ppx_priv *priv, struct dpmac_link_cfg *cfg)
 	return 0;
 }
 
-static irqreturn_t ppx_irq_handler(int irq_num, void *arg)
+static irqreturn_t dpaa2_mac_irq_handler(int irq_num, void *arg)
 {
 	struct device *dev = (struct device *)arg;
 	struct fsl_mc_device *mc_dev = to_fsl_mc_device(dev);
-	struct ppx_priv *priv = dev_get_drvdata(dev);
+	struct dpaa2_mac_priv *priv = dev_get_drvdata(dev);
 	struct dpmac_link_cfg link_cfg;
 	u8 irq_index = DPMAC_IRQ_INDEX;
 	u32 status, clear = 0;
@@ -402,7 +406,7 @@ static irqreturn_t ppx_irq_handler(int irq_num, void *arg)
 			goto out;
 		}
 
-		err = ppx_configure_link(priv, &link_cfg);
+		err = configure_link(priv, &link_cfg);
 		if (err) {
 			dev_err(dev, "cannot configure link\n");
 			goto out;
@@ -419,7 +423,7 @@ static irqreturn_t ppx_irq_handler(int irq_num, void *arg)
 		 * we want to make sure we have the DPMAC state updated.
 		 */
 		if (phy_interrupt_is_valid(priv->netdev->phydev))
-			ppx_link_changed(priv->netdev);
+			dpaa2_mac_link_changed(priv->netdev);
 	}
 
 out:
@@ -435,7 +439,7 @@ err:
 	return IRQ_NONE;
 }
 
-static int ppx_setup_irqs(struct fsl_mc_device *mc_dev)
+static int setup_irqs(struct fsl_mc_device *mc_dev)
 {
 	int err;
 
@@ -460,7 +464,7 @@ static int ppx_setup_irqs(struct fsl_mc_device *mc_dev)
 
 	err = devm_request_threaded_irq(&mc_dev->dev,
 					mc_dev->irqs[0]->irq_number,
-					NULL, &ppx_irq_handler,
+					NULL, &dpaa2_mac_irq_handler,
 					IRQF_NO_SUSPEND | IRQF_ONESHOT,
 					dev_name(&mc_dev->dev), &mc_dev->dev);
 	if (err) {
@@ -492,7 +496,7 @@ free_irq:
 	return err;
 }
 
-static void ppx_teardown_irqs(struct fsl_mc_device *mc_dev)
+static void teardown_irqs(struct fsl_mc_device *mc_dev)
 {
 	int err;
 
@@ -511,8 +515,7 @@ static void ppx_teardown_irqs(struct fsl_mc_device *mc_dev)
 
 }
 
-static struct device_node *ppx_lookup_node(struct device *dev,
-					   int dpmac_id)
+static struct device_node *lookup_node(struct device *dev, int dpmac_id)
 {
 	struct device_node *dpmacs, *dpmac = NULL;
 	struct device_node *mc_node = dev->of_node;
@@ -539,7 +542,7 @@ static struct device_node *ppx_lookup_node(struct device *dev,
 	return NULL;
 }
 
-static int check_dpmac_version(struct ppx_priv *priv)
+static int check_dpmac_version(struct dpaa2_mac_priv *priv)
 {
 	struct device *dev = &priv->mc_dev->dev;
 	int mc_version = priv->attr.version.major;
@@ -552,7 +555,7 @@ static int check_dpmac_version(struct ppx_priv *priv)
 	}
 
 	/* ... and that we actually support it */
-	if (mc_version < PPX_SUPPORTED_DPMAC_VERSION) {
+	if (mc_version < DPAA2_SUPPORTED_DPMAC_VERSION) {
 		dev_err(dev, "Unsupported DPMAC FLIB version (%d)\n",
 			mc_version);
 		return -EINVAL;
@@ -563,10 +566,10 @@ static int check_dpmac_version(struct ppx_priv *priv)
 	return 0;
 }
 
-static int ppx_probe(struct fsl_mc_device *mc_dev)
+static int dpaa2_mac_probe(struct fsl_mc_device *mc_dev)
 {
 	struct device		*dev;
-	struct ppx_priv		*priv = NULL;
+	struct dpaa2_mac_priv	*priv = NULL;
 	struct device_node	*phy_node, *dpmac_node;
 	struct net_device	*netdev;
 	phy_interface_t		if_mode;
@@ -621,14 +624,14 @@ static int ppx_probe(struct fsl_mc_device *mc_dev)
 		goto err_close;
 
 	/* Look up the DPMAC node in the device-tree. */
-	dpmac_node = ppx_lookup_node(dev, priv->attr.id);
+	dpmac_node = lookup_node(dev, priv->attr.id);
 	if (!dpmac_node) {
 		dev_err(dev, "No dpmac@%d subnode found.\n", priv->attr.id);
 		err = -ENODEV;
 		goto err_close;
 	}
 
-	err = ppx_setup_irqs(mc_dev);
+	err = setup_irqs(mc_dev);
 	if (err) {
 		err = -EFAULT;
 		goto err_close;
@@ -636,8 +639,8 @@ static int ppx_probe(struct fsl_mc_device *mc_dev)
 
 #ifdef CONFIG_FSL_DPAA2_MAC_NETDEVS
 	/* OPTIONAL, register netdev just to make it visible to the user */
-	netdev->netdev_ops = &ppx_ndo;
-	netdev->ethtool_ops = &ppx_ethtool_ops;
+	netdev->netdev_ops = &dpaa2_mac_ndo_ops;
+	netdev->ethtool_ops = &dpaa2_mac_ethtool_ops;
 
 	/* phy starts up enabled so netdev should be up too */
 	netdev->flags |= IFF_UP;
@@ -656,8 +659,8 @@ static int ppx_probe(struct fsl_mc_device *mc_dev)
 	if (priv->attr.link_type == DPMAC_LINK_TYPE_FIXED)
 		goto probe_fixed_link;
 
-	if (priv->attr.eth_if < ARRAY_SIZE(ppx_eth_iface_mode)) {
-		if_mode = ppx_eth_iface_mode[priv->attr.eth_if];
+	if (priv->attr.eth_if < ARRAY_SIZE(dpaa2_mac_iface_mode)) {
+		if_mode = dpaa2_mac_iface_mode[priv->attr.eth_if];
 		dev_dbg(dev, "\tusing if mode %s for eth_if %d\n",
 			phy_modes(if_mode), priv->attr.eth_if);
 	} else {
@@ -675,8 +678,8 @@ static int ppx_probe(struct fsl_mc_device *mc_dev)
 			goto err_no_phy;
 		}
 	}
-	netdev->phydev = of_phy_connect(netdev, phy_node, &ppx_link_changed,
-					0, if_mode);
+	netdev->phydev = of_phy_connect(netdev, phy_node,
+					&dpaa2_mac_link_changed, 0, if_mode);
 	if (!netdev->phydev) {
 		/* No need for dev_err(); the kernel's loud enough as it is. */
 		dev_dbg(dev, "Can't of_phy_connect() now.\n");
@@ -711,7 +714,7 @@ probe_fixed_link:
 
 	/* start PHY state machine */
 #ifdef CONFIG_FSL_DPAA2_MAC_NETDEVS
-	ppx_open(netdev);
+	dpaa2_mac_open(netdev);
 #else /* CONFIG_FSL_DPAA2_MAC_NETDEVS */
 	phy_start(netdev->phydev);
 #endif /* CONFIG_FSL_DPAA2_MAC_NETDEVS */
@@ -723,7 +726,7 @@ err_no_phy:
 	unregister_netdev(netdev);
 err_free_irq:
 #endif
-	ppx_teardown_irqs(mc_dev);
+	teardown_irqs(mc_dev);
 err_close:
 	dpmac_close(mc_dev->mc_io, 0, mc_dev->mc_handle);
 err_free_mcp:
@@ -734,13 +737,13 @@ err_exit:
 	return err;
 }
 
-static int ppx_remove(struct fsl_mc_device *devppx)
+static int dpaa2_mac_remove(struct fsl_mc_device *mc_dev)
 {
-	struct device		*dev = &devppx->dev;
-	struct ppx_priv		*priv = dev_get_drvdata(dev);
+	struct device		*dev = &mc_dev->dev;
+	struct dpaa2_mac_priv	*priv = dev_get_drvdata(dev);
 
 	unregister_netdev(priv->netdev);
-	ppx_teardown_irqs(priv->mc_dev);
+	teardown_irqs(priv->mc_dev);
 	dpmac_close(priv->mc_dev->mc_io, 0, priv->mc_dev->mc_handle);
 	fsl_mc_portal_free(priv->mc_dev->mc_io);
 	free_netdev(priv->netdev);
@@ -751,7 +754,7 @@ static int ppx_remove(struct fsl_mc_device *devppx)
 	return 0;
 }
 
-static const struct fsl_mc_device_match_id ppx_match_id_table[] = {
+static const struct fsl_mc_device_match_id dpaa2_mac_match_id_table[] = {
 	{
 		.vendor = FSL_MC_VENDOR_FREESCALE,
 		.obj_type = "dpmac",
@@ -761,17 +764,17 @@ static const struct fsl_mc_device_match_id ppx_match_id_table[] = {
 	{}
 };
 
-static struct fsl_mc_driver ppx_drv = {
+static struct fsl_mc_driver dpaa2_mac_drv = {
 	.driver = {
 		.name		= KBUILD_MODNAME,
 		.owner		= THIS_MODULE,
 	},
-	.probe		= ppx_probe,
-	.remove		= ppx_remove,
-	.match_id_table = ppx_match_id_table,
+	.probe		= dpaa2_mac_probe,
+	.remove		= dpaa2_mac_remove,
+	.match_id_table = dpaa2_mac_match_id_table,
 };
 
-module_fsl_mc_driver(ppx_drv);
+module_fsl_mc_driver(dpaa2_mac_drv);
 
 MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("DPAA2 PHY proxy interface driver (prototype)");
+MODULE_DESCRIPTION("DPAA2 PHY proxy interface driver");
-- 
2.9.3

