From 31f83fb99f37a36399928cd63985db177b576832 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Tue, 11 Oct 2016 15:14:35 +0800
Subject: [PATCH 751/752] fsl_qbman: use kzalloc to allocate iommu memory

The memory must be set to zero. Else iommu would use uninitialized memory
and system would report the below error during init qman:

QMan: Allocated lookup table at 8000000000000000, entry count 131073
Unable to handle kernel paging request for data at address 0xdeadbeefdeadbf2f
Faulting instruction address: 0xc000000000606378
Oops: Kernel access of bad area, sig: 11 [#1]
PREEMPT SMP NR_CPUS=24 CoreNet Generic
Modules linked in:
CPU: 1 PID: 1 Comm: swapper/0 Not tainted 4.8.0-rc2-rt8-WR9.0.0.0_standard+ #10
task: c0000005de0f0000 task.stack: c0000005de0f8000
NIP: c000000000606378 LR: c000000000920dcc CTR: c00000000060a8e0
REGS: c0000005de0fb480 TRAP: 0300   Not tainted  (4.8.0-rc2-rt8-WR8.0.0.0_standard+)
MSR: 0000000080029000 <CE,EE,ME>  CR: 24adbe28  XER: 20000000
DEAR: deadbeefdeadbf2f ESR: 0000000000000000 SOFTE: 1
GPR00: c000000000920dcc c0000005de0fb700 c000000000fb7600 c0000005deacce78
GPR04: c0000005dec02490 0000000000000000 0000001000000000 c0000005debcf300
GPR08: 0000000000000000 0000000000000800 0000000000000000 0000000002493ee0
GPR12: 0000000024adbe28 c00000003fff5700 0000000000000000 c000000000c4bed8
GPR16: c000000000cabed8 c000000000cabea8 c000000000cabea0 c000000000e7fbf8
GPR20: 0000000000000100 0000000000000200 0000000000000100 0000000000000200
GPR24: c000000000b2f360 c000000000fbedb8 c000000000fbeec4 c0000005de0fb940
GPR28: c0000005deacce78 0000000000000001 c0000005dec02490 deadbeefdeadbeef
NIP [c000000000606378] .iommu_attach_device+0x38/0x120
LR [c000000000920dcc] .portal_set_cpu+0x10c/0x240
Call Trace:
[c0000005de0fb700] [c000000000603c3c] .iommu_domain_set_attr+0xbc/0xf0 (unreliable)
[c0000005de0fb790] [c000000000920dcc] .portal_set_cpu+0x10c/0x240
[c0000005de0fb850] [c000000000b29224] .init_pcfg+0x34/0xbc
[c0000005de0fb8d0] [c000000000d88f60] .qman_init+0xd88/0xff4
[c0000005de0fba30] [c000000000d86734] .qbman_init+0x34/0x1b4
[c0000005de0fbb80] [c000000000001a58] .do_one_initcall+0x68/0x1d0
[c0000005de0fbc60] [c000000000d3bf9c] .kernel_init_freeable+0x228/0x348
[c0000005de0fbdb0] [c0000000000023a0] .kernel_init+0x20/0xc80
[c0000005de0fbe30] [c0000000000009bc] .ret_from_kernel_thread+0x58/0x9c
Instruction dump:
f8010010 fba1ffe8 fbc1fff0 fbe1fff8 f821ff71 7c9e2378 7c7c1b78 60000000
60000000 ebfe02b8 2fbf0000 41de009c <e87f0040> 3bdf0058 4bf3a881 60000000
---[ end trace ac17240afa74626a ]---

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_qbman/fsl_usdpaa.c  | 6 +++---
 drivers/staging/fsl_qbman/qman_driver.c | 2 +-
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/staging/fsl_qbman/fsl_usdpaa.c b/drivers/staging/fsl_qbman/fsl_usdpaa.c
index d2775b0..49587df 100644
--- a/drivers/staging/fsl_qbman/fsl_usdpaa.c
+++ b/drivers/staging/fsl_qbman/fsl_usdpaa.c
@@ -965,7 +965,7 @@ static long ioctl_dma_map(struct file *fp, struct ctx *ctx,
 	if (i->len % PAGE_SIZE)
 		return -EINVAL;
 
-	map = kmalloc(sizeof(*map), GFP_KERNEL);
+	map = kzalloc(sizeof(*map), GFP_KERNEL);
 	if (!map)
 		return -ENOMEM;
 
@@ -1339,7 +1339,7 @@ static void portal_munmap(struct resource *res, void  *ptr)
 static long ioctl_portal_map(struct file *fp, struct ctx *ctx,
 			     struct usdpaa_ioctl_portal_map  *arg)
 {
-	struct portal_mapping *mapping = kmalloc(sizeof(*mapping), GFP_KERNEL);
+	struct portal_mapping *mapping = kzalloc(sizeof(*mapping), GFP_KERNEL);
 	int ret;
 
 	if (!mapping)
@@ -1543,7 +1543,7 @@ _iommu_domain_free:
 static long ioctl_allocate_raw_portal(struct file *fp, struct ctx *ctx,
 				      struct usdpaa_ioctl_raw_portal *arg)
 {
-	struct portal_mapping *mapping = kmalloc(sizeof(*mapping), GFP_KERNEL);
+	struct portal_mapping *mapping = kzalloc(sizeof(*mapping), GFP_KERNEL);
 	int ret;
 
 	if (!mapping)
diff --git a/drivers/staging/fsl_qbman/qman_driver.c b/drivers/staging/fsl_qbman/qman_driver.c
index 57baca5..484dcac 100644
--- a/drivers/staging/fsl_qbman/qman_driver.c
+++ b/drivers/staging/fsl_qbman/qman_driver.c
@@ -378,7 +378,7 @@ static struct qm_portal_config * __init parse_pcfg(struct device_node *node)
 	int irq, ret;
 	resource_size_t len;
 
-	pcfg = kmalloc(sizeof(*pcfg), GFP_KERNEL);
+	pcfg = kzalloc(sizeof(*pcfg), GFP_KERNEL);
 	if (!pcfg) {
 		pr_err("can't allocate portal config");
 		return NULL;
-- 
2.9.3

