From 8b94380af4a175fd93e37046b307ab146ed6d2c0 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Wed, 12 Aug 2015 19:59:47 +0300
Subject: [PATCH 269/752] dpaa2-eth: Remove debugfs #ifdefs from dpaa2-eth.c

Instead of conditionally compiling the calls to debugfs init
functions in dpaa2-eth.c, define no-op stubs for these functions
in case the debugfs Kconfig option is not enabled. This makes
the code more readable.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.h |  7 +++++++
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c         | 14 ++------------
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h         |  6 +-----
 3 files changed, 10 insertions(+), 17 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.h
index d70d782..f377f1f 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.h
@@ -45,10 +45,17 @@ struct ldpaa_debugfs {
 	struct dentry *reset_stats;
 };
 
+#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
 void ldpaa_eth_dbg_init(void);
 void ldpaa_eth_dbg_exit(void);
 void ldpaa_dbg_add(struct ldpaa_eth_priv *priv);
 void ldpaa_dbg_remove(struct ldpaa_eth_priv *priv);
+#else
+static inline void ldpaa_eth_dbg_init(void) {}
+static inline void ldpaa_eth_dbg_exit(void) {}
+static inline void ldpaa_dbg_add(struct ldpaa_eth_priv *priv) {}
+static inline void ldpaa_dbg_remove(struct ldpaa_eth_priv *priv) {}
+#endif /* CONFIG_FSL_DPAA2_ETH_DEBUGFS */
 
 #endif /* LDPAA_ETH_DEBUGFS_H */
 
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 28b249b..5e6d675 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -2467,10 +2467,7 @@ ldpaa_eth_probe(struct fsl_mc_device *dpni_dev)
 #endif
 
 	ldpaa_eth_sysfs_init(&net_dev->dev);
-
-#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
 	ldpaa_dbg_add(priv);
-#endif
 
 	dev_info(dev, "ldpaa ethernet: Probed interface %s\n", net_dev->name);
 	return 0;
@@ -2521,13 +2518,12 @@ ldpaa_eth_remove(struct fsl_mc_device *ls_dev)
 	net_dev = dev_get_drvdata(dev);
 	priv = netdev_priv(net_dev);
 
+	ldpaa_dbg_remove(priv);
 	ldpaa_eth_sysfs_remove(&net_dev->dev);
+
 	unregister_netdev(net_dev);
 	dev_info(net_dev->dev.parent, "Removed interface %s\n", net_dev->name);
 
-#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
-	ldpaa_dbg_remove(priv);
-#endif
 	ldpaa_dpio_free(priv);
 	ldpaa_eth_free_rings(priv);
 	ldpaa_eth_napi_del(priv);
@@ -2578,15 +2574,11 @@ static int __init ldpaa_eth_driver_init(void)
 {
 	int err;
 
-#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
 	ldpaa_eth_dbg_init();
-#endif
 
 	err = fsl_mc_driver_register(&ldpaa_eth_driver);
 	if (err) {
-#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
 		ldpaa_eth_dbg_exit();
-#endif
 		return err;
 	}
 
@@ -2596,9 +2588,7 @@ static int __init ldpaa_eth_driver_init(void)
 static void __exit ldpaa_eth_driver_exit(void)
 {
 	fsl_mc_driver_unregister(&ldpaa_eth_driver);
-#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
 	ldpaa_eth_dbg_exit();
-#endif
 }
 
 module_init(ldpaa_eth_driver_init);
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index 1cc2ddd..5f3360c 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -41,11 +41,8 @@
 #include "dpni.h"
 #include "dpni-cmd.h"
 
-#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
-#include "dpaa2-eth-debugfs.h"
-#endif
-
 #include "dpaa2-eth-trace.h"
+#include "dpaa2-eth-debugfs.h"
 
 /* TODO : how many queues here? NR_CPUS? */
 #define LDPAA_ETH_TX_QUEUES		8	/* FIXME */
@@ -280,7 +277,6 @@ struct ldpaa_eth_priv {
 
 	uint16_t tx_qdid;
 	struct fsl_mc_io *mc_io;
-	struct dentry *debugfs_file;
 	/* SysFS-controlled affinity mask for TxConf FQs */
 	struct cpumask txconf_cpumask;
 	/* Cores which have an affine DPIO/DPCON.
-- 
2.9.3

