From 51faa53ff0f3b52d4cf8b60f1d740395020603d7 Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Fri, 2 Oct 2015 12:20:14 +0300
Subject: [PATCH 278/752] dpaa2-eth: Manually update link state at ifup

The DPMAC may have handled the link state notification before the DPNI
is up. A new PHY state transision may not subsequently occur, so the
DPNI must initiate a read of the DPMAC state.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c | 80 ++++++++++++++------------
 1 file changed, 43 insertions(+), 37 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index db89a60..a97c6a6 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -846,6 +846,37 @@ static void ldpaa_eth_napi_disable(struct ldpaa_eth_priv *priv)
 	}
 }
 
+static int ldpaa_link_state_update(struct ldpaa_eth_priv *priv)
+{
+	struct dpni_link_state state;
+	int err;
+
+	err = dpni_get_link_state(priv->mc_io, 0, priv->mc_token, &state);
+	if (unlikely(err)) {
+		netdev_err(priv->net_dev,
+			   "dpni_get_link_state() failed\n");
+		return err;
+	}
+
+	/* TODO: Speed / duplex changes are not treated yet */
+	if (priv->link_state.up == state.up)
+		return 0;
+
+	priv->link_state = state;
+	if (state.up) {
+		netif_carrier_on(priv->net_dev);
+		netif_tx_start_all_queues(priv->net_dev);
+	} else {
+		netif_tx_stop_all_queues(priv->net_dev);
+		netif_carrier_off(priv->net_dev);
+	}
+
+	netdev_info(priv->net_dev, "Link Event: state: %d", state.up);
+	WARN_ONCE(state.up > 1, "Garbage read into link_state");
+
+	return 0;
+}
+
 static int __cold ldpaa_eth_open(struct net_device *net_dev)
 {
 	struct ldpaa_eth_priv *priv = netdev_priv(net_dev);
@@ -864,16 +895,12 @@ static int __cold ldpaa_eth_open(struct net_device *net_dev)
 	/* We'll only start the txqs when the link is actually ready; make sure
 	 * we don't race against the link up notification, which may come
 	 * immediately after dpni_enable();
-	 *
-	 * FIXME beware of race conditions
 	 */
 	netif_tx_stop_all_queues(net_dev);
 	ldpaa_eth_napi_enable(priv);
 	/* Also, explicitly set carrier off, otherwise netif_carrier_ok() will
-	 * return true even if the link isn't actually __LINK_STATE_PRESENT
-	 * (while 'ifconfig up' sets __LINK_STATE_LINKWATCH_PENDING). This will
-	 * cause 'ip link show' to report the LOWER_UP flag, when in fact
-	 * the link notification wasn't even received at this point.
+	 * return true and cause 'ip link show' to report the LOWER_UP flag,
+	 * even though the link notification wasn't even received.
 	 */
 	netif_carrier_off(net_dev);
 
@@ -883,8 +910,18 @@ static int __cold ldpaa_eth_open(struct net_device *net_dev)
 		goto enable_err;
 	}
 
+	/* If the DPMAC object has already processed the link up interrupt,
+	 * we have to learn the link state ourselves.
+	 */
+	err = ldpaa_link_state_update(priv);
+	if (err < 0) {
+		dev_err(net_dev->dev.parent, "Can't update link state\n");
+		goto link_state_err;
+	}
+
 	return 0;
 
+link_state_err:
 enable_err:
 	ldpaa_eth_napi_disable(priv);
 	__ldpaa_dpbp_free(priv);
@@ -2079,37 +2116,6 @@ static int ldpaa_eth_netdev_init(struct net_device *net_dev)
 	return 0;
 }
 
-static int ldpaa_link_state_update(struct ldpaa_eth_priv *priv)
-{
-	struct dpni_link_state state;
-	int err;
-
-	err = dpni_get_link_state(priv->mc_io, 0, priv->mc_token, &state);
-	if (unlikely(err)) {
-		netdev_err(priv->net_dev,
-			   "dpni_get_link_state() failed\n");
-		return err;
-	}
-
-	/* TODO: Speed / duplex changes are not treated yet */
-	if (priv->link_state.up == state.up)
-		return 0;
-
-	priv->link_state = state;
-	if (state.up) {
-		netif_carrier_on(priv->net_dev);
-		netif_tx_start_all_queues(priv->net_dev);
-	} else {
-		netif_tx_stop_all_queues(priv->net_dev);
-		netif_carrier_off(priv->net_dev);
-	}
-
-	netdev_info(priv->net_dev, "Link Event: state: %d", state.up);
-	WARN_ONCE(state.up > 1, "Garbage read into link_state");
-
-	return 0;
-}
-
 #ifdef CONFIG_FSL_DPAA2_ETH_LINK_POLL
 static int ldpaa_poll_link_state(void *arg)
 {
-- 
2.9.3

