From de963c08a0a5cf030d894694945722d1c61cca6e Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Fri, 29 Jul 2016 15:38:23 +0800
Subject: [PATCH 832/838] fsl_qbman: replace get_cpu_var with this_cpu_ptr

create_per_cpu_handlers() and destroy_per_cpu_handlers() have been bound
to a special CPU through on_all_cpus(), so we don't need to disable preempt
in these two functions. Else we would get some atomic warnings like below:

BUG: sleeping function called from invalid context at kernel/locking/rtmutex.c:917
in_atomic(): 1, irqs_disabled(): 0, pid: 1112, name: hotpotato0
Preemption disabled at:[<          (null)>]           (null)

CPU: 0 PID: 1112 Comm: hotpotato0 Tainted: G         C
Call Trace:
[c0000005d4b5fa70] [c000000000b70bc8] .dump_stack+0xb4/0xfc (unreliable)
[c0000005d4b5fb00] [c00000000009ee10] .___might_sleep+0x170/0x200
[c0000005d4b5fb90] [c000000000b6c010] .rt_spin_lock+0x30/0xa0
[c0000005d4b5fc10] [800000000073f324] .create_per_cpu_handlers+0x84/0x1d0 [qman_tester]
[c0000005d4b5fcb0] [800000000073f9e8] .bstrap_fn+0x48/0x90 [qman_tester]
[c0000005d4b5fd30] [c0000000000934e8] .kthread+0x108/0x130
[c0000005d4b5fe30] [c0000000000009b0] .ret_from_kernel_thread+0x58/0xa8

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_qbman/qman_test_hotpotato.c | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_test_hotpotato.c b/drivers/staging/fsl_qbman/qman_test_hotpotato.c
index 145a480..85495da 100644
--- a/drivers/staging/fsl_qbman/qman_test_hotpotato.c
+++ b/drivers/staging/fsl_qbman/qman_test_hotpotato.c
@@ -273,7 +273,7 @@ static void create_per_cpu_handlers(void)
 {
 	struct hp_handler *handler;
 	int loop;
-	struct hp_cpu *hp_cpu = &get_cpu_var(hp_cpus);
+	struct hp_cpu *hp_cpu = this_cpu_ptr(&hp_cpus);
 
 	hp_cpu->processor_id = smp_processor_id();
 	spin_lock(&hp_lock);
@@ -290,13 +290,12 @@ static void create_per_cpu_handlers(void)
 		handler->frame_ptr = frame_ptr;
 		list_add_tail(&handler->node, &hp_cpu->handlers);
 	}
-	put_cpu_var(hp_cpus);
 }
 
 static void destroy_per_cpu_handlers(void)
 {
 	struct list_head *loop, *tmp;
-	struct hp_cpu *hp_cpu = &get_cpu_var(hp_cpus);
+	struct hp_cpu *hp_cpu = this_cpu_ptr(&hp_cpus);
 
 	spin_lock(&hp_lock);
 	list_del(&hp_cpu->node);
@@ -316,7 +315,6 @@ static void destroy_per_cpu_handlers(void)
 		list_del(&handler->node);
 		kmem_cache_free(hp_handler_slab, handler);
 	}
-	put_cpu_var(hp_cpus);
 }
 
 static inline u8 num_cachelines(u32 offset)
-- 
2.0.2

