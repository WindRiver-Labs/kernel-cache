From ca1d6523f56869c86cd1306db6f24ecce8605a41 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Tue, 2 Feb 2016 12:32:44 +0200
Subject: [PATCH 508/752] fsl-dpaa2: eth: Structure and macro renames

Some more renaming:
* defines of error/status bits in the frame annotation status
word get a "DPAA2_FAS" prefix instead of "DPAA2_ETH_FAS", as they're
not really specific to the ethernet driver. We may consider moving
these defines to a separate header file in the future
* DPAA2_ETH_RX_BUFFER_SIZE is renamed to DPAA2_ETH_RX_BUF_SIZE
to better match the naming style of other defines
* structure "dpaa2_eth_stats" becomes "dpaa2_eth_drv_stats" to
make it clear these are driver specific statistics

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 .../staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.c |  4 +-
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c     | 32 ++++----
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h     | 86 +++++++++++-----------
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c |  4 +-
 4 files changed, 63 insertions(+), 63 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.c
index d7d1096..85b783c 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.c
@@ -45,7 +45,7 @@ static int dpaa2_dbg_cpu_show(struct seq_file *file, void *offset)
 {
 	struct dpaa2_eth_priv *priv = (struct dpaa2_eth_priv *)file->private;
 	struct rtnl_link_stats64 *stats;
-	struct dpaa2_eth_stats *extras;
+	struct dpaa2_eth_drv_stats *extras;
 	int i;
 
 	seq_printf(file, "Per-CPU stats for %s\n", priv->net_dev->name);
@@ -200,7 +200,7 @@ static ssize_t dpaa2_dbg_reset_write(struct file *file, const char __user *buf,
 {
 	struct dpaa2_eth_priv *priv = file->private_data;
 	struct rtnl_link_stats64 *percpu_stats;
-	struct dpaa2_eth_stats *percpu_extras;
+	struct dpaa2_eth_drv_stats *percpu_extras;
 	struct dpaa2_eth_fq *fq;
 	struct dpaa2_eth_channel *ch;
 	int i;
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index e68366d..fb9d416 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -72,8 +72,8 @@ static void validate_rx_csum(struct dpaa2_eth_priv *priv,
 		return;
 
 	/* Read checksum validation bits */
-	if (!((fd_status & DPAA2_ETH_FAS_L3CV) &&
-	      (fd_status & DPAA2_ETH_FAS_L4CV)))
+	if (!((fd_status & DPAA2_FAS_L3CV) &&
+	      (fd_status & DPAA2_FAS_L4CV)))
 		return;
 
 	/* Inform the stack there's no need to compute L3/L4 csum anymore */
@@ -104,7 +104,7 @@ static void free_rx_fd(struct dpaa2_eth_priv *priv,
 		dpaa2_sg_le_to_cpu(&sgt[i]);
 
 		addr = dpaa2_sg_get_addr(&sgt[i]);
-		dma_unmap_single(dev, addr, DPAA2_ETH_RX_BUFFER_SIZE,
+		dma_unmap_single(dev, addr, DPAA2_ETH_RX_BUF_SIZE,
 				 DMA_FROM_DEVICE);
 
 		sg_vaddr = phys_to_virt(addr);
@@ -128,7 +128,7 @@ static struct sk_buff *build_linear_skb(struct dpaa2_eth_priv *priv,
 	u16 fd_offset = dpaa2_fd_get_offset(fd);
 	u32 fd_length = dpaa2_fd_get_len(fd);
 
-	skb = build_skb(fd_vaddr, DPAA2_ETH_RX_BUFFER_SIZE +
+	skb = build_skb(fd_vaddr, DPAA2_ETH_RX_BUF_SIZE +
 			SKB_DATA_ALIGN(sizeof(struct skb_shared_info)));
 	if (unlikely(!skb))
 		return NULL;
@@ -167,7 +167,7 @@ static struct sk_buff *build_frag_skb(struct dpaa2_eth_priv *priv,
 
 		/* Get the address, offset and length from the S/G entry */
 		sg_addr = dpaa2_sg_get_addr(sge);
-		dma_unmap_single(dev, sg_addr, DPAA2_ETH_RX_BUFFER_SIZE,
+		dma_unmap_single(dev, sg_addr, DPAA2_ETH_RX_BUF_SIZE,
 				 DMA_FROM_DEVICE);
 
 		sg_vaddr = phys_to_virt(sg_addr);
@@ -175,7 +175,7 @@ static struct sk_buff *build_frag_skb(struct dpaa2_eth_priv *priv,
 
 		if (i == 0) {
 			/* We build the skb around the first data buffer */
-			skb = build_skb(sg_vaddr, DPAA2_ETH_RX_BUFFER_SIZE +
+			skb = build_skb(sg_vaddr, DPAA2_ETH_RX_BUF_SIZE +
 				SKB_DATA_ALIGN(sizeof(struct skb_shared_info)));
 			if (unlikely(!skb))
 				return NULL;
@@ -198,7 +198,7 @@ static struct sk_buff *build_frag_skb(struct dpaa2_eth_priv *priv,
 				(page_address(page) - page_address(head_page));
 
 			skb_add_rx_frag(skb, i - 1, head_page, page_offset,
-					sg_length, DPAA2_ETH_RX_BUFFER_SIZE);
+					sg_length, DPAA2_ETH_RX_BUF_SIZE);
 		}
 
 		if (dpaa2_sg_is_final(sge))
@@ -221,7 +221,7 @@ static void dpaa2_eth_rx(struct dpaa2_eth_priv *priv,
 	void *vaddr;
 	struct sk_buff *skb;
 	struct rtnl_link_stats64 *percpu_stats;
-	struct dpaa2_eth_stats *percpu_extras;
+	struct dpaa2_eth_drv_stats *percpu_extras;
 	struct device *dev = priv->net_dev->dev.parent;
 	struct dpaa2_fas *fas;
 	u32 status = 0;
@@ -229,7 +229,7 @@ static void dpaa2_eth_rx(struct dpaa2_eth_priv *priv,
 	/* Tracing point */
 	trace_dpaa2_rx_fd(priv->net_dev, fd);
 
-	dma_unmap_single(dev, addr, DPAA2_ETH_RX_BUFFER_SIZE, DMA_FROM_DEVICE);
+	dma_unmap_single(dev, addr, DPAA2_ETH_RX_BUF_SIZE, DMA_FROM_DEVICE);
 	vaddr = phys_to_virt(addr);
 
 	prefetch(vaddr + priv->buf_layout.private_data_size);
@@ -306,7 +306,7 @@ static void dpaa2_eth_rx_err(struct dpaa2_eth_priv *priv,
 	struct dpaa2_fas *fas;
 	u32 status = 0;
 
-	dma_unmap_single(dev, addr, DPAA2_ETH_RX_BUFFER_SIZE, DMA_FROM_DEVICE);
+	dma_unmap_single(dev, addr, DPAA2_ETH_RX_BUF_SIZE, DMA_FROM_DEVICE);
 	vaddr = phys_to_virt(addr);
 
 	if (fd->simple.frc & DPAA2_FD_FRC_FASV) {
@@ -600,7 +600,7 @@ static int dpaa2_eth_tx(struct sk_buff *skb, struct net_device *net_dev)
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
 	struct dpaa2_fd fd;
 	struct rtnl_link_stats64 *percpu_stats;
-	struct dpaa2_eth_stats *percpu_extras;
+	struct dpaa2_eth_drv_stats *percpu_extras;
 	int err, i;
 	/* TxConf FQ selection primarily based on cpu affinity; this is
 	 * non-migratable context, so it's safe to call smp_processor_id().
@@ -683,7 +683,7 @@ static void dpaa2_eth_tx_conf(struct dpaa2_eth_priv *priv,
 			      struct napi_struct *napi __always_unused)
 {
 	struct rtnl_link_stats64 *percpu_stats;
-	struct dpaa2_eth_stats *percpu_extras;
+	struct dpaa2_eth_drv_stats *percpu_extras;
 	u32 status = 0;
 
 	/* Tracing point */
@@ -773,7 +773,7 @@ static int add_bufs(struct dpaa2_eth_priv *priv, u16 bpid)
 
 		buf = PTR_ALIGN(buf, DPAA2_ETH_RX_BUF_ALIGN);
 
-		addr = dma_map_single(dev, buf, DPAA2_ETH_RX_BUFFER_SIZE,
+		addr = dma_map_single(dev, buf, DPAA2_ETH_RX_BUF_SIZE,
 				      DMA_FROM_DEVICE);
 		if (unlikely(dma_mapping_error(dev, addr)))
 			goto err_map;
@@ -783,7 +783,7 @@ static int add_bufs(struct dpaa2_eth_priv *priv, u16 bpid)
 		/* tracing point */
 		trace_dpaa2_eth_buf_seed(priv->net_dev,
 					 buf, DPAA2_ETH_BUF_RAW_SIZE,
-					 addr, DPAA2_ETH_RX_BUFFER_SIZE,
+					 addr, DPAA2_ETH_RX_BUF_SIZE,
 					 bpid);
 	}
 
@@ -863,7 +863,7 @@ static void drain_bufs(struct dpaa2_eth_priv *priv, int count)
 		for (i = 0; i < ret; i++) {
 			/* Same logic as on regular Rx path */
 			dma_unmap_single(dev, buf_array[i],
-					 DPAA2_ETH_RX_BUFFER_SIZE,
+					 DPAA2_ETH_RX_BUF_SIZE,
 					 DMA_FROM_DEVICE);
 			vaddr = phys_to_virt(buf_array[i]);
 			put_page(virt_to_head_page(vaddr));
@@ -2144,7 +2144,7 @@ static int bind_dpni(struct dpaa2_eth_priv *priv)
 	pools_params.num_dpbp = 1;
 	pools_params.pools[0].dpbp_id = priv->dpbp_dev->obj_desc.id;
 	pools_params.pools[0].backup_pool = 0;
-	pools_params.pools[0].buffer_size = DPAA2_ETH_RX_BUFFER_SIZE;
+	pools_params.pools[0].buffer_size = DPAA2_ETH_RX_BUF_SIZE;
 	err = dpni_set_pools(priv->mc_io, 0, priv->mc_token, &pools_params);
 	if (err) {
 		dev_err(dev, "dpni_set_pools() failed\n");
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index 679037b..8af1867 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -50,7 +50,7 @@
 #define DPAA2_ETH_STORE_SIZE		16
 
 /* Maximum receive frame size is 64K */
-#define DPAA2_ETH_MAX_SG_ENTRIES	((64 * 1024) / DPAA2_ETH_RX_BUFFER_SIZE)
+#define DPAA2_ETH_MAX_SG_ENTRIES	((64 * 1024) / DPAA2_ETH_RX_BUF_SIZE)
 
 /* Maximum acceptable MTU value. It is in direct relation with the MC-enforced
  * Max Frame Length (currently 10k).
@@ -83,14 +83,14 @@
 /* Hardware requires alignment for ingress/egress buffer addresses
  * and ingress buffer lengths.
  */
-#define DPAA2_ETH_RX_BUFFER_SIZE	2048
+#define DPAA2_ETH_RX_BUF_SIZE		2048
 #define DPAA2_ETH_TX_BUF_ALIGN		64
 #define DPAA2_ETH_RX_BUF_ALIGN		256
 #define DPAA2_ETH_NEEDED_HEADROOM(p_priv) \
 	((p_priv)->tx_data_offset + DPAA2_ETH_TX_BUF_ALIGN)
 
 #define DPAA2_ETH_BUF_RAW_SIZE \
-	(DPAA2_ETH_RX_BUFFER_SIZE + \
+	(DPAA2_ETH_RX_BUF_SIZE + \
 	SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) + \
 	DPAA2_ETH_RX_BUF_ALIGN)
 
@@ -133,56 +133,56 @@ struct dpaa2_fas {
 } __packed;
 
 /* Debug frame, otherwise supposed to be discarded */
-#define DPAA2_ETH_FAS_DISC		0x80000000
+#define DPAA2_FAS_DISC			0x80000000
 /* MACSEC frame */
-#define DPAA2_ETH_FAS_MS		0x40000000
-#define DPAA2_ETH_FAS_PTP		0x08000000
+#define DPAA2_FAS_MS			0x40000000
+#define DPAA2_FAS_PTP			0x08000000
 /* Ethernet multicast frame */
-#define DPAA2_ETH_FAS_MC		0x04000000
+#define DPAA2_FAS_MC			0x04000000
 /* Ethernet broadcast frame */
-#define DPAA2_ETH_FAS_BC		0x02000000
-#define DPAA2_ETH_FAS_KSE		0x00040000
-#define DPAA2_ETH_FAS_EOFHE		0x00020000
-#define DPAA2_ETH_FAS_MNLE		0x00010000
-#define DPAA2_ETH_FAS_TIDE		0x00008000
-#define DPAA2_ETH_FAS_PIEE		0x00004000
+#define DPAA2_FAS_BC			0x02000000
+#define DPAA2_FAS_KSE			0x00040000
+#define DPAA2_FAS_EOFHE			0x00020000
+#define DPAA2_FAS_MNLE			0x00010000
+#define DPAA2_FAS_TIDE			0x00008000
+#define DPAA2_FAS_PIEE			0x00004000
 /* Frame length error */
-#define DPAA2_ETH_FAS_FLE		0x00002000
+#define DPAA2_FAS_FLE			0x00002000
 /* Frame physical error; our favourite pastime */
-#define DPAA2_ETH_FAS_FPE		0x00001000
-#define DPAA2_ETH_FAS_PTE		0x00000080
-#define DPAA2_ETH_FAS_ISP		0x00000040
-#define DPAA2_ETH_FAS_PHE		0x00000020
-#define DPAA2_ETH_FAS_BLE		0x00000010
+#define DPAA2_FAS_FPE			0x00001000
+#define DPAA2_FAS_PTE			0x00000080
+#define DPAA2_FAS_ISP			0x00000040
+#define DPAA2_FAS_PHE			0x00000020
+#define DPAA2_FAS_BLE			0x00000010
 /* L3 csum validation performed */
-#define DPAA2_ETH_FAS_L3CV		0x00000008
+#define DPAA2_FAS_L3CV			0x00000008
 /* L3 csum error */
-#define DPAA2_ETH_FAS_L3CE		0x00000004
+#define DPAA2_FAS_L3CE			0x00000004
 /* L4 csum validation performed */
-#define DPAA2_ETH_FAS_L4CV		0x00000002
+#define DPAA2_FAS_L4CV			0x00000002
 /* L4 csum error */
-#define DPAA2_ETH_FAS_L4CE		0x00000001
+#define DPAA2_FAS_L4CE			0x00000001
 /* These bits always signal errors */
-#define DPAA2_ETH_RX_ERR_MASK		(DPAA2_ETH_FAS_KSE	| \
-					 DPAA2_ETH_FAS_EOFHE	| \
-					 DPAA2_ETH_FAS_MNLE	| \
-					 DPAA2_ETH_FAS_TIDE	| \
-					 DPAA2_ETH_FAS_PIEE	| \
-					 DPAA2_ETH_FAS_FLE	| \
-					 DPAA2_ETH_FAS_FPE	| \
-					 DPAA2_ETH_FAS_PTE	| \
-					 DPAA2_ETH_FAS_ISP	| \
-					 DPAA2_ETH_FAS_PHE	| \
-					 DPAA2_ETH_FAS_BLE	| \
-					 DPAA2_ETH_FAS_L3CE	| \
-					 DPAA2_ETH_FAS_L4CE)
+#define DPAA2_ETH_RX_ERR_MASK		(DPAA2_FAS_KSE		| \
+					 DPAA2_FAS_EOFHE	| \
+					 DPAA2_FAS_MNLE		| \
+					 DPAA2_FAS_TIDE		| \
+					 DPAA2_FAS_PIEE		| \
+					 DPAA2_FAS_FLE		| \
+					 DPAA2_FAS_FPE		| \
+					 DPAA2_FAS_PTE		| \
+					 DPAA2_FAS_ISP		| \
+					 DPAA2_FAS_PHE		| \
+					 DPAA2_FAS_BLE		| \
+					 DPAA2_FAS_L3CE		| \
+					 DPAA2_FAS_L4CE)
 /* Unsupported features in the ingress */
-#define DPAA2_ETH_RX_UNSUPP_MASK	DPAA2_ETH_FAS_MS
+#define DPAA2_ETH_RX_UNSUPP_MASK	DPAA2_FAS_MS
 /* Tx errors */
-#define DPAA2_ETH_TXCONF_ERR_MASK	(DPAA2_ETH_FAS_KSE	| \
-					 DPAA2_ETH_FAS_EOFHE	| \
-					 DPAA2_ETH_FAS_MNLE	| \
-					 DPAA2_ETH_FAS_TIDE)
+#define DPAA2_ETH_TXCONF_ERR_MASK	(DPAA2_FAS_KSE		| \
+					 DPAA2_FAS_EOFHE	| \
+					 DPAA2_FAS_MNLE		| \
+					 DPAA2_FAS_TIDE)
 
 /* Time in milliseconds between link state updates */
 #define DPAA2_ETH_LINK_STATE_REFRESH	1000
@@ -190,7 +190,7 @@ struct dpaa2_fas {
 /* Driver statistics, other than those in struct rtnl_link_stats64.
  * These are usually collected per-CPU and aggregated by ethtool.
  */
-struct dpaa2_eth_stats {
+struct dpaa2_eth_drv_stats {
 	__u64	tx_conf_frames;
 	__u64	tx_conf_bytes;
 	__u64	tx_sg_frames;
@@ -306,7 +306,7 @@ struct dpaa2_eth_priv {
 	/* Standard statistics */
 	struct rtnl_link_stats64 __percpu *percpu_stats;
 	/* Extra stats, in addition to the ones known by the kernel */
-	struct dpaa2_eth_stats __percpu *percpu_extras;
+	struct dpaa2_eth_drv_stats __percpu *percpu_extras;
 	u32 msg_enable;	/* net_device message level */
 
 	u16 mc_token;
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
index 172c909..9811720 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
@@ -52,7 +52,7 @@ char dpaa2_ethtool_stats[][ETH_GSTRING_LEN] = {
 
 #define DPAA2_ETH_NUM_STATS	ARRAY_SIZE(dpaa2_ethtool_stats)
 
-/* To be kept in sync with 'struct dpaa2_eth_stats' */
+/* To be kept in sync with 'struct dpaa2_eth_drv_stats' */
 char dpaa2_ethtool_extras[][ETH_GSTRING_LEN] = {
 	/* per-cpu stats */
 
@@ -238,7 +238,7 @@ static void dpaa2_eth_get_ethtool_stats(struct net_device *net_dev,
 	u64 cdan = 0;
 	u64 portal_busy = 0, pull_err = 0;
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
-	struct dpaa2_eth_stats *extras;
+	struct dpaa2_eth_drv_stats *extras;
 	struct dpaa2_eth_ch_stats *ch_stats;
 
 	memset(data, 0,
-- 
2.9.3

