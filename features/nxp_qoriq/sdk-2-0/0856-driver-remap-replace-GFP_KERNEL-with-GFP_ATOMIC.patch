From c3deda4bcd1efec3542482ae86ed804bd6f92764 Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Fri, 8 May 2015 13:41:44 +0800
Subject: [PATCH] driver:remap: replace GFP_KERNEL with GFP_ATOMIC

Replace the kmalloc type GFP_KERNEL with GFP_ATOMIC to avoid below calltrace
since this operation is executed on atomic context like this:

fsl_dcu_probe()
	|
	+ reset_total_layers()
		|
		+ regmap_write()
			|
			+ raw_spin_lock_irqsave()
			|
			+ regcache_rbtree_write
			|
			+ raw_spin_unlock_irqrestore()

calltrace:
WARNING: CPU: 1 PID: 1 at kernel/locking/lockdep.c:2876 lockdep_trace_alloc+0x150/0x154
DEBUG_LOCKS_WARN_ON(irqs_disabled_flags(flags))
Modules linked in:
CPU: 1 PID: 1 Comm: swapper/0 Not tainted 4.8.8-rt5-WR9.0.0.0_preempt-rt #5
Hardware name: Freescale LS1021A
[<80212e7c>] (unwind_backtrace) from [<8020cd18>] (show_stack+0x20/0x24)
[<8020cd18>] (show_stack) from [<8068f754>] (dump_stack+0xa0/0xcc)
[<8068f754>] (dump_stack) from [<802280ec>] (__warn+0xf8/0x110)
[<802280ec>] (__warn) from [<8022814c>] (warn_slowpath_fmt+0x48/0x50)
[<8022814c>] (warn_slowpath_fmt) from [<8028f91c>] (lockdep_trace_alloc+0x150/0x154)
[<8028f91c>] (lockdep_trace_alloc) from [<803b5a04>] (kmem_cache_alloc_trace+0x40/0x47c)
[<803b5a04>] (kmem_cache_alloc_trace) from [<80788a88>] (regcache_rbtree_write+0x2dc/0x4f0)
[<80788a88>] (regcache_rbtree_write) from [<8078716c>] (regcache_write+0x64/0x6c)
[<8078716c>] (regcache_write) from [<80783928>] (_regmap_write+0xd8/0x2a8)
[<80783928>] (_regmap_write) from [<80785c2c>] (regmap_write+0x4c/0x6c)
[<80785c2c>] (regmap_write) from [<80713318>] (reset_total_layers+0x48/0x10c)
[<80713318>] (reset_total_layers) from [<807143e0>] (fsl_dcu_probe+0x2b8/0x78c)
[<807143e0>] (fsl_dcu_probe) from [<80767aec>] (platform_drv_probe+0x60/0xc0)
[<80767aec>] (platform_drv_probe) from [<80765620>] (driver_probe_device+0x218/0x2c4)
[<80765620>] (driver_probe_device) from [<80765794>] (__driver_attach+0xc8/0xcc)
[<80765794>] (__driver_attach) from [<8076350c>] (bus_for_each_dev+0x78/0xac)
[<8076350c>] (bus_for_each_dev) from [<80764db4>] (driver_attach+0x2c/0x30)
[<80764db4>] (driver_attach) from [<8076488c>] (bus_add_driver+0x11c/0x228)
[<8076488c>] (bus_add_driver) from [<807667d8>] (driver_register+0x88/0x104)
[<807667d8>] (driver_register) from [<80767a38>] (__platform_driver_register+0x50/0x58)
[<80767a38>] (__platform_driver_register) from [<81034ee0>] (fsl_dcu_driver_init+0x1c/0x20)
[<81034ee0>] (fsl_dcu_driver_init) from [<8020181c>] (do_one_initcall+0x54/0x180)
[<8020181c>] (do_one_initcall) from [<81001028>] (kernel_init_freeable+0x290/0x35c)
[<81001028>] (kernel_init_freeable) from [<80b710c4>] (kernel_init+0x18/0x124)
[<80b710c4>] (kernel_init) from [<80207f70>] (ret_from_fork+0x14/0x24)

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/base/regmap/regcache-rbtree.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/base/regmap/regcache-rbtree.c b/drivers/base/regmap/regcache-rbtree.c
index b11af3f..b0fd3a5 100644
--- a/drivers/base/regmap/regcache-rbtree.c
+++ b/drivers/base/regmap/regcache-rbtree.c
@@ -292,14 +292,14 @@ static int regcache_rbtree_insert_to_block(struct regmap *map,
 
 	blk = krealloc(rbnode->block,
 		       blklen * map->cache_word_size,
-		       GFP_KERNEL);
+		       GFP_ATOMIC);
 	if (!blk)
 		return -ENOMEM;
 
 	if (BITS_TO_LONGS(blklen) > BITS_TO_LONGS(rbnode->blklen)) {
 		present = krealloc(rbnode->cache_present,
 				   BITS_TO_LONGS(blklen) * sizeof(*present),
-				   GFP_KERNEL);
+				   GFP_ATOMIC);
 		if (!present) {
 			kfree(blk);
 			return -ENOMEM;
@@ -336,7 +336,7 @@ regcache_rbtree_node_alloc(struct regmap *map, unsigned int reg)
 	const struct regmap_range *range;
 	int i;
 
-	rbnode = kzalloc(sizeof(*rbnode), GFP_KERNEL);
+	rbnode = kzalloc(sizeof(*rbnode), GFP_ATOMIC);
 	if (!rbnode)
 		return NULL;
 
@@ -362,13 +362,13 @@ regcache_rbtree_node_alloc(struct regmap *map, unsigned int reg)
 	}
 
 	rbnode->block = kmalloc_array(rbnode->blklen, map->cache_word_size,
-				      GFP_KERNEL);
+				      GFP_ATOMIC);
 	if (!rbnode->block)
 		goto err_free;
 
 	rbnode->cache_present = kcalloc(BITS_TO_LONGS(rbnode->blklen),
 					sizeof(*rbnode->cache_present),
-					GFP_KERNEL);
+					GFP_ATOMIC);
 	if (!rbnode->cache_present)
 		goto err_free_block;
 
-- 
2.0.2

