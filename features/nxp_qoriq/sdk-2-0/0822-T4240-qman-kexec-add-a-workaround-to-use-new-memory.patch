From 9248f9a7d2c4ede4c19efa97a7bffcdc7f3d383b Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Tue, 19 Jul 2016 17:41:55 +0800
Subject: [PATCH 822/838] T4240/qman/kexec: add a workaround to use new memory

T4XXX's secondary kernel can't use the first kernel's fqd and pfdr
memory blocks, else the below error would be triggered. So add
this workaround.

QMan: Allocated lookup table at 8000000000000000, entry count 131073
Unable to handle kernel paging request for data at address 0x55eec00055eed
Faulting instruction address: 0xc000000000037510
Oops: Kernel access of bad area, sig: 11 [#1]
PREEMPT SMP NR_CPUS=24 CoreNet Generic
Modules linked in:
CPU: 1 PID: 1 Comm: swapper/0 Not tainted 4.1.21-rt13-WR8.0.0.0_preempt-rt #160
task: c0000005dc280000 ti: c0000005dc288000 task.ti: c0000005dc288000
NIP: c000000000037510 LR: c000000000880e88 CTR: c0000000000286b0
REGS: c0000005dc28b440 TRAP: 0300   Not tainted  (4.1.21-rt13-WR8.0.0.0_preempt-rt)
MSR: 0000000080029000 <CE,EE,ME>  CR: 84175448  XER: 00000000
DEAR: 00055eec00055eed ESR: 0000000000000000 SOFTE: 0
GPR00: 000000000000006f c0000005dc28b6c0 c000000001363600 00055eec00055eed
GPR04: c000000000b928ff 00055eec00055eec 0000000000000000 0000000000000071
GPR08: 0000000000000002 0000000000000066 c00000002ffe33e4 0000000000000020
GPR12: 0000000042175844 c00000003fff56c0 c000000000c23600 c000000000c23600
GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
GPR20: 0000000000000000 0000000000000000 0000000000000000 c000000000c26040
GPR24: c000000000c26018 0000000000000000 c0000005fd57b8f0 0000000000000000
GPR28: c000000001496698 0000000000000000 c000000000b92900 c0000005fd57ba30
NIP [c000000000037510] .strcmp+0x8/0x24
LR [c000000000880e88] .__of_find_property+0x68/0xe0
Call Trace:
[c0000005dc28b6c0] [c0000005dc28b750] 0xc0000005dc28b750 (unreliable)
[c0000005dc28b750] [c000000000881f24] .__of_device_is_compatible+0x154/0x1d0
[c0000005dc28b800] [c000000000883214] .of_find_compatible_node+0x84/0x140
[c0000005dc28b8a0] [c000000000cf9a24] .qman_init+0x188/0x106c
[c0000005dc28ba00] [c000000000cf7ce4] .qbman_init+0x34/0x1b4
[c0000005dc28bb70] [c000000000001bd4] .do_one_initcall+0xc4/0x250
[c0000005dc28bc60] [c000000000cb0ecc] .kernel_init_freeable+0x270/0x39c
[c0000005dc28bdb0] [c000000000002540] .kernel_init+0x20/0xae0
[c0000005dc28be30] [c000000000000ab0] .ret_from_kernel_thread+0x58/0xa8
Instruction dump:
3884ffff 8c050001 2c000000 4082fff8 38a5ffff 8c040001 2c000000 9c050001
4082fff4 4e800020 38a3ffff 3884ffff <8c650001> 2c830000 8c040001 7c601851
---[ end trace 0000000000000001 ]---

note: swapper/0[1] exited with preempt_count 1
Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_qbman/qman_config.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/drivers/staging/fsl_qbman/qman_config.c b/drivers/staging/fsl_qbman/qman_config.c
index ca013fa..a9ef2f2 100644
--- a/drivers/staging/fsl_qbman/qman_config.c
+++ b/drivers/staging/fsl_qbman/qman_config.c
@@ -33,6 +33,9 @@
 #include "qman_private.h"
 #include <linux/highmem.h>
 #include <linux/of_reserved_mem.h>
+#ifndef CONFIG_ARM64
+#include <linux/fsl/svr.h>
+#endif
 
 /* Last updated for v00.800 of the BG */
 
@@ -357,6 +360,11 @@ static void qm_get_version(struct qman *qm, u16 *id, u8 *major, u8 *minor,
 static int qm_is_initalized(struct qman *qm, enum qm_memory memory)
 {
 	u32 offset = (memory == qm_memory_fqd) ? REG_FQD_BARE : REG_PFDR_BARE;
+#ifndef CONFIG_FMAN_ARM
+	u32 svr = mfspr(SPRN_SVR);
+	if (SVR_SOC_VER(svr) == SVR_T4240)
+		return 0;
+#endif
 	return __qm_in(qm, offset + REG_offset_BAR);
 }
 static void qm_reserve_memory(struct qman *qm, enum qm_memory memory)
-- 
2.0.2

