From 33f3547479d1c1aedde580cf5eeb9fe71339e19c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Horia=20Geant=C4=83?= <horia.geanta@nxp.com>
Date: Mon, 14 Mar 2016 10:36:58 +0200
Subject: [PATCH 614/752] crypto: testmgr - add another test for
 rfc4543(gcm(aes))
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This test is intended to check if implementations behave correctly
when there is no need for padding - since data to be authenticated
is already 16B (AES BLOCK SIZE) aligned:
AAD + IV + Payload = 8 + 8 + 64 = 80 bytes

Signed-off-by: Horia GeantÄƒ <horia.geanta@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 crypto/testmgr.h | 62 +++++++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 59 insertions(+), 3 deletions(-)

diff --git a/crypto/testmgr.h b/crypto/testmgr.h
index 6aa497b..b03ecda 100644
--- a/crypto/testmgr.h
+++ b/crypto/testmgr.h
@@ -15422,8 +15422,8 @@ static struct cipher_testvec cast6_xts_dec_tv_template[] = {
 #define AES_GCM_DEC_TEST_VECTORS 8
 #define AES_GCM_4106_ENC_TEST_VECTORS 23
 #define AES_GCM_4106_DEC_TEST_VECTORS 23
-#define AES_GCM_4543_ENC_TEST_VECTORS 1
-#define AES_GCM_4543_DEC_TEST_VECTORS 2
+#define AES_GCM_4543_ENC_TEST_VECTORS 2
+#define AES_GCM_4543_DEC_TEST_VECTORS 3
 #define AES_CCM_ENC_TEST_VECTORS 8
 #define AES_CCM_DEC_TEST_VECTORS 7
 #define AES_CCM_4309_ENC_TEST_VECTORS 7
@@ -22740,6 +22740,34 @@ static struct aead_testvec aes_gcm_rfc4543_enc_tv_template[] = {
 			  "\xe1\x55\x10\x6a\xa8\xdc\xd6\x18"
 			  "\xe4\x09\x9a\xaa",
 		.rlen	= 68,
+	}, {
+		.key	= "\xfe\xff\xe9\x92\x86\x65\x73\x1c"
+			  "\x6d\x6a\x8f\x94\x67\x30\x83\x08"
+			  "\xca\xfe\xba\xbe",
+		.klen	= 20,
+		.iv	= "\xfa\xce\xdb\xad\xde\xca\xf8\x88",
+		.assoc	= "\x00\x00\xa5\xf8\x00\x00\x00\x0a",
+		.alen	= 8,
+		.input	= "\x45\x00\x00\x3e\x69\x8f\x00\x00"
+			  "\x80\x11\x4d\xcc\xc0\xa8\x01\x02"
+			  "\xc0\xa8\x01\x01\x0a\x98\x00\x35"
+			  "\x00\x2a\x23\x43\xb2\xd0\x01\x00"
+			  "\x00\x01\x00\x00\x00\x00\x00\x00"
+			  "\x03\x73\x69\x70\x09\x63\x79\x62"
+			  "\x65\x72\x63\x69\x74\x79\x02\x64"
+			  "\x6b\x00\x00\x01\x00\x01\x00\x01",
+		.ilen	= 64,
+		.result	= "\x45\x00\x00\x3e\x69\x8f\x00\x00"
+			  "\x80\x11\x4d\xcc\xc0\xa8\x01\x02"
+			  "\xc0\xa8\x01\x01\x0a\x98\x00\x35"
+			  "\x00\x2a\x23\x43\xb2\xd0\x01\x00"
+			  "\x00\x01\x00\x00\x00\x00\x00\x00"
+			  "\x03\x73\x69\x70\x09\x63\x79\x62"
+			  "\x65\x72\x63\x69\x74\x79\x02\x64"
+			  "\x6b\x00\x00\x01\x00\x01\x00\x01"
+			  "\x6d\x4a\xe6\x38\x82\x9f\x73\x97"
+			  "\x04\x5f\x7c\x6c\x65\xea\xd0\x2d",
+		.rlen	= 80,
 	}
 };
 
@@ -22799,7 +22827,35 @@ static struct aead_testvec aes_gcm_rfc4543_dec_tv_template[] = {
 			  "\x6d\x6e\x6f\x70\x71\x72\x73\x74"
 			  "\x01\x02\x02\x01",
 		.rlen	= 52,
-	},
+	}, {
+		.key	= "\xfe\xff\xe9\x92\x86\x65\x73\x1c"
+			  "\x6d\x6a\x8f\x94\x67\x30\x83\x08"
+			  "\xca\xfe\xba\xbe",
+		.klen	= 20,
+		.iv	= "\xfa\xce\xdb\xad\xde\xca\xf8\x88",
+		.assoc	= "\x00\x00\xa5\xf8\x00\x00\x00\x0a",
+		.alen	= 8,
+		.input	= "\x45\x00\x00\x3e\x69\x8f\x00\x00"
+			  "\x80\x11\x4d\xcc\xc0\xa8\x01\x02"
+			  "\xc0\xa8\x01\x01\x0a\x98\x00\x35"
+			  "\x00\x2a\x23\x43\xb2\xd0\x01\x00"
+			  "\x00\x01\x00\x00\x00\x00\x00\x00"
+			  "\x03\x73\x69\x70\x09\x63\x79\x62"
+			  "\x65\x72\x63\x69\x74\x79\x02\x64"
+			  "\x6b\x00\x00\x01\x00\x01\x00\x01"
+			  "\x6d\x4a\xe6\x38\x82\x9f\x73\x97"
+			  "\x04\x5f\x7c\x6c\x65\xea\xd0\x2d",
+		.ilen	= 80,
+		.result	= "\x45\x00\x00\x3e\x69\x8f\x00\x00"
+			  "\x80\x11\x4d\xcc\xc0\xa8\x01\x02"
+			  "\xc0\xa8\x01\x01\x0a\x98\x00\x35"
+			  "\x00\x2a\x23\x43\xb2\xd0\x01\x00"
+			  "\x00\x01\x00\x00\x00\x00\x00\x00"
+			  "\x03\x73\x69\x70\x09\x63\x79\x62"
+			  "\x65\x72\x63\x69\x74\x79\x02\x64"
+			  "\x6b\x00\x00\x01\x00\x01\x00\x01",
+		.rlen	= 64,
+	}
 };
 
 static struct aead_testvec aes_ccm_enc_tv_template[] = {
-- 
2.9.3

