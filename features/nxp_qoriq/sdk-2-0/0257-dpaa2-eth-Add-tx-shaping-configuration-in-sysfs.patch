From 115d9af575396b19be292fb7d12dd7565f111729 Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Fri, 3 Jul 2015 19:35:39 +0300
Subject: [PATCH 257/752] dpaa2-eth: Add tx shaping configuration in sysfs

Egress traffic can be shaped via a per-DPNI SysFS entry:
  echo M N > /sys/class/net/ni<X>/tx_shaping
where:
  M is the maximum throughput, expressed in Mbps.
  N is the maximum burst size, expressed in bytes, at most 64000.

To remove shaping, use M=0, N=0.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c | 48 ++++++++++++++++++++++++++
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h |  2 ++
 2 files changed, 50 insertions(+)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 1223a9e..746c1fe 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -2138,6 +2138,49 @@ static void ldpaa_eth_napi_del(struct ldpaa_eth_priv *priv)
 }
 
 /* SysFS support */
+
+static ssize_t ldpaa_eth_show_tx_shaping(struct device *dev,
+					 struct device_attribute *attr,
+					 char *buf)
+{
+	struct ldpaa_eth_priv *priv = netdev_priv(to_net_dev(dev));
+	/* No MC API for getting the shaping config. We're stateful. */
+	struct dpni_tx_shaping_cfg *scfg = &priv->shaping_cfg;
+
+	return sprintf(buf, "%u %hu\n", scfg->rate_limit, scfg->max_burst_size);
+}
+
+static ssize_t ldpaa_eth_write_tx_shaping(struct device *dev,
+					  struct device_attribute *attr,
+					  const char *buf,
+					  size_t count)
+{
+	int err, items;
+	struct ldpaa_eth_priv *priv = netdev_priv(to_net_dev(dev));
+	struct dpni_tx_shaping_cfg scfg;
+
+	items = sscanf(buf, "%u %hu", &scfg.rate_limit, &scfg.max_burst_size);
+	if (items != 2) {
+		pr_err("Expected format: \"rate_limit(Mbps) max_burst_size(bytes)\"\n");
+		return -EINVAL;
+	}
+	/* Size restriction as per MC API documentation */
+	if (scfg.max_burst_size > 64000) {
+		pr_err("max_burst_size must be <= 64000, thanks.\n");
+		return -EINVAL;
+	}
+
+	err = dpni_set_tx_shaping(priv->mc_io, 0, priv->mc_token, &scfg);
+	if (unlikely(err)) {
+		dev_err(dev, "dpni_set_tx_shaping() failed\n");
+		return -EPERM;
+	}
+	/* If successful, save the current configuration for future inquiries */
+	priv->shaping_cfg = scfg;
+
+	return count;
+}
+
 static ssize_t ldpaa_eth_show_txconf_cpumask(struct device *dev,
 					     struct device_attribute *attr,
 					     char *buf)
@@ -2212,6 +2255,11 @@ static struct device_attribute ldpaa_eth_attrs[] = {
 	       S_IRUSR | S_IWUSR,
 	       ldpaa_eth_show_txconf_cpumask,
 	       ldpaa_eth_write_txconf_cpumask),
+
+	__ATTR(tx_shaping,
+	       S_IRUSR | S_IWUSR,
+	       ldpaa_eth_show_tx_shaping,
+	       ldpaa_eth_write_tx_shaping),
 };
 
 void ldpaa_eth_sysfs_init(struct device *dev)
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index 6bf802e..6598e32 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -308,6 +308,8 @@ struct ldpaa_eth_priv {
 
 	/* array of classification rules */
 	struct ldpaa_cls_rule *cls_rule;
+
+	struct dpni_tx_shaping_cfg shaping_cfg;
 };
 
 /* default Rx hash options, set during probing */
-- 
2.9.3

