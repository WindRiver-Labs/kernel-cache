From 58d9a4d56a7e2920c7e7656a006c451ff4882aa8 Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Tue, 18 Mar 2014 09:52:24 +0800
Subject: [PATCH 782/838] fsl_qbman: drain all kinds of mr message of qman in
 qman_init stage

There is below call trace with KUMP feature for T4240 QDS.

CPU: 3 PID: 170 Comm: irq/404-QMan po Not tainted
3.10.19-rt11-WR6.0.0.3_preempt-rt #4
task: c000000177928000 ti: c000000177930000 task.ti: c000000177930000
NIP: c0000000027c3220 LR: c0000000027c3d4c CTR: c0000000027c302c
REGS: c000000177933680 TRAP: 0300   Not tainted (3.10.19-rt11-WR6.0.0.3_preempt-rt)
MSR: 0000000080029000 <CE,EE,ME>  CR: 22933888  XER: 00000000
SOFTE: 1
DEAR: 0000000000000008, ESR: 0000000000000000

GPR00: c0000000027c3d4c c000000177933900 c00000000350ce18 c000000009334980
GPR04: 0000000000000000 800008008038a0c0 0000000000000000 c000000003d3ce18
GPR08: c000000003d3ce18 0000000000000000 8000000000000000 0000000000000001
GPR12: 0000000022933882 c00000000fffac00 c00000000209fde0 c00000017978f4f0
GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
GPR20: 0000000000000000 0000000000000001 0000000000000003 0000000040000000
GPR24: c000000009334a90 0000000020000000 0000000080000000 0000000000000001
GPR28: ffffffffffffff80 0000000000010000 c000000177025a00 c000000009334980
NIP [c0000000027c3220] .__poll_portal_slow+0x4f0/0xe20
LR [c0000000027c3d4c] .portal_isr+0x1fc/0x2f0
Call Trace:
[c000000177933900] [c0000001798c5000] 0xc0000001798c5000 (unreliable)
[c000000177933ac0] [c0000000027c3d4c] .portal_isr+0x1fc/0x2f0
[c000000177933b80] [c00000000211afc0] .irq_forced_thread_fn+0x50/0xe0
[c000000177933c10] [c00000000211b310] .irq_thread+0x160/0x1d0
[c000000177933cd0] [c00000000209febc] .kthread+0xdc/0xf0
[c000000177933e30] [c000000002000a48] .ret_from_kernel_thread+0x5c/0x94
Instruction dump:
3ce20083 8125000c e9473498 7d4a4810 39400000 7d4a5114 0b0a0000 3d020083
e94834a0 79291f24 7fe3fb78 7c8a482a <e9240008> e9490000 4bfffde8 60000000

The reason is that mr of qman is not cleared completely before using it.
Here enrich the function implementation drain_mr to drain all kinds
of mr message of qman, and add to call qm_mr_pvb_update before qm_mr_current
since a new message is issued by HW, and then the producer index register would
increase after the current message is consumed.

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
[zhenbo: make some modifications to fix the conflicts]
Signed-off-by: Zhenbo Gao <zhenbo.gao@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 66b5ec7..aa7a0fc 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -451,10 +451,11 @@ static inline void qman_stop_dequeues_ex(struct qman_portal *p)
 	PORTAL_IRQ_UNLOCK(p, irqflags);
 }
 
-static int drain_mr(struct qm_portal *p)
+static int qm_drain_mr(struct qm_portal *p)
 {
 	const struct qm_mr_entry *msg;
 loop:
+	qm_mr_pvb_update(p);
 	msg = qm_mr_current(p);
 	if (!msg) {
 		/* if MR was full and h/w had other FQRNI entries to produce, we
@@ -473,6 +474,7 @@ loop:
 		do {
 			now = mfatb();
 		} while ((then + 10000) > now);
+		qm_mr_pvb_update(p);
 		msg = qm_mr_current(p);
 		if (!msg)
 			return 0;
@@ -676,7 +678,8 @@ struct qman_portal *qman_create_portal(
 	qm_isr_disable_write(__p, isdr);
 	while (qm_dqrr_current(__p) != NULL)
 		qm_dqrr_cdc_consume_n(__p, 0xffff);
-	drain_mr(__p);
+	/* drain all mr message */
+	qm_drain_mr(__p);
 	/* Success */
 	portal->config = config;
 	qm_isr_disable_write(__p, 0);
-- 
2.0.2

