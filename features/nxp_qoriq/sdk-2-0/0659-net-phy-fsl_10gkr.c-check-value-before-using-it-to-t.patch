From 3213626e9515a9aa5e85b86e3999bcad8ad8a291 Mon Sep 17 00:00:00 2001
From: Shaohui Xie <Shaohui.Xie@nxp.com>
Date: Thu, 8 Oct 2015 18:50:34 +0800
Subject: [PATCH 659/752] net: phy: fsl_10gkr.c: check value before using it to
 tune tecr0

Only some values are allowed for preq and pst1q due to tx_adapt_decode
bug, use an array to record allowed values respectively, if an value is
not recorded in the array, skipping it instead of using it for tuning
tecr0, but still acting the same in other behaviors, so that to make LP
believes its' request has been responded.

Signed-off-by: Shaohui Xie <Shaohui.Xie@nxp.com>
[Yanjiang: Original patch taken from QorIQ-SDK-V2.0-20160527-yocto.
Update a struct member:
struct phy_device  has no dev member now, it has been moved to
sub struct mdio_device mdio.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/phy/fsl_10gkr.c | 37 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 36 insertions(+), 1 deletion(-)

diff --git a/drivers/net/phy/fsl_10gkr.c b/drivers/net/phy/fsl_10gkr.c
index 0bc9e09..b1efcd1b 100644
--- a/drivers/net/phy/fsl_10gkr.c
+++ b/drivers/net/phy/fsl_10gkr.c
@@ -90,7 +90,7 @@
 #define ZERO_COE_MIN			0x0
 
 #define TECR0_INIT			0x24200000
-#define RATIO_PREQ			0x2
+#define RATIO_PREQ			0x3
 #define RATIO_PST1Q			0xd
 #define RATIO_EQ			0x20
 
@@ -710,6 +710,25 @@ static int is_ld_valid(u32 *ld_coe)
 	return 1;
 }
 
+#define VAL_INVALID 0xff
+
+static const u32 preq_table[] = {0x0, 0x1, 0x3, 0x5,
+				 0x7, 0x9, 0xb, 0xc, VAL_INVALID};
+static const u32 pst1q_table[] = {0x0, 0x1, 0x3, 0x5,
+				  0x7, 0x9, 0xb, 0xd, 0xf, 0x10, VAL_INVALID};
+
+static int is_value_allowed(const u32 *val_table, u32 val)
+{
+	int i;
+
+	for (i = 0;; i++) {
+		if (*(val_table + i) == VAL_INVALID)
+			return 0;
+		if (*(val_table + i) == val)
+			return 1;
+	}
+}
+
 static int inc_dec(struct fsl_xgkr_inst *inst, int field, int request)
 {
 	u32 ld_limit[3], ld_coe[3], step[3];
@@ -757,6 +776,22 @@ static int inc_dec(struct fsl_xgkr_inst *inst, int field, int request)
 		inst->ratio_pst1q = ld_coe[0];
 		inst->adpt_eq = ld_coe[1];
 		inst->ratio_preq = ld_coe[2];
+		/* only some values for preq and pst1q can be used.
+		 * for preq: 0x0, 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xc.
+		 * for pst1q: 0x0, 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf, 0x10.
+		 */
+		if (!is_value_allowed((const u32 *)&preq_table, ld_coe[2])) {
+			dev_dbg(&inst->phydev->mdio.dev,
+				"preq skipped value: %d.\n", ld_coe[2]);
+			return 0;
+		}
+
+		if (!is_value_allowed((const u32 *)&pst1q_table, ld_coe[0])) {
+			dev_dbg(&inst->phydev->mdio.dev,
+				"pst1q skipped value: %d.\n", ld_coe[0]);
+			return 0;
+		}
+
 		tune_tecr0(inst);
 	} else {
 		if (request == DECREMENT)
-- 
2.9.3

