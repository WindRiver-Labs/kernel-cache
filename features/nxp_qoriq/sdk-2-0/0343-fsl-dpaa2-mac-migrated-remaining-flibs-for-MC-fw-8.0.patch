From 0df337cf567c3a5383a853c2877247cbbde4035f Mon Sep 17 00:00:00 2001
From: "J. German Rivera" <German.Rivera@freescale.com>
Date: Tue, 30 Jun 2015 17:48:32 -0500
Subject: [PATCH 343/752] fsl-dpaa2: mac: migrated remaining flibs for MC fw
 8.0.0

Signed-off-by: J. German Rivera <German.Rivera@freescale.com>
[Stuart: split mac part out of original patch, updated subject]
Signed-off-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/mac/dpmac-cmd.h |  18 ++--
 drivers/staging/fsl-dpaa2/mac/dpmac.c     | 143 +++++++++++++++----------
 drivers/staging/fsl-dpaa2/mac/dpmac.h     | 172 +++++++++++++++++++-----------
 drivers/staging/fsl-dpaa2/mac/mac.c       |  29 ++---
 4 files changed, 222 insertions(+), 140 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/mac/dpmac-cmd.h b/drivers/staging/fsl-dpaa2/mac/dpmac-cmd.h
index c123aab..670c19b 100644
--- a/drivers/staging/fsl-dpaa2/mac/dpmac-cmd.h
+++ b/drivers/staging/fsl-dpaa2/mac/dpmac-cmd.h
@@ -34,7 +34,7 @@
 
 /* DPMAC Version */
 #define DPMAC_VER_MAJOR				3
-#define DPMAC_VER_MINOR				0
+#define DPMAC_VER_MINOR				1
 
 /* Command IDs */
 #define DPMAC_CMDID_CLOSE			0x800
@@ -69,12 +69,12 @@
 	MC_CMD_OP(cmd, 0, 0,  32, int,	    dpmac_id)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPMAC_CMD_SET_IRQ(cmd, irq_index, irq_addr, irq_val, user_irq_id) \
+#define DPMAC_CMD_SET_IRQ(cmd, irq_index, irq_cfg) \
 do { \
 	MC_CMD_OP(cmd, 0, 0,  8,  uint8_t,  irq_index);\
-	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, irq_val);\
-	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_addr); \
-	MC_CMD_OP(cmd, 2, 0,  32, int,	    user_irq_id); \
+	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, irq_cfg->val);\
+	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr); \
+	MC_CMD_OP(cmd, 2, 0,  32, int,	    irq_cfg->user_irq_id); \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -82,11 +82,11 @@ do { \
 	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPMAC_RSP_GET_IRQ(cmd, type, irq_addr, irq_val, user_irq_id) \
+#define DPMAC_RSP_GET_IRQ(cmd, type, irq_cfg) \
 do { \
-	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_val); \
-	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_addr); \
-	MC_RSP_OP(cmd, 2, 0,  32, int,	    user_irq_id); \
+	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_cfg->val); \
+	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr); \
+	MC_RSP_OP(cmd, 2, 0,  32, int,	    irq_cfg->user_irq_id); \
 	MC_RSP_OP(cmd, 2, 32, 32, int,	    type); \
 } while (0)
 
diff --git a/drivers/staging/fsl-dpaa2/mac/dpmac.c b/drivers/staging/fsl-dpaa2/mac/dpmac.c
index ad1e147..dbc60b8 100644
--- a/drivers/staging/fsl-dpaa2/mac/dpmac.c
+++ b/drivers/staging/fsl-dpaa2/mac/dpmac.c
@@ -34,14 +34,18 @@
 #include "dpmac.h"
 #include "dpmac-cmd.h"
 
-int dpmac_open(struct fsl_mc_io *mc_io, int dpmac_id, uint16_t *token)
+int dpmac_open(struct fsl_mc_io *mc_io,
+	       uint32_t cmd_flags,
+	       int dpmac_id,
+	       uint16_t *token)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_OPEN,
-					  MC_CMD_PRI_LOW, 0);
+					  cmd_flags,
+					  0);
 	DPMAC_CMD_OPEN(cmd, dpmac_id);
 
 	/* send command to mc*/
@@ -55,12 +59,14 @@ int dpmac_open(struct fsl_mc_io *mc_io, int dpmac_id, uint16_t *token)
 	return err;
 }
 
-int dpmac_close(struct fsl_mc_io *mc_io, uint16_t token)
+int dpmac_close(struct fsl_mc_io *mc_io,
+		uint32_t cmd_flags,
+		uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_CLOSE, MC_CMD_PRI_HIGH,
+	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_CLOSE, cmd_flags,
 					  token);
 
 	/* send command to mc*/
@@ -68,15 +74,17 @@ int dpmac_close(struct fsl_mc_io *mc_io, uint16_t token)
 }
 
 int dpmac_create(struct fsl_mc_io *mc_io,
+		 uint32_t cmd_flags,
 		 const struct dpmac_cfg *cfg,
-		uint16_t *token)
+		 uint16_t *token)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_CREATE,
-					  MC_CMD_PRI_LOW, 0);
+					  cmd_flags,
+					  0);
 	DPMAC_CMD_CREATE(cmd, cfg);
 
 	/* send command to mc*/
@@ -90,50 +98,53 @@ int dpmac_create(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
-int dpmac_destroy(struct fsl_mc_io *mc_io, uint16_t token)
+int dpmac_destroy(struct fsl_mc_io *mc_io,
+		  uint32_t cmd_flags,
+		  uint16_t token)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_DESTROY,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpmac_set_irq(struct fsl_mc_io *mc_io,
-		  uint16_t token,
-		 uint8_t irq_index,
-		 uint64_t irq_addr,
-		 uint32_t irq_val,
-		 int user_irq_id)
+int dpmac_set_irq(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
+		  uint16_t		token,
+		  uint8_t		irq_index,
+		  struct dpmac_irq_cfg	*irq_cfg)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_SET_IRQ,
-					  MC_CMD_PRI_LOW, token);
-	DPMAC_CMD_SET_IRQ(cmd, irq_index, irq_addr, irq_val, user_irq_id);
+					  cmd_flags,
+					  token);
+	DPMAC_CMD_SET_IRQ(cmd, irq_index, irq_cfg);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpmac_get_irq(struct fsl_mc_io *mc_io,
-		  uint16_t token,
-		 uint8_t irq_index,
-		 int *type,
-		 uint64_t *irq_addr,
-		 uint32_t *irq_val,
-		 int *user_irq_id)
+int dpmac_get_irq(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
+		  uint16_t		token,
+		  uint8_t		irq_index,
+		  int			*type,
+		  struct dpmac_irq_cfg	*irq_cfg)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_GET_IRQ,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPMAC_CMD_GET_IRQ(cmd, irq_index);
 
 	/* send command to mc*/
@@ -142,21 +153,23 @@ int dpmac_get_irq(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPMAC_RSP_GET_IRQ(cmd, *type, *irq_addr, *irq_val, *user_irq_id);
+	DPMAC_RSP_GET_IRQ(cmd, *type, irq_cfg);
 
 	return 0;
 }
 
 int dpmac_set_irq_enable(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
-			uint8_t irq_index,
-			uint8_t en)
+			 uint8_t irq_index,
+			 uint8_t en)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_SET_IRQ_ENABLE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPMAC_CMD_SET_IRQ_ENABLE(cmd, irq_index, en);
 
 	/* send command to mc*/
@@ -164,16 +177,18 @@ int dpmac_set_irq_enable(struct fsl_mc_io *mc_io,
 }
 
 int dpmac_get_irq_enable(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
-			uint8_t irq_index,
-			uint8_t *en)
+			 uint8_t irq_index,
+			 uint8_t *en)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_GET_IRQ_ENABLE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPMAC_CMD_GET_IRQ_ENABLE(cmd, irq_index);
 
 	/* send command to mc*/
@@ -188,15 +203,17 @@ int dpmac_get_irq_enable(struct fsl_mc_io *mc_io,
 }
 
 int dpmac_set_irq_mask(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t token,
-		      uint8_t irq_index,
-		      uint32_t mask)
+		       uint8_t irq_index,
+		       uint32_t mask)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_SET_IRQ_MASK,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPMAC_CMD_SET_IRQ_MASK(cmd, irq_index, mask);
 
 	/* send command to mc*/
@@ -204,16 +221,18 @@ int dpmac_set_irq_mask(struct fsl_mc_io *mc_io,
 }
 
 int dpmac_get_irq_mask(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t token,
-		      uint8_t irq_index,
-		      uint32_t *mask)
+		       uint8_t irq_index,
+		       uint32_t *mask)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_GET_IRQ_MASK,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPMAC_CMD_GET_IRQ_MASK(cmd, irq_index);
 
 	/* send command to mc*/
@@ -228,16 +247,18 @@ int dpmac_get_irq_mask(struct fsl_mc_io *mc_io,
 }
 
 int dpmac_get_irq_status(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
-			uint8_t irq_index,
-			uint32_t *status)
+			 uint8_t irq_index,
+			 uint32_t *status)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_GET_IRQ_STATUS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPMAC_CMD_GET_IRQ_STATUS(cmd, irq_index);
 
 	/* send command to mc*/
@@ -252,15 +273,17 @@ int dpmac_get_irq_status(struct fsl_mc_io *mc_io,
 }
 
 int dpmac_clear_irq_status(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
 			   uint16_t token,
-			  uint8_t irq_index,
-			  uint32_t status)
+			   uint8_t irq_index,
+			   uint32_t status)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_CLEAR_IRQ_STATUS,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPMAC_CMD_CLEAR_IRQ_STATUS(cmd, irq_index, status);
 
 	/* send command to mc*/
@@ -268,15 +291,17 @@ int dpmac_clear_irq_status(struct fsl_mc_io *mc_io,
 }
 
 int dpmac_get_attributes(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
-			struct dpmac_attr *attr)
+			 struct dpmac_attr *attr)
 {
 	struct mc_command cmd = { 0 };
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_GET_ATTR,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -290,6 +315,7 @@ int dpmac_get_attributes(struct fsl_mc_io *mc_io,
 }
 
 int dpmac_mdio_read(struct fsl_mc_io *mc_io,
+		    uint32_t cmd_flags,
 		    uint16_t token,
 		    struct dpmac_mdio_cfg *cfg)
 {
@@ -298,7 +324,7 @@ int dpmac_mdio_read(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_MDIO_READ,
-					  MC_CMD_PRI_LOW,
+					  cmd_flags,
 					  token);
 	DPMAC_CMD_MDIO_READ(cmd, cfg);
 
@@ -314,6 +340,7 @@ int dpmac_mdio_read(struct fsl_mc_io *mc_io,
 }
 
 int dpmac_mdio_write(struct fsl_mc_io *mc_io,
+		     uint32_t cmd_flags,
 		     uint16_t token,
 		     struct dpmac_mdio_cfg *cfg)
 {
@@ -321,7 +348,8 @@ int dpmac_mdio_write(struct fsl_mc_io *mc_io,
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_MDIO_WRITE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPMAC_CMD_MDIO_WRITE(cmd, cfg);
 
 	/* send command to mc*/
@@ -329,15 +357,17 @@ int dpmac_mdio_write(struct fsl_mc_io *mc_io,
 }
 
 int dpmac_get_link_cfg(struct fsl_mc_io *mc_io,
+		       uint32_t cmd_flags,
 		       uint16_t token,
-		      struct dpmac_link_cfg *cfg)
+		       struct dpmac_link_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
 	int err = 0;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_GET_LINK_CFG,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -350,30 +380,35 @@ int dpmac_get_link_cfg(struct fsl_mc_io *mc_io,
 }
 
 int dpmac_set_link_state(struct fsl_mc_io *mc_io,
+			 uint32_t cmd_flags,
 			 uint16_t token,
-		      struct dpmac_link_state *link_state)
+			 struct dpmac_link_state *link_state)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_SET_LINK_STATE,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPMAC_CMD_SET_LINK_STATE(cmd, link_state);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpmac_get_counter(struct fsl_mc_io *mc_io, uint16_t token,
+int dpmac_get_counter(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
+		      uint16_t token,
 		      enum dpmac_counter type,
-			   uint64_t *counter)
+		      uint64_t *counter)
 {
 	struct mc_command cmd = { 0 };
 	int err = 0;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPMAC_CMDID_GET_COUNTER,
-					  MC_CMD_PRI_LOW, token);
+					  cmd_flags,
+					  token);
 	DPMAC_CMD_GET_COUNTER(cmd, type);
 
 	/* send command to mc*/
diff --git a/drivers/staging/fsl-dpaa2/mac/dpmac.h b/drivers/staging/fsl-dpaa2/mac/dpmac.h
index 88091b5..4db1458 100644
--- a/drivers/staging/fsl-dpaa2/mac/dpmac.h
+++ b/drivers/staging/fsl-dpaa2/mac/dpmac.h
@@ -41,6 +41,7 @@ struct fsl_mc_io;
 /**
  * dpmac_open() - Open a control session for the specified object.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @dpmac_id:	DPMAC unique ID
  * @token:	Returned token; use in subsequent API calls
  *
@@ -54,11 +55,15 @@ struct fsl_mc_io;
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmac_open(struct fsl_mc_io *mc_io, int dpmac_id, uint16_t *token);
+int dpmac_open(struct fsl_mc_io	*mc_io,
+	       uint32_t		cmd_flags,
+	       int			dpmac_id,
+	       uint16_t		*token);
 
 /**
  * dpmac_close() - Close the control session of the object
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  *
  * After this function is called, no further operations are
@@ -66,7 +71,9 @@ int dpmac_open(struct fsl_mc_io *mc_io, int dpmac_id, uint16_t *token);
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmac_close(struct fsl_mc_io *mc_io, uint16_t token);
+int dpmac_close(struct fsl_mc_io	*mc_io,
+		uint32_t		cmd_flags,
+		uint16_t		token);
 
 /**
  * enum dpmac_link_type -  DPMAC link type
@@ -90,7 +97,6 @@ enum dpmac_link_type {
  * @DPMAC_ETH_IF_GMII: GMII interface
  * @DPMAC_ETH_IF_RGMII: RGMII interface
  * @DPMAC_ETH_IF_SGMII: SGMII interface
- * @DPMAC_ETH_IF_XGMII: XGMII interface
  * @DPMAC_ETH_IF_QSGMII: QSGMII interface
  * @DPMAC_ETH_IF_XAUI: XAUI interface
  * @DPMAC_ETH_IF_XFI: XFI interface
@@ -102,14 +108,13 @@ enum dpmac_eth_if {
 	DPMAC_ETH_IF_GMII,
 	DPMAC_ETH_IF_RGMII,
 	DPMAC_ETH_IF_SGMII,
-	DPMAC_ETH_IF_XGMII,
 	DPMAC_ETH_IF_QSGMII,
 	DPMAC_ETH_IF_XAUI,
 	DPMAC_ETH_IF_XFI
 };
 
 /**
- * struct dpmac_cfg() - Structure representing DPMAC configuration
+ * struct dpmac_cfg - Structure representing DPMAC configuration
  * @mac_id:	Represents the Hardware MAC ID; in case of multiple WRIOP,
  *		the MAC IDs are continuous.
  *		For example:  2 WRIOPs, 16 MACs in each:
@@ -123,6 +128,7 @@ struct dpmac_cfg {
 /**
  * dpmac_create() - Create the DPMAC object.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @cfg:	Configuration structure
  * @token:	Returned token; use in subsequent API calls
  *
@@ -141,17 +147,21 @@ struct dpmac_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmac_create(struct fsl_mc_io	*mc_io,
+		 uint32_t		cmd_flags,
 		 const struct dpmac_cfg	*cfg,
-		uint16_t		*token);
+		 uint16_t		*token);
 
 /**
  * dpmac_destroy() - Destroy the DPMAC object and release all its resources.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  *
  * Return:	'0' on Success; error code otherwise.
  */
-int dpmac_destroy(struct fsl_mc_io *mc_io, uint16_t token);
+int dpmac_destroy(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
+		  uint16_t		token);
 
 /* DPMAC IRQ Index and Events */
 
@@ -163,49 +173,56 @@ int dpmac_destroy(struct fsl_mc_io *mc_io, uint16_t token);
 #define DPMAC_IRQ_EVENT_LINK_CHANGED		0x00000002
 
 /**
+ * struct dpmac_irq_cfg - IRQ configuration
+ * @addr:	Address that must be written to signal a message-based interrupt
+ * @val:	Value to write into irq_addr address
+ * @user_irq_id: A user defined number associated with this IRQ
+ */
+struct dpmac_irq_cfg {
+	     uint64_t		addr;
+	     uint32_t		val;
+	     int		user_irq_id;
+};
+
+/**
  * dpmac_set_irq() - Set IRQ information for the DPMAC to trigger an interrupt.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @irq_index:	Identifies the interrupt index to configure
- * @irq_addr:	Address that must be written to
- *				signal a message-based interrupt
- * @irq_val:	Value to write into irq_addr address
- * @user_irq_id: A user defined number associated with this IRQ
+ * @irq_cfg:	IRQ configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmac_set_irq(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
 		  uint16_t		token,
-		 uint8_t		irq_index,
-		 uint64_t		irq_addr,
-		 uint32_t		irq_val,
-		 int			user_irq_id);
+		  uint8_t		irq_index,
+		  struct dpmac_irq_cfg	*irq_cfg);
 
 /**
  * dpmac_get_irq() - Get IRQ information from the DPMAC.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @irq_index:	The interrupt index to configure
  * @type:	Interrupt type: 0 represents message interrupt
- *				type (both irq_addr and irq_val are valid)
- * @irq_addr:	Returned address that must be written to
- *				signal the message-based interrupt
- * @irq_val:	Value to write into irq_addr address
- * @user_irq_id: A user defined number associated with this IRQ
+ *		type (both irq_addr and irq_val are valid)
+ * @irq_cfg:	IRQ attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmac_get_irq(struct fsl_mc_io	*mc_io,
+		  uint32_t		cmd_flags,
 		  uint16_t		token,
-		 uint8_t		irq_index,
-		 int			*type,
-		 uint64_t		*irq_addr,
-		 uint32_t		*irq_val,
-		 int			*user_irq_id);
+		  uint8_t		irq_index,
+		  int			*type,
+		  struct dpmac_irq_cfg	*irq_cfg);
 
 /**
  * dpmac_set_irq_enable() - Set overall interrupt state.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @irq_index:	The interrupt index to configure
  * @en:	Interrupt state - enable = 1, disable = 0
@@ -218,13 +235,15 @@ int dpmac_get_irq(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmac_set_irq_enable(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
 			 uint16_t		token,
-			uint8_t			irq_index,
-			uint8_t			en);
+			 uint8_t		irq_index,
+			 uint8_t		en);
 
 /**
  * dpmac_get_irq_enable() - Get overall interrupt state
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @irq_index:	The interrupt index to configure
  * @en:		Returned interrupt state - enable = 1, disable = 0
@@ -232,13 +251,15 @@ int dpmac_set_irq_enable(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmac_get_irq_enable(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
 			 uint16_t		token,
-			uint8_t			irq_index,
-			uint8_t			*en);
+			 uint8_t		irq_index,
+			 uint8_t		*en);
 
 /**
  * dpmac_set_irq_mask() - Set interrupt mask.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @irq_index:	The interrupt index to configure
  * @mask:	Event mask to trigger interrupt;
@@ -251,14 +272,16 @@ int dpmac_get_irq_enable(struct fsl_mc_io	*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmac_set_irq_mask(struct fsl_mc_io	*mc_io,
+int dpmac_set_irq_mask(struct fsl_mc_io *mc_io,
+		       uint32_t	cmd_flags,
 		       uint16_t		token,
-		      uint8_t		irq_index,
-		      uint32_t		mask);
+		       uint8_t		irq_index,
+		       uint32_t		mask);
 
 /**
  * dpmac_get_irq_mask() - Get interrupt mask.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @irq_index:	The interrupt index to configure
  * @mask:	Returned event mask to trigger interrupt
@@ -268,15 +291,17 @@ int dpmac_set_irq_mask(struct fsl_mc_io	*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmac_get_irq_mask(struct fsl_mc_io	*mc_io,
+int dpmac_get_irq_mask(struct fsl_mc_io *mc_io,
+		       uint32_t	cmd_flags,
 		       uint16_t		token,
-		      uint8_t		irq_index,
-		      uint32_t		*mask);
+		       uint8_t		irq_index,
+		       uint32_t		*mask);
 
 /**
  * dpmac_get_irq_status() - Get the current status of any pending interrupts.
  *
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @irq_index:	The interrupt index to configure
  * @status:	Returned interrupts status - one bit per cause:
@@ -286,14 +311,16 @@ int dpmac_get_irq_mask(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmac_get_irq_status(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
 			 uint16_t		token,
-			uint8_t			irq_index,
-			uint32_t		*status);
+			 uint8_t		irq_index,
+			 uint32_t		*status);
 
 /**
  * dpmac_clear_irq_status() - Clear a pending interrupt's status
  *
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @irq_index:	The interrupt index to configure
  * @status:	Bits to clear (W1C) - one bit per cause:
@@ -303,9 +330,10 @@ int dpmac_get_irq_status(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmac_clear_irq_status(struct fsl_mc_io	*mc_io,
+			   uint32_t		cmd_flags,
 			   uint16_t		token,
-			  uint8_t		irq_index,
-			  uint32_t		status);
+			   uint8_t		irq_index,
+			   uint32_t		status);
 
 /**
  * struct dpmac_attr - Structure representing DPMAC attributes
@@ -317,11 +345,11 @@ int dpmac_clear_irq_status(struct fsl_mc_io	*mc_io,
  * @version:	DPMAC version
  */
 struct dpmac_attr {
-	int id;
-	int phy_id;
-	enum dpmac_link_type link_type;
-	enum dpmac_eth_if eth_if;
-	uint32_t max_rate;
+	int			id;
+	int			phy_id;
+	enum dpmac_link_type	link_type;
+	enum dpmac_eth_if	eth_if;
+	uint32_t		max_rate;
 	/**
 	 * struct version - Structure representing DPMAC version
 	 * @major:	DPMAC major version
@@ -337,14 +365,16 @@ struct dpmac_attr {
  * dpmac_get_attributes - Retrieve DPMAC attributes.
  *
  * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @attr:	Returned object's attributes
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpmac_get_attributes(struct fsl_mc_io	*mc_io,
+			 uint32_t		cmd_flags,
 			 uint16_t		token,
-			struct dpmac_attr	*attr);
+			 struct dpmac_attr	*attr);
 
 /**
  * struct dpmac_mdio_cfg - DPMAC MDIO read/write parameters
@@ -354,33 +384,38 @@ int dpmac_get_attributes(struct fsl_mc_io	*mc_io,
  * @data: Data read/write from/to MDIO
  */
 struct dpmac_mdio_cfg {
-	uint8_t	phy_addr;
-	uint8_t	 reg;
-	uint16_t data;
+	uint8_t		phy_addr;
+	uint8_t		reg;
+	uint16_t	data;
 };
 
 /**
  * dpmac_mdio_read() - Perform MDIO read transaction
  * @mc_io:	Pointer to opaque I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @cfg:	Structure with MDIO transaction parameters
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmac_mdio_read(struct fsl_mc_io *mc_io, uint16_t token,
-		    struct dpmac_mdio_cfg *cfg);
-
+int dpmac_mdio_read(struct fsl_mc_io		*mc_io,
+		    uint32_t			cmd_flags,
+		    uint16_t			token,
+		    struct dpmac_mdio_cfg	*cfg);
 
 /**
  * dpmac_mdio_write() - Perform MDIO write transaction
  * @mc_io:	Pointer to opaque I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @cfg:	Structure with MDIO transaction parameters
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmac_mdio_write(struct fsl_mc_io *mc_io, uint16_t token,
-		     struct dpmac_mdio_cfg *cfg);
+int dpmac_mdio_write(struct fsl_mc_io		*mc_io,
+		     uint32_t			cmd_flags,
+		     uint16_t			token,
+		     struct dpmac_mdio_cfg	*cfg);
 
 /* DPMAC link configuration/state options */
 
@@ -406,13 +441,16 @@ struct dpmac_link_cfg {
 /**
  * dpmac_get_link_cfg() - Get Ethernet link configuration
  * @mc_io:	Pointer to opaque I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @cfg:	Returned structure with the link configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmac_get_link_cfg(struct fsl_mc_io *mc_io, uint16_t token,
-		       struct dpmac_link_cfg *cfg);
+int dpmac_get_link_cfg(struct fsl_mc_io	*mc_io,
+		       uint32_t		cmd_flags,
+		       uint16_t		token,
+		       struct dpmac_link_cfg	*cfg);
 
 /**
  * struct dpmac_link_state - DPMAC link configuration request
@@ -421,21 +459,24 @@ int dpmac_get_link_cfg(struct fsl_mc_io *mc_io, uint16_t token,
  * @up: Link state
  */
 struct dpmac_link_state {
-	uint32_t rate;
-	uint64_t options;
-	int up;
+	uint32_t	rate;
+	uint64_t	options;
+	int		up;
 };
 
 /**
  * dpmac_set_link_state() - Set the Ethernet link status
  * @mc_io:	Pointer to opaque I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @link_state:	Link state configuration
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpmac_set_link_state(struct fsl_mc_io *mc_io, uint16_t token,
-			 struct dpmac_link_state *link_state);
+int dpmac_set_link_state(struct fsl_mc_io		*mc_io,
+			 uint32_t			cmd_flags,
+			 uint16_t			token,
+			 struct dpmac_link_state	*link_state);
 
 /**
  * enum dpni_counter - DPNI counter types
@@ -466,7 +507,7 @@ int dpmac_set_link_state(struct fsl_mc_io *mc_io, uint16_t token,
  * @DPMAC_CNT_EGR_VALID_PAUSE_FRAME: counts valid pause frame transmitted
  *				     (regular and PFC).
  * @DPMAC_CNT_ING_BYTE: counts octet received except preamble for all valid
-			frames and valid pause frames.
+ *				frames and valid pause frames.
  * @DPMAC_CNT_ING_MCAST_FRAME: counts received multicast frame
  * @DPMAC_CNT_ING_BCAST_FRAME: counts received broadcast frame
  * @DPMAC_CNT_ING_ALL_FRAME: counts each good or bad packet received.
@@ -515,14 +556,17 @@ enum dpmac_counter {
 /**
  * dpmac_get_counter() - Read a specific DPMAC counter
  * @mc_io:	Pointer to opaque I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPMAC object
  * @type:	The requested counter
  * @counter:	Returned counter value
  *
  * Return:	The requested counter; '0' otherwise.
  */
-int dpmac_get_counter(struct fsl_mc_io *mc_io, uint16_t token,
-		      enum dpmac_counter type,
-			   uint64_t *counter);
+int dpmac_get_counter(struct fsl_mc_io		*mc_io,
+		      uint32_t			cmd_flags,
+		      uint16_t			token,
+		      enum dpmac_counter	 type,
+		      uint64_t			*counter);
 
 #endif /* __FSL_DPMAC_H */
diff --git a/drivers/staging/fsl-dpaa2/mac/mac.c b/drivers/staging/fsl-dpaa2/mac/mac.c
index 15dd9f7..b75715c 100644
--- a/drivers/staging/fsl-dpaa2/mac/mac.c
+++ b/drivers/staging/fsl-dpaa2/mac/mac.c
@@ -357,7 +357,7 @@ static void ppx_link_changed(struct net_device *netdev)
 	/* we intentionally ignore the error here as MC will return an error
 	 * if peer L2 interface (like a DPNI) is down at this time
 	 */
-	err = dpmac_set_link_state(priv->mc_dev->mc_io,
+	err = dpmac_set_link_state(priv->mc_dev->mc_io, 0,
 				   priv->mc_dev->mc_handle, &state);
 
 	if (err && err != -EACCES && err != -ENAVAIL)
@@ -406,7 +406,7 @@ static irqreturn_t ppx_irq_handler(int irq_num, void *arg)
 		goto err;
 	}
 
-	err = dpmac_get_link_cfg(mc_dev->mc_io,
+	err = dpmac_get_link_cfg(mc_dev->mc_io, 0,
 				 priv->mc_dev->mc_handle, &link_cfg);
 	if (err) {
 		dev_err(dev, "dpmac_get_link_cfg err %d\n", err);
@@ -417,7 +417,7 @@ static irqreturn_t ppx_irq_handler(int irq_num, void *arg)
 	if (err)
 		goto err;
 
-	err = dpmac_clear_irq_status(mc_dev->mc_io,
+	err = dpmac_clear_irq_status(mc_dev->mc_io, 0,
 				     priv->mc_dev->mc_handle,
 				     0, DPMAC_IRQ_EVENT_LINK_CFG_REQ);
 	if (err < 0) {
@@ -435,6 +435,7 @@ err:
 static int ppx_setup_irqs(struct fsl_mc_device *mc_dev)
 {
 	int err;
+	struct dpmac_irq_cfg irq_cfg;
 
 	err = fsl_mc_allocate_irqs(mc_dev);
 	if (err) {
@@ -442,7 +443,7 @@ static int ppx_setup_irqs(struct fsl_mc_device *mc_dev)
 		return err;
 	}
 
-	err = dpmac_set_irq_enable(mc_dev->mc_io, mc_dev->mc_handle,
+	err = dpmac_set_irq_enable(mc_dev->mc_io, 0, mc_dev->mc_handle,
 				   DPMAC_IRQ_INDEX, 0);
 	if (err) {
 		dev_err(&mc_dev->dev, "dpmac_set_irq_enable err %d\n", err);
@@ -460,15 +461,17 @@ static int ppx_setup_irqs(struct fsl_mc_device *mc_dev)
 		goto free_irq;
 	}
 
-	err = dpmac_set_irq(mc_dev->mc_io, mc_dev->mc_handle, DPMAC_IRQ_INDEX,
-			    mc_dev->irqs[0]->msi_paddr,
-			    mc_dev->irqs[0]->msi_value, 0 /*?*/);
+	irq_cfg.addr = mc_dev->irqs[0]->msi_paddr;
+	irq_cfg.val = mc_dev->irqs[0]->msi_value;
+	irq_cfg.user_irq_id = mc_dev->irqs[0]->irq_number;
+	err = dpmac_set_irq(mc_dev->mc_io, 0, mc_dev->mc_handle,
+			    DPMAC_IRQ_INDEX, &irq_cfg);
 	if (err) {
 		dev_err(&mc_dev->dev, "dpmac_set_irq err %d\n", err);
 		goto unregister_irq;
 	}
 
-	err = dpmac_set_irq_enable(mc_dev->mc_io, mc_dev->mc_handle,
+	err = dpmac_set_irq_enable(mc_dev->mc_io, 0, mc_dev->mc_handle,
 				   DPMAC_IRQ_INDEX, 1);
 	if (err) {
 		dev_err(&mc_dev->dev, "dpmac_set_irq_enable err %d\n", err);
@@ -487,7 +490,7 @@ free_irq:
 
 static void ppx_teardown_irqs(struct fsl_mc_device *mc_dev)
 {
-	dpmac_set_irq_enable(mc_dev->mc_io, mc_dev->mc_handle,
+	dpmac_set_irq_enable(mc_dev->mc_io, 0, mc_dev->mc_handle,
 			     DPMAC_IRQ_INDEX, 0);
 	devm_free_irq(&mc_dev->dev, mc_dev->irqs[0]->irq_number, &mc_dev->dev);
 	fsl_mc_free_irqs(mc_dev);
@@ -541,7 +544,7 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 		goto err_free_netdev;
 	}
 
-	err = dpmac_open(mc_dev->mc_io, mc_dev->obj_desc.id,
+	err = dpmac_open(mc_dev->mc_io, 0, mc_dev->obj_desc.id,
 			 &mc_dev->mc_handle);
 	if (err) {
 		dev_err(dev, "dpmac_open err %d\n", err);
@@ -553,7 +556,7 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 		goto err_free_mcp;
 	}
 
-	err = dpmac_get_attributes(mc_dev->mc_io,
+	err = dpmac_get_attributes(mc_dev->mc_io, 0,
 				   mc_dev->mc_handle, &priv->attr);
 	if (err) {
 		dev_err(dev, "dpmac_get_attributes err %d\n", err);
@@ -653,7 +656,7 @@ err_no_phy:
 err_free_irq:
 	ppx_teardown_irqs(mc_dev);
 err_close:
-	dpmac_close(mc_dev->mc_io, mc_dev->mc_handle);
+	dpmac_close(mc_dev->mc_io, 0, mc_dev->mc_handle);
 err_free_mcp:
 	fsl_mc_portal_free(mc_dev->mc_io);
 err_free_netdev:
@@ -670,7 +673,7 @@ ppx_remove(struct fsl_mc_device *devppx)
 
 	unregister_netdev(priv->netdev);
 	ppx_teardown_irqs(priv->mc_dev);
-	dpmac_close(priv->mc_dev->mc_io, priv->mc_dev->mc_handle);
+	dpmac_close(priv->mc_dev->mc_io, 0, priv->mc_dev->mc_handle);
 	fsl_mc_portal_free(priv->mc_dev->mc_io);
 	free_netdev(priv->netdev);
 
-- 
2.9.3

