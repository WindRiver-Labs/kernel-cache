From ba50f5a66a8703abed953e7f833f3c01e22baf17 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Fri, 5 Jun 2015 19:08:08 +0300
Subject: [PATCH 246/752] dpaa2-eth: Add debugfs support

Add debugfs entries for showing detailed per-CPU and per-FQ
counters for each network interface. Also add a knob for
resetting these stats.
The agregated interface statistics were already available through
ethtool -S.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Reviewed-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Change-Id: I55f5bfe07a15b0d1bf0c6175d8829654163a4318
Reviewed-on: http://git.am.freescale.net:8181/38758
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
Tested-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/Kconfig         |   7 +
 drivers/staging/fsl-dpaa2/ethernet/Makefile        |   1 +
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c     |   9 +
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h     |  10 +
 .../staging/fsl-dpaa2/ethernet/ldpaa_eth_debugfs.c | 246 +++++++++++++++++++++
 .../staging/fsl-dpaa2/ethernet/ldpaa_eth_debugfs.h |  51 +++++
 6 files changed, 324 insertions(+)
 create mode 100644 drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth_debugfs.c
 create mode 100644 drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth_debugfs.h

diff --git a/drivers/staging/fsl-dpaa2/ethernet/Kconfig b/drivers/staging/fsl-dpaa2/ethernet/Kconfig
index df8edd7..9cccec4 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/Kconfig
+++ b/drivers/staging/fsl-dpaa2/ethernet/Kconfig
@@ -39,4 +39,11 @@ config FSL_DPAA2_ETH_USE_ERR_QUEUE
 	  in hardware).
 	  This may impact performance, recommended for debugging
 	  purposes only.
+
+config FSL_DPAA2_ETH_DEBUGFS
+	depends on FSL_QBMAN_DEBUG
+	bool "Enable debugfs support"
+	default n
+	---help---
+	  Enable advanced statistics through debugfs interface.
 endif
diff --git a/drivers/staging/fsl-dpaa2/ethernet/Makefile b/drivers/staging/fsl-dpaa2/ethernet/Makefile
index 70f5508..d3c5182 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/Makefile
+++ b/drivers/staging/fsl-dpaa2/ethernet/Makefile
@@ -8,6 +8,7 @@
 
 ccflags-y += -DVERSION=\"\"
 
+obj-$(CONFIG_FSL_DPAA2_ETH_DEBUGFS) += ldpaa_eth_debugfs.o
 obj-$(CONFIG_FSL_DPAA2_ETH) += fsl-ldpaa-eth.o
 
 fsl-ldpaa-eth-objs    := ldpaa_eth.o ldpaa_ethtool.o dpni.o
diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
index 3a2a57b..002d821 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
@@ -794,6 +794,8 @@ static int ldpaa_eth_poll(struct napi_struct *napi, int budget)
 				   "Notif rearm failed for FQ %d\n", fq->fqid);
 	}
 
+	fq->stats.frames += cleaned;
+
 	return cleaned;
 }
 
@@ -2310,6 +2312,10 @@ ldpaa_eth_probe(struct fsl_mc_device *dpni_dev)
 
 	ldpaa_eth_sysfs_init(&net_dev->dev);
 
+#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
+	ldpaa_dbg_add(priv);
+#endif
+
 	dev_info(dev, "ldpaa ethernet: Probed interface %s\n", net_dev->name);
 	return 0;
 
@@ -2362,6 +2368,9 @@ ldpaa_eth_remove(struct fsl_mc_device *ls_dev)
 	unregister_netdev(net_dev);
 	dev_info(net_dev->dev.parent, "Removed interface %s\n", net_dev->name);
 
+#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
+	ldpaa_dbg_remove(priv);
+#endif
 	ldpaa_dpio_free(priv);
 	ldpaa_eth_free_rings(priv);
 	ldpaa_eth_napi_del(priv);
diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
index fef6f3a..de184bb 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
@@ -40,6 +40,10 @@
 #include "dpni.h"
 #include "dpni-cmd.h"
 
+#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
+#include "ldpaa_eth_debugfs.h"
+#endif
+
 #include "ldpaa_eth_trace.h"
 
 /* TODO : how many queues here? NR_CPUS? */
@@ -190,6 +194,8 @@ struct ldpaa_eth_fq_stats {
 	__u64	dequeue_portal_busy;
 	/* Number of FQDANs from queues; useful to estimate avg NAPI len */
 	__u64	fqdan;
+	/* Number of frames received on this queue */
+	__u64 frames;
 };
 
 struct ldpaa_eth_ring {
@@ -270,6 +276,10 @@ struct ldpaa_eth_priv {
 
 	/* enabled ethtool hashing bits */
 	u64 rx_hash_fields;
+
+#ifdef CONFIG_FSL_DPAA2_ETH_DEBUGFS
+	struct ldpaa_debugfs dbg;
+#endif
 };
 
 /* default Rx hash options, set during probing */
diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth_debugfs.c b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth_debugfs.c
new file mode 100644
index 0000000..9334422
--- /dev/null
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth_debugfs.c
@@ -0,0 +1,246 @@
+
+/* Copyright 2015 Freescale Semiconductor Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *	 notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *	 notice, this list of conditions and the following disclaimer in the
+ *	 documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *	 names of its contributors may be used to endorse or promote products
+ *	 derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+
+#include <linux/module.h>
+#include <linux/debugfs.h>
+#include "ldpaa_eth.h"
+#include "ldpaa_eth_debugfs.h"
+
+#define LDPAA_ETH_DBG_ROOT "dpaa2-eth"
+
+
+static struct dentry *ldpaa_dbg_root;
+
+static int ldpaa_dbg_stats_show(struct seq_file *file, void *offset)
+{
+	struct ldpaa_eth_priv *priv = (struct ldpaa_eth_priv *)file->private;
+	struct rtnl_link_stats64 *stats;
+	struct ldpaa_eth_stats *extras;
+	int i;
+
+	seq_printf(file, "\nPer-CPU stats for %s\n", priv->net_dev->name);
+	seq_puts(file, "CPU\t\tRX\t\tTx\t\tTx conf\t\tTx SG\t\tRx SG\t\tTx busy\n");
+
+	for_each_online_cpu(i) {
+		stats = per_cpu_ptr(priv->percpu_stats, i);
+		extras = per_cpu_ptr(priv->percpu_extras, i);
+		seq_printf(file, "%d%16llu%16llu%16llu%16llu%16llu%16llu\n",
+			   i,
+			   stats->rx_packets,
+			   stats->tx_packets,
+			   extras->tx_conf_frames,
+			   extras->tx_sg_frames,
+			   extras->rx_sg_frames,
+			   extras->tx_portal_busy);
+	}
+
+	return 0;
+}
+
+static int ldpaa_dbg_stats_open(struct inode *inode, struct file *file)
+{
+	int err;
+	struct ldpaa_eth_priv *priv = (struct ldpaa_eth_priv *)inode->i_private;
+
+	err = single_open(file, ldpaa_dbg_stats_show, priv);
+	if (unlikely(err < 0))
+		netdev_err(priv->net_dev, "single_open() failed\n");
+
+	return err;
+}
+
+static const struct file_operations ldpaa_dbg_stats_ops = {
+	.open = ldpaa_dbg_stats_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+static int ldpaa_dbg_fqs_show(struct seq_file *file, void *offset)
+{
+	struct ldpaa_eth_priv *priv = (struct ldpaa_eth_priv *)file->private;
+	struct ldpaa_eth_fq *fq;
+	uint32_t fcnt, bcnt;
+	int i, err;
+
+	seq_printf(file, "\nFQ stats for %s:\n", priv->net_dev->name);
+	seq_puts(file, "VFQID\tType\t\tCPU\t\tDeq busy\tFQDANs\t\tFrames\t\tAvg frm/FQDAN\tPending frames\n");
+
+	for (i = 0; i <  priv->num_fqs; i++) {
+		fq = &priv->fq[i];
+		err = dpaa_io_query_fq_count(NULL, fq->fqid, &fcnt, &bcnt);
+		if (unlikely(err))
+			fcnt = 0;
+
+		seq_printf(file, "%d\t%s\t\t%d%16llu%16llu%16llu%16llu%16u\n",
+			   fq->fqid,
+			   fq->type == LDPAA_RX_FQ ? "Rx" : "Tx conf",
+			   fq->nctx.desired_cpu,
+			   fq->stats.dequeue_portal_busy,
+			   fq->stats.fqdan,
+			   fq->stats.frames,
+			   fq->stats.frames / fq->stats.fqdan,
+			   fcnt);
+	}
+
+	return 0;
+}
+
+static int ldpaa_dbg_fqs_open(struct inode *inode, struct file *file)
+{
+	int err;
+	struct ldpaa_eth_priv *priv = (struct ldpaa_eth_priv *)inode->i_private;
+
+	err = single_open(file, ldpaa_dbg_fqs_show, priv);
+	if (unlikely(err < 0))
+		netdev_err(priv->net_dev, "single_open() failed\n");
+
+	return err;
+}
+
+static const struct file_operations ldpaa_dbg_fq_ops = {
+	.open = ldpaa_dbg_fqs_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+static ssize_t ldpaa_dbg_reset_write(struct file *file, const char __user *buf,
+				     size_t count, loff_t *offset)
+{
+	struct ldpaa_eth_priv *priv = file->private_data;
+	struct rtnl_link_stats64 *percpu_stats;
+	struct ldpaa_eth_stats *percpu_extras;
+	struct ldpaa_eth_fq *fq;
+	int i;
+
+	for_each_online_cpu(i) {
+		percpu_stats = per_cpu_ptr(priv->percpu_stats, i);
+		memset(percpu_stats, 0, sizeof(*percpu_stats));
+
+		percpu_extras = per_cpu_ptr(priv->percpu_extras, i);
+		memset(percpu_extras, 0, sizeof(*percpu_extras));
+	}
+
+	for (i = 0; i < priv->num_fqs; i++) {
+		fq = &priv->fq[i];
+		memset(&fq->stats, 0, sizeof(fq->stats));
+	}
+
+	return count;
+}
+
+static const struct file_operations ldpaa_dbg_reset_ops = {
+	.open = simple_open,
+	.write = ldpaa_dbg_reset_write,
+};
+
+void ldpaa_dbg_add(struct ldpaa_eth_priv *priv)
+{
+	if (unlikely(!ldpaa_dbg_root))
+		return;
+
+	/* Create a directory for the interface */
+	priv->dbg.dir = debugfs_create_dir(priv->net_dev->name,
+					   ldpaa_dbg_root);
+	if (unlikely(!priv->dbg.dir)) {
+		netdev_err(priv->net_dev, "debugfs_create_dir() failed\n");
+		return;
+	}
+
+	/* per-cpu stats file */
+	priv->dbg.cpu_stats = debugfs_create_file("cpu_stats", S_IRUGO,
+						  priv->dbg.dir, priv,
+						  &ldpaa_dbg_stats_ops);
+	if (unlikely(!priv->dbg.cpu_stats)) {
+		netdev_err(priv->net_dev, "debugfs_create_file() failed\n");
+		goto err_cpu_stats;
+	}
+
+	/* per-fq stats file */
+	priv->dbg.fq_stats = debugfs_create_file("fq_stats", S_IRUGO,
+						 priv->dbg.dir, priv,
+						 &ldpaa_dbg_fq_ops);
+	if (unlikely(!priv->dbg.fq_stats)) {
+		netdev_err(priv->net_dev, "debugfs_create_file() failed\n");
+		goto err_fq_stats;
+	}
+
+	/* reset stats */
+	priv->dbg.reset_stats = debugfs_create_file("reset_stats", S_IWUSR,
+						    priv->dbg.dir, priv,
+						    &ldpaa_dbg_reset_ops);
+	if (unlikely(!priv->dbg.reset_stats)) {
+		netdev_err(priv->net_dev, "debugfs_create_file() failed\n");
+		goto err_reset_stats;
+	}
+
+	return;
+
+err_reset_stats:
+	debugfs_remove(priv->dbg.fq_stats);
+err_fq_stats:
+	debugfs_remove(priv->dbg.cpu_stats);
+err_cpu_stats:
+	debugfs_remove(priv->dbg.dir);
+}
+
+void ldpaa_dbg_remove(struct ldpaa_eth_priv *priv)
+{
+	debugfs_remove(priv->dbg.reset_stats);
+	debugfs_remove(priv->dbg.fq_stats);
+	debugfs_remove(priv->dbg.cpu_stats);
+	debugfs_remove(priv->dbg.dir);
+}
+
+static int __init ldpaa_eth_dbg_init(void)
+{
+	ldpaa_dbg_root = debugfs_create_dir(LDPAA_ETH_DBG_ROOT, NULL);
+	if (unlikely(!ldpaa_dbg_root)) {
+		pr_err("DPAA2-ETH: debugfs create failed\n");
+		return -ENOMEM;
+	}
+
+	pr_info("DPAA2-ETH: debugfs created\n");
+	return 0;
+}
+
+static void __exit ldpaa_eth_dbg_exit(void)
+{
+	debugfs_remove(ldpaa_dbg_root);
+}
+
+module_init(ldpaa_eth_dbg_init);
+module_exit(ldpaa_eth_dbg_exit);
+MODULE_LICENSE("Dual BSD/GPL");
+
diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth_debugfs.h b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth_debugfs.h
new file mode 100644
index 0000000..92e6a4c
--- /dev/null
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth_debugfs.h
@@ -0,0 +1,51 @@
+/* Copyright 2015 Freescale Semiconductor Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *	 notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *	 notice, this list of conditions and the following disclaimer in the
+ *	 documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *	 names of its contributors may be used to endorse or promote products
+ *	 derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LDPAA_ETH_DEBUGFS_H
+#define LDPAA_ETH_DEBUGFS_H
+
+#include <linux/dcache.h>
+#include "ldpaa_eth.h"
+
+extern struct ldpaa_eth_priv *priv;
+
+struct ldpaa_debugfs {
+	struct dentry *dir;
+	struct dentry *fq_stats;
+	struct dentry *cpu_stats;
+	struct dentry *reset_stats;
+};
+
+void ldpaa_dbg_add(struct ldpaa_eth_priv *priv);
+void ldpaa_dbg_remove(struct ldpaa_eth_priv *priv);
+
+#endif /* LDPAA_ETH_DEBUGFS_H */
+
-- 
2.9.3

