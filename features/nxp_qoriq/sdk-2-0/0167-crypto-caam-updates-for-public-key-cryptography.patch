From 680a72cbe4258e4cb149c1071fafb3f5758a2e6c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Horia=20Geant=C4=83?= <horia.geanta@nxp.com>
Date: Wed, 20 Jan 2016 12:15:03 +0200
Subject: [PATCH 167/752] crypto: caam - updates for public key cryptography
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This is a squash of the following commits:
67659d841becfc172216df76f058db25588f87cf "caam driver updates for public key cryptography"
3975ac785ff22dd1e15a29eb28885002a1bd00f2 "crypto: caam - Fix crash in caampkc module_init"
followed by merge conflicts resolution.

"CAAM driver updates as per public key infrastructure changes in cryptoAPI
RSA, DSA, ECDSA are support as part of Public Key Crypto Operations."

Signed-off-by: Yashpal Dutta <yashpal.dutta@freescale.com>
Signed-off-by: Nitesh Lal <nitesh.lal@nxp.com>
Signed-off-by: Horia GeantÄƒ <horia.geanta@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/caam/pkc_desc.h | 201 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 201 insertions(+)
 create mode 100644 drivers/crypto/caam/pkc_desc.h

diff --git a/drivers/crypto/caam/pkc_desc.h b/drivers/crypto/caam/pkc_desc.h
new file mode 100644
index 0000000..56fc2ee
--- /dev/null
+++ b/drivers/crypto/caam/pkc_desc.h
@@ -0,0 +1,201 @@
+/*
+ * \file - pkc_desc.h
+ * \brief - Freescale FSL CAAM support for Public Key Cryptography
+ *
+ * Author: Yashpal Dutta <yashpal.dutta@freescale.com>
+ *
+ * Copyright 2012 Freescale Semiconductor, Inc.
+ *
+ * There is no shared descriptor for PKC but Job descriptor must carry
+ * all the desired key parameters, input and output pointers
+ *
+ */
+#ifndef _PKC_DESC_H_
+#define _PKC_DESC_H_
+
+#include "compat.h"
+
+#include "regs.h"
+#include "intern.h"
+#include "desc_constr.h"
+#include "jr.h"
+#include "error.h"
+#include "sg_sw_sec4.h"
+#include <linux/crypto.h>
+#include "pdb.h"
+
+/* Public key SG Flags and e, n lengths */
+struct sg_public_flg_s {
+	uint32_t sg_f:1;
+	uint32_t sg_g:1;
+	uint32_t sg_n:1;
+	uint32_t sg_e:1;
+	uint32_t reserved:4;
+	uint32_t e_len:12;
+	uint32_t n_len:12;
+};
+
+/* RSA public Extended Descriptor fields
+ @n_dma - n, e represents the public key
+ @e_dma - Public key exponent,  n is modulus
+ @g_dma - Output RSA-encrypted value
+ @f_dma - Input RSA-Plain value
+ @n_len, e_len - Public key param length
+ @ f_len - input data len
+ */
+struct rsa_pub_edesc_s {
+	dma_addr_t n_dma;
+	dma_addr_t e_dma;
+	dma_addr_t g_dma;
+	dma_addr_t f_dma;
+	struct sg_public_flg_s sg_flgs;
+	uint32_t reserved:20;
+	uint32_t f_len:12;
+};
+
+/* Private key Form1 SG Flags and d, n lengths */
+struct sg_priv_f1_flg_s {
+	uint32_t sg_g:1;
+	uint32_t sg_f:1;
+	uint32_t sg_n:1;
+	uint32_t sg_d:1;
+	uint32_t reserved:4;
+	uint32_t d_len:12;
+	uint32_t n_len:12;
+};
+
+/* RSA PrivKey Form1 Extended Descriptor fields
+ @n_dma - n, d represents the private key form1 representation
+ @d_dma - d is the private exponent, n is the modules
+ @g_dma - Input RSA-encrypted value
+ @f_dma - Output RSA-Plain value
+ */
+struct rsa_priv_frm1_edesc_s {
+	dma_addr_t n_dma;
+	dma_addr_t d_dma;
+	dma_addr_t f_dma;
+	dma_addr_t g_dma;
+	struct sg_priv_f1_flg_s sg_flgs;
+};
+
+/* Private key Form2 SG Flags and d, n lengths */
+struct sg_priv_f2_flg_s {
+	uint32_t sg_g:1;
+	uint32_t sg_f:1;
+	uint32_t sg_d:1;
+	uint32_t sg_p:1;
+	uint32_t sg_q:1;
+	uint32_t sg_tmp1:1;
+	uint32_t sg_tmp2:1;
+	uint32_t reserved:1;
+	uint32_t d_len:12;
+	uint32_t n_len:12;
+};
+
+/* RSA PrivKey Form2
+ @p, q, d represents the private key form2 representation
+ @d - d is private exponent, p and q are the two primes
+ @f - output pointer
+ @g - input pointer
+ */
+struct rsa_priv_frm2_edesc_s {
+	dma_addr_t p_dma;
+	dma_addr_t q_dma;
+	dma_addr_t d_dma;
+	dma_addr_t f_dma;
+	dma_addr_t g_dma;
+	int8_t *tmp1;
+	int8_t *tmp2;
+	dma_addr_t tmp1_dma;
+	dma_addr_t tmp2_dma;
+	struct sg_priv_f2_flg_s sg_flgs;
+	uint32_t reserved:8;
+	uint32_t q_len:12;
+	uint32_t p_len:12;
+};
+
+/* Private key Form3 SG Flags and d, n lengths */
+struct sg_priv_f3_flg_s {
+	uint32_t sg_g:1;
+	uint32_t sg_f:1;
+	uint32_t sg_c:1;
+	uint32_t sg_p:1;
+	uint32_t sg_q:1;
+	uint32_t sg_dp:1;
+	uint32_t sg_dq:1;
+	uint32_t sg_tmp1:1;
+	uint32_t sg_tmp2:1;
+	uint32_t reserved:11;
+	uint32_t n_len:12;
+};
+
+/* RSA PrivKey Form3
+ @n - p, q, dp, dq, c represents the private key form3 representation
+ @dp - First CRT exponent factor
+ @dq - Second CRT exponent factor
+ @c - CRT Coefficient
+ @f - output pointer
+ @g - input pointer
+ */
+struct rsa_priv_frm3_edesc_s {
+	dma_addr_t p_dma;
+	dma_addr_t q_dma;
+	dma_addr_t dp_dma;
+	dma_addr_t dq_dma;
+	dma_addr_t c_dma;
+	dma_addr_t f_dma;
+	dma_addr_t g_dma;
+	int8_t *tmp1;
+	int8_t *tmp2;
+	dma_addr_t tmp1_dma;
+	dma_addr_t tmp2_dma;
+	struct sg_priv_f3_flg_s sg_flgs;
+	uint32_t reserved:8;
+	uint32_t q_len:12;
+	uint32_t p_len:12;
+};
+
+/*
+ * rsa_edesc - s/w-extended rsa descriptor
+ * @hw_desc: the h/w job descriptor
+ */
+struct rsa_edesc {
+	enum pkc_req_type req_type;
+	union {
+		struct rsa_pub_edesc_s rsa_pub_edesc;
+		struct rsa_priv_frm1_edesc_s rsa_priv_f1_edesc;
+		struct rsa_priv_frm2_edesc_s rsa_priv_f2_edesc;
+		struct rsa_priv_frm3_edesc_s rsa_priv_f3_edesc;
+	} dma_u;
+	u32 hw_desc[];
+};
+
+/*
+ * dsa_edesc - s/w-extended for dsa and ecdsa descriptors
+ * @hw_desc: the h/w job descriptor
+ */
+struct dsa_edesc_s {
+	enum pkc_req_type req_type;
+	uint32_t l_len;
+	uint32_t n_len;
+	dma_addr_t key_dma;
+	dma_addr_t f_dma;
+	dma_addr_t q_dma;
+	dma_addr_t r_dma;
+	dma_addr_t c_dma;
+	dma_addr_t d_dma;
+	dma_addr_t ab_dma;
+	dma_addr_t g_dma;
+	dma_addr_t tmp_dma;
+	uint8_t *tmp; /* Allocate locally for dsa_verify */
+	u32 hw_desc[];
+};
+
+void *caam_rsa_pub_desc(struct rsa_edesc *);
+void *caam_rsa_priv_f1_desc(struct rsa_edesc *);
+void *caam_rsa_priv_f2_desc(struct rsa_edesc *);
+void *caam_rsa_priv_f3_desc(struct rsa_edesc *);
+void *caam_dsa_sign_desc(struct dsa_edesc_s *);
+void *caam_dsa_verify_desc(struct dsa_edesc_s *);
+
+#endif
-- 
2.9.3

