From 072c0da4216e3921debb3686d6f9289abe2b8b2a Mon Sep 17 00:00:00 2001
From: Malik Sandeep-B02416 <Sandeep.Malik@freescale.com>
Date: Wed, 14 Dec 2016 20:30:50 +0530
Subject: [PATCH 1/3] The current workaround for A-008139 covers the main asm
 TLB miss handler, but not hugetlb preloading or
 loadcam_entry (the latter of which is used by USDPAA).

This commmit is based on commit b21d2d7621696630683f7fbb4022239599d614df from
git://git.freescale.com/ppc/sdk/linux.git

Copy workaround code to loadcam_entry, and stop normal hugetlb preloading on e6500.

Signed-off-by: Scott Wood <scott.wood@nxp.com>
Signed-off-by: Sandeep Malik <Sandeep.Malik@nxp.com>
Signed-off-by: Qi Hou <qi.hou@windriver.com>
---
 arch/powerpc/mm/hugetlbpage-book3e.c |   10 ++++++++
 arch/powerpc/mm/tlb_nohash_low.S     |   40 ++++++++++++++++++++++++++++++++++
 2 files changed, 50 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/mm/hugetlbpage-book3e.c b/arch/powerpc/mm/hugetlbpage-book3e.c
index aba687c..22073de 100644
--- a/arch/powerpc/mm/hugetlbpage-book3e.c
+++ b/arch/powerpc/mm/hugetlbpage-book3e.c
@@ -93,6 +93,16 @@ void book3e_hugetlb_preload(struct vm_area_struct *vma, unsigned long ea,
 	if (unlikely(is_kernel_addr(ea)))
 		return;
 
+#ifdef CONFIG_PPC64
+	/*
+	 * Preloading is unnecessary on e6500 because the asm TLB miss
+	 * handler handles it, and if we preloaded anyway we'd need to add an
+	 * A-008139 erratum workaround here.
+	 */
+	if (book3e_htw_mode == PPC_HTW_E6500)
+		return;
+#endif
+
 	mm = vma->vm_mm;
 
 #ifdef CONFIG_PPC_MM_SLICES
diff --git a/arch/powerpc/mm/tlb_nohash_low.S b/arch/powerpc/mm/tlb_nohash_low.S
index 2b75313..a8115b8 100644
--- a/arch/powerpc/mm/tlb_nohash_low.S
+++ b/arch/powerpc/mm/tlb_nohash_low.S
@@ -515,6 +515,46 @@ _GLOBAL(restore_to_as0)
  * Must preserve r7, r8, r9, and r10
  */
 _GLOBAL(loadcam_entry)
+#ifdef CONFIG_PPC64
+BEGIN_FTR_SECTION		/* CPU_FTR_SMT */
+	rlwinm	r5,r3,16,0xff0000
+	oris	r5,r5,MAS0_TLBSEL(1)@h
+	mtspr	SPRN_MAS0,r10
+	isync
+	tlbre
+	mfspr	r5,SPRN_MAS1
+	andis.	r5,r5,MAS1_VALID@h
+	beq	5f
+
+BEGIN_FTR_SECTION_NESTED(532)
+	mfspr	r5,SPRN_MAS8
+	rlwinm	r5,r5,0,0x80000fff  /* tgs,tlpid -> sgs,slpid */
+	mtspr	SPRN_MAS5,r5
+END_FTR_SECTION_NESTED(CPU_FTR_EMB_HV,CPU_FTR_EMB_HV,532)
+
+	mfspr	r5,SPRN_MAS1
+	rlwinm	r6,r5,0,0x3fff0000  /* tid -> spid */
+	rlwimi	r6,r5,20,0x00000003 /* ind,ts -> sind,sas */
+	mfspr	r5,SPRN_MAS6
+	mtspr	SPRN_MAS6,r6
+
+	mfspr	r6,SPRN_MAS2
+	isync
+	tlbilxva 0,r6
+	isync
+
+	mtspr	SPRN_MAS6,r5
+
+5:
+BEGIN_FTR_SECTION_NESTED(532)
+	li	r5,0
+	mtspr	SPRN_MAS8,r5
+	mtspr	SPRN_MAS5,r5
+END_FTR_SECTION_NESTED(CPU_FTR_EMB_HV,CPU_FTR_EMB_HV,532)
+
+END_FTR_SECTION_IFSET(CPU_FTR_SMT)
+#endif
+
 	mflr	r5
 	LOAD_REG_ADDR_PIC(r4, TLBCAM)
 	mtlr	r5
-- 
1.7.5.4

