From e09530d997098d9c35e4725274b29ed4924bcf99 Mon Sep 17 00:00:00 2001
From: Pan Jiafei <Jiafei.Pan@freescale.com>
Date: Wed, 16 Dec 2015 08:40:27 +0000
Subject: [PATCH 712/752] fsl_qbman: porting qbman driver to arm 32bit platform

1. cache instruction and API.
2. set dma mask API.
3. u64/u32 use do_div()
4. emulate dcbz_64() for aarch32 due to AArch32's absence of
	"DC ZVA" instruction

Signed-off-by: Pan Jiafei <Jiafei.Pan@freescale.com>
Signed-off-by: Jianhua Xie <jianhua.xie@nxp.com>
Signed-off-by: Wang Dongsheng <dongsheng.wang@freescale.com>
Suggested-by: Roy Pledge <Roy.Pledge@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/arm/Kconfig                        |  5 ++
 drivers/staging/fsl_qbman/bman_driver.c |  2 +-
 drivers/staging/fsl_qbman/bman_low.h    |  6 +--
 drivers/staging/fsl_qbman/dpa_sys.h     |  2 +
 drivers/staging/fsl_qbman/dpa_sys_arm.h | 95 +++++++++++++++++++++++++++++++++
 drivers/staging/fsl_qbman/qman_config.c |  4 +-
 drivers/staging/fsl_qbman/qman_driver.c |  2 +-
 drivers/staging/fsl_qbman/qman_high.c   |  5 ++
 drivers/staging/fsl_qbman/qman_low.h    |  6 +--
 9 files changed, 117 insertions(+), 10 deletions(-)
 create mode 100644 drivers/staging/fsl_qbman/dpa_sys_arm.h

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index a9c4e48..6dec287 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1232,6 +1232,11 @@ source "arch/arm/common/Kconfig"
 
 menu "Bus support"
 
+config HAS_FSL_QBMAN
+	bool "Datapath Acceleration Queue and Buffer management"
+	help
+	  Datapath Acceleration Queue and Buffer management
+
 config ISA
 	bool
 	help
diff --git a/drivers/staging/fsl_qbman/bman_driver.c b/drivers/staging/fsl_qbman/bman_driver.c
index f27e58f..2cd7ec2 100644
--- a/drivers/staging/fsl_qbman/bman_driver.c
+++ b/drivers/staging/fsl_qbman/bman_driver.c
@@ -190,7 +190,7 @@ static struct bm_portal_config * __init parse_pcfg(struct device_node *node)
 	if (len != (unsigned long)len)
 		goto err;
 
-#ifdef CONFIG_ARM64
+#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 	pcfg->addr_virt[DPA_PORTAL_CE] = ioremap_cache_ns(
                                 pcfg->addr_phys[DPA_PORTAL_CE].start,
                                 resource_size(&pcfg->addr_phys[DPA_PORTAL_CE]));
diff --git a/drivers/staging/fsl_qbman/bman_low.h b/drivers/staging/fsl_qbman/bman_low.h
index 7dc9d54..94132a0 100644
--- a/drivers/staging/fsl_qbman/bman_low.h
+++ b/drivers/staging/fsl_qbman/bman_low.h
@@ -56,7 +56,7 @@
 
 #endif
 
-#if defined(CONFIG_ARM64)
+#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 
 /* Cache-inhibited register offsets */
 #define BM_REG_RCR_PI_CINH	0x3000
@@ -514,7 +514,7 @@ static inline void bm_isr_bscn_mask(struct bm_portal *portal, u8 bpid,
 
 static inline u32 __bm_isr_read(struct bm_portal *portal, enum bm_isr_reg n)
 {
-#if defined(CONFIG_ARM64)
+#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 	return __bm_in(&portal->addr, BM_REG_ISR + (n << 6));
 #else
 	return __bm_in(&portal->addr, BM_REG_ISR + (n << 2));
@@ -524,7 +524,7 @@ static inline u32 __bm_isr_read(struct bm_portal *portal, enum bm_isr_reg n)
 static inline void __bm_isr_write(struct bm_portal *portal, enum bm_isr_reg n,
 					u32 val)
 {
-#if defined(CONFIG_ARM64)
+#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 	__bm_out(&portal->addr, BM_REG_ISR + (n << 6), val);
 #else
 	__bm_out(&portal->addr, BM_REG_ISR + (n << 2), val);
diff --git a/drivers/staging/fsl_qbman/dpa_sys.h b/drivers/staging/fsl_qbman/dpa_sys.h
index 0880bac..670cecb 100644
--- a/drivers/staging/fsl_qbman/dpa_sys.h
+++ b/drivers/staging/fsl_qbman/dpa_sys.h
@@ -81,6 +81,8 @@
 #include "dpa_sys_ppc32.h"
 #elif defined CONFIG_PPC64
 #include "dpa_sys_ppc64.h"
+#elif defined CONFIG_ARM
+#include "dpa_sys_arm.h"
 #elif defined CONFIG_ARM64
 #include "dpa_sys_arm64.h"
 #endif
diff --git a/drivers/staging/fsl_qbman/dpa_sys_arm.h b/drivers/staging/fsl_qbman/dpa_sys_arm.h
new file mode 100644
index 0000000..17c5500
--- /dev/null
+++ b/drivers/staging/fsl_qbman/dpa_sys_arm.h
@@ -0,0 +1,95 @@
+/* Copyright 2016 Freescale Semiconductor, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef DPA_SYS_ARM_H
+#define DPA_SYS_ARM_H
+
+#include <asm/cacheflush.h>
+#include <asm/barrier.h>
+
+/* Implementation of ARM specific routines */
+
+/* TODO: NB, we currently assume that hwsync() and lwsync() imply compiler
+ * barriers and that dcb*() won't fall victim to compiler or execution
+ * reordering with respect to other code/instructions that manipulate the same
+ * cacheline. */
+#define hwsync() { asm volatile("dmb st" : : : "memory"); }
+#define lwsync() { asm volatile("dmb st" : : : "memory"); }
+#define dcbf(p) { asm volatile("mcr p15, 0, %0, c7, c10, 1" : : "r" (p) : "memory"); }
+#define dcbt_ro(p) { asm volatile("pld [%0, #64];": : "r" (p)); }
+#define dcbt_rw(p) { asm volatile("pldw [%0, #64];": : "r" (p)); }
+#define dcbi(p) { asm volatile("mcr p15, 0, %0, c7, c6, 1" : : "r" (p) : "memory"); }
+
+#define dcbz_64(p) { memset(p, 0, sizeof(*p)); }
+
+#define dcbf_64(p) \
+	do { \
+		dcbf((u32)p); \
+	} while (0)
+/* Commonly used combo */
+#define dcbit_ro(p) \
+	do { \
+		dcbi((u32)p); \
+		dcbt_ro((u32)p); \
+	} while (0)
+
+static inline u64 mfatb(void)
+{
+	return get_cycles();
+}
+
+static inline u32 in_be32(volatile void *addr)
+{
+	return be32_to_cpu(*((volatile u32 *) addr));
+}
+
+static inline void out_be32(void *addr, u32 val)
+{
+	*((u32 *) addr) = cpu_to_be32(val);
+}
+
+
+static inline void set_bits(unsigned long mask, volatile unsigned long *p)
+{
+	*p |= mask;
+}
+static inline void clear_bits(unsigned long mask, volatile unsigned long *p)
+{
+	*p &= ~mask;
+}
+
+static inline void flush_dcache_range(unsigned long start, unsigned long stop)
+{
+	__cpuc_flush_dcache_area((void *) start, stop - start);
+}
+
+#define hard_smp_processor_id() raw_smp_processor_id()
+#endif
diff --git a/drivers/staging/fsl_qbman/qman_config.c b/drivers/staging/fsl_qbman/qman_config.c
index f777449..70a07a6 100644
--- a/drivers/staging/fsl_qbman/qman_config.c
+++ b/drivers/staging/fsl_qbman/qman_config.c
@@ -470,7 +470,7 @@ static __init int parse_mem_property(struct device_node *node, const char *name,
 
 	if (zero) {
 		/* map as cacheable, non-guarded */
-#ifdef CONFIG_ARM64
+#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 		void __iomem *tmpp = ioremap_cache(*addr, *sz);
 #else
 		void __iomem *tmpp = ioremap(*addr, *sz);
@@ -714,7 +714,7 @@ int qman_init_ccsr(struct device_node *node)
 		return 0;
 	if (node != qm_node)
 		return -EINVAL;
-#ifdef CONFIG_ARM64
+#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 	/* TEMP for LS1043 : should be done in uboot */
 	qm_out(QCSP_BARE, 0x5);
 	qm_out(QCSP_BAR, 0x0);
diff --git a/drivers/staging/fsl_qbman/qman_driver.c b/drivers/staging/fsl_qbman/qman_driver.c
index 0d2d563..5811e18 100644
--- a/drivers/staging/fsl_qbman/qman_driver.c
+++ b/drivers/staging/fsl_qbman/qman_driver.c
@@ -459,7 +459,7 @@ static struct qm_portal_config * __init parse_pcfg(struct device_node *node)
 	if (len != (unsigned long)len)
 		goto err;
 
-#ifdef CONFIG_ARM64
+#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 	pcfg->addr_virt[DPA_PORTAL_CE] = ioremap_cache_ns(
                                 pcfg->addr_phys[DPA_PORTAL_CE].start,
                                 resource_size(&pcfg->addr_phys[DPA_PORTAL_CE]));
diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index e5b3119..190b9d7 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -628,10 +628,15 @@ struct qman_portal *qman_create_portal(
 		pr_err("qman_portal - platform_device_alloc() failed\n");
 		goto fail_devalloc;
 	}
+#ifdef CONFIG_ARM
+	portal->pdev->dev.coherent_dma_mask = DMA_BIT_MASK(40);
+	portal->pdev->dev.dma_mask = &portal->pdev->dev.coherent_dma_mask;
+#else
 	if (dma_set_mask(&portal->pdev->dev, DMA_BIT_MASK(40))) {
 		pr_err("qman_portal - dma_set_mask() failed\n");
 		goto fail_devadd;
 	}
+#endif
 	portal->pdev->dev.pm_domain = &qman_portal_device_pm_domain;
 	portal->pdev->dev.platform_data = portal;
 	ret = platform_device_add(portal->pdev);
diff --git a/drivers/staging/fsl_qbman/qman_low.h b/drivers/staging/fsl_qbman/qman_low.h
index b5992b8..d339fce 100644
--- a/drivers/staging/fsl_qbman/qman_low.h
+++ b/drivers/staging/fsl_qbman/qman_low.h
@@ -72,7 +72,7 @@
 
 #endif
 
-#if defined(CONFIG_ARM64)
+#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 
 #define QM_REG_EQCR_PI_CINH	0x3000
 #define QM_REG_EQCR_CI_CINH	0x3040
@@ -1173,7 +1173,7 @@ static inline void qm_isr_set_iperiod(struct qm_portal *portal, u16 iperiod)
 
 static inline u32 __qm_isr_read(struct qm_portal *portal, enum qm_isr_reg n)
 {
-#if defined(CONFIG_ARM64)
+#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 	return __qm_in(&portal->addr, QM_REG_ISR + (n << 6));
 #else
 	return __qm_in(&portal->addr, QM_REG_ISR + (n << 2));
@@ -1183,7 +1183,7 @@ static inline u32 __qm_isr_read(struct qm_portal *portal, enum qm_isr_reg n)
 static inline void __qm_isr_write(struct qm_portal *portal, enum qm_isr_reg n,
 					u32 val)
 {
-#if defined(CONFIG_ARM64)
+#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 	__qm_out(&portal->addr, QM_REG_ISR + (n << 6), val);
 #else
 	__qm_out(&portal->addr, QM_REG_ISR + (n << 2), val);
-- 
2.9.3

