From 533615a5eb6c469fc75fdcb945794e6e5ff9d9e2 Mon Sep 17 00:00:00 2001
From: Bin Jiang <bin.jiang@windriver.com>
Date: Tue, 29 Oct 2013 16:56:42 +0800
Subject: [PATCH 827/838] fsl QMAN: locking FQ introduces call trace in RT

On preempt-rt kernel, during caam running, sleepable spinlocks
introduce call trace:

BUG: sleeping function called from invalid context at kernel/rtmutex.c:659
in_atomic(): 1, irqs_disabled(): 1, pid: 1782, name: sh
Preemption disabled at:[<          (null)>]           (null)

CPU: 5 PID: 1782 Comm: sh Tainted: G        W    3.10.10-rt3-WR6.0.0.0_preempt-rt #1
Call Trace:
[c0000000f7a66280] [c00000000000b260] .show_stack+0x170/0x290 (unreliable)
[c0000000f7a66370] [c000000000942fe8] .dump_stack+0x28/0x3c
[c0000000f7a663e0] [c0000000000a60e0] .__might_sleep+0x160/0x1d0
[c0000000f7a66470] [c000000000936130] .rt_spin_lock+0x30/0x90
[c0000000f7a664f0] [c00000000078381c] .qman_init_fq+0x44c/0x840
[c0000000f7a665a0] [c00000000074e968] .create_caam_req_fq+0x158/0x220
[c0000000f7a66680] [c00000000074ebec] .caam_drv_ctx_init+0x1bc/0x3f0
[c0000000f7a66720] [c00000000075c0d4] .get_drv_ctx+0xd4/0x110
[c0000000f7a667d0] [c00000000075d114] .aead_givencrypt+0x84/0xad0
[c0000000f7a668e0] [80000000001703f8] .esp_output+0x3d8/0x6ac [esp4]
[c0000000f7a66a00] [c0000000008a0f78] .xfrm_output_resume+0x1e8/0x4b0
[c0000000f7a66aa0] [c000000000891e6c] .xfrm4_output_finish+0x4c/0xb0

CAAM creates session REQ FQ and requires to lock FQ. The above call trace
is caused by lock FQ in a context disabled preempt & irq.
Mostly FQLOCK is a dummy lock and it's only useful for CAAM and PME to
handle FQ. Most operations between the lock and unlock are to assign
values. So change spin lock to raw type and won't introduce a latency
spike.

Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c | 8 ++++----
 include/linux/fsl_qman.h              | 2 +-
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 8962d00..15092a4 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -57,13 +57,13 @@
 	do { \
 		struct qman_fq *__fq478 = (fq); \
 		if (fq_isset(__fq478, QMAN_FQ_FLAG_LOCKED)) \
-			spin_lock(&__fq478->fqlock); \
+			raw_spin_lock(&__fq478->fqlock); \
 	} while (0)
 #define FQUNLOCK(fq) \
 	do { \
 		struct qman_fq *__fq478 = (fq); \
 		if (fq_isset(__fq478, QMAN_FQ_FLAG_LOCKED)) \
-			spin_unlock(&__fq478->fqlock); \
+			raw_spin_unlock(&__fq478->fqlock); \
 	} while (0)
 
 static inline void fq_set(struct qman_fq *fq, u32 mask)
@@ -1555,7 +1555,7 @@ int qman_create_fq(u32 fqid, u32 flags, struct qman_fq *fq)
 		if (ret)
 			return ret;
 	}
-	spin_lock_init(&fq->fqlock);
+	raw_spin_lock_init(&fq->fqlock);
 	fq->fqid = fqid;
 	fq->flags = flags;
 	fq->state = qman_fq_state_oos;
@@ -5186,7 +5186,7 @@ EXPORT_SYMBOL(qman_ceetm_lfq_get_context);
 
 int qman_ceetm_create_fq(struct qm_ceetm_lfq *lfq, struct qman_fq *fq)
 {
-	spin_lock_init(&fq->fqlock);
+	raw_spin_lock_init(&fq->fqlock);
 	fq->fqid = lfq->idx;
 	fq->flags = QMAN_FQ_FLAG_NO_MODIFY;
 	if (lfq->ern)
diff --git a/include/linux/fsl_qman.h b/include/linux/fsl_qman.h
index cc49a58..fae9bbb 100644
--- a/include/linux/fsl_qman.h
+++ b/include/linux/fsl_qman.h
@@ -1911,7 +1911,7 @@ struct qman_fq {
 	/* These are internal to the driver, don't touch. In particular, they
 	 * may change, be removed, or extended (so you shouldn't rely on
 	 * sizeof(qman_fq) being a constant). */
-	spinlock_t fqlock;
+	raw_spinlock_t fqlock;
 	u32 fqid;
 	volatile unsigned long flags;
 	enum qman_fq_state state;
-- 
2.0.2

