From fd3d28ecb157e42ee9d7232be19cab365d474ca0 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Thu, 20 Oct 2016 10:21:02 +0800
Subject: [PATCH 764/766] fsl_dpa_offload: update some fields for ipsec

upstream commit ("crypto: caam - handle core endianness != caam endianness")
uses an u32 "options" to combines some u8 and u16 fields for struct
ipsec_encap_pdb and ipsec_decap_pdb. So we need to update their callers.

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c | 33 ++++++++++++++++-------------
 1 file changed, 18 insertions(+), 15 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index 23b0521..29e8772 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -133,10 +133,10 @@ int print_sa_sec_param(struct dpa_ipsec_sa *sa)
 		pr_info("pdb_en.desc_hdr = 0x%x\n",
 			sa->sec_desc->pdb_en.desc_hdr);
 		pr_info("pdb_en.ip_nh = 0x%x\n",
-			sa->sec_desc->pdb_en.ip_nh);
+			sa->sec_desc->pdb_en.options & PDBNH_ESP_ENCAP_MASK);
 	} else {
 		pr_info("pdb_dec.hmo_ip_hdr_len %d\n",
-			sa->sec_desc->pdb_dec.hmo_ip_hdr_len);
+			sa->sec_desc->pdb_dec.options && PDBHDRLEN_MASK);
 		pr_info("pdb_dec.options %d\n",
 			sa->sec_desc->pdb_dec.options);
 		pr_info("pdb_dec.seq_num %d\n",
@@ -2615,7 +2615,8 @@ static int copy_sa_params_to_out_sa(struct dpa_ipsec_sa *sa,
 	       sa_params->crypto_params.cipher_key,
 	       sa_params->crypto_params.cipher_key_len);
 	sa->sec_desc->pdb_en.spi = sa_params->spi;
-	sa->sec_desc->pdb_en.options = PDBOPTS_ESP_TUNNEL |
+	sa->sec_desc->pdb_en.options &= 0xffffff00;
+	sa->sec_desc->pdb_en.options |= PDBOPTS_ESP_TUNNEL |
 				       PDBOPTS_ESP_INCIPHDR |
 				       PDBOPTS_ESP_IPHDRSRC;
 	if (sa_params->hdr_upd_flags) {
@@ -2623,13 +2624,13 @@ static int copy_sa_params_to_out_sa(struct dpa_ipsec_sa *sa,
 			sa->sec_desc->pdb_en.options |= PDBOPTS_ESP_DIFFSERV;
 		if (sa_params->hdr_upd_flags & DPA_IPSEC_HDR_COPY_DF) {
 			if (ip_addr_type == DPA_IPSEC_ADDR_T_IPv4)
-				sa->sec_desc->pdb_en.hmo_rsvd |=
+				sa->sec_desc->pdb_en.options |=
 							PDBHMO_ESP_DFBIT;
 			else
 				pr_warn("Copy DF not supported for IPv6 SA");
 		}
 		if (sa_params->hdr_upd_flags & DPA_IPSEC_HDR_DEC_TTL)
-			sa->sec_desc->pdb_en.hmo_rsvd |=
+			sa->sec_desc->pdb_en.options |=
 					PDBHMO_ESP_ENCAP_DEC_TTL;
 
 		sa->dscp_copy =
@@ -2710,7 +2711,7 @@ static int copy_sa_params_to_out_sa(struct dpa_ipsec_sa *sa,
 	}
 
 	/* Only IPv4 inner packets are currently supported */
-	sa->sec_desc->pdb_en.ip_nh = 0x04;
+	sa->sec_desc->pdb_en.options |= (0x04 << PDBNH_ESP_ENCAP_SHIFT);
 
 	sa->l2_hdr_size = sa_params->l2_hdr_size;
 	sa->enable_stats = sa_params->enable_stats;
@@ -2804,7 +2805,8 @@ static int copy_sa_params_to_in_sa(struct dpa_ipsec_sa *sa,
 
 	sa->sec_desc->pdb_dec.seq_num =
 			sa_params->start_seq_num & SEQ_NUM_LOW_MASK;
-	sa->sec_desc->pdb_dec.options = PDBOPTS_ESP_TUNNEL |
+	sa->sec_desc->pdb_dec.options &= 0xffffff00;
+	sa->sec_desc->pdb_dec.options |= PDBOPTS_ESP_TUNNEL |
 					PDBOPTS_ESP_OUTFMT;
 
 	if (dpa_ipsec->sec_era > 4)
@@ -2843,20 +2845,21 @@ static int copy_sa_params_to_in_sa(struct dpa_ipsec_sa *sa,
 	 */
 	if (sa_params->sa_in_params.dest_addr.version ==
 							DPA_IPSEC_ADDR_T_IPv6)
-		sa->sec_desc->pdb_dec.hmo_ip_hdr_len =
-					(uint16_t) sizeof(struct ipv6hdr);
+		sa->sec_desc->pdb_dec.options |=
+					(sizeof(struct ipv6hdr) << PDBHDRLEN_ESP_DECAP_SHIFT);
 	else
-		sa->sec_desc->pdb_dec.hmo_ip_hdr_len =
-					(uint16_t) sizeof(struct iphdr);
+		sa->sec_desc->pdb_dec.options |=
+					(sizeof(struct iphdr) << PDBHDRLEN_ESP_DECAP_SHIFT);
 	if (sa->use_udp_encap)
-		sa->sec_desc->pdb_dec.hmo_ip_hdr_len += UDP_HEADER_LEN;
+		sa->sec_desc->pdb_dec.options +=
+					UDP_HEADER_LEN << PDBHDRLEN_ESP_DECAP_SHIFT;
 
 	if (sa_params->hdr_upd_flags) {
 		if (sa_params->hdr_upd_flags & DPA_IPSEC_HDR_COPY_TOS)
-			sa->sec_desc->pdb_dec.hmo_ip_hdr_len |=
+			sa->sec_desc->pdb_dec.options |=
 					PDBHMO_ESP_DIFFSERV;
 		if (sa_params->hdr_upd_flags & DPA_IPSEC_HDR_DEC_TTL)
-			sa->sec_desc->pdb_dec.hmo_ip_hdr_len |=
+			sa->sec_desc->pdb_dec.options |=
 					PDBHMO_ESP_DECAP_DEC_TTL;
 		if (sa_params->hdr_upd_flags & DPA_IPSEC_HDR_COPY_DF)
 			pr_info("Copy DF bit not supported for inbound SAs");
@@ -2934,7 +2937,7 @@ static int check_policy_params(struct dpa_ipsec_sa *sa,
 
 	/* check if DF bit was set and an IPv6 policy is being offloaded */
 	if (sa_is_outbound(sa) &&
-	    sa->sec_desc->pdb_en.hmo_rsvd == PDBHMO_ESP_DFBIT &&
+	    (sa->sec_desc->pdb_en.options & PDBHMO_ESP_DFBIT) &&
 	    pol_params->src_addr.version == DPA_IPSEC_ADDR_T_IPv6) {
 		log_err("Can't add IPv6 policy to IPv4 SA w/ DF bit copy set\n");
 		return -EINVAL;
-- 
2.0.2

