From 7cb565bbca2ed4aaaf4fb6294bfbd82e7e3441f5 Mon Sep 17 00:00:00 2001
From: Mingkai Hu <mingkai.hu@nxp.com>
Date: Fri, 22 Jan 2016 13:44:48 +0800
Subject: [PATCH 135/752] PCI: layerscape: backport from 4.4-rc1

Signed-off-by: Mingkai Hu <mingkai.hu@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/pci/host/pci-layerscape.c | 222 ++++++++++++--------------------------
 1 file changed, 69 insertions(+), 153 deletions(-)

diff --git a/drivers/pci/host/pci-layerscape.c b/drivers/pci/host/pci-layerscape.c
index 30a4122..3923bed 100644
--- a/drivers/pci/host/pci-layerscape.c
+++ b/drivers/pci/host/pci-layerscape.c
@@ -1,7 +1,7 @@
 /*
  * PCIe host controller driver for Freescale Layerscape SoCs
  *
- * Copyright (C) 2014 - 2015 Freescale Semiconductor.
+ * Copyright (C) 2014 Freescale Semiconductor.
  *
  * Author: Minghuan Lian <Minghuan.Lian@freescale.com>
  *
@@ -11,21 +11,33 @@
  */
 
 #include <linux/kernel.h>
-#include <linux/mfd/syscon.h>
-#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
 #include <linux/of_pci.h>
 #include <linux/of_platform.h>
+#include <linux/of_irq.h>
+#include <linux/of_address.h>
 #include <linux/pci.h>
 #include <linux/platform_device.h>
-#include <linux/regmap.h>
 #include <linux/resource.h>
+#include <linux/mfd/syscon.h>
+#include <linux/regmap.h>
 
-#include "pcie-designware-base.h"
-#include "pci-layerscape.h"
+#include "pcie-designware.h"
+
+/* PEX1/2 Misc Ports Status Register */
+#define SCFG_PEXMSCPORTSR(pex_idx)	(0x94 + (pex_idx) * 4)
+#define LTSSM_STATE_SHIFT	20
+#define LTSSM_STATE_MASK	0x3f
+#define LTSSM_PCIE_L0		0x11 /* L0 state */
 
 /* PEX Internal Configuration Registers */
+#define PCIE_STRFMR1		0x71c /* Symbol Timer & Filter Mask Register1 */
 #define PCIE_DBI_RO_WR_EN	0x8bc /* DBI Read-Only Write Enable Register */
 
+/* PEX LUT registers */
+#define PCIE_LUT_DBG		0x7FC /* PEX LUT Debug Register */
+
 struct ls_pcie_drvdata {
 	u32 lut_offset;
 	u32 ltssm_shift;
@@ -33,35 +45,16 @@ struct ls_pcie_drvdata {
 };
 
 struct ls_pcie {
-	struct dw_pcie_port	pp;
-	void __iomem		*regs;
-	void __iomem		*lut;
-	struct regmap		*scfg;
-	int			index;
-	const u32 *avail_streamids;
-	int streamid_index;
+	void __iomem *dbi;
+	void __iomem *lut;
+	struct regmap *scfg;
+	struct pcie_port pp;
+	const struct ls_pcie_drvdata *drvdata;
+	int index;
 };
 
 #define to_ls_pcie(x)	container_of(x, struct ls_pcie, pp)
 
-u32 set_pcie_streamid_translation(struct pci_dev *pdev, u32 devid)
-{
-	u32 index, streamid;
-	struct dw_pcie_port *pp = pdev->bus->sysdata;
-	struct ls_pcie *pcie = to_ls_pcie(pp);
-
-	if (!pcie->avail_streamids || !pcie->streamid_index)
-		return ~(u32)0;
-
-	index = --pcie->streamid_index;
-	/* mask is set as all zeroes, want to match all bits */
-	iowrite32((devid << 16), pcie->lut + PCIE_LUT_UDR(index));
-	streamid = be32_to_cpup(&pcie->avail_streamids[index]);
-	iowrite32(streamid | PCIE_LUT_ENABLE, pcie->lut + PCIE_LUT_LDR(index));
-
-	return streamid;
-}
-
 static bool ls_pcie_is_bridge(struct ls_pcie *pcie)
 {
 	u32 header_type;
@@ -84,16 +77,6 @@ static void ls_pcie_fix_class(struct ls_pcie *pcie)
 	iowrite16(PCI_CLASS_BRIDGE_PCI, pcie->dbi + PCI_CLASS_DEVICE);
 }
 
-/* Drop MSG TLP except for Vendor MSG */
-static void ls_pcie_drop_msg_tlp(struct ls_pcie *pcie)
-{
-	u32 val;
-
-	val = ioread32(pcie->dbi + PCIE_STRFMR1);
-	val &= 0xDFFFFFFF;
-	iowrite32(val, pcie->dbi + PCIE_STRFMR1);
-}
-
 static int ls1021_pcie_link_up(struct pcie_port *pp)
 {
 	u32 state;
@@ -114,7 +97,7 @@ static int ls1021_pcie_link_up(struct pcie_port *pp)
 static void ls1021_pcie_host_init(struct pcie_port *pp)
 {
 	struct ls_pcie *pcie = to_ls_pcie(pp);
-	u32 index[2];
+	u32 val, index[2];
 
 	pcie->scfg = syscon_regmap_lookup_by_phandle(pp->dev->of_node,
 						     "fsl,pcie-scfg");
@@ -133,17 +116,20 @@ static void ls1021_pcie_host_init(struct pcie_port *pp)
 
 	dw_pcie_setup_rc(pp);
 
-	ls_pcie_drop_msg_tlp(pcie);
+	/*
+	 * LS1021A Workaround for internal TKT228622
+	 * to fix the INTx hang issue
+	 */
+	val = ioread32(pcie->dbi + PCIE_STRFMR1);
+	val &= 0xffff;
+	iowrite32(val, pcie->dbi + PCIE_STRFMR1);
 }
 
-static int ls1_pcie_link_up(struct dw_pcie_port *pp)
+static int ls_pcie_link_up(struct pcie_port *pp)
 {
 	struct ls_pcie *pcie = to_ls_pcie(pp);
 	u32 state;
 
-	if (!pcie->scfg)
-		return 0;
-
 	state = (ioread32(pcie->lut + PCIE_LUT_DBG) >>
 		 pcie->drvdata->ltssm_shift) &
 		 LTSSM_STATE_MASK;
@@ -154,43 +140,14 @@ static int ls1_pcie_link_up(struct dw_pcie_port *pp)
 	return 1;
 }
 
-static int ls1_pcie_host_init(struct dw_pcie_port *pp)
+static void ls_pcie_host_init(struct pcie_port *pp)
 {
 	struct ls_pcie *pcie = to_ls_pcie(pp);
-	u32 val, index[2];
-	int ret;
 
-	pcie->scfg = syscon_regmap_lookup_by_phandle(pp->dev->of_node,
-						     "fsl,pcie-scfg");
-	if (IS_ERR(pcie->scfg)) {
-		dev_err(pp->dev, "No syscfg phandle specified\n");
-		return PTR_ERR(pcie->scfg);
- 	}
- 
-	ret = of_property_read_u32_array(pp->dev->of_node,
-					 "fsl,pcie-scfg", index, 2);
-	if (ret)
-		return ret;
-
-	pcie->index = index[1];
-
- 	/*
- 	 * LS1021A Workaround for internal TKT228622
- 	 * to fix the INTx hang issue
- 	 */
-	val = dw_pcie_dbi_read(pp, PCIE_SYMBOL_TIMER_1);
- 	val &= 0xffff;
-	dw_pcie_dbi_write(pp, val, PCIE_SYMBOL_TIMER_1);
-
-	/* Fix class value */
-	val = dw_pcie_dbi_read(pp, PCI_CLASS_REVISION);
-	val = (val & 0x0000ffff) | (PCI_CLASS_BRIDGE_PCI << 16);
-	dw_pcie_dbi_write(pp, val, PCI_CLASS_REVISION);
-
-	if (!ls1_pcie_link_up(pp))
-		dev_err(pp->dev, "phy link never came up\n");
-
-	return 0;
+	iowrite32(1, pcie->dbi + PCIE_DBI_RO_WR_EN);
+	ls_pcie_fix_class(pcie);
+	ls_pcie_clear_multifunction(pcie);
+	iowrite32(0, pcie->dbi + PCIE_DBI_RO_WR_EN);
 }
 
 static int ls_pcie_msi_host_init(struct pcie_port *pp,
@@ -220,9 +177,10 @@ static struct pcie_host_ops ls1021_pcie_host_ops = {
 	.msi_host_init = ls_pcie_msi_host_init,
 };
 
-static struct dw_host_ops ls1_dw_host_ops = {
-	.link_up = ls1_pcie_link_up,
-	.host_init = ls1_pcie_host_init,
+static struct pcie_host_ops ls_pcie_host_ops = {
+	.link_up = ls_pcie_link_up,
+	.host_init = ls_pcie_host_init,
+	.msi_host_init = ls_pcie_msi_host_init,
 };
 
 static struct ls_pcie_drvdata ls1021_drvdata = {
@@ -245,61 +203,34 @@ static const struct of_device_id ls_pcie_of_match[] = {
 	{ .compatible = "fsl,ls1021a-pcie", .data = &ls1021_drvdata },
 	{ .compatible = "fsl,ls1043a-pcie", .data = &ls1043_drvdata },
 	{ .compatible = "fsl,ls2080a-pcie", .data = &ls2080_drvdata },
-	{ .compatible = "fsl,ls2085a-pcie", .data = &ls2080_drvdata },
 	{ },
 };
+MODULE_DEVICE_TABLE(of, ls_pcie_of_match);
 
-static int ls2_pcie_link_up(struct dw_pcie_port *pp)
+static int __init ls_add_pcie_port(struct pcie_port *pp,
+				   struct platform_device *pdev)
 {
+	int ret;
 	struct ls_pcie *pcie = to_ls_pcie(pp);
-	u32 state;
 
-	if (!pcie->lut)
-		return 0;
-
-	state = ioread32(pcie->lut + PCIE_LUT_DBG) & LTSSM_STATE_MASK;
-	if (state < LTSSM_PCIE_L0)
-		return 0;
+	pp->dev = &pdev->dev;
+	pp->dbi_base = pcie->dbi;
+	pp->ops = pcie->drvdata->ops;
 
-	return 1;
-}
+	ret = dw_pcie_host_init(pp);
+	if (ret) {
+		dev_err(pp->dev, "failed to initialize host\n");
+		return ret;
+	}
 
-static int ls2_pcie_host_init(struct dw_pcie_port *pp)
-{
-	struct ls_pcie *pcie = to_ls_pcie(pp);
-	u32 val;
-
-	pcie->lut = pp->dbi + PCIE_LUT_BASE;
-	/* Disable LDR zero */
-	iowrite32(0, pcie->lut + PCIE_LUT_LDR(0));
-
-	dw_pcie_dbi_write(pp, 1, PCIE_DBI_RO_WR_EN);
-	/* Fix class value */
-	val = dw_pcie_dbi_read(pp, PCI_CLASS_REVISION);
-	val = (val & 0x0000ffff) | (PCI_CLASS_BRIDGE_PCI << 16);
-	dw_pcie_dbi_write(pp, val, PCI_CLASS_REVISION);
-	/* clean multi-func bit */
-	val = dw_pcie_dbi_read(pp, PCI_HEADER_TYPE & ~0x3);
-	val &= ~(1 << 23);
-	dw_pcie_dbi_write(pp, val, PCI_HEADER_TYPE & ~0x3);
-	dw_pcie_dbi_write(pp, 0, PCIE_DBI_RO_WR_EN);
-
-	if (!ls2_pcie_link_up(pp))
-		dev_err(pp->dev, "phy link never came up\n");
- 
 	return 0;
 }
- 
-static struct dw_host_ops ls2_dw_host_ops = {
-	.link_up = ls2_pcie_link_up,
-	.host_init = ls2_pcie_host_init,
-};
 
 static int __init ls_pcie_probe(struct platform_device *pdev)
 {
 	const struct of_device_id *match;
 	struct ls_pcie *pcie;
-	struct resource *res;
+	struct resource *dbi_base;
 	int ret;
 
 	match = of_match_device(ls_pcie_of_match, &pdev->dev);
@@ -310,40 +241,20 @@ static int __init ls_pcie_probe(struct platform_device *pdev)
 	if (!pcie)
 		return -ENOMEM;
 
-	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "regs");
-	pcie->regs = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(pcie->regs)) {
+	dbi_base = platform_get_resource_byname(pdev, IORESOURCE_MEM, "regs");
+	pcie->dbi = devm_ioremap_resource(&pdev->dev, dbi_base);
+	if (IS_ERR(pcie->dbi)) {
 		dev_err(&pdev->dev, "missing *regs* space\n");
-		return PTR_ERR(pcie->regs);
- 	}
-
-	pcie->lut = pcie->regs + PCIE_LUT_BASE;
-	/* Disable LDR zero */
-	iowrite32(0, pcie->lut + PCIE_LUT_LDR(0));
-	pcie->pp.dev = &pdev->dev;
-	pcie->pp.dbi = pcie->regs;
-	pcie->pp.dw_ops = (struct dw_host_ops *)match->data;
-	pcie->pp.atu_num = PCIE_ATU_NUM;
-
-	if (of_device_is_compatible(pdev->dev.of_node, "fsl,ls2085a-pcie") ||
-	of_device_is_compatible(pdev->dev.of_node, "fsl,ls2080a-pcie")) {
-		int len;
-		const u32 *prop;
-		struct device_node *np;
-
-		np = pdev->dev.of_node;
-		prop = (u32 *)of_get_property(np, "available-stream-ids", &len);
-		if (prop) {
-			pcie->avail_streamids = prop;
-			pcie->streamid_index = len/sizeof(u32);
-		} else
-			dev_err(&pdev->dev, "PCIe endpoint partitioning not possible\n");
+		return PTR_ERR(pcie->dbi);
 	}
 
+	pcie->drvdata = match->data;
+	pcie->lut = pcie->dbi + pcie->drvdata->lut_offset;
+
 	if (!ls_pcie_is_bridge(pcie))
 		return -ENODEV;
 
-	ret = dw_pcie_port_init(&pcie->pp);
+	ret = ls_add_pcie_port(&pcie->pp, pdev);
 	if (ret < 0)
 		return ret;
 
@@ -358,4 +269,9 @@ static struct platform_driver ls_pcie_driver = {
 		.of_match_table = ls_pcie_of_match,
 	},
 };
-builtin_platform_driver_probe(ls_pcie_driver, ls_pcie_probe);
+
+module_platform_driver_probe(ls_pcie_driver, ls_pcie_probe);
+
+MODULE_AUTHOR("Minghuan Lian <Minghuan.Lian@freescale.com>");
+MODULE_DESCRIPTION("Freescale Layerscape PCIe host controller driver");
+MODULE_LICENSE("GPL v2");
-- 
2.9.3

