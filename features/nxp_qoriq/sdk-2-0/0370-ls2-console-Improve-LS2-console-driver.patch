From 933443795f825f6986354f978e2dde252fd967ec Mon Sep 17 00:00:00 2001
From: Roy Pledge <Roy.Pledge@freescale.com>
Date: Mon, 23 Feb 2015 10:14:13 -0500
Subject: [PATCH 370/752] ls2-console: Improve LS2 console driver

- Add copyright header to LS2 console driver
- Add the support for the AIOP LS2 console in Linux.  This adds
  the /dev/fsl_aiop_console to Linux
- Allow the console driver to be built as a loadable kernel module
- Fix wraparound issues

Signed-off-by: Roy Pledge <Roy.Pledge@freescale.com>
Signed-off-by: Stuart Yoder <stuart.yoder@freescale.com>

Conflicts:

	drivers/soc/fsl/ls2-console/Kconfig

Signed-off-by: Stuart Yoder <stuart.yoder@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/soc/fsl/ls2-console/Kconfig       |   2 +-
 drivers/soc/fsl/ls2-console/ls2-console.c | 156 ++++++++++++++++++++++++++----
 2 files changed, 139 insertions(+), 19 deletions(-)

diff --git a/drivers/soc/fsl/ls2-console/Kconfig b/drivers/soc/fsl/ls2-console/Kconfig
index 1a44ab7..47d0dc1 100644
--- a/drivers/soc/fsl/ls2-console/Kconfig
+++ b/drivers/soc/fsl/ls2-console/Kconfig
@@ -1,4 +1,4 @@
 config FSL_LS2_CONSOLE
-        bool "Layerscape MC and AIOP console support"
+        tristate "Layerscape MC and AIOP console support"
 	depends on ARCH_LAYERSCAPE
         default y
diff --git a/drivers/soc/fsl/ls2-console/ls2-console.c b/drivers/soc/fsl/ls2-console/ls2-console.c
index f2b6826..978bf7c 100644
--- a/drivers/soc/fsl/ls2-console/ls2-console.c
+++ b/drivers/soc/fsl/ls2-console/ls2-console.c
@@ -1,3 +1,35 @@
+/* Copyright 2015 Freescale Semiconductor Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * * Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ * * Neither the name of the above-listed copyright holders nor the
+ * names of any contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
 #include <linux/miscdevice.h>
 #include <linux/uaccess.h>
 #include <linux/poll.h>
@@ -9,8 +41,15 @@
 /* MC and IOP character device to read from RAM */
 
 #define MC_BASE_ADDR 0x83e0000000
+
+#define MC_BUFFER_OFFSET 0x01000000
 #define MC_BUFFER_SIZE (1024*1024*3)
 
+#define AIOP_BUFFER_OFFSET  0x06000000
+#define AIOP_BUFFER_SIZE (1024*1024*16)
+
+#define invalidate(p) { asm volatile("dc ivac, %0" : : "r" (p) : "memory"); }
+
 struct console_data {
 	char *start_addr; /* Start of buffer */
 	char *end_addr; /* End of buffer */
@@ -18,8 +57,10 @@ struct console_data {
 	char *last_to_console; /* Last data sent to console */
 };
 
+static void adjust_end(struct console_data *cd);
 
-static int fsl_ls2_console_open(struct inode *node, struct file *fp)
+static int fsl_ls2_generic_console_open(struct inode *node, struct file *fp,
+					u64 offset, u64 size)
 {
 	struct console_data *cd;
 
@@ -27,13 +68,34 @@ static int fsl_ls2_console_open(struct inode *node, struct file *fp)
 	if (cd == NULL)
 		return -ENOMEM;
 	fp->private_data = cd;
-	cd->start_addr = ioremap(MC_BASE_ADDR + 0x01000000, MC_BUFFER_SIZE);
-	cd->end_addr = cd->start_addr + MC_BUFFER_SIZE;
-	cd->end_of_data = cd->start_addr;
-	cd->last_to_console = cd->start_addr;
+	cd->start_addr = ioremap(MC_BASE_ADDR + offset, size);
+	cd->end_addr = cd->start_addr + size;
+	if (strncmp(cd->start_addr, "START", 5) == 0) {
+		/* Data has not wrapped yet */
+		cd->end_of_data = cd->start_addr + 5;
+		cd->last_to_console  = cd->start_addr + 4;
+	} else {
+		cd->end_of_data = cd->start_addr;
+		cd->last_to_console  = cd->start_addr;
+		adjust_end(cd);
+		cd->end_of_data += 3;
+		cd->last_to_console += 2;
+	}
 	return 0;
 }
 
+static int fsl_ls2_mc_console_open(struct inode *node, struct file *fp)
+{
+	return fsl_ls2_generic_console_open(node, fp, MC_BUFFER_OFFSET,
+					    MC_BUFFER_SIZE);
+}
+
+static int fsl_ls2_aiop_console_open(struct inode *node, struct file *fp)
+{
+	return fsl_ls2_generic_console_open(node, fp, AIOP_BUFFER_OFFSET,
+					    AIOP_BUFFER_SIZE);
+}
+
 static int fsl_ls2_console_close(struct inode *node, struct file *fp)
 {
 	struct console_data *cd = fp->private_data;
@@ -45,21 +107,49 @@ static int fsl_ls2_console_close(struct inode *node, struct file *fp)
 
 static void adjust_end(struct console_data *cd)
 {
-	while (strncmp(cd->end_of_data, "END", 3) != 0) {
-		if (cd->end_of_data == cd->end_addr)
-			cd->end_of_data = cd->start_addr;
-		else
-			++cd->end_of_data;
+	/* Search for the END marker, but being careful of
+	   wraparound */
+	char last3[3] = { 0, 0, 0 };
+	int i = 0;
+	char *ptr = cd->end_of_data;
+
+	invalidate(ptr);
+
+	while (i < 3) {
+		last3[i] = *ptr;
+		i++;
+		ptr++;
+		if (ptr >= cd->end_addr)
+			ptr = cd->start_addr;
+
+		if (((u64)ptr) % 64 == 0)
+			invalidate(ptr);
+
 	}
+	while (last3[0] != 'E' || last3[1] != 'N' ||
+	       last3[2] != 'D') {
+		last3[0] = last3[1];
+		last3[1] = last3[2];
+		last3[2] = *ptr;
+		ptr++;
+		if (ptr == cd->end_addr)
+			ptr = cd->start_addr;
+		if (((u64)ptr) % 64 == 0)
+			invalidate(ptr);
+	}
+	cd->end_of_data = ptr - 3;
 }
 
 /* Read one past the end of the buffer regardless of end */
 static char consume_next_char(struct console_data *cd)
 {
+	++cd->last_to_console;
 	if (cd->last_to_console == cd->end_addr)
 		cd->last_to_console = cd->start_addr;
-	else
-		++cd->last_to_console;
+
+	/* Sadly we need to invalidate all tthe time here as the data
+	   may have changed as we go */
+	invalidate(cd->last_to_console);
 
 	return *(cd->last_to_console);
 }
@@ -83,10 +173,9 @@ ssize_t fsl_ls2_console_read(struct file *fp, char __user *buf, size_t count,
 	return bytes;
 }
 
-
-static const struct file_operations fsl_ls2_console_fops = {
+static const struct file_operations fsl_ls2_mc_console_fops = {
 	.owner          = THIS_MODULE,
-	.open           = fsl_ls2_console_open,
+	.open           = fsl_ls2_mc_console_open,
 	.release        = fsl_ls2_console_close,
 	.read           = fsl_ls2_console_read,
 };
@@ -94,7 +183,20 @@ static const struct file_operations fsl_ls2_console_fops = {
 static struct miscdevice fsl_ls2_mc_console_dev = {
 	.minor = MISC_DYNAMIC_MINOR,
 	.name = "fsl_mc_console",
-	.fops = &fsl_ls2_console_fops
+	.fops = &fsl_ls2_mc_console_fops
+};
+
+static const struct file_operations fsl_ls2_aiop_console_fops = {
+	.owner          = THIS_MODULE,
+	.open           = fsl_ls2_aiop_console_open,
+	.release        = fsl_ls2_console_close,
+	.read           = fsl_ls2_console_read,
+};
+
+static struct miscdevice fsl_ls2_aiop_console_dev = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name = "fsl_aiop_console",
+	.fops = &fsl_ls2_aiop_console_fops
 };
 
 static int __init fsl_ls2_console_init(void)
@@ -109,17 +211,35 @@ static int __init fsl_ls2_console_init(void)
 	}
 	pr_info("fsl-ls2-console: device %s registered\n",
 		fsl_ls2_mc_console_dev.name);
+
+	err = misc_register(&fsl_ls2_aiop_console_dev);
+	if (err) {
+		pr_err("fsl_aiop_console: cannot register device\n");
+		return err;
+	}
+	pr_info("fsl-ls2-console: device %s registered\n",
+		fsl_ls2_aiop_console_dev.name);
+
 	return 0;
 }
 
 static void __exit fsl_ls2_console_exit(void)
 {
 	int err = misc_deregister(&fsl_ls2_mc_console_dev);
-
 	if (err)
 		pr_err("Failed to deregister device %s code %d\n",
 		       fsl_ls2_mc_console_dev.name, err);
-	pr_info("device %s deregistered\n", fsl_ls2_mc_console_dev.name);
+	else
+		pr_info("device %s deregistered\n",
+			fsl_ls2_mc_console_dev.name);
+
+	err = misc_deregister(&fsl_ls2_aiop_console_dev);
+	if (err)
+		pr_err("Failed to deregister device %s code %d\n",
+		       fsl_ls2_aiop_console_dev.name, err);
+	else
+		pr_info("device %s deregistered\n",
+			fsl_ls2_aiop_console_dev.name);
 }
 
 module_init(fsl_ls2_console_init);
-- 
2.9.3

