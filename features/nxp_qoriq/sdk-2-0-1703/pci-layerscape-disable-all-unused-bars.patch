From 23c231023bf1e4254a9c94140af214296690803e Mon Sep 17 00:00:00 2001
From: Minghuan Lian <Minghuan.Lian@nxp.com>
Date: Wed, 8 Jun 2016 14:36:46 +0800
Subject: [PATCH 459/508] pci/layerscape: disable all unused bars

Layerscape PCIe controller uses the default inbound mapping
and does not need to provide any bar to map the internal space
in RC mode, so the patch disables all unused bars.

Signed-off-by: Minghuan Lian <Minghuan.Lian@nxp.com>
Signed-off-by: Hou Zhiqiang <Zhiqiang.Hou@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pci/host/pci-layerscape.c |   31 +++++++++++++++++++++++++++++++
 1 files changed, 31 insertions(+), 0 deletions(-)

diff --git a/drivers/pci/host/pci-layerscape.c b/drivers/pci/host/pci-layerscape.c
index 671850d..2d45f72 100644
--- a/drivers/pci/host/pci-layerscape.c
+++ b/drivers/pci/host/pci-layerscape.c
@@ -36,6 +36,12 @@
 #define LTSSM_PCIE_L0		0x11 /* L0 state */
 #define LTSSM_PCIE_L2_IDLE	0x15 /* L2 idle state */
 
+#define PCIE_SRIOV_OFFSET	0x178
+
+/* CS2 */
+#define PCIE_CS2_OFFSET		0x1000 /* For PCIe without SR-IOV */
+#define PCIE_ENABLE_CS2		0x80000000 /* For PCIe with SR-IOV */
+
 /* PEX Internal Configuration Registers */
 #define PCIE_STRFMR1		0x71c /* Symbol Timer & Filter Mask Register1 */
 #define PCIE_DBI_RO_WR_EN	0x8bc /* DBI Read-Only Write Enable Register */
@@ -44,6 +50,7 @@
 
 /* PEX LUT registers */
 #define PCIE_LUT_DBG		0x7FC /* PEX LUT Debug Register */
+#define PCIE_LUT_CTRL0		0x7f8
 #define PCIE_LUT_UDR(n)		(0x800 + (n) * 8)
 #define PCIE_LUT_LDR(n)		(0x804 + (n) * 8)
 #define PCIE_LUT_MASK_ALL	0xffff
@@ -184,6 +191,28 @@ static void ls_pcie_fix_error_response(struct ls_pcie *pcie)
 	iowrite32(PCIE_ABSERR_SETTING, pcie->dbi + PCIE_ABSERR);
 }
 
+/* Disable all bars in RC mode */
+static void ls_pcie_disable_bars(struct ls_pcie *pcie)
+{
+	u32 header;
+
+	header = ioread32(pcie->dbi + PCIE_SRIOV_OFFSET);
+	if (PCI_EXT_CAP_ID(header) == PCI_EXT_CAP_ID_SRIOV) {
+		iowrite32(PCIE_ENABLE_CS2, pcie->lut + PCIE_LUT_CTRL0);
+		iowrite32(0, pcie->dbi + PCI_BASE_ADDRESS_0);
+		iowrite32(0, pcie->dbi + PCI_BASE_ADDRESS_1);
+		iowrite32(0, pcie->dbi + PCI_ROM_ADDRESS1);
+		iowrite32(0, pcie->lut + PCIE_LUT_CTRL0);
+	} else {
+		iowrite32(0,
+			  pcie->dbi + PCIE_CS2_OFFSET + PCI_BASE_ADDRESS_0);
+		iowrite32(0,
+			  pcie->dbi + PCIE_CS2_OFFSET + PCI_BASE_ADDRESS_1);
+		iowrite32(0,
+			  pcie->dbi + PCIE_CS2_OFFSET + PCI_ROM_ADDRESS1);
+	}
+}
+
 static int ls1021_pcie_link_up(struct pcie_port *pp)
 {
 	u32 state;
@@ -330,6 +359,8 @@ static void ls_pcie_host_init(struct pcie_port *pp)
 	ls_pcie_drop_msg_tlp(pcie);
 	iowrite32(0, pcie->dbi + PCIE_DBI_RO_WR_EN);
 
+	ls_pcie_disable_bars(pcie);
+
 	ls_pcie_disable_outbound_atus(pcie);
 	ls_pcie_fix_error_response(pcie);
 }
-- 
1.7.5.4

