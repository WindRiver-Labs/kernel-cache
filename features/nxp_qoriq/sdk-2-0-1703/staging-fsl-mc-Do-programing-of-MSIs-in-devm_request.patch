From ec1118ea3e71ee3ed37dac69fbfe2041dc657bde Mon Sep 17 00:00:00 2001
From: Itai Katz <itai.katz@freescale.com>
Date: Wed, 24 Jun 2015 18:10:26 +0300
Subject: [PATCH 020/508] staging: fsl-mc: Do programing of MSIs in
 devm_request_threaded_irq()

With the new dprc_set_obj_irq() we can now program MSIS in the device
in the callback invoked from devm_request_threaded_irq().
Since this callback is invoked with interrupts disabled, we need to
use an atomic portal, instead of the root DPRC's built-in portal
which is non-atomic.

Signed-off-by: Itai Katz <itai.katz@freescale.com>
Signed-off-by: J. German Rivera <German.Rivera@freescale.com>
[Stuart: split out dpaa-eth, dpmac, and dpio updates]
Signed-off-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dprc-driver.c    |   46 +++++++++++++++++++++++++--
 drivers/staging/fsl-mc/bus/mc-sys.c         |   33 ++++++-------------
 drivers/staging/fsl-mc/include/mc-private.h |    5 +++
 3 files changed, 59 insertions(+), 25 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dprc-driver.c b/drivers/staging/fsl-mc/bus/dprc-driver.c
index e126e38..f4942d7 100644
--- a/drivers/staging/fsl-mc/bus/dprc-driver.c
+++ b/drivers/staging/fsl-mc/bus/dprc-driver.c
@@ -878,6 +878,31 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 		}
 
 		/*
+		 * Allocate MC portal to be used in atomic context
+		 * (e.g., to program MSIs from program_msi_at_mc())
+		 */
+		error = fsl_mc_portal_allocate(NULL,
+					       FSL_MC_IO_ATOMIC_CONTEXT_PORTAL,
+					       &mc_bus->atomic_mc_io);
+		if (error < 0)
+			goto error_cleanup_dprc_scan;
+
+		pr_info("fsl-mc: Allocated dpmcp.%d to dprc.%d for atomic MC I/O\n",
+			mc_bus->atomic_mc_io->dpmcp_dev->obj_desc.id,
+			mc_dev->obj_desc.id);
+
+		/*
+		 * Open DPRC handle to be used with mc_bus->atomic_mc_io:
+		 */
+		error = dprc_open(mc_bus->atomic_mc_io, 0, mc_dev->obj_desc.id,
+				  &mc_bus->atomic_dprc_handle);
+		if (error < 0) {
+			dev_err(&mc_dev->dev, "dprc_open() failed: %d\n",
+				error);
+			goto error_cleanup_atomic_mc_io;
+		}
+
+		/*
 		 * Configure interrupt for the DPMCP object associated with the
 		 * DPRC object's built-in portal:
 		 *
@@ -886,19 +911,25 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 		 */
 		error = fsl_mc_io_setup_dpmcp_irq(mc_dev->mc_io);
 		if (error < 0)
-			goto error_cleanup_dprc_scan;
+			goto error_cleanup_atomic_dprc_handle;
 
 		/*
 		 * Configure interrupt for the DPRC object associated with this MC bus:
 		 */
 		error = dprc_setup_irq(mc_dev);
 		if (error < 0)
-			goto error_cleanup_dprc_scan;
+			goto error_cleanup_atomic_dprc_handle;
 	}
 
 	dev_info(&mc_dev->dev, "DPRC device bound to driver");
 	return 0;
 
+error_cleanup_atomic_dprc_handle:
+	(void)dprc_close(mc_bus->atomic_mc_io, 0, mc_bus->atomic_dprc_handle);
+
+error_cleanup_atomic_mc_io:
+	fsl_mc_portal_free(mc_bus->atomic_mc_io);
+
 error_cleanup_dprc_scan:
 	fsl_mc_io_unset_dpmcp(mc_dev->mc_io);
 	device_for_each_child(&mc_dev->dev, NULL, __fsl_mc_device_remove);
@@ -964,8 +995,17 @@ static int dprc_remove(struct fsl_mc_device *mc_dev)
 	if (WARN_ON(!mc_bus->irq_resources))
 		return -EINVAL;
 
-	if (dev_get_msi_domain(&mc_dev->dev) && fsl_mc_interrupts_supported())
+	if (dev_get_msi_domain(&mc_dev->dev) && fsl_mc_interrupts_supported()) {
 		dprc_teardown_irq(mc_dev);
+		error = dprc_close(mc_bus->atomic_mc_io, 0,
+				   mc_bus->atomic_dprc_handle);
+		if (error < 0) {
+			dev_err(&mc_dev->dev, "dprc_close() failed: %d\n",
+				error);
+		}
+
+		fsl_mc_portal_free(mc_bus->atomic_mc_io);
+	}
 
 	fsl_mc_io_unset_dpmcp(mc_dev->mc_io);
 	device_for_each_child(&mc_dev->dev, NULL, __fsl_mc_device_remove);
diff --git a/drivers/staging/fsl-mc/bus/mc-sys.c b/drivers/staging/fsl-mc/bus/mc-sys.c
index 7d39bf9..8faf1a7 100644
--- a/drivers/staging/fsl-mc/bus/mc-sys.c
+++ b/drivers/staging/fsl-mc/bus/mc-sys.c
@@ -179,7 +179,6 @@ static int register_dpmcp_irq_handler(struct fsl_mc_device *dpmcp_dev)
 {
 	int error;
 	struct fsl_mc_device_irq *irq = dpmcp_dev->irqs[DPMCP_IRQ_INDEX];
-	struct dpmcp_irq_cfg irq_cfg;
 
 	error = devm_request_irq(&dpmcp_dev->dev,
 				 irq->irq_number,
@@ -194,27 +193,7 @@ static int register_dpmcp_irq_handler(struct fsl_mc_device *dpmcp_dev)
 		return error;
 	}
 
-	irq_cfg.paddr = irq->msi_paddr;
-	irq_cfg.val = irq->msi_value;
-	irq_cfg.user_irq_id = irq->irq_number;
-
-	error = dpmcp_set_irq(dpmcp_dev->mc_io,
-				  MC_CMD_FLAG_INTR_DIS,
-			      dpmcp_dev->mc_handle,
-			      DPMCP_IRQ_INDEX,
-				  &irq_cfg);
-
-	if (error < 0) {
-		dev_err(&dpmcp_dev->dev,
-			"dpmcp_set_irq() failed: %d\n", error);
-		goto error_unregister_irq_handler;
-	}
-
 	return 0;
-
-error_unregister_irq_handler:
-	devm_free_irq(&dpmcp_dev->dev, irq->irq_number, &dpmcp_dev->dev);
-	return error;
 }
 
 static int enable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
@@ -326,7 +305,8 @@ int fsl_mc_io_setup_dpmcp_irq(struct fsl_mc_io *mc_io)
 	return 0;
 
 error_close_dpmcp:
-	(void)dpmcp_close(fsl_mc_dpmcp_isr.mc_io, 0,
+	(void)dpmcp_close(fsl_mc_dpmcp_isr.mc_io,
+			  MC_CMD_FLAG_INTR_DIS,
 			  mc_io->dpmcp_isr_mc_handle);
 
 error_unregister_irq_handler:
@@ -351,6 +331,7 @@ EXPORT_SYMBOL_GPL(fsl_mc_io_setup_dpmcp_irq);
  */
 static void teardown_dpmcp_irq(struct fsl_mc_io *mc_io)
 {
+	int error;
 	struct fsl_mc_device *dpmcp_dev = mc_io->dpmcp_dev;
 
 	if (WARN_ON(!dpmcp_dev))
@@ -367,6 +348,14 @@ static void teardown_dpmcp_irq(struct fsl_mc_io *mc_io)
 	(void)disable_dpmcp_irq(dpmcp_dev);
 	unregister_dpmcp_irq_handler(dpmcp_dev);
 	fsl_mc_free_irqs(dpmcp_dev);
+	error = dpmcp_close(fsl_mc_dpmcp_isr.mc_io,
+			    MC_CMD_FLAG_INTR_DIS,
+			    mc_io->dpmcp_isr_mc_handle);
+	if (error < 0) {
+		dev_err(&dpmcp_dev->dev,
+			"dpmcp_close(dpmcp_isr_mc_handle) failed: %d\n", error);
+	}
+
 	if (atomic_sub_return(1, &fsl_mc_dpmcp_isr.dpmcp_count) == 0) {
 		fsl_mc_portal_free(fsl_mc_dpmcp_isr.mc_io);
 		fsl_mc_dpmcp_isr.mc_io = NULL;
diff --git a/drivers/staging/fsl-mc/include/mc-private.h b/drivers/staging/fsl-mc/include/mc-private.h
index 83448d3..eb9b2b1 100644
--- a/drivers/staging/fsl-mc/include/mc-private.h
+++ b/drivers/staging/fsl-mc/include/mc-private.h
@@ -95,6 +95,9 @@ struct fsl_mc_resource_pool {
  * @resource_pools: array of resource pools (one pool per resource type)
  * for this MC bus. These resources represent allocatable entities
  * from the physical DPRC.
+ * @atomic_mc_io: mc_io object to be used to send DPRC commands to the MC
+ * in atomic context (e.g., when programming MSIs in program_msi_at_mc()).
+ * @atomic_dprc_handle: DPRC handle opened using the atomic_mc_io's portal.
  * @irq_resources: Pointer to array of IRQ objects for the IRQ pool
  * @scan_mutex: Serializes bus scanning
  * @dprc_attr: DPRC attributes
@@ -103,6 +106,8 @@ struct fsl_mc_bus {
 	struct fsl_mc_device mc_dev;
 	struct fsl_mc_resource_pool resource_pools[FSL_MC_NUM_POOL_TYPES];
 	struct fsl_mc_device_irq *irq_resources;
+	struct fsl_mc_io *atomic_mc_io;
+	uint16_t atomic_dprc_handle;
 	struct mutex scan_mutex;    /* serializes bus scanning */
 	struct dprc_attributes dprc_attr;
 };
-- 
1.7.5.4

