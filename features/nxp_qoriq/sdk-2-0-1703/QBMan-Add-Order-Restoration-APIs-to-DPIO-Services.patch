From c7598e4ac8ec333cc17c7ef0c1cc49f6c3981ad7 Mon Sep 17 00:00:00 2001
From: Roy Pledge <roy.pledge@nxp.com>
Date: Fri, 19 Aug 2016 16:41:53 -0400
Subject: [PATCH 357/508] QBMan: Add Order Restoration APIs to DPIO Services

Add APIs for the QBMan order restoration feature to DPIO services.
The new APIs allow enqueue via an order restoration point and the
ability to indicate a dropped or terminated frame in a sequence.

Signed-off-by: Roy Pledge <roy.pledge@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/dpio_service.c |   56 +++++++++++++++++
 drivers/staging/fsl-mc/include/fsl_dpaa2_io.h  |   78 +++++++++++++++++++++++-
 2 files changed, 132 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
index ebcfd59..a8a0259 100644
--- a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
+++ b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
@@ -617,6 +617,26 @@ int dpaa2_io_service_enqueue_fq(struct dpaa2_io *d,
 }
 EXPORT_SYMBOL(dpaa2_io_service_enqueue_fq);
 
+int dpaa2_io_service_enqueue_orp_fq(struct dpaa2_io *d,
+				    uint32_t fqid,
+				    const struct dpaa2_fd *fd,
+				    uint16_t orp_id,
+				    uint16_t seqnum,
+				    int last)
+{
+	struct qbman_eq_desc ed;
+
+	d = _service_select(d);
+	if (!d)
+		return -ENODEV;
+	qbman_eq_desc_clear(&ed);
+	qbman_eq_desc_set_orp(&ed, 0, orp_id, seqnum, !last);
+	qbman_eq_desc_set_fq(&ed, fqid);
+	return qbman_swp_enqueue(d->object.swp, &ed,
+				 (const struct qbman_fd *)fd);
+}
+EXPORT_SYMBOL(dpaa2_io_service_enqueue_orp_fq);
+
 int dpaa2_io_service_enqueue_qd(struct dpaa2_io *d,
 			       uint32_t qdid, uint8_t prio, uint16_t qdbin,
 			       const struct dpaa2_fd *fd)
@@ -634,6 +654,42 @@ int dpaa2_io_service_enqueue_qd(struct dpaa2_io *d,
 }
 EXPORT_SYMBOL(dpaa2_io_service_enqueue_qd);
 
+int dpaa2_io_service_enqueue_orp_qd(struct dpaa2_io *d,
+				    uint32_t qdid, uint8_t prio,
+				    uint16_t qdbin,
+				    const struct dpaa2_fd *fd,
+				    uint16_t orp_id,
+				    uint16_t seqnum,
+				    int last)
+{
+	struct qbman_eq_desc ed;
+
+	d = _service_select(d);
+	if (!d)
+		return -ENODEV;
+	qbman_eq_desc_clear(&ed);
+	qbman_eq_desc_set_orp(&ed, 0, orp_id, seqnum, !last);
+	qbman_eq_desc_set_qd(&ed, qdid, qdbin, prio);
+	return qbman_swp_enqueue(d->object.swp, &ed,
+				 (const struct qbman_fd *)fd);
+}
+EXPORT_SYMBOL(dpaa2_io_service_enqueue_orp_qd);
+
+int dpaa2_io_service_orp_seqnum_drop(struct dpaa2_io *d,
+				     uint16_t orp_id, uint16_t seqnum)
+{
+	struct qbman_eq_desc ed;
+	struct qbman_fd fd;
+
+	d = _service_select(d);
+	if (!d)
+		return -ENODEV;
+	qbman_eq_desc_clear(&ed);
+	qbman_eq_desc_set_orp_hole(&ed, orp_id, seqnum);
+	return qbman_swp_enqueue(d->object.swp, &ed, &fd);
+}
+EXPORT_SYMBOL(dpaa2_io_service_orp_seqnum_drop);
+
 int dpaa2_io_service_release(struct dpaa2_io *d,
 			    uint32_t bpid,
 			    const uint64_t *buffers,
diff --git a/drivers/staging/fsl-mc/include/fsl_dpaa2_io.h b/drivers/staging/fsl-mc/include/fsl_dpaa2_io.h
index 6ea2ff9..9718583 100644
--- a/drivers/staging/fsl-mc/include/fsl_dpaa2_io.h
+++ b/drivers/staging/fsl-mc/include/fsl_dpaa2_io.h
@@ -460,7 +460,6 @@ int dpaa2_io_service_pull_channel(struct dpaa2_io *d, uint32_t channelid,
  * initially at least). Plus, keeping them out (for now) keeps the API view
  * simpler. Missing features are;
  *  - enqueue confirmation (results DMA'd back to the user)
- *  - ORP
  *  - DCA/order-preservation (see note in "pull dequeues")
  *  - enqueue consumption interrupts
  *
@@ -472,6 +471,35 @@ int dpaa2_io_service_enqueue_fq(struct dpaa2_io *d,
 			       const struct dpaa2_fd *fd);
 
 /**
+ * dpaa2_io_service_enqueue_orp_fq() - Enqueue a frame to a frame queue with
+ * order restoration
+ * @d: the given DPIO service.
+ * @fqid: the given frame queue id.
+ * @fd: the frame descriptor which is enqueued.
+ * @orp_id: the order restoration point ID
+ * @seqnum: the order sequence number
+ * @last: must be set for the final frame if seqnum is shared (spilt frame)
+ *
+ * Performs an enqueue to a frame queue using the specified order restortation
+ * point. The QMan device will ensure the order of frames placed on the
+ * queue will be ordered as per the sequence number.
+ *
+ * In the case a frame is split it is possible to enqueue using the same
+ * sequence number more than once. The final frame in a shared sequence number
+ * most be indicated by setting last = 1. For non shared sequence numbers
+ * last = 1 must always be set.
+ *
+ * Return 0 for successful enqueue, or -EBUSY if the enqueue ring is not ready,
+ * or -ENODEV if there is no dpio service.
+ */
+int dpaa2_io_service_enqueue_orp_fq(struct dpaa2_io *d,
+				    uint32_t fqid,
+				    const struct dpaa2_fd *fd,
+				    uint16_t orp_id,
+				    uint16_t seqnum,
+				    int last);
+
+/**
  * dpaa2_io_service_enqueue_qd() - Enqueue a frame to a QD.
  * @d: the given DPIO service.
  * @qdid: the given queuing destination id.
@@ -485,7 +513,6 @@ int dpaa2_io_service_enqueue_fq(struct dpaa2_io *d,
  * initially at least). Plus, keeping them out (for now) keeps the API view
  * simpler. Missing features are;
  *  - enqueue confirmation (results DMA'd back to the user)
- *  - ORP
  *  - DCA/order-preservation (see note in "pull dequeues")
  *  - enqueue consumption interrupts
  *
@@ -496,6 +523,53 @@ int dpaa2_io_service_enqueue_qd(struct dpaa2_io *d,
 			       uint32_t qdid, uint8_t prio, uint16_t qdbin,
 			       const struct dpaa2_fd *fd);
 
+/**
+ * dpaa2_io_service_enqueue_orp_qd() - Enqueue a frame to a queueing destination
+ * with order restoration
+ * @d: the given DPIO service.
+ * @qdid: the given queuing destination id.
+ * @fd: the frame descriptor which is enqueued.
+ * @orp_id: the order restoration point ID
+ * @seqnum: the order sequence number
+ * @last: must be set for the final frame if seqnum is shared (spilt frame)
+ *
+ * Performs an enqueue to a frame queue using the specified order restortation
+ * point. The QMan device will ensure the order of frames placed on the
+ * queue will be ordered as per the sequence number.
+ *
+ * In the case a frame is split it is possible to enqueue using the same
+ * sequence number more than once. The final frame in a shared sequence number
+ * most be indicated by setting last = 1. For non shared sequence numbers
+ * last = 1 must always be set.
+ *
+ * Return 0 for successful enqueue, or -EBUSY if the enqueue ring is not ready,
+ * or -ENODEV if there is no dpio service.
+ */
+int dpaa2_io_service_enqueue_orp_qd(struct dpaa2_io *d,
+				    uint32_t qdid, uint8_t prio, uint16_t qdbin,
+				    const struct dpaa2_fd *fd,
+				    uint16_t orp_id, uint16_t seqnum,
+				    int last);
+
+/**
+ * dpaa2_io_service_orp_seqnum_drop() - Remove a sequence number from
+ * an order restoration list
+ * @d: the given DPIO service.
+ * @orp_id: Order restoration point to remove a sequence number from
+ * @seqnum: Sequence number to remove
+ *
+ * Removes a frames sequeuence number from an order restoration point without
+ * enqueing the frame. Used to indicate that the order restoration hardware
+ * should not expect to see this sequence number. Typically used to indicate
+ * a frame was terminated or dropped from a flow.
+ *
+ * Return 0 for successful enqueue, or -EBUSY if the enqueue ring is not ready,
+ * or -ENODEV if there is no dpio service.
+ */
+int dpaa2_io_service_orp_seqnum_drop(struct dpaa2_io *d,
+				     uint16_t orp_id, uint16_t seqnum);
+
+
 /*******************/
 /* Buffer handling */
 /*******************/
-- 
1.7.5.4

