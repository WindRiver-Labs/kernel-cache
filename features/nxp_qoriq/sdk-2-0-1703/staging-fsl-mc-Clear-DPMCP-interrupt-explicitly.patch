From 4c4b30ee389caa54a816595eced7f182af8aa1aa Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Mon, 24 Jul 2017 15:58:45 +0800
Subject: [PATCH 019/508] staging: fsl-mc: Clear DPMCP interrupt explicitly

Signed-off-by: J. German Rivera <German.Rivera@freescale.com>
Change-Id: I11ee4bf654ecf576bf81a5a06f5f15ab68e45845
Reviewed-on: http://git.am.freescale.net:8181/38767
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dprc-driver.c  |    4 +-
 drivers/staging/fsl-mc/bus/mc-allocator.c |    7 ++-
 drivers/staging/fsl-mc/bus/mc-sys.c       |   87 ++++++++++++++++++++++++++---
 3 files changed, 88 insertions(+), 10 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dprc-driver.c b/drivers/staging/fsl-mc/bus/dprc-driver.c
index 14f4160..e126e38 100644
--- a/drivers/staging/fsl-mc/bus/dprc-driver.c
+++ b/drivers/staging/fsl-mc/bus/dprc-driver.c
@@ -838,7 +838,9 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 
 	if (fsl_mc_interrupts_supported()) {
 		/*
-		 * Create DPMCP for the DPRC's built-in portal:
+		 * Create DPMCP for the DPRC's built-in portal, to have
+		 * DPMCP completion interrupts for MC commands sent on
+		 * the DPRC's built-in portal:
 		 */
 		error = dprc_create_dpmcp(mc_dev);
 		if (error < 0)
diff --git a/drivers/staging/fsl-mc/bus/mc-allocator.c b/drivers/staging/fsl-mc/bus/mc-allocator.c
index 31a153a..d93cc4c 100644
--- a/drivers/staging/fsl-mc/bus/mc-allocator.c
+++ b/drivers/staging/fsl-mc/bus/mc-allocator.c
@@ -278,7 +278,12 @@ int __must_check fsl_mc_portal_allocate(struct fsl_mc_device *mc_dev,
 	struct fsl_mc_resource *resource = NULL;
 	struct fsl_mc_io *mc_io = NULL;
 
-	if (mc_dev->flags & FSL_MC_IS_DPRC) {
+	if (!mc_dev) {
+		if (WARN_ON(!fsl_mc_bus_type.dev_root))
+			return error;
+
+		mc_bus_dev = to_fsl_mc_device(fsl_mc_bus_type.dev_root);
+	} else if (mc_dev->flags & FSL_MC_IS_DPRC) {
 		mc_bus_dev = mc_dev;
 	} else {
 		if (WARN_ON(mc_dev->dev.parent->bus != &fsl_mc_bus_type))
diff --git a/drivers/staging/fsl-mc/bus/mc-sys.c b/drivers/staging/fsl-mc/bus/mc-sys.c
index 4e0cbb0..7d39bf9 100644
--- a/drivers/staging/fsl-mc/bus/mc-sys.c
+++ b/drivers/staging/fsl-mc/bus/mc-sys.c
@@ -77,8 +77,10 @@ static u16 mc_cmd_hdr_read_cmdid(struct mc_command *cmd)
  */
 static irqreturn_t dpmcp_irq0_handler(int irq_num, void *arg)
 {
+	int error;
 	struct device *dev = (struct device *)arg;
 	struct fsl_mc_device *dpmcp_dev = to_fsl_mc_device(dev);
+	struct fsl_mc_io *mc_io = dpmcp_dev->mc_io;
 
 	dev_dbg(dev, "DPMCP IRQ %d triggered on CPU %u\n", irq_num,
 		smp_processor_id());
@@ -86,14 +88,30 @@ static irqreturn_t dpmcp_irq0_handler(int irq_num, void *arg)
 	if (WARN_ON(dpmcp_dev->irqs[0]->irq_number != (uint32_t)irq_num))
 		goto out;
 
-	if (WARN_ON(!dpmcp_dev->mc_io))
+	if (WARN_ON(!mc_io))
+		goto out;
+
+	if (WARN_ON(!fsl_mc_dpmcp_isr.mc_io))
 		goto out;
 
 	/*
-	 * NOTE: We cannot invoke MC flib function here
+	 * Clear interrupt source at the MC:
+	 *
+	 * NOTE: We clear all DPMCP IRQ events, rather than calling
+	 * dpmcp_get_irq_status() here to save one trip to the MC
 	 */
+	error = dpmcp_clear_irq_status(fsl_mc_dpmcp_isr.mc_io,
+				       MC_CMD_FLAG_INTR_DIS | MC_CMD_FLAG_PRI,
+				       mc_io->dpmcp_isr_mc_handle,
+				       DPMCP_IRQ_INDEX, ~0x0U);
+	if (error < 0) {
+		dev_err(&dpmcp_dev->dev,
+			"dpmcp_clear_irq_status() failed: %d\n",
+			error);
+		goto out;
+	}
 
-	complete(&dpmcp_dev->mc_io->mc_command_done_completion);
+	complete(&mc_io->mc_command_done_completion);
 out:
 	return IRQ_HANDLED;
 }
@@ -244,6 +262,9 @@ int fsl_mc_io_setup_dpmcp_irq(struct fsl_mc_io *mc_io)
 	int error;
 	struct fsl_mc_device *dpmcp_dev = mc_io->dpmcp_dev;
 
+	if (WARN_ON(mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL))
+		return -EINVAL;
+
 	if (WARN_ON(!dpmcp_dev))
 		return -EINVAL;
 
@@ -253,12 +274,34 @@ int fsl_mc_io_setup_dpmcp_irq(struct fsl_mc_io *mc_io)
 	if (WARN_ON(dpmcp_dev->obj_desc.irq_count != 1))
 		return -EINVAL;
 
-	if (WARN_ON(!dpmcp_dev->mc_io))
+	if (WARN_ON(dpmcp_dev->mc_io != mc_io))
 		return -EINVAL;
 
+	if (WARN_ON(mc_io == fsl_mc_dpmcp_isr.mc_io))
+		return -EINVAL;
+
+	if (WARN_ON(atomic_read(&fsl_mc_dpmcp_isr.dpmcp_count) < 0))
+		return -EINVAL;
+
+	if (atomic_add_return(1, &fsl_mc_dpmcp_isr.dpmcp_count) == 1) {
+		/*
+		 * Create mc_io to be used to send MC commands from
+		 * the DPMCP command completion ISR (i.e. to clear the
+		 * DPMCP interrupt)
+		 */
+		error = fsl_mc_portal_allocate(NULL,
+					       FSL_MC_IO_ATOMIC_CONTEXT_PORTAL,
+					       &fsl_mc_dpmcp_isr.mc_io);
+		if (error < 0)
+			goto error_dec_dpmcp_count;
+
+		pr_info("fsl-mc: Allocated dpmcp.%d to DPMCP command completion ISR\n",
+			fsl_mc_dpmcp_isr.mc_io->dpmcp_dev->obj_desc.id);
+	}
+
 	error = fsl_mc_allocate_irqs(dpmcp_dev);
 	if (error < 0)
-		return error;
+		goto error_dec_dpmcp_count;
 
 	error = disable_dpmcp_irq(dpmcp_dev);
 	if (error < 0)
@@ -268,18 +311,36 @@ int fsl_mc_io_setup_dpmcp_irq(struct fsl_mc_io *mc_io)
 	if (error < 0)
 		goto error_free_irqs;
 
-	error = enable_dpmcp_irq(dpmcp_dev);
+	error = dpmcp_open(fsl_mc_dpmcp_isr.mc_io,
+			   MC_CMD_FLAG_INTR_DIS,
+			   dpmcp_dev->obj_desc.id,
+			   &mc_io->dpmcp_isr_mc_handle);
 	if (error < 0)
 		goto error_unregister_irq_handler;
 
+	error = enable_dpmcp_irq(dpmcp_dev);
+	if (error < 0)
+		goto error_close_dpmcp;
+
 	mc_io->mc_command_done_irq_armed = true;
 	return 0;
 
+error_close_dpmcp:
+	(void)dpmcp_close(fsl_mc_dpmcp_isr.mc_io, 0,
+			  mc_io->dpmcp_isr_mc_handle);
+
 error_unregister_irq_handler:
 	unregister_dpmcp_irq_handler(dpmcp_dev);
 
 error_free_irqs:
 	fsl_mc_free_irqs(dpmcp_dev);
+
+error_dec_dpmcp_count:
+	if (atomic_sub_return(1, &fsl_mc_dpmcp_isr.dpmcp_count) == 0) {
+		fsl_mc_portal_free(fsl_mc_dpmcp_isr.mc_io);
+		fsl_mc_dpmcp_isr.mc_io = NULL;
+	}
+
 	return error;
 }
 EXPORT_SYMBOL_GPL(fsl_mc_io_setup_dpmcp_irq);
@@ -299,10 +360,17 @@ static void teardown_dpmcp_irq(struct fsl_mc_io *mc_io)
 	if (WARN_ON(!dpmcp_dev->irqs))
 		return;
 
+	if (WARN_ON(atomic_read(&fsl_mc_dpmcp_isr.dpmcp_count) <= 0))
+		return;
+
 	mc_io->mc_command_done_irq_armed = false;
 	(void)disable_dpmcp_irq(dpmcp_dev);
 	unregister_dpmcp_irq_handler(dpmcp_dev);
 	fsl_mc_free_irqs(dpmcp_dev);
+	if (atomic_sub_return(1, &fsl_mc_dpmcp_isr.dpmcp_count) == 0) {
+		fsl_mc_portal_free(fsl_mc_dpmcp_isr.mc_io);
+		fsl_mc_dpmcp_isr.mc_io = NULL;
+	}
 }
 
 /**
@@ -727,9 +795,12 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 	int error;
 	enum mc_cmd_status status;
 	unsigned long irq_flags = 0;
+	bool dpmcp_completion_intr_disabled =
+		(MC_CMD_HDR_READ_FLAGS(cmd->header) & MC_CMD_FLAG_INTR_DIS);
 
 	if (WARN_ON(in_irq() &&
-		    !(mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL)))
+		    (!dpmcp_completion_intr_disabled ||
+		    !(mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL))))
 		return -EINVAL;
 
 	if (mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL)
@@ -745,7 +816,7 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 	/*
 	 * Wait for response from the MC hardware:
 	 */
-	if (mc_io->mc_command_done_irq_armed && !(MC_CMD_HDR_READ_FLAGS(cmd->header) & MC_CMD_FLAG_INTR_DIS))
+	if (mc_io->mc_command_done_irq_armed && !dpmcp_completion_intr_disabled)
 		error = mc_completion_wait(mc_io, cmd, &status);
 	else if (!(mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL))
 		error = mc_polling_wait_preemptible(mc_io, cmd, &status);
-- 
1.7.5.4

