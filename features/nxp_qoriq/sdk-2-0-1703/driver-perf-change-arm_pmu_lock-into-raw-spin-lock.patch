From c15a96c7a2b6f0c8566a07320f71f9ac624173af Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Mon, 30 Oct 2017 15:45:54 +0800
Subject: [PATCH] driver: perf: change arm_pmu_lock into raw spin lock

when run cpu hot plug test base on rt kernel with below command
echo 1 > /sys/devices/system/cpu/cpu1/online
there will be a call trace as below:

CPU: 1 PID: 0 Comm: swapper/1 Not tainted
4.8.24-rt10-WR9.0.0.12_preempt-rt #3
ces/system/cpu/cHardware name: LS1046A RDB Board (DT)
Call trace:
[<ffff000008089690>] dump_backtrace+0x0/0x1d0
pu1/online
[<ffff000008089884>] show_stack+0x24/0x30
[<ffff0000084adb94>] dump_stack+0x90/0xb4
[<ffff0000080cdbf4>] ___might_sleep+0x15c/0x170
[<ffff0000089f4b2c>] rt_spin_lock+0x2c/0x88
[<ffff000008887688>] arm_perf_starting_cpu+0x30/0xb0
[<ffff0000080a3004>] cpuhp_invoke_callback+0x6c/0x200
[<ffff0000080a52a4>] notify_cpu_starting+0x74/0x90
[<ffff00000808f5e4>] secondary_start_kernel+0x104/0x1a0
[<0000000080083158>] 0x80083158

Therefore, change the arm_pmu_lock to raw spin lock to fix this issue.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/perf/arm_pmu.c |   18 +++++++++---------
 1 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/drivers/perf/arm_pmu.c b/drivers/perf/arm_pmu.c
index f5e1008..12d9bbf 100644
--- a/drivers/perf/arm_pmu.c
+++ b/drivers/perf/arm_pmu.c
@@ -688,7 +688,7 @@ static int cpu_pmu_request_irq(struct arm_pmu *cpu_pmu, irq_handler_t handler)
 	return 0;
 }
 
-static DEFINE_SPINLOCK(arm_pmu_lock);
+static DEFINE_RAW_SPINLOCK(arm_pmu_lock);
 static LIST_HEAD(arm_pmu_list);
 
 /*
@@ -701,7 +701,7 @@ static int arm_perf_starting_cpu(unsigned int cpu)
 {
 	struct arm_pmu *pmu;
 
-	spin_lock(&arm_pmu_lock);
+	raw_spin_lock(&arm_pmu_lock);
 	list_for_each_entry(pmu, &arm_pmu_list, entry) {
 
 		if (!cpumask_test_cpu(cpu, &pmu->supported_cpus))
@@ -709,7 +709,7 @@ static int arm_perf_starting_cpu(unsigned int cpu)
 		if (pmu->reset)
 			pmu->reset(pmu);
 	}
-	spin_unlock(&arm_pmu_lock);
+	raw_spin_unlock(&arm_pmu_lock);
 	return 0;
 }
 
@@ -821,9 +821,9 @@ static int cpu_pmu_init(struct arm_pmu *cpu_pmu)
 	if (!cpu_hw_events)
 		return -ENOMEM;
 
-	spin_lock(&arm_pmu_lock);
+	raw_spin_lock(&arm_pmu_lock);
 	list_add_tail(&cpu_pmu->entry, &arm_pmu_list);
-	spin_unlock(&arm_pmu_lock);
+	raw_spin_unlock(&arm_pmu_lock);
 
 	err = cpu_pm_pmu_register(cpu_pmu);
 	if (err)
@@ -859,9 +859,9 @@ static int cpu_pmu_init(struct arm_pmu *cpu_pmu)
 	return 0;
 
 out_unregister:
-	spin_lock(&arm_pmu_lock);
+	raw_spin_lock(&arm_pmu_lock);
 	list_del(&cpu_pmu->entry);
-	spin_unlock(&arm_pmu_lock);
+	raw_spin_unlock(&arm_pmu_lock);
 	free_percpu(cpu_hw_events);
 	return err;
 }
@@ -869,9 +869,9 @@ out_unregister:
 static void cpu_pmu_destroy(struct arm_pmu *cpu_pmu)
 {
 	cpu_pm_pmu_unregister(cpu_pmu);
-	spin_lock(&arm_pmu_lock);
+	raw_spin_lock(&arm_pmu_lock);
 	list_del(&cpu_pmu->entry);
-	spin_unlock(&arm_pmu_lock);
+	raw_spin_unlock(&arm_pmu_lock);
 	free_percpu(cpu_pmu->hw_events);
 }
 
-- 
1.7.5.4

