From 1a388104cf84f3cfd8a50c073180a3a0e02a5a97 Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@nxp.com>
Date: Tue, 8 Nov 2016 10:38:48 +0200
Subject: [PATCH 405/508] dpaa2-evb: uprev binary interface to v6.0

Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/evb/dpdmux-cmd.h |   18 ++++--
 drivers/staging/fsl-dpaa2/evb/dpdmux.c     |   51 +++++++++++++-----
 drivers/staging/fsl-dpaa2/evb/dpdmux.h     |   80 +++++++++++++++++-----------
 drivers/staging/fsl-dpaa2/evb/evb.c        |   28 +++++++---
 4 files changed, 118 insertions(+), 59 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux-cmd.h b/drivers/staging/fsl-dpaa2/evb/dpdmux-cmd.h
index 2f1c1fa..e4bc567 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux-cmd.h
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux-cmd.h
@@ -33,10 +33,10 @@
 #define _FSL_DPDMUX_CMD_H
 
 /* DPDMUX Version */
-#define DPDMUX_VER_MAJOR				5
+#define DPDMUX_VER_MAJOR				6
 #define DPDMUX_VER_MINOR				0
 
-#define DPDMUX_CMD_BASE_VER				0
+#define DPDMUX_CMD_BASE_VER				1
 #define DPDMUX_CMD_ID_OFF				4
 #define DPDMUX_CMD_ID(id) (((id) << DPDMUX_CMD_ID_OFF) | DPDMUX_CMD_BASE_VER)
 
@@ -45,6 +45,7 @@
 #define DPDMUX_CMDID_OPEN                    DPDMUX_CMD_ID(0x806)
 #define DPDMUX_CMDID_CREATE                  DPDMUX_CMD_ID(0x906)
 #define DPDMUX_CMDID_DESTROY                 DPDMUX_CMD_ID(0x900)
+#define DPDMUX_CMDID_GET_API_VERSION         DPDMUX_CMD_ID(0xa06)
 
 #define DPDMUX_CMDID_ENABLE                  DPDMUX_CMD_ID(0x002)
 #define DPDMUX_CMDID_DISABLE                 DPDMUX_CMD_ID(0x003)
@@ -61,7 +62,7 @@
 #define DPDMUX_CMDID_GET_IRQ_STATUS          DPDMUX_CMD_ID(0x016)
 #define DPDMUX_CMDID_CLEAR_IRQ_STATUS        DPDMUX_CMD_ID(0x017)
 
-#define DPDMUX_CMDID_UL_SET_MAX_FRAME_LENGTH DPDMUX_CMD_ID(0x0a1)
+#define DPDMUX_CMDID_SET_MAX_FRAME_LENGTH    DPDMUX_CMD_ID(0x0a1)
 
 #define DPDMUX_CMDID_UL_RESET_COUNTERS       DPDMUX_CMD_ID(0x0a3)
 
@@ -172,12 +173,10 @@ do { \
 	MC_RSP_OP(cmd, 0, 32, 16, uint16_t, attr->mem_size);\
 	MC_RSP_OP(cmd, 2, 0,  32, int,	    attr->id);\
 	MC_RSP_OP(cmd, 3, 0,  64, uint64_t, attr->options);\
-	MC_RSP_OP(cmd, 4, 0,  16, uint16_t, attr->version.major);\
-	MC_RSP_OP(cmd, 4, 16, 16, uint16_t, attr->version.minor);\
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPDMUX_CMD_UL_SET_MAX_FRAME_LENGTH(cmd, max_frame_length) \
+#define DPDMUX_CMD_SET_MAX_FRAME_LENGTH(cmd, max_frame_length) \
 	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, max_frame_length)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -257,4 +256,11 @@ do { \
 	MC_RSP_OP(cmd, 2, 0,  64, uint64_t, state->options);\
 } while (0)
 
+/*                cmd, param, offset, width, type,      arg_name */
+#define DPDMUX_RSP_GET_API_VERSION(cmd, major, minor) \
+do { \
+	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, major);\
+	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, minor);\
+} while (0)
+
 #endif /* _FSL_DPDMUX_CMD_H */
diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux.c b/drivers/staging/fsl-dpaa2/evb/dpdmux.c
index 8dcefb8..9fbd7d7 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux.c
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux.c
@@ -74,10 +74,11 @@ int dpdmux_close(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpdmux_create(struct fsl_mc_io *mc_io,
-		  u32 cmd_flags,
-		  const struct dpdmux_cfg *cfg,
-		  u16 *token)
+int dpdmux_create(struct fsl_mc_io	*mc_io,
+		  u16	dprc_token,
+		u32	cmd_flags,
+		const struct dpdmux_cfg	*cfg,
+		u32 *obj_id)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -85,7 +86,7 @@ int dpdmux_create(struct fsl_mc_io *mc_io,
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPDMUX_CMDID_CREATE,
 					  cmd_flags,
-					  0);
+					  dprc_token);
 	DPDMUX_CMD_CREATE(cmd, cfg);
 
 	/* send command to mc*/
@@ -94,21 +95,24 @@ int dpdmux_create(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	*token = MC_CMD_HDR_READ_TOKEN(cmd.header);
+	*obj_id = get_mc_cmd_create_object_id(&cmd);
 
 	return 0;
 }
 
 int dpdmux_destroy(struct fsl_mc_io *mc_io,
-		   u32 cmd_flags,
-		   u16 token)
+		   u16 dprc_token,
+		u32 cmd_flags,
+		u32 object_id)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPDMUX_CMDID_DESTROY,
 					  cmd_flags,
-					  token);
+					  dprc_token);
+	/* set object id to destroy */
+	cmd.params[0] = mc_enc(0, sizeof(object_id), object_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -383,18 +387,18 @@ int dpdmux_get_attributes(struct fsl_mc_io *mc_io,
 	return 0;
 }
 
-int dpdmux_ul_set_max_frame_length(struct fsl_mc_io *mc_io,
-				   u32 cmd_flags,
+int dpdmux_set_max_frame_length(struct fsl_mc_io *mc_io,
+				u32 cmd_flags,
 				   u16 token,
 				   u16 max_frame_length)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPDMUX_CMDID_UL_SET_MAX_FRAME_LENGTH,
+	cmd.header = mc_encode_cmd_header(DPDMUX_CMDID_SET_MAX_FRAME_LENGTH,
 					  cmd_flags,
 					  token);
-	DPDMUX_CMD_UL_SET_MAX_FRAME_LENGTH(cmd, max_frame_length);
+	DPDMUX_CMD_SET_MAX_FRAME_LENGTH(cmd, max_frame_length);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -565,3 +569,24 @@ int dpdmux_if_get_link_state(struct fsl_mc_io *mc_io,
 
 	return 0;
 }
+
+int dpdmux_get_api_version(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 *major_ver,
+			   u16 *minor_ver)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	cmd.header = mc_encode_cmd_header(DPDMUX_CMDID_GET_API_VERSION,
+					cmd_flags,
+					0);
+
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	DPDMUX_RSP_GET_API_VERSION(cmd, *major_ver, *minor_ver);
+
+	return 0;
+}
diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux.h b/drivers/staging/fsl-dpaa2/evb/dpdmux.h
index 2ca1c2c..ef1b587 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux.h
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux.h
@@ -154,9 +154,10 @@ struct dpdmux_cfg {
 /**
  * dpdmux_create() - Create the DPDMUX object
  * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token:	Parent container token; '0' for default container
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @cfg:	Configuration structure
- * @token:	Returned token; use in subsequent API calls
+ * @obj_id: returned object id
  *
  * Create the DPDMUX object, allocate required resources and
  * perform required initialization.
@@ -164,31 +165,39 @@ struct dpdmux_cfg {
  * The object can be created either by declaring it in the
  * DPL file, or by calling this function.
  *
- * This function returns a unique authentication token,
- * associated with the specific object ID and the specific MC
- * portal; this token must be used in all subsequent calls to
- * this specific object. For objects that are created using the
- * DPL file, call dpdmux_open() function to get an authentication
- * token first.
+ * The function accepts an authentication token of a parent
+ * container that this object should be assigned to. The token
+ * can be '0' so the object will be assigned to the default container.
+ * The newly created object can be opened with the returned
+ * object id and using the container's associated tokens and MC portals.
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_create(struct fsl_mc_io		*mc_io,
+		  u16			dprc_token,
 		  u32			cmd_flags,
 		  const struct dpdmux_cfg	*cfg,
-		  u16			*token);
+		  u32			*obj_id);
 
 /**
  * dpdmux_destroy() - Destroy the DPDMUX object and release all its resources.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token: Parent container token; '0' for default container
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
+ * @object_id:	The object id; it must be a valid id within the container that
+ * created this object;
+ *
+ * The function accepts the authentication token of the parent container that
+ * created the object (not the one that currently owns the object). The object
+ * is searched within parent using the provided 'object_id'.
+ * All tokens to the object must be closed before calling destroy.
  *
  * Return:	'0' on Success; error code otherwise.
  */
 int dpdmux_destroy(struct fsl_mc_io	*mc_io,
+		   u16		dprc_token,
 		   u32		cmd_flags,
-		   u16		token);
+		   u32		object_id);
 
 /**
  * dpdmux_enable() - Enable DPDMUX functionality
@@ -253,7 +262,7 @@ struct dpdmux_irq_cfg {
 };
 
 /**
- * dpdmux_set_irq() - Set IRQ information for the DPDMUX to trigger an interrupt.
+ * dpdmux_set_irq() - Set IRQ information for the DPDMUX to trigger an interrupt
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPDMUX object
@@ -404,7 +413,6 @@ int dpdmux_clear_irq_status(struct fsl_mc_io	*mc_io,
 /**
  * struct dpdmux_attr - Structure representing DPDMUX attributes
  * @id: DPDMUX object ID
- * @version: DPDMUX version
  * @options: Configuration options (bitmap)
  * @method: DPDMUX address table method
  * @manip: DPDMUX manipulation type
@@ -413,15 +421,6 @@ int dpdmux_clear_irq_status(struct fsl_mc_io	*mc_io,
  */
 struct dpdmux_attr {
 	int			id;
-	/**
-	 * struct version - DPDMUX version
-	 * @major: DPDMUX major version
-	 * @minor: DPDMUX minor version
-	 */
-	struct {
-		u16	major;
-		u16	minor;
-	} version;
 	u64		options;
 	enum dpdmux_method	method;
 	enum dpdmux_manip	manip;
@@ -444,18 +443,23 @@ int dpdmux_get_attributes(struct fsl_mc_io	*mc_io,
 			  struct dpdmux_attr	*attr);
 
 /**
- * dpdmux_ul_set_max_frame_length() - Set the maximum frame length in DPDMUX
+ * dpdmux_set_max_frame_length() - Set the maximum frame length in DPDMUX
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:		Token of DPDMUX object
  * @max_frame_length:	The required maximum frame length
  *
+ * Update the maximum frame length on all DMUX interfaces.
+ * In case of VEPA, the maximum frame length on all dmux interfaces
+ * will be updated with the minimum value of the mfls of the connected
+ * dpnis and the actual value of dmux mfl.
+ *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpdmux_ul_set_max_frame_length(struct fsl_mc_io	*mc_io,
-				   u32		cmd_flags,
-				   u16		token,
-				   u16		max_frame_length);
+int dpdmux_set_max_frame_length(struct fsl_mc_io	*mc_io,
+				u32		cmd_flags,
+				u16		token,
+				u16		max_frame_length);
 
 /**
  * enum dpdmux_counter_type - Counter types
@@ -539,10 +543,10 @@ struct dpdmux_accepted_frames {
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpdmux_if_set_accepted_frames(struct fsl_mc_io		      *mc_io,
-				  u32			      cmd_flags,
-				  u16			      token,
-				  u16			      if_id,
+int dpdmux_if_set_accepted_frames(struct fsl_mc_io		*mc_io,
+				  u32			cmd_flags,
+				  u16			token,
+				  u16			if_id,
 				  const struct dpdmux_accepted_frames *cfg);
 
 /**
@@ -579,7 +583,7 @@ int dpdmux_if_get_attributes(struct fsl_mc_io		*mc_io,
  * @vlan_id: VLAN ID
  */
 struct dpdmux_l2_rule {
-	u8	mac_addr[6];
+	u8		mac_addr[6];
 	u16	vlan_id;
 };
 
@@ -721,4 +725,18 @@ int dpdmux_if_get_link_state(struct fsl_mc_io		*mc_io,
 			     u16			if_id,
 			     struct dpdmux_link_state	*state);
 
+/**
+ * dpaiop_get_api_version() - Get Data Path Demux API version
+ * @mc_io:  Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @major_ver:	Major version of data path demux API
+ * @minor_ver:	Minor version of data path demux API
+ *
+ * Return:  '0' on Success; Error code otherwise.
+ */
+int dpdmux_get_api_version(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 *major_ver,
+			   u16 *minor_ver);
+
 #endif /* __FSL_DPDMUX_H */
diff --git a/drivers/staging/fsl-dpaa2/evb/evb.c b/drivers/staging/fsl-dpaa2/evb/evb.c
index db3325b..2f635d9 100644
--- a/drivers/staging/fsl-dpaa2/evb/evb.c
+++ b/drivers/staging/fsl-dpaa2/evb/evb.c
@@ -44,7 +44,7 @@
 #include "dpdmux-cmd.h"
 
 /* Minimal supported DPDMUX version */
-#define DPDMUX_MIN_VER_MAJOR			5
+#define DPDMUX_MIN_VER_MAJOR			6
 #define DPDMUX_MIN_VER_MINOR			0
 
 /* IRQ index */
@@ -461,10 +461,10 @@ static int evb_change_mtu(struct net_device *netdev,
 		return -EINVAL;
 	}
 
-	err = dpdmux_ul_set_max_frame_length(evb_priv->mc_io,
-					    0,
-					    evb_priv->mux_handle,
-					    (uint16_t)mtu);
+	err = dpdmux_set_max_frame_length(evb_priv->mc_io,
+					  0,
+					  evb_priv->mux_handle,
+					  (uint16_t)mtu);
 
 	if (unlikely(err)) {
 		netdev_err(netdev, "dpdmux_ul_set_max_frame_length err %d\n",
@@ -985,6 +985,8 @@ static int evb_init(struct fsl_mc_device *evb_dev)
 	struct device		*dev = &evb_dev->dev;
 	struct net_device	*netdev = dev_get_drvdata(dev);
 	struct evb_priv		*priv = netdev_priv(netdev);
+	u16			version_major;
+	u16			version_minor;
 	int			err = 0;
 
 	priv->dev_id = evb_dev->obj_desc.id;
@@ -1007,12 +1009,20 @@ static int evb_init(struct fsl_mc_device *evb_dev)
 		goto err_close;
 	}
 
+	err = dpdmux_get_api_version(priv->mc_io, 0,
+				     &version_major,
+				     &version_minor);
+	if (unlikely(err)) {
+		dev_err(dev, "dpdmux_get_api_version err %d\n", err);
+		goto err_close;
+	}
+
 	/* Minimum supported DPDMUX version check */
-	if (priv->attr.version.major < DPDMUX_MIN_VER_MAJOR ||
-	    (priv->attr.version.major == DPDMUX_MIN_VER_MAJOR &&
-	     priv->attr.version.minor < DPDMUX_MIN_VER_MINOR)) {
+	if (version_major < DPDMUX_MIN_VER_MAJOR ||
+	    (version_major == DPDMUX_MIN_VER_MAJOR &&
+	     version_minor < DPDMUX_MIN_VER_MINOR)) {
 		dev_err(dev, "DPDMUX version %d.%d not supported. Use %d.%d or greater.\n",
-			priv->attr.version.major, priv->attr.version.minor,
+			version_major, version_minor,
 			DPDMUX_MIN_VER_MAJOR, DPDMUX_MIN_VER_MAJOR);
 		err = -ENOTSUPP;
 		goto err_close;
-- 
1.7.5.4

