From 73cf4ed78c6ec45b93d89d03a2013519a5389fbc Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@nxp.com>
Date: Tue, 1 Nov 2016 11:30:12 +0200
Subject: [PATCH 402/508] dpaa2-ethsw: misc whitespace cleanup

  Make whitespace consistent:
    - delete extraneous tabs
    - align start of function argument properly
    - for structs and functions, separate type and variable name
       by a single space

Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethsw/dpsw.c |   68 ++--
 drivers/staging/fsl-dpaa2/ethsw/dpsw.h |  937 ++++++++++++++++----------------
 2 files changed, 498 insertions(+), 507 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
index f182f6f..7971bfd 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
@@ -129,7 +129,7 @@ int dpsw_open(struct fsl_mc_io *mc_io,
  */
 int dpsw_close(struct fsl_mc_io *mc_io,
 	       u32 cmd_flags,
-	u16 token)
+	       u16 token)
 {
 	struct mc_command cmd = { 0 };
 
@@ -164,11 +164,11 @@ int dpsw_close(struct fsl_mc_io *mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpsw_create(struct fsl_mc_io	*mc_io,
-		u16	dprc_token,
-		u32	cmd_flags,
-		const struct dpsw_cfg	*cfg,
-		u32	*obj_id)
+int dpsw_create(struct fsl_mc_io *mc_io,
+		u16 dprc_token,
+		u32 cmd_flags,
+		const struct dpsw_cfg *cfg,
+		u32 *obj_id)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -205,10 +205,10 @@ int dpsw_create(struct fsl_mc_io	*mc_io,
  *
  * Return:	'0' on Success; error code otherwise.
  */
-int dpsw_destroy(struct fsl_mc_io	*mc_io,
-		 u16	dprc_token,
-		u32	cmd_flags,
-		u32	object_id)
+int dpsw_destroy(struct fsl_mc_io *mc_io,
+		 u16 dprc_token,
+		 u32 cmd_flags,
+		 u32 object_id)
 {
 	struct mc_command cmd = { 0 };
 
@@ -1223,12 +1223,12 @@ void dpsw_prepare_early_drop(const struct dpsw_early_drop_cfg *cfg,
  *
  * Return:	'0' on Success; error code otherwise.
  */
-int dpsw_if_set_early_drop(struct fsl_mc_io	*mc_io,
-			   u32		cmd_flags,
-			   u16		token,
-			   u16		if_id,
-			   u8		tc_id,
-			   u64		early_drop_iova)
+int dpsw_if_set_early_drop(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
+			   u16 if_id,
+			   u8 tc_id,
+			   u64 early_drop_iova)
 {
 	struct mc_command cmd = { 0 };
 
@@ -2401,11 +2401,11 @@ int dpsw_acl_remove_if(struct fsl_mc_io *mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpsw_acl_get_attributes(struct fsl_mc_io		*mc_io,
-			    u32			cmd_flags,
-			    u16			token,
-			    u16			acl_id,
-			    struct dpsw_acl_attr	*attr)
+int dpsw_acl_get_attributes(struct fsl_mc_io *mc_io,
+			    u32 cmd_flags,
+			    u16 token,
+			    u16 acl_id,
+			    struct dpsw_acl_attr *attr)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -2436,10 +2436,10 @@ int dpsw_acl_get_attributes(struct fsl_mc_io		*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpsw_ctrl_if_get_attributes(struct fsl_mc_io		*mc_io,
-				u32			cmd_flags,
-				u16			token,
-				struct dpsw_ctrl_if_attr	*attr)
+int dpsw_ctrl_if_get_attributes(struct fsl_mc_io *mc_io,
+				u32 cmd_flags,
+				u16 token,
+				struct dpsw_ctrl_if_attr *attr)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -2469,9 +2469,9 @@ int dpsw_ctrl_if_get_attributes(struct fsl_mc_io		*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpsw_ctrl_if_set_pools(struct fsl_mc_io			*mc_io,
-			   u32				cmd_flags,
-			   u16				token,
+int dpsw_ctrl_if_set_pools(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
 			   const struct dpsw_ctrl_if_pools_cfg *pools)
 {
 	struct mc_command cmd = { 0 };
@@ -2494,9 +2494,9 @@ int dpsw_ctrl_if_set_pools(struct fsl_mc_io			*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpsw_ctrl_if_enable(struct fsl_mc_io	*mc_io,
-			u32		cmd_flags,
-			u16		token)
+int dpsw_ctrl_if_enable(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token)
 {
 	struct mc_command cmd = { 0 };
 
@@ -2517,9 +2517,9 @@ int dpsw_ctrl_if_enable(struct fsl_mc_io	*mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpsw_ctrl_if_disable(struct fsl_mc_io	*mc_io,
-			 u32		cmd_flags,
-			 u16		token)
+int dpsw_ctrl_if_disable(struct fsl_mc_io *mc_io,
+			 u32 cmd_flags,
+			 u16 token)
 {
 	struct mc_command cmd = { 0 };
 
diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw.h b/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
index a00175e..44365b5 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
@@ -53,14 +53,14 @@ struct fsl_mc_io;
  */
 #define DPSW_MAX_IF		64
 
-int dpsw_open(struct fsl_mc_io	*mc_io,
-	      u32		cmd_flags,
-	      int		dpsw_id,
-	      u16		*token);
+int dpsw_open(struct fsl_mc_io *mc_io,
+	      u32 cmd_flags,
+	      int dpsw_id,
+	      u16 *token);
 
 int dpsw_close(struct fsl_mc_io *mc_io,
-	       u32	cmd_flags,
-	       u16	token);
+	       u32 cmd_flags,
+	       u16 token);
 
 /**
  * DPSW options
@@ -108,7 +108,7 @@ enum dpsw_component_type {
  *		 use this structure to change default settings
  */
 struct dpsw_cfg {
-	u16		num_ifs;
+	u16 num_ifs;
 	/**
 	 * struct adv - Advanced parameters
 	 * @options: Enable/Disable DPSW features (bitmap)
@@ -124,44 +124,44 @@ struct dpsw_cfg {
 	 * @component_type: Indicates the component type of this bridge
 	 */
 	struct {
-		u64	options;
-		u16	max_vlans;
-		u8	max_meters_per_if;
-		u8	max_fdbs;
-		u16	max_fdb_entries;
-		u16	fdb_aging_time;
-		u16	max_fdb_mc_groups;
+		u64 options;
+		u16 max_vlans;
+		u8 max_meters_per_if;
+		u8 max_fdbs;
+		u16 max_fdb_entries;
+		u16 fdb_aging_time;
+		u16 max_fdb_mc_groups;
 		enum dpsw_component_type component_type;
 	} adv;
 };
 
-int dpsw_create(struct fsl_mc_io	*mc_io,
+int dpsw_create(struct fsl_mc_io *mc_io,
 		u16 dprc_token,
-		u32		cmd_flags,
-		const struct dpsw_cfg	*cfg,
-		u32		*obj_id);
+		u32 cmd_flags,
+		const struct dpsw_cfg *cfg,
+		u32 *obj_id);
 
-int dpsw_destroy(struct fsl_mc_io	*mc_io,
-		 u16		dprc_token,
-		 u32		cmd_flags,
-		 u32		object_id);
+int dpsw_destroy(struct fsl_mc_io *mc_io,
+		u16 dprc_token,
+		u32 cmd_flags,
+		u32 object_id);
 
-int dpsw_enable(struct fsl_mc_io	*mc_io,
-		u32		cmd_flags,
-		u16		token);
+int dpsw_enable(struct fsl_mc_io *mc_io,
+		u32 cmd_flags,
+		u16 token);
 
-int dpsw_disable(struct fsl_mc_io	*mc_io,
-		 u32		cmd_flags,
-		 u16		token);
+int dpsw_disable(struct fsl_mc_io *mc_io,
+		 u32 cmd_flags,
+		 u16 token);
 
-int dpsw_is_enabled(struct fsl_mc_io	*mc_io,
-		    u32		cmd_flags,
-		    u16		token,
-		    int		*en);
+int dpsw_is_enabled(struct fsl_mc_io *mc_io,
+		    u32 cmd_flags,
+		    u16 token,
+		    int *en);
 
 int dpsw_reset(struct fsl_mc_io *mc_io,
-	       u32	cmd_flags,
-	       u16	token);
+	       u32 cmd_flags,
+	       u16 token);
 
 /**
  * DPSW IRQ Index and Events
@@ -182,59 +182,60 @@ int dpsw_reset(struct fsl_mc_io *mc_io,
  * @irq_num: A user defined number associated with this IRQ
  */
 struct dpsw_irq_cfg {
-	     u64		addr;
-	     u32		val;
-	     int		irq_num;
+	     u64 addr;
+	     u32 val;
+	     int irq_num;
 };
 
-int dpsw_set_irq(struct fsl_mc_io	*mc_io,
-		 u32		cmd_flags,
-		 u16		token,
-		 u8		irq_index,
-		 struct dpsw_irq_cfg	*irq_cfg);
-
-int dpsw_get_irq(struct fsl_mc_io	*mc_io,
-		 u32		cmd_flags,
-		 u16		token,
-		 u8		irq_index,
-		 int			*type,
-		 struct dpsw_irq_cfg	*irq_cfg);
-
-int dpsw_set_irq_enable(struct fsl_mc_io	*mc_io,
-			u32		cmd_flags,
-			u16		token,
-			u8		irq_index,
-			u8		en);
-
-int dpsw_get_irq_enable(struct fsl_mc_io	*mc_io,
-			u32		cmd_flags,
-			u16		token,
-			u8		irq_index,
-			u8		*en);
-
-int dpsw_set_irq_mask(struct fsl_mc_io	*mc_io,
-		      u32		cmd_flags,
-		      u16		token,
-		      u8		irq_index,
-		      u32		mask);
-
-int dpsw_get_irq_mask(struct fsl_mc_io	*mc_io,
-		      u32		cmd_flags,
-		      u16		token,
-		      u8		irq_index,
-		      u32		*mask);
-
-int dpsw_get_irq_status(struct fsl_mc_io	*mc_io,
-			u32		cmd_flags,
-			u16		token,
-			u8		irq_index,
-			u32		*status);
-
-int dpsw_clear_irq_status(struct fsl_mc_io	*mc_io,
-			  u32		cmd_flags,
-			  u16		token,
-			  u8		irq_index,
-			  u32		status);
+int dpsw_set_irq(struct fsl_mc_io *mc_io,
+		 u32 cmd_flags,
+		 u16 token,
+		 u8 irq_index,
+		 struct dpsw_irq_cfg *irq_cfg);
+
+int dpsw_get_irq(struct fsl_mc_io *mc_io,
+		 u32 cmd_flags,
+		 u16 token,
+		 u8 irq_index,
+		 int *type,
+		 struct dpsw_irq_cfg *irq_cfg);
+
+int dpsw_set_irq_enable(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token,
+			u8 irq_index,
+			u8 en);
+
+int dpsw_get_irq_enable(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token,
+			u8 irq_index,
+			u8 *en);
+
+int dpsw_set_irq_mask(struct fsl_mc_io *mc_io,
+		      u32 cmd_flags,
+		      u16 token,
+		      u8 irq_index,
+		      u32 mask);
+
+int dpsw_get_irq_mask(struct fsl_mc_io *mc_io,
+		      u32 cmd_flags,
+		      u16 token,
+		      u8 irq_index,
+		      u32 *mask);
+
+int dpsw_get_irq_status(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token,
+			u8 irq_index,
+			u32 *status);
+
+int dpsw_clear_irq_status(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  u8 irq_index,
+			  u32 status);
+
 /**
  * struct dpsw_attr - Structure representing DPSW attributes
  * @id: DPSW object ID
@@ -255,30 +256,30 @@ int dpsw_clear_irq_status(struct fsl_mc_io	*mc_io,
  * @component_type: Component type of this bridge
  */
 struct dpsw_attr {
-	int		id;
-	u64	options;
-	u16	max_vlans;
-	u8	max_meters_per_if;
-	u8	max_fdbs;
-	u16	max_fdb_entries;
-	u16	fdb_aging_time;
-	u16	max_fdb_mc_groups;
-	u16	num_ifs;
-	u16	mem_size;
-	u16	num_vlans;
-	u8		num_fdbs;
+	int id;
+	u64 options;
+	u16 max_vlans;
+	u8 max_meters_per_if;
+	u8 max_fdbs;
+	u16 max_fdb_entries;
+	u16 fdb_aging_time;
+	u16 max_fdb_mc_groups;
+	u16 num_ifs;
+	u16 mem_size;
+	u16 num_vlans;
+	u8 num_fdbs;
 	enum dpsw_component_type component_type;
 };
 
-int dpsw_get_attributes(struct fsl_mc_io	*mc_io,
-			u32		cmd_flags,
-			u16		token,
-			struct dpsw_attr	*attr);
+int dpsw_get_attributes(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token,
+			struct dpsw_attr *attr);
 
-int dpsw_set_reflection_if(struct fsl_mc_io	*mc_io,
-			   u32		cmd_flags,
-			   u16		token,
-			   u16		if_id);
+int dpsw_set_reflection_if(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
+			   u16 if_id);
 
 /**
  * enum dpsw_action - Action selection for special/control frames
@@ -317,11 +318,11 @@ struct dpsw_link_cfg {
 	u64 options;
 };
 
-int dpsw_if_set_link_cfg(struct fsl_mc_io	*mc_io,
-			 u32		cmd_flags,
-			 u16		token,
-			 u16		if_id,
-			 struct dpsw_link_cfg	*cfg);
+int dpsw_if_set_link_cfg(struct fsl_mc_io *mc_io,
+			 u32 cmd_flags,
+			 u16 token,
+			 u16 if_id,
+			 struct dpsw_link_cfg *cfg);
 /**
  * struct dpsw_link_state - Structure representing DPSW link state
  * @rate: Rate
@@ -331,32 +332,32 @@ int dpsw_if_set_link_cfg(struct fsl_mc_io	*mc_io,
 struct dpsw_link_state {
 	u32 rate;
 	u64 options;
-	int      up;
+	int up;
 };
 
-int dpsw_if_get_link_state(struct fsl_mc_io		*mc_io,
-			   u32			cmd_flags,
-			   u16			token,
-			   u16			if_id,
-			   struct dpsw_link_state	*state);
+int dpsw_if_get_link_state(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
+			   u16 if_id,
+			   struct dpsw_link_state *state);
 
-int dpsw_if_set_flooding(struct fsl_mc_io	*mc_io,
-			 u32		cmd_flags,
-			 u16		token,
-			 u16		if_id,
-			 int			en);
+int dpsw_if_set_flooding(struct fsl_mc_io *mc_io,
+			 u32 cmd_flags,
+			 u16 token,
+			 u16 if_id,
+			 int en);
 
-int dpsw_if_set_broadcast(struct fsl_mc_io	*mc_io,
-			  u32		cmd_flags,
-			  u16		token,
-			  u16		if_id,
-			  int			en);
+int dpsw_if_set_broadcast(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  u16 if_id,
+			  int en);
 
-int dpsw_if_set_multicast(struct fsl_mc_io	*mc_io,
-			  u32		cmd_flags,
-			  u16		token,
-			  u16		if_id,
-			  int			en);
+int dpsw_if_set_multicast(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  u16 if_id,
+			  int en);
 
 /**
  * struct dpsw_tci_cfg - Tag Contorl Information (TCI) configuration
@@ -372,21 +373,21 @@ int dpsw_if_set_multicast(struct fsl_mc_io	*mc_io,
  *			allowing up to 4,094 VLANs
  */
 struct dpsw_tci_cfg {
-	u8	pcp;
-	u8	dei;
-	u16	vlan_id;
+	u8 pcp;
+	u8 dei;
+	u16 vlan_id;
 };
 
-int dpsw_if_set_tci(struct fsl_mc_io		*mc_io,
-		    u32			cmd_flags,
-		    u16			token,
-		    u16			if_id,
-		    const struct dpsw_tci_cfg	*cfg);
+int dpsw_if_set_tci(struct fsl_mc_io *mc_io,
+		    u32 cmd_flags,
+		    u16 token,
+		    u16 if_id,
+		    const struct dpsw_tci_cfg *cfg);
 
-int dpsw_if_get_tci(struct fsl_mc_io	*mc_io,
-		    u32		cmd_flags,
-		    u16		token,
-		    u16		if_id,
+int dpsw_if_get_tci(struct fsl_mc_io *mc_io,
+		    u32 cmd_flags,
+		    u16 token,
+		    u16 if_id,
 		    struct dpsw_tci_cfg *cfg);
 
 /**
@@ -410,15 +411,15 @@ enum dpsw_stp_state {
  * @state: STP state
  */
 struct dpsw_stp_cfg {
-	u16		vlan_id;
-	enum dpsw_stp_state	state;
+	u16 vlan_id;
+	enum dpsw_stp_state state;
 };
 
-int dpsw_if_set_stp(struct fsl_mc_io		*mc_io,
-		    u32			cmd_flags,
-		    u16			token,
-		    u16			if_id,
-		    const struct dpsw_stp_cfg	*cfg);
+int dpsw_if_set_stp(struct fsl_mc_io *mc_io,
+		    u32 cmd_flags,
+		    u16 token,
+		    u16 if_id,
+		    const struct dpsw_stp_cfg *cfg);
 
 /**
  * enum dpsw_accepted_frames - Types of frames to accept
@@ -440,21 +441,21 @@ enum dpsw_accepted_frames {
  *			redirected to control interface depending on this mode
  */
 struct dpsw_accepted_frames_cfg {
-	enum dpsw_accepted_frames	type;
-	enum dpsw_action		unaccept_act;
+	enum dpsw_accepted_frames type;
+	enum dpsw_action unaccept_act;
 };
 
-int dpsw_if_set_accepted_frames(struct fsl_mc_io		*mc_io,
-				u32			cmd_flags,
-				u16			token,
-				u16			if_id,
+int dpsw_if_set_accepted_frames(struct fsl_mc_io *mc_io,
+				u32 cmd_flags,
+				u16 token,
+				u16 if_id,
 				const struct dpsw_accepted_frames_cfg *cfg);
 
-int dpsw_if_set_accept_all_vlan(struct fsl_mc_io	*mc_io,
-				u32		cmd_flags,
-				u16		token,
-				u16		if_id,
-				int			accept_all);
+int dpsw_if_set_accept_all_vlan(struct fsl_mc_io *mc_io,
+				u32 cmd_flags,
+				u16 token,
+				u16 if_id,
+				int accept_all);
 
 /**
  * enum dpsw_counter  - Counters types
@@ -486,19 +487,19 @@ enum dpsw_counter {
 	DPSW_CNT_EGR_STP_FRAME_DISCARD = 0xb
 };
 
-int dpsw_if_get_counter(struct fsl_mc_io	*mc_io,
-			u32		cmd_flags,
-			u16		token,
-			u16		if_id,
-			enum dpsw_counter	type,
-			u64		*counter);
+int dpsw_if_get_counter(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token,
+			u16 if_id,
+			enum dpsw_counter type,
+			u64 *counter);
 
-int dpsw_if_set_counter(struct fsl_mc_io	*mc_io,
-			u32		cmd_flags,
-			u16		token,
-			u16		if_id,
-			enum dpsw_counter	type,
-			u64		counter);
+int dpsw_if_set_counter(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token,
+			u16 if_id,
+			enum dpsw_counter type,
+			u64 counter);
 
 /**
  * Maximum number of TC
@@ -534,8 +535,8 @@ enum dpsw_schedule_mode {
  * @delta_bandwidth: weighted Bandwidth in range from 100 to 10000
  */
 struct dpsw_tx_schedule_cfg {
-	enum dpsw_schedule_mode	mode;
-	u16		delta_bandwidth;
+	enum dpsw_schedule_mode mode;
+	u16 delta_bandwidth;
 };
 
 /**
@@ -547,16 +548,16 @@ struct dpsw_tx_schedule_cfg {
  * @tc_sched: Traffic classes configuration
  */
 struct dpsw_tx_selection_cfg {
-	enum dpsw_priority_selector	priority_selector;
-	u8			tc_id[DPSW_MAX_PRIORITIES];
-	struct dpsw_tx_schedule_cfg	tc_sched[DPSW_MAX_TC];
+	enum dpsw_priority_selector priority_selector;
+	u8 tc_id[DPSW_MAX_PRIORITIES];
+	struct dpsw_tx_schedule_cfg tc_sched[DPSW_MAX_TC];
 };
 
-int dpsw_if_set_tx_selection(struct fsl_mc_io			*mc_io,
-			     u32				cmd_flags,
-			     u16				token,
-			     u16				if_id,
-			     const struct dpsw_tx_selection_cfg	*cfg);
+int dpsw_if_set_tx_selection(struct fsl_mc_io *mc_io,
+			     u32 cmd_flags,
+			     u16 token,
+			     u16 if_id,
+			     const struct dpsw_tx_selection_cfg *cfg);
 
 /**
  * enum dpsw_reflection_filter - Filter type for frames to reflect
@@ -577,21 +578,21 @@ enum dpsw_reflection_filter {
  *		DPSW_INGRESS_VLAN
  */
 struct dpsw_reflection_cfg {
-	enum dpsw_reflection_filter	filter;
-	u16			vlan_id;
+	enum dpsw_reflection_filter filter;
+	u16 vlan_id;
 };
 
-int dpsw_if_add_reflection(struct fsl_mc_io			*mc_io,
-			   u32				cmd_flags,
-			   u16				token,
-			   u16				if_id,
-			   const struct dpsw_reflection_cfg	*cfg);
+int dpsw_if_add_reflection(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
+			   u16 if_id,
+			   const struct dpsw_reflection_cfg *cfg);
 
-int dpsw_if_remove_reflection(struct fsl_mc_io			*mc_io,
-			      u32				cmd_flags,
-			      u16				token,
-			      u16				if_id,
-			      const struct dpsw_reflection_cfg	*cfg);
+int dpsw_if_remove_reflection(struct fsl_mc_io *mc_io,
+			      u32 cmd_flags,
+			      u16 token,
+			      u16 if_id,
+			      const struct dpsw_reflection_cfg *cfg);
 
 /**
  * enum dpsw_metering_mode - Metering modes
@@ -630,24 +631,24 @@ enum dpsw_metering_unit {
 struct dpsw_metering_cfg {
 	enum dpsw_metering_mode mode;
 	enum dpsw_metering_unit units;
-	u32		cir;
-	u32		eir;
-	u32		cbs;
-	u32		ebs;
+	u32 cir;
+	u32 eir;
+	u32 cbs;
+	u32 ebs;
 };
 
-int dpsw_if_set_flooding_metering(struct fsl_mc_io		*mc_io,
-				  u32			cmd_flags,
-				  u16			token,
-				  u16			if_id,
+int dpsw_if_set_flooding_metering(struct fsl_mc_io *mc_io,
+				  u32 cmd_flags,
+				  u16 token,
+				  u16 if_id,
 				  const struct dpsw_metering_cfg *cfg);
 
-int dpsw_if_set_metering(struct fsl_mc_io			*mc_io,
-			 u32				cmd_flags,
-			 u16				token,
-			 u16				if_id,
-			 u8				tc_id,
-			 const struct dpsw_metering_cfg	*cfg);
+int dpsw_if_set_metering(struct fsl_mc_io *mc_io,
+			 u32 cmd_flags,
+			 u16 token,
+			 u16 if_id,
+			 u8 tc_id,
+			 const struct dpsw_metering_cfg *cfg);
 
 /**
  * enum dpsw_early_drop_unit - DPSW early drop unit
@@ -682,9 +683,9 @@ enum dpsw_early_drop_mode {
  *	associated with the maximum threshold)
  */
 struct dpsw_wred_cfg {
-	u64                min_threshold;
-	u64                max_threshold;
-	u8                 drop_probability;
+	u64 min_threshold;
+	u64 max_threshold;
+	u8 drop_probability;
 };
 
 /**
@@ -696,22 +697,22 @@ struct dpsw_wred_cfg {
  * @tail_drop_threshold: tail drop threshold
  */
 struct dpsw_early_drop_cfg {
-	enum dpsw_early_drop_mode       drop_mode;
-	enum dpsw_early_drop_unit	units;
-	struct dpsw_wred_cfg	        yellow;
-	struct dpsw_wred_cfg		green;
-	u32			tail_drop_threshold;
+	enum dpsw_early_drop_mode drop_mode;
+	enum dpsw_early_drop_unit units;
+	struct dpsw_wred_cfg yellow;
+	struct dpsw_wred_cfg green;
+	u32 tail_drop_threshold;
 };
 
 void dpsw_prepare_early_drop(const struct dpsw_early_drop_cfg *cfg,
-			     u8			*early_drop_buf);
+			     u8 *early_drop_buf);
 
-int dpsw_if_set_early_drop(struct fsl_mc_io	*mc_io,
-			   u32		cmd_flags,
-			   u16		token,
-			   u16		if_id,
-			   u8		tc_id,
-			   u64		early_drop_iova);
+int dpsw_if_set_early_drop(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
+			   u16 if_id,
+			   u8 tc_id,
+			   u64 early_drop_iova);
 
 /**
  * struct dpsw_custom_tpid_cfg - Structure representing tag Protocol identifier
@@ -721,25 +722,25 @@ struct dpsw_custom_tpid_cfg {
 	u16 tpid;
 };
 
-int dpsw_add_custom_tpid(struct fsl_mc_io			*mc_io,
-			 u32				cmd_flags,
-			 u16				token,
-			 const struct dpsw_custom_tpid_cfg	*cfg);
+int dpsw_add_custom_tpid(struct fsl_mc_io *mc_io,
+			 u32 cmd_flags,
+			 u16 token,
+			 const struct dpsw_custom_tpid_cfg *cfg);
 
-int dpsw_remove_custom_tpid(struct fsl_mc_io			*mc_io,
-			    u32				cmd_flags,
-			    u16				token,
-			    const struct dpsw_custom_tpid_cfg	*cfg);
+int dpsw_remove_custom_tpid(struct fsl_mc_io *mc_io,
+			    u32 cmd_flags,
+			    u16 token,
+			    const struct dpsw_custom_tpid_cfg *cfg);
 
-int dpsw_if_enable(struct fsl_mc_io	*mc_io,
-		   u32		cmd_flags,
-		   u16		token,
-		   u16		if_id);
+int dpsw_if_enable(struct fsl_mc_io *mc_io,
+		   u32 cmd_flags,
+		   u16 token,
+		   u16 if_id);
 
-int dpsw_if_disable(struct fsl_mc_io	*mc_io,
-		    u32		cmd_flags,
-		    u16		token,
-		    u16		if_id);
+int dpsw_if_disable(struct fsl_mc_io *mc_io,
+		    u32 cmd_flags,
+		    u16 token,
+		    u16 if_id);
 
 /**
  * struct dpsw_if_attr - Structure representing DPSW interface attributes
@@ -757,32 +758,32 @@ int dpsw_if_disable(struct fsl_mc_io	*mc_io,
  * @qdid: control frames transmit qdid
  */
 struct dpsw_if_attr {
-	u8				num_tcs;
-	u32			rate;
-	u32			options;
-	int				enabled;
-	int				accept_all_vlan;
-	enum dpsw_accepted_frames	admit_untagged;
-	u16			qdid;
+	u8 num_tcs;
+	u32 rate;
+	u32 options;
+	int enabled;
+	int accept_all_vlan;
+	enum dpsw_accepted_frames admit_untagged;
+	u16 qdid;
 };
 
-int dpsw_if_get_attributes(struct fsl_mc_io	*mc_io,
-			   u32		cmd_flags,
-			   u16		token,
-			   u16		if_id,
-			   struct dpsw_if_attr	*attr);
+int dpsw_if_get_attributes(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
+			   u16 if_id,
+			   struct dpsw_if_attr *attr);
 
-int dpsw_if_set_max_frame_length(struct fsl_mc_io	*mc_io,
-				 u32		cmd_flags,
-				 u16		token,
-				 u16		if_id,
-				 u16		frame_length);
+int dpsw_if_set_max_frame_length(struct fsl_mc_io *mc_io,
+				 u32 cmd_flags,
+				 u16 token,
+				 u16 if_id,
+				 u16 frame_length);
 
-int dpsw_if_get_max_frame_length(struct fsl_mc_io	*mc_io,
-				 u32		cmd_flags,
-				 u16		token,
-				 u16		if_id,
-				 u16		*frame_length);
+int dpsw_if_get_max_frame_length(struct fsl_mc_io *mc_io,
+				 u32 cmd_flags,
+				 u16 token,
+				 u16 if_id,
+				 u16 *frame_length);
 
 /**
  * struct dpsw_vlan_cfg - VLAN Configuration
@@ -792,11 +793,11 @@ struct dpsw_vlan_cfg {
 	u16 fdb_id;
 };
 
-int dpsw_vlan_add(struct fsl_mc_io		*mc_io,
-		  u32			cmd_flags,
-		  u16			token,
-		  u16			vlan_id,
-		  const struct dpsw_vlan_cfg	*cfg);
+int dpsw_vlan_add(struct fsl_mc_io *mc_io,
+		  u32 cmd_flags,
+		  u16 token,
+		  u16 vlan_id,
+		  const struct dpsw_vlan_cfg *cfg);
 
 /**
  * struct dpsw_vlan_if_cfg - Set of VLAN Interfaces
@@ -810,46 +811,46 @@ struct dpsw_vlan_if_cfg {
 	u16 if_id[DPSW_MAX_IF];
 };
 
-int dpsw_vlan_add_if(struct fsl_mc_io			*mc_io,
-		     u32				cmd_flags,
-		     u16				token,
-		     u16				vlan_id,
-		     const struct dpsw_vlan_if_cfg	*cfg);
-
-int dpsw_vlan_add_if_untagged(struct fsl_mc_io			*mc_io,
-			      u32				cmd_flags,
-			      u16				token,
-			      u16				vlan_id,
-			      const struct dpsw_vlan_if_cfg	*cfg);
-
-int dpsw_vlan_add_if_flooding(struct fsl_mc_io			*mc_io,
-			      u32				cmd_flags,
-			      u16				token,
-			      u16				vlan_id,
-			      const struct dpsw_vlan_if_cfg	*cfg);
-
-int dpsw_vlan_remove_if(struct fsl_mc_io		*mc_io,
-			u32			cmd_flags,
-			u16			token,
-			u16			vlan_id,
-			const struct dpsw_vlan_if_cfg	*cfg);
-
-int dpsw_vlan_remove_if_untagged(struct fsl_mc_io		*mc_io,
-				 u32			cmd_flags,
-				 u16			token,
-				 u16			vlan_id,
-				 const struct dpsw_vlan_if_cfg	*cfg);
-
-int dpsw_vlan_remove_if_flooding(struct fsl_mc_io		*mc_io,
-				 u32			cmd_flags,
-				 u16			token,
-				 u16			vlan_id,
-				 const struct dpsw_vlan_if_cfg	*cfg);
-
-int dpsw_vlan_remove(struct fsl_mc_io	*mc_io,
-		     u32		cmd_flags,
-		     u16		token,
-		     u16		vlan_id);
+int dpsw_vlan_add_if(struct fsl_mc_io *mc_io,
+		     u32 cmd_flags,
+		     u16 token,
+		     u16 vlan_id,
+		     const struct dpsw_vlan_if_cfg *cfg);
+
+int dpsw_vlan_add_if_untagged(struct fsl_mc_io *mc_io,
+			      u32 cmd_flags,
+			      u16 token,
+			      u16 vlan_id,
+			      const struct dpsw_vlan_if_cfg *cfg);
+
+int dpsw_vlan_add_if_flooding(struct fsl_mc_io *mc_io,
+			      u32 cmd_flags,
+			      u16 token,
+			      u16 vlan_id,
+			      const struct dpsw_vlan_if_cfg *cfg);
+
+int dpsw_vlan_remove_if(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token,
+			u16 vlan_id,
+			const struct dpsw_vlan_if_cfg *cfg);
+
+int dpsw_vlan_remove_if_untagged(struct fsl_mc_io *mc_io,
+				 u32 cmd_flags,
+				 u16 token,
+				 u16 vlan_id,
+				 const struct dpsw_vlan_if_cfg *cfg);
+
+int dpsw_vlan_remove_if_flooding(struct fsl_mc_io *mc_io,
+				 u32 cmd_flags,
+				 u16 token,
+				 u16 vlan_id,
+				 const struct dpsw_vlan_if_cfg *cfg);
+
+int dpsw_vlan_remove(struct fsl_mc_io *mc_io,
+		     u32 cmd_flags,
+		     u16 token,
+		     u16 vlan_id);
 
 /**
  * struct dpsw_vlan_attr - VLAN attributes
@@ -865,29 +866,29 @@ struct dpsw_vlan_attr {
 	u16 num_flooding_ifs;
 };
 
-int dpsw_vlan_get_attributes(struct fsl_mc_io		*mc_io,
-			     u32			cmd_flags,
-			     u16			token,
-			     u16			vlan_id,
-			     struct dpsw_vlan_attr	*attr);
+int dpsw_vlan_get_attributes(struct fsl_mc_io *mc_io,
+			     u32 cmd_flags,
+			     u16 token,
+			     u16 vlan_id,
+			     struct dpsw_vlan_attr *attr);
 
-int dpsw_vlan_get_if(struct fsl_mc_io		*mc_io,
-		     u32			cmd_flags,
-		     u16			token,
-		     u16			vlan_id,
-		     struct dpsw_vlan_if_cfg	*cfg);
+int dpsw_vlan_get_if(struct fsl_mc_io *mc_io,
+		     u32 cmd_flags,
+		     u16 token,
+		     u16 vlan_id,
+		     struct dpsw_vlan_if_cfg *cfg);
 
-int dpsw_vlan_get_if_flooding(struct fsl_mc_io		*mc_io,
-			      u32			cmd_flags,
-			      u16			token,
-			      u16			vlan_id,
-			      struct dpsw_vlan_if_cfg	*cfg);
+int dpsw_vlan_get_if_flooding(struct fsl_mc_io *mc_io,
+			      u32 cmd_flags,
+			      u16 token,
+			      u16 vlan_id,
+			      struct dpsw_vlan_if_cfg *cfg);
 
-int dpsw_vlan_get_if_untagged(struct fsl_mc_io		*mc_io,
-			      u32			cmd_flags,
-			      u16			token,
-			      u16			vlan_id,
-			      struct dpsw_vlan_if_cfg	*cfg);
+int dpsw_vlan_get_if_untagged(struct fsl_mc_io *mc_io,
+			      u32 cmd_flags,
+			      u16 token,
+			      u16 vlan_id,
+			      struct dpsw_vlan_if_cfg *cfg);
 
 /**
  * struct dpsw_fdb_cfg  - FDB Configuration
@@ -899,16 +900,16 @@ struct dpsw_fdb_cfg {
 	u16 fdb_aging_time;
 };
 
-int dpsw_fdb_add(struct fsl_mc_io		*mc_io,
-		 u32			cmd_flags,
-		 u16			token,
-		 u16			*fdb_id,
-		 const struct dpsw_fdb_cfg	*cfg);
+int dpsw_fdb_add(struct fsl_mc_io *mc_io,
+		 u32 cmd_flags,
+		 u16 token,
+		 u16 *fdb_id,
+		 const struct dpsw_fdb_cfg *cfg);
 
-int dpsw_fdb_remove(struct fsl_mc_io	*mc_io,
-		    u32		cmd_flags,
-		    u16		token,
-		    u16		fdb_id);
+int dpsw_fdb_remove(struct fsl_mc_io *mc_io,
+		    u32 cmd_flags,
+		    u16 token,
+		    u16 fdb_id);
 
 /**
  * enum dpsw_fdb_entry_type - FDB Entry type - Static/Dynamic
@@ -927,28 +928,28 @@ enum dpsw_fdb_entry_type {
  * @if_egress: Egress interface ID
  */
 struct dpsw_fdb_unicast_cfg {
-	enum dpsw_fdb_entry_type	type;
-	u8			mac_addr[6];
-	u16			if_egress;
+	enum dpsw_fdb_entry_type type;
+	u8 mac_addr[6];
+	u16 if_egress;
 };
 
-int dpsw_fdb_add_unicast(struct fsl_mc_io			*mc_io,
-			 u32				cmd_flags,
-			 u16				token,
-			 u16				fdb_id,
-			 const struct dpsw_fdb_unicast_cfg	*cfg);
+int dpsw_fdb_add_unicast(struct fsl_mc_io *mc_io,
+			 u32 cmd_flags,
+			 u16 token,
+			 u16 fdb_id,
+			 const struct dpsw_fdb_unicast_cfg *cfg);
 
-int dpsw_fdb_get_unicast(struct fsl_mc_io		*mc_io,
-			 u32			cmd_flags,
-			 u16			token,
-			 u16			fdb_id,
-			 struct dpsw_fdb_unicast_cfg	*cfg);
+int dpsw_fdb_get_unicast(struct fsl_mc_io *mc_io,
+			 u32 cmd_flags,
+			 u16 token,
+			 u16 fdb_id,
+			 struct dpsw_fdb_unicast_cfg *cfg);
 
-int dpsw_fdb_remove_unicast(struct fsl_mc_io			*mc_io,
-			    u32				cmd_flags,
-			    u16				token,
-			    u16				fdb_id,
-			    const struct dpsw_fdb_unicast_cfg	*cfg);
+int dpsw_fdb_remove_unicast(struct fsl_mc_io *mc_io,
+			    u32 cmd_flags,
+			    u16 token,
+			    u16 fdb_id,
+			    const struct dpsw_fdb_unicast_cfg *cfg);
 
 /**
  * struct dpsw_fdb_multicast_cfg - Multi-cast entry configuration
@@ -958,28 +959,28 @@ int dpsw_fdb_remove_unicast(struct fsl_mc_io			*mc_io,
  * @if_id: Egress interface IDs
  */
 struct dpsw_fdb_multicast_cfg {
-	enum dpsw_fdb_entry_type	type;
-	u8			mac_addr[6];
-	u16			num_ifs;
-	u16			if_id[DPSW_MAX_IF];
+	enum dpsw_fdb_entry_type type;
+	u8 mac_addr[6];
+	u16 num_ifs;
+	u16 if_id[DPSW_MAX_IF];
 };
 
-int dpsw_fdb_add_multicast(struct fsl_mc_io			*mc_io,
-			   u32				cmd_flags,
-			   u16				token,
-			   u16				fdb_id,
-			   const struct dpsw_fdb_multicast_cfg	*cfg);
-
-int dpsw_fdb_get_multicast(struct fsl_mc_io			*mc_io,
-			   u32				cmd_flags,
-			   u16				token,
-			   u16				fdb_id,
-			   struct dpsw_fdb_multicast_cfg	*cfg);
-
-int dpsw_fdb_remove_multicast(struct fsl_mc_io			*mc_io,
-			      u32				cmd_flags,
-			      u16				token,
-			      u16				fdb_id,
+int dpsw_fdb_add_multicast(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
+			   u16 fdb_id,
+			   const struct dpsw_fdb_multicast_cfg *cfg);
+
+int dpsw_fdb_get_multicast(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
+			   u16 fdb_id,
+			   struct dpsw_fdb_multicast_cfg *cfg);
+
+int dpsw_fdb_remove_multicast(struct fsl_mc_io *mc_io,
+			      u32 cmd_flags,
+			      u16 token,
+			      u16 fdb_id,
 			      const struct dpsw_fdb_multicast_cfg *cfg);
 
 /**
@@ -1019,21 +1020,11 @@ enum dpsw_fdb_learning_mode {
 	DPSW_FDB_LEARNING_MODE_SECURE = 3
 };
 
-/**
- * dpsw_fdb_set_learning_mode() - Define FDB learning mode
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
- * @fdb_id:	Forwarding Database Identifier
- * @mode:	learning mode
- *
- * Return:	Completion status. '0' on Success; Error code otherwise.
- */
-int dpsw_fdb_set_learning_mode(struct fsl_mc_io		*mc_io,
-			       u32			cmd_flags,
-			       u16			token,
-			       u16			fdb_id,
-			       enum dpsw_fdb_learning_mode	mode);
+int dpsw_fdb_set_learning_mode(struct fsl_mc_io *mc_io,
+			       u32 cmd_flags,
+			       u16 token,
+			       u16 fdb_id,
+			       enum dpsw_fdb_learning_mode mode);
 
 /**
  * struct dpsw_fdb_attr - FDB Attributes
@@ -1044,25 +1035,25 @@ int dpsw_fdb_set_learning_mode(struct fsl_mc_io		*mc_io,
  * @max_fdb_mc_groups: Maximum number of multicast groups
  */
 struct dpsw_fdb_attr {
-	u16			max_fdb_entries;
-	u16			fdb_aging_time;
-	enum dpsw_fdb_learning_mode	learning_mode;
-	u16			num_fdb_mc_groups;
-	u16			max_fdb_mc_groups;
+	u16 max_fdb_entries;
+	u16 fdb_aging_time;
+	enum dpsw_fdb_learning_mode learning_mode;
+	u16 num_fdb_mc_groups;
+	u16 max_fdb_mc_groups;
 };
 
-int dpsw_fdb_get_attributes(struct fsl_mc_io		*mc_io,
-			    u32			cmd_flags,
-			    u16			token,
-			    u16			fdb_id,
-			    struct dpsw_fdb_attr	*attr);
+int dpsw_fdb_get_attributes(struct fsl_mc_io *mc_io,
+			    u32 cmd_flags,
+			    u16 token,
+			    u16 fdb_id,
+			    struct dpsw_fdb_attr *attr);
 
 /**
  * struct dpsw_acl_cfg - ACL Configuration
  * @max_entries: Number of FDB entries
  */
 struct dpsw_acl_cfg {
-	u16	max_entries;
+	u16 max_entries;
 };
 
 /**
@@ -1087,18 +1078,18 @@ struct dpsw_acl_cfg {
  * @l4_dest_port: Destination TCP/UDP Port
  */
 struct dpsw_acl_fields {
-	u8         l2_dest_mac[6];
-	u8         l2_source_mac[6];
-	u16        l2_tpid;
-	u8         l2_pcp_dei;
-	u16        l2_vlan_id;
-	u16        l2_ether_type;
-	u8         l3_dscp;
-	u8         l3_protocol;
-	u32        l3_source_ip;
-	u32        l3_dest_ip;
-	u16        l4_source_port;
-	u16        l4_dest_port;
+	u8 l2_dest_mac[6];
+	u8 l2_source_mac[6];
+	u16 l2_tpid;
+	u8 l2_pcp_dei;
+	u16 l2_vlan_id;
+	u16 l2_ether_type;
+	u8 l3_dscp;
+	u8 l3_protocol;
+	u32 l3_source_ip;
+	u32 l3_dest_ip;
+	u16 l4_source_port;
+	u16 l4_dest_port;
 };
 
 /**
@@ -1107,8 +1098,8 @@ struct dpsw_acl_fields {
  * @mask: Mask: b'1 - valid, b'0 don't care
  */
 struct dpsw_acl_key {
-	struct dpsw_acl_fields  match;
-	struct dpsw_acl_fields  mask;
+	struct dpsw_acl_fields match;
+	struct dpsw_acl_fields mask;
 };
 
 /**
@@ -1132,8 +1123,8 @@ enum dpsw_acl_action {
  *		 action
  */
 struct dpsw_acl_result {
-	enum dpsw_acl_action	action;
-	u16                if_id;
+	enum dpsw_acl_action action;
+	u16 if_id;
 };
 
 /**
@@ -1146,36 +1137,36 @@ struct dpsw_acl_result {
  *		space the priorities according to consequent rule additions.
  */
 struct dpsw_acl_entry_cfg {
-	u64		key_iova;
-	struct dpsw_acl_result  result;
-	int                     precedence;
+	u64 key_iova;
+	struct dpsw_acl_result result;
+	int precedence;
 };
 
-int dpsw_acl_add(struct fsl_mc_io		*mc_io,
-		 u32			cmd_flags,
-		 u16			token,
-		 u16			*acl_id,
-		 const struct dpsw_acl_cfg	*cfg);
+int dpsw_acl_add(struct fsl_mc_io *mc_io,
+		 u32 cmd_flags,
+		 u16 token,
+		 u16 *acl_id,
+		 const struct dpsw_acl_cfg *cfg);
 
-int dpsw_acl_remove(struct fsl_mc_io	*mc_io,
-		    u32		cmd_flags,
-		    u16		token,
-		    u16		acl_id);
+int dpsw_acl_remove(struct fsl_mc_io *mc_io,
+		    u32 cmd_flags,
+		    u16 token,
+		    u16 acl_id);
 
-void dpsw_acl_prepare_entry_cfg(const struct dpsw_acl_key	*key,
-				u8			*entry_cfg_buf);
+void dpsw_acl_prepare_entry_cfg(const struct dpsw_acl_key *key,
+				uint8_t *entry_cfg_buf);
 
-int dpsw_acl_add_entry(struct fsl_mc_io		*mc_io,
-		       u32			cmd_flags,
-		       u16			token,
-		       u16			acl_id,
-		       const struct dpsw_acl_entry_cfg	*cfg);
+int dpsw_acl_add_entry(struct fsl_mc_io *mc_io,
+		       u32 cmd_flags,
+		       u16 token,
+		       u16 acl_id,
+		       const struct dpsw_acl_entry_cfg *cfg);
 
-int dpsw_acl_remove_entry(struct fsl_mc_io			*mc_io,
-			  u32				cmd_flags,
-			  u16				token,
-			  u16				acl_id,
-			  const struct dpsw_acl_entry_cfg	*cfg);
+int dpsw_acl_remove_entry(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  u16 acl_id,
+			  const struct dpsw_acl_entry_cfg *cfg);
 
 /**
  * struct dpsw_acl_if_cfg - List of interfaces to Associate with ACL
@@ -1183,21 +1174,21 @@ int dpsw_acl_remove_entry(struct fsl_mc_io			*mc_io,
  * @if_id: List of interfaces
  */
 struct dpsw_acl_if_cfg {
-	u16	num_ifs;
-	u16	if_id[DPSW_MAX_IF];
+	u16 num_ifs;
+	u16 if_id[DPSW_MAX_IF];
 };
 
-int dpsw_acl_add_if(struct fsl_mc_io			*mc_io,
-		    u32				cmd_flags,
-		    u16				token,
-		    u16				acl_id,
-		    const struct dpsw_acl_if_cfg	*cfg);
+int dpsw_acl_add_if(struct fsl_mc_io *mc_io,
+		    u32 cmd_flags,
+		    u16 token,
+		    u16 acl_id,
+		    const struct dpsw_acl_if_cfg *cfg);
 
-int dpsw_acl_remove_if(struct fsl_mc_io		*mc_io,
-		       u32			cmd_flags,
-		       u16			token,
-		       u16			acl_id,
-		       const struct dpsw_acl_if_cfg	*cfg);
+int dpsw_acl_remove_if(struct fsl_mc_io *mc_io,
+		       u32 cmd_flags,
+		       u16 token,
+		       u16 acl_id,
+		       const struct dpsw_acl_if_cfg *cfg);
 
 /**
  * struct dpsw_acl_attr -  ACL Attributes
@@ -1211,11 +1202,11 @@ struct dpsw_acl_attr {
 	u16 num_ifs;
 };
 
-int dpsw_acl_get_attributes(struct fsl_mc_io		*mc_io,
-			    u32			cmd_flags,
-			    u16			token,
-			    u16			acl_id,
-			    struct dpsw_acl_attr	*attr);
+int dpsw_acl_get_attributes(struct fsl_mc_io *mc_io,
+			    u32 cmd_flags,
+			    u16 token,
+			    u16 acl_id,
+			    struct dpsw_acl_attr *attr);
 /**
 * struct dpsw_ctrl_if_attr - Control interface attributes
 * @rx_fqid:		Receive FQID
@@ -1223,15 +1214,15 @@ int dpsw_acl_get_attributes(struct fsl_mc_io		*mc_io,
 * @tx_err_conf_fqid:	Transmit error and confirmation FQID
 */
 struct dpsw_ctrl_if_attr {
-	u32	rx_fqid;
-	u32	rx_err_fqid;
-	u32	tx_err_conf_fqid;
+	u32 rx_fqid;
+	u32 rx_err_fqid;
+	u32 tx_err_conf_fqid;
 };
 
-int dpsw_ctrl_if_get_attributes(struct fsl_mc_io		*mc_io,
-				u32			cmd_flags,
-				u16			token,
-				struct dpsw_ctrl_if_attr	*attr);
+int dpsw_ctrl_if_get_attributes(struct fsl_mc_io *mc_io,
+				u32 cmd_flags,
+				u16 token,
+				struct dpsw_ctrl_if_attr *attr);
 
 /**
  * Maximum number of DPBP
@@ -1259,18 +1250,18 @@ struct dpsw_ctrl_if_pools_cfg {
 	} pools[DPSW_MAX_DPBP];
 };
 
-int dpsw_ctrl_if_set_pools(struct fsl_mc_io			*mc_io,
-			   u32				cmd_flags,
-			   u16				token,
+int dpsw_ctrl_if_set_pools(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
 			   const struct dpsw_ctrl_if_pools_cfg *cfg);
 
-int dpsw_ctrl_if_enable(struct fsl_mc_io	*mc_io,
-			u32		cmd_flags,
-			u16		token);
+int dpsw_ctrl_if_enable(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token);
 
-int dpsw_ctrl_if_disable(struct fsl_mc_io	*mc_io,
-			 u32		cmd_flags,
-			 u16		token);
+int dpsw_ctrl_if_disable(struct fsl_mc_io *mc_io,
+			 u32 cmd_flags,
+			 u16 token);
 
 int dpsw_get_api_version(struct fsl_mc_io *mc_io,
 			 u32 cmd_flags,
-- 
1.7.5.4

