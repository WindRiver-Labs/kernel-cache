From f956b21366ddb9145a95f1e396a849fd8ae31a59 Mon Sep 17 00:00:00 2001
From: Minghuan Lian <Minghuan.Lian@nxp.com>
Date: Fri, 9 Sep 2016 17:04:57 +0800
Subject: [PATCH 490/508] irqchip/ls-scfg-msi: add Layerscape SCFG MSI support

The patch provides a new method to support Layerscape
SCFG MSI. It tries to assign a dedicated MSIR to every core.
When changing a MSI interrupt affinity, the MSI message
data will be changed to refer to a new MSIR that has
been associated with the core.

Signed-off-by: Minghuan Lian <Minghuan.Lian@nxp.com>
Signed-off-by: Mingkai Hu <mingkai.hu@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-imx/Kconfig         |    1 -
 arch/arm64/Kconfig.platforms      |    1 -
 drivers/irqchip/Makefile          |    1 -
 drivers/irqchip/irq-ls-scfg-msi.c |  487 ++++++++++++++++++++++++++++---------
 drivers/irqchip/irq-ls1-msi.c     |  295 ----------------------
 5 files changed, 378 insertions(+), 407 deletions(-)
 delete mode 100644 drivers/irqchip/irq-ls1-msi.c

diff --git a/arch/arm/mach-imx/Kconfig b/arch/arm/mach-imx/Kconfig
index b681cfb..89659e5 100644
--- a/arch/arm/mach-imx/Kconfig
+++ b/arch/arm/mach-imx/Kconfig
@@ -570,7 +570,6 @@ config SOC_LS1021A
 	select ARM_GIC
 	select HAVE_ARM_ARCH_TIMER
 	select PCI_DOMAINS if PCI
-	select LS1_MSI if PCI_MSI
 	select ZONE_DMA if ARM_LPAE
 	select PLATFORM_VENDOR_FREESCALE if PM
 	select FSL_SLEEP_FSM if PM
diff --git a/arch/arm64/Kconfig.platforms b/arch/arm64/Kconfig.platforms
index 4c3eaf9..a32a7be 100644
--- a/arch/arm64/Kconfig.platforms
+++ b/arch/arm64/Kconfig.platforms
@@ -67,7 +67,6 @@ config ARCH_LAYERSCAPE
 	bool "ARMv8 based Freescale Layerscape SoC family"
 	select PCI_LAYERSCAPE if PCI
 	select LS2080A_ERRATA_ERR009971
-	select LS1_MSI if PCI_MSI
 	help
 	  This enables support for the Freescale Layerscape SoC family.
 
diff --git a/drivers/irqchip/Makefile b/drivers/irqchip/Makefile
index c77fc3f..e90aacb 100644
--- a/drivers/irqchip/Makefile
+++ b/drivers/irqchip/Makefile
@@ -71,4 +71,3 @@ obj-$(CONFIG_MVEBU_ODMI)		+= irq-mvebu-odmi.o
 obj-$(CONFIG_LS_SCFG_MSI)		+= irq-ls-scfg-msi.o irq-ls-scfg-test.o
 obj-$(CONFIG_EZNPS_GIC)			+= irq-eznps.o
 obj-$(CONFIG_ARCH_ASPEED)		+= irq-aspeed-vic.o
-obj-$(CONFIG_LS1_MSI)			+= irq-ls1-msi.o
diff --git a/drivers/irqchip/irq-ls-scfg-msi.c b/drivers/irqchip/irq-ls-scfg-msi.c
index 02cca74c..6d7ba90 100644
--- a/drivers/irqchip/irq-ls-scfg-msi.c
+++ b/drivers/irqchip/irq-ls-scfg-msi.c
@@ -1,7 +1,7 @@
 /*
- * Freescale SCFG MSI(-X) support
+ * Layerscape MSI(-X) support
  *
- * Copyright (C) 2016 Freescale Semiconductor.
+ * Copyright (C) 2015 Freescale Semiconductor.
  *
  * Author: Minghuan Lian <Minghuan.Lian@nxp.com>
  *
@@ -10,62 +10,150 @@
  * published by the Free Software Foundation.
  */
 
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/msi.h>
+#include <linux/bitmap.h>
 #include <linux/interrupt.h>
 #include <linux/irq.h>
 #include <linux/irqchip/chained_irq.h>
 #include <linux/irqdomain.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/msi.h>
+#include <linux/of_address.h>
+#include <linux/of_irq.h>
 #include <linux/of_pci.h>
 #include <linux/of_platform.h>
 #include <linux/spinlock.h>
+#include <linux/sys_soc.h>
+
+#define LS_MSIR_NUM_MAX		4 /* MSIIR can index 4 MSI registers */
+#define IRQS_32_PER_MSIR	32
+#define IRQS_8_PER_MSIR		8
+#define MSI_MAX_IRQS		32
+
+#define MSIR_OFFSET(idx)	((idx) * 0x4)
 
-#define MSI_MAX_IRQS	32
-#define MSI_IBS_SHIFT	3
-#define MSIR		4
+enum msi_affinity_flag {
+	MSI_GROUP_AFFINITY_FLAG,
+	MSI_AFFINITY_FLAG
+};
+
+struct ls_scfg_msi;
+struct ls_scfg_msi_ctrl;
+
+struct ls_scfg_msi_cfg {
+	u32 ibs_shift; /* Shift of interrupt bit select */
+	u32 msir_irqs; /* The irq number per MSIR */
+	u32 msir_base; /* The base address of MSIR */
+};
+
+struct ls_scfg_msir {
+	struct ls_scfg_msi_ctrl *ctrl;
+	int index;
+	int virq;
+};
+
+struct ls_scfg_msi_ctrl {
+	struct list_head		list;
+	struct ls_scfg_msi		*msi;
+	void __iomem			*regs;
+	phys_addr_t			msiir_addr;
+	int				irq_base;
+	spinlock_t			lock;
+	struct ls_scfg_msir		*msir;
+	unsigned long			*bm;
+};
 
 struct ls_scfg_msi {
-	spinlock_t		lock;
+	struct device_node		*of_node;
 	struct platform_device	*pdev;
-	struct irq_domain	*parent;
 	struct irq_domain	*msi_domain;
-	void __iomem		*regs;
-	phys_addr_t		msiir_addr;
-	int			irq;
-	DECLARE_BITMAP(used, MSI_MAX_IRQS);
+	struct msi_domain_info		info;
+	struct irq_chip			chip;
+	struct irq_domain		*host;
+	struct list_head		ctrl_list;
+	const struct ls_scfg_msi_cfg	*cfg;
+	u32				cpu_num;
 };
 
-static struct irq_chip ls_scfg_msi_irq_chip = {
-	.name = "MSI",
-	.irq_mask	= pci_msi_mask_irq,
-	.irq_unmask	= pci_msi_unmask_irq,
+static struct ls_scfg_msi_cfg ls1021_msi_cfg = {
+	.ibs_shift = 3,
+	.msir_irqs = IRQS_32_PER_MSIR,
+	.msir_base = 0x4,
 };
 
-static struct msi_domain_info ls_scfg_msi_domain_info = {
-	.flags	= (MSI_FLAG_USE_DEF_DOM_OPS |
-		   MSI_FLAG_USE_DEF_CHIP_OPS |
-		   MSI_FLAG_PCI_MSIX),
-	.chip	= &ls_scfg_msi_irq_chip,
+static struct ls_scfg_msi_cfg ls1043_rev11_msi_cfg = {
+	.ibs_shift = 2,
+	.msir_irqs = IRQS_8_PER_MSIR,
+	.msir_base = 0x10,
+};
+
+static struct ls_scfg_msi_cfg ls1046_msi_cfg = {
+	.ibs_shift = 2,
+	.msir_irqs = IRQS_32_PER_MSIR,
+	.msir_base = 0x4,
+};
+
+static struct soc_device_attribute soc_msi_matches[] = {
+	{ .family = "QorIQ LS1021A",
+	  .data = &ls1021_msi_cfg },
+	{ .family = "QorIQ LS1012A",
+	  .data = &ls1021_msi_cfg },
+	{ .family = "QorIQ LS1043A", .revision = "1.0",
+	  .data = &ls1021_msi_cfg },
+	{ .family = "QorIQ LS1043A", .revision = "1.1",
+	  .data = &ls1043_rev11_msi_cfg },
+	{ .family = "QorIQ LS1046A",
+	  .data = &ls1046_msi_cfg },
+	{ },
 };
 
 static void ls_scfg_msi_compose_msg(struct irq_data *data, struct msi_msg *msg)
 {
-	struct ls_scfg_msi *msi_data = irq_data_get_irq_chip_data(data);
+	struct ls_scfg_msi_ctrl *ctrl = irq_data_get_irq_chip_data(data);
+	phys_addr_t addr = ctrl->msiir_addr;
+	u32 ibs, srs;
 
-	msg->address_hi = upper_32_bits(msi_data->msiir_addr);
-	msg->address_lo = lower_32_bits(msi_data->msiir_addr);
-	msg->data = data->hwirq << MSI_IBS_SHIFT;
+	msg->address_hi = (u32) (addr >> 32);
+	msg->address_lo = (u32) (addr);
+
+	ibs = data->hwirq - ctrl->irq_base;
+	srs = cpumask_first(data->common->affinity);
+	if (srs >= ctrl->msi->cpu_num)
+		srs = 0;
+
+	msg->data = ibs << ctrl->msi->cfg->ibs_shift | srs;
+
+	pr_debug("%s: ibs %d srs %d address0x%x-0x%x data 0x%x\n",
+		 __func__, ibs, srs, msg->address_hi,
+		 msg->address_lo, msg->data);
 }
 
-static int ls_scfg_msi_set_affinity(struct irq_data *irq_data,
-				    const struct cpumask *mask, bool force)
+static int ls_scfg_msi_set_affinity(struct irq_data *data,
+				const struct cpumask *mask, bool force)
 {
-	return -EINVAL;
+	struct ls_scfg_msi_ctrl *ctrl = irq_data_get_irq_chip_data(data);
+	u32 cpu;
+
+	if (!force)
+		cpu = cpumask_any_and(mask, cpu_online_mask);
+	else
+		cpu = cpumask_first(mask);
+
+	if (cpu >= ctrl->msi->cpu_num)
+		return -EINVAL;
+
+	if (ctrl->msir[cpu].virq <= 0) {
+		pr_warn("cannot bind the irq to cpu%d\n", cpu);
+		return -EINVAL;
+	}
+
+	cpumask_copy(data->common->affinity, mask);
+
+	return IRQ_SET_MASK_OK;
 }
 
-static struct irq_chip ls_scfg_msi_parent_chip = {
-	.name			= "SCFG",
+static struct irq_chip ls_scfg_msi_chip = {
+	.name			= "SCFG-MSI",
 	.irq_compose_msi_msg	= ls_scfg_msi_compose_msg,
 	.irq_set_affinity	= ls_scfg_msi_set_affinity,
 };
@@ -75,129 +163,304 @@ static int ls_scfg_msi_domain_irq_alloc(struct irq_domain *domain,
 					unsigned int nr_irqs,
 					void *args)
 {
-	struct ls_scfg_msi *msi_data = domain->host_data;
-	int pos, err = 0;
+	struct ls_scfg_msi *msi = domain->host_data;
+	static struct list_head *current_entry;
+	struct ls_scfg_msi_ctrl *ctrl;
+	int i, hwirq = -ENOMEM;
+
+	if (!current_entry || current_entry->next == &msi->ctrl_list)
+		current_entry = &msi->ctrl_list;
+
+	list_for_each_entry(ctrl, current_entry, list) {
+		spin_lock(&ctrl->lock);
+		hwirq = bitmap_find_free_region(ctrl->bm,
+						msi->cfg->msir_irqs,
+						order_base_2(nr_irqs));
+		spin_unlock(&ctrl->lock);
+
+		if (hwirq >= 0)
+			break;
+	}
 
-	WARN_ON(nr_irqs != 1);
+	if (hwirq < 0)
+		return hwirq;
 
-	spin_lock(&msi_data->lock);
-	pos = find_first_zero_bit(msi_data->used, MSI_MAX_IRQS);
-	if (pos < MSI_MAX_IRQS)
-		__set_bit(pos, msi_data->used);
-	else
-		err = -ENOSPC;
-	spin_unlock(&msi_data->lock);
+	hwirq = hwirq + ctrl->irq_base;
 
-	if (err)
-		return err;
+	for (i = 0; i < nr_irqs; i++) {
+		irq_domain_set_info(domain, virq + i, hwirq + i,
+				    &ls_scfg_msi_chip, ctrl,
+				    handle_simple_irq, NULL, NULL);
+	}
 
-	irq_domain_set_info(domain, virq, pos,
-			    &ls_scfg_msi_parent_chip, msi_data,
-			    handle_simple_irq, NULL, NULL);
+	current_entry = &ctrl->list;
 
 	return 0;
 }
 
 static void ls_scfg_msi_domain_irq_free(struct irq_domain *domain,
-				   unsigned int virq, unsigned int nr_irqs)
+					unsigned int virq,
+					unsigned int nr_irqs)
 {
 	struct irq_data *d = irq_domain_get_irq_data(domain, virq);
-	struct ls_scfg_msi *msi_data = irq_data_get_irq_chip_data(d);
+	struct ls_scfg_msi_ctrl *ctrl = irq_data_get_irq_chip_data(d);
 	int pos;
 
-	pos = d->hwirq;
-	if (pos < 0 || pos >= MSI_MAX_IRQS) {
-		pr_err("failed to teardown msi. Invalid hwirq %d\n", pos);
+	pos = d->hwirq - ctrl->irq_base;
+
+	if (pos < 0 || pos >= ctrl->msi->cfg->msir_irqs) {
+		pr_err("Failed to teardown msi. Invalid hwirq %d\n", pos);
 		return;
 	}
 
-	spin_lock(&msi_data->lock);
-	__clear_bit(pos, msi_data->used);
-	spin_unlock(&msi_data->lock);
+	spin_lock(&ctrl->lock);
+	bitmap_release_region(ctrl->bm, pos, order_base_2(nr_irqs));
+	spin_unlock(&ctrl->lock);
 }
 
 static const struct irq_domain_ops ls_scfg_msi_domain_ops = {
-	.alloc	= ls_scfg_msi_domain_irq_alloc,
-	.free	= ls_scfg_msi_domain_irq_free,
+	.alloc = ls_scfg_msi_domain_irq_alloc,
+	.free = ls_scfg_msi_domain_irq_free,
 };
 
-static void ls_scfg_msi_irq_handler(struct irq_desc *desc)
-{
-	struct ls_scfg_msi *msi_data = irq_desc_get_handler_data(desc);
-	unsigned long val;
-	int pos, virq;
-
-	chained_irq_enter(irq_desc_get_chip(desc), desc);
-
-	val = ioread32be(msi_data->regs + MSIR);
-	for_each_set_bit(pos, &val, MSI_MAX_IRQS) {
-		virq = irq_find_mapping(msi_data->parent, (31 - pos));
-		if (virq)
-			generic_handle_irq(virq);
-	}
+static struct irq_chip ls_scfg_msi_irq_chip = {
+	.name = "MSI",
+	.irq_mask = pci_msi_mask_irq,
+	.irq_unmask = pci_msi_unmask_irq,
+};
 
-	chained_irq_exit(irq_desc_get_chip(desc), desc);
-}
+static struct msi_domain_info ls_scfg_pci_msi_domain_info = {
+	.flags	= (MSI_FLAG_USE_DEF_DOM_OPS | MSI_FLAG_USE_DEF_CHIP_OPS |
+		   MSI_FLAG_PCI_MSIX),
+	.chip	= &ls_scfg_msi_irq_chip,
+};
 
-static int ls_scfg_msi_domains_init(struct ls_scfg_msi *msi_data)
+static int ls_scfg_msi_chip_init(struct ls_scfg_msi *msi_data)
 {
 	/* Initialize MSI domain parent */
-	msi_data->parent = irq_domain_add_linear(NULL,
+	msi_data->host = irq_domain_add_linear(msi_data->of_node,
 						 MSI_MAX_IRQS,
 						 &ls_scfg_msi_domain_ops,
 						 msi_data);
-	if (!msi_data->parent) {
+	if (!msi_data->host) {
 		dev_err(&msi_data->pdev->dev, "failed to create IRQ domain\n");
 		return -ENOMEM;
 	}
-
+	
+	/* Initialize MSI controller */
 	msi_data->msi_domain = pci_msi_create_irq_domain(
 				of_node_to_fwnode(msi_data->pdev->dev.of_node),
-				&ls_scfg_msi_domain_info,
-				msi_data->parent);
+				&ls_scfg_pci_msi_domain_info,
+				msi_data->host);
 	if (!msi_data->msi_domain) {
 		dev_err(&msi_data->pdev->dev, "failed to create MSI domain\n");
-		irq_domain_remove(msi_data->parent);
+		irq_domain_remove(msi_data->host);
 		return -ENOMEM;
 	}
+	
+	return 0;
+}
+
+static irqreturn_t ls_scfg_msi_irq_handler(int irq, void *arg)
+{
+	struct ls_scfg_msir *msir = arg;
+	struct ls_scfg_msi_ctrl *ctrl = msir->ctrl;
+	struct ls_scfg_msi *msi = ctrl->msi;
+	unsigned long val;
+	int pos = 0, hwirq, virq;
+	irqreturn_t ret = IRQ_NONE;
+
+	val = ioread32be(ctrl->regs + msi->cfg->msir_base +
+			 MSIR_OFFSET(msir->index));
+
+	if (msi->cfg->msir_irqs == IRQS_8_PER_MSIR)
+		val = (val << (msir->index * 8)) & 0xff000000;
+
+	for_each_set_bit(pos, &val, IRQS_32_PER_MSIR) {
+		hwirq = (IRQS_32_PER_MSIR - 1 - pos) + ctrl->irq_base;
+		virq = irq_find_mapping(msi->host, hwirq);
+		if (virq) {
+			generic_handle_irq(virq);
+			ret = IRQ_HANDLED;
+		}
+	}
+
+	return ret;
+}
+
+static void ls_scfg_msi_cascade(struct irq_desc *desc)
+{
+	struct ls_scfg_msir *msir = irq_desc_get_handler_data(desc);
+	struct irq_chip *chip = irq_desc_get_chip(desc);
+	struct ls_scfg_msi_ctrl *ctrl = msir->ctrl;
+	struct ls_scfg_msi *msi = ctrl->msi;
+	unsigned long val;
+	int pos = 0, hwirq, virq;
+
+	chained_irq_enter(chip, desc);
+
+	val = ioread32be(ctrl->regs + msi->cfg->msir_base +
+			 MSIR_OFFSET(msir->index));
+
+	if (msi->cfg->msir_irqs == IRQS_8_PER_MSIR)
+		val = (val << (msir->index * 8)) & 0xff000000;
+
+	for_each_set_bit(pos, &val, IRQS_32_PER_MSIR) {
+		hwirq = (IRQS_32_PER_MSIR - 1 - pos) + ctrl->irq_base;
+		virq = irq_find_mapping(msi->host, hwirq);
+		if (virq) {
+			generic_handle_irq(virq);
+		}
+	}
+
+	chained_irq_exit(chip, desc);
+
+	return;
+}
+
+static int ls_scfg_msi_setup_hwirq(struct ls_scfg_msi_ctrl *ctrl,
+				   struct device_node *node,
+				   int index,
+				   enum msi_affinity_flag flag)
+{
+	struct ls_scfg_msir *msir = &ctrl->msir[index];
+	int ret;
+
+	msir->virq = of_irq_get(node, index);
+	if (msir->virq <= 0)
+		return -ENODEV;
+
+	msir->index = index;
+	msir->ctrl = ctrl;
+
+	if (flag == MSI_GROUP_AFFINITY_FLAG) {
+		ret = request_irq(msir->virq, ls_scfg_msi_irq_handler,
+				  IRQF_NO_THREAD, "MSI-GROUP", msir);
+		if (ret) {
+			pr_err("failed to request irq %d\n", msir->virq);
+			msir->virq = 0;
+			return -ENODEV;
+		}
+	} else {
+		irq_set_chained_handler(msir->virq, ls_scfg_msi_cascade);
+		irq_set_handler_data(msir->virq, msir);
+		irq_set_affinity(msir->virq, get_cpu_mask(index));
+	}
 
 	return 0;
 }
 
-static int ls_scfg_msi_probe(struct platform_device *pdev)
+static void ls_scfg_msi_ctrl_remove(struct ls_scfg_msi_ctrl *ctrl)
+{
+	if (!ctrl)
+		return;
+
+	if (ctrl->regs)
+		iounmap(ctrl->regs);
+
+	kfree(ctrl->bm);
+	kfree(ctrl->msir);
+	kfree(ctrl);
+}
+
+static int ls_scfg_msi_ctrl_probe(struct device_node *node,
+				  struct ls_scfg_msi *msi)
+{
+	struct ls_scfg_msi_ctrl *ctrl;
+	struct resource res;
+	static int ctrl_idx;
+	int err, irqs, i;
+	enum msi_affinity_flag flag;
+
+	err = of_address_to_resource(node, 0, &res);
+	if (err) {
+		pr_warn("%s: no regs\n", node->full_name);
+		return -ENXIO;
+	}
+
+	ctrl = kzalloc(sizeof(*ctrl), GFP_KERNEL);
+	if (!ctrl)
+		return  -ENOMEM;
+
+	ctrl->msi = msi;
+	ctrl->msiir_addr = res.start;
+	spin_lock_init(&ctrl->lock);
+
+	ctrl->regs = ioremap(res.start, resource_size(&res));
+	if (!ctrl->regs) {
+		pr_err("%s: unable to map registers\n", node->full_name);
+		err = -ENOMEM;
+		goto _err;
+	}
+
+	ctrl->msir = kcalloc(msi->cpu_num, sizeof(struct ls_scfg_msir),
+			     GFP_KERNEL);
+	if (!ctrl->msir) {
+		err = -ENOMEM;
+		goto _err;
+	}
+
+	ctrl->bm = kcalloc(BITS_TO_LONGS(msi->cfg->msir_irqs), sizeof(long),
+			   GFP_KERNEL);
+	if (!ctrl->bm) {
+		err = -ENOMEM;
+		goto _err;
+	}
+
+	ctrl->irq_base = msi->cfg->msir_irqs * ctrl_idx;
+	ctrl_idx++;
+
+	irqs = of_irq_count(node);
+	if (irqs >= msi->cpu_num)
+		flag = MSI_AFFINITY_FLAG;
+	else
+		flag = MSI_GROUP_AFFINITY_FLAG;
+
+	for (i = 0; i < msi->cpu_num; i++)
+		ls_scfg_msi_setup_hwirq(ctrl, node, i, flag);
+
+	list_add_tail(&ctrl->list, &msi->ctrl_list);
+
+	return 0;
+
+_err:
+	ls_scfg_msi_ctrl_remove(ctrl);
+	pr_err("MSI: failed probing %s (%d)\n", node->full_name, err);
+	return err;
+}
+
+static int __init ls_scfg_msi_probe(struct platform_device *pdev)
 {
 	struct ls_scfg_msi *msi_data;
-	struct resource *res;
-	int ret;
+	const struct soc_device_attribute *match;
+	struct device_node *child;
 
 	msi_data = devm_kzalloc(&pdev->dev, sizeof(*msi_data), GFP_KERNEL);
 	if (!msi_data)
 		return -ENOMEM;
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	msi_data->regs = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(msi_data->regs)) {
-		dev_err(&pdev->dev, "failed to initialize 'regs'\n");
-		return PTR_ERR(msi_data->regs);
-	}
-	msi_data->msiir_addr = res->start;
+	msi_data->of_node = pdev->dev.of_node;
+	INIT_LIST_HEAD(&msi_data->ctrl_list);
 
-	msi_data->irq = platform_get_irq(pdev, 0);
-	if (msi_data->irq <= 0) {
-		dev_err(&pdev->dev, "failed to get MSI irq\n");
-		return -ENODEV;
-	}
+	msi_data->cpu_num = num_possible_cpus();
 
-	msi_data->pdev = pdev;
-	spin_lock_init(&msi_data->lock);
+	match = soc_device_match(soc_msi_matches);
+	if (match)
+		msi_data->cfg = match->data;
+	else
+		msi_data->cfg = &ls1046_msi_cfg;
+
+	dev_info(&pdev->dev, "ibs_shift:%d msir_irqs:%d msir_base:0x%x\n",
+		 msi_data->cfg->ibs_shift,
+		 msi_data->cfg->msir_irqs,
+		 msi_data->cfg->msir_base);
 
-	ret = ls_scfg_msi_domains_init(msi_data);
-	if (ret)
-		return ret;
+	for_each_child_of_node(msi_data->of_node, child)
+		ls_scfg_msi_ctrl_probe(child, msi_data);
+
+	msi_data->pdev = pdev;
 
-	irq_set_chained_handler_and_data(msi_data->irq,
-					 ls_scfg_msi_irq_handler,
-					 msi_data);
+	ls_scfg_msi_chip_init(msi_data);
 
 	platform_set_drvdata(pdev, msi_data);
 
@@ -207,11 +470,18 @@ static int ls_scfg_msi_probe(struct platform_device *pdev)
 static int ls_scfg_msi_remove(struct platform_device *pdev)
 {
 	struct ls_scfg_msi *msi_data = platform_get_drvdata(pdev);
-
-	irq_set_chained_handler_and_data(msi_data->irq, NULL, NULL);
-
+	struct ls_scfg_msi_ctrl *ctrl;
+	int i = 0;
+	
+	list_for_each_entry(ctrl, &msi_data->ctrl_list, list) {
+		for (i = 0; i < msi_data->cpu_num; i++) {
+			irq_set_chained_handler_and_data(ctrl->msir[i].virq, NULL, NULL);
+		}
+		ls_scfg_msi_ctrl_remove(ctrl);
+	}
+	
 	irq_domain_remove(msi_data->msi_domain);
-	irq_domain_remove(msi_data->parent);
+	irq_domain_remove(msi_data->host);
 
 	platform_set_drvdata(pdev, NULL);
 
@@ -219,8 +489,7 @@ static int ls_scfg_msi_remove(struct platform_device *pdev)
 }
 
 static const struct of_device_id ls_scfg_msi_id[] = {
-	{ .compatible = "fsl,1s1021a-msi", },
-	{ .compatible = "fsl,1s1043a-msi", },
+	{ .compatible = "fsl,ls-scfg-msi" },
 	{},
 };
 
diff --git a/drivers/irqchip/irq-ls1-msi.c b/drivers/irqchip/irq-ls1-msi.c
deleted file mode 100644
index 2a7bab8..0000000
--- a/drivers/irqchip/irq-ls1-msi.c
+++ /dev/null
@@ -1,295 +0,0 @@
-/*
- * Layerscape MSI(-X) support
- *
- * Copyright (C) 2015 Freescale Semiconductor.
- *
- * Author: Minghuan Lian <Minghuan.Lian@freescale.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-
-#include <linux/bitmap.h>
-#include <linux/irq.h>
-#include <linux/irqdomain.h>
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/msi.h>
-#include <linux/of_pci.h>
-#include <linux/of_platform.h>
-#include <linux/spinlock.h>
-#include <linux/interrupt.h>
-
-#define MAX_MSI_IRQS	32
-
-struct ls1_msi {
-	char			name[32];
-	struct device_node	*of_node;
-	spinlock_t		lock;
-	struct msi_controller	mchip;
-	struct msi_domain_info	info;
-	struct irq_chip		chip;
-	struct irq_domain	*parent;
-	void __iomem		*msir;
-	phys_addr_t		msiir_addr;
-	unsigned long		*bm;
-	u32			nr_irqs;
-	int			msi_irq;
-};
-
-static void ls1_msi_compose_msg(struct irq_data *data, struct msi_msg *msg)
-{
-	struct ls1_msi *msi_data = irq_data_get_irq_chip_data(data);
-	phys_addr_t addr = msi_data->msiir_addr;
-
-	msg->address_hi = (u32) (addr >> 32);
-	msg->address_lo = (u32) (addr);
-	msg->data = data->hwirq * 8;
-}
-
-static int ls1_msi_set_affinity(struct irq_data *irq_data,
-				    const struct cpumask *mask, bool force)
-{
-	return 0;
-}
-
-static struct irq_chip ls1_msi_parent_chip = {
-	.name			= "LS1-MSI",
-	.irq_compose_msi_msg	= ls1_msi_compose_msg,
-	.irq_set_affinity	= ls1_msi_set_affinity,
-};
-
-static int ls1_msi_domain_irq_alloc(struct irq_domain *domain, unsigned int virq,
-				   unsigned int nr_irqs, void *args)
-{
-	struct ls1_msi *msi_data = domain->host_data;
-	int i, pos;
-
-	spin_lock(&msi_data->lock);
-	pos = bitmap_find_free_region(msi_data->bm, msi_data->nr_irqs,
-				      order_base_2(nr_irqs));
-	spin_unlock(&msi_data->lock);
-
-	if (pos < 0)
-		return -ENOSPC;
-
-	for (i = 0; i < nr_irqs; i++) {
-		irq_domain_set_info(domain, virq + i, pos + i,
-				    &ls1_msi_parent_chip, msi_data,
-				    handle_simple_irq, NULL, NULL);
-		set_irq_flags(virq, IRQF_VALID);
-	}
-
-	return 0;
-}
-
-static void ls1_msi_domain_irq_free(struct irq_domain *domain,
-				   unsigned int virq, unsigned int nr_irqs)
-{
-	struct irq_data *d = irq_domain_get_irq_data(domain, virq);
-	struct ls1_msi *msi_data = irq_data_get_irq_chip_data(d);
-	int pos;
-
-	pos = d->hwirq;
-	if (pos < 0 || pos >= msi_data->nr_irqs) {
-		pr_err("Failed to teardown msi. Invalid hwirq %d\n", pos);
-		return;
-	}
-
-	spin_lock(&msi_data->lock);
-	bitmap_release_region(msi_data->bm, pos, order_base_2(nr_irqs));
-	spin_unlock(&msi_data->lock);
-}
-
-static const struct irq_domain_ops ls1_msi_domain_parent_ops = {
-	.alloc			= ls1_msi_domain_irq_alloc,
-	.free			= ls1_msi_domain_irq_free,
-};
-
-static irqreturn_t ls1_msi_handler(int irq, void *arg)
-{
-	struct ls1_msi *msi_data = arg;
-	unsigned long val;
-	int pos, virq;
-	irqreturn_t ret = IRQ_NONE;
-
-	val = ioread32be(msi_data->msir);
-	pos = 0;
-
-	while ((pos = find_next_bit(&val, 32, pos)) != 32) {
-		virq = irq_find_mapping(msi_data->parent, 31 - pos);
-		if (virq != NO_IRQ) {
-			generic_handle_irq(virq);
-			ret = IRQ_HANDLED;
-		}
-		pos++;
-	}
-
-	return ret;
-}
-
-static irq_hw_number_t ls1_msi_domain_ops_get_hwirq(struct msi_domain_info *info,
-						msi_alloc_info_t *arg)
-{
-	struct ls1_msi *msi_data = container_of(info, struct ls1_msi, info);
-
-	arg->hwirq = find_first_zero_bit(msi_data->bm, msi_data->nr_irqs);
-
-	return arg->hwirq;
-}
-
-static void ls1_msi_domain_ops_free(struct irq_domain *domain,
-				    struct msi_domain_info *info,
-				    unsigned int virq)
-{
-	/* Nothing need to do */
-}
-
-static struct msi_domain_ops ls1_pci_msi_ops = {
-	.get_hwirq	= ls1_msi_domain_ops_get_hwirq,
-	.msi_free	= ls1_msi_domain_ops_free,
-};
-
-static int ls1_msi_chip_init(struct ls1_msi *msi_data)
-{
-	int ret;
-
-	/* Initialize MSI domain parent */
-	msi_data->parent = irq_domain_add_linear(msi_data->of_node,
-						 msi_data->nr_irqs,
-						 &ls1_msi_domain_parent_ops,
-						 msi_data);
-	if (!msi_data->parent) {
-		pr_err("MSI domain %s parent init failed\n", msi_data->name);
-		return -ENXIO;
-	}
-
-	/* Initialize MSI irq chip */
-	msi_data->chip.name = msi_data->name;
-
-	/* Initialize MSI domain info */
-	msi_data->info.flags = MSI_FLAG_USE_DEF_DOM_OPS |
-			       MSI_FLAG_USE_DEF_CHIP_OPS |
-			       MSI_FLAG_PCI_MSIX |
-			       MSI_FLAG_MULTI_PCI_MSI;
-	msi_data->info.chip = &msi_data->chip;
-	msi_data->info.ops = &ls1_pci_msi_ops;
-
-	/* Initialize MSI controller */
-	msi_data->mchip.of_node = msi_data->of_node;
-	msi_data->mchip.domain =
-			pci_msi_create_irq_domain(msi_data->of_node,
-						  &msi_data->info,
-						  msi_data->parent);
-
-	if (!msi_data->mchip.domain) {
-		pr_err("Failed to create MSI domain %s\n", msi_data->name);
-		ret = -ENOMEM;
-		goto _err;
-	}
-
-	ret = of_pci_msi_chip_add(&msi_data->mchip);
-	if (ret) {
-		pr_err("Failed to add msi_chip %s\n", msi_data->name);
-		goto _err;
-	}
-
-	return 0;
-
-_err:
-	if (msi_data->mchip.domain)
-		irq_domain_remove(msi_data->mchip.domain);
-	if (msi_data->parent)
-		irq_domain_remove(msi_data->parent);
-	return ret;
-}
-
-
-static int __init ls1_msi_probe(struct platform_device *pdev)
-{
-	struct ls1_msi *msi_data;
-	struct resource *res;
-	static int ls1_msi_idx;
-	int ret;
-
-	msi_data = devm_kzalloc(&pdev->dev, sizeof(*msi_data), GFP_KERNEL);
-	if (!msi_data) {
-		dev_err(&pdev->dev, "Failed to allocate struct ls1_msi.\n");
-		return -ENOMEM;
-	}
-
-	msi_data->of_node = pdev->dev.of_node;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!res) {
-		dev_err(&pdev->dev, "missing msiir.\n");
-		return -ENODEV;
-	}
-
-	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "msiir");
-	if (!res) {
-		dev_err(&pdev->dev, "missing *msiir* space\n");
-		return -ENODEV;
-	}
-
-	msi_data->msiir_addr = res->start;
-
-	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "msir");
-	if (!res) {
-		dev_err(&pdev->dev, "missing *msir* space\n");
-		return -ENODEV;
-	}
-
-	msi_data->msir = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(msi_data->msir))
-		return PTR_ERR(msi_data->msir);
-
-	msi_data->msi_irq = platform_get_irq(pdev, 0);
-	if (msi_data->msi_irq <= 0) {
-		dev_err(&pdev->dev, "failed to get MSI irq\n");
-		return -ENODEV;
-	}
-
-	msi_data->nr_irqs = MAX_MSI_IRQS;
-
-	msi_data->bm = devm_kzalloc(&pdev->dev, sizeof(long) *
-				    BITS_TO_LONGS(msi_data->nr_irqs),
-				    GFP_KERNEL);
-	if (!msi_data->bm)
-		ret = -ENOMEM;
-
-	ls1_msi_idx++;
-	snprintf(msi_data->name, sizeof(msi_data->name), "MSI%d", ls1_msi_idx);
-
-	spin_lock_init(&msi_data->lock);
-
-	ret = devm_request_irq(&pdev->dev, msi_data->msi_irq,
-			       ls1_msi_handler, IRQF_SHARED,
-			       msi_data->name, msi_data);
-	if (ret) {
-		dev_err(&pdev->dev, "failed to request MSI irq\n");
-		return -ENODEV;
-	}
-
-	return ls1_msi_chip_init(msi_data);
-}
-
-static struct of_device_id ls1_msi_id[] = {
-	{ .compatible = "fsl,ls1021a-msi", },
-	{ .compatible = "fsl,ls1043a-msi", },
-	{},
-};
-
-static struct platform_driver ls1_msi_driver = {
-	.driver = {
-		.name = "ls1-msi",
-		.of_match_table = ls1_msi_id,
-	},
-};
-
-module_platform_driver_probe(ls1_msi_driver, ls1_msi_probe);
-
-MODULE_AUTHOR("Minghuan Lian <Minghuan.Lian@freescale.com>");
-MODULE_DESCRIPTION("Freescale Layerscape 1 MSI controller driver");
-MODULE_LICENSE("GPL v2");
-- 
1.7.5.4

