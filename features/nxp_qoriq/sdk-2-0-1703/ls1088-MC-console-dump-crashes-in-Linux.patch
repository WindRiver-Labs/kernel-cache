From 2f3158bf16263430fd8b6f1c04bf766a75398d66 Mon Sep 17 00:00:00 2001
From: Catalin Horghidan <catalin.horghidan@nxp.com>
Date: Tue, 13 Sep 2016 19:48:41 +0300
Subject: [PATCH 377/508] ls1088: MC console dump crashes in Linux

Read the MC FW base address registers in order to compose
the console buffer start address

Signed-off-by: Catalin Horghidan <catalin.horghidan@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/soc/fsl/ls2-console/ls2-console.c |   30 +++++++++++++++++++++++++---
 1 files changed, 26 insertions(+), 4 deletions(-)

diff --git a/drivers/soc/fsl/ls2-console/ls2-console.c b/drivers/soc/fsl/ls2-console/ls2-console.c
index 3d5a7d6..9f9518d 100644
--- a/drivers/soc/fsl/ls2-console/ls2-console.c
+++ b/drivers/soc/fsl/ls2-console/ls2-console.c
@@ -1,4 +1,4 @@
-/* Copyright 2015 Freescale Semiconductor Inc.
+/* Copyright 2015-2016 Freescale Semiconductor Inc.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -38,9 +38,17 @@
 #include <linux/slab.h>
 #include <linux/io.h>
 
-/* MC and IOP character device to read from RAM */
+/* SoC address for the MC firmware base low/high registers */
+#define SOC_CCSR_MC_FW_BASE_ADDR_REGS 0x8340020
+#define SOC_CCSR_MC_FW_BASE_ADDR_REGS_SIZE 2
+/* MC firmware base low/high registers indexes */
+#define MCFBALR_OFFSET 0
+#define MCFBAHR_OFFSET 1
 
-#define MC_BASE_ADDR 0x83c0000000
+/* Bit mask used to obtain the most significant part of the MC base address */
+#define MC_FW_HIGH_ADDR_MASK 0x1FFFF
+/* Bit mask used to obtain the least significant part of the MC base address */
+#define MC_FW_LOW_ADDR_MASK 0xE0000000
 
 #define MC_BUFFER_OFFSET 0x01000000
 #define MC_BUFFER_SIZE (1024*1024*16)
@@ -91,6 +99,20 @@ static inline void adjust_end(struct console_data *cd)
 	__adjust_end(cd);
 }
 
+static inline uint64_t get_mc_fw_base_address(void)
+{
+	uint32_t *mcfbaregs =
+		(uint32_t *) ioremap(SOC_CCSR_MC_FW_BASE_ADDR_REGS,
+				    SOC_CCSR_MC_FW_BASE_ADDR_REGS_SIZE);
+	uint64_t mcfwbase = 0ULL;
+
+	mcfwbase  = readl(mcfbaregs + MCFBAHR_OFFSET) & MC_FW_HIGH_ADDR_MASK;
+	mcfwbase <<= 32;
+	mcfwbase |= readl(mcfbaregs + MCFBALR_OFFSET) & MC_FW_LOW_ADDR_MASK;
+	iounmap(mcfbaregs);
+	pr_info("fsl-ls2-console: MC base address at 0x%016llx\n", mcfwbase);
+	return mcfwbase;
+}
 
 static int fsl_ls2_generic_console_open(struct inode *node, struct file *fp,
 				u64 offset, u64 size,
@@ -105,7 +127,7 @@ static int fsl_ls2_generic_console_open(struct inode *node, struct file *fp,
 	if (cd == NULL)
 		return -ENOMEM;
 	fp->private_data = cd;
-	cd->map_addr = ioremap(MC_BASE_ADDR + offset, size);
+	cd->map_addr = ioremap(get_mc_fw_base_address() + offset, size);
 
 	cd->hdr = (struct log_header *) cd->map_addr;
 	invalidate(cd->hdr);
-- 
1.7.5.4

