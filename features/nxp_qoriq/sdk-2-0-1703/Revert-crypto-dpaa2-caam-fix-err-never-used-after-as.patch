From 915a1f7c815a3289570378b4b6c7da41c3a20039 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Wed, 11 Oct 2017 13:40:51 +0800
Subject: [PATCH 10/29] Revert "crypto: dpaa2-caam - fix 'err' never used
 after assignment"

This reverts commit 204c6d49e1827b91d9aa481eb81ba01330b4d721.

At first, dpaa2-caam patches are from nxp-sdk-2.0 that is based on
kernel4.1. But in kernel4.8, there is a obvious changing on crypto
software architecture, so modify code to pass compilation, but this
feature is not verified.
Now, there is an open source sdk that is based on kernel4.4. In
kernel4.4, crypto software architecture is almost the same with
kernel4.8, so we get dpaa2-caam patches from open source sdk, and
revert patches from nxp-sdk-2.0.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/dpaa2-caam/dpaa2-caam.c |   12 ++++++------
 1 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/crypto/dpaa2-caam/dpaa2-caam.c b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
index cbb1d7e..28afbb6 100644
--- a/drivers/crypto/dpaa2-caam/dpaa2-caam.c
+++ b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
@@ -5202,8 +5202,8 @@ static int dpaa2_caam_probe(struct fsl_mc_device *dpseci_dev)
 		t_alg = caam_alg_alloc(priv, &driver_algs[i]);
 		if (IS_ERR(t_alg)) {
 			err = PTR_ERR(t_alg);
-			dev_warn(dev, "%s alg allocation failed: %d\n",
-				 driver_algs[i].driver_name, err);
+			dev_warn(dev, "%s alg allocation failed\n",
+				 driver_algs[i].driver_name);
 			continue;
 		}
 
@@ -5228,8 +5228,8 @@ static int dpaa2_caam_probe(struct fsl_mc_device *dpseci_dev)
 		t_hash_alg = caam_hash_alloc(priv, &driver_hash[i], true);
 		if (IS_ERR(t_hash_alg)) {
 			err = PTR_ERR(t_hash_alg);
-			dev_warn(dev, "%s hash alg allocation failed: %d\n",
-				 driver_hash[i].driver_name, err);
+			dev_warn(dev, "%s hash alg allocation failed\n",
+				 driver_hash[i].driver_name);
 			continue;
 		}
 
@@ -5246,8 +5246,8 @@ static int dpaa2_caam_probe(struct fsl_mc_device *dpseci_dev)
 		t_hash_alg = caam_hash_alloc(priv, &driver_hash[i], false);
 		if (IS_ERR(t_hash_alg)) {
 			err = PTR_ERR(t_hash_alg);
-			dev_warn(dev, "%s alg allocation failed: %d\n",
-				 driver_hash[i].driver_name, err);
+			dev_warn(dev, "%s alg allocation failed\n",
+				 driver_hash[i].driver_name);
 			continue;
 		}
 
-- 
1.7.5.4

