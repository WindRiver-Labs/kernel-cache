From 5a2a089e77c1ca46f46834b139d135ccbd12cac0 Mon Sep 17 00:00:00 2001
From: Roy Pledge <roy.pledge@nxp.com>
Date: Wed, 21 Dec 2016 16:18:54 -0500
Subject: [PATCH 332/508] fsl_qbman: Use 32 bit registers for wrap workaround

Use 32 bit registers for the QBMan wrap transaction workaround so that
both 32 bit and 64 bit targets are supported

Signed-off-by: Roy Pledge <roy.pledge@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index d93f5e0..36e7c52 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -1163,12 +1163,12 @@ static inline void safe_copy_dqrr(struct qm_dqrr_entry *dst,
 	*d64 = *s64;
 #if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 	{
-		u64 res, zero = 0;
+		u32 res, zero = 0;
 		/* Create a dependancy after copying first bytes ensures no wrap
 		   transaction generated to QBMan */
 		/* Logical AND the value pointed to by s64 with 0x0 and
 		   store the result in res */
-		asm volatile("and %x[result], %x[in1], %x[in2]"
+		asm volatile("and %[result], %[in1], %[in2]"
 			     : [result] "=r" (res)
 			     : [in1] "r" (zero), [in2] "r" (*s64)
 			     : "memory");
@@ -1177,7 +1177,7 @@ static inline void safe_copy_dqrr(struct qm_dqrr_entry *dst,
 		   effect of this is that the core must stall until the first
 		   aligned read is complete therefore preventing a WRAP
 		   transaction to be seen by the QBMan */
-		asm volatile("add %x[result], %x[in1], %x[in2]"
+		asm volatile("add %[result], %[in1], %[in2]"
 			     : [result] "=r" (s64)
 			     : [in1] "r" (res), [in2] "r" (s64)
 			     : "memory");
-- 
1.7.5.4

