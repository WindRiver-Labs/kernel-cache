From 7f7e14a6ffa82815358042d43faeda8b9799015c Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Wed, 11 Oct 2017 13:47:40 +0800
Subject: [PATCH 20/29] Revert "crypto: dpaa2-caam - fix dequeue context"

This reverts commit 94cb16d1a1aca461e5f3a2a1bbdaef89f66ec423.

At first, dpaa2-caam patches are from nxp-sdk-2.0 that is based on
kernel4.1. But in kernel4.8, there is a obvious changing on crypto
software architecture, so modify code to pass compilation, but this
feature is not verified.
Now, there is an open source sdk that is based on kernel4.4. In
kernel4.4, crypto software architecture is almost the same with
kernel4.8, so we get dpaa2-caam patches from open source sdk, and
revert patches from nxp-sdk-2.0.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/dpaa2-caam/dpaa2-caam.c |   32 +++++++++++++++++++++++---------
 1 files changed, 23 insertions(+), 9 deletions(-)

diff --git a/drivers/crypto/dpaa2-caam/dpaa2-caam.c b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
index 40ea214..6d5a94b 100644
--- a/drivers/crypto/dpaa2-caam/dpaa2-caam.c
+++ b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
@@ -4852,6 +4852,7 @@ static void dpaa2_caam_process_fd(struct dpaa2_caam_priv *priv,
 				  const struct dpaa2_fd *fd)
 {
 	struct caam_request *req;
+	dma_addr_t rflc_dma;
 	u32 err;
 
 	if (dpaa2_fd_get_format(fd) != dpaa2_fd_list) {
@@ -4869,9 +4870,11 @@ static void dpaa2_caam_process_fd(struct dpaa2_caam_priv *priv,
 		caam_jr_strstatus(priv->dev, err);
 	}
 
-	req = phys_to_virt(dma_to_phys(priv->dev, dpaa2_fd_get_addr(fd)));
+	rflc_dma = dpaa2_fd_get_flc(fd);
+	req = phys_to_virt(dma_to_phys(priv->dev, rflc_dma));
+	dma_unmap_single(priv->dev, rflc_dma, sizeof(*req), DMA_TO_DEVICE);
 	dma_unmap_single(priv->dev, req->fd_flt_dma, sizeof(req->fd_flt),
-			 DMA_TO_DEVICE);
+			 DMA_BIDIRECTIONAL);
 	req->cbk(req->ctx, err);
 }
 
@@ -5277,8 +5280,10 @@ static int __cold dpaa2_caam_remove(struct fsl_mc_device *ls_dev)
 
 int dpaa2_caam_enqueue(struct device *dev, struct caam_request *req)
 {
+	size_t size;
 	struct dpaa2_fd fd;
 	struct dpaa2_caam_priv *priv = dev_get_drvdata(dev);
+	dma_addr_t rflc_dma;
 	int err, i;
 
 	if (IS_ERR(req))
@@ -5286,11 +5291,12 @@ int dpaa2_caam_enqueue(struct device *dev, struct caam_request *req)
 
 	dpaa2_fl_set_flc(&req->fd_flt[1], req->flc_dma);
 
-	req->fd_flt_dma = dma_map_single(dev, req->fd_flt, sizeof(req->fd_flt),
-					 DMA_TO_DEVICE);
+	size = sizeof(req->fd_flt);
+	req->fd_flt_dma = dma_map_single(dev, req->fd_flt, size,
+					 DMA_BIDIRECTIONAL);
 	if (dma_mapping_error(dev, req->fd_flt_dma)) {
 		dev_err(dev, "DMA mapping error for QI enqueue request\n");
-		goto err_out;
+		return -EIO;
 	}
 
 	memset(&fd, 0, sizeof(fd));
@@ -5299,7 +5305,14 @@ int dpaa2_caam_enqueue(struct device *dev, struct caam_request *req)
 	dpaa2_fd_set_len(&fd, req->fd_flt[1].len);
 	dpaa2_fd_set_flc(&fd, req->flc_dma);
 
+	rflc_dma = dma_map_single(dev, req, sizeof(*req), DMA_TO_DEVICE);
+	if (dma_mapping_error(dev, rflc_dma)) {
+		dev_err(dev, "DMA mapping error for response FLC\n");
+		goto err_rflc_dma;
+	}
 	req->flc->flc[1] = desc_len(req->flc->sh_desc); /* SDL */
+	req->flc->flc[2] = lower_32_bits(rflc_dma); /* RFLC_LO */
+	req->flc->flc[3] = upper_32_bits(rflc_dma); /* RFLC_HI */
 	dma_sync_single_for_device(dev, req->flc_dma,
 				   sizeof(req->flc->flc) +
 				   desc_bytes(req->flc->sh_desc),
@@ -5316,14 +5329,15 @@ int dpaa2_caam_enqueue(struct device *dev, struct caam_request *req)
 
 	if (unlikely(err < 0)) {
 		dev_err(dev, "Error enqueuing frame\n");
-		goto err_out;
+		goto err_enq;
 	}
 
 	return -EINPROGRESS;
 
-err_out:
-	dma_unmap_single(dev, req->fd_flt_dma, sizeof(req->fd_flt),
-			 DMA_TO_DEVICE);
+err_enq:
+	dma_unmap_single(dev, rflc_dma, sizeof(*req), DMA_TO_DEVICE);
+err_rflc_dma:
+	dma_unmap_single(dev, req->fd_flt_dma, size, DMA_BIDIRECTIONAL);
 	return -EIO;
 }
 EXPORT_SYMBOL(dpaa2_caam_enqueue);
-- 
1.7.5.4

