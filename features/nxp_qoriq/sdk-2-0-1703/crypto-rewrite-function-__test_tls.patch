From a03770408070ca6a738219a0eb7af9f667596767 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Tue, 10 Oct 2017 19:05:47 +0800
Subject: [PATCH 38/38] crypto: rewrite function __test_tls()

Because of getting dpaa-caam patches from nxp open source sdk,
kernel version is v4.4(https://github.com/qoriq-open-source/linux.git),
it is need to rewrite the test function __test_tls() so that this test
function
is compatible with code from kernel v4.4.
Therefore, refer to __test_tls() in kernel v4.4, rewrite it in kernel
4.8.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 crypto/testmgr.c |  105 +++++++++++++++++++++++++++++++++---------------------
 1 files changed, 64 insertions(+), 41 deletions(-)

diff --git a/crypto/testmgr.c b/crypto/testmgr.c
index e55a0a3..3b64778 100644
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@ -993,47 +993,55 @@ static int test_aead(struct crypto_aead *tfm, int enc,
 }
 
 static int __test_tls(struct crypto_aead *tfm, int enc,
-		       struct tls_testvec *template, unsigned int tcount,
-		       const bool diff_dst)
+		      struct tls_testvec *template, unsigned int tcount,
+		      const bool diff_dst)
 {
 	const char *algo = crypto_tfm_alg_driver_name(crypto_aead_tfm(tfm));
-	unsigned int i, rlen;
-	int ret = -ENOMEM;
+	unsigned int i, k, authsize;
 	char *q;
-	char *key;
 	struct aead_request *req;
 	struct scatterlist *sg;
-	struct scatterlist *asg;
 	struct scatterlist *sgout;
 	const char *e, *d;
 	struct tcrypt_result result;
 	void *input;
 	void *output;
 	void *assoc;
-	char iv[MAX_IVLEN];
+	char *iv;
+	char *key;
 	char *xbuf[XBUFSIZE];
 	char *xoutbuf[XBUFSIZE];
 	char *axbuf[XBUFSIZE];
+	int ret = -ENOMEM;
 
 	if (testmgr_alloc_buf(xbuf))
 		goto out_noxbuf;
-	if (testmgr_alloc_buf(axbuf))
-		goto out_noaxbuf;
 
 	if (diff_dst && testmgr_alloc_buf(xoutbuf))
 		goto out_nooutbuf;
 
-	sg = kmalloc(sizeof(*sg) * 8 * (diff_dst ? 3 : 2), GFP_KERNEL);
+	if (testmgr_alloc_buf(axbuf))
+		goto out_noaxbuf;
+
+	iv = kzalloc(MAX_IVLEN, GFP_KERNEL);
+	if (!iv)
+		goto out_noiv;
+
+	key = kzalloc(MAX_KEYLEN, GFP_KERNEL);
+	if (!key)
+		goto out_nokey;
+
+	sg = kmalloc(sizeof(*sg) * 8 * (diff_dst ? 2 : 1), GFP_KERNEL);
 	if (!sg)
 		goto out_nosg;
 
-	asg = sg + 8;
-	sgout = sg + 16;
+	sgout = sg + 8;
 
 	d = diff_dst ? "-ddst" : "";
 	e = enc ? "encryption" : "decryption";
 
 	init_completion(&result.completion);
+
 	req = aead_request_alloc(tfm, GFP_KERNEL);
 	if (!req) {
 		pr_err("alg: tls%s: Failed to allocate request for %s\n",
@@ -1053,44 +1061,61 @@ static int __test_tls(struct crypto_aead *tfm, int enc,
 			    template[i].alen > PAGE_SIZE))
 			goto out;
 
-		memcpy(input, template[i].input, template[i].ilen);
 		memcpy(assoc, template[i].assoc, template[i].alen);
+		memcpy(input, template[i].input, template[i].ilen);
+
 		if (template[i].iv)
 			memcpy(iv, template[i].iv, MAX_IVLEN);
 		else
 			memset(iv, 0, MAX_IVLEN);
 
 		crypto_aead_clear_flags(tfm, ~0);
-		key = template[i].key;
+
+		if (template[i].klen > MAX_KEYLEN) {
+			pr_err("alg: aead%s: setkey failed on test %d for %s: key size %d > %d\n",
+			       d, i, algo, template[i].klen, MAX_KEYLEN);
+			ret = -EINVAL;
+			goto out;
+		}
+		memcpy(key, template[i].key, template[i].klen);
 
 		ret = crypto_aead_setkey(tfm, key, template[i].klen);
 		if (template[i].fail == !ret) {
 			pr_err("alg: tls%s: setkey failed on test %d for %s: flags=%x\n",
 			       d, i, algo, crypto_aead_get_flags(tfm));
 			goto out;
-		}
-		if (ret)
+		} else if (ret)
 			continue;
 
-		/* Allocate enough space in the input and output scatterlists.
-		 * They must accomodate the result for in-place encryption and
-		 * different-place decryption
-		 */
-		rlen = max(template[i].ilen, template[i].rlen);
+		authsize = 20;
+		ret = crypto_aead_setauthsize(tfm, authsize);
+		if (ret) {
+			pr_err("alg: aead%s: Failed to set authsize to %u on test %d for %s\n",
+			       d, authsize, i, algo);
+			goto out;
+		}
+
+		k = !!template[i].alen;
+		sg_init_table(sg, k + 1);
+		sg_set_buf(&sg[0], assoc, template[i].alen);
+		sg_set_buf(&sg[k], input, (enc ? template[i].rlen :
+					   template[i].ilen));
+		output = input;
+
 		if (diff_dst) {
+			sg_init_table(sgout, k + 1);
+			sg_set_buf(&sgout[0], assoc, template[i].alen);
+
 			output = xoutbuf[0];
-			sg_init_one(&sg[0], input, template[i].ilen);
-			sg_init_one(&sgout[0], output, rlen);
-		} else {
-			output = input;
-			sg_init_one(&sg[0], input, rlen);
+			sg_set_buf(&sgout[k], output,
+				   (enc ? template[i].rlen : template[i].ilen));
 		}
 
-		sg_init_one(&asg[0], assoc, template[i].alen);
-		aead_request_set_ad(req, template[i].alen);
 		aead_request_set_crypt(req, sg, (diff_dst) ? sgout : sg,
 				       template[i].ilen, iv);
 
+		aead_request_set_ad(req, template[i].alen);
+
 		ret = enc ? crypto_aead_encrypt(req) : crypto_aead_decrypt(req);
 
 		switch (ret) {
@@ -1106,18 +1131,11 @@ static int __test_tls(struct crypto_aead *tfm, int enc,
 			break;
 		case -EINPROGRESS:
 		case -EBUSY:
-			/* The result is not ready yet. We wait for it and then
-			 * check if the request succeeded or not
-			 */
-			ret = wait_for_completion_interruptible(
-						&result.completion);
-			if (!ret && !result.err) {
-				reinit_completion(&result.completion);
+			wait_for_completion(&result.completion);
+			reinit_completion(&result.completion);
+			ret = result.err;
+			if (!ret)
 				break;
-			} else {
-				ret = result.err;
-			}
-			/* fall through */
 		case -EBADMSG:
 			/* verification failure was expected */
 			if (template[i].novrfy)
@@ -1143,13 +1161,18 @@ static int __test_tls(struct crypto_aead *tfm, int enc,
 
 out:
 	aead_request_free(req);
+
 	kfree(sg);
 out_nosg:
+	kfree(key);
+out_nokey:
+	kfree(iv);
+out_noiv:
+	testmgr_free_buf(axbuf);
+out_noaxbuf:
 	if (diff_dst)
 		testmgr_free_buf(xoutbuf);
 out_nooutbuf:
-	testmgr_free_buf(axbuf);
-out_noaxbuf:
 	testmgr_free_buf(xbuf);
 out_noxbuf:
 	return ret;
-- 
1.7.5.4

