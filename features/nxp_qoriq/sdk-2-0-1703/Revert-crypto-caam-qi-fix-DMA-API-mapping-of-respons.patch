From 5cb5ebb292c2267ddf44ca836b2e2b04edec7364 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Wed, 20 Sep 2017 16:37:41 +0800
Subject: [PATCH 06/73] Revert "crypto: caam/qi - fix DMA API mapping of
 response FQs"

This reverts commit 4fbe731fb5ad64acbbfa32c6de8caa2b44714c50.

This patch is from nxp-sdk-2.0, it is based on kernel4.1.
So far, there is related code that includes this patch in mainline.
So, get patch from upstream.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/caam/qi.c |   32 +++++++-------------------------
 1 files changed, 7 insertions(+), 25 deletions(-)

diff --git a/drivers/crypto/caam/qi.c b/drivers/crypto/caam/qi.c
index f80cbd7..2737c1b 100644
--- a/drivers/crypto/caam/qi.c
+++ b/drivers/crypto/caam/qi.c
@@ -54,7 +54,7 @@ struct caam_napi {
 struct caam_qi_pcpu_priv {
 	struct caam_napi caam_napi;
 	struct net_device net_dev;	/* netdev used by NAPI */
-	struct qman_fq *rsp_fq;		/* Response FQ from CAAM */
+	struct qman_fq rsp_fq;		/* Response FQ from CAAM */
 } ____cacheline_aligned;
 
 static DEFINE_PER_CPU(struct caam_qi_pcpu_priv, pcpu_qipriv);
@@ -425,6 +425,7 @@ struct caam_drv_ctx *caam_drv_ctx_init(struct device *qidev,
 	size_t size;
 	u32 num_words;
 	dma_addr_t hwdesc;
+	struct qman_fq *rsp_fq;
 	struct caam_drv_ctx *drv_ctx;
 	const cpumask_t *cpus = qman_affine_cpus();
 	static DEFINE_PER_CPU(int, last_cpu);
@@ -475,10 +476,11 @@ struct caam_drv_ctx *caam_drv_ctx_init(struct device *qidev,
 	drv_ctx->cpu = *cpu;
 
 	/* Find response FQ hooked with this CPU*/
-	drv_ctx->rsp_fq = per_cpu(pcpu_qipriv.rsp_fq, drv_ctx->cpu);
+	rsp_fq = &per_cpu(pcpu_qipriv.rsp_fq, drv_ctx->cpu);
+	drv_ctx->rsp_fq = rsp_fq;
 
 	/*Attach request FQ*/
-	drv_ctx->req_fq = create_caam_req_fq(qidev, drv_ctx->rsp_fq,
+	drv_ctx->req_fq = create_caam_req_fq(qidev, rsp_fq,
 					     hwdesc, QMAN_INITFQ_FLAG_SCHED);
 	if (unlikely(IS_ERR_OR_NULL(drv_ctx->req_fq))) {
 		dev_err(qidev, "create_caam_req_fq failed\n");
@@ -555,10 +557,8 @@ int caam_qi_shutdown(struct device *qidev)
 		napi_disable(irqtask);
 		netif_napi_del(irqtask);
 
-		if (kill_fq(qidev, per_cpu(pcpu_qipriv.rsp_fq, i)))
+		if (kill_fq(qidev, &per_cpu(pcpu_qipriv.rsp_fq, i)))
 			dev_err(qidev, "Rsp FQ kill failed, cpu: %d\n", i);
-
-		kfree(per_cpu(pcpu_qipriv.rsp_fq, i));
 	}
 
 	/*
@@ -664,9 +664,7 @@ static int alloc_rsp_fq_cpu(struct device *qidev, unsigned int cpu)
 	int ret;
 	u32 flags;
 
-	fq = kzalloc(sizeof(*fq), GFP_KERNEL | GFP_DMA);
-	if (!fq)
-		return -ENOMEM;
+	fq = &per_cpu(pcpu_qipriv.rsp_fq, cpu);
 
 	fq->cb.dqrr = caam_rsp_fq_dqrr_cb;
 
@@ -675,7 +673,6 @@ static int alloc_rsp_fq_cpu(struct device *qidev, unsigned int cpu)
 	ret = qman_create_fq(0, flags, fq);
 	if (ret) {
 		dev_err(qidev, "Rsp FQ create failed\n");
-		kfree(fq);
 		return -ENODEV;
 	}
 
@@ -702,12 +699,8 @@ static int alloc_rsp_fq_cpu(struct device *qidev, unsigned int cpu)
 	ret = qman_init_fq(fq, flags, &opts);
 	if (ret) {
 		dev_err(qidev, "Rsp FQ init failed\n");
-		kfree(fq);
 		return -ENODEV;
 	}
-
-	per_cpu(pcpu_qipriv.rsp_fq, cpu) = fq;
-
 #ifdef DEBUG
 	dev_info(qidev, "Allocated response FQ %u for CPU %u",
 		 fq->fqid, cpu);
@@ -783,15 +776,6 @@ static int alloc_rsp_fqs(struct device *qidev)
 	return 0;
 }
 
-static void free_rsp_fqs(void)
-{
-	const cpumask_t *cpus = qman_affine_cpus();
-	int i;
-
-	for_each_cpu(i, cpus)
-		kfree(per_cpu(pcpu_qipriv.rsp_fq, i));
-}
-
 int caam_qi_init(struct platform_device *caam_pdev, struct device_node *np)
 {
 	struct platform_device *qi_pdev;
@@ -852,7 +836,6 @@ int caam_qi_init(struct platform_device *caam_pdev, struct device_node *np)
 	err = alloc_rsp_fqs(qidev);
 	if (err) {
 		dev_err(qidev, "Can't allocate SEC response FQs\n");
-		free_rsp_fqs();
 		platform_device_unregister(qi_pdev);
 		return err;
 	}
@@ -883,7 +866,6 @@ int caam_qi_init(struct platform_device *caam_pdev, struct device_node *np)
 				     SLAB_CACHE_DMA, NULL);
 	if (!qi_cache) {
 		dev_err(qidev, "Can't allocate SEC cache\n");
-		free_rsp_fqs();
 		platform_device_unregister(qi_pdev);
 		return err;
 	}
-- 
1.7.5.4

