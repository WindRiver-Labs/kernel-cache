From db09421d8779910633f4dcbe5266054135a2b73a Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@nxp.com>
Date: Fri, 28 Oct 2016 10:48:00 +0300
Subject: [PATCH 277/508] dpaa_eth: rework runtime support for erratum A010022

Address both ARM 64 bit and 32 bit configurations.
Simplify the codebase, add explicit erratum name.

Signed-off-by: Madalin Bucur <madalin.bucur@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c |   40 +++++++----
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h |   36 +++-------
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_common.h  |    7 +-
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_generic.c |   12 ---
 .../net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c  |   75 ++++++++------------
 5 files changed, 70 insertions(+), 100 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
index 50b1676..0902280 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
@@ -57,6 +57,7 @@
 #include <linux/percpu.h>
 #include <linux/dma-mapping.h>
 #include <linux/fsl_bman.h>
+#include <linux/sys_soc.h>      /* soc_device_match */
 
 #include "fsl_fman.h"
 #include "fm_ext.h"
@@ -102,9 +103,9 @@ static const char rtx[][3] = {
 	[TX] = "TX"
 };
 
-#ifdef CONFIG_ARM64
-bool dpa_4k_issue;
-EXPORT_SYMBOL(dpa_4k_issue);
+#ifndef CONFIG_PPC
+bool dpaa_errata_a010022;
+EXPORT_SYMBOL(dpaa_errata_a010022);
 #endif
 
 /* BM */
@@ -959,19 +960,16 @@ dpaa_eth_priv_probe(struct platform_device *_of_dev)
 	 * buffer pool, based on FMan port buffer layout;also update
 	 * the maximum buffer size for private ports if necessary
 	 */
-#ifdef CONFIG_FSL_DPAA_ETH_JUMBO_FRAME
-	/* On LS1043 we do not allow large buffers due to the 4K errata. */
-	if (unlikely(dpa_4k_errata))
-		dpa_bp->size = dpa_4k_bp_size(&buf_layout[RX]);
-	else
-#endif
-		dpa_bp->size = dpa_bp_size(&buf_layout[RX]);
+	dpa_bp->size = dpa_bp_size(&buf_layout[RX]);
 
 #ifdef CONFIG_FSL_DPAA_ETH_JUMBO_FRAME
 	/* We only want to use jumbo frame optimization if we actually have
 	 * L2 MAX FRM set for jumbo frames as well.
 	 */
-	if (likely(!dpa_4k_errata) && fm_get_max_frm() < 9600)
+#ifndef CONFIG_PPC
+	if (likely(!dpaa_errata_a010022))
+#endif
+	if(fm_get_max_frm() < 9600)
 		dev_warn(dev,
 			"Invalid configuration: if jumbo frames support is on, FSL_FM_MAX_FRAME_SIZE should be set to 9600\n");
 #endif
@@ -1145,6 +1143,22 @@ static struct platform_driver dpa_driver = {
 	.remove		= dpa_remove
 };
 
+#ifndef CONFIG_PPC
+static bool __init __cold soc_has_errata_a010022(void)
+{
+	const struct soc_device_attribute soc_msi_matches[] = {
+		{ .family = "QorIQ LS1043A",
+		  .data = NULL },
+		{ },
+	};
+
+	if (soc_device_match(soc_msi_matches))
+		return true;
+
+	return false;
+}
+#endif
+
 static int __init __cold dpa_load(void)
 {
 	int	 _errno;
@@ -1160,9 +1174,9 @@ static int __init __cold dpa_load(void)
 	dpa_max_frm = fm_get_max_frm();
 	dpa_num_cpus = num_possible_cpus();
 
-#ifdef CONFIG_ARM64
+#ifndef CONFIG_PPC
 	/* Detect if the current SoC requires the 4K alignment workaround */
-	dpa_4k_issue = check_4k_issue_soc();
+	dpaa_errata_a010022 = soc_has_errata_a010022();
 #endif
 
 #ifdef CONFIG_FSL_DPAA_DBG_LOOP
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
index 4366358..8bfd779 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
@@ -34,7 +34,6 @@
 
 #include <linux/netdevice.h>
 #include <linux/fsl_qman.h>	/* struct qman_fq */
-#include <linux/sys_soc.h>	/* soc_device_match */
 
 #include "fm_ext.h"
 #include "dpaa_eth_trace.h"
@@ -99,15 +98,15 @@ struct dpa_buffer_layout_s {
  * space to account for further alignments.
  */
 #define DPA_MAX_FRM_SIZE	9600
+#ifdef PPC
 #define DPA_BP_RAW_SIZE \
 	((DPA_MAX_FRM_SIZE + DPA_MAX_FD_OFFSET + \
 	  sizeof(struct skb_shared_info) + 128) & ~(SMP_CACHE_BYTES - 1))
-#ifdef CONFIG_ARM64
-/* On LS1043 we do not use Jumbo and large buffers due to the 4K errata */
-#define DPA_BP_RAW_SIZE_4K	2048
-#define dpa_4k_bp_size(buffer_layout)	(SKB_WITH_OVERHEAD(DPA_BP_RAW_SIZE_4K) - \
-						SMP_CACHE_BYTES)
-#endif /* CONFIG_ARM64 */
+#else /* CONFIG_PPC */
+#define DPA_BP_RAW_SIZE ((unlikely(dpaa_errata_a010022)) ? 2048 : \
+	((DPA_MAX_FRM_SIZE + DPA_MAX_FD_OFFSET + \
+	  sizeof(struct skb_shared_info) + 128) & ~(SMP_CACHE_BYTES - 1)))
+#endif /* CONFIG_PPC */
 #endif /* CONFIG_FSL_DPAA_ETH_JUMBO_FRAME */
 
 /* This is what FMan is ever allowed to use.
@@ -686,30 +685,13 @@ static inline void _dpa_bp_free_pf(void *addr)
  * than 4K or that exceed 4K alignments.
  */
 
-#ifdef CONFIG_ARM64
-/* Detect the SoC at runtime */
-static inline bool check_4k_issue_soc(void)
-{
-	const struct soc_device_attribute soc_msi_matches[] = {
-		{ .family = "QorIQ LS1043A",
-		  .data = NULL },
-		{ },
-	};
-
-	if (soc_device_match(soc_msi_matches))
-		return true;
-
-	return false;
-}
+#ifndef CONFIG_PPC
+extern bool dpaa_errata_a010022; /* SoC affected by A010022 errata */
 
-extern bool dpa_4k_issue;
-#define dpa_4k_errata	dpa_4k_issue
 #define HAS_DMA_ISSUE(start, size) \
 	(((u64)(start) ^ ((u64)(start) + (u64)(size))) & ~0xFFF)
 #define BOUNDARY_4K(start, size) (((u64)(start) + (u64)(size)) & ~0xFFF)
 
-#else
-#define dpa_4k_errata	false
-#endif  /* CONFIG_ARM64 */
+#endif  /* !CONFIG_PPC */
 
 #endif	/* __DPA_H */
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h
index 8a41c16..4706e90 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h
@@ -58,11 +58,10 @@
 #define DPA_SGT_MAX_ENTRIES 16 /* maximum number of entries in SG Table */
 
 #define DPA_SGT_ENTRIES_THRESHOLD	DPA_SGT_MAX_ENTRIES
-#ifdef CONFIG_ARM64
-/* each S/G entry can be divided into two S/G entries */
+#ifndef CONFIG_PPC
+/* each S/G entry can be divided into two S/G entries during errata W/A */
 #define DPA_SGT_4K_ENTRIES_THRESHOLD	7
-#endif /* CONFIG_ARM64 */
-
+#endif
 
 #define DPA_BUFF_RELEASE_MAX 8 /* maximum number of buffers released at once */
 
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_generic.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_generic.c
index f206b639..1fdde61 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_generic.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_generic.c
@@ -1212,12 +1212,6 @@ static int dpa_generic_tx_bp_probe(struct platform_device *_of_dev,
 		return -ENOMEM;
 	}
 
-#ifdef CONFIG_FSL_DPAA_ETH_JUMBO_FRAME
-	/* On LS1043 we do not allow large buffers due to the 4K errata. */
-	if (unlikely(dpa_4k_errata))
-		bp->size = dpa_4k_bp_size(buf_layout);
-	else
-#endif
 	bp->size = dpa_bp_size(buf_layout);
 	bp->percpu_count = devm_alloc_percpu(dev, *bp->percpu_count);
 	bp->target_count = CONFIG_FSL_DPAA_ETH_MAX_BUF_COUNT;
@@ -1230,12 +1224,6 @@ static int dpa_generic_tx_bp_probe(struct platform_device *_of_dev,
 		return -ENOMEM;
 	}
 
-#ifdef CONFIG_FSL_DPAA_ETH_JUMBO_FRAME
-	/* On LS1043 we do not allow large buffers due to the 4K errata. */
-	if (unlikely(dpa_4k_errata))
-		bp_sg->size = dpa_4k_bp_size(buf_layout);
-	else
-#endif
 	bp_sg->size = dpa_bp_size(buf_layout);
 	bp_sg->percpu_count = alloc_percpu(*bp_sg->percpu_count);
 	bp_sg->target_count = CONFIG_FSL_DPAA_ETH_MAX_BUF_COUNT;
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
index fcff75e..b9fcdf8 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
@@ -99,15 +99,13 @@ static int _dpa_bp_add_8_bufs(const struct dpa_bp *dpa_bp)
 		 * We only need enough space to store a pointer, but allocate
 		 * an entire cacheline for performance reasons.
 		 */
-#ifdef CONFIG_ARM64
-		if (unlikely(dpa_4k_errata))
+#ifndef CONFIG_PPC
+		if (unlikely(dpaa_errata_a010022))
 			new_buf = page_address(alloc_page(GFP_ATOMIC));
 		else
-			new_buf = netdev_alloc_frag(SMP_CACHE_BYTES +
-						    DPA_BP_RAW_SIZE);
-#else
-		new_buf = netdev_alloc_frag(SMP_CACHE_BYTES + DPA_BP_RAW_SIZE);
 #endif
+		new_buf = netdev_alloc_frag(SMP_CACHE_BYTES + DPA_BP_RAW_SIZE);
+
 		if (unlikely(!new_buf))
 			goto netdev_alloc_failed;
 		new_buf = PTR_ALIGN(new_buf + SMP_CACHE_BYTES, SMP_CACHE_BYTES);
@@ -243,25 +241,21 @@ struct sk_buff *_dpa_cleanup_tx_fd(const struct dpa_priv_s *priv,
 	if (unlikely(fd->format == qm_fd_sg)) {
 		nr_frags = skb_shinfo(skb)->nr_frags;
 
-#ifdef CONFIG_ARM64
+#ifndef CONFIG_PPC
 /* addressing the 4k DMA issue can yield a larger number of fragments than
  * the skb had
  */
-		if (unlikely(dpa_4k_errata))
+		if (unlikely(dpaa_errata_a010022))
 			dma_unmap_single(dpa_bp->dev, addr, dpa_fd_offset(fd) +
 					 sizeof(struct qm_sg_entry) *
 					 DPA_SGT_MAX_ENTRIES,
 					 dma_dir);
 		else
-			dma_unmap_single(dpa_bp->dev, addr, dpa_fd_offset(fd) +
-					 sizeof(struct qm_sg_entry) *
-					 (1 + nr_frags),
-					 dma_dir);
-#else
+#endif
 		dma_unmap_single(dpa_bp->dev, addr, dpa_fd_offset(fd) +
 				 sizeof(struct qm_sg_entry) * (1 + nr_frags),
 				 dma_dir);
-#endif
+
 		/* The sgt buffer has been allocated with netdev_alloc_frag(),
 		 * it's from lowmem.
 		 */
@@ -285,8 +279,8 @@ struct sk_buff *_dpa_cleanup_tx_fd(const struct dpa_priv_s *priv,
 		sg_addr = qm_sg_addr(&sgt[0]);
 		sg_len = qm_sg_entry_get_len(&sgt[0]);
 		dma_unmap_single(dpa_bp->dev, sg_addr, sg_len, dma_dir);
-#ifdef CONFIG_ARM64
-		if (unlikely(dpa_4k_errata)) {
+#ifndef CONFIG_PPC
+		if (unlikely(dpaa_errata_a010022)) {
 			i = 1;
 			do {
 				DPA_BUG_ON(qm_sg_entry_get_ext(&sgt[i]));
@@ -425,15 +419,13 @@ static struct sk_buff *__hot contig_fd_to_skb(const struct dpa_priv_s *priv,
 	 * warn us that the frame length is larger than the truesize. We
 	 * bypass the warning.
 	 */
-#ifdef CONFIG_ARM64
-	/* We do not support Jumbo frames on LS1043 and thus we do not edit
-	 * the skb truesize when the 4k errata is present.
+#ifndef CONFIG_PPC
+	/* We do not support Jumbo frames on LS1043 and thus we edit
+	 * the skb truesize only when the 4k errata is not present.
 	 */
-	if (likely(!dpa_4k_errata))
-		skb->truesize = SKB_TRUESIZE(dpa_fd_length(fd));
-#else
-	skb->truesize = SKB_TRUESIZE(dpa_fd_length(fd));
+	if (likely(!dpaa_errata_a010022))
 #endif
+	skb->truesize = SKB_TRUESIZE(dpa_fd_length(fd));
 #endif
 
 	DPA_BUG_ON(fd_off != priv->rx_headroom);
@@ -795,7 +787,7 @@ int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 	struct net_device *net_dev = priv->net_dev;
 	int sg_len;
 	int err;
-#ifdef CONFIG_ARM64
+#ifndef CONFIG_PPC
 	dma_addr_t boundary;
 	int k;
 #endif
@@ -809,8 +801,8 @@ int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 	const int nr_frags = skb_shinfo(skb)->nr_frags;
 
 	fd->format = qm_fd_sg;
-#ifdef CONFIG_ARM64
-	if (unlikely(dpa_4k_errata)) {
+#ifndef CONFIG_PPC
+	if (unlikely(dpaa_errata_a010022)) {
 		/* get a page frag to store the SGTable */
 		sgt_buf = netdev_alloc_frag(priv->tx_headroom +
 			sizeof(struct qm_sg_entry) * DPA_SGT_MAX_ENTRIES);
@@ -878,8 +870,8 @@ int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 
 	qm_sg_entry_set64(&sgt[0], addr);
 
-#ifdef CONFIG_ARM64
-	if (unlikely(dpa_4k_errata))
+#ifndef CONFIG_PPC
+	if (unlikely(dpaa_errata_a010022))
 		goto workaround;
 
 	/* populate the rest of SGT entries */
@@ -1006,24 +998,19 @@ bypass_workaround:
 	/* DMA map the SGT page */
 	buffer_start = (void *)sgt - priv->tx_headroom;
 	DPA_WRITE_SKB_PTR(skb, skbh, buffer_start, 0);
-#ifdef CONFIG_ARM64
-	if (unlikely(dpa_4k_errata))
+#ifndef CONFIG_PPC
+	if (unlikely(dpaa_errata_a010022))
 		addr = dma_map_single(dpa_bp->dev, buffer_start,
 				      priv->tx_headroom +
 				      sizeof(struct qm_sg_entry) *
 				      DPA_SGT_MAX_ENTRIES,
 				      dma_dir);
 	else
-		addr = dma_map_single(dpa_bp->dev, buffer_start,
-				      priv->tx_headroom +
-				      sizeof(struct qm_sg_entry) *
-				      (1 + nr_frags),
-				      dma_dir);
-#else
+#endif
 	addr = dma_map_single(dpa_bp->dev, buffer_start, priv->tx_headroom +
 			      sizeof(struct qm_sg_entry) * (1 + nr_frags),
 			      dma_dir);
-#endif
+
 	if (unlikely(dma_mapping_error(dpa_bp->dev, addr))) {
 		dev_err(dpa_bp->dev, "DMA mapping failed");
 		err = -EINVAL;
@@ -1038,8 +1025,8 @@ bypass_workaround:
 
 sgt_map_failed:
 sg_map_failed:
-#ifdef CONFIG_ARM64
-	if (unlikely(dpa_4k_errata))
+#ifndef CONFIG_PPC
+	if (unlikely(dpaa_errata_a010022))
 		for (k = 0; k < j; k++) {
 			sg_addr = qm_sg_addr(&sgt[k]);
 			dma_unmap_page(dpa_bp->dev, sg_addr,
@@ -1128,11 +1115,11 @@ int __hot dpa_tx_extended(struct sk_buff *skb, struct net_device *net_dev,
 	 * Btw, we're using the first sgt entry to store the linear part of
 	 * the skb, so we're one extra frag short.
 	 */
-#ifdef CONFIG_ARM64
+#ifndef CONFIG_PPC
 	if (nonlinear &&
-	    ((unlikely(dpa_4k_errata) &&
+	    ((unlikely(dpaa_errata_a010022) &&
 	      likely(skb_shinfo(skb)->nr_frags < DPA_SGT_4K_ENTRIES_THRESHOLD)) ||
-	    (likely(!dpa_4k_errata) &&
+	    (likely(!dpaa_errata_a010022) &&
 	     likely(skb_shinfo(skb)->nr_frags < DPA_SGT_ENTRIES_THRESHOLD)))) {
 		/* Just create a S/G fd based on the skb */
 		err = skb_to_sg_fd(priv, skb, &fd);
@@ -1183,8 +1170,8 @@ int __hot dpa_tx_extended(struct sk_buff *skb, struct net_device *net_dev,
 			/* Common out-of-memory error path */
 			goto enomem;
 
-#ifdef CONFIG_ARM64
-		if (unlikely(dpa_4k_errata) &&
+#ifndef CONFIG_PPC
+		if (unlikely(dpaa_errata_a010022) &&
 		    unlikely(HAS_DMA_ISSUE(skb->data, skb->len))) {
 			err = skb_to_sg_fd(priv, skb, &fd);
 			percpu_priv->tx_frag_skbuffs++;
-- 
1.7.5.4

