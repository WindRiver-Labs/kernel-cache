From 25c82dc5229b9e836454a41f5c8e50ba6b73f830 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Wed, 11 Oct 2017 13:43:16 +0800
Subject: [PATCH 13/29] Revert "crypto: dpaa2-caam - fix cleanup paths on
 probing, removing"

This reverts commit 4ef17d5eba17ef0fdddc72fa4b7e51d64f25d70c.

At first, dpaa2-caam patches are from nxp-sdk-2.0 that is based on
kernel4.1. But in kernel4.8, there is a obvious changing on crypto
software architecture, so modify code to pass compilation, but this
feature is not verified.
Now, there is an open source sdk that is based on kernel4.4. In
kernel4.4, crypto software architecture is almost the same with
kernel4.8, so we get dpaa2-caam patches from open source sdk, and
revert patches from nxp-sdk-2.0.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/dpaa2-caam/dpaa2-caam.c |   28 ++++++++++------------------
 1 files changed, 10 insertions(+), 18 deletions(-)

diff --git a/drivers/crypto/dpaa2-caam/dpaa2-caam.c b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
index 26d9d19..600d50a 100644
--- a/drivers/crypto/dpaa2-caam/dpaa2-caam.c
+++ b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
@@ -5003,18 +5003,16 @@ static int __cold dpaa2_dpseci_setup(struct fsl_mc_device *ls_dev)
 
 	/* Get a handle for the DPSECI this interface is associate with */
 	err = dpseci_open(priv->mc_io, 0, priv->dpsec_id, &ls_dev->mc_handle);
-	if (err) {
+	if (err)
 		dev_err(dev, "dpsec_open() failed\n");
-		goto err_open;
-	}
-
-	dev_info(dev, "Opened dpseci object successfully\n");
+	else
+		dev_info(dev, "Opened dpseci object successfully\n");
 
 	err = dpseci_get_attributes(priv->mc_io, 0, ls_dev->mc_handle,
 				    &priv->dpseci_attr);
 	if (err) {
 		dev_err(dev, "dpseci_get_attributes() failed\n");
-		goto err_get_attr;
+		return err;
 	}
 
 	priv->num_pairs = min(priv->dpseci_attr.num_rx_queues,
@@ -5025,7 +5023,7 @@ static int __cold dpaa2_dpseci_setup(struct fsl_mc_device *ls_dev)
 					  &priv->rx_queue_attr[i]);
 		if (err) {
 			dev_err(dev, "dpseci_get_rx_queue() failed\n");
-			goto err_get_attr;
+			return err;
 		}
 	}
 
@@ -5034,7 +5032,7 @@ static int __cold dpaa2_dpseci_setup(struct fsl_mc_device *ls_dev)
 					  &priv->tx_queue_attr[i]);
 		if (err) {
 			dev_err(dev, "dpseci_get_tx_queue() failed\n");
-			goto err_get_attr;
+			return err;
 		}
 	}
 
@@ -5056,11 +5054,6 @@ static int __cold dpaa2_dpseci_setup(struct fsl_mc_device *ls_dev)
 	}
 
 	return 0;
-
-err_get_attr:
-	dpseci_close(priv->mc_io, 0, ls_dev->mc_handle);
-err_open:
-	return err;
 }
 
 static int dpaa2_dpseci_enable(struct dpaa2_caam_priv *priv)
@@ -5154,7 +5147,7 @@ static int dpaa2_caam_probe(struct fsl_mc_device *dpseci_dev)
 	err = fsl_mc_portal_allocate(dpseci_dev, 0, &priv->mc_io);
 	if (err) {
 		dev_err(dev, "MC portal allocation failed\n");
-		goto err_dma_mask;
+		goto err_portal_alloc;
 	}
 
 	priv->ppriv = alloc_percpu(*priv->ppriv);
@@ -5268,11 +5261,11 @@ err_bind:
 err_dpio_setup:
 	dpaa2_dpseci_free(priv);
 err_dpseci_setup:
-	free_percpu(priv->ppriv);
-err_alloc_ppriv:
 	fsl_mc_portal_free(priv->mc_io);
+err_alloc_ppriv:
+	dpseci_close(priv->mc_io, 0, dpseci_dev->mc_handle);
+err_portal_alloc:
 err_dma_mask:
-	kmem_cache_destroy(qi_cache);
 err_qicache:
 	dev_set_drvdata(dev, NULL);
 
@@ -5306,7 +5299,6 @@ static int __cold dpaa2_caam_remove(struct fsl_mc_device *ls_dev)
 	dpaa2_dpseci_disable(priv);
 	dpaa2_dpseci_dpio_free(priv);
 	dpaa2_dpseci_free(priv);
-	free_percpu(priv->ppriv);
 	fsl_mc_portal_free(priv->mc_io);
 	dev_set_drvdata(dev, NULL);
 
-- 
1.7.5.4

