From 9713a4d6b23a176a60980c0e0ccb555ccde38307 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Tue, 7 Nov 2017 12:17:50 +0800
Subject: [PATCH 1/2] Revert "cpu_pm: replace raw_notifier to atomic_notifier"

This reverts commit 6b11c8d23fdd68f6f8fae9a265aed97a54462fc9.

when boot up rt kernel with kts-dev layer, there is below call trace.
Call trace:
[<ffff000008089c80>] dump_backtrace+0x0/0x1d0
[<ffff000008089e74>] show_stack+0x24/0x30
[<ffff000008500274>] dump_stack+0xb0/0xec
[<ffff0000080fc798>] lockdep_rcu_suspicious+0xe8/0x120
[<ffff0000080cfc3c>] __atomic_notifier_call_chain+0x13c/0x140
[<ffff0000081a734c>] cpu_pm_enter+0x34/0x90
[<ffff0000088353c8>] arm_enter_idle_state+0x20/0x78
[<ffff000008833024>] cpuidle_enter_state+0x12c/0x420
[<ffff00000883338c>] cpuidle_enter+0x34/0x48
[<ffff0000080f4ec0>] call_cpuidle+0x48/0x78
[<ffff0000080f541c>] cpu_startup_entry+0x394/0x428
[<ffff00000808f5ec>] secondary_start_kernel+0x164/0x1a8
[<0000000080083158>] 0x80083158

Because function __atomic_notifier_call_chain() has a RCU read critical
section, which could be disfunctional in cpu idle. So it is need to
add add rcu_irq_enter_irqson() and rcu_irq_exit_irqson() to let RCU
know the status.
Now, this patch has been mproved and pushed into mainline with
rcu_irq_enter_irqson() and rcu_irq_exit_irqson().
So, revert this patch, and will get the same fix from mainline upstream.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 kernel/cpu_pm.c |   43 +++++++++++++++++++++++++++++++++++++------
 1 files changed, 37 insertions(+), 6 deletions(-)

diff --git a/kernel/cpu_pm.c b/kernel/cpu_pm.c
index 10f4640..009cc9a 100644
--- a/kernel/cpu_pm.c
+++ b/kernel/cpu_pm.c
@@ -22,13 +22,14 @@
 #include <linux/spinlock.h>
 #include <linux/syscore_ops.h>
 
-static ATOMIC_NOTIFIER_HEAD(cpu_pm_notifier_chain);
+static DEFINE_RWLOCK(cpu_pm_notifier_lock);
+static RAW_NOTIFIER_HEAD(cpu_pm_notifier_chain);
 
 static int cpu_pm_notify(enum cpu_pm_event event, int nr_to_call, int *nr_calls)
 {
 	int ret;
 
-	ret = __atomic_notifier_call_chain(&cpu_pm_notifier_chain, event, NULL,
+	ret = __raw_notifier_call_chain(&cpu_pm_notifier_chain, event, NULL,
 		nr_to_call, nr_calls);
 
 	return notifier_to_errno(ret);
@@ -46,7 +47,14 @@ static int cpu_pm_notify(enum cpu_pm_event event, int nr_to_call, int *nr_calls)
  */
 int cpu_pm_register_notifier(struct notifier_block *nb)
 {
-	return atomic_notifier_chain_register(&cpu_pm_notifier_chain, nb);
+	unsigned long flags;
+	int ret;
+
+	write_lock_irqsave(&cpu_pm_notifier_lock, flags);
+	ret = raw_notifier_chain_register(&cpu_pm_notifier_chain, nb);
+	write_unlock_irqrestore(&cpu_pm_notifier_lock, flags);
+
+	return ret;
 }
 EXPORT_SYMBOL_GPL(cpu_pm_register_notifier);
 
@@ -61,7 +69,14 @@ EXPORT_SYMBOL_GPL(cpu_pm_register_notifier);
  */
 int cpu_pm_unregister_notifier(struct notifier_block *nb)
 {
-	return atomic_notifier_chain_unregister(&cpu_pm_notifier_chain, nb);
+	unsigned long flags;
+	int ret;
+
+	write_lock_irqsave(&cpu_pm_notifier_lock, flags);
+	ret = raw_notifier_chain_unregister(&cpu_pm_notifier_chain, nb);
+	write_unlock_irqrestore(&cpu_pm_notifier_lock, flags);
+
+	return ret;
 }
 EXPORT_SYMBOL_GPL(cpu_pm_unregister_notifier);
 
@@ -85,6 +100,7 @@ int cpu_pm_enter(void)
 	int nr_calls;
 	int ret = 0;
 
+	read_lock(&cpu_pm_notifier_lock);
 	ret = cpu_pm_notify(CPU_PM_ENTER, -1, &nr_calls);
 	if (ret)
 		/*
@@ -92,6 +108,7 @@ int cpu_pm_enter(void)
 		 * PM entry who are notified earlier to prepare for it.
 		 */
 		cpu_pm_notify(CPU_PM_ENTER_FAILED, nr_calls - 1, NULL);
+	read_unlock(&cpu_pm_notifier_lock);
 
 	return ret;
 }
@@ -111,7 +128,13 @@ EXPORT_SYMBOL_GPL(cpu_pm_enter);
  */
 int cpu_pm_exit(void)
 {
-	return cpu_pm_notify(CPU_PM_EXIT, -1, NULL);
+	int ret;
+
+	read_lock(&cpu_pm_notifier_lock);
+	ret = cpu_pm_notify(CPU_PM_EXIT, -1, NULL);
+	read_unlock(&cpu_pm_notifier_lock);
+
+	return ret;
 }
 EXPORT_SYMBOL_GPL(cpu_pm_exit);
 
@@ -136,6 +159,7 @@ int cpu_cluster_pm_enter(void)
 	int nr_calls;
 	int ret = 0;
 
+	read_lock(&cpu_pm_notifier_lock);
 	ret = cpu_pm_notify(CPU_CLUSTER_PM_ENTER, -1, &nr_calls);
 	if (ret)
 		/*
@@ -143,6 +167,7 @@ int cpu_cluster_pm_enter(void)
 		 * PM entry who are notified earlier to prepare for it.
 		 */
 		cpu_pm_notify(CPU_CLUSTER_PM_ENTER_FAILED, nr_calls - 1, NULL);
+	read_unlock(&cpu_pm_notifier_lock);
 
 	return ret;
 }
@@ -165,7 +190,13 @@ EXPORT_SYMBOL_GPL(cpu_cluster_pm_enter);
  */
 int cpu_cluster_pm_exit(void)
 {
-	return cpu_pm_notify(CPU_CLUSTER_PM_EXIT, -1, NULL);
+	int ret;
+
+	read_lock(&cpu_pm_notifier_lock);
+	ret = cpu_pm_notify(CPU_CLUSTER_PM_EXIT, -1, NULL);
+	read_unlock(&cpu_pm_notifier_lock);
+
+	return ret;
 }
 EXPORT_SYMBOL_GPL(cpu_cluster_pm_exit);
 
-- 
1.7.5.4

