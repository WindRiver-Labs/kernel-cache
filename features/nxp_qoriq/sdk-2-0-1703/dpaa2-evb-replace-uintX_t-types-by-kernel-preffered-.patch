From 00e976f5a5d1f62995176b3eb4b6048133f64646 Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@nxp.com>
Date: Tue, 8 Nov 2016 10:31:03 +0200
Subject: [PATCH 404/508] dpaa2-evb: replace uintX_t types by kernel preffered
 kernel uX types

Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/evb/dpdmux.c |  150 +++++++++++++-------------
 drivers/staging/fsl-dpaa2/evb/dpdmux.h |  188 ++++++++++++++++----------------
 2 files changed, 169 insertions(+), 169 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux.c b/drivers/staging/fsl-dpaa2/evb/dpdmux.c
index f323049..8dcefb8 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux.c
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux.c
@@ -35,9 +35,9 @@
 #include "dpdmux-cmd.h"
 
 int dpdmux_open(struct fsl_mc_io *mc_io,
-		uint32_t cmd_flags,
+		u32 cmd_flags,
 		int dpdmux_id,
-		uint16_t *token)
+		u16 *token)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -60,8 +60,8 @@ int dpdmux_open(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_close(struct fsl_mc_io *mc_io,
-		 uint32_t cmd_flags,
-		 uint16_t token)
+		 u32 cmd_flags,
+		 u16 token)
 {
 	struct mc_command cmd = { 0 };
 
@@ -75,9 +75,9 @@ int dpdmux_close(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_create(struct fsl_mc_io *mc_io,
-		  uint32_t cmd_flags,
+		  u32 cmd_flags,
 		  const struct dpdmux_cfg *cfg,
-		  uint16_t *token)
+		  u16 *token)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -100,8 +100,8 @@ int dpdmux_create(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_destroy(struct fsl_mc_io *mc_io,
-		   uint32_t cmd_flags,
-		   uint16_t token)
+		   u32 cmd_flags,
+		   u16 token)
 {
 	struct mc_command cmd = { 0 };
 
@@ -115,8 +115,8 @@ int dpdmux_destroy(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_enable(struct fsl_mc_io *mc_io,
-		  uint32_t cmd_flags,
-		  uint16_t token)
+		  u32 cmd_flags,
+		  u16 token)
 {
 	struct mc_command cmd = { 0 };
 
@@ -130,8 +130,8 @@ int dpdmux_enable(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_disable(struct fsl_mc_io *mc_io,
-		   uint32_t cmd_flags,
-		   uint16_t token)
+		   u32 cmd_flags,
+		   u16 token)
 {
 	struct mc_command cmd = { 0 };
 
@@ -145,8 +145,8 @@ int dpdmux_disable(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_is_enabled(struct fsl_mc_io *mc_io,
-		      uint32_t cmd_flags,
-		      uint16_t token,
+		      u32 cmd_flags,
+		      u16 token,
 		      int *en)
 {
 	struct mc_command cmd = { 0 };
@@ -168,8 +168,8 @@ int dpdmux_is_enabled(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_reset(struct fsl_mc_io *mc_io,
-		 uint32_t cmd_flags,
-		 uint16_t token)
+		 u32 cmd_flags,
+		 u16 token)
 {
 	struct mc_command cmd = { 0 };
 
@@ -183,9 +183,9 @@ int dpdmux_reset(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_set_irq(struct fsl_mc_io	*mc_io,
-		   uint32_t		cmd_flags,
-		   uint16_t		token,
-		   uint8_t		irq_index,
+		   u32		cmd_flags,
+		   u16		token,
+		   u8		irq_index,
 		   struct dpdmux_irq_cfg *irq_cfg)
 {
 	struct mc_command cmd = { 0 };
@@ -201,9 +201,9 @@ int dpdmux_set_irq(struct fsl_mc_io	*mc_io,
 }
 
 int dpdmux_get_irq(struct fsl_mc_io *mc_io,
-		   uint32_t cmd_flags,
-		   uint16_t		token,
-		   uint8_t		irq_index,
+		   u32 cmd_flags,
+		   u16		token,
+		   u8		irq_index,
 		   int			*type,
 		   struct dpdmux_irq_cfg *irq_cfg)
 {
@@ -228,10 +228,10 @@ int dpdmux_get_irq(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_set_irq_enable(struct fsl_mc_io *mc_io,
-			  uint32_t cmd_flags,
-			  uint16_t token,
-			  uint8_t irq_index,
-			  uint8_t en)
+			  u32 cmd_flags,
+			  u16 token,
+			  u8 irq_index,
+			  u8 en)
 {
 	struct mc_command cmd = { 0 };
 
@@ -246,10 +246,10 @@ int dpdmux_set_irq_enable(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_get_irq_enable(struct fsl_mc_io *mc_io,
-			  uint32_t cmd_flags,
-			  uint16_t token,
-			  uint8_t irq_index,
-			  uint8_t *en)
+			  u32 cmd_flags,
+			  u16 token,
+			  u8 irq_index,
+			  u8 *en)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -272,10 +272,10 @@ int dpdmux_get_irq_enable(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_set_irq_mask(struct fsl_mc_io *mc_io,
-			uint32_t cmd_flags,
-			uint16_t token,
-			uint8_t irq_index,
-			uint32_t mask)
+			u32 cmd_flags,
+			u16 token,
+			u8 irq_index,
+			u32 mask)
 {
 	struct mc_command cmd = { 0 };
 
@@ -290,10 +290,10 @@ int dpdmux_set_irq_mask(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_get_irq_mask(struct fsl_mc_io *mc_io,
-			uint32_t cmd_flags,
-			uint16_t token,
-			uint8_t irq_index,
-			uint32_t *mask)
+			u32 cmd_flags,
+			u16 token,
+			u8 irq_index,
+			u32 *mask)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -316,10 +316,10 @@ int dpdmux_get_irq_mask(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_get_irq_status(struct fsl_mc_io *mc_io,
-			  uint32_t cmd_flags,
-			  uint16_t token,
-			  uint8_t irq_index,
-			  uint32_t *status)
+			  u32 cmd_flags,
+			  u16 token,
+			  u8 irq_index,
+			  u32 *status)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -342,10 +342,10 @@ int dpdmux_get_irq_status(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_clear_irq_status(struct fsl_mc_io *mc_io,
-			    uint32_t cmd_flags,
-			    uint16_t token,
-			    uint8_t irq_index,
-			    uint32_t status)
+			    u32 cmd_flags,
+			    u16 token,
+			    u8 irq_index,
+			    u32 status)
 {
 	struct mc_command cmd = { 0 };
 
@@ -360,8 +360,8 @@ int dpdmux_clear_irq_status(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_get_attributes(struct fsl_mc_io *mc_io,
-			  uint32_t cmd_flags,
-			  uint16_t token,
+			  u32 cmd_flags,
+			  u16 token,
 			  struct dpdmux_attr *attr)
 {
 	struct mc_command cmd = { 0 };
@@ -384,9 +384,9 @@ int dpdmux_get_attributes(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_ul_set_max_frame_length(struct fsl_mc_io *mc_io,
-				   uint32_t cmd_flags,
-				   uint16_t token,
-				   uint16_t max_frame_length)
+				   u32 cmd_flags,
+				   u16 token,
+				   u16 max_frame_length)
 {
 	struct mc_command cmd = { 0 };
 
@@ -401,8 +401,8 @@ int dpdmux_ul_set_max_frame_length(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_ul_reset_counters(struct fsl_mc_io *mc_io,
-			     uint32_t cmd_flags,
-			     uint16_t token)
+			     u32 cmd_flags,
+			     u16 token)
 {
 	struct mc_command cmd = { 0 };
 
@@ -416,9 +416,9 @@ int dpdmux_ul_reset_counters(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_if_set_accepted_frames(struct fsl_mc_io *mc_io,
-				  uint32_t cmd_flags,
-				  uint16_t token,
-				  uint16_t if_id,
+				  u32 cmd_flags,
+				  u16 token,
+				  u16 if_id,
 				  const struct dpdmux_accepted_frames *cfg)
 {
 	struct mc_command cmd = { 0 };
@@ -434,9 +434,9 @@ int dpdmux_if_set_accepted_frames(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_if_get_attributes(struct fsl_mc_io *mc_io,
-			     uint32_t cmd_flags,
-			     uint16_t token,
-			     uint16_t if_id,
+			     u32 cmd_flags,
+			     u16 token,
+			     u16 if_id,
 			     struct dpdmux_if_attr *attr)
 {
 	struct mc_command cmd = { 0 };
@@ -460,9 +460,9 @@ int dpdmux_if_get_attributes(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_if_remove_l2_rule(struct fsl_mc_io *mc_io,
-			     uint32_t cmd_flags,
-			     uint16_t token,
-			     uint16_t if_id,
+			     u32 cmd_flags,
+			     u16 token,
+			     u16 if_id,
 			     const struct dpdmux_l2_rule *rule)
 {
 	struct mc_command cmd = { 0 };
@@ -478,9 +478,9 @@ int dpdmux_if_remove_l2_rule(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_if_add_l2_rule(struct fsl_mc_io *mc_io,
-			  uint32_t cmd_flags,
-			  uint16_t token,
-			  uint16_t if_id,
+			  u32 cmd_flags,
+			  u16 token,
+			  u16 if_id,
 			  const struct dpdmux_l2_rule *rule)
 {
 	struct mc_command cmd = { 0 };
@@ -496,11 +496,11 @@ int dpdmux_if_add_l2_rule(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_if_get_counter(struct fsl_mc_io		*mc_io,
-			  uint32_t			cmd_flags,
-			  uint16_t			token,
-			  uint16_t			if_id,
+			  u32			cmd_flags,
+			  u16			token,
+			  u16			if_id,
 			  enum dpdmux_counter_type	counter_type,
-			  uint64_t			*counter)
+			  u64			*counter)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -523,9 +523,9 @@ int dpdmux_if_get_counter(struct fsl_mc_io		*mc_io,
 }
 
 int dpdmux_if_set_link_cfg(struct fsl_mc_io *mc_io,
-			   uint32_t cmd_flags,
-			   uint16_t token,
-			   uint16_t if_id,
+			   u32 cmd_flags,
+			   u16 token,
+			   u16 if_id,
 			   struct dpdmux_link_cfg *cfg)
 {
 	struct mc_command cmd = { 0 };
@@ -541,9 +541,9 @@ int dpdmux_if_set_link_cfg(struct fsl_mc_io *mc_io,
 }
 
 int dpdmux_if_get_link_state(struct fsl_mc_io *mc_io,
-			     uint32_t cmd_flags,
-			     uint16_t token,
-			     uint16_t if_id,
+			     u32 cmd_flags,
+			     u16 token,
+			     u16 if_id,
 			     struct dpdmux_link_state *state)
 {
 	struct mc_command cmd = { 0 };
diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux.h b/drivers/staging/fsl-dpaa2/evb/dpdmux.h
index 6bad79f..2ca1c2c 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux.h
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux.h
@@ -58,9 +58,9 @@ struct fsl_mc_io;
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_open(struct fsl_mc_io	 *mc_io,
-		uint32_t		 cmd_flags,
+		u32		 cmd_flags,
 		int			 dpdmux_id,
-		uint16_t		 *token);
+		u16		 *token);
 
 /**
  * dpdmux_close() - Close the control session of the object
@@ -74,8 +74,8 @@ int dpdmux_open(struct fsl_mc_io	 *mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_close(struct fsl_mc_io	*mc_io,
-		 uint32_t		cmd_flags,
-		 uint16_t		token);
+		 u32		cmd_flags,
+		 u16		token);
 
 /**
  * DPDMUX general options
@@ -131,7 +131,7 @@ enum dpdmux_method {
 struct dpdmux_cfg {
 	enum dpdmux_method	method;
 	enum dpdmux_manip	manip;
-	uint16_t		num_ifs;
+	u16		num_ifs;
 	/**
 	 * struct adv - Advanced parameters
 	 * @options: DPDMUX options - combination of 'DPDMUX_OPT_<X>' flags
@@ -144,10 +144,10 @@ struct dpdmux_cfg {
 	 *		0 - indicates default 16 vlan ids.
 	 */
 	struct {
-		uint64_t options;
-		uint16_t max_dmat_entries;
-		uint16_t max_mc_groups;
-		uint16_t max_vlan_ids;
+		u64 options;
+		u16 max_dmat_entries;
+		u16 max_mc_groups;
+		u16 max_vlan_ids;
 	} adv;
 };
 
@@ -174,9 +174,9 @@ struct dpdmux_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_create(struct fsl_mc_io		*mc_io,
-		  uint32_t			cmd_flags,
+		  u32			cmd_flags,
 		  const struct dpdmux_cfg	*cfg,
-		  uint16_t			*token);
+		  u16			*token);
 
 /**
  * dpdmux_destroy() - Destroy the DPDMUX object and release all its resources.
@@ -187,8 +187,8 @@ int dpdmux_create(struct fsl_mc_io		*mc_io,
  * Return:	'0' on Success; error code otherwise.
  */
 int dpdmux_destroy(struct fsl_mc_io	*mc_io,
-		   uint32_t		cmd_flags,
-		   uint16_t		token);
+		   u32		cmd_flags,
+		   u16		token);
 
 /**
  * dpdmux_enable() - Enable DPDMUX functionality
@@ -199,8 +199,8 @@ int dpdmux_destroy(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_enable(struct fsl_mc_io	*mc_io,
-		  uint32_t		cmd_flags,
-		  uint16_t		token);
+		  u32		cmd_flags,
+		  u16		token);
 
 /**
  * dpdmux_disable() - Disable DPDMUX functionality
@@ -211,8 +211,8 @@ int dpdmux_enable(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_disable(struct fsl_mc_io	*mc_io,
-		   uint32_t		cmd_flags,
-		   uint16_t		token);
+		   u32		cmd_flags,
+		   u16		token);
 
 /**
  * dpdmux_is_enabled() - Check if the DPDMUX is enabled.
@@ -224,8 +224,8 @@ int dpdmux_disable(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_is_enabled(struct fsl_mc_io	*mc_io,
-		      uint32_t		cmd_flags,
-		      uint16_t		token,
+		      u32		cmd_flags,
+		      u16		token,
 		      int		*en);
 
 /**
@@ -237,8 +237,8 @@ int dpdmux_is_enabled(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_reset(struct fsl_mc_io	*mc_io,
-		 uint32_t		cmd_flags,
-		 uint16_t		token);
+		 u32		cmd_flags,
+		 u16		token);
 
 /**
  * struct dpdmux_irq_cfg - IRQ configuration
@@ -247,8 +247,8 @@ int dpdmux_reset(struct fsl_mc_io	*mc_io,
  * @irq_num: A user defined number associated with this IRQ
  */
 struct dpdmux_irq_cfg {
-	     uint64_t		addr;
-	     uint32_t		val;
+	     u64		addr;
+	     u32		val;
 	     int		irq_num;
 };
 
@@ -263,9 +263,9 @@ struct dpdmux_irq_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_set_irq(struct fsl_mc_io		*mc_io,
-		   uint32_t			cmd_flags,
-		   uint16_t			token,
-		   uint8_t			irq_index,
+		   u32			cmd_flags,
+		   u16			token,
+		   u8			irq_index,
 		   struct dpdmux_irq_cfg	*irq_cfg);
 
 /**
@@ -281,9 +281,9 @@ int dpdmux_set_irq(struct fsl_mc_io		*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_get_irq(struct fsl_mc_io		*mc_io,
-		   uint32_t			cmd_flags,
-		   uint16_t			token,
-		   uint8_t			irq_index,
+		   u32			cmd_flags,
+		   u16			token,
+		   u8			irq_index,
 		   int				*type,
 		   struct dpdmux_irq_cfg	*irq_cfg);
 
@@ -303,10 +303,10 @@ int dpdmux_get_irq(struct fsl_mc_io		*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_set_irq_enable(struct fsl_mc_io	*mc_io,
-			  uint32_t		cmd_flags,
-			  uint16_t		token,
-			  uint8_t		irq_index,
-			  uint8_t		en);
+			  u32		cmd_flags,
+			  u16		token,
+			  u8		irq_index,
+			  u8		en);
 
 /**
  * dpdmux_get_irq_enable() - Get overall interrupt state.
@@ -319,10 +319,10 @@ int dpdmux_set_irq_enable(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_get_irq_enable(struct fsl_mc_io	*mc_io,
-			  uint32_t		cmd_flags,
-			  uint16_t		token,
-			  uint8_t		irq_index,
-			  uint8_t		*en);
+			  u32		cmd_flags,
+			  u16		token,
+			  u8		irq_index,
+			  u8		*en);
 
 /**
  * dpdmux_set_irq_mask() - Set interrupt mask.
@@ -341,10 +341,10 @@ int dpdmux_get_irq_enable(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_set_irq_mask(struct fsl_mc_io	*mc_io,
-			uint32_t		cmd_flags,
-			uint16_t		token,
-			uint8_t			irq_index,
-			uint32_t		mask);
+			u32		cmd_flags,
+			u16		token,
+			u8			irq_index,
+			u32		mask);
 
 /**
  * dpdmux_get_irq_mask() - Get interrupt mask.
@@ -360,10 +360,10 @@ int dpdmux_set_irq_mask(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_get_irq_mask(struct fsl_mc_io	*mc_io,
-			uint32_t		cmd_flags,
-			uint16_t		token,
-			uint8_t			irq_index,
-			uint32_t		*mask);
+			u32		cmd_flags,
+			u16		token,
+			u8			irq_index,
+			u32		*mask);
 
 /**
  * dpdmux_get_irq_status() - Get the current status of any pending interrupts.
@@ -378,10 +378,10 @@ int dpdmux_get_irq_mask(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_get_irq_status(struct fsl_mc_io	*mc_io,
-			  uint32_t		cmd_flags,
-			  uint16_t		token,
-			  uint8_t		irq_index,
-			  uint32_t		*status);
+			  u32		cmd_flags,
+			  u16		token,
+			  u8		irq_index,
+			  u32		*status);
 
 /**
  * dpdmux_clear_irq_status() - Clear a pending interrupt's status
@@ -396,10 +396,10 @@ int dpdmux_get_irq_status(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_clear_irq_status(struct fsl_mc_io	*mc_io,
-			    uint32_t		cmd_flags,
-			    uint16_t		token,
-			    uint8_t		irq_index,
-			    uint32_t		status);
+			    u32		cmd_flags,
+			    u16		token,
+			    u8		irq_index,
+			    u32		status);
 
 /**
  * struct dpdmux_attr - Structure representing DPDMUX attributes
@@ -419,14 +419,14 @@ struct dpdmux_attr {
 	 * @minor: DPDMUX minor version
 	 */
 	struct {
-		uint16_t	major;
-		uint16_t	minor;
+		u16	major;
+		u16	minor;
 	} version;
-	uint64_t		options;
+	u64		options;
 	enum dpdmux_method	method;
 	enum dpdmux_manip	manip;
-	uint16_t		num_ifs;
-	uint16_t		mem_size;
+	u16		num_ifs;
+	u16		mem_size;
 };
 
 /**
@@ -439,8 +439,8 @@ struct dpdmux_attr {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_get_attributes(struct fsl_mc_io	*mc_io,
-			  uint32_t		cmd_flags,
-			  uint16_t		token,
+			  u32		cmd_flags,
+			  u16		token,
 			  struct dpdmux_attr	*attr);
 
 /**
@@ -453,9 +453,9 @@ int dpdmux_get_attributes(struct fsl_mc_io	*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_ul_set_max_frame_length(struct fsl_mc_io	*mc_io,
-				   uint32_t		cmd_flags,
-				   uint16_t		token,
-				   uint16_t		max_frame_length);
+				   u32		cmd_flags,
+				   u16		token,
+				   u16		max_frame_length);
 
 /**
  * enum dpdmux_counter_type - Counter types
@@ -540,9 +540,9 @@ struct dpdmux_accepted_frames {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_if_set_accepted_frames(struct fsl_mc_io		      *mc_io,
-				  uint32_t			      cmd_flags,
-				  uint16_t			      token,
-				  uint16_t			      if_id,
+				  u32			      cmd_flags,
+				  u16			      token,
+				  u16			      if_id,
 				  const struct dpdmux_accepted_frames *cfg);
 
 /**
@@ -552,7 +552,7 @@ int dpdmux_if_set_accepted_frames(struct fsl_mc_io		      *mc_io,
  * @accept_frame_type: Indicates type of accepted frames for the interface
  */
 struct dpdmux_if_attr {
-	uint32_t				rate;
+	u32				rate;
 	int					enabled;
 	enum dpdmux_accepted_frames_type	accept_frame_type;
 };
@@ -568,9 +568,9 @@ struct dpdmux_if_attr {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_if_get_attributes(struct fsl_mc_io		*mc_io,
-			     uint32_t			cmd_flags,
-			     uint16_t			token,
-			     uint16_t			if_id,
+			     u32			cmd_flags,
+			     u16			token,
+			     u16			if_id,
 			     struct dpdmux_if_attr	*attr);
 
 /**
@@ -579,8 +579,8 @@ int dpdmux_if_get_attributes(struct fsl_mc_io		*mc_io,
  * @vlan_id: VLAN ID
  */
 struct dpdmux_l2_rule {
-	uint8_t	mac_addr[6];
-	uint16_t	vlan_id;
+	u8	mac_addr[6];
+	u16	vlan_id;
 };
 
 /**
@@ -597,9 +597,9 @@ struct dpdmux_l2_rule {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_if_remove_l2_rule(struct fsl_mc_io			*mc_io,
-			     uint32_t				cmd_flags,
-			     uint16_t				token,
-			     uint16_t				if_id,
+			     u32				cmd_flags,
+			     u16				token,
+			     u16				if_id,
 			     const struct dpdmux_l2_rule	*rule);
 
 /**
@@ -616,9 +616,9 @@ int dpdmux_if_remove_l2_rule(struct fsl_mc_io			*mc_io,
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_if_add_l2_rule(struct fsl_mc_io		*mc_io,
-			  uint32_t			cmd_flags,
-			  uint16_t			token,
-			  uint16_t			if_id,
+			  u32			cmd_flags,
+			  u16			token,
+			  u16			if_id,
 			  const struct dpdmux_l2_rule	*rule);
 
 /**
@@ -633,11 +633,11 @@ int dpdmux_if_add_l2_rule(struct fsl_mc_io		*mc_io,
 * Return:	'0' on Success; Error code otherwise.
 */
 int dpdmux_if_get_counter(struct fsl_mc_io		*mc_io,
-			  uint32_t			cmd_flags,
-			  uint16_t			token,
-			  uint16_t			if_id,
+			  u32			cmd_flags,
+			  u16			token,
+			  u16			if_id,
 			  enum dpdmux_counter_type	counter_type,
-			  uint64_t			*counter);
+			  u64			*counter);
 
 /**
 * dpdmux_ul_reset_counters() - Function resets the uplink counter
@@ -648,8 +648,8 @@ int dpdmux_if_get_counter(struct fsl_mc_io		*mc_io,
 * Return:	'0' on Success; Error code otherwise.
 */
 int dpdmux_ul_reset_counters(struct fsl_mc_io	*mc_io,
-			     uint32_t		cmd_flags,
-			     uint16_t		token);
+			     u32		cmd_flags,
+			     u16		token);
 
 /**
  * Enable auto-negotiation
@@ -674,8 +674,8 @@ int dpdmux_ul_reset_counters(struct fsl_mc_io	*mc_io,
  * @options: Mask of available options; use 'DPDMUX_LINK_OPT_<X>' values
  */
 struct dpdmux_link_cfg {
-	uint32_t rate;
-	uint64_t options;
+	u32 rate;
+	u64 options;
 };
 
 /**
@@ -689,9 +689,9 @@ struct dpdmux_link_cfg {
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpdmux_if_set_link_cfg(struct fsl_mc_io		*mc_io,
-			   uint32_t			cmd_flags,
-			   uint16_t			token,
-			   uint16_t			if_id,
+			   u32			cmd_flags,
+			   u16			token,
+			   u16			if_id,
 			   struct dpdmux_link_cfg	*cfg);
 /**
  * struct dpdmux_link_state - Structure representing DPDMUX link state
@@ -700,8 +700,8 @@ int dpdmux_if_set_link_cfg(struct fsl_mc_io		*mc_io,
  * @up: 0 - down, 1 - up
  */
 struct dpdmux_link_state {
-	uint32_t rate;
-	uint64_t options;
+	u32 rate;
+	u64 options;
 	int      up;
 };
 
@@ -716,9 +716,9 @@ struct dpdmux_link_state {
  * @returns	'0' on Success; Error code otherwise.
  */
 int dpdmux_if_get_link_state(struct fsl_mc_io		*mc_io,
-			     uint32_t			cmd_flags,
-			     uint16_t			token,
-			     uint16_t			if_id,
+			     u32			cmd_flags,
+			     u16			token,
+			     u16			if_id,
 			     struct dpdmux_link_state	*state);
 
 #endif /* __FSL_DPDMUX_H */
-- 
1.7.5.4

