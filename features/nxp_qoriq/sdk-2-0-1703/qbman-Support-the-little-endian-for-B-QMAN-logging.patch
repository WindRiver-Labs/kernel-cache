From 0a7c9d30fd1c92201b7d81d18f9d758579628c13 Mon Sep 17 00:00:00 2001
From: Nipun Gupta <nipun.gupta@nxp.com>
Date: Wed, 11 Jan 2017 18:09:14 +0530
Subject: [PATCH 347/508] qbman: Support the little endian for B/QMAN logging

Signed-off-by: Nipun Gupta <nipun.gupta@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl_qbman/bman_config.c |   16 ++++++++++++++++
 drivers/staging/fsl_qbman/qman_config.c |   27 +++++++++++++++++++++++++++
 2 files changed, 43 insertions(+), 0 deletions(-)

diff --git a/drivers/staging/fsl_qbman/bman_config.c b/drivers/staging/fsl_qbman/bman_config.c
index 85530b7..d9af216 100644
--- a/drivers/staging/fsl_qbman/bman_config.c
+++ b/drivers/staging/fsl_qbman/bman_config.c
@@ -76,22 +76,38 @@ struct bman;
 union bman_ecir {
 	u32 ecir_raw;
 	struct {
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 		u32 __reserved1:4;
 		u32 portal_num:4;
 		u32 __reserved2:12;
 		u32 numb:4;
 		u32 __reserved3:2;
 		u32 pid:6;
+#else
+		u32 pid:6;
+		u32 __reserved3:2;
+		u32 numb:4;
+		u32 __reserved2:12;
+		u32 portal_num:4;
+		u32 __reserved1:4;
+#endif
 	} __packed info;
 };
 
 union bman_eadr {
 	u32 eadr_raw;
 	struct {
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 		u32 __reserved1:5;
 		u32 memid:3;
 		u32 __reserved2:14;
 		u32 eadr:10;
+#else
+		u32 eadr:10;
+		u32 __reserved2:14;
+		u32 memid:3;
+		u32 __reserved1:5;
+#endif
 	} __packed info;
 };
 
diff --git a/drivers/staging/fsl_qbman/qman_config.c b/drivers/staging/fsl_qbman/qman_config.c
index 69d6a4b..4e1a306 100644
--- a/drivers/staging/fsl_qbman/qman_config.c
+++ b/drivers/staging/fsl_qbman/qman_config.c
@@ -149,35 +149,62 @@ enum qm_memory {
 union qman_ecir {
 	u32 ecir_raw;
 	struct {
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 		u32 __reserved:2;
 		u32 portal_type:1;
 		u32 portal_num:5;
 		u32 fqid:24;
+#else
+		u32 fqid:24;
+		u32 portal_num:5;
+		u32 portal_type:1;
+		u32 __reserved:2;
+#endif
 	} __packed info;
 };
 
 union qman_ecir2 {
 	u32 ecir2_raw;
 	struct {
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 		u32 portal_type:1;
 		u32 __reserved:21;
 		u32 portal_num:10;
+#else
+		u32 portal_num:10;
+		u32 __reserved:21;
+		u32 portal_type:1;
+#endif
 	} __packed info;
 };
 
 union qman_eadr {
 	u32 eadr_raw;
 	struct {
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 		u32 __reserved1:4;
 		u32 memid:4;
 		u32 __reserved2:12;
 		u32 eadr:12;
+#else
+		u32 eadr:12;
+		u32 __reserved2:12;
+		u32 memid:4;
+		u32 __reserved1:4;
+#endif
 	} __packed info;
 	struct {
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 		u32 __reserved1:3;
 		u32 memid:5;
 		u32 __reserved:8;
 		u32 eadr:16;
+#else
+		u32 eadr:16;
+		u32 __reserved:8;
+		u32 memid:5;
+		u32 __reserved1:3;
+#endif
 	} __packed info_rev3;
 };
 
-- 
1.7.5.4

