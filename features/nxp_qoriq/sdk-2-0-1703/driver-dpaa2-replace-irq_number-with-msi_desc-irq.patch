From 9964cdfaaf0e6a38a0db7ca373624a09f3d8985b Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Mon, 24 Jul 2017 14:40:40 +0800
Subject: [PATCH 010/508] driver: dpaa2: replace irq_number with msi_desc->irq

In mainline kernel, there is no irq_number field in  struct fsl_mc_device_irq,
it should be replaced with msi_desc->irq.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c |    5 +++--
 drivers/staging/fsl-dpaa2/ethsw/switch.c       |    9 +++++----
 drivers/staging/fsl-dpaa2/evb/evb.c            |    9 +++++----
 drivers/staging/fsl-dpaa2/mac/mac.c            |    3 ++-
 4 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 80dfa52..c8b3c86 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -37,6 +37,7 @@
 #include <linux/debugfs.h>
 #include <linux/kthread.h>
 #include <linux/net_tstamp.h>
+#include <linux/msi.h>
 
 #include "../../fsl-mc/include/mc.h"
 #include "../../fsl-mc/include/mc-sys.h"
@@ -2405,7 +2406,7 @@ static int setup_irqs(struct fsl_mc_device *ls_dev)
 	}
 
 	irq = ls_dev->irqs[0];
-	err = devm_request_threaded_irq(&ls_dev->dev, irq->irq_number,
+	err = devm_request_threaded_irq(&ls_dev->dev, irq->msi_desc->irq,
 					dpni_irq0_handler,
 					dpni_irq0_handler_thread,
 					IRQF_NO_SUSPEND | IRQF_ONESHOT,
@@ -2432,7 +2433,7 @@ static int setup_irqs(struct fsl_mc_device *ls_dev)
 	return 0;
 
 free_irq:
-	devm_free_irq(&ls_dev->dev, irq->irq_number, &ls_dev->dev);
+	devm_free_irq(&ls_dev->dev, irq->msi_desc->irq, &ls_dev->dev);
 free_mc_irq:
 	fsl_mc_free_irqs(ls_dev);
 
diff --git a/drivers/staging/fsl-dpaa2/ethsw/switch.c b/drivers/staging/fsl-dpaa2/ethsw/switch.c
index 0b11585..5f825065 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/switch.c
+++ b/drivers/staging/fsl-dpaa2/ethsw/switch.c
@@ -35,6 +35,7 @@
 #include <linux/etherdevice.h>
 #include <linux/rtnetlink.h>
 #include <linux/if_vlan.h>
+#include <linux/msi.h>
 
 #include <uapi/linux/if_bridge.h>
 #include <net/netlink.h>
@@ -1271,7 +1272,7 @@ static irqreturn_t _ethsw_irq0_handler_thread(int irq_num, void *arg)
 	/* Sanity check */
 	if (WARN_ON(!sw_dev || !sw_dev->irqs || !sw_dev->irqs[irq_index]))
 		goto out;
-	if (WARN_ON(sw_dev->irqs[irq_index]->irq_number != irq_num))
+	if (WARN_ON(sw_dev->irqs[irq_index]->msi_desc->irq != irq_num))
 		goto out;
 
 	err = dpsw_get_irq_status(io, 0, token, irq_index, &status);
@@ -1326,7 +1327,7 @@ static int ethsw_setup_irqs(struct fsl_mc_device *sw_dev)
 
 	irq = sw_dev->irqs[irq_index];
 
-	err = devm_request_threaded_irq(dev, irq->irq_number,
+	err = devm_request_threaded_irq(dev, irq->msi_desc->irq,
 					ethsw_irq0_handler,
 					_ethsw_irq0_handler_thread,
 					IRQF_NO_SUSPEND | IRQF_ONESHOT,
@@ -1353,7 +1354,7 @@ static int ethsw_setup_irqs(struct fsl_mc_device *sw_dev)
 	return 0;
 
 free_devm_irq:
-	devm_free_irq(dev, irq->irq_number, dev);
+	devm_free_irq(dev, irq->msi_desc->irq, dev);
 free_irq:
 	fsl_mc_free_irqs(sw_dev);
 	return err;
@@ -1368,7 +1369,7 @@ static void ethsw_teardown_irqs(struct fsl_mc_device *sw_dev)
 	dpsw_set_irq_enable(priv->mc_io, 0, priv->dpsw_handle,
 			      DPSW_IRQ_INDEX_IF, 0);
 	devm_free_irq(dev,
-		      sw_dev->irqs[DPSW_IRQ_INDEX_IF]->irq_number,
+		      sw_dev->irqs[DPSW_IRQ_INDEX_IF]->msi_desc->irq,
 		      dev);
 	fsl_mc_free_irqs(sw_dev);
 }
diff --git a/drivers/staging/fsl-dpaa2/evb/evb.c b/drivers/staging/fsl-dpaa2/evb/evb.c
index 52f1e39..90f6b0b 100644
--- a/drivers/staging/fsl-dpaa2/evb/evb.c
+++ b/drivers/staging/fsl-dpaa2/evb/evb.c
@@ -33,6 +33,7 @@
 #include <linux/etherdevice.h>
 #include <linux/rtnetlink.h>
 #include <linux/if_vlan.h>
+#include <linux/msi.h>
 
 #include <uapi/linux/if_bridge.h>
 #include <net/netlink.h>
@@ -161,7 +162,7 @@ static irqreturn_t _evb_irq0_handler_thread(int irq_num, void *arg)
 	/* Sanity check */
 	if (WARN_ON(!evb_dev || !evb_dev->irqs || !evb_dev->irqs[irq_index]))
 		goto out;
-	if (WARN_ON(evb_dev->irqs[irq_index]->irq_number != irq_num))
+	if (WARN_ON(evb_dev->irqs[irq_index]->msi_desc->irq != irq_num))
 		goto out;
 
 	err = dpdmux_get_irq_status(io, 0, token, irq_index, &status);
@@ -215,7 +216,7 @@ static int evb_setup_irqs(struct fsl_mc_device *evb_dev)
 
 	irq = evb_dev->irqs[irq_index];
 
-	err = devm_request_threaded_irq(dev, irq->irq_number,
+	err = devm_request_threaded_irq(dev, irq->msi_desc->irq,
 					evb_irq0_handler,
 					_evb_irq0_handler_thread,
 					IRQF_NO_SUSPEND | IRQF_ONESHOT,
@@ -242,7 +243,7 @@ static int evb_setup_irqs(struct fsl_mc_device *evb_dev)
 	return 0;
 
 free_devm_irq:
-	devm_free_irq(dev, irq->irq_number, dev);
+	devm_free_irq(dev, irq->msi_desc->irq, dev);
 free_irq:
 	fsl_mc_free_irqs(evb_dev);
 	return err;
@@ -258,7 +259,7 @@ static void evb_teardown_irqs(struct fsl_mc_device *evb_dev)
 			      DPDMUX_IRQ_INDEX_IF, 0);
 
 	devm_free_irq(dev,
-		      evb_dev->irqs[DPDMUX_IRQ_INDEX_IF]->irq_number,
+		      evb_dev->irqs[DPDMUX_IRQ_INDEX_IF]->msi_desc->irq,
 		      dev);
 	fsl_mc_free_irqs(evb_dev);
 }
diff --git a/drivers/staging/fsl-dpaa2/mac/mac.c b/drivers/staging/fsl-dpaa2/mac/mac.c
index eebb7c0..6136678 100644
--- a/drivers/staging/fsl-dpaa2/mac/mac.c
+++ b/drivers/staging/fsl-dpaa2/mac/mac.c
@@ -44,6 +44,7 @@
 #include <linux/of_net.h>
 #include <linux/phy.h>
 #include <linux/phy_fixed.h>
+#include <linux/msi.h>
 
 #include "../../fsl-mc/include/mc.h"
 #include "../../fsl-mc/include/mc-sys.h"
@@ -407,7 +408,7 @@ static int setup_irqs(struct fsl_mc_device *mc_dev)
 	}
 
 	err = devm_request_threaded_irq(&mc_dev->dev,
-					mc_dev->irqs[0]->irq_number,
+					mc_dev->irqs[0]->msi_desc->irq,
 					NULL, &dpaa2_mac_irq_handler,
 					IRQF_NO_SUSPEND | IRQF_ONESHOT,
 					dev_name(&mc_dev->dev), &mc_dev->dev);
-- 
1.7.5.4

