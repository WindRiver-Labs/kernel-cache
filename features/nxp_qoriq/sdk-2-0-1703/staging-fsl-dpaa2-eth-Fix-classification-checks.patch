From 827ea9b3a86498fe022d40aabafb9d89ca7c4407 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@nxp.com>
Date: Fri, 4 Mar 2016 20:07:16 +0200
Subject: [PATCH 375/508] staging: fsl-dpaa2/eth: Fix classification checks

Update the function that validates hashing and flow steering
configurations with better checks.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c     |   10 ++----
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h     |    2 +-
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c |   31 ++++++++++++++-----
 3 files changed, 28 insertions(+), 15 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index d3efb3e..1d086a6 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -2209,11 +2209,6 @@ int set_hash(struct dpaa2_eth_priv *priv)
 		struct dpkg_extract *key =
 			&cls_cfg.extracts[cls_cfg.num_extracts];
 
-		if (cls_cfg.num_extracts >= DPKG_MAX_NUM_OF_EXTRACTS) {
-			dev_err(dev, "error adding key extraction rule, too many rules?\n");
-			return -E2BIG;
-		}
-
 		key->type = DPKG_EXTRACT_FROM_HDR;
 		key->extract.from_hdr.prot = priv->hash_fields[i].cls_prot;
 		key->extract.from_hdr.type = DPKG_FULL_FIELD;
@@ -2287,7 +2282,10 @@ static int bind_dpni(struct dpaa2_eth_priv *priv)
 		return err;
 	}
 
-	check_fs_support(priv);
+	/* Verify classification options and disable hashing and/or
+	 * flow steering support in case of invalid configuration values
+	 */
+	check_cls_support(priv);
 
 	/* have the interface implicitly distribute traffic based on
 	 * a static hash key
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index 388a6da..ad49d92 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -388,6 +388,6 @@ static inline int dpaa2_eth_max_channels(struct dpaa2_eth_priv *priv)
 		     priv->dpni_attrs.max_senders);
 }
 
-void check_fs_support(struct dpaa2_eth_priv *priv);
+void check_cls_support(struct dpaa2_eth_priv *priv);
 
 #endif	/* __DPAA2_H */
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
index 43754db..7e3a159 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
@@ -297,19 +297,34 @@ static u8 cls_key_size(struct dpaa2_eth_priv *priv)
 	return size;
 }
 
-void check_fs_support(struct dpaa2_eth_priv *priv)
+void check_cls_support(struct dpaa2_eth_priv *priv)
 {
 	u8 key_size = cls_key_size(priv);
 	struct device *dev = priv->net_dev->dev.parent;
 
-	if (priv->dpni_attrs.options & DPNI_OPT_DIST_FS &&
-	    priv->dpni_attrs.max_dist_key_size < key_size) {
-		dev_err(dev,
-			"max_dist_key_size = %d, expected %d.  Steering is disabled\n",
-			priv->dpni_attrs.max_dist_key_size,
-			key_size);
-		priv->dpni_attrs.options &= ~DPNI_OPT_DIST_FS;
+	if (dpaa2_eth_hash_enabled(priv)) {
+		if (priv->dpni_attrs.max_dist_key_size < key_size) {
+			dev_dbg(dev, "max_dist_key_size = %d, expected %d. Hashing and steering are disabled\n",
+				priv->dpni_attrs.max_dist_key_size,
+				key_size);
+			goto disable_cls;
+		}
+		if (priv->num_hash_fields > DPKG_MAX_NUM_OF_EXTRACTS) {
+			dev_dbg(dev, "Too many key fields (max = %d). Hashing and steering are disabled\n",
+				DPKG_MAX_NUM_OF_EXTRACTS);
+			goto disable_cls;
+		}
+	}
+
+	if (dpaa2_eth_fs_enabled(priv) && !dpaa2_eth_hash_enabled(priv)) {
+		dev_dbg(dev, "DPNI_OPT_DIST_HASH option missing. Flow steering is disabled\n");
+		goto disable_cls;
 	}
+
+	return;
+
+disable_cls:
+	priv->dpni_attrs.options &= ~(DPNI_OPT_DIST_FS | DPNI_OPT_DIST_HASH);
 }
 
 static int prep_cls_rule(struct net_device *net_dev,
-- 
1.7.5.4

