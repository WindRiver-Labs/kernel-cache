From a904059633703f6d11d88e8bf54326d620494151 Mon Sep 17 00:00:00 2001
From: Bogdan Purcareata <bogdan.purcareata@nxp.com>
Date: Wed, 28 Sep 2016 08:35:03 +0000
Subject: [PATCH 390/508] staging: fsl-dpaa2: Allocate extra headroom in skb

The Linux IP forwarding code compares the socket buffer headroom to a
16-byte aligned headroom reported by the netdevice. If the socket buffer
does not accommodate this value, the stack will make a reallocation for
each frame, thus impacting performance.

Allocate an extra headroom to mitigate this issue. The value is chosen
based on the options set in the buffer layout, the Rx buffer alignment
value and the netdevice required headroom.

This brings a ~10% performance increase in IPv4 forwarding scenarios
involving linear skbs. SG skbs don't benefit from this patch since their
headroom is much smaller than the netdev's requirements, and the
performance gain would be smaller due to the much lower fps.

Signed-off-by: Bogdan Purcareata <bogdan.purcareata@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c |   34 +++++++++++++++++------
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h |   22 ++++++++++++---
 2 files changed, 42 insertions(+), 14 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index ed5b03b..b9663d0 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -120,12 +120,15 @@ static struct sk_buff *build_linear_skb(struct dpaa2_eth_priv *priv,
 	u16 fd_offset = dpaa2_fd_get_offset(fd);
 	u32 fd_length = dpaa2_fd_get_len(fd);
 
-	skb = build_skb(fd_vaddr, DPAA2_ETH_RX_BUF_SIZE +
-			SKB_DATA_ALIGN(sizeof(struct skb_shared_info)));
+	/* Leave enough extra space in the headroom to make sure the skb is
+	 * not realloc'd in forwarding scenarios. This has been previously
+	 * allocated when seeding the buffer pools.
+	 */
+	skb = build_skb(fd_vaddr - priv->rx_extra_head, DPAA2_ETH_SKB_SIZE);
 	if (unlikely(!skb))
 		return NULL;
 
-	skb_reserve(skb, fd_offset);
+	skb_reserve(skb, fd_offset + priv->rx_extra_head);
 	skb_put(skb, fd_length);
 
 	ch->buf_count--;
@@ -167,8 +170,7 @@ static struct sk_buff *build_frag_skb(struct dpaa2_eth_priv *priv,
 
 		if (i == 0) {
 			/* We build the skb around the first data buffer */
-			skb = build_skb(sg_vaddr, DPAA2_ETH_RX_BUF_SIZE +
-				SKB_DATA_ALIGN(sizeof(struct skb_shared_info)));
+			skb = build_skb(sg_vaddr, DPAA2_ETH_SKB_SIZE);
 			if (unlikely(!skb))
 				return NULL;
 
@@ -800,13 +802,17 @@ static int add_bufs(struct dpaa2_eth_priv *priv, u16 bpid)
 
 	for (i = 0; i < DPAA2_ETH_BUFS_PER_CMD; i++) {
 		/* Allocate buffer visible to WRIOP + skb shared info +
-		 * alignment padding
+		 * alignment padding.
 		 */
-		buf = napi_alloc_frag(DPAA2_ETH_BUF_RAW_SIZE);
+		buf = napi_alloc_frag(DPAA2_ETH_BUF_RAW_SIZE(priv));
 		if (unlikely(!buf))
 			goto err_alloc;
 
-		buf = PTR_ALIGN(buf, DPAA2_ETH_RX_BUF_ALIGN);
+		/* Leave extra IP headroom in front of the actual
+		 * area the device is using.
+		 */
+		buf = PTR_ALIGN(buf + priv->rx_extra_head,
+				      DPAA2_ETH_RX_BUF_ALIGN);
 
 		addr = dma_map_single(dev, buf, DPAA2_ETH_RX_BUF_SIZE,
 				      DMA_FROM_DEVICE);
@@ -817,7 +823,7 @@ static int add_bufs(struct dpaa2_eth_priv *priv, u16 bpid)
 
 		/* tracing point */
 		trace_dpaa2_eth_buf_seed(priv->net_dev,
-					 buf, DPAA2_ETH_BUF_RAW_SIZE,
+					 buf, DPAA2_ETH_BUF_RAW_SIZE(priv),
 					 addr, DPAA2_ETH_RX_BUF_SIZE,
 					 bpid);
 	}
@@ -2365,6 +2371,7 @@ static int netdev_init(struct net_device *net_dev)
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
 	u8 mac_addr[ETH_ALEN], dpni_mac_addr[ETH_ALEN];
 	u8 bcast_addr[ETH_ALEN];
+	u16 rx_headroom, rx_req_headroom;
 
 	net_dev->netdev_ops = &dpaa2_eth_ops;
 
@@ -2441,6 +2448,15 @@ static int netdev_init(struct net_device *net_dev)
 	 */
 	net_dev->needed_headroom = DPAA2_ETH_NEEDED_HEADROOM(priv);
 
+	/* Required headroom for Rx skbs, to avoid reallocation on
+	 * forwarding path.
+	 */
+	rx_req_headroom = LL_RESERVED_SPACE(net_dev) - ETH_HLEN;
+	rx_headroom = ALIGN(DPAA2_ETH_HWA_SIZE + DPAA2_ETH_SWA_SIZE,
+			DPAA2_ETH_RX_BUF_ALIGN);
+	if (rx_req_headroom > rx_headroom)
+		priv->rx_extra_head = ALIGN(rx_req_headroom - rx_headroom, 4);
+
 	/* Our .ndo_init will be called herein */
 	err = register_netdev(net_dev);
 	if (err < 0) {
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index 3bd5937..8cd103d 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -90,14 +90,19 @@
 #define DPAA2_ETH_NEEDED_HEADROOM(p_priv) \
 	((p_priv)->tx_data_offset + DPAA2_ETH_TX_BUF_ALIGN)
 
+#define DPAA2_ETH_SKB_SIZE	\
+	(DPAA2_ETH_RX_BUF_SIZE + \
+	 SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
+
 /* Hardware only sees DPAA2_ETH_RX_BUF_SIZE, but we need to allocate ingress
  * buffers large enough to allow building an skb around them and also account
- * for alignment restrictions
+ * for alignment restrictions. rx_extra_head prevents reallocations in
+ * L3 processing.
  */
-#define DPAA2_ETH_BUF_RAW_SIZE \
-	(DPAA2_ETH_RX_BUF_SIZE + \
-	SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) + \
-	DPAA2_ETH_RX_BUF_ALIGN)
+#define DPAA2_ETH_BUF_RAW_SIZE(p_priv) \
+	(DPAA2_ETH_SKB_SIZE + \
+	DPAA2_ETH_RX_BUF_ALIGN + \
+	(p_priv)->rx_extra_head)
 
 /* PTP nominal frequency 1GHz */
 #define DPAA2_PTP_NOMINAL_FREQ_PERIOD_NS 1
@@ -108,6 +113,11 @@
  */
 #define DPAA2_ETH_SWA_SIZE		64
 
+/* Size of hardware annotation area based on the current buffer layout
+ * configuration
+ */
+#define DPAA2_ETH_HWA_SIZE		128
+
 /* Must keep this struct smaller than DPAA2_ETH_SWA_SIZE */
 struct dpaa2_eth_swa {
 	struct sk_buff *skb;
@@ -311,6 +321,8 @@ struct dpaa2_eth_priv {
 	 */
 	struct dpni_buffer_layout buf_layout;
 	u16 tx_data_offset;
+	/* Rx extra headroom space */
+	u16 rx_extra_head;
 
 	struct fsl_mc_device *dpbp_dev;
 	struct dpbp_attr dpbp_attrs;
-- 
1.7.5.4

