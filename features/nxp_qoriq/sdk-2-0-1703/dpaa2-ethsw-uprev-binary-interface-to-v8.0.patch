From 8c078fb37a176ceac71132b773810afc39d67453 Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@nxp.com>
Date: Mon, 31 Oct 2016 16:34:25 +0200
Subject: [PATCH 400/508] dpaa2-ethsw: uprev binary interface to v8.0

Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h |   32 ++++++++++-------
 drivers/staging/fsl-dpaa2/ethsw/dpsw.c     |   35 ++++++++++++++++---
 drivers/staging/fsl-dpaa2/ethsw/dpsw.h     |   53 +++++++++++++++++----------
 drivers/staging/fsl-dpaa2/ethsw/switch.c   |   21 ++++++++---
 4 files changed, 97 insertions(+), 44 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h b/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h
index c92934e..6b13aa1 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw-cmd.h
@@ -33,11 +33,11 @@
 #define __FSL_DPSW_CMD_H
 
 /* DPSW Version */
-#define DPSW_VER_MAJOR				7
+#define DPSW_VER_MAJOR				8
 #define DPSW_VER_MINOR				0
 
-#define DPSW_CMD_BASE_VER			0
-#define DPSW_CMD_ID_OFF			4
+#define DPSW_CMD_BASE_VER			1
+#define DPSW_CMD_ID_OFF				4
 #define DPSW_CMD_ID(id) (((id) << DPSW_CMD_ID_OFF) | DPSW_CMD_BASE_VER)
 
 /* Command IDs */
@@ -45,6 +45,7 @@
 #define DPSW_CMDID_OPEN                     DPSW_CMD_ID(0x802)
 #define DPSW_CMDID_CREATE                   DPSW_CMD_ID(0x902)
 #define DPSW_CMDID_DESTROY                  DPSW_CMD_ID(0x900)
+#define DPSW_CMDID_GET_API_VERSION          DPSW_CMD_ID(0xa02)
 
 #define DPSW_CMDID_ENABLE                   DPSW_CMD_ID(0x002)
 #define DPSW_CMDID_DISABLE                  DPSW_CMD_ID(0x003)
@@ -233,17 +234,15 @@ do { \
 	MC_RSP_OP(cmd, 0, 24, 8,  uint8_t,  attr->num_fdbs);\
 	MC_RSP_OP(cmd, 0, 32, 16, uint16_t, attr->max_vlans);\
 	MC_RSP_OP(cmd, 0, 48, 16, uint16_t, attr->num_vlans);\
-	MC_RSP_OP(cmd, 1, 0,  16, uint16_t, attr->version.major);\
-	MC_RSP_OP(cmd, 1, 16, 16, uint16_t, attr->version.minor);\
-	MC_RSP_OP(cmd, 1, 32, 16, uint16_t, attr->max_fdb_entries);\
-	MC_RSP_OP(cmd, 1, 48, 16, uint16_t, attr->fdb_aging_time);\
-	MC_RSP_OP(cmd, 2, 0,  32, int,	 attr->id);\
-	MC_RSP_OP(cmd, 2, 32, 16, uint16_t, attr->mem_size);\
-	MC_RSP_OP(cmd, 2, 48, 16, uint16_t, attr->max_fdb_mc_groups);\
-	MC_RSP_OP(cmd, 3, 0,  64, uint64_t, attr->options);\
-	MC_RSP_OP(cmd, 4, 0,  8,  uint8_t, attr->max_meters_per_if);\
-	MC_RSP_OP(cmd, 4, 8,  4,  enum dpsw_component_type, \
+	MC_RSP_OP(cmd, 1, 0, 16, uint16_t, attr->max_fdb_entries);\
+	MC_RSP_OP(cmd, 1, 16, 16, uint16_t, attr->fdb_aging_time);\
+	MC_RSP_OP(cmd, 1, 32,  32, int,	 attr->id);\
+	MC_RSP_OP(cmd, 2, 0, 16, uint16_t, attr->mem_size);\
+	MC_RSP_OP(cmd, 2, 16, 16, uint16_t, attr->max_fdb_mc_groups);\
+	MC_RSP_OP(cmd, 2, 32,  8,  uint8_t, attr->max_meters_per_if);\
+	MC_RSP_OP(cmd, 2, 40,  4,  enum dpsw_component_type, \
 			attr->component_type);\
+	MC_RSP_OP(cmd, 3, 0,  64, uint64_t, attr->options);\
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -917,4 +916,11 @@ do { \
 	MC_CMD_OP(cmd, 6, 16, 16, uint16_t, cfg->pools[7].buffer_size);\
 } while (0)
 
+/*                cmd, param, offset, width, type,      arg_name */
+#define DPSW_RSP_GET_API_VERSION(cmd, major, minor) \
+do { \
+	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, major);\
+	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, minor);\
+} while (0)
+
 #endif /* __FSL_DPSW_CMD_H */
diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
index 22b7a4b..69e35c4 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw.c
@@ -116,9 +116,10 @@ int dpsw_close(struct fsl_mc_io *mc_io,
 }
 
 int dpsw_create(struct fsl_mc_io *mc_io,
+		u16 dprc_token,
 		u32 cmd_flags,
 		const struct dpsw_cfg *cfg,
-		u16 *token)
+		u32 *obj_id)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -126,7 +127,7 @@ int dpsw_create(struct fsl_mc_io *mc_io,
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_CREATE,
 					  cmd_flags,
-					  0);
+					  dprc_token);
 	DPSW_CMD_CREATE(cmd, cfg);
 
 	/* send command to mc*/
@@ -135,21 +136,24 @@ int dpsw_create(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	*token = MC_CMD_HDR_READ_TOKEN(cmd.header);
+	*obj_id = get_mc_cmd_create_object_id(&cmd);
 
 	return 0;
 }
 
 int dpsw_destroy(struct fsl_mc_io *mc_io,
+		 u16 dprc_token
 		 u32 cmd_flags,
-		 u16 token)
+		 u32 obj_id)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSW_CMDID_DESTROY,
 					  cmd_flags,
-					  token);
+					  dprc_token);
+	/* set object id to destroy */
+	cmd.params[0] = mc_enc(0, sizeof(object_id), object_id);
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -1637,3 +1641,24 @@ int dpsw_ctrl_if_disable(struct fsl_mc_io	*mc_io,
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
+
+int dpsw_get_api_version(struct fsl_mc_io *mc_io,
+			 u32 cmd_flags,
+			 u16 *major_ver,
+			 u16 *minor_ver)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	cmd.header = mc_encode_cmd_header(DPSW_CMDID_GET_API_VERSION,
+					cmd_flags,
+					0);
+
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	DPSW_RSP_GET_API_VERSION(cmd, *major_ver, *minor_ver);
+
+	return 0;
+}
diff --git a/drivers/staging/fsl-dpaa2/ethsw/dpsw.h b/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
index 9a014cd..59c6fff 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
+++ b/drivers/staging/fsl-dpaa2/ethsw/dpsw.h
@@ -166,9 +166,10 @@ struct dpsw_cfg {
 /**
  * dpsw_create() - Create the DPSW object.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token:	Parent container token; '0' for default container
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @cfg:	Configuration structure
- * @token:	Returned token; use in subsequent API calls
+ * @obj_id: returned object id
  *
  * Create the DPSW object, allocate required resources and
  * perform required initialization.
@@ -176,31 +177,39 @@ struct dpsw_cfg {
  * The object can be created either by declaring it in the
  * DPL file, or by calling this function.
  *
- * This function returns a unique authentication token,
- * associated with the specific object ID and the specific MC
- * portal; this token must be used in all subsequent calls to
- * this specific object. For objects that are created using the
- * DPL file, call dpsw_open() function to get an authentication
- * token first
+ * The function accepts an authentication token of a parent
+ * container that this object should be assigned to. The token
+ * can be '0' so the object will be assigned to the default container.
+ * The newly created object can be opened with the returned
+ * object id and using the container's associated tokens and MC portals.
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpsw_create(struct fsl_mc_io	*mc_io,
+		u16 dprc_token,
 		u32		cmd_flags,
 		const struct dpsw_cfg	*cfg,
-		u16		*token);
+		u32		*obj_id);
 
 /**
  * dpsw_destroy() - Destroy the DPSW object and release all its resources.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token: Parent container token; '0' for default container
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSW object
+ * @object_id:	The object id; it must be a valid id within the container that
+ * created this object;
+ *
+ * The function accepts the authentication token of the parent container that
+ * created the object (not the one that currently owns the object). The object
+ * is searched within parent using the provided 'object_id'.
+ * All tokens to the object must be closed before calling destroy.
  *
  * Return:	'0' on Success; error code otherwise.
  */
 int dpsw_destroy(struct fsl_mc_io	*mc_io,
+		 u16		dprc_token,
 		 u32		cmd_flags,
-		 u16		token);
+		 u32		object_id);
 
 /**
  * dpsw_enable() - Enable DPSW functionality
@@ -429,7 +438,6 @@ int dpsw_clear_irq_status(struct fsl_mc_io	*mc_io,
 /**
  * struct dpsw_attr - Structure representing DPSW attributes
  * @id: DPSW object ID
- * @version: DPSW version
  * @options: Enable/Disable DPSW features
  * @max_vlans: Maximum Number of VLANs
  * @max_meters_per_if:  Number of meters per interface
@@ -448,15 +456,6 @@ int dpsw_clear_irq_status(struct fsl_mc_io	*mc_io,
  */
 struct dpsw_attr {
 	int		id;
-	/**
-	 * struct version - DPSW version
-	 * @major: DPSW major version
-	 * @minor: DPSW minor version
-	 */
-	struct {
-		u16 major;
-		u16 minor;
-	} version;
 	u64	options;
 	u16	max_vlans;
 	u8	max_meters_per_if;
@@ -2161,4 +2160,18 @@ int dpsw_ctrl_if_disable(struct fsl_mc_io	*mc_io,
 			 u32		cmd_flags,
 			 u16		token);
 
+/**
+ * dpsw_get_api_version() - Get Data Path Switch API version
+ * @mc_io:  Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @major_ver:	Major version of data path switch API
+ * @minor_ver:	Minor version of data path switch API
+ *
+ * Return:  '0' on Success; Error code otherwise.
+ */
+int dpsw_get_api_version(struct fsl_mc_io *mc_io,
+			 u32 cmd_flags,
+			 u16 *major_ver,
+			 u16 *minor_ver);
+
 #endif /* __FSL_DPSW_H */
diff --git a/drivers/staging/fsl-dpaa2/ethsw/switch.c b/drivers/staging/fsl-dpaa2/ethsw/switch.c
index fee0be8..30f9b32 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/switch.c
+++ b/drivers/staging/fsl-dpaa2/ethsw/switch.c
@@ -45,7 +45,7 @@
 #include "dpsw-cmd.h"
 
 /* Minimal supported DPSE version */
-#define DPSW_MIN_VER_MAJOR	7
+#define DPSW_MIN_VER_MAJOR	8
 #define DPSW_MIN_VER_MINOR	0
 
 /* IRQ index */
@@ -1382,6 +1382,7 @@ ethsw_init(struct fsl_mc_device *sw_dev)
 	struct net_device	*netdev;
 	int			err = 0;
 	u16			i;
+	u16			version_major, version_minor;
 	const struct dpsw_stp_cfg stp_cfg = {
 		.vlan_id = 1,
 		.state = DPSW_STP_STATE_FORWARDING,
@@ -1410,13 +1411,21 @@ ethsw_init(struct fsl_mc_device *sw_dev)
 		goto err_close;
 	}
 
+	err = dpsw_get_api_version(priv->mc_io, 0,
+				   &version_major,
+				   &version_minor);
+	if (err) {
+		dev_err(dev, "dpsw_get_api_version err %d\n", err);
+		goto err_close;
+	}
+
 	/* Minimum supported DPSW version check */
-	if (priv->sw_attr.version.major < DPSW_MIN_VER_MAJOR ||
-	    (priv->sw_attr.version.major == DPSW_MIN_VER_MAJOR &&
-	     priv->sw_attr.version.minor < DPSW_MIN_VER_MINOR)) {
+	if (version_major < DPSW_MIN_VER_MAJOR ||
+	    (version_major == DPSW_MIN_VER_MAJOR &&
+	     version_minor < DPSW_MIN_VER_MINOR)) {
 		dev_err(dev, "DPSW version %d:%d not supported. Use %d.%d or greater.\n",
-			priv->sw_attr.version.major,
-			priv->sw_attr.version.minor,
+			version_major,
+			version_minor,
 			DPSW_MIN_VER_MAJOR, DPSW_MIN_VER_MINOR);
 		err = -ENOTSUPP;
 		goto err_close;
-- 
1.7.5.4

