From 7856ee5330a5135d180051889f8d0143d3f913d3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Horia=20Geant=C4=83?= <horia.geanta@nxp.com>
Date: Thu, 2 Mar 2017 15:19:31 +0200
Subject: [PATCH 471/508] crypto: caam/qi - add request queues in CGR
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add congestion detection mechanism also on the request queues
(to CAAM from CPUs) - by adding the request queues in the same CGR
with the response queues.
This covers the cases when CAAM engine is the bottleneck.

Also increase (2x) the threshold - to be equal with dpa_eth buffers.

Signed-off-by: Horia GeantÄƒ <horia.geanta@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/caam/qi.c |   10 ++++++----
 1 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/drivers/crypto/caam/qi.c b/drivers/crypto/caam/qi.c
index a2bc81c..e4e7465 100644
--- a/drivers/crypto/caam/qi.c
+++ b/drivers/crypto/caam/qi.c
@@ -20,7 +20,7 @@
 #define PREHDR_RSLS_SHIFT	31
 #ifndef CONFIG_FSL_DPAA_ETH_MAX_BUF_COUNT
 /* If DPA_ETH is not available, then use a reasonably backlog per CPU */
-#define MAX_RSP_FQ_BACKLOG_PER_CPU	64
+#define MAX_RSP_FQ_BACKLOG_PER_CPU	128
 #endif
 #define CAAM_QI_MEMCACHE_SIZE	256	/* Length of a single buffer in
 					   the QI driver memory cache. */
@@ -199,11 +199,13 @@ static struct qman_fq *create_caam_req_fq(struct device *qidev,
 
 	flags = fq_sched_flag;
 	opts.we_mask = QM_INITFQ_WE_FQCTRL | QM_INITFQ_WE_DESTWQ |
-			QM_INITFQ_WE_CONTEXTB | QM_INITFQ_WE_CONTEXTA;
+			QM_INITFQ_WE_CONTEXTB | QM_INITFQ_WE_CONTEXTA |
+			QM_INITFQ_WE_CGID;
 
-	opts.fqd.fq_ctrl = QM_FQCTRL_CPCSTASH;
+	opts.fqd.fq_ctrl = QM_FQCTRL_CPCSTASH | QM_FQCTRL_CGE;
 	opts.fqd.dest.channel = qm_channel_caam;
 	opts.fqd.dest.wq = 2;
+	opts.fqd.cgid = qipriv.rsp_cgr.cgrid;
 	opts.fqd.context_b = qman_fq_fqid(rsp_fq);
 	opts.fqd.context_a.hi = upper_32_bits(hwdesc);
 	opts.fqd.context_a.lo = lower_32_bits(hwdesc);
@@ -745,7 +747,7 @@ static int alloc_cgrs(struct device *qidev)
 	 *       using the dpa_eth buffers (which can be >1 if f.i. PME/DCE are
 	 *       also used.
 	 */
-	val = num_cpus * CONFIG_FSL_DPAA_ETH_MAX_BUF_COUNT / 2;
+	val = num_cpus * CONFIG_FSL_DPAA_ETH_MAX_BUF_COUNT;
 #else
 	val = num_cpus * MAX_RSP_FQ_BACKLOG_PER_CPU;
 #endif
-- 
1.7.5.4

