From cdcda4e8660b74a73b7043dfdac7c75e2eaaa885 Mon Sep 17 00:00:00 2001
From: Ahmed Mansour <Ahmed.Mansour@nxp.com>
Date: Thu, 12 May 2016 18:55:36 -0400
Subject: [PATCH 126/508] fsl_qman: Fix endianness in ccgr query

Convert endianness to support little endian cores working with big
endian accelerator hardware

JIRA issue#: QLINUX-5655

Signed-off-by: Ahmed Mansour <Ahmed.Mansour@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c |   24 ++++++++++++++++++++----
 include/linux/fsl_qman.h              |    8 ++++++++
 2 files changed, 28 insertions(+), 4 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 7ca165b..3b04bb5 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -428,6 +428,19 @@ static inline void hw_cq_query_to_cpu(struct qm_mcr_ceetm_cq_query *cq_query)
 	cq_query->frm_cnt = be24_to_cpu(cq_query->frm_cnt);
 }
 
+static inline void hw_ccgr_query_to_cpu(struct qm_mcr_ceetm_ccgr_query *ccgr_q)
+{
+	int i;
+
+	ccgr_q->cm_query.cscn_targ_dcp =
+		be16_to_cpu(ccgr_q->cm_query.cscn_targ_dcp);
+	ccgr_q->cm_query.i_cnt = be40_to_cpu(ccgr_q->cm_query.i_cnt);
+	ccgr_q->cm_query.a_cnt = be40_to_cpu(ccgr_q->cm_query.a_cnt);
+	for (i = 0; i < ARRAY_SIZE(ccgr_q->cm_query.cscn_targ_swp); i++)
+		ccgr_q->cm_query.cscn_targ_swp[i] =
+			be32_to_cpu(ccgr_q->cm_query.cscn_targ_swp[i]);
+}
+
 /* In the case that slow- and fast-path handling are both done by qman_poll()
  * (ie. because there is no interrupt handling), we ought to balance how often
  * we do the fast-path poll versus the slow-path poll. We'll use two decrementer
@@ -3433,22 +3446,25 @@ int qman_ceetm_query_ccgr(struct qm_mcc_ceetm_ccgr_query *ccgr_query,
 	PORTAL_IRQ_LOCK(p, irqflags);
 
 	mcc = qm_mc_start(&p->p);
-	mcc->ccgr_query = *ccgr_query;
+	mcc->ccgr_query.ccgrid = cpu_to_be16(ccgr_query->ccgrid);
+	mcc->ccgr_query.dcpid = ccgr_query->dcpid;
 	qm_mc_commit(&p->p, QM_CEETM_VERB_CCGR_QUERY);
 
 	while (!(mcr = qm_mc_result(&p->p)))
 		cpu_relax();
 	DPA_ASSERT((mcr->verb & QM_MCR_VERB_MASK) == QM_CEETM_VERB_CCGR_QUERY);
+	res = mcr->result;
+	if (res == QM_MCR_RESULT_OK) {
+		*response = mcr->ccgr_query;
+		hw_ccgr_query_to_cpu(response);
+	}
 
 	PORTAL_IRQ_UNLOCK(p, irqflags);
 	put_affine_portal();
-
-	res = mcr->result;
 	if (res != QM_MCR_RESULT_OK) {
 		pr_err("CEETM: QUERY CCGR failed\n");
 		return -EIO;
 	}
-	*response = mcr->ccgr_query;
 	return 0;
 }
 EXPORT_SYMBOL(qman_ceetm_query_ccgr);
diff --git a/include/linux/fsl_qman.h b/include/linux/fsl_qman.h
index 8b505c0..d507db7 100644
--- a/include/linux/fsl_qman.h
+++ b/include/linux/fsl_qman.h
@@ -733,11 +733,19 @@ struct qm_cgr_wr_parm {
 	union {
 		u32 word;
 		struct {
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 			u32 MA:8;
 			u32 Mn:5;
 			u32 SA:7; /* must be between 64-127 */
 			u32 Sn:6;
 			u32 Pn:6;
+#else
+			u32 Pn:6;
+			u32 Sn:6;
+			u32 SA:7; /* must be between 64-127 */
+			u32 Mn:5;
+			u32 MA:8;
+#endif
 		} __packed;
 	};
 } __packed;
-- 
1.7.5.4

