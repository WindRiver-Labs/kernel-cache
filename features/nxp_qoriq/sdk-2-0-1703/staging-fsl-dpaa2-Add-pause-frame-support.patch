From de2d6d7063431d67d74bad8e844c22713b710e92 Mon Sep 17 00:00:00 2001
From: Bogdan Purcareata <bogdan.purcareata@nxp.com>
Date: Wed, 9 Nov 2016 14:51:01 +0000
Subject: [PATCH 440/508] staging: fsl-dpaa2: Add pause frame support

Add L2 flow control support, configurable via ethtool.

This has an impact on the number of buffers available for a NI:
- If pause frames are enabled, there's a small number of available
  buffers in the pool. Testing shows that using a large number of
  buffers doesn't improve forwarding results. In forwarding scenarios
  with a large number of buffers, there's a tendency for a single core
  to fill up all available buffers with pending frames and never finish
  the work (due to memory access latencies / cache misses), so it's
  better to keep the number of buffers small for better latencies.
- If pause frames are disabled, more buffers are allocated and taildrop
  thresholds are enabled per Rx queue.

Pause frames can't be enabled / disabled if the interface is up and
autonegotiation is on.

By default, pause frames are disabled for an NI.

Move taildrop configuration to a separate function.

Signed-off-by: Bogdan Purcareata <bogdan.purcareata@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c     |   62 +++++++++++---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h     |   15 +++-
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c |   84 +++++++++++++++++++-
 3 files changed, 142 insertions(+), 19 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index c9096fd..1f3e5b59 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -944,7 +944,7 @@ static int seed_pool(struct dpaa2_eth_priv *priv, u16 bpid)
 	 */
 	preempt_disable();
 	for (j = 0; j < priv->num_channels; j++) {
-		for (i = 0; i < DPAA2_ETH_NUM_BUFS;
+		for (i = 0; i < priv->num_bufs;
 		     i += DPAA2_ETH_BUFS_PER_CMD) {
 			new_count = add_bufs(priv, bpid);
 			priv->channel[j]->buf_count += new_count;
@@ -1009,7 +1009,7 @@ static int refill_pool(struct dpaa2_eth_priv *priv,
 {
 	int new_count;
 
-	if (likely(ch->buf_count >= DPAA2_ETH_REFILL_THRESH))
+	if (likely(ch->buf_count >= priv->refill_thresh))
 		return 0;
 
 	do {
@@ -1019,9 +1019,9 @@ static int refill_pool(struct dpaa2_eth_priv *priv,
 			break;
 		}
 		ch->buf_count += new_count;
-	} while (ch->buf_count < DPAA2_ETH_NUM_BUFS);
+	} while (ch->buf_count < priv->num_bufs);
 
-	if (unlikely(ch->buf_count < DPAA2_ETH_NUM_BUFS))
+	if (unlikely(ch->buf_count < priv->num_bufs))
 		return -ENOMEM;
 
 	return 0;
@@ -2078,6 +2078,9 @@ static int setup_dpni(struct fsl_mc_device *ls_dev)
 	if (!priv->cls_rule)
 		goto err_cls_rule;
 
+	priv->num_bufs = DPAA2_ETH_NUM_BUFS_TD;
+	priv->refill_thresh = DPAA2_ETH_REFILL_THRESH_TD;
+
 	return 0;
 
 err_cls_rule:
@@ -2106,6 +2109,40 @@ static void free_dpni(struct dpaa2_eth_priv *priv)
 	kfree(priv->cls_rule);
 }
 
+int setup_fqs_taildrop(struct dpaa2_eth_priv *priv,
+		       bool enable)
+{
+	struct device *dev = priv->net_dev->dev.parent;
+	struct dpni_taildrop td;
+	int err = 0, i;
+
+	td.enable = enable;
+	td.threshold = DPAA2_ETH_TAILDROP_THRESH;
+
+	if (enable) {
+		priv->num_bufs = DPAA2_ETH_NUM_BUFS_TD;
+		priv->refill_thresh = DPAA2_ETH_REFILL_THRESH_TD;
+	} else {
+		priv->num_bufs = DPAA2_ETH_NUM_BUFS_FC;
+		priv->refill_thresh = DPAA2_ETH_REFILL_THRESH_FC;
+	}
+
+	for (i = 0; i < priv->num_fqs; i++) {
+		if (priv->fq[i].type != DPAA2_RX_FQ)
+			continue;
+
+		err = dpni_set_taildrop(priv->mc_io, 0, priv->mc_token,
+				DPNI_CP_QUEUE, DPNI_QUEUE_RX, 0,
+				priv->fq[i].flowid, &td);
+		if (err) {
+			dev_err(dev, "dpni_set_taildrop() failed (%d)\n", err);
+			break;
+		}
+	}
+
+	return err;
+}
+
 static int setup_rx_flow(struct dpaa2_eth_priv *priv,
 			 struct dpaa2_eth_fq *fq)
 {
@@ -2113,7 +2150,6 @@ static int setup_rx_flow(struct dpaa2_eth_priv *priv,
 	struct dpni_queue q = { { 0 } };
 	struct dpni_queue_id qid;
 	u8 q_opt = DPNI_QUEUE_OPT_USER_CTX | DPNI_QUEUE_OPT_DEST;
-	struct dpni_taildrop td;
 	int err;
 
 	err = dpni_get_queue(priv->mc_io, 0, priv->mc_token,
@@ -2136,15 +2172,6 @@ static int setup_rx_flow(struct dpaa2_eth_priv *priv,
 		return err;
 	}
 
-	td.enable = 1;
-	td.threshold = DPAA2_ETH_TAILDROP_THRESH;
-	err = dpni_set_taildrop(priv->mc_io, 0, priv->mc_token, DPNI_CP_QUEUE,
-			DPNI_QUEUE_RX, 0, fq->flowid, &td);
-	if (err) {
-		dev_err(dev, "dpni_set_taildrop() failed (%d)\n", err);
-		return err;
-	}
-
 	return 0;
 }
 
@@ -2425,6 +2452,13 @@ static int bind_dpni(struct dpaa2_eth_priv *priv)
 			return err;
 	}
 
+	/* pause frames are disabled by default, so enable taildrops */
+	err = setup_fqs_taildrop(priv, true);
+	if (err) {
+		dev_err(dev, "setup_fqs_taildrop() failed\n");
+		return err;
+	}
+
 	err = dpni_get_qdid(priv->mc_io, 0, priv->mc_token, DPNI_QUEUE_TX,
 				     &priv->tx_qdid);
 	if (err) {
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index 5105951..fde6a01 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -83,9 +83,14 @@
  * to accommodate the buffer refill delay.
  */
 #define DPAA2_ETH_MAX_FRAMES_PER_QUEUE	(DPAA2_ETH_TAILDROP_THRESH / 64)
-#define DPAA2_ETH_NUM_BUFS		(DPAA2_ETH_MAX_FRAMES_PER_QUEUE + 256)
-#define DPAA2_ETH_REFILL_THRESH	\
-	(DPAA2_ETH_NUM_BUFS - DPAA2_ETH_BUFS_PER_CMD)
+#define DPAA2_ETH_NUM_BUFS_TD		(DPAA2_ETH_MAX_FRAMES_PER_QUEUE + 256)
+#define DPAA2_ETH_REFILL_THRESH_TD	\
+	(DPAA2_ETH_NUM_BUFS_TD - DPAA2_ETH_BUFS_PER_CMD)
+
+/* Buffer quota per queue to use when flow control is active. */
+#define DPAA2_ETH_NUM_BUFS_FC		32
+#define DPAA2_ETH_REFILL_THRESH_FC	\
+	(DPAA2_ETH_NUM_BUFS_FC - DPAA2_ETH_BUFS_PER_CMD)
 
 /* Hardware requires alignment for ingress/egress buffer addresses
  * and ingress buffer lengths.
@@ -376,6 +381,9 @@ struct dpaa2_eth_priv {
 	u16 bpid;
 	u16 tx_qdid;
 
+	int num_bufs;
+	int refill_thresh;
+
 	u8 num_fqs;
 	/* Tx queues are at the beginning of the array */
 	struct dpaa2_eth_fq fq[DPAA2_ETH_MAX_QUEUES];
@@ -443,4 +451,5 @@ static inline int dpaa2_eth_queue_count(struct dpaa2_eth_priv *priv)
 
 void check_cls_support(struct dpaa2_eth_priv *priv);
 
+int setup_fqs_taildrop(struct dpaa2_eth_priv *priv, bool enable);
 #endif	/* __DPAA2_H */
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
index a7532b0..44eeeab 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
@@ -128,8 +128,8 @@ out:
 static int dpaa2_eth_set_settings(struct net_device *net_dev,
 				  struct ethtool_cmd *cmd)
 {
-	struct dpni_link_cfg cfg = {0};
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
+	struct dpni_link_cfg cfg = {0};
 	int err = 0;
 
 	netdev_dbg(net_dev, "Setting link parameters...");
@@ -139,7 +139,7 @@ static int dpaa2_eth_set_settings(struct net_device *net_dev,
 	 * the user know that.
 	 */
 	if (netif_running(net_dev)) {
-		netdev_info(net_dev, "Sorry, interface must be brought down first.\n");
+		netdev_warn(net_dev, "Sorry, interface must be brought down first.\n");
 		return -EACCES;
 	}
 
@@ -163,6 +163,84 @@ static int dpaa2_eth_set_settings(struct net_device *net_dev,
 	return err;
 }
 
+static void dpaa2_eth_get_pauseparam(struct net_device *net_dev,
+				struct ethtool_pauseparam *pause)
+{
+	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
+	struct dpni_link_state state = {0};
+	int err;
+
+	err = dpni_get_link_state(priv->mc_io, 0, priv->mc_token, &state);
+	if (err)
+		netdev_dbg(net_dev, "ERROR %d getting link state", err);
+
+	/* TODO: handle pause frame autonegotiation */
+	pause->autoneg = 0;
+
+	pause->rx_pause = !!(state.options & DPNI_LINK_OPT_PAUSE);
+	pause->tx_pause = pause->rx_pause ^
+		!!(state.options & DPNI_LINK_OPT_ASYM_PAUSE);
+}
+
+static int dpaa2_eth_set_pauseparam(struct net_device *net_dev,
+				struct ethtool_pauseparam *pause)
+{
+	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
+	struct dpni_link_state state = {0};
+	struct dpni_link_cfg cfg = {0};
+	u32 current_tx_pause;
+	int err = 0;
+
+	err = dpni_get_link_state(priv->mc_io, 0, priv->mc_token, &state);
+	if (err) {
+		netdev_dbg(net_dev, "ERROR %d getting link state", err);
+		goto out;
+	}
+
+	/* If the DPNI is up and autonegotiation is active, the user
+	 * won't be able to change flow control settings.
+	 */
+	if ((state.options & DPNI_LINK_OPT_AUTONEG) && netif_running(net_dev)) {
+		netdev_warn(net_dev,
+		"ERROR disable interface autonegotiation first.\n");
+		return -EACCES;
+	}
+
+	cfg.rate = state.rate;
+	cfg.options = state.options;
+	current_tx_pause = !!(cfg.options & DPNI_LINK_OPT_PAUSE) ^
+			   !!(cfg.options & DPNI_LINK_OPT_ASYM_PAUSE);
+
+	if (pause->rx_pause)
+		cfg.options |= DPNI_LINK_OPT_PAUSE;
+	else
+		cfg.options &= ~DPNI_LINK_OPT_PAUSE;
+
+	if (pause->rx_pause ^ pause->tx_pause)
+		cfg.options |= DPNI_LINK_OPT_ASYM_PAUSE;
+	else
+		cfg.options &= ~DPNI_LINK_OPT_ASYM_PAUSE;
+
+	err = dpni_set_link_cfg(priv->mc_io, 0, priv->mc_token, &cfg);
+	if (err) {
+		/* ethtool will be loud enough if we return an error; no point
+		 * in putting our own error message on the console by default
+		 */
+		netdev_dbg(net_dev, "ERROR %d setting link cfg", err);
+		goto out;
+	}
+
+	/* Enable / disable taildrops if Tx pause frames have changed */
+	if (current_tx_pause == pause->tx_pause)
+		goto out;
+
+	err = setup_fqs_taildrop(priv, !pause->tx_pause);
+	if (err)
+		netdev_dbg(net_dev, "ERROR %d configuring taildrop", err);
+out:
+	return err;
+}
+
 static void dpaa2_eth_get_strings(struct net_device *netdev, u32 stringset,
 				  u8 *data)
 {
@@ -762,6 +840,8 @@ const struct ethtool_ops dpaa2_ethtool_ops = {
 	.get_link = ethtool_op_get_link,
 	.get_settings = dpaa2_eth_get_settings,
 	.set_settings = dpaa2_eth_set_settings,
+	.get_pauseparam = dpaa2_eth_get_pauseparam,
+	.set_pauseparam = dpaa2_eth_set_pauseparam,
 	.get_sset_count = dpaa2_eth_get_sset_count,
 	.get_ethtool_stats = dpaa2_eth_get_ethtool_stats,
 	.get_strings = dpaa2_eth_get_strings,
-- 
1.7.5.4

