From bfa11bd9937397f91f62e9475e290281818db335 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Wed, 11 Oct 2017 13:49:25 +0800
Subject: [PATCH 22/29] Revert "crypto: dpaa2_caam - refactor dequeuing (FQDAN
 + NAPI)"

This reverts commit 03797fcc601d1a040e6fb863fc86abd9fd3e6cd8.

At first, dpaa2-caam patches are from nxp-sdk-2.0 that is based on
kernel4.1. But in kernel4.8, there is a obvious changing on crypto
software architecture, so modify code to pass compilation, but this
feature is not verified.
Now, there is an open source sdk that is based on kernel4.4. In
kernel4.4, crypto software architecture is almost the same with
kernel4.8, so we get dpaa2-caam patches from open source sdk, and
revert patches from nxp-sdk-2.0.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/dpaa2-caam/dpaa2-caam.c |   97 +++++++++++---------------------
 drivers/crypto/dpaa2-caam/dpaa2-caam.h |    6 +-
 2 files changed, 37 insertions(+), 66 deletions(-)

diff --git a/drivers/crypto/dpaa2-caam/dpaa2-caam.c b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
index 04d931d..9fb32b1 100644
--- a/drivers/crypto/dpaa2-caam/dpaa2-caam.c
+++ b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
@@ -4730,8 +4730,16 @@ static struct caam_hash_alg *caam_hash_alloc(struct dpaa2_caam_priv *priv,
 static void dpaa2_caam_fqdan_cb(struct dpaa2_io_notification_ctx *nctx)
 {
 	struct dpaa2_caam_priv_per_cpu *ppriv;
+	int err;
 
 	ppriv = container_of(nctx, struct dpaa2_caam_priv_per_cpu, nctx);
+
+	do {
+		err = dpaa2_io_service_pull_fq(NULL, ppriv->rsp_fqid,
+					       ppriv->store);
+	} while (err);
+
+	ppriv->has_frames = true;
 	napi_schedule_irqoff(&ppriv->napi);
 }
 
@@ -4759,8 +4767,7 @@ static int __cold dpaa2_dpseci_dpio_setup(struct dpaa2_caam_priv *priv)
 			goto err;
 		}
 
-		ppriv->store = dpaa2_io_store_create(DPAA2_CAAM_STORE_SIZE,
-						     dev);
+		ppriv->store = dpaa2_io_store_create(16, dev);
 		if (unlikely(!ppriv->store)) {
 			dev_err(dev, "dpaa2_io_store_create() failed\n");
 			goto err;
@@ -4878,83 +4885,47 @@ static void dpaa2_caam_process_fd(struct dpaa2_caam_priv *priv,
 	req->cbk(req->ctx, err);
 }
 
-static int dpaa2_caam_pull_fq(struct dpaa2_caam_priv_per_cpu *ppriv)
-{
-	int err;
-
-	/* Retry while portal is busy */
-	do {
-		err = dpaa2_io_service_pull_fq(NULL, ppriv->rsp_fqid,
-					       ppriv->store);
-	} while (err == -EBUSY);
-
-	if (unlikely(err))
-		dev_err(ppriv->priv->dev, "dpaa2_io_service_pull err %d", err);
-
-	return err;
-}
-
-static int dpaa2_caam_store_consume(struct dpaa2_caam_priv_per_cpu *ppriv)
-{
-	struct dpaa2_dq *dq;
-	int cleaned = 0, is_last;
-
-	do {
-		dq = dpaa2_io_store_next(ppriv->store, &is_last);
-		if (unlikely(!dq)) {
-			if (unlikely(!is_last)) {
-				dev_dbg(ppriv->priv->dev,
-					"FQ %d returned no valid frames\n",
-					ppriv->rsp_fqid);
-				/*
-				 * MUST retry until we get some sort of
-				 * valid response token (be it "empty dequeue"
-				 * or a valid frame).
-				 */
-				continue;
-			}
-			break;
-		}
-
-		/* Process FD */
-		dpaa2_caam_process_fd(ppriv->priv, dpaa2_dq_fd(dq));
-		cleaned++;
-	} while (!is_last);
-
-	return cleaned;
-}
-
 static int dpaa2_dpseci_poll(struct napi_struct *napi, int budget)
 {
 	struct dpaa2_caam_priv_per_cpu *ppriv;
 	struct dpaa2_caam_priv *priv;
-	int err, cleaned = 0, store_cleaned;
+	struct dpaa2_dq *dq;
+	int err, cleaned = 0, is_last = 0;
 
 	ppriv = container_of(napi, struct dpaa2_caam_priv_per_cpu, napi);
-	priv = ppriv->priv;
 
-	if (unlikely(dpaa2_caam_pull_fq(ppriv)))
+	if (!ppriv->has_frames) {
+		napi_complete_done(napi, cleaned);
 		return 0;
+	}
 
-	do {
-		store_cleaned = dpaa2_caam_store_consume(ppriv);
-		cleaned += store_cleaned;
+	priv = ppriv->priv;
+	while (!is_last && cleaned < budget) {
+		do {
+			dq = dpaa2_io_store_next(ppriv->store, &is_last);
+		} while (!is_last && !dq);
 
-		if (store_cleaned == 0 ||
-		    cleaned > budget - DPAA2_CAAM_STORE_SIZE)
+		if (unlikely(!dq)) {
+			dev_err(priv->dev, "FQID %d returned no valid frames!\n",
+				ppriv->rsp_fqid);
 			break;
+		}
 
-		/* Try to dequeue some more */
-		err = dpaa2_caam_pull_fq(ppriv);
-		if (unlikely(err))
-			break;
-	} while (1);
+		/* Process FD */
+		dpaa2_caam_process_fd(priv, dpaa2_dq_fd(dq));
+		cleaned++;
+	}
 
-	if (cleaned < budget)
-		napi_complete_done(napi, cleaned);
+	/* Rearm if there are no more frames dequeued in store */
+	if (is_last) {
+		ppriv->has_frames = false;
 		err = dpaa2_io_service_rearm(NULL, &ppriv->nctx);
 		if (unlikely(err))
 			dev_err(priv->dev, "Notification rearm failed\n");
+	}
+
+	if (cleaned < budget)
+		napi_complete_done(napi, cleaned);
 
 	return cleaned;
 }
diff --git a/drivers/crypto/dpaa2-caam/dpaa2-caam.h b/drivers/crypto/dpaa2-caam/dpaa2-caam.h
index da90624..7889af4 100644
--- a/drivers/crypto/dpaa2-caam/dpaa2-caam.h
+++ b/drivers/crypto/dpaa2-caam/dpaa2-caam.h
@@ -45,9 +45,7 @@
 #define DPAA2_CAAM_MAX_QUEUE_PAIRS	NR_CPUS
 #define DPAA2_CAAM_MAX_QUEUES		(2 * DPAA2_CAAM_MAX_QUEUE_PAIRS)
 
-#define DPAA2_CAAM_STORE_SIZE	16
-/* NAPI weight *must* be a multiple of the store size. */
-#define DPAA2_CAAM_NAPI_WEIGHT	64
+#define DPAA2_CAAM_NAPI_WEIGHT	63
 
 /**
  * dpaa2_caam_priv - driver private data
@@ -82,6 +80,7 @@ struct dpaa2_caam_priv {
  * @prio: internal queue number - index for dpaa2_caam_priv.*_queue_attr
  * @nctx: notification context of response FQ
  * @store: where dequeued frames are stored
+ * @has_frames: indication that response FQ has frames to be dequeued
  * @priv: backpointer to dpaa2_caam_priv
  */
 struct dpaa2_caam_priv_per_cpu {
@@ -92,6 +91,7 @@ struct dpaa2_caam_priv_per_cpu {
 	int prio;
 	struct dpaa2_io_notification_ctx nctx;
 	struct dpaa2_io_store *store;
+	bool has_frames;
 	struct dpaa2_caam_priv *priv;
 };
 
-- 
1.7.5.4

