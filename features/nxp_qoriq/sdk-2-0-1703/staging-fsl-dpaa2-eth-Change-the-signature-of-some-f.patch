From 7b8c5296650956041ad806fd359da0f9edfc4231 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@nxp.com>
Date: Fri, 4 Mar 2016 18:00:20 +0200
Subject: [PATCH 373/508] staging: fsl-dpaa2/eth: Change the signature of some
 functions

Some ethtool functions now receive as parameter the private
data structure instead of a net device. No functional change
but will come in handy for the next patches.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c     |    4 +-
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h     |    4 +-
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c |   58 ++++++++++----------
 3 files changed, 34 insertions(+), 32 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 0232c96..0c61d53 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -2169,13 +2169,13 @@ static int bind_dpni(struct dpaa2_eth_priv *priv)
 		return err;
 	}
 
-	check_fs_support(net_dev);
+	check_fs_support(priv);
 
 	/* have the interface implicitly distribute traffic based on supported
 	 * header fields
 	 */
 	if (dpaa2_eth_hash_enabled(priv)) {
-		err = dpaa2_eth_set_hash(net_dev);
+		err = dpaa2_eth_set_hash(priv);
 		if (err)
 			return err;
 	}
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index cb7dd7c..bfe5afc 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -358,7 +358,7 @@ struct dpaa2_eth_priv {
 
 extern const struct ethtool_ops dpaa2_ethtool_ops;
 
-int dpaa2_eth_set_hash(struct net_device *net_dev);
+int dpaa2_eth_set_hash(struct dpaa2_eth_priv *priv);
 
 static int dpaa2_eth_queue_count(struct dpaa2_eth_priv *priv)
 {
@@ -378,6 +378,6 @@ static inline int dpaa2_eth_max_channels(struct dpaa2_eth_priv *priv)
 		     priv->dpni_attrs.max_senders);
 }
 
-void check_fs_support(struct net_device *);
+void check_fs_support(struct dpaa2_eth_priv *priv);
 
 #endif	/* __DPAA2_H */
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
index 2130e70..cb7a090 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
@@ -327,7 +327,7 @@ static const struct dpaa2_eth_hash_fields {
 	},
 };
 
-static int cls_key_off(struct net_device *net_dev, u64 flag)
+static int cls_key_off(struct dpaa2_eth_priv *priv, u64 flag)
 {
 	int i, off = 0;
 
@@ -340,7 +340,7 @@ static int cls_key_off(struct net_device *net_dev, u64 flag)
 	return -1;
 }
 
-static u8 cls_key_size(struct net_device *net_dev)
+static u8 cls_key_size(struct dpaa2_eth_priv *priv)
 {
 	u8 i, size = 0;
 
@@ -350,14 +350,14 @@ static u8 cls_key_size(struct net_device *net_dev)
 	return size;
 }
 
-void check_fs_support(struct net_device *net_dev)
+void check_fs_support(struct dpaa2_eth_priv *priv)
 {
-	u8 key_size = cls_key_size(net_dev);
-	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
+	u8 key_size = cls_key_size(priv);
+	struct device *dev = priv->net_dev->dev.parent;
 
 	if (priv->dpni_attrs.options & DPNI_OPT_DIST_FS &&
 	    priv->dpni_attrs.max_dist_key_size < key_size) {
-		dev_err(&net_dev->dev,
+		dev_err(dev,
 			"max_dist_key_size = %d, expected %d.  Steering is disabled\n",
 			priv->dpni_attrs.max_dist_key_size,
 			key_size);
@@ -366,10 +366,9 @@ void check_fs_support(struct net_device *net_dev)
 }
 
 /* Set RX hash options */
-int dpaa2_eth_set_hash(struct net_device *net_dev)
+int dpaa2_eth_set_hash(struct dpaa2_eth_priv *priv)
 {
-	struct device *dev = net_dev->dev.parent;
-	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
+	struct device *dev = priv->net_dev->dev.parent;
 	struct dpkg_profile_cfg cls_cfg;
 	struct dpni_rx_tc_dist_cfg dist_cfg;
 	u8 *dma_mem;
@@ -409,10 +408,10 @@ int dpaa2_eth_set_hash(struct net_device *net_dev)
 	memset(&dist_cfg, 0, sizeof(dist_cfg));
 
 	/* Prepare for setting the rx dist */
-	dist_cfg.key_cfg_iova = dma_map_single(net_dev->dev.parent, dma_mem,
+	dist_cfg.key_cfg_iova = dma_map_single(dev, dma_mem,
 					       DPAA2_CLASSIFIER_DMA_SIZE,
 					       DMA_TO_DEVICE);
-	if (dma_mapping_error(net_dev->dev.parent, dist_cfg.key_cfg_iova)) {
+	if (dma_mapping_error(dev, dist_cfg.key_cfg_iova)) {
 		dev_err(dev, "DMA mapping failed\n");
 		kfree(dma_mem);
 		return -ENOMEM;
@@ -427,7 +426,7 @@ int dpaa2_eth_set_hash(struct net_device *net_dev)
 	}
 
 	err = dpni_set_rx_tc_dist(priv->mc_io, 0, priv->mc_token, 0, &dist_cfg);
-	dma_unmap_single(net_dev->dev.parent, dist_cfg.key_cfg_iova,
+	dma_unmap_single(dev, dist_cfg.key_cfg_iova,
 			 DPAA2_CLASSIFIER_DMA_SIZE, DMA_TO_DEVICE);
 	kfree(dma_mem);
 	if (err) {
@@ -442,10 +441,11 @@ static int prep_cls_rule(struct net_device *net_dev,
 			 struct ethtool_rx_flow_spec *fs,
 			 void *key)
 {
+	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
 	struct ethtool_tcpip4_spec *l4ip4_h, *l4ip4_m;
 	struct ethhdr *eth_h, *eth_m;
 	struct ethtool_flow_ext *ext_h, *ext_m;
-	const u8 key_size = cls_key_size(net_dev);
+	const u8 key_size = cls_key_size(priv);
 	void *msk = key + key_size;
 
 	memset(key, 0, key_size * 2);
@@ -478,29 +478,30 @@ l4ip4:
 		}
 
 		if (l4ip4_m->ip4src) {
-			*(u32 *)(key + cls_key_off(net_dev, RXH_IP_SRC))
+			*(u32 *)(key + cls_key_off(priv, RXH_IP_SRC))
 				= l4ip4_h->ip4src;
-			*(u32 *)(msk + cls_key_off(net_dev, RXH_IP_SRC))
+			*(u32 *)(msk + cls_key_off(priv, RXH_IP_SRC))
 				= l4ip4_m->ip4src;
 		}
+
 		if (l4ip4_m->ip4dst) {
-			*(u32 *)(key + cls_key_off(net_dev, RXH_IP_DST))
+			*(u32 *)(key + cls_key_off(priv, RXH_IP_DST))
 				= l4ip4_h->ip4dst;
-			*(u32 *)(msk + cls_key_off(net_dev, RXH_IP_DST))
+			*(u32 *)(msk + cls_key_off(priv, RXH_IP_DST))
 				= l4ip4_m->ip4dst;
 		}
 
 		if (l4ip4_m->psrc) {
-			*(u32 *)(key + cls_key_off(net_dev, RXH_L4_B_0_1))
+			*(u32 *)(key + cls_key_off(priv, RXH_L4_B_0_1))
 				= l4ip4_h->psrc;
-			*(u32 *)(msk + cls_key_off(net_dev, RXH_L4_B_0_1))
+			*(u32 *)(msk + cls_key_off(priv, RXH_L4_B_0_1))
 				= l4ip4_m->psrc;
 		}
 
 		if (l4ip4_m->pdst) {
-			*(u32 *)(key + cls_key_off(net_dev, RXH_L4_B_2_3))
+			*(u32 *)(key + cls_key_off(priv, RXH_L4_B_2_3))
 				= l4ip4_h->pdst;
-			*(u32 *)(msk + cls_key_off(net_dev, RXH_L4_B_2_3))
+			*(u32 *)(msk + cls_key_off(priv, RXH_L4_B_2_3))
 				= l4ip4_m->pdst;
 		}
 		break;
@@ -520,9 +521,9 @@ l4ip4:
 		}
 
 		if (!is_zero_ether_addr(eth_m->h_dest)) {
-			ether_addr_copy(key + cls_key_off(net_dev, RXH_L2DA),
+			ether_addr_copy(key + cls_key_off(priv, RXH_L2DA),
 					eth_h->h_dest);
-			ether_addr_copy(msk + cls_key_off(net_dev, RXH_L2DA),
+			ether_addr_copy(msk + cls_key_off(priv, RXH_L2DA),
 					eth_m->h_dest);
 		}
 		break;
@@ -542,9 +543,9 @@ l4ip4:
 		ext_m = &fs->m_ext;
 
 		if (!is_zero_ether_addr(ext_m->h_dest)) {
-			ether_addr_copy(key + cls_key_off(net_dev, RXH_L2DA),
+			ether_addr_copy(key + cls_key_off(priv, RXH_L2DA),
 					ext_h->h_dest);
-			ether_addr_copy(msk + cls_key_off(net_dev, RXH_L2DA),
+			ether_addr_copy(msk + cls_key_off(priv, RXH_L2DA),
 					ext_m->h_dest);
 		}
 	}
@@ -556,6 +557,7 @@ static int do_cls(struct net_device *net_dev,
 		  bool add)
 {
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
+	struct device *dev = net_dev->dev.parent;
 	const int rule_cnt = DPAA2_CLASSIFIER_ENTRY_COUNT;
 	struct dpni_rule_cfg rule_cfg;
 	void *dma_mem;
@@ -573,7 +575,7 @@ static int do_cls(struct net_device *net_dev,
 		return -EINVAL;
 
 	memset(&rule_cfg, 0, sizeof(rule_cfg));
-	rule_cfg.key_size = cls_key_size(net_dev);
+	rule_cfg.key_size = cls_key_size(priv);
 
 	/* allocate twice the key size, for the actual key and for mask */
 	dma_mem =  kzalloc(rule_cfg.key_size * 2, GFP_DMA | GFP_KERNEL);
@@ -584,7 +586,7 @@ static int do_cls(struct net_device *net_dev,
 	if (err)
 		goto err_free_mem;
 
-	rule_cfg.key_iova = dma_map_single(net_dev->dev.parent, dma_mem,
+	rule_cfg.key_iova = dma_map_single(dev, dma_mem,
 					   rule_cfg.key_size * 2,
 					   DMA_TO_DEVICE);
 
@@ -613,7 +615,7 @@ static int do_cls(struct net_device *net_dev,
 		err = dpni_remove_fs_entry(priv->mc_io, 0, priv->mc_token, 0,
 					   &rule_cfg);
 
-	dma_unmap_single(net_dev->dev.parent, rule_cfg.key_iova,
+	dma_unmap_single(dev, rule_cfg.key_iova,
 			 rule_cfg.key_size * 2, DMA_TO_DEVICE);
 	if (err) {
 		netdev_err(net_dev, "dpaa2_add_cls() error %d\n", err);
-- 
1.7.5.4

