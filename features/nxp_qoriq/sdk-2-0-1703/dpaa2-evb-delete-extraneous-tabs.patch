From 0bfef201037c32be1fe5084fca33ff752421917b Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@nxp.com>
Date: Tue, 8 Nov 2016 11:29:17 +0200
Subject: [PATCH 407/508] dpaa2-evb: delete extraneous tabs

Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/evb/dpdmux.c |   34 ++--
 drivers/staging/fsl-dpaa2/evb/dpdmux.h |  296 ++++++++++++++++----------------
 2 files changed, 165 insertions(+), 165 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux.c b/drivers/staging/fsl-dpaa2/evb/dpdmux.c
index a1ba8cc..15df2d1 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux.c
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux.c
@@ -124,10 +124,10 @@ int dpdmux_close(struct fsl_mc_io *mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpdmux_create(struct fsl_mc_io	*mc_io,
-		  u16	dprc_token,
-		u32	cmd_flags,
-		const struct dpdmux_cfg	*cfg,
+int dpdmux_create(struct fsl_mc_io *mc_io,
+		  u16 dprc_token,
+		u32 cmd_flags,
+		const struct dpdmux_cfg *cfg,
 		u32 *obj_id)
 {
 	struct mc_command cmd = { 0 };
@@ -294,10 +294,10 @@ int dpdmux_reset(struct fsl_mc_io *mc_io,
  *
  * Return:	'0' on Success; Error code otherwise.
  */
-int dpdmux_set_irq(struct fsl_mc_io	*mc_io,
-		   u32		cmd_flags,
-		   u16		token,
-		   u8		irq_index,
+int dpdmux_set_irq(struct fsl_mc_io *mc_io,
+		   u32 cmd_flags,
+		   u16 token,
+		   u8 irq_index,
 		   struct dpdmux_irq_cfg *irq_cfg)
 {
 	struct mc_command cmd = { 0 };
@@ -326,9 +326,9 @@ int dpdmux_set_irq(struct fsl_mc_io	*mc_io,
  */
 int dpdmux_get_irq(struct fsl_mc_io *mc_io,
 		   u32 cmd_flags,
-		   u16		token,
-		   u8		irq_index,
-		   int			*type,
+		   u16 token,
+		   u8 irq_index,
+		   int *type,
 		   struct dpdmux_irq_cfg *irq_cfg)
 {
 	struct mc_command cmd = { 0 };
@@ -792,12 +792,12 @@ int dpdmux_if_add_l2_rule(struct fsl_mc_io *mc_io,
 *
 * Return:	'0' on Success; Error code otherwise.
 */
-int dpdmux_if_get_counter(struct fsl_mc_io		*mc_io,
-			  u32			cmd_flags,
-			  u16			token,
-			  u16			if_id,
-			  enum dpdmux_counter_type	counter_type,
-			  u64			*counter)
+int dpdmux_if_get_counter(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  u16 if_id,
+			  enum dpdmux_counter_type counter_type,
+			  u64 *counter)
 {
 	struct mc_command cmd = { 0 };
 	int err;
diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux.h b/drivers/staging/fsl-dpaa2/evb/dpdmux.h
index 0f71142..7a831eb 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux.h
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux.h
@@ -40,14 +40,14 @@ struct fsl_mc_io;
  * Contains API for handling DPDMUX topology and functionality
  */
 
-int dpdmux_open(struct fsl_mc_io	 *mc_io,
-		u32		 cmd_flags,
-		int			 dpdmux_id,
-		u16		 *token);
+int dpdmux_open(struct fsl_mc_io *mc_io,
+		u32 cmd_flags,
+		int dpdmux_id,
+		u16 *token);
 
-int dpdmux_close(struct fsl_mc_io	*mc_io,
-		 u32		cmd_flags,
-		 u16		token);
+int dpdmux_close(struct fsl_mc_io *mc_io,
+		 u32 cmd_flags,
+		 u16 token);
 
 /**
  * DPDMUX general options
@@ -56,10 +56,10 @@ int dpdmux_close(struct fsl_mc_io	*mc_io,
 /**
  * Enable bridging between internal interfaces
  */
-#define DPDMUX_OPT_BRIDGE_EN		0x0000000000000002ULL
+#define DPDMUX_OPT_BRIDGE_EN	0x0000000000000002ULL
 
-#define DPDMUX_IRQ_INDEX_IF			0x0000
-#define DPDMUX_IRQ_INDEX		0x0001
+#define DPDMUX_IRQ_INDEX_IF	0x0000
+#define DPDMUX_IRQ_INDEX	0x0001
 
 /**
  * IRQ event - Indicates that the link state changed
@@ -101,9 +101,9 @@ enum dpdmux_method {
  *	 use this structure to change default settings
  */
 struct dpdmux_cfg {
-	enum dpdmux_method	method;
-	enum dpdmux_manip	manip;
-	u16		num_ifs;
+	enum dpdmux_method method;
+	enum dpdmux_manip manip;
+	u16 num_ifs;
 	/**
 	 * struct adv - Advanced parameters
 	 * @options: DPDMUX options - combination of 'DPDMUX_OPT_<X>' flags
@@ -123,33 +123,33 @@ struct dpdmux_cfg {
 	} adv;
 };
 
-int dpdmux_create(struct fsl_mc_io		*mc_io,
-		  u16			dprc_token,
-		  u32			cmd_flags,
-		  const struct dpdmux_cfg	*cfg,
-		  u32			*obj_id);
+int dpdmux_create(struct fsl_mc_io *mc_io,
+		  u16 dprc_token,
+		  u32 cmd_flags,
+		  const struct dpdmux_cfg *cfg,
+		  u32 *obj_id);
 
-int dpdmux_destroy(struct fsl_mc_io	*mc_io,
-		   u16		dprc_token,
-		   u32		cmd_flags,
-		   u32		object_id);
+int dpdmux_destroy(struct fsl_mc_io *mc_io,
+		   u16 dprc_token,
+		   u32 cmd_flags,
+		   u32 object_id);
 
-int dpdmux_enable(struct fsl_mc_io	*mc_io,
-		  u32		cmd_flags,
-		  u16		token);
+int dpdmux_enable(struct fsl_mc_io *mc_io,
+		  u32 cmd_flags,
+		  u16 token);
 
-int dpdmux_disable(struct fsl_mc_io	*mc_io,
-		   u32		cmd_flags,
-		   u16		token);
+int dpdmux_disable(struct fsl_mc_io *mc_io,
+		   u32 cmd_flags,
+		   u16 token);
 
-int dpdmux_is_enabled(struct fsl_mc_io	*mc_io,
-		      u32		cmd_flags,
-		      u16		token,
-		      int		*en);
+int dpdmux_is_enabled(struct fsl_mc_io *mc_io,
+		      u32 cmd_flags,
+		      u16 token,
+		      int *en);
 
-int dpdmux_reset(struct fsl_mc_io	*mc_io,
-		 u32		cmd_flags,
-		 u16		token);
+int dpdmux_reset(struct fsl_mc_io *mc_io,
+		 u32 cmd_flags,
+		 u16 token);
 
 /**
  * struct dpdmux_irq_cfg - IRQ configuration
@@ -158,59 +158,59 @@ int dpdmux_reset(struct fsl_mc_io	*mc_io,
  * @irq_num: A user defined number associated with this IRQ
  */
 struct dpdmux_irq_cfg {
-	     u64		addr;
-	     u32		val;
-	     int		irq_num;
+	     u64 addr;
+	     u32 val;
+	     int irq_num;
 };
 
-int dpdmux_set_irq(struct fsl_mc_io		*mc_io,
-		   u32			cmd_flags,
-		   u16			token,
-		   u8			irq_index,
-		   struct dpdmux_irq_cfg	*irq_cfg);
-
-int dpdmux_get_irq(struct fsl_mc_io		*mc_io,
-		   u32			cmd_flags,
-		   u16			token,
-		   u8			irq_index,
-		   int				*type,
-		   struct dpdmux_irq_cfg	*irq_cfg);
-
-int dpdmux_set_irq_enable(struct fsl_mc_io	*mc_io,
-			  u32		cmd_flags,
-			  u16		token,
-			  u8		irq_index,
-			  u8		en);
-
-int dpdmux_get_irq_enable(struct fsl_mc_io	*mc_io,
-			  u32		cmd_flags,
-			  u16		token,
-			  u8		irq_index,
-			  u8		*en);
-
-int dpdmux_set_irq_mask(struct fsl_mc_io	*mc_io,
-			u32		cmd_flags,
-			u16		token,
-			u8			irq_index,
-			u32		mask);
-
-int dpdmux_get_irq_mask(struct fsl_mc_io	*mc_io,
-			u32		cmd_flags,
-			u16		token,
-			u8			irq_index,
-			u32		*mask);
-
-int dpdmux_get_irq_status(struct fsl_mc_io	*mc_io,
-			  u32		cmd_flags,
-			  u16		token,
-			  u8		irq_index,
-			  u32		*status);
-
-int dpdmux_clear_irq_status(struct fsl_mc_io	*mc_io,
-			    u32		cmd_flags,
-			    u16		token,
-			    u8		irq_index,
-			    u32		status);
+int dpdmux_set_irq(struct fsl_mc_io *mc_io,
+		   u32 cmd_flags,
+		   u16 token,
+		   u8 irq_index,
+		   struct dpdmux_irq_cfg *irq_cfg);
+
+int dpdmux_get_irq(struct fsl_mc_io *mc_io,
+		   u32 cmd_flags,
+		   u16 token,
+		   u8 irq_index,
+		   int *type,
+		   struct dpdmux_irq_cfg *irq_cfg);
+
+int dpdmux_set_irq_enable(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  u8 irq_index,
+			  u8 en);
+
+int dpdmux_get_irq_enable(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  u8 irq_index,
+			  u8 *en);
+
+int dpdmux_set_irq_mask(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token,
+			u8 irq_index,
+			u32 mask);
+
+int dpdmux_get_irq_mask(struct fsl_mc_io *mc_io,
+			u32 cmd_flags,
+			u16 token,
+			u8 irq_index,
+			u32 *mask);
+
+int dpdmux_get_irq_status(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  u8 irq_index,
+			  u32 *status);
+
+int dpdmux_clear_irq_status(struct fsl_mc_io *mc_io,
+			    u32 cmd_flags,
+			    u16 token,
+			    u8 irq_index,
+			    u32 status);
 
 /**
  * struct dpdmux_attr - Structure representing DPDMUX attributes
@@ -222,23 +222,23 @@ int dpdmux_clear_irq_status(struct fsl_mc_io	*mc_io,
  * @mem_size: DPDMUX frame storage memory size
  */
 struct dpdmux_attr {
-	int			id;
-	u64		options;
-	enum dpdmux_method	method;
-	enum dpdmux_manip	manip;
-	u16		num_ifs;
-	u16		mem_size;
+	int id;
+	u64 options;
+	enum dpdmux_method method;
+	enum dpdmux_manip manip;
+	u16 num_ifs;
+	u16 mem_size;
 };
 
-int dpdmux_get_attributes(struct fsl_mc_io	*mc_io,
-			  u32		cmd_flags,
-			  u16		token,
-			  struct dpdmux_attr	*attr);
+int dpdmux_get_attributes(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  struct dpdmux_attr *attr);
 
-int dpdmux_set_max_frame_length(struct fsl_mc_io	*mc_io,
-				u32		cmd_flags,
-				u16		token,
-				u16		max_frame_length);
+int dpdmux_set_max_frame_length(struct fsl_mc_io *mc_io,
+				u32 cmd_flags,
+				u16 token,
+				u16 max_frame_length);
 
 /**
  * enum dpdmux_counter_type - Counter types
@@ -301,14 +301,14 @@ enum dpdmux_action {
  * @unaccept_act: Defines action on frames not accepted
  */
 struct dpdmux_accepted_frames {
-	enum dpdmux_accepted_frames_type	type;
-	enum dpdmux_action			unaccept_act;
+	enum dpdmux_accepted_frames_type type;
+	enum dpdmux_action unaccept_act;
 };
 
-int dpdmux_if_set_accepted_frames(struct fsl_mc_io		*mc_io,
-				  u32			cmd_flags,
-				  u16			token,
-				  u16			if_id,
+int dpdmux_if_set_accepted_frames(struct fsl_mc_io *mc_io,
+				  u32 cmd_flags,
+				  u16 token,
+				  u16 if_id,
 				  const struct dpdmux_accepted_frames *cfg);
 
 /**
@@ -318,16 +318,16 @@ int dpdmux_if_set_accepted_frames(struct fsl_mc_io		*mc_io,
  * @accept_frame_type: Indicates type of accepted frames for the interface
  */
 struct dpdmux_if_attr {
-	u32				rate;
-	int					enabled;
-	enum dpdmux_accepted_frames_type	accept_frame_type;
+	u32 rate;
+	int enabled;
+	enum dpdmux_accepted_frames_type accept_frame_type;
 };
 
-int dpdmux_if_get_attributes(struct fsl_mc_io		*mc_io,
-			     u32			cmd_flags,
-			     u16			token,
-			     u16			if_id,
-			     struct dpdmux_if_attr	*attr);
+int dpdmux_if_get_attributes(struct fsl_mc_io *mc_io,
+			     u32 cmd_flags,
+			     u16 token,
+			     u16 if_id,
+			     struct dpdmux_if_attr *attr);
 
 /**
  * struct dpdmux_l2_rule - Structure representing L2 rule
@@ -335,32 +335,32 @@ int dpdmux_if_get_attributes(struct fsl_mc_io		*mc_io,
  * @vlan_id: VLAN ID
  */
 struct dpdmux_l2_rule {
-	u8		mac_addr[6];
-	u16	vlan_id;
+	u8 mac_addr[6];
+	u16 vlan_id;
 };
 
-int dpdmux_if_remove_l2_rule(struct fsl_mc_io			*mc_io,
-			     u32				cmd_flags,
-			     u16				token,
-			     u16				if_id,
-			     const struct dpdmux_l2_rule	*rule);
-
-int dpdmux_if_add_l2_rule(struct fsl_mc_io		*mc_io,
-			  u32			cmd_flags,
-			  u16			token,
-			  u16			if_id,
-			  const struct dpdmux_l2_rule	*rule);
-
-int dpdmux_if_get_counter(struct fsl_mc_io		*mc_io,
-			  u32			cmd_flags,
-			  u16			token,
-			  u16			if_id,
-			  enum dpdmux_counter_type	counter_type,
-			  u64			*counter);
-
-int dpdmux_ul_reset_counters(struct fsl_mc_io	*mc_io,
-			     u32		cmd_flags,
-			     u16		token);
+int dpdmux_if_remove_l2_rule(struct fsl_mc_io *mc_io,
+			     u32 cmd_flags,
+			     u16 token,
+			     u16 if_id,
+			     const struct dpdmux_l2_rule *rule);
+
+int dpdmux_if_add_l2_rule(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  u16 if_id,
+			  const struct dpdmux_l2_rule *rule);
+
+int dpdmux_if_get_counter(struct fsl_mc_io *mc_io,
+			  u32 cmd_flags,
+			  u16 token,
+			  u16 if_id,
+			  enum dpdmux_counter_type counter_type,
+			  u64 *counter);
+
+int dpdmux_ul_reset_counters(struct fsl_mc_io *mc_io,
+			     u32 cmd_flags,
+			     u16 token);
 
 /**
  * Enable auto-negotiation
@@ -389,11 +389,11 @@ struct dpdmux_link_cfg {
 	u64 options;
 };
 
-int dpdmux_if_set_link_cfg(struct fsl_mc_io		*mc_io,
-			   u32			cmd_flags,
-			   u16			token,
-			   u16			if_id,
-			   struct dpdmux_link_cfg	*cfg);
+int dpdmux_if_set_link_cfg(struct fsl_mc_io *mc_io,
+			   u32 cmd_flags,
+			   u16 token,
+			   u16 if_id,
+			   struct dpdmux_link_cfg *cfg);
 /**
  * struct dpdmux_link_state - Structure representing DPDMUX link state
  * @rate: Rate
@@ -406,11 +406,11 @@ struct dpdmux_link_state {
 	int      up;
 };
 
-int dpdmux_if_get_link_state(struct fsl_mc_io		*mc_io,
-			     u32			cmd_flags,
-			     u16			token,
-			     u16			if_id,
-			     struct dpdmux_link_state	*state);
+int dpdmux_if_get_link_state(struct fsl_mc_io *mc_io,
+			     u32 cmd_flags,
+			     u16 token,
+			     u16 if_id,
+			     struct dpdmux_link_state *state);
 
 int dpdmux_get_api_version(struct fsl_mc_io *mc_io,
 			   u32 cmd_flags,
-- 
1.7.5.4

