From 8af5de69a77dcebc4e81f53787d3e231696a3a32 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Horia=20Geant=C4=83?= <horia.geanta@nxp.com>
Date: Thu, 26 Jan 2017 10:36:12 +0200
Subject: [PATCH 355/508] crypto: caam/qi - fix dma_mask initialization on
 ARM32
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

On ARM32 / ARMv8 AArch32, caam/qi initialization fails:
caam 1700000.crypto: caam qi i/f init failed: -19

The root cause of the failure is that platform_device_register_simple()
does not initialize (struct device *)dev->dma_mask and subsequent call
to dma_set_mask() fails with -EIO.

The failure is seen only on ARM32 (and not on ARM64, PPC) due to
different implementation of arch_setup_pdev_archdata(), which shows up
in the call sequence:
platform_device_register_simple -> platform_device_register_resndata ->
-> platform_device_register_full -> platform_device_alloc ->
-> arch_setup_pdev_archdata
On PPC and ARM64, arch_setup_pdev_archdata() initializes dev->dma_mask,
while for ARM32 this function is not defined in the arch-specific code
and defaults to the __weak no-op generic variant.

Instead of fixing the issue as it has been done for ARM64:
commit 06cae8f949ca0 ("arm64: Add pdev_archdata for dmamask")
which was rejected in upstream:
https://www.spinics.net/lists/arm-kernel/msg303408.html
replace platform_device_register_simple with platform_device_register_full.
Platform device ID is not needed since we expect only one caam/qi.

Fixes: 5a6010b5013cc ("crypto: caam - add Queue Interface (QI) support")
Suggested-by: Pan Jiafei <Jiafei.Pan@nxp.com>
Signed-off-by: Horia GeantÄƒ <horia.geanta@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/caam/qi.c |   18 ++++++++----------
 1 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/drivers/crypto/caam/qi.c b/drivers/crypto/caam/qi.c
index 3030c89..15f7d9b 100644
--- a/drivers/crypto/caam/qi.c
+++ b/drivers/crypto/caam/qi.c
@@ -777,11 +777,15 @@ static int alloc_rsp_fqs(struct device *qidev)
 int caam_qi_init(struct platform_device *caam_pdev, struct device_node *np)
 {
 	struct platform_device *qi_pdev;
-	struct device *ctrldev, *qidev;
+	struct device *ctrldev = &caam_pdev->dev, *qidev;
 	struct caam_drv_private *ctrlpriv;
 	int err, i;
 	const cpumask_t *cpus = qman_affine_cpus();
 	struct cpumask old_cpumask = *tsk_cpus_allowed(current);
+	static struct platform_device_info qi_pdev_info = {
+		.name = "caam_qi",
+		.id = PLATFORM_DEVID_NONE
+	};
 
 	/*
 	 * QMAN requires that CGR must be removed from same CPU+portal from
@@ -793,24 +797,18 @@ int caam_qi_init(struct platform_device *caam_pdev, struct device_node *np)
 	mod_init_cpu = cpumask_first(cpus);
 	set_cpus_allowed_ptr(current, get_cpu_mask(mod_init_cpu));
 
-	qi_pdev = platform_device_register_simple("caam_qi", 0, NULL, 0);
+	qi_pdev_info.parent = ctrldev;
+	qi_pdev_info.dma_mask = dma_get_mask(ctrldev);
+	qi_pdev = platform_device_register_full(&qi_pdev_info);
 	if (IS_ERR(qi_pdev))
 		return PTR_ERR(qi_pdev);
 
-	ctrldev = &caam_pdev->dev;
 	ctrlpriv = dev_get_drvdata(ctrldev);
 	qidev = &qi_pdev->dev;
 
 	qipriv.qi_pdev = qi_pdev;
 	dev_set_drvdata(qidev, &qipriv);
 
-	/* Copy dma mask from controlling device */
-	err = dma_set_mask(qidev, dma_get_mask(ctrldev));
-	if (err) {
-		platform_device_unregister(qi_pdev);
-		return -ENODEV;
-	}
-
 	/* Response path cannot be congested */
 	caam_congested = false;
 
-- 
1.7.5.4

