From 0461a30089c3043a1b449859ff997d275c1a52dc Mon Sep 17 00:00:00 2001
From: Itai Katz <itai.katz@freescale.com>
Date: Wed, 2 Dec 2015 09:41:35 +0200
Subject: [PATCH 032/508] staging: fsl-mc: Avoid irq clear status in DPMCP

MC firmware version 9.0.0 introduced automatic clearing of irq
status for DPMCP. Thus MC bus driver should not send a command
to clear the command completion irq status. This patch removes
the code that was used to clear the DPMCP irq status.

Signed-off-by: Itai Katz <itai.katz@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dprc-driver.c |    4 +-
 drivers/staging/fsl-mc/bus/mc-sys.c      |   95 +-----------------------------
 2 files changed, 3 insertions(+), 96 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dprc-driver.c b/drivers/staging/fsl-mc/bus/dprc-driver.c
index 9878c5f..a870f4d 100644
--- a/drivers/staging/fsl-mc/bus/dprc-driver.c
+++ b/drivers/staging/fsl-mc/bus/dprc-driver.c
@@ -848,9 +848,7 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 
 	if (fsl_mc_interrupts_supported()) {
 		/*
-		 * Create DPMCP for the DPRC's built-in portal, to have
-		 * DPMCP completion interrupts for MC commands sent on
-		 * the DPRC's built-in portal:
+		 * Create DPMCP for the DPRC's built-in portal:
 		 */
 		error = dprc_create_dpmcp(mc_dev);
 		if (error < 0)
diff --git a/drivers/staging/fsl-mc/bus/mc-sys.c b/drivers/staging/fsl-mc/bus/mc-sys.c
index bdc7cca..8cc811c 100644
--- a/drivers/staging/fsl-mc/bus/mc-sys.c
+++ b/drivers/staging/fsl-mc/bus/mc-sys.c
@@ -79,7 +79,6 @@ static u16 mc_cmd_hdr_read_cmdid(struct mc_command *cmd)
  */
 static irqreturn_t dpmcp_irq0_handler(int irq_num, void *arg)
 {
-	int error;
 	struct device *dev = (struct device *)arg;
 	struct fsl_mc_device *dpmcp_dev = to_fsl_mc_device(dev);
 	struct fsl_mc_io *mc_io = dpmcp_dev->mc_io;
@@ -93,26 +92,6 @@ static irqreturn_t dpmcp_irq0_handler(int irq_num, void *arg)
 	if (WARN_ON(!mc_io))
 		goto out;
 
-	if (WARN_ON(!fsl_mc_dpmcp_isr.mc_io))
-		goto out;
-
-	/*
-	 * Clear interrupt source at the MC:
-	 *
-	 * NOTE: We clear all DPMCP IRQ events, rather than calling
-	 * dpmcp_get_irq_status() here to save one trip to the MC
-	 */
-	error = dpmcp_clear_irq_status(fsl_mc_dpmcp_isr.mc_io,
-				       MC_CMD_FLAG_INTR_DIS | MC_CMD_FLAG_PRI,
-				       mc_io->dpmcp_isr_mc_handle,
-				       DPMCP_IRQ_INDEX, ~0x0U);
-	if (error < 0) {
-		dev_err(&dpmcp_dev->dev,
-			"dpmcp_clear_irq_status() failed: %d\n",
-			error);
-		goto out;
-	}
-
 	complete(&mc_io->mc_command_done_completion);
 out:
 	return IRQ_HANDLED;
@@ -153,20 +132,6 @@ static int disable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 		return error;
 	}
 
-	/*
-	 * Clear any leftover interrupts:
-	 */
-	error = dpmcp_clear_irq_status(dpmcp_dev->mc_io,
-					   MC_CMD_FLAG_INTR_DIS,
-					   dpmcp_dev->mc_handle,
-				       DPMCP_IRQ_INDEX, ~0x0U);
-	if (error < 0) {
-		dev_err(&dpmcp_dev->dev,
-			"dpmcp_clear_irq_status() failed: %d\n",
-			error);
-		return error;
-	}
-
 	return 0;
 }
 
@@ -258,31 +223,9 @@ int fsl_mc_io_setup_dpmcp_irq(struct fsl_mc_io *mc_io)
 	if (WARN_ON(dpmcp_dev->mc_io != mc_io))
 		return -EINVAL;
 
-	if (WARN_ON(mc_io == fsl_mc_dpmcp_isr.mc_io))
-		return -EINVAL;
-
-	if (WARN_ON(atomic_read(&fsl_mc_dpmcp_isr.dpmcp_count) < 0))
-		return -EINVAL;
-
-	if (atomic_add_return(1, &fsl_mc_dpmcp_isr.dpmcp_count) == 1) {
-		/*
-		 * Create mc_io to be used to send MC commands from
-		 * the DPMCP command completion ISR (i.e. to clear the
-		 * DPMCP interrupt)
-		 */
-		error = fsl_mc_portal_allocate(NULL,
-					       FSL_MC_IO_ATOMIC_CONTEXT_PORTAL,
-					       &fsl_mc_dpmcp_isr.mc_io);
-		if (error < 0)
-			goto error_dec_dpmcp_count;
-
-		pr_info("fsl-mc: Allocated dpmcp.%d to DPMCP command completion ISR\n",
-			fsl_mc_dpmcp_isr.mc_io->dpmcp_dev->obj_desc.id);
-	}
-
 	error = fsl_mc_allocate_irqs(dpmcp_dev);
 	if (error < 0)
-		goto error_dec_dpmcp_count;
+		return error;
 
 	error = disable_dpmcp_irq(dpmcp_dev);
 	if (error < 0)
@@ -292,37 +235,19 @@ int fsl_mc_io_setup_dpmcp_irq(struct fsl_mc_io *mc_io)
 	if (error < 0)
 		goto error_free_irqs;
 
-	error = dpmcp_open(fsl_mc_dpmcp_isr.mc_io,
-			   MC_CMD_FLAG_INTR_DIS,
-			   dpmcp_dev->obj_desc.id,
-			   &mc_io->dpmcp_isr_mc_handle);
-	if (error < 0)
-		goto error_unregister_irq_handler;
-
 	error = enable_dpmcp_irq(dpmcp_dev);
 	if (error < 0)
-		goto error_close_dpmcp;
+		goto error_unregister_irq_handler;
 
 	mc_io->mc_command_done_irq_armed = true;
 	return 0;
 
-error_close_dpmcp:
-	(void)dpmcp_close(fsl_mc_dpmcp_isr.mc_io,
-			  MC_CMD_FLAG_INTR_DIS,
-			  mc_io->dpmcp_isr_mc_handle);
-
 error_unregister_irq_handler:
 	unregister_dpmcp_irq_handler(dpmcp_dev);
 
 error_free_irqs:
 	fsl_mc_free_irqs(dpmcp_dev);
 
-error_dec_dpmcp_count:
-	if (atomic_sub_return(1, &fsl_mc_dpmcp_isr.dpmcp_count) == 0) {
-		fsl_mc_portal_free(fsl_mc_dpmcp_isr.mc_io);
-		fsl_mc_dpmcp_isr.mc_io = NULL;
-	}
-
 	return error;
 }
 EXPORT_SYMBOL_GPL(fsl_mc_io_setup_dpmcp_irq);
@@ -333,7 +258,6 @@ EXPORT_SYMBOL_GPL(fsl_mc_io_setup_dpmcp_irq);
  */
 static void teardown_dpmcp_irq(struct fsl_mc_io *mc_io)
 {
-	int error;
 	struct fsl_mc_device *dpmcp_dev = mc_io->dpmcp_dev;
 
 	if (WARN_ON(!dpmcp_dev))
@@ -343,25 +267,10 @@ static void teardown_dpmcp_irq(struct fsl_mc_io *mc_io)
 	if (WARN_ON(!dpmcp_dev->irqs))
 		return;
 
-	if (WARN_ON(atomic_read(&fsl_mc_dpmcp_isr.dpmcp_count) <= 0))
-		return;
-
 	mc_io->mc_command_done_irq_armed = false;
 	(void)disable_dpmcp_irq(dpmcp_dev);
 	unregister_dpmcp_irq_handler(dpmcp_dev);
 	fsl_mc_free_irqs(dpmcp_dev);
-	error = dpmcp_close(fsl_mc_dpmcp_isr.mc_io,
-			    MC_CMD_FLAG_INTR_DIS,
-			    mc_io->dpmcp_isr_mc_handle);
-	if (error < 0) {
-		dev_err(&dpmcp_dev->dev,
-			"dpmcp_close(dpmcp_isr_mc_handle) failed: %d\n", error);
-	}
-
-	if (atomic_sub_return(1, &fsl_mc_dpmcp_isr.dpmcp_count) == 0) {
-		fsl_mc_portal_free(fsl_mc_dpmcp_isr.mc_io);
-		fsl_mc_dpmcp_isr.mc_io = NULL;
-	}
 }
 
 /**
-- 
1.7.5.4

