From ee6b5e081fc287223b0a882d1921fc556ad695c4 Mon Sep 17 00:00:00 2001
From: Bharat Bhushan <Bharat.Bhushan@freescale.com>
Date: Tue, 7 Apr 2015 11:00:32 +0530
Subject: [PATCH 088/508] vfio fsl-mc: Initial support of vfio for fsl-mc
 devices

According to new architecture, first dprc will be bound with vfio
driver and then vfio will scan all objects under it. vfio will also
create a linux device for each object. Then each device/object
need to be bound to vfio to make this group viable for userspace
to use. This patch is an initial work which allows above mentioned
sequences.

This patch still does not support followings:
  - Reset support
  - Interrupt Support
  - Nested dprc

Signed-off-by: Bharat Bhushan <Bharat.Bhushan@freescale.com>
[Stuart: resolved minor merge conflict]
Signed-off-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/vfio/Kconfig                      |    1 +
 drivers/vfio/Makefile                     |    1 +
 drivers/vfio/fsl-mc/Kconfig               |    9 +
 drivers/vfio/fsl-mc/Makefile              |    2 +
 drivers/vfio/fsl-mc/vfio_fsl_mc.c         |  413 +++++++++++++++++++++++++++++
 drivers/vfio/fsl-mc/vfio_fsl_mc_private.h |   24 ++
 include/uapi/linux/vfio.h                 |    1 +
 7 files changed, 451 insertions(+), 0 deletions(-)
 create mode 100644 drivers/vfio/fsl-mc/Kconfig
 create mode 100644 drivers/vfio/fsl-mc/Makefile
 create mode 100644 drivers/vfio/fsl-mc/vfio_fsl_mc.c
 create mode 100644 drivers/vfio/fsl-mc/vfio_fsl_mc_private.h

diff --git a/drivers/vfio/Kconfig b/drivers/vfio/Kconfig
index 31603a0..8f38263 100644
--- a/drivers/vfio/Kconfig
+++ b/drivers/vfio/Kconfig
@@ -55,3 +55,4 @@ menuconfig VFIO_NOIOMMU
 source "drivers/vfio/pci/Kconfig"
 source "drivers/vfio/platform/Kconfig"
 source "virt/lib/Kconfig"
+source "drivers/vfio/fsl-mc/Kconfig"
diff --git a/drivers/vfio/Makefile b/drivers/vfio/Makefile
index de450db..65e4271 100644
--- a/drivers/vfio/Makefile
+++ b/drivers/vfio/Makefile
@@ -8,3 +8,4 @@ obj-$(CONFIG_VFIO_SPAPR_EEH) += vfio_spapr_eeh.o
 obj-$(CONFIG_VFIO_PCI) += pci/
 obj-$(CONFIG_VFIO_PLATFORM) += platform/
 obj-$(CONFIG_VFIO_IOMMU_FSL_PAMU) += vfio_iommu_fsl_pamu.o
+obj-$(CONFIG_VFIO_FSL_MC) += fsl-mc/
diff --git a/drivers/vfio/fsl-mc/Kconfig b/drivers/vfio/fsl-mc/Kconfig
new file mode 100644
index 0000000..eb6ba2b
--- /dev/null
+++ b/drivers/vfio/fsl-mc/Kconfig
@@ -0,0 +1,9 @@
+config VFIO_FSL_MC
+	tristate "VFIO support for Freescale Management Complex devices"
+	depends on VFIO && FSL_MC_BUS && EVENTFD
+	help
+	  Support for the Freescale Management Complex(MC) VFIO driver.
+	  This is required to passthrough Freescale MC devices using the
+	  VFIO framework.
+
+	  If you don't know what to do here, say N.
diff --git a/drivers/vfio/fsl-mc/Makefile b/drivers/vfio/fsl-mc/Makefile
new file mode 100644
index 0000000..6f2b806
--- /dev/null
+++ b/drivers/vfio/fsl-mc/Makefile
@@ -0,0 +1,2 @@
+vfio-fsl_mc-y := vfio_fsl_mc.o
+obj-$(CONFIG_VFIO_FSL_MC) += vfio_fsl_mc.o
diff --git a/drivers/vfio/fsl-mc/vfio_fsl_mc.c b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
new file mode 100644
index 0000000..b96ae45
--- /dev/null
+++ b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
@@ -0,0 +1,413 @@
+/*
+ * Freescale Management Complex (MC) device passthrough using VFIO
+ *
+ * Copyright (C) 2014 Freescale Semiconductor, Inc.
+ * Author: Bharat Bhushan <bharat.bhushan@freescale.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/device.h>
+#include <linux/eventfd.h>
+#include <linux/interrupt.h>
+#include <linux/iommu.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/uaccess.h>
+#include <linux/vfio.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include <linux/fs.h>
+#include "../../staging/fsl-mc/include/mc.h"
+#include "../../staging/fsl-mc/include/mc-sys.h"
+#include "../../staging/fsl-mc/include/mc-private.h"
+
+#include "vfio_fsl_mc_private.h"
+struct fsl_mc_io *vfio_mc_io = NULL;
+
+/* Validate that requested address range falls in one of container's
+ * device region.
+ */
+static bool vfio_validate_mmap_addr(struct vfio_fsl_mc_device *vdev,
+				    unsigned long addr, unsigned long size)
+{
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	phys_addr_t region_addr;
+	size_t region_size;
+	int idx;
+
+	/* Do not try to validate if address range wraps */
+	if ((addr + size) < addr)
+		return false;
+
+	for (idx = 0; idx < mc_dev->obj_desc.region_count; idx++) {
+		region_addr = mc_dev->regions[idx].start;
+		region_size = mc_dev->regions[idx].end -
+				       mc_dev->regions[idx].start + 1;
+
+		/*
+		 * Align search to minimum mappable size of PAGE_SIZE.
+		 * Thanks to our hardware that even though the
+		 * region_size is less then PAGE_SIZE but there
+		 * is no other device maps in this address range.
+		 * So no security threat/issue in mapping PAGE_SIZE.
+		 */
+		if (region_size < PAGE_SIZE)
+			region_size = PAGE_SIZE;
+
+		if (addr >= region_addr &&
+		    ((addr + size) <= (region_addr + region_size)))
+			return true;
+	}
+
+	/* Check for mc portal physical address */
+	for (idx = 0; idx < vdev->num_mc_portals; idx++) {
+		if (addr >= vdev->mc_regions[idx].start &&
+		    ((addr + size - 1) <= vdev->mc_regions[idx].end)) {
+			return true;
+		}
+	}
+
+	return false;
+}
+
+static long vfio_fsl_mc_ioctl(void *device_data,
+				  unsigned int cmd, unsigned long arg)
+{
+	struct vfio_fsl_mc_device *vdev = device_data;
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	struct device *dev = &mc_dev->dev;
+	unsigned long minsz;
+	int ret;
+
+	switch (cmd) {
+	case VFIO_DEVICE_GET_INFO:
+	{
+		struct vfio_device_info info;
+
+		struct fsl_mc_device *mc_dev;
+
+		minsz = offsetofend(struct vfio_device_info, num_irqs);
+
+		if (copy_from_user(&info, (void __user *)arg, minsz))
+			return -EFAULT;
+
+		if (info.argsz < minsz)
+			return -EINVAL;
+
+		mc_dev = vdev->mc_dev;
+		if (!mc_dev)
+			return -ENODEV;
+
+		info.flags = VFIO_DEVICE_FLAGS_FSL_MC | VFIO_DEVICE_FLAGS_RESET;
+		info.num_regions = mc_dev->obj_desc.region_count;
+		info.num_irqs = mc_dev->obj_desc.irq_count;
+
+		return copy_to_user((void __user *)arg, &info, minsz);
+	}
+	case VFIO_DEVICE_GET_REGION_INFO:
+	{
+		struct fsl_mc_device *mc_dev;
+		struct vfio_region_info info;
+
+		minsz = offsetofend(struct vfio_region_info, offset);
+
+		if (copy_from_user(&info, (void __user *)arg, minsz))
+			return -EFAULT;
+
+		if (info.argsz < minsz)
+			return -EINVAL;
+
+		mc_dev = vdev->mc_dev;
+		if (!mc_dev)
+			return -ENODEV;
+
+		info.offset = mc_dev->regions[info.index].start;
+		info.size = mc_dev->regions[info.index].end -
+				mc_dev->regions[info.index].start + 1;
+		info.flags = VFIO_REGION_INFO_FLAG_READ |
+			      VFIO_REGION_INFO_FLAG_WRITE |
+			      VFIO_REGION_INFO_FLAG_MMAP;
+
+		return copy_to_user((void __user *)arg, &info, minsz);
+	}
+	case VFIO_DEVICE_GET_IRQ_INFO:
+	{
+		dev_err(dev, "VFIO: SET_IRQS not implemented\n");
+		return -EINVAL;
+	}
+	case VFIO_DEVICE_SET_IRQS:
+	{
+		dev_err(dev, "VFIO: SET_IRQS not implemented\n");
+		return -EINVAL;
+
+	}
+	case VFIO_DEVICE_RESET:
+	{
+		dev_err(dev, "VFIO: VFIO_DEVICE_RESET not implemented\n");
+		ret = -EINVAL;
+		break;
+	}
+	default:
+			ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+static ssize_t vfio_fsl_mc_read(void *device_data, char __user *buf,
+				    size_t count, loff_t *ppos)
+{
+	struct vfio_fsl_mc_device *vdev = device_data;
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	struct device *dev = &mc_dev->dev;
+
+	dev_err(dev, "%s: Unimplemented\n", __func__);
+	return -EFAULT;
+}
+
+static ssize_t vfio_fsl_mc_write(void *device_data, const char __user *buf,
+				     size_t count, loff_t *ppos)
+{
+	struct vfio_fsl_mc_device *vdev = device_data;
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	struct device *dev = &mc_dev->dev;
+
+	dev_err(dev, "%s: Unimplemented\n", __func__);
+	return -EFAULT;
+}
+
+/* Allows mmaping fsl_mc device regions in assigned DPRC */
+static int vfio_fsl_mc_mmap(void *device_data, struct vm_area_struct *vma)
+{
+	struct vfio_fsl_mc_device *vdev = device_data;
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	unsigned long size = vma->vm_end - vma->vm_start;
+	unsigned long addr = vma->vm_pgoff << PAGE_SHIFT;
+	int ret;
+
+	if (vma->vm_end < vma->vm_start)
+		return -EINVAL;
+	if (vma->vm_start & ~PAGE_MASK)
+		return -EINVAL;
+	if (vma->vm_end & ~PAGE_MASK)
+		return -EINVAL;
+	if ((vma->vm_flags & VM_SHARED) == 0)
+		return -EINVAL;
+
+	if (!vfio_validate_mmap_addr(vdev, addr, size))
+		return -EINVAL;
+
+	vma->vm_private_data = mc_dev;
+	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
+	ret = remap_pfn_range(vma, vma->vm_start, vma->vm_pgoff,
+			      size, vma->vm_page_prot);
+	return ret;
+}
+
+static void vfio_fsl_mc_release(void *device_data)
+{
+	struct vfio_fsl_mc_device *vdev = device_data;
+
+	atomic_dec(&vdev->refcnt);
+
+	module_put(THIS_MODULE);
+}
+
+static int vfio_fsl_mc_open(void *device_data)
+{
+	struct vfio_fsl_mc_device *vdev = device_data;
+
+	if (!try_module_get(THIS_MODULE))
+		return -ENODEV;
+
+	atomic_inc_return(&vdev->refcnt);
+
+	return 0;
+}
+
+static const struct vfio_device_ops vfio_fsl_mc_ops = {
+	.name		= "vfio-fsl-mc",
+	.open		= vfio_fsl_mc_open,
+	.release	= vfio_fsl_mc_release,
+	.ioctl		= vfio_fsl_mc_ioctl,
+	.read		= vfio_fsl_mc_read,
+	.write		= vfio_fsl_mc_write,
+	.mmap		= vfio_fsl_mc_mmap,
+};
+
+static int vfio_fsl_mc_device_remove(struct device *dev, void *data)
+{
+	WARN_ON(dev == NULL);
+	fsl_mc_device_remove(to_fsl_mc_device(dev));
+	return 0;
+}
+
+static int vfio_fsl_mc_probe(struct fsl_mc_device *mc_dev)
+{
+	struct vfio_fsl_mc_device *vdev;
+	struct iommu_group *group;
+	struct device *dev = &mc_dev->dev;
+	struct fsl_mc_bus *mc_bus;
+	unsigned int irq_count;
+	int ret;
+
+	dev_info(dev, "Binding with vfio-fsl_mc driver\n");
+
+	group = iommu_group_get(dev);
+	if (!group) {
+		dev_err(dev, "%s: VFIO: No IOMMU group\n", __func__);
+		return -EINVAL;
+	}
+
+	vdev = kzalloc(sizeof(*vdev), GFP_KERNEL);
+	if (!vdev) {
+		iommu_group_put(group);
+		return -ENOMEM;
+	}
+
+	if (strcmp(mc_dev->obj_desc.type, "dprc") == 0) {
+		vdev->mc_dev = mc_dev;
+
+		/* Free existing MC portal if exists */
+		if (mc_dev->mc_io)
+			fsl_destroy_mc_io(mc_dev->mc_io);
+
+		/* Use New Allocated MC Portal (DPMCP object) */
+		mc_dev->mc_io = vfio_mc_io;
+
+		ret = dprc_open(mc_dev->mc_io,
+				mc_dev->obj_desc.id,
+				&mc_dev->mc_handle);
+		if (ret) {
+			dev_err(dev, "dprc_open() failed: error = %d\n", ret);
+			goto err;
+		}
+
+		mc_bus = to_fsl_mc_bus(mc_dev);
+		mutex_init(&mc_bus->scan_mutex);
+		mutex_lock(&mc_bus->scan_mutex);
+		ret = dprc_scan_objects(mc_dev, mc_dev->driver_override,
+					&irq_count);
+		mutex_unlock(&mc_bus->scan_mutex);
+		if (ret) {
+			dev_err(dev, "dprc_scan_objects() fails (%d)\n", ret);
+			dprc_close(mc_dev->mc_io, mc_dev->mc_handle);
+			goto err;
+		}
+
+		ret = vfio_add_group_dev(dev, &vfio_fsl_mc_ops, vdev);
+		if (ret) {
+			dev_err(dev, "%s: Failed to add to vfio group\n",
+				__func__);
+			device_for_each_child(&mc_dev->dev, NULL,
+					      vfio_fsl_mc_device_remove);
+			dprc_close(mc_dev->mc_io, mc_dev->mc_handle);
+			goto err;
+		}
+	} else {
+		vdev->mc_dev = mc_dev;
+
+		ret = vfio_add_group_dev(dev, &vfio_fsl_mc_ops, vdev);
+		if (ret) {
+			dev_err(dev, "%s: Failed to add to vfio group\n",
+				__func__);
+			goto err;
+		}
+	}
+
+	return 0;
+
+err:
+	iommu_group_put(group);
+	kfree(vdev);
+	return ret;
+}
+
+static int vfio_fsl_mc_remove(struct fsl_mc_device *mc_dev)
+{
+	struct vfio_fsl_mc_device *vdev;
+	int ret;
+
+	dev_info(&mc_dev->dev, "Un-binding with vfio-fsl-mc driver\n");
+
+	vdev = vfio_del_group_dev(&mc_dev->dev);
+	if (!vdev)
+		return -EINVAL;
+
+	/* Only FSL-MC DPRC device can be unbound */
+	if (strcmp(mc_dev->obj_desc.type, "dprc") == 0) {
+		device_for_each_child(&mc_dev->dev, NULL,
+				      vfio_fsl_mc_device_remove);
+
+		ret = dprc_close(mc_dev->mc_io, mc_dev->mc_handle);
+		if (ret < 0) {
+			dev_err(&mc_dev->dev, "dprc_close() fails: error %d\n",
+				ret);
+		}
+	}
+
+	iommu_group_put(mc_dev->dev.iommu_group);
+	kfree(vdev);
+
+	return 0;
+}
+
+/*
+ * vfio-fsl_mc is a meta-driver, so use driver_override interface to
+ * bind a fsl_mc container with this driver and match_id_table is NULL.
+ */
+static struct fsl_mc_driver vfio_fsl_mc_driver = {
+	.probe		= vfio_fsl_mc_probe,
+	.remove		= vfio_fsl_mc_remove,
+	.match_id_table = NULL,
+	.driver	= {
+		.name	= "vfio-fsl-mc",
+		.owner	= THIS_MODULE,
+	},
+};
+
+static int __init vfio_fsl_mc_driver_init(void)
+{
+	int err;
+	struct fsl_mc_device *root_mc_dev;
+
+	root_mc_dev = to_fsl_mc_device(fsl_mc_bus_type.dev_root);
+
+	/* Allocate a new MC portal (DPMCP object) */
+	err = fsl_mc_portal_allocate(root_mc_dev, 0, &vfio_mc_io);
+	if (err < 0)
+		goto err;
+
+	/* Reset MCP before move on */
+	err = fsl_mc_portal_reset(vfio_mc_io);
+	if (err < 0)
+		return err;
+
+	err = fsl_mc_driver_register(&vfio_fsl_mc_driver);
+	if (err < 0)
+		goto err;
+
+	return 0;
+err:
+	if (vfio_mc_io)
+		fsl_mc_portal_free(vfio_mc_io);
+
+	return err;
+}
+
+static void __exit vfio_fsl_mc_driver_exit(void)
+{
+	fsl_mc_portal_free(vfio_mc_io);
+	fsl_mc_driver_unregister(&vfio_fsl_mc_driver);
+}
+
+module_init(vfio_fsl_mc_driver_init);
+module_exit(vfio_fsl_mc_driver_exit);
+
+MODULE_AUTHOR("Bharat Bhushan <bharat.bhushan@freescale.com>");
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("VFIO for FSL MC devices - User Level meta-driver");
diff --git a/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h b/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h
new file mode 100644
index 0000000..2510cea
--- /dev/null
+++ b/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h
@@ -0,0 +1,24 @@
+/*
+ * Freescale Management Complex VFIO private declarations
+ *
+ * Copyright (C) 2014 Freescale Semiconductor, Inc.
+ * Author: Bharat Bhushan <Bharat.Bhushan@freescale.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include "../../staging/fsl-mc/include/mc.h"
+
+#ifndef VFIO_FSL_MC_PRIVATE_H
+#define VFIO_FSL_MC_PRIVATE_H
+
+struct vfio_fsl_mc_device {
+	struct fsl_mc_device	*mc_dev;
+	int			num_mc_portals;
+	struct resource		*mc_regions;
+	atomic_t		refcnt;
+};
+
+#endif /* VFIO_PCI_PRIVATE_H */
diff --git a/include/uapi/linux/vfio.h b/include/uapi/linux/vfio.h
index 1c1fa74..8d282df 100644
--- a/include/uapi/linux/vfio.h
+++ b/include/uapi/linux/vfio.h
@@ -201,6 +201,7 @@ struct vfio_device_info {
 #define VFIO_DEVICE_FLAGS_PCI	(1 << 1)	/* vfio-pci device */
 #define VFIO_DEVICE_FLAGS_PLATFORM (1 << 2)	/* vfio-platform device */
 #define VFIO_DEVICE_FLAGS_AMBA  (1 << 3)	/* vfio-amba device */
+#define VFIO_DEVICE_FLAGS_FSL_MC (1 << 4)	/* vfio Freescale MC device */
 	__u32	num_regions;	/* Max region index + 1 */
 	__u32	num_irqs;	/* Max IRQ index + 1 */
 };
-- 
1.7.5.4

