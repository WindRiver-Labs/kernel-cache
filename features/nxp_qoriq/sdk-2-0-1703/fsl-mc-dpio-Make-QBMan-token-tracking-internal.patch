From 4e44fc87957f44cf43a88da9b04f6229b975055b Mon Sep 17 00:00:00 2001
From: Roy Pledge <Roy.Pledge@freescale.com>
Date: Wed, 22 Apr 2015 14:05:00 -0400
Subject: [PATCH 045/508] fsl-mc-dpio: Make QBMan token tracking internal

Previousy the QBMan portal code required the caller to properly set and
check for a token value used by the driver to detect when the QMan
hardware had completed a dequeue.  This patch simplifes the driver
interface by internally dealing with token values.  The driver will now
set the token value to 0 once it has dequeued a frame while a token
value of 1 indicates the HW has completed the dequeue but SW has not
consumed the frame yet.

Signed-off-by: Roy Pledge <Roy.Pledge@freescale.com>
Change-Id: If94d9728b0faa0fd79b47108f5cb05a425b89c18
Reviewed-on: http://git.am.freescale.net:8181/35433
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Haiying Wang <Haiying.Wang@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/dpio_service.c     |   18 +----------
 drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h |   32 ++++++-------------
 drivers/staging/fsl-mc/bus/dpio/qbman_portal.c     |   20 ++++--------
 drivers/staging/fsl-mc/bus/dpio/qbman_portal.h     |    6 +---
 drivers/staging/fsl-mc/bus/dpio/qbman_test.c       |    7 +---
 5 files changed, 20 insertions(+), 63 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
index 0033d87..be460a0 100644
--- a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
+++ b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
@@ -102,7 +102,6 @@ struct dpaa_io_store {
 	struct ldpaa_dq *vaddr;
 	void *alloced_addr; /* the actual return from kmalloc as it may
 			       be adjusted for alignment purposes */
-	uint8_t token; /* current token if busy, otherwise next token */
 	unsigned int idx; /* position of the next-to-be-returned entry */
 	struct qbman_swp *swp; /* portal used to issue VDQCR */
 	struct device *dev; /* device used for DMA mapping */
@@ -523,7 +522,6 @@ int dpaa_io_service_pull_fq(struct dpaa_io *d, uint32_t fqid,
 	qbman_pull_desc_clear(&pd);
 	qbman_pull_desc_set_storage(&pd, s->vaddr, s->paddr, 1);
 	qbman_pull_desc_set_numframes(&pd, s->max);
-	qbman_pull_desc_set_token(&pd, s->token);
 	qbman_pull_desc_set_fq(&pd, fqid);
 	d = service_select_by_cpu(d, -1);
 	if (d) {
@@ -614,14 +612,6 @@ int dpaa_io_service_acquire(struct dpaa_io *d,
 }
 EXPORT_SYMBOL(dpaa_io_service_acquire);
 
-static void store_token(struct dpaa_io_store *store, unsigned int idx,
-			unsigned num)
-{
-	struct ldpaa_dq *dq = &store->vaddr[idx];
-
-	qbman_dq_entry_set_oldtoken(dq, num, store->token++);
-}
-
 struct dpaa_io_store *dpaa_io_store_create(unsigned int max_frames,
 					   struct device *dev)
 {
@@ -647,10 +637,8 @@ struct dpaa_io_store *dpaa_io_store_create(unsigned int max_frames,
 		kfree(ret);
 		return NULL;
 	}
-	ret->token = 0x53;
 	ret->idx = 0;
 	ret->dev = dev;
-	store_token(ret, 0, ret->max);
 	return ret;
 }
 EXPORT_SYMBOL(dpaa_io_store_create);
@@ -669,7 +657,7 @@ struct ldpaa_dq *dpaa_io_store_next(struct dpaa_io_store *s, int *is_last)
 	int match;
 	struct ldpaa_dq *ret = &s->vaddr[s->idx];
 
-	match = qbman_dq_entry_has_newtoken(s->swp, ret, s->token);
+	match = qbman_dq_entry_has_new_result(s->swp, ret);
 	if (!match) {
 		*is_last = 0;
 		return NULL;
@@ -678,10 +666,6 @@ struct ldpaa_dq *dpaa_io_store_next(struct dpaa_io_store *s, int *is_last)
 	s->idx++;
 	if (ldpaa_dq_is_pull_complete(ret)) {
 		*is_last = 1;
-		if (s->idx < s->max)
-			store_token(s, s->idx, s->max - s->idx);
-		else
-			s->token++;
 		s->idx = 0;
 		/* If we get an empty dequeue result to terminate a zero-results
 		 * vdqcr, return NULL to the caller rather than expecting him to
diff --git a/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h b/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h
index ba4d728..09121b9 100644
--- a/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h
+++ b/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h
@@ -127,11 +127,6 @@ void qbman_pull_desc_set_storage(struct qbman_pull_desc *,
 				 int stash);
 /* numframes must be between 1 and 16, inclusive */
 void qbman_pull_desc_set_numframes(struct qbman_pull_desc *, uint8_t numframes);
-/* token is the value that shows up in the dequeue results that can be used to
- * detect when the results have been published, and is not really used when
- * dequeue results go to DQRR. The easiest technique is to zero result "storage"
- * before issuing a pull dequeue, and use any non-zero 'token' value. */
-void qbman_pull_desc_set_token(struct qbman_pull_desc *, uint8_t token);
 /* Exactly one of the following descriptor "actions" should be set. (Calling any
  * one of these will replace the effect of any prior call to one of these.)
  * - pull dequeue from the given frame queue (FQ)
@@ -161,25 +156,18 @@ void qbman_swp_dqrr_consume(struct qbman_swp *, const struct ldpaa_dq *);
 /* ------------------------------------------------- */
 /* Polling user-provided storage for dequeue results */
 /* ------------------------------------------------- */
-
-/* Only used for user-provided storage of dequeue results, not DQRR. Prior to
- * being used, the storage must set "oldtoken", so that the driver notices when
- * hardware has filled it in with results using a "newtoken". NB, for efficiency
- * purposes, the driver will perform any required endianness conversion to
- * ensure that the user's dequeue result storage is in host-endian format
- * (whether or not that is the same as the little-endian format that hardware
- * DMA'd to the user's storage). As such, once the user has called
- * qbman_dq_entry_has_newtoken() and been returned a valid dequeue result, they
- * should not call it again on the same memory location (except of course if
- * another dequeue command has been executed to produce a new result to that
+/* Only used for user-provided storage of dequeue results, not DQRR. For
+ * efficiency purposes, the driver will perform any required endianness
+ * conversion to ensure that the user's dequeue result storage is in host-endian
+ * format (whether or not that is the same as the little-endian format that
+ * hardware DMA'd to the user's storage). As such, once the user has called
+ * qbman_dq_entry_has_new_result() and been returned a valid dequeue result,
+ * they should not call it again on the same memory location (except of course
+ * if another dequeue command has been executed to produce a new result to that
  * location).
  */
-void qbman_dq_entry_set_oldtoken(struct ldpaa_dq *,
-				 unsigned int num_entries,
-				 uint8_t oldtoken);
-int qbman_dq_entry_has_newtoken(struct qbman_swp *,
-				const struct ldpaa_dq *,
-				uint8_t newtoken);
+int qbman_dq_entry_has_new_result(struct qbman_swp *,
+				  const struct ldpaa_dq *);
 
 /* -------------------------------------------------------- */
 /* Parsing dequeue entries (DQRR and user-provided storage) */
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
index ba56b43..219a9da 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
@@ -585,7 +585,7 @@ int qbman_swp_pull(struct qbman_swp *s, struct qbman_pull_desc *d)
 		return -EBUSY;
 	}
 	s->vdq.storage = *(void **)&cl[4];
-	s->vdq.token = qb_attr_code_decode(&code_pull_token, cl);
+	qb_attr_code_encode(&code_pull_token, cl, 1);
 	p = qbman_cena_write_start(&s->sys, QBMAN_CENA_SWP_VDQCR);
 	word_copy(&p[1], &cl[1], 3);
 	lwsync();
@@ -720,17 +720,8 @@ EXPORT_SYMBOL(qbman_swp_dqrr_consume);
 /* Polling user-provided storage */
 /*********************************/
 
-void qbman_dq_entry_set_oldtoken(struct ldpaa_dq *dq,
-				 unsigned int num_entries,
-				 uint8_t oldtoken)
-{
-	memset(dq, oldtoken, num_entries * sizeof(*dq));
-}
-EXPORT_SYMBOL(qbman_dq_entry_set_oldtoken);
-
-int qbman_dq_entry_has_newtoken(struct qbman_swp *s,
-				const struct ldpaa_dq *dq,
-				uint8_t newtoken)
+int qbman_dq_entry_has_new_result(struct qbman_swp *s,
+				  const struct ldpaa_dq *dq)
 {
 	/* To avoid converting the little-endian DQ entry to host-endian prior
 	 * to us knowing whether there is a valid entry or not (and run the
@@ -748,8 +739,9 @@ int qbman_dq_entry_has_newtoken(struct qbman_swp *s,
 	uint32_t token;
 
 	token = qb_attr_code_decode(&code_dqrr_tok_detect, &p[1]);
-	if (token != newtoken)
+	if (token != 1)
 		return 0;
+	qb_attr_code_encode(&code_dqrr_tok_detect, &p[1], 0);
 
 	/* Only now do we convert from hardware to host endianness. Also, as we
 	 * are returning success, the user has promised not to call us again, so
@@ -771,7 +763,7 @@ int qbman_dq_entry_has_newtoken(struct qbman_swp *s,
 	}
 	return 1;
 }
-EXPORT_SYMBOL(qbman_dq_entry_has_newtoken);
+EXPORT_SYMBOL(qbman_dq_entry_has_new_result);
 
 /********************************/
 /* Categorising dequeue entries */
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h
index 4fb50b1..b118964 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h
@@ -87,12 +87,8 @@ struct qbman_swp {
 		 * on whether the "busy" (last-submitted) dequeue command is
 		 * targeting DQRR or main-memory, and detected is based on the
 		 * presence of the dequeue command's "token" showing up in
-		 * dequeue entries in DQRR or main-memory (respectively). Debug
-		 * builds will, when submitting vdq commands, verify that the
-		 * dequeue result location is not already equal to the command's
-		 * token value. */
+		 * dequeue entries in DQRR or main-memory (respectively). */
 		struct ldpaa_dq *storage; /* NULL if DQRR */
-		uint32_t token;
 	} vdq;
 	/* DQRR */
 	struct {
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_test.c b/drivers/staging/fsl-mc/bus/dpio/qbman_test.c
index c6c31f6..2e4910a 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_test.c
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_test.c
@@ -189,7 +189,6 @@ static void do_pull_dequeue(struct qbman_swp *swp)
 		qbman_pull_desc_clear(&pulldesc);
 		qbman_pull_desc_set_storage(&pulldesc, NULL, 0, 0);
 		qbman_pull_desc_set_numframes(&pulldesc, 1);
-		qbman_pull_desc_set_token(&pulldesc, 0xab);
 		qbman_pull_desc_set_fq(&pulldesc, QBMAN_TEST_FQID);
 
 		ret = qbman_swp_pull(swp, &pulldesc);
@@ -220,13 +219,11 @@ static void do_pull_dequeue(struct qbman_swp *swp)
 	pr_info("*****QBMan_test: Dequeue %d frames with dq entry in memory\n",
 								NUM_DQ_IN_MEM);
 	for (i = 0; i < NUM_DQ_IN_MEM; i++) {
-		qbman_dq_entry_set_oldtoken(&dq_storage[i], 1, i);
 		dq_storage_phys = virt_to_phys(&dq_storage[i]);
 		qbman_pull_desc_clear(&pulldesc);
 		qbman_pull_desc_set_storage(&pulldesc, &dq_storage[i],
 						dq_storage_phys, 1);
 		qbman_pull_desc_set_numframes(&pulldesc, 1);
-		qbman_pull_desc_set_token(&pulldesc, 0xab + i);
 		qbman_pull_desc_set_fq(&pulldesc, QBMAN_TEST_FQID);
 		ret = qbman_swp_pull(swp, &pulldesc);
 		BUG_ON(ret);
@@ -234,8 +231,8 @@ static void do_pull_dequeue(struct qbman_swp *swp)
 		DBG_POLL_START(loopvar);
 		do {
 			DBG_POLL_CHECK(loopvar);
-			ret = qbman_dq_entry_has_newtoken(swp, &dq_storage[i],
-							0xab + i);
+			ret = qbman_dq_entry_has_new_result(swp,
+							    &dq_storage[i]);
 		} while (!ret);
 
 		if (ret) {
-- 
1.7.5.4

