From 995cc551ec8c6caa4449762fc29dcc46fcbb5a07 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Mon, 24 Jul 2017 15:30:40 +0800
Subject: [PATCH 116/508] driver: fsl-mc: replace irq_number with
 msi_desc->irq

In mainline kernel, there is no irq_number field in
struct fsl_mc_device_irq, it should be replaced with msi_desc->irq.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/dpio-drv.c |   11 ++++++-----
 drivers/staging/fsl-mc/bus/mc-sys.c        |    7 ++++---
 2 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c b/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
index 4fbbb79..4ee9010 100644
--- a/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
+++ b/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
@@ -37,6 +37,7 @@
 #include <linux/dma-mapping.h>
 #include <linux/kthread.h>
 #include <linux/delay.h>
+#include <linux/msi.h>
 
 #include "../../include/mc.h"
 #include "../../include/fsl_dpaa2_io.h"
@@ -93,7 +94,7 @@ static void unregister_dpio_irq_handlers(struct fsl_mc_device *ls_dev)
 
 	for (i = 0; i < irq_count; i++) {
 		irq = ls_dev->irqs[i];
-		devm_free_irq(&ls_dev->dev, irq->irq_number, &ls_dev->dev);
+		devm_free_irq(&ls_dev->dev, irq->msi_desc->irq, &ls_dev->dev);
 	}
 }
 
@@ -115,7 +116,7 @@ static int register_dpio_irq_handlers(struct fsl_mc_device *ls_dev, int cpu)
 	for (i = 0; i < irq_count; i++) {
 		irq = ls_dev->irqs[i];
 		error = devm_request_irq(&ls_dev->dev,
-					 irq->irq_number,
+					 irq->msi_desc->irq,
 					 dpio_irq_handler,
 					 0,
 					 priv->irq_name,
@@ -130,9 +131,9 @@ static int register_dpio_irq_handlers(struct fsl_mc_device *ls_dev, int cpu)
 		/* Set the IRQ affinity */
 		cpumask_clear(&mask);
 		cpumask_set_cpu(cpu, &mask);
-		if (irq_set_affinity(irq->irq_number, &mask))
+		if (irq_set_affinity(irq->msi_desc->irq, &mask))
 			pr_err("irq_set_affinity failed irq %d cpu %d\n",
-			       irq->irq_number, cpu);
+			       irq->msi_desc->irq, cpu);
 
 		num_irq_handlers_registered++;
 	}
@@ -142,7 +143,7 @@ static int register_dpio_irq_handlers(struct fsl_mc_device *ls_dev, int cpu)
 error_unregister_irq_handlers:
 	for (i = 0; i < num_irq_handlers_registered; i++) {
 		irq = ls_dev->irqs[i];
-		devm_free_irq(&ls_dev->dev, irq->irq_number,
+		devm_free_irq(&ls_dev->dev, irq->msi_desc->irq,
 			      &ls_dev->dev);
 	}
 
diff --git a/drivers/staging/fsl-mc/bus/mc-sys.c b/drivers/staging/fsl-mc/bus/mc-sys.c
index 6e8fa1a..0508d7b 100644
--- a/drivers/staging/fsl-mc/bus/mc-sys.c
+++ b/drivers/staging/fsl-mc/bus/mc-sys.c
@@ -40,6 +40,7 @@
 #include <linux/ioport.h>
 #include <linux/device.h>
 #include <linux/interrupt.h>
+#include <linux/msi.h>
 #include "dpmcp.h"
 
 /**
@@ -86,7 +87,7 @@ static irqreturn_t dpmcp_irq0_handler(int irq_num, void *arg)
 	dev_dbg(dev, "DPMCP IRQ %d triggered on CPU %u\n", irq_num,
 		smp_processor_id());
 
-	if (WARN_ON(dpmcp_dev->irqs[0]->irq_number != (uint32_t)irq_num))
+	if (WARN_ON(dpmcp_dev->irqs[0]->msi_desc->irq != (uint32_t)irq_num))
 		goto out;
 
 	if (WARN_ON(!mc_io))
@@ -139,7 +140,7 @@ static void unregister_dpmcp_irq_handler(struct fsl_mc_device *dpmcp_dev)
 {
 	struct fsl_mc_device_irq *irq = dpmcp_dev->irqs[DPMCP_IRQ_INDEX];
 
-	devm_free_irq(&dpmcp_dev->dev, irq->irq_number, &dpmcp_dev->dev);
+	devm_free_irq(&dpmcp_dev->dev, irq->msi_desc->irq, &dpmcp_dev->dev);
 }
 
 static int register_dpmcp_irq_handler(struct fsl_mc_device *dpmcp_dev)
@@ -148,7 +149,7 @@ static int register_dpmcp_irq_handler(struct fsl_mc_device *dpmcp_dev)
 	struct fsl_mc_device_irq *irq = dpmcp_dev->irqs[DPMCP_IRQ_INDEX];
 
 	error = devm_request_irq(&dpmcp_dev->dev,
-				 irq->irq_number,
+				 irq->msi_desc->irq,
 				 dpmcp_irq0_handler,
 				 IRQF_NO_SUSPEND | IRQF_ONESHOT,
 				 "FSL MC DPMCP irq0",
-- 
1.7.5.4

