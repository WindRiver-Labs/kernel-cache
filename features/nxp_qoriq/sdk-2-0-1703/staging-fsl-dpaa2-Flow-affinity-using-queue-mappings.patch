From aee7d63cb92007e04f0a96d8fd75eeb9fefafefd Mon Sep 17 00:00:00 2001
From: Bogdan Purcareata <bogdan.purcareata@nxp.com>
Date: Tue, 22 Nov 2016 12:19:38 +0000
Subject: [PATCH 418/508] staging: fsl-dpaa2: Flow affinity using queue
 mappings

The driver egress function chooses a FQ to send the frames based on the
current processor ID. The network stack itself sets a mapping field
in the skb based on many things - the default one being a hash on packet
fiels, which the current driver ignores.

One possibility is for the driver to adjust this mapping based on the
ingress FQ. This will further be considered by the network stack, and
there's no longer the need for an ndo_select_queue callback or for the
driver to choose his own queue on Tx.

The patch implements this change. In IPv4 forwarding scenarios, it
brings +4.8% perf in an affine flow scenario (16 flows) and +5.5% perf
in a 512 flow scenario (using hashing in the driver). Performance is
expressed in max throughput rate. Improvement is similar to implementing
a ndo_select_queue which sets the mapping based on the current processor
ID.

Signed-off-by: Bogdan Purcareata <bogdan.purcareata@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c |   23 ++++++++++++++---------
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h |    3 ++-
 2 files changed, 16 insertions(+), 10 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 817d30a..23cee48 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -210,7 +210,8 @@ static struct sk_buff *build_frag_skb(struct dpaa2_eth_priv *priv,
 static void dpaa2_eth_rx(struct dpaa2_eth_priv *priv,
 			 struct dpaa2_eth_channel *ch,
 			 const struct dpaa2_fd *fd,
-			 struct napi_struct *napi)
+			 struct napi_struct *napi,
+			 u16 queue_id)
 {
 	dma_addr_t addr = dpaa2_fd_get_addr(fd);
 	u8 fd_format = dpaa2_fd_get_format(fd);
@@ -279,6 +280,12 @@ static void dpaa2_eth_rx(struct dpaa2_eth_priv *priv,
 
 	skb->protocol = eth_type_trans(skb, priv->net_dev);
 
+	/* Record Rx queue - this will be used when picking a Tx queue to
+	 * forward the frames. We're keeping flow affinity through the
+	 * network stack.
+	 */
+	skb_record_rx_queue(skb, queue_id);
+
 	percpu_stats->rx_packets++;
 	percpu_stats->rx_bytes += skb->len;
 
@@ -301,7 +308,8 @@ err_build_skb:
 static void dpaa2_eth_rx_err(struct dpaa2_eth_priv *priv,
 			     struct dpaa2_eth_channel *ch,
 			     const struct dpaa2_fd *fd,
-			     struct napi_struct *napi __always_unused)
+			     struct napi_struct *napi __always_unused,
+			     u16 queue_id __always_unused)
 {
 	struct device *dev = priv->net_dev->dev.parent;
 	dma_addr_t addr = dpaa2_fd_get_addr(fd);
@@ -377,7 +385,7 @@ static bool consume_frames(struct dpaa2_eth_channel *ch, int *rx_cleaned,
 		fq = (struct dpaa2_eth_fq *)dpaa2_dq_fqd_ctx(dq);
 		fq->stats.frames++;
 
-		fq->consume(priv, ch, fd, &ch->napi);
+		fq->consume(priv, ch, fd, &ch->napi, fq->flowid);
 		has_cleaned = true;
 
 		if (fq->type == DPAA2_TX_CONF_FQ)
@@ -668,7 +676,7 @@ static int dpaa2_eth_tx(struct sk_buff *skb, struct net_device *net_dev)
 	struct rtnl_link_stats64 *percpu_stats;
 	struct dpaa2_eth_drv_stats *percpu_extras;
 	struct dpaa2_eth_fq fq;
-	u16 queue_mapping;
+	u16 queue_mapping = skb_get_queue_mapping(skb);
 	int err, i;
 
 	percpu_stats = this_cpu_ptr(priv->percpu_stats);
@@ -715,10 +723,6 @@ static int dpaa2_eth_tx(struct sk_buff *skb, struct net_device *net_dev)
 	/* Tracing point */
 	trace_dpaa2_tx_fd(net_dev, &fd);
 
-	/* TxConf FQ selection primarily based on cpu affinity; this is
-	 * non-migratable context, so it's safe to call smp_processor_id().
-	 */
-	queue_mapping = smp_processor_id() % priv->dpni_attrs.num_queues;
 	fq = priv->fq[queue_mapping];
 	for (i = 0; i < (DPAA2_ETH_MAX_TX_QUEUES << 1); i++) {
 		err = dpaa2_io_service_enqueue_qd(NULL, priv->tx_qdid, 0,
@@ -753,7 +757,8 @@ err_alloc_headroom:
 static void dpaa2_eth_tx_conf(struct dpaa2_eth_priv *priv,
 			      struct dpaa2_eth_channel *ch,
 			      const struct dpaa2_fd *fd,
-			      struct napi_struct *napi __always_unused)
+			      struct napi_struct *napi __always_unused,
+			      u16 queue_id __always_unused)
 {
 	struct rtnl_link_stats64 *percpu_stats;
 	struct dpaa2_eth_drv_stats *percpu_extras;
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index c6e684a..ca72c93 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -293,7 +293,8 @@ struct dpaa2_eth_fq {
 	void (*consume)(struct dpaa2_eth_priv *,
 			struct dpaa2_eth_channel *,
 			const struct dpaa2_fd *,
-			struct napi_struct *);
+			struct napi_struct *,
+			u16 queue_id);
 	struct dpaa2_eth_fq_stats stats;
 };
 
-- 
1.7.5.4

