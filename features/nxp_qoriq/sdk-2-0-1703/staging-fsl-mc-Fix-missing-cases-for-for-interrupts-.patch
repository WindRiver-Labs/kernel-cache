From 02828c77d2762c0f54a2812042997ac8872ad046 Mon Sep 17 00:00:00 2001
From: "J. German Rivera" <German.Rivera@freescale.com>
Date: Tue, 21 Apr 2015 11:33:02 -0500
Subject: [PATCH 016/508] staging: fsl-mc: Fix missing cases for for
 interrupts not supported

When DPMCP interrupt support was added, I forgot to consider cases
in which support without interrupts is needed.

Signed-off-by: J. German Rivera <German.Rivera@freescale.com>
Change-Id: I2575daba67c76a2a1d6cc495cbaf94d03acf470d
Reviewed-on: http://git.am.freescale.net:8181/35383
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Bharat Bhushan <Bharat.Bhushan@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dprc-driver.c |   63 +++++++++++++++---------------
 drivers/staging/fsl-mc/bus/mc-sys.c      |    8 +++-
 2 files changed, 38 insertions(+), 33 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dprc-driver.c b/drivers/staging/fsl-mc/bus/dprc-driver.c
index f4a31e0..9966b40 100644
--- a/drivers/staging/fsl-mc/bus/dprc-driver.c
+++ b/drivers/staging/fsl-mc/bus/dprc-driver.c
@@ -374,7 +374,6 @@ int dprc_scan_container(struct fsl_mc_device *mc_bus_dev)
 	int error;
 	unsigned int irq_count;
 	struct fsl_mc_bus *mc_bus = to_fsl_mc_bus(mc_bus_dev);
-	struct fsl_mc *mc = dev_get_drvdata(fsl_mc_bus_type.dev_root->parent);
 
 	dprc_init_all_resource_pools(mc_bus_dev);
 
@@ -387,7 +386,7 @@ int dprc_scan_container(struct fsl_mc_device *mc_bus_dev)
 	if (error < 0)
 		goto error;
 
-	if (dev_get_msi_domain(&mc_bus_dev->dev) && mc->gic_supported && !mc_bus->irq_resources) {
+	if (dev_get_msi_domain(&mc_bus_dev->dev) && fsl_mc_interrupts_supported() && !mc_bus->irq_resources) {
 		if (irq_count > FSL_MC_IRQ_POOL_MAX_TOTAL_IRQS) {
 			dev_warn(&mc_bus_dev->dev,
 				 "IRQs needed (%u) exceed IRQs preallocated (%u)\n",
@@ -739,7 +738,6 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 	size_t region_size;
 	struct device *parent_dev = mc_dev->dev.parent;
 	struct fsl_mc_bus *mc_bus = to_fsl_mc_bus(mc_dev);
-	struct fsl_mc *mc = dev_get_drvdata(fsl_mc_bus_type.dev_root->parent);
 	bool mc_io_created = false;
 	bool msi_domain_set = false;
 
@@ -814,12 +812,14 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 		goto error_cleanup_open;
 	}
 
-	/*
-	 * Create DPMCP for the DPRC's built-in portal:
-	 */
-	error = dprc_create_dpmcp(mc_dev);
-	if (error < 0)
-		goto error_cleanup_open;
+	if (fsl_mc_interrupts_supported()) {
+		/*
+		 * Create DPMCP for the DPRC's built-in portal:
+		 */
+		error = dprc_create_dpmcp(mc_dev);
+		if (error < 0)
+			goto error_cleanup_open;
+	}
 
 	if (mc_bus->dprc_attr.version.major < DPRC_MIN_VER_MAJOR ||
 	   (mc_bus->dprc_attr.version.major == DPRC_MIN_VER_MAJOR &&
@@ -841,27 +841,27 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 	if (error < 0)
 		goto  error_destroy_dpmcp;
 
-	/*
-	 * The fsl_mc_device object associated with the DPMCP object created
-	 * above was created as part of the dprc_scan_container() call above:
-	 */
-	if (WARN_ON(!mc_dev->mc_io->dpmcp_dev)) {
-		error = -EINVAL;
-		goto error_cleanup_dprc_scan;
-	}
+	if (fsl_mc_interrupts_supported()) {
+		/*
+		 * The fsl_mc_device object associated with the DPMCP object created
+		 * above was created as part of the dprc_scan_container() call above:
+		 */
+		if (WARN_ON(!mc_dev->mc_io->dpmcp_dev)) {
+			error = -EINVAL;
+			goto error_cleanup_dprc_scan;
+		}
 
-	/*
-	 * Configure interrupt for the DPMCP object associated with the
-	 * DPRC object's built-in portal:
-	 *
-	 * NOTE: We have to do this after calling dprc_scan_container(), since
-	 * dprc_scan_container() will populate the IRQ pool for this DPRC.
-	 */
-	error = fsl_mc_io_setup_dpmcp_irq(mc_dev->mc_io);
-	if (error < 0)
-		goto error_cleanup_dprc_scan;
+		/*
+		 * Configure interrupt for the DPMCP object associated with the
+		 * DPRC object's built-in portal:
+		 *
+		 * NOTE: We have to do this after calling dprc_scan_container(), since
+		 * dprc_scan_container() will populate the IRQ pool for this DPRC.
+		 */
+		error = fsl_mc_io_setup_dpmcp_irq(mc_dev->mc_io);
+		if (error < 0)
+			goto error_cleanup_dprc_scan;
 
-	if (mc->gic_supported) {
 		/*
 		 * Configure interrupt for the DPRC object associated with this MC bus:
 		 */
@@ -877,7 +877,7 @@ error_cleanup_dprc_scan:
 	fsl_mc_io_unset_dpmcp(mc_dev->mc_io);
 	device_for_each_child(&mc_dev->dev, NULL, __fsl_mc_device_remove);
 	dprc_cleanup_all_resource_pools(mc_dev);
-	if (mc->gic_supported)
+	if (fsl_mc_interrupts_supported())
 		fsl_mc_cleanup_irq_pool(mc_bus);
 
 error_destroy_dpmcp:
@@ -926,7 +926,6 @@ static int dprc_remove(struct fsl_mc_device *mc_dev)
 {
 	int error;
 	struct fsl_mc_bus *mc_bus = to_fsl_mc_bus(mc_dev);
-	struct fsl_mc *mc = dev_get_drvdata(fsl_mc_bus_type.dev_root->parent);
 
 	if (WARN_ON(strcmp(mc_dev->obj_desc.type, "dprc") != 0))
 		return -EINVAL;
@@ -936,13 +935,13 @@ static int dprc_remove(struct fsl_mc_device *mc_dev)
 	if (WARN_ON(!mc_bus->irq_resources))
 		return -EINVAL;
 
-	if (dev_get_msi_domain(&mc_dev->dev) && mc->gic_supported)
+	if (dev_get_msi_domain(&mc_dev->dev) && fsl_mc_interrupts_supported())
 		dprc_teardown_irq(mc_dev);
 
 	fsl_mc_io_unset_dpmcp(mc_dev->mc_io);
 	device_for_each_child(&mc_dev->dev, NULL, __fsl_mc_device_remove);
 
-	if (dev_get_msi_domain(&mc_dev->dev) && mc->gic_supported) {
+	if (dev_get_msi_domain(&mc_dev->dev) && fsl_mc_interrupts_supported()) {
 		fsl_mc_cleanup_irq_pool(mc_bus);
 		dev_set_msi_domain(&mc_dev->dev, NULL);
 	}
diff --git a/drivers/staging/fsl-mc/bus/mc-sys.c b/drivers/staging/fsl-mc/bus/mc-sys.c
index 8c1ef28..f15b9fe 100644
--- a/drivers/staging/fsl-mc/bus/mc-sys.c
+++ b/drivers/staging/fsl-mc/bus/mc-sys.c
@@ -235,6 +235,9 @@ int fsl_mc_io_setup_dpmcp_irq(struct fsl_mc_io *mc_io)
 	if (WARN_ON(!dpmcp_dev))
 		return -EINVAL;
 
+	if (WARN_ON(!fsl_mc_interrupts_supported()))
+		return -EINVAL;
+
 	if (WARN_ON(dpmcp_dev->obj_desc.irq_count != 1))
 		return -EINVAL;
 
@@ -279,6 +282,8 @@ static void teardown_dpmcp_irq(struct fsl_mc_io *mc_io)
 
 	if (WARN_ON(!dpmcp_dev))
 		return;
+	if (WARN_ON(!fsl_mc_interrupts_supported()))
+		return;
 	if (WARN_ON(!dpmcp_dev->irqs))
 		return;
 
@@ -355,7 +360,8 @@ int __must_check fsl_create_mc_io(struct device *dev,
 		if (error < 0)
 			goto error_destroy_mc_io;
 
-		if (!(flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL)) {
+		if (!(flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL) &&
+			fsl_mc_interrupts_supported()) {
 			error = fsl_mc_io_setup_dpmcp_irq(mc_io);
 			if (error < 0)
 				goto error_destroy_mc_io;
-- 
1.7.5.4

