From b4b9c9f185c4d9b7ccae34b3a7b4fec517d91689 Mon Sep 17 00:00:00 2001
From: Radu Alexe <radu.alexe@nxp.com>
Date: Wed, 15 Mar 2017 12:08:46 +0200
Subject: [PATCH 487/508] crypto: dpaa2-caam: uprev to DPSECI vers 5.0

API version was removed from the "dpseci_attr" struct
and it was integrated into the driver private data
structure.

Signed-off-by: Radu Alexe <radu.alexe@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/dpaa2-caam/dpaa2-caam.c     |   19 ++-
 drivers/crypto/dpaa2-caam/dpaa2-caam.h     |    5 +
 drivers/crypto/dpaa2-caam/dpseci.c         |  143 +++++++++++--------
 drivers/crypto/dpaa2-caam/fsl_dpseci.h     |  210 +++++++++++++++-------------
 drivers/crypto/dpaa2-caam/fsl_dpseci_cmd.h |  148 +++++++++++---------
 drivers/staging/fsl-mc/include/mc-cmd.h    |    8 +
 6 files changed, 309 insertions(+), 224 deletions(-)

diff --git a/drivers/crypto/dpaa2-caam/dpaa2-caam.c b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
index 1ce061c..91e69ed 100644
--- a/drivers/crypto/dpaa2-caam/dpaa2-caam.c
+++ b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
@@ -5037,11 +5037,18 @@ static int __cold dpaa2_dpseci_setup(struct fsl_mc_device *ls_dev)
 
 	dev_info(dev, "Opened dpseci object successfully\n");
 
+	err = dpseci_get_api_version(priv->mc_io, 0, &priv->major_ver,
+					&priv->minor_ver);
+	if (err) {
+		dev_err(dev, "dpseci_get_api_version() failed\n");
+		goto err_get_vers;
+	}
+
 	err = dpseci_get_attributes(priv->mc_io, 0, ls_dev->mc_handle,
 				    &priv->dpseci_attr);
 	if (err) {
 		dev_err(dev, "dpseci_get_attributes() failed\n");
-		goto err_get_attr;
+		goto err_get_vers;
 	}
 
 	priv->num_pairs = min(priv->dpseci_attr.num_rx_queues,
@@ -5052,7 +5059,7 @@ static int __cold dpaa2_dpseci_setup(struct fsl_mc_device *ls_dev)
 					  &priv->rx_queue_attr[i]);
 		if (err) {
 			dev_err(dev, "dpseci_get_rx_queue() failed\n");
-			goto err_get_attr;
+			goto err_get_vers;
 		}
 	}
 
@@ -5061,7 +5068,7 @@ static int __cold dpaa2_dpseci_setup(struct fsl_mc_device *ls_dev)
 					  &priv->tx_queue_attr[i]);
 		if (err) {
 			dev_err(dev, "dpseci_get_tx_queue() failed\n");
-			goto err_get_attr;
+			goto err_get_vers;
 		}
 	}
 
@@ -5084,7 +5091,7 @@ static int __cold dpaa2_dpseci_setup(struct fsl_mc_device *ls_dev)
 
 	return 0;
 
-err_get_attr:
+err_get_vers:
 	dpseci_close(priv->mc_io, 0, ls_dev->mc_handle);
 err_open:
 	return err;
@@ -5109,8 +5116,8 @@ static int dpaa2_dpseci_enable(struct dpaa2_caam_priv *priv)
 	}
 
 	dev_info(dev, "DPSECI version %d.%d\n",
-		 priv->dpseci_attr.version.major,
-		 priv->dpseci_attr.version.minor);
+		 priv->major_ver,
+		 priv->minor_ver);
 
 	return 0;
 }
diff --git a/drivers/crypto/dpaa2-caam/dpaa2-caam.h b/drivers/crypto/dpaa2-caam/dpaa2-caam.h
index 796a211..5eaac12 100644
--- a/drivers/crypto/dpaa2-caam/dpaa2-caam.h
+++ b/drivers/crypto/dpaa2-caam/dpaa2-caam.h
@@ -52,6 +52,8 @@
 /**
  * dpaa2_caam_priv - driver private data
  * @dpseci_id: DPSECI object unique ID
+ * @major_ver: DPSECI major version
+ * @minor_ver: DPSECI minor version
  * @dpseci_attr: DPSECI attributes
  * @rx_queue_attr: array of Rx queue attributes
  * @tx_queue_attr: array of Tx queue attributes
@@ -62,6 +64,9 @@
 struct dpaa2_caam_priv {
 	int dpsec_id;
 
+	uint16_t major_ver;
+	uint16_t minor_ver;
+
 	struct dpseci_attr dpseci_attr;
 	struct dpseci_rx_queue_attr rx_queue_attr[DPSECI_PRIO_NUM];
 	struct dpseci_tx_queue_attr tx_queue_attr[DPSECI_PRIO_NUM];
diff --git a/drivers/crypto/dpaa2-caam/dpseci.c b/drivers/crypto/dpaa2-caam/dpseci.c
index 69ba555..33d7ded 100644
--- a/drivers/crypto/dpaa2-caam/dpseci.c
+++ b/drivers/crypto/dpaa2-caam/dpseci.c
@@ -1,4 +1,4 @@
-/* Copyright 2013-2015 Freescale Semiconductor Inc.
+/* Copyright 2013-2016 Freescale Semiconductor Inc.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -32,6 +32,7 @@
 
 #include "../../../drivers/staging/fsl-mc/include/mc-sys.h"
 #include "../../../drivers/staging/fsl-mc/include/mc-cmd.h"
+#include "../../../drivers/staging/fsl-mc/include/fsl_dpopr.h"
 #include "fsl_dpseci.h"
 #include "fsl_dpseci_cmd.h"
 
@@ -75,10 +76,11 @@ int dpseci_close(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpseci_create(struct fsl_mc_io *mc_io,
-		  uint32_t cmd_flags,
-		  const struct dpseci_cfg *cfg,
-		  uint16_t *token)
+int dpseci_create(struct fsl_mc_io	*mc_io,
+		  uint16_t	dprc_token,
+		uint32_t	cmd_flags,
+		const struct dpseci_cfg	*cfg,
+		uint32_t	*obj_id)
 {
 	struct mc_command cmd = { 0 };
 	int err;
@@ -86,7 +88,7 @@ int dpseci_create(struct fsl_mc_io *mc_io,
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSECI_CMDID_CREATE,
 					  cmd_flags,
-					  0);
+					  dprc_token);
 	DPSECI_CMD_CREATE(cmd, cfg);
 
 	/* send command to mc*/
@@ -95,22 +97,24 @@ int dpseci_create(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	*token = MC_CMD_HDR_READ_TOKEN(cmd.header);
+	CMD_CREATE_RSP_GET_OBJ_ID_PARAM0(cmd, *obj_id);
 
 	return 0;
 }
 
-int dpseci_destroy(struct fsl_mc_io *mc_io,
-		   uint32_t cmd_flags,
-		   uint16_t token)
+int dpseci_destroy(struct fsl_mc_io	*mc_io,
+		   uint16_t	dprc_token,
+		uint32_t	cmd_flags,
+		uint32_t	object_id)
 {
 	struct mc_command cmd = { 0 };
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPSECI_CMDID_DESTROY,
 					  cmd_flags,
-					  token);
-
+					  dprc_token);
+	/* set object id to destroy */
+	CMD_DESTROY_SET_OBJ_ID_PARAM0(cmd, object_id);
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
 }
@@ -183,51 +187,6 @@ int dpseci_reset(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpseci_get_irq(struct fsl_mc_io *mc_io,
-		   uint32_t cmd_flags,
-		   uint16_t token,
-		   uint8_t irq_index,
-		   int *type,
-		   struct dpseci_irq_cfg *irq_cfg)
-{
-	struct mc_command cmd = { 0 };
-	int err;
-
-	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPSECI_CMDID_GET_IRQ,
-					  cmd_flags,
-					  token);
-	DPSECI_CMD_GET_IRQ(cmd, irq_index);
-
-	/* send command to mc*/
-	err = mc_send_command(mc_io, &cmd);
-	if (err)
-		return err;
-
-	/* retrieve response parameters */
-	DPSECI_RSP_GET_IRQ(cmd, *type, irq_cfg);
-
-	return 0;
-}
-
-int dpseci_set_irq(struct fsl_mc_io *mc_io,
-		   uint32_t cmd_flags,
-		   uint16_t token,
-		   uint8_t irq_index,
-		   struct dpseci_irq_cfg *irq_cfg)
-{
-	struct mc_command cmd = { 0 };
-
-	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPSECI_CMDID_SET_IRQ,
-					  cmd_flags,
-					  token);
-	DPSECI_CMD_SET_IRQ(cmd, irq_index, irq_cfg);
-
-	/* send command to mc*/
-	return mc_send_command(mc_io, &cmd);
-}
-
 int dpseci_get_irq_enable(struct fsl_mc_io *mc_io,
 			  uint32_t cmd_flags,
 			  uint16_t token,
@@ -379,7 +338,7 @@ int dpseci_get_attributes(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPSECI_RSP_GET_ATTR(cmd, attr);
+	DPSECI_RSP_GET_ATTRIBUTES(cmd, attr);
 
 	return 0;
 }
@@ -501,3 +460,71 @@ int dpseci_get_sec_counters(struct fsl_mc_io		*mc_io,
 
 	return 0;
 }
+
+int dpseci_get_api_version(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
+			   uint16_t *major_ver,
+			   uint16_t *minor_ver)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	cmd.header = mc_encode_cmd_header(DPSECI_CMDID_GET_API_VERSION,
+					cmd_flags,
+					0);
+
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	DPSECI_RSP_GET_API_VERSION(cmd, *major_ver, *minor_ver);
+
+	return 0;
+}
+
+int dpseci_set_opr(struct fsl_mc_io *mc_io,
+	      uint32_t cmd_flags,
+	      uint16_t token,
+		  uint8_t index,
+		  uint8_t options,
+		  struct opr_cfg *cfg)
+{
+	struct mc_command cmd = { 0 };
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(
+			DPSECI_CMDID_SET_OPR,
+			cmd_flags,
+			token);
+	DPSECI_CMD_SET_OPR(cmd, index, options, cfg);
+
+	/* send command to mc*/
+	return mc_send_command(mc_io, &cmd);
+}
+
+int dpseci_get_opr(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
+		     uint16_t token,
+			 uint8_t index,
+			 struct opr_cfg *cfg,
+			 struct opr_qry *qry)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(DPSECI_CMDID_GET_OPR,
+					  cmd_flags,
+					  token);
+	DPSECI_CMD_GET_OPR(cmd, index);
+
+	/* send command to mc*/
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	/* retrieve response parameters */
+	DPSECI_RSP_GET_OPR(cmd, cfg, qry);
+
+	return 0;
+}
diff --git a/drivers/crypto/dpaa2-caam/fsl_dpseci.h b/drivers/crypto/dpaa2-caam/fsl_dpseci.h
index 47d3c52..c782dc5 100644
--- a/drivers/crypto/dpaa2-caam/fsl_dpseci.h
+++ b/drivers/crypto/dpaa2-caam/fsl_dpseci.h
@@ -1,4 +1,4 @@
-/* Copyright 2013-2015 Freescale Semiconductor Inc.
+/* Copyright 2013-2016 Freescale Semiconductor Inc.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -37,6 +37,8 @@
  */
 
 struct fsl_mc_io;
+struct opr_cfg;
+struct opr_qry;
 
 /**
  * General DPSECI macros
@@ -90,7 +92,20 @@ int dpseci_close(struct fsl_mc_io	*mc_io,
 		 uint16_t		token);
 
 /**
+ * Enable the Order Restoration support
+ */
+#define DPSECI_OPT_HAS_OPR					0x000040
+
+/**
+ * Order Point Records are shared for the entire DPSECI
+ */
+#define DPSECI_OPT_OPR_SHARED				0x000080
+
+/**
  * struct dpseci_cfg - Structure representing DPSECI configuration
+ * @options: Any combination of the following options:
+ *		DPSECI_OPT_HAS_OPR
+ *		DPSECI_OPT_OPR_SHARED
  * @num_tx_queues: num of queues towards the SEC
  * @num_rx_queues: num of queues back from the SEC
  * @priorities: Priorities for the SEC hardware processing;
@@ -99,6 +114,7 @@ int dpseci_close(struct fsl_mc_io	*mc_io,
  *		valid priorities are configured with values 1-8;
  */
 struct dpseci_cfg {
+	uint32_t options;
 	uint8_t num_tx_queues;
 	uint8_t num_rx_queues;
 	uint8_t priorities[DPSECI_PRIO_NUM];
@@ -107,9 +123,10 @@ struct dpseci_cfg {
 /**
  * dpseci_create() - Create the DPSECI object
  * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token:	Parent container token; '0' for default container
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @cfg:	Configuration structure
- * @token:	Returned token; use in subsequent API calls
+ * @obj_id: returned object id
  *
  * Create the DPSECI object, allocate required resources and
  * perform required initialization.
@@ -117,31 +134,39 @@ struct dpseci_cfg {
  * The object can be created either by declaring it in the
  * DPL file, or by calling this function.
  *
- * This function returns a unique authentication token,
- * associated with the specific object ID and the specific MC
- * portal; this token must be used in all subsequent calls to
- * this specific object. For objects that are created using the
- * DPL file, call dpseci_open() function to get an authentication
- * token first.
+ * The function accepts an authentication token of a parent
+ * container that this object should be assigned to. The token
+ * can be '0' so the object will be assigned to the default container.
+ * The newly created object can be opened with the returned
+ * object id and using the container's associated tokens and MC portals.
  *
  * Return:	'0' on Success; Error code otherwise.
  */
 int dpseci_create(struct fsl_mc_io		*mc_io,
+		  uint16_t			dprc_token,
 		  uint32_t			cmd_flags,
 		  const struct dpseci_cfg	*cfg,
-		  uint16_t			*token);
+		  uint32_t			*obj_id);
 
 /**
  * dpseci_destroy() - Destroy the DPSECI object and release all its resources.
  * @mc_io:	Pointer to MC portal's I/O object
+ * @dprc_token: Parent container token; '0' for default container
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSECI object
+ * @object_id:	The object id; it must be a valid id within the container that
+ * created this object;
+ *
+ * The function accepts the authentication token of the parent container that
+ * created the object (not the one that currently owns the object). The object
+ * is searched within parent using the provided 'object_id'.
+ * All tokens to the object must be closed before calling destroy.
  *
  * Return:	'0' on Success; error code otherwise.
  */
 int dpseci_destroy(struct fsl_mc_io	*mc_io,
+		   uint16_t		dprc_token,
 		   uint32_t		cmd_flags,
-		   uint16_t		token);
+		   uint32_t		object_id);
 
 /**
  * dpseci_enable() - Enable the DPSECI, allow sending and receiving frames.
@@ -194,54 +219,6 @@ int dpseci_reset(struct fsl_mc_io	*mc_io,
 		 uint16_t		token);
 
 /**
- * struct dpseci_irq_cfg - IRQ configuration
- * @addr:	Address that must be written to signal a message-based interrupt
- * @val:	Value to write into irq_addr address
- * @irq_num: A user defined number associated with this IRQ
- */
-struct dpseci_irq_cfg {
-	     uint64_t		addr;
-	     uint32_t		val;
-	     int		irq_num;
-};
-
-/**
- * dpseci_set_irq() - Set IRQ information for the DPSECI to trigger an interrupt
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSECI object
- * @irq_index:	Identifies the interrupt index to configure
- * @irq_cfg:	IRQ configuration
- *
- * Return:	'0' on Success; Error code otherwise.
- */
-int dpseci_set_irq(struct fsl_mc_io		*mc_io,
-		   uint32_t			cmd_flags,
-		   uint16_t			token,
-		   uint8_t			irq_index,
-		   struct dpseci_irq_cfg	*irq_cfg);
-
-/**
- * dpseci_get_irq() - Get IRQ information from the DPSECI
- *
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPSECI object
- * @irq_index:	The interrupt index to configure
- * @type:	Interrupt type: 0 represents message interrupt
- *		type (both irq_addr and irq_val are valid)
- * @irq_cfg:	IRQ attributes
- *
- * Return:	'0' on Success; Error code otherwise.
- */
-int dpseci_get_irq(struct fsl_mc_io		*mc_io,
-		   uint32_t			cmd_flags,
-		   uint16_t			token,
-		   uint8_t			irq_index,
-		   int				*type,
-		   struct dpseci_irq_cfg	*irq_cfg);
-
-/**
  * dpseci_set_irq_enable() - Set overall interrupt state.
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
@@ -297,7 +274,7 @@ int dpseci_get_irq_enable(struct fsl_mc_io	*mc_io,
 int dpseci_set_irq_mask(struct fsl_mc_io	*mc_io,
 			uint32_t		cmd_flags,
 			uint16_t		token,
-			uint8_t		irq_index,
+			uint8_t			irq_index,
 			uint32_t		mask);
 
 /**
@@ -316,7 +293,7 @@ int dpseci_set_irq_mask(struct fsl_mc_io	*mc_io,
 int dpseci_get_irq_mask(struct fsl_mc_io	*mc_io,
 			uint32_t		cmd_flags,
 			uint16_t		token,
-			uint8_t		irq_index,
+			uint8_t			irq_index,
 			uint32_t		*mask);
 
 /**
@@ -358,23 +335,13 @@ int dpseci_clear_irq_status(struct fsl_mc_io	*mc_io,
 /**
  * struct dpseci_attr - Structure representing DPSECI attributes
  * @id: DPSECI object ID
- * @version: DPSECI version
  * @num_tx_queues: number of queues towards the SEC
  * @num_rx_queues: number of queues back from the SEC
  */
 struct dpseci_attr {
-	int		id;
-	/**
-	 * struct version - DPSECI version
-	 * @major: DPSECI major version
-	 * @minor: DPSECI minor version
-	 */
-	struct {
-		uint16_t major;
-		uint16_t minor;
-	} version;
-	uint8_t num_tx_queues;
-	uint8_t num_rx_queues;
+	int	id;
+	uint8_t	num_tx_queues;
+	uint8_t	num_rx_queues;
 };
 
 /**
@@ -421,7 +388,7 @@ enum dpseci_dest {
 struct dpseci_dest_cfg {
 	enum dpseci_dest	dest_type;
 	int			dest_id;
-	uint8_t		priority;
+	uint8_t			priority;
 };
 
 /**
@@ -431,17 +398,17 @@ struct dpseci_dest_cfg {
 /**
  * Select to modify the user's context associated with the queue
  */
-#define DPSECI_QUEUE_OPT_USER_CTX	0x00000001
+#define DPSECI_QUEUE_OPT_USER_CTX		0x00000001
 
 /**
  * Select to modify the queue's destination
  */
-#define DPSECI_QUEUE_OPT_DEST		0x00000002
+#define DPSECI_QUEUE_OPT_DEST			0x00000002
 
 /**
  * Select to modify the queue's order preservation
  */
-#define DPSECI_QUEUE_OPT_ORDER_PRESERVATION    0x00000004
+#define DPSECI_QUEUE_OPT_ORDER_PRESERVATION	0x00000004
 
 /**
  * struct dpseci_rx_queue_cfg - DPSECI RX queue configuration
@@ -573,26 +540,26 @@ int dpseci_get_tx_queue(struct fsl_mc_io		*mc_io,
  * in this version of SEC.
  * @aes_acc_num: The number of copies of the AES module that are implemented
  * in this version of SEC.
- */
+ **/
 
 struct dpseci_sec_attr {
 	uint16_t	ip_id;
 	uint8_t	major_rev;
 	uint8_t	minor_rev;
-	uint8_t     era;
-	uint8_t     deco_num;
-	uint8_t     zuc_auth_acc_num;
-	uint8_t     zuc_enc_acc_num;
-	uint8_t     snow_f8_acc_num;
-	uint8_t     snow_f9_acc_num;
-	uint8_t     crc_acc_num;
-	uint8_t     pk_acc_num;
-	uint8_t     kasumi_acc_num;
-	uint8_t     rng_acc_num;
-	uint8_t     md_acc_num;
-	uint8_t     arc4_acc_num;
-	uint8_t     des_acc_num;
-	uint8_t     aes_acc_num;
+	uint8_t	era;
+	uint8_t	deco_num;
+	uint8_t	zuc_auth_acc_num;
+	uint8_t	zuc_enc_acc_num;
+	uint8_t	snow_f8_acc_num;
+	uint8_t	snow_f9_acc_num;
+	uint8_t	crc_acc_num;
+	uint8_t	pk_acc_num;
+	uint8_t	kasumi_acc_num;
+	uint8_t	rng_acc_num;
+	uint8_t	md_acc_num;
+	uint8_t	arc4_acc_num;
+	uint8_t	des_acc_num;
+	uint8_t	aes_acc_num;
 };
 
 /**
@@ -607,7 +574,7 @@ struct dpseci_sec_attr {
 int dpseci_get_sec_attr(struct fsl_mc_io		*mc_io,
 			uint32_t			cmd_flags,
 			uint16_t			token,
-			struct dpseci_sec_attr *attr);
+			struct dpseci_sec_attr		*attr);
 
 /**
  * struct dpseci_sec_counters - Structure representing global SEC counters and
@@ -641,7 +608,58 @@ struct dpseci_sec_counters {
  */
 int dpseci_get_sec_counters(struct fsl_mc_io		*mc_io,
 			    uint32_t			cmd_flags,
-		uint16_t			token,
-		struct dpseci_sec_counters *counters);
+			    uint16_t			token,
+			    struct dpseci_sec_counters	*counters);
+
+/**
+ * dpseci_get_api_version() - Get Data Path SEC Interface API version
+ * @mc_io:  Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @major_ver:	Major version of data path sec API
+ * @minor_ver:	Minor version of data path sec API
+ *
+ * Return:  '0' on Success; Error code otherwise.
+ */
+int dpseci_get_api_version(struct fsl_mc_io *mc_io,
+			   uint32_t cmd_flags,
+			   uint16_t *major_ver,
+			   uint16_t *minor_ver);
+
+/**
+ * dpseci_set_opr() - Set Order Restoration configuration.
+ * @mc_io:		Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSECI object
+ * @index:	The queue index
+ * @options:	Configuration mode options
+ *				can be OPR_OPT_CREATE or OPR_OPT_RETIRE
+ * @cfg:		Configuration options for the OPR
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
+int dpseci_set_opr(struct fsl_mc_io *mc_io,
+	      uint32_t cmd_flags,
+	      uint16_t token,
+		  uint8_t index,
+		  uint8_t options,
+		  struct opr_cfg *cfg);
+
+/**
+ * dpseci_get_opr() - Retrieve Order Restoration config and query.
+ * @mc_io:		Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:		Token of DPSECI object
+ * @index:	The queue index
+ * @cfg:		Returned OPR configuration
+ * @qry:		Returned OPR query
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
+int dpseci_get_opr(struct fsl_mc_io *mc_io,
+		      uint32_t cmd_flags,
+		     uint16_t token,
+			 uint8_t index,
+			 struct opr_cfg *cfg,
+			 struct opr_qry *qry);
 
 #endif /* __FSL_DPSECI_H */
diff --git a/drivers/crypto/dpaa2-caam/fsl_dpseci_cmd.h b/drivers/crypto/dpaa2-caam/fsl_dpseci_cmd.h
index d17be2e..10b22d4 100644
--- a/drivers/crypto/dpaa2-caam/fsl_dpseci_cmd.h
+++ b/drivers/crypto/dpaa2-caam/fsl_dpseci_cmd.h
@@ -33,39 +33,37 @@
 #define _FSL_DPSECI_CMD_H
 
 /* DPSECI Version */
-#define DPSECI_VER_MAJOR				3
-#define DPSECI_VER_MINOR				1
-
-#define DPSECI_CMD_BASE_VER				0
-#define DPSECI_CMD_ID_OFF				4
-#define DPSECI_CMD_ID(id) (((id) << DPSECI_CMD_ID_OFF) | DPSECI_CMD_BASE_VER)
+#define DPSECI_VER_MAJOR				5
+#define DPSECI_VER_MINOR				0
 
 /* Command IDs */
-#define DPSECI_CMDID_CLOSE		DPSECI_CMD_ID(0x800)
-#define DPSECI_CMDID_OPEN		DPSECI_CMD_ID(0x809)
-#define DPSECI_CMDID_CREATE		DPSECI_CMD_ID(0x909)
-#define DPSECI_CMDID_DESTROY		DPSECI_CMD_ID(0x900)
-
-#define DPSECI_CMDID_ENABLE		DPSECI_CMD_ID(0x002)
-#define DPSECI_CMDID_DISABLE		DPSECI_CMD_ID(0x003)
-#define DPSECI_CMDID_GET_ATTR		DPSECI_CMD_ID(0x004)
-#define DPSECI_CMDID_RESET		DPSECI_CMD_ID(0x005)
-#define DPSECI_CMDID_IS_ENABLED		DPSECI_CMD_ID(0x006)
-
-#define DPSECI_CMDID_SET_IRQ		DPSECI_CMD_ID(0x010)
-#define DPSECI_CMDID_GET_IRQ		DPSECI_CMD_ID(0x011)
-#define DPSECI_CMDID_SET_IRQ_ENABLE	DPSECI_CMD_ID(0x012)
-#define DPSECI_CMDID_GET_IRQ_ENABLE	DPSECI_CMD_ID(0x013)
-#define DPSECI_CMDID_SET_IRQ_MASK	DPSECI_CMD_ID(0x014)
-#define DPSECI_CMDID_GET_IRQ_MASK	DPSECI_CMD_ID(0x015)
-#define DPSECI_CMDID_GET_IRQ_STATUS	DPSECI_CMD_ID(0x016)
-#define DPSECI_CMDID_CLEAR_IRQ_STATUS	DPSECI_CMD_ID(0x017)
-
-#define DPSECI_CMDID_SET_RX_QUEUE	DPSECI_CMD_ID(0x194)
-#define DPSECI_CMDID_GET_RX_QUEUE	DPSECI_CMD_ID(0x196)
-#define DPSECI_CMDID_GET_TX_QUEUE	DPSECI_CMD_ID(0x197)
-#define DPSECI_CMDID_GET_SEC_ATTR	DPSECI_CMD_ID(0x198)
-#define DPSECI_CMDID_GET_SEC_COUNTERS	DPSECI_CMD_ID(0x199)
+
+#define DPSECI_CMDID_CLOSE                              0x8001
+#define DPSECI_CMDID_OPEN                               0x8091
+#define DPSECI_CMDID_CREATE                             0x9092
+#define DPSECI_CMDID_DESTROY                            0x9891
+#define DPSECI_CMDID_GET_API_VERSION                    0xa091
+
+#define DPSECI_CMDID_ENABLE                             0x0021
+#define DPSECI_CMDID_DISABLE                            0x0031
+#define DPSECI_CMDID_GET_ATTR                           0x0041
+#define DPSECI_CMDID_RESET                              0x0051
+#define DPSECI_CMDID_IS_ENABLED                         0x0061
+
+#define DPSECI_CMDID_SET_IRQ_ENABLE                     0x0121
+#define DPSECI_CMDID_GET_IRQ_ENABLE                     0x0131
+#define DPSECI_CMDID_SET_IRQ_MASK                       0x0141
+#define DPSECI_CMDID_GET_IRQ_MASK                       0x0151
+#define DPSECI_CMDID_GET_IRQ_STATUS                     0x0161
+#define DPSECI_CMDID_CLEAR_IRQ_STATUS                   0x0171
+
+#define DPSECI_CMDID_SET_RX_QUEUE                       0x1941
+#define DPSECI_CMDID_GET_RX_QUEUE                       0x1961
+#define DPSECI_CMDID_GET_TX_QUEUE                       0x1971
+#define DPSECI_CMDID_GET_SEC_ATTR                       0x1981
+#define DPSECI_CMDID_GET_SEC_COUNTERS                   0x1991
+#define DPSECI_CMDID_SET_OPR				0x19A1
+#define DPSECI_CMDID_GET_OPR				0x19B1
 
 /*                cmd, param, offset, width, type, arg_name */
 #define DPSECI_CMD_OPEN(cmd, dpseci_id) \
@@ -84,6 +82,7 @@ do { \
 	MC_CMD_OP(cmd, 0, 56, 8,  uint8_t,  cfg->priorities[7]);\
 	MC_CMD_OP(cmd, 1, 0,  8,  uint8_t,  cfg->num_tx_queues);\
 	MC_CMD_OP(cmd, 1, 8,  8,  uint8_t,  cfg->num_rx_queues);\
+	MC_CMD_OP(cmd, 2, 0,  32, uint32_t, cfg->options);\
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -91,28 +90,6 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  1,  int,	    en)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPSECI_CMD_SET_IRQ(cmd, irq_index, irq_cfg) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  8,  uint8_t,  irq_index);\
-	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, irq_cfg->val);\
-	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr);\
-	MC_CMD_OP(cmd, 2, 0,  32, int,	    irq_cfg->irq_num); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSECI_CMD_GET_IRQ(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPSECI_RSP_GET_IRQ(cmd, type, irq_cfg) \
-do { \
-	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_cfg->val); \
-	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr);\
-	MC_RSP_OP(cmd, 2, 0,  32, int,	    irq_cfg->irq_num); \
-	MC_RSP_OP(cmd, 2, 32, 32, int,	    type); \
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
 #define DPSECI_CMD_SET_IRQ_ENABLE(cmd, irq_index, enable_state) \
 do { \
 	MC_CMD_OP(cmd, 0, 0,  8,  uint8_t,  enable_state); \
@@ -161,13 +138,11 @@ do { \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPSECI_RSP_GET_ATTR(cmd, attr) \
+#define DPSECI_RSP_GET_ATTRIBUTES(cmd, attr) \
 do { \
-	MC_RSP_OP(cmd, 0, 0,  32, int,	    attr->id); \
-	MC_RSP_OP(cmd, 1, 0,  8,  uint8_t,  attr->num_tx_queues); \
-	MC_RSP_OP(cmd, 1, 8,  8,  uint8_t,  attr->num_rx_queues); \
-	MC_RSP_OP(cmd, 5, 0,  16, uint16_t, attr->version.major);\
-	MC_RSP_OP(cmd, 5, 16, 16, uint16_t, attr->version.minor);\
+	MC_RSP_OP(cmd, 0, 0, 32, int,     (attr)->id); \
+	MC_RSP_OP(cmd, 1, 0,  8, uint8_t, (attr)->num_tx_queues); \
+	MC_RSP_OP(cmd, 1, 8,  8, uint8_t, (attr)->num_rx_queues); \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -179,7 +154,7 @@ do { \
 	MC_CMD_OP(cmd, 0, 48, 4,  enum dpseci_dest, cfg->dest_cfg.dest_type); \
 	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, cfg->user_ctx); \
 	MC_CMD_OP(cmd, 2, 0,  32, uint32_t, cfg->options);\
-	MC_CMD_OP(cmd, 2, 32, 32, int,		cfg->order_preservation_en);\
+	MC_CMD_OP(cmd, 2, 32, 1,  int,		cfg->order_preservation_en);\
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -194,18 +169,18 @@ do { \
 	MC_RSP_OP(cmd, 0, 48, 4,  enum dpseci_dest, attr->dest_cfg.dest_type);\
 	MC_RSP_OP(cmd, 1, 0,  8,  uint64_t,  attr->user_ctx);\
 	MC_RSP_OP(cmd, 2, 0,  32, uint32_t,  attr->fqid);\
-	MC_RSP_OP(cmd, 2, 32, 32, int,		 attr->order_preservation_en);\
+	MC_RSP_OP(cmd, 2, 32, 1,  int,		 attr->order_preservation_en);\
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPSECI_CMD_GET_TX_QUEUE(cmd, priority) \
-	MC_CMD_OP(cmd, 0, 40, 8,  uint8_t,  priority)
+#define DPSECI_CMD_GET_TX_QUEUE(cmd, queue) \
+	MC_CMD_OP(cmd, 0, 40, 8,  uint8_t,  queue)
 
 /*                cmd, param, offset, width, type, arg_name */
 #define DPSECI_RSP_GET_TX_QUEUE(cmd, attr) \
 do { \
 	MC_RSP_OP(cmd, 0, 32, 32, uint32_t,  attr->fqid);\
-	MC_RSP_OP(cmd, 1, 0,  32, uint32_t,  attr->priority);\
+	MC_RSP_OP(cmd, 1, 0,  8,  uint8_t,   attr->priority);\
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -242,4 +217,49 @@ do { \
 	MC_RSP_OP(cmd, 6,  0, 64, uint64_t,  counters->ib_valid_bytes);\
 } while (0)
 
+/*                cmd, param, offset, width, type,      arg_name */
+#define DPSECI_RSP_GET_API_VERSION(cmd, major, minor) \
+do { \
+	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, major);\
+	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, minor);\
+} while (0)
+
+/*            cmd, param, offset, width, type, arg_name */
+#define DPSECI_CMD_SET_OPR(cmd, index, options, cfg) \
+do { \
+	MC_CMD_OP(cmd, 0, 16, 8, uint8_t, index); \
+	MC_CMD_OP(cmd, 0, 24, 8, uint8_t, options); \
+	MC_CMD_OP(cmd, 1, 24, 8, uint8_t, (cfg)->oloe);\
+	MC_CMD_OP(cmd, 1, 32, 8, uint8_t, (cfg)->oeane); \
+	MC_CMD_OP(cmd, 1, 40, 8, uint8_t, (cfg)->olws); \
+	MC_CMD_OP(cmd, 1, 48, 8, uint8_t, (cfg)->oa); \
+	MC_CMD_OP(cmd, 1, 56, 8, uint8_t, (cfg)->oprrws); \
+} while (0)
+
+/*                cmd, param, offset, width, type, arg_name */
+#define DPSECI_CMD_GET_OPR(cmd, index) \
+	MC_CMD_OP(cmd, 0, 16, 8, uint8_t, index)
+
+/*            cmd, param, offset, width, type, arg_name */
+#define DPSECI_RSP_GET_OPR(cmd, cfg, qry) \
+do { \
+	MC_RSP_OP(cmd, 1,  0,  1, char, (qry)->rip); \
+	MC_RSP_OP(cmd, 1,  1,  1, char, (qry)->enable); \
+	MC_RSP_OP(cmd, 1, 24, 8, uint8_t, (cfg)->oloe);\
+	MC_RSP_OP(cmd, 1, 32, 8, uint8_t, (cfg)->oeane); \
+	MC_RSP_OP(cmd, 1, 40, 8, uint8_t, (cfg)->olws); \
+	MC_RSP_OP(cmd, 1, 48, 8, uint8_t, (cfg)->oa); \
+	MC_RSP_OP(cmd, 1, 56, 8, uint8_t, (cfg)->oprrws); \
+	MC_RSP_OP(cmd, 2, 0, 16, uint16_t, (qry)->nesn); \
+	MC_RSP_OP(cmd, 2, 32, 16, uint16_t, (qry)->ndsn); \
+	MC_RSP_OP(cmd, 3, 0, 16, uint16_t, (qry)->ea_tseq); \
+	MC_RSP_OP(cmd, 3, 16, 1, char, (qry)->tseq_nlis); \
+	MC_RSP_OP(cmd, 3, 32, 16, uint16_t, (qry)->ea_hseq); \
+	MC_RSP_OP(cmd, 3, 48, 1, char, (qry)->hseq_nlis); \
+	MC_RSP_OP(cmd, 4, 0, 16, uint16_t, (qry)->ea_hptr); \
+	MC_RSP_OP(cmd, 4, 32, 16, uint16_t, (qry)->ea_tptr); \
+	MC_RSP_OP(cmd, 5, 0, 16, uint16_t, (qry)->opr_vid); \
+	MC_RSP_OP(cmd, 5, 32, 16, uint16_t, (qry)->opr_id); \
+} while (0)
+
 #endif /* _FSL_DPSECI_CMD_H */
diff --git a/drivers/staging/fsl-mc/include/mc-cmd.h b/drivers/staging/fsl-mc/include/mc-cmd.h
index 99f8f98..599ba17 100644
--- a/drivers/staging/fsl-mc/include/mc-cmd.h
+++ b/drivers/staging/fsl-mc/include/mc-cmd.h
@@ -131,6 +131,14 @@ enum mc_cmd_status {
 #define MC_RSP_OP(_cmd, _param, _offset, _width, _type, _arg) \
 		(_arg = (_type)mc_dec(_cmd.params[_param], (_offset), (_width)))
 
+/* cmd, param, offset, width, type, arg_name */
+#define CMD_CREATE_RSP_GET_OBJ_ID_PARAM0(cmd, object_id) \
+	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, object_id)
+
+/* cmd, param, offset, width, type, arg_name */
+#define CMD_DESTROY_SET_OBJ_ID_PARAM0(cmd, object_id) \
+	MC_CMD_OP(cmd, 0, 0,  32,  uint32_t,  object_id)
+
 #define MC_CMD_HDR_CMDID_MASK		0xFFF0
 #define MC_CMD_HDR_CMDID_SHIFT		4
 #define MC_CMD_HDR_TOKEN_MASK		0xFFC0
-- 
1.7.5.4

