From 0fffac56ba284a7ece50c089ebf623b8bf7de015 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Wed, 20 Sep 2017 17:12:53 +0800
Subject: [PATCH 11/73] Revert "crypto: caam - lower QI congestion prints
 verbosity level"

This reverts commit 0827fb30c92ae64301be000713e50ec075373bdf.

This patch is from nxp-sdk-2.0, it is based on kernel4.1.
So far, there is related code that includes this patch in mainline.
So, get patch from upstream.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/caam/qi.c |   34 +++++-----------------------------
 1 files changed, 5 insertions(+), 29 deletions(-)

diff --git a/drivers/crypto/caam/qi.c b/drivers/crypto/caam/qi.c
index 854a934..aa53af3 100644
--- a/drivers/crypto/caam/qi.c
+++ b/drivers/crypto/caam/qi.c
@@ -72,14 +72,6 @@ static struct caam_qi_priv qipriv ____cacheline_aligned;
  */
 static bool caam_congested __read_mostly;
 
-#ifdef CONFIG_DEBUG_FS
-/*
- * This is a counter for the number of times the congestion group (where all
- * the response queueus are) was congested. Incremented each time the congestion
- * callback is called with congested == true,.
- */
-static u64 times_congested;
-#endif
 /*
  * CPU from where the module initialised. This is required because
  * QMAN driver requires CGRs to be removed from same CPU from where
@@ -587,15 +579,10 @@ static void rsp_cgr_cb(struct qman_portal *qm, struct qman_cgr *cgr,
 {
 	caam_congested = congested;
 
-	if (congested) {
-#ifdef CONFIG_DEBUG_FS
-		times_congested++;
-#endif
-		pr_debug_ratelimited("CAAM rsp path congested\n");
-
-	} else {
-		pr_debug_ratelimited("CAAM rsp path congestion state exit\n");
-	}
+	if (congested)
+		pr_warn_ratelimited("CAAM rsp path congested\n");
+	else
+		pr_info_ratelimited("CAAM rsp path congestion state exit\n");
 }
 
 static int caam_qi_napi_schedule(struct qman_portal *p, struct caam_napi *np)
@@ -814,11 +801,6 @@ int caam_qi_init(struct platform_device *caam_pdev, struct device_node *np)
 	/* Response path cannot be congested */
 	caam_congested = false;
 
-#ifdef CONFIG_DEBUG_FS
-	/* The response path was congested 0 times */
-	times_congested = 0;
-#endif
-
 	/* kmem_cache wasn't yet allocated */
 	qi_cache = NULL;
 
@@ -870,13 +852,7 @@ int caam_qi_init(struct platform_device *caam_pdev, struct device_node *np)
 
 	/* Done with the CGRs; restore the cpus allowed mask */
 	set_cpus_allowed_ptr(current, &old_cpumask);
-#ifdef CONFIG_DEBUG_FS
-	ctrlpriv->qi_congested =
-			debugfs_create_file("qi_congested",
-					    S_IRUSR | S_IRGRP | S_IROTH,
-					    ctrlpriv->ctl, &times_congested,
-					    &caam_fops_u64_ro);
-#endif
+
 	dev_info(qidev, "Linux CAAM Queue I/F driver initialised\n");
 
 	return 0;
-- 
1.7.5.4

