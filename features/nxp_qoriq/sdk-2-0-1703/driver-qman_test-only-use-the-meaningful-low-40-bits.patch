From 2d43dc95ddb326837ab6cdfecd8f849a6d9fb52e Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Wed, 20 Sep 2017 10:05:49 +0800
Subject: [PATCH] driver: qman_test: only use the meaningful low 40 bits of
 handler->addr

during running qman test, there is a panic reported as below:
Kernel panic - not syncing: bad frame address
CPU: 1 PID: 0 Comm: swapper/1 Tainted: G         C
4.8.24-WR9.0.0.11_standard #4
Hardware name: LS1046A RDB Board (DT)
Call trace:
[<ffff000008089e90>] dump_backtrace+0x0/0x1d0
[<ffff00000808a084>] show_stack+0x24/0x30
[<ffff000008469b78>] dump_stack+0x90/0xb0
[<ffff0000081920e8>] panic+0x114/0x250
[<ffff0000009b049c>] normal_dqrr+0xac/0xd0 [qman_tester]
[<ffff0000087fc400>] portal_isr+0x288/0x2c0
[<ffff0000080f4bf4>] __handle_irq_event_percpu+0x6c/0x280
[<ffff0000080f4e30>] handle_irq_event_percpu+0x28/0x60
[<ffff0000080f4eb8>] handle_irq_event+0x50/0x80
[<ffff0000080f8d04>] handle_fasteoi_irq+0xdc/0x1e0
[<ffff0000080f3f84>] generic_handle_irq+0x34/0x50
[<ffff0000080f4354>] __handle_domain_irq+0x8c/0x100
[<ffff00000808158c>] gic_handle_irq+0x6c/0xc8
Exception stack(0xffff8009732b7d70 to 0xffff8009732b7ea0)
7d60:                                   0000800976fd1000
ffff000008dc6a60
7d80: 0000000000000001 0000000000679df0 0000000000000015
00ffffffffffffff
7da0: 000000032171230f 0000000000000001 00000034b5103510
ffff000008082000
7dc0: 0000000000001000 0000000000000000 0000000034d5d91d
000000000000004c
7de0: 0000000000000033 0000000000000019 0000000000000001
0000000000000007
7e00: 000000000000000e 0000000b0ee64420 0000000000000001
ffff800971351e00
7e20: ffff000008eb7698 ffff000008e7dfd0 0000000000000000
0000000b0eced0d8
7e40: 0000000000000001 ffff8009732b4000 ffff000008dc5a68
ffff8009732b7ea0
7e60: ffff000008776af8 ffff8009732b7ea0 ffff000008776b00
0000000060000145
7e80: ffff8009732b7ea0 ffff000008776af8 ffffffffffffffff
0000000000000001
[<ffff000008082fb4>] el1_irq+0xb4/0x128
[<ffff000008776b00>] cpuidle_enter_state+0x150/0x360
[<ffff000008776d84>] cpuidle_enter+0x34/0x48
[<ffff0000080e58c0>] call_cpuidle+0x40/0x70
[<ffff0000080e5d60>] cpu_startup_entry+0x2f0/0x350
[<ffff00000808f4ac>] secondary_start_kernel+0x15c/0x1a0
[<0000000080083918>] 0x80083918
SMP: stopping secondary CPUs
Kernel Offset: disabled
Memory Limit: none
---[ end Kernel panic - not syncing: bad frame address

But this is not real kernel panic.
Because the filed addr of struct qm_fd is limited to 40 bits, the data
returned qm_fd_addr_get64() is a 40 bits. But the field addr of struct
hp_handler is a 64 bits data, so there is no comparability between
them.

Therefore, we need to let handler->addr and with 0xffffffffff
firstly, and then compare with (qm_fd_addr_get64(fd).

This modification also refer to the code from
https://github.com/qoriq-open-source/linux.git, the open source code
from NXP.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl_qbman/qman_test_hotpotato.c |    5 ++++-
 1 files changed, 4 insertions(+), 1 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_test_hotpotato.c b/drivers/staging/fsl_qbman/qman_test_hotpotato.c
index 85495da..47a10b3 100644
--- a/drivers/staging/fsl_qbman/qman_test_hotpotato.c
+++ b/drivers/staging/fsl_qbman/qman_test_hotpotato.c
@@ -229,8 +229,11 @@ static inline void process_frame_data(struct hp_handler *handler,
 	u32 *p = handler->frame_ptr;
 	u32 lfsr = HP_FIRST_WORD;
 	int loop;
-	if (qm_fd_addr_get64(fd) != handler->addr)
+	if (qm_fd_addr_get64(fd) != (handler->addr & 0xffffffffff)) {
+		pr_err("Got 0x%llx expected 0x%llx\n",
+		       qm_fd_addr_get64(fd), handler->addr);
 		panic("bad frame address");
+	}
 	for (loop = 0; loop < HP_NUM_WORDS; loop++, p++) {
 		*p ^= handler->rx_mixer;
 		if (*p != lfsr)
-- 
1.7.5.4

