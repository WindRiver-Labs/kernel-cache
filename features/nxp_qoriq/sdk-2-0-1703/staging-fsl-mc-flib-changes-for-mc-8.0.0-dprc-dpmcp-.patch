From 639a63c4a4692c1d88909b829895119ed1b62e22 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Mon, 24 Jul 2017 15:51:48 +0800
Subject: [PATCH 018/508] staging: fsl-mc: flib changes for mc 8.0.0
 (dprc,dpmcp,dpmng)

Signed-off-by: Itai Katz <itai.katz@freescale.com>
[Stuart: split out vfio update into separate patch]
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpmcp-cmd.h   |    2 +-
 drivers/staging/fsl-mc/bus/dprc-driver.c |   26 ++++++++++++++++++++------
 drivers/staging/fsl-mc/bus/mc-sys.c      |   26 ++++++++++++++++++++------
 3 files changed, 41 insertions(+), 13 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpmcp-cmd.h b/drivers/staging/fsl-mc/bus/dpmcp-cmd.h
index d098a6d..ec1b694 100644
--- a/drivers/staging/fsl-mc/bus/dpmcp-cmd.h
+++ b/drivers/staging/fsl-mc/bus/dpmcp-cmd.h
@@ -34,7 +34,7 @@
 
 /* Minimal supported DPMCP Version */
 #define DPMCP_MIN_VER_MAJOR				3
-#define DPMCP_MIN_VER_MINOR				0
+#define DPMCP_MIN_VER_MINOR				1
 
 /* Command IDs */
 #define DPMCP_CMDID_CLOSE				0x800
diff --git a/drivers/staging/fsl-mc/bus/dprc-driver.c b/drivers/staging/fsl-mc/bus/dprc-driver.c
index 47a1761..14f4160 100644
--- a/drivers/staging/fsl-mc/bus/dprc-driver.c
+++ b/drivers/staging/fsl-mc/bus/dprc-driver.c
@@ -646,7 +646,10 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 	struct fsl_mc_bus *mc_bus = to_fsl_mc_bus(dprc_dev);
 
 	dpmcp_cfg.portal_id = mc_bus->dprc_attr.portal_id;
-	error = dpmcp_create(dprc_dev->mc_io, &dpmcp_cfg, &dpmcp_handle);
+	error = dpmcp_create(dprc_dev->mc_io,
+				 MC_CMD_FLAG_INTR_DIS,
+				 &dpmcp_cfg,
+				 &dpmcp_handle);
 	if (error < 0) {
 		dev_err(&dprc_dev->dev, "dpmcp_create() failed: %d\n",
 			error);
@@ -657,7 +660,9 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 	 * Set the state of the newly created DPMCP object to be "plugged":
 	 */
 
-	error = dpmcp_get_attributes(dprc_dev->mc_io, dpmcp_handle,
+	error = dpmcp_get_attributes(dprc_dev->mc_io,
+					 MC_CMD_FLAG_INTR_DIS,
+					 dpmcp_handle,
 				     &dpmcp_attr);
 	if (error < 0) {
 		dev_err(&dprc_dev->dev, "dpmcp_get_attributes() failed: %d\n",
@@ -677,6 +682,7 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 	res_req.id_base_align = dpmcp_attr.id;
 
 	error = dprc_assign(dprc_dev->mc_io,
+				MC_CMD_FLAG_INTR_DIS,
 			    dprc_dev->mc_handle,
 			    dprc_dev->obj_desc.id,
 			    &res_req);
@@ -686,11 +692,15 @@ static int dprc_create_dpmcp(struct fsl_mc_device *dprc_dev)
 		goto error_destroy_dpmcp;
 	}
 
-	(void)dpmcp_close(dprc_dev->mc_io, dpmcp_handle);
+	(void)dpmcp_close(dprc_dev->mc_io,
+			  MC_CMD_FLAG_INTR_DIS,
+			  dpmcp_handle);
 	return 0;
 
 error_destroy_dpmcp:
-	(void)dpmcp_destroy(dprc_dev->mc_io, dpmcp_handle);
+	(void)dpmcp_destroy(dprc_dev->mc_io,
+				MC_CMD_FLAG_INTR_DIS,
+				dpmcp_handle);
 	return error;
 }
 
@@ -706,7 +716,9 @@ static void dprc_destroy_dpmcp(struct fsl_mc_device *dprc_dev)
 	if (WARN_ON(!dprc_dev->mc_io || dprc_dev->mc_io->dpmcp_dev))
 		return;
 
-	error = dpmcp_open(dprc_dev->mc_io, mc_bus->dprc_attr.portal_id,
+	error = dpmcp_open(dprc_dev->mc_io,
+			   MC_CMD_FLAG_INTR_DIS,
+			   mc_bus->dprc_attr.portal_id,
 			   &dpmcp_handle);
 	if (error < 0) {
 		dev_err(&dprc_dev->dev, "dpmcp_open() failed: %d\n",
@@ -714,7 +726,9 @@ static void dprc_destroy_dpmcp(struct fsl_mc_device *dprc_dev)
 		return;
 	}
 
-	error = dpmcp_destroy(dprc_dev->mc_io, dpmcp_handle);
+	error = dpmcp_destroy(dprc_dev->mc_io,
+			      MC_CMD_FLAG_INTR_DIS,
+			      dpmcp_handle);
 	if (error < 0) {
 		dev_err(&dprc_dev->dev, "dpmcp_destroy() failed: %d\n",
 			error);
diff --git a/drivers/staging/fsl-mc/bus/mc-sys.c b/drivers/staging/fsl-mc/bus/mc-sys.c
index f15b9fe..4e0cbb0 100644
--- a/drivers/staging/fsl-mc/bus/mc-sys.c
+++ b/drivers/staging/fsl-mc/bus/mc-sys.c
@@ -109,6 +109,7 @@ static int disable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 	 * Disable generation of the DPMCP interrupt:
 	 */
 	error = dpmcp_set_irq_enable(dpmcp_dev->mc_io,
+					 MC_CMD_FLAG_INTR_DIS,
 				     dpmcp_dev->mc_handle,
 				     DPMCP_IRQ_INDEX, 0);
 	if (error < 0) {
@@ -121,7 +122,9 @@ static int disable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 	/*
 	 * Disable all DPMCP interrupt causes:
 	 */
-	error = dpmcp_set_irq_mask(dpmcp_dev->mc_io, dpmcp_dev->mc_handle,
+	error = dpmcp_set_irq_mask(dpmcp_dev->mc_io,
+				   MC_CMD_FLAG_INTR_DIS,
+				   dpmcp_dev->mc_handle,
 				   DPMCP_IRQ_INDEX, 0x0);
 	if (error < 0) {
 		dev_err(&dpmcp_dev->dev,
@@ -133,7 +136,9 @@ static int disable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 	/*
 	 * Clear any leftover interrupts:
 	 */
-	error = dpmcp_clear_irq_status(dpmcp_dev->mc_io, dpmcp_dev->mc_handle,
+	error = dpmcp_clear_irq_status(dpmcp_dev->mc_io,
+					   MC_CMD_FLAG_INTR_DIS,
+					   dpmcp_dev->mc_handle,
 				       DPMCP_IRQ_INDEX, ~0x0U);
 	if (error < 0) {
 		dev_err(&dpmcp_dev->dev,
@@ -156,6 +161,7 @@ static int register_dpmcp_irq_handler(struct fsl_mc_device *dpmcp_dev)
 {
 	int error;
 	struct fsl_mc_device_irq *irq = dpmcp_dev->irqs[DPMCP_IRQ_INDEX];
+	struct dpmcp_irq_cfg irq_cfg;
 
 	error = devm_request_irq(&dpmcp_dev->dev,
 				 irq->irq_number,
@@ -170,12 +176,16 @@ static int register_dpmcp_irq_handler(struct fsl_mc_device *dpmcp_dev)
 		return error;
 	}
 
+	irq_cfg.paddr = irq->msi_paddr;
+	irq_cfg.val = irq->msi_value;
+	irq_cfg.user_irq_id = irq->irq_number;
+
 	error = dpmcp_set_irq(dpmcp_dev->mc_io,
+				  MC_CMD_FLAG_INTR_DIS,
 			      dpmcp_dev->mc_handle,
 			      DPMCP_IRQ_INDEX,
-			      irq->msi_paddr,
-			      irq->msi_value,
-			      irq->irq_number);
+				  &irq_cfg);
+
 	if (error < 0) {
 		dev_err(&dpmcp_dev->dev,
 			"dpmcp_set_irq() failed: %d\n", error);
@@ -197,6 +207,7 @@ static int enable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 	 * Enable MC command completion event to trigger DPMCP interrupt:
 	 */
 	error = dpmcp_set_irq_mask(dpmcp_dev->mc_io,
+				   MC_CMD_FLAG_INTR_DIS,
 				   dpmcp_dev->mc_handle,
 				   DPMCP_IRQ_INDEX,
 				   DPMCP_IRQ_EVENT_CMD_DONE);
@@ -211,6 +222,7 @@ static int enable_dpmcp_irq(struct fsl_mc_device *dpmcp_dev)
 	 * Enable generation of the interrupt:
 	 */
 	error = dpmcp_set_irq_enable(dpmcp_dev->mc_io,
+				     MC_CMD_FLAG_INTR_DIS,
 				     dpmcp_dev->mc_handle,
 				     DPMCP_IRQ_INDEX, 1);
 	if (error < 0) {
@@ -733,7 +745,9 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 	/*
 	 * Wait for response from the MC hardware:
 	 */
-	if (!(mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL))
+	if (mc_io->mc_command_done_irq_armed && !(MC_CMD_HDR_READ_FLAGS(cmd->header) & MC_CMD_FLAG_INTR_DIS))
+		error = mc_completion_wait(mc_io, cmd, &status);
+	else if (!(mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL))
 		error = mc_polling_wait_preemptible(mc_io, cmd, &status);
 	else
 		error = mc_polling_wait_atomic(mc_io, cmd, &status);
-- 
1.7.5.4

