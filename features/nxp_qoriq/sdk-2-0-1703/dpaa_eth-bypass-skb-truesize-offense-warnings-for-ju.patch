From 235bb7821c2d814085a7852a60030f3ae5e301a1 Mon Sep 17 00:00:00 2001
From: Camelia Groza <camelia.groza@freescale.com>
Date: Fri, 13 May 2016 10:46:51 +0300
Subject: [PATCH 122/508] dpaa_eth: bypass skb truesize offense warnings for
 jumbo

When using jumbo frames, we set the skb truesize to a smaller size than
the actual buffer. The stack warns against this but we bypass the
message.

Signed-off-by: Camelia Groza <camelia.groza@freescale.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/freescale/sdk_dpaa/Kconfig    |    3 ++-
 .../net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c  |   13 +++++++++++++
 net/core/skbuff.c                                  |    6 ++++++
 3 files changed, 21 insertions(+), 1 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/Kconfig b/drivers/net/ethernet/freescale/sdk_dpaa/Kconfig
index 97ab590..ebd1cc23 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/Kconfig
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/Kconfig
@@ -72,7 +72,8 @@ config FSL_DPAA_ETH_JUMBO_FRAME
 	  is set to 9600 bytes.
 	  Using this option in combination with small frames increases
 	  significantly the driver's memory footprint and may even deplete
-	  the system memory.
+	  the system memory. Also, the skb truesize is altered and messages
+	  from the stack that warn against this are bypassed.
 	  This option is not available on LS1043.
 
 config FSL_DPAA_TS
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
index 61c1086..abda8bc 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
@@ -391,6 +391,19 @@ static struct sk_buff *__hot contig_fd_to_skb(const struct dpa_priv_s *priv,
 	 */
 	DPA_READ_SKB_PTR(skb, skbh, vaddr, -1);
 
+#ifdef CONFIG_FSL_DPAA_ETH_JUMBO_FRAME
+	/* When using jumbo Rx buffers, we risk having frames dropped due to
+	 * the socket backlog reaching its maximum allowed size.
+	 * Use the frame length for the skb truesize instead of the buffer
+	 * size, as this is the size of the data that actually gets copied to
+	 * userspace.
+	 * The stack may increase the payload. In this case, it will want to
+	 * warn us that the frame length is larger than the truesize. We
+	 * bypass the warning.
+	 */
+	skb->truesize = SKB_TRUESIZE(dpa_fd_length(fd));
+#endif
+
 	DPA_BUG_ON(fd_off != priv->rx_headroom);
 	skb_reserve(skb, fd_off);
 	skb_put(skb, dpa_fd_length(fd));
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 6fa4e9a..d9dec0b 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -4329,7 +4329,13 @@ bool skb_try_coalesce(struct sk_buff *to, struct sk_buff *from,
 		delta = from->truesize - SKB_TRUESIZE(skb_end_offset(from));
 	}
 
+#ifndef CONFIG_FSL_DPAA_ETH_JUMBO_FRAME
+	/* When using jumbo frames, we set the skb truesize to a smaller value
+	 * than the actual buffer size. The stack wants to signal this offense
+	 * but we bypass it. See contig_fd_to_skb for details.
+	 */
 	WARN_ON_ONCE(delta < len);
+#endif
 
 	memcpy(skb_shinfo(to)->frags + skb_shinfo(to)->nr_frags,
 	       skb_shinfo(from)->frags,
-- 
1.7.5.4

