From e7b6116d3e667eace2812a160df22b8b2c136d7e Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Fri, 25 Aug 2017 17:27:40 +0800
Subject: [PATCH 507/508] arch : arm64: kexec: implement crash_shutdown_xxx
 function to release bman/qman resource during run
 kdump

On arm64 platform, implement below functions:
int crash_shutdown_register(crash_shutdown_t handler)
int crash_shutdown_unregister(crash_shutdown_t handler)
static void crash_shutdown_execute(void)
crash_shutdown_register() is used to register a callback function that
will be executed when machine_crash_shutdown() function is invoked.
In this way, bman/qman resource is released and make sure that the
second kernel boots up normally.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm64/include/asm/kexec.h    |   17 ++++++++
 arch/arm64/kernel/machine_kexec.c |   74 +++++++++++++++++++++++++++++++++++++
 2 files changed, 91 insertions(+), 0 deletions(-)

diff --git a/arch/arm64/include/asm/kexec.h b/arch/arm64/include/asm/kexec.h
index b5168e8..c6003c7 100644
--- a/arch/arm64/include/asm/kexec.h
+++ b/arch/arm64/include/asm/kexec.h
@@ -30,6 +30,23 @@
 
 #ifndef __ASSEMBLY__
 
+typedef void (*crash_shutdown_t)(void);
+
+#ifdef CONFIG_KEXEC
+extern int crash_shutdown_register(crash_shutdown_t handler);
+extern int crash_shutdown_unregister(crash_shutdown_t handler);
+#else /* !CONFIG_KEXEC */
+static inline int crash_shutdown_register(crash_shutdown_t handler)
+{
+	return 0;
+}
+
+static inline int crash_shutdown_unregister(crash_shutdown_t handler)
+{
+	return 0;
+}
+#endif
+
 /**
  * crash_setup_regs() - save registers for the panic kernel
  *
diff --git a/arch/arm64/kernel/machine_kexec.c b/arch/arm64/kernel/machine_kexec.c
index 994fe0b..995ec36 100644
--- a/arch/arm64/kernel/machine_kexec.c
+++ b/arch/arm64/kernel/machine_kexec.c
@@ -29,6 +29,78 @@ extern const unsigned long arm64_relocate_new_kernel_size;
 static bool in_crash_kexec;
 static unsigned long kimage_start;
 
+#define CRASH_HANDLER_MAX 3
+/* List of shutdown handles */
+static crash_shutdown_t crash_shutdown_handles[CRASH_HANDLER_MAX];
+static DEFINE_SPINLOCK(crash_handlers_lock);
+
+/*
+ * Register a function to be called on shutdown.  Only use this if you
+ * can't reset your device in the second kernel.
+ */
+int crash_shutdown_register(crash_shutdown_t handler)
+{
+	unsigned int i, rc;
+
+	spin_lock(&crash_handlers_lock);
+	for (i = 0 ; i < CRASH_HANDLER_MAX; i++)
+		if (!crash_shutdown_handles[i]) {
+			/* Insert handle at first empty entry */
+			crash_shutdown_handles[i] = handler;
+			rc = 0;
+			break;
+		}
+
+	if (i == CRASH_HANDLER_MAX) {
+		printk(KERN_ERR "Crash shutdown handles full, "
+		       "not registered.\n");
+		rc = 1;
+	}
+
+	spin_unlock(&crash_handlers_lock);
+	return rc;
+}
+EXPORT_SYMBOL(crash_shutdown_register);
+
+int crash_shutdown_unregister(crash_shutdown_t handler)
+{
+	unsigned int i, rc;
+
+	spin_lock(&crash_handlers_lock);
+	for (i = 0 ; i < CRASH_HANDLER_MAX; i++)
+		if (crash_shutdown_handles[i] == handler)
+			break;
+
+	if (i == CRASH_HANDLER_MAX) {
+		printk(KERN_ERR "Crash shutdown handle not found\n");
+		rc = 1;
+	} else {
+		/* Shift handles down */
+		for (; i < (CRASH_HANDLER_MAX - 1); i++)
+			crash_shutdown_handles[i] =
+				crash_shutdown_handles[i+1];
+		/*
+		 * Reset last entry to NULL now that it has been shifted down,
+		 * this will allow new handles to be added here.
+		 */
+		crash_shutdown_handles[i] = NULL;
+		rc = 0;
+	}
+
+	spin_unlock(&crash_handlers_lock);
+	return rc;
+}
+EXPORT_SYMBOL(crash_shutdown_unregister);
+
+static void crash_shutdown_execute(void)
+{
+	int i;
+
+	for (i = 0; i < CRASH_HANDLER_MAX && crash_shutdown_handles[i]; i++) {
+			crash_shutdown_handles[i]();
+	}
+}
+
 /**
  * kexec_image_info - For debugging output.
  */
@@ -259,6 +331,8 @@ void machine_crash_shutdown(struct pt_regs *regs)
 	crash_save_cpu(regs, smp_processor_id());
 	machine_kexec_mask_interrupts();
 
+	crash_shutdown_execute();
+
 	pr_info("Starting crashdump kernel...\n");
 }
 
-- 
1.7.5.4

