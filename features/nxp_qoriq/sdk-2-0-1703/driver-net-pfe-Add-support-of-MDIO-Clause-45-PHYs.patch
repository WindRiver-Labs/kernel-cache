From b4c875153990affd24640b442caf24dad98e7379 Mon Sep 17 00:00:00 2001
From: Prabhakar Kushwaha <prabhakar.kushwaha@nxp.com>
Date: Wed, 8 Feb 2017 10:01:02 +0530
Subject: [PATCH 456/508] driver: net: pfe: Add support of MDIO Clause 45 PHYs

Current PFE driver only supports MDIO Clause 22 of 802.3
specification.

Clause 45 was added to the 802.3 specification for extended
the frame format to provide access to many more devices and
registers. Clause 45 PHYs requires different way of internal
register access

This patch add support of Clasue 45 and also update internal
PCS registers of SoC to support SGMII 2.5G.

Signed-off-by: Prabhakar Kushwaha <prabhakar.kushwaha@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/phy/mdio_bus.c                         |    4 +
 .../staging/fsl_ppfe/include/pfe/cbus/emac_mtip.h  |    2 +
 drivers/staging/fsl_ppfe/pfe_eth.c                 |   92 ++++++++++++++++----
 include/linux/phy.h                                |    2 +
 4 files changed, 82 insertions(+), 18 deletions(-)

diff --git a/drivers/net/phy/mdio_bus.c b/drivers/net/phy/mdio_bus.c
index 09deef4..5e71f56 100644
--- a/drivers/net/phy/mdio_bus.c
+++ b/drivers/net/phy/mdio_bus.c
@@ -419,6 +419,10 @@ struct phy_device *mdiobus_scan(struct mii_bus *bus, int addr)
 	int err;
 
 	phydev = get_phy_device(bus, addr, false);
+	/* FIXME with correct way of accessing Clasue 45 */
+	if (IS_ERR(phydev) || phydev == NULL)
+		phydev = get_phy_device(bus, addr, true);
+
 	if (IS_ERR(phydev))
 		return phydev;
 
diff --git a/drivers/staging/fsl_ppfe/include/pfe/cbus/emac_mtip.h b/drivers/staging/fsl_ppfe/include/pfe/cbus/emac_mtip.h
index f95146f..a924b13 100644
--- a/drivers/staging/fsl_ppfe/include/pfe/cbus/emac_mtip.h
+++ b/drivers/staging/fsl_ppfe/include/pfe/cbus/emac_mtip.h
@@ -188,7 +188,9 @@ typedef enum {SPEED_10M, SPEED_100M, SPEED_1000M, SPEED_1000M_PCS} MAC_SPEED;
 /* MII-related definitios */
 #define EMAC_MII_DATA_ST         0x40000000      /* Start of frame delimiter */
 #define EMAC_MII_DATA_OP_RD      0x20000000      /* Perform a read operation */
+#define EMAC_MII_DATA_OP_CL45_RD 0x30000000      /* Perform a read operation */
 #define EMAC_MII_DATA_OP_WR      0x10000000      /* Perform a write operation */
+#define EMAC_MII_DATA_OP_CL45_WR 0x10000000      /* Perform a write operation */
 #define EMAC_MII_DATA_PA_MSK     0x0f800000      /* PHY Address field mask */
 #define EMAC_MII_DATA_RA_MSK     0x007c0000      /* PHY Register field mask */
 #define EMAC_MII_DATA_TA         0x00020000      /* Turnaround */
diff --git a/drivers/staging/fsl_ppfe/pfe_eth.c b/drivers/staging/fsl_ppfe/pfe_eth.c
index 6bb3499..d191755 100644
--- a/drivers/staging/fsl_ppfe/pfe_eth.c
+++ b/drivers/staging/fsl_ppfe/pfe_eth.c
@@ -1089,6 +1089,25 @@ static int pfe_eth_mdio_mux(u8 muxval)
 
 }
 
+static int pfe_eth_mdio_write_addr(struct mii_bus *bus, int mii_id,
+				   int dev_addr, int regnum)
+{
+	struct pfe_eth_priv_s *priv = (struct pfe_eth_priv_s *)bus->priv;
+
+	__raw_writel(EMAC_MII_DATA_PA(mii_id) |
+		     EMAC_MII_DATA_RA(dev_addr) |
+		     EMAC_MII_DATA_TA | EMAC_MII_DATA(regnum),
+		     priv->PHY_baseaddr + EMAC_MII_DATA_REG);
+
+	if (pfe_eth_gemac_phy_timeout(priv, EMAC_MDIO_TIMEOUT)) {
+		netdev_err(priv->dev, "%s: phy MDIO address write timeout\n",
+				__func__);
+		return -1;
+	}
+
+	return 0;
+}
+
 static int pfe_eth_mdio_write(struct mii_bus *bus, int mii_id, int regnum, u16 value)
 {
 	struct pfe_eth_priv_s *priv = (struct pfe_eth_priv_s *)bus->priv;
@@ -1096,16 +1115,27 @@ static int pfe_eth_mdio_write(struct mii_bus *bus, int mii_id, int regnum, u16 v
 	/*FIXME Dirty hack to configure mux */
 	if(priv->mdio_muxval) {
 		if(mii_id == 0x1)
-			pfe_eth_mdio_mux(0x1);
-		else
 			pfe_eth_mdio_mux(0x2);
+		else
+			pfe_eth_mdio_mux(0x3);
 	}
 
-	/* start a write op */
-	__raw_writel(EMAC_MII_DATA_ST | EMAC_MII_DATA_OP_WR |
-			EMAC_MII_DATA_PA(mii_id) | EMAC_MII_DATA_RA(regnum) |
-			EMAC_MII_DATA_TA | EMAC_MII_DATA(value),
-			priv->PHY_baseaddr + EMAC_MII_DATA_REG);
+	if (regnum & MII_ADDR_C45) {
+		pfe_eth_mdio_write_addr(bus, mii_id, (regnum >> 16) & 0x1f,
+					regnum & 0xffff);
+		__raw_writel(EMAC_MII_DATA_OP_CL45_WR |
+			     EMAC_MII_DATA_PA(mii_id) |
+			     EMAC_MII_DATA_RA((regnum >> 16) & 0x1f) |
+			     EMAC_MII_DATA_TA | EMAC_MII_DATA(value),
+			     priv->PHY_baseaddr + EMAC_MII_DATA_REG);
+	} else {
+		/* start a write op */
+		__raw_writel(EMAC_MII_DATA_ST | EMAC_MII_DATA_OP_WR |
+			     EMAC_MII_DATA_PA(mii_id) |
+			     EMAC_MII_DATA_RA(regnum) |
+			     EMAC_MII_DATA_TA | EMAC_MII_DATA(value),
+			     priv->PHY_baseaddr + EMAC_MII_DATA_REG);
+	}
 
 	if (pfe_eth_gemac_phy_timeout(priv, EMAC_MDIO_TIMEOUT)){
 		netdev_err(priv->dev, "%s: phy MDIO write timeout\n", __func__);
@@ -1125,15 +1155,27 @@ static int pfe_eth_mdio_read(struct mii_bus *bus, int mii_id, int regnum)
 	/*FIXME Dirty hack to configure mux */
 	if(priv->mdio_muxval){
 		if(mii_id == 0x1)
-			pfe_eth_mdio_mux(0x1);
-		else
 			pfe_eth_mdio_mux(0x2);
+		else
+			pfe_eth_mdio_mux(0x3);
 	}
 
-	/* start a read op */
-	__raw_writel(EMAC_MII_DATA_ST | EMAC_MII_DATA_OP_RD |
-			EMAC_MII_DATA_PA(mii_id) | EMAC_MII_DATA_RA(regnum) |
-			EMAC_MII_DATA_TA, priv->PHY_baseaddr + EMAC_MII_DATA_REG);
+	if (regnum & MII_ADDR_C45) {
+		pfe_eth_mdio_write_addr(bus, mii_id, (regnum >> 16) & 0x1f,
+					regnum & 0xffff);
+		__raw_writel(EMAC_MII_DATA_OP_CL45_RD |
+			     EMAC_MII_DATA_PA(mii_id) |
+			     EMAC_MII_DATA_RA((regnum >> 16) & 0x1f) |
+			     EMAC_MII_DATA_TA,
+			     priv->PHY_baseaddr + EMAC_MII_DATA_REG);
+	} else {
+		/* start a read op */
+		__raw_writel(EMAC_MII_DATA_ST | EMAC_MII_DATA_OP_RD |
+			     EMAC_MII_DATA_PA(mii_id) |
+			     EMAC_MII_DATA_RA(regnum) |
+			     EMAC_MII_DATA_TA, priv->PHY_baseaddr +
+			     EMAC_MII_DATA_REG);
+	}
 
 	if (pfe_eth_gemac_phy_timeout( priv, EMAC_MDIO_TIMEOUT))	{
 		netdev_err(priv->dev, "%s: phy MDIO read timeout\n", __func__);
@@ -1411,8 +1453,12 @@ static void ls1012a_configure_serdes(struct net_device *dev)
 {
 	struct pfe_eth_priv_s *priv = pfe->eth.eth_priv[0];  // FIXME This will not work for EMAC2 as SGMII
         /*int value,sgmii_2500=0; */
+	int sgmii_2500 = 0;
 	struct mii_bus *bus = priv->mii_bus;
 
+	if (priv->einfo->mii_config == PHY_INTERFACE_MODE_SGMII_2500)
+		sgmii_2500 = 1;
+
 	netif_info(priv, drv, dev, "%s\n", __func__);
         /* PCS configuration done with corresponding GEMAC */
 
@@ -1421,10 +1467,18 @@ static void ls1012a_configure_serdes(struct net_device *dev)
 #if 1
        /*These settings taken from validtion team */
         pfe_eth_mdio_write(bus, 0, 0x0, 0x8000);
-        pfe_eth_mdio_write(bus, 0, 0x14, 0xb); 
-        pfe_eth_mdio_write(bus, 0, 0x4, 0x1a1);
-        pfe_eth_mdio_write(bus, 0, 0x12, 0x400);
-        pfe_eth_mdio_write(bus, 0, 0x13, 0x0);
+	if (sgmii_2500) {
+		pfe_eth_mdio_write(bus, 0, 0x14, 0x9);
+		pfe_eth_mdio_write(bus, 0, 0x4, 0x4001);
+		pfe_eth_mdio_write(bus, 0, 0x12, 0xa120);
+		pfe_eth_mdio_write(bus, 0, 0x13, 0x7);
+	} else {
+		pfe_eth_mdio_write(bus, 0, 0x14, 0xb);
+		pfe_eth_mdio_write(bus, 0, 0x4, 0x1a1);
+		pfe_eth_mdio_write(bus, 0, 0x12, 0x400);
+		pfe_eth_mdio_write(bus, 0, 0x13, 0x0);
+	}
+
         pfe_eth_mdio_write(bus, 0, 0x0, 0x1140);
         return;
 #else
@@ -1478,7 +1532,9 @@ static int pfe_phy_init(struct net_device *dev)
 	interface = pfe_get_interface(dev);
 #else
 	interface = priv->einfo->mii_config;
-	if(interface == PHY_INTERFACE_MODE_SGMII) {
+	if ((interface == PHY_INTERFACE_MODE_SGMII) ||
+	    (interface == PHY_INTERFACE_MODE_SGMII_2500)) {
+
 		/*Configure SGMII PCS */
 		if(pfe->scfg) {
 			/*Config MDIO from serdes */
diff --git a/include/linux/phy.h b/include/linux/phy.h
index ec9ea0d..6b6a25e 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -124,6 +124,8 @@ static inline const char *phy_modes(phy_interface_t interface)
 		return "moca";
 	case PHY_INTERFACE_MODE_QSGMII:
 		return "qsgmii";
+	case PHY_INTERFACE_MODE_SGMII_2500:
+		return "sgmii-2500";
 	default:
 		return "unknown";
 	}
-- 
1.7.5.4

