From 1b4c508998177aab37627d62ce45b4e1e52da147 Mon Sep 17 00:00:00 2001
From: Ahmed Mansour <Ahmed.Mansour@nxp.com>
Date: Thu, 12 May 2016 18:48:08 -0400
Subject: [PATCH 125/508] fsl_qman: Fix endianness class queue query

Added endianness conversion functions to support little endian
architectures. This issue was spotted on ls1043 because it is the
first part that mixed DPAA1 big endian hardware with a little endian
ARM core

JIRA issue#: QLINUX-5655

Signed-off-by: Ahmed Mansour <Ahmed.Mansour@nxp.com>
[Original patch taken from SDK-V2.0-1703]
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c |   26 +++++++++++++++++++++++---
 1 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index adb0d9d..7ca165b 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -411,6 +411,23 @@ static inline void hw_fd_to_cpu(struct qm_fd *fd)
 	fd->opaque = be32_to_cpu(fd->opaque);
 }
 
+static inline void hw_cq_query_to_cpu(struct qm_mcr_ceetm_cq_query *cq_query)
+{
+	cq_query->ccgid = be16_to_cpu(cq_query->ccgid);
+	cq_query->state = be16_to_cpu(cq_query->state);
+	cq_query->pfdr_hptr = be24_to_cpu(cq_query->pfdr_hptr);
+	cq_query->pfdr_tptr = be24_to_cpu(cq_query->pfdr_tptr);
+	cq_query->od1_xsfdr = be16_to_cpu(cq_query->od1_xsfdr);
+	cq_query->od2_xsfdr = be16_to_cpu(cq_query->od2_xsfdr);
+	cq_query->od3_xsfdr = be16_to_cpu(cq_query->od3_xsfdr);
+	cq_query->od4_xsfdr = be16_to_cpu(cq_query->od4_xsfdr);
+	cq_query->od5_xsfdr = be16_to_cpu(cq_query->od5_xsfdr);
+	cq_query->od6_xsfdr = be16_to_cpu(cq_query->od6_xsfdr);
+	cq_query->ra1_xsfdr = be16_to_cpu(cq_query->ra1_xsfdr);
+	cq_query->ra2_xsfdr = be16_to_cpu(cq_query->ra2_xsfdr);
+	cq_query->frm_cnt = be24_to_cpu(cq_query->frm_cnt);
+}
+
 /* In the case that slow- and fast-path handling are both done by qman_poll()
  * (ie. because there is no interrupt handling), we ought to balance how often
  * we do the fast-path poll versus the slow-path poll. We'll use two decrementer
@@ -3160,13 +3177,17 @@ int qman_ceetm_query_cq(unsigned int cqid, unsigned int dcpid,
 	PORTAL_IRQ_LOCK(p, irqflags);
 
 	mcc = qm_mc_start(&p->p);
-	mcc->cq_query.cqid = cqid;
+	mcc->cq_query.cqid = cpu_to_be16(cqid);
 	mcc->cq_query.dcpid = dcpid;
 	qm_mc_commit(&p->p, QM_CEETM_VERB_CQ_QUERY);
 	while (!(mcr = qm_mc_result(&p->p)))
 		cpu_relax();
-	res = mcr->result;
 	DPA_ASSERT((mcr->verb & QM_MCR_VERB_MASK) == QM_CEETM_VERB_CQ_QUERY);
+	res = mcr->result;
+	if (res == QM_MCR_RESULT_OK) {
+		*cq_query = mcr->cq_query;
+		hw_cq_query_to_cpu(cq_query);
+	}
 
 	PORTAL_IRQ_UNLOCK(p, irqflags);
 	put_affine_portal();
@@ -3176,7 +3197,6 @@ int qman_ceetm_query_cq(unsigned int cqid, unsigned int dcpid,
 		return -EIO;
 	}
 
-	*cq_query = mcr->cq_query;
 	return 0;
 }
 EXPORT_SYMBOL(qman_ceetm_query_cq);
-- 
1.7.5.4

