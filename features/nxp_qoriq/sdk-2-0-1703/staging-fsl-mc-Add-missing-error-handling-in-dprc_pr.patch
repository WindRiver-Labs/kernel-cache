From 8c37edbec185bcf72500ae842665224bd0566e0d Mon Sep 17 00:00:00 2001
From: "J. German Rivera" <German.Rivera@freescale.com>
Date: Fri, 8 May 2015 20:49:38 -0500
Subject: [PATCH 017/508] staging: fsl-mc: Add missing error handling in
 dprc_probe()

If dprc_probe() fails for the root DPRC, fsl_mc_bus_type.dev_root
needs to be set to NULL, to prevent other drivers to access
the root DPRC.

Signed-off-by: J. German Rivera <German.Rivera@freescale.com>
Change-Id: Ibb76e7984fbd1c5aa8dc1f0d393d2b526e3960f5
Reviewed-on: http://git.am.freescale.net:8181/36133
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Bharat Bhushan <Bharat.Bhushan@freescale.com>
Reviewed-by: Itai Katz <itai.katz@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
(cherry picked from commit 70cddb2a765007a4d4d4e44a94c00f36e63d32fc)
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dprc-driver.c |   13 +++++++++++++
 drivers/staging/fsl-mc/bus/mc-bus.c      |    5 ++++-
 2 files changed, 17 insertions(+), 1 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dprc-driver.c b/drivers/staging/fsl-mc/bus/dprc-driver.c
index 9966b40..47a1761 100644
--- a/drivers/staging/fsl-mc/bus/dprc-driver.c
+++ b/drivers/staging/fsl-mc/bus/dprc-driver.c
@@ -740,6 +740,7 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 	struct fsl_mc_bus *mc_bus = to_fsl_mc_bus(mc_dev);
 	bool mc_io_created = false;
 	bool msi_domain_set = false;
+	bool dev_root_set = false;
 
 	if (WARN_ON(strcmp(mc_dev->obj_desc.type, "dprc") != 0))
 		return -EINVAL;
@@ -757,6 +758,9 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 		if (WARN_ON(mc_dev->obj_desc.region_count == 0))
 			return -EINVAL;
 
+		if (WARN_ON(!fsl_mc_bus_type.dev_root))
+			return -EINVAL;
+
 		region_size = mc_dev->regions[0].end -
 			      mc_dev->regions[0].start + 1;
 
@@ -795,6 +799,12 @@ static int dprc_probe(struct fsl_mc_device *mc_dev)
 			dev_set_msi_domain(&mc_dev->dev, mc_msi_domain);
 			msi_domain_set = true;
 		}
+
+		if (WARN_ON(fsl_mc_bus_type.dev_root))
+			return -EINVAL;
+
+		fsl_mc_bus_type.dev_root = &mc_dev->dev;
+		dev_root_set = true;
 	}
 
 	error = dprc_open(mc_dev->mc_io, 0, mc_dev->obj_desc.id,
@@ -895,6 +905,9 @@ error_cleanup_msi_domain:
 		mc_dev->mc_io = NULL;
 	}
 
+	if (dev_root_set)
+		fsl_mc_bus_type.dev_root = NULL;
+
 	return error;
 }
 
diff --git a/drivers/staging/fsl-mc/bus/mc-bus.c b/drivers/staging/fsl-mc/bus/mc-bus.c
index 9277a5f..aca3dd0 100644
--- a/drivers/staging/fsl-mc/bus/mc-bus.c
+++ b/drivers/staging/fsl-mc/bus/mc-bus.c
@@ -55,9 +55,12 @@ static int fsl_mc_bus_match(struct device *dev, struct device_driver *drv)
 	/*
 	 * If the object is not 'plugged' don't match.
 	 * Only exception is the root DPRC, which is a special case.
+	 *
+	 * NOTE: Only when this function is invoked for the root DPRC,
+	 * mc_dev->mc_io is not NULL
 	 */
 	if ((mc_dev->obj_desc.state & DPRC_OBJ_STATE_PLUGGED) == 0 &&
-	    !fsl_mc_is_root_dprc(&mc_dev->dev))
+		!mc_dev->mc_io)
 		goto out;
 
 	/*
-- 
1.7.5.4

